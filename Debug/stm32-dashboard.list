
stm32-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b01c  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003244  0800b1b0  0800b1b0  0000c1b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e3f4  0800e3f4  000100fc  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800e3f4  0800e3f4  0000f3f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e3fc  0800e3fc  000100fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800e3fc  0800e3fc  0000f3fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e404  0800e404  0000f404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  0800e408  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000015d4  200000fc  0800e504  000100fc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200016d0  0800e504  000106d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000100fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ad8b  00000000  00000000  0001012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000479e  00000000  00000000  0002aeb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001660  00000000  00000000  0002f658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001106  00000000  00000000  00030cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001c8f9  00000000  00000000  00031dbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001affa  00000000  00000000  0004e6b7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009432d  00000000  00000000  000696b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fd9de  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c80  00000000  00000000  000fda24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  001036a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200000fc 	.word	0x200000fc
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800b198 	.word	0x0800b198

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000100 	.word	0x20000100
 80001d0:	0800b198 	.word	0x0800b198

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_DMA_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_DMA_Init+0x68>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_DMA_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x68>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f002 fa07 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f002 fa20 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	203b      	movs	r0, #59	@ 0x3b
 8000554:	f002 f9ff 	bl	8002956 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000558:	203b      	movs	r0, #59	@ 0x3b
 800055a:	f002 fa18 	bl	800298e <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b47      	ldr	r3, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x138>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a46      	ldr	r2, [pc, #280]	@ (80006a4 <MX_GPIO_Init+0x138>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b44      	ldr	r3, [pc, #272]	@ (80006a4 <MX_GPIO_Init+0x138>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b40      	ldr	r3, [pc, #256]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a3f      	ldr	r2, [pc, #252]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b3d      	ldr	r3, [pc, #244]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a38      	ldr	r2, [pc, #224]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a31      	ldr	r2, [pc, #196]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	482b      	ldr	r0, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0x13c>)
 80005fa:	f002 fef9 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000604:	f002 fef4 	bl	80033f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8000608:	2200      	movs	r2, #0
 800060a:	213b      	movs	r1, #59	@ 0x3b
 800060c:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <MX_GPIO_Init+0x144>)
 800060e:	f002 feef 	bl	80033f0 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8000612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	481f      	ldr	r0, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0x13c>)
 800062c:	f002 fd5c 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin button3_Pin button2_Pin
                           button1_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin|button3_Pin|button2_Pin
 8000630:	f240 7306 	movw	r3, #1798	@ 0x706
 8000634:	617b      	str	r3, [r7, #20]
                          |button1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4819      	ldr	r0, [pc, #100]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000646:	f002 fd4f 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 800064a:	2310      	movs	r3, #16
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000662:	f002 fd41 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8000666:	233b      	movs	r3, #59	@ 0x3b
 8000668:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0x144>)
 800067e:	f002 fd33 	bl	80030e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4_Pin */
  GPIO_InitStruct.Pin = button4_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_GPIO_Init+0x144>)
 8000698:	f002 fd26 	bl	80030e8 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	@ 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b6:	f2ad 4de4 	subw	sp, sp, #1252	@ 0x4e4
 80006ba:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f001 ffda 	bl	8002674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f904 	bl	80008cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f7ff ff52 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f7ff ff1a 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 80006cc:	f000 fba6 	bl	8000e1c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80006d0:	f009 fff0 	bl	800a6b4 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80006d4:	f000 fbda 	bl	8000e8c <MX_SPI2_Init>
  MX_TIM4_Init();
 80006d8:	f000 fd48 	bl	800116c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  for (int i = 0; i < 5; i++) {
 80006dc:	2300      	movs	r3, #0
 80006de:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 80006e2:	e016      	b.n	8000712 <main+0x5e>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, SET);
 80006e4:	2201      	movs	r2, #1
 80006e6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006ea:	4870      	ldr	r0, [pc, #448]	@ (80008ac <main+0x1f8>)
 80006ec:	f002 fe80 	bl	80033f0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80006f0:	2064      	movs	r0, #100	@ 0x64
 80006f2:	f002 f831 	bl	8002758 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, RESET);
 80006f6:	2200      	movs	r2, #0
 80006f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006fc:	486b      	ldr	r0, [pc, #428]	@ (80008ac <main+0x1f8>)
 80006fe:	f002 fe77 	bl	80033f0 <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 8000702:	2064      	movs	r0, #100	@ 0x64
 8000704:	f002 f828 	bl	8002758 <HAL_Delay>
  for (int i = 0; i < 5; i++) {
 8000708:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 800070c:	3301      	adds	r3, #1
 800070e:	f8c7 34d4 	str.w	r3, [r7, #1236]	@ 0x4d4
 8000712:	f8d7 34d4 	ldr.w	r3, [r7, #1236]	@ 0x4d4
 8000716:	2b04      	cmp	r3, #4
 8000718:	dde4      	ble.n	80006e4 <main+0x30>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  resetScreen();
 800071a:	f000 fed5 	bl	80014c8 <resetScreen>
  initializeScreen();
 800071e:	f000 fef1 	bl	8001504 <initializeScreen>

  char *uga = "uga motorsports";
 8000722:	4b63      	ldr	r3, [pc, #396]	@ (80008b0 <main+0x1fc>)
 8000724:	f8c7 34d0 	str.w	r3, [r7, #1232]	@ 0x4d0
  drawString(uga, FREE_SANS_18PT7B, 240, 160, NO_FLIP_OBJECT | CENTER_OBJECT);
 8000728:	2302      	movs	r3, #2
 800072a:	9300      	str	r3, [sp, #0]
 800072c:	23a0      	movs	r3, #160	@ 0xa0
 800072e:	22f0      	movs	r2, #240	@ 0xf0
 8000730:	4960      	ldr	r1, [pc, #384]	@ (80008b4 <main+0x200>)
 8000732:	f8d7 04d0 	ldr.w	r0, [r7, #1232]	@ 0x4d0
 8000736:	f001 f98e 	bl	8001a56 <drawString>
  HAL_Delay(400);
 800073a:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 800073e:	f002 f80b 	bl	8002758 <HAL_Delay>
  clearScreenfast(0x0000);
 8000742:	2000      	movs	r0, #0
 8000744:	f000 fffa 	bl	800173c <clearScreenfast>
  initializeMCP2515();
 8000748:	f000 f932 	bl	80009b0 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {834, 1668, 2502, 3336, 4170, 5004, 5838, 6672, 7506, 8340,
 800074c:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000750:	f2a3 439c 	subw	r3, r3, #1180	@ 0x49c
 8000754:	4a58      	ldr	r2, [pc, #352]	@ (80008b8 <main+0x204>)
 8000756:	461c      	mov	r4, r3
 8000758:	4615      	mov	r5, r2
 800075a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800075c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800075e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000760:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000762:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000766:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  9174, 10008};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800076a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800076e:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 8000772:	2100      	movs	r1, #0
 8000774:	4851      	ldr	r0, [pc, #324]	@ (80008bc <main+0x208>)
 8000776:	f000 f9d3 	bl	8000b20 <shiftLightsInit>
  HAL_Delay(500);
 800077a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800077e:	f001 ffeb 	bl	8002758 <HAL_Delay>
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000782:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8000786:	f507 6293 	add.w	r2, r7, #1176	@ 0x498
 800078a:	2100      	movs	r1, #0
 800078c:	484b      	ldr	r0, [pc, #300]	@ (80008bc <main+0x208>)
 800078e:	f000 fadd 	bl	8000d4c <startUp>

  struct can_frame frame;
  char rpmresult[20] = "not recieved rpm";
 8000792:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000796:	f2a3 46c4 	subw	r6, r3, #1220	@ 0x4c4
 800079a:	4b49      	ldr	r3, [pc, #292]	@ (80008c0 <main+0x20c>)
 800079c:	4634      	mov	r4, r6
 800079e:	461d      	mov	r5, r3
 80007a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007a2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007a4:	682b      	ldr	r3, [r5, #0]
 80007a6:	7023      	strb	r3, [r4, #0]
 80007a8:	f106 0311 	add.w	r3, r6, #17
 80007ac:	2200      	movs	r2, #0
 80007ae:	801a      	strh	r2, [r3, #0]
 80007b0:	709a      	strb	r2, [r3, #2]
  char tempresult[20] = "not received temp";
 80007b2:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007b6:	f5a3 669b 	sub.w	r6, r3, #1240	@ 0x4d8
 80007ba:	4b42      	ldr	r3, [pc, #264]	@ (80008c4 <main+0x210>)
 80007bc:	4634      	mov	r4, r6
 80007be:	461d      	mov	r5, r3
 80007c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80007c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80007c4:	682b      	ldr	r3, [r5, #0]
 80007c6:	8023      	strh	r3, [r4, #0]
 80007c8:	2300      	movs	r3, #0
 80007ca:	8273      	strh	r3, [r6, #18]

  while (1)
  {
	  int canresult = readMessage(&frame);
 80007cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007d0:	4618      	mov	r0, r3
 80007d2:	f000 f8ff 	bl	80009d4 <readMessage>
 80007d6:	f8c7 04cc 	str.w	r0, [r7, #1228]	@ 0x4cc
	  if (canresult == 0) {
 80007da:	f8d7 34cc 	ldr.w	r3, [r7, #1228]	@ 0x4cc
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d14e      	bne.n	8000880 <main+0x1cc>
		  if (frame.can_id == 1512) {
 80007e2:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007e6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 80007f0:	d127      	bne.n	8000842 <main+0x18e>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 80007f2:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 80007f6:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 80007fa:	7a9b      	ldrb	r3, [r3, #10]
 80007fc:	021b      	lsls	r3, r3, #8
 80007fe:	b29b      	uxth	r3, r3
 8000800:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8000804:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 8000808:	7ad2      	ldrb	r2, [r2, #11]
 800080a:	4413      	add	r3, r2
 800080c:	f8a7 34c8 	strh.w	r3, [r7, #1224]	@ 0x4c8
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 8000810:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 8000814:	f107 006c 	add.w	r0, r7, #108	@ 0x6c
 8000818:	f507 6193 	add.w	r1, r7, #1176	@ 0x498
 800081c:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 8000820:	9201      	str	r2, [sp, #4]
 8000822:	9300      	str	r3, [sp, #0]
 8000824:	4603      	mov	r3, r0
 8000826:	460a      	mov	r2, r1
 8000828:	2100      	movs	r1, #0
 800082a:	4824      	ldr	r0, [pc, #144]	@ (80008bc <main+0x208>)
 800082c:	f000 fa08 	bl	8000c40 <UpdateShiftLights>
			  itoa(rpm, rpmresult, 10);
 8000830:	f8b7 34c8 	ldrh.w	r3, [r7, #1224]	@ 0x4c8
 8000834:	f107 0114 	add.w	r1, r7, #20
 8000838:	220a      	movs	r2, #10
 800083a:	4618      	mov	r0, r3
 800083c:	f00a fc3c 	bl	800b0b8 <itoa>
 8000840:	e01e      	b.n	8000880 <main+0x1cc>
		  } else if (frame.can_id == 1513){
 8000842:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000846:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	f240 52e9 	movw	r2, #1513	@ 0x5e9
 8000850:	4293      	cmp	r3, r2
 8000852:	d115      	bne.n	8000880 <main+0x1cc>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 8000854:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8000858:	f5a3 6396 	sub.w	r3, r3, #1200	@ 0x4b0
 800085c:	7b1b      	ldrb	r3, [r3, #12]
 800085e:	021b      	lsls	r3, r3, #8
 8000860:	b29b      	uxth	r3, r3
 8000862:	f507 629b 	add.w	r2, r7, #1240	@ 0x4d8
 8000866:	f5a2 6296 	sub.w	r2, r2, #1200	@ 0x4b0
 800086a:	7b52      	ldrb	r2, [r2, #13]
 800086c:	4413      	add	r3, r2
 800086e:	f8a7 34ca 	strh.w	r3, [r7, #1226]	@ 0x4ca
			  itoa(temp, tempresult, 10);
 8000872:	f8b7 34ca 	ldrh.w	r3, [r7, #1226]	@ 0x4ca
 8000876:	4639      	mov	r1, r7
 8000878:	220a      	movs	r2, #10
 800087a:	4618      	mov	r0, r3
 800087c:	f00a fc1c 	bl	800b0b8 <itoa>
		  }
	  }


	  clearScreenfast(0x0000);
 8000880:	2000      	movs	r0, #0
 8000882:	f000 ff5b 	bl	800173c <clearScreenfast>
	  drawString(rpmresult, FREE_MONO_BOLD_24PT7B, 240, 160, NO_FLIP_OBJECT | CENTER_OBJECT);
 8000886:	f107 0014 	add.w	r0, r7, #20
 800088a:	2302      	movs	r3, #2
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	23a0      	movs	r3, #160	@ 0xa0
 8000890:	22f0      	movs	r2, #240	@ 0xf0
 8000892:	490d      	ldr	r1, [pc, #52]	@ (80008c8 <main+0x214>)
 8000894:	f001 f8df 	bl	8001a56 <drawString>
	  drawString(tempresult, FREE_SANS_18PT7B, 240, 80, NO_FLIP_OBJECT | CENTER_OBJECT);
 8000898:	4638      	mov	r0, r7
 800089a:	2302      	movs	r3, #2
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2350      	movs	r3, #80	@ 0x50
 80008a0:	22f0      	movs	r2, #240	@ 0xf0
 80008a2:	4904      	ldr	r1, [pc, #16]	@ (80008b4 <main+0x200>)
 80008a4:	f001 f8d7 	bl	8001a56 <drawString>
  {
 80008a8:	e790      	b.n	80007cc <main+0x118>
 80008aa:	bf00      	nop
 80008ac:	40020800 	.word	0x40020800
 80008b0:	0800b1b0 	.word	0x0800b1b0
 80008b4:	0800e39c 	.word	0x0800e39c
 80008b8:	0800b1c0 	.word	0x0800b1c0
 80008bc:	2000023c 	.word	0x2000023c
 80008c0:	0800b1f0 	.word	0x0800b1f0
 80008c4:	0800b204 	.word	0x0800b204
 80008c8:	0800d054 	.word	0x0800d054

080008cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b094      	sub	sp, #80	@ 0x50
 80008d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008d2:	f107 0320 	add.w	r3, r7, #32
 80008d6:	2230      	movs	r2, #48	@ 0x30
 80008d8:	2100      	movs	r1, #0
 80008da:	4618      	mov	r0, r3
 80008dc:	f00a fc30 	bl	800b140 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	2200      	movs	r2, #0
 80008e6:	601a      	str	r2, [r3, #0]
 80008e8:	605a      	str	r2, [r3, #4]
 80008ea:	609a      	str	r2, [r3, #8]
 80008ec:	60da      	str	r2, [r3, #12]
 80008ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f0:	2300      	movs	r3, #0
 80008f2:	60bb      	str	r3, [r7, #8]
 80008f4:	4b29      	ldr	r3, [pc, #164]	@ (800099c <SystemClock_Config+0xd0>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f8:	4a28      	ldr	r2, [pc, #160]	@ (800099c <SystemClock_Config+0xd0>)
 80008fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000900:	4b26      	ldr	r3, [pc, #152]	@ (800099c <SystemClock_Config+0xd0>)
 8000902:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000904:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800090c:	2300      	movs	r3, #0
 800090e:	607b      	str	r3, [r7, #4]
 8000910:	4b23      	ldr	r3, [pc, #140]	@ (80009a0 <SystemClock_Config+0xd4>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000918:	4a21      	ldr	r2, [pc, #132]	@ (80009a0 <SystemClock_Config+0xd4>)
 800091a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800091e:	6013      	str	r3, [r2, #0]
 8000920:	4b1f      	ldr	r3, [pc, #124]	@ (80009a0 <SystemClock_Config+0xd4>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000928:	607b      	str	r3, [r7, #4]
 800092a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800092c:	2301      	movs	r3, #1
 800092e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000930:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000934:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000936:	2302      	movs	r3, #2
 8000938:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800093a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800093e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000940:	2319      	movs	r3, #25
 8000942:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000944:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000948:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800094a:	2304      	movs	r3, #4
 800094c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800094e:	2307      	movs	r3, #7
 8000950:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000952:	f107 0320 	add.w	r3, r7, #32
 8000956:	4618      	mov	r0, r3
 8000958:	f003 ffb6 	bl	80048c8 <HAL_RCC_OscConfig>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000962:	f000 f81f 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000966:	230f      	movs	r3, #15
 8000968:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800096a:	2302      	movs	r3, #2
 800096c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000972:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000976:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000978:	2300      	movs	r3, #0
 800097a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800097c:	f107 030c 	add.w	r3, r7, #12
 8000980:	2102      	movs	r1, #2
 8000982:	4618      	mov	r0, r3
 8000984:	f004 fa18 	bl	8004db8 <HAL_RCC_ClockConfig>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800098e:	f000 f809 	bl	80009a4 <Error_Handler>
  }
}
 8000992:	bf00      	nop
 8000994:	3750      	adds	r7, #80	@ 0x50
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	40023800 	.word	0x40023800
 80009a0:	40007000 	.word	0x40007000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80009b0:	b580      	push	{r7, lr}
 80009b2:	af00      	add	r7, sp, #0
	myMCP.reset();
 80009b4:	4806      	ldr	r0, [pc, #24]	@ (80009d0 <initializeMCP2515+0x20>)
 80009b6:	f001 f91d 	bl	8001bf4 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80009ba:	2202      	movs	r2, #2
 80009bc:	210e      	movs	r1, #14
 80009be:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <initializeMCP2515+0x20>)
 80009c0:	f001 faea 	bl	8001f98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80009c4:	4802      	ldr	r0, [pc, #8]	@ (80009d0 <initializeMCP2515+0x20>)
 80009c6:	f001 fa9b 	bl	8001f00 <_ZN7MCP251513setNormalModeEv>
}
 80009ca:	bf00      	nop
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	20000118 	.word	0x20000118

080009d4 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80009dc:	6879      	ldr	r1, [r7, #4]
 80009de:	4804      	ldr	r0, [pc, #16]	@ (80009f0 <readMessage+0x1c>)
 80009e0:	f001 fdf2 	bl	80025c8 <_ZN7MCP251511readMessageEP9can_frame>
 80009e4:	4603      	mov	r3, r0
}
 80009e6:	4618      	mov	r0, r3
 80009e8:	3708      	adds	r7, #8
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000118 	.word	0x20000118

080009f4 <_Z41__static_initialization_and_destruction_0v>:
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 80009fa:	2310      	movs	r3, #16
 80009fc:	9300      	str	r3, [sp, #0]
 80009fe:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8000a00:	220a      	movs	r2, #10
 8000a02:	4904      	ldr	r1, [pc, #16]	@ (8000a14 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000a04:	4804      	ldr	r0, [pc, #16]	@ (8000a18 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8000a06:	f001 f895 	bl	8001b34 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8000a0a:	bf00      	nop
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40020000 	.word	0x40020000
 8000a14:	20000184 	.word	0x20000184
 8000a18:	20000118 	.word	0x20000118

08000a1c <_GLOBAL__sub_I_myMCP>:
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	f7ff ffe8 	bl	80009f4 <_Z41__static_initialization_and_destruction_0v>
 8000a24:	bd80      	pop	{r7, pc}
	...

08000a28 <setColor>:
static int datasentflag = 0;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b088      	sub	sp, #32
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	60f8      	str	r0, [r7, #12]
 8000a30:	60b9      	str	r1, [r7, #8]
 8000a32:	4611      	mov	r1, r2
 8000a34:	461a      	mov	r2, r3
 8000a36:	460b      	mov	r3, r1
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8000a3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000a40:	4613      	mov	r3, r2
 8000a42:	005b      	lsls	r3, r3, #1
 8000a44:	4413      	add	r3, r2
 8000a46:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8000a48:	693b      	ldr	r3, [r7, #16]
 8000a4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a4c:	4413      	add	r3, r2
 8000a4e:	79fa      	ldrb	r2, [r7, #7]
 8000a50:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 8000a52:	693b      	ldr	r3, [r7, #16]
 8000a54:	3301      	adds	r3, #1
 8000a56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a58:	4413      	add	r3, r2
 8000a5a:	79ba      	ldrb	r2, [r7, #6]
 8000a5c:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8000a5e:	693b      	ldr	r3, [r7, #16]
 8000a60:	3302      	adds	r3, #2
 8000a62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a64:	4413      	add	r3, r2
 8000a66:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000a6a:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 8000a6c:	693b      	ldr	r3, [r7, #16]
 8000a6e:	61fb      	str	r3, [r7, #28]
 8000a70:	e02a      	b.n	8000ac8 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	61bb      	str	r3, [r7, #24]
 8000a76:	e021      	b.n	8000abc <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000a7c:	4413      	add	r3, r2
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	fa02 f303 	lsl.w	r3, r2, r3
 8000a88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d009      	beq.n	8000aa4 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8000a90:	69fb      	ldr	r3, [r7, #28]
 8000a92:	00da      	lsls	r2, r3, #3
 8000a94:	69bb      	ldr	r3, [r7, #24]
 8000a96:	4413      	add	r3, r2
 8000a98:	005b      	lsls	r3, r3, #1
 8000a9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000a9c:	4413      	add	r3, r2
 8000a9e:	2246      	movs	r2, #70	@ 0x46
 8000aa0:	801a      	strh	r2, [r3, #0]
 8000aa2:	e008      	b.n	8000ab6 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8000aa4:	69fb      	ldr	r3, [r7, #28]
 8000aa6:	00da      	lsls	r2, r3, #3
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	4413      	add	r3, r2
 8000aac:	005b      	lsls	r3, r3, #1
 8000aae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ab0:	4413      	add	r3, r2
 8000ab2:	2223      	movs	r2, #35	@ 0x23
 8000ab4:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8000ab6:	69bb      	ldr	r3, [r7, #24]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	61bb      	str	r3, [r7, #24]
 8000abc:	69bb      	ldr	r3, [r7, #24]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	ddda      	ble.n	8000a78 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8000ac2:	69fb      	ldr	r3, [r7, #28]
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	61fb      	str	r3, [r7, #28]
 8000ac8:	693b      	ldr	r3, [r7, #16]
 8000aca:	3302      	adds	r3, #2
 8000acc:	69fa      	ldr	r2, [r7, #28]
 8000ace:	429a      	cmp	r2, r3
 8000ad0:	ddcf      	ble.n	8000a72 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000ad2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000ad6:	617b      	str	r3, [r7, #20]
 8000ad8:	e008      	b.n	8000aec <setColor+0xc4>
    	ledbytes[i] = 0;
 8000ada:	697b      	ldr	r3, [r7, #20]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ae0:	4413      	add	r3, r2
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	617b      	str	r3, [r7, #20]
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	f240 2215 	movw	r2, #533	@ 0x215
 8000af2:	4293      	cmp	r3, r2
 8000af4:	ddf1      	ble.n	8000ada <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000af6:	f240 2316 	movw	r3, #534	@ 0x216
 8000afa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000afc:	68b9      	ldr	r1, [r7, #8]
 8000afe:	68f8      	ldr	r0, [r7, #12]
 8000b00:	f005 fad4 	bl	80060ac <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8000b04:	bf00      	nop
 8000b06:	4b05      	ldr	r3, [pc, #20]	@ (8000b1c <setColor+0xf4>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d0fb      	beq.n	8000b06 <setColor+0xde>
    datasentflag = 0;
 8000b0e:	4b03      	ldr	r3, [pc, #12]	@ (8000b1c <setColor+0xf4>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
}
 8000b14:	bf00      	nop
 8000b16:	3720      	adds	r7, #32
 8000b18:	46bd      	mov	sp, r7
 8000b1a:	bd80      	pop	{r7, pc}
 8000b1c:	20000128 	.word	0x20000128

08000b20 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	60f8      	str	r0, [r7, #12]
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
 8000b32:	e013      	b.n	8000b5c <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8000b34:	69fb      	ldr	r3, [r7, #28]
 8000b36:	687a      	ldr	r2, [r7, #4]
 8000b38:	4413      	add	r3, r2
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3301      	adds	r3, #1
 8000b42:	687a      	ldr	r2, [r7, #4]
 8000b44:	4413      	add	r3, r2
 8000b46:	2200      	movs	r2, #0
 8000b48:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 0;
 8000b4a:	69fb      	ldr	r3, [r7, #28]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	687a      	ldr	r2, [r7, #4]
 8000b50:	4413      	add	r3, r2
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3303      	adds	r3, #3
 8000b5a:	61fb      	str	r3, [r7, #28]
 8000b5c:	69fb      	ldr	r3, [r7, #28]
 8000b5e:	2b2f      	cmp	r3, #47	@ 0x2f
 8000b60:	dde8      	ble.n	8000b34 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8000b62:	2300      	movs	r3, #0
 8000b64:	61bb      	str	r3, [r7, #24]
 8000b66:	e02a      	b.n	8000bbe <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
 8000b6c:	e021      	b.n	8000bb2 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 8000b6e:	69bb      	ldr	r3, [r7, #24]
 8000b70:	687a      	ldr	r2, [r7, #4]
 8000b72:	4413      	add	r3, r2
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	461a      	mov	r2, r3
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d009      	beq.n	8000b9a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8000b86:	69bb      	ldr	r3, [r7, #24]
 8000b88:	00da      	lsls	r2, r3, #3
 8000b8a:	697b      	ldr	r3, [r7, #20]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	005b      	lsls	r3, r3, #1
 8000b90:	683a      	ldr	r2, [r7, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	2246      	movs	r2, #70	@ 0x46
 8000b96:	801a      	strh	r2, [r3, #0]
 8000b98:	e008      	b.n	8000bac <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	00da      	lsls	r2, r3, #3
 8000b9e:	697b      	ldr	r3, [r7, #20]
 8000ba0:	4413      	add	r3, r2
 8000ba2:	005b      	lsls	r3, r3, #1
 8000ba4:	683a      	ldr	r2, [r7, #0]
 8000ba6:	4413      	add	r3, r2
 8000ba8:	2223      	movs	r2, #35	@ 0x23
 8000baa:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	617b      	str	r3, [r7, #20]
 8000bb2:	697b      	ldr	r3, [r7, #20]
 8000bb4:	2b07      	cmp	r3, #7
 8000bb6:	ddda      	ble.n	8000b6e <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8000bb8:	69bb      	ldr	r3, [r7, #24]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	61bb      	str	r3, [r7, #24]
 8000bbe:	69bb      	ldr	r3, [r7, #24]
 8000bc0:	2b2f      	cmp	r3, #47	@ 0x2f
 8000bc2:	ddd1      	ble.n	8000b68 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000bc4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bc8:	613b      	str	r3, [r7, #16]
 8000bca:	e008      	b.n	8000bde <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8000bcc:	693b      	ldr	r3, [r7, #16]
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	4413      	add	r3, r2
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	613b      	str	r3, [r7, #16]
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	f240 2215 	movw	r2, #533	@ 0x215
 8000be4:	4293      	cmp	r3, r2
 8000be6:	ddf1      	ble.n	8000bcc <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000be8:	f240 2316 	movw	r3, #534	@ 0x216
 8000bec:	683a      	ldr	r2, [r7, #0]
 8000bee:	68b9      	ldr	r1, [r7, #8]
 8000bf0:	68f8      	ldr	r0, [r7, #12]
 8000bf2:	f005 fa5b 	bl	80060ac <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8000bf6:	bf00      	nop
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <shiftLightsInit+0xf4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d0fb      	beq.n	8000bf8 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8000c00:	4b04      	ldr	r3, [pc, #16]	@ (8000c14 <shiftLightsInit+0xf4>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8000c06:	2300      	movs	r3, #0
 8000c08:	603b      	str	r3, [r7, #0]
}
 8000c0a:	bf00      	nop
 8000c0c:	3720      	adds	r7, #32
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	20000128 	.word	0x20000128

08000c18 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000c20:	2100      	movs	r1, #0
 8000c22:	4805      	ldr	r0, [pc, #20]	@ (8000c38 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000c24:	f005 fbf2 	bl	800640c <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000c28:	4b04      	ldr	r3, [pc, #16]	@ (8000c3c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	601a      	str	r2, [r3, #0]
}
 8000c2e:	bf00      	nop
 8000c30:	3708      	adds	r7, #8
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	2000023c 	.word	0x2000023c
 8000c3c:	20000128 	.word	0x20000128

08000c40 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	@ 0x28
 8000c44:	af04      	add	r7, sp, #16
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
 8000c4c:	603b      	str	r3, [r7, #0]
  for (int i = 2; i < 14; i++) {
 8000c4e:	2302      	movs	r3, #2
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	e024      	b.n	8000c9e <UpdateShiftLights+0x5e>
    if (current_rpm >= RPM_thresholds[i - 2]) {
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000c5a:	3b02      	subs	r3, #2
 8000c5c:	009b      	lsls	r3, r3, #2
 8000c5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c60:	4413      	add	r3, r2
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	6a3a      	ldr	r2, [r7, #32]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	db08      	blt.n	8000c7c <UpdateShiftLights+0x3c>
        // Turn on the shift light (use appropriate LED control function)
    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8000c6a:	697b      	ldr	r3, [r7, #20]
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	687a      	ldr	r2, [r7, #4]
 8000c72:	68b9      	ldr	r1, [r7, #8]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f000 f81b 	bl	8000cb0 <lightOn>
 8000c7a:	e00d      	b.n	8000c98 <UpdateShiftLights+0x58>
    } else {
        // Turn off the shift light
    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	9303      	str	r3, [sp, #12]
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	9302      	str	r3, [sp, #8]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	9301      	str	r3, [sp, #4]
 8000c88:	2300      	movs	r3, #0
 8000c8a:	9300      	str	r3, [sp, #0]
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	2200      	movs	r2, #0
 8000c90:	68b9      	ldr	r1, [r7, #8]
 8000c92:	68f8      	ldr	r0, [r7, #12]
 8000c94:	f7ff fec8 	bl	8000a28 <setColor>
  for (int i = 2; i < 14; i++) {
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	3301      	adds	r3, #1
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	2b0d      	cmp	r3, #13
 8000ca2:	ddd7      	ble.n	8000c54 <UpdateShiftLights+0x14>
    }
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3718      	adds	r7, #24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
	...

08000cb0 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b088      	sub	sp, #32
 8000cb4:	af04      	add	r7, sp, #16
 8000cb6:	60f8      	str	r0, [r7, #12]
 8000cb8:	60b9      	str	r1, [r7, #8]
 8000cba:	607a      	str	r2, [r7, #4]
 8000cbc:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8000cbe:	69bb      	ldr	r3, [r7, #24]
 8000cc0:	2b0d      	cmp	r3, #13
 8000cc2:	d108      	bne.n	8000cd6 <lightOn+0x26>
		startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	481f      	ldr	r0, [pc, #124]	@ (8000d48 <lightOn+0x98>)
 8000ccc:	f000 f83e 	bl	8000d4c <startUp>
		HAL_Delay(5);
 8000cd0:	2005      	movs	r0, #5
 8000cd2:	f001 fd41 	bl	8002758 <HAL_Delay>
	}
	if (index < 6) {
 8000cd6:	69bb      	ldr	r3, [r7, #24]
 8000cd8:	2b05      	cmp	r3, #5
 8000cda:	dc0e      	bgt.n	8000cfa <lightOn+0x4a>
		setColor(htim, Channel, 255, 255, 0, ledcolors, ledbytes, index);
 8000cdc:	69bb      	ldr	r3, [r7, #24]
 8000cde:	9303      	str	r3, [sp, #12]
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	9302      	str	r3, [sp, #8]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	9301      	str	r3, [sp, #4]
 8000ce8:	2300      	movs	r3, #0
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	23ff      	movs	r3, #255	@ 0xff
 8000cee:	22ff      	movs	r2, #255	@ 0xff
 8000cf0:	68b9      	ldr	r1, [r7, #8]
 8000cf2:	68f8      	ldr	r0, [r7, #12]
 8000cf4:	f7ff fe98 	bl	8000a28 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	}
}
 8000cf8:	e022      	b.n	8000d40 <lightOn+0x90>
	} else if (index < 10) {
 8000cfa:	69bb      	ldr	r3, [r7, #24]
 8000cfc:	2b09      	cmp	r3, #9
 8000cfe:	dc0e      	bgt.n	8000d1e <lightOn+0x6e>
		setColor(htim, Channel, 100, 255, 0, ledcolors, ledbytes, index);
 8000d00:	69bb      	ldr	r3, [r7, #24]
 8000d02:	9303      	str	r3, [sp, #12]
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	9302      	str	r3, [sp, #8]
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	9301      	str	r3, [sp, #4]
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	9300      	str	r3, [sp, #0]
 8000d10:	23ff      	movs	r3, #255	@ 0xff
 8000d12:	2264      	movs	r2, #100	@ 0x64
 8000d14:	68b9      	ldr	r1, [r7, #8]
 8000d16:	68f8      	ldr	r0, [r7, #12]
 8000d18:	f7ff fe86 	bl	8000a28 <setColor>
}
 8000d1c:	e010      	b.n	8000d40 <lightOn+0x90>
	} else if (index < 14){
 8000d1e:	69bb      	ldr	r3, [r7, #24]
 8000d20:	2b0d      	cmp	r3, #13
 8000d22:	dc0d      	bgt.n	8000d40 <lightOn+0x90>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8000d24:	69bb      	ldr	r3, [r7, #24]
 8000d26:	9303      	str	r3, [sp, #12]
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	9302      	str	r3, [sp, #8]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	2300      	movs	r3, #0
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	23ff      	movs	r3, #255	@ 0xff
 8000d36:	2200      	movs	r2, #0
 8000d38:	68b9      	ldr	r1, [r7, #8]
 8000d3a:	68f8      	ldr	r0, [r7, #12]
 8000d3c:	f7ff fe74 	bl	8000a28 <setColor>
}
 8000d40:	bf00      	nop
 8000d42:	3710      	adds	r7, #16
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	2000023c 	.word	0x2000023c

08000d4c <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08c      	sub	sp, #48	@ 0x30
 8000d50:	af04      	add	r7, sp, #16
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
 8000d58:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8000d5e:	2300      	movs	r3, #0
 8000d60:	61fb      	str	r3, [r7, #28]
 8000d62:	e026      	b.n	8000db2 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8000d64:	697a      	ldr	r2, [r7, #20]
 8000d66:	69fb      	ldr	r3, [r7, #28]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	9303      	str	r3, [sp, #12]
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	9302      	str	r3, [sp, #8]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	9301      	str	r3, [sp, #4]
 8000d74:	2300      	movs	r3, #0
 8000d76:	9300      	str	r3, [sp, #0]
 8000d78:	23ff      	movs	r3, #255	@ 0xff
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f7ff fe52 	bl	8000a28 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8000d84:	697a      	ldr	r2, [r7, #20]
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	4413      	add	r3, r2
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	9303      	str	r3, [sp, #12]
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	9302      	str	r3, [sp, #8]
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	9301      	str	r3, [sp, #4]
 8000d96:	2300      	movs	r3, #0
 8000d98:	9300      	str	r3, [sp, #0]
 8000d9a:	23ff      	movs	r3, #255	@ 0xff
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	68b9      	ldr	r1, [r7, #8]
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f7ff fe41 	bl	8000a28 <setColor>
		HAL_Delay(20);
 8000da6:	2014      	movs	r0, #20
 8000da8:	f001 fcd6 	bl	8002758 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	3301      	adds	r3, #1
 8000db0:	61fb      	str	r3, [r7, #28]
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	ddd5      	ble.n	8000d64 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8000db8:	2300      	movs	r3, #0
 8000dba:	61bb      	str	r3, [r7, #24]
 8000dbc:	e026      	b.n	8000e0c <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8000dbe:	697a      	ldr	r2, [r7, #20]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	9303      	str	r3, [sp, #12]
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	9302      	str	r3, [sp, #8]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	9301      	str	r3, [sp, #4]
 8000dce:	2300      	movs	r3, #0
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	68b9      	ldr	r1, [r7, #8]
 8000dd8:	68f8      	ldr	r0, [r7, #12]
 8000dda:	f7ff fe25 	bl	8000a28 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	4413      	add	r3, r2
 8000de4:	3301      	adds	r3, #1
 8000de6:	9303      	str	r3, [sp, #12]
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	9302      	str	r3, [sp, #8]
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	9301      	str	r3, [sp, #4]
 8000df0:	2300      	movs	r3, #0
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	2300      	movs	r3, #0
 8000df6:	2200      	movs	r2, #0
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	68f8      	ldr	r0, [r7, #12]
 8000dfc:	f7ff fe14 	bl	8000a28 <setColor>
		HAL_Delay(20);
 8000e00:	2014      	movs	r0, #20
 8000e02:	f001 fca9 	bl	8002758 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61bb      	str	r3, [r7, #24]
 8000e0c:	69bb      	ldr	r3, [r7, #24]
 8000e0e:	2b05      	cmp	r3, #5
 8000e10:	ddd5      	ble.n	8000dbe <startUp+0x72>
	}
}
 8000e12:	bf00      	nop
 8000e14:	bf00      	nop
 8000e16:	3720      	adds	r7, #32
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e20:	4b18      	ldr	r3, [pc, #96]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e22:	4a19      	ldr	r2, [pc, #100]	@ (8000e88 <MX_SPI1_Init+0x6c>)
 8000e24:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e26:	4b17      	ldr	r3, [pc, #92]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e28:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e2c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e2e:	4b15      	ldr	r3, [pc, #84]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e36:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000e3a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e48:	4b0e      	ldr	r3, [pc, #56]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e4a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e4e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e68:	4b06      	ldr	r3, [pc, #24]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e6a:	220a      	movs	r2, #10
 8000e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	@ (8000e84 <MX_SPI1_Init+0x68>)
 8000e70:	f004 f95a 	bl	8005128 <HAL_SPI_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000e7a:	f7ff fd93 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	2000012c 	.word	0x2000012c
 8000e88:	40013000 	.word	0x40013000

08000e8c <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <MX_SPI2_Init+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000e98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ed8:	220a      	movs	r2, #10
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_SPI2_Init+0x64>)
 8000ede:	f004 f923 	bl	8005128 <HAL_SPI_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ee8:	f7ff fd5c 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	20000184 	.word	0x20000184
 8000ef4:	40003800 	.word	0x40003800

08000ef8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08c      	sub	sp, #48	@ 0x30
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	2200      	movs	r2, #0
 8000f06:	601a      	str	r2, [r3, #0]
 8000f08:	605a      	str	r2, [r3, #4]
 8000f0a:	609a      	str	r2, [r3, #8]
 8000f0c:	60da      	str	r2, [r3, #12]
 8000f0e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a4a      	ldr	r2, [pc, #296]	@ (8001040 <HAL_SPI_MspInit+0x148>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d15c      	bne.n	8000fd4 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	61bb      	str	r3, [r7, #24]
 8000f1e:	4b49      	ldr	r3, [pc, #292]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a48      	ldr	r2, [pc, #288]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f24:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b46      	ldr	r3, [pc, #280]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f32:	61bb      	str	r3, [r7, #24]
 8000f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]
 8000f3a:	4b42      	ldr	r3, [pc, #264]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a41      	ldr	r2, [pc, #260]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f40:	f043 0301 	orr.w	r3, r3, #1
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b3f      	ldr	r3, [pc, #252]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0301 	and.w	r3, r3, #1
 8000f4e:	617b      	str	r3, [r7, #20]
 8000f50:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000f52:	23a0      	movs	r3, #160	@ 0xa0
 8000f54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f56:	2302      	movs	r3, #2
 8000f58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f62:	2305      	movs	r3, #5
 8000f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f66:	f107 031c 	add.w	r3, r7, #28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	4836      	ldr	r0, [pc, #216]	@ (8001048 <HAL_SPI_MspInit+0x150>)
 8000f6e:	f002 f8bb 	bl	80030e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8000f72:	4b36      	ldr	r3, [pc, #216]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f74:	4a36      	ldr	r2, [pc, #216]	@ (8001050 <HAL_SPI_MspInit+0x158>)
 8000f76:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8000f78:	4b34      	ldr	r3, [pc, #208]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f7a:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8000f7e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f80:	4b32      	ldr	r3, [pc, #200]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f82:	2240      	movs	r2, #64	@ 0x40
 8000f84:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f86:	4b31      	ldr	r3, [pc, #196]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f8c:	4b2f      	ldr	r3, [pc, #188]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f8e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f92:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f94:	4b2d      	ldr	r3, [pc, #180]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f9a:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000f9e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000fa2:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8000fa4:	4b29      	ldr	r3, [pc, #164]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000faa:	4b28      	ldr	r3, [pc, #160]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000fb0:	4b26      	ldr	r3, [pc, #152]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8000fb6:	4825      	ldr	r0, [pc, #148]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fb8:	f001 fd04 	bl	80029c4 <HAL_DMA_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8000fc2:	f7ff fcef 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a20      	ldr	r2, [pc, #128]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fca:	649a      	str	r2, [r3, #72]	@ 0x48
 8000fcc:	4a1f      	ldr	r2, [pc, #124]	@ (800104c <HAL_SPI_MspInit+0x154>)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000fd2:	e031      	b.n	8001038 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a1e      	ldr	r2, [pc, #120]	@ (8001054 <HAL_SPI_MspInit+0x15c>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12c      	bne.n	8001038 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000fe8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fec:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	4b11      	ldr	r3, [pc, #68]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001002:	4a10      	ldr	r2, [pc, #64]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 8001004:	f043 0302 	orr.w	r3, r3, #2
 8001008:	6313      	str	r3, [r2, #48]	@ 0x30
 800100a:	4b0e      	ldr	r3, [pc, #56]	@ (8001044 <HAL_SPI_MspInit+0x14c>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	f003 0302 	and.w	r3, r3, #2
 8001012:	60fb      	str	r3, [r7, #12]
 8001014:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001016:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001024:	2303      	movs	r3, #3
 8001026:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001028:	2305      	movs	r3, #5
 800102a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f107 031c 	add.w	r3, r7, #28
 8001030:	4619      	mov	r1, r3
 8001032:	4809      	ldr	r0, [pc, #36]	@ (8001058 <HAL_SPI_MspInit+0x160>)
 8001034:	f002 f858 	bl	80030e8 <HAL_GPIO_Init>
}
 8001038:	bf00      	nop
 800103a:	3730      	adds	r7, #48	@ 0x30
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40013000 	.word	0x40013000
 8001044:	40023800 	.word	0x40023800
 8001048:	40020000 	.word	0x40020000
 800104c:	200001dc 	.word	0x200001dc
 8001050:	40026458 	.word	0x40026458
 8001054:	40003800 	.word	0x40003800
 8001058:	40020400 	.word	0x40020400

0800105c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b10      	ldr	r3, [pc, #64]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800106a:	4a0f      	ldr	r2, [pc, #60]	@ (80010a8 <HAL_MspInit+0x4c>)
 800106c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001070:	6453      	str	r3, [r2, #68]	@ 0x44
 8001072:	4b0d      	ldr	r3, [pc, #52]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	603b      	str	r3, [r7, #0]
 8001082:	4b09      	ldr	r3, [pc, #36]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001086:	4a08      	ldr	r2, [pc, #32]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800108c:	6413      	str	r3, [r2, #64]	@ 0x40
 800108e:	4b06      	ldr	r3, [pc, #24]	@ (80010a8 <HAL_MspInit+0x4c>)
 8001090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001096:	603b      	str	r3, [r7, #0]
 8001098:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40023800 	.word	0x40023800

080010ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010b0:	bf00      	nop
 80010b2:	e7fd      	b.n	80010b0 <NMI_Handler+0x4>

080010b4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010b8:	bf00      	nop
 80010ba:	e7fd      	b.n	80010b8 <HardFault_Handler+0x4>

080010bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010c0:	bf00      	nop
 80010c2:	e7fd      	b.n	80010c0 <MemManage_Handler+0x4>

080010c4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010c8:	bf00      	nop
 80010ca:	e7fd      	b.n	80010c8 <BusFault_Handler+0x4>

080010cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <UsageFault_Handler+0x4>

080010d4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010d8:	bf00      	nop
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr

080010e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr

080010f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fc:	4770      	bx	lr

080010fe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010fe:	b580      	push	{r7, lr}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001102:	f001 fb09 	bl	8002718 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	bd80      	pop	{r7, pc}
	...

0800110c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001110:	4802      	ldr	r0, [pc, #8]	@ (800111c <DMA1_Stream0_IRQHandler+0x10>)
 8001112:	f001 fd7f 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	20000284 	.word	0x20000284

08001120 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001124:	4802      	ldr	r0, [pc, #8]	@ (8001130 <DMA2_Stream3_IRQHandler+0x10>)
 8001126:	f001 fd75 	bl	8002c14 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800112a:	bf00      	nop
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	200001dc 	.word	0x200001dc

08001134 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001134:	b580      	push	{r7, lr}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001138:	4802      	ldr	r0, [pc, #8]	@ (8001144 <OTG_FS_IRQHandler+0x10>)
 800113a:	f002 fab6 	bl	80036aa <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	20000fcc 	.word	0x20000fcc

08001148 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800114c:	4b06      	ldr	r3, [pc, #24]	@ (8001168 <SystemInit+0x20>)
 800114e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001152:	4a05      	ldr	r2, [pc, #20]	@ (8001168 <SystemInit+0x20>)
 8001154:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001158:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b08e      	sub	sp, #56	@ 0x38
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001172:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001180:	f107 0320 	add.w	r3, r7, #32
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]
 8001198:	615a      	str	r2, [r3, #20]
 800119a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800119c:	4b2c      	ldr	r3, [pc, #176]	@ (8001250 <MX_TIM4_Init+0xe4>)
 800119e:	4a2d      	ldr	r2, [pc, #180]	@ (8001254 <MX_TIM4_Init+0xe8>)
 80011a0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80011a2:	4b2b      	ldr	r3, [pc, #172]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a8:	4b29      	ldr	r3, [pc, #164]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80011ae:	4b28      	ldr	r3, [pc, #160]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011b0:	2269      	movs	r2, #105	@ 0x69
 80011b2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b4:	4b26      	ldr	r3, [pc, #152]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011ba:	4b25      	ldr	r3, [pc, #148]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80011c0:	4823      	ldr	r0, [pc, #140]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011c2:	f004 fecb 	bl	8005f5c <HAL_TIM_Base_Init>
 80011c6:	4603      	mov	r3, r0
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d001      	beq.n	80011d0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80011cc:	f7ff fbea 	bl	80009a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80011d6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011da:	4619      	mov	r1, r3
 80011dc:	481c      	ldr	r0, [pc, #112]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011de:	f005 fa9d 	bl	800671c <HAL_TIM_ConfigClockSource>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d001      	beq.n	80011ec <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80011e8:	f7ff fbdc 	bl	80009a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80011ec:	4818      	ldr	r0, [pc, #96]	@ (8001250 <MX_TIM4_Init+0xe4>)
 80011ee:	f004 ff04 	bl	8005ffa <HAL_TIM_PWM_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80011f8:	f7ff fbd4 	bl	80009a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001204:	f107 0320 	add.w	r3, r7, #32
 8001208:	4619      	mov	r1, r3
 800120a:	4811      	ldr	r0, [pc, #68]	@ (8001250 <MX_TIM4_Init+0xe4>)
 800120c:	f005 ff0a 	bl	8007024 <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8001216:	f7ff fbc5 	bl	80009a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800121a:	2360      	movs	r3, #96	@ 0x60
 800121c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001222:	2300      	movs	r3, #0
 8001224:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001226:	2300      	movs	r3, #0
 8001228:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	1d3b      	adds	r3, r7, #4
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4807      	ldr	r0, [pc, #28]	@ (8001250 <MX_TIM4_Init+0xe4>)
 8001232:	f005 f9b1 	bl	8006598 <HAL_TIM_PWM_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800123c:	f7ff fbb2 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <MX_TIM4_Init+0xe4>)
 8001242:	f000 f85d 	bl	8001300 <HAL_TIM_MspPostInit>

}
 8001246:	bf00      	nop
 8001248:	3738      	adds	r7, #56	@ 0x38
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	2000023c 	.word	0x2000023c
 8001254:	40000800 	.word	0x40000800

08001258 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a22      	ldr	r2, [pc, #136]	@ (80012f0 <HAL_TIM_Base_MspInit+0x98>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d13d      	bne.n	80012e6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	60fb      	str	r3, [r7, #12]
 800126e:	4b21      	ldr	r3, [pc, #132]	@ (80012f4 <HAL_TIM_Base_MspInit+0x9c>)
 8001270:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001272:	4a20      	ldr	r2, [pc, #128]	@ (80012f4 <HAL_TIM_Base_MspInit+0x9c>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6413      	str	r3, [r2, #64]	@ 0x40
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <HAL_TIM_Base_MspInit+0x9c>)
 800127c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127e:	f003 0304 	and.w	r3, r3, #4
 8001282:	60fb      	str	r3, [r7, #12]
 8001284:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8001286:	4b1c      	ldr	r3, [pc, #112]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 8001288:	4a1c      	ldr	r2, [pc, #112]	@ (80012fc <HAL_TIM_Base_MspInit+0xa4>)
 800128a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800128c:	4b1a      	ldr	r3, [pc, #104]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 800128e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001292:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001294:	4b18      	ldr	r3, [pc, #96]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 8001296:	2240      	movs	r2, #64	@ 0x40
 8001298:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800129a:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80012a0:	4b15      	ldr	r3, [pc, #84]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80012a6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012a8:	4b13      	ldr	r3, [pc, #76]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80012ae:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80012b0:	4b11      	ldr	r3, [pc, #68]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80012b6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80012b8:	4b0f      	ldr	r3, [pc, #60]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80012be:	4b0e      	ldr	r3, [pc, #56]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80012c4:	4b0c      	ldr	r3, [pc, #48]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80012ca:	480b      	ldr	r0, [pc, #44]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012cc:	f001 fb7a 	bl	80029c4 <HAL_DMA_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80012d6:	f7ff fb65 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4a06      	ldr	r2, [pc, #24]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012de:	625a      	str	r2, [r3, #36]	@ 0x24
 80012e0:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <HAL_TIM_Base_MspInit+0xa0>)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80012e6:	bf00      	nop
 80012e8:	3710      	adds	r7, #16
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40000800 	.word	0x40000800
 80012f4:	40023800 	.word	0x40023800
 80012f8:	20000284 	.word	0x20000284
 80012fc:	40026010 	.word	0x40026010

08001300 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b088      	sub	sp, #32
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001308:	f107 030c 	add.w	r3, r7, #12
 800130c:	2200      	movs	r2, #0
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	605a      	str	r2, [r3, #4]
 8001312:	609a      	str	r2, [r3, #8]
 8001314:	60da      	str	r2, [r3, #12]
 8001316:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4a12      	ldr	r2, [pc, #72]	@ (8001368 <HAL_TIM_MspPostInit+0x68>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d11d      	bne.n	800135e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001322:	2300      	movs	r3, #0
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	4b11      	ldr	r3, [pc, #68]	@ (800136c <HAL_TIM_MspPostInit+0x6c>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	4a10      	ldr	r2, [pc, #64]	@ (800136c <HAL_TIM_MspPostInit+0x6c>)
 800132c:	f043 0302 	orr.w	r3, r3, #2
 8001330:	6313      	str	r3, [r2, #48]	@ 0x30
 8001332:	4b0e      	ldr	r3, [pc, #56]	@ (800136c <HAL_TIM_MspPostInit+0x6c>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800133e:	2340      	movs	r3, #64	@ 0x40
 8001340:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001342:	2302      	movs	r3, #2
 8001344:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134a:	2300      	movs	r3, #0
 800134c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800134e:	2302      	movs	r3, #2
 8001350:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001352:	f107 030c 	add.w	r3, r7, #12
 8001356:	4619      	mov	r1, r3
 8001358:	4805      	ldr	r0, [pc, #20]	@ (8001370 <HAL_TIM_MspPostInit+0x70>)
 800135a:	f001 fec5 	bl	80030e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800135e:	bf00      	nop
 8001360:	3720      	adds	r7, #32
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40000800 	.word	0x40000800
 800136c:	40023800 	.word	0x40023800
 8001370:	40020400 	.word	0x40020400

08001374 <_Z16startTransactionv>:
#include "gfxfont.h"
#include "gpio.h"
#include "spi.h"


void startTransaction() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001378:	2200      	movs	r2, #0
 800137a:	2108      	movs	r1, #8
 800137c:	4802      	ldr	r0, [pc, #8]	@ (8001388 <_Z16startTransactionv+0x14>)
 800137e:	f002 f837 	bl	80033f0 <HAL_GPIO_WritePin>
}
 8001382:	bf00      	nop
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40020400 	.word	0x40020400

0800138c <_Z14endTransactionv>:

void endTransaction() {
 800138c:	b580      	push	{r7, lr}
 800138e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001390:	2201      	movs	r2, #1
 8001392:	2108      	movs	r1, #8
 8001394:	4802      	ldr	r0, [pc, #8]	@ (80013a0 <_Z14endTransactionv+0x14>)
 8001396:	f002 f82b 	bl	80033f0 <HAL_GPIO_WritePin>
}
 800139a:	bf00      	nop
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	40020400 	.word	0x40020400

080013a4 <_Z14dataOrRegisterh>:

void dataOrRegister(uint8_t data) {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
	if (data) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d005      	beq.n	80013c0 <_Z14dataOrRegisterh+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 80013b4:	2201      	movs	r2, #1
 80013b6:	2110      	movs	r1, #16
 80013b8:	4806      	ldr	r0, [pc, #24]	@ (80013d4 <_Z14dataOrRegisterh+0x30>)
 80013ba:	f002 f819 	bl	80033f0 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 80013be:	e004      	b.n	80013ca <_Z14dataOrRegisterh+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2110      	movs	r1, #16
 80013c4:	4803      	ldr	r0, [pc, #12]	@ (80013d4 <_Z14dataOrRegisterh+0x30>)
 80013c6:	f002 f813 	bl	80033f0 <HAL_GPIO_WritePin>
}
 80013ca:	bf00      	nop
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	40020400 	.word	0x40020400

080013d8 <_Z14commandAndDatatPtj>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	60b9      	str	r1, [r7, #8]
 80013e2:	607a      	str	r2, [r7, #4]
 80013e4:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 80013e6:	f7ff ffc5 	bl	8001374 <_Z16startTransactionv>

	dataOrRegister(0);
 80013ea:	2000      	movs	r0, #0
 80013ec:	f7ff ffda 	bl	80013a4 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 80013f0:	f107 010e 	add.w	r1, r7, #14
 80013f4:	230a      	movs	r3, #10
 80013f6:	2201      	movs	r2, #1
 80013f8:	480a      	ldr	r0, [pc, #40]	@ (8001424 <_Z14commandAndDatatPtj+0x4c>)
 80013fa:	f003 ff1e 	bl	800523a <HAL_SPI_Transmit>

	if (size) {
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d009      	beq.n	8001418 <_Z14commandAndDatatPtj+0x40>
		dataOrRegister(1);
 8001404:	2001      	movs	r0, #1
 8001406:	f7ff ffcd 	bl	80013a4 <_Z14dataOrRegisterh>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	b29a      	uxth	r2, r3
 800140e:	230a      	movs	r3, #10
 8001410:	68b9      	ldr	r1, [r7, #8]
 8001412:	4804      	ldr	r0, [pc, #16]	@ (8001424 <_Z14commandAndDatatPtj+0x4c>)
 8001414:	f003 ff11 	bl	800523a <HAL_SPI_Transmit>
	}

	endTransaction();
 8001418:	f7ff ffb8 	bl	800138c <_Z14endTransactionv>
}
 800141c:	bf00      	nop
 800141e:	3710      	adds	r7, #16
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	2000012c 	.word	0x2000012c

08001428 <_Z12startCommandt>:

void startCommand(uint16_t command) {
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	4603      	mov	r3, r0
 8001430:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8001432:	f7ff ff9f 	bl	8001374 <_Z16startTransactionv>
	dataOrRegister(0);
 8001436:	2000      	movs	r0, #0
 8001438:	f7ff ffb4 	bl	80013a4 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 800143c:	1db9      	adds	r1, r7, #6
 800143e:	230a      	movs	r3, #10
 8001440:	2201      	movs	r2, #1
 8001442:	4803      	ldr	r0, [pc, #12]	@ (8001450 <_Z12startCommandt+0x28>)
 8001444:	f003 fef9 	bl	800523a <HAL_SPI_Transmit>
}
 8001448:	bf00      	nop
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	2000012c 	.word	0x2000012c

08001454 <_Z20transmitRepeatedDatatj>:

void transmitRepeatedData(uint16_t data16, unsigned int count) {
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	6039      	str	r1, [r7, #0]
 800145e:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 8001460:	2001      	movs	r0, #1
 8001462:	f7ff ff9f 	bl	80013a4 <_Z14dataOrRegisterh>
	for (int i = 0; i < count; i++) {
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
 800146a:	e008      	b.n	800147e <_Z20transmitRepeatedDatatj+0x2a>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 800146c:	1db9      	adds	r1, r7, #6
 800146e:	230a      	movs	r3, #10
 8001470:	2201      	movs	r2, #1
 8001472:	4807      	ldr	r0, [pc, #28]	@ (8001490 <_Z20transmitRepeatedDatatj+0x3c>)
 8001474:	f003 fee1 	bl	800523a <HAL_SPI_Transmit>
	for (int i = 0; i < count; i++) {
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	3301      	adds	r3, #1
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	683a      	ldr	r2, [r7, #0]
 8001482:	429a      	cmp	r2, r3
 8001484:	d8f2      	bhi.n	800146c <_Z20transmitRepeatedDatatj+0x18>
	}
}
 8001486:	bf00      	nop
 8001488:	bf00      	nop
 800148a:	3710      	adds	r7, #16
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	2000012c 	.word	0x2000012c

08001494 <_Z18transmitSingleDatat>:

void transmitSingleData(uint16_t data16) {
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	4603      	mov	r3, r0
 800149c:	80fb      	strh	r3, [r7, #6]
	dataOrRegister(1);
 800149e:	2001      	movs	r0, #1
 80014a0:	f7ff ff80 	bl	80013a4 <_Z14dataOrRegisterh>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
 80014a4:	1db9      	adds	r1, r7, #6
 80014a6:	230a      	movs	r3, #10
 80014a8:	2201      	movs	r2, #1
 80014aa:	4803      	ldr	r0, [pc, #12]	@ (80014b8 <_Z18transmitSingleDatat+0x24>)
 80014ac:	f003 fec5 	bl	800523a <HAL_SPI_Transmit>
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	2000012c 	.word	0x2000012c

080014bc <_Z10endCommandv>:

void endCommand() {
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
	endTransaction();
 80014c0:	f7ff ff64 	bl	800138c <_Z14endTransactionv>
}
 80014c4:	bf00      	nop
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <resetScreen>:

void resetScreen() {
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014cc:	2201      	movs	r2, #1
 80014ce:	2120      	movs	r1, #32
 80014d0:	480b      	ldr	r0, [pc, #44]	@ (8001500 <resetScreen+0x38>)
 80014d2:	f001 ff8d 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014d6:	2014      	movs	r0, #20
 80014d8:	f001 f93e 	bl	8002758 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 80014dc:	2200      	movs	r2, #0
 80014de:	2120      	movs	r1, #32
 80014e0:	4807      	ldr	r0, [pc, #28]	@ (8001500 <resetScreen+0x38>)
 80014e2:	f001 ff85 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80014e6:	2014      	movs	r0, #20
 80014e8:	f001 f936 	bl	8002758 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80014ec:	2201      	movs	r2, #1
 80014ee:	2120      	movs	r1, #32
 80014f0:	4803      	ldr	r0, [pc, #12]	@ (8001500 <resetScreen+0x38>)
 80014f2:	f001 ff7d 	bl	80033f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80014f6:	2064      	movs	r0, #100	@ 0x64
 80014f8:	f001 f92e 	bl	8002758 <HAL_Delay>
}
 80014fc:	bf00      	nop
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	40020400 	.word	0x40020400

08001504 <initializeScreen>:

void initializeScreen() {
 8001504:	b5b0      	push	{r4, r5, r7, lr}
 8001506:	b0a0      	sub	sp, #128	@ 0x80
 8001508:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 800150a:	2200      	movs	r2, #0
 800150c:	2100      	movs	r1, #0
 800150e:	2001      	movs	r0, #1
 8001510:	f7ff ff62 	bl	80013d8 <_Z14commandAndDatatPtj>
	commandAndData(0x11, NULL, 0);
 8001514:	2200      	movs	r2, #0
 8001516:	2100      	movs	r1, #0
 8001518:	2011      	movs	r0, #17
 800151a:	f7ff ff5d 	bl	80013d8 <_Z14commandAndDatatPtj>
	{
		uint16_t data[] = {0x0055};
 800151e:	2355      	movs	r3, #85	@ 0x55
 8001520:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c
		commandAndData(0x3A, data, sizeof(data));
 8001524:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001528:	2202      	movs	r2, #2
 800152a:	4619      	mov	r1, r3
 800152c:	203a      	movs	r0, #58	@ 0x3a
 800152e:	f7ff ff53 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8001532:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <initializeScreen+0x198>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	67bb      	str	r3, [r7, #120]	@ 0x78
		commandAndData(0xC0, data, sizeof(data));
 8001538:	f107 0378 	add.w	r3, r7, #120	@ 0x78
 800153c:	2204      	movs	r2, #4
 800153e:	4619      	mov	r1, r3
 8001540:	20c0      	movs	r0, #192	@ 0xc0
 8001542:	f7ff ff49 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8001546:	2345      	movs	r3, #69	@ 0x45
 8001548:	f8a7 3074 	strh.w	r3, [r7, #116]	@ 0x74
 800154c:	2300      	movs	r3, #0
 800154e:	f8a7 3076 	strh.w	r3, [r7, #118]	@ 0x76
		commandAndData(0xC1, data, sizeof(data));
 8001552:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 8001556:	2204      	movs	r2, #4
 8001558:	4619      	mov	r1, r3
 800155a:	20c1      	movs	r0, #193	@ 0xc1
 800155c:	f7ff ff3c 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0033};
 8001560:	2333      	movs	r3, #51	@ 0x33
 8001562:	f8a7 3070 	strh.w	r3, [r7, #112]	@ 0x70
		commandAndData(0xC2, data, sizeof(data));
 8001566:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800156a:	2202      	movs	r2, #2
 800156c:	4619      	mov	r1, r3
 800156e:	20c2      	movs	r0, #194	@ 0xc2
 8001570:	f7ff ff32 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8001574:	2300      	movs	r3, #0
 8001576:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
 800157a:	2328      	movs	r3, #40	@ 0x28
 800157c:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
		commandAndData(0xC5, data, sizeof(data));
 8001580:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	20c5      	movs	r0, #197	@ 0xc5
 800158a:	f7ff ff25 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 800158e:	4b44      	ldr	r3, [pc, #272]	@ (80016a0 <initializeScreen+0x19c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xB1, data, sizeof(data));
 8001594:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001598:	2204      	movs	r2, #4
 800159a:	4619      	mov	r1, r3
 800159c:	20b1      	movs	r0, #177	@ 0xb1
 800159e:	f7ff ff1b 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0002};
 80015a2:	2302      	movs	r3, #2
 80015a4:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
		commandAndData(0xB4, data, sizeof(data));
 80015a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80015ac:	2202      	movs	r2, #2
 80015ae:	4619      	mov	r1, r3
 80015b0:	20b4      	movs	r0, #180	@ 0xb4
 80015b2:	f7ff ff11 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 80015b6:	4a3b      	ldr	r2, [pc, #236]	@ (80016a4 <initializeScreen+0x1a0>)
 80015b8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015bc:	e892 0003 	ldmia.w	r2, {r0, r1}
 80015c0:	6018      	str	r0, [r3, #0]
 80015c2:	3304      	adds	r3, #4
 80015c4:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 80015c6:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80015ca:	2206      	movs	r2, #6
 80015cc:	4619      	mov	r1, r3
 80015ce:	20b6      	movs	r0, #182	@ 0xb6
 80015d0:	f7ff ff02 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 80015d4:	4b34      	ldr	r3, [pc, #208]	@ (80016a8 <initializeScreen+0x1a4>)
 80015d6:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80015da:	461d      	mov	r5, r3
 80015dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80015de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80015e0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80015e4:	c407      	stmia	r4!, {r0, r1, r2}
 80015e6:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 80015e8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80015ec:	221e      	movs	r2, #30
 80015ee:	4619      	mov	r1, r3
 80015f0:	20e0      	movs	r0, #224	@ 0xe0
 80015f2:	f7ff fef1 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 80015f6:	4b2d      	ldr	r3, [pc, #180]	@ (80016ac <initializeScreen+0x1a8>)
 80015f8:	f107 041c 	add.w	r4, r7, #28
 80015fc:	461d      	mov	r5, r3
 80015fe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001600:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001602:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001606:	c407      	stmia	r4!, {r0, r1, r2}
 8001608:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	221e      	movs	r2, #30
 8001610:	4619      	mov	r1, r3
 8001612:	20e1      	movs	r0, #225	@ 0xe1
 8001614:	f7ff fee0 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8001618:	2300      	movs	r3, #0
 800161a:	833b      	strh	r3, [r7, #24]
 800161c:	2322      	movs	r3, #34	@ 0x22
 800161e:	837b      	strh	r3, [r7, #26]
		commandAndData(0xB6, data, sizeof(data));
 8001620:	f107 0318 	add.w	r3, r7, #24
 8001624:	2204      	movs	r2, #4
 8001626:	4619      	mov	r1, r3
 8001628:	20b6      	movs	r0, #182	@ 0xb6
 800162a:	f7ff fed5 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0008};
 800162e:	2308      	movs	r3, #8
 8001630:	82bb      	strh	r3, [r7, #20]
		commandAndData(0x36, data, sizeof(data));
 8001632:	f107 0314 	add.w	r3, r7, #20
 8001636:	2202      	movs	r2, #2
 8001638:	4619      	mov	r1, r3
 800163a:	2036      	movs	r0, #54	@ 0x36
 800163c:	f7ff fecc 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		commandAndData(0x29, NULL, 0);
 8001640:	2200      	movs	r2, #0
 8001642:	2100      	movs	r1, #0
 8001644:	2029      	movs	r0, #41	@ 0x29
 8001646:	f7ff fec7 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_WIDTH - 1) >> 8), (uint16_t)((SCREEN_WIDTH - 1) & 0xFF)};
 800164a:	4a19      	ldr	r2, [pc, #100]	@ (80016b0 <initializeScreen+0x1ac>)
 800164c:	f107 030c 	add.w	r3, r7, #12
 8001650:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001654:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2A, data, sizeof(data));
 8001658:	f107 030c 	add.w	r3, r7, #12
 800165c:	2208      	movs	r2, #8
 800165e:	4619      	mov	r1, r3
 8001660:	202a      	movs	r0, #42	@ 0x2a
 8001662:	f7ff feb9 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {0x0000, 0x0000, (uint16_t)((SCREEN_HEIGHT - 1) >> 8), (uint16_t)((SCREEN_HEIGHT - 1) & 0xFF)};
 8001666:	4a13      	ldr	r2, [pc, #76]	@ (80016b4 <initializeScreen+0x1b0>)
 8001668:	1d3b      	adds	r3, r7, #4
 800166a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800166e:	e883 0003 	stmia.w	r3, {r0, r1}
		commandAndData(0x2B, data, sizeof(data));
 8001672:	1d3b      	adds	r3, r7, #4
 8001674:	2208      	movs	r2, #8
 8001676:	4619      	mov	r1, r3
 8001678:	202b      	movs	r0, #43	@ 0x2b
 800167a:	f7ff fead 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		startCommand(0x2C);
 800167e:	202c      	movs	r0, #44	@ 0x2c
 8001680:	f7ff fed2 	bl	8001428 <_Z12startCommandt>
		transmitRepeatedData(0x0000, 320 * 480);
 8001684:	f44f 3116 	mov.w	r1, #153600	@ 0x25800
 8001688:	2000      	movs	r0, #0
 800168a:	f7ff fee3 	bl	8001454 <_Z20transmitRepeatedDatatj>
		endCommand();
 800168e:	f7ff ff15 	bl	80014bc <_Z10endCommandv>
	}
}
 8001692:	bf00      	nop
 8001694:	3780      	adds	r7, #128	@ 0x80
 8001696:	46bd      	mov	sp, r7
 8001698:	bdb0      	pop	{r4, r5, r7, pc}
 800169a:	bf00      	nop
 800169c:	0800b218 	.word	0x0800b218
 80016a0:	0800b21c 	.word	0x0800b21c
 80016a4:	0800b220 	.word	0x0800b220
 80016a8:	0800b228 	.word	0x0800b228
 80016ac:	0800b248 	.word	0x0800b248
 80016b0:	0800b268 	.word	0x0800b268
 80016b4:	0800b270 	.word	0x0800b270

080016b8 <_Z11modifySpacetttt>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 80016b8:	b590      	push	{r4, r7, lr}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	4604      	mov	r4, r0
 80016c0:	4608      	mov	r0, r1
 80016c2:	4611      	mov	r1, r2
 80016c4:	461a      	mov	r2, r3
 80016c6:	4623      	mov	r3, r4
 80016c8:	80fb      	strh	r3, [r7, #6]
 80016ca:	4603      	mov	r3, r0
 80016cc:	80bb      	strh	r3, [r7, #4]
 80016ce:	460b      	mov	r3, r1
 80016d0:	807b      	strh	r3, [r7, #2]
 80016d2:	4613      	mov	r3, r2
 80016d4:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 80016d6:	88bb      	ldrh	r3, [r7, #4]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	b29b      	uxth	r3, r3
 80016dc:	823b      	strh	r3, [r7, #16]
 80016de:	88bb      	ldrh	r3, [r7, #4]
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	b29b      	uxth	r3, r3
 80016e4:	827b      	strh	r3, [r7, #18]
 80016e6:	883b      	ldrh	r3, [r7, #0]
 80016e8:	0a1b      	lsrs	r3, r3, #8
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	82bb      	strh	r3, [r7, #20]
 80016ee:	883b      	ldrh	r3, [r7, #0]
 80016f0:	b2db      	uxtb	r3, r3
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 80016f6:	f107 0310 	add.w	r3, r7, #16
 80016fa:	2208      	movs	r2, #8
 80016fc:	4619      	mov	r1, r3
 80016fe:	202a      	movs	r0, #42	@ 0x2a
 8001700:	f7ff fe6a 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8001704:	88fb      	ldrh	r3, [r7, #6]
 8001706:	0a1b      	lsrs	r3, r3, #8
 8001708:	b29b      	uxth	r3, r3
 800170a:	813b      	strh	r3, [r7, #8]
 800170c:	88fb      	ldrh	r3, [r7, #6]
 800170e:	b2db      	uxtb	r3, r3
 8001710:	b29b      	uxth	r3, r3
 8001712:	817b      	strh	r3, [r7, #10]
 8001714:	887b      	ldrh	r3, [r7, #2]
 8001716:	0a1b      	lsrs	r3, r3, #8
 8001718:	b29b      	uxth	r3, r3
 800171a:	81bb      	strh	r3, [r7, #12]
 800171c:	887b      	ldrh	r3, [r7, #2]
 800171e:	b2db      	uxtb	r3, r3
 8001720:	b29b      	uxth	r3, r3
 8001722:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8001724:	f107 0308 	add.w	r3, r7, #8
 8001728:	2208      	movs	r2, #8
 800172a:	4619      	mov	r1, r3
 800172c:	202b      	movs	r0, #43	@ 0x2b
 800172e:	f7ff fe53 	bl	80013d8 <_Z14commandAndDatatPtj>
	}
}
 8001732:	bf00      	nop
 8001734:	371c      	adds	r7, #28
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
	...

0800173c <clearScreenfast>:

static uint8_t datasentflag = 0;
void clearScreenfast(uint16_t color) {
 800173c:	b580      	push	{r7, lr}
 800173e:	f5ad 4d16 	sub.w	sp, sp, #38400	@ 0x9600
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	4602      	mov	r2, r0
 8001748:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 800174c:	f2a3 630a 	subw	r3, r3, #1546	@ 0x60a
 8001750:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[19200];
	for (int i = 0; i < 19200; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001758:	f102 020c 	add.w	r2, r2, #12
 800175c:	6013      	str	r3, [r2, #0]
 800175e:	e01a      	b.n	8001796 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8001760:	f507 63c2 	add.w	r3, r7, #1552	@ 0x610
 8001764:	f5a3 63c1 	sub.w	r3, r3, #1544	@ 0x608
 8001768:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 800176c:	f102 020c 	add.w	r2, r2, #12
 8001770:	6812      	ldr	r2, [r2, #0]
 8001772:	f507 61c2 	add.w	r1, r7, #1552	@ 0x610
 8001776:	f2a1 610a 	subw	r1, r1, #1546	@ 0x60a
 800177a:	8809      	ldrh	r1, [r1, #0]
 800177c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < 19200; i++) {
 8001780:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 8001784:	f103 030c 	add.w	r3, r3, #12
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	3301      	adds	r3, #1
 800178c:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001790:	f102 020c 	add.w	r2, r2, #12
 8001794:	6013      	str	r3, [r2, #0]
 8001796:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800179a:	f103 030c 	add.w	r3, r3, #12
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f5b3 4f96 	cmp.w	r3, #19200	@ 0x4b00
 80017a4:	dbdc      	blt.n	8001760 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80017a6:	f240 133f 	movw	r3, #319	@ 0x13f
 80017aa:	f240 12df 	movw	r2, #479	@ 0x1df
 80017ae:	2100      	movs	r1, #0
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7ff ff81 	bl	80016b8 <_Z11modifySpacetttt>
	startCommand(0x2C);
 80017b6:	202c      	movs	r0, #44	@ 0x2c
 80017b8:	f7ff fe36 	bl	8001428 <_Z12startCommandt>
	dataOrRegister(1);
 80017bc:	2001      	movs	r0, #1
 80017be:	f7ff fdf1 	bl	80013a4 <_Z14dataOrRegisterh>
	for (int i = 0; i < 8; i++) {
 80017c2:	2300      	movs	r3, #0
 80017c4:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 80017c8:	f102 0208 	add.w	r2, r2, #8
 80017cc:	6013      	str	r3, [r2, #0]
 80017ce:	e01b      	b.n	8001808 <clearScreenfast+0xcc>
		HAL_SPI_Transmit_DMA(&hspi1, (uint8_t*)buffer1, 19200);
 80017d0:	f107 0310 	add.w	r3, r7, #16
 80017d4:	3b08      	subs	r3, #8
 80017d6:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 80017da:	4619      	mov	r1, r3
 80017dc:	4812      	ldr	r0, [pc, #72]	@ (8001828 <clearScreenfast+0xec>)
 80017de:	f004 f933 	bl	8005a48 <HAL_SPI_Transmit_DMA>
		while (!datasentflag) {}
 80017e2:	bf00      	nop
 80017e4:	4b11      	ldr	r3, [pc, #68]	@ (800182c <clearScreenfast+0xf0>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0fb      	beq.n	80017e4 <clearScreenfast+0xa8>
		datasentflag = 0;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	@ (800182c <clearScreenfast+0xf0>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 8; i++) {
 80017f2:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 80017f6:	f103 0308 	add.w	r3, r3, #8
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3301      	adds	r3, #1
 80017fe:	f507 4216 	add.w	r2, r7, #38400	@ 0x9600
 8001802:	f102 0208 	add.w	r2, r2, #8
 8001806:	6013      	str	r3, [r2, #0]
 8001808:	f507 4316 	add.w	r3, r7, #38400	@ 0x9600
 800180c:	f103 0308 	add.w	r3, r3, #8
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	2b07      	cmp	r3, #7
 8001814:	dddc      	ble.n	80017d0 <clearScreenfast+0x94>
	}
	endCommand();
 8001816:	f7ff fe51 	bl	80014bc <_Z10endCommandv>
}
 800181a:	bf00      	nop
 800181c:	f507 4716 	add.w	r7, r7, #38400	@ 0x9600
 8001820:	3710      	adds	r7, #16
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	2000012c 	.word	0x2000012c
 800182c:	200002e4 	.word	0x200002e4

08001830 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8001830:	b480      	push	{r7}
 8001832:	b083      	sub	sp, #12
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4a05      	ldr	r2, [pc, #20]	@ (8001854 <HAL_SPI_TxCpltCallback+0x24>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d102      	bne.n	8001848 <HAL_SPI_TxCpltCallback+0x18>
		datasentflag = 1;
 8001842:	4b05      	ldr	r3, [pc, #20]	@ (8001858 <HAL_SPI_TxCpltCallback+0x28>)
 8001844:	2201      	movs	r2, #1
 8001846:	701a      	strb	r2, [r3, #0]
	}
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	40013000 	.word	0x40013000
 8001858:	200002e4 	.word	0x200002e4

0800185c <drawPoint>:

void drawVLine(uint16_t x1, uint16_t y1, uint16_t height, uint16_t color) {
	fillArea(x1, y1, 1, height, color);
}

void drawPoint(uint16_t x, uint16_t y, uint16_t color) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	4603      	mov	r3, r0
 8001864:	80fb      	strh	r3, [r7, #6]
 8001866:	460b      	mov	r3, r1
 8001868:	80bb      	strh	r3, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	807b      	strh	r3, [r7, #2]
	modifySpace(x, y, x, y);
 800186e:	88bb      	ldrh	r3, [r7, #4]
 8001870:	88fa      	ldrh	r2, [r7, #6]
 8001872:	88b9      	ldrh	r1, [r7, #4]
 8001874:	88f8      	ldrh	r0, [r7, #6]
 8001876:	f7ff ff1f 	bl	80016b8 <_Z11modifySpacetttt>
	startCommand(0x2C);
 800187a:	202c      	movs	r0, #44	@ 0x2c
 800187c:	f7ff fdd4 	bl	8001428 <_Z12startCommandt>
	transmitSingleData(color);
 8001880:	887b      	ldrh	r3, [r7, #2]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fe06 	bl	8001494 <_Z18transmitSingleDatat>
	endCommand();
 8001888:	f7ff fe18 	bl	80014bc <_Z10endCommandv>

}
 800188c:	bf00      	nop
 800188e:	3708      	adds	r7, #8
 8001890:	46bd      	mov	sp, r7
 8001892:	bd80      	pop	{r7, pc}

08001894 <_Z15getStringCenterPtS_PcPK7GFXfont>:
			}
		}
	}
}

void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	@ 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
 80018a0:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 80018a6:	2300      	movs	r3, #0
 80018a8:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 80018aa:	e012      	b.n	80018d2 <_Z15getStringCenterPtS_PcPK7GFXfont+0x3e>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	685a      	ldr	r2, [r3, #4]
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80018b8:	3b20      	subs	r3, #32
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	791b      	ldrb	r3, [r3, #4]
 80018c4:	461a      	mov	r2, r3
 80018c6:	8b7b      	ldrh	r3, [r7, #26]
 80018c8:	4413      	add	r3, r2
 80018ca:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	3301      	adds	r3, #1
 80018d0:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1e8      	bne.n	80018ac <_Z15getStringCenterPtS_PcPK7GFXfont+0x18>
	}
	*currentx -= totallength / 2;
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	881a      	ldrh	r2, [r3, #0]
 80018de:	8b7b      	ldrh	r3, [r7, #26]
 80018e0:	085b      	lsrs	r3, r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80018ec:	bf00      	nop
 80018ee:	3724      	adds	r7, #36	@ 0x24
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr

080018f8 <drawChar>:

uint16_t drawChar(char letter, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	@ 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60b9      	str	r1, [r7, #8]
 8001900:	4611      	mov	r1, r2
 8001902:	461a      	mov	r2, r3
 8001904:	4603      	mov	r3, r0
 8001906:	73fb      	strb	r3, [r7, #15]
 8001908:	460b      	mov	r3, r1
 800190a:	81bb      	strh	r3, [r7, #12]
 800190c:	4613      	mov	r3, r2
 800190e:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8001910:	68bb      	ldr	r3, [r7, #8]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	7bfb      	ldrb	r3, [r7, #15]
 8001916:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 800191a:	3b20      	subs	r3, #32
 800191c:	00db      	lsls	r3, r3, #3
 800191e:	4413      	add	r3, r2
 8001920:	61fb      	str	r3, [r7, #28]
	int16_t width = toDraw->width, height = toDraw->height;
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	789b      	ldrb	r3, [r3, #2]
 8001926:	837b      	strh	r3, [r7, #26]
 8001928:	69fb      	ldr	r3, [r7, #28]
 800192a:	78db      	ldrb	r3, [r3, #3]
 800192c:	833b      	strh	r3, [r7, #24]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	795b      	ldrb	r3, [r3, #5]
 8001932:	75fb      	strb	r3, [r7, #23]
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	799b      	ldrb	r3, [r3, #6]
 8001938:	75bb      	strb	r3, [r7, #22]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	791b      	ldrb	r3, [r3, #4]
 800193e:	757b      	strb	r3, [r7, #21]
	uint8_t *bitlist = font->bitmap;
 8001940:	68bb      	ldr	r3, [r7, #8]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	613b      	str	r3, [r7, #16]
	uint16_t bo = toDraw->bitmapOffset;
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	84fb      	strh	r3, [r7, #38]	@ 0x26
	uint8_t bits = 0;
 800194c:	2300      	movs	r3, #0
 800194e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t bit = 0;
 8001952:	2300      	movs	r3, #0
 8001954:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

	for (int16_t yy = 0; yy < height; yy++) {
 8001958:	2300      	movs	r3, #0
 800195a:	847b      	strh	r3, [r7, #34]	@ 0x22
 800195c:	e06e      	b.n	8001a3c <drawChar+0x144>
	  for (int16_t xx = 0; xx < width; xx++) {
 800195e:	2300      	movs	r3, #0
 8001960:	843b      	strh	r3, [r7, #32]
 8001962:	e05f      	b.n	8001a24 <drawChar+0x12c>
		if (!(bit++ & 7)) {
 8001964:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001968:	1c5a      	adds	r2, r3, #1
 800196a:	f887 2024 	strb.w	r2, [r7, #36]	@ 0x24
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	2b00      	cmp	r3, #0
 8001974:	bf0c      	ite	eq
 8001976:	2301      	moveq	r3, #1
 8001978:	2300      	movne	r3, #0
 800197a:	b2db      	uxtb	r3, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	d008      	beq.n	8001992 <drawChar+0x9a>
		  bits = bitlist[bo++];
 8001980:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001982:	1c5a      	adds	r2, r3, #1
 8001984:	84fa      	strh	r2, [r7, #38]	@ 0x26
 8001986:	461a      	mov	r2, r3
 8001988:	693b      	ldr	r3, [r7, #16]
 800198a:	4413      	add	r3, r2
 800198c:	781b      	ldrb	r3, [r3, #0]
 800198e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
		}
		if (bits & 0b10000000) {
 8001992:	f997 3025 	ldrsb.w	r3, [r7, #37]	@ 0x25
 8001996:	2b00      	cmp	r3, #0
 8001998:	da39      	bge.n	8001a0e <drawChar+0x116>
			if (positioning & FLIP_OBJECT) {
 800199a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d017      	beq.n	80019d6 <drawChar+0xde>
				drawPoint((uint16_t)((int16_t)xpos + xo + xx), (uint16_t)((int16_t)ypos + yo + yy), 0xFFFF);
 80019a6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019aa:	b29a      	uxth	r2, r3
 80019ac:	89bb      	ldrh	r3, [r7, #12]
 80019ae:	4413      	add	r3, r2
 80019b0:	b29a      	uxth	r2, r3
 80019b2:	8c3b      	ldrh	r3, [r7, #32]
 80019b4:	4413      	add	r3, r2
 80019b6:	b298      	uxth	r0, r3
 80019b8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019bc:	b29a      	uxth	r2, r3
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4413      	add	r3, r2
 80019c2:	b29a      	uxth	r2, r3
 80019c4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80019c6:	4413      	add	r3, r2
 80019c8:	b29b      	uxth	r3, r3
 80019ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80019ce:	4619      	mov	r1, r3
 80019d0:	f7ff ff44 	bl	800185c <drawPoint>
 80019d4:	e01b      	b.n	8001a0e <drawChar+0x116>
			} else {
				drawPoint((uint16_t)((int16_t)xpos + xadv - xo - xx), (uint16_t)((int16_t)ypos - yy - yo), 0xFFFF);
 80019d6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80019da:	b29a      	uxth	r2, r3
 80019dc:	89bb      	ldrh	r3, [r7, #12]
 80019de:	4413      	add	r3, r2
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80019e6:	b29b      	uxth	r3, r3
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	8c3b      	ldrh	r3, [r7, #32]
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	b298      	uxth	r0, r3
 80019f2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80019f4:	88fa      	ldrh	r2, [r7, #6]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001a08:	4619      	mov	r1, r3
 8001a0a:	f7ff ff27 	bl	800185c <drawPoint>
			}
		}
		bits <<= 1;
 8001a0e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	  for (int16_t xx = 0; xx < width; xx++) {
 8001a18:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	3301      	adds	r3, #1
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	843b      	strh	r3, [r7, #32]
 8001a24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001a28:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	db99      	blt.n	8001964 <drawChar+0x6c>
	for (int16_t yy = 0; yy < height; yy++) {
 8001a30:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	3301      	adds	r3, #1
 8001a38:	b29b      	uxth	r3, r3
 8001a3a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001a3c:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8001a40:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	db8a      	blt.n	800195e <drawChar+0x66>
	  }
	}

	return (uint16_t)xadv;
 8001a48:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001a4c:	b29b      	uxth	r3, r3
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3728      	adds	r7, #40	@ 0x28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}

08001a56 <drawString>:

uint8_t drawString(char *buffer, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t positioning) {
 8001a56:	b580      	push	{r7, lr}
 8001a58:	b08a      	sub	sp, #40	@ 0x28
 8001a5a:	af02      	add	r7, sp, #8
 8001a5c:	60f8      	str	r0, [r7, #12]
 8001a5e:	60b9      	str	r1, [r7, #8]
 8001a60:	4611      	mov	r1, r2
 8001a62:	461a      	mov	r2, r3
 8001a64:	460b      	mov	r3, r1
 8001a66:	80fb      	strh	r3, [r7, #6]
 8001a68:	4613      	mov	r3, r2
 8001a6a:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8001a6c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d005      	beq.n	8001a84 <drawString+0x2e>
		getStringCenter(&xpos, &ypos, buffer, font);
 8001a78:	1d39      	adds	r1, r7, #4
 8001a7a:	1db8      	adds	r0, r7, #6
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	68fa      	ldr	r2, [r7, #12]
 8001a80:	f7ff ff08 	bl	8001894 <_Z15getStringCenterPtS_PcPK7GFXfont>
	}
	uint16_t xAdvance = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	83fb      	strh	r3, [r7, #30]
	if (positioning & FLIP_OBJECT) {
 8001a88:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d01b      	beq.n	8001acc <drawString+0x76>
		char *currentChar = buffer;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001a98:	e013      	b.n	8001ac2 <drawString+0x6c>
			xAdvance += drawChar(*currentChar, font, xpos + xAdvance, ypos, FLIP_OBJECT);
 8001a9a:	69bb      	ldr	r3, [r7, #24]
 8001a9c:	7818      	ldrb	r0, [r3, #0]
 8001a9e:	88fa      	ldrh	r2, [r7, #6]
 8001aa0:	8bfb      	ldrh	r3, [r7, #30]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	b29a      	uxth	r2, r3
 8001aa6:	88bb      	ldrh	r3, [r7, #4]
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	9100      	str	r1, [sp, #0]
 8001aac:	68b9      	ldr	r1, [r7, #8]
 8001aae:	f7ff ff23 	bl	80018f8 <drawChar>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	8bfb      	ldrh	r3, [r7, #30]
 8001ab8:	4413      	add	r3, r2
 8001aba:	83fb      	strh	r3, [r7, #30]
			currentChar++;
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	3301      	adds	r3, #1
 8001ac0:	61bb      	str	r3, [r7, #24]
		while (*currentChar) {
 8001ac2:	69bb      	ldr	r3, [r7, #24]
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e7      	bne.n	8001a9a <drawString+0x44>
 8001aca:	e02d      	b.n	8001b28 <drawString+0xd2>
		}
	} else {
		uint16_t buffersize = 0;
 8001acc:	2300      	movs	r3, #0
 8001ace:	82fb      	strh	r3, [r7, #22]
		while (buffer[++buffersize]) {};
 8001ad0:	bf00      	nop
 8001ad2:	8afb      	ldrh	r3, [r7, #22]
 8001ad4:	3301      	adds	r3, #1
 8001ad6:	82fb      	strh	r3, [r7, #22]
 8001ad8:	8afb      	ldrh	r3, [r7, #22]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	4413      	add	r3, r2
 8001ade:	781b      	ldrb	r3, [r3, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	bf14      	ite	ne
 8001ae4:	2301      	movne	r3, #1
 8001ae6:	2300      	moveq	r3, #0
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d1f1      	bne.n	8001ad2 <drawString+0x7c>
		for (int i = buffersize - 1; i >= 0; i--) {
 8001aee:	8afb      	ldrh	r3, [r7, #22]
 8001af0:	3b01      	subs	r3, #1
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	e015      	b.n	8001b22 <drawString+0xcc>
			xAdvance += drawChar(buffer[i], font, xpos + xAdvance, ypos, NO_FLIP_OBJECT);
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	4413      	add	r3, r2
 8001afc:	7818      	ldrb	r0, [r3, #0]
 8001afe:	88fa      	ldrh	r2, [r7, #6]
 8001b00:	8bfb      	ldrh	r3, [r7, #30]
 8001b02:	4413      	add	r3, r2
 8001b04:	b29a      	uxth	r2, r3
 8001b06:	88bb      	ldrh	r3, [r7, #4]
 8001b08:	2100      	movs	r1, #0
 8001b0a:	9100      	str	r1, [sp, #0]
 8001b0c:	68b9      	ldr	r1, [r7, #8]
 8001b0e:	f7ff fef3 	bl	80018f8 <drawChar>
 8001b12:	4603      	mov	r3, r0
 8001b14:	461a      	mov	r2, r3
 8001b16:	8bfb      	ldrh	r3, [r7, #30]
 8001b18:	4413      	add	r3, r2
 8001b1a:	83fb      	strh	r3, [r7, #30]
		for (int i = buffersize - 1; i >= 0; i--) {
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	613b      	str	r3, [r7, #16]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	dae6      	bge.n	8001af6 <drawString+0xa0>
		}
	}
	return font->yAdvance;
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	7b1b      	ldrb	r3, [r3, #12]
}
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	3720      	adds	r7, #32
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}

08001b34 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	60f8      	str	r0, [r7, #12]
 8001b3c:	60b9      	str	r1, [r7, #8]
 8001b3e:	607a      	str	r2, [r7, #4]
 8001b40:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	683a      	ldr	r2, [r7, #0]
 8001b46:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	7e3a      	ldrb	r2, [r7, #24]
 8001b4c:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	68ba      	ldr	r2, [r7, #8]
 8001b52:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	605a      	str	r2, [r3, #4]
    endSPI();
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f839 	bl	8001bd2 <_ZN7MCP25156endSPIEv>
}
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	3710      	adds	r7, #16
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}

08001b6a <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8001b6a:	b580      	push	{r7, lr}
 8001b6c:	b082      	sub	sp, #8
 8001b6e:	af00      	add	r7, sp, #0
 8001b70:	6078      	str	r0, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6818      	ldr	r0, [r3, #0]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	1cf9      	adds	r1, r7, #3
 8001b80:	2201      	movs	r2, #1
 8001b82:	f003 fb5a 	bl	800523a <HAL_SPI_Transmit>
}
 8001b86:	bf00      	nop
 8001b88:	3708      	adds	r7, #8
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6818      	ldr	r0, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f107 010f 	add.w	r1, r7, #15
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f003 fc8d 	bl	80054c2 <HAL_SPI_Receive>
	return retVal;
 8001ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6898      	ldr	r0, [r3, #8]
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	7b1b      	ldrb	r3, [r3, #12]
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f001 fc13 	bl	80033f0 <HAL_GPIO_WritePin>
}
 8001bca:	bf00      	nop
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8001bd2:	b580      	push	{r7, lr}
 8001bd4:	b082      	sub	sp, #8
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6898      	ldr	r0, [r3, #8]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	7b1b      	ldrb	r3, [r3, #12]
 8001be2:	2201      	movs	r2, #1
 8001be4:	4619      	mov	r1, r3
 8001be6:	f001 fc03 	bl	80033f0 <HAL_GPIO_WritePin>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b08c      	sub	sp, #48	@ 0x30
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
	startSPI();
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff ffd8 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8001c02:	21c0      	movs	r1, #192	@ 0xc0
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	f7ff ffb0 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ffe1 	bl	8001bd2 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8001c10:	f107 0314 	add.w	r3, r7, #20
 8001c14:	220e      	movs	r2, #14
 8001c16:	2100      	movs	r1, #0
 8001c18:	4618      	mov	r0, r3
 8001c1a:	f009 fa91 	bl	800b140 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8001c1e:	f107 0214 	add.w	r2, r7, #20
 8001c22:	230e      	movs	r3, #14
 8001c24:	2130      	movs	r1, #48	@ 0x30
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f8ec 	bl	8001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8001c2c:	f107 0214 	add.w	r2, r7, #20
 8001c30:	230e      	movs	r3, #14
 8001c32:	2140      	movs	r1, #64	@ 0x40
 8001c34:	6878      	ldr	r0, [r7, #4]
 8001c36:	f000 f8e5 	bl	8001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8001c3a:	f107 0214 	add.w	r2, r7, #20
 8001c3e:	230e      	movs	r3, #14
 8001c40:	2150      	movs	r1, #80	@ 0x50
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f000 f8de 	bl	8001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8001c48:	2200      	movs	r2, #0
 8001c4a:	2160      	movs	r1, #96	@ 0x60
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f8b9 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2170      	movs	r1, #112	@ 0x70
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f000 f8b4 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8001c5c:	22a3      	movs	r2, #163	@ 0xa3
 8001c5e:	212b      	movs	r1, #43	@ 0x2b
 8001c60:	6878      	ldr	r0, [r7, #4]
 8001c62:	f000 f8af 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8001c66:	2304      	movs	r3, #4
 8001c68:	2267      	movs	r2, #103	@ 0x67
 8001c6a:	2160      	movs	r1, #96	@ 0x60
 8001c6c:	6878      	ldr	r0, [r7, #4]
 8001c6e:	f000 f8f8 	bl	8001e62 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8001c72:	2301      	movs	r3, #1
 8001c74:	2267      	movs	r2, #103	@ 0x67
 8001c76:	2170      	movs	r1, #112	@ 0x70
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f8f2 	bl	8001e62 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8001c7e:	4a29      	ldr	r2, [pc, #164]	@ (8001d24 <_ZN7MCP25155resetEv+0x130>)
 8001c80:	f107 030c 	add.w	r3, r7, #12
 8001c84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001c88:	6018      	str	r0, [r3, #0]
 8001c8a:	3304      	adds	r3, #4
 8001c8c:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8001c8e:	2300      	movs	r3, #0
 8001c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c92:	e01e      	b.n	8001cd2 <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8001c94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	bf0c      	ite	eq
 8001c9a:	2301      	moveq	r3, #1
 8001c9c:	2300      	movne	r3, #0
 8001c9e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8001ca2:	f107 020c 	add.w	r2, r7, #12
 8001ca6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ca8:	4413      	add	r3, r2
 8001caa:	7819      	ldrb	r1, [r3, #0]
 8001cac:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	f000 fbce 	bl	8002454 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8001cbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d002      	beq.n	8001ccc <_ZN7MCP25155resetEv+0xd8>
            return result;
 8001cc6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001cca:	e027      	b.n	8001d1c <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8001ccc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cce:	3301      	adds	r3, #1
 8001cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cd4:	2b05      	cmp	r3, #5
 8001cd6:	dddd      	ble.n	8001c94 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8001cd8:	2300      	movs	r3, #0
 8001cda:	723b      	strb	r3, [r7, #8]
 8001cdc:	2301      	movs	r3, #1
 8001cde:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ce4:	e016      	b.n	8001d14 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8001ce6:	f107 0208 	add.w	r2, r7, #8
 8001cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cec:	4413      	add	r3, r2
 8001cee:	7819      	ldrb	r1, [r3, #0]
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fb79 	bl	80023ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8001d00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <_ZN7MCP25155resetEv+0x11a>
            return result;
 8001d08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d0c:	e006      	b.n	8001d1c <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8001d0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d10:	3301      	adds	r3, #1
 8001d12:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001d14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	dde5      	ble.n	8001ce6 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	3730      	adds	r7, #48	@ 0x30
 8001d20:	46bd      	mov	sp, r7
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	0800b278 	.word	0x0800b278

08001d28 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	460b      	mov	r3, r1
 8001d32:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8001d34:	6878      	ldr	r0, [r7, #4]
 8001d36:	f7ff ff3c 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001d3a:	2103      	movs	r1, #3
 8001d3c:	6878      	ldr	r0, [r7, #4]
 8001d3e:	f7ff ff14 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001d42:	78fb      	ldrb	r3, [r7, #3]
 8001d44:	4619      	mov	r1, r3
 8001d46:	6878      	ldr	r0, [r7, #4]
 8001d48:	f7ff ff0f 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f7ff ff1e 	bl	8001b8e <_ZN7MCP25156SPI_RxEv>
 8001d52:	4603      	mov	r3, r0
 8001d54:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7ff ff3b 	bl	8001bd2 <_ZN7MCP25156endSPIEv>

    return ret;
 8001d5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}

08001d66 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8001d66:	b590      	push	{r4, r7, lr}
 8001d68:	b087      	sub	sp, #28
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	60f8      	str	r0, [r7, #12]
 8001d6e:	607a      	str	r2, [r7, #4]
 8001d70:	461a      	mov	r2, r3
 8001d72:	460b      	mov	r3, r1
 8001d74:	72fb      	strb	r3, [r7, #11]
 8001d76:	4613      	mov	r3, r2
 8001d78:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001d7a:	68f8      	ldr	r0, [r7, #12]
 8001d7c:	f7ff ff19 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8001d80:	2103      	movs	r1, #3
 8001d82:	68f8      	ldr	r0, [r7, #12]
 8001d84:	f7ff fef1 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001d88:	7afb      	ldrb	r3, [r7, #11]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	68f8      	ldr	r0, [r7, #12]
 8001d8e:	f7ff feec 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8001d92:	2300      	movs	r3, #0
 8001d94:	75fb      	strb	r3, [r7, #23]
 8001d96:	e00a      	b.n	8001dae <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8001d98:	7dfb      	ldrb	r3, [r7, #23]
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	18d4      	adds	r4, r2, r3
 8001d9e:	68f8      	ldr	r0, [r7, #12]
 8001da0:	f7ff fef5 	bl	8001b8e <_ZN7MCP25156SPI_RxEv>
 8001da4:	4603      	mov	r3, r0
 8001da6:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8001da8:	7dfb      	ldrb	r3, [r7, #23]
 8001daa:	3301      	adds	r3, #1
 8001dac:	75fb      	strb	r3, [r7, #23]
 8001dae:	7dfa      	ldrb	r2, [r7, #23]
 8001db0:	7abb      	ldrb	r3, [r7, #10]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d3f0      	bcc.n	8001d98 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f7ff ff0b 	bl	8001bd2 <_ZN7MCP25156endSPIEv>
}
 8001dbc:	bf00      	nop
 8001dbe:	371c      	adds	r7, #28
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd90      	pop	{r4, r7, pc}

08001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b082      	sub	sp, #8
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	460b      	mov	r3, r1
 8001dce:	70fb      	strb	r3, [r7, #3]
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7ff feec 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001dda:	2102      	movs	r1, #2
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f7ff fec4 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	4619      	mov	r1, r3
 8001de6:	6878      	ldr	r0, [r7, #4]
 8001de8:	f7ff febf 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8001dec:	78bb      	ldrb	r3, [r7, #2]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff feba 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f7ff feeb 	bl	8001bd2 <_ZN7MCP25156endSPIEv>
}
 8001dfc:	bf00      	nop
 8001dfe:	3708      	adds	r7, #8
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b086      	sub	sp, #24
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	60f8      	str	r0, [r7, #12]
 8001e0c:	607a      	str	r2, [r7, #4]
 8001e0e:	461a      	mov	r2, r3
 8001e10:	460b      	mov	r3, r1
 8001e12:	72fb      	strb	r3, [r7, #11]
 8001e14:	4613      	mov	r3, r2
 8001e16:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8001e18:	68f8      	ldr	r0, [r7, #12]
 8001e1a:	f7ff feca 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8001e1e:	2102      	movs	r1, #2
 8001e20:	68f8      	ldr	r0, [r7, #12]
 8001e22:	f7ff fea2 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001e26:	7afb      	ldrb	r3, [r7, #11]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	68f8      	ldr	r0, [r7, #12]
 8001e2c:	f7ff fe9d 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001e30:	2300      	movs	r3, #0
 8001e32:	75fb      	strb	r3, [r7, #23]
 8001e34:	e00a      	b.n	8001e4c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	687a      	ldr	r2, [r7, #4]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	4619      	mov	r1, r3
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fe92 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8001e46:	7dfb      	ldrb	r3, [r7, #23]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	75fb      	strb	r3, [r7, #23]
 8001e4c:	7dfa      	ldrb	r2, [r7, #23]
 8001e4e:	7abb      	ldrb	r3, [r7, #10]
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d3f0      	bcc.n	8001e36 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8001e54:	68f8      	ldr	r0, [r7, #12]
 8001e56:	f7ff febc 	bl	8001bd2 <_ZN7MCP25156endSPIEv>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	4608      	mov	r0, r1
 8001e6c:	4611      	mov	r1, r2
 8001e6e:	461a      	mov	r2, r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	70fb      	strb	r3, [r7, #3]
 8001e74:	460b      	mov	r3, r1
 8001e76:	70bb      	strb	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
    startSPI();
 8001e7c:	6878      	ldr	r0, [r7, #4]
 8001e7e:	f7ff fe98 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8001e82:	2105      	movs	r1, #5
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff fe70 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6878      	ldr	r0, [r7, #4]
 8001e90:	f7ff fe6b 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8001e94:	78bb      	ldrb	r3, [r7, #2]
 8001e96:	4619      	mov	r1, r3
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff fe66 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8001e9e:	787b      	ldrb	r3, [r7, #1]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f7ff fe61 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8001ea8:	6878      	ldr	r0, [r7, #4]
 8001eaa:	f7ff fe92 	bl	8001bd2 <_ZN7MCP25156endSPIEv>
}
 8001eae:	bf00      	nop
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8001eb6:	b580      	push	{r7, lr}
 8001eb8:	b084      	sub	sp, #16
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
    startSPI();
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff fe77 	bl	8001bb2 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8001ec4:	21a0      	movs	r1, #160	@ 0xa0
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff fe4f 	bl	8001b6a <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fe5e 	bl	8001b8e <_ZN7MCP25156SPI_RxEv>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f7ff fe7b 	bl	8001bd2 <_ZN7MCP25156endSPIEv>

    return i;
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	3710      	adds	r7, #16
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}

08001ee6 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8001ee6:	b580      	push	{r7, lr}
 8001ee8:	b082      	sub	sp, #8
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8001eee:	2180      	movs	r1, #128	@ 0x80
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	f000 f812 	bl	8001f1a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3708      	adds	r7, #8
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd80      	pop	{r7, pc}

08001f00 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8001f08:	2100      	movs	r1, #0
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 f805 	bl	8001f1a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8001f10:	4603      	mov	r3, r0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	6078      	str	r0, [r7, #4]
 8001f22:	460b      	mov	r3, r1
 8001f24:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	22e0      	movs	r2, #224	@ 0xe0
 8001f2a:	210f      	movs	r1, #15
 8001f2c:	6878      	ldr	r0, [r7, #4]
 8001f2e:	f7ff ff98 	bl	8001e62 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8001f32:	f000 fc05 	bl	8002740 <HAL_GetTick>
 8001f36:	4603      	mov	r3, r0
 8001f38:	330a      	adds	r3, #10
 8001f3a:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8001f40:	e013      	b.n	8001f6a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8001f42:	210e      	movs	r1, #14
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff feef 	bl	8001d28 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	f023 031f 	bic.w	r3, r3, #31
 8001f54:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8001f56:	7bfa      	ldrb	r2, [r7, #15]
 8001f58:	78fb      	ldrb	r3, [r7, #3]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	bf0c      	ite	eq
 8001f5e:	2301      	moveq	r3, #1
 8001f60:	2300      	movne	r3, #0
 8001f62:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8001f64:	7dfb      	ldrb	r3, [r7, #23]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d10b      	bne.n	8001f82 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8001f6a:	f000 fbe9 	bl	8002740 <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4293      	cmp	r3, r2
 8001f74:	bf8c      	ite	hi
 8001f76:	2301      	movhi	r3, #1
 8001f78:	2300      	movls	r3, #0
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d1e0      	bne.n	8001f42 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8001f80:	e000      	b.n	8001f84 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8001f82:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8001f84:	7dfb      	ldrb	r3, [r7, #23]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	e000      	b.n	8001f90 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8001f8e:	2301      	movs	r3, #1

}
 8001f90:	4618      	mov	r0, r3
 8001f92:	3718      	adds	r7, #24
 8001f94:	46bd      	mov	sp, r7
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b084      	sub	sp, #16
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8001fa8:	6878      	ldr	r0, [r7, #4]
 8001faa:	f7ff ff9c 	bl	8001ee6 <_ZN7MCP251513setConfigModeEv>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8001fb2:	7afb      	ldrb	r3, [r7, #11]
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8001fb8:	7afb      	ldrb	r3, [r7, #11]
 8001fba:	e1b5      	b.n	8002328 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8001fc0:	78bb      	ldrb	r3, [r7, #2]
 8001fc2:	2b02      	cmp	r3, #2
 8001fc4:	d009      	beq.n	8001fda <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8001fc6:	2b02      	cmp	r3, #2
 8001fc8:	f300 8193 	bgt.w	80022f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	f000 811f 	beq.w	8002210 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	f000 808e 	beq.w	80020f4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8001fd8:	e18b      	b.n	80022f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8001fda:	78fb      	ldrb	r3, [r7, #3]
 8001fdc:	2b0f      	cmp	r3, #15
 8001fde:	f200 8085 	bhi.w	80020ec <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8001fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8001fe8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8001fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fe8:	08002029 	.word	0x08002029
 8001fec:	08002037 	.word	0x08002037
 8001ff0:	08002045 	.word	0x08002045
 8001ff4:	08002053 	.word	0x08002053
 8001ff8:	08002061 	.word	0x08002061
 8001ffc:	0800206f 	.word	0x0800206f
 8002000:	0800207d 	.word	0x0800207d
 8002004:	0800208b 	.word	0x0800208b
 8002008:	080020ed 	.word	0x080020ed
 800200c:	080020ed 	.word	0x080020ed
 8002010:	08002099 	.word	0x08002099
 8002014:	080020a7 	.word	0x080020a7
 8002018:	080020b5 	.word	0x080020b5
 800201c:	080020c3 	.word	0x080020c3
 8002020:	080020d1 	.word	0x080020d1
 8002024:	080020df 	.word	0x080020df
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8002028:	231f      	movs	r3, #31
 800202a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 800202c:	23bf      	movs	r3, #191	@ 0xbf
 800202e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8002030:	2387      	movs	r3, #135	@ 0x87
 8002032:	733b      	strb	r3, [r7, #12]
            break;
 8002034:	e05d      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8002036:	230f      	movs	r3, #15
 8002038:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 800203a:	23bf      	movs	r3, #191	@ 0xbf
 800203c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 800203e:	2387      	movs	r3, #135	@ 0x87
 8002040:	733b      	strb	r3, [r7, #12]
            break;
 8002042:	e056      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8002044:	2307      	movs	r3, #7
 8002046:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8002048:	23bf      	movs	r3, #191	@ 0xbf
 800204a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 800204c:	2387      	movs	r3, #135	@ 0x87
 800204e:	733b      	strb	r3, [r7, #12]
            break;
 8002050:	e04f      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8002052:	2307      	movs	r3, #7
 8002054:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8002056:	23a4      	movs	r3, #164	@ 0xa4
 8002058:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 800205a:	2384      	movs	r3, #132	@ 0x84
 800205c:	733b      	strb	r3, [r7, #12]
            break;
 800205e:	e048      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8002060:	2347      	movs	r3, #71	@ 0x47
 8002062:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8002064:	23e2      	movs	r3, #226	@ 0xe2
 8002066:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8002068:	2385      	movs	r3, #133	@ 0x85
 800206a:	733b      	strb	r3, [r7, #12]
            break;
 800206c:	e041      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 800206e:	2303      	movs	r3, #3
 8002070:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8002072:	23bf      	movs	r3, #191	@ 0xbf
 8002074:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8002076:	2387      	movs	r3, #135	@ 0x87
 8002078:	733b      	strb	r3, [r7, #12]
            break;
 800207a:	e03a      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 800207c:	2303      	movs	r3, #3
 800207e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8002080:	23b4      	movs	r3, #180	@ 0xb4
 8002082:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8002084:	2386      	movs	r3, #134	@ 0x86
 8002086:	733b      	strb	r3, [r7, #12]
            break;
 8002088:	e033      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 800208a:	2301      	movs	r3, #1
 800208c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 800208e:	23bf      	movs	r3, #191	@ 0xbf
 8002090:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8002092:	2387      	movs	r3, #135	@ 0x87
 8002094:	733b      	strb	r3, [r7, #12]
            break;
 8002096:	e02c      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8002098:	2301      	movs	r3, #1
 800209a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 800209c:	23b4      	movs	r3, #180	@ 0xb4
 800209e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 80020a0:	2386      	movs	r3, #134	@ 0x86
 80020a2:	733b      	strb	r3, [r7, #12]
            break;
 80020a4:	e025      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 80020a6:	2301      	movs	r3, #1
 80020a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 80020aa:	23b1      	movs	r3, #177	@ 0xb1
 80020ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 80020ae:	2385      	movs	r3, #133	@ 0x85
 80020b0:	733b      	strb	r3, [r7, #12]
            break;
 80020b2:	e01e      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 80020b4:	2300      	movs	r3, #0
 80020b6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 80020b8:	23b4      	movs	r3, #180	@ 0xb4
 80020ba:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 80020bc:	2386      	movs	r3, #134	@ 0x86
 80020be:	733b      	strb	r3, [r7, #12]
            break;
 80020c0:	e017      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 80020c2:	2300      	movs	r3, #0
 80020c4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 80020c6:	23b1      	movs	r3, #177	@ 0xb1
 80020c8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 80020ca:	2385      	movs	r3, #133	@ 0x85
 80020cc:	733b      	strb	r3, [r7, #12]
            break;
 80020ce:	e010      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80020d0:	2300      	movs	r3, #0
 80020d2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 80020d4:	2390      	movs	r3, #144	@ 0x90
 80020d6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 80020d8:	2382      	movs	r3, #130	@ 0x82
 80020da:	733b      	strb	r3, [r7, #12]
            break;
 80020dc:	e009      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 80020de:	2300      	movs	r3, #0
 80020e0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 80020e2:	2380      	movs	r3, #128	@ 0x80
 80020e4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80020e6:	2380      	movs	r3, #128	@ 0x80
 80020e8:	733b      	strb	r3, [r7, #12]
            break;
 80020ea:	e002      	b.n	80020f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
            break;
 80020f0:	bf00      	nop
        }
        break;
 80020f2:	e101      	b.n	80022f8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 80020f4:	78fb      	ldrb	r3, [r7, #3]
 80020f6:	2b0f      	cmp	r3, #15
 80020f8:	f200 8086 	bhi.w	8002208 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 80020fc:	a201      	add	r2, pc, #4	@ (adr r2, 8002104 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 80020fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002102:	bf00      	nop
 8002104:	08002145 	.word	0x08002145
 8002108:	08002153 	.word	0x08002153
 800210c:	08002161 	.word	0x08002161
 8002110:	08002209 	.word	0x08002209
 8002114:	0800216f 	.word	0x0800216f
 8002118:	0800217d 	.word	0x0800217d
 800211c:	0800218b 	.word	0x0800218b
 8002120:	08002199 	.word	0x08002199
 8002124:	080021a7 	.word	0x080021a7
 8002128:	08002209 	.word	0x08002209
 800212c:	080021b5 	.word	0x080021b5
 8002130:	080021c3 	.word	0x080021c3
 8002134:	080021d1 	.word	0x080021d1
 8002138:	080021df 	.word	0x080021df
 800213c:	080021ed 	.word	0x080021ed
 8002140:	080021fb 	.word	0x080021fb
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8002144:	233f      	movs	r3, #63	@ 0x3f
 8002146:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8002148:	23ff      	movs	r3, #255	@ 0xff
 800214a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 800214c:	2387      	movs	r3, #135	@ 0x87
 800214e:	733b      	strb	r3, [r7, #12]
            break;
 8002150:	e05d      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8002152:	231f      	movs	r3, #31
 8002154:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8002156:	23ff      	movs	r3, #255	@ 0xff
 8002158:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 800215a:	2387      	movs	r3, #135	@ 0x87
 800215c:	733b      	strb	r3, [r7, #12]
            break;
 800215e:	e056      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8002160:	230f      	movs	r3, #15
 8002162:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8002164:	23ff      	movs	r3, #255	@ 0xff
 8002166:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8002168:	2387      	movs	r3, #135	@ 0x87
 800216a:	733b      	strb	r3, [r7, #12]
            break;
 800216c:	e04f      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 800216e:	234e      	movs	r3, #78	@ 0x4e
 8002170:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8002172:	23f1      	movs	r3, #241	@ 0xf1
 8002174:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8002176:	2385      	movs	r3, #133	@ 0x85
 8002178:	733b      	strb	r3, [r7, #12]
            break;
 800217a:	e048      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 800217c:	2307      	movs	r3, #7
 800217e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8002180:	23ff      	movs	r3, #255	@ 0xff
 8002182:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8002184:	2387      	movs	r3, #135	@ 0x87
 8002186:	733b      	strb	r3, [r7, #12]
            break;
 8002188:	e041      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 800218a:	2307      	movs	r3, #7
 800218c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 800218e:	23fa      	movs	r3, #250	@ 0xfa
 8002190:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8002192:	2387      	movs	r3, #135	@ 0x87
 8002194:	733b      	strb	r3, [r7, #12]
            break;
 8002196:	e03a      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8002198:	2303      	movs	r3, #3
 800219a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 800219c:	23ff      	movs	r3, #255	@ 0xff
 800219e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 80021a0:	2387      	movs	r3, #135	@ 0x87
 80021a2:	733b      	strb	r3, [r7, #12]
            break;
 80021a4:	e033      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 80021a6:	2303      	movs	r3, #3
 80021a8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 80021aa:	23be      	movs	r3, #190	@ 0xbe
 80021ac:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 80021ae:	2307      	movs	r3, #7
 80021b0:	733b      	strb	r3, [r7, #12]
            break;
 80021b2:	e02c      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 80021b4:	2303      	movs	r3, #3
 80021b6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 80021b8:	23fa      	movs	r3, #250	@ 0xfa
 80021ba:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 80021bc:	2387      	movs	r3, #135	@ 0x87
 80021be:	733b      	strb	r3, [r7, #12]
            break;
 80021c0:	e025      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 80021c2:	2303      	movs	r3, #3
 80021c4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 80021c6:	23f0      	movs	r3, #240	@ 0xf0
 80021c8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 80021ca:	2386      	movs	r3, #134	@ 0x86
 80021cc:	733b      	strb	r3, [r7, #12]
            break;
 80021ce:	e01e      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80021d0:	2301      	movs	r3, #1
 80021d2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 80021d4:	23fa      	movs	r3, #250	@ 0xfa
 80021d6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 80021d8:	2387      	movs	r3, #135	@ 0x87
 80021da:	733b      	strb	r3, [r7, #12]
            break;
 80021dc:	e017      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80021de:	2341      	movs	r3, #65	@ 0x41
 80021e0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80021e2:	23f1      	movs	r3, #241	@ 0xf1
 80021e4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80021e6:	2385      	movs	r3, #133	@ 0x85
 80021e8:	733b      	strb	r3, [r7, #12]
            break;
 80021ea:	e010      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 80021ec:	2300      	movs	r3, #0
 80021ee:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 80021f0:	23f0      	movs	r3, #240	@ 0xf0
 80021f2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 80021f4:	2386      	movs	r3, #134	@ 0x86
 80021f6:	733b      	strb	r3, [r7, #12]
            break;
 80021f8:	e009      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 80021fa:	2300      	movs	r3, #0
 80021fc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 80021fe:	23d0      	movs	r3, #208	@ 0xd0
 8002200:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8002202:	2382      	movs	r3, #130	@ 0x82
 8002204:	733b      	strb	r3, [r7, #12]
            break;
 8002206:	e002      	b.n	800220e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8002208:	2300      	movs	r3, #0
 800220a:	73fb      	strb	r3, [r7, #15]
            break;
 800220c:	bf00      	nop
        }
        break;
 800220e:	e073      	b.n	80022f8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	3b04      	subs	r3, #4
 8002214:	2b0b      	cmp	r3, #11
 8002216:	d868      	bhi.n	80022ea <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8002218:	a201      	add	r2, pc, #4	@ (adr r2, 8002220 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 800221a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221e:	bf00      	nop
 8002220:	08002251 	.word	0x08002251
 8002224:	0800225f 	.word	0x0800225f
 8002228:	0800226d 	.word	0x0800226d
 800222c:	0800227b 	.word	0x0800227b
 8002230:	08002289 	.word	0x08002289
 8002234:	080022eb 	.word	0x080022eb
 8002238:	08002297 	.word	0x08002297
 800223c:	080022a5 	.word	0x080022a5
 8002240:	080022b3 	.word	0x080022b3
 8002244:	080022c1 	.word	0x080022c1
 8002248:	080022cf 	.word	0x080022cf
 800224c:	080022dd 	.word	0x080022dd
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8002250:	230b      	movs	r3, #11
 8002252:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8002254:	23ff      	movs	r3, #255	@ 0xff
 8002256:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8002258:	2387      	movs	r3, #135	@ 0x87
 800225a:	733b      	strb	r3, [r7, #12]
	    break;
 800225c:	e048      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 800225e:	2309      	movs	r3, #9
 8002260:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8002262:	23ff      	movs	r3, #255	@ 0xff
 8002264:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8002266:	2387      	movs	r3, #135	@ 0x87
 8002268:	733b      	strb	r3, [r7, #12]
            break;
 800226a:	e041      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 800226c:	2309      	movs	r3, #9
 800226e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8002270:	23fa      	movs	r3, #250	@ 0xfa
 8002272:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8002274:	2387      	movs	r3, #135	@ 0x87
 8002276:	733b      	strb	r3, [r7, #12]
            break;
 8002278:	e03a      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800227a:	2304      	movs	r3, #4
 800227c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800227e:	23ff      	movs	r3, #255	@ 0xff
 8002280:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8002282:	2387      	movs	r3, #135	@ 0x87
 8002284:	733b      	strb	r3, [r7, #12]
            break;
 8002286:	e033      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8002288:	2304      	movs	r3, #4
 800228a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 800228c:	23fe      	movs	r3, #254	@ 0xfe
 800228e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8002290:	2387      	movs	r3, #135	@ 0x87
 8002292:	733b      	strb	r3, [r7, #12]
	    break;
 8002294:	e02c      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8002296:	2304      	movs	r3, #4
 8002298:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800229a:	23fa      	movs	r3, #250	@ 0xfa
 800229c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800229e:	2387      	movs	r3, #135	@ 0x87
 80022a0:	733b      	strb	r3, [r7, #12]
            break;
 80022a2:	e025      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 80022a4:	2303      	movs	r3, #3
 80022a6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 80022a8:	23fa      	movs	r3, #250	@ 0xfa
 80022aa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 80022ac:	2387      	movs	r3, #135	@ 0x87
 80022ae:	733b      	strb	r3, [r7, #12]
            break;
 80022b0:	e01e      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 80022b6:	23ff      	movs	r3, #255	@ 0xff
 80022b8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 80022ba:	2387      	movs	r3, #135	@ 0x87
 80022bc:	733b      	strb	r3, [r7, #12]
            break;
 80022be:	e017      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 80022c0:	2341      	movs	r3, #65	@ 0x41
 80022c2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 80022c4:	23fb      	movs	r3, #251	@ 0xfb
 80022c6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 80022c8:	2386      	movs	r3, #134	@ 0x86
 80022ca:	733b      	strb	r3, [r7, #12]
            break;
 80022cc:	e010      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 80022ce:	2300      	movs	r3, #0
 80022d0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80022d2:	23fa      	movs	r3, #250	@ 0xfa
 80022d4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 80022d6:	2387      	movs	r3, #135	@ 0x87
 80022d8:	733b      	strb	r3, [r7, #12]
            break;
 80022da:	e009      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80022dc:	2300      	movs	r3, #0
 80022de:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80022e0:	23d9      	movs	r3, #217	@ 0xd9
 80022e2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80022e4:	2382      	movs	r3, #130	@ 0x82
 80022e6:	733b      	strb	r3, [r7, #12]
            break;
 80022e8:	e002      	b.n	80022f0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	73fb      	strb	r3, [r7, #15]
            break;
 80022ee:	bf00      	nop
        }
        break;
 80022f0:	e002      	b.n	80022f8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	73fb      	strb	r3, [r7, #15]
        break;
 80022f6:	bf00      	nop
    }

    if (set) {
 80022f8:	7bfb      	ldrb	r3, [r7, #15]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d013      	beq.n	8002326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 80022fe:	7bbb      	ldrb	r3, [r7, #14]
 8002300:	461a      	mov	r2, r3
 8002302:	212a      	movs	r1, #42	@ 0x2a
 8002304:	6878      	ldr	r0, [r7, #4]
 8002306:	f7ff fd5d 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 800230a:	7b7b      	ldrb	r3, [r7, #13]
 800230c:	461a      	mov	r2, r3
 800230e:	2129      	movs	r1, #41	@ 0x29
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff fd57 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8002316:	7b3b      	ldrb	r3, [r7, #12]
 8002318:	461a      	mov	r2, r3
 800231a:	2128      	movs	r1, #40	@ 0x28
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff fd51 	bl	8001dc4 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 8002322:	2300      	movs	r3, #0
 8002324:	e000      	b.n	8002328 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8002326:	2301      	movs	r3, #1
    }
}
 8002328:	4618      	mov	r0, r3
 800232a:	3710      	adds	r7, #16
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}

08002330 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8002330:	b480      	push	{r7}
 8002332:	b087      	sub	sp, #28
 8002334:	af00      	add	r7, sp, #0
 8002336:	60f8      	str	r0, [r7, #12]
 8002338:	60b9      	str	r1, [r7, #8]
 800233a:	603b      	str	r3, [r7, #0]
 800233c:	4613      	mov	r3, r2
 800233e:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8002344:	79fb      	ldrb	r3, [r7, #7]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d035      	beq.n	80023b6 <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	3303      	adds	r3, #3
 800234e:	8afa      	ldrh	r2, [r7, #22]
 8002350:	b2d2      	uxtb	r2, r2
 8002352:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8002354:	8afb      	ldrh	r3, [r7, #22]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b29a      	uxth	r2, r3
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	3302      	adds	r3, #2
 800235e:	b2d2      	uxtb	r2, r2
 8002360:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	0c1b      	lsrs	r3, r3, #16
 8002366:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8002368:	8afb      	ldrh	r3, [r7, #22]
 800236a:	b2da      	uxtb	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	3301      	adds	r3, #1
 8002370:	f002 0203 	and.w	r2, r2, #3
 8002374:	b2d2      	uxtb	r2, r2
 8002376:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	3301      	adds	r3, #1
 800237c:	7819      	ldrb	r1, [r3, #0]
 800237e:	8afb      	ldrh	r3, [r7, #22]
 8002380:	b2db      	uxtb	r3, r3
 8002382:	00db      	lsls	r3, r3, #3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f023 031f 	bic.w	r3, r3, #31
 800238a:	b2da      	uxtb	r2, r3
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3301      	adds	r3, #1
 8002390:	440a      	add	r2, r1
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	3301      	adds	r3, #1
 800239a:	781a      	ldrb	r2, [r3, #0]
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	3301      	adds	r3, #1
 80023a0:	f042 0208 	orr.w	r2, r2, #8
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80023a8:	8afb      	ldrh	r3, [r7, #22]
 80023aa:	095b      	lsrs	r3, r3, #5
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	b2da      	uxtb	r2, r3
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80023b4:	e014      	b.n	80023e0 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80023b6:	8afb      	ldrh	r3, [r7, #22]
 80023b8:	08db      	lsrs	r3, r3, #3
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80023c2:	8afb      	ldrh	r3, [r7, #22]
 80023c4:	b2da      	uxtb	r2, r3
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	3301      	adds	r3, #1
 80023ca:	0152      	lsls	r2, r2, #5
 80023cc:	b2d2      	uxtb	r2, r2
 80023ce:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	3303      	adds	r3, #3
 80023d4:	2200      	movs	r2, #0
 80023d6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	3302      	adds	r3, #2
 80023dc:	2200      	movs	r2, #0
 80023de:	701a      	strb	r2, [r3, #0]
}
 80023e0:	bf00      	nop
 80023e2:	371c      	adds	r7, #28
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607b      	str	r3, [r7, #4]
 80023f6:	460b      	mov	r3, r1
 80023f8:	72fb      	strb	r3, [r7, #11]
 80023fa:	4613      	mov	r3, r2
 80023fc:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f7ff fd71 	bl	8001ee6 <_ZN7MCP251513setConfigModeEv>
 8002404:	4603      	mov	r3, r0
 8002406:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8002408:	7dbb      	ldrb	r3, [r7, #22]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d001      	beq.n	8002412 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 800240e:	7dbb      	ldrb	r3, [r7, #22]
 8002410:	e01c      	b.n	800244c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8002412:	7aba      	ldrb	r2, [r7, #10]
 8002414:	f107 0110 	add.w	r1, r7, #16
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68f8      	ldr	r0, [r7, #12]
 800241c:	f7ff ff88 	bl	8002330 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8002420:	7afb      	ldrb	r3, [r7, #11]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d002      	beq.n	800242c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 8002426:	2b01      	cmp	r3, #1
 8002428:	d003      	beq.n	8002432 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 800242a:	e005      	b.n	8002438 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 800242c:	2320      	movs	r3, #32
 800242e:	75fb      	strb	r3, [r7, #23]
 8002430:	e004      	b.n	800243c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 8002432:	2324      	movs	r3, #36	@ 0x24
 8002434:	75fb      	strb	r3, [r7, #23]
 8002436:	e001      	b.n	800243c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8002438:	2301      	movs	r3, #1
 800243a:	e007      	b.n	800244c <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 800243c:	f107 0210 	add.w	r2, r7, #16
 8002440:	7df9      	ldrb	r1, [r7, #23]
 8002442:	2304      	movs	r3, #4
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f7ff fcdd 	bl	8001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	607b      	str	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	72fb      	strb	r3, [r7, #11]
 8002462:	4613      	mov	r3, r2
 8002464:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fd3d 	bl	8001ee6 <_ZN7MCP251513setConfigModeEv>
 800246c:	4603      	mov	r3, r0
 800246e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8002470:	7dbb      	ldrb	r3, [r7, #22]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8002476:	7dbb      	ldrb	r3, [r7, #22]
 8002478:	e035      	b.n	80024e6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 800247a:	7afb      	ldrb	r3, [r7, #11]
 800247c:	2b05      	cmp	r3, #5
 800247e:	d821      	bhi.n	80024c4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8002480:	a201      	add	r2, pc, #4	@ (adr r2, 8002488 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 8002482:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002486:	bf00      	nop
 8002488:	080024a1 	.word	0x080024a1
 800248c:	080024a7 	.word	0x080024a7
 8002490:	080024ad 	.word	0x080024ad
 8002494:	080024b3 	.word	0x080024b3
 8002498:	080024b9 	.word	0x080024b9
 800249c:	080024bf 	.word	0x080024bf
        case RXF0: reg = MCP_RXF0SIDH; break;
 80024a0:	2300      	movs	r3, #0
 80024a2:	75fb      	strb	r3, [r7, #23]
 80024a4:	e010      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80024a6:	2304      	movs	r3, #4
 80024a8:	75fb      	strb	r3, [r7, #23]
 80024aa:	e00d      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80024ac:	2308      	movs	r3, #8
 80024ae:	75fb      	strb	r3, [r7, #23]
 80024b0:	e00a      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80024b2:	2310      	movs	r3, #16
 80024b4:	75fb      	strb	r3, [r7, #23]
 80024b6:	e007      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80024b8:	2314      	movs	r3, #20
 80024ba:	75fb      	strb	r3, [r7, #23]
 80024bc:	e004      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80024be:	2318      	movs	r3, #24
 80024c0:	75fb      	strb	r3, [r7, #23]
 80024c2:	e001      	b.n	80024c8 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 80024c4:	2301      	movs	r3, #1
 80024c6:	e00e      	b.n	80024e6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80024c8:	7aba      	ldrb	r2, [r7, #10]
 80024ca:	f107 0110 	add.w	r1, r7, #16
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f7ff ff2d 	bl	8002330 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 80024d6:	f107 0210 	add.w	r2, r7, #16
 80024da:	7df9      	ldrb	r1, [r7, #23]
 80024dc:	2304      	movs	r3, #4
 80024de:	68f8      	ldr	r0, [r7, #12]
 80024e0:	f7ff fc90 	bl	8001e04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80024e4:	2300      	movs	r3, #0
}
 80024e6:	4618      	mov	r0, r3
 80024e8:	3718      	adds	r7, #24
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop

080024f0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b088      	sub	sp, #32
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	60f8      	str	r0, [r7, #12]
 80024f8:	460b      	mov	r3, r1
 80024fa:	607a      	str	r2, [r7, #4]
 80024fc:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80024fe:	7afb      	ldrb	r3, [r7, #11]
 8002500:	009b      	lsls	r3, r3, #2
 8002502:	4a30      	ldr	r2, [pc, #192]	@ (80025c4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 8002504:	4413      	add	r3, r2
 8002506:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	7859      	ldrb	r1, [r3, #1]
 800250c:	f107 0210 	add.w	r2, r7, #16
 8002510:	2305      	movs	r3, #5
 8002512:	68f8      	ldr	r0, [r7, #12]
 8002514:	f7ff fc27 	bl	8001d66 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8002518:	7c3b      	ldrb	r3, [r7, #16]
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	7c7a      	ldrb	r2, [r7, #17]
 800251e:	0952      	lsrs	r2, r2, #5
 8002520:	b2d2      	uxtb	r2, r2
 8002522:	4413      	add	r3, r2
 8002524:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8002526:	7c7b      	ldrb	r3, [r7, #17]
 8002528:	f003 0308 	and.w	r3, r3, #8
 800252c:	2b00      	cmp	r3, #0
 800252e:	d014      	beq.n	800255a <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	009a      	lsls	r2, r3, #2
 8002534:	7c7b      	ldrb	r3, [r7, #17]
 8002536:	f003 0303 	and.w	r3, r3, #3
 800253a:	4413      	add	r3, r2
 800253c:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	021b      	lsls	r3, r3, #8
 8002542:	7cba      	ldrb	r2, [r7, #18]
 8002544:	4413      	add	r3, r2
 8002546:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	021b      	lsls	r3, r3, #8
 800254c:	7cfa      	ldrb	r2, [r7, #19]
 800254e:	4413      	add	r3, r2
 8002550:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 8002552:	69fb      	ldr	r3, [r7, #28]
 8002554:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002558:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 800255a:	7d3b      	ldrb	r3, [r7, #20]
 800255c:	f003 030f 	and.w	r3, r3, #15
 8002560:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 8002562:	7dfb      	ldrb	r3, [r7, #23]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d901      	bls.n	800256c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8002568:	2301      	movs	r3, #1
 800256a:	e027      	b.n	80025bc <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	781b      	ldrb	r3, [r3, #0]
 8002570:	4619      	mov	r1, r3
 8002572:	68f8      	ldr	r0, [r7, #12]
 8002574:	f7ff fbd8 	bl	8001d28 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8002578:	4603      	mov	r3, r0
 800257a:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 800257c:	7dbb      	ldrb	r3, [r7, #22]
 800257e:	f003 0308 	and.w	r3, r3, #8
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800258c:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	7dfa      	ldrb	r2, [r7, #23]
 8002598:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	7899      	ldrb	r1, [r3, #2]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	f103 0208 	add.w	r2, r3, #8
 80025a4:	7dfb      	ldrb	r3, [r7, #23]
 80025a6:	68f8      	ldr	r0, [r7, #12]
 80025a8:	f7ff fbdd 	bl	8001d66 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 80025ac:	69bb      	ldr	r3, [r7, #24]
 80025ae:	78da      	ldrb	r2, [r3, #3]
 80025b0:	2300      	movs	r3, #0
 80025b2:	212c      	movs	r1, #44	@ 0x2c
 80025b4:	68f8      	ldr	r0, [r7, #12]
 80025b6:	f7ff fc54 	bl	8001e62 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3720      	adds	r7, #32
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	0800e3bc 	.word	0x0800e3bc

080025c8 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
 80025d0:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f7ff fc6f 	bl	8001eb6 <_ZN7MCP25159getStatusEv>
 80025d8:	4603      	mov	r3, r0
 80025da:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 80025dc:	7bbb      	ldrb	r3, [r7, #14]
 80025de:	f003 0301 	and.w	r3, r3, #1
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d007      	beq.n	80025f6 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 80025e6:	683a      	ldr	r2, [r7, #0]
 80025e8:	2100      	movs	r1, #0
 80025ea:	6878      	ldr	r0, [r7, #4]
 80025ec:	f7ff ff80 	bl	80024f0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80025f0:	4603      	mov	r3, r0
 80025f2:	73fb      	strb	r3, [r7, #15]
 80025f4:	e00e      	b.n	8002614 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80025f6:	7bbb      	ldrb	r3, [r7, #14]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d007      	beq.n	8002610 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	2101      	movs	r1, #1
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f7ff ff73 	bl	80024f0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 800260a:	4603      	mov	r3, r0
 800260c:	73fb      	strb	r3, [r7, #15]
 800260e:	e001      	b.n	8002614 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8002610:	2305      	movs	r3, #5
 8002612:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8002614:	7bfb      	ldrb	r3, [r7, #15]
}
 8002616:	4618      	mov	r0, r3
 8002618:	3710      	adds	r7, #16
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
	...

08002620 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002620:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002658 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002624:	f7fe fd90 	bl	8001148 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002628:	480c      	ldr	r0, [pc, #48]	@ (800265c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800262a:	490d      	ldr	r1, [pc, #52]	@ (8002660 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800262c:	4a0d      	ldr	r2, [pc, #52]	@ (8002664 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800262e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002630:	e002      	b.n	8002638 <LoopCopyDataInit>

08002632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002636:	3304      	adds	r3, #4

08002638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800263a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800263c:	d3f9      	bcc.n	8002632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800263e:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002640:	4c0a      	ldr	r4, [pc, #40]	@ (800266c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002644:	e001      	b.n	800264a <LoopFillZerobss>

08002646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002648:	3204      	adds	r2, #4

0800264a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800264a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800264c:	d3fb      	bcc.n	8002646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800264e:	f008 fd7f 	bl	800b150 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002652:	f7fe f82f 	bl	80006b4 <main>
  bx  lr    
 8002656:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800265c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002660:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002664:	0800e408 	.word	0x0800e408
  ldr r2, =_sbss
 8002668:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 800266c:	200016d0 	.word	0x200016d0

08002670 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002670:	e7fe      	b.n	8002670 <ADC_IRQHandler>
	...

08002674 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002678:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_Init+0x40>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a0d      	ldr	r2, [pc, #52]	@ (80026b4 <HAL_Init+0x40>)
 800267e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002682:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002684:	4b0b      	ldr	r3, [pc, #44]	@ (80026b4 <HAL_Init+0x40>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a0a      	ldr	r2, [pc, #40]	@ (80026b4 <HAL_Init+0x40>)
 800268a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002690:	4b08      	ldr	r3, [pc, #32]	@ (80026b4 <HAL_Init+0x40>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a07      	ldr	r2, [pc, #28]	@ (80026b4 <HAL_Init+0x40>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800269c:	2003      	movs	r0, #3
 800269e:	f000 f94f 	bl	8002940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026a2:	200f      	movs	r0, #15
 80026a4:	f000 f808 	bl	80026b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026a8:	f7fe fcd8 	bl	800105c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40023c00 	.word	0x40023c00

080026b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026c0:	4b12      	ldr	r3, [pc, #72]	@ (800270c <HAL_InitTick+0x54>)
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	4b12      	ldr	r3, [pc, #72]	@ (8002710 <HAL_InitTick+0x58>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	4619      	mov	r1, r3
 80026ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80026d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f967 	bl	80029aa <HAL_SYSTICK_Config>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e00e      	b.n	8002704 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b0f      	cmp	r3, #15
 80026ea:	d80a      	bhi.n	8002702 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026ec:	2200      	movs	r2, #0
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026f4:	f000 f92f 	bl	8002956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026f8:	4a06      	ldr	r2, [pc, #24]	@ (8002714 <HAL_InitTick+0x5c>)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026fe:	2300      	movs	r3, #0
 8002700:	e000      	b.n	8002704 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002702:	2301      	movs	r3, #1
}
 8002704:	4618      	mov	r0, r3
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}
 800270c:	20000000 	.word	0x20000000
 8002710:	20000008 	.word	0x20000008
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002718:	b480      	push	{r7}
 800271a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800271c:	4b06      	ldr	r3, [pc, #24]	@ (8002738 <HAL_IncTick+0x20>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	461a      	mov	r2, r3
 8002722:	4b06      	ldr	r3, [pc, #24]	@ (800273c <HAL_IncTick+0x24>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4413      	add	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	@ (800273c <HAL_IncTick+0x24>)
 800272a:	6013      	str	r3, [r2, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	20000008 	.word	0x20000008
 800273c:	200002e8 	.word	0x200002e8

08002740 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002740:	b480      	push	{r7}
 8002742:	af00      	add	r7, sp, #0
  return uwTick;
 8002744:	4b03      	ldr	r3, [pc, #12]	@ (8002754 <HAL_GetTick+0x14>)
 8002746:	681b      	ldr	r3, [r3, #0]
}
 8002748:	4618      	mov	r0, r3
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	200002e8 	.word	0x200002e8

08002758 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002760:	f7ff ffee 	bl	8002740 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002770:	d005      	beq.n	800277e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002772:	4b0a      	ldr	r3, [pc, #40]	@ (800279c <HAL_Delay+0x44>)
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	461a      	mov	r2, r3
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	4413      	add	r3, r2
 800277c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800277e:	bf00      	nop
 8002780:	f7ff ffde 	bl	8002740 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	68fa      	ldr	r2, [r7, #12]
 800278c:	429a      	cmp	r2, r3
 800278e:	d8f7      	bhi.n	8002780 <HAL_Delay+0x28>
  {
  }
}
 8002790:	bf00      	nop
 8002792:	bf00      	nop
 8002794:	3710      	adds	r7, #16
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	20000008 	.word	0x20000008

080027a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	f003 0307 	and.w	r3, r3, #7
 80027ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80027b0:	4b0c      	ldr	r3, [pc, #48]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027b2:	68db      	ldr	r3, [r3, #12]
 80027b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027bc:	4013      	ands	r3, r2
 80027be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027c4:	68bb      	ldr	r3, [r7, #8]
 80027c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027d2:	4a04      	ldr	r2, [pc, #16]	@ (80027e4 <__NVIC_SetPriorityGrouping+0x44>)
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	60d3      	str	r3, [r2, #12]
}
 80027d8:	bf00      	nop
 80027da:	3714      	adds	r7, #20
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000ed00 	.word	0xe000ed00

080027e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027e8:	b480      	push	{r7}
 80027ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027ec:	4b04      	ldr	r3, [pc, #16]	@ (8002800 <__NVIC_GetPriorityGrouping+0x18>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0a1b      	lsrs	r3, r3, #8
 80027f2:	f003 0307 	and.w	r3, r3, #7
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	e000ed00 	.word	0xe000ed00

08002804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800280e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002812:	2b00      	cmp	r3, #0
 8002814:	db0b      	blt.n	800282e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002816:	79fb      	ldrb	r3, [r7, #7]
 8002818:	f003 021f 	and.w	r2, r3, #31
 800281c:	4907      	ldr	r1, [pc, #28]	@ (800283c <__NVIC_EnableIRQ+0x38>)
 800281e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002822:	095b      	lsrs	r3, r3, #5
 8002824:	2001      	movs	r0, #1
 8002826:	fa00 f202 	lsl.w	r2, r0, r2
 800282a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000e100 	.word	0xe000e100

08002840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	@ (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002894:	b480      	push	{r7}
 8002896:	b089      	sub	sp, #36	@ 0x24
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	f003 0307 	and.w	r3, r3, #7
 80028a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	bf28      	it	cs
 80028b2:	2304      	movcs	r3, #4
 80028b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2b06      	cmp	r3, #6
 80028bc:	d902      	bls.n	80028c4 <NVIC_EncodePriority+0x30>
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	3b03      	subs	r3, #3
 80028c2:	e000      	b.n	80028c6 <NVIC_EncodePriority+0x32>
 80028c4:	2300      	movs	r3, #0
 80028c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80028cc:	69bb      	ldr	r3, [r7, #24]
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43da      	mvns	r2, r3
 80028d4:	68bb      	ldr	r3, [r7, #8]
 80028d6:	401a      	ands	r2, r3
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028dc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	fa01 f303 	lsl.w	r3, r1, r3
 80028e6:	43d9      	mvns	r1, r3
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028ec:	4313      	orrs	r3, r2
         );
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3724      	adds	r7, #36	@ 0x24
 80028f2:	46bd      	mov	sp, r7
 80028f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f8:	4770      	bx	lr
	...

080028fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3b01      	subs	r3, #1
 8002908:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290c:	d301      	bcc.n	8002912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800290e:	2301      	movs	r3, #1
 8002910:	e00f      	b.n	8002932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002912:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <SysTick_Config+0x40>)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	3b01      	subs	r3, #1
 8002918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800291a:	210f      	movs	r1, #15
 800291c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002920:	f7ff ff8e 	bl	8002840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002924:	4b05      	ldr	r3, [pc, #20]	@ (800293c <SysTick_Config+0x40>)
 8002926:	2200      	movs	r2, #0
 8002928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800292a:	4b04      	ldr	r3, [pc, #16]	@ (800293c <SysTick_Config+0x40>)
 800292c:	2207      	movs	r2, #7
 800292e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3708      	adds	r7, #8
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	e000e010 	.word	0xe000e010

08002940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002948:	6878      	ldr	r0, [r7, #4]
 800294a:	f7ff ff29 	bl	80027a0 <__NVIC_SetPriorityGrouping>
}
 800294e:	bf00      	nop
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002956:	b580      	push	{r7, lr}
 8002958:	b086      	sub	sp, #24
 800295a:	af00      	add	r7, sp, #0
 800295c:	4603      	mov	r3, r0
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002964:	2300      	movs	r3, #0
 8002966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002968:	f7ff ff3e 	bl	80027e8 <__NVIC_GetPriorityGrouping>
 800296c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	68b9      	ldr	r1, [r7, #8]
 8002972:	6978      	ldr	r0, [r7, #20]
 8002974:	f7ff ff8e 	bl	8002894 <NVIC_EncodePriority>
 8002978:	4602      	mov	r2, r0
 800297a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800297e:	4611      	mov	r1, r2
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff ff5d 	bl	8002840 <__NVIC_SetPriority>
}
 8002986:	bf00      	nop
 8002988:	3718      	adds	r7, #24
 800298a:	46bd      	mov	sp, r7
 800298c:	bd80      	pop	{r7, pc}

0800298e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800298e:	b580      	push	{r7, lr}
 8002990:	b082      	sub	sp, #8
 8002992:	af00      	add	r7, sp, #0
 8002994:	4603      	mov	r3, r0
 8002996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f7ff ff31 	bl	8002804 <__NVIC_EnableIRQ>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}

080029aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029aa:	b580      	push	{r7, lr}
 80029ac:	b082      	sub	sp, #8
 80029ae:	af00      	add	r7, sp, #0
 80029b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029b2:	6878      	ldr	r0, [r7, #4]
 80029b4:	f7ff ffa2 	bl	80028fc <SysTick_Config>
 80029b8:	4603      	mov	r3, r0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	3708      	adds	r7, #8
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd80      	pop	{r7, pc}
	...

080029c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b086      	sub	sp, #24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80029d0:	f7ff feb6 	bl	8002740 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e099      	b.n	8002b14 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f022 0201 	bic.w	r2, r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a00:	e00f      	b.n	8002a22 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a02:	f7ff fe9d 	bl	8002740 <HAL_GetTick>
 8002a06:	4602      	mov	r2, r0
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1ad3      	subs	r3, r2, r3
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d908      	bls.n	8002a22 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2220      	movs	r2, #32
 8002a14:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2203      	movs	r2, #3
 8002a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e078      	b.n	8002b14 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f003 0301 	and.w	r3, r3, #1
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1e8      	bne.n	8002a02 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002a38:	697a      	ldr	r2, [r7, #20]
 8002a3a:	4b38      	ldr	r3, [pc, #224]	@ (8002b1c <HAL_DMA_Init+0x158>)
 8002a3c:	4013      	ands	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	685a      	ldr	r2, [r3, #4]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a4e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	691b      	ldr	r3, [r3, #16]
 8002a54:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002a5a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002a66:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002a6e:	697a      	ldr	r2, [r7, #20]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d107      	bne.n	8002a8c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	4313      	orrs	r3, r2
 8002a86:	697a      	ldr	r2, [r7, #20]
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	697a      	ldr	r2, [r7, #20]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	695b      	ldr	r3, [r3, #20]
 8002a9a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	f023 0307 	bic.w	r3, r3, #7
 8002aa2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ab2:	2b04      	cmp	r3, #4
 8002ab4:	d117      	bne.n	8002ae6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002aba:	697a      	ldr	r2, [r7, #20]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00e      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002ac8:	6878      	ldr	r0, [r7, #4]
 8002aca:	f000 fa91 	bl	8002ff0 <DMA_CheckFifoParam>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d008      	beq.n	8002ae6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2240      	movs	r2, #64	@ 0x40
 8002ad8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e016      	b.n	8002b14 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	697a      	ldr	r2, [r7, #20]
 8002aec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa48 	bl	8002f84 <DMA_CalcBaseAndBitshift>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002afc:	223f      	movs	r2, #63	@ 0x3f
 8002afe:	409a      	lsls	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002b12:	2300      	movs	r3, #0
}
 8002b14:	4618      	mov	r0, r3
 8002b16:	3718      	adds	r7, #24
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	f010803f 	.word	0xf010803f

08002b20 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
 8002b2c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <HAL_DMA_Start_IT+0x26>
 8002b42:	2302      	movs	r3, #2
 8002b44:	e040      	b.n	8002bc8 <HAL_DMA_Start_IT+0xa8>
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2201      	movs	r2, #1
 8002b4a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b54:	b2db      	uxtb	r3, r3
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d12f      	bne.n	8002bba <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2202      	movs	r2, #2
 8002b5e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	68b9      	ldr	r1, [r7, #8]
 8002b6e:	68f8      	ldr	r0, [r7, #12]
 8002b70:	f000 f9da 	bl	8002f28 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b78:	223f      	movs	r2, #63	@ 0x3f
 8002b7a:	409a      	lsls	r2, r3
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f042 0216 	orr.w	r2, r2, #22
 8002b8e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d007      	beq.n	8002ba8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0208 	orr.w	r2, r2, #8
 8002ba6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	681a      	ldr	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0201 	orr.w	r2, r2, #1
 8002bb6:	601a      	str	r2, [r3, #0]
 8002bb8:	e005      	b.n	8002bc6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002bc2:	2302      	movs	r3, #2
 8002bc4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002bc6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002bc8:	4618      	mov	r0, r3
 8002bca:	3718      	adds	r7, #24
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b083      	sub	sp, #12
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d004      	beq.n	8002bee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2280      	movs	r2, #128	@ 0x80
 8002be8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e00c      	b.n	8002c08 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2205      	movs	r2, #5
 8002bf2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f022 0201 	bic.w	r2, r2, #1
 8002c04:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b086      	sub	sp, #24
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002c20:	4b8e      	ldr	r3, [pc, #568]	@ (8002e5c <HAL_DMA_IRQHandler+0x248>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a8e      	ldr	r2, [pc, #568]	@ (8002e60 <HAL_DMA_IRQHandler+0x24c>)
 8002c26:	fba2 2303 	umull	r2, r3, r2, r3
 8002c2a:	0a9b      	lsrs	r3, r3, #10
 8002c2c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c32:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c3e:	2208      	movs	r2, #8
 8002c40:	409a      	lsls	r2, r3
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	4013      	ands	r3, r2
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d013      	beq.n	8002c80 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f022 0204 	bic.w	r2, r2, #4
 8002c66:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	409a      	lsls	r2, r3
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c78:	f043 0201 	orr.w	r2, r3, #1
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c84:	2201      	movs	r2, #1
 8002c86:	409a      	lsls	r2, r3
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d012      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00b      	beq.n	8002cb6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	409a      	lsls	r2, r3
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002cae:	f043 0202 	orr.w	r2, r3, #2
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cba:	2204      	movs	r2, #4
 8002cbc:	409a      	lsls	r2, r3
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d012      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f003 0302 	and.w	r3, r3, #2
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d00b      	beq.n	8002cec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cd8:	2204      	movs	r2, #4
 8002cda:	409a      	lsls	r2, r3
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ce4:	f043 0204 	orr.w	r2, r3, #4
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf0:	2210      	movs	r2, #16
 8002cf2:	409a      	lsls	r2, r3
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	4013      	ands	r3, r2
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d043      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d03c      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d0e:	2210      	movs	r2, #16
 8002d10:	409a      	lsls	r2, r3
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d018      	beq.n	8002d56 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d108      	bne.n	8002d44 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d024      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	4798      	blx	r3
 8002d42:	e01f      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d01b      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	4798      	blx	r3
 8002d54:	e016      	b.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d107      	bne.n	8002d74 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	681a      	ldr	r2, [r3, #0]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f022 0208 	bic.w	r2, r2, #8
 8002d72:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d003      	beq.n	8002d84 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d80:	6878      	ldr	r0, [r7, #4]
 8002d82:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d88:	2220      	movs	r2, #32
 8002d8a:	409a      	lsls	r2, r3
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 808f 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0310 	and.w	r3, r3, #16
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	f000 8087 	beq.w	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002daa:	2220      	movs	r2, #32
 8002dac:	409a      	lsls	r2, r3
 8002dae:	693b      	ldr	r3, [r7, #16]
 8002db0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	2b05      	cmp	r3, #5
 8002dbc:	d136      	bne.n	8002e2c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	681a      	ldr	r2, [r3, #0]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	f022 0216 	bic.w	r2, r2, #22
 8002dcc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	695a      	ldr	r2, [r3, #20]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002ddc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d103      	bne.n	8002dee <HAL_DMA_IRQHandler+0x1da>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d007      	beq.n	8002dfe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 0208 	bic.w	r2, r2, #8
 8002dfc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e02:	223f      	movs	r2, #63	@ 0x3f
 8002e04:	409a      	lsls	r2, r3
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2200      	movs	r2, #0
 8002e16:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d07e      	beq.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	4798      	blx	r3
        }
        return;
 8002e2a:	e079      	b.n	8002f20 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d01d      	beq.n	8002e76 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10d      	bne.n	8002e64 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d031      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	4798      	blx	r3
 8002e58:	e02c      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
 8002e5a:	bf00      	nop
 8002e5c:	20000000 	.word	0x20000000
 8002e60:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d023      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	4798      	blx	r3
 8002e74:	e01e      	b.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d10f      	bne.n	8002ea4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0210 	bic.w	r2, r2, #16
 8002e92:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d032      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ec0:	f003 0301 	and.w	r3, r3, #1
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d022      	beq.n	8002f0e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2205      	movs	r2, #5
 8002ecc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	681a      	ldr	r2, [r3, #0]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f022 0201 	bic.w	r2, r2, #1
 8002ede:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	3301      	adds	r3, #1
 8002ee4:	60bb      	str	r3, [r7, #8]
 8002ee6:	697a      	ldr	r2, [r7, #20]
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d307      	bcc.n	8002efc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0301 	and.w	r3, r3, #1
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1f2      	bne.n	8002ee0 <HAL_DMA_IRQHandler+0x2cc>
 8002efa:	e000      	b.n	8002efe <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002efc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2201      	movs	r2, #1
 8002f02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	4798      	blx	r3
 8002f1e:	e000      	b.n	8002f22 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002f20:	bf00      	nop
    }
  }
}
 8002f22:	3718      	adds	r7, #24
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	60f8      	str	r0, [r7, #12]
 8002f30:	60b9      	str	r1, [r7, #8]
 8002f32:	607a      	str	r2, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681a      	ldr	r2, [r3, #0]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002f44:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	2b40      	cmp	r3, #64	@ 0x40
 8002f54:	d108      	bne.n	8002f68 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68ba      	ldr	r2, [r7, #8]
 8002f64:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002f66:	e007      	b.n	8002f78 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	68ba      	ldr	r2, [r7, #8]
 8002f6e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	687a      	ldr	r2, [r7, #4]
 8002f76:	60da      	str	r2, [r3, #12]
}
 8002f78:	bf00      	nop
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	3b10      	subs	r3, #16
 8002f94:	4a14      	ldr	r2, [pc, #80]	@ (8002fe8 <DMA_CalcBaseAndBitshift+0x64>)
 8002f96:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002f9e:	4a13      	ldr	r2, [pc, #76]	@ (8002fec <DMA_CalcBaseAndBitshift+0x68>)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	781b      	ldrb	r3, [r3, #0]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2b03      	cmp	r3, #3
 8002fb0:	d909      	bls.n	8002fc6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fba:	f023 0303 	bic.w	r3, r3, #3
 8002fbe:	1d1a      	adds	r2, r3, #4
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fc4:	e007      	b.n	8002fd6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fce:	f023 0303 	bic.w	r3, r3, #3
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3714      	adds	r7, #20
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr
 8002fe6:	bf00      	nop
 8002fe8:	aaaaaaab 	.word	0xaaaaaaab
 8002fec:	0800e3c4 	.word	0x0800e3c4

08002ff0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003000:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d11f      	bne.n	800304a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	2b03      	cmp	r3, #3
 800300e:	d856      	bhi.n	80030be <DMA_CheckFifoParam+0xce>
 8003010:	a201      	add	r2, pc, #4	@ (adr r2, 8003018 <DMA_CheckFifoParam+0x28>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	08003029 	.word	0x08003029
 800301c:	0800303b 	.word	0x0800303b
 8003020:	08003029 	.word	0x08003029
 8003024:	080030bf 	.word	0x080030bf
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800302c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003030:	2b00      	cmp	r3, #0
 8003032:	d046      	beq.n	80030c2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003038:	e043      	b.n	80030c2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003042:	d140      	bne.n	80030c6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003048:	e03d      	b.n	80030c6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003052:	d121      	bne.n	8003098 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003054:	68bb      	ldr	r3, [r7, #8]
 8003056:	2b03      	cmp	r3, #3
 8003058:	d837      	bhi.n	80030ca <DMA_CheckFifoParam+0xda>
 800305a:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <DMA_CheckFifoParam+0x70>)
 800305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003060:	08003071 	.word	0x08003071
 8003064:	08003077 	.word	0x08003077
 8003068:	08003071 	.word	0x08003071
 800306c:	08003089 	.word	0x08003089
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	73fb      	strb	r3, [r7, #15]
      break;
 8003074:	e030      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d025      	beq.n	80030ce <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e022      	b.n	80030ce <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003090:	d11f      	bne.n	80030d2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003096:	e01c      	b.n	80030d2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d903      	bls.n	80030a6 <DMA_CheckFifoParam+0xb6>
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d003      	beq.n	80030ac <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030a4:	e018      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	73fb      	strb	r3, [r7, #15]
      break;
 80030aa:	e015      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00e      	beq.n	80030d6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e00b      	b.n	80030d6 <DMA_CheckFifoParam+0xe6>
      break;
 80030be:	bf00      	nop
 80030c0:	e00a      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c2:	bf00      	nop
 80030c4:	e008      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030c6:	bf00      	nop
 80030c8:	e006      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ca:	bf00      	nop
 80030cc:	e004      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ce:	bf00      	nop
 80030d0:	e002      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030d2:	bf00      	nop
 80030d4:	e000      	b.n	80030d8 <DMA_CheckFifoParam+0xe8>
      break;
 80030d6:	bf00      	nop
    }
  } 
  
  return status; 
 80030d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3714      	adds	r7, #20
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr
 80030e6:	bf00      	nop

080030e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b089      	sub	sp, #36	@ 0x24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
 80030f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030f2:	2300      	movs	r3, #0
 80030f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80030fe:	2300      	movs	r3, #0
 8003100:	61fb      	str	r3, [r7, #28]
 8003102:	e159      	b.n	80033b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003104:	2201      	movs	r2, #1
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	697a      	ldr	r2, [r7, #20]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	429a      	cmp	r2, r3
 800311e:	f040 8148 	bne.w	80033b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0303 	and.w	r3, r3, #3
 800312a:	2b01      	cmp	r3, #1
 800312c:	d005      	beq.n	800313a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003136:	2b02      	cmp	r3, #2
 8003138:	d130      	bne.n	800319c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	2203      	movs	r2, #3
 8003146:	fa02 f303 	lsl.w	r3, r2, r3
 800314a:	43db      	mvns	r3, r3
 800314c:	69ba      	ldr	r2, [r7, #24]
 800314e:	4013      	ands	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68da      	ldr	r2, [r3, #12]
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	005b      	lsls	r3, r3, #1
 800315a:	fa02 f303 	lsl.w	r3, r2, r3
 800315e:	69ba      	ldr	r2, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003170:	2201      	movs	r2, #1
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	fa02 f303 	lsl.w	r3, r2, r3
 8003178:	43db      	mvns	r3, r3
 800317a:	69ba      	ldr	r2, [r7, #24]
 800317c:	4013      	ands	r3, r2
 800317e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	091b      	lsrs	r3, r3, #4
 8003186:	f003 0201 	and.w	r2, r3, #1
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	fa02 f303 	lsl.w	r3, r2, r3
 8003190:	69ba      	ldr	r2, [r7, #24]
 8003192:	4313      	orrs	r3, r2
 8003194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f003 0303 	and.w	r3, r3, #3
 80031a4:	2b03      	cmp	r3, #3
 80031a6:	d017      	beq.n	80031d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031ae:	69fb      	ldr	r3, [r7, #28]
 80031b0:	005b      	lsls	r3, r3, #1
 80031b2:	2203      	movs	r2, #3
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	43db      	mvns	r3, r3
 80031ba:	69ba      	ldr	r2, [r7, #24]
 80031bc:	4013      	ands	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	69fb      	ldr	r3, [r7, #28]
 80031c6:	005b      	lsls	r3, r3, #1
 80031c8:	fa02 f303 	lsl.w	r3, r2, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 0303 	and.w	r3, r3, #3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d123      	bne.n	800322c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031e4:	69fb      	ldr	r3, [r7, #28]
 80031e6:	08da      	lsrs	r2, r3, #3
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3208      	adds	r2, #8
 80031ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	009b      	lsls	r3, r3, #2
 80031fa:	220f      	movs	r2, #15
 80031fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003200:	43db      	mvns	r3, r3
 8003202:	69ba      	ldr	r2, [r7, #24]
 8003204:	4013      	ands	r3, r2
 8003206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	69fb      	ldr	r3, [r7, #28]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fa02 f303 	lsl.w	r3, r2, r3
 8003218:	69ba      	ldr	r2, [r7, #24]
 800321a:	4313      	orrs	r3, r2
 800321c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	08da      	lsrs	r2, r3, #3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	3208      	adds	r2, #8
 8003226:	69b9      	ldr	r1, [r7, #24]
 8003228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003232:	69fb      	ldr	r3, [r7, #28]
 8003234:	005b      	lsls	r3, r3, #1
 8003236:	2203      	movs	r2, #3
 8003238:	fa02 f303 	lsl.w	r3, r2, r3
 800323c:	43db      	mvns	r3, r3
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4013      	ands	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f003 0203 	and.w	r2, r3, #3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	005b      	lsls	r3, r3, #1
 8003250:	fa02 f303 	lsl.w	r3, r2, r3
 8003254:	69ba      	ldr	r2, [r7, #24]
 8003256:	4313      	orrs	r3, r2
 8003258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003260:	683b      	ldr	r3, [r7, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003268:	2b00      	cmp	r3, #0
 800326a:	f000 80a2 	beq.w	80033b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800326e:	2300      	movs	r3, #0
 8003270:	60fb      	str	r3, [r7, #12]
 8003272:	4b57      	ldr	r3, [pc, #348]	@ (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003274:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003276:	4a56      	ldr	r2, [pc, #344]	@ (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003278:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800327c:	6453      	str	r3, [r2, #68]	@ 0x44
 800327e:	4b54      	ldr	r3, [pc, #336]	@ (80033d0 <HAL_GPIO_Init+0x2e8>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003282:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800328a:	4a52      	ldr	r2, [pc, #328]	@ (80033d4 <HAL_GPIO_Init+0x2ec>)
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	089b      	lsrs	r3, r3, #2
 8003290:	3302      	adds	r3, #2
 8003292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	f003 0303 	and.w	r3, r3, #3
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	220f      	movs	r2, #15
 80032a2:	fa02 f303 	lsl.w	r3, r2, r3
 80032a6:	43db      	mvns	r3, r3
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	4013      	ands	r3, r2
 80032ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	4a49      	ldr	r2, [pc, #292]	@ (80033d8 <HAL_GPIO_Init+0x2f0>)
 80032b2:	4293      	cmp	r3, r2
 80032b4:	d019      	beq.n	80032ea <HAL_GPIO_Init+0x202>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a48      	ldr	r2, [pc, #288]	@ (80033dc <HAL_GPIO_Init+0x2f4>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d013      	beq.n	80032e6 <HAL_GPIO_Init+0x1fe>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a47      	ldr	r2, [pc, #284]	@ (80033e0 <HAL_GPIO_Init+0x2f8>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d00d      	beq.n	80032e2 <HAL_GPIO_Init+0x1fa>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a46      	ldr	r2, [pc, #280]	@ (80033e4 <HAL_GPIO_Init+0x2fc>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d007      	beq.n	80032de <HAL_GPIO_Init+0x1f6>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a45      	ldr	r2, [pc, #276]	@ (80033e8 <HAL_GPIO_Init+0x300>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d101      	bne.n	80032da <HAL_GPIO_Init+0x1f2>
 80032d6:	2304      	movs	r3, #4
 80032d8:	e008      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032da:	2307      	movs	r3, #7
 80032dc:	e006      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032de:	2303      	movs	r3, #3
 80032e0:	e004      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e2:	2302      	movs	r3, #2
 80032e4:	e002      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032e6:	2301      	movs	r3, #1
 80032e8:	e000      	b.n	80032ec <HAL_GPIO_Init+0x204>
 80032ea:	2300      	movs	r3, #0
 80032ec:	69fa      	ldr	r2, [r7, #28]
 80032ee:	f002 0203 	and.w	r2, r2, #3
 80032f2:	0092      	lsls	r2, r2, #2
 80032f4:	4093      	lsls	r3, r2
 80032f6:	69ba      	ldr	r2, [r7, #24]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80032fc:	4935      	ldr	r1, [pc, #212]	@ (80033d4 <HAL_GPIO_Init+0x2ec>)
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	089b      	lsrs	r3, r3, #2
 8003302:	3302      	adds	r3, #2
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800330a:	4b38      	ldr	r3, [pc, #224]	@ (80033ec <HAL_GPIO_Init+0x304>)
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003310:	693b      	ldr	r3, [r7, #16]
 8003312:	43db      	mvns	r3, r3
 8003314:	69ba      	ldr	r2, [r7, #24]
 8003316:	4013      	ands	r3, r2
 8003318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	4313      	orrs	r3, r2
 800332c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800332e:	4a2f      	ldr	r2, [pc, #188]	@ (80033ec <HAL_GPIO_Init+0x304>)
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003334:	4b2d      	ldr	r3, [pc, #180]	@ (80033ec <HAL_GPIO_Init+0x304>)
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	43db      	mvns	r3, r3
 800333e:	69ba      	ldr	r2, [r7, #24]
 8003340:	4013      	ands	r3, r2
 8003342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800334c:	2b00      	cmp	r3, #0
 800334e:	d003      	beq.n	8003358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4313      	orrs	r3, r2
 8003356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003358:	4a24      	ldr	r2, [pc, #144]	@ (80033ec <HAL_GPIO_Init+0x304>)
 800335a:	69bb      	ldr	r3, [r7, #24]
 800335c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800335e:	4b23      	ldr	r3, [pc, #140]	@ (80033ec <HAL_GPIO_Init+0x304>)
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4313      	orrs	r3, r2
 8003380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003382:	4a1a      	ldr	r2, [pc, #104]	@ (80033ec <HAL_GPIO_Init+0x304>)
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003388:	4b18      	ldr	r3, [pc, #96]	@ (80033ec <HAL_GPIO_Init+0x304>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	43db      	mvns	r3, r3
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	4013      	ands	r3, r2
 8003396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d003      	beq.n	80033ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033ac:	4a0f      	ldr	r2, [pc, #60]	@ (80033ec <HAL_GPIO_Init+0x304>)
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	3301      	adds	r3, #1
 80033b6:	61fb      	str	r3, [r7, #28]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	2b0f      	cmp	r3, #15
 80033bc:	f67f aea2 	bls.w	8003104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c0:	bf00      	nop
 80033c2:	bf00      	nop
 80033c4:	3724      	adds	r7, #36	@ 0x24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	40023800 	.word	0x40023800
 80033d4:	40013800 	.word	0x40013800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40020800 	.word	0x40020800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40021000 	.word	0x40021000
 80033ec:	40013c00 	.word	0x40013c00

080033f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	807b      	strh	r3, [r7, #2]
 80033fc:	4613      	mov	r3, r2
 80033fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003400:	787b      	ldrb	r3, [r7, #1]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d003      	beq.n	800340e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003406:	887a      	ldrh	r2, [r7, #2]
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800340c:	e003      	b.n	8003416 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800340e:	887b      	ldrh	r3, [r7, #2]
 8003410:	041a      	lsls	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	619a      	str	r2, [r3, #24]
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003422:	b580      	push	{r7, lr}
 8003424:	b086      	sub	sp, #24
 8003426:	af02      	add	r7, sp, #8
 8003428:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2b00      	cmp	r3, #0
 800342e:	d101      	bne.n	8003434 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	e101      	b.n	8003638 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003440:	b2db      	uxtb	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d106      	bne.n	8003454 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f007 fb10 	bl	800aa74 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2203      	movs	r2, #3
 8003458:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003462:	d102      	bne.n	800346a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4618      	mov	r0, r3
 8003470:	f003 ff5d 	bl	800732e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6818      	ldr	r0, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	7c1a      	ldrb	r2, [r3, #16]
 800347c:	f88d 2000 	strb.w	r2, [sp]
 8003480:	3304      	adds	r3, #4
 8003482:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003484:	f003 fe3c 	bl	8007100 <USB_CoreInit>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d005      	beq.n	800349a <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e0ce      	b.n	8003638 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2100      	movs	r1, #0
 80034a0:	4618      	mov	r0, r3
 80034a2:	f003 ff55 	bl	8007350 <USB_SetCurrentMode>
 80034a6:	4603      	mov	r3, r0
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d005      	beq.n	80034b8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2202      	movs	r2, #2
 80034b0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0bf      	b.n	8003638 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034b8:	2300      	movs	r3, #0
 80034ba:	73fb      	strb	r3, [r7, #15]
 80034bc:	e04a      	b.n	8003554 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80034be:	7bfa      	ldrb	r2, [r7, #15]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	00db      	lsls	r3, r3, #3
 80034c6:	4413      	add	r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	3315      	adds	r3, #21
 80034ce:	2201      	movs	r2, #1
 80034d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80034d2:	7bfa      	ldrb	r2, [r7, #15]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	00db      	lsls	r3, r3, #3
 80034da:	4413      	add	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3314      	adds	r3, #20
 80034e2:	7bfa      	ldrb	r2, [r7, #15]
 80034e4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80034e6:	7bfa      	ldrb	r2, [r7, #15]
 80034e8:	7bfb      	ldrb	r3, [r7, #15]
 80034ea:	b298      	uxth	r0, r3
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	00db      	lsls	r3, r3, #3
 80034f2:	4413      	add	r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	332e      	adds	r3, #46	@ 0x2e
 80034fa:	4602      	mov	r2, r0
 80034fc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80034fe:	7bfa      	ldrb	r2, [r7, #15]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	00db      	lsls	r3, r3, #3
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3318      	adds	r3, #24
 800350e:	2200      	movs	r2, #0
 8003510:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003512:	7bfa      	ldrb	r2, [r7, #15]
 8003514:	6879      	ldr	r1, [r7, #4]
 8003516:	4613      	mov	r3, r2
 8003518:	00db      	lsls	r3, r3, #3
 800351a:	4413      	add	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	440b      	add	r3, r1
 8003520:	331c      	adds	r3, #28
 8003522:	2200      	movs	r2, #0
 8003524:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003526:	7bfa      	ldrb	r2, [r7, #15]
 8003528:	6879      	ldr	r1, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	440b      	add	r3, r1
 8003534:	3320      	adds	r3, #32
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800353a:	7bfa      	ldrb	r2, [r7, #15]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	00db      	lsls	r3, r3, #3
 8003542:	4413      	add	r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	3324      	adds	r3, #36	@ 0x24
 800354a:	2200      	movs	r2, #0
 800354c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800354e:	7bfb      	ldrb	r3, [r7, #15]
 8003550:	3301      	adds	r3, #1
 8003552:	73fb      	strb	r3, [r7, #15]
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	791b      	ldrb	r3, [r3, #4]
 8003558:	7bfa      	ldrb	r2, [r7, #15]
 800355a:	429a      	cmp	r2, r3
 800355c:	d3af      	bcc.n	80034be <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800355e:	2300      	movs	r3, #0
 8003560:	73fb      	strb	r3, [r7, #15]
 8003562:	e044      	b.n	80035ee <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003564:	7bfa      	ldrb	r2, [r7, #15]
 8003566:	6879      	ldr	r1, [r7, #4]
 8003568:	4613      	mov	r3, r2
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	4413      	add	r3, r2
 800356e:	009b      	lsls	r3, r3, #2
 8003570:	440b      	add	r3, r1
 8003572:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8003576:	2200      	movs	r2, #0
 8003578:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800357a:	7bfa      	ldrb	r2, [r7, #15]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	00db      	lsls	r3, r3, #3
 8003582:	4413      	add	r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800358c:	7bfa      	ldrb	r2, [r7, #15]
 800358e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003590:	7bfa      	ldrb	r2, [r7, #15]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	4413      	add	r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80035a2:	2200      	movs	r2, #0
 80035a4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80035a6:	7bfa      	ldrb	r2, [r7, #15]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80035b8:	2200      	movs	r2, #0
 80035ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80035bc:	7bfa      	ldrb	r2, [r7, #15]
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	00db      	lsls	r3, r3, #3
 80035c4:	4413      	add	r3, r2
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	440b      	add	r3, r1
 80035ca:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80035ce:	2200      	movs	r2, #0
 80035d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80035d2:	7bfa      	ldrb	r2, [r7, #15]
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4413      	add	r3, r2
 80035dc:	009b      	lsls	r3, r3, #2
 80035de:	440b      	add	r3, r1
 80035e0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80035e8:	7bfb      	ldrb	r3, [r7, #15]
 80035ea:	3301      	adds	r3, #1
 80035ec:	73fb      	strb	r3, [r7, #15]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	791b      	ldrb	r3, [r3, #4]
 80035f2:	7bfa      	ldrb	r2, [r7, #15]
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d3b5      	bcc.n	8003564 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	7c1a      	ldrb	r2, [r3, #16]
 8003600:	f88d 2000 	strb.w	r2, [sp]
 8003604:	3304      	adds	r3, #4
 8003606:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003608:	f003 feee 	bl	80073e8 <USB_DevInit>
 800360c:	4603      	mov	r3, r0
 800360e:	2b00      	cmp	r3, #0
 8003610:	d005      	beq.n	800361e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2202      	movs	r2, #2
 8003616:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e00c      	b.n	8003638 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f004 ff38 	bl	80084a6 <USB_DevDisconnect>

  return HAL_OK;
 8003636:	2300      	movs	r3, #0
}
 8003638:	4618      	mov	r0, r3
 800363a:	3710      	adds	r7, #16
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}

08003640 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b084      	sub	sp, #16
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003654:	2b01      	cmp	r3, #1
 8003656:	d101      	bne.n	800365c <HAL_PCD_Start+0x1c>
 8003658:	2302      	movs	r3, #2
 800365a:	e022      	b.n	80036a2 <HAL_PCD_Start+0x62>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2201      	movs	r2, #1
 8003660:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8003674:	2b01      	cmp	r3, #1
 8003676:	d105      	bne.n	8003684 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800367c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f003 fe3f 	bl	800730c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f004 fee6 	bl	8008464 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3710      	adds	r7, #16
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}

080036aa <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80036aa:	b590      	push	{r4, r7, lr}
 80036ac:	b08d      	sub	sp, #52	@ 0x34
 80036ae:	af00      	add	r7, sp, #0
 80036b0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036b8:	6a3b      	ldr	r3, [r7, #32]
 80036ba:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f004 ffa4 	bl	800860e <USB_GetMode>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	f040 848c 	bne.w	8003fe6 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f004 ff08 	bl	80084e8 <USB_ReadInterrupts>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f000 8482 	beq.w	8003fe4 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	0a1b      	lsrs	r3, r3, #8
 80036ea:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f004 fef5 	bl	80084e8 <USB_ReadInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 0302 	and.w	r3, r3, #2
 8003704:	2b02      	cmp	r3, #2
 8003706:	d107      	bne.n	8003718 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	695a      	ldr	r2, [r3, #20]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f002 0202 	and.w	r2, r2, #2
 8003716:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	4618      	mov	r0, r3
 800371e:	f004 fee3 	bl	80084e8 <USB_ReadInterrupts>
 8003722:	4603      	mov	r3, r0
 8003724:	f003 0310 	and.w	r3, r3, #16
 8003728:	2b10      	cmp	r3, #16
 800372a:	d161      	bne.n	80037f0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	699a      	ldr	r2, [r3, #24]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f022 0210 	bic.w	r2, r2, #16
 800373a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	6a1b      	ldr	r3, [r3, #32]
 8003740:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f003 020f 	and.w	r2, r3, #15
 8003748:	4613      	mov	r3, r2
 800374a:	00db      	lsls	r3, r3, #3
 800374c:	4413      	add	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	4413      	add	r3, r2
 8003758:	3304      	adds	r3, #4
 800375a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8003762:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003766:	d124      	bne.n	80037b2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800376e:	4013      	ands	r3, r2
 8003770:	2b00      	cmp	r3, #0
 8003772:	d035      	beq.n	80037e0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003778:	69bb      	ldr	r3, [r7, #24]
 800377a:	091b      	lsrs	r3, r3, #4
 800377c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800377e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003782:	b29b      	uxth	r3, r3
 8003784:	461a      	mov	r2, r3
 8003786:	6a38      	ldr	r0, [r7, #32]
 8003788:	f004 fd1a 	bl	80081c0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	68da      	ldr	r2, [r3, #12]
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	091b      	lsrs	r3, r3, #4
 8003794:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003798:	441a      	add	r2, r3
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	695a      	ldr	r2, [r3, #20]
 80037a2:	69bb      	ldr	r3, [r7, #24]
 80037a4:	091b      	lsrs	r3, r3, #4
 80037a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037aa:	441a      	add	r2, r3
 80037ac:	697b      	ldr	r3, [r7, #20]
 80037ae:	615a      	str	r2, [r3, #20]
 80037b0:	e016      	b.n	80037e0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80037b8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80037bc:	d110      	bne.n	80037e0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80037c4:	2208      	movs	r2, #8
 80037c6:	4619      	mov	r1, r3
 80037c8:	6a38      	ldr	r0, [r7, #32]
 80037ca:	f004 fcf9 	bl	80081c0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80037ce:	697b      	ldr	r3, [r7, #20]
 80037d0:	695a      	ldr	r2, [r3, #20]
 80037d2:	69bb      	ldr	r3, [r7, #24]
 80037d4:	091b      	lsrs	r3, r3, #4
 80037d6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80037da:	441a      	add	r2, r3
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	699a      	ldr	r2, [r3, #24]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f042 0210 	orr.w	r2, r2, #16
 80037ee:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	4618      	mov	r0, r3
 80037f6:	f004 fe77 	bl	80084e8 <USB_ReadInterrupts>
 80037fa:	4603      	mov	r3, r0
 80037fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003800:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003804:	f040 80a7 	bne.w	8003956 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fe7c 	bl	800850e <USB_ReadDevAllOutEpInterrupt>
 8003816:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003818:	e099      	b.n	800394e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800381a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 808e 	beq.w	8003942 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800382c:	b2d2      	uxtb	r2, r2
 800382e:	4611      	mov	r1, r2
 8003830:	4618      	mov	r0, r3
 8003832:	f004 fea0 	bl	8008576 <USB_ReadDevOutEPInterrupt>
 8003836:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	f003 0301 	and.w	r3, r3, #1
 800383e:	2b00      	cmp	r3, #0
 8003840:	d00c      	beq.n	800385c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8003842:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003844:	015a      	lsls	r2, r3, #5
 8003846:	69fb      	ldr	r3, [r7, #28]
 8003848:	4413      	add	r3, r2
 800384a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800384e:	461a      	mov	r2, r3
 8003850:	2301      	movs	r3, #1
 8003852:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8003854:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fea4 	bl	80045a4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d00c      	beq.n	8003880 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003868:	015a      	lsls	r2, r3, #5
 800386a:	69fb      	ldr	r3, [r7, #28]
 800386c:	4413      	add	r3, r2
 800386e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003872:	461a      	mov	r2, r3
 8003874:	2308      	movs	r3, #8
 8003876:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 ff7a 	bl	8004774 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0310 	and.w	r3, r3, #16
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800388a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2310      	movs	r3, #16
 800389a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d030      	beq.n	8003908 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80038a6:	6a3b      	ldr	r3, [r7, #32]
 80038a8:	695b      	ldr	r3, [r3, #20]
 80038aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ae:	2b80      	cmp	r3, #128	@ 0x80
 80038b0:	d109      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	69fa      	ldr	r2, [r7, #28]
 80038bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80038c0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80038c4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80038c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038c8:	4613      	mov	r3, r2
 80038ca:	00db      	lsls	r3, r3, #3
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	4413      	add	r3, r2
 80038d8:	3304      	adds	r3, #4
 80038da:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	78db      	ldrb	r3, [r3, #3]
 80038e0:	2b01      	cmp	r3, #1
 80038e2:	d108      	bne.n	80038f6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	4619      	mov	r1, r3
 80038f0:	6878      	ldr	r0, [r7, #4]
 80038f2:	f007 f9bb 	bl	800ac6c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80038f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003902:	461a      	mov	r2, r3
 8003904:	2302      	movs	r3, #2
 8003906:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	f003 0320 	and.w	r3, r3, #32
 800390e:	2b00      	cmp	r3, #0
 8003910:	d008      	beq.n	8003924 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	4413      	add	r3, r2
 800391a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800391e:	461a      	mov	r2, r3
 8003920:	2320      	movs	r3, #32
 8003922:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800392e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003930:	015a      	lsls	r2, r3, #5
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	4413      	add	r3, r2
 8003936:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800393a:	461a      	mov	r2, r3
 800393c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003940:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8003942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003944:	3301      	adds	r3, #1
 8003946:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003948:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800394e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003950:	2b00      	cmp	r3, #0
 8003952:	f47f af62 	bne.w	800381a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	4618      	mov	r0, r3
 800395c:	f004 fdc4 	bl	80084e8 <USB_ReadInterrupts>
 8003960:	4603      	mov	r3, r0
 8003962:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003966:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800396a:	f040 80db 	bne.w	8003b24 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4618      	mov	r0, r3
 8003974:	f004 fde5 	bl	8008542 <USB_ReadDevAllInEpInterrupt>
 8003978:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800397e:	e0cd      	b.n	8003b1c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8003980:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003982:	f003 0301 	and.w	r3, r3, #1
 8003986:	2b00      	cmp	r3, #0
 8003988:	f000 80c2 	beq.w	8003b10 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003992:	b2d2      	uxtb	r2, r2
 8003994:	4611      	mov	r1, r2
 8003996:	4618      	mov	r0, r3
 8003998:	f004 fe0b 	bl	80085b2 <USB_ReadDevInEPInterrupt>
 800399c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800399e:	693b      	ldr	r3, [r7, #16]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d057      	beq.n	8003a58 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	2201      	movs	r2, #1
 80039b0:	fa02 f303 	lsl.w	r3, r2, r3
 80039b4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039b6:	69fb      	ldr	r3, [r7, #28]
 80039b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80039bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	43db      	mvns	r3, r3
 80039c2:	69f9      	ldr	r1, [r7, #28]
 80039c4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80039c8:	4013      	ands	r3, r2
 80039ca:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80039cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80039d8:	461a      	mov	r2, r3
 80039da:	2301      	movs	r3, #1
 80039dc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	799b      	ldrb	r3, [r3, #6]
 80039e2:	2b01      	cmp	r3, #1
 80039e4:	d132      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80039e6:	6879      	ldr	r1, [r7, #4]
 80039e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039ea:	4613      	mov	r3, r2
 80039ec:	00db      	lsls	r3, r3, #3
 80039ee:	4413      	add	r3, r2
 80039f0:	009b      	lsls	r3, r3, #2
 80039f2:	440b      	add	r3, r1
 80039f4:	3320      	adds	r3, #32
 80039f6:	6819      	ldr	r1, [r3, #0]
 80039f8:	6878      	ldr	r0, [r7, #4]
 80039fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039fc:	4613      	mov	r3, r2
 80039fe:	00db      	lsls	r3, r3, #3
 8003a00:	4413      	add	r3, r2
 8003a02:	009b      	lsls	r3, r3, #2
 8003a04:	4403      	add	r3, r0
 8003a06:	331c      	adds	r3, #28
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4419      	add	r1, r3
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a10:	4613      	mov	r3, r2
 8003a12:	00db      	lsls	r3, r3, #3
 8003a14:	4413      	add	r3, r2
 8003a16:	009b      	lsls	r3, r3, #2
 8003a18:	4403      	add	r3, r0
 8003a1a:	3320      	adds	r3, #32
 8003a1c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003a1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d113      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x3a2>
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a28:	4613      	mov	r3, r2
 8003a2a:	00db      	lsls	r3, r3, #3
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3324      	adds	r3, #36	@ 0x24
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d108      	bne.n	8003a4c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6818      	ldr	r0, [r3, #0]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8003a44:	461a      	mov	r2, r3
 8003a46:	2101      	movs	r1, #1
 8003a48:	f004 fe12 	bl	8008670 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003a4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f007 f88f 	bl	800ab76 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8003a62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2308      	movs	r3, #8
 8003a72:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	f003 0310 	and.w	r3, r3, #16
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d008      	beq.n	8003a90 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a80:	015a      	lsls	r2, r3, #5
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	4413      	add	r3, r2
 8003a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d008      	beq.n	8003aac <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a9c:	015a      	lsls	r2, r3, #5
 8003a9e:	69fb      	ldr	r3, [r7, #28]
 8003aa0:	4413      	add	r3, r2
 8003aa2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003aa6:	461a      	mov	r2, r3
 8003aa8:	2340      	movs	r3, #64	@ 0x40
 8003aaa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d023      	beq.n	8003afe <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003ab6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003ab8:	6a38      	ldr	r0, [r7, #32]
 8003aba:	f003 fdf9 	bl	80076b0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003abe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	00db      	lsls	r3, r3, #3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	3310      	adds	r3, #16
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	3304      	adds	r3, #4
 8003ad0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	78db      	ldrb	r3, [r3, #3]
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d108      	bne.n	8003aec <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	2200      	movs	r2, #0
 8003ade:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f007 f8d2 	bl	800ac90 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003af8:	461a      	mov	r2, r3
 8003afa:	2302      	movs	r3, #2
 8003afc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d003      	beq.n	8003b10 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003b08:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fcbd 	bl	800448a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003b10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b12:	3301      	adds	r3, #1
 8003b14:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8003b16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b18:	085b      	lsrs	r3, r3, #1
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	f47f af2e 	bne.w	8003980 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f004 fcdd 	bl	80084e8 <USB_ReadInterrupts>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003b34:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003b38:	d122      	bne.n	8003b80 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003b3a:	69fb      	ldr	r3, [r7, #28]
 8003b3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	69fa      	ldr	r2, [r7, #28]
 8003b44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8003b54:	2b01      	cmp	r3, #1
 8003b56:	d108      	bne.n	8003b6a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8003b60:	2100      	movs	r1, #0
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 fea4 	bl	80048b0 <HAL_PCDEx_LPM_Callback>
 8003b68:	e002      	b.n	8003b70 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003b6a:	6878      	ldr	r0, [r7, #4]
 8003b6c:	f007 f870 	bl	800ac50 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	695a      	ldr	r2, [r3, #20]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8003b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f004 fcaf 	bl	80084e8 <USB_ReadInterrupts>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b94:	d112      	bne.n	8003bbc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b9c:	689b      	ldr	r3, [r3, #8]
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d102      	bne.n	8003bac <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f007 f82c 	bl	800ac04 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003bba:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f004 fc91 	bl	80084e8 <USB_ReadInterrupts>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003bcc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003bd0:	f040 80b7 	bne.w	8003d42 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003bd4:	69fb      	ldr	r3, [r7, #28]
 8003bd6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	69fa      	ldr	r2, [r7, #28]
 8003bde:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003be2:	f023 0301 	bic.w	r3, r3, #1
 8003be6:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	2110      	movs	r1, #16
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f003 fd5e 	bl	80076b0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bf8:	e046      	b.n	8003c88 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003bfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bfc:	015a      	lsls	r2, r3, #5
 8003bfe:	69fb      	ldr	r3, [r7, #28]
 8003c00:	4413      	add	r3, r2
 8003c02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c06:	461a      	mov	r2, r3
 8003c08:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c0c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003c0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c10:	015a      	lsls	r2, r3, #5
 8003c12:	69fb      	ldr	r3, [r7, #28]
 8003c14:	4413      	add	r3, r2
 8003c16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c1e:	0151      	lsls	r1, r2, #5
 8003c20:	69fa      	ldr	r2, [r7, #28]
 8003c22:	440a      	add	r2, r1
 8003c24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003c28:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c2c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003c2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c30:	015a      	lsls	r2, r3, #5
 8003c32:	69fb      	ldr	r3, [r7, #28]
 8003c34:	4413      	add	r3, r2
 8003c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c3a:	461a      	mov	r2, r3
 8003c3c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003c40:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003c42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c44:	015a      	lsls	r2, r3, #5
 8003c46:	69fb      	ldr	r3, [r7, #28]
 8003c48:	4413      	add	r3, r2
 8003c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c52:	0151      	lsls	r1, r2, #5
 8003c54:	69fa      	ldr	r2, [r7, #28]
 8003c56:	440a      	add	r2, r1
 8003c58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c5c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003c60:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003c62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c64:	015a      	lsls	r2, r3, #5
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	4413      	add	r3, r2
 8003c6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c72:	0151      	lsls	r1, r2, #5
 8003c74:	69fa      	ldr	r2, [r7, #28]
 8003c76:	440a      	add	r2, r1
 8003c78:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8003c7c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8003c80:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c84:	3301      	adds	r3, #1
 8003c86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	791b      	ldrb	r3, [r3, #4]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c90:	4293      	cmp	r3, r2
 8003c92:	d3b2      	bcc.n	8003bfa <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c9a:	69db      	ldr	r3, [r3, #28]
 8003c9c:	69fa      	ldr	r2, [r7, #28]
 8003c9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003ca2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8003ca6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	7bdb      	ldrb	r3, [r3, #15]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d016      	beq.n	8003cde <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cba:	69fa      	ldr	r2, [r7, #28]
 8003cbc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cc0:	f043 030b 	orr.w	r3, r3, #11
 8003cc4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cd0:	69fa      	ldr	r2, [r7, #28]
 8003cd2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cd6:	f043 030b 	orr.w	r3, r3, #11
 8003cda:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cdc:	e015      	b.n	8003d0a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003cde:	69fb      	ldr	r3, [r7, #28]
 8003ce0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	69fa      	ldr	r2, [r7, #28]
 8003ce8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003cec:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003cf0:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8003cf4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003cf6:	69fb      	ldr	r3, [r7, #28]
 8003cf8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	69fa      	ldr	r2, [r7, #28]
 8003d00:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d04:	f043 030b 	orr.w	r3, r3, #11
 8003d08:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	69fa      	ldr	r2, [r7, #28]
 8003d14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d18:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003d1c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f004 fc9f 	bl	8008670 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8003d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4618      	mov	r0, r3
 8003d48:	f004 fbce 	bl	80084e8 <USB_ReadInterrupts>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003d52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003d56:	d123      	bne.n	8003da0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f004 fc64 	bl	800862a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	4618      	mov	r0, r3
 8003d68:	f003 fd1b 	bl	80077a2 <USB_GetDevSpeed>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	461a      	mov	r2, r3
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681c      	ldr	r4, [r3, #0]
 8003d78:	f001 f9ca 	bl	8005110 <HAL_RCC_GetHCLKFreq>
 8003d7c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003d82:	461a      	mov	r2, r3
 8003d84:	4620      	mov	r0, r4
 8003d86:	f003 fa1f 	bl	80071c8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003d8a:	6878      	ldr	r0, [r7, #4]
 8003d8c:	f006 ff1b 	bl	800abc6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003d9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f004 fb9f 	bl	80084e8 <USB_ReadInterrupts>
 8003daa:	4603      	mov	r3, r0
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b08      	cmp	r3, #8
 8003db2:	d10a      	bne.n	8003dca <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003db4:	6878      	ldr	r0, [r7, #4]
 8003db6:	f006 fef8 	bl	800abaa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	695a      	ldr	r2, [r3, #20]
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f002 0208 	and.w	r2, r2, #8
 8003dc8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f004 fb8a 	bl	80084e8 <USB_ReadInterrupts>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dda:	2b80      	cmp	r3, #128	@ 0x80
 8003ddc:	d123      	bne.n	8003e26 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003dde:	6a3b      	ldr	r3, [r7, #32]
 8003de0:	699b      	ldr	r3, [r3, #24]
 8003de2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003de6:	6a3b      	ldr	r3, [r7, #32]
 8003de8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003dea:	2301      	movs	r3, #1
 8003dec:	627b      	str	r3, [r7, #36]	@ 0x24
 8003dee:	e014      	b.n	8003e1a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003df0:	6879      	ldr	r1, [r7, #4]
 8003df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b01      	cmp	r3, #1
 8003e06:	d105      	bne.n	8003e14 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fb0a 	bl	8004428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e16:	3301      	adds	r3, #1
 8003e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	791b      	ldrb	r3, [r3, #4]
 8003e1e:	461a      	mov	r2, r3
 8003e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d3e4      	bcc.n	8003df0 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f004 fb5c 	bl	80084e8 <USB_ReadInterrupts>
 8003e30:	4603      	mov	r3, r0
 8003e32:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003e36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003e3a:	d13c      	bne.n	8003eb6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e40:	e02b      	b.n	8003e9a <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	69fb      	ldr	r3, [r7, #28]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e52:	6879      	ldr	r1, [r7, #4]
 8003e54:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e56:	4613      	mov	r3, r2
 8003e58:	00db      	lsls	r3, r3, #3
 8003e5a:	4413      	add	r3, r2
 8003e5c:	009b      	lsls	r3, r3, #2
 8003e5e:	440b      	add	r3, r1
 8003e60:	3318      	adds	r3, #24
 8003e62:	781b      	ldrb	r3, [r3, #0]
 8003e64:	2b01      	cmp	r3, #1
 8003e66:	d115      	bne.n	8003e94 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003e68:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	da12      	bge.n	8003e94 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	4613      	mov	r3, r2
 8003e74:	00db      	lsls	r3, r3, #3
 8003e76:	4413      	add	r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
 8003e7a:	440b      	add	r3, r1
 8003e7c:	3317      	adds	r3, #23
 8003e7e:	2201      	movs	r2, #1
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 faca 	bl	8004428 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e96:	3301      	adds	r3, #1
 8003e98:	627b      	str	r3, [r7, #36]	@ 0x24
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	791b      	ldrb	r3, [r3, #4]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d3cd      	bcc.n	8003e42 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	695a      	ldr	r2, [r3, #20]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8003eb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f004 fb14 	bl	80084e8 <USB_ReadInterrupts>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ec6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003eca:	d156      	bne.n	8003f7a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ecc:	2301      	movs	r3, #1
 8003ece:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ed0:	e045      	b.n	8003f5e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ed4:	015a      	lsls	r2, r3, #5
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	4413      	add	r3, r2
 8003eda:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003ee2:	6879      	ldr	r1, [r7, #4]
 8003ee4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	00db      	lsls	r3, r3, #3
 8003eea:	4413      	add	r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	440b      	add	r3, r1
 8003ef0:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d12e      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003efa:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	da2b      	bge.n	8003f58 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8003f0c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d121      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003f14:	6879      	ldr	r1, [r7, #4]
 8003f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f18:	4613      	mov	r3, r2
 8003f1a:	00db      	lsls	r3, r3, #3
 8003f1c:	4413      	add	r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8003f26:	2201      	movs	r2, #1
 8003f28:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003f2a:	6a3b      	ldr	r3, [r7, #32]
 8003f2c:	699b      	ldr	r3, [r3, #24]
 8003f2e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003f32:	6a3b      	ldr	r3, [r7, #32]
 8003f34:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	69fa      	ldr	r2, [r7, #28]
 8003f4c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003f50:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f54:	6053      	str	r3, [r2, #4]
            break;
 8003f56:	e008      	b.n	8003f6a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f5a:	3301      	adds	r3, #1
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d3b3      	bcc.n	8003ed2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	695a      	ldr	r2, [r3, #20]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8003f78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f004 fab2 	bl	80084e8 <USB_ReadInterrupts>
 8003f84:	4603      	mov	r3, r0
 8003f86:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8003f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f8e:	d10a      	bne.n	8003fa6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f006 fe8f 	bl	800acb4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695a      	ldr	r2, [r3, #20]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003fa4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	4618      	mov	r0, r3
 8003fac:	f004 fa9c 	bl	80084e8 <USB_ReadInterrupts>
 8003fb0:	4603      	mov	r3, r0
 8003fb2:	f003 0304 	and.w	r3, r3, #4
 8003fb6:	2b04      	cmp	r3, #4
 8003fb8:	d115      	bne.n	8003fe6 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	f003 0304 	and.w	r3, r3, #4
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d002      	beq.n	8003fd2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f006 fe7f 	bl	800acd0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	6859      	ldr	r1, [r3, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	69ba      	ldr	r2, [r7, #24]
 8003fde:	430a      	orrs	r2, r1
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	e000      	b.n	8003fe6 <HAL_PCD_IRQHandler+0x93c>
      return;
 8003fe4:	bf00      	nop
    }
  }
}
 8003fe6:	3734      	adds	r7, #52	@ 0x34
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}

08003fec <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d101      	bne.n	8004006 <HAL_PCD_SetAddress+0x1a>
 8004002:	2302      	movs	r3, #2
 8004004:	e012      	b.n	800402c <HAL_PCD_SetAddress+0x40>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	78fa      	ldrb	r2, [r7, #3]
 8004012:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	4611      	mov	r1, r2
 800401c:	4618      	mov	r0, r3
 800401e:	f004 f9fb 	bl	8008418 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2200      	movs	r2, #0
 8004026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3708      	adds	r7, #8
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b084      	sub	sp, #16
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
 800403c:	4608      	mov	r0, r1
 800403e:	4611      	mov	r1, r2
 8004040:	461a      	mov	r2, r3
 8004042:	4603      	mov	r3, r0
 8004044:	70fb      	strb	r3, [r7, #3]
 8004046:	460b      	mov	r3, r1
 8004048:	803b      	strh	r3, [r7, #0]
 800404a:	4613      	mov	r3, r2
 800404c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004052:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004056:	2b00      	cmp	r3, #0
 8004058:	da0f      	bge.n	800407a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800405a:	78fb      	ldrb	r3, [r7, #3]
 800405c:	f003 020f 	and.w	r2, r3, #15
 8004060:	4613      	mov	r3, r2
 8004062:	00db      	lsls	r3, r3, #3
 8004064:	4413      	add	r3, r2
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	3310      	adds	r3, #16
 800406a:	687a      	ldr	r2, [r7, #4]
 800406c:	4413      	add	r3, r2
 800406e:	3304      	adds	r3, #4
 8004070:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2201      	movs	r2, #1
 8004076:	705a      	strb	r2, [r3, #1]
 8004078:	e00f      	b.n	800409a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	f003 020f 	and.w	r2, r3, #15
 8004080:	4613      	mov	r3, r2
 8004082:	00db      	lsls	r3, r3, #3
 8004084:	4413      	add	r3, r2
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	4413      	add	r3, r2
 8004090:	3304      	adds	r3, #4
 8004092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	f003 030f 	and.w	r3, r3, #15
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80040a6:	883b      	ldrh	r3, [r7, #0]
 80040a8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	78ba      	ldrb	r2, [r7, #2]
 80040b4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	785b      	ldrb	r3, [r3, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d004      	beq.n	80040c8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	781b      	ldrb	r3, [r3, #0]
 80040c2:	461a      	mov	r2, r3
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80040c8:	78bb      	ldrb	r3, [r7, #2]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d102      	bne.n	80040d4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2200      	movs	r2, #0
 80040d2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80040da:	2b01      	cmp	r3, #1
 80040dc:	d101      	bne.n	80040e2 <HAL_PCD_EP_Open+0xae>
 80040de:	2302      	movs	r3, #2
 80040e0:	e00e      	b.n	8004100 <HAL_PCD_EP_Open+0xcc>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68f9      	ldr	r1, [r7, #12]
 80040f0:	4618      	mov	r0, r3
 80040f2:	f003 fb7b 	bl	80077ec <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80040fe:	7afb      	ldrb	r3, [r7, #11]
}
 8004100:	4618      	mov	r0, r3
 8004102:	3710      	adds	r7, #16
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b084      	sub	sp, #16
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	460b      	mov	r3, r1
 8004112:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004114:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004118:	2b00      	cmp	r3, #0
 800411a:	da0f      	bge.n	800413c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800411c:	78fb      	ldrb	r3, [r7, #3]
 800411e:	f003 020f 	and.w	r2, r3, #15
 8004122:	4613      	mov	r3, r2
 8004124:	00db      	lsls	r3, r3, #3
 8004126:	4413      	add	r3, r2
 8004128:	009b      	lsls	r3, r3, #2
 800412a:	3310      	adds	r3, #16
 800412c:	687a      	ldr	r2, [r7, #4]
 800412e:	4413      	add	r3, r2
 8004130:	3304      	adds	r3, #4
 8004132:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	2201      	movs	r2, #1
 8004138:	705a      	strb	r2, [r3, #1]
 800413a:	e00f      	b.n	800415c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800413c:	78fb      	ldrb	r3, [r7, #3]
 800413e:	f003 020f 	and.w	r2, r3, #15
 8004142:	4613      	mov	r3, r2
 8004144:	00db      	lsls	r3, r3, #3
 8004146:	4413      	add	r3, r2
 8004148:	009b      	lsls	r3, r3, #2
 800414a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800414e:	687a      	ldr	r2, [r7, #4]
 8004150:	4413      	add	r3, r2
 8004152:	3304      	adds	r3, #4
 8004154:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800415c:	78fb      	ldrb	r3, [r7, #3]
 800415e:	f003 030f 	and.w	r3, r3, #15
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_PCD_EP_Close+0x6e>
 8004172:	2302      	movs	r3, #2
 8004174:	e00e      	b.n	8004194 <HAL_PCD_EP_Close+0x8c>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	68f9      	ldr	r1, [r7, #12]
 8004184:	4618      	mov	r0, r3
 8004186:	f003 fbb9 	bl	80078fc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b086      	sub	sp, #24
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	607a      	str	r2, [r7, #4]
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	460b      	mov	r3, r1
 80041aa:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041ac:	7afb      	ldrb	r3, [r7, #11]
 80041ae:	f003 020f 	and.w	r2, r3, #15
 80041b2:	4613      	mov	r3, r2
 80041b4:	00db      	lsls	r3, r3, #3
 80041b6:	4413      	add	r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80041be:	68fa      	ldr	r2, [r7, #12]
 80041c0:	4413      	add	r3, r2
 80041c2:	3304      	adds	r3, #4
 80041c4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	683a      	ldr	r2, [r7, #0]
 80041d0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	2200      	movs	r2, #0
 80041d6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	2200      	movs	r2, #0
 80041dc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041de:	7afb      	ldrb	r3, [r7, #11]
 80041e0:	f003 030f 	and.w	r3, r3, #15
 80041e4:	b2da      	uxtb	r2, r3
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	799b      	ldrb	r3, [r3, #6]
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6818      	ldr	r0, [r3, #0]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	799b      	ldrb	r3, [r3, #6]
 8004200:	461a      	mov	r2, r3
 8004202:	6979      	ldr	r1, [r7, #20]
 8004204:	f003 fc56 	bl	8007ab4 <USB_EPStartXfer>

  return HAL_OK;
 8004208:	2300      	movs	r3, #0
}
 800420a:	4618      	mov	r0, r3
 800420c:	3718      	adds	r7, #24
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	460b      	mov	r3, r1
 800421c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	f003 020f 	and.w	r2, r3, #15
 8004224:	6879      	ldr	r1, [r7, #4]
 8004226:	4613      	mov	r3, r2
 8004228:	00db      	lsls	r3, r3, #3
 800422a:	4413      	add	r3, r2
 800422c:	009b      	lsls	r3, r3, #2
 800422e:	440b      	add	r3, r1
 8004230:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004234:	681b      	ldr	r3, [r3, #0]
}
 8004236:	4618      	mov	r0, r3
 8004238:	370c      	adds	r7, #12
 800423a:	46bd      	mov	sp, r7
 800423c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004240:	4770      	bx	lr

08004242 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004242:	b580      	push	{r7, lr}
 8004244:	b086      	sub	sp, #24
 8004246:	af00      	add	r7, sp, #0
 8004248:	60f8      	str	r0, [r7, #12]
 800424a:	607a      	str	r2, [r7, #4]
 800424c:	603b      	str	r3, [r7, #0]
 800424e:	460b      	mov	r3, r1
 8004250:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004252:	7afb      	ldrb	r3, [r7, #11]
 8004254:	f003 020f 	and.w	r2, r3, #15
 8004258:	4613      	mov	r3, r2
 800425a:	00db      	lsls	r3, r3, #3
 800425c:	4413      	add	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	3310      	adds	r3, #16
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	3304      	adds	r3, #4
 8004268:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	683a      	ldr	r2, [r7, #0]
 8004274:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	2200      	movs	r2, #0
 800427a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2201      	movs	r2, #1
 8004280:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004282:	7afb      	ldrb	r3, [r7, #11]
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	b2da      	uxtb	r2, r3
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	799b      	ldrb	r3, [r3, #6]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d102      	bne.n	800429c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6818      	ldr	r0, [r3, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	799b      	ldrb	r3, [r3, #6]
 80042a4:	461a      	mov	r2, r3
 80042a6:	6979      	ldr	r1, [r7, #20]
 80042a8:	f003 fc04 	bl	8007ab4 <USB_EPStartXfer>

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b084      	sub	sp, #16
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
 80042be:	460b      	mov	r3, r1
 80042c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80042c2:	78fb      	ldrb	r3, [r7, #3]
 80042c4:	f003 030f 	and.w	r3, r3, #15
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	7912      	ldrb	r2, [r2, #4]
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d901      	bls.n	80042d4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	e04f      	b.n	8004374 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80042d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	da0f      	bge.n	80042fc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80042dc:	78fb      	ldrb	r3, [r7, #3]
 80042de:	f003 020f 	and.w	r2, r3, #15
 80042e2:	4613      	mov	r3, r2
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4413      	add	r3, r2
 80042e8:	009b      	lsls	r3, r3, #2
 80042ea:	3310      	adds	r3, #16
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	4413      	add	r3, r2
 80042f0:	3304      	adds	r3, #4
 80042f2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2201      	movs	r2, #1
 80042f8:	705a      	strb	r2, [r3, #1]
 80042fa:	e00d      	b.n	8004318 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80042fc:	78fa      	ldrb	r2, [r7, #3]
 80042fe:	4613      	mov	r3, r2
 8004300:	00db      	lsls	r3, r3, #3
 8004302:	4413      	add	r3, r2
 8004304:	009b      	lsls	r3, r3, #2
 8004306:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800430a:	687a      	ldr	r2, [r7, #4]
 800430c:	4413      	add	r3, r2
 800430e:	3304      	adds	r3, #4
 8004310:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2201      	movs	r2, #1
 800431c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800431e:	78fb      	ldrb	r3, [r7, #3]
 8004320:	f003 030f 	and.w	r3, r3, #15
 8004324:	b2da      	uxtb	r2, r3
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004330:	2b01      	cmp	r3, #1
 8004332:	d101      	bne.n	8004338 <HAL_PCD_EP_SetStall+0x82>
 8004334:	2302      	movs	r3, #2
 8004336:	e01d      	b.n	8004374 <HAL_PCD_EP_SetStall+0xbe>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2201      	movs	r2, #1
 800433c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68f9      	ldr	r1, [r7, #12]
 8004346:	4618      	mov	r0, r3
 8004348:	f003 ff92 	bl	8008270 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	f003 030f 	and.w	r3, r3, #15
 8004352:	2b00      	cmp	r3, #0
 8004354:	d109      	bne.n	800436a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6818      	ldr	r0, [r3, #0]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	7999      	ldrb	r1, [r3, #6]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004364:	461a      	mov	r2, r3
 8004366:	f004 f983 	bl	8008670 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004372:	2300      	movs	r3, #0
}
 8004374:	4618      	mov	r0, r3
 8004376:	3710      	adds	r7, #16
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	460b      	mov	r3, r1
 8004386:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	7912      	ldrb	r2, [r2, #4]
 8004392:	4293      	cmp	r3, r2
 8004394:	d901      	bls.n	800439a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004396:	2301      	movs	r3, #1
 8004398:	e042      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800439a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	da0f      	bge.n	80043c2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80043a2:	78fb      	ldrb	r3, [r7, #3]
 80043a4:	f003 020f 	and.w	r2, r3, #15
 80043a8:	4613      	mov	r3, r2
 80043aa:	00db      	lsls	r3, r3, #3
 80043ac:	4413      	add	r3, r2
 80043ae:	009b      	lsls	r3, r3, #2
 80043b0:	3310      	adds	r3, #16
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	4413      	add	r3, r2
 80043b6:	3304      	adds	r3, #4
 80043b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	2201      	movs	r2, #1
 80043be:	705a      	strb	r2, [r3, #1]
 80043c0:	e00f      	b.n	80043e2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	f003 020f 	and.w	r2, r3, #15
 80043c8:	4613      	mov	r3, r2
 80043ca:	00db      	lsls	r3, r3, #3
 80043cc:	4413      	add	r3, r2
 80043ce:	009b      	lsls	r3, r3, #2
 80043d0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	4413      	add	r3, r2
 80043d8:	3304      	adds	r3, #4
 80043da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2200      	movs	r2, #0
 80043e0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80043e8:	78fb      	ldrb	r3, [r7, #3]
 80043ea:	f003 030f 	and.w	r3, r3, #15
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_PCD_EP_ClrStall+0x86>
 80043fe:	2302      	movs	r3, #2
 8004400:	e00e      	b.n	8004420 <HAL_PCD_EP_ClrStall+0xa4>
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68f9      	ldr	r1, [r7, #12]
 8004410:	4618      	mov	r0, r3
 8004412:	f003 ff9b 	bl	800834c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3710      	adds	r7, #16
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}

08004428 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
 8004430:	460b      	mov	r3, r1
 8004432:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004434:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004438:	2b00      	cmp	r3, #0
 800443a:	da0c      	bge.n	8004456 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800443c:	78fb      	ldrb	r3, [r7, #3]
 800443e:	f003 020f 	and.w	r2, r3, #15
 8004442:	4613      	mov	r3, r2
 8004444:	00db      	lsls	r3, r3, #3
 8004446:	4413      	add	r3, r2
 8004448:	009b      	lsls	r3, r3, #2
 800444a:	3310      	adds	r3, #16
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	4413      	add	r3, r2
 8004450:	3304      	adds	r3, #4
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e00c      	b.n	8004470 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	f003 020f 	and.w	r2, r3, #15
 800445c:	4613      	mov	r3, r2
 800445e:	00db      	lsls	r3, r3, #3
 8004460:	4413      	add	r3, r2
 8004462:	009b      	lsls	r3, r3, #2
 8004464:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	4413      	add	r3, r2
 800446c:	3304      	adds	r3, #4
 800446e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	4618      	mov	r0, r3
 8004478:	f003 fdba 	bl	8007ff0 <USB_EPStopXfer>
 800447c:	4603      	mov	r3, r0
 800447e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004480:	7afb      	ldrb	r3, [r7, #11]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}

0800448a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b08a      	sub	sp, #40	@ 0x28
 800448e:	af02      	add	r7, sp, #8
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800449a:	697b      	ldr	r3, [r7, #20]
 800449c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800449e:	683a      	ldr	r2, [r7, #0]
 80044a0:	4613      	mov	r3, r2
 80044a2:	00db      	lsls	r3, r3, #3
 80044a4:	4413      	add	r3, r2
 80044a6:	009b      	lsls	r3, r3, #2
 80044a8:	3310      	adds	r3, #16
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4413      	add	r3, r2
 80044ae:	3304      	adds	r3, #4
 80044b0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	695a      	ldr	r2, [r3, #20]
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	691b      	ldr	r3, [r3, #16]
 80044ba:	429a      	cmp	r2, r3
 80044bc:	d901      	bls.n	80044c2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e06b      	b.n	800459a <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691a      	ldr	r2, [r3, #16]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	695b      	ldr	r3, [r3, #20]
 80044ca:	1ad3      	subs	r3, r2, r3
 80044cc:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d902      	bls.n	80044de <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80044de:	69fb      	ldr	r3, [r7, #28]
 80044e0:	3303      	adds	r3, #3
 80044e2:	089b      	lsrs	r3, r3, #2
 80044e4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80044e6:	e02a      	b.n	800453e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	695b      	ldr	r3, [r3, #20]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	69fa      	ldr	r2, [r7, #28]
 80044fa:	429a      	cmp	r2, r3
 80044fc:	d902      	bls.n	8004504 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	3303      	adds	r3, #3
 8004508:	089b      	lsrs	r3, r3, #2
 800450a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	68d9      	ldr	r1, [r3, #12]
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	b2da      	uxtb	r2, r3
 8004514:	69fb      	ldr	r3, [r7, #28]
 8004516:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4603      	mov	r3, r0
 8004520:	6978      	ldr	r0, [r7, #20]
 8004522:	f003 fe0f 	bl	8008144 <USB_WritePacket>

    ep->xfer_buff  += len;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	441a      	add	r2, r3
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	695a      	ldr	r2, [r3, #20]
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	441a      	add	r2, r3
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	015a      	lsls	r2, r3, #5
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	4413      	add	r3, r2
 8004546:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800454a:	699b      	ldr	r3, [r3, #24]
 800454c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800454e:	69ba      	ldr	r2, [r7, #24]
 8004550:	429a      	cmp	r2, r3
 8004552:	d809      	bhi.n	8004568 <PCD_WriteEmptyTxFifo+0xde>
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	695a      	ldr	r2, [r3, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800455c:	429a      	cmp	r2, r3
 800455e:	d203      	bcs.n	8004568 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	691b      	ldr	r3, [r3, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1bf      	bne.n	80044e8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	691a      	ldr	r2, [r3, #16]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	429a      	cmp	r2, r3
 8004572:	d811      	bhi.n	8004598 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004574:	683b      	ldr	r3, [r7, #0]
 8004576:	f003 030f 	and.w	r3, r3, #15
 800457a:	2201      	movs	r2, #1
 800457c:	fa02 f303 	lsl.w	r3, r2, r3
 8004580:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004588:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	43db      	mvns	r3, r3
 800458e:	6939      	ldr	r1, [r7, #16]
 8004590:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004594:	4013      	ands	r3, r2
 8004596:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8004598:	2300      	movs	r3, #0
}
 800459a:	4618      	mov	r0, r3
 800459c:	3720      	adds	r7, #32
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	333c      	adds	r3, #60	@ 0x3c
 80045bc:	3304      	adds	r3, #4
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	015a      	lsls	r2, r3, #5
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	4413      	add	r3, r2
 80045ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	799b      	ldrb	r3, [r3, #6]
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d17b      	bne.n	80046d2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d015      	beq.n	8004610 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045e4:	697b      	ldr	r3, [r7, #20]
 80045e6:	4a61      	ldr	r2, [pc, #388]	@ (800476c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	f240 80b9 	bls.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f000 80b3 	beq.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004606:	461a      	mov	r2, r3
 8004608:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800460c:	6093      	str	r3, [r2, #8]
 800460e:	e0a7      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	015a      	lsls	r2, r3, #5
 800461e:	69bb      	ldr	r3, [r7, #24]
 8004620:	4413      	add	r3, r2
 8004622:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004626:	461a      	mov	r2, r3
 8004628:	2320      	movs	r3, #32
 800462a:	6093      	str	r3, [r2, #8]
 800462c:	e098      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8004634:	2b00      	cmp	r3, #0
 8004636:	f040 8093 	bne.w	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	4a4b      	ldr	r2, [pc, #300]	@ (800476c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d90f      	bls.n	8004662 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004648:	2b00      	cmp	r3, #0
 800464a:	d00a      	beq.n	8004662 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	015a      	lsls	r2, r3, #5
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	4413      	add	r3, r2
 8004654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004658:	461a      	mov	r2, r3
 800465a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800465e:	6093      	str	r3, [r2, #8]
 8004660:	e07e      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8004662:	683a      	ldr	r2, [r7, #0]
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004670:	687a      	ldr	r2, [r7, #4]
 8004672:	4413      	add	r3, r2
 8004674:	3304      	adds	r3, #4
 8004676:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	6a1a      	ldr	r2, [r3, #32]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	0159      	lsls	r1, r3, #5
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	440b      	add	r3, r1
 8004684:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004688:	691b      	ldr	r3, [r3, #16]
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	1ad2      	subs	r2, r2, r3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d114      	bne.n	80046c4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80046ac:	461a      	mov	r2, r3
 80046ae:	2101      	movs	r1, #1
 80046b0:	f003 ffde 	bl	8008670 <USB_EP0_OutStart>
 80046b4:	e006      	b.n	80046c4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	68da      	ldr	r2, [r3, #12]
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	441a      	add	r2, r3
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	b2db      	uxtb	r3, r3
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f006 fa38 	bl	800ab40 <HAL_PCD_DataOutStageCallback>
 80046d0:	e046      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	4a26      	ldr	r2, [pc, #152]	@ (8004770 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d124      	bne.n	8004724 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d00a      	beq.n	80046fa <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	015a      	lsls	r2, r3, #5
 80046e8:	69bb      	ldr	r3, [r7, #24]
 80046ea:	4413      	add	r3, r2
 80046ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80046f0:	461a      	mov	r2, r3
 80046f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046f6:	6093      	str	r3, [r2, #8]
 80046f8:	e032      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	015a      	lsls	r2, r3, #5
 8004708:	69bb      	ldr	r3, [r7, #24]
 800470a:	4413      	add	r3, r2
 800470c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004710:	461a      	mov	r2, r3
 8004712:	2320      	movs	r3, #32
 8004714:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	b2db      	uxtb	r3, r3
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f006 fa0f 	bl	800ab40 <HAL_PCD_DataOutStageCallback>
 8004722:	e01d      	b.n	8004760 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d114      	bne.n	8004754 <PCD_EP_OutXfrComplete_int+0x1b0>
 800472a:	6879      	ldr	r1, [r7, #4]
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d108      	bne.n	8004754 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800474c:	461a      	mov	r2, r3
 800474e:	2100      	movs	r1, #0
 8004750:	f003 ff8e 	bl	8008670 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4619      	mov	r1, r3
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f006 f9f0 	bl	800ab40 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3720      	adds	r7, #32
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
 800476a:	bf00      	nop
 800476c:	4f54300a 	.word	0x4f54300a
 8004770:	4f54310a 	.word	0x4f54310a

08004774 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b086      	sub	sp, #24
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
 800477c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8004788:	697b      	ldr	r3, [r7, #20]
 800478a:	333c      	adds	r3, #60	@ 0x3c
 800478c:	3304      	adds	r3, #4
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	4a15      	ldr	r2, [pc, #84]	@ (80047fc <PCD_EP_OutSetupPacket_int+0x88>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d90e      	bls.n	80047c8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d009      	beq.n	80047c8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	015a      	lsls	r2, r3, #5
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	4413      	add	r3, r2
 80047bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80047c0:	461a      	mov	r2, r3
 80047c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80047c6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80047c8:	6878      	ldr	r0, [r7, #4]
 80047ca:	f006 f9a7 	bl	800ab1c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	4a0a      	ldr	r2, [pc, #40]	@ (80047fc <PCD_EP_OutSetupPacket_int+0x88>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d90c      	bls.n	80047f0 <PCD_EP_OutSetupPacket_int+0x7c>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	799b      	ldrb	r3, [r3, #6]
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d108      	bne.n	80047f0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6818      	ldr	r0, [r3, #0]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80047e8:	461a      	mov	r2, r3
 80047ea:	2101      	movs	r1, #1
 80047ec:	f003 ff40 	bl	8008670 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	4f54300a 	.word	0x4f54300a

08004800 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	460b      	mov	r3, r1
 800480a:	70fb      	strb	r3, [r7, #3]
 800480c:	4613      	mov	r3, r2
 800480e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004816:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d107      	bne.n	800482e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800481e:	883b      	ldrh	r3, [r7, #0]
 8004820:	0419      	lsls	r1, r3, #16
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	430a      	orrs	r2, r1
 800482a:	629a      	str	r2, [r3, #40]	@ 0x28
 800482c:	e028      	b.n	8004880 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	68ba      	ldr	r2, [r7, #8]
 8004838:	4413      	add	r3, r2
 800483a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800483c:	2300      	movs	r3, #0
 800483e:	73fb      	strb	r3, [r7, #15]
 8004840:	e00d      	b.n	800485e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	7bfb      	ldrb	r3, [r7, #15]
 8004848:	3340      	adds	r3, #64	@ 0x40
 800484a:	009b      	lsls	r3, r3, #2
 800484c:	4413      	add	r3, r2
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	0c1b      	lsrs	r3, r3, #16
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	4413      	add	r3, r2
 8004856:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004858:	7bfb      	ldrb	r3, [r7, #15]
 800485a:	3301      	adds	r3, #1
 800485c:	73fb      	strb	r3, [r7, #15]
 800485e:	7bfa      	ldrb	r2, [r7, #15]
 8004860:	78fb      	ldrb	r3, [r7, #3]
 8004862:	3b01      	subs	r3, #1
 8004864:	429a      	cmp	r2, r3
 8004866:	d3ec      	bcc.n	8004842 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004868:	883b      	ldrh	r3, [r7, #0]
 800486a:	0418      	lsls	r0, r3, #16
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6819      	ldr	r1, [r3, #0]
 8004870:	78fb      	ldrb	r3, [r7, #3]
 8004872:	3b01      	subs	r3, #1
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	4302      	orrs	r2, r0
 8004878:	3340      	adds	r3, #64	@ 0x40
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	440b      	add	r3, r1
 800487e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004880:	2300      	movs	r3, #0
}
 8004882:	4618      	mov	r0, r3
 8004884:	3714      	adds	r7, #20
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr

0800488e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800488e:	b480      	push	{r7}
 8004890:	b083      	sub	sp, #12
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
 8004896:	460b      	mov	r3, r1
 8004898:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	887a      	ldrh	r2, [r7, #2]
 80048a0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	e267      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d075      	beq.n	80049d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048e6:	4b88      	ldr	r3, [pc, #544]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f003 030c 	and.w	r3, r3, #12
 80048ee:	2b04      	cmp	r3, #4
 80048f0:	d00c      	beq.n	800490c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f2:	4b85      	ldr	r3, [pc, #532]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d112      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048fe:	4b82      	ldr	r3, [pc, #520]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004906:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800490a:	d10b      	bne.n	8004924 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	4b7e      	ldr	r3, [pc, #504]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004914:	2b00      	cmp	r3, #0
 8004916:	d05b      	beq.n	80049d0 <HAL_RCC_OscConfig+0x108>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d157      	bne.n	80049d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004920:	2301      	movs	r3, #1
 8004922:	e242      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800492c:	d106      	bne.n	800493c <HAL_RCC_OscConfig+0x74>
 800492e:	4b76      	ldr	r3, [pc, #472]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a75      	ldr	r2, [pc, #468]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004934:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	e01d      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004944:	d10c      	bne.n	8004960 <HAL_RCC_OscConfig+0x98>
 8004946:	4b70      	ldr	r3, [pc, #448]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a6f      	ldr	r2, [pc, #444]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 800494c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004950:	6013      	str	r3, [r2, #0]
 8004952:	4b6d      	ldr	r3, [pc, #436]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a6c      	ldr	r2, [pc, #432]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004958:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	e00b      	b.n	8004978 <HAL_RCC_OscConfig+0xb0>
 8004960:	4b69      	ldr	r3, [pc, #420]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a68      	ldr	r2, [pc, #416]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004966:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800496a:	6013      	str	r3, [r2, #0]
 800496c:	4b66      	ldr	r3, [pc, #408]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a65      	ldr	r2, [pc, #404]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004972:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004976:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d013      	beq.n	80049a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004980:	f7fd fede 	bl	8002740 <HAL_GetTick>
 8004984:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004986:	e008      	b.n	800499a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004988:	f7fd feda 	bl	8002740 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b64      	cmp	r3, #100	@ 0x64
 8004994:	d901      	bls.n	800499a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e207      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800499a:	4b5b      	ldr	r3, [pc, #364]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d0f0      	beq.n	8004988 <HAL_RCC_OscConfig+0xc0>
 80049a6:	e014      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a8:	f7fd feca 	bl	8002740 <HAL_GetTick>
 80049ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ae:	e008      	b.n	80049c2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049b0:	f7fd fec6 	bl	8002740 <HAL_GetTick>
 80049b4:	4602      	mov	r2, r0
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	1ad3      	subs	r3, r2, r3
 80049ba:	2b64      	cmp	r3, #100	@ 0x64
 80049bc:	d901      	bls.n	80049c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049be:	2303      	movs	r3, #3
 80049c0:	e1f3      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049c2:	4b51      	ldr	r3, [pc, #324]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d1f0      	bne.n	80049b0 <HAL_RCC_OscConfig+0xe8>
 80049ce:	e000      	b.n	80049d2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d063      	beq.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049de:	4b4a      	ldr	r3, [pc, #296]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049e0:	689b      	ldr	r3, [r3, #8]
 80049e2:	f003 030c 	and.w	r3, r3, #12
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00b      	beq.n	8004a02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ea:	4b47      	ldr	r3, [pc, #284]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049ec:	689b      	ldr	r3, [r3, #8]
 80049ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049f2:	2b08      	cmp	r3, #8
 80049f4:	d11c      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049f6:	4b44      	ldr	r3, [pc, #272]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 80049f8:	685b      	ldr	r3, [r3, #4]
 80049fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d116      	bne.n	8004a30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a02:	4b41      	ldr	r3, [pc, #260]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f003 0302 	and.w	r3, r3, #2
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d005      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d001      	beq.n	8004a1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a16:	2301      	movs	r3, #1
 8004a18:	e1c7      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	00db      	lsls	r3, r3, #3
 8004a28:	4937      	ldr	r1, [pc, #220]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a2e:	e03a      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d020      	beq.n	8004a7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a38:	4b34      	ldr	r3, [pc, #208]	@ (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a3e:	f7fd fe7f 	bl	8002740 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a46:	f7fd fe7b 	bl	8002740 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e1a8      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a58:	4b2b      	ldr	r3, [pc, #172]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a64:	4b28      	ldr	r3, [pc, #160]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	691b      	ldr	r3, [r3, #16]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	4925      	ldr	r1, [pc, #148]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	600b      	str	r3, [r1, #0]
 8004a78:	e015      	b.n	8004aa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a7a:	4b24      	ldr	r3, [pc, #144]	@ (8004b0c <HAL_RCC_OscConfig+0x244>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a80:	f7fd fe5e 	bl	8002740 <HAL_GetTick>
 8004a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a86:	e008      	b.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a88:	f7fd fe5a 	bl	8002740 <HAL_GetTick>
 8004a8c:	4602      	mov	r2, r0
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	1ad3      	subs	r3, r2, r3
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e187      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a9a:	4b1b      	ldr	r3, [pc, #108]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1f0      	bne.n	8004a88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f003 0308 	and.w	r3, r3, #8
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d036      	beq.n	8004b20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	695b      	ldr	r3, [r3, #20]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d016      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004abc:	2201      	movs	r2, #1
 8004abe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ac0:	f7fd fe3e 	bl	8002740 <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac8:	f7fd fe3a 	bl	8002740 <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e167      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ada:	4b0b      	ldr	r3, [pc, #44]	@ (8004b08 <HAL_RCC_OscConfig+0x240>)
 8004adc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0f0      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x200>
 8004ae6:	e01b      	b.n	8004b20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae8:	4b09      	ldr	r3, [pc, #36]	@ (8004b10 <HAL_RCC_OscConfig+0x248>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aee:	f7fd fe27 	bl	8002740 <HAL_GetTick>
 8004af2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004af4:	e00e      	b.n	8004b14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004af6:	f7fd fe23 	bl	8002740 <HAL_GetTick>
 8004afa:	4602      	mov	r2, r0
 8004afc:	693b      	ldr	r3, [r7, #16]
 8004afe:	1ad3      	subs	r3, r2, r3
 8004b00:	2b02      	cmp	r3, #2
 8004b02:	d907      	bls.n	8004b14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b04:	2303      	movs	r3, #3
 8004b06:	e150      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004b08:	40023800 	.word	0x40023800
 8004b0c:	42470000 	.word	0x42470000
 8004b10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b14:	4b88      	ldr	r3, [pc, #544]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b18:	f003 0302 	and.w	r3, r3, #2
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d1ea      	bne.n	8004af6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 8097 	beq.w	8004c5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b32:	4b81      	ldr	r3, [pc, #516]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10f      	bne.n	8004b5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60bb      	str	r3, [r7, #8]
 8004b42:	4b7d      	ldr	r3, [pc, #500]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b46:	4a7c      	ldr	r2, [pc, #496]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b4e:	4b7a      	ldr	r3, [pc, #488]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b56:	60bb      	str	r3, [r7, #8]
 8004b58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b5e:	4b77      	ldr	r3, [pc, #476]	@ (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d118      	bne.n	8004b9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b6a:	4b74      	ldr	r3, [pc, #464]	@ (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4a73      	ldr	r2, [pc, #460]	@ (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b76:	f7fd fde3 	bl	8002740 <HAL_GetTick>
 8004b7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b7e:	f7fd fddf 	bl	8002740 <HAL_GetTick>
 8004b82:	4602      	mov	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e10c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b90:	4b6a      	ldr	r3, [pc, #424]	@ (8004d3c <HAL_RCC_OscConfig+0x474>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d0f0      	beq.n	8004b7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d106      	bne.n	8004bb2 <HAL_RCC_OscConfig+0x2ea>
 8004ba4:	4b64      	ldr	r3, [pc, #400]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba8:	4a63      	ldr	r2, [pc, #396]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004baa:	f043 0301 	orr.w	r3, r3, #1
 8004bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bb0:	e01c      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	2b05      	cmp	r3, #5
 8004bb8:	d10c      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x30c>
 8004bba:	4b5f      	ldr	r3, [pc, #380]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bbe:	4a5e      	ldr	r2, [pc, #376]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	f043 0304 	orr.w	r3, r3, #4
 8004bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bc6:	4b5c      	ldr	r3, [pc, #368]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bca:	4a5b      	ldr	r2, [pc, #364]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bcc:	f043 0301 	orr.w	r3, r3, #1
 8004bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd2:	e00b      	b.n	8004bec <HAL_RCC_OscConfig+0x324>
 8004bd4:	4b58      	ldr	r3, [pc, #352]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd8:	4a57      	ldr	r2, [pc, #348]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004bda:	f023 0301 	bic.w	r3, r3, #1
 8004bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8004be0:	4b55      	ldr	r3, [pc, #340]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004be4:	4a54      	ldr	r2, [pc, #336]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004be6:	f023 0304 	bic.w	r3, r3, #4
 8004bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	689b      	ldr	r3, [r3, #8]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d015      	beq.n	8004c20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf4:	f7fd fda4 	bl	8002740 <HAL_GetTick>
 8004bf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	e00a      	b.n	8004c12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bfc:	f7fd fda0 	bl	8002740 <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c0a:	4293      	cmp	r3, r2
 8004c0c:	d901      	bls.n	8004c12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c0e:	2303      	movs	r3, #3
 8004c10:	e0cb      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c12:	4b49      	ldr	r3, [pc, #292]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d0ee      	beq.n	8004bfc <HAL_RCC_OscConfig+0x334>
 8004c1e:	e014      	b.n	8004c4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c20:	f7fd fd8e 	bl	8002740 <HAL_GetTick>
 8004c24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	e00a      	b.n	8004c3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c28:	f7fd fd8a 	bl	8002740 <HAL_GetTick>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	1ad3      	subs	r3, r2, r3
 8004c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d901      	bls.n	8004c3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c3a:	2303      	movs	r3, #3
 8004c3c:	e0b5      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c3e:	4b3e      	ldr	r3, [pc, #248]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c42:	f003 0302 	and.w	r3, r3, #2
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d1ee      	bne.n	8004c28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c4a:	7dfb      	ldrb	r3, [r7, #23]
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d105      	bne.n	8004c5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c50:	4b39      	ldr	r3, [pc, #228]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c54:	4a38      	ldr	r2, [pc, #224]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	699b      	ldr	r3, [r3, #24]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80a1 	beq.w	8004da8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c66:	4b34      	ldr	r3, [pc, #208]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d05c      	beq.n	8004d2c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d141      	bne.n	8004cfe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c7a:	4b31      	ldr	r3, [pc, #196]	@ (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c80:	f7fd fd5e 	bl	8002740 <HAL_GetTick>
 8004c84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c86:	e008      	b.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c88:	f7fd fd5a 	bl	8002740 <HAL_GetTick>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	1ad3      	subs	r3, r2, r3
 8004c92:	2b02      	cmp	r3, #2
 8004c94:	d901      	bls.n	8004c9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c96:	2303      	movs	r3, #3
 8004c98:	e087      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c9a:	4b27      	ldr	r3, [pc, #156]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d1f0      	bne.n	8004c88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	69da      	ldr	r2, [r3, #28]
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6a1b      	ldr	r3, [r3, #32]
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cb4:	019b      	lsls	r3, r3, #6
 8004cb6:	431a      	orrs	r2, r3
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cbc:	085b      	lsrs	r3, r3, #1
 8004cbe:	3b01      	subs	r3, #1
 8004cc0:	041b      	lsls	r3, r3, #16
 8004cc2:	431a      	orrs	r2, r3
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc8:	061b      	lsls	r3, r3, #24
 8004cca:	491b      	ldr	r1, [pc, #108]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cd0:	4b1b      	ldr	r3, [pc, #108]	@ (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cd6:	f7fd fd33 	bl	8002740 <HAL_GetTick>
 8004cda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cdc:	e008      	b.n	8004cf0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cde:	f7fd fd2f 	bl	8002740 <HAL_GetTick>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	2b02      	cmp	r3, #2
 8004cea:	d901      	bls.n	8004cf0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e05c      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf0:	4b11      	ldr	r3, [pc, #68]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d0f0      	beq.n	8004cde <HAL_RCC_OscConfig+0x416>
 8004cfc:	e054      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cfe:	4b10      	ldr	r3, [pc, #64]	@ (8004d40 <HAL_RCC_OscConfig+0x478>)
 8004d00:	2200      	movs	r2, #0
 8004d02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d04:	f7fd fd1c 	bl	8002740 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d0a:	e008      	b.n	8004d1e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d0c:	f7fd fd18 	bl	8002740 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	2b02      	cmp	r3, #2
 8004d18:	d901      	bls.n	8004d1e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d1a:	2303      	movs	r3, #3
 8004d1c:	e045      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1e:	4b06      	ldr	r3, [pc, #24]	@ (8004d38 <HAL_RCC_OscConfig+0x470>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d1f0      	bne.n	8004d0c <HAL_RCC_OscConfig+0x444>
 8004d2a:	e03d      	b.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	699b      	ldr	r3, [r3, #24]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d107      	bne.n	8004d44 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d34:	2301      	movs	r3, #1
 8004d36:	e038      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
 8004d38:	40023800 	.word	0x40023800
 8004d3c:	40007000 	.word	0x40007000
 8004d40:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d44:	4b1b      	ldr	r3, [pc, #108]	@ (8004db4 <HAL_RCC_OscConfig+0x4ec>)
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	699b      	ldr	r3, [r3, #24]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d028      	beq.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d121      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d11a      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d74:	4013      	ands	r3, r2
 8004d76:	687a      	ldr	r2, [r7, #4]
 8004d78:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d7a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d111      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d8a:	085b      	lsrs	r3, r3, #1
 8004d8c:	3b01      	subs	r3, #1
 8004d8e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d107      	bne.n	8004da4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d9e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d001      	beq.n	8004da8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	e000      	b.n	8004daa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3718      	adds	r7, #24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40023800 	.word	0x40023800

08004db8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b084      	sub	sp, #16
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
 8004dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d101      	bne.n	8004dcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc8:	2301      	movs	r3, #1
 8004dca:	e0cc      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dcc:	4b68      	ldr	r3, [pc, #416]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f003 0307 	and.w	r3, r3, #7
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d90c      	bls.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dda:	4b65      	ldr	r3, [pc, #404]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	683a      	ldr	r2, [r7, #0]
 8004dde:	b2d2      	uxtb	r2, r2
 8004de0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de2:	4b63      	ldr	r3, [pc, #396]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d001      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004df0:	2301      	movs	r3, #1
 8004df2:	e0b8      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 0302 	and.w	r3, r3, #2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d020      	beq.n	8004e42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0304 	and.w	r3, r3, #4
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e0c:	4b59      	ldr	r3, [pc, #356]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a58      	ldr	r2, [pc, #352]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e16:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d005      	beq.n	8004e30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e24:	4b53      	ldr	r3, [pc, #332]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	4a52      	ldr	r2, [pc, #328]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e30:	4b50      	ldr	r3, [pc, #320]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	689b      	ldr	r3, [r3, #8]
 8004e3c:	494d      	ldr	r1, [pc, #308]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0301 	and.w	r3, r3, #1
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d044      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d107      	bne.n	8004e66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e56:	4b47      	ldr	r3, [pc, #284]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d119      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e62:	2301      	movs	r3, #1
 8004e64:	e07f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d003      	beq.n	8004e76 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e72:	2b03      	cmp	r3, #3
 8004e74:	d107      	bne.n	8004e86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e76:	4b3f      	ldr	r3, [pc, #252]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d109      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e82:	2301      	movs	r3, #1
 8004e84:	e06f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	4b3b      	ldr	r3, [pc, #236]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0302 	and.w	r3, r3, #2
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d101      	bne.n	8004e96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e067      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e96:	4b37      	ldr	r3, [pc, #220]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	f023 0203 	bic.w	r2, r3, #3
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	4934      	ldr	r1, [pc, #208]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea8:	f7fd fc4a 	bl	8002740 <HAL_GetTick>
 8004eac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eb0:	f7fd fc46 	bl	8002740 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e04f      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec6:	4b2b      	ldr	r3, [pc, #172]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 020c 	and.w	r2, r3, #12
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	009b      	lsls	r3, r3, #2
 8004ed4:	429a      	cmp	r2, r3
 8004ed6:	d1eb      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed8:	4b25      	ldr	r3, [pc, #148]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0307 	and.w	r3, r3, #7
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	429a      	cmp	r2, r3
 8004ee4:	d20c      	bcs.n	8004f00 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee6:	4b22      	ldr	r3, [pc, #136]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	b2d2      	uxtb	r2, r2
 8004eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eee:	4b20      	ldr	r3, [pc, #128]	@ (8004f70 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0307 	and.w	r3, r3, #7
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	429a      	cmp	r2, r3
 8004efa:	d001      	beq.n	8004f00 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e032      	b.n	8004f66 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f003 0304 	and.w	r3, r3, #4
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d008      	beq.n	8004f1e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f0c:	4b19      	ldr	r3, [pc, #100]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4916      	ldr	r1, [pc, #88]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0308 	and.w	r3, r3, #8
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d009      	beq.n	8004f3e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f2a:	4b12      	ldr	r3, [pc, #72]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	691b      	ldr	r3, [r3, #16]
 8004f36:	00db      	lsls	r3, r3, #3
 8004f38:	490e      	ldr	r1, [pc, #56]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f3e:	f000 f821 	bl	8004f84 <HAL_RCC_GetSysClockFreq>
 8004f42:	4602      	mov	r2, r0
 8004f44:	4b0b      	ldr	r3, [pc, #44]	@ (8004f74 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	091b      	lsrs	r3, r3, #4
 8004f4a:	f003 030f 	and.w	r3, r3, #15
 8004f4e:	490a      	ldr	r1, [pc, #40]	@ (8004f78 <HAL_RCC_ClockConfig+0x1c0>)
 8004f50:	5ccb      	ldrb	r3, [r1, r3]
 8004f52:	fa22 f303 	lsr.w	r3, r2, r3
 8004f56:	4a09      	ldr	r2, [pc, #36]	@ (8004f7c <HAL_RCC_ClockConfig+0x1c4>)
 8004f58:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f5a:	4b09      	ldr	r3, [pc, #36]	@ (8004f80 <HAL_RCC_ClockConfig+0x1c8>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4618      	mov	r0, r3
 8004f60:	f7fd fbaa 	bl	80026b8 <HAL_InitTick>

  return HAL_OK;
 8004f64:	2300      	movs	r3, #0
}
 8004f66:	4618      	mov	r0, r3
 8004f68:	3710      	adds	r7, #16
 8004f6a:	46bd      	mov	sp, r7
 8004f6c:	bd80      	pop	{r7, pc}
 8004f6e:	bf00      	nop
 8004f70:	40023c00 	.word	0x40023c00
 8004f74:	40023800 	.word	0x40023800
 8004f78:	0800e3ac 	.word	0x0800e3ac
 8004f7c:	20000000 	.word	0x20000000
 8004f80:	20000004 	.word	0x20000004

08004f84 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f84:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f88:	b090      	sub	sp, #64	@ 0x40
 8004f8a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f9c:	4b59      	ldr	r3, [pc, #356]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004f9e:	689b      	ldr	r3, [r3, #8]
 8004fa0:	f003 030c 	and.w	r3, r3, #12
 8004fa4:	2b08      	cmp	r3, #8
 8004fa6:	d00d      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0x40>
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	f200 80a1 	bhi.w	80050f0 <HAL_RCC_GetSysClockFreq+0x16c>
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d002      	beq.n	8004fb8 <HAL_RCC_GetSysClockFreq+0x34>
 8004fb2:	2b04      	cmp	r3, #4
 8004fb4:	d003      	beq.n	8004fbe <HAL_RCC_GetSysClockFreq+0x3a>
 8004fb6:	e09b      	b.n	80050f0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb8:	4b53      	ldr	r3, [pc, #332]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x184>)
 8004fba:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fbc:	e09b      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fbe:	4b53      	ldr	r3, [pc, #332]	@ (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004fc0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004fc2:	e098      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc4:	4b4f      	ldr	r3, [pc, #316]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fcc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fce:	4b4d      	ldr	r3, [pc, #308]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fd0:	685b      	ldr	r3, [r3, #4]
 8004fd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d028      	beq.n	800502c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fda:	4b4a      	ldr	r3, [pc, #296]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	099b      	lsrs	r3, r3, #6
 8004fe0:	2200      	movs	r2, #0
 8004fe2:	623b      	str	r3, [r7, #32]
 8004fe4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fe6:	6a3b      	ldr	r3, [r7, #32]
 8004fe8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004fec:	2100      	movs	r1, #0
 8004fee:	4b47      	ldr	r3, [pc, #284]	@ (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ff0:	fb03 f201 	mul.w	r2, r3, r1
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	fb00 f303 	mul.w	r3, r0, r3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	4a43      	ldr	r2, [pc, #268]	@ (800510c <HAL_RCC_GetSysClockFreq+0x188>)
 8004ffe:	fba0 1202 	umull	r1, r2, r0, r2
 8005002:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005004:	460a      	mov	r2, r1
 8005006:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800500a:	4413      	add	r3, r2
 800500c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800500e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005010:	2200      	movs	r2, #0
 8005012:	61bb      	str	r3, [r7, #24]
 8005014:	61fa      	str	r2, [r7, #28]
 8005016:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800501a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800501e:	f7fb f8d9 	bl	80001d4 <__aeabi_uldivmod>
 8005022:	4602      	mov	r2, r0
 8005024:	460b      	mov	r3, r1
 8005026:	4613      	mov	r3, r2
 8005028:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800502a:	e053      	b.n	80050d4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800502c:	4b35      	ldr	r3, [pc, #212]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	099b      	lsrs	r3, r3, #6
 8005032:	2200      	movs	r2, #0
 8005034:	613b      	str	r3, [r7, #16]
 8005036:	617a      	str	r2, [r7, #20]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800503e:	f04f 0b00 	mov.w	fp, #0
 8005042:	4652      	mov	r2, sl
 8005044:	465b      	mov	r3, fp
 8005046:	f04f 0000 	mov.w	r0, #0
 800504a:	f04f 0100 	mov.w	r1, #0
 800504e:	0159      	lsls	r1, r3, #5
 8005050:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005054:	0150      	lsls	r0, r2, #5
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	ebb2 080a 	subs.w	r8, r2, sl
 800505e:	eb63 090b 	sbc.w	r9, r3, fp
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800506e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005072:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005076:	ebb2 0408 	subs.w	r4, r2, r8
 800507a:	eb63 0509 	sbc.w	r5, r3, r9
 800507e:	f04f 0200 	mov.w	r2, #0
 8005082:	f04f 0300 	mov.w	r3, #0
 8005086:	00eb      	lsls	r3, r5, #3
 8005088:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800508c:	00e2      	lsls	r2, r4, #3
 800508e:	4614      	mov	r4, r2
 8005090:	461d      	mov	r5, r3
 8005092:	eb14 030a 	adds.w	r3, r4, sl
 8005096:	603b      	str	r3, [r7, #0]
 8005098:	eb45 030b 	adc.w	r3, r5, fp
 800509c:	607b      	str	r3, [r7, #4]
 800509e:	f04f 0200 	mov.w	r2, #0
 80050a2:	f04f 0300 	mov.w	r3, #0
 80050a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050aa:	4629      	mov	r1, r5
 80050ac:	028b      	lsls	r3, r1, #10
 80050ae:	4621      	mov	r1, r4
 80050b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b4:	4621      	mov	r1, r4
 80050b6:	028a      	lsls	r2, r1, #10
 80050b8:	4610      	mov	r0, r2
 80050ba:	4619      	mov	r1, r3
 80050bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050be:	2200      	movs	r2, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	60fa      	str	r2, [r7, #12]
 80050c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050c8:	f7fb f884 	bl	80001d4 <__aeabi_uldivmod>
 80050cc:	4602      	mov	r2, r0
 80050ce:	460b      	mov	r3, r1
 80050d0:	4613      	mov	r3, r2
 80050d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80050d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005104 <HAL_RCC_GetSysClockFreq+0x180>)
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	0c1b      	lsrs	r3, r3, #16
 80050da:	f003 0303 	and.w	r3, r3, #3
 80050de:	3301      	adds	r3, #1
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80050e4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80050e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80050ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050ee:	e002      	b.n	80050f6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f0:	4b05      	ldr	r3, [pc, #20]	@ (8005108 <HAL_RCC_GetSysClockFreq+0x184>)
 80050f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80050f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3740      	adds	r7, #64	@ 0x40
 80050fc:	46bd      	mov	sp, r7
 80050fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005102:	bf00      	nop
 8005104:	40023800 	.word	0x40023800
 8005108:	00f42400 	.word	0x00f42400
 800510c:	017d7840 	.word	0x017d7840

08005110 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005110:	b480      	push	{r7}
 8005112:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005114:	4b03      	ldr	r3, [pc, #12]	@ (8005124 <HAL_RCC_GetHCLKFreq+0x14>)
 8005116:	681b      	ldr	r3, [r3, #0]
}
 8005118:	4618      	mov	r0, r3
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr
 8005122:	bf00      	nop
 8005124:	20000000 	.word	0x20000000

08005128 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005128:	b580      	push	{r7, lr}
 800512a:	b082      	sub	sp, #8
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e07b      	b.n	8005232 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800513e:	2b00      	cmp	r3, #0
 8005140:	d108      	bne.n	8005154 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800514a:	d009      	beq.n	8005160 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2200      	movs	r2, #0
 8005150:	61da      	str	r2, [r3, #28]
 8005152:	e005      	b.n	8005160 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2200      	movs	r2, #0
 800515e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2200      	movs	r2, #0
 8005164:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800516c:	b2db      	uxtb	r3, r3
 800516e:	2b00      	cmp	r3, #0
 8005170:	d106      	bne.n	8005180 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7fb febc 	bl	8000ef8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2202      	movs	r2, #2
 8005184:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005196:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80051a8:	431a      	orrs	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	68db      	ldr	r3, [r3, #12]
 80051ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80051b2:	431a      	orrs	r2, r3
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	f003 0302 	and.w	r3, r3, #2
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	695b      	ldr	r3, [r3, #20]
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	431a      	orrs	r2, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80051d0:	431a      	orrs	r2, r3
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	69db      	ldr	r3, [r3, #28]
 80051d6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051e4:	ea42 0103 	orr.w	r1, r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	430a      	orrs	r2, r1
 80051f6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	0c1b      	lsrs	r3, r3, #16
 80051fe:	f003 0104 	and.w	r1, r3, #4
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	f003 0210 	and.w	r2, r3, #16
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	69da      	ldr	r2, [r3, #28]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005220:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3708      	adds	r7, #8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}

0800523a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800523a:	b580      	push	{r7, lr}
 800523c:	b088      	sub	sp, #32
 800523e:	af00      	add	r7, sp, #0
 8005240:	60f8      	str	r0, [r7, #12]
 8005242:	60b9      	str	r1, [r7, #8]
 8005244:	603b      	str	r3, [r7, #0]
 8005246:	4613      	mov	r3, r2
 8005248:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800524a:	f7fd fa79 	bl	8002740 <HAL_GetTick>
 800524e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005250:	88fb      	ldrh	r3, [r7, #6]
 8005252:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d001      	beq.n	8005264 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005260:	2302      	movs	r3, #2
 8005262:	e12a      	b.n	80054ba <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <HAL_SPI_Transmit+0x36>
 800526a:	88fb      	ldrh	r3, [r7, #6]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d101      	bne.n	8005274 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e122      	b.n	80054ba <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800527a:	2b01      	cmp	r3, #1
 800527c:	d101      	bne.n	8005282 <HAL_SPI_Transmit+0x48>
 800527e:	2302      	movs	r3, #2
 8005280:	e11b      	b.n	80054ba <HAL_SPI_Transmit+0x280>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	2201      	movs	r2, #1
 8005286:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2203      	movs	r2, #3
 800528e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2200      	movs	r2, #0
 8005296:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	88fa      	ldrh	r2, [r7, #6]
 80052a2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	88fa      	ldrh	r2, [r7, #6]
 80052a8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	2200      	movs	r2, #0
 80052ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	2200      	movs	r2, #0
 80052c0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2200      	movs	r2, #0
 80052c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052d0:	d10f      	bne.n	80052f2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80052e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	681a      	ldr	r2, [r3, #0]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80052f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052fc:	2b40      	cmp	r3, #64	@ 0x40
 80052fe:	d007      	beq.n	8005310 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800530e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005318:	d152      	bne.n	80053c0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2b00      	cmp	r3, #0
 8005320:	d002      	beq.n	8005328 <HAL_SPI_Transmit+0xee>
 8005322:	8b7b      	ldrh	r3, [r7, #26]
 8005324:	2b01      	cmp	r3, #1
 8005326:	d145      	bne.n	80053b4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800532c:	881a      	ldrh	r2, [r3, #0]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005338:	1c9a      	adds	r2, r3, #2
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005342:	b29b      	uxth	r3, r3
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800534c:	e032      	b.n	80053b4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	f003 0302 	and.w	r3, r3, #2
 8005358:	2b02      	cmp	r3, #2
 800535a:	d112      	bne.n	8005382 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005360:	881a      	ldrh	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800536c:	1c9a      	adds	r2, r3, #2
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005376:	b29b      	uxth	r3, r3
 8005378:	3b01      	subs	r3, #1
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005380:	e018      	b.n	80053b4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005382:	f7fd f9dd 	bl	8002740 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	69fb      	ldr	r3, [r7, #28]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	429a      	cmp	r2, r3
 8005390:	d803      	bhi.n	800539a <HAL_SPI_Transmit+0x160>
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005398:	d102      	bne.n	80053a0 <HAL_SPI_Transmit+0x166>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d109      	bne.n	80053b4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80053b0:	2303      	movs	r3, #3
 80053b2:	e082      	b.n	80054ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d1c7      	bne.n	800534e <HAL_SPI_Transmit+0x114>
 80053be:	e053      	b.n	8005468 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_SPI_Transmit+0x194>
 80053c8:	8b7b      	ldrh	r3, [r7, #26]
 80053ca:	2b01      	cmp	r3, #1
 80053cc:	d147      	bne.n	800545e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	330c      	adds	r3, #12
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	3b01      	subs	r3, #1
 80053ee:	b29a      	uxth	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80053f4:	e033      	b.n	800545e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	689b      	ldr	r3, [r3, #8]
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b02      	cmp	r3, #2
 8005402:	d113      	bne.n	800542c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	330c      	adds	r3, #12
 800540e:	7812      	ldrb	r2, [r2, #0]
 8005410:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005416:	1c5a      	adds	r2, r3, #1
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005420:	b29b      	uxth	r3, r3
 8005422:	3b01      	subs	r3, #1
 8005424:	b29a      	uxth	r2, r3
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	86da      	strh	r2, [r3, #54]	@ 0x36
 800542a:	e018      	b.n	800545e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800542c:	f7fd f988 	bl	8002740 <HAL_GetTick>
 8005430:	4602      	mov	r2, r0
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	1ad3      	subs	r3, r2, r3
 8005436:	683a      	ldr	r2, [r7, #0]
 8005438:	429a      	cmp	r2, r3
 800543a:	d803      	bhi.n	8005444 <HAL_SPI_Transmit+0x20a>
 800543c:	683b      	ldr	r3, [r7, #0]
 800543e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005442:	d102      	bne.n	800544a <HAL_SPI_Transmit+0x210>
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d109      	bne.n	800545e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2201      	movs	r2, #1
 800544e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	2200      	movs	r2, #0
 8005456:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800545a:	2303      	movs	r3, #3
 800545c:	e02d      	b.n	80054ba <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005462:	b29b      	uxth	r3, r3
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1c6      	bne.n	80053f6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005468:	69fa      	ldr	r2, [r7, #28]
 800546a:	6839      	ldr	r1, [r7, #0]
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fd21 	bl	8005eb4 <SPI_EndRxTxTransaction>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d002      	beq.n	800547e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2220      	movs	r2, #32
 800547c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	689b      	ldr	r3, [r3, #8]
 8005482:	2b00      	cmp	r3, #0
 8005484:	d10a      	bne.n	800549c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	617b      	str	r3, [r7, #20]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	617b      	str	r3, [r7, #20]
 800549a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2201      	movs	r2, #1
 80054a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d001      	beq.n	80054b8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80054b4:	2301      	movs	r3, #1
 80054b6:	e000      	b.n	80054ba <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80054b8:	2300      	movs	r3, #0
  }
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}

080054c2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054c2:	b580      	push	{r7, lr}
 80054c4:	b088      	sub	sp, #32
 80054c6:	af02      	add	r7, sp, #8
 80054c8:	60f8      	str	r0, [r7, #12]
 80054ca:	60b9      	str	r1, [r7, #8]
 80054cc:	603b      	str	r3, [r7, #0]
 80054ce:	4613      	mov	r3, r2
 80054d0:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d001      	beq.n	80054e2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80054de:	2302      	movs	r3, #2
 80054e0:	e104      	b.n	80056ec <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80054ea:	d112      	bne.n	8005512 <HAL_SPI_Receive+0x50>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10e      	bne.n	8005512 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2204      	movs	r2, #4
 80054f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80054fc:	88fa      	ldrh	r2, [r7, #6]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	4613      	mov	r3, r2
 8005504:	68ba      	ldr	r2, [r7, #8]
 8005506:	68b9      	ldr	r1, [r7, #8]
 8005508:	68f8      	ldr	r0, [r7, #12]
 800550a:	f000 f8f3 	bl	80056f4 <HAL_SPI_TransmitReceive>
 800550e:	4603      	mov	r3, r0
 8005510:	e0ec      	b.n	80056ec <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005512:	f7fd f915 	bl	8002740 <HAL_GetTick>
 8005516:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <HAL_SPI_Receive+0x62>
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d101      	bne.n	8005528 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005524:	2301      	movs	r3, #1
 8005526:	e0e1      	b.n	80056ec <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_SPI_Receive+0x74>
 8005532:	2302      	movs	r3, #2
 8005534:	e0da      	b.n	80056ec <HAL_SPI_Receive+0x22a>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	2204      	movs	r2, #4
 8005542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2200      	movs	r2, #0
 800554a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	68ba      	ldr	r2, [r7, #8]
 8005550:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	88fa      	ldrh	r2, [r7, #6]
 8005556:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	88fa      	ldrh	r2, [r7, #6]
 800555c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2200      	movs	r2, #0
 8005562:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	2200      	movs	r2, #0
 8005568:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	2200      	movs	r2, #0
 8005574:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	2200      	movs	r2, #0
 800557a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005584:	d10f      	bne.n	80055a6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005594:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	681a      	ldr	r2, [r3, #0]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80055a4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055b0:	2b40      	cmp	r3, #64	@ 0x40
 80055b2:	d007      	beq.n	80055c4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80055c2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d170      	bne.n	80056ae <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80055cc:	e035      	b.n	800563a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0301 	and.w	r3, r3, #1
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d115      	bne.n	8005608 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f103 020c 	add.w	r2, r3, #12
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055e8:	7812      	ldrb	r2, [r2, #0]
 80055ea:	b2d2      	uxtb	r2, r2
 80055ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055f2:	1c5a      	adds	r2, r3, #1
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80055fc:	b29b      	uxth	r3, r3
 80055fe:	3b01      	subs	r3, #1
 8005600:	b29a      	uxth	r2, r3
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005606:	e018      	b.n	800563a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005608:	f7fd f89a 	bl	8002740 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	697b      	ldr	r3, [r7, #20]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d803      	bhi.n	8005620 <HAL_SPI_Receive+0x15e>
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800561e:	d102      	bne.n	8005626 <HAL_SPI_Receive+0x164>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d109      	bne.n	800563a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2201      	movs	r2, #1
 800562a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e058      	b.n	80056ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d1c4      	bne.n	80055ce <HAL_SPI_Receive+0x10c>
 8005644:	e038      	b.n	80056b8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0301 	and.w	r3, r3, #1
 8005650:	2b01      	cmp	r3, #1
 8005652:	d113      	bne.n	800567c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	68da      	ldr	r2, [r3, #12]
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800565e:	b292      	uxth	r2, r2
 8005660:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005666:	1c9a      	adds	r2, r3, #2
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005670:	b29b      	uxth	r3, r3
 8005672:	3b01      	subs	r3, #1
 8005674:	b29a      	uxth	r2, r3
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800567a:	e018      	b.n	80056ae <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800567c:	f7fd f860 	bl	8002740 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	683a      	ldr	r2, [r7, #0]
 8005688:	429a      	cmp	r2, r3
 800568a:	d803      	bhi.n	8005694 <HAL_SPI_Receive+0x1d2>
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005692:	d102      	bne.n	800569a <HAL_SPI_Receive+0x1d8>
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d109      	bne.n	80056ae <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2201      	movs	r2, #1
 800569e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e01e      	b.n	80056ec <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056b2:	b29b      	uxth	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d1c6      	bne.n	8005646 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80056b8:	697a      	ldr	r2, [r7, #20]
 80056ba:	6839      	ldr	r1, [r7, #0]
 80056bc:	68f8      	ldr	r0, [r7, #12]
 80056be:	f000 fb93 	bl	8005de8 <SPI_EndRxTransaction>
 80056c2:	4603      	mov	r3, r0
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d002      	beq.n	80056ce <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2220      	movs	r2, #32
 80056cc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	2201      	movs	r2, #1
 80056d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	2200      	movs	r2, #0
 80056da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d001      	beq.n	80056ea <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80056ea:	2300      	movs	r3, #0
  }
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}

080056f4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b08a      	sub	sp, #40	@ 0x28
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
 8005700:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005702:	2301      	movs	r3, #1
 8005704:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005706:	f7fd f81b 	bl	8002740 <HAL_GetTick>
 800570a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005712:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800571a:	887b      	ldrh	r3, [r7, #2]
 800571c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800571e:	7ffb      	ldrb	r3, [r7, #31]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d00c      	beq.n	800573e <HAL_SPI_TransmitReceive+0x4a>
 8005724:	69bb      	ldr	r3, [r7, #24]
 8005726:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800572a:	d106      	bne.n	800573a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d102      	bne.n	800573a <HAL_SPI_TransmitReceive+0x46>
 8005734:	7ffb      	ldrb	r3, [r7, #31]
 8005736:	2b04      	cmp	r3, #4
 8005738:	d001      	beq.n	800573e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 800573a:	2302      	movs	r3, #2
 800573c:	e17f      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x5c>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d002      	beq.n	8005750 <HAL_SPI_TransmitReceive+0x5c>
 800574a:	887b      	ldrh	r3, [r7, #2]
 800574c:	2b00      	cmp	r3, #0
 800574e:	d101      	bne.n	8005754 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005750:	2301      	movs	r3, #1
 8005752:	e174      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800575a:	2b01      	cmp	r3, #1
 800575c:	d101      	bne.n	8005762 <HAL_SPI_TransmitReceive+0x6e>
 800575e:	2302      	movs	r3, #2
 8005760:	e16d      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2201      	movs	r2, #1
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b04      	cmp	r3, #4
 8005774:	d003      	beq.n	800577e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2205      	movs	r2, #5
 800577a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	887a      	ldrh	r2, [r7, #2]
 800578e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	887a      	ldrh	r2, [r7, #2]
 8005794:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	68ba      	ldr	r2, [r7, #8]
 800579a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	887a      	ldrh	r2, [r7, #2]
 80057a0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	887a      	ldrh	r2, [r7, #2]
 80057a6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2200      	movs	r2, #0
 80057b2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80057be:	2b40      	cmp	r3, #64	@ 0x40
 80057c0:	d007      	beq.n	80057d2 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80057d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80057da:	d17e      	bne.n	80058da <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <HAL_SPI_TransmitReceive+0xf6>
 80057e4:	8afb      	ldrh	r3, [r7, #22]
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	d16c      	bne.n	80058c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ee:	881a      	ldrh	r2, [r3, #0]
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	1c9a      	adds	r2, r3, #2
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005804:	b29b      	uxth	r3, r3
 8005806:	3b01      	subs	r3, #1
 8005808:	b29a      	uxth	r2, r3
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800580e:	e059      	b.n	80058c4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f003 0302 	and.w	r3, r3, #2
 800581a:	2b02      	cmp	r3, #2
 800581c:	d11b      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x162>
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005822:	b29b      	uxth	r3, r3
 8005824:	2b00      	cmp	r3, #0
 8005826:	d016      	beq.n	8005856 <HAL_SPI_TransmitReceive+0x162>
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	2b01      	cmp	r3, #1
 800582c:	d113      	bne.n	8005856 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005832:	881a      	ldrh	r2, [r3, #0]
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800583e:	1c9a      	adds	r2, r3, #2
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005848:	b29b      	uxth	r3, r3
 800584a:	3b01      	subs	r3, #1
 800584c:	b29a      	uxth	r2, r3
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005852:	2300      	movs	r3, #0
 8005854:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f003 0301 	and.w	r3, r3, #1
 8005860:	2b01      	cmp	r3, #1
 8005862:	d119      	bne.n	8005898 <HAL_SPI_TransmitReceive+0x1a4>
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005868:	b29b      	uxth	r3, r3
 800586a:	2b00      	cmp	r3, #0
 800586c:	d014      	beq.n	8005898 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	68da      	ldr	r2, [r3, #12]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005878:	b292      	uxth	r2, r2
 800587a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005880:	1c9a      	adds	r2, r3, #2
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800588a:	b29b      	uxth	r3, r3
 800588c:	3b01      	subs	r3, #1
 800588e:	b29a      	uxth	r2, r3
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005894:	2301      	movs	r3, #1
 8005896:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005898:	f7fc ff52 	bl	8002740 <HAL_GetTick>
 800589c:	4602      	mov	r2, r0
 800589e:	6a3b      	ldr	r3, [r7, #32]
 80058a0:	1ad3      	subs	r3, r2, r3
 80058a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d80d      	bhi.n	80058c4 <HAL_SPI_TransmitReceive+0x1d0>
 80058a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058aa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058ae:	d009      	beq.n	80058c4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80058c0:	2303      	movs	r3, #3
 80058c2:	e0bc      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80058c8:	b29b      	uxth	r3, r3
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d1a0      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x11c>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80058d2:	b29b      	uxth	r3, r3
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d19b      	bne.n	8005810 <HAL_SPI_TransmitReceive+0x11c>
 80058d8:	e082      	b.n	80059e0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_TransmitReceive+0x1f4>
 80058e2:	8afb      	ldrh	r3, [r7, #22]
 80058e4:	2b01      	cmp	r3, #1
 80058e6:	d171      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	330c      	adds	r3, #12
 80058f2:	7812      	ldrb	r2, [r2, #0]
 80058f4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058fa:	1c5a      	adds	r2, r3, #1
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005904:	b29b      	uxth	r3, r3
 8005906:	3b01      	subs	r3, #1
 8005908:	b29a      	uxth	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800590e:	e05d      	b.n	80059cc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	f003 0302 	and.w	r3, r3, #2
 800591a:	2b02      	cmp	r3, #2
 800591c:	d11c      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x264>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005922:	b29b      	uxth	r3, r3
 8005924:	2b00      	cmp	r3, #0
 8005926:	d017      	beq.n	8005958 <HAL_SPI_TransmitReceive+0x264>
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	2b01      	cmp	r3, #1
 800592c:	d114      	bne.n	8005958 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	330c      	adds	r3, #12
 8005938:	7812      	ldrb	r2, [r2, #0]
 800593a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005940:	1c5a      	adds	r2, r3, #1
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800594a:	b29b      	uxth	r3, r3
 800594c:	3b01      	subs	r3, #1
 800594e:	b29a      	uxth	r2, r3
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005954:	2300      	movs	r3, #0
 8005956:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d119      	bne.n	800599a <HAL_SPI_TransmitReceive+0x2a6>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800596a:	b29b      	uxth	r3, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	d014      	beq.n	800599a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005982:	1c5a      	adds	r2, r3, #1
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800598c:	b29b      	uxth	r3, r3
 800598e:	3b01      	subs	r3, #1
 8005990:	b29a      	uxth	r2, r3
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005996:	2301      	movs	r3, #1
 8005998:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800599a:	f7fc fed1 	bl	8002740 <HAL_GetTick>
 800599e:	4602      	mov	r2, r0
 80059a0:	6a3b      	ldr	r3, [r7, #32]
 80059a2:	1ad3      	subs	r3, r2, r3
 80059a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d803      	bhi.n	80059b2 <HAL_SPI_TransmitReceive+0x2be>
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80059b0:	d102      	bne.n	80059b8 <HAL_SPI_TransmitReceive+0x2c4>
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d109      	bne.n	80059cc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2201      	movs	r2, #1
 80059bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2200      	movs	r2, #0
 80059c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80059c8:	2303      	movs	r3, #3
 80059ca:	e038      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059d0:	b29b      	uxth	r3, r3
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d19c      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x21c>
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80059da:	b29b      	uxth	r3, r3
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d197      	bne.n	8005910 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80059e0:	6a3a      	ldr	r2, [r7, #32]
 80059e2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fa65 	bl	8005eb4 <SPI_EndRxTxTransaction>
 80059ea:	4603      	mov	r3, r0
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d008      	beq.n	8005a02 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2220      	movs	r2, #32
 80059f4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e01d      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	689b      	ldr	r3, [r3, #8]
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d10a      	bne.n	8005a20 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	613b      	str	r3, [r7, #16]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	613b      	str	r3, [r7, #16]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	613b      	str	r3, [r7, #16]
 8005a1e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2201      	movs	r2, #1
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d001      	beq.n	8005a3c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8005a38:	2301      	movs	r3, #1
 8005a3a:	e000      	b.n	8005a3e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8005a3c:	2300      	movs	r3, #0
  }
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	3728      	adds	r7, #40	@ 0x28
 8005a42:	46bd      	mov	sp, r7
 8005a44:	bd80      	pop	{r7, pc}
	...

08005a48 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8005a48:	b580      	push	{r7, lr}
 8005a4a:	b084      	sub	sp, #16
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	60f8      	str	r0, [r7, #12]
 8005a50:	60b9      	str	r1, [r7, #8]
 8005a52:	4613      	mov	r3, r2
 8005a54:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d001      	beq.n	8005a66 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8005a62:	2302      	movs	r3, #2
 8005a64:	e097      	b.n	8005b96 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d002      	beq.n	8005a72 <HAL_SPI_Transmit_DMA+0x2a>
 8005a6c:	88fb      	ldrh	r3, [r7, #6]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d101      	bne.n	8005a76 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8005a72:	2301      	movs	r3, #1
 8005a74:	e08f      	b.n	8005b96 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_SPI_Transmit_DMA+0x3c>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e088      	b.n	8005b96 <HAL_SPI_Transmit_DMA+0x14e>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2203      	movs	r2, #3
 8005a90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2200      	movs	r2, #0
 8005a98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	88fa      	ldrh	r2, [r7, #6]
 8005aa4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	88fa      	ldrh	r2, [r7, #6]
 8005aaa:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2200      	movs	r2, #0
 8005ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005ad2:	d10f      	bne.n	8005af4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681a      	ldr	r2, [r3, #0]
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ae2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005af2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005af8:	4a29      	ldr	r2, [pc, #164]	@ (8005ba0 <HAL_SPI_Transmit_DMA+0x158>)
 8005afa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b00:	4a28      	ldr	r2, [pc, #160]	@ (8005ba4 <HAL_SPI_Transmit_DMA+0x15c>)
 8005b02:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b08:	4a27      	ldr	r2, [pc, #156]	@ (8005ba8 <HAL_SPI_Transmit_DMA+0x160>)
 8005b0a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005b10:	2200      	movs	r2, #0
 8005b12:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b1c:	4619      	mov	r1, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	330c      	adds	r3, #12
 8005b24:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8005b2c:	f7fc fff8 	bl	8002b20 <HAL_DMA_Start_IT>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d00b      	beq.n	8005b4e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b3a:	f043 0210 	orr.w	r2, r3, #16
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8005b4a:	2301      	movs	r3, #1
 8005b4c:	e023      	b.n	8005b96 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005b58:	2b40      	cmp	r3, #64	@ 0x40
 8005b5a:	d007      	beq.n	8005b6c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005b6a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	685a      	ldr	r2, [r3, #4]
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f042 0220 	orr.w	r2, r2, #32
 8005b82:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685a      	ldr	r2, [r3, #4]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0202 	orr.w	r2, r2, #2
 8005b92:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}
 8005b9e:	bf00      	nop
 8005ba0:	08005c7d 	.word	0x08005c7d
 8005ba4:	08005bd5 	.word	0x08005bd5
 8005ba8:	08005c99 	.word	0x08005c99

08005bac <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8005bac:	b480      	push	{r7}
 8005bae:	b083      	sub	sp, #12
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8005bb4:	bf00      	nop
 8005bb6:	370c      	adds	r7, #12
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005bc0:	b480      	push	{r7}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005bc8:	bf00      	nop
 8005bca:	370c      	adds	r7, #12
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd2:	4770      	bx	lr

08005bd4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b086      	sub	sp, #24
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005be0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005be2:	f7fc fdad 	bl	8002740 <HAL_GetTick>
 8005be6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bf2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005bf6:	d03b      	beq.n	8005c70 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	685a      	ldr	r2, [r3, #4]
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	f022 0220 	bic.w	r2, r2, #32
 8005c06:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8005c08:	697b      	ldr	r3, [r7, #20]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	685a      	ldr	r2, [r3, #4]
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f022 0202 	bic.w	r2, r2, #2
 8005c16:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	2164      	movs	r1, #100	@ 0x64
 8005c1c:	6978      	ldr	r0, [r7, #20]
 8005c1e:	f000 f949 	bl	8005eb4 <SPI_EndRxTxTransaction>
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d005      	beq.n	8005c34 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c2c:	f043 0220 	orr.w	r2, r3, #32
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10a      	bne.n	8005c52 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c3c:	2300      	movs	r3, #0
 8005c3e:	60fb      	str	r3, [r7, #12]
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	689b      	ldr	r3, [r3, #8]
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	2200      	movs	r2, #0
 8005c56:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d003      	beq.n	8005c70 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8005c68:	6978      	ldr	r0, [r7, #20]
 8005c6a:	f7ff ffa9 	bl	8005bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8005c6e:	e002      	b.n	8005c76 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8005c70:	6978      	ldr	r0, [r7, #20]
 8005c72:	f7fb fddd 	bl	8001830 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c76:	3718      	adds	r7, #24
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c88:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8005c8a:	68f8      	ldr	r0, [r7, #12]
 8005c8c:	f7ff ff8e 	bl	8005bac <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005c90:	bf00      	nop
 8005c92:	3710      	adds	r7, #16
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b084      	sub	sp, #16
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ca4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	685a      	ldr	r2, [r3, #4]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f022 0203 	bic.w	r2, r2, #3
 8005cb4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005cba:	f043 0210 	orr.w	r2, r3, #16
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2201      	movs	r2, #1
 8005cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	f7ff ff78 	bl	8005bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}

08005cd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b088      	sub	sp, #32
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	60f8      	str	r0, [r7, #12]
 8005ce0:	60b9      	str	r1, [r7, #8]
 8005ce2:	603b      	str	r3, [r7, #0]
 8005ce4:	4613      	mov	r3, r2
 8005ce6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005ce8:	f7fc fd2a 	bl	8002740 <HAL_GetTick>
 8005cec:	4602      	mov	r2, r0
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	1a9b      	subs	r3, r3, r2
 8005cf2:	683a      	ldr	r2, [r7, #0]
 8005cf4:	4413      	add	r3, r2
 8005cf6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005cf8:	f7fc fd22 	bl	8002740 <HAL_GetTick>
 8005cfc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005cfe:	4b39      	ldr	r3, [pc, #228]	@ (8005de4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	015b      	lsls	r3, r3, #5
 8005d04:	0d1b      	lsrs	r3, r3, #20
 8005d06:	69fa      	ldr	r2, [r7, #28]
 8005d08:	fb02 f303 	mul.w	r3, r2, r3
 8005d0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d0e:	e054      	b.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d16:	d050      	beq.n	8005dba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d18:	f7fc fd12 	bl	8002740 <HAL_GetTick>
 8005d1c:	4602      	mov	r2, r0
 8005d1e:	69bb      	ldr	r3, [r7, #24]
 8005d20:	1ad3      	subs	r3, r2, r3
 8005d22:	69fa      	ldr	r2, [r7, #28]
 8005d24:	429a      	cmp	r2, r3
 8005d26:	d902      	bls.n	8005d2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005d28:	69fb      	ldr	r3, [r7, #28]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d13d      	bne.n	8005daa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685a      	ldr	r2, [r3, #4]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005d3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	685b      	ldr	r3, [r3, #4]
 8005d42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d46:	d111      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	689b      	ldr	r3, [r3, #8]
 8005d4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d50:	d004      	beq.n	8005d5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	689b      	ldr	r3, [r3, #8]
 8005d56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d5a:	d107      	bne.n	8005d6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005d74:	d10f      	bne.n	8005d96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005d84:	601a      	str	r2, [r3, #0]
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005d94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e017      	b.n	8005dda <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d101      	bne.n	8005db4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005db0:	2300      	movs	r3, #0
 8005db2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	3b01      	subs	r3, #1
 8005db8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689a      	ldr	r2, [r3, #8]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	4013      	ands	r3, r2
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	429a      	cmp	r2, r3
 8005dc8:	bf0c      	ite	eq
 8005dca:	2301      	moveq	r3, #1
 8005dcc:	2300      	movne	r3, #0
 8005dce:	b2db      	uxtb	r3, r3
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	79fb      	ldrb	r3, [r7, #7]
 8005dd4:	429a      	cmp	r2, r3
 8005dd6:	d19b      	bne.n	8005d10 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005dd8:	2300      	movs	r3, #0
}
 8005dda:	4618      	mov	r0, r3
 8005ddc:	3720      	adds	r7, #32
 8005dde:	46bd      	mov	sp, r7
 8005de0:	bd80      	pop	{r7, pc}
 8005de2:	bf00      	nop
 8005de4:	20000000 	.word	0x20000000

08005de8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b086      	sub	sp, #24
 8005dec:	af02      	add	r7, sp, #8
 8005dee:	60f8      	str	r0, [r7, #12]
 8005df0:	60b9      	str	r1, [r7, #8]
 8005df2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005dfc:	d111      	bne.n	8005e22 <SPI_EndRxTransaction+0x3a>
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	689b      	ldr	r3, [r3, #8]
 8005e02:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005e06:	d004      	beq.n	8005e12 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	689b      	ldr	r3, [r3, #8]
 8005e0c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e10:	d107      	bne.n	8005e22 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681a      	ldr	r2, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005e20:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005e2a:	d12a      	bne.n	8005e82 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e34:	d012      	beq.n	8005e5c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	2180      	movs	r1, #128	@ 0x80
 8005e40:	68f8      	ldr	r0, [r7, #12]
 8005e42:	f7ff ff49 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d02d      	beq.n	8005ea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e50:	f043 0220 	orr.w	r2, r3, #32
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e58:	2303      	movs	r3, #3
 8005e5a:	e026      	b.n	8005eaa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	2200      	movs	r2, #0
 8005e64:	2101      	movs	r1, #1
 8005e66:	68f8      	ldr	r0, [r7, #12]
 8005e68:	f7ff ff36 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d01a      	beq.n	8005ea8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e76:	f043 0220 	orr.w	r2, r3, #32
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e013      	b.n	8005eaa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	9300      	str	r3, [sp, #0]
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	2200      	movs	r2, #0
 8005e8a:	2101      	movs	r1, #1
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f7ff ff23 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005e92:	4603      	mov	r3, r0
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d007      	beq.n	8005ea8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005e9c:	f043 0220 	orr.w	r2, r3, #32
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005ea4:	2303      	movs	r3, #3
 8005ea6:	e000      	b.n	8005eaa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
}
 8005eaa:	4618      	mov	r0, r3
 8005eac:	3710      	adds	r7, #16
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	bd80      	pop	{r7, pc}
	...

08005eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b088      	sub	sp, #32
 8005eb8:	af02      	add	r7, sp, #8
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	9300      	str	r3, [sp, #0]
 8005ec4:	68bb      	ldr	r3, [r7, #8]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	2102      	movs	r1, #2
 8005eca:	68f8      	ldr	r0, [r7, #12]
 8005ecc:	f7ff ff04 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d007      	beq.n	8005ee6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005eda:	f043 0220 	orr.w	r2, r3, #32
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005ee2:	2303      	movs	r3, #3
 8005ee4:	e032      	b.n	8005f4c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ee6:	4b1b      	ldr	r3, [pc, #108]	@ (8005f54 <SPI_EndRxTxTransaction+0xa0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4a1b      	ldr	r2, [pc, #108]	@ (8005f58 <SPI_EndRxTxTransaction+0xa4>)
 8005eec:	fba2 2303 	umull	r2, r3, r2, r3
 8005ef0:	0d5b      	lsrs	r3, r3, #21
 8005ef2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005ef6:	fb02 f303 	mul.w	r3, r2, r3
 8005efa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	685b      	ldr	r3, [r3, #4]
 8005f00:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005f04:	d112      	bne.n	8005f2c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	9300      	str	r3, [sp, #0]
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	2180      	movs	r1, #128	@ 0x80
 8005f10:	68f8      	ldr	r0, [r7, #12]
 8005f12:	f7ff fee1 	bl	8005cd8 <SPI_WaitFlagStateUntilTimeout>
 8005f16:	4603      	mov	r3, r0
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d016      	beq.n	8005f4a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005f28:	2303      	movs	r3, #3
 8005f2a:	e00f      	b.n	8005f4c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d00a      	beq.n	8005f48 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005f32:	697b      	ldr	r3, [r7, #20]
 8005f34:	3b01      	subs	r3, #1
 8005f36:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f42:	2b80      	cmp	r3, #128	@ 0x80
 8005f44:	d0f2      	beq.n	8005f2c <SPI_EndRxTxTransaction+0x78>
 8005f46:	e000      	b.n	8005f4a <SPI_EndRxTxTransaction+0x96>
        break;
 8005f48:	bf00      	nop
  }

  return HAL_OK;
 8005f4a:	2300      	movs	r3, #0
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3718      	adds	r7, #24
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000000 	.word	0x20000000
 8005f58:	165e9f81 	.word	0x165e9f81

08005f5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e041      	b.n	8005ff2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fb f968 	bl	8001258 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2202      	movs	r2, #2
 8005f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4619      	mov	r1, r3
 8005f9a:	4610      	mov	r0, r2
 8005f9c:	f000 fd6a 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2201      	movs	r2, #1
 8005fd4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ff0:	2300      	movs	r3, #0
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3708      	adds	r7, #8
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}

08005ffa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b082      	sub	sp, #8
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2b00      	cmp	r3, #0
 8006006:	d101      	bne.n	800600c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e041      	b.n	8006090 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006012:	b2db      	uxtb	r3, r3
 8006014:	2b00      	cmp	r3, #0
 8006016:	d106      	bne.n	8006026 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f839 	bl	8006098 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2202      	movs	r2, #2
 800602a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	3304      	adds	r3, #4
 8006036:	4619      	mov	r1, r3
 8006038:	4610      	mov	r0, r2
 800603a:	f000 fd1b 	bl	8006a74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2201      	movs	r2, #1
 8006042:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2201      	movs	r2, #1
 800604a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2201      	movs	r2, #1
 8006052:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2201      	movs	r2, #1
 800605a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2201      	movs	r2, #1
 8006062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2201      	movs	r2, #1
 800606a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2201      	movs	r2, #1
 8006072:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2201      	movs	r2, #1
 800607a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2201      	movs	r2, #1
 8006082:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800608e:	2300      	movs	r3, #0
}
 8006090:	4618      	mov	r0, r3
 8006092:	3708      	adds	r7, #8
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}

08006098 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006098:	b480      	push	{r7}
 800609a:	b083      	sub	sp, #12
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80060a0:	bf00      	nop
 80060a2:	370c      	adds	r7, #12
 80060a4:	46bd      	mov	sp, r7
 80060a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060aa:	4770      	bx	lr

080060ac <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b086      	sub	sp, #24
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	60f8      	str	r0, [r7, #12]
 80060b4:	60b9      	str	r1, [r7, #8]
 80060b6:	607a      	str	r2, [r7, #4]
 80060b8:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80060ba:	2300      	movs	r3, #0
 80060bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d109      	bne.n	80060d8 <HAL_TIM_PWM_Start_DMA+0x2c>
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	bf0c      	ite	eq
 80060d0:	2301      	moveq	r3, #1
 80060d2:	2300      	movne	r3, #0
 80060d4:	b2db      	uxtb	r3, r3
 80060d6:	e022      	b.n	800611e <HAL_TIM_PWM_Start_DMA+0x72>
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2b04      	cmp	r3, #4
 80060dc:	d109      	bne.n	80060f2 <HAL_TIM_PWM_Start_DMA+0x46>
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	bf0c      	ite	eq
 80060ea:	2301      	moveq	r3, #1
 80060ec:	2300      	movne	r3, #0
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	e015      	b.n	800611e <HAL_TIM_PWM_Start_DMA+0x72>
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	2b08      	cmp	r3, #8
 80060f6:	d109      	bne.n	800610c <HAL_TIM_PWM_Start_DMA+0x60>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	2b02      	cmp	r3, #2
 8006102:	bf0c      	ite	eq
 8006104:	2301      	moveq	r3, #1
 8006106:	2300      	movne	r3, #0
 8006108:	b2db      	uxtb	r3, r3
 800610a:	e008      	b.n	800611e <HAL_TIM_PWM_Start_DMA+0x72>
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006112:	b2db      	uxtb	r3, r3
 8006114:	2b02      	cmp	r3, #2
 8006116:	bf0c      	ite	eq
 8006118:	2301      	moveq	r3, #1
 800611a:	2300      	movne	r3, #0
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006122:	2302      	movs	r3, #2
 8006124:	e15d      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d109      	bne.n	8006140 <HAL_TIM_PWM_Start_DMA+0x94>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006132:	b2db      	uxtb	r3, r3
 8006134:	2b01      	cmp	r3, #1
 8006136:	bf0c      	ite	eq
 8006138:	2301      	moveq	r3, #1
 800613a:	2300      	movne	r3, #0
 800613c:	b2db      	uxtb	r3, r3
 800613e:	e022      	b.n	8006186 <HAL_TIM_PWM_Start_DMA+0xda>
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	2b04      	cmp	r3, #4
 8006144:	d109      	bne.n	800615a <HAL_TIM_PWM_Start_DMA+0xae>
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b01      	cmp	r3, #1
 8006150:	bf0c      	ite	eq
 8006152:	2301      	moveq	r3, #1
 8006154:	2300      	movne	r3, #0
 8006156:	b2db      	uxtb	r3, r3
 8006158:	e015      	b.n	8006186 <HAL_TIM_PWM_Start_DMA+0xda>
 800615a:	68bb      	ldr	r3, [r7, #8]
 800615c:	2b08      	cmp	r3, #8
 800615e:	d109      	bne.n	8006174 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b01      	cmp	r3, #1
 800616a:	bf0c      	ite	eq
 800616c:	2301      	moveq	r3, #1
 800616e:	2300      	movne	r3, #0
 8006170:	b2db      	uxtb	r3, r3
 8006172:	e008      	b.n	8006186 <HAL_TIM_PWM_Start_DMA+0xda>
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800617a:	b2db      	uxtb	r3, r3
 800617c:	2b01      	cmp	r3, #1
 800617e:	bf0c      	ite	eq
 8006180:	2301      	moveq	r3, #1
 8006182:	2300      	movne	r3, #0
 8006184:	b2db      	uxtb	r3, r3
 8006186:	2b00      	cmp	r3, #0
 8006188:	d024      	beq.n	80061d4 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d002      	beq.n	8006196 <HAL_TIM_PWM_Start_DMA+0xea>
 8006190:	887b      	ldrh	r3, [r7, #2]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d101      	bne.n	800619a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006196:	2301      	movs	r3, #1
 8006198:	e123      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d104      	bne.n	80061aa <HAL_TIM_PWM_Start_DMA+0xfe>
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2202      	movs	r2, #2
 80061a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80061a8:	e016      	b.n	80061d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	2b04      	cmp	r3, #4
 80061ae:	d104      	bne.n	80061ba <HAL_TIM_PWM_Start_DMA+0x10e>
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	2202      	movs	r2, #2
 80061b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80061b8:	e00e      	b.n	80061d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061ba:	68bb      	ldr	r3, [r7, #8]
 80061bc:	2b08      	cmp	r3, #8
 80061be:	d104      	bne.n	80061ca <HAL_TIM_PWM_Start_DMA+0x11e>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2202      	movs	r2, #2
 80061c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80061c8:	e006      	b.n	80061d8 <HAL_TIM_PWM_Start_DMA+0x12c>
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	2202      	movs	r2, #2
 80061ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80061d2:	e001      	b.n	80061d8 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80061d4:	2301      	movs	r3, #1
 80061d6:	e104      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80061d8:	68bb      	ldr	r3, [r7, #8]
 80061da:	2b0c      	cmp	r3, #12
 80061dc:	f200 80ae 	bhi.w	800633c <HAL_TIM_PWM_Start_DMA+0x290>
 80061e0:	a201      	add	r2, pc, #4	@ (adr r2, 80061e8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80061e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061e6:	bf00      	nop
 80061e8:	0800621d 	.word	0x0800621d
 80061ec:	0800633d 	.word	0x0800633d
 80061f0:	0800633d 	.word	0x0800633d
 80061f4:	0800633d 	.word	0x0800633d
 80061f8:	08006265 	.word	0x08006265
 80061fc:	0800633d 	.word	0x0800633d
 8006200:	0800633d 	.word	0x0800633d
 8006204:	0800633d 	.word	0x0800633d
 8006208:	080062ad 	.word	0x080062ad
 800620c:	0800633d 	.word	0x0800633d
 8006210:	0800633d 	.word	0x0800633d
 8006214:	0800633d 	.word	0x0800633d
 8006218:	080062f5 	.word	0x080062f5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006220:	4a72      	ldr	r2, [pc, #456]	@ (80063ec <HAL_TIM_PWM_Start_DMA+0x340>)
 8006222:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006228:	4a71      	ldr	r2, [pc, #452]	@ (80063f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800622a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006230:	4a70      	ldr	r2, [pc, #448]	@ (80063f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006232:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006238:	6879      	ldr	r1, [r7, #4]
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3334      	adds	r3, #52	@ 0x34
 8006240:	461a      	mov	r2, r3
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	f7fc fc6c 	bl	8002b20 <HAL_DMA_Start_IT>
 8006248:	4603      	mov	r3, r0
 800624a:	2b00      	cmp	r3, #0
 800624c:	d001      	beq.n	8006252 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800624e:	2301      	movs	r3, #1
 8006250:	e0c7      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	68da      	ldr	r2, [r3, #12]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006260:	60da      	str	r2, [r3, #12]
      break;
 8006262:	e06e      	b.n	8006342 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006268:	4a60      	ldr	r2, [pc, #384]	@ (80063ec <HAL_TIM_PWM_Start_DMA+0x340>)
 800626a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006270:	4a5f      	ldr	r2, [pc, #380]	@ (80063f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006272:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006278:	4a5e      	ldr	r2, [pc, #376]	@ (80063f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800627a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006280:	6879      	ldr	r1, [r7, #4]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	3338      	adds	r3, #56	@ 0x38
 8006288:	461a      	mov	r2, r3
 800628a:	887b      	ldrh	r3, [r7, #2]
 800628c:	f7fc fc48 	bl	8002b20 <HAL_DMA_Start_IT>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d001      	beq.n	800629a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006296:	2301      	movs	r3, #1
 8006298:	e0a3      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68da      	ldr	r2, [r3, #12]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80062a8:	60da      	str	r2, [r3, #12]
      break;
 80062aa:	e04a      	b.n	8006342 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b0:	4a4e      	ldr	r2, [pc, #312]	@ (80063ec <HAL_TIM_PWM_Start_DMA+0x340>)
 80062b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b8:	4a4d      	ldr	r2, [pc, #308]	@ (80063f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80062ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062c0:	4a4c      	ldr	r2, [pc, #304]	@ (80063f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80062c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80062c8:	6879      	ldr	r1, [r7, #4]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	333c      	adds	r3, #60	@ 0x3c
 80062d0:	461a      	mov	r2, r3
 80062d2:	887b      	ldrh	r3, [r7, #2]
 80062d4:	f7fc fc24 	bl	8002b20 <HAL_DMA_Start_IT>
 80062d8:	4603      	mov	r3, r0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80062de:	2301      	movs	r3, #1
 80062e0:	e07f      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	68da      	ldr	r2, [r3, #12]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062f0:	60da      	str	r2, [r3, #12]
      break;
 80062f2:	e026      	b.n	8006342 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f8:	4a3c      	ldr	r2, [pc, #240]	@ (80063ec <HAL_TIM_PWM_Start_DMA+0x340>)
 80062fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006300:	4a3b      	ldr	r2, [pc, #236]	@ (80063f0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8006302:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006308:	4a3a      	ldr	r2, [pc, #232]	@ (80063f4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800630a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006310:	6879      	ldr	r1, [r7, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	3340      	adds	r3, #64	@ 0x40
 8006318:	461a      	mov	r2, r3
 800631a:	887b      	ldrh	r3, [r7, #2]
 800631c:	f7fc fc00 	bl	8002b20 <HAL_DMA_Start_IT>
 8006320:	4603      	mov	r3, r0
 8006322:	2b00      	cmp	r3, #0
 8006324:	d001      	beq.n	800632a <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	e05b      	b.n	80063e2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68da      	ldr	r2, [r3, #12]
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006338:	60da      	str	r2, [r3, #12]
      break;
 800633a:	e002      	b.n	8006342 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 800633c:	2301      	movs	r3, #1
 800633e:	75fb      	strb	r3, [r7, #23]
      break;
 8006340:	bf00      	nop
  }

  if (status == HAL_OK)
 8006342:	7dfb      	ldrb	r3, [r7, #23]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d14b      	bne.n	80063e0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2201      	movs	r2, #1
 800634e:	68b9      	ldr	r1, [r7, #8]
 8006350:	4618      	mov	r0, r3
 8006352:	f000 fe41 	bl	8006fd8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	4a27      	ldr	r2, [pc, #156]	@ (80063f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d107      	bne.n	8006370 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800636e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a20      	ldr	r2, [pc, #128]	@ (80063f8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d018      	beq.n	80063ac <HAL_TIM_PWM_Start_DMA+0x300>
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006382:	d013      	beq.n	80063ac <HAL_TIM_PWM_Start_DMA+0x300>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	4a1c      	ldr	r2, [pc, #112]	@ (80063fc <HAL_TIM_PWM_Start_DMA+0x350>)
 800638a:	4293      	cmp	r3, r2
 800638c:	d00e      	beq.n	80063ac <HAL_TIM_PWM_Start_DMA+0x300>
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	4a1b      	ldr	r2, [pc, #108]	@ (8006400 <HAL_TIM_PWM_Start_DMA+0x354>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d009      	beq.n	80063ac <HAL_TIM_PWM_Start_DMA+0x300>
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4a19      	ldr	r2, [pc, #100]	@ (8006404 <HAL_TIM_PWM_Start_DMA+0x358>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d004      	beq.n	80063ac <HAL_TIM_PWM_Start_DMA+0x300>
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	4a18      	ldr	r2, [pc, #96]	@ (8006408 <HAL_TIM_PWM_Start_DMA+0x35c>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d111      	bne.n	80063d0 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	2b06      	cmp	r3, #6
 80063bc:	d010      	beq.n	80063e0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f042 0201 	orr.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063ce:	e007      	b.n	80063e0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f042 0201 	orr.w	r2, r2, #1
 80063de:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80063e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80063e2:	4618      	mov	r0, r3
 80063e4:	3718      	adds	r7, #24
 80063e6:	46bd      	mov	sp, r7
 80063e8:	bd80      	pop	{r7, pc}
 80063ea:	bf00      	nop
 80063ec:	08006965 	.word	0x08006965
 80063f0:	08006a0d 	.word	0x08006a0d
 80063f4:	080068d3 	.word	0x080068d3
 80063f8:	40010000 	.word	0x40010000
 80063fc:	40000400 	.word	0x40000400
 8006400:	40000800 	.word	0x40000800
 8006404:	40000c00 	.word	0x40000c00
 8006408:	40014000 	.word	0x40014000

0800640c <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006416:	2300      	movs	r3, #0
 8006418:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b0c      	cmp	r3, #12
 800641e:	d855      	bhi.n	80064cc <HAL_TIM_PWM_Stop_DMA+0xc0>
 8006420:	a201      	add	r2, pc, #4	@ (adr r2, 8006428 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8006422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006426:	bf00      	nop
 8006428:	0800645d 	.word	0x0800645d
 800642c:	080064cd 	.word	0x080064cd
 8006430:	080064cd 	.word	0x080064cd
 8006434:	080064cd 	.word	0x080064cd
 8006438:	08006479 	.word	0x08006479
 800643c:	080064cd 	.word	0x080064cd
 8006440:	080064cd 	.word	0x080064cd
 8006444:	080064cd 	.word	0x080064cd
 8006448:	08006495 	.word	0x08006495
 800644c:	080064cd 	.word	0x080064cd
 8006450:	080064cd 	.word	0x080064cd
 8006454:	080064cd 	.word	0x080064cd
 8006458:	080064b1 	.word	0x080064b1
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68da      	ldr	r2, [r3, #12]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800646a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006470:	4618      	mov	r0, r3
 8006472:	f7fc fbad 	bl	8002bd0 <HAL_DMA_Abort_IT>
      break;
 8006476:	e02c      	b.n	80064d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68da      	ldr	r2, [r3, #12]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006486:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800648c:	4618      	mov	r0, r3
 800648e:	f7fc fb9f 	bl	8002bd0 <HAL_DMA_Abort_IT>
      break;
 8006492:	e01e      	b.n	80064d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	68da      	ldr	r2, [r3, #12]
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80064a2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064a8:	4618      	mov	r0, r3
 80064aa:	f7fc fb91 	bl	8002bd0 <HAL_DMA_Abort_IT>
      break;
 80064ae:	e010      	b.n	80064d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	68da      	ldr	r2, [r3, #12]
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80064be:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064c4:	4618      	mov	r0, r3
 80064c6:	f7fc fb83 	bl	8002bd0 <HAL_DMA_Abort_IT>
      break;
 80064ca:	e002      	b.n	80064d2 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80064cc:	2301      	movs	r3, #1
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	bf00      	nop
  }

  if (status == HAL_OK)
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d157      	bne.n	8006588 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2200      	movs	r2, #0
 80064de:	6839      	ldr	r1, [r7, #0]
 80064e0:	4618      	mov	r0, r3
 80064e2:	f000 fd79 	bl	8006fd8 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	4a2a      	ldr	r2, [pc, #168]	@ (8006594 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d117      	bne.n	8006520 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	6a1a      	ldr	r2, [r3, #32]
 80064f6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80064fa:	4013      	ands	r3, r2
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10f      	bne.n	8006520 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	6a1a      	ldr	r2, [r3, #32]
 8006506:	f240 4344 	movw	r3, #1092	@ 0x444
 800650a:	4013      	ands	r3, r2
 800650c:	2b00      	cmp	r3, #0
 800650e:	d107      	bne.n	8006520 <HAL_TIM_PWM_Stop_DMA+0x114>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800651e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f241 1311 	movw	r3, #4369	@ 0x1111
 800652a:	4013      	ands	r3, r2
 800652c:	2b00      	cmp	r3, #0
 800652e:	d10f      	bne.n	8006550 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	6a1a      	ldr	r2, [r3, #32]
 8006536:	f240 4344 	movw	r3, #1092	@ 0x444
 800653a:	4013      	ands	r3, r2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d107      	bne.n	8006550 <HAL_TIM_PWM_Stop_DMA+0x144>
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	681a      	ldr	r2, [r3, #0]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 0201 	bic.w	r2, r2, #1
 800654e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	d104      	bne.n	8006560 <HAL_TIM_PWM_Stop_DMA+0x154>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2201      	movs	r2, #1
 800655a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800655e:	e013      	b.n	8006588 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	2b04      	cmp	r3, #4
 8006564:	d104      	bne.n	8006570 <HAL_TIM_PWM_Stop_DMA+0x164>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2201      	movs	r2, #1
 800656a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800656e:	e00b      	b.n	8006588 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	2b08      	cmp	r3, #8
 8006574:	d104      	bne.n	8006580 <HAL_TIM_PWM_Stop_DMA+0x174>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800657e:	e003      	b.n	8006588 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8006588:	7bfb      	ldrb	r3, [r7, #15]
}
 800658a:	4618      	mov	r0, r3
 800658c:	3710      	adds	r7, #16
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	40010000 	.word	0x40010000

08006598 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b086      	sub	sp, #24
 800659c:	af00      	add	r7, sp, #0
 800659e:	60f8      	str	r0, [r7, #12]
 80065a0:	60b9      	str	r1, [r7, #8]
 80065a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065a4:	2300      	movs	r3, #0
 80065a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80065ae:	2b01      	cmp	r3, #1
 80065b0:	d101      	bne.n	80065b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80065b2:	2302      	movs	r3, #2
 80065b4:	e0ae      	b.n	8006714 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	2201      	movs	r2, #1
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2b0c      	cmp	r3, #12
 80065c2:	f200 809f 	bhi.w	8006704 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80065c6:	a201      	add	r2, pc, #4	@ (adr r2, 80065cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80065c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065cc:	08006601 	.word	0x08006601
 80065d0:	08006705 	.word	0x08006705
 80065d4:	08006705 	.word	0x08006705
 80065d8:	08006705 	.word	0x08006705
 80065dc:	08006641 	.word	0x08006641
 80065e0:	08006705 	.word	0x08006705
 80065e4:	08006705 	.word	0x08006705
 80065e8:	08006705 	.word	0x08006705
 80065ec:	08006683 	.word	0x08006683
 80065f0:	08006705 	.word	0x08006705
 80065f4:	08006705 	.word	0x08006705
 80065f8:	08006705 	.word	0x08006705
 80065fc:	080066c3 	.word	0x080066c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fac0 	bl	8006b8c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0208 	orr.w	r2, r2, #8
 800661a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0204 	bic.w	r2, r2, #4
 800662a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6999      	ldr	r1, [r3, #24]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691a      	ldr	r2, [r3, #16]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	430a      	orrs	r2, r1
 800663c:	619a      	str	r2, [r3, #24]
      break;
 800663e:	e064      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	68b9      	ldr	r1, [r7, #8]
 8006646:	4618      	mov	r0, r3
 8006648:	f000 fb06 	bl	8006c58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	699a      	ldr	r2, [r3, #24]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800665a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	699a      	ldr	r2, [r3, #24]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800666a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6999      	ldr	r1, [r3, #24]
 8006672:	68bb      	ldr	r3, [r7, #8]
 8006674:	691b      	ldr	r3, [r3, #16]
 8006676:	021a      	lsls	r2, r3, #8
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	619a      	str	r2, [r3, #24]
      break;
 8006680:	e043      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fb51 	bl	8006d30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f042 0208 	orr.w	r2, r2, #8
 800669c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0204 	bic.w	r2, r2, #4
 80066ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69d9      	ldr	r1, [r3, #28]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	691a      	ldr	r2, [r3, #16]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	430a      	orrs	r2, r1
 80066be:	61da      	str	r2, [r3, #28]
      break;
 80066c0:	e023      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fb9b 	bl	8006e04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	69da      	ldr	r2, [r3, #28]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	69da      	ldr	r2, [r3, #28]
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	69d9      	ldr	r1, [r3, #28]
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	691b      	ldr	r3, [r3, #16]
 80066f8:	021a      	lsls	r2, r3, #8
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	430a      	orrs	r2, r1
 8006700:	61da      	str	r2, [r3, #28]
      break;
 8006702:	e002      	b.n	800670a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006704:	2301      	movs	r3, #1
 8006706:	75fb      	strb	r3, [r7, #23]
      break;
 8006708:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	2200      	movs	r2, #0
 800670e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006712:	7dfb      	ldrb	r3, [r7, #23]
}
 8006714:	4618      	mov	r0, r3
 8006716:	3718      	adds	r7, #24
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006726:	2300      	movs	r3, #0
 8006728:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006730:	2b01      	cmp	r3, #1
 8006732:	d101      	bne.n	8006738 <HAL_TIM_ConfigClockSource+0x1c>
 8006734:	2302      	movs	r3, #2
 8006736:	e0b4      	b.n	80068a2 <HAL_TIM_ConfigClockSource+0x186>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	2201      	movs	r2, #1
 800673c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2202      	movs	r2, #2
 8006744:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	689b      	ldr	r3, [r3, #8]
 800674e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006756:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800675e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006770:	d03e      	beq.n	80067f0 <HAL_TIM_ConfigClockSource+0xd4>
 8006772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006776:	f200 8087 	bhi.w	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 800677a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800677e:	f000 8086 	beq.w	800688e <HAL_TIM_ConfigClockSource+0x172>
 8006782:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006786:	d87f      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b70      	cmp	r3, #112	@ 0x70
 800678a:	d01a      	beq.n	80067c2 <HAL_TIM_ConfigClockSource+0xa6>
 800678c:	2b70      	cmp	r3, #112	@ 0x70
 800678e:	d87b      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b60      	cmp	r3, #96	@ 0x60
 8006792:	d050      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x11a>
 8006794:	2b60      	cmp	r3, #96	@ 0x60
 8006796:	d877      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 8006798:	2b50      	cmp	r3, #80	@ 0x50
 800679a:	d03c      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0xfa>
 800679c:	2b50      	cmp	r3, #80	@ 0x50
 800679e:	d873      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 80067a0:	2b40      	cmp	r3, #64	@ 0x40
 80067a2:	d058      	beq.n	8006856 <HAL_TIM_ConfigClockSource+0x13a>
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	d86f      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 80067a8:	2b30      	cmp	r3, #48	@ 0x30
 80067aa:	d064      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x15a>
 80067ac:	2b30      	cmp	r3, #48	@ 0x30
 80067ae:	d86b      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 80067b0:	2b20      	cmp	r3, #32
 80067b2:	d060      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x15a>
 80067b4:	2b20      	cmp	r3, #32
 80067b6:	d867      	bhi.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d05c      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x15a>
 80067bc:	2b10      	cmp	r3, #16
 80067be:	d05a      	beq.n	8006876 <HAL_TIM_ConfigClockSource+0x15a>
 80067c0:	e062      	b.n	8006888 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067d2:	f000 fbe1 	bl	8006f98 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68ba      	ldr	r2, [r7, #8]
 80067ec:	609a      	str	r2, [r3, #8]
      break;
 80067ee:	e04f      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067f4:	683b      	ldr	r3, [r7, #0]
 80067f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006800:	f000 fbca 	bl	8006f98 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006812:	609a      	str	r2, [r3, #8]
      break;
 8006814:	e03c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	461a      	mov	r2, r3
 8006824:	f000 fb3e 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2150      	movs	r1, #80	@ 0x50
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fb97 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006834:	e02c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800683e:	683b      	ldr	r3, [r7, #0]
 8006840:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006842:	461a      	mov	r2, r3
 8006844:	f000 fb5d 	bl	8006f02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2160      	movs	r1, #96	@ 0x60
 800684e:	4618      	mov	r0, r3
 8006850:	f000 fb87 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006854:	e01c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800685a:	683b      	ldr	r3, [r7, #0]
 800685c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006862:	461a      	mov	r2, r3
 8006864:	f000 fb1e 	bl	8006ea4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2140      	movs	r1, #64	@ 0x40
 800686e:	4618      	mov	r0, r3
 8006870:	f000 fb77 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006874:	e00c      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	4619      	mov	r1, r3
 8006880:	4610      	mov	r0, r2
 8006882:	f000 fb6e 	bl	8006f62 <TIM_ITRx_SetConfig>
      break;
 8006886:	e003      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006888:	2301      	movs	r3, #1
 800688a:	73fb      	strb	r3, [r7, #15]
      break;
 800688c:	e000      	b.n	8006890 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800688e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2201      	movs	r2, #1
 8006894:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3710      	adds	r7, #16
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}

080068aa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d2:	b580      	push	{r7, lr}
 80068d4:	b084      	sub	sp, #16
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068de:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068e4:	687a      	ldr	r2, [r7, #4]
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d107      	bne.n	80068fa <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2201      	movs	r2, #1
 80068ee:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2201      	movs	r2, #1
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80068f8:	e02a      	b.n	8006950 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	429a      	cmp	r2, r3
 8006902:	d107      	bne.n	8006914 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2202      	movs	r2, #2
 8006908:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006912:	e01d      	b.n	8006950 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	429a      	cmp	r2, r3
 800691c:	d107      	bne.n	800692e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2204      	movs	r2, #4
 8006922:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2201      	movs	r2, #1
 8006928:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800692c:	e010      	b.n	8006950 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006932:	687a      	ldr	r2, [r7, #4]
 8006934:	429a      	cmp	r2, r3
 8006936:	d107      	bne.n	8006948 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	2208      	movs	r2, #8
 800693c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006946:	e003      	b.n	8006950 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2201      	movs	r2, #1
 800694c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f7ff ffb4 	bl	80068be <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	2200      	movs	r2, #0
 800695a:	771a      	strb	r2, [r3, #28]
}
 800695c:	bf00      	nop
 800695e:	3710      	adds	r7, #16
 8006960:	46bd      	mov	sp, r7
 8006962:	bd80      	pop	{r7, pc}

08006964 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006970:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	687a      	ldr	r2, [r7, #4]
 8006978:	429a      	cmp	r2, r3
 800697a:	d10b      	bne.n	8006994 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2201      	movs	r2, #1
 8006980:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2b00      	cmp	r3, #0
 8006988:	d136      	bne.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006992:	e031      	b.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	429a      	cmp	r2, r3
 800699c:	d10b      	bne.n	80069b6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2202      	movs	r2, #2
 80069a2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	69db      	ldr	r3, [r3, #28]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d125      	bne.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069b4:	e020      	b.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069ba:	687a      	ldr	r2, [r7, #4]
 80069bc:	429a      	cmp	r2, r3
 80069be:	d10b      	bne.n	80069d8 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2204      	movs	r2, #4
 80069c4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d114      	bne.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2201      	movs	r2, #1
 80069d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80069d6:	e00f      	b.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	429a      	cmp	r2, r3
 80069e0:	d10a      	bne.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2208      	movs	r2, #8
 80069e6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	69db      	ldr	r3, [r3, #28]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f7fa f90d 	bl	8000c18 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	771a      	strb	r2, [r3, #28]
}
 8006a04:	bf00      	nop
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b084      	sub	sp, #16
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a18:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d103      	bne.n	8006a2c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2201      	movs	r2, #1
 8006a28:	771a      	strb	r2, [r3, #28]
 8006a2a:	e019      	b.n	8006a60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d103      	bne.n	8006a3e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2202      	movs	r2, #2
 8006a3a:	771a      	strb	r2, [r3, #28]
 8006a3c:	e010      	b.n	8006a60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d103      	bne.n	8006a50 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2204      	movs	r2, #4
 8006a4c:	771a      	strb	r2, [r3, #28]
 8006a4e:	e007      	b.n	8006a60 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006a54:	687a      	ldr	r2, [r7, #4]
 8006a56:	429a      	cmp	r2, r3
 8006a58:	d102      	bne.n	8006a60 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8006a60:	68f8      	ldr	r0, [r7, #12]
 8006a62:	f7ff ff22 	bl	80068aa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	2200      	movs	r2, #0
 8006a6a:	771a      	strb	r2, [r3, #28]
}
 8006a6c:	bf00      	nop
 8006a6e:	3710      	adds	r7, #16
 8006a70:	46bd      	mov	sp, r7
 8006a72:	bd80      	pop	{r7, pc}

08006a74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006a74:	b480      	push	{r7}
 8006a76:	b085      	sub	sp, #20
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
 8006a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a3a      	ldr	r2, [pc, #232]	@ (8006b70 <TIM_Base_SetConfig+0xfc>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_Base_SetConfig+0x38>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a92:	d00b      	beq.n	8006aac <TIM_Base_SetConfig+0x38>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a37      	ldr	r2, [pc, #220]	@ (8006b74 <TIM_Base_SetConfig+0x100>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_Base_SetConfig+0x38>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a36      	ldr	r2, [pc, #216]	@ (8006b78 <TIM_Base_SetConfig+0x104>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_Base_SetConfig+0x38>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a35      	ldr	r2, [pc, #212]	@ (8006b7c <TIM_Base_SetConfig+0x108>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d108      	bne.n	8006abe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4a2b      	ldr	r2, [pc, #172]	@ (8006b70 <TIM_Base_SetConfig+0xfc>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d01b      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006acc:	d017      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	4a28      	ldr	r2, [pc, #160]	@ (8006b74 <TIM_Base_SetConfig+0x100>)
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d013      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	4a27      	ldr	r2, [pc, #156]	@ (8006b78 <TIM_Base_SetConfig+0x104>)
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d00f      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	4a26      	ldr	r2, [pc, #152]	@ (8006b7c <TIM_Base_SetConfig+0x108>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d00b      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	4a25      	ldr	r2, [pc, #148]	@ (8006b80 <TIM_Base_SetConfig+0x10c>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d007      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	4a24      	ldr	r2, [pc, #144]	@ (8006b84 <TIM_Base_SetConfig+0x110>)
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d003      	beq.n	8006afe <TIM_Base_SetConfig+0x8a>
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	4a23      	ldr	r2, [pc, #140]	@ (8006b88 <TIM_Base_SetConfig+0x114>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d108      	bne.n	8006b10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006b04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006b06:	683b      	ldr	r3, [r7, #0]
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	68fa      	ldr	r2, [r7, #12]
 8006b0c:	4313      	orrs	r3, r2
 8006b0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	695b      	ldr	r3, [r3, #20]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689a      	ldr	r2, [r3, #8]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	681a      	ldr	r2, [r3, #0]
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	4a0e      	ldr	r2, [pc, #56]	@ (8006b70 <TIM_Base_SetConfig+0xfc>)
 8006b38:	4293      	cmp	r3, r2
 8006b3a:	d103      	bne.n	8006b44 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	691a      	ldr	r2, [r3, #16]
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	2201      	movs	r2, #1
 8006b48:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	f003 0301 	and.w	r3, r3, #1
 8006b52:	2b01      	cmp	r3, #1
 8006b54:	d105      	bne.n	8006b62 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	691b      	ldr	r3, [r3, #16]
 8006b5a:	f023 0201 	bic.w	r2, r3, #1
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	611a      	str	r2, [r3, #16]
  }
}
 8006b62:	bf00      	nop
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	40010000 	.word	0x40010000
 8006b74:	40000400 	.word	0x40000400
 8006b78:	40000800 	.word	0x40000800
 8006b7c:	40000c00 	.word	0x40000c00
 8006b80:	40014000 	.word	0x40014000
 8006b84:	40014400 	.word	0x40014400
 8006b88:	40014800 	.word	0x40014800

08006b8c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b087      	sub	sp, #28
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6a1b      	ldr	r3, [r3, #32]
 8006b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6a1b      	ldr	r3, [r3, #32]
 8006ba0:	f023 0201 	bic.w	r2, r3, #1
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	685b      	ldr	r3, [r3, #4]
 8006bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f023 0303 	bic.w	r3, r3, #3
 8006bc2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006bc4:	683b      	ldr	r3, [r7, #0]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68fa      	ldr	r2, [r7, #12]
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f023 0302 	bic.w	r3, r3, #2
 8006bd4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	689b      	ldr	r3, [r3, #8]
 8006bda:	697a      	ldr	r2, [r7, #20]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a1c      	ldr	r2, [pc, #112]	@ (8006c54 <TIM_OC1_SetConfig+0xc8>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d10c      	bne.n	8006c02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006be8:	697b      	ldr	r3, [r7, #20]
 8006bea:	f023 0308 	bic.w	r3, r3, #8
 8006bee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	68db      	ldr	r3, [r3, #12]
 8006bf4:	697a      	ldr	r2, [r7, #20]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f023 0304 	bic.w	r3, r3, #4
 8006c00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a13      	ldr	r2, [pc, #76]	@ (8006c54 <TIM_OC1_SetConfig+0xc8>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d111      	bne.n	8006c2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006c12:	693b      	ldr	r3, [r7, #16]
 8006c14:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	695b      	ldr	r3, [r3, #20]
 8006c1e:	693a      	ldr	r2, [r7, #16]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	693a      	ldr	r2, [r7, #16]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	693a      	ldr	r2, [r7, #16]
 8006c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	697a      	ldr	r2, [r7, #20]
 8006c46:	621a      	str	r2, [r3, #32]
}
 8006c48:	bf00      	nop
 8006c4a:	371c      	adds	r7, #28
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c52:	4770      	bx	lr
 8006c54:	40010000 	.word	0x40010000

08006c58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b087      	sub	sp, #28
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6a1b      	ldr	r3, [r3, #32]
 8006c6c:	f023 0210 	bic.w	r2, r3, #16
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	685b      	ldr	r3, [r3, #4]
 8006c78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006c86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006c8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c90:	683b      	ldr	r3, [r7, #0]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	021b      	lsls	r3, r3, #8
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	f023 0320 	bic.w	r3, r3, #32
 8006ca2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	011b      	lsls	r3, r3, #4
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	4313      	orrs	r3, r2
 8006cae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	4a1e      	ldr	r2, [pc, #120]	@ (8006d2c <TIM_OC2_SetConfig+0xd4>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10d      	bne.n	8006cd4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	697a      	ldr	r2, [r7, #20]
 8006cc8:	4313      	orrs	r3, r2
 8006cca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ccc:	697b      	ldr	r3, [r7, #20]
 8006cce:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cd2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	4a15      	ldr	r2, [pc, #84]	@ (8006d2c <TIM_OC2_SetConfig+0xd4>)
 8006cd8:	4293      	cmp	r3, r2
 8006cda:	d113      	bne.n	8006d04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006ce2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ce4:	693b      	ldr	r3, [r7, #16]
 8006ce6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006cea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	009b      	lsls	r3, r3, #2
 8006cf2:	693a      	ldr	r2, [r7, #16]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	699b      	ldr	r3, [r3, #24]
 8006cfc:	009b      	lsls	r3, r3, #2
 8006cfe:	693a      	ldr	r2, [r7, #16]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006d10:	683b      	ldr	r3, [r7, #0]
 8006d12:	685a      	ldr	r2, [r3, #4]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	697a      	ldr	r2, [r7, #20]
 8006d1c:	621a      	str	r2, [r3, #32]
}
 8006d1e:	bf00      	nop
 8006d20:	371c      	adds	r7, #28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d28:	4770      	bx	lr
 8006d2a:	bf00      	nop
 8006d2c:	40010000 	.word	0x40010000

08006d30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006d30:	b480      	push	{r7}
 8006d32:	b087      	sub	sp, #28
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6a1b      	ldr	r3, [r3, #32]
 8006d44:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	69db      	ldr	r3, [r3, #28]
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	f023 0303 	bic.w	r3, r3, #3
 8006d66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	4313      	orrs	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8006d78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	689b      	ldr	r3, [r3, #8]
 8006d7e:	021b      	lsls	r3, r3, #8
 8006d80:	697a      	ldr	r2, [r7, #20]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a1d      	ldr	r2, [pc, #116]	@ (8006e00 <TIM_OC3_SetConfig+0xd0>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d10d      	bne.n	8006daa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006d8e:	697b      	ldr	r3, [r7, #20]
 8006d90:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006d94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	68db      	ldr	r3, [r3, #12]
 8006d9a:	021b      	lsls	r3, r3, #8
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8006da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	4a14      	ldr	r2, [pc, #80]	@ (8006e00 <TIM_OC3_SetConfig+0xd0>)
 8006dae:	4293      	cmp	r3, r2
 8006db0:	d113      	bne.n	8006dda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006db2:	693b      	ldr	r3, [r7, #16]
 8006db4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	695b      	ldr	r3, [r3, #20]
 8006dc6:	011b      	lsls	r3, r3, #4
 8006dc8:	693a      	ldr	r2, [r7, #16]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	699b      	ldr	r3, [r3, #24]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	68fa      	ldr	r2, [r7, #12]
 8006de4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006de6:	683b      	ldr	r3, [r7, #0]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	621a      	str	r2, [r3, #32]
}
 8006df4:	bf00      	nop
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr
 8006e00:	40010000 	.word	0x40010000

08006e04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006e04:	b480      	push	{r7}
 8006e06:	b087      	sub	sp, #28
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	6078      	str	r0, [r7, #4]
 8006e0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a1b      	ldr	r3, [r3, #32]
 8006e18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	69db      	ldr	r3, [r3, #28]
 8006e2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006e32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006e3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	021b      	lsls	r3, r3, #8
 8006e42:	68fa      	ldr	r2, [r7, #12]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	689b      	ldr	r3, [r3, #8]
 8006e54:	031b      	lsls	r3, r3, #12
 8006e56:	693a      	ldr	r2, [r7, #16]
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	4a10      	ldr	r2, [pc, #64]	@ (8006ea0 <TIM_OC4_SetConfig+0x9c>)
 8006e60:	4293      	cmp	r3, r2
 8006e62:	d109      	bne.n	8006e78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8006e6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	019b      	lsls	r3, r3, #6
 8006e72:	697a      	ldr	r2, [r7, #20]
 8006e74:	4313      	orrs	r3, r2
 8006e76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	697a      	ldr	r2, [r7, #20]
 8006e7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	68fa      	ldr	r2, [r7, #12]
 8006e82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006e84:	683b      	ldr	r3, [r7, #0]
 8006e86:	685a      	ldr	r2, [r3, #4]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	621a      	str	r2, [r3, #32]
}
 8006e92:	bf00      	nop
 8006e94:	371c      	adds	r7, #28
 8006e96:	46bd      	mov	sp, r7
 8006e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9c:	4770      	bx	lr
 8006e9e:	bf00      	nop
 8006ea0:	40010000 	.word	0x40010000

08006ea4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1b      	ldr	r3, [r3, #32]
 8006eba:	f023 0201 	bic.w	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	699b      	ldr	r3, [r3, #24]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006ece:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	f023 030a 	bic.w	r3, r3, #10
 8006ee0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	693a      	ldr	r2, [r7, #16]
 8006eee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	697a      	ldr	r2, [r7, #20]
 8006ef4:	621a      	str	r2, [r3, #32]
}
 8006ef6:	bf00      	nop
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr

08006f02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006f02:	b480      	push	{r7}
 8006f04:	b087      	sub	sp, #28
 8006f06:	af00      	add	r7, sp, #0
 8006f08:	60f8      	str	r0, [r7, #12]
 8006f0a:	60b9      	str	r1, [r7, #8]
 8006f0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	6a1b      	ldr	r3, [r3, #32]
 8006f12:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	6a1b      	ldr	r3, [r3, #32]
 8006f18:	f023 0210 	bic.w	r2, r3, #16
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	699b      	ldr	r3, [r3, #24]
 8006f24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	031b      	lsls	r3, r3, #12
 8006f32:	693a      	ldr	r2, [r7, #16]
 8006f34:	4313      	orrs	r3, r2
 8006f36:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f38:	697b      	ldr	r3, [r7, #20]
 8006f3a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006f3e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	011b      	lsls	r3, r3, #4
 8006f44:	697a      	ldr	r2, [r7, #20]
 8006f46:	4313      	orrs	r3, r2
 8006f48:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	693a      	ldr	r2, [r7, #16]
 8006f4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	621a      	str	r2, [r3, #32]
}
 8006f56:	bf00      	nop
 8006f58:	371c      	adds	r7, #28
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b085      	sub	sp, #20
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f7a:	683a      	ldr	r2, [r7, #0]
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	f043 0307 	orr.w	r3, r3, #7
 8006f84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	68fa      	ldr	r2, [r7, #12]
 8006f8a:	609a      	str	r2, [r3, #8]
}
 8006f8c:	bf00      	nop
 8006f8e:	3714      	adds	r7, #20
 8006f90:	46bd      	mov	sp, r7
 8006f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f96:	4770      	bx	lr

08006f98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f98:	b480      	push	{r7}
 8006f9a:	b087      	sub	sp, #28
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	60f8      	str	r0, [r7, #12]
 8006fa0:	60b9      	str	r1, [r7, #8]
 8006fa2:	607a      	str	r2, [r7, #4]
 8006fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	689b      	ldr	r3, [r3, #8]
 8006faa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006fac:	697b      	ldr	r3, [r7, #20]
 8006fae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006fb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	021a      	lsls	r2, r3, #8
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	431a      	orrs	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4313      	orrs	r3, r2
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	4313      	orrs	r3, r2
 8006fc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	697a      	ldr	r2, [r7, #20]
 8006fca:	609a      	str	r2, [r3, #8]
}
 8006fcc:	bf00      	nop
 8006fce:	371c      	adds	r7, #28
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd6:	4770      	bx	lr

08006fd8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b087      	sub	sp, #28
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	60f8      	str	r0, [r7, #12]
 8006fe0:	60b9      	str	r1, [r7, #8]
 8006fe2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fe4:	68bb      	ldr	r3, [r7, #8]
 8006fe6:	f003 031f 	and.w	r3, r3, #31
 8006fea:	2201      	movs	r2, #1
 8006fec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ff0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	6a1a      	ldr	r2, [r3, #32]
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	43db      	mvns	r3, r3
 8006ffa:	401a      	ands	r2, r3
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a1a      	ldr	r2, [r3, #32]
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	6879      	ldr	r1, [r7, #4]
 800700c:	fa01 f303 	lsl.w	r3, r1, r3
 8007010:	431a      	orrs	r2, r3
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	621a      	str	r2, [r3, #32]
}
 8007016:	bf00      	nop
 8007018:	371c      	adds	r7, #28
 800701a:	46bd      	mov	sp, r7
 800701c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007020:	4770      	bx	lr
	...

08007024 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007024:	b480      	push	{r7}
 8007026:	b085      	sub	sp, #20
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
 800702c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007034:	2b01      	cmp	r3, #1
 8007036:	d101      	bne.n	800703c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007038:	2302      	movs	r3, #2
 800703a:	e050      	b.n	80070de <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2202      	movs	r2, #2
 8007048:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	685b      	ldr	r3, [r3, #4]
 8007052:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007062:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	68fa      	ldr	r2, [r7, #12]
 800706a:	4313      	orrs	r3, r2
 800706c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a1c      	ldr	r2, [pc, #112]	@ (80070ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d018      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007088:	d013      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	4a18      	ldr	r2, [pc, #96]	@ (80070f0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007090:	4293      	cmp	r3, r2
 8007092:	d00e      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	4a16      	ldr	r2, [pc, #88]	@ (80070f4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800709a:	4293      	cmp	r3, r2
 800709c:	d009      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	4a15      	ldr	r2, [pc, #84]	@ (80070f8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d004      	beq.n	80070b2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	4a13      	ldr	r2, [pc, #76]	@ (80070fc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80070ae:	4293      	cmp	r3, r2
 80070b0:	d10c      	bne.n	80070cc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80070b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	68ba      	ldr	r2, [r7, #8]
 80070c0:	4313      	orrs	r3, r2
 80070c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68ba      	ldr	r2, [r7, #8]
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2200      	movs	r2, #0
 80070d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80070dc:	2300      	movs	r3, #0
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3714      	adds	r7, #20
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	40010000 	.word	0x40010000
 80070f0:	40000400 	.word	0x40000400
 80070f4:	40000800 	.word	0x40000800
 80070f8:	40000c00 	.word	0x40000c00
 80070fc:	40014000 	.word	0x40014000

08007100 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007100:	b084      	sub	sp, #16
 8007102:	b580      	push	{r7, lr}
 8007104:	b084      	sub	sp, #16
 8007106:	af00      	add	r7, sp, #0
 8007108:	6078      	str	r0, [r7, #4]
 800710a:	f107 001c 	add.w	r0, r7, #28
 800710e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007112:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007116:	2b01      	cmp	r3, #1
 8007118:	d123      	bne.n	8007162 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800711e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800712e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007132:	687a      	ldr	r2, [r7, #4]
 8007134:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68db      	ldr	r3, [r3, #12]
 800713a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007142:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007146:	2b01      	cmp	r3, #1
 8007148:	d105      	bne.n	8007156 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	68db      	ldr	r3, [r3, #12]
 800714e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f001 fae8 	bl	800872c <USB_CoreReset>
 800715c:	4603      	mov	r3, r0
 800715e:	73fb      	strb	r3, [r7, #15]
 8007160:	e01b      	b.n	800719a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f001 fadc 	bl	800872c <USB_CoreReset>
 8007174:	4603      	mov	r3, r0
 8007176:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007178:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800717c:	2b00      	cmp	r3, #0
 800717e:	d106      	bne.n	800718e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007184:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	639a      	str	r2, [r3, #56]	@ 0x38
 800718c:	e005      	b.n	800719a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007192:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800719a:	7fbb      	ldrb	r3, [r7, #30]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d10b      	bne.n	80071b8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f043 0206 	orr.w	r2, r3, #6
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f043 0220 	orr.w	r2, r3, #32
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3710      	adds	r7, #16
 80071be:	46bd      	mov	sp, r7
 80071c0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80071c4:	b004      	add	sp, #16
 80071c6:	4770      	bx	lr

080071c8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b087      	sub	sp, #28
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	60f8      	str	r0, [r7, #12]
 80071d0:	60b9      	str	r1, [r7, #8]
 80071d2:	4613      	mov	r3, r2
 80071d4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80071d6:	79fb      	ldrb	r3, [r7, #7]
 80071d8:	2b02      	cmp	r3, #2
 80071da:	d165      	bne.n	80072a8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	4a41      	ldr	r2, [pc, #260]	@ (80072e4 <USB_SetTurnaroundTime+0x11c>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d906      	bls.n	80071f2 <USB_SetTurnaroundTime+0x2a>
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4a40      	ldr	r2, [pc, #256]	@ (80072e8 <USB_SetTurnaroundTime+0x120>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d202      	bcs.n	80071f2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80071ec:	230f      	movs	r3, #15
 80071ee:	617b      	str	r3, [r7, #20]
 80071f0:	e062      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a3c      	ldr	r2, [pc, #240]	@ (80072e8 <USB_SetTurnaroundTime+0x120>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d306      	bcc.n	8007208 <USB_SetTurnaroundTime+0x40>
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	4a3b      	ldr	r2, [pc, #236]	@ (80072ec <USB_SetTurnaroundTime+0x124>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d202      	bcs.n	8007208 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007202:	230e      	movs	r3, #14
 8007204:	617b      	str	r3, [r7, #20]
 8007206:	e057      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007208:	68bb      	ldr	r3, [r7, #8]
 800720a:	4a38      	ldr	r2, [pc, #224]	@ (80072ec <USB_SetTurnaroundTime+0x124>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d306      	bcc.n	800721e <USB_SetTurnaroundTime+0x56>
 8007210:	68bb      	ldr	r3, [r7, #8]
 8007212:	4a37      	ldr	r2, [pc, #220]	@ (80072f0 <USB_SetTurnaroundTime+0x128>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d202      	bcs.n	800721e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007218:	230d      	movs	r3, #13
 800721a:	617b      	str	r3, [r7, #20]
 800721c:	e04c      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	4a33      	ldr	r2, [pc, #204]	@ (80072f0 <USB_SetTurnaroundTime+0x128>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d306      	bcc.n	8007234 <USB_SetTurnaroundTime+0x6c>
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4a32      	ldr	r2, [pc, #200]	@ (80072f4 <USB_SetTurnaroundTime+0x12c>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d802      	bhi.n	8007234 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800722e:	230c      	movs	r3, #12
 8007230:	617b      	str	r3, [r7, #20]
 8007232:	e041      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4a2f      	ldr	r2, [pc, #188]	@ (80072f4 <USB_SetTurnaroundTime+0x12c>)
 8007238:	4293      	cmp	r3, r2
 800723a:	d906      	bls.n	800724a <USB_SetTurnaroundTime+0x82>
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4a2e      	ldr	r2, [pc, #184]	@ (80072f8 <USB_SetTurnaroundTime+0x130>)
 8007240:	4293      	cmp	r3, r2
 8007242:	d802      	bhi.n	800724a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007244:	230b      	movs	r3, #11
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	e036      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	4a2a      	ldr	r2, [pc, #168]	@ (80072f8 <USB_SetTurnaroundTime+0x130>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d906      	bls.n	8007260 <USB_SetTurnaroundTime+0x98>
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	4a29      	ldr	r2, [pc, #164]	@ (80072fc <USB_SetTurnaroundTime+0x134>)
 8007256:	4293      	cmp	r3, r2
 8007258:	d802      	bhi.n	8007260 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800725a:	230a      	movs	r3, #10
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e02b      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	4a26      	ldr	r2, [pc, #152]	@ (80072fc <USB_SetTurnaroundTime+0x134>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d906      	bls.n	8007276 <USB_SetTurnaroundTime+0xae>
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	4a25      	ldr	r2, [pc, #148]	@ (8007300 <USB_SetTurnaroundTime+0x138>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d202      	bcs.n	8007276 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007270:	2309      	movs	r3, #9
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	e020      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007276:	68bb      	ldr	r3, [r7, #8]
 8007278:	4a21      	ldr	r2, [pc, #132]	@ (8007300 <USB_SetTurnaroundTime+0x138>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d306      	bcc.n	800728c <USB_SetTurnaroundTime+0xc4>
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	4a20      	ldr	r2, [pc, #128]	@ (8007304 <USB_SetTurnaroundTime+0x13c>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d802      	bhi.n	800728c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007286:	2308      	movs	r3, #8
 8007288:	617b      	str	r3, [r7, #20]
 800728a:	e015      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	4a1d      	ldr	r2, [pc, #116]	@ (8007304 <USB_SetTurnaroundTime+0x13c>)
 8007290:	4293      	cmp	r3, r2
 8007292:	d906      	bls.n	80072a2 <USB_SetTurnaroundTime+0xda>
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	4a1c      	ldr	r2, [pc, #112]	@ (8007308 <USB_SetTurnaroundTime+0x140>)
 8007298:	4293      	cmp	r3, r2
 800729a:	d202      	bcs.n	80072a2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800729c:	2307      	movs	r3, #7
 800729e:	617b      	str	r3, [r7, #20]
 80072a0:	e00a      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80072a2:	2306      	movs	r3, #6
 80072a4:	617b      	str	r3, [r7, #20]
 80072a6:	e007      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80072a8:	79fb      	ldrb	r3, [r7, #7]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d102      	bne.n	80072b4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80072ae:	2309      	movs	r3, #9
 80072b0:	617b      	str	r3, [r7, #20]
 80072b2:	e001      	b.n	80072b8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80072b4:	2309      	movs	r3, #9
 80072b6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	68db      	ldr	r3, [r3, #12]
 80072bc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	68da      	ldr	r2, [r3, #12]
 80072c8:	697b      	ldr	r3, [r7, #20]
 80072ca:	029b      	lsls	r3, r3, #10
 80072cc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80072d0:	431a      	orrs	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072d6:	2300      	movs	r3, #0
}
 80072d8:	4618      	mov	r0, r3
 80072da:	371c      	adds	r7, #28
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr
 80072e4:	00d8acbf 	.word	0x00d8acbf
 80072e8:	00e4e1c0 	.word	0x00e4e1c0
 80072ec:	00f42400 	.word	0x00f42400
 80072f0:	01067380 	.word	0x01067380
 80072f4:	011a499f 	.word	0x011a499f
 80072f8:	01312cff 	.word	0x01312cff
 80072fc:	014ca43f 	.word	0x014ca43f
 8007300:	016e3600 	.word	0x016e3600
 8007304:	01a6ab1f 	.word	0x01a6ab1f
 8007308:	01e84800 	.word	0x01e84800

0800730c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800730c:	b480      	push	{r7}
 800730e:	b083      	sub	sp, #12
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	689b      	ldr	r3, [r3, #8]
 8007318:	f043 0201 	orr.w	r2, r3, #1
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	370c      	adds	r7, #12
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr

0800732e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800732e:	b480      	push	{r7}
 8007330:	b083      	sub	sp, #12
 8007332:	af00      	add	r7, sp, #0
 8007334:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f023 0201 	bic.w	r2, r3, #1
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007342:	2300      	movs	r3, #0
}
 8007344:	4618      	mov	r0, r3
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	460b      	mov	r3, r1
 800735a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800735c:	2300      	movs	r3, #0
 800735e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800736c:	78fb      	ldrb	r3, [r7, #3]
 800736e:	2b01      	cmp	r3, #1
 8007370:	d115      	bne.n	800739e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800737e:	200a      	movs	r0, #10
 8007380:	f7fb f9ea 	bl	8002758 <HAL_Delay>
      ms += 10U;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	330a      	adds	r3, #10
 8007388:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f001 f93f 	bl	800860e <USB_GetMode>
 8007390:	4603      	mov	r3, r0
 8007392:	2b01      	cmp	r3, #1
 8007394:	d01e      	beq.n	80073d4 <USB_SetCurrentMode+0x84>
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	2bc7      	cmp	r3, #199	@ 0xc7
 800739a:	d9f0      	bls.n	800737e <USB_SetCurrentMode+0x2e>
 800739c:	e01a      	b.n	80073d4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800739e:	78fb      	ldrb	r3, [r7, #3]
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d115      	bne.n	80073d0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	68db      	ldr	r3, [r3, #12]
 80073a8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80073b0:	200a      	movs	r0, #10
 80073b2:	f7fb f9d1 	bl	8002758 <HAL_Delay>
      ms += 10U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	330a      	adds	r3, #10
 80073ba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f001 f926 	bl	800860e <USB_GetMode>
 80073c2:	4603      	mov	r3, r0
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d005      	beq.n	80073d4 <USB_SetCurrentMode+0x84>
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	2bc7      	cmp	r3, #199	@ 0xc7
 80073cc:	d9f0      	bls.n	80073b0 <USB_SetCurrentMode+0x60>
 80073ce:	e001      	b.n	80073d4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80073d0:	2301      	movs	r3, #1
 80073d2:	e005      	b.n	80073e0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	2bc8      	cmp	r3, #200	@ 0xc8
 80073d8:	d101      	bne.n	80073de <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80073da:	2301      	movs	r3, #1
 80073dc:	e000      	b.n	80073e0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	bd80      	pop	{r7, pc}

080073e8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80073e8:	b084      	sub	sp, #16
 80073ea:	b580      	push	{r7, lr}
 80073ec:	b086      	sub	sp, #24
 80073ee:	af00      	add	r7, sp, #0
 80073f0:	6078      	str	r0, [r7, #4]
 80073f2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80073f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007402:	2300      	movs	r3, #0
 8007404:	613b      	str	r3, [r7, #16]
 8007406:	e009      	b.n	800741c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	3340      	adds	r3, #64	@ 0x40
 800740e:	009b      	lsls	r3, r3, #2
 8007410:	4413      	add	r3, r2
 8007412:	2200      	movs	r2, #0
 8007414:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007416:	693b      	ldr	r3, [r7, #16]
 8007418:	3301      	adds	r3, #1
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	2b0e      	cmp	r3, #14
 8007420:	d9f2      	bls.n	8007408 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007422:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007426:	2b00      	cmp	r3, #0
 8007428:	d11c      	bne.n	8007464 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007438:	f043 0302 	orr.w	r3, r3, #2
 800743c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007442:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	639a      	str	r2, [r3, #56]	@ 0x38
 8007462:	e00b      	b.n	800747c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007468:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007474:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007482:	461a      	mov	r2, r3
 8007484:	2300      	movs	r3, #0
 8007486:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007488:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800748c:	2b01      	cmp	r3, #1
 800748e:	d10d      	bne.n	80074ac <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007490:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007494:	2b00      	cmp	r3, #0
 8007496:	d104      	bne.n	80074a2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f968 	bl	8007770 <USB_SetDevSpeed>
 80074a0:	e008      	b.n	80074b4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80074a2:	2101      	movs	r1, #1
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 f963 	bl	8007770 <USB_SetDevSpeed>
 80074aa:	e003      	b.n	80074b4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80074ac:	2103      	movs	r1, #3
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f95e 	bl	8007770 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074b4:	2110      	movs	r1, #16
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f8fa 	bl	80076b0 <USB_FlushTxFifo>
 80074bc:	4603      	mov	r3, r0
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d001      	beq.n	80074c6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f924 	bl	8007714 <USB_FlushRxFifo>
 80074cc:	4603      	mov	r3, r0
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80074d2:	2301      	movs	r3, #1
 80074d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074dc:	461a      	mov	r2, r3
 80074de:	2300      	movs	r3, #0
 80074e0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074e8:	461a      	mov	r2, r3
 80074ea:	2300      	movs	r3, #0
 80074ec:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f4:	461a      	mov	r2, r3
 80074f6:	2300      	movs	r3, #0
 80074f8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80074fa:	2300      	movs	r3, #0
 80074fc:	613b      	str	r3, [r7, #16]
 80074fe:	e043      	b.n	8007588 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	015a      	lsls	r2, r3, #5
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	4413      	add	r3, r2
 8007508:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007512:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007516:	d118      	bne.n	800754a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800751e:	693b      	ldr	r3, [r7, #16]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	4413      	add	r3, r2
 8007526:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800752a:	461a      	mov	r2, r3
 800752c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007530:	6013      	str	r3, [r2, #0]
 8007532:	e013      	b.n	800755c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	015a      	lsls	r2, r3, #5
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	4413      	add	r3, r2
 800753c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007540:	461a      	mov	r2, r3
 8007542:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007546:	6013      	str	r3, [r2, #0]
 8007548:	e008      	b.n	800755c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800754a:	693b      	ldr	r3, [r7, #16]
 800754c:	015a      	lsls	r2, r3, #5
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	4413      	add	r3, r2
 8007552:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007556:	461a      	mov	r2, r3
 8007558:	2300      	movs	r3, #0
 800755a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800755c:	693b      	ldr	r3, [r7, #16]
 800755e:	015a      	lsls	r2, r3, #5
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4413      	add	r3, r2
 8007564:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007568:	461a      	mov	r2, r3
 800756a:	2300      	movs	r3, #0
 800756c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	015a      	lsls	r2, r3, #5
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	4413      	add	r3, r2
 8007576:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800757a:	461a      	mov	r2, r3
 800757c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8007580:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007582:	693b      	ldr	r3, [r7, #16]
 8007584:	3301      	adds	r3, #1
 8007586:	613b      	str	r3, [r7, #16]
 8007588:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800758c:	461a      	mov	r2, r3
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	4293      	cmp	r3, r2
 8007592:	d3b5      	bcc.n	8007500 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007594:	2300      	movs	r3, #0
 8007596:	613b      	str	r3, [r7, #16]
 8007598:	e043      	b.n	8007622 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800759a:	693b      	ldr	r3, [r7, #16]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075b0:	d118      	bne.n	80075e4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d10a      	bne.n	80075ce <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80075b8:	693b      	ldr	r3, [r7, #16]
 80075ba:	015a      	lsls	r2, r3, #5
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	4413      	add	r3, r2
 80075c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075c4:	461a      	mov	r2, r3
 80075c6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075ca:	6013      	str	r3, [r2, #0]
 80075cc:	e013      	b.n	80075f6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	015a      	lsls	r2, r3, #5
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	4413      	add	r3, r2
 80075d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075da:	461a      	mov	r2, r3
 80075dc:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80075e0:	6013      	str	r3, [r2, #0]
 80075e2:	e008      	b.n	80075f6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80075e4:	693b      	ldr	r3, [r7, #16]
 80075e6:	015a      	lsls	r2, r3, #5
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	4413      	add	r3, r2
 80075ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80075f0:	461a      	mov	r2, r3
 80075f2:	2300      	movs	r3, #0
 80075f4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	015a      	lsls	r2, r3, #5
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	4413      	add	r3, r2
 80075fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007602:	461a      	mov	r2, r3
 8007604:	2300      	movs	r3, #0
 8007606:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	015a      	lsls	r2, r3, #5
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	4413      	add	r3, r2
 8007610:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007614:	461a      	mov	r2, r3
 8007616:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800761a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	3301      	adds	r3, #1
 8007620:	613b      	str	r3, [r7, #16]
 8007622:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007626:	461a      	mov	r2, r3
 8007628:	693b      	ldr	r3, [r7, #16]
 800762a:	4293      	cmp	r3, r2
 800762c:	d3b5      	bcc.n	800759a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007634:	691b      	ldr	r3, [r3, #16]
 8007636:	68fa      	ldr	r2, [r7, #12]
 8007638:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800763c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007640:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	2200      	movs	r2, #0
 8007646:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800764e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007650:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007654:	2b00      	cmp	r3, #0
 8007656:	d105      	bne.n	8007664 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	f043 0210 	orr.w	r2, r3, #16
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	699a      	ldr	r2, [r3, #24]
 8007668:	4b10      	ldr	r3, [pc, #64]	@ (80076ac <USB_DevInit+0x2c4>)
 800766a:	4313      	orrs	r3, r2
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007670:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007674:	2b00      	cmp	r3, #0
 8007676:	d005      	beq.n	8007684 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	699b      	ldr	r3, [r3, #24]
 800767c:	f043 0208 	orr.w	r2, r3, #8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007684:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007688:	2b01      	cmp	r3, #1
 800768a:	d107      	bne.n	800769c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	699b      	ldr	r3, [r3, #24]
 8007690:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007694:	f043 0304 	orr.w	r3, r3, #4
 8007698:	687a      	ldr	r2, [r7, #4]
 800769a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800769c:	7dfb      	ldrb	r3, [r7, #23]
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3718      	adds	r7, #24
 80076a2:	46bd      	mov	sp, r7
 80076a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076a8:	b004      	add	sp, #16
 80076aa:	4770      	bx	lr
 80076ac:	803c3800 	.word	0x803c3800

080076b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80076ba:	2300      	movs	r3, #0
 80076bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	3301      	adds	r3, #1
 80076c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076ca:	d901      	bls.n	80076d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80076cc:	2303      	movs	r3, #3
 80076ce:	e01b      	b.n	8007708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	691b      	ldr	r3, [r3, #16]
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	daf2      	bge.n	80076be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	019b      	lsls	r3, r3, #6
 80076e0:	f043 0220 	orr.w	r2, r3, #32
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	3301      	adds	r3, #1
 80076ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076f4:	d901      	bls.n	80076fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80076f6:	2303      	movs	r3, #3
 80076f8:	e006      	b.n	8007708 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	691b      	ldr	r3, [r3, #16]
 80076fe:	f003 0320 	and.w	r3, r3, #32
 8007702:	2b20      	cmp	r3, #32
 8007704:	d0f0      	beq.n	80076e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800771c:	2300      	movs	r3, #0
 800771e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	3301      	adds	r3, #1
 8007724:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800772c:	d901      	bls.n	8007732 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800772e:	2303      	movs	r3, #3
 8007730:	e018      	b.n	8007764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	691b      	ldr	r3, [r3, #16]
 8007736:	2b00      	cmp	r3, #0
 8007738:	daf2      	bge.n	8007720 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800773a:	2300      	movs	r3, #0
 800773c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	2210      	movs	r2, #16
 8007742:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	3301      	adds	r3, #1
 8007748:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007750:	d901      	bls.n	8007756 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007752:	2303      	movs	r3, #3
 8007754:	e006      	b.n	8007764 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	691b      	ldr	r3, [r3, #16]
 800775a:	f003 0310 	and.w	r3, r3, #16
 800775e:	2b10      	cmp	r3, #16
 8007760:	d0f0      	beq.n	8007744 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007762:	2300      	movs	r3, #0
}
 8007764:	4618      	mov	r0, r3
 8007766:	3714      	adds	r7, #20
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr

08007770 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007770:	b480      	push	{r7}
 8007772:	b085      	sub	sp, #20
 8007774:	af00      	add	r7, sp, #0
 8007776:	6078      	str	r0, [r7, #4]
 8007778:	460b      	mov	r3, r1
 800777a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007786:	681a      	ldr	r2, [r3, #0]
 8007788:	78fb      	ldrb	r3, [r7, #3]
 800778a:	68f9      	ldr	r1, [r7, #12]
 800778c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007790:	4313      	orrs	r3, r2
 8007792:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007794:	2300      	movs	r3, #0
}
 8007796:	4618      	mov	r0, r3
 8007798:	3714      	adds	r7, #20
 800779a:	46bd      	mov	sp, r7
 800779c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a0:	4770      	bx	lr

080077a2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80077a2:	b480      	push	{r7}
 80077a4:	b087      	sub	sp, #28
 80077a6:	af00      	add	r7, sp, #0
 80077a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f003 0306 	and.w	r3, r3, #6
 80077ba:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	d102      	bne.n	80077c8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80077c2:	2300      	movs	r3, #0
 80077c4:	75fb      	strb	r3, [r7, #23]
 80077c6:	e00a      	b.n	80077de <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	d002      	beq.n	80077d4 <USB_GetDevSpeed+0x32>
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	2b06      	cmp	r3, #6
 80077d2:	d102      	bne.n	80077da <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80077d4:	2302      	movs	r3, #2
 80077d6:	75fb      	strb	r3, [r7, #23]
 80077d8:	e001      	b.n	80077de <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80077da:	230f      	movs	r3, #15
 80077dc:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80077de:	7dfb      	ldrb	r3, [r7, #23]
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	371c      	adds	r7, #28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ea:	4770      	bx	lr

080077ec <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80077ec:	b480      	push	{r7}
 80077ee:	b085      	sub	sp, #20
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	785b      	ldrb	r3, [r3, #1]
 8007804:	2b01      	cmp	r3, #1
 8007806:	d13a      	bne.n	800787e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	f003 030f 	and.w	r3, r3, #15
 8007818:	2101      	movs	r1, #1
 800781a:	fa01 f303 	lsl.w	r3, r1, r3
 800781e:	b29b      	uxth	r3, r3
 8007820:	68f9      	ldr	r1, [r7, #12]
 8007822:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007826:	4313      	orrs	r3, r2
 8007828:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	015a      	lsls	r2, r3, #5
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	4413      	add	r3, r2
 8007832:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800783c:	2b00      	cmp	r3, #0
 800783e:	d155      	bne.n	80078ec <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	015a      	lsls	r2, r3, #5
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	4413      	add	r3, r2
 8007848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800784c:	681a      	ldr	r2, [r3, #0]
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	689b      	ldr	r3, [r3, #8]
 8007852:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	791b      	ldrb	r3, [r3, #4]
 800785a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800785c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800785e:	68bb      	ldr	r3, [r7, #8]
 8007860:	059b      	lsls	r3, r3, #22
 8007862:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007864:	4313      	orrs	r3, r2
 8007866:	68ba      	ldr	r2, [r7, #8]
 8007868:	0151      	lsls	r1, r2, #5
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	440a      	add	r2, r1
 800786e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007872:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800787a:	6013      	str	r3, [r2, #0]
 800787c:	e036      	b.n	80078ec <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	69da      	ldr	r2, [r3, #28]
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	781b      	ldrb	r3, [r3, #0]
 800788a:	f003 030f 	and.w	r3, r3, #15
 800788e:	2101      	movs	r1, #1
 8007890:	fa01 f303 	lsl.w	r3, r1, r3
 8007894:	041b      	lsls	r3, r3, #16
 8007896:	68f9      	ldr	r1, [r7, #12]
 8007898:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800789c:	4313      	orrs	r3, r2
 800789e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	015a      	lsls	r2, r3, #5
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	4413      	add	r3, r2
 80078a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d11a      	bne.n	80078ec <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	015a      	lsls	r2, r3, #5
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	4413      	add	r3, r2
 80078be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80078c2:	681a      	ldr	r2, [r3, #0]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689b      	ldr	r3, [r3, #8]
 80078c8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	791b      	ldrb	r3, [r3, #4]
 80078d0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80078d2:	430b      	orrs	r3, r1
 80078d4:	4313      	orrs	r3, r2
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	0151      	lsls	r1, r2, #5
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	440a      	add	r2, r1
 80078de:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80078e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80078e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078ea:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3714      	adds	r7, #20
 80078f2:	46bd      	mov	sp, r7
 80078f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f8:	4770      	bx	lr
	...

080078fc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80078fc:	b480      	push	{r7}
 80078fe:	b085      	sub	sp, #20
 8007900:	af00      	add	r7, sp, #0
 8007902:	6078      	str	r0, [r7, #4]
 8007904:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800790a:	683b      	ldr	r3, [r7, #0]
 800790c:	781b      	ldrb	r3, [r3, #0]
 800790e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8007910:	683b      	ldr	r3, [r7, #0]
 8007912:	785b      	ldrb	r3, [r3, #1]
 8007914:	2b01      	cmp	r3, #1
 8007916:	d161      	bne.n	80079dc <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	015a      	lsls	r2, r3, #5
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4413      	add	r3, r2
 8007920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800792a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800792e:	d11f      	bne.n	8007970 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	015a      	lsls	r2, r3, #5
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	4413      	add	r3, r2
 8007938:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	68ba      	ldr	r2, [r7, #8]
 8007940:	0151      	lsls	r1, r2, #5
 8007942:	68fa      	ldr	r2, [r7, #12]
 8007944:	440a      	add	r2, r1
 8007946:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800794a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800794e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	4413      	add	r3, r2
 8007958:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	68ba      	ldr	r2, [r7, #8]
 8007960:	0151      	lsls	r1, r2, #5
 8007962:	68fa      	ldr	r2, [r7, #12]
 8007964:	440a      	add	r2, r1
 8007966:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800796a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800796e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007976:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007978:	683b      	ldr	r3, [r7, #0]
 800797a:	781b      	ldrb	r3, [r3, #0]
 800797c:	f003 030f 	and.w	r3, r3, #15
 8007980:	2101      	movs	r1, #1
 8007982:	fa01 f303 	lsl.w	r3, r1, r3
 8007986:	b29b      	uxth	r3, r3
 8007988:	43db      	mvns	r3, r3
 800798a:	68f9      	ldr	r1, [r7, #12]
 800798c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007990:	4013      	ands	r3, r2
 8007992:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800799a:	69da      	ldr	r2, [r3, #28]
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	781b      	ldrb	r3, [r3, #0]
 80079a0:	f003 030f 	and.w	r3, r3, #15
 80079a4:	2101      	movs	r1, #1
 80079a6:	fa01 f303 	lsl.w	r3, r1, r3
 80079aa:	b29b      	uxth	r3, r3
 80079ac:	43db      	mvns	r3, r3
 80079ae:	68f9      	ldr	r1, [r7, #12]
 80079b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80079b4:	4013      	ands	r3, r2
 80079b6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	015a      	lsls	r2, r3, #5
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	4413      	add	r3, r2
 80079c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079c4:	681a      	ldr	r2, [r3, #0]
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	0159      	lsls	r1, r3, #5
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	440b      	add	r3, r1
 80079ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80079d2:	4619      	mov	r1, r3
 80079d4:	4b35      	ldr	r3, [pc, #212]	@ (8007aac <USB_DeactivateEndpoint+0x1b0>)
 80079d6:	4013      	ands	r3, r2
 80079d8:	600b      	str	r3, [r1, #0]
 80079da:	e060      	b.n	8007a9e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80079ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80079f2:	d11f      	bne.n	8007a34 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80079f4:	68bb      	ldr	r3, [r7, #8]
 80079f6:	015a      	lsls	r2, r3, #5
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	4413      	add	r3, r2
 80079fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68ba      	ldr	r2, [r7, #8]
 8007a04:	0151      	lsls	r1, r2, #5
 8007a06:	68fa      	ldr	r2, [r7, #12]
 8007a08:	440a      	add	r2, r1
 8007a0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a0e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8007a12:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	015a      	lsls	r2, r3, #5
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	4413      	add	r3, r2
 8007a1c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68ba      	ldr	r2, [r7, #8]
 8007a24:	0151      	lsls	r1, r2, #5
 8007a26:	68fa      	ldr	r2, [r7, #12]
 8007a28:	440a      	add	r2, r1
 8007a2a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007a2e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a32:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a3a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	781b      	ldrb	r3, [r3, #0]
 8007a40:	f003 030f 	and.w	r3, r3, #15
 8007a44:	2101      	movs	r1, #1
 8007a46:	fa01 f303 	lsl.w	r3, r1, r3
 8007a4a:	041b      	lsls	r3, r3, #16
 8007a4c:	43db      	mvns	r3, r3
 8007a4e:	68f9      	ldr	r1, [r7, #12]
 8007a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a54:	4013      	ands	r3, r2
 8007a56:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	683b      	ldr	r3, [r7, #0]
 8007a62:	781b      	ldrb	r3, [r3, #0]
 8007a64:	f003 030f 	and.w	r3, r3, #15
 8007a68:	2101      	movs	r1, #1
 8007a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8007a6e:	041b      	lsls	r3, r3, #16
 8007a70:	43db      	mvns	r3, r3
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007a78:	4013      	ands	r3, r2
 8007a7a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	015a      	lsls	r2, r3, #5
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a88:	681a      	ldr	r2, [r3, #0]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	0159      	lsls	r1, r3, #5
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	440b      	add	r3, r1
 8007a92:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007a96:	4619      	mov	r1, r3
 8007a98:	4b05      	ldr	r3, [pc, #20]	@ (8007ab0 <USB_DeactivateEndpoint+0x1b4>)
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3714      	adds	r7, #20
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	ec337800 	.word	0xec337800
 8007ab0:	eff37800 	.word	0xeff37800

08007ab4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b08a      	sub	sp, #40	@ 0x28
 8007ab8:	af02      	add	r7, sp, #8
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	4613      	mov	r3, r2
 8007ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007ac6:	68bb      	ldr	r3, [r7, #8]
 8007ac8:	781b      	ldrb	r3, [r3, #0]
 8007aca:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007acc:	68bb      	ldr	r3, [r7, #8]
 8007ace:	785b      	ldrb	r3, [r3, #1]
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	f040 817f 	bne.w	8007dd4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	691b      	ldr	r3, [r3, #16]
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d132      	bne.n	8007b44 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	015a      	lsls	r2, r3, #5
 8007ae2:	69fb      	ldr	r3, [r7, #28]
 8007ae4:	4413      	add	r3, r2
 8007ae6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007aea:	691b      	ldr	r3, [r3, #16]
 8007aec:	69ba      	ldr	r2, [r7, #24]
 8007aee:	0151      	lsls	r1, r2, #5
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	440a      	add	r2, r1
 8007af4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007af8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007afc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b00:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007b02:	69bb      	ldr	r3, [r7, #24]
 8007b04:	015a      	lsls	r2, r3, #5
 8007b06:	69fb      	ldr	r3, [r7, #28]
 8007b08:	4413      	add	r3, r2
 8007b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	69ba      	ldr	r2, [r7, #24]
 8007b12:	0151      	lsls	r1, r2, #5
 8007b14:	69fa      	ldr	r2, [r7, #28]
 8007b16:	440a      	add	r2, r1
 8007b18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b1c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007b20:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	015a      	lsls	r2, r3, #5
 8007b26:	69fb      	ldr	r3, [r7, #28]
 8007b28:	4413      	add	r3, r2
 8007b2a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	69ba      	ldr	r2, [r7, #24]
 8007b32:	0151      	lsls	r1, r2, #5
 8007b34:	69fa      	ldr	r2, [r7, #28]
 8007b36:	440a      	add	r2, r1
 8007b38:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b3c:	0cdb      	lsrs	r3, r3, #19
 8007b3e:	04db      	lsls	r3, r3, #19
 8007b40:	6113      	str	r3, [r2, #16]
 8007b42:	e097      	b.n	8007c74 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b5e:	0cdb      	lsrs	r3, r3, #19
 8007b60:	04db      	lsls	r3, r3, #19
 8007b62:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007b70:	691b      	ldr	r3, [r3, #16]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007b7e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007b82:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007b86:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8007b88:	69bb      	ldr	r3, [r7, #24]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d11a      	bne.n	8007bc4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	691a      	ldr	r2, [r3, #16]
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d903      	bls.n	8007ba2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8007b9a:	68bb      	ldr	r3, [r7, #8]
 8007b9c:	689a      	ldr	r2, [r3, #8]
 8007b9e:	68bb      	ldr	r3, [r7, #8]
 8007ba0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007ba2:	69bb      	ldr	r3, [r7, #24]
 8007ba4:	015a      	lsls	r2, r3, #5
 8007ba6:	69fb      	ldr	r3, [r7, #28]
 8007ba8:	4413      	add	r3, r2
 8007baa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007bae:	691b      	ldr	r3, [r3, #16]
 8007bb0:	69ba      	ldr	r2, [r7, #24]
 8007bb2:	0151      	lsls	r1, r2, #5
 8007bb4:	69fa      	ldr	r2, [r7, #28]
 8007bb6:	440a      	add	r2, r1
 8007bb8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007bbc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007bc0:	6113      	str	r3, [r2, #16]
 8007bc2:	e044      	b.n	8007c4e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007bc4:	68bb      	ldr	r3, [r7, #8]
 8007bc6:	691a      	ldr	r2, [r3, #16]
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	4413      	add	r3, r2
 8007bce:	1e5a      	subs	r2, r3, #1
 8007bd0:	68bb      	ldr	r3, [r7, #8]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007bd8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8007bda:	69bb      	ldr	r3, [r7, #24]
 8007bdc:	015a      	lsls	r2, r3, #5
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	4413      	add	r3, r2
 8007be2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007be6:	691a      	ldr	r2, [r3, #16]
 8007be8:	8afb      	ldrh	r3, [r7, #22]
 8007bea:	04d9      	lsls	r1, r3, #19
 8007bec:	4ba4      	ldr	r3, [pc, #656]	@ (8007e80 <USB_EPStartXfer+0x3cc>)
 8007bee:	400b      	ands	r3, r1
 8007bf0:	69b9      	ldr	r1, [r7, #24]
 8007bf2:	0148      	lsls	r0, r1, #5
 8007bf4:	69f9      	ldr	r1, [r7, #28]
 8007bf6:	4401      	add	r1, r0
 8007bf8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	791b      	ldrb	r3, [r3, #4]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	d122      	bne.n	8007c4e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c14:	691b      	ldr	r3, [r3, #16]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007c22:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8007c26:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	69fb      	ldr	r3, [r7, #28]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c34:	691a      	ldr	r2, [r3, #16]
 8007c36:	8afb      	ldrh	r3, [r7, #22]
 8007c38:	075b      	lsls	r3, r3, #29
 8007c3a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8007c3e:	69b9      	ldr	r1, [r7, #24]
 8007c40:	0148      	lsls	r0, r1, #5
 8007c42:	69f9      	ldr	r1, [r7, #28]
 8007c44:	4401      	add	r1, r0
 8007c46:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c4a:	4313      	orrs	r3, r2
 8007c4c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c5a:	691a      	ldr	r2, [r3, #16]
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007c64:	69b9      	ldr	r1, [r7, #24]
 8007c66:	0148      	lsls	r0, r1, #5
 8007c68:	69f9      	ldr	r1, [r7, #28]
 8007c6a:	4401      	add	r1, r0
 8007c6c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8007c70:	4313      	orrs	r3, r2
 8007c72:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007c74:	79fb      	ldrb	r3, [r7, #7]
 8007c76:	2b01      	cmp	r3, #1
 8007c78:	d14b      	bne.n	8007d12 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007c7a:	68bb      	ldr	r3, [r7, #8]
 8007c7c:	69db      	ldr	r3, [r3, #28]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d009      	beq.n	8007c96 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007c82:	69bb      	ldr	r3, [r7, #24]
 8007c84:	015a      	lsls	r2, r3, #5
 8007c86:	69fb      	ldr	r3, [r7, #28]
 8007c88:	4413      	add	r3, r2
 8007c8a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007c8e:	461a      	mov	r2, r3
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	69db      	ldr	r3, [r3, #28]
 8007c94:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	791b      	ldrb	r3, [r3, #4]
 8007c9a:	2b01      	cmp	r3, #1
 8007c9c:	d128      	bne.n	8007cf0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007c9e:	69fb      	ldr	r3, [r7, #28]
 8007ca0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007ca4:	689b      	ldr	r3, [r3, #8]
 8007ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d110      	bne.n	8007cd0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cc8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007ccc:	6013      	str	r3, [r2, #0]
 8007cce:	e00f      	b.n	8007cf0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007cd0:	69bb      	ldr	r3, [r7, #24]
 8007cd2:	015a      	lsls	r2, r3, #5
 8007cd4:	69fb      	ldr	r3, [r7, #28]
 8007cd6:	4413      	add	r3, r2
 8007cd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	69ba      	ldr	r2, [r7, #24]
 8007ce0:	0151      	lsls	r1, r2, #5
 8007ce2:	69fa      	ldr	r2, [r7, #28]
 8007ce4:	440a      	add	r2, r1
 8007ce6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007cea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007cee:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	015a      	lsls	r2, r3, #5
 8007cf4:	69fb      	ldr	r3, [r7, #28]
 8007cf6:	4413      	add	r3, r2
 8007cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	69ba      	ldr	r2, [r7, #24]
 8007d00:	0151      	lsls	r1, r2, #5
 8007d02:	69fa      	ldr	r2, [r7, #28]
 8007d04:	440a      	add	r2, r1
 8007d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d0a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d0e:	6013      	str	r3, [r2, #0]
 8007d10:	e166      	b.n	8007fe0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d12:	69bb      	ldr	r3, [r7, #24]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	69fb      	ldr	r3, [r7, #28]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	69ba      	ldr	r2, [r7, #24]
 8007d22:	0151      	lsls	r1, r2, #5
 8007d24:	69fa      	ldr	r2, [r7, #28]
 8007d26:	440a      	add	r2, r1
 8007d28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d2c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007d30:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	791b      	ldrb	r3, [r3, #4]
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d015      	beq.n	8007d66 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	691b      	ldr	r3, [r3, #16]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 814e 	beq.w	8007fe0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d4a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	781b      	ldrb	r3, [r3, #0]
 8007d50:	f003 030f 	and.w	r3, r3, #15
 8007d54:	2101      	movs	r1, #1
 8007d56:	fa01 f303 	lsl.w	r3, r1, r3
 8007d5a:	69f9      	ldr	r1, [r7, #28]
 8007d5c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8007d60:	4313      	orrs	r3, r2
 8007d62:	634b      	str	r3, [r1, #52]	@ 0x34
 8007d64:	e13c      	b.n	8007fe0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d110      	bne.n	8007d98 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007d76:	69bb      	ldr	r3, [r7, #24]
 8007d78:	015a      	lsls	r2, r3, #5
 8007d7a:	69fb      	ldr	r3, [r7, #28]
 8007d7c:	4413      	add	r3, r2
 8007d7e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	69ba      	ldr	r2, [r7, #24]
 8007d86:	0151      	lsls	r1, r2, #5
 8007d88:	69fa      	ldr	r2, [r7, #28]
 8007d8a:	440a      	add	r2, r1
 8007d8c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007d90:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007d94:	6013      	str	r3, [r2, #0]
 8007d96:	e00f      	b.n	8007db8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007d98:	69bb      	ldr	r3, [r7, #24]
 8007d9a:	015a      	lsls	r2, r3, #5
 8007d9c:	69fb      	ldr	r3, [r7, #28]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	69ba      	ldr	r2, [r7, #24]
 8007da8:	0151      	lsls	r1, r2, #5
 8007daa:	69fa      	ldr	r2, [r7, #28]
 8007dac:	440a      	add	r2, r1
 8007dae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8007db2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007db6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007db8:	68bb      	ldr	r3, [r7, #8]
 8007dba:	68d9      	ldr	r1, [r3, #12]
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	781a      	ldrb	r2, [r3, #0]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	691b      	ldr	r3, [r3, #16]
 8007dc4:	b298      	uxth	r0, r3
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4603      	mov	r3, r0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 f9b9 	bl	8008144 <USB_WritePacket>
 8007dd2:	e105      	b.n	8007fe0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007dd4:	69bb      	ldr	r3, [r7, #24]
 8007dd6:	015a      	lsls	r2, r3, #5
 8007dd8:	69fb      	ldr	r3, [r7, #28]
 8007dda:	4413      	add	r3, r2
 8007ddc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007de0:	691b      	ldr	r3, [r3, #16]
 8007de2:	69ba      	ldr	r2, [r7, #24]
 8007de4:	0151      	lsls	r1, r2, #5
 8007de6:	69fa      	ldr	r2, [r7, #28]
 8007de8:	440a      	add	r2, r1
 8007dea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007dee:	0cdb      	lsrs	r3, r3, #19
 8007df0:	04db      	lsls	r3, r3, #19
 8007df2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	015a      	lsls	r2, r3, #5
 8007df8:	69fb      	ldr	r3, [r7, #28]
 8007dfa:	4413      	add	r3, r2
 8007dfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e00:	691b      	ldr	r3, [r3, #16]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	0151      	lsls	r1, r2, #5
 8007e06:	69fa      	ldr	r2, [r7, #28]
 8007e08:	440a      	add	r2, r1
 8007e0a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e0e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8007e12:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8007e16:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8007e18:	69bb      	ldr	r3, [r7, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d132      	bne.n	8007e84 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8007e1e:	68bb      	ldr	r3, [r7, #8]
 8007e20:	691b      	ldr	r3, [r3, #16]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d003      	beq.n	8007e2e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	689a      	ldr	r2, [r3, #8]
 8007e2a:	68bb      	ldr	r3, [r7, #8]
 8007e2c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	689a      	ldr	r2, [r3, #8]
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e36:	69bb      	ldr	r3, [r7, #24]
 8007e38:	015a      	lsls	r2, r3, #5
 8007e3a:	69fb      	ldr	r3, [r7, #28]
 8007e3c:	4413      	add	r3, r2
 8007e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e42:	691a      	ldr	r2, [r3, #16]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	6a1b      	ldr	r3, [r3, #32]
 8007e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e4c:	69b9      	ldr	r1, [r7, #24]
 8007e4e:	0148      	lsls	r0, r1, #5
 8007e50:	69f9      	ldr	r1, [r7, #28]
 8007e52:	4401      	add	r1, r0
 8007e54:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007e58:	4313      	orrs	r3, r2
 8007e5a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	015a      	lsls	r2, r3, #5
 8007e60:	69fb      	ldr	r3, [r7, #28]
 8007e62:	4413      	add	r3, r2
 8007e64:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	0151      	lsls	r1, r2, #5
 8007e6e:	69fa      	ldr	r2, [r7, #28]
 8007e70:	440a      	add	r2, r1
 8007e72:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007e76:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007e7a:	6113      	str	r3, [r2, #16]
 8007e7c:	e062      	b.n	8007f44 <USB_EPStartXfer+0x490>
 8007e7e:	bf00      	nop
 8007e80:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8007e84:	68bb      	ldr	r3, [r7, #8]
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d123      	bne.n	8007ed4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007e8c:	69bb      	ldr	r3, [r7, #24]
 8007e8e:	015a      	lsls	r2, r3, #5
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	4413      	add	r3, r2
 8007e94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	68bb      	ldr	r3, [r7, #8]
 8007e9c:	689b      	ldr	r3, [r3, #8]
 8007e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007ea2:	69b9      	ldr	r1, [r7, #24]
 8007ea4:	0148      	lsls	r0, r1, #5
 8007ea6:	69f9      	ldr	r1, [r7, #28]
 8007ea8:	4401      	add	r1, r0
 8007eaa:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007eb2:	69bb      	ldr	r3, [r7, #24]
 8007eb4:	015a      	lsls	r2, r3, #5
 8007eb6:	69fb      	ldr	r3, [r7, #28]
 8007eb8:	4413      	add	r3, r2
 8007eba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007ebe:	691b      	ldr	r3, [r3, #16]
 8007ec0:	69ba      	ldr	r2, [r7, #24]
 8007ec2:	0151      	lsls	r1, r2, #5
 8007ec4:	69fa      	ldr	r2, [r7, #28]
 8007ec6:	440a      	add	r2, r1
 8007ec8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007ecc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8007ed0:	6113      	str	r3, [r2, #16]
 8007ed2:	e037      	b.n	8007f44 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	691a      	ldr	r2, [r3, #16]
 8007ed8:	68bb      	ldr	r3, [r7, #8]
 8007eda:	689b      	ldr	r3, [r3, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	1e5a      	subs	r2, r3, #1
 8007ee0:	68bb      	ldr	r3, [r7, #8]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ee8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	8afa      	ldrh	r2, [r7, #22]
 8007ef0:	fb03 f202 	mul.w	r2, r3, r2
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	015a      	lsls	r2, r3, #5
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	4413      	add	r3, r2
 8007f00:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f04:	691a      	ldr	r2, [r3, #16]
 8007f06:	8afb      	ldrh	r3, [r7, #22]
 8007f08:	04d9      	lsls	r1, r3, #19
 8007f0a:	4b38      	ldr	r3, [pc, #224]	@ (8007fec <USB_EPStartXfer+0x538>)
 8007f0c:	400b      	ands	r3, r1
 8007f0e:	69b9      	ldr	r1, [r7, #24]
 8007f10:	0148      	lsls	r0, r1, #5
 8007f12:	69f9      	ldr	r1, [r7, #28]
 8007f14:	4401      	add	r1, r0
 8007f16:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007f1e:	69bb      	ldr	r3, [r7, #24]
 8007f20:	015a      	lsls	r2, r3, #5
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	4413      	add	r3, r2
 8007f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f2a:	691a      	ldr	r2, [r3, #16]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	6a1b      	ldr	r3, [r3, #32]
 8007f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007f34:	69b9      	ldr	r1, [r7, #24]
 8007f36:	0148      	lsls	r0, r1, #5
 8007f38:	69f9      	ldr	r1, [r7, #28]
 8007f3a:	4401      	add	r1, r0
 8007f3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8007f40:	4313      	orrs	r3, r2
 8007f42:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8007f44:	79fb      	ldrb	r3, [r7, #7]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d10d      	bne.n	8007f66 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	68db      	ldr	r3, [r3, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d009      	beq.n	8007f66 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	68d9      	ldr	r1, [r3, #12]
 8007f56:	69bb      	ldr	r3, [r7, #24]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	69fb      	ldr	r3, [r7, #28]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f62:	460a      	mov	r2, r1
 8007f64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007f66:	68bb      	ldr	r3, [r7, #8]
 8007f68:	791b      	ldrb	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d128      	bne.n	8007fc0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007f6e:	69fb      	ldr	r3, [r7, #28]
 8007f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d110      	bne.n	8007fa0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007f7e:	69bb      	ldr	r3, [r7, #24]
 8007f80:	015a      	lsls	r2, r3, #5
 8007f82:	69fb      	ldr	r3, [r7, #28]
 8007f84:	4413      	add	r3, r2
 8007f86:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	69ba      	ldr	r2, [r7, #24]
 8007f8e:	0151      	lsls	r1, r2, #5
 8007f90:	69fa      	ldr	r2, [r7, #28]
 8007f92:	440a      	add	r2, r1
 8007f94:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007f98:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007f9c:	6013      	str	r3, [r2, #0]
 8007f9e:	e00f      	b.n	8007fc0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007fa0:	69bb      	ldr	r3, [r7, #24]
 8007fa2:	015a      	lsls	r2, r3, #5
 8007fa4:	69fb      	ldr	r3, [r7, #28]
 8007fa6:	4413      	add	r3, r2
 8007fa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	69ba      	ldr	r2, [r7, #24]
 8007fb0:	0151      	lsls	r1, r2, #5
 8007fb2:	69fa      	ldr	r2, [r7, #28]
 8007fb4:	440a      	add	r2, r1
 8007fb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007fbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	015a      	lsls	r2, r3, #5
 8007fc4:	69fb      	ldr	r3, [r7, #28]
 8007fc6:	4413      	add	r3, r2
 8007fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	69ba      	ldr	r2, [r7, #24]
 8007fd0:	0151      	lsls	r1, r2, #5
 8007fd2:	69fa      	ldr	r2, [r7, #28]
 8007fd4:	440a      	add	r2, r1
 8007fd6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8007fda:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8007fde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007fe0:	2300      	movs	r3, #0
}
 8007fe2:	4618      	mov	r0, r3
 8007fe4:	3720      	adds	r7, #32
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop
 8007fec:	1ff80000 	.word	0x1ff80000

08007ff0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007ffe:	2300      	movs	r3, #0
 8008000:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	785b      	ldrb	r3, [r3, #1]
 800800a:	2b01      	cmp	r3, #1
 800800c:	d14a      	bne.n	80080a4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	781b      	ldrb	r3, [r3, #0]
 8008012:	015a      	lsls	r2, r3, #5
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	4413      	add	r3, r2
 8008018:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008022:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008026:	f040 8086 	bne.w	8008136 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800802a:	683b      	ldr	r3, [r7, #0]
 800802c:	781b      	ldrb	r3, [r3, #0]
 800802e:	015a      	lsls	r2, r3, #5
 8008030:	693b      	ldr	r3, [r7, #16]
 8008032:	4413      	add	r3, r2
 8008034:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	683a      	ldr	r2, [r7, #0]
 800803c:	7812      	ldrb	r2, [r2, #0]
 800803e:	0151      	lsls	r1, r2, #5
 8008040:	693a      	ldr	r2, [r7, #16]
 8008042:	440a      	add	r2, r1
 8008044:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008048:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800804c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	781b      	ldrb	r3, [r3, #0]
 8008052:	015a      	lsls	r2, r3, #5
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	4413      	add	r3, r2
 8008058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	683a      	ldr	r2, [r7, #0]
 8008060:	7812      	ldrb	r2, [r2, #0]
 8008062:	0151      	lsls	r1, r2, #5
 8008064:	693a      	ldr	r2, [r7, #16]
 8008066:	440a      	add	r2, r1
 8008068:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800806c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008070:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	3301      	adds	r3, #1
 8008076:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800807e:	4293      	cmp	r3, r2
 8008080:	d902      	bls.n	8008088 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	75fb      	strb	r3, [r7, #23]
          break;
 8008086:	e056      	b.n	8008136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008088:	683b      	ldr	r3, [r7, #0]
 800808a:	781b      	ldrb	r3, [r3, #0]
 800808c:	015a      	lsls	r2, r3, #5
 800808e:	693b      	ldr	r3, [r7, #16]
 8008090:	4413      	add	r3, r2
 8008092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800809c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080a0:	d0e7      	beq.n	8008072 <USB_EPStopXfer+0x82>
 80080a2:	e048      	b.n	8008136 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	781b      	ldrb	r3, [r3, #0]
 80080a8:	015a      	lsls	r2, r3, #5
 80080aa:	693b      	ldr	r3, [r7, #16]
 80080ac:	4413      	add	r3, r2
 80080ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080b8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080bc:	d13b      	bne.n	8008136 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	781b      	ldrb	r3, [r3, #0]
 80080c2:	015a      	lsls	r2, r3, #5
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	4413      	add	r3, r2
 80080c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	683a      	ldr	r2, [r7, #0]
 80080d0:	7812      	ldrb	r2, [r2, #0]
 80080d2:	0151      	lsls	r1, r2, #5
 80080d4:	693a      	ldr	r2, [r7, #16]
 80080d6:	440a      	add	r2, r1
 80080d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80080dc:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80080e0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	015a      	lsls	r2, r3, #5
 80080e8:	693b      	ldr	r3, [r7, #16]
 80080ea:	4413      	add	r3, r2
 80080ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	683a      	ldr	r2, [r7, #0]
 80080f4:	7812      	ldrb	r2, [r2, #0]
 80080f6:	0151      	lsls	r1, r2, #5
 80080f8:	693a      	ldr	r2, [r7, #16]
 80080fa:	440a      	add	r2, r1
 80080fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008100:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008104:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	3301      	adds	r3, #1
 800810a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008112:	4293      	cmp	r3, r2
 8008114:	d902      	bls.n	800811c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008116:	2301      	movs	r3, #1
 8008118:	75fb      	strb	r3, [r7, #23]
          break;
 800811a:	e00c      	b.n	8008136 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	781b      	ldrb	r3, [r3, #0]
 8008120:	015a      	lsls	r2, r3, #5
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	4413      	add	r3, r2
 8008126:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008130:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008134:	d0e7      	beq.n	8008106 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008136:	7dfb      	ldrb	r3, [r7, #23]
}
 8008138:	4618      	mov	r0, r3
 800813a:	371c      	adds	r7, #28
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008144:	b480      	push	{r7}
 8008146:	b089      	sub	sp, #36	@ 0x24
 8008148:	af00      	add	r7, sp, #0
 800814a:	60f8      	str	r0, [r7, #12]
 800814c:	60b9      	str	r1, [r7, #8]
 800814e:	4611      	mov	r1, r2
 8008150:	461a      	mov	r2, r3
 8008152:	460b      	mov	r3, r1
 8008154:	71fb      	strb	r3, [r7, #7]
 8008156:	4613      	mov	r3, r2
 8008158:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008162:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008166:	2b00      	cmp	r3, #0
 8008168:	d123      	bne.n	80081b2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800816a:	88bb      	ldrh	r3, [r7, #4]
 800816c:	3303      	adds	r3, #3
 800816e:	089b      	lsrs	r3, r3, #2
 8008170:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008172:	2300      	movs	r3, #0
 8008174:	61bb      	str	r3, [r7, #24]
 8008176:	e018      	b.n	80081aa <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008178:	79fb      	ldrb	r3, [r7, #7]
 800817a:	031a      	lsls	r2, r3, #12
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	4413      	add	r3, r2
 8008180:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008184:	461a      	mov	r2, r3
 8008186:	69fb      	ldr	r3, [r7, #28]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800818c:	69fb      	ldr	r3, [r7, #28]
 800818e:	3301      	adds	r3, #1
 8008190:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008192:	69fb      	ldr	r3, [r7, #28]
 8008194:	3301      	adds	r3, #1
 8008196:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008198:	69fb      	ldr	r3, [r7, #28]
 800819a:	3301      	adds	r3, #1
 800819c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800819e:	69fb      	ldr	r3, [r7, #28]
 80081a0:	3301      	adds	r3, #1
 80081a2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80081a4:	69bb      	ldr	r3, [r7, #24]
 80081a6:	3301      	adds	r3, #1
 80081a8:	61bb      	str	r3, [r7, #24]
 80081aa:	69ba      	ldr	r2, [r7, #24]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d3e2      	bcc.n	8008178 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80081b2:	2300      	movs	r3, #0
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3724      	adds	r7, #36	@ 0x24
 80081b8:	46bd      	mov	sp, r7
 80081ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081be:	4770      	bx	lr

080081c0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80081c0:	b480      	push	{r7}
 80081c2:	b08b      	sub	sp, #44	@ 0x2c
 80081c4:	af00      	add	r7, sp, #0
 80081c6:	60f8      	str	r0, [r7, #12]
 80081c8:	60b9      	str	r1, [r7, #8]
 80081ca:	4613      	mov	r3, r2
 80081cc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80081d2:	68bb      	ldr	r3, [r7, #8]
 80081d4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80081d6:	88fb      	ldrh	r3, [r7, #6]
 80081d8:	089b      	lsrs	r3, r3, #2
 80081da:	b29b      	uxth	r3, r3
 80081dc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80081de:	88fb      	ldrh	r3, [r7, #6]
 80081e0:	f003 0303 	and.w	r3, r3, #3
 80081e4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80081e6:	2300      	movs	r3, #0
 80081e8:	623b      	str	r3, [r7, #32]
 80081ea:	e014      	b.n	8008216 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80081ec:	69bb      	ldr	r3, [r7, #24]
 80081ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	601a      	str	r2, [r3, #0]
    pDest++;
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	3301      	adds	r3, #1
 80081fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80081fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008200:	3301      	adds	r3, #1
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008206:	3301      	adds	r3, #1
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	3301      	adds	r3, #1
 800820e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008210:	6a3b      	ldr	r3, [r7, #32]
 8008212:	3301      	adds	r3, #1
 8008214:	623b      	str	r3, [r7, #32]
 8008216:	6a3a      	ldr	r2, [r7, #32]
 8008218:	697b      	ldr	r3, [r7, #20]
 800821a:	429a      	cmp	r2, r3
 800821c:	d3e6      	bcc.n	80081ec <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800821e:	8bfb      	ldrh	r3, [r7, #30]
 8008220:	2b00      	cmp	r3, #0
 8008222:	d01e      	beq.n	8008262 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008224:	2300      	movs	r3, #0
 8008226:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008228:	69bb      	ldr	r3, [r7, #24]
 800822a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800822e:	461a      	mov	r2, r3
 8008230:	f107 0310 	add.w	r3, r7, #16
 8008234:	6812      	ldr	r2, [r2, #0]
 8008236:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	6a3b      	ldr	r3, [r7, #32]
 800823c:	b2db      	uxtb	r3, r3
 800823e:	00db      	lsls	r3, r3, #3
 8008240:	fa22 f303 	lsr.w	r3, r2, r3
 8008244:	b2da      	uxtb	r2, r3
 8008246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008248:	701a      	strb	r2, [r3, #0]
      i++;
 800824a:	6a3b      	ldr	r3, [r7, #32]
 800824c:	3301      	adds	r3, #1
 800824e:	623b      	str	r3, [r7, #32]
      pDest++;
 8008250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008252:	3301      	adds	r3, #1
 8008254:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008256:	8bfb      	ldrh	r3, [r7, #30]
 8008258:	3b01      	subs	r3, #1
 800825a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800825c:	8bfb      	ldrh	r3, [r7, #30]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1ea      	bne.n	8008238 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008264:	4618      	mov	r0, r3
 8008266:	372c      	adds	r7, #44	@ 0x2c
 8008268:	46bd      	mov	sp, r7
 800826a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800826e:	4770      	bx	lr

08008270 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008270:	b480      	push	{r7}
 8008272:	b085      	sub	sp, #20
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
 8008278:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	785b      	ldrb	r3, [r3, #1]
 8008288:	2b01      	cmp	r3, #1
 800828a:	d12c      	bne.n	80082e6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	015a      	lsls	r2, r3, #5
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4413      	add	r3, r2
 8008294:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	db12      	blt.n	80082c4 <USB_EPSetStall+0x54>
 800829e:	68bb      	ldr	r3, [r7, #8]
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00f      	beq.n	80082c4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	015a      	lsls	r2, r3, #5
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	4413      	add	r3, r2
 80082ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	68ba      	ldr	r2, [r7, #8]
 80082b4:	0151      	lsls	r1, r2, #5
 80082b6:	68fa      	ldr	r2, [r7, #12]
 80082b8:	440a      	add	r2, r1
 80082ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80082c2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80082c4:	68bb      	ldr	r3, [r7, #8]
 80082c6:	015a      	lsls	r2, r3, #5
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	4413      	add	r3, r2
 80082cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	68ba      	ldr	r2, [r7, #8]
 80082d4:	0151      	lsls	r1, r2, #5
 80082d6:	68fa      	ldr	r2, [r7, #12]
 80082d8:	440a      	add	r2, r1
 80082da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80082de:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80082e2:	6013      	str	r3, [r2, #0]
 80082e4:	e02b      	b.n	800833e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80082e6:	68bb      	ldr	r3, [r7, #8]
 80082e8:	015a      	lsls	r2, r3, #5
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	4413      	add	r3, r2
 80082ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	db12      	blt.n	800831e <USB_EPSetStall+0xae>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d00f      	beq.n	800831e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	015a      	lsls	r2, r3, #5
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	4413      	add	r3, r2
 8008306:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	0151      	lsls	r1, r2, #5
 8008310:	68fa      	ldr	r2, [r7, #12]
 8008312:	440a      	add	r2, r1
 8008314:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008318:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800831c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	015a      	lsls	r2, r3, #5
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	4413      	add	r3, r2
 8008326:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	0151      	lsls	r1, r2, #5
 8008330:	68fa      	ldr	r2, [r7, #12]
 8008332:	440a      	add	r2, r1
 8008334:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008338:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800833c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800833e:	2300      	movs	r3, #0
}
 8008340:	4618      	mov	r0, r3
 8008342:	3714      	adds	r7, #20
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800834c:	b480      	push	{r7}
 800834e:	b085      	sub	sp, #20
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800835a:	683b      	ldr	r3, [r7, #0]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	785b      	ldrb	r3, [r3, #1]
 8008364:	2b01      	cmp	r3, #1
 8008366:	d128      	bne.n	80083ba <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	015a      	lsls	r2, r3, #5
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	4413      	add	r3, r2
 8008370:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68ba      	ldr	r2, [r7, #8]
 8008378:	0151      	lsls	r1, r2, #5
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	440a      	add	r2, r1
 800837e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008382:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008386:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008388:	683b      	ldr	r3, [r7, #0]
 800838a:	791b      	ldrb	r3, [r3, #4]
 800838c:	2b03      	cmp	r3, #3
 800838e:	d003      	beq.n	8008398 <USB_EPClearStall+0x4c>
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	791b      	ldrb	r3, [r3, #4]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d138      	bne.n	800840a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008398:	68bb      	ldr	r3, [r7, #8]
 800839a:	015a      	lsls	r2, r3, #5
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	4413      	add	r3, r2
 80083a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	68ba      	ldr	r2, [r7, #8]
 80083a8:	0151      	lsls	r1, r2, #5
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	440a      	add	r2, r1
 80083ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80083b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80083b6:	6013      	str	r3, [r2, #0]
 80083b8:	e027      	b.n	800840a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	015a      	lsls	r2, r3, #5
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	4413      	add	r3, r2
 80083c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	68ba      	ldr	r2, [r7, #8]
 80083ca:	0151      	lsls	r1, r2, #5
 80083cc:	68fa      	ldr	r2, [r7, #12]
 80083ce:	440a      	add	r2, r1
 80083d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80083d4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80083d8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	791b      	ldrb	r3, [r3, #4]
 80083de:	2b03      	cmp	r3, #3
 80083e0:	d003      	beq.n	80083ea <USB_EPClearStall+0x9e>
 80083e2:	683b      	ldr	r3, [r7, #0]
 80083e4:	791b      	ldrb	r3, [r3, #4]
 80083e6:	2b02      	cmp	r3, #2
 80083e8:	d10f      	bne.n	800840a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	015a      	lsls	r2, r3, #5
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	4413      	add	r3, r2
 80083f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68ba      	ldr	r2, [r7, #8]
 80083fa:	0151      	lsls	r1, r2, #5
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	440a      	add	r2, r1
 8008400:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008404:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008408:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800840a:	2300      	movs	r3, #0
}
 800840c:	4618      	mov	r0, r3
 800840e:	3714      	adds	r7, #20
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8008418:	b480      	push	{r7}
 800841a:	b085      	sub	sp, #20
 800841c:	af00      	add	r7, sp, #0
 800841e:	6078      	str	r0, [r7, #4]
 8008420:	460b      	mov	r3, r1
 8008422:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	68fa      	ldr	r2, [r7, #12]
 8008432:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008436:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800843a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008442:	681a      	ldr	r2, [r3, #0]
 8008444:	78fb      	ldrb	r3, [r7, #3]
 8008446:	011b      	lsls	r3, r3, #4
 8008448:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800844c:	68f9      	ldr	r1, [r7, #12]
 800844e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008452:	4313      	orrs	r3, r2
 8008454:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008456:	2300      	movs	r3, #0
}
 8008458:	4618      	mov	r0, r3
 800845a:	3714      	adds	r7, #20
 800845c:	46bd      	mov	sp, r7
 800845e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008462:	4770      	bx	lr

08008464 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8008464:	b480      	push	{r7}
 8008466:	b085      	sub	sp, #20
 8008468:	af00      	add	r7, sp, #0
 800846a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	68fa      	ldr	r2, [r7, #12]
 800847a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800847e:	f023 0303 	bic.w	r3, r3, #3
 8008482:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800848a:	685b      	ldr	r3, [r3, #4]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008492:	f023 0302 	bic.w	r3, r3, #2
 8008496:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	3714      	adds	r7, #20
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b085      	sub	sp, #20
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80084c0:	f023 0303 	bic.w	r3, r3, #3
 80084c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084cc:	685b      	ldr	r3, [r3, #4]
 80084ce:	68fa      	ldr	r2, [r7, #12]
 80084d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80084d4:	f043 0302 	orr.w	r3, r3, #2
 80084d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80084da:	2300      	movs	r3, #0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3714      	adds	r7, #20
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b085      	sub	sp, #20
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	695b      	ldr	r3, [r3, #20]
 80084f4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	699b      	ldr	r3, [r3, #24]
 80084fa:	68fa      	ldr	r2, [r7, #12]
 80084fc:	4013      	ands	r3, r2
 80084fe:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8008500:	68fb      	ldr	r3, [r7, #12]
}
 8008502:	4618      	mov	r0, r3
 8008504:	3714      	adds	r7, #20
 8008506:	46bd      	mov	sp, r7
 8008508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850c:	4770      	bx	lr

0800850e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800850e:	b480      	push	{r7}
 8008510:	b085      	sub	sp, #20
 8008512:	af00      	add	r7, sp, #0
 8008514:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008520:	699b      	ldr	r3, [r3, #24]
 8008522:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800852a:	69db      	ldr	r3, [r3, #28]
 800852c:	68ba      	ldr	r2, [r7, #8]
 800852e:	4013      	ands	r3, r2
 8008530:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	0c1b      	lsrs	r3, r3, #16
}
 8008536:	4618      	mov	r0, r3
 8008538:	3714      	adds	r7, #20
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008554:	699b      	ldr	r3, [r3, #24]
 8008556:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800855e:	69db      	ldr	r3, [r3, #28]
 8008560:	68ba      	ldr	r2, [r7, #8]
 8008562:	4013      	ands	r3, r2
 8008564:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008566:	68bb      	ldr	r3, [r7, #8]
 8008568:	b29b      	uxth	r3, r3
}
 800856a:	4618      	mov	r0, r3
 800856c:	3714      	adds	r7, #20
 800856e:	46bd      	mov	sp, r7
 8008570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008574:	4770      	bx	lr

08008576 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008576:	b480      	push	{r7}
 8008578:	b085      	sub	sp, #20
 800857a:	af00      	add	r7, sp, #0
 800857c:	6078      	str	r0, [r7, #4]
 800857e:	460b      	mov	r3, r1
 8008580:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008586:	78fb      	ldrb	r3, [r7, #3]
 8008588:	015a      	lsls	r2, r3, #5
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	4413      	add	r3, r2
 800858e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800859c:	695b      	ldr	r3, [r3, #20]
 800859e:	68ba      	ldr	r2, [r7, #8]
 80085a0:	4013      	ands	r3, r2
 80085a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80085a4:	68bb      	ldr	r3, [r7, #8]
}
 80085a6:	4618      	mov	r0, r3
 80085a8:	3714      	adds	r7, #20
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr

080085b2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80085b2:	b480      	push	{r7}
 80085b4:	b087      	sub	sp, #28
 80085b6:	af00      	add	r7, sp, #0
 80085b8:	6078      	str	r0, [r7, #4]
 80085ba:	460b      	mov	r3, r1
 80085bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80085cc:	697b      	ldr	r3, [r7, #20]
 80085ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80085d4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80085d6:	78fb      	ldrb	r3, [r7, #3]
 80085d8:	f003 030f 	and.w	r3, r3, #15
 80085dc:	68fa      	ldr	r2, [r7, #12]
 80085de:	fa22 f303 	lsr.w	r3, r2, r3
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	b2db      	uxtb	r3, r3
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	4313      	orrs	r3, r2
 80085ea:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80085ec:	78fb      	ldrb	r3, [r7, #3]
 80085ee:	015a      	lsls	r2, r3, #5
 80085f0:	697b      	ldr	r3, [r7, #20]
 80085f2:	4413      	add	r3, r2
 80085f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80085f8:	689b      	ldr	r3, [r3, #8]
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4013      	ands	r3, r2
 80085fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008600:	68bb      	ldr	r3, [r7, #8]
}
 8008602:	4618      	mov	r0, r3
 8008604:	371c      	adds	r7, #28
 8008606:	46bd      	mov	sp, r7
 8008608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800860c:	4770      	bx	lr

0800860e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800860e:	b480      	push	{r7}
 8008610:	b083      	sub	sp, #12
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	695b      	ldr	r3, [r3, #20]
 800861a:	f003 0301 	and.w	r3, r3, #1
}
 800861e:	4618      	mov	r0, r3
 8008620:	370c      	adds	r7, #12
 8008622:	46bd      	mov	sp, r7
 8008624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008628:	4770      	bx	lr

0800862a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800862a:	b480      	push	{r7}
 800862c:	b085      	sub	sp, #20
 800862e:	af00      	add	r7, sp, #0
 8008630:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68fa      	ldr	r2, [r7, #12]
 8008640:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008644:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8008648:	f023 0307 	bic.w	r3, r3, #7
 800864c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008654:	685b      	ldr	r3, [r3, #4]
 8008656:	68fa      	ldr	r2, [r7, #12]
 8008658:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800865c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008660:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3714      	adds	r7, #20
 8008668:	46bd      	mov	sp, r7
 800866a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800866e:	4770      	bx	lr

08008670 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8008670:	b480      	push	{r7}
 8008672:	b087      	sub	sp, #28
 8008674:	af00      	add	r7, sp, #0
 8008676:	60f8      	str	r0, [r7, #12]
 8008678:	460b      	mov	r3, r1
 800867a:	607a      	str	r2, [r7, #4]
 800867c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	333c      	adds	r3, #60	@ 0x3c
 8008686:	3304      	adds	r3, #4
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800868c:	693b      	ldr	r3, [r7, #16]
 800868e:	4a26      	ldr	r2, [pc, #152]	@ (8008728 <USB_EP0_OutStart+0xb8>)
 8008690:	4293      	cmp	r3, r2
 8008692:	d90a      	bls.n	80086aa <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80086a0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80086a4:	d101      	bne.n	80086aa <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80086a6:	2300      	movs	r3, #0
 80086a8:	e037      	b.n	800871a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086b0:	461a      	mov	r2, r3
 80086b2:	2300      	movs	r3, #0
 80086b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086bc:	691b      	ldr	r3, [r3, #16]
 80086be:	697a      	ldr	r2, [r7, #20]
 80086c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086c4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80086c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d0:	691b      	ldr	r3, [r3, #16]
 80086d2:	697a      	ldr	r2, [r7, #20]
 80086d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086d8:	f043 0318 	orr.w	r3, r3, #24
 80086dc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086e4:	691b      	ldr	r3, [r3, #16]
 80086e6:	697a      	ldr	r2, [r7, #20]
 80086e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80086ec:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 80086f0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80086f2:	7afb      	ldrb	r3, [r7, #11]
 80086f4:	2b01      	cmp	r3, #1
 80086f6:	d10f      	bne.n	8008718 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086fe:	461a      	mov	r2, r3
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008712:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8008716:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	371c      	adds	r7, #28
 800871e:	46bd      	mov	sp, r7
 8008720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008724:	4770      	bx	lr
 8008726:	bf00      	nop
 8008728:	4f54300a 	.word	0x4f54300a

0800872c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008734:	2300      	movs	r3, #0
 8008736:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3301      	adds	r3, #1
 800873c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008744:	d901      	bls.n	800874a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008746:	2303      	movs	r3, #3
 8008748:	e01b      	b.n	8008782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	691b      	ldr	r3, [r3, #16]
 800874e:	2b00      	cmp	r3, #0
 8008750:	daf2      	bge.n	8008738 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008752:	2300      	movs	r3, #0
 8008754:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	691b      	ldr	r3, [r3, #16]
 800875a:	f043 0201 	orr.w	r2, r3, #1
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3301      	adds	r3, #1
 8008766:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800876e:	d901      	bls.n	8008774 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008770:	2303      	movs	r3, #3
 8008772:	e006      	b.n	8008782 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	f003 0301 	and.w	r3, r3, #1
 800877c:	2b01      	cmp	r3, #1
 800877e:	d0f0      	beq.n	8008762 <USB_CoreReset+0x36>

  return HAL_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	3714      	adds	r7, #20
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr
	...

08008790 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008790:	b580      	push	{r7, lr}
 8008792:	b084      	sub	sp, #16
 8008794:	af00      	add	r7, sp, #0
 8008796:	6078      	str	r0, [r7, #4]
 8008798:	460b      	mov	r3, r1
 800879a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800879c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80087a0:	f002 fc2e 	bl	800b000 <USBD_static_malloc>
 80087a4:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d109      	bne.n	80087c0 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	32b0      	adds	r2, #176	@ 0xb0
 80087b6:	2100      	movs	r1, #0
 80087b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80087bc:	2302      	movs	r3, #2
 80087be:	e0d4      	b.n	800896a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80087c0:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 80087c4:	2100      	movs	r1, #0
 80087c6:	68f8      	ldr	r0, [r7, #12]
 80087c8:	f002 fcba 	bl	800b140 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	32b0      	adds	r2, #176	@ 0xb0
 80087d6:	68f9      	ldr	r1, [r7, #12]
 80087d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	32b0      	adds	r2, #176	@ 0xb0
 80087e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	7c1b      	ldrb	r3, [r3, #16]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d138      	bne.n	800886a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80087f8:	4b5e      	ldr	r3, [pc, #376]	@ (8008974 <USBD_CDC_Init+0x1e4>)
 80087fa:	7819      	ldrb	r1, [r3, #0]
 80087fc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008800:	2202      	movs	r2, #2
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f002 fad9 	bl	800adba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008808:	4b5a      	ldr	r3, [pc, #360]	@ (8008974 <USBD_CDC_Init+0x1e4>)
 800880a:	781b      	ldrb	r3, [r3, #0]
 800880c:	f003 020f 	and.w	r2, r3, #15
 8008810:	6879      	ldr	r1, [r7, #4]
 8008812:	4613      	mov	r3, r2
 8008814:	009b      	lsls	r3, r3, #2
 8008816:	4413      	add	r3, r2
 8008818:	009b      	lsls	r3, r3, #2
 800881a:	440b      	add	r3, r1
 800881c:	3324      	adds	r3, #36	@ 0x24
 800881e:	2201      	movs	r2, #1
 8008820:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008822:	4b55      	ldr	r3, [pc, #340]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 8008824:	7819      	ldrb	r1, [r3, #0]
 8008826:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800882a:	2202      	movs	r2, #2
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f002 fac4 	bl	800adba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8008832:	4b51      	ldr	r3, [pc, #324]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	f003 020f 	and.w	r2, r3, #15
 800883a:	6879      	ldr	r1, [r7, #4]
 800883c:	4613      	mov	r3, r2
 800883e:	009b      	lsls	r3, r3, #2
 8008840:	4413      	add	r3, r2
 8008842:	009b      	lsls	r3, r3, #2
 8008844:	440b      	add	r3, r1
 8008846:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800884a:	2201      	movs	r2, #1
 800884c:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800884e:	4b4b      	ldr	r3, [pc, #300]	@ (800897c <USBD_CDC_Init+0x1ec>)
 8008850:	781b      	ldrb	r3, [r3, #0]
 8008852:	f003 020f 	and.w	r2, r3, #15
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	009b      	lsls	r3, r3, #2
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	3326      	adds	r3, #38	@ 0x26
 8008864:	2210      	movs	r2, #16
 8008866:	801a      	strh	r2, [r3, #0]
 8008868:	e035      	b.n	80088d6 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800886a:	4b42      	ldr	r3, [pc, #264]	@ (8008974 <USBD_CDC_Init+0x1e4>)
 800886c:	7819      	ldrb	r1, [r3, #0]
 800886e:	2340      	movs	r3, #64	@ 0x40
 8008870:	2202      	movs	r2, #2
 8008872:	6878      	ldr	r0, [r7, #4]
 8008874:	f002 faa1 	bl	800adba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8008878:	4b3e      	ldr	r3, [pc, #248]	@ (8008974 <USBD_CDC_Init+0x1e4>)
 800887a:	781b      	ldrb	r3, [r3, #0]
 800887c:	f003 020f 	and.w	r2, r3, #15
 8008880:	6879      	ldr	r1, [r7, #4]
 8008882:	4613      	mov	r3, r2
 8008884:	009b      	lsls	r3, r3, #2
 8008886:	4413      	add	r3, r2
 8008888:	009b      	lsls	r3, r3, #2
 800888a:	440b      	add	r3, r1
 800888c:	3324      	adds	r3, #36	@ 0x24
 800888e:	2201      	movs	r2, #1
 8008890:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8008892:	4b39      	ldr	r3, [pc, #228]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 8008894:	7819      	ldrb	r1, [r3, #0]
 8008896:	2340      	movs	r3, #64	@ 0x40
 8008898:	2202      	movs	r2, #2
 800889a:	6878      	ldr	r0, [r7, #4]
 800889c:	f002 fa8d 	bl	800adba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80088a0:	4b35      	ldr	r3, [pc, #212]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 80088a2:	781b      	ldrb	r3, [r3, #0]
 80088a4:	f003 020f 	and.w	r2, r3, #15
 80088a8:	6879      	ldr	r1, [r7, #4]
 80088aa:	4613      	mov	r3, r2
 80088ac:	009b      	lsls	r3, r3, #2
 80088ae:	4413      	add	r3, r2
 80088b0:	009b      	lsls	r3, r3, #2
 80088b2:	440b      	add	r3, r1
 80088b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80088b8:	2201      	movs	r2, #1
 80088ba:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80088bc:	4b2f      	ldr	r3, [pc, #188]	@ (800897c <USBD_CDC_Init+0x1ec>)
 80088be:	781b      	ldrb	r3, [r3, #0]
 80088c0:	f003 020f 	and.w	r2, r3, #15
 80088c4:	6879      	ldr	r1, [r7, #4]
 80088c6:	4613      	mov	r3, r2
 80088c8:	009b      	lsls	r3, r3, #2
 80088ca:	4413      	add	r3, r2
 80088cc:	009b      	lsls	r3, r3, #2
 80088ce:	440b      	add	r3, r1
 80088d0:	3326      	adds	r3, #38	@ 0x26
 80088d2:	2210      	movs	r2, #16
 80088d4:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80088d6:	4b29      	ldr	r3, [pc, #164]	@ (800897c <USBD_CDC_Init+0x1ec>)
 80088d8:	7819      	ldrb	r1, [r3, #0]
 80088da:	2308      	movs	r3, #8
 80088dc:	2203      	movs	r2, #3
 80088de:	6878      	ldr	r0, [r7, #4]
 80088e0:	f002 fa6b 	bl	800adba <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80088e4:	4b25      	ldr	r3, [pc, #148]	@ (800897c <USBD_CDC_Init+0x1ec>)
 80088e6:	781b      	ldrb	r3, [r3, #0]
 80088e8:	f003 020f 	and.w	r2, r3, #15
 80088ec:	6879      	ldr	r1, [r7, #4]
 80088ee:	4613      	mov	r3, r2
 80088f0:	009b      	lsls	r3, r3, #2
 80088f2:	4413      	add	r3, r2
 80088f4:	009b      	lsls	r3, r3, #2
 80088f6:	440b      	add	r3, r1
 80088f8:	3324      	adds	r3, #36	@ 0x24
 80088fa:	2201      	movs	r2, #1
 80088fc:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2200      	movs	r2, #0
 8008902:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800890c:	687a      	ldr	r2, [r7, #4]
 800890e:	33b0      	adds	r3, #176	@ 0xb0
 8008910:	009b      	lsls	r3, r3, #2
 8008912:	4413      	add	r3, r2
 8008914:	685b      	ldr	r3, [r3, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2200      	movs	r2, #0
 800891e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8008930:	2b00      	cmp	r3, #0
 8008932:	d101      	bne.n	8008938 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8008934:	2302      	movs	r3, #2
 8008936:	e018      	b.n	800896a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	7c1b      	ldrb	r3, [r3, #16]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d10a      	bne.n	8008956 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008940:	4b0d      	ldr	r3, [pc, #52]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 8008942:	7819      	ldrb	r1, [r3, #0]
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800894a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f002 fb22 	bl	800af98 <USBD_LL_PrepareReceive>
 8008954:	e008      	b.n	8008968 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8008956:	4b08      	ldr	r3, [pc, #32]	@ (8008978 <USBD_CDC_Init+0x1e8>)
 8008958:	7819      	ldrb	r1, [r3, #0]
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8008960:	2340      	movs	r3, #64	@ 0x40
 8008962:	6878      	ldr	r0, [r7, #4]
 8008964:	f002 fb18 	bl	800af98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3710      	adds	r7, #16
 800896e:	46bd      	mov	sp, r7
 8008970:	bd80      	pop	{r7, pc}
 8008972:	bf00      	nop
 8008974:	20000093 	.word	0x20000093
 8008978:	20000094 	.word	0x20000094
 800897c:	20000095 	.word	0x20000095

08008980 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
 8008988:	460b      	mov	r3, r1
 800898a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800898c:	4b3a      	ldr	r3, [pc, #232]	@ (8008a78 <USBD_CDC_DeInit+0xf8>)
 800898e:	781b      	ldrb	r3, [r3, #0]
 8008990:	4619      	mov	r1, r3
 8008992:	6878      	ldr	r0, [r7, #4]
 8008994:	f002 fa37 	bl	800ae06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8008998:	4b37      	ldr	r3, [pc, #220]	@ (8008a78 <USBD_CDC_DeInit+0xf8>)
 800899a:	781b      	ldrb	r3, [r3, #0]
 800899c:	f003 020f 	and.w	r2, r3, #15
 80089a0:	6879      	ldr	r1, [r7, #4]
 80089a2:	4613      	mov	r3, r2
 80089a4:	009b      	lsls	r3, r3, #2
 80089a6:	4413      	add	r3, r2
 80089a8:	009b      	lsls	r3, r3, #2
 80089aa:	440b      	add	r3, r1
 80089ac:	3324      	adds	r3, #36	@ 0x24
 80089ae:	2200      	movs	r2, #0
 80089b0:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80089b2:	4b32      	ldr	r3, [pc, #200]	@ (8008a7c <USBD_CDC_DeInit+0xfc>)
 80089b4:	781b      	ldrb	r3, [r3, #0]
 80089b6:	4619      	mov	r1, r3
 80089b8:	6878      	ldr	r0, [r7, #4]
 80089ba:	f002 fa24 	bl	800ae06 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80089be:	4b2f      	ldr	r3, [pc, #188]	@ (8008a7c <USBD_CDC_DeInit+0xfc>)
 80089c0:	781b      	ldrb	r3, [r3, #0]
 80089c2:	f003 020f 	and.w	r2, r3, #15
 80089c6:	6879      	ldr	r1, [r7, #4]
 80089c8:	4613      	mov	r3, r2
 80089ca:	009b      	lsls	r3, r3, #2
 80089cc:	4413      	add	r3, r2
 80089ce:	009b      	lsls	r3, r3, #2
 80089d0:	440b      	add	r3, r1
 80089d2:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80089d6:	2200      	movs	r2, #0
 80089d8:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80089da:	4b29      	ldr	r3, [pc, #164]	@ (8008a80 <USBD_CDC_DeInit+0x100>)
 80089dc:	781b      	ldrb	r3, [r3, #0]
 80089de:	4619      	mov	r1, r3
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f002 fa10 	bl	800ae06 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80089e6:	4b26      	ldr	r3, [pc, #152]	@ (8008a80 <USBD_CDC_DeInit+0x100>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	f003 020f 	and.w	r2, r3, #15
 80089ee:	6879      	ldr	r1, [r7, #4]
 80089f0:	4613      	mov	r3, r2
 80089f2:	009b      	lsls	r3, r3, #2
 80089f4:	4413      	add	r3, r2
 80089f6:	009b      	lsls	r3, r3, #2
 80089f8:	440b      	add	r3, r1
 80089fa:	3324      	adds	r3, #36	@ 0x24
 80089fc:	2200      	movs	r2, #0
 80089fe:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8008a00:	4b1f      	ldr	r3, [pc, #124]	@ (8008a80 <USBD_CDC_DeInit+0x100>)
 8008a02:	781b      	ldrb	r3, [r3, #0]
 8008a04:	f003 020f 	and.w	r2, r3, #15
 8008a08:	6879      	ldr	r1, [r7, #4]
 8008a0a:	4613      	mov	r3, r2
 8008a0c:	009b      	lsls	r3, r3, #2
 8008a0e:	4413      	add	r3, r2
 8008a10:	009b      	lsls	r3, r3, #2
 8008a12:	440b      	add	r3, r1
 8008a14:	3326      	adds	r3, #38	@ 0x26
 8008a16:	2200      	movs	r2, #0
 8008a18:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	32b0      	adds	r2, #176	@ 0xb0
 8008a24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d01f      	beq.n	8008a6c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008a32:	687a      	ldr	r2, [r7, #4]
 8008a34:	33b0      	adds	r3, #176	@ 0xb0
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	685b      	ldr	r3, [r3, #4]
 8008a3c:	685b      	ldr	r3, [r3, #4]
 8008a3e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	32b0      	adds	r2, #176	@ 0xb0
 8008a4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a4e:	4618      	mov	r0, r3
 8008a50:	f002 fae4 	bl	800b01c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	32b0      	adds	r2, #176	@ 0xb0
 8008a5e:	2100      	movs	r1, #0
 8008a60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2200      	movs	r2, #0
 8008a68:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8008a6c:	2300      	movs	r3, #0
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	3708      	adds	r7, #8
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	20000093 	.word	0x20000093
 8008a7c:	20000094 	.word	0x20000094
 8008a80:	20000095 	.word	0x20000095

08008a84 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b086      	sub	sp, #24
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
 8008a8c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	32b0      	adds	r2, #176	@ 0xb0
 8008a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a9c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8008aa6:	2300      	movs	r3, #0
 8008aa8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d101      	bne.n	8008ab4 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8008ab0:	2303      	movs	r3, #3
 8008ab2:	e0bf      	b.n	8008c34 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	781b      	ldrb	r3, [r3, #0]
 8008ab8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d050      	beq.n	8008b62 <USBD_CDC_Setup+0xde>
 8008ac0:	2b20      	cmp	r3, #32
 8008ac2:	f040 80af 	bne.w	8008c24 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	88db      	ldrh	r3, [r3, #6]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d03a      	beq.n	8008b44 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	781b      	ldrb	r3, [r3, #0]
 8008ad2:	b25b      	sxtb	r3, r3
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	da1b      	bge.n	8008b10 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008ade:	687a      	ldr	r2, [r7, #4]
 8008ae0:	33b0      	adds	r3, #176	@ 0xb0
 8008ae2:	009b      	lsls	r3, r3, #2
 8008ae4:	4413      	add	r3, r2
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	683a      	ldr	r2, [r7, #0]
 8008aec:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8008aee:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	88d2      	ldrh	r2, [r2, #6]
 8008af4:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	88db      	ldrh	r3, [r3, #6]
 8008afa:	2b07      	cmp	r3, #7
 8008afc:	bf28      	it	cs
 8008afe:	2307      	movcs	r3, #7
 8008b00:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	89fa      	ldrh	r2, [r7, #14]
 8008b06:	4619      	mov	r1, r3
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f001 fd53 	bl	800a5b4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8008b0e:	e090      	b.n	8008c32 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	785a      	ldrb	r2, [r3, #1]
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8008b1a:	683b      	ldr	r3, [r7, #0]
 8008b1c:	88db      	ldrh	r3, [r3, #6]
 8008b1e:	2b3f      	cmp	r3, #63	@ 0x3f
 8008b20:	d803      	bhi.n	8008b2a <USBD_CDC_Setup+0xa6>
 8008b22:	683b      	ldr	r3, [r7, #0]
 8008b24:	88db      	ldrh	r3, [r3, #6]
 8008b26:	b2da      	uxtb	r2, r3
 8008b28:	e000      	b.n	8008b2c <USBD_CDC_Setup+0xa8>
 8008b2a:	2240      	movs	r2, #64	@ 0x40
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8008b32:	6939      	ldr	r1, [r7, #16]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f001 fd65 	bl	800a60c <USBD_CtlPrepareRx>
      break;
 8008b42:	e076      	b.n	8008c32 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008b4a:	687a      	ldr	r2, [r7, #4]
 8008b4c:	33b0      	adds	r3, #176	@ 0xb0
 8008b4e:	009b      	lsls	r3, r3, #2
 8008b50:	4413      	add	r3, r2
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	689b      	ldr	r3, [r3, #8]
 8008b56:	683a      	ldr	r2, [r7, #0]
 8008b58:	7850      	ldrb	r0, [r2, #1]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	6839      	ldr	r1, [r7, #0]
 8008b5e:	4798      	blx	r3
      break;
 8008b60:	e067      	b.n	8008c32 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008b62:	683b      	ldr	r3, [r7, #0]
 8008b64:	785b      	ldrb	r3, [r3, #1]
 8008b66:	2b0b      	cmp	r3, #11
 8008b68:	d851      	bhi.n	8008c0e <USBD_CDC_Setup+0x18a>
 8008b6a:	a201      	add	r2, pc, #4	@ (adr r2, 8008b70 <USBD_CDC_Setup+0xec>)
 8008b6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b70:	08008ba1 	.word	0x08008ba1
 8008b74:	08008c1d 	.word	0x08008c1d
 8008b78:	08008c0f 	.word	0x08008c0f
 8008b7c:	08008c0f 	.word	0x08008c0f
 8008b80:	08008c0f 	.word	0x08008c0f
 8008b84:	08008c0f 	.word	0x08008c0f
 8008b88:	08008c0f 	.word	0x08008c0f
 8008b8c:	08008c0f 	.word	0x08008c0f
 8008b90:	08008c0f 	.word	0x08008c0f
 8008b94:	08008c0f 	.word	0x08008c0f
 8008b98:	08008bcb 	.word	0x08008bcb
 8008b9c:	08008bf5 	.word	0x08008bf5
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008ba6:	b2db      	uxtb	r3, r3
 8008ba8:	2b03      	cmp	r3, #3
 8008baa:	d107      	bne.n	8008bbc <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8008bac:	f107 030a 	add.w	r3, r7, #10
 8008bb0:	2202      	movs	r2, #2
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	6878      	ldr	r0, [r7, #4]
 8008bb6:	f001 fcfd 	bl	800a5b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008bba:	e032      	b.n	8008c22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008bbc:	6839      	ldr	r1, [r7, #0]
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f001 fc7b 	bl	800a4ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008bc4:	2303      	movs	r3, #3
 8008bc6:	75fb      	strb	r3, [r7, #23]
          break;
 8008bc8:	e02b      	b.n	8008c22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bd0:	b2db      	uxtb	r3, r3
 8008bd2:	2b03      	cmp	r3, #3
 8008bd4:	d107      	bne.n	8008be6 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8008bd6:	f107 030d 	add.w	r3, r7, #13
 8008bda:	2201      	movs	r2, #1
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f001 fce8 	bl	800a5b4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008be4:	e01d      	b.n	8008c22 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8008be6:	6839      	ldr	r1, [r7, #0]
 8008be8:	6878      	ldr	r0, [r7, #4]
 8008bea:	f001 fc66 	bl	800a4ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008bee:	2303      	movs	r3, #3
 8008bf0:	75fb      	strb	r3, [r7, #23]
          break;
 8008bf2:	e016      	b.n	8008c22 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8008bfa:	b2db      	uxtb	r3, r3
 8008bfc:	2b03      	cmp	r3, #3
 8008bfe:	d00f      	beq.n	8008c20 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f001 fc59 	bl	800a4ba <USBD_CtlError>
            ret = USBD_FAIL;
 8008c08:	2303      	movs	r3, #3
 8008c0a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8008c0c:	e008      	b.n	8008c20 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f001 fc52 	bl	800a4ba <USBD_CtlError>
          ret = USBD_FAIL;
 8008c16:	2303      	movs	r3, #3
 8008c18:	75fb      	strb	r3, [r7, #23]
          break;
 8008c1a:	e002      	b.n	8008c22 <USBD_CDC_Setup+0x19e>
          break;
 8008c1c:	bf00      	nop
 8008c1e:	e008      	b.n	8008c32 <USBD_CDC_Setup+0x1ae>
          break;
 8008c20:	bf00      	nop
      }
      break;
 8008c22:	e006      	b.n	8008c32 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8008c24:	6839      	ldr	r1, [r7, #0]
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fc47 	bl	800a4ba <USBD_CtlError>
      ret = USBD_FAIL;
 8008c2c:	2303      	movs	r3, #3
 8008c2e:	75fb      	strb	r3, [r7, #23]
      break;
 8008c30:	bf00      	nop
  }

  return (uint8_t)ret;
 8008c32:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3718      	adds	r7, #24
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
 8008c44:	460b      	mov	r3, r1
 8008c46:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008c4e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	32b0      	adds	r2, #176	@ 0xb0
 8008c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8008c62:	2303      	movs	r3, #3
 8008c64:	e065      	b.n	8008d32 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	32b0      	adds	r2, #176	@ 0xb0
 8008c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c74:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008c76:	78fb      	ldrb	r3, [r7, #3]
 8008c78:	f003 020f 	and.w	r2, r3, #15
 8008c7c:	6879      	ldr	r1, [r7, #4]
 8008c7e:	4613      	mov	r3, r2
 8008c80:	009b      	lsls	r3, r3, #2
 8008c82:	4413      	add	r3, r2
 8008c84:	009b      	lsls	r3, r3, #2
 8008c86:	440b      	add	r3, r1
 8008c88:	3318      	adds	r3, #24
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d02f      	beq.n	8008cf0 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8008c90:	78fb      	ldrb	r3, [r7, #3]
 8008c92:	f003 020f 	and.w	r2, r3, #15
 8008c96:	6879      	ldr	r1, [r7, #4]
 8008c98:	4613      	mov	r3, r2
 8008c9a:	009b      	lsls	r3, r3, #2
 8008c9c:	4413      	add	r3, r2
 8008c9e:	009b      	lsls	r3, r3, #2
 8008ca0:	440b      	add	r3, r1
 8008ca2:	3318      	adds	r3, #24
 8008ca4:	681a      	ldr	r2, [r3, #0]
 8008ca6:	78fb      	ldrb	r3, [r7, #3]
 8008ca8:	f003 010f 	and.w	r1, r3, #15
 8008cac:	68f8      	ldr	r0, [r7, #12]
 8008cae:	460b      	mov	r3, r1
 8008cb0:	00db      	lsls	r3, r3, #3
 8008cb2:	440b      	add	r3, r1
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	4403      	add	r3, r0
 8008cb8:	331c      	adds	r3, #28
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	fbb2 f1f3 	udiv	r1, r2, r3
 8008cc0:	fb01 f303 	mul.w	r3, r1, r3
 8008cc4:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d112      	bne.n	8008cf0 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8008cca:	78fb      	ldrb	r3, [r7, #3]
 8008ccc:	f003 020f 	and.w	r2, r3, #15
 8008cd0:	6879      	ldr	r1, [r7, #4]
 8008cd2:	4613      	mov	r3, r2
 8008cd4:	009b      	lsls	r3, r3, #2
 8008cd6:	4413      	add	r3, r2
 8008cd8:	009b      	lsls	r3, r3, #2
 8008cda:	440b      	add	r3, r1
 8008cdc:	3318      	adds	r3, #24
 8008cde:	2200      	movs	r2, #0
 8008ce0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8008ce2:	78f9      	ldrb	r1, [r7, #3]
 8008ce4:	2300      	movs	r3, #0
 8008ce6:	2200      	movs	r2, #0
 8008ce8:	6878      	ldr	r0, [r7, #4]
 8008cea:	f002 f934 	bl	800af56 <USBD_LL_Transmit>
 8008cee:	e01f      	b.n	8008d30 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8008cf0:	68bb      	ldr	r3, [r7, #8]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008cfe:	687a      	ldr	r2, [r7, #4]
 8008d00:	33b0      	adds	r3, #176	@ 0xb0
 8008d02:	009b      	lsls	r3, r3, #2
 8008d04:	4413      	add	r3, r2
 8008d06:	685b      	ldr	r3, [r3, #4]
 8008d08:	691b      	ldr	r3, [r3, #16]
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d010      	beq.n	8008d30 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d14:	687a      	ldr	r2, [r7, #4]
 8008d16:	33b0      	adds	r3, #176	@ 0xb0
 8008d18:	009b      	lsls	r3, r3, #2
 8008d1a:	4413      	add	r3, r2
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	691b      	ldr	r3, [r3, #16]
 8008d20:	68ba      	ldr	r2, [r7, #8]
 8008d22:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8008d2c:	78fa      	ldrb	r2, [r7, #3]
 8008d2e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8008d30:	2300      	movs	r3, #0
}
 8008d32:	4618      	mov	r0, r3
 8008d34:	3710      	adds	r7, #16
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}

08008d3a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008d3a:	b580      	push	{r7, lr}
 8008d3c:	b084      	sub	sp, #16
 8008d3e:	af00      	add	r7, sp, #0
 8008d40:	6078      	str	r0, [r7, #4]
 8008d42:	460b      	mov	r3, r1
 8008d44:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	32b0      	adds	r2, #176	@ 0xb0
 8008d50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d54:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	32b0      	adds	r2, #176	@ 0xb0
 8008d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d101      	bne.n	8008d6c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8008d68:	2303      	movs	r3, #3
 8008d6a:	e01a      	b.n	8008da2 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008d6c:	78fb      	ldrb	r3, [r7, #3]
 8008d6e:	4619      	mov	r1, r3
 8008d70:	6878      	ldr	r0, [r7, #4]
 8008d72:	f002 f932 	bl	800afda <USBD_LL_GetRxDataSize>
 8008d76:	4602      	mov	r2, r0
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008d84:	687a      	ldr	r2, [r7, #4]
 8008d86:	33b0      	adds	r3, #176	@ 0xb0
 8008d88:	009b      	lsls	r3, r3, #2
 8008d8a:	4413      	add	r3, r2
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	68db      	ldr	r3, [r3, #12]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8008d96:	68fa      	ldr	r2, [r7, #12]
 8008d98:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8008d9c:	4611      	mov	r1, r2
 8008d9e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008da0:	2300      	movs	r3, #0
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3710      	adds	r7, #16
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}

08008daa <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8008daa:	b580      	push	{r7, lr}
 8008dac:	b084      	sub	sp, #16
 8008dae:	af00      	add	r7, sp, #0
 8008db0:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	32b0      	adds	r2, #176	@ 0xb0
 8008dbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dc0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d101      	bne.n	8008dcc <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008dc8:	2303      	movs	r3, #3
 8008dca:	e024      	b.n	8008e16 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	33b0      	adds	r3, #176	@ 0xb0
 8008dd6:	009b      	lsls	r3, r3, #2
 8008dd8:	4413      	add	r3, r2
 8008dda:	685b      	ldr	r3, [r3, #4]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d019      	beq.n	8008e14 <USBD_CDC_EP0_RxReady+0x6a>
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8008de6:	2bff      	cmp	r3, #255	@ 0xff
 8008de8:	d014      	beq.n	8008e14 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008df0:	687a      	ldr	r2, [r7, #4]
 8008df2:	33b0      	adds	r3, #176	@ 0xb0
 8008df4:	009b      	lsls	r3, r3, #2
 8008df6:	4413      	add	r3, r2
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	689b      	ldr	r3, [r3, #8]
 8008dfc:	68fa      	ldr	r2, [r7, #12]
 8008dfe:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8008e02:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8008e04:	68fa      	ldr	r2, [r7, #12]
 8008e06:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8008e0a:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	22ff      	movs	r2, #255	@ 0xff
 8008e10:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8008e14:	2300      	movs	r3, #0
}
 8008e16:	4618      	mov	r0, r3
 8008e18:	3710      	adds	r7, #16
 8008e1a:	46bd      	mov	sp, r7
 8008e1c:	bd80      	pop	{r7, pc}
	...

08008e20 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b086      	sub	sp, #24
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e28:	2182      	movs	r1, #130	@ 0x82
 8008e2a:	4818      	ldr	r0, [pc, #96]	@ (8008e8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e2c:	f000 fd0f 	bl	800984e <USBD_GetEpDesc>
 8008e30:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008e32:	2101      	movs	r1, #1
 8008e34:	4815      	ldr	r0, [pc, #84]	@ (8008e8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e36:	f000 fd0a 	bl	800984e <USBD_GetEpDesc>
 8008e3a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008e3c:	2181      	movs	r1, #129	@ 0x81
 8008e3e:	4813      	ldr	r0, [pc, #76]	@ (8008e8c <USBD_CDC_GetFSCfgDesc+0x6c>)
 8008e40:	f000 fd05 	bl	800984e <USBD_GetEpDesc>
 8008e44:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d002      	beq.n	8008e52 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	2210      	movs	r2, #16
 8008e50:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d006      	beq.n	8008e66 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	2200      	movs	r2, #0
 8008e5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e60:	711a      	strb	r2, [r3, #4]
 8008e62:	2200      	movs	r2, #0
 8008e64:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d006      	beq.n	8008e7a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2200      	movs	r2, #0
 8008e70:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008e74:	711a      	strb	r2, [r3, #4]
 8008e76:	2200      	movs	r2, #0
 8008e78:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2243      	movs	r2, #67	@ 0x43
 8008e7e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008e80:	4b02      	ldr	r3, [pc, #8]	@ (8008e8c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3718      	adds	r7, #24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	bd80      	pop	{r7, pc}
 8008e8a:	bf00      	nop
 8008e8c:	20000050 	.word	0x20000050

08008e90 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b086      	sub	sp, #24
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008e98:	2182      	movs	r1, #130	@ 0x82
 8008e9a:	4818      	ldr	r0, [pc, #96]	@ (8008efc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008e9c:	f000 fcd7 	bl	800984e <USBD_GetEpDesc>
 8008ea0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	4815      	ldr	r0, [pc, #84]	@ (8008efc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008ea6:	f000 fcd2 	bl	800984e <USBD_GetEpDesc>
 8008eaa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008eac:	2181      	movs	r1, #129	@ 0x81
 8008eae:	4813      	ldr	r0, [pc, #76]	@ (8008efc <USBD_CDC_GetHSCfgDesc+0x6c>)
 8008eb0:	f000 fccd 	bl	800984e <USBD_GetEpDesc>
 8008eb4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d002      	beq.n	8008ec2 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8008ebc:	697b      	ldr	r3, [r7, #20]
 8008ebe:	2210      	movs	r2, #16
 8008ec0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d006      	beq.n	8008ed6 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	711a      	strb	r2, [r3, #4]
 8008ece:	2200      	movs	r2, #0
 8008ed0:	f042 0202 	orr.w	r2, r2, #2
 8008ed4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d006      	beq.n	8008eea <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2200      	movs	r2, #0
 8008ee0:	711a      	strb	r2, [r3, #4]
 8008ee2:	2200      	movs	r2, #0
 8008ee4:	f042 0202 	orr.w	r2, r2, #2
 8008ee8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2243      	movs	r2, #67	@ 0x43
 8008eee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008ef0:	4b02      	ldr	r3, [pc, #8]	@ (8008efc <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
 8008efa:	bf00      	nop
 8008efc:	20000050 	.word	0x20000050

08008f00 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008f00:	b580      	push	{r7, lr}
 8008f02:	b086      	sub	sp, #24
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8008f08:	2182      	movs	r1, #130	@ 0x82
 8008f0a:	4818      	ldr	r0, [pc, #96]	@ (8008f6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f0c:	f000 fc9f 	bl	800984e <USBD_GetEpDesc>
 8008f10:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8008f12:	2101      	movs	r1, #1
 8008f14:	4815      	ldr	r0, [pc, #84]	@ (8008f6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f16:	f000 fc9a 	bl	800984e <USBD_GetEpDesc>
 8008f1a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8008f1c:	2181      	movs	r1, #129	@ 0x81
 8008f1e:	4813      	ldr	r0, [pc, #76]	@ (8008f6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8008f20:	f000 fc95 	bl	800984e <USBD_GetEpDesc>
 8008f24:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8008f26:	697b      	ldr	r3, [r7, #20]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d002      	beq.n	8008f32 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	2210      	movs	r2, #16
 8008f30:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8008f32:	693b      	ldr	r3, [r7, #16]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d006      	beq.n	8008f46 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f40:	711a      	strb	r2, [r3, #4]
 8008f42:	2200      	movs	r2, #0
 8008f44:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8008f46:	68fb      	ldr	r3, [r7, #12]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d006      	beq.n	8008f5a <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2200      	movs	r2, #0
 8008f50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008f54:	711a      	strb	r2, [r3, #4]
 8008f56:	2200      	movs	r2, #0
 8008f58:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	2243      	movs	r2, #67	@ 0x43
 8008f5e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8008f60:	4b02      	ldr	r3, [pc, #8]	@ (8008f6c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8008f62:	4618      	mov	r0, r3
 8008f64:	3718      	adds	r7, #24
 8008f66:	46bd      	mov	sp, r7
 8008f68:	bd80      	pop	{r7, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20000050 	.word	0x20000050

08008f70 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	220a      	movs	r2, #10
 8008f7c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008f7e:	4b03      	ldr	r3, [pc, #12]	@ (8008f8c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008f80:	4618      	mov	r0, r3
 8008f82:	370c      	adds	r7, #12
 8008f84:	46bd      	mov	sp, r7
 8008f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f8a:	4770      	bx	lr
 8008f8c:	2000000c 	.word	0x2000000c

08008f90 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008f90:	b480      	push	{r7}
 8008f92:	b083      	sub	sp, #12
 8008f94:	af00      	add	r7, sp, #0
 8008f96:	6078      	str	r0, [r7, #4]
 8008f98:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008f9a:	683b      	ldr	r3, [r7, #0]
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d101      	bne.n	8008fa4 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e009      	b.n	8008fb8 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8008faa:	687a      	ldr	r2, [r7, #4]
 8008fac:	33b0      	adds	r3, #176	@ 0xb0
 8008fae:	009b      	lsls	r3, r3, #2
 8008fb0:	4413      	add	r3, r2
 8008fb2:	683a      	ldr	r2, [r7, #0]
 8008fb4:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	370c      	adds	r7, #12
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b087      	sub	sp, #28
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	60f8      	str	r0, [r7, #12]
 8008fcc:	60b9      	str	r1, [r7, #8]
 8008fce:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	32b0      	adds	r2, #176	@ 0xb0
 8008fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fde:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8008fe0:	697b      	ldr	r3, [r7, #20]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d101      	bne.n	8008fea <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8008fe6:	2303      	movs	r3, #3
 8008fe8:	e008      	b.n	8008ffc <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8008fea:	697b      	ldr	r3, [r7, #20]
 8008fec:	68ba      	ldr	r2, [r7, #8]
 8008fee:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8008ff2:	697b      	ldr	r3, [r7, #20]
 8008ff4:	687a      	ldr	r2, [r7, #4]
 8008ff6:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8008ffa:	2300      	movs	r3, #0
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	371c      	adds	r7, #28
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009008:	b480      	push	{r7}
 800900a:	b085      	sub	sp, #20
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	32b0      	adds	r2, #176	@ 0xb0
 800901c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009020:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	2b00      	cmp	r3, #0
 8009026:	d101      	bne.n	800902c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009028:	2303      	movs	r3, #3
 800902a:	e004      	b.n	8009036 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	683a      	ldr	r2, [r7, #0]
 8009030:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009034:	2300      	movs	r3, #0
}
 8009036:	4618      	mov	r0, r3
 8009038:	3714      	adds	r7, #20
 800903a:	46bd      	mov	sp, r7
 800903c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009040:	4770      	bx	lr
	...

08009044 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	b084      	sub	sp, #16
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	32b0      	adds	r2, #176	@ 0xb0
 8009056:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800905a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	32b0      	adds	r2, #176	@ 0xb0
 8009066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d101      	bne.n	8009072 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800906e:	2303      	movs	r3, #3
 8009070:	e018      	b.n	80090a4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	7c1b      	ldrb	r3, [r3, #16]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800907a:	4b0c      	ldr	r3, [pc, #48]	@ (80090ac <USBD_CDC_ReceivePacket+0x68>)
 800907c:	7819      	ldrb	r1, [r3, #0]
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009084:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009088:	6878      	ldr	r0, [r7, #4]
 800908a:	f001 ff85 	bl	800af98 <USBD_LL_PrepareReceive>
 800908e:	e008      	b.n	80090a2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009090:	4b06      	ldr	r3, [pc, #24]	@ (80090ac <USBD_CDC_ReceivePacket+0x68>)
 8009092:	7819      	ldrb	r1, [r3, #0]
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800909a:	2340      	movs	r3, #64	@ 0x40
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f001 ff7b 	bl	800af98 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	20000094 	.word	0x20000094

080090b0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b086      	sub	sp, #24
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	60f8      	str	r0, [r7, #12]
 80090b8:	60b9      	str	r1, [r7, #8]
 80090ba:	4613      	mov	r3, r2
 80090bc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80090c4:	2303      	movs	r3, #3
 80090c6:	e01f      	b.n	8009108 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	2200      	movs	r2, #0
 80090cc:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2200      	movs	r2, #0
 80090d4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80090e0:	68bb      	ldr	r3, [r7, #8]
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d003      	beq.n	80090ee <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	68ba      	ldr	r2, [r7, #8]
 80090ea:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	2201      	movs	r2, #1
 80090f2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	79fa      	ldrb	r2, [r7, #7]
 80090fa:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80090fc:	68f8      	ldr	r0, [r7, #12]
 80090fe:	f001 fdf5 	bl	800acec <USBD_LL_Init>
 8009102:	4603      	mov	r3, r0
 8009104:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009106:	7dfb      	ldrb	r3, [r7, #23]
}
 8009108:	4618      	mov	r0, r3
 800910a:	3718      	adds	r7, #24
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800911a:	2300      	movs	r3, #0
 800911c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d101      	bne.n	8009128 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009124:	2303      	movs	r3, #3
 8009126:	e025      	b.n	8009174 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	683a      	ldr	r2, [r7, #0]
 800912c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	32ae      	adds	r2, #174	@ 0xae
 800913a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800913e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009140:	2b00      	cmp	r3, #0
 8009142:	d00f      	beq.n	8009164 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	32ae      	adds	r2, #174	@ 0xae
 800914e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009154:	f107 020e 	add.w	r2, r7, #14
 8009158:	4610      	mov	r0, r2
 800915a:	4798      	blx	r3
 800915c:	4602      	mov	r2, r0
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009172:	2300      	movs	r3, #0
}
 8009174:	4618      	mov	r0, r3
 8009176:	3710      	adds	r7, #16
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b082      	sub	sp, #8
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009184:	6878      	ldr	r0, [r7, #4]
 8009186:	f001 fdfd 	bl	800ad84 <USBD_LL_Start>
 800918a:	4603      	mov	r3, r0
}
 800918c:	4618      	mov	r0, r3
 800918e:	3708      	adds	r7, #8
 8009190:	46bd      	mov	sp, r7
 8009192:	bd80      	pop	{r7, pc}

08009194 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009194:	b480      	push	{r7}
 8009196:	b083      	sub	sp, #12
 8009198:	af00      	add	r7, sp, #0
 800919a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800919c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800919e:	4618      	mov	r0, r3
 80091a0:	370c      	adds	r7, #12
 80091a2:	46bd      	mov	sp, r7
 80091a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091a8:	4770      	bx	lr

080091aa <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b084      	sub	sp, #16
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	460b      	mov	r3, r1
 80091b4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091b6:	2300      	movs	r3, #0
 80091b8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d009      	beq.n	80091d8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	78fa      	ldrb	r2, [r7, #3]
 80091ce:	4611      	mov	r1, r2
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	4798      	blx	r3
 80091d4:	4603      	mov	r3, r0
 80091d6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80091da:	4618      	mov	r0, r3
 80091dc:	3710      	adds	r7, #16
 80091de:	46bd      	mov	sp, r7
 80091e0:	bd80      	pop	{r7, pc}

080091e2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80091e2:	b580      	push	{r7, lr}
 80091e4:	b084      	sub	sp, #16
 80091e6:	af00      	add	r7, sp, #0
 80091e8:	6078      	str	r0, [r7, #4]
 80091ea:	460b      	mov	r3, r1
 80091ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80091ee:	2300      	movs	r3, #0
 80091f0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80091f8:	685b      	ldr	r3, [r3, #4]
 80091fa:	78fa      	ldrb	r2, [r7, #3]
 80091fc:	4611      	mov	r1, r2
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	4798      	blx	r3
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009208:	2303      	movs	r3, #3
 800920a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800920c:	7bfb      	ldrb	r3, [r7, #15]
}
 800920e:	4618      	mov	r0, r3
 8009210:	3710      	adds	r7, #16
 8009212:	46bd      	mov	sp, r7
 8009214:	bd80      	pop	{r7, pc}

08009216 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009216:	b580      	push	{r7, lr}
 8009218:	b084      	sub	sp, #16
 800921a:	af00      	add	r7, sp, #0
 800921c:	6078      	str	r0, [r7, #4]
 800921e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009226:	6839      	ldr	r1, [r7, #0]
 8009228:	4618      	mov	r0, r3
 800922a:	f001 f90c 	bl	800a446 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2201      	movs	r2, #1
 8009232:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800923c:	461a      	mov	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800924a:	f003 031f 	and.w	r3, r3, #31
 800924e:	2b02      	cmp	r3, #2
 8009250:	d01a      	beq.n	8009288 <USBD_LL_SetupStage+0x72>
 8009252:	2b02      	cmp	r3, #2
 8009254:	d822      	bhi.n	800929c <USBD_LL_SetupStage+0x86>
 8009256:	2b00      	cmp	r3, #0
 8009258:	d002      	beq.n	8009260 <USBD_LL_SetupStage+0x4a>
 800925a:	2b01      	cmp	r3, #1
 800925c:	d00a      	beq.n	8009274 <USBD_LL_SetupStage+0x5e>
 800925e:	e01d      	b.n	800929c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009266:	4619      	mov	r1, r3
 8009268:	6878      	ldr	r0, [r7, #4]
 800926a:	f000 fb63 	bl	8009934 <USBD_StdDevReq>
 800926e:	4603      	mov	r3, r0
 8009270:	73fb      	strb	r3, [r7, #15]
      break;
 8009272:	e020      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800927a:	4619      	mov	r1, r3
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fbcb 	bl	8009a18 <USBD_StdItfReq>
 8009282:	4603      	mov	r3, r0
 8009284:	73fb      	strb	r3, [r7, #15]
      break;
 8009286:	e016      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f000 fc2d 	bl	8009af0 <USBD_StdEPReq>
 8009296:	4603      	mov	r3, r0
 8009298:	73fb      	strb	r3, [r7, #15]
      break;
 800929a:	e00c      	b.n	80092b6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 80092a2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80092a6:	b2db      	uxtb	r3, r3
 80092a8:	4619      	mov	r1, r3
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f001 fdca 	bl	800ae44 <USBD_LL_StallEP>
 80092b0:	4603      	mov	r3, r0
 80092b2:	73fb      	strb	r3, [r7, #15]
      break;
 80092b4:	bf00      	nop
  }

  return ret;
 80092b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80092b8:	4618      	mov	r0, r3
 80092ba:	3710      	adds	r7, #16
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}

080092c0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80092c0:	b580      	push	{r7, lr}
 80092c2:	b086      	sub	sp, #24
 80092c4:	af00      	add	r7, sp, #0
 80092c6:	60f8      	str	r0, [r7, #12]
 80092c8:	460b      	mov	r3, r1
 80092ca:	607a      	str	r2, [r7, #4]
 80092cc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80092ce:	2300      	movs	r3, #0
 80092d0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80092d2:	7afb      	ldrb	r3, [r7, #11]
 80092d4:	2b00      	cmp	r3, #0
 80092d6:	d16e      	bne.n	80093b6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80092de:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80092e6:	2b03      	cmp	r3, #3
 80092e8:	f040 8098 	bne.w	800941c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	689a      	ldr	r2, [r3, #8]
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	68db      	ldr	r3, [r3, #12]
 80092f4:	429a      	cmp	r2, r3
 80092f6:	d913      	bls.n	8009320 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80092f8:	693b      	ldr	r3, [r7, #16]
 80092fa:	689a      	ldr	r2, [r3, #8]
 80092fc:	693b      	ldr	r3, [r7, #16]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	1ad2      	subs	r2, r2, r3
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009306:	693b      	ldr	r3, [r7, #16]
 8009308:	68da      	ldr	r2, [r3, #12]
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	4293      	cmp	r3, r2
 8009310:	bf28      	it	cs
 8009312:	4613      	movcs	r3, r2
 8009314:	461a      	mov	r2, r3
 8009316:	6879      	ldr	r1, [r7, #4]
 8009318:	68f8      	ldr	r0, [r7, #12]
 800931a:	f001 f994 	bl	800a646 <USBD_CtlContinueRx>
 800931e:	e07d      	b.n	800941c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009326:	f003 031f 	and.w	r3, r3, #31
 800932a:	2b02      	cmp	r3, #2
 800932c:	d014      	beq.n	8009358 <USBD_LL_DataOutStage+0x98>
 800932e:	2b02      	cmp	r3, #2
 8009330:	d81d      	bhi.n	800936e <USBD_LL_DataOutStage+0xae>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d002      	beq.n	800933c <USBD_LL_DataOutStage+0x7c>
 8009336:	2b01      	cmp	r3, #1
 8009338:	d003      	beq.n	8009342 <USBD_LL_DataOutStage+0x82>
 800933a:	e018      	b.n	800936e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	75bb      	strb	r3, [r7, #22]
            break;
 8009340:	e018      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009348:	b2db      	uxtb	r3, r3
 800934a:	4619      	mov	r1, r3
 800934c:	68f8      	ldr	r0, [r7, #12]
 800934e:	f000 fa64 	bl	800981a <USBD_CoreFindIF>
 8009352:	4603      	mov	r3, r0
 8009354:	75bb      	strb	r3, [r7, #22]
            break;
 8009356:	e00d      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800935e:	b2db      	uxtb	r3, r3
 8009360:	4619      	mov	r1, r3
 8009362:	68f8      	ldr	r0, [r7, #12]
 8009364:	f000 fa66 	bl	8009834 <USBD_CoreFindEP>
 8009368:	4603      	mov	r3, r0
 800936a:	75bb      	strb	r3, [r7, #22]
            break;
 800936c:	e002      	b.n	8009374 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	75bb      	strb	r3, [r7, #22]
            break;
 8009372:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009374:	7dbb      	ldrb	r3, [r7, #22]
 8009376:	2b00      	cmp	r3, #0
 8009378:	d119      	bne.n	80093ae <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b03      	cmp	r3, #3
 8009384:	d113      	bne.n	80093ae <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009386:	7dba      	ldrb	r2, [r7, #22]
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	32ae      	adds	r2, #174	@ 0xae
 800938c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009390:	691b      	ldr	r3, [r3, #16]
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00b      	beq.n	80093ae <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009396:	7dba      	ldrb	r2, [r7, #22]
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800939e:	7dba      	ldrb	r2, [r7, #22]
 80093a0:	68fb      	ldr	r3, [r7, #12]
 80093a2:	32ae      	adds	r2, #174	@ 0xae
 80093a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093a8:	691b      	ldr	r3, [r3, #16]
 80093aa:	68f8      	ldr	r0, [r7, #12]
 80093ac:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f001 f95a 	bl	800a668 <USBD_CtlSendStatus>
 80093b4:	e032      	b.n	800941c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80093b6:	7afb      	ldrb	r3, [r7, #11]
 80093b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80093bc:	b2db      	uxtb	r3, r3
 80093be:	4619      	mov	r1, r3
 80093c0:	68f8      	ldr	r0, [r7, #12]
 80093c2:	f000 fa37 	bl	8009834 <USBD_CoreFindEP>
 80093c6:	4603      	mov	r3, r0
 80093c8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80093ca:	7dbb      	ldrb	r3, [r7, #22]
 80093cc:	2bff      	cmp	r3, #255	@ 0xff
 80093ce:	d025      	beq.n	800941c <USBD_LL_DataOutStage+0x15c>
 80093d0:	7dbb      	ldrb	r3, [r7, #22]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d122      	bne.n	800941c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80093dc:	b2db      	uxtb	r3, r3
 80093de:	2b03      	cmp	r3, #3
 80093e0:	d117      	bne.n	8009412 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80093e2:	7dba      	ldrb	r2, [r7, #22]
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	32ae      	adds	r2, #174	@ 0xae
 80093e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80093ec:	699b      	ldr	r3, [r3, #24]
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00f      	beq.n	8009412 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80093f2:	7dba      	ldrb	r2, [r7, #22]
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80093fa:	7dba      	ldrb	r2, [r7, #22]
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	32ae      	adds	r2, #174	@ 0xae
 8009400:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009404:	699b      	ldr	r3, [r3, #24]
 8009406:	7afa      	ldrb	r2, [r7, #11]
 8009408:	4611      	mov	r1, r2
 800940a:	68f8      	ldr	r0, [r7, #12]
 800940c:	4798      	blx	r3
 800940e:	4603      	mov	r3, r0
 8009410:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	2b00      	cmp	r3, #0
 8009416:	d001      	beq.n	800941c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8009418:	7dfb      	ldrb	r3, [r7, #23]
 800941a:	e000      	b.n	800941e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800941c:	2300      	movs	r3, #0
}
 800941e:	4618      	mov	r0, r3
 8009420:	3718      	adds	r7, #24
 8009422:	46bd      	mov	sp, r7
 8009424:	bd80      	pop	{r7, pc}

08009426 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8009426:	b580      	push	{r7, lr}
 8009428:	b086      	sub	sp, #24
 800942a:	af00      	add	r7, sp, #0
 800942c:	60f8      	str	r0, [r7, #12]
 800942e:	460b      	mov	r3, r1
 8009430:	607a      	str	r2, [r7, #4]
 8009432:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8009434:	7afb      	ldrb	r3, [r7, #11]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d16f      	bne.n	800951a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	3314      	adds	r3, #20
 800943e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009446:	2b02      	cmp	r3, #2
 8009448:	d15a      	bne.n	8009500 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	689a      	ldr	r2, [r3, #8]
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	68db      	ldr	r3, [r3, #12]
 8009452:	429a      	cmp	r2, r3
 8009454:	d914      	bls.n	8009480 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	689a      	ldr	r2, [r3, #8]
 800945a:	693b      	ldr	r3, [r7, #16]
 800945c:	68db      	ldr	r3, [r3, #12]
 800945e:	1ad2      	subs	r2, r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8009464:	693b      	ldr	r3, [r7, #16]
 8009466:	689b      	ldr	r3, [r3, #8]
 8009468:	461a      	mov	r2, r3
 800946a:	6879      	ldr	r1, [r7, #4]
 800946c:	68f8      	ldr	r0, [r7, #12]
 800946e:	f001 f8bc 	bl	800a5ea <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8009472:	2300      	movs	r3, #0
 8009474:	2200      	movs	r2, #0
 8009476:	2100      	movs	r1, #0
 8009478:	68f8      	ldr	r0, [r7, #12]
 800947a:	f001 fd8d 	bl	800af98 <USBD_LL_PrepareReceive>
 800947e:	e03f      	b.n	8009500 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	68da      	ldr	r2, [r3, #12]
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	429a      	cmp	r2, r3
 800948a:	d11c      	bne.n	80094c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	685a      	ldr	r2, [r3, #4]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8009494:	429a      	cmp	r2, r3
 8009496:	d316      	bcc.n	80094c6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	685a      	ldr	r2, [r3, #4]
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80094a2:	429a      	cmp	r2, r3
 80094a4:	d20f      	bcs.n	80094c6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80094a6:	2200      	movs	r2, #0
 80094a8:	2100      	movs	r1, #0
 80094aa:	68f8      	ldr	r0, [r7, #12]
 80094ac:	f001 f89d 	bl	800a5ea <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80094b8:	2300      	movs	r3, #0
 80094ba:	2200      	movs	r2, #0
 80094bc:	2100      	movs	r1, #0
 80094be:	68f8      	ldr	r0, [r7, #12]
 80094c0:	f001 fd6a 	bl	800af98 <USBD_LL_PrepareReceive>
 80094c4:	e01c      	b.n	8009500 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80094cc:	b2db      	uxtb	r3, r3
 80094ce:	2b03      	cmp	r3, #3
 80094d0:	d10f      	bne.n	80094f2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094d8:	68db      	ldr	r3, [r3, #12]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	d009      	beq.n	80094f2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	68f8      	ldr	r0, [r7, #12]
 80094f0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80094f2:	2180      	movs	r1, #128	@ 0x80
 80094f4:	68f8      	ldr	r0, [r7, #12]
 80094f6:	f001 fca5 	bl	800ae44 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80094fa:	68f8      	ldr	r0, [r7, #12]
 80094fc:	f001 f8c7 	bl	800a68e <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8009506:	2b00      	cmp	r3, #0
 8009508:	d03a      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800950a:	68f8      	ldr	r0, [r7, #12]
 800950c:	f7ff fe42 	bl	8009194 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8009518:	e032      	b.n	8009580 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800951a:	7afb      	ldrb	r3, [r7, #11]
 800951c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009520:	b2db      	uxtb	r3, r3
 8009522:	4619      	mov	r1, r3
 8009524:	68f8      	ldr	r0, [r7, #12]
 8009526:	f000 f985 	bl	8009834 <USBD_CoreFindEP>
 800952a:	4603      	mov	r3, r0
 800952c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800952e:	7dfb      	ldrb	r3, [r7, #23]
 8009530:	2bff      	cmp	r3, #255	@ 0xff
 8009532:	d025      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
 8009534:	7dfb      	ldrb	r3, [r7, #23]
 8009536:	2b00      	cmp	r3, #0
 8009538:	d122      	bne.n	8009580 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009540:	b2db      	uxtb	r3, r3
 8009542:	2b03      	cmp	r3, #3
 8009544:	d11c      	bne.n	8009580 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8009546:	7dfa      	ldrb	r2, [r7, #23]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	32ae      	adds	r2, #174	@ 0xae
 800954c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009550:	695b      	ldr	r3, [r3, #20]
 8009552:	2b00      	cmp	r3, #0
 8009554:	d014      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8009556:	7dfa      	ldrb	r2, [r7, #23]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800955e:	7dfa      	ldrb	r2, [r7, #23]
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	32ae      	adds	r2, #174	@ 0xae
 8009564:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009568:	695b      	ldr	r3, [r3, #20]
 800956a:	7afa      	ldrb	r2, [r7, #11]
 800956c:	4611      	mov	r1, r2
 800956e:	68f8      	ldr	r0, [r7, #12]
 8009570:	4798      	blx	r3
 8009572:	4603      	mov	r3, r0
 8009574:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8009576:	7dbb      	ldrb	r3, [r7, #22]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d001      	beq.n	8009580 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800957c:	7dbb      	ldrb	r3, [r7, #22]
 800957e:	e000      	b.n	8009582 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8009580:	2300      	movs	r3, #0
}
 8009582:	4618      	mov	r0, r3
 8009584:	3718      	adds	r7, #24
 8009586:	46bd      	mov	sp, r7
 8009588:	bd80      	pop	{r7, pc}

0800958a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b084      	sub	sp, #16
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8009592:	2300      	movs	r3, #0
 8009594:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	2201      	movs	r2, #1
 800959a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	2200      	movs	r2, #0
 80095a2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2200      	movs	r2, #0
 80095b0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d014      	beq.n	80095f0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095cc:	685b      	ldr	r3, [r3, #4]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d00e      	beq.n	80095f0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80095d8:	685b      	ldr	r3, [r3, #4]
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	6852      	ldr	r2, [r2, #4]
 80095de:	b2d2      	uxtb	r2, r2
 80095e0:	4611      	mov	r1, r2
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	4798      	blx	r3
 80095e6:	4603      	mov	r3, r0
 80095e8:	2b00      	cmp	r3, #0
 80095ea:	d001      	beq.n	80095f0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80095ec:	2303      	movs	r3, #3
 80095ee:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80095f0:	2340      	movs	r3, #64	@ 0x40
 80095f2:	2200      	movs	r2, #0
 80095f4:	2100      	movs	r1, #0
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 fbdf 	bl	800adba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	2201      	movs	r2, #1
 8009600:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2240      	movs	r2, #64	@ 0x40
 8009608:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800960c:	2340      	movs	r3, #64	@ 0x40
 800960e:	2200      	movs	r2, #0
 8009610:	2180      	movs	r1, #128	@ 0x80
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f001 fbd1 	bl	800adba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	2201      	movs	r2, #1
 800961c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2240      	movs	r2, #64	@ 0x40
 8009622:	621a      	str	r2, [r3, #32]

  return ret;
 8009624:	7bfb      	ldrb	r3, [r7, #15]
}
 8009626:	4618      	mov	r0, r3
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}

0800962e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800962e:	b480      	push	{r7}
 8009630:	b083      	sub	sp, #12
 8009632:	af00      	add	r7, sp, #0
 8009634:	6078      	str	r0, [r7, #4]
 8009636:	460b      	mov	r3, r1
 8009638:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	78fa      	ldrb	r2, [r7, #3]
 800963e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009640:	2300      	movs	r3, #0
}
 8009642:	4618      	mov	r0, r3
 8009644:	370c      	adds	r7, #12
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800964e:	b480      	push	{r7}
 8009650:	b083      	sub	sp, #12
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800965c:	b2db      	uxtb	r3, r3
 800965e:	2b04      	cmp	r3, #4
 8009660:	d006      	beq.n	8009670 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009668:	b2da      	uxtb	r2, r3
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2204      	movs	r2, #4
 8009674:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	370c      	adds	r7, #12
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009686:	b480      	push	{r7}
 8009688:	b083      	sub	sp, #12
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009694:	b2db      	uxtb	r3, r3
 8009696:	2b04      	cmp	r3, #4
 8009698:	d106      	bne.n	80096a8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 80096a0:	b2da      	uxtb	r2, r3
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	370c      	adds	r7, #12
 80096ae:	46bd      	mov	sp, r7
 80096b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b4:	4770      	bx	lr

080096b6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80096b6:	b580      	push	{r7, lr}
 80096b8:	b082      	sub	sp, #8
 80096ba:	af00      	add	r7, sp, #0
 80096bc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80096c4:	b2db      	uxtb	r3, r3
 80096c6:	2b03      	cmp	r3, #3
 80096c8:	d110      	bne.n	80096ec <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d00b      	beq.n	80096ec <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096da:	69db      	ldr	r3, [r3, #28]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d005      	beq.n	80096ec <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80096e6:	69db      	ldr	r3, [r3, #28]
 80096e8:	6878      	ldr	r0, [r7, #4]
 80096ea:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80096ec:	2300      	movs	r3, #0
}
 80096ee:	4618      	mov	r0, r3
 80096f0:	3708      	adds	r7, #8
 80096f2:	46bd      	mov	sp, r7
 80096f4:	bd80      	pop	{r7, pc}

080096f6 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80096f6:	b580      	push	{r7, lr}
 80096f8:	b082      	sub	sp, #8
 80096fa:	af00      	add	r7, sp, #0
 80096fc:	6078      	str	r0, [r7, #4]
 80096fe:	460b      	mov	r3, r1
 8009700:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	32ae      	adds	r2, #174	@ 0xae
 800970c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009710:	2b00      	cmp	r3, #0
 8009712:	d101      	bne.n	8009718 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8009714:	2303      	movs	r3, #3
 8009716:	e01c      	b.n	8009752 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800971e:	b2db      	uxtb	r3, r3
 8009720:	2b03      	cmp	r3, #3
 8009722:	d115      	bne.n	8009750 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	32ae      	adds	r2, #174	@ 0xae
 800972e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009732:	6a1b      	ldr	r3, [r3, #32]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d00b      	beq.n	8009750 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	32ae      	adds	r2, #174	@ 0xae
 8009742:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009746:	6a1b      	ldr	r3, [r3, #32]
 8009748:	78fa      	ldrb	r2, [r7, #3]
 800974a:	4611      	mov	r1, r2
 800974c:	6878      	ldr	r0, [r7, #4]
 800974e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009750:	2300      	movs	r3, #0
}
 8009752:	4618      	mov	r0, r3
 8009754:	3708      	adds	r7, #8
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}

0800975a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800975a:	b580      	push	{r7, lr}
 800975c:	b082      	sub	sp, #8
 800975e:	af00      	add	r7, sp, #0
 8009760:	6078      	str	r0, [r7, #4]
 8009762:	460b      	mov	r3, r1
 8009764:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	32ae      	adds	r2, #174	@ 0xae
 8009770:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d101      	bne.n	800977c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009778:	2303      	movs	r3, #3
 800977a:	e01c      	b.n	80097b6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009782:	b2db      	uxtb	r3, r3
 8009784:	2b03      	cmp	r3, #3
 8009786:	d115      	bne.n	80097b4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	32ae      	adds	r2, #174	@ 0xae
 8009792:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009798:	2b00      	cmp	r3, #0
 800979a:	d00b      	beq.n	80097b4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	32ae      	adds	r2, #174	@ 0xae
 80097a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80097aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80097ac:	78fa      	ldrb	r2, [r7, #3]
 80097ae:	4611      	mov	r1, r2
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80097b4:	2300      	movs	r3, #0
}
 80097b6:	4618      	mov	r0, r3
 80097b8:	3708      	adds	r7, #8
 80097ba:	46bd      	mov	sp, r7
 80097bc:	bd80      	pop	{r7, pc}

080097be <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80097be:	b480      	push	{r7}
 80097c0:	b083      	sub	sp, #12
 80097c2:	af00      	add	r7, sp, #0
 80097c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80097c6:	2300      	movs	r3, #0
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	370c      	adds	r7, #12
 80097cc:	46bd      	mov	sp, r7
 80097ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d2:	4770      	bx	lr

080097d4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2201      	movs	r2, #1
 80097e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d00e      	beq.n	8009810 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80097f8:	685b      	ldr	r3, [r3, #4]
 80097fa:	687a      	ldr	r2, [r7, #4]
 80097fc:	6852      	ldr	r2, [r2, #4]
 80097fe:	b2d2      	uxtb	r2, r2
 8009800:	4611      	mov	r1, r2
 8009802:	6878      	ldr	r0, [r7, #4]
 8009804:	4798      	blx	r3
 8009806:	4603      	mov	r3, r0
 8009808:	2b00      	cmp	r3, #0
 800980a:	d001      	beq.n	8009810 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800980c:	2303      	movs	r3, #3
 800980e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009810:	7bfb      	ldrb	r3, [r7, #15]
}
 8009812:	4618      	mov	r0, r3
 8009814:	3710      	adds	r7, #16
 8009816:	46bd      	mov	sp, r7
 8009818:	bd80      	pop	{r7, pc}

0800981a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800981a:	b480      	push	{r7}
 800981c:	b083      	sub	sp, #12
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
 8009822:	460b      	mov	r3, r1
 8009824:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009826:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009828:	4618      	mov	r0, r3
 800982a:	370c      	adds	r7, #12
 800982c:	46bd      	mov	sp, r7
 800982e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009832:	4770      	bx	lr

08009834 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009834:	b480      	push	{r7}
 8009836:	b083      	sub	sp, #12
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	460b      	mov	r3, r1
 800983e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009840:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009842:	4618      	mov	r0, r3
 8009844:	370c      	adds	r7, #12
 8009846:	46bd      	mov	sp, r7
 8009848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984c:	4770      	bx	lr

0800984e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800984e:	b580      	push	{r7, lr}
 8009850:	b086      	sub	sp, #24
 8009852:	af00      	add	r7, sp, #0
 8009854:	6078      	str	r0, [r7, #4]
 8009856:	460b      	mov	r3, r1
 8009858:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8009862:	2300      	movs	r3, #0
 8009864:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	885b      	ldrh	r3, [r3, #2]
 800986a:	b29b      	uxth	r3, r3
 800986c:	68fa      	ldr	r2, [r7, #12]
 800986e:	7812      	ldrb	r2, [r2, #0]
 8009870:	4293      	cmp	r3, r2
 8009872:	d91f      	bls.n	80098b4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800987a:	e013      	b.n	80098a4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800987c:	f107 030a 	add.w	r3, r7, #10
 8009880:	4619      	mov	r1, r3
 8009882:	6978      	ldr	r0, [r7, #20]
 8009884:	f000 f81b 	bl	80098be <USBD_GetNextDesc>
 8009888:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800988a:	697b      	ldr	r3, [r7, #20]
 800988c:	785b      	ldrb	r3, [r3, #1]
 800988e:	2b05      	cmp	r3, #5
 8009890:	d108      	bne.n	80098a4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009892:	697b      	ldr	r3, [r7, #20]
 8009894:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009896:	693b      	ldr	r3, [r7, #16]
 8009898:	789b      	ldrb	r3, [r3, #2]
 800989a:	78fa      	ldrb	r2, [r7, #3]
 800989c:	429a      	cmp	r2, r3
 800989e:	d008      	beq.n	80098b2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80098a0:	2300      	movs	r3, #0
 80098a2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	885b      	ldrh	r3, [r3, #2]
 80098a8:	b29a      	uxth	r2, r3
 80098aa:	897b      	ldrh	r3, [r7, #10]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d8e5      	bhi.n	800987c <USBD_GetEpDesc+0x2e>
 80098b0:	e000      	b.n	80098b4 <USBD_GetEpDesc+0x66>
          break;
 80098b2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80098b4:	693b      	ldr	r3, [r7, #16]
}
 80098b6:	4618      	mov	r0, r3
 80098b8:	3718      	adds	r7, #24
 80098ba:	46bd      	mov	sp, r7
 80098bc:	bd80      	pop	{r7, pc}

080098be <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80098be:	b480      	push	{r7}
 80098c0:	b085      	sub	sp, #20
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	6078      	str	r0, [r7, #4]
 80098c6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	881b      	ldrh	r3, [r3, #0]
 80098d0:	68fa      	ldr	r2, [r7, #12]
 80098d2:	7812      	ldrb	r2, [r2, #0]
 80098d4:	4413      	add	r3, r2
 80098d6:	b29a      	uxth	r2, r3
 80098d8:	683b      	ldr	r3, [r7, #0]
 80098da:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	4413      	add	r3, r2
 80098e6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80098e8:	68fb      	ldr	r3, [r7, #12]
}
 80098ea:	4618      	mov	r0, r3
 80098ec:	3714      	adds	r7, #20
 80098ee:	46bd      	mov	sp, r7
 80098f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f4:	4770      	bx	lr

080098f6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80098f6:	b480      	push	{r7}
 80098f8:	b087      	sub	sp, #28
 80098fa:	af00      	add	r7, sp, #0
 80098fc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8009902:	697b      	ldr	r3, [r7, #20]
 8009904:	781b      	ldrb	r3, [r3, #0]
 8009906:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8009908:	697b      	ldr	r3, [r7, #20]
 800990a:	3301      	adds	r3, #1
 800990c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800990e:	697b      	ldr	r3, [r7, #20]
 8009910:	781b      	ldrb	r3, [r3, #0]
 8009912:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8009914:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8009918:	021b      	lsls	r3, r3, #8
 800991a:	b21a      	sxth	r2, r3
 800991c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009920:	4313      	orrs	r3, r2
 8009922:	b21b      	sxth	r3, r3
 8009924:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009926:	89fb      	ldrh	r3, [r7, #14]
}
 8009928:	4618      	mov	r0, r3
 800992a:	371c      	adds	r7, #28
 800992c:	46bd      	mov	sp, r7
 800992e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009932:	4770      	bx	lr

08009934 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009934:	b580      	push	{r7, lr}
 8009936:	b084      	sub	sp, #16
 8009938:	af00      	add	r7, sp, #0
 800993a:	6078      	str	r0, [r7, #4]
 800993c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	781b      	ldrb	r3, [r3, #0]
 8009946:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800994a:	2b40      	cmp	r3, #64	@ 0x40
 800994c:	d005      	beq.n	800995a <USBD_StdDevReq+0x26>
 800994e:	2b40      	cmp	r3, #64	@ 0x40
 8009950:	d857      	bhi.n	8009a02 <USBD_StdDevReq+0xce>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00f      	beq.n	8009976 <USBD_StdDevReq+0x42>
 8009956:	2b20      	cmp	r3, #32
 8009958:	d153      	bne.n	8009a02 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	32ae      	adds	r2, #174	@ 0xae
 8009964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009968:	689b      	ldr	r3, [r3, #8]
 800996a:	6839      	ldr	r1, [r7, #0]
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
 8009970:	4603      	mov	r3, r0
 8009972:	73fb      	strb	r3, [r7, #15]
      break;
 8009974:	e04a      	b.n	8009a0c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	785b      	ldrb	r3, [r3, #1]
 800997a:	2b09      	cmp	r3, #9
 800997c:	d83b      	bhi.n	80099f6 <USBD_StdDevReq+0xc2>
 800997e:	a201      	add	r2, pc, #4	@ (adr r2, 8009984 <USBD_StdDevReq+0x50>)
 8009980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009984:	080099d9 	.word	0x080099d9
 8009988:	080099ed 	.word	0x080099ed
 800998c:	080099f7 	.word	0x080099f7
 8009990:	080099e3 	.word	0x080099e3
 8009994:	080099f7 	.word	0x080099f7
 8009998:	080099b7 	.word	0x080099b7
 800999c:	080099ad 	.word	0x080099ad
 80099a0:	080099f7 	.word	0x080099f7
 80099a4:	080099cf 	.word	0x080099cf
 80099a8:	080099c1 	.word	0x080099c1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80099ac:	6839      	ldr	r1, [r7, #0]
 80099ae:	6878      	ldr	r0, [r7, #4]
 80099b0:	f000 fa3c 	bl	8009e2c <USBD_GetDescriptor>
          break;
 80099b4:	e024      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80099b6:	6839      	ldr	r1, [r7, #0]
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 fba1 	bl	800a100 <USBD_SetAddress>
          break;
 80099be:	e01f      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80099c0:	6839      	ldr	r1, [r7, #0]
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	f000 fbe0 	bl	800a188 <USBD_SetConfig>
 80099c8:	4603      	mov	r3, r0
 80099ca:	73fb      	strb	r3, [r7, #15]
          break;
 80099cc:	e018      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80099ce:	6839      	ldr	r1, [r7, #0]
 80099d0:	6878      	ldr	r0, [r7, #4]
 80099d2:	f000 fc83 	bl	800a2dc <USBD_GetConfig>
          break;
 80099d6:	e013      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80099d8:	6839      	ldr	r1, [r7, #0]
 80099da:	6878      	ldr	r0, [r7, #4]
 80099dc:	f000 fcb4 	bl	800a348 <USBD_GetStatus>
          break;
 80099e0:	e00e      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80099e2:	6839      	ldr	r1, [r7, #0]
 80099e4:	6878      	ldr	r0, [r7, #4]
 80099e6:	f000 fce3 	bl	800a3b0 <USBD_SetFeature>
          break;
 80099ea:	e009      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80099ec:	6839      	ldr	r1, [r7, #0]
 80099ee:	6878      	ldr	r0, [r7, #4]
 80099f0:	f000 fd07 	bl	800a402 <USBD_ClrFeature>
          break;
 80099f4:	e004      	b.n	8009a00 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80099f6:	6839      	ldr	r1, [r7, #0]
 80099f8:	6878      	ldr	r0, [r7, #4]
 80099fa:	f000 fd5e 	bl	800a4ba <USBD_CtlError>
          break;
 80099fe:	bf00      	nop
      }
      break;
 8009a00:	e004      	b.n	8009a0c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8009a02:	6839      	ldr	r1, [r7, #0]
 8009a04:	6878      	ldr	r0, [r7, #4]
 8009a06:	f000 fd58 	bl	800a4ba <USBD_CtlError>
      break;
 8009a0a:	bf00      	nop
  }

  return ret;
 8009a0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3710      	adds	r7, #16
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop

08009a18 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	b084      	sub	sp, #16
 8009a1c:	af00      	add	r7, sp, #0
 8009a1e:	6078      	str	r0, [r7, #4]
 8009a20:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009a22:	2300      	movs	r3, #0
 8009a24:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009a26:	683b      	ldr	r3, [r7, #0]
 8009a28:	781b      	ldrb	r3, [r3, #0]
 8009a2a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009a2e:	2b40      	cmp	r3, #64	@ 0x40
 8009a30:	d005      	beq.n	8009a3e <USBD_StdItfReq+0x26>
 8009a32:	2b40      	cmp	r3, #64	@ 0x40
 8009a34:	d852      	bhi.n	8009adc <USBD_StdItfReq+0xc4>
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d001      	beq.n	8009a3e <USBD_StdItfReq+0x26>
 8009a3a:	2b20      	cmp	r3, #32
 8009a3c:	d14e      	bne.n	8009adc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009a44:	b2db      	uxtb	r3, r3
 8009a46:	3b01      	subs	r3, #1
 8009a48:	2b02      	cmp	r3, #2
 8009a4a:	d840      	bhi.n	8009ace <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	889b      	ldrh	r3, [r3, #4]
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d836      	bhi.n	8009ac4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009a56:	683b      	ldr	r3, [r7, #0]
 8009a58:	889b      	ldrh	r3, [r3, #4]
 8009a5a:	b2db      	uxtb	r3, r3
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f7ff fedb 	bl	800981a <USBD_CoreFindIF>
 8009a64:	4603      	mov	r3, r0
 8009a66:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009a68:	7bbb      	ldrb	r3, [r7, #14]
 8009a6a:	2bff      	cmp	r3, #255	@ 0xff
 8009a6c:	d01d      	beq.n	8009aaa <USBD_StdItfReq+0x92>
 8009a6e:	7bbb      	ldrb	r3, [r7, #14]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d11a      	bne.n	8009aaa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009a74:	7bba      	ldrb	r2, [r7, #14]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	32ae      	adds	r2, #174	@ 0xae
 8009a7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d00f      	beq.n	8009aa4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009a84:	7bba      	ldrb	r2, [r7, #14]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009a8c:	7bba      	ldrb	r2, [r7, #14]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	32ae      	adds	r2, #174	@ 0xae
 8009a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009a96:	689b      	ldr	r3, [r3, #8]
 8009a98:	6839      	ldr	r1, [r7, #0]
 8009a9a:	6878      	ldr	r0, [r7, #4]
 8009a9c:	4798      	blx	r3
 8009a9e:	4603      	mov	r3, r0
 8009aa0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aa2:	e004      	b.n	8009aae <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009aa4:	2303      	movs	r3, #3
 8009aa6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009aa8:	e001      	b.n	8009aae <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8009aaa:	2303      	movs	r3, #3
 8009aac:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8009aae:	683b      	ldr	r3, [r7, #0]
 8009ab0:	88db      	ldrh	r3, [r3, #6]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d110      	bne.n	8009ad8 <USBD_StdItfReq+0xc0>
 8009ab6:	7bfb      	ldrb	r3, [r7, #15]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d10d      	bne.n	8009ad8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fdd3 	bl	800a668 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8009ac2:	e009      	b.n	8009ad8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 fcf7 	bl	800a4ba <USBD_CtlError>
          break;
 8009acc:	e004      	b.n	8009ad8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8009ace:	6839      	ldr	r1, [r7, #0]
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f000 fcf2 	bl	800a4ba <USBD_CtlError>
          break;
 8009ad6:	e000      	b.n	8009ada <USBD_StdItfReq+0xc2>
          break;
 8009ad8:	bf00      	nop
      }
      break;
 8009ada:	e004      	b.n	8009ae6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8009adc:	6839      	ldr	r1, [r7, #0]
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 fceb 	bl	800a4ba <USBD_CtlError>
      break;
 8009ae4:	bf00      	nop
  }

  return ret;
 8009ae6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3710      	adds	r7, #16
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b084      	sub	sp, #16
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]
 8009af8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8009afa:	2300      	movs	r3, #0
 8009afc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	889b      	ldrh	r3, [r3, #4]
 8009b02:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	781b      	ldrb	r3, [r3, #0]
 8009b08:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009b0c:	2b40      	cmp	r3, #64	@ 0x40
 8009b0e:	d007      	beq.n	8009b20 <USBD_StdEPReq+0x30>
 8009b10:	2b40      	cmp	r3, #64	@ 0x40
 8009b12:	f200 817f 	bhi.w	8009e14 <USBD_StdEPReq+0x324>
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d02a      	beq.n	8009b70 <USBD_StdEPReq+0x80>
 8009b1a:	2b20      	cmp	r3, #32
 8009b1c:	f040 817a 	bne.w	8009e14 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	4619      	mov	r1, r3
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f7ff fe85 	bl	8009834 <USBD_CoreFindEP>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009b2e:	7b7b      	ldrb	r3, [r7, #13]
 8009b30:	2bff      	cmp	r3, #255	@ 0xff
 8009b32:	f000 8174 	beq.w	8009e1e <USBD_StdEPReq+0x32e>
 8009b36:	7b7b      	ldrb	r3, [r7, #13]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	f040 8170 	bne.w	8009e1e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8009b3e:	7b7a      	ldrb	r2, [r7, #13]
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009b46:	7b7a      	ldrb	r2, [r7, #13]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	32ae      	adds	r2, #174	@ 0xae
 8009b4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b50:	689b      	ldr	r3, [r3, #8]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f000 8163 	beq.w	8009e1e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009b58:	7b7a      	ldrb	r2, [r7, #13]
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	32ae      	adds	r2, #174	@ 0xae
 8009b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	6839      	ldr	r1, [r7, #0]
 8009b66:	6878      	ldr	r0, [r7, #4]
 8009b68:	4798      	blx	r3
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009b6e:	e156      	b.n	8009e1e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	785b      	ldrb	r3, [r3, #1]
 8009b74:	2b03      	cmp	r3, #3
 8009b76:	d008      	beq.n	8009b8a <USBD_StdEPReq+0x9a>
 8009b78:	2b03      	cmp	r3, #3
 8009b7a:	f300 8145 	bgt.w	8009e08 <USBD_StdEPReq+0x318>
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	f000 809b 	beq.w	8009cba <USBD_StdEPReq+0x1ca>
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d03c      	beq.n	8009c02 <USBD_StdEPReq+0x112>
 8009b88:	e13e      	b.n	8009e08 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009b90:	b2db      	uxtb	r3, r3
 8009b92:	2b02      	cmp	r3, #2
 8009b94:	d002      	beq.n	8009b9c <USBD_StdEPReq+0xac>
 8009b96:	2b03      	cmp	r3, #3
 8009b98:	d016      	beq.n	8009bc8 <USBD_StdEPReq+0xd8>
 8009b9a:	e02c      	b.n	8009bf6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d00d      	beq.n	8009bbe <USBD_StdEPReq+0xce>
 8009ba2:	7bbb      	ldrb	r3, [r7, #14]
 8009ba4:	2b80      	cmp	r3, #128	@ 0x80
 8009ba6:	d00a      	beq.n	8009bbe <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009ba8:	7bbb      	ldrb	r3, [r7, #14]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 f949 	bl	800ae44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009bb2:	2180      	movs	r1, #128	@ 0x80
 8009bb4:	6878      	ldr	r0, [r7, #4]
 8009bb6:	f001 f945 	bl	800ae44 <USBD_LL_StallEP>
 8009bba:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009bbc:	e020      	b.n	8009c00 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8009bbe:	6839      	ldr	r1, [r7, #0]
 8009bc0:	6878      	ldr	r0, [r7, #4]
 8009bc2:	f000 fc7a 	bl	800a4ba <USBD_CtlError>
              break;
 8009bc6:	e01b      	b.n	8009c00 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	885b      	ldrh	r3, [r3, #2]
 8009bcc:	2b00      	cmp	r3, #0
 8009bce:	d10e      	bne.n	8009bee <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8009bd0:	7bbb      	ldrb	r3, [r7, #14]
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d00b      	beq.n	8009bee <USBD_StdEPReq+0xfe>
 8009bd6:	7bbb      	ldrb	r3, [r7, #14]
 8009bd8:	2b80      	cmp	r3, #128	@ 0x80
 8009bda:	d008      	beq.n	8009bee <USBD_StdEPReq+0xfe>
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	88db      	ldrh	r3, [r3, #6]
 8009be0:	2b00      	cmp	r3, #0
 8009be2:	d104      	bne.n	8009bee <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8009be4:	7bbb      	ldrb	r3, [r7, #14]
 8009be6:	4619      	mov	r1, r3
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 f92b 	bl	800ae44 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8009bee:	6878      	ldr	r0, [r7, #4]
 8009bf0:	f000 fd3a 	bl	800a668 <USBD_CtlSendStatus>

              break;
 8009bf4:	e004      	b.n	8009c00 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8009bf6:	6839      	ldr	r1, [r7, #0]
 8009bf8:	6878      	ldr	r0, [r7, #4]
 8009bfa:	f000 fc5e 	bl	800a4ba <USBD_CtlError>
              break;
 8009bfe:	bf00      	nop
          }
          break;
 8009c00:	e107      	b.n	8009e12 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009c08:	b2db      	uxtb	r3, r3
 8009c0a:	2b02      	cmp	r3, #2
 8009c0c:	d002      	beq.n	8009c14 <USBD_StdEPReq+0x124>
 8009c0e:	2b03      	cmp	r3, #3
 8009c10:	d016      	beq.n	8009c40 <USBD_StdEPReq+0x150>
 8009c12:	e04b      	b.n	8009cac <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009c14:	7bbb      	ldrb	r3, [r7, #14]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d00d      	beq.n	8009c36 <USBD_StdEPReq+0x146>
 8009c1a:	7bbb      	ldrb	r3, [r7, #14]
 8009c1c:	2b80      	cmp	r3, #128	@ 0x80
 8009c1e:	d00a      	beq.n	8009c36 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	4619      	mov	r1, r3
 8009c24:	6878      	ldr	r0, [r7, #4]
 8009c26:	f001 f90d 	bl	800ae44 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009c2a:	2180      	movs	r1, #128	@ 0x80
 8009c2c:	6878      	ldr	r0, [r7, #4]
 8009c2e:	f001 f909 	bl	800ae44 <USBD_LL_StallEP>
 8009c32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009c34:	e040      	b.n	8009cb8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009c36:	6839      	ldr	r1, [r7, #0]
 8009c38:	6878      	ldr	r0, [r7, #4]
 8009c3a:	f000 fc3e 	bl	800a4ba <USBD_CtlError>
              break;
 8009c3e:	e03b      	b.n	8009cb8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009c40:	683b      	ldr	r3, [r7, #0]
 8009c42:	885b      	ldrh	r3, [r3, #2]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d136      	bne.n	8009cb6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009c48:	7bbb      	ldrb	r3, [r7, #14]
 8009c4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d004      	beq.n	8009c5c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	4619      	mov	r1, r3
 8009c56:	6878      	ldr	r0, [r7, #4]
 8009c58:	f001 f913 	bl	800ae82 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fd03 	bl	800a668 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009c62:	7bbb      	ldrb	r3, [r7, #14]
 8009c64:	4619      	mov	r1, r3
 8009c66:	6878      	ldr	r0, [r7, #4]
 8009c68:	f7ff fde4 	bl	8009834 <USBD_CoreFindEP>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009c70:	7b7b      	ldrb	r3, [r7, #13]
 8009c72:	2bff      	cmp	r3, #255	@ 0xff
 8009c74:	d01f      	beq.n	8009cb6 <USBD_StdEPReq+0x1c6>
 8009c76:	7b7b      	ldrb	r3, [r7, #13]
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d11c      	bne.n	8009cb6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8009c7c:	7b7a      	ldrb	r2, [r7, #13]
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009c84:	7b7a      	ldrb	r2, [r7, #13]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	32ae      	adds	r2, #174	@ 0xae
 8009c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c8e:	689b      	ldr	r3, [r3, #8]
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d010      	beq.n	8009cb6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009c94:	7b7a      	ldrb	r2, [r7, #13]
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	32ae      	adds	r2, #174	@ 0xae
 8009c9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c9e:	689b      	ldr	r3, [r3, #8]
 8009ca0:	6839      	ldr	r1, [r7, #0]
 8009ca2:	6878      	ldr	r0, [r7, #4]
 8009ca4:	4798      	blx	r3
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8009caa:	e004      	b.n	8009cb6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8009cac:	6839      	ldr	r1, [r7, #0]
 8009cae:	6878      	ldr	r0, [r7, #4]
 8009cb0:	f000 fc03 	bl	800a4ba <USBD_CtlError>
              break;
 8009cb4:	e000      	b.n	8009cb8 <USBD_StdEPReq+0x1c8>
              break;
 8009cb6:	bf00      	nop
          }
          break;
 8009cb8:	e0ab      	b.n	8009e12 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009cc0:	b2db      	uxtb	r3, r3
 8009cc2:	2b02      	cmp	r3, #2
 8009cc4:	d002      	beq.n	8009ccc <USBD_StdEPReq+0x1dc>
 8009cc6:	2b03      	cmp	r3, #3
 8009cc8:	d032      	beq.n	8009d30 <USBD_StdEPReq+0x240>
 8009cca:	e097      	b.n	8009dfc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8009ccc:	7bbb      	ldrb	r3, [r7, #14]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d007      	beq.n	8009ce2 <USBD_StdEPReq+0x1f2>
 8009cd2:	7bbb      	ldrb	r3, [r7, #14]
 8009cd4:	2b80      	cmp	r3, #128	@ 0x80
 8009cd6:	d004      	beq.n	8009ce2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8009cd8:	6839      	ldr	r1, [r7, #0]
 8009cda:	6878      	ldr	r0, [r7, #4]
 8009cdc:	f000 fbed 	bl	800a4ba <USBD_CtlError>
                break;
 8009ce0:	e091      	b.n	8009e06 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009ce2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	da0b      	bge.n	8009d02 <USBD_StdEPReq+0x212>
 8009cea:	7bbb      	ldrb	r3, [r7, #14]
 8009cec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009cf0:	4613      	mov	r3, r2
 8009cf2:	009b      	lsls	r3, r3, #2
 8009cf4:	4413      	add	r3, r2
 8009cf6:	009b      	lsls	r3, r3, #2
 8009cf8:	3310      	adds	r3, #16
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	4413      	add	r3, r2
 8009cfe:	3304      	adds	r3, #4
 8009d00:	e00b      	b.n	8009d1a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009d02:	7bbb      	ldrb	r3, [r7, #14]
 8009d04:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d08:	4613      	mov	r3, r2
 8009d0a:	009b      	lsls	r3, r3, #2
 8009d0c:	4413      	add	r3, r2
 8009d0e:	009b      	lsls	r3, r3, #2
 8009d10:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	4413      	add	r3, r2
 8009d18:	3304      	adds	r3, #4
 8009d1a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009d22:	68bb      	ldr	r3, [r7, #8]
 8009d24:	2202      	movs	r2, #2
 8009d26:	4619      	mov	r1, r3
 8009d28:	6878      	ldr	r0, [r7, #4]
 8009d2a:	f000 fc43 	bl	800a5b4 <USBD_CtlSendData>
              break;
 8009d2e:	e06a      	b.n	8009e06 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009d30:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da11      	bge.n	8009d5c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009d38:	7bbb      	ldrb	r3, [r7, #14]
 8009d3a:	f003 020f 	and.w	r2, r3, #15
 8009d3e:	6879      	ldr	r1, [r7, #4]
 8009d40:	4613      	mov	r3, r2
 8009d42:	009b      	lsls	r3, r3, #2
 8009d44:	4413      	add	r3, r2
 8009d46:	009b      	lsls	r3, r3, #2
 8009d48:	440b      	add	r3, r1
 8009d4a:	3324      	adds	r3, #36	@ 0x24
 8009d4c:	881b      	ldrh	r3, [r3, #0]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d117      	bne.n	8009d82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d52:	6839      	ldr	r1, [r7, #0]
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	f000 fbb0 	bl	800a4ba <USBD_CtlError>
                  break;
 8009d5a:	e054      	b.n	8009e06 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8009d5c:	7bbb      	ldrb	r3, [r7, #14]
 8009d5e:	f003 020f 	and.w	r2, r3, #15
 8009d62:	6879      	ldr	r1, [r7, #4]
 8009d64:	4613      	mov	r3, r2
 8009d66:	009b      	lsls	r3, r3, #2
 8009d68:	4413      	add	r3, r2
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	440b      	add	r3, r1
 8009d6e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009d72:	881b      	ldrh	r3, [r3, #0]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d104      	bne.n	8009d82 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009d78:	6839      	ldr	r1, [r7, #0]
 8009d7a:	6878      	ldr	r0, [r7, #4]
 8009d7c:	f000 fb9d 	bl	800a4ba <USBD_CtlError>
                  break;
 8009d80:	e041      	b.n	8009e06 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009d82:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	da0b      	bge.n	8009da2 <USBD_StdEPReq+0x2b2>
 8009d8a:	7bbb      	ldrb	r3, [r7, #14]
 8009d8c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8009d90:	4613      	mov	r3, r2
 8009d92:	009b      	lsls	r3, r3, #2
 8009d94:	4413      	add	r3, r2
 8009d96:	009b      	lsls	r3, r3, #2
 8009d98:	3310      	adds	r3, #16
 8009d9a:	687a      	ldr	r2, [r7, #4]
 8009d9c:	4413      	add	r3, r2
 8009d9e:	3304      	adds	r3, #4
 8009da0:	e00b      	b.n	8009dba <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009da2:	7bbb      	ldrb	r3, [r7, #14]
 8009da4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009da8:	4613      	mov	r3, r2
 8009daa:	009b      	lsls	r3, r3, #2
 8009dac:	4413      	add	r3, r2
 8009dae:	009b      	lsls	r3, r3, #2
 8009db0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	4413      	add	r3, r2
 8009db8:	3304      	adds	r3, #4
 8009dba:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8009dbc:	7bbb      	ldrb	r3, [r7, #14]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d002      	beq.n	8009dc8 <USBD_StdEPReq+0x2d8>
 8009dc2:	7bbb      	ldrb	r3, [r7, #14]
 8009dc4:	2b80      	cmp	r3, #128	@ 0x80
 8009dc6:	d103      	bne.n	8009dd0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
 8009dce:	e00e      	b.n	8009dee <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8009dd0:	7bbb      	ldrb	r3, [r7, #14]
 8009dd2:	4619      	mov	r1, r3
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f001 f873 	bl	800aec0 <USBD_LL_IsStallEP>
 8009dda:	4603      	mov	r3, r0
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d003      	beq.n	8009de8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	2201      	movs	r2, #1
 8009de4:	601a      	str	r2, [r3, #0]
 8009de6:	e002      	b.n	8009dee <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8009de8:	68bb      	ldr	r3, [r7, #8]
 8009dea:	2200      	movs	r2, #0
 8009dec:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009dee:	68bb      	ldr	r3, [r7, #8]
 8009df0:	2202      	movs	r2, #2
 8009df2:	4619      	mov	r1, r3
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	f000 fbdd 	bl	800a5b4 <USBD_CtlSendData>
              break;
 8009dfa:	e004      	b.n	8009e06 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8009dfc:	6839      	ldr	r1, [r7, #0]
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 fb5b 	bl	800a4ba <USBD_CtlError>
              break;
 8009e04:	bf00      	nop
          }
          break;
 8009e06:	e004      	b.n	8009e12 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8009e08:	6839      	ldr	r1, [r7, #0]
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 fb55 	bl	800a4ba <USBD_CtlError>
          break;
 8009e10:	bf00      	nop
      }
      break;
 8009e12:	e005      	b.n	8009e20 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8009e14:	6839      	ldr	r1, [r7, #0]
 8009e16:	6878      	ldr	r0, [r7, #4]
 8009e18:	f000 fb4f 	bl	800a4ba <USBD_CtlError>
      break;
 8009e1c:	e000      	b.n	8009e20 <USBD_StdEPReq+0x330>
      break;
 8009e1e:	bf00      	nop
  }

  return ret;
 8009e20:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e22:	4618      	mov	r0, r3
 8009e24:	3710      	adds	r7, #16
 8009e26:	46bd      	mov	sp, r7
 8009e28:	bd80      	pop	{r7, pc}
	...

08009e2c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b084      	sub	sp, #16
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009e36:	2300      	movs	r3, #0
 8009e38:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009e3e:	2300      	movs	r3, #0
 8009e40:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	885b      	ldrh	r3, [r3, #2]
 8009e46:	0a1b      	lsrs	r3, r3, #8
 8009e48:	b29b      	uxth	r3, r3
 8009e4a:	3b01      	subs	r3, #1
 8009e4c:	2b06      	cmp	r3, #6
 8009e4e:	f200 8128 	bhi.w	800a0a2 <USBD_GetDescriptor+0x276>
 8009e52:	a201      	add	r2, pc, #4	@ (adr r2, 8009e58 <USBD_GetDescriptor+0x2c>)
 8009e54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e58:	08009e75 	.word	0x08009e75
 8009e5c:	08009e8d 	.word	0x08009e8d
 8009e60:	08009ecd 	.word	0x08009ecd
 8009e64:	0800a0a3 	.word	0x0800a0a3
 8009e68:	0800a0a3 	.word	0x0800a0a3
 8009e6c:	0800a043 	.word	0x0800a043
 8009e70:	0800a06f 	.word	0x0800a06f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	7c12      	ldrb	r2, [r2, #16]
 8009e80:	f107 0108 	add.w	r1, r7, #8
 8009e84:	4610      	mov	r0, r2
 8009e86:	4798      	blx	r3
 8009e88:	60f8      	str	r0, [r7, #12]
      break;
 8009e8a:	e112      	b.n	800a0b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	7c1b      	ldrb	r3, [r3, #16]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d10d      	bne.n	8009eb0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e9c:	f107 0208 	add.w	r2, r7, #8
 8009ea0:	4610      	mov	r0, r2
 8009ea2:	4798      	blx	r3
 8009ea4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	2202      	movs	r2, #2
 8009eac:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009eae:	e100      	b.n	800a0b2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009eb8:	f107 0208 	add.w	r2, r7, #8
 8009ebc:	4610      	mov	r0, r2
 8009ebe:	4798      	blx	r3
 8009ec0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	2202      	movs	r2, #2
 8009ec8:	701a      	strb	r2, [r3, #0]
      break;
 8009eca:	e0f2      	b.n	800a0b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009ecc:	683b      	ldr	r3, [r7, #0]
 8009ece:	885b      	ldrh	r3, [r3, #2]
 8009ed0:	b2db      	uxtb	r3, r3
 8009ed2:	2b05      	cmp	r3, #5
 8009ed4:	f200 80ac 	bhi.w	800a030 <USBD_GetDescriptor+0x204>
 8009ed8:	a201      	add	r2, pc, #4	@ (adr r2, 8009ee0 <USBD_GetDescriptor+0xb4>)
 8009eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ede:	bf00      	nop
 8009ee0:	08009ef9 	.word	0x08009ef9
 8009ee4:	08009f2d 	.word	0x08009f2d
 8009ee8:	08009f61 	.word	0x08009f61
 8009eec:	08009f95 	.word	0x08009f95
 8009ef0:	08009fc9 	.word	0x08009fc9
 8009ef4:	08009ffd 	.word	0x08009ffd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009efe:	685b      	ldr	r3, [r3, #4]
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d00b      	beq.n	8009f1c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f0a:	685b      	ldr	r3, [r3, #4]
 8009f0c:	687a      	ldr	r2, [r7, #4]
 8009f0e:	7c12      	ldrb	r2, [r2, #16]
 8009f10:	f107 0108 	add.w	r1, r7, #8
 8009f14:	4610      	mov	r0, r2
 8009f16:	4798      	blx	r3
 8009f18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f1a:	e091      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f1c:	6839      	ldr	r1, [r7, #0]
 8009f1e:	6878      	ldr	r0, [r7, #4]
 8009f20:	f000 facb 	bl	800a4ba <USBD_CtlError>
            err++;
 8009f24:	7afb      	ldrb	r3, [r7, #11]
 8009f26:	3301      	adds	r3, #1
 8009f28:	72fb      	strb	r3, [r7, #11]
          break;
 8009f2a:	e089      	b.n	800a040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f32:	689b      	ldr	r3, [r3, #8]
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d00b      	beq.n	8009f50 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f3e:	689b      	ldr	r3, [r3, #8]
 8009f40:	687a      	ldr	r2, [r7, #4]
 8009f42:	7c12      	ldrb	r2, [r2, #16]
 8009f44:	f107 0108 	add.w	r1, r7, #8
 8009f48:	4610      	mov	r0, r2
 8009f4a:	4798      	blx	r3
 8009f4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f4e:	e077      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f50:	6839      	ldr	r1, [r7, #0]
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f000 fab1 	bl	800a4ba <USBD_CtlError>
            err++;
 8009f58:	7afb      	ldrb	r3, [r7, #11]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	72fb      	strb	r3, [r7, #11]
          break;
 8009f5e:	e06f      	b.n	800a040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d00b      	beq.n	8009f84 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	7c12      	ldrb	r2, [r2, #16]
 8009f78:	f107 0108 	add.w	r1, r7, #8
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	4798      	blx	r3
 8009f80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009f82:	e05d      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009f84:	6839      	ldr	r1, [r7, #0]
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 fa97 	bl	800a4ba <USBD_CtlError>
            err++;
 8009f8c:	7afb      	ldrb	r3, [r7, #11]
 8009f8e:	3301      	adds	r3, #1
 8009f90:	72fb      	strb	r3, [r7, #11]
          break;
 8009f92:	e055      	b.n	800a040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009f9a:	691b      	ldr	r3, [r3, #16]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d00b      	beq.n	8009fb8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fa6:	691b      	ldr	r3, [r3, #16]
 8009fa8:	687a      	ldr	r2, [r7, #4]
 8009faa:	7c12      	ldrb	r2, [r2, #16]
 8009fac:	f107 0108 	add.w	r1, r7, #8
 8009fb0:	4610      	mov	r0, r2
 8009fb2:	4798      	blx	r3
 8009fb4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fb6:	e043      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fb8:	6839      	ldr	r1, [r7, #0]
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 fa7d 	bl	800a4ba <USBD_CtlError>
            err++;
 8009fc0:	7afb      	ldrb	r3, [r7, #11]
 8009fc2:	3301      	adds	r3, #1
 8009fc4:	72fb      	strb	r3, [r7, #11]
          break;
 8009fc6:	e03b      	b.n	800a040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fce:	695b      	ldr	r3, [r3, #20]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d00b      	beq.n	8009fec <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8009fda:	695b      	ldr	r3, [r3, #20]
 8009fdc:	687a      	ldr	r2, [r7, #4]
 8009fde:	7c12      	ldrb	r2, [r2, #16]
 8009fe0:	f107 0108 	add.w	r1, r7, #8
 8009fe4:	4610      	mov	r0, r2
 8009fe6:	4798      	blx	r3
 8009fe8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009fea:	e029      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009fec:	6839      	ldr	r1, [r7, #0]
 8009fee:	6878      	ldr	r0, [r7, #4]
 8009ff0:	f000 fa63 	bl	800a4ba <USBD_CtlError>
            err++;
 8009ff4:	7afb      	ldrb	r3, [r7, #11]
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	72fb      	strb	r3, [r7, #11]
          break;
 8009ffa:	e021      	b.n	800a040 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a002:	699b      	ldr	r3, [r3, #24]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d00b      	beq.n	800a020 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800a00e:	699b      	ldr	r3, [r3, #24]
 800a010:	687a      	ldr	r2, [r7, #4]
 800a012:	7c12      	ldrb	r2, [r2, #16]
 800a014:	f107 0108 	add.w	r1, r7, #8
 800a018:	4610      	mov	r0, r2
 800a01a:	4798      	blx	r3
 800a01c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800a01e:	e00f      	b.n	800a040 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800a020:	6839      	ldr	r1, [r7, #0]
 800a022:	6878      	ldr	r0, [r7, #4]
 800a024:	f000 fa49 	bl	800a4ba <USBD_CtlError>
            err++;
 800a028:	7afb      	ldrb	r3, [r7, #11]
 800a02a:	3301      	adds	r3, #1
 800a02c:	72fb      	strb	r3, [r7, #11]
          break;
 800a02e:	e007      	b.n	800a040 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800a030:	6839      	ldr	r1, [r7, #0]
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fa41 	bl	800a4ba <USBD_CtlError>
          err++;
 800a038:	7afb      	ldrb	r3, [r7, #11]
 800a03a:	3301      	adds	r3, #1
 800a03c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800a03e:	bf00      	nop
      }
      break;
 800a040:	e037      	b.n	800a0b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	7c1b      	ldrb	r3, [r3, #16]
 800a046:	2b00      	cmp	r3, #0
 800a048:	d109      	bne.n	800a05e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a050:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a052:	f107 0208 	add.w	r2, r7, #8
 800a056:	4610      	mov	r0, r2
 800a058:	4798      	blx	r3
 800a05a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a05c:	e029      	b.n	800a0b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a05e:	6839      	ldr	r1, [r7, #0]
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	f000 fa2a 	bl	800a4ba <USBD_CtlError>
        err++;
 800a066:	7afb      	ldrb	r3, [r7, #11]
 800a068:	3301      	adds	r3, #1
 800a06a:	72fb      	strb	r3, [r7, #11]
      break;
 800a06c:	e021      	b.n	800a0b2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	7c1b      	ldrb	r3, [r3, #16]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d10d      	bne.n	800a092 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a07c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a07e:	f107 0208 	add.w	r2, r7, #8
 800a082:	4610      	mov	r0, r2
 800a084:	4798      	blx	r3
 800a086:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	3301      	adds	r3, #1
 800a08c:	2207      	movs	r2, #7
 800a08e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800a090:	e00f      	b.n	800a0b2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800a092:	6839      	ldr	r1, [r7, #0]
 800a094:	6878      	ldr	r0, [r7, #4]
 800a096:	f000 fa10 	bl	800a4ba <USBD_CtlError>
        err++;
 800a09a:	7afb      	ldrb	r3, [r7, #11]
 800a09c:	3301      	adds	r3, #1
 800a09e:	72fb      	strb	r3, [r7, #11]
      break;
 800a0a0:	e007      	b.n	800a0b2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800a0a2:	6839      	ldr	r1, [r7, #0]
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f000 fa08 	bl	800a4ba <USBD_CtlError>
      err++;
 800a0aa:	7afb      	ldrb	r3, [r7, #11]
 800a0ac:	3301      	adds	r3, #1
 800a0ae:	72fb      	strb	r3, [r7, #11]
      break;
 800a0b0:	bf00      	nop
  }

  if (err != 0U)
 800a0b2:	7afb      	ldrb	r3, [r7, #11]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d11e      	bne.n	800a0f6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	88db      	ldrh	r3, [r3, #6]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d016      	beq.n	800a0ee <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800a0c0:	893b      	ldrh	r3, [r7, #8]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d00e      	beq.n	800a0e4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800a0c6:	683b      	ldr	r3, [r7, #0]
 800a0c8:	88da      	ldrh	r2, [r3, #6]
 800a0ca:	893b      	ldrh	r3, [r7, #8]
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	bf28      	it	cs
 800a0d0:	4613      	movcs	r3, r2
 800a0d2:	b29b      	uxth	r3, r3
 800a0d4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800a0d6:	893b      	ldrh	r3, [r7, #8]
 800a0d8:	461a      	mov	r2, r3
 800a0da:	68f9      	ldr	r1, [r7, #12]
 800a0dc:	6878      	ldr	r0, [r7, #4]
 800a0de:	f000 fa69 	bl	800a5b4 <USBD_CtlSendData>
 800a0e2:	e009      	b.n	800a0f8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800a0e4:	6839      	ldr	r1, [r7, #0]
 800a0e6:	6878      	ldr	r0, [r7, #4]
 800a0e8:	f000 f9e7 	bl	800a4ba <USBD_CtlError>
 800a0ec:	e004      	b.n	800a0f8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800a0ee:	6878      	ldr	r0, [r7, #4]
 800a0f0:	f000 faba 	bl	800a668 <USBD_CtlSendStatus>
 800a0f4:	e000      	b.n	800a0f8 <USBD_GetDescriptor+0x2cc>
    return;
 800a0f6:	bf00      	nop
  }
}
 800a0f8:	3710      	adds	r7, #16
 800a0fa:	46bd      	mov	sp, r7
 800a0fc:	bd80      	pop	{r7, pc}
 800a0fe:	bf00      	nop

0800a100 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	b084      	sub	sp, #16
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	889b      	ldrh	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d131      	bne.n	800a176 <USBD_SetAddress+0x76>
 800a112:	683b      	ldr	r3, [r7, #0]
 800a114:	88db      	ldrh	r3, [r3, #6]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d12d      	bne.n	800a176 <USBD_SetAddress+0x76>
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	885b      	ldrh	r3, [r3, #2]
 800a11e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a120:	d829      	bhi.n	800a176 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	885b      	ldrh	r3, [r3, #2]
 800a126:	b2db      	uxtb	r3, r3
 800a128:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a12c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a134:	b2db      	uxtb	r3, r3
 800a136:	2b03      	cmp	r3, #3
 800a138:	d104      	bne.n	800a144 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800a13a:	6839      	ldr	r1, [r7, #0]
 800a13c:	6878      	ldr	r0, [r7, #4]
 800a13e:	f000 f9bc 	bl	800a4ba <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a142:	e01d      	b.n	800a180 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	7bfa      	ldrb	r2, [r7, #15]
 800a148:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800a14c:	7bfb      	ldrb	r3, [r7, #15]
 800a14e:	4619      	mov	r1, r3
 800a150:	6878      	ldr	r0, [r7, #4]
 800a152:	f000 fee1 	bl	800af18 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fa86 	bl	800a668 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800a15c:	7bfb      	ldrb	r3, [r7, #15]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d004      	beq.n	800a16c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	2202      	movs	r2, #2
 800a166:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a16a:	e009      	b.n	800a180 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	2201      	movs	r2, #1
 800a170:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a174:	e004      	b.n	800a180 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800a176:	6839      	ldr	r1, [r7, #0]
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f000 f99e 	bl	800a4ba <USBD_CtlError>
  }
}
 800a17e:	bf00      	nop
 800a180:	bf00      	nop
 800a182:	3710      	adds	r7, #16
 800a184:	46bd      	mov	sp, r7
 800a186:	bd80      	pop	{r7, pc}

0800a188 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b084      	sub	sp, #16
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	6078      	str	r0, [r7, #4]
 800a190:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a192:	2300      	movs	r3, #0
 800a194:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800a196:	683b      	ldr	r3, [r7, #0]
 800a198:	885b      	ldrh	r3, [r3, #2]
 800a19a:	b2da      	uxtb	r2, r3
 800a19c:	4b4e      	ldr	r3, [pc, #312]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a19e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800a1a0:	4b4d      	ldr	r3, [pc, #308]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b01      	cmp	r3, #1
 800a1a6:	d905      	bls.n	800a1b4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800a1a8:	6839      	ldr	r1, [r7, #0]
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f000 f985 	bl	800a4ba <USBD_CtlError>
    return USBD_FAIL;
 800a1b0:	2303      	movs	r3, #3
 800a1b2:	e08c      	b.n	800a2ce <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a1ba:	b2db      	uxtb	r3, r3
 800a1bc:	2b02      	cmp	r3, #2
 800a1be:	d002      	beq.n	800a1c6 <USBD_SetConfig+0x3e>
 800a1c0:	2b03      	cmp	r3, #3
 800a1c2:	d029      	beq.n	800a218 <USBD_SetConfig+0x90>
 800a1c4:	e075      	b.n	800a2b2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800a1c6:	4b44      	ldr	r3, [pc, #272]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d020      	beq.n	800a210 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800a1ce:	4b42      	ldr	r3, [pc, #264]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a1d0:	781b      	ldrb	r3, [r3, #0]
 800a1d2:	461a      	mov	r2, r3
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a1d8:	4b3f      	ldr	r3, [pc, #252]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	4619      	mov	r1, r3
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	f7fe ffe3 	bl	80091aa <USBD_SetClassConfig>
 800a1e4:	4603      	mov	r3, r0
 800a1e6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800a1e8:	7bfb      	ldrb	r3, [r7, #15]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d008      	beq.n	800a200 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800a1ee:	6839      	ldr	r1, [r7, #0]
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f962 	bl	800a4ba <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	2202      	movs	r2, #2
 800a1fa:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a1fe:	e065      	b.n	800a2cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a200:	6878      	ldr	r0, [r7, #4]
 800a202:	f000 fa31 	bl	800a668 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2203      	movs	r2, #3
 800a20a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a20e:	e05d      	b.n	800a2cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 fa29 	bl	800a668 <USBD_CtlSendStatus>
      break;
 800a216:	e059      	b.n	800a2cc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800a218:	4b2f      	ldr	r3, [pc, #188]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a21a:	781b      	ldrb	r3, [r3, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d112      	bne.n	800a246 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2202      	movs	r2, #2
 800a224:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800a228:	4b2b      	ldr	r3, [pc, #172]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a22a:	781b      	ldrb	r3, [r3, #0]
 800a22c:	461a      	mov	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a232:	4b29      	ldr	r3, [pc, #164]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a234:	781b      	ldrb	r3, [r3, #0]
 800a236:	4619      	mov	r1, r3
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f7fe ffd2 	bl	80091e2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800a23e:	6878      	ldr	r0, [r7, #4]
 800a240:	f000 fa12 	bl	800a668 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800a244:	e042      	b.n	800a2cc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800a246:	4b24      	ldr	r3, [pc, #144]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a248:	781b      	ldrb	r3, [r3, #0]
 800a24a:	461a      	mov	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	429a      	cmp	r2, r3
 800a252:	d02a      	beq.n	800a2aa <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	b2db      	uxtb	r3, r3
 800a25a:	4619      	mov	r1, r3
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f7fe ffc0 	bl	80091e2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800a262:	4b1d      	ldr	r3, [pc, #116]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a264:	781b      	ldrb	r3, [r3, #0]
 800a266:	461a      	mov	r2, r3
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800a26c:	4b1a      	ldr	r3, [pc, #104]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a26e:	781b      	ldrb	r3, [r3, #0]
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f7fe ff99 	bl	80091aa <USBD_SetClassConfig>
 800a278:	4603      	mov	r3, r0
 800a27a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800a27c:	7bfb      	ldrb	r3, [r7, #15]
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00f      	beq.n	800a2a2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800a282:	6839      	ldr	r1, [r7, #0]
 800a284:	6878      	ldr	r0, [r7, #4]
 800a286:	f000 f918 	bl	800a4ba <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	b2db      	uxtb	r3, r3
 800a290:	4619      	mov	r1, r3
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f7fe ffa5 	bl	80091e2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	2202      	movs	r2, #2
 800a29c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800a2a0:	e014      	b.n	800a2cc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f000 f9e0 	bl	800a668 <USBD_CtlSendStatus>
      break;
 800a2a8:	e010      	b.n	800a2cc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800a2aa:	6878      	ldr	r0, [r7, #4]
 800a2ac:	f000 f9dc 	bl	800a668 <USBD_CtlSendStatus>
      break;
 800a2b0:	e00c      	b.n	800a2cc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800a2b2:	6839      	ldr	r1, [r7, #0]
 800a2b4:	6878      	ldr	r0, [r7, #4]
 800a2b6:	f000 f900 	bl	800a4ba <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800a2ba:	4b07      	ldr	r3, [pc, #28]	@ (800a2d8 <USBD_SetConfig+0x150>)
 800a2bc:	781b      	ldrb	r3, [r3, #0]
 800a2be:	4619      	mov	r1, r3
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f7fe ff8e 	bl	80091e2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800a2c6:	2303      	movs	r3, #3
 800a2c8:	73fb      	strb	r3, [r7, #15]
      break;
 800a2ca:	bf00      	nop
  }

  return ret;
 800a2cc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3710      	adds	r7, #16
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}
 800a2d6:	bf00      	nop
 800a2d8:	200002ec 	.word	0x200002ec

0800a2dc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a2dc:	b580      	push	{r7, lr}
 800a2de:	b082      	sub	sp, #8
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	88db      	ldrh	r3, [r3, #6]
 800a2ea:	2b01      	cmp	r3, #1
 800a2ec:	d004      	beq.n	800a2f8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800a2ee:	6839      	ldr	r1, [r7, #0]
 800a2f0:	6878      	ldr	r0, [r7, #4]
 800a2f2:	f000 f8e2 	bl	800a4ba <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800a2f6:	e023      	b.n	800a340 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2fe:	b2db      	uxtb	r3, r3
 800a300:	2b02      	cmp	r3, #2
 800a302:	dc02      	bgt.n	800a30a <USBD_GetConfig+0x2e>
 800a304:	2b00      	cmp	r3, #0
 800a306:	dc03      	bgt.n	800a310 <USBD_GetConfig+0x34>
 800a308:	e015      	b.n	800a336 <USBD_GetConfig+0x5a>
 800a30a:	2b03      	cmp	r3, #3
 800a30c:	d00b      	beq.n	800a326 <USBD_GetConfig+0x4a>
 800a30e:	e012      	b.n	800a336 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	2200      	movs	r2, #0
 800a314:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	3308      	adds	r3, #8
 800a31a:	2201      	movs	r2, #1
 800a31c:	4619      	mov	r1, r3
 800a31e:	6878      	ldr	r0, [r7, #4]
 800a320:	f000 f948 	bl	800a5b4 <USBD_CtlSendData>
        break;
 800a324:	e00c      	b.n	800a340 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	3304      	adds	r3, #4
 800a32a:	2201      	movs	r2, #1
 800a32c:	4619      	mov	r1, r3
 800a32e:	6878      	ldr	r0, [r7, #4]
 800a330:	f000 f940 	bl	800a5b4 <USBD_CtlSendData>
        break;
 800a334:	e004      	b.n	800a340 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800a336:	6839      	ldr	r1, [r7, #0]
 800a338:	6878      	ldr	r0, [r7, #4]
 800a33a:	f000 f8be 	bl	800a4ba <USBD_CtlError>
        break;
 800a33e:	bf00      	nop
}
 800a340:	bf00      	nop
 800a342:	3708      	adds	r7, #8
 800a344:	46bd      	mov	sp, r7
 800a346:	bd80      	pop	{r7, pc}

0800a348 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a358:	b2db      	uxtb	r3, r3
 800a35a:	3b01      	subs	r3, #1
 800a35c:	2b02      	cmp	r3, #2
 800a35e:	d81e      	bhi.n	800a39e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	88db      	ldrh	r3, [r3, #6]
 800a364:	2b02      	cmp	r3, #2
 800a366:	d004      	beq.n	800a372 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800a368:	6839      	ldr	r1, [r7, #0]
 800a36a:	6878      	ldr	r0, [r7, #4]
 800a36c:	f000 f8a5 	bl	800a4ba <USBD_CtlError>
        break;
 800a370:	e01a      	b.n	800a3a8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	2201      	movs	r2, #1
 800a376:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800a37e:	2b00      	cmp	r3, #0
 800a380:	d005      	beq.n	800a38e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	68db      	ldr	r3, [r3, #12]
 800a386:	f043 0202 	orr.w	r2, r3, #2
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	330c      	adds	r3, #12
 800a392:	2202      	movs	r2, #2
 800a394:	4619      	mov	r1, r3
 800a396:	6878      	ldr	r0, [r7, #4]
 800a398:	f000 f90c 	bl	800a5b4 <USBD_CtlSendData>
      break;
 800a39c:	e004      	b.n	800a3a8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800a39e:	6839      	ldr	r1, [r7, #0]
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f000 f88a 	bl	800a4ba <USBD_CtlError>
      break;
 800a3a6:	bf00      	nop
  }
}
 800a3a8:	bf00      	nop
 800a3aa:	3708      	adds	r7, #8
 800a3ac:	46bd      	mov	sp, r7
 800a3ae:	bd80      	pop	{r7, pc}

0800a3b0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
 800a3b6:	6078      	str	r0, [r7, #4]
 800a3b8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	885b      	ldrh	r3, [r3, #2]
 800a3be:	2b01      	cmp	r3, #1
 800a3c0:	d107      	bne.n	800a3d2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800a3ca:	6878      	ldr	r0, [r7, #4]
 800a3cc:	f000 f94c 	bl	800a668 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800a3d0:	e013      	b.n	800a3fa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800a3d2:	683b      	ldr	r3, [r7, #0]
 800a3d4:	885b      	ldrh	r3, [r3, #2]
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d10b      	bne.n	800a3f2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	889b      	ldrh	r3, [r3, #4]
 800a3de:	0a1b      	lsrs	r3, r3, #8
 800a3e0:	b29b      	uxth	r3, r3
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800a3ea:	6878      	ldr	r0, [r7, #4]
 800a3ec:	f000 f93c 	bl	800a668 <USBD_CtlSendStatus>
}
 800a3f0:	e003      	b.n	800a3fa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800a3f2:	6839      	ldr	r1, [r7, #0]
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	f000 f860 	bl	800a4ba <USBD_CtlError>
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
 800a40a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a412:	b2db      	uxtb	r3, r3
 800a414:	3b01      	subs	r3, #1
 800a416:	2b02      	cmp	r3, #2
 800a418:	d80b      	bhi.n	800a432 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	885b      	ldrh	r3, [r3, #2]
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d10c      	bne.n	800a43c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2200      	movs	r2, #0
 800a426:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f000 f91c 	bl	800a668 <USBD_CtlSendStatus>
      }
      break;
 800a430:	e004      	b.n	800a43c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800a432:	6839      	ldr	r1, [r7, #0]
 800a434:	6878      	ldr	r0, [r7, #4]
 800a436:	f000 f840 	bl	800a4ba <USBD_CtlError>
      break;
 800a43a:	e000      	b.n	800a43e <USBD_ClrFeature+0x3c>
      break;
 800a43c:	bf00      	nop
  }
}
 800a43e:	bf00      	nop
 800a440:	3708      	adds	r7, #8
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800a446:	b580      	push	{r7, lr}
 800a448:	b084      	sub	sp, #16
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
 800a44e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	781a      	ldrb	r2, [r3, #0]
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	3301      	adds	r3, #1
 800a460:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	781a      	ldrb	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	3301      	adds	r3, #1
 800a46e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800a470:	68f8      	ldr	r0, [r7, #12]
 800a472:	f7ff fa40 	bl	80098f6 <SWAPBYTE>
 800a476:	4603      	mov	r3, r0
 800a478:	461a      	mov	r2, r3
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	3301      	adds	r3, #1
 800a482:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	3301      	adds	r3, #1
 800a488:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800a48a:	68f8      	ldr	r0, [r7, #12]
 800a48c:	f7ff fa33 	bl	80098f6 <SWAPBYTE>
 800a490:	4603      	mov	r3, r0
 800a492:	461a      	mov	r2, r3
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	3301      	adds	r3, #1
 800a49c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	3301      	adds	r3, #1
 800a4a2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800a4a4:	68f8      	ldr	r0, [r7, #12]
 800a4a6:	f7ff fa26 	bl	80098f6 <SWAPBYTE>
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	461a      	mov	r2, r3
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	80da      	strh	r2, [r3, #6]
}
 800a4b2:	bf00      	nop
 800a4b4:	3710      	adds	r7, #16
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	bd80      	pop	{r7, pc}

0800a4ba <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4ba:	b580      	push	{r7, lr}
 800a4bc:	b082      	sub	sp, #8
 800a4be:	af00      	add	r7, sp, #0
 800a4c0:	6078      	str	r0, [r7, #4]
 800a4c2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800a4c4:	2180      	movs	r1, #128	@ 0x80
 800a4c6:	6878      	ldr	r0, [r7, #4]
 800a4c8:	f000 fcbc 	bl	800ae44 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	6878      	ldr	r0, [r7, #4]
 800a4d0:	f000 fcb8 	bl	800ae44 <USBD_LL_StallEP>
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d042      	beq.n	800a578 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800a4f2:	68fb      	ldr	r3, [r7, #12]
 800a4f4:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800a4f6:	6938      	ldr	r0, [r7, #16]
 800a4f8:	f000 f842 	bl	800a580 <USBD_GetLen>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	3301      	adds	r3, #1
 800a500:	005b      	lsls	r3, r3, #1
 800a502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a506:	d808      	bhi.n	800a51a <USBD_GetString+0x3e>
 800a508:	6938      	ldr	r0, [r7, #16]
 800a50a:	f000 f839 	bl	800a580 <USBD_GetLen>
 800a50e:	4603      	mov	r3, r0
 800a510:	3301      	adds	r3, #1
 800a512:	b29b      	uxth	r3, r3
 800a514:	005b      	lsls	r3, r3, #1
 800a516:	b29a      	uxth	r2, r3
 800a518:	e001      	b.n	800a51e <USBD_GetString+0x42>
 800a51a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	68ba      	ldr	r2, [r7, #8]
 800a526:	4413      	add	r3, r2
 800a528:	687a      	ldr	r2, [r7, #4]
 800a52a:	7812      	ldrb	r2, [r2, #0]
 800a52c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a52e:	7dfb      	ldrb	r3, [r7, #23]
 800a530:	3301      	adds	r3, #1
 800a532:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800a534:	7dfb      	ldrb	r3, [r7, #23]
 800a536:	68ba      	ldr	r2, [r7, #8]
 800a538:	4413      	add	r3, r2
 800a53a:	2203      	movs	r2, #3
 800a53c:	701a      	strb	r2, [r3, #0]
  idx++;
 800a53e:	7dfb      	ldrb	r3, [r7, #23]
 800a540:	3301      	adds	r3, #1
 800a542:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800a544:	e013      	b.n	800a56e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800a546:	7dfb      	ldrb	r3, [r7, #23]
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	4413      	add	r3, r2
 800a54c:	693a      	ldr	r2, [r7, #16]
 800a54e:	7812      	ldrb	r2, [r2, #0]
 800a550:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800a552:	693b      	ldr	r3, [r7, #16]
 800a554:	3301      	adds	r3, #1
 800a556:	613b      	str	r3, [r7, #16]
    idx++;
 800a558:	7dfb      	ldrb	r3, [r7, #23]
 800a55a:	3301      	adds	r3, #1
 800a55c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800a55e:	7dfb      	ldrb	r3, [r7, #23]
 800a560:	68ba      	ldr	r2, [r7, #8]
 800a562:	4413      	add	r3, r2
 800a564:	2200      	movs	r2, #0
 800a566:	701a      	strb	r2, [r3, #0]
    idx++;
 800a568:	7dfb      	ldrb	r3, [r7, #23]
 800a56a:	3301      	adds	r3, #1
 800a56c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800a56e:	693b      	ldr	r3, [r7, #16]
 800a570:	781b      	ldrb	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	d1e7      	bne.n	800a546 <USBD_GetString+0x6a>
 800a576:	e000      	b.n	800a57a <USBD_GetString+0x9e>
    return;
 800a578:	bf00      	nop
  }
}
 800a57a:	3718      	adds	r7, #24
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800a580:	b480      	push	{r7}
 800a582:	b085      	sub	sp, #20
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800a588:	2300      	movs	r3, #0
 800a58a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800a590:	e005      	b.n	800a59e <USBD_GetLen+0x1e>
  {
    len++;
 800a592:	7bfb      	ldrb	r3, [r7, #15]
 800a594:	3301      	adds	r3, #1
 800a596:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800a598:	68bb      	ldr	r3, [r7, #8]
 800a59a:	3301      	adds	r3, #1
 800a59c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800a59e:	68bb      	ldr	r3, [r7, #8]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d1f5      	bne.n	800a592 <USBD_GetLen+0x12>
  }

  return len;
 800a5a6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5a8:	4618      	mov	r0, r3
 800a5aa:	3714      	adds	r7, #20
 800a5ac:	46bd      	mov	sp, r7
 800a5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5b2:	4770      	bx	lr

0800a5b4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800a5b4:	b580      	push	{r7, lr}
 800a5b6:	b084      	sub	sp, #16
 800a5b8:	af00      	add	r7, sp, #0
 800a5ba:	60f8      	str	r0, [r7, #12]
 800a5bc:	60b9      	str	r1, [r7, #8]
 800a5be:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	2202      	movs	r2, #2
 800a5c4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	68ba      	ldr	r2, [r7, #8]
 800a5d8:	2100      	movs	r1, #0
 800a5da:	68f8      	ldr	r0, [r7, #12]
 800a5dc:	f000 fcbb 	bl	800af56 <USBD_LL_Transmit>

  return USBD_OK;
 800a5e0:	2300      	movs	r3, #0
}
 800a5e2:	4618      	mov	r0, r3
 800a5e4:	3710      	adds	r7, #16
 800a5e6:	46bd      	mov	sp, r7
 800a5e8:	bd80      	pop	{r7, pc}

0800a5ea <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800a5ea:	b580      	push	{r7, lr}
 800a5ec:	b084      	sub	sp, #16
 800a5ee:	af00      	add	r7, sp, #0
 800a5f0:	60f8      	str	r0, [r7, #12]
 800a5f2:	60b9      	str	r1, [r7, #8]
 800a5f4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	68ba      	ldr	r2, [r7, #8]
 800a5fa:	2100      	movs	r1, #0
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f000 fcaa 	bl	800af56 <USBD_LL_Transmit>

  return USBD_OK;
 800a602:	2300      	movs	r3, #0
}
 800a604:	4618      	mov	r0, r3
 800a606:	3710      	adds	r7, #16
 800a608:	46bd      	mov	sp, r7
 800a60a:	bd80      	pop	{r7, pc}

0800a60c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	60f8      	str	r0, [r7, #12]
 800a614:	60b9      	str	r1, [r7, #8]
 800a616:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	2203      	movs	r2, #3
 800a61c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	68ba      	ldr	r2, [r7, #8]
 800a634:	2100      	movs	r1, #0
 800a636:	68f8      	ldr	r0, [r7, #12]
 800a638:	f000 fcae 	bl	800af98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a63c:	2300      	movs	r3, #0
}
 800a63e:	4618      	mov	r0, r3
 800a640:	3710      	adds	r7, #16
 800a642:	46bd      	mov	sp, r7
 800a644:	bd80      	pop	{r7, pc}

0800a646 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800a646:	b580      	push	{r7, lr}
 800a648:	b084      	sub	sp, #16
 800a64a:	af00      	add	r7, sp, #0
 800a64c:	60f8      	str	r0, [r7, #12]
 800a64e:	60b9      	str	r1, [r7, #8]
 800a650:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68ba      	ldr	r2, [r7, #8]
 800a656:	2100      	movs	r1, #0
 800a658:	68f8      	ldr	r0, [r7, #12]
 800a65a:	f000 fc9d 	bl	800af98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a65e:	2300      	movs	r3, #0
}
 800a660:	4618      	mov	r0, r3
 800a662:	3710      	adds	r7, #16
 800a664:	46bd      	mov	sp, r7
 800a666:	bd80      	pop	{r7, pc}

0800a668 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800a668:	b580      	push	{r7, lr}
 800a66a:	b082      	sub	sp, #8
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	2204      	movs	r2, #4
 800a674:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a678:	2300      	movs	r3, #0
 800a67a:	2200      	movs	r2, #0
 800a67c:	2100      	movs	r1, #0
 800a67e:	6878      	ldr	r0, [r7, #4]
 800a680:	f000 fc69 	bl	800af56 <USBD_LL_Transmit>

  return USBD_OK;
 800a684:	2300      	movs	r3, #0
}
 800a686:	4618      	mov	r0, r3
 800a688:	3708      	adds	r7, #8
 800a68a:	46bd      	mov	sp, r7
 800a68c:	bd80      	pop	{r7, pc}

0800a68e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a68e:	b580      	push	{r7, lr}
 800a690:	b082      	sub	sp, #8
 800a692:	af00      	add	r7, sp, #0
 800a694:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	2205      	movs	r2, #5
 800a69a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a69e:	2300      	movs	r3, #0
 800a6a0:	2200      	movs	r2, #0
 800a6a2:	2100      	movs	r1, #0
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 fc77 	bl	800af98 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a6aa:	2300      	movs	r3, #0
}
 800a6ac:	4618      	mov	r0, r3
 800a6ae:	3708      	adds	r7, #8
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	bd80      	pop	{r7, pc}

0800a6b4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a6b4:	b580      	push	{r7, lr}
 800a6b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	4912      	ldr	r1, [pc, #72]	@ (800a704 <MX_USB_DEVICE_Init+0x50>)
 800a6bc:	4812      	ldr	r0, [pc, #72]	@ (800a708 <MX_USB_DEVICE_Init+0x54>)
 800a6be:	f7fe fcf7 	bl	80090b0 <USBD_Init>
 800a6c2:	4603      	mov	r3, r0
 800a6c4:	2b00      	cmp	r3, #0
 800a6c6:	d001      	beq.n	800a6cc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a6c8:	f7f6 f96c 	bl	80009a4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800a6cc:	490f      	ldr	r1, [pc, #60]	@ (800a70c <MX_USB_DEVICE_Init+0x58>)
 800a6ce:	480e      	ldr	r0, [pc, #56]	@ (800a708 <MX_USB_DEVICE_Init+0x54>)
 800a6d0:	f7fe fd1e 	bl	8009110 <USBD_RegisterClass>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d001      	beq.n	800a6de <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a6da:	f7f6 f963 	bl	80009a4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800a6de:	490c      	ldr	r1, [pc, #48]	@ (800a710 <MX_USB_DEVICE_Init+0x5c>)
 800a6e0:	4809      	ldr	r0, [pc, #36]	@ (800a708 <MX_USB_DEVICE_Init+0x54>)
 800a6e2:	f7fe fc55 	bl	8008f90 <USBD_CDC_RegisterInterface>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d001      	beq.n	800a6f0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800a6ec:	f7f6 f95a 	bl	80009a4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a6f0:	4805      	ldr	r0, [pc, #20]	@ (800a708 <MX_USB_DEVICE_Init+0x54>)
 800a6f2:	f7fe fd43 	bl	800917c <USBD_Start>
 800a6f6:	4603      	mov	r3, r0
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d001      	beq.n	800a700 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800a6fc:	f7f6 f952 	bl	80009a4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a700:	bf00      	nop
 800a702:	bd80      	pop	{r7, pc}
 800a704:	200000ac 	.word	0x200000ac
 800a708:	200002f0 	.word	0x200002f0
 800a70c:	20000018 	.word	0x20000018
 800a710:	20000098 	.word	0x20000098

0800a714 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800a714:	b580      	push	{r7, lr}
 800a716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800a718:	2200      	movs	r2, #0
 800a71a:	4905      	ldr	r1, [pc, #20]	@ (800a730 <CDC_Init_FS+0x1c>)
 800a71c:	4805      	ldr	r0, [pc, #20]	@ (800a734 <CDC_Init_FS+0x20>)
 800a71e:	f7fe fc51 	bl	8008fc4 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800a722:	4905      	ldr	r1, [pc, #20]	@ (800a738 <CDC_Init_FS+0x24>)
 800a724:	4803      	ldr	r0, [pc, #12]	@ (800a734 <CDC_Init_FS+0x20>)
 800a726:	f7fe fc6f 	bl	8009008 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800a72a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800a72c:	4618      	mov	r0, r3
 800a72e:	bd80      	pop	{r7, pc}
 800a730:	200009cc 	.word	0x200009cc
 800a734:	200002f0 	.word	0x200002f0
 800a738:	200005cc 	.word	0x200005cc

0800a73c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800a73c:	b480      	push	{r7}
 800a73e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800a740:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800a742:	4618      	mov	r0, r3
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	4603      	mov	r3, r0
 800a754:	6039      	str	r1, [r7, #0]
 800a756:	71fb      	strb	r3, [r7, #7]
 800a758:	4613      	mov	r3, r2
 800a75a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800a75c:	79fb      	ldrb	r3, [r7, #7]
 800a75e:	2b23      	cmp	r3, #35	@ 0x23
 800a760:	d84a      	bhi.n	800a7f8 <CDC_Control_FS+0xac>
 800a762:	a201      	add	r2, pc, #4	@ (adr r2, 800a768 <CDC_Control_FS+0x1c>)
 800a764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a768:	0800a7f9 	.word	0x0800a7f9
 800a76c:	0800a7f9 	.word	0x0800a7f9
 800a770:	0800a7f9 	.word	0x0800a7f9
 800a774:	0800a7f9 	.word	0x0800a7f9
 800a778:	0800a7f9 	.word	0x0800a7f9
 800a77c:	0800a7f9 	.word	0x0800a7f9
 800a780:	0800a7f9 	.word	0x0800a7f9
 800a784:	0800a7f9 	.word	0x0800a7f9
 800a788:	0800a7f9 	.word	0x0800a7f9
 800a78c:	0800a7f9 	.word	0x0800a7f9
 800a790:	0800a7f9 	.word	0x0800a7f9
 800a794:	0800a7f9 	.word	0x0800a7f9
 800a798:	0800a7f9 	.word	0x0800a7f9
 800a79c:	0800a7f9 	.word	0x0800a7f9
 800a7a0:	0800a7f9 	.word	0x0800a7f9
 800a7a4:	0800a7f9 	.word	0x0800a7f9
 800a7a8:	0800a7f9 	.word	0x0800a7f9
 800a7ac:	0800a7f9 	.word	0x0800a7f9
 800a7b0:	0800a7f9 	.word	0x0800a7f9
 800a7b4:	0800a7f9 	.word	0x0800a7f9
 800a7b8:	0800a7f9 	.word	0x0800a7f9
 800a7bc:	0800a7f9 	.word	0x0800a7f9
 800a7c0:	0800a7f9 	.word	0x0800a7f9
 800a7c4:	0800a7f9 	.word	0x0800a7f9
 800a7c8:	0800a7f9 	.word	0x0800a7f9
 800a7cc:	0800a7f9 	.word	0x0800a7f9
 800a7d0:	0800a7f9 	.word	0x0800a7f9
 800a7d4:	0800a7f9 	.word	0x0800a7f9
 800a7d8:	0800a7f9 	.word	0x0800a7f9
 800a7dc:	0800a7f9 	.word	0x0800a7f9
 800a7e0:	0800a7f9 	.word	0x0800a7f9
 800a7e4:	0800a7f9 	.word	0x0800a7f9
 800a7e8:	0800a7f9 	.word	0x0800a7f9
 800a7ec:	0800a7f9 	.word	0x0800a7f9
 800a7f0:	0800a7f9 	.word	0x0800a7f9
 800a7f4:	0800a7f9 	.word	0x0800a7f9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800a7f8:	bf00      	nop
  }

  return (USBD_OK);
 800a7fa:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800a7fc:	4618      	mov	r0, r3
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b082      	sub	sp, #8
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800a812:	6879      	ldr	r1, [r7, #4]
 800a814:	4805      	ldr	r0, [pc, #20]	@ (800a82c <CDC_Receive_FS+0x24>)
 800a816:	f7fe fbf7 	bl	8009008 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800a81a:	4804      	ldr	r0, [pc, #16]	@ (800a82c <CDC_Receive_FS+0x24>)
 800a81c:	f7fe fc12 	bl	8009044 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800a820:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800a822:	4618      	mov	r0, r3
 800a824:	3708      	adds	r7, #8
 800a826:	46bd      	mov	sp, r7
 800a828:	bd80      	pop	{r7, pc}
 800a82a:	bf00      	nop
 800a82c:	200002f0 	.word	0x200002f0

0800a830 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800a830:	b480      	push	{r7}
 800a832:	b087      	sub	sp, #28
 800a834:	af00      	add	r7, sp, #0
 800a836:	60f8      	str	r0, [r7, #12]
 800a838:	60b9      	str	r1, [r7, #8]
 800a83a:	4613      	mov	r3, r2
 800a83c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800a83e:	2300      	movs	r3, #0
 800a840:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800a842:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800a846:	4618      	mov	r0, r3
 800a848:	371c      	adds	r7, #28
 800a84a:	46bd      	mov	sp, r7
 800a84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a850:	4770      	bx	lr
	...

0800a854 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a854:	b480      	push	{r7}
 800a856:	b083      	sub	sp, #12
 800a858:	af00      	add	r7, sp, #0
 800a85a:	4603      	mov	r3, r0
 800a85c:	6039      	str	r1, [r7, #0]
 800a85e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	2212      	movs	r2, #18
 800a864:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a866:	4b03      	ldr	r3, [pc, #12]	@ (800a874 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a868:	4618      	mov	r0, r3
 800a86a:	370c      	adds	r7, #12
 800a86c:	46bd      	mov	sp, r7
 800a86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a872:	4770      	bx	lr
 800a874:	200000c8 	.word	0x200000c8

0800a878 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	4603      	mov	r3, r0
 800a880:	6039      	str	r1, [r7, #0]
 800a882:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a884:	683b      	ldr	r3, [r7, #0]
 800a886:	2204      	movs	r2, #4
 800a888:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a88a:	4b03      	ldr	r3, [pc, #12]	@ (800a898 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a88c:	4618      	mov	r0, r3
 800a88e:	370c      	adds	r7, #12
 800a890:	46bd      	mov	sp, r7
 800a892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a896:	4770      	bx	lr
 800a898:	200000dc 	.word	0x200000dc

0800a89c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b082      	sub	sp, #8
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	4603      	mov	r3, r0
 800a8a4:	6039      	str	r1, [r7, #0]
 800a8a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a8a8:	79fb      	ldrb	r3, [r7, #7]
 800a8aa:	2b00      	cmp	r3, #0
 800a8ac:	d105      	bne.n	800a8ba <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8ae:	683a      	ldr	r2, [r7, #0]
 800a8b0:	4907      	ldr	r1, [pc, #28]	@ (800a8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8b2:	4808      	ldr	r0, [pc, #32]	@ (800a8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8b4:	f7ff fe12 	bl	800a4dc <USBD_GetString>
 800a8b8:	e004      	b.n	800a8c4 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a8ba:	683a      	ldr	r2, [r7, #0]
 800a8bc:	4904      	ldr	r1, [pc, #16]	@ (800a8d0 <USBD_FS_ProductStrDescriptor+0x34>)
 800a8be:	4805      	ldr	r0, [pc, #20]	@ (800a8d4 <USBD_FS_ProductStrDescriptor+0x38>)
 800a8c0:	f7ff fe0c 	bl	800a4dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a8c4:	4b02      	ldr	r3, [pc, #8]	@ (800a8d0 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a8c6:	4618      	mov	r0, r3
 800a8c8:	3708      	adds	r7, #8
 800a8ca:	46bd      	mov	sp, r7
 800a8cc:	bd80      	pop	{r7, pc}
 800a8ce:	bf00      	nop
 800a8d0:	20000dcc 	.word	0x20000dcc
 800a8d4:	0800b284 	.word	0x0800b284

0800a8d8 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b082      	sub	sp, #8
 800a8dc:	af00      	add	r7, sp, #0
 800a8de:	4603      	mov	r3, r0
 800a8e0:	6039      	str	r1, [r7, #0]
 800a8e2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a8e4:	683a      	ldr	r2, [r7, #0]
 800a8e6:	4904      	ldr	r1, [pc, #16]	@ (800a8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a8e8:	4804      	ldr	r0, [pc, #16]	@ (800a8fc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a8ea:	f7ff fdf7 	bl	800a4dc <USBD_GetString>
  return USBD_StrDesc;
 800a8ee:	4b02      	ldr	r3, [pc, #8]	@ (800a8f8 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a8f0:	4618      	mov	r0, r3
 800a8f2:	3708      	adds	r7, #8
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	bd80      	pop	{r7, pc}
 800a8f8:	20000dcc 	.word	0x20000dcc
 800a8fc:	0800b29c 	.word	0x0800b29c

0800a900 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a900:	b580      	push	{r7, lr}
 800a902:	b082      	sub	sp, #8
 800a904:	af00      	add	r7, sp, #0
 800a906:	4603      	mov	r3, r0
 800a908:	6039      	str	r1, [r7, #0]
 800a90a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	221a      	movs	r2, #26
 800a910:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a912:	f000 f843 	bl	800a99c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a916:	4b02      	ldr	r3, [pc, #8]	@ (800a920 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}
 800a920:	200000e0 	.word	0x200000e0

0800a924 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	4603      	mov	r3, r0
 800a92c:	6039      	str	r1, [r7, #0]
 800a92e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a930:	79fb      	ldrb	r3, [r7, #7]
 800a932:	2b00      	cmp	r3, #0
 800a934:	d105      	bne.n	800a942 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a936:	683a      	ldr	r2, [r7, #0]
 800a938:	4907      	ldr	r1, [pc, #28]	@ (800a958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a93a:	4808      	ldr	r0, [pc, #32]	@ (800a95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a93c:	f7ff fdce 	bl	800a4dc <USBD_GetString>
 800a940:	e004      	b.n	800a94c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a942:	683a      	ldr	r2, [r7, #0]
 800a944:	4904      	ldr	r1, [pc, #16]	@ (800a958 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a946:	4805      	ldr	r0, [pc, #20]	@ (800a95c <USBD_FS_ConfigStrDescriptor+0x38>)
 800a948:	f7ff fdc8 	bl	800a4dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a94c:	4b02      	ldr	r3, [pc, #8]	@ (800a958 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a94e:	4618      	mov	r0, r3
 800a950:	3708      	adds	r7, #8
 800a952:	46bd      	mov	sp, r7
 800a954:	bd80      	pop	{r7, pc}
 800a956:	bf00      	nop
 800a958:	20000dcc 	.word	0x20000dcc
 800a95c:	0800b2b0 	.word	0x0800b2b0

0800a960 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b082      	sub	sp, #8
 800a964:	af00      	add	r7, sp, #0
 800a966:	4603      	mov	r3, r0
 800a968:	6039      	str	r1, [r7, #0]
 800a96a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a96c:	79fb      	ldrb	r3, [r7, #7]
 800a96e:	2b00      	cmp	r3, #0
 800a970:	d105      	bne.n	800a97e <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	4907      	ldr	r1, [pc, #28]	@ (800a994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a976:	4808      	ldr	r0, [pc, #32]	@ (800a998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a978:	f7ff fdb0 	bl	800a4dc <USBD_GetString>
 800a97c:	e004      	b.n	800a988 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a97e:	683a      	ldr	r2, [r7, #0]
 800a980:	4904      	ldr	r1, [pc, #16]	@ (800a994 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a982:	4805      	ldr	r0, [pc, #20]	@ (800a998 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a984:	f7ff fdaa 	bl	800a4dc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a988:	4b02      	ldr	r3, [pc, #8]	@ (800a994 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3708      	adds	r7, #8
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}
 800a992:	bf00      	nop
 800a994:	20000dcc 	.word	0x20000dcc
 800a998:	0800b2bc 	.word	0x0800b2bc

0800a99c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a99c:	b580      	push	{r7, lr}
 800a99e:	b084      	sub	sp, #16
 800a9a0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800a9e0 <Get_SerialNum+0x44>)
 800a9a4:	681b      	ldr	r3, [r3, #0]
 800a9a6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a9a8:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e4 <Get_SerialNum+0x48>)
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a9ae:	4b0e      	ldr	r3, [pc, #56]	@ (800a9e8 <Get_SerialNum+0x4c>)
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a9b4:	68fa      	ldr	r2, [r7, #12]
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	4413      	add	r3, r2
 800a9ba:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a9bc:	68fb      	ldr	r3, [r7, #12]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d009      	beq.n	800a9d6 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a9c2:	2208      	movs	r2, #8
 800a9c4:	4909      	ldr	r1, [pc, #36]	@ (800a9ec <Get_SerialNum+0x50>)
 800a9c6:	68f8      	ldr	r0, [r7, #12]
 800a9c8:	f000 f814 	bl	800a9f4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a9cc:	2204      	movs	r2, #4
 800a9ce:	4908      	ldr	r1, [pc, #32]	@ (800a9f0 <Get_SerialNum+0x54>)
 800a9d0:	68b8      	ldr	r0, [r7, #8]
 800a9d2:	f000 f80f 	bl	800a9f4 <IntToUnicode>
  }
}
 800a9d6:	bf00      	nop
 800a9d8:	3710      	adds	r7, #16
 800a9da:	46bd      	mov	sp, r7
 800a9dc:	bd80      	pop	{r7, pc}
 800a9de:	bf00      	nop
 800a9e0:	1fff7a10 	.word	0x1fff7a10
 800a9e4:	1fff7a14 	.word	0x1fff7a14
 800a9e8:	1fff7a18 	.word	0x1fff7a18
 800a9ec:	200000e2 	.word	0x200000e2
 800a9f0:	200000f2 	.word	0x200000f2

0800a9f4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a9f4:	b480      	push	{r7}
 800a9f6:	b087      	sub	sp, #28
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	4613      	mov	r3, r2
 800aa00:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800aa02:	2300      	movs	r3, #0
 800aa04:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800aa06:	2300      	movs	r3, #0
 800aa08:	75fb      	strb	r3, [r7, #23]
 800aa0a:	e027      	b.n	800aa5c <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	0f1b      	lsrs	r3, r3, #28
 800aa10:	2b09      	cmp	r3, #9
 800aa12:	d80b      	bhi.n	800aa2c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	0f1b      	lsrs	r3, r3, #28
 800aa18:	b2da      	uxtb	r2, r3
 800aa1a:	7dfb      	ldrb	r3, [r7, #23]
 800aa1c:	005b      	lsls	r3, r3, #1
 800aa1e:	4619      	mov	r1, r3
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	440b      	add	r3, r1
 800aa24:	3230      	adds	r2, #48	@ 0x30
 800aa26:	b2d2      	uxtb	r2, r2
 800aa28:	701a      	strb	r2, [r3, #0]
 800aa2a:	e00a      	b.n	800aa42 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	0f1b      	lsrs	r3, r3, #28
 800aa30:	b2da      	uxtb	r2, r3
 800aa32:	7dfb      	ldrb	r3, [r7, #23]
 800aa34:	005b      	lsls	r3, r3, #1
 800aa36:	4619      	mov	r1, r3
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	440b      	add	r3, r1
 800aa3c:	3237      	adds	r2, #55	@ 0x37
 800aa3e:	b2d2      	uxtb	r2, r2
 800aa40:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800aa42:	68fb      	ldr	r3, [r7, #12]
 800aa44:	011b      	lsls	r3, r3, #4
 800aa46:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800aa48:	7dfb      	ldrb	r3, [r7, #23]
 800aa4a:	005b      	lsls	r3, r3, #1
 800aa4c:	3301      	adds	r3, #1
 800aa4e:	68ba      	ldr	r2, [r7, #8]
 800aa50:	4413      	add	r3, r2
 800aa52:	2200      	movs	r2, #0
 800aa54:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800aa56:	7dfb      	ldrb	r3, [r7, #23]
 800aa58:	3301      	adds	r3, #1
 800aa5a:	75fb      	strb	r3, [r7, #23]
 800aa5c:	7dfa      	ldrb	r2, [r7, #23]
 800aa5e:	79fb      	ldrb	r3, [r7, #7]
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d3d3      	bcc.n	800aa0c <IntToUnicode+0x18>
  }
}
 800aa64:	bf00      	nop
 800aa66:	bf00      	nop
 800aa68:	371c      	adds	r7, #28
 800aa6a:	46bd      	mov	sp, r7
 800aa6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa70:	4770      	bx	lr
	...

0800aa74 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b08a      	sub	sp, #40	@ 0x28
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aa7c:	f107 0314 	add.w	r3, r7, #20
 800aa80:	2200      	movs	r2, #0
 800aa82:	601a      	str	r2, [r3, #0]
 800aa84:	605a      	str	r2, [r3, #4]
 800aa86:	609a      	str	r2, [r3, #8]
 800aa88:	60da      	str	r2, [r3, #12]
 800aa8a:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800aa94:	d13a      	bne.n	800ab0c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800aa96:	2300      	movs	r3, #0
 800aa98:	613b      	str	r3, [r7, #16]
 800aa9a:	4b1e      	ldr	r3, [pc, #120]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aa9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aa9e:	4a1d      	ldr	r2, [pc, #116]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aaa0:	f043 0301 	orr.w	r3, r3, #1
 800aaa4:	6313      	str	r3, [r2, #48]	@ 0x30
 800aaa6:	4b1b      	ldr	r3, [pc, #108]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aaa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aaaa:	f003 0301 	and.w	r3, r3, #1
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800aab2:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800aab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aab8:	2302      	movs	r3, #2
 800aaba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aabc:	2300      	movs	r3, #0
 800aabe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aac0:	2303      	movs	r3, #3
 800aac2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800aac4:	230a      	movs	r3, #10
 800aac6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800aac8:	f107 0314 	add.w	r3, r7, #20
 800aacc:	4619      	mov	r1, r3
 800aace:	4812      	ldr	r0, [pc, #72]	@ (800ab18 <HAL_PCD_MspInit+0xa4>)
 800aad0:	f7f8 fb0a 	bl	80030e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800aad4:	4b0f      	ldr	r3, [pc, #60]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800aad8:	4a0e      	ldr	r2, [pc, #56]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aada:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aade:	6353      	str	r3, [r2, #52]	@ 0x34
 800aae0:	2300      	movs	r3, #0
 800aae2:	60fb      	str	r3, [r7, #12]
 800aae4:	4b0b      	ldr	r3, [pc, #44]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aae6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aae8:	4a0a      	ldr	r2, [pc, #40]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aaea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800aaee:	6453      	str	r3, [r2, #68]	@ 0x44
 800aaf0:	4b08      	ldr	r3, [pc, #32]	@ (800ab14 <HAL_PCD_MspInit+0xa0>)
 800aaf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaf4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800aaf8:	60fb      	str	r3, [r7, #12]
 800aafa:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800aafc:	2200      	movs	r2, #0
 800aafe:	2100      	movs	r1, #0
 800ab00:	2043      	movs	r0, #67	@ 0x43
 800ab02:	f7f7 ff28 	bl	8002956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ab06:	2043      	movs	r0, #67	@ 0x43
 800ab08:	f7f7 ff41 	bl	800298e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ab0c:	bf00      	nop
 800ab0e:	3728      	adds	r7, #40	@ 0x28
 800ab10:	46bd      	mov	sp, r7
 800ab12:	bd80      	pop	{r7, pc}
 800ab14:	40023800 	.word	0x40023800
 800ab18:	40020000 	.word	0x40020000

0800ab1c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	b082      	sub	sp, #8
 800ab20:	af00      	add	r7, sp, #0
 800ab22:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ab30:	4619      	mov	r1, r3
 800ab32:	4610      	mov	r0, r2
 800ab34:	f7fe fb6f 	bl	8009216 <USBD_LL_SetupStage>
}
 800ab38:	bf00      	nop
 800ab3a:	3708      	adds	r7, #8
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}

0800ab40 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab40:	b580      	push	{r7, lr}
 800ab42:	b082      	sub	sp, #8
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
 800ab48:	460b      	mov	r3, r1
 800ab4a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab52:	78fa      	ldrb	r2, [r7, #3]
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	00db      	lsls	r3, r3, #3
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	78fb      	ldrb	r3, [r7, #3]
 800ab68:	4619      	mov	r1, r3
 800ab6a:	f7fe fba9 	bl	80092c0 <USBD_LL_DataOutStage>
}
 800ab6e:	bf00      	nop
 800ab70:	3708      	adds	r7, #8
 800ab72:	46bd      	mov	sp, r7
 800ab74:	bd80      	pop	{r7, pc}

0800ab76 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ab76:	b580      	push	{r7, lr}
 800ab78:	b082      	sub	sp, #8
 800ab7a:	af00      	add	r7, sp, #0
 800ab7c:	6078      	str	r0, [r7, #4]
 800ab7e:	460b      	mov	r3, r1
 800ab80:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ab88:	78fa      	ldrb	r2, [r7, #3]
 800ab8a:	6879      	ldr	r1, [r7, #4]
 800ab8c:	4613      	mov	r3, r2
 800ab8e:	00db      	lsls	r3, r3, #3
 800ab90:	4413      	add	r3, r2
 800ab92:	009b      	lsls	r3, r3, #2
 800ab94:	440b      	add	r3, r1
 800ab96:	3320      	adds	r3, #32
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	78fb      	ldrb	r3, [r7, #3]
 800ab9c:	4619      	mov	r1, r3
 800ab9e:	f7fe fc42 	bl	8009426 <USBD_LL_DataInStage>
}
 800aba2:	bf00      	nop
 800aba4:	3708      	adds	r7, #8
 800aba6:	46bd      	mov	sp, r7
 800aba8:	bd80      	pop	{r7, pc}

0800abaa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abaa:	b580      	push	{r7, lr}
 800abac:	b082      	sub	sp, #8
 800abae:	af00      	add	r7, sp, #0
 800abb0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fd7c 	bl	80096b6 <USBD_LL_SOF>
}
 800abbe:	bf00      	nop
 800abc0:	3708      	adds	r7, #8
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bd80      	pop	{r7, pc}

0800abc6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800abc6:	b580      	push	{r7, lr}
 800abc8:	b084      	sub	sp, #16
 800abca:	af00      	add	r7, sp, #0
 800abcc:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800abce:	2301      	movs	r3, #1
 800abd0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	79db      	ldrb	r3, [r3, #7]
 800abd6:	2b02      	cmp	r3, #2
 800abd8:	d001      	beq.n	800abde <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800abda:	f7f5 fee3 	bl	80009a4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abe4:	7bfa      	ldrb	r2, [r7, #15]
 800abe6:	4611      	mov	r1, r2
 800abe8:	4618      	mov	r0, r3
 800abea:	f7fe fd20 	bl	800962e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fcc8 	bl	800958a <USBD_LL_Reset>
}
 800abfa:	bf00      	nop
 800abfc:	3710      	adds	r7, #16
 800abfe:	46bd      	mov	sp, r7
 800ac00:	bd80      	pop	{r7, pc}
	...

0800ac04 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0
 800ac0a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac12:	4618      	mov	r0, r3
 800ac14:	f7fe fd1b 	bl	800964e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	687a      	ldr	r2, [r7, #4]
 800ac24:	6812      	ldr	r2, [r2, #0]
 800ac26:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ac2a:	f043 0301 	orr.w	r3, r3, #1
 800ac2e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	7adb      	ldrb	r3, [r3, #11]
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d005      	beq.n	800ac44 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ac38:	4b04      	ldr	r3, [pc, #16]	@ (800ac4c <HAL_PCD_SuspendCallback+0x48>)
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	4a03      	ldr	r2, [pc, #12]	@ (800ac4c <HAL_PCD_SuspendCallback+0x48>)
 800ac3e:	f043 0306 	orr.w	r3, r3, #6
 800ac42:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ac44:	bf00      	nop
 800ac46:	3708      	adds	r7, #8
 800ac48:	46bd      	mov	sp, r7
 800ac4a:	bd80      	pop	{r7, pc}
 800ac4c:	e000ed00 	.word	0xe000ed00

0800ac50 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac50:	b580      	push	{r7, lr}
 800ac52:	b082      	sub	sp, #8
 800ac54:	af00      	add	r7, sp, #0
 800ac56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac5e:	4618      	mov	r0, r3
 800ac60:	f7fe fd11 	bl	8009686 <USBD_LL_Resume>
}
 800ac64:	bf00      	nop
 800ac66:	3708      	adds	r7, #8
 800ac68:	46bd      	mov	sp, r7
 800ac6a:	bd80      	pop	{r7, pc}

0800ac6c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac6c:	b580      	push	{r7, lr}
 800ac6e:	b082      	sub	sp, #8
 800ac70:	af00      	add	r7, sp, #0
 800ac72:	6078      	str	r0, [r7, #4]
 800ac74:	460b      	mov	r3, r1
 800ac76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ac7e:	78fa      	ldrb	r2, [r7, #3]
 800ac80:	4611      	mov	r1, r2
 800ac82:	4618      	mov	r0, r3
 800ac84:	f7fe fd69 	bl	800975a <USBD_LL_IsoOUTIncomplete>
}
 800ac88:	bf00      	nop
 800ac8a:	3708      	adds	r7, #8
 800ac8c:	46bd      	mov	sp, r7
 800ac8e:	bd80      	pop	{r7, pc}

0800ac90 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ac90:	b580      	push	{r7, lr}
 800ac92:	b082      	sub	sp, #8
 800ac94:	af00      	add	r7, sp, #0
 800ac96:	6078      	str	r0, [r7, #4]
 800ac98:	460b      	mov	r3, r1
 800ac9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800aca2:	78fa      	ldrb	r2, [r7, #3]
 800aca4:	4611      	mov	r1, r2
 800aca6:	4618      	mov	r0, r3
 800aca8:	f7fe fd25 	bl	80096f6 <USBD_LL_IsoINIncomplete>
}
 800acac:	bf00      	nop
 800acae:	3708      	adds	r7, #8
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}

0800acb4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b082      	sub	sp, #8
 800acb8:	af00      	add	r7, sp, #0
 800acba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7fe fd7b 	bl	80097be <USBD_LL_DevConnected>
}
 800acc8:	bf00      	nop
 800acca:	3708      	adds	r7, #8
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b082      	sub	sp, #8
 800acd4:	af00      	add	r7, sp, #0
 800acd6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800acde:	4618      	mov	r0, r3
 800ace0:	f7fe fd78 	bl	80097d4 <USBD_LL_DevDisconnected>
}
 800ace4:	bf00      	nop
 800ace6:	3708      	adds	r7, #8
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}

0800acec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	b082      	sub	sp, #8
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	781b      	ldrb	r3, [r3, #0]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d13c      	bne.n	800ad76 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800acfc:	4a20      	ldr	r2, [pc, #128]	@ (800ad80 <USBD_LL_Init+0x94>)
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a1e      	ldr	r2, [pc, #120]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad08:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ad0c:	4b1c      	ldr	r3, [pc, #112]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad0e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ad12:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ad14:	4b1a      	ldr	r3, [pc, #104]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad16:	2204      	movs	r2, #4
 800ad18:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ad1a:	4b19      	ldr	r3, [pc, #100]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad1c:	2202      	movs	r2, #2
 800ad1e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ad20:	4b17      	ldr	r3, [pc, #92]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad22:	2200      	movs	r2, #0
 800ad24:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ad26:	4b16      	ldr	r3, [pc, #88]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad28:	2202      	movs	r2, #2
 800ad2a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ad2c:	4b14      	ldr	r3, [pc, #80]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad2e:	2200      	movs	r2, #0
 800ad30:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ad32:	4b13      	ldr	r3, [pc, #76]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad34:	2200      	movs	r2, #0
 800ad36:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ad38:	4b11      	ldr	r3, [pc, #68]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ad3e:	4b10      	ldr	r3, [pc, #64]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad40:	2200      	movs	r2, #0
 800ad42:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ad44:	4b0e      	ldr	r3, [pc, #56]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad46:	2200      	movs	r2, #0
 800ad48:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ad4a:	480d      	ldr	r0, [pc, #52]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad4c:	f7f8 fb69 	bl	8003422 <HAL_PCD_Init>
 800ad50:	4603      	mov	r3, r0
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800ad56:	f7f5 fe25 	bl	80009a4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800ad5a:	2180      	movs	r1, #128	@ 0x80
 800ad5c:	4808      	ldr	r0, [pc, #32]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad5e:	f7f9 fd96 	bl	800488e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800ad62:	2240      	movs	r2, #64	@ 0x40
 800ad64:	2100      	movs	r1, #0
 800ad66:	4806      	ldr	r0, [pc, #24]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad68:	f7f9 fd4a 	bl	8004800 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ad6c:	2280      	movs	r2, #128	@ 0x80
 800ad6e:	2101      	movs	r1, #1
 800ad70:	4803      	ldr	r0, [pc, #12]	@ (800ad80 <USBD_LL_Init+0x94>)
 800ad72:	f7f9 fd45 	bl	8004800 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ad76:	2300      	movs	r3, #0
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3708      	adds	r7, #8
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}
 800ad80:	20000fcc 	.word	0x20000fcc

0800ad84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ad90:	2300      	movs	r3, #0
 800ad92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	f7f8 fc50 	bl	8003640 <HAL_PCD_Start>
 800ada0:	4603      	mov	r3, r0
 800ada2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ada4:	7bfb      	ldrb	r3, [r7, #15]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f000 f942 	bl	800b030 <USBD_Get_USB_Status>
 800adac:	4603      	mov	r3, r0
 800adae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adb0:	7bbb      	ldrb	r3, [r7, #14]
}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3710      	adds	r7, #16
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}

0800adba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800adba:	b580      	push	{r7, lr}
 800adbc:	b084      	sub	sp, #16
 800adbe:	af00      	add	r7, sp, #0
 800adc0:	6078      	str	r0, [r7, #4]
 800adc2:	4608      	mov	r0, r1
 800adc4:	4611      	mov	r1, r2
 800adc6:	461a      	mov	r2, r3
 800adc8:	4603      	mov	r3, r0
 800adca:	70fb      	strb	r3, [r7, #3]
 800adcc:	460b      	mov	r3, r1
 800adce:	70bb      	strb	r3, [r7, #2]
 800add0:	4613      	mov	r3, r2
 800add2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800add4:	2300      	movs	r3, #0
 800add6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800add8:	2300      	movs	r3, #0
 800adda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ade2:	78bb      	ldrb	r3, [r7, #2]
 800ade4:	883a      	ldrh	r2, [r7, #0]
 800ade6:	78f9      	ldrb	r1, [r7, #3]
 800ade8:	f7f9 f924 	bl	8004034 <HAL_PCD_EP_Open>
 800adec:	4603      	mov	r3, r0
 800adee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800adf0:	7bfb      	ldrb	r3, [r7, #15]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f000 f91c 	bl	800b030 <USBD_Get_USB_Status>
 800adf8:	4603      	mov	r3, r0
 800adfa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3710      	adds	r7, #16
 800ae02:	46bd      	mov	sp, r7
 800ae04:	bd80      	pop	{r7, pc}

0800ae06 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae06:	b580      	push	{r7, lr}
 800ae08:	b084      	sub	sp, #16
 800ae0a:	af00      	add	r7, sp, #0
 800ae0c:	6078      	str	r0, [r7, #4]
 800ae0e:	460b      	mov	r3, r1
 800ae10:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae12:	2300      	movs	r3, #0
 800ae14:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae16:	2300      	movs	r3, #0
 800ae18:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae20:	78fa      	ldrb	r2, [r7, #3]
 800ae22:	4611      	mov	r1, r2
 800ae24:	4618      	mov	r0, r3
 800ae26:	f7f9 f96f 	bl	8004108 <HAL_PCD_EP_Close>
 800ae2a:	4603      	mov	r3, r0
 800ae2c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae2e:	7bfb      	ldrb	r3, [r7, #15]
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 f8fd 	bl	800b030 <USBD_Get_USB_Status>
 800ae36:	4603      	mov	r3, r0
 800ae38:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae3a:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	3710      	adds	r7, #16
 800ae40:	46bd      	mov	sp, r7
 800ae42:	bd80      	pop	{r7, pc}

0800ae44 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae44:	b580      	push	{r7, lr}
 800ae46:	b084      	sub	sp, #16
 800ae48:	af00      	add	r7, sp, #0
 800ae4a:	6078      	str	r0, [r7, #4]
 800ae4c:	460b      	mov	r3, r1
 800ae4e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae50:	2300      	movs	r3, #0
 800ae52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae54:	2300      	movs	r3, #0
 800ae56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae5e:	78fa      	ldrb	r2, [r7, #3]
 800ae60:	4611      	mov	r1, r2
 800ae62:	4618      	mov	r0, r3
 800ae64:	f7f9 fa27 	bl	80042b6 <HAL_PCD_EP_SetStall>
 800ae68:	4603      	mov	r3, r0
 800ae6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ae6c:	7bfb      	ldrb	r3, [r7, #15]
 800ae6e:	4618      	mov	r0, r3
 800ae70:	f000 f8de 	bl	800b030 <USBD_Get_USB_Status>
 800ae74:	4603      	mov	r3, r0
 800ae76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ae78:	7bbb      	ldrb	r3, [r7, #14]
}
 800ae7a:	4618      	mov	r0, r3
 800ae7c:	3710      	adds	r7, #16
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}

0800ae82 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ae82:	b580      	push	{r7, lr}
 800ae84:	b084      	sub	sp, #16
 800ae86:	af00      	add	r7, sp, #0
 800ae88:	6078      	str	r0, [r7, #4]
 800ae8a:	460b      	mov	r3, r1
 800ae8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ae8e:	2300      	movs	r3, #0
 800ae90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ae92:	2300      	movs	r3, #0
 800ae94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ae9c:	78fa      	ldrb	r2, [r7, #3]
 800ae9e:	4611      	mov	r1, r2
 800aea0:	4618      	mov	r0, r3
 800aea2:	f7f9 fa6b 	bl	800437c <HAL_PCD_EP_ClrStall>
 800aea6:	4603      	mov	r3, r0
 800aea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800aeaa:	7bfb      	ldrb	r3, [r7, #15]
 800aeac:	4618      	mov	r0, r3
 800aeae:	f000 f8bf 	bl	800b030 <USBD_Get_USB_Status>
 800aeb2:	4603      	mov	r3, r0
 800aeb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800aeb6:	7bbb      	ldrb	r3, [r7, #14]
}
 800aeb8:	4618      	mov	r0, r3
 800aeba:	3710      	adds	r7, #16
 800aebc:	46bd      	mov	sp, r7
 800aebe:	bd80      	pop	{r7, pc}

0800aec0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800aec0:	b480      	push	{r7}
 800aec2:	b085      	sub	sp, #20
 800aec4:	af00      	add	r7, sp, #0
 800aec6:	6078      	str	r0, [r7, #4]
 800aec8:	460b      	mov	r3, r1
 800aeca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aed2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800aed4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	da0b      	bge.n	800aef4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800aedc:	78fb      	ldrb	r3, [r7, #3]
 800aede:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aee2:	68f9      	ldr	r1, [r7, #12]
 800aee4:	4613      	mov	r3, r2
 800aee6:	00db      	lsls	r3, r3, #3
 800aee8:	4413      	add	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	440b      	add	r3, r1
 800aeee:	3316      	adds	r3, #22
 800aef0:	781b      	ldrb	r3, [r3, #0]
 800aef2:	e00b      	b.n	800af0c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800aef4:	78fb      	ldrb	r3, [r7, #3]
 800aef6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800aefa:	68f9      	ldr	r1, [r7, #12]
 800aefc:	4613      	mov	r3, r2
 800aefe:	00db      	lsls	r3, r3, #3
 800af00:	4413      	add	r3, r2
 800af02:	009b      	lsls	r3, r3, #2
 800af04:	440b      	add	r3, r1
 800af06:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800af0a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3714      	adds	r7, #20
 800af10:	46bd      	mov	sp, r7
 800af12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af16:	4770      	bx	lr

0800af18 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b084      	sub	sp, #16
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	460b      	mov	r3, r1
 800af22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af24:	2300      	movs	r3, #0
 800af26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af28:	2300      	movs	r3, #0
 800af2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800af32:	78fa      	ldrb	r2, [r7, #3]
 800af34:	4611      	mov	r1, r2
 800af36:	4618      	mov	r0, r3
 800af38:	f7f9 f858 	bl	8003fec <HAL_PCD_SetAddress>
 800af3c:	4603      	mov	r3, r0
 800af3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af40:	7bfb      	ldrb	r3, [r7, #15]
 800af42:	4618      	mov	r0, r3
 800af44:	f000 f874 	bl	800b030 <USBD_Get_USB_Status>
 800af48:	4603      	mov	r3, r0
 800af4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800af4c:	7bbb      	ldrb	r3, [r7, #14]
}
 800af4e:	4618      	mov	r0, r3
 800af50:	3710      	adds	r7, #16
 800af52:	46bd      	mov	sp, r7
 800af54:	bd80      	pop	{r7, pc}

0800af56 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af56:	b580      	push	{r7, lr}
 800af58:	b086      	sub	sp, #24
 800af5a:	af00      	add	r7, sp, #0
 800af5c:	60f8      	str	r0, [r7, #12]
 800af5e:	607a      	str	r2, [r7, #4]
 800af60:	603b      	str	r3, [r7, #0]
 800af62:	460b      	mov	r3, r1
 800af64:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800af66:	2300      	movs	r3, #0
 800af68:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800af6a:	2300      	movs	r3, #0
 800af6c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800af74:	7af9      	ldrb	r1, [r7, #11]
 800af76:	683b      	ldr	r3, [r7, #0]
 800af78:	687a      	ldr	r2, [r7, #4]
 800af7a:	f7f9 f962 	bl	8004242 <HAL_PCD_EP_Transmit>
 800af7e:	4603      	mov	r3, r0
 800af80:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800af82:	7dfb      	ldrb	r3, [r7, #23]
 800af84:	4618      	mov	r0, r3
 800af86:	f000 f853 	bl	800b030 <USBD_Get_USB_Status>
 800af8a:	4603      	mov	r3, r0
 800af8c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800af8e:	7dbb      	ldrb	r3, [r7, #22]
}
 800af90:	4618      	mov	r0, r3
 800af92:	3718      	adds	r7, #24
 800af94:	46bd      	mov	sp, r7
 800af96:	bd80      	pop	{r7, pc}

0800af98 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800af98:	b580      	push	{r7, lr}
 800af9a:	b086      	sub	sp, #24
 800af9c:	af00      	add	r7, sp, #0
 800af9e:	60f8      	str	r0, [r7, #12]
 800afa0:	607a      	str	r2, [r7, #4]
 800afa2:	603b      	str	r3, [r7, #0]
 800afa4:	460b      	mov	r3, r1
 800afa6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800afa8:	2300      	movs	r3, #0
 800afaa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800afac:	2300      	movs	r3, #0
 800afae:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800afb6:	7af9      	ldrb	r1, [r7, #11]
 800afb8:	683b      	ldr	r3, [r7, #0]
 800afba:	687a      	ldr	r2, [r7, #4]
 800afbc:	f7f9 f8ee 	bl	800419c <HAL_PCD_EP_Receive>
 800afc0:	4603      	mov	r3, r0
 800afc2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800afc4:	7dfb      	ldrb	r3, [r7, #23]
 800afc6:	4618      	mov	r0, r3
 800afc8:	f000 f832 	bl	800b030 <USBD_Get_USB_Status>
 800afcc:	4603      	mov	r3, r0
 800afce:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800afd0:	7dbb      	ldrb	r3, [r7, #22]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b082      	sub	sp, #8
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	460b      	mov	r3, r1
 800afe4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800afec:	78fa      	ldrb	r2, [r7, #3]
 800afee:	4611      	mov	r1, r2
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7f9 f90e 	bl	8004212 <HAL_PCD_EP_GetRxCount>
 800aff6:	4603      	mov	r3, r0
}
 800aff8:	4618      	mov	r0, r3
 800affa:	3708      	adds	r7, #8
 800affc:	46bd      	mov	sp, r7
 800affe:	bd80      	pop	{r7, pc}

0800b000 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800b000:	b480      	push	{r7}
 800b002:	b083      	sub	sp, #12
 800b004:	af00      	add	r7, sp, #0
 800b006:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800b008:	4b03      	ldr	r3, [pc, #12]	@ (800b018 <USBD_static_malloc+0x18>)
}
 800b00a:	4618      	mov	r0, r3
 800b00c:	370c      	adds	r7, #12
 800b00e:	46bd      	mov	sp, r7
 800b010:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b014:	4770      	bx	lr
 800b016:	bf00      	nop
 800b018:	200014b0 	.word	0x200014b0

0800b01c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800b01c:	b480      	push	{r7}
 800b01e:	b083      	sub	sp, #12
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]

}
 800b024:	bf00      	nop
 800b026:	370c      	adds	r7, #12
 800b028:	46bd      	mov	sp, r7
 800b02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b02e:	4770      	bx	lr

0800b030 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b030:	b480      	push	{r7}
 800b032:	b085      	sub	sp, #20
 800b034:	af00      	add	r7, sp, #0
 800b036:	4603      	mov	r3, r0
 800b038:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b03a:	2300      	movs	r3, #0
 800b03c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b03e:	79fb      	ldrb	r3, [r7, #7]
 800b040:	2b03      	cmp	r3, #3
 800b042:	d817      	bhi.n	800b074 <USBD_Get_USB_Status+0x44>
 800b044:	a201      	add	r2, pc, #4	@ (adr r2, 800b04c <USBD_Get_USB_Status+0x1c>)
 800b046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b04a:	bf00      	nop
 800b04c:	0800b05d 	.word	0x0800b05d
 800b050:	0800b063 	.word	0x0800b063
 800b054:	0800b069 	.word	0x0800b069
 800b058:	0800b06f 	.word	0x0800b06f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800b05c:	2300      	movs	r3, #0
 800b05e:	73fb      	strb	r3, [r7, #15]
    break;
 800b060:	e00b      	b.n	800b07a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800b062:	2303      	movs	r3, #3
 800b064:	73fb      	strb	r3, [r7, #15]
    break;
 800b066:	e008      	b.n	800b07a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800b068:	2301      	movs	r3, #1
 800b06a:	73fb      	strb	r3, [r7, #15]
    break;
 800b06c:	e005      	b.n	800b07a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800b06e:	2303      	movs	r3, #3
 800b070:	73fb      	strb	r3, [r7, #15]
    break;
 800b072:	e002      	b.n	800b07a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800b074:	2303      	movs	r3, #3
 800b076:	73fb      	strb	r3, [r7, #15]
    break;
 800b078:	bf00      	nop
  }
  return usb_status;
 800b07a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b07c:	4618      	mov	r0, r3
 800b07e:	3714      	adds	r7, #20
 800b080:	46bd      	mov	sp, r7
 800b082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b086:	4770      	bx	lr

0800b088 <__itoa>:
 800b088:	1e93      	subs	r3, r2, #2
 800b08a:	2b22      	cmp	r3, #34	@ 0x22
 800b08c:	b510      	push	{r4, lr}
 800b08e:	460c      	mov	r4, r1
 800b090:	d904      	bls.n	800b09c <__itoa+0x14>
 800b092:	2300      	movs	r3, #0
 800b094:	700b      	strb	r3, [r1, #0]
 800b096:	461c      	mov	r4, r3
 800b098:	4620      	mov	r0, r4
 800b09a:	bd10      	pop	{r4, pc}
 800b09c:	2a0a      	cmp	r2, #10
 800b09e:	d109      	bne.n	800b0b4 <__itoa+0x2c>
 800b0a0:	2800      	cmp	r0, #0
 800b0a2:	da07      	bge.n	800b0b4 <__itoa+0x2c>
 800b0a4:	232d      	movs	r3, #45	@ 0x2d
 800b0a6:	700b      	strb	r3, [r1, #0]
 800b0a8:	4240      	negs	r0, r0
 800b0aa:	2101      	movs	r1, #1
 800b0ac:	4421      	add	r1, r4
 800b0ae:	f000 f805 	bl	800b0bc <__utoa>
 800b0b2:	e7f1      	b.n	800b098 <__itoa+0x10>
 800b0b4:	2100      	movs	r1, #0
 800b0b6:	e7f9      	b.n	800b0ac <__itoa+0x24>

0800b0b8 <itoa>:
 800b0b8:	f7ff bfe6 	b.w	800b088 <__itoa>

0800b0bc <__utoa>:
 800b0bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b0be:	4c1f      	ldr	r4, [pc, #124]	@ (800b13c <__utoa+0x80>)
 800b0c0:	b08b      	sub	sp, #44	@ 0x2c
 800b0c2:	4605      	mov	r5, r0
 800b0c4:	460b      	mov	r3, r1
 800b0c6:	466e      	mov	r6, sp
 800b0c8:	f104 0c20 	add.w	ip, r4, #32
 800b0cc:	6820      	ldr	r0, [r4, #0]
 800b0ce:	6861      	ldr	r1, [r4, #4]
 800b0d0:	4637      	mov	r7, r6
 800b0d2:	c703      	stmia	r7!, {r0, r1}
 800b0d4:	3408      	adds	r4, #8
 800b0d6:	4564      	cmp	r4, ip
 800b0d8:	463e      	mov	r6, r7
 800b0da:	d1f7      	bne.n	800b0cc <__utoa+0x10>
 800b0dc:	7921      	ldrb	r1, [r4, #4]
 800b0de:	7139      	strb	r1, [r7, #4]
 800b0e0:	1e91      	subs	r1, r2, #2
 800b0e2:	6820      	ldr	r0, [r4, #0]
 800b0e4:	6038      	str	r0, [r7, #0]
 800b0e6:	2922      	cmp	r1, #34	@ 0x22
 800b0e8:	f04f 0100 	mov.w	r1, #0
 800b0ec:	d904      	bls.n	800b0f8 <__utoa+0x3c>
 800b0ee:	7019      	strb	r1, [r3, #0]
 800b0f0:	460b      	mov	r3, r1
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	b00b      	add	sp, #44	@ 0x2c
 800b0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b0f8:	1e58      	subs	r0, r3, #1
 800b0fa:	4684      	mov	ip, r0
 800b0fc:	fbb5 f7f2 	udiv	r7, r5, r2
 800b100:	fb02 5617 	mls	r6, r2, r7, r5
 800b104:	3628      	adds	r6, #40	@ 0x28
 800b106:	446e      	add	r6, sp
 800b108:	460c      	mov	r4, r1
 800b10a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800b10e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800b112:	462e      	mov	r6, r5
 800b114:	42b2      	cmp	r2, r6
 800b116:	f101 0101 	add.w	r1, r1, #1
 800b11a:	463d      	mov	r5, r7
 800b11c:	d9ee      	bls.n	800b0fc <__utoa+0x40>
 800b11e:	2200      	movs	r2, #0
 800b120:	545a      	strb	r2, [r3, r1]
 800b122:	1919      	adds	r1, r3, r4
 800b124:	1aa5      	subs	r5, r4, r2
 800b126:	42aa      	cmp	r2, r5
 800b128:	dae3      	bge.n	800b0f2 <__utoa+0x36>
 800b12a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800b12e:	780e      	ldrb	r6, [r1, #0]
 800b130:	7006      	strb	r6, [r0, #0]
 800b132:	3201      	adds	r2, #1
 800b134:	f801 5901 	strb.w	r5, [r1], #-1
 800b138:	e7f4      	b.n	800b124 <__utoa+0x68>
 800b13a:	bf00      	nop
 800b13c:	0800e3cc 	.word	0x0800e3cc

0800b140 <memset>:
 800b140:	4402      	add	r2, r0
 800b142:	4603      	mov	r3, r0
 800b144:	4293      	cmp	r3, r2
 800b146:	d100      	bne.n	800b14a <memset+0xa>
 800b148:	4770      	bx	lr
 800b14a:	f803 1b01 	strb.w	r1, [r3], #1
 800b14e:	e7f9      	b.n	800b144 <memset+0x4>

0800b150 <__libc_init_array>:
 800b150:	b570      	push	{r4, r5, r6, lr}
 800b152:	4d0d      	ldr	r5, [pc, #52]	@ (800b188 <__libc_init_array+0x38>)
 800b154:	4c0d      	ldr	r4, [pc, #52]	@ (800b18c <__libc_init_array+0x3c>)
 800b156:	1b64      	subs	r4, r4, r5
 800b158:	10a4      	asrs	r4, r4, #2
 800b15a:	2600      	movs	r6, #0
 800b15c:	42a6      	cmp	r6, r4
 800b15e:	d109      	bne.n	800b174 <__libc_init_array+0x24>
 800b160:	4d0b      	ldr	r5, [pc, #44]	@ (800b190 <__libc_init_array+0x40>)
 800b162:	4c0c      	ldr	r4, [pc, #48]	@ (800b194 <__libc_init_array+0x44>)
 800b164:	f000 f818 	bl	800b198 <_init>
 800b168:	1b64      	subs	r4, r4, r5
 800b16a:	10a4      	asrs	r4, r4, #2
 800b16c:	2600      	movs	r6, #0
 800b16e:	42a6      	cmp	r6, r4
 800b170:	d105      	bne.n	800b17e <__libc_init_array+0x2e>
 800b172:	bd70      	pop	{r4, r5, r6, pc}
 800b174:	f855 3b04 	ldr.w	r3, [r5], #4
 800b178:	4798      	blx	r3
 800b17a:	3601      	adds	r6, #1
 800b17c:	e7ee      	b.n	800b15c <__libc_init_array+0xc>
 800b17e:	f855 3b04 	ldr.w	r3, [r5], #4
 800b182:	4798      	blx	r3
 800b184:	3601      	adds	r6, #1
 800b186:	e7f2      	b.n	800b16e <__libc_init_array+0x1e>
 800b188:	0800e3fc 	.word	0x0800e3fc
 800b18c:	0800e3fc 	.word	0x0800e3fc
 800b190:	0800e3fc 	.word	0x0800e3fc
 800b194:	0800e404 	.word	0x0800e404

0800b198 <_init>:
 800b198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b19a:	bf00      	nop
 800b19c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b19e:	bc08      	pop	{r3}
 800b1a0:	469e      	mov	lr, r3
 800b1a2:	4770      	bx	lr

0800b1a4 <_fini>:
 800b1a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b1a6:	bf00      	nop
 800b1a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b1aa:	bc08      	pop	{r3}
 800b1ac:	469e      	mov	lr, r3
 800b1ae:	4770      	bx	lr
