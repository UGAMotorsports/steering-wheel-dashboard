
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007c00  0800fe5c  0800fe5c  00010e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a5c  08017a5c  00019184  2**0
                  CONTENTS
  4 .ARM          00000008  08017a5c  08017a5c  00018a5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a64  08017a64  00019184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017a64  08017a64  00018a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017a70  08017a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08017a74  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000184  08017bf8  00019184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001958  08017bf8  00019958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023c52  00000000  00000000  000191b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005fa6  00000000  00000000  0003ce06  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00042db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001674  00000000  00000000  00044b40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020552  00000000  00000000  000461b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000276a6  00000000  00000000  00066706  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ab8b  00000000  00000000  0008ddac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128937  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f4  00000000  00000000  0012897c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00130a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe44 	.word	0x0800fe44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800fe44 	.word	0x0800fe44

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000586:	2300      	movs	r3, #0
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	4b17      	ldr	r3, [pc, #92]	@ (80005e8 <MX_DMA_Init+0x68>)
 800058c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058e:	4a16      	ldr	r2, [pc, #88]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000590:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000594:	6313      	str	r3, [r2, #48]	@ 0x30
 8000596:	4b14      	ldr	r3, [pc, #80]	@ (80005e8 <MX_DMA_Init+0x68>)
 8000598:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800059e:	607b      	str	r3, [r7, #4]
 80005a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	603b      	str	r3, [r7, #0]
 80005a6:	4b10      	ldr	r3, [pc, #64]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	4a0f      	ldr	r2, [pc, #60]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005ac:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005b2:	4b0d      	ldr	r3, [pc, #52]	@ (80005e8 <MX_DMA_Init+0x68>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005be:	2200      	movs	r2, #0
 80005c0:	2100      	movs	r1, #0
 80005c2:	200b      	movs	r0, #11
 80005c4:	f004 f881 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80005c8:	200b      	movs	r0, #11
 80005ca:	f004 f89a 	bl	8004702 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2100      	movs	r1, #0
 80005d2:	203b      	movs	r0, #59	@ 0x3b
 80005d4:	f004 f879 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 80005d8:	203b      	movs	r0, #59	@ 0x3b
 80005da:	f004 f892 	bl	8004702 <HAL_NVIC_EnableIRQ>

}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800

080005ec <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 80005f0:	2200      	movs	r2, #0
 80005f2:	2101      	movs	r1, #1
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <SELECT+0x18>)
 80005f6:	f004 fdb5 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80005fa:	2001      	movs	r0, #1
 80005fc:	f003 ff66 	bl	80044cc <HAL_Delay>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020400 	.word	0x40020400

08000608 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 800060c:	2201      	movs	r2, #1
 800060e:	2101      	movs	r1, #1
 8000610:	4803      	ldr	r0, [pc, #12]	@ (8000620 <DESELECT+0x18>)
 8000612:	f004 fda7 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000616:	2001      	movs	r0, #1
 8000618:	f003 ff58 	bl	80044cc <HAL_Delay>
}
 800061c:	bf00      	nop
 800061e:	bd80      	pop	{r7, pc}
 8000620:	40020400 	.word	0x40020400

08000624 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	b082      	sub	sp, #8
 8000628:	af00      	add	r7, sp, #0
 800062a:	4603      	mov	r3, r0
 800062c:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062e:	bf00      	nop
 8000630:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <SPI_TxByte+0x30>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	689b      	ldr	r3, [r3, #8]
 8000636:	f003 0302 	and.w	r3, r3, #2
 800063a:	2b02      	cmp	r3, #2
 800063c:	d1f8      	bne.n	8000630 <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800063e:	1df9      	adds	r1, r7, #7
 8000640:	2364      	movs	r3, #100	@ 0x64
 8000642:	2201      	movs	r2, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_TxByte+0x30>)
 8000646:	f006 fcca 	bl	8006fde <HAL_SPI_Transmit>
}
 800064a:	bf00      	nop
 800064c:	3708      	adds	r7, #8
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000214 	.word	0x20000214

08000658 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
 8000660:	460b      	mov	r3, r1
 8000662:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000664:	bf00      	nop
 8000666:	4b08      	ldr	r3, [pc, #32]	@ (8000688 <SPI_TxBuffer+0x30>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	689b      	ldr	r3, [r3, #8]
 800066c:	f003 0302 	and.w	r3, r3, #2
 8000670:	2b02      	cmp	r3, #2
 8000672:	d1f8      	bne.n	8000666 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000674:	887a      	ldrh	r2, [r7, #2]
 8000676:	2364      	movs	r3, #100	@ 0x64
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	4803      	ldr	r0, [pc, #12]	@ (8000688 <SPI_TxBuffer+0x30>)
 800067c:	f006 fcaf 	bl	8006fde <HAL_SPI_Transmit>
}
 8000680:	bf00      	nop
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000214 	.word	0x20000214

0800068c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b084      	sub	sp, #16
 8000690:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 8000692:	23ff      	movs	r3, #255	@ 0xff
 8000694:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000696:	bf00      	nop
 8000698:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <SPI_RxByte+0x34>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	689b      	ldr	r3, [r3, #8]
 800069e:	f003 0302 	and.w	r3, r3, #2
 80006a2:	2b02      	cmp	r3, #2
 80006a4:	d1f8      	bne.n	8000698 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006a6:	1dba      	adds	r2, r7, #6
 80006a8:	1df9      	adds	r1, r7, #7
 80006aa:	2364      	movs	r3, #100	@ 0x64
 80006ac:	9300      	str	r3, [sp, #0]
 80006ae:	2301      	movs	r3, #1
 80006b0:	4803      	ldr	r0, [pc, #12]	@ (80006c0 <SPI_RxByte+0x34>)
 80006b2:	f006 fef1 	bl	8007498 <HAL_SPI_TransmitReceive>

	return data;
 80006b6:	79bb      	ldrb	r3, [r7, #6]
}
 80006b8:	4618      	mov	r0, r3
 80006ba:	3708      	adds	r7, #8
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000214 	.word	0x20000214

080006c4 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 80006cc:	f7ff ffde 	bl	800068c <SPI_RxByte>
 80006d0:	4603      	mov	r3, r0
 80006d2:	461a      	mov	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	701a      	strb	r2, [r3, #0]
}
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}

080006e0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 80006e6:	4b0a      	ldr	r3, [pc, #40]	@ (8000710 <SD_ReadyWait+0x30>)
 80006e8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 80006ec:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 80006ee:	f7ff ffcd 	bl	800068c <SPI_RxByte>
 80006f2:	4603      	mov	r3, r0
 80006f4:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 80006f6:	79fb      	ldrb	r3, [r7, #7]
 80006f8:	2bff      	cmp	r3, #255	@ 0xff
 80006fa:	d003      	beq.n	8000704 <SD_ReadyWait+0x24>
 80006fc:	4b04      	ldr	r3, [pc, #16]	@ (8000710 <SD_ReadyWait+0x30>)
 80006fe:	881b      	ldrh	r3, [r3, #0]
 8000700:	2b00      	cmp	r3, #0
 8000702:	d1f4      	bne.n	80006ee <SD_ReadyWait+0xe>

	return res;
 8000704:	79fb      	ldrb	r3, [r7, #7]
}
 8000706:	4618      	mov	r0, r3
 8000708:	3708      	adds	r7, #8
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	200001a2 	.word	0x200001a2

08000714 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b084      	sub	sp, #16
 8000718:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 800071a:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800071e:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 8000720:	f7ff ff72 	bl	8000608 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
 8000728:	e005      	b.n	8000736 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 800072a:	20ff      	movs	r0, #255	@ 0xff
 800072c:	f7ff ff7a 	bl	8000624 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 8000730:	68bb      	ldr	r3, [r7, #8]
 8000732:	3301      	adds	r3, #1
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
 8000738:	2b09      	cmp	r3, #9
 800073a:	ddf6      	ble.n	800072a <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 800073c:	f7ff ff56 	bl	80005ec <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 8000740:	2340      	movs	r3, #64	@ 0x40
 8000742:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000744:	2300      	movs	r3, #0
 8000746:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000748:	2300      	movs	r3, #0
 800074a:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 8000750:	2300      	movs	r3, #0
 8000752:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000754:	2395      	movs	r3, #149	@ 0x95
 8000756:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000758:	463b      	mov	r3, r7
 800075a:	2106      	movs	r1, #6
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff ff7b 	bl	8000658 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 8000762:	e002      	b.n	800076a <SD_PowerOn+0x56>
	{
		cnt--;
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	3b01      	subs	r3, #1
 8000768:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 800076a:	f7ff ff8f 	bl	800068c <SPI_RxByte>
 800076e:	4603      	mov	r3, r0
 8000770:	2b01      	cmp	r3, #1
 8000772:	d002      	beq.n	800077a <SD_PowerOn+0x66>
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d1f4      	bne.n	8000764 <SD_PowerOn+0x50>
	}

	DESELECT();
 800077a:	f7ff ff45 	bl	8000608 <DESELECT>
	SPI_TxByte(0XFF);
 800077e:	20ff      	movs	r0, #255	@ 0xff
 8000780:	f7ff ff50 	bl	8000624 <SPI_TxByte>

	PowerFlag = 1;
 8000784:	4b03      	ldr	r3, [pc, #12]	@ (8000794 <SD_PowerOn+0x80>)
 8000786:	2201      	movs	r2, #1
 8000788:	701a      	strb	r2, [r3, #0]
}
 800078a:	bf00      	nop
 800078c:	3710      	adds	r7, #16
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200001a5 	.word	0x200001a5

08000798 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 8000798:	b480      	push	{r7}
 800079a:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	@ (80007ac <SD_PowerOff+0x14>)
 800079e:	2200      	movs	r2, #0
 80007a0:	701a      	strb	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001a5 	.word	0x200001a5

080007b0 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007b4:	4b03      	ldr	r3, [pc, #12]	@ (80007c4 <SD_CheckPower+0x14>)
 80007b6:	781b      	ldrb	r3, [r3, #0]
}
 80007b8:	4618      	mov	r0, r3
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
 80007c2:	bf00      	nop
 80007c4:	200001a5 	.word	0x200001a5

080007c8 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
 80007d0:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 80007d2:	4b13      	ldr	r3, [pc, #76]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007d4:	22c8      	movs	r2, #200	@ 0xc8
 80007d6:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 80007d8:	f7ff ff58 	bl	800068c <SPI_RxByte>
 80007dc:	4603      	mov	r3, r0
 80007de:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	2bff      	cmp	r3, #255	@ 0xff
 80007e4:	d103      	bne.n	80007ee <SD_RxDataBlock+0x26>
 80007e6:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <SD_RxDataBlock+0x58>)
 80007e8:	881b      	ldrh	r3, [r3, #0]
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d1f4      	bne.n	80007d8 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 80007ee:	7bfb      	ldrb	r3, [r7, #15]
 80007f0:	2bfe      	cmp	r3, #254	@ 0xfe
 80007f2:	d001      	beq.n	80007f8 <SD_RxDataBlock+0x30>
 80007f4:	2300      	movs	r3, #0
 80007f6:	e00f      	b.n	8000818 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	1c5a      	adds	r2, r3, #1
 80007fc:	607a      	str	r2, [r7, #4]
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ff60 	bl	80006c4 <SPI_RxBytePtr>
	} while(len--);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	1e5a      	subs	r2, r3, #1
 8000808:	603a      	str	r2, [r7, #0]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d1f4      	bne.n	80007f8 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800080e:	f7ff ff3d 	bl	800068c <SPI_RxByte>
	SPI_RxByte();
 8000812:	f7ff ff3b 	bl	800068c <SPI_RxByte>

	return TRUE;
 8000816:	2301      	movs	r3, #1
}
 8000818:	4618      	mov	r0, r3
 800081a:	3710      	adds	r7, #16
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	200001a0 	.word	0x200001a0

08000824 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b084      	sub	sp, #16
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	460b      	mov	r3, r1
 800082e:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000834:	f7ff ff54 	bl	80006e0 <SD_ReadyWait>
 8000838:	4603      	mov	r3, r0
 800083a:	2bff      	cmp	r3, #255	@ 0xff
 800083c:	d001      	beq.n	8000842 <SD_TxDataBlock+0x1e>
 800083e:	2300      	movs	r3, #0
 8000840:	e02f      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 8000842:	78fb      	ldrb	r3, [r7, #3]
 8000844:	4618      	mov	r0, r3
 8000846:	f7ff feed 	bl	8000624 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 800084a:	78fb      	ldrb	r3, [r7, #3]
 800084c:	2bfd      	cmp	r3, #253	@ 0xfd
 800084e:	d020      	beq.n	8000892 <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 8000850:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000854:	6878      	ldr	r0, [r7, #4]
 8000856:	f7ff feff 	bl	8000658 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 800085a:	f7ff ff17 	bl	800068c <SPI_RxByte>
		SPI_RxByte();
 800085e:	f7ff ff15 	bl	800068c <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 8000862:	e00b      	b.n	800087c <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 8000864:	f7ff ff12 	bl	800068c <SPI_RxByte>
 8000868:	4603      	mov	r3, r0
 800086a:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 800086c:	7bfb      	ldrb	r3, [r7, #15]
 800086e:	f003 031f 	and.w	r3, r3, #31
 8000872:	2b05      	cmp	r3, #5
 8000874:	d006      	beq.n	8000884 <SD_TxDataBlock+0x60>
			i++;
 8000876:	7bbb      	ldrb	r3, [r7, #14]
 8000878:	3301      	adds	r3, #1
 800087a:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 800087c:	7bbb      	ldrb	r3, [r7, #14]
 800087e:	2b40      	cmp	r3, #64	@ 0x40
 8000880:	d9f0      	bls.n	8000864 <SD_TxDataBlock+0x40>
 8000882:	e000      	b.n	8000886 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 8000884:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 8000886:	bf00      	nop
 8000888:	f7ff ff00 	bl	800068c <SPI_RxByte>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d0fa      	beq.n	8000888 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 8000892:	7bfb      	ldrb	r3, [r7, #15]
 8000894:	f003 031f 	and.w	r3, r3, #31
 8000898:	2b05      	cmp	r3, #5
 800089a:	d101      	bne.n	80008a0 <SD_TxDataBlock+0x7c>
 800089c:	2301      	movs	r3, #1
 800089e:	e000      	b.n	80008a2 <SD_TxDataBlock+0x7e>

	return FALSE;
 80008a0:	2300      	movs	r3, #0
}
 80008a2:	4618      	mov	r0, r3
 80008a4:	3710      	adds	r7, #16
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}

080008aa <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008aa:	b580      	push	{r7, lr}
 80008ac:	b084      	sub	sp, #16
 80008ae:	af00      	add	r7, sp, #0
 80008b0:	4603      	mov	r3, r0
 80008b2:	6039      	str	r1, [r7, #0]
 80008b4:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008b6:	f7ff ff13 	bl	80006e0 <SD_ReadyWait>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2bff      	cmp	r3, #255	@ 0xff
 80008be:	d001      	beq.n	80008c4 <SD_SendCmd+0x1a>
 80008c0:	23ff      	movs	r3, #255	@ 0xff
 80008c2:	e042      	b.n	800094a <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	4618      	mov	r0, r3
 80008c8:	f7ff feac 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	0e1b      	lsrs	r3, r3, #24
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	4618      	mov	r0, r3
 80008d4:	f7ff fea6 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 80008d8:	683b      	ldr	r3, [r7, #0]
 80008da:	0c1b      	lsrs	r3, r3, #16
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	4618      	mov	r0, r3
 80008e0:	f7ff fea0 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	0a1b      	lsrs	r3, r3, #8
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4618      	mov	r0, r3
 80008ec:	f7ff fe9a 	bl	8000624 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 80008f0:	683b      	ldr	r3, [r7, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	4618      	mov	r0, r3
 80008f6:	f7ff fe95 	bl	8000624 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 80008fa:	79fb      	ldrb	r3, [r7, #7]
 80008fc:	2b40      	cmp	r3, #64	@ 0x40
 80008fe:	d102      	bne.n	8000906 <SD_SendCmd+0x5c>
 8000900:	2395      	movs	r3, #149	@ 0x95
 8000902:	73fb      	strb	r3, [r7, #15]
 8000904:	e007      	b.n	8000916 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000906:	79fb      	ldrb	r3, [r7, #7]
 8000908:	2b48      	cmp	r3, #72	@ 0x48
 800090a:	d102      	bne.n	8000912 <SD_SendCmd+0x68>
 800090c:	2387      	movs	r3, #135	@ 0x87
 800090e:	73fb      	strb	r3, [r7, #15]
 8000910:	e001      	b.n	8000916 <SD_SendCmd+0x6c>
	else crc = 1;
 8000912:	2301      	movs	r3, #1
 8000914:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000916:	7bfb      	ldrb	r3, [r7, #15]
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fe83 	bl	8000624 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	2b4c      	cmp	r3, #76	@ 0x4c
 8000922:	d101      	bne.n	8000928 <SD_SendCmd+0x7e>
 8000924:	f7ff feb2 	bl	800068c <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000928:	230a      	movs	r3, #10
 800092a:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 800092c:	f7ff feae 	bl	800068c <SPI_RxByte>
 8000930:	4603      	mov	r3, r0
 8000932:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000934:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000938:	2b00      	cmp	r3, #0
 800093a:	da05      	bge.n	8000948 <SD_SendCmd+0x9e>
 800093c:	7bbb      	ldrb	r3, [r7, #14]
 800093e:	3b01      	subs	r3, #1
 8000940:	73bb      	strb	r3, [r7, #14]
 8000942:	7bbb      	ldrb	r3, [r7, #14]
 8000944:	2b00      	cmp	r3, #0
 8000946:	d1f1      	bne.n	800092c <SD_SendCmd+0x82>

	return res;
 8000948:	7b7b      	ldrb	r3, [r7, #13]
}
 800094a:	4618      	mov	r0, r3
 800094c:	3710      	adds	r7, #16
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000954:	b590      	push	{r4, r7, lr}
 8000956:	b085      	sub	sp, #20
 8000958:	af00      	add	r7, sp, #0
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800095e:	79fb      	ldrb	r3, [r7, #7]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d001      	beq.n	8000968 <SD_disk_initialize+0x14>
 8000964:	2301      	movs	r3, #1
 8000966:	e0d1      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 8000968:	4b6a      	ldr	r3, [pc, #424]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0302 	and.w	r3, r3, #2
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <SD_disk_initialize+0x2a>
 8000976:	4b67      	ldr	r3, [pc, #412]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	b2db      	uxtb	r3, r3
 800097c:	e0c6      	b.n	8000b0c <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 800097e:	f7ff fec9 	bl	8000714 <SD_PowerOn>

	/* slave select */
	SELECT();
 8000982:	f7ff fe33 	bl	80005ec <SELECT>

	/* check disk type */
	type = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 800098a:	2100      	movs	r1, #0
 800098c:	2040      	movs	r0, #64	@ 0x40
 800098e:	f7ff ff8c 	bl	80008aa <SD_SendCmd>
 8000992:	4603      	mov	r3, r0
 8000994:	2b01      	cmp	r3, #1
 8000996:	f040 80a1 	bne.w	8000adc <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 800099a:	4b5f      	ldr	r3, [pc, #380]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 800099c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009a0:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009a2:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009a6:	2048      	movs	r0, #72	@ 0x48
 80009a8:	f7ff ff7f 	bl	80008aa <SD_SendCmd>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d155      	bne.n	8000a5e <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009b2:	2300      	movs	r3, #0
 80009b4:	73fb      	strb	r3, [r7, #15]
 80009b6:	e00c      	b.n	80009d2 <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009b8:	7bfc      	ldrb	r4, [r7, #15]
 80009ba:	f7ff fe67 	bl	800068c <SPI_RxByte>
 80009be:	4603      	mov	r3, r0
 80009c0:	461a      	mov	r2, r3
 80009c2:	f104 0310 	add.w	r3, r4, #16
 80009c6:	443b      	add	r3, r7
 80009c8:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 80009cc:	7bfb      	ldrb	r3, [r7, #15]
 80009ce:	3301      	adds	r3, #1
 80009d0:	73fb      	strb	r3, [r7, #15]
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	2b03      	cmp	r3, #3
 80009d6:	d9ef      	bls.n	80009b8 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 80009d8:	7abb      	ldrb	r3, [r7, #10]
 80009da:	2b01      	cmp	r3, #1
 80009dc:	d17e      	bne.n	8000adc <SD_disk_initialize+0x188>
 80009de:	7afb      	ldrb	r3, [r7, #11]
 80009e0:	2baa      	cmp	r3, #170	@ 0xaa
 80009e2:	d17b      	bne.n	8000adc <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009e4:	2100      	movs	r1, #0
 80009e6:	2077      	movs	r0, #119	@ 0x77
 80009e8:	f7ff ff5f 	bl	80008aa <SD_SendCmd>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b01      	cmp	r3, #1
 80009f0:	d807      	bhi.n	8000a02 <SD_disk_initialize+0xae>
 80009f2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80009f6:	2069      	movs	r0, #105	@ 0x69
 80009f8:	f7ff ff57 	bl	80008aa <SD_SendCmd>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d004      	beq.n	8000a0c <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a02:	4b45      	ldr	r3, [pc, #276]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a04:	881b      	ldrh	r3, [r3, #0]
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d1ec      	bne.n	80009e4 <SD_disk_initialize+0x90>
 8000a0a:	e000      	b.n	8000a0e <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a0c:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a0e:	4b42      	ldr	r3, [pc, #264]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000a10:	881b      	ldrh	r3, [r3, #0]
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d062      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000a16:	2100      	movs	r1, #0
 8000a18:	207a      	movs	r0, #122	@ 0x7a
 8000a1a:	f7ff ff46 	bl	80008aa <SD_SendCmd>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d15b      	bne.n	8000adc <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a24:	2300      	movs	r3, #0
 8000a26:	73fb      	strb	r3, [r7, #15]
 8000a28:	e00c      	b.n	8000a44 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a2a:	7bfc      	ldrb	r4, [r7, #15]
 8000a2c:	f7ff fe2e 	bl	800068c <SPI_RxByte>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
 8000a34:	f104 0310 	add.w	r3, r4, #16
 8000a38:	443b      	add	r3, r7
 8000a3a:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a3e:	7bfb      	ldrb	r3, [r7, #15]
 8000a40:	3301      	adds	r3, #1
 8000a42:	73fb      	strb	r3, [r7, #15]
 8000a44:	7bfb      	ldrb	r3, [r7, #15]
 8000a46:	2b03      	cmp	r3, #3
 8000a48:	d9ef      	bls.n	8000a2a <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a4a:	7a3b      	ldrb	r3, [r7, #8]
 8000a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SD_disk_initialize+0x104>
 8000a54:	230c      	movs	r3, #12
 8000a56:	e000      	b.n	8000a5a <SD_disk_initialize+0x106>
 8000a58:	2304      	movs	r3, #4
 8000a5a:	73bb      	strb	r3, [r7, #14]
 8000a5c:	e03e      	b.n	8000adc <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2077      	movs	r0, #119	@ 0x77
 8000a62:	f7ff ff22 	bl	80008aa <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b01      	cmp	r3, #1
 8000a6a:	d808      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	2069      	movs	r0, #105	@ 0x69
 8000a70:	f7ff ff1b 	bl	80008aa <SD_SendCmd>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b01      	cmp	r3, #1
 8000a78:	d801      	bhi.n	8000a7e <SD_disk_initialize+0x12a>
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	e000      	b.n	8000a80 <SD_disk_initialize+0x12c>
 8000a7e:	2301      	movs	r3, #1
 8000a80:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000a82:	7bbb      	ldrb	r3, [r7, #14]
 8000a84:	2b02      	cmp	r3, #2
 8000a86:	d10e      	bne.n	8000aa6 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2077      	movs	r0, #119	@ 0x77
 8000a8c:	f7ff ff0d 	bl	80008aa <SD_SendCmd>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d80e      	bhi.n	8000ab4 <SD_disk_initialize+0x160>
 8000a96:	2100      	movs	r1, #0
 8000a98:	2069      	movs	r0, #105	@ 0x69
 8000a9a:	f7ff ff06 	bl	80008aa <SD_SendCmd>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	2b00      	cmp	r3, #0
 8000aa2:	d107      	bne.n	8000ab4 <SD_disk_initialize+0x160>
 8000aa4:	e00c      	b.n	8000ac0 <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	2041      	movs	r0, #65	@ 0x41
 8000aaa:	f7ff fefe 	bl	80008aa <SD_SendCmd>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d004      	beq.n	8000abe <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000ab4:	4b18      	ldr	r3, [pc, #96]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ab6:	881b      	ldrh	r3, [r3, #0]
 8000ab8:	2b00      	cmp	r3, #0
 8000aba:	d1e2      	bne.n	8000a82 <SD_disk_initialize+0x12e>
 8000abc:	e000      	b.n	8000ac0 <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000abe:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000ac0:	4b15      	ldr	r3, [pc, #84]	@ (8000b18 <SD_disk_initialize+0x1c4>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d007      	beq.n	8000ad8 <SD_disk_initialize+0x184>
 8000ac8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000acc:	2050      	movs	r0, #80	@ 0x50
 8000ace:	f7ff feec 	bl	80008aa <SD_SendCmd>
 8000ad2:	4603      	mov	r3, r0
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d001      	beq.n	8000adc <SD_disk_initialize+0x188>
 8000ad8:	2300      	movs	r3, #0
 8000ada:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000adc:	4a0f      	ldr	r2, [pc, #60]	@ (8000b1c <SD_disk_initialize+0x1c8>)
 8000ade:	7bbb      	ldrb	r3, [r7, #14]
 8000ae0:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000ae2:	f7ff fd91 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000ae6:	f7ff fdd1 	bl	800068c <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000aea:	7bbb      	ldrb	r3, [r7, #14]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d008      	beq.n	8000b02 <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000af0:	4b08      	ldr	r3, [pc, #32]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	f023 0301 	bic.w	r3, r3, #1
 8000afa:	b2da      	uxtb	r2, r3
 8000afc:	4b05      	ldr	r3, [pc, #20]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000afe:	701a      	strb	r2, [r3, #0]
 8000b00:	e001      	b.n	8000b06 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b02:	f7ff fe49 	bl	8000798 <SD_PowerOff>
	}

	return Stat;
 8000b06:	4b03      	ldr	r3, [pc, #12]	@ (8000b14 <SD_disk_initialize+0x1c0>)
 8000b08:	781b      	ldrb	r3, [r3, #0]
 8000b0a:	b2db      	uxtb	r3, r3
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3714      	adds	r7, #20
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd90      	pop	{r4, r7, pc}
 8000b14:	20000000 	.word	0x20000000
 8000b18:	200001a0 	.word	0x200001a0
 8000b1c:	200001a4 	.word	0x200001a4

08000b20 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b20:	b480      	push	{r7}
 8000b22:	b083      	sub	sp, #12
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <SD_disk_status+0x14>
 8000b30:	2301      	movs	r3, #1
 8000b32:	e002      	b.n	8000b3a <SD_disk_status+0x1a>
	return Stat;
 8000b34:	4b04      	ldr	r3, [pc, #16]	@ (8000b48 <SD_disk_status+0x28>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	b2db      	uxtb	r3, r3
}
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	370c      	adds	r7, #12
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000000 	.word	0x20000000

08000b4c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60b9      	str	r1, [r7, #8]
 8000b54:	607a      	str	r2, [r7, #4]
 8000b56:	603b      	str	r3, [r7, #0]
 8000b58:	4603      	mov	r3, r0
 8000b5a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b5c:	7bfb      	ldrb	r3, [r7, #15]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d102      	bne.n	8000b68 <SD_disk_read+0x1c>
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d101      	bne.n	8000b6c <SD_disk_read+0x20>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	e051      	b.n	8000c10 <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b6c:	4b2a      	ldr	r3, [pc, #168]	@ (8000c18 <SD_disk_read+0xcc>)
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	b2db      	uxtb	r3, r3
 8000b72:	f003 0301 	and.w	r3, r3, #1
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d001      	beq.n	8000b7e <SD_disk_read+0x32>
 8000b7a:	2303      	movs	r3, #3
 8000b7c:	e048      	b.n	8000c10 <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000b7e:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <SD_disk_read+0xd0>)
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	f003 0304 	and.w	r3, r3, #4
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d102      	bne.n	8000b90 <SD_disk_read+0x44>
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	025b      	lsls	r3, r3, #9
 8000b8e:	607b      	str	r3, [r7, #4]

	SELECT();
 8000b90:	f7ff fd2c 	bl	80005ec <SELECT>

	if (count == 1)
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d111      	bne.n	8000bbe <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	2051      	movs	r0, #81	@ 0x51
 8000b9e:	f7ff fe84 	bl	80008aa <SD_SendCmd>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d129      	bne.n	8000bfc <SD_disk_read+0xb0>
 8000ba8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bac:	68b8      	ldr	r0, [r7, #8]
 8000bae:	f7ff fe0b 	bl	80007c8 <SD_RxDataBlock>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d021      	beq.n	8000bfc <SD_disk_read+0xb0>
 8000bb8:	2300      	movs	r3, #0
 8000bba:	603b      	str	r3, [r7, #0]
 8000bbc:	e01e      	b.n	8000bfc <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bbe:	6879      	ldr	r1, [r7, #4]
 8000bc0:	2052      	movs	r0, #82	@ 0x52
 8000bc2:	f7ff fe72 	bl	80008aa <SD_SendCmd>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d117      	bne.n	8000bfc <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bcc:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000bd0:	68b8      	ldr	r0, [r7, #8]
 8000bd2:	f7ff fdf9 	bl	80007c8 <SD_RxDataBlock>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d00a      	beq.n	8000bf2 <SD_disk_read+0xa6>
				buff += 512;
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000be2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	683b      	ldr	r3, [r7, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d1ed      	bne.n	8000bcc <SD_disk_read+0x80>
 8000bf0:	e000      	b.n	8000bf4 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000bf2:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	204c      	movs	r0, #76	@ 0x4c
 8000bf8:	f7ff fe57 	bl	80008aa <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000bfc:	f7ff fd04 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000c00:	f7ff fd44 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	bf14      	ite	ne
 8000c0a:	2301      	movne	r3, #1
 8000c0c:	2300      	moveq	r3, #0
 8000c0e:	b2db      	uxtb	r3, r3
}
 8000c10:	4618      	mov	r0, r3
 8000c12:	3710      	adds	r7, #16
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000000 	.word	0x20000000
 8000c1c:	200001a4 	.word	0x200001a4

08000c20 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b084      	sub	sp, #16
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	60b9      	str	r1, [r7, #8]
 8000c28:	607a      	str	r2, [r7, #4]
 8000c2a:	603b      	str	r3, [r7, #0]
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c30:	7bfb      	ldrb	r3, [r7, #15]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d102      	bne.n	8000c3c <SD_disk_write+0x1c>
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d101      	bne.n	8000c40 <SD_disk_write+0x20>
 8000c3c:	2304      	movs	r3, #4
 8000c3e:	e06b      	b.n	8000d18 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c40:	4b37      	ldr	r3, [pc, #220]	@ (8000d20 <SD_disk_write+0x100>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	b2db      	uxtb	r3, r3
 8000c46:	f003 0301 	and.w	r3, r3, #1
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <SD_disk_write+0x32>
 8000c4e:	2303      	movs	r3, #3
 8000c50:	e062      	b.n	8000d18 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c52:	4b33      	ldr	r3, [pc, #204]	@ (8000d20 <SD_disk_write+0x100>)
 8000c54:	781b      	ldrb	r3, [r3, #0]
 8000c56:	b2db      	uxtb	r3, r3
 8000c58:	f003 0304 	and.w	r3, r3, #4
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <SD_disk_write+0x44>
 8000c60:	2302      	movs	r3, #2
 8000c62:	e059      	b.n	8000d18 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000c64:	4b2f      	ldr	r3, [pc, #188]	@ (8000d24 <SD_disk_write+0x104>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d102      	bne.n	8000c76 <SD_disk_write+0x56>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	025b      	lsls	r3, r3, #9
 8000c74:	607b      	str	r3, [r7, #4]

	SELECT();
 8000c76:	f7ff fcb9 	bl	80005ec <SELECT>

	if (count == 1)
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	2b01      	cmp	r3, #1
 8000c7e:	d110      	bne.n	8000ca2 <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c80:	6879      	ldr	r1, [r7, #4]
 8000c82:	2058      	movs	r0, #88	@ 0x58
 8000c84:	f7ff fe11 	bl	80008aa <SD_SendCmd>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d13a      	bne.n	8000d04 <SD_disk_write+0xe4>
 8000c8e:	21fe      	movs	r1, #254	@ 0xfe
 8000c90:	68b8      	ldr	r0, [r7, #8]
 8000c92:	f7ff fdc7 	bl	8000824 <SD_TxDataBlock>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d033      	beq.n	8000d04 <SD_disk_write+0xe4>
			count = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	603b      	str	r3, [r7, #0]
 8000ca0:	e030      	b.n	8000d04 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000ca2:	4b20      	ldr	r3, [pc, #128]	@ (8000d24 <SD_disk_write+0x104>)
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	f003 0302 	and.w	r3, r3, #2
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d007      	beq.n	8000cbe <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cae:	2100      	movs	r1, #0
 8000cb0:	2077      	movs	r0, #119	@ 0x77
 8000cb2:	f7ff fdfa 	bl	80008aa <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cb6:	6839      	ldr	r1, [r7, #0]
 8000cb8:	2057      	movs	r0, #87	@ 0x57
 8000cba:	f7ff fdf6 	bl	80008aa <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cbe:	6879      	ldr	r1, [r7, #4]
 8000cc0:	2059      	movs	r0, #89	@ 0x59
 8000cc2:	f7ff fdf2 	bl	80008aa <SD_SendCmd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d11b      	bne.n	8000d04 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000ccc:	21fc      	movs	r1, #252	@ 0xfc
 8000cce:	68b8      	ldr	r0, [r7, #8]
 8000cd0:	f7ff fda8 	bl	8000824 <SD_TxDataBlock>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d00a      	beq.n	8000cf0 <SD_disk_write+0xd0>
				buff += 512;
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000ce0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	3b01      	subs	r3, #1
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1ee      	bne.n	8000ccc <SD_disk_write+0xac>
 8000cee:	e000      	b.n	8000cf2 <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000cf0:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000cf2:	21fd      	movs	r1, #253	@ 0xfd
 8000cf4:	2000      	movs	r0, #0
 8000cf6:	f7ff fd95 	bl	8000824 <SD_TxDataBlock>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d101      	bne.n	8000d04 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d00:	2301      	movs	r3, #1
 8000d02:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d04:	f7ff fc80 	bl	8000608 <DESELECT>
	SPI_RxByte();
 8000d08:	f7ff fcc0 	bl	800068c <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	bf14      	ite	ne
 8000d12:	2301      	movne	r3, #1
 8000d14:	2300      	moveq	r3, #0
 8000d16:	b2db      	uxtb	r3, r3
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20000000 	.word	0x20000000
 8000d24:	200001a4 	.word	0x200001a4

08000d28 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d28:	b590      	push	{r4, r7, lr}
 8000d2a:	b08b      	sub	sp, #44	@ 0x2c
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	4603      	mov	r3, r0
 8000d30:	603a      	str	r2, [r7, #0]
 8000d32:	71fb      	strb	r3, [r7, #7]
 8000d34:	460b      	mov	r3, r1
 8000d36:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d3c:	79fb      	ldrb	r3, [r7, #7]
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <SD_disk_ioctl+0x1e>
 8000d42:	2304      	movs	r3, #4
 8000d44:	e113      	b.n	8000f6e <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d46:	2301      	movs	r3, #1
 8000d48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d4c:	79bb      	ldrb	r3, [r7, #6]
 8000d4e:	2b05      	cmp	r3, #5
 8000d50:	d124      	bne.n	8000d9c <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d52:	6a3b      	ldr	r3, [r7, #32]
 8000d54:	781b      	ldrb	r3, [r3, #0]
 8000d56:	2b02      	cmp	r3, #2
 8000d58:	d012      	beq.n	8000d80 <SD_disk_ioctl+0x58>
 8000d5a:	2b02      	cmp	r3, #2
 8000d5c:	dc1a      	bgt.n	8000d94 <SD_disk_ioctl+0x6c>
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d002      	beq.n	8000d68 <SD_disk_ioctl+0x40>
 8000d62:	2b01      	cmp	r3, #1
 8000d64:	d006      	beq.n	8000d74 <SD_disk_ioctl+0x4c>
 8000d66:	e015      	b.n	8000d94 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000d68:	f7ff fd16 	bl	8000798 <SD_PowerOff>
			res = RES_OK;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d72:	e0fa      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000d74:	f7ff fcce 	bl	8000714 <SD_PowerOn>
			res = RES_OK;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d7e:	e0f4      	b.n	8000f6a <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000d80:	6a3b      	ldr	r3, [r7, #32]
 8000d82:	1c5c      	adds	r4, r3, #1
 8000d84:	f7ff fd14 	bl	80007b0 <SD_CheckPower>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000d92:	e0ea      	b.n	8000f6a <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000d94:	2304      	movs	r3, #4
 8000d96:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d9a:	e0e6      	b.n	8000f6a <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d9c:	4b76      	ldr	r3, [pc, #472]	@ (8000f78 <SD_disk_ioctl+0x250>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <SD_disk_ioctl+0x86>
 8000daa:	2303      	movs	r3, #3
 8000dac:	e0df      	b.n	8000f6e <SD_disk_ioctl+0x246>

		SELECT();
 8000dae:	f7ff fc1d 	bl	80005ec <SELECT>

		switch (ctrl)
 8000db2:	79bb      	ldrb	r3, [r7, #6]
 8000db4:	2b0d      	cmp	r3, #13
 8000db6:	f200 80c9 	bhi.w	8000f4c <SD_disk_ioctl+0x224>
 8000dba:	a201      	add	r2, pc, #4	@ (adr r2, 8000dc0 <SD_disk_ioctl+0x98>)
 8000dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dc0:	08000eb7 	.word	0x08000eb7
 8000dc4:	08000df9 	.word	0x08000df9
 8000dc8:	08000ea7 	.word	0x08000ea7
 8000dcc:	08000f4d 	.word	0x08000f4d
 8000dd0:	08000f4d 	.word	0x08000f4d
 8000dd4:	08000f4d 	.word	0x08000f4d
 8000dd8:	08000f4d 	.word	0x08000f4d
 8000ddc:	08000f4d 	.word	0x08000f4d
 8000de0:	08000f4d 	.word	0x08000f4d
 8000de4:	08000f4d 	.word	0x08000f4d
 8000de8:	08000f4d 	.word	0x08000f4d
 8000dec:	08000ec9 	.word	0x08000ec9
 8000df0:	08000eed 	.word	0x08000eed
 8000df4:	08000f11 	.word	0x08000f11
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000df8:	2100      	movs	r1, #0
 8000dfa:	2049      	movs	r0, #73	@ 0x49
 8000dfc:	f7ff fd55 	bl	80008aa <SD_SendCmd>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	f040 80a6 	bne.w	8000f54 <SD_disk_ioctl+0x22c>
 8000e08:	f107 030c 	add.w	r3, r7, #12
 8000e0c:	2110      	movs	r1, #16
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff fcda 	bl	80007c8 <SD_RxDataBlock>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	f000 809c 	beq.w	8000f54 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e1c:	7b3b      	ldrb	r3, [r7, #12]
 8000e1e:	099b      	lsrs	r3, r3, #6
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d10d      	bne.n	8000e42 <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e26:	7d7b      	ldrb	r3, [r7, #21]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	7d3b      	ldrb	r3, [r7, #20]
 8000e2c:	021b      	lsls	r3, r3, #8
 8000e2e:	b29b      	uxth	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	3301      	adds	r3, #1
 8000e36:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e38:	8bfb      	ldrh	r3, [r7, #30]
 8000e3a:	029a      	lsls	r2, r3, #10
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	e02d      	b.n	8000e9e <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e42:	7c7b      	ldrb	r3, [r7, #17]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	7dbb      	ldrb	r3, [r7, #22]
 8000e4c:	09db      	lsrs	r3, r3, #7
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4413      	add	r3, r2
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	7d7b      	ldrb	r3, [r7, #21]
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	b2db      	uxtb	r3, r3
 8000e5a:	f003 0306 	and.w	r3, r3, #6
 8000e5e:	b2db      	uxtb	r3, r3
 8000e60:	4413      	add	r3, r2
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	3302      	adds	r3, #2
 8000e66:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000e6a:	7d3b      	ldrb	r3, [r7, #20]
 8000e6c:	099b      	lsrs	r3, r3, #6
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	461a      	mov	r2, r3
 8000e72:	7cfb      	ldrb	r3, [r7, #19]
 8000e74:	009b      	lsls	r3, r3, #2
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	4413      	add	r3, r2
 8000e7a:	b29a      	uxth	r2, r3
 8000e7c:	7cbb      	ldrb	r3, [r7, #18]
 8000e7e:	029b      	lsls	r3, r3, #10
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e86:	b29b      	uxth	r3, r3
 8000e88:	4413      	add	r3, r2
 8000e8a:	b29b      	uxth	r3, r3
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e90:	8bfa      	ldrh	r2, [r7, #30]
 8000e92:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e96:	3b09      	subs	r3, #9
 8000e98:	409a      	lsls	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ea4:	e056      	b.n	8000f54 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eb4:	e055      	b.n	8000f62 <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000eb6:	f7ff fc13 	bl	80006e0 <SD_ReadyWait>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2bff      	cmp	r3, #255	@ 0xff
 8000ebe:	d14b      	bne.n	8000f58 <SD_disk_ioctl+0x230>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ec6:	e047      	b.n	8000f58 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000ec8:	2100      	movs	r1, #0
 8000eca:	2049      	movs	r0, #73	@ 0x49
 8000ecc:	f7ff fced 	bl	80008aa <SD_SendCmd>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d142      	bne.n	8000f5c <SD_disk_ioctl+0x234>
 8000ed6:	2110      	movs	r1, #16
 8000ed8:	6a38      	ldr	r0, [r7, #32]
 8000eda:	f7ff fc75 	bl	80007c8 <SD_RxDataBlock>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d03b      	beq.n	8000f5c <SD_disk_ioctl+0x234>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000eea:	e037      	b.n	8000f5c <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000eec:	2100      	movs	r1, #0
 8000eee:	204a      	movs	r0, #74	@ 0x4a
 8000ef0:	f7ff fcdb 	bl	80008aa <SD_SendCmd>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d132      	bne.n	8000f60 <SD_disk_ioctl+0x238>
 8000efa:	2110      	movs	r1, #16
 8000efc:	6a38      	ldr	r0, [r7, #32]
 8000efe:	f7ff fc63 	bl	80007c8 <SD_RxDataBlock>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d02b      	beq.n	8000f60 <SD_disk_ioctl+0x238>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f0e:	e027      	b.n	8000f60 <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f10:	2100      	movs	r1, #0
 8000f12:	207a      	movs	r0, #122	@ 0x7a
 8000f14:	f7ff fcc9 	bl	80008aa <SD_SendCmd>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d116      	bne.n	8000f4c <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f1e:	2300      	movs	r3, #0
 8000f20:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f24:	e00b      	b.n	8000f3e <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f26:	6a3c      	ldr	r4, [r7, #32]
 8000f28:	1c63      	adds	r3, r4, #1
 8000f2a:	623b      	str	r3, [r7, #32]
 8000f2c:	f7ff fbae 	bl	800068c <SPI_RxByte>
 8000f30:	4603      	mov	r3, r0
 8000f32:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f34:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f38:	3301      	adds	r3, #1
 8000f3a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f3e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f42:	2b03      	cmp	r3, #3
 8000f44:	d9ef      	bls.n	8000f26 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f46:	2300      	movs	r3, #0
 8000f48:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f4c:	2304      	movs	r3, #4
 8000f4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f52:	e006      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f54:	bf00      	nop
 8000f56:	e004      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f58:	bf00      	nop
 8000f5a:	e002      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f5c:	bf00      	nop
 8000f5e:	e000      	b.n	8000f62 <SD_disk_ioctl+0x23a>
			break;
 8000f60:	bf00      	nop
		}

		DESELECT();
 8000f62:	f7ff fb51 	bl	8000608 <DESELECT>
		SPI_RxByte();
 8000f66:	f7ff fb91 	bl	800068c <SPI_RxByte>
	}

	return res;
 8000f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f6e:	4618      	mov	r0, r3
 8000f70:	372c      	adds	r7, #44	@ 0x2c
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20000000 	.word	0x20000000

08000f7c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b08a      	sub	sp, #40	@ 0x28
 8000f80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f82:	f107 0314 	add.w	r3, r7, #20
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
 8000f90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	613b      	str	r3, [r7, #16]
 8000f96:	4b5d      	ldr	r3, [pc, #372]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	4a5c      	ldr	r2, [pc, #368]	@ (800110c <MX_GPIO_Init+0x190>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fa2:	4b5a      	ldr	r3, [pc, #360]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
 8000fac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60fb      	str	r3, [r7, #12]
 8000fb2:	4b56      	ldr	r3, [pc, #344]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	4a55      	ldr	r2, [pc, #340]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fb8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000fbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fbe:	4b53      	ldr	r3, [pc, #332]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
 8000fce:	4b4f      	ldr	r3, [pc, #316]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd2:	4a4e      	ldr	r2, [pc, #312]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fda:	4b4c      	ldr	r3, [pc, #304]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fde:	f003 0301 	and.w	r3, r3, #1
 8000fe2:	60bb      	str	r3, [r7, #8]
 8000fe4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	607b      	str	r3, [r7, #4]
 8000fea:	4b48      	ldr	r3, [pc, #288]	@ (800110c <MX_GPIO_Init+0x190>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fee:	4a47      	ldr	r2, [pc, #284]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff0:	f043 0302 	orr.w	r3, r3, #2
 8000ff4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff6:	4b45      	ldr	r3, [pc, #276]	@ (800110c <MX_GPIO_Init+0x190>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	607b      	str	r3, [r7, #4]
 8001000:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 8001002:	2200      	movs	r2, #0
 8001004:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001008:	4841      	ldr	r0, [pc, #260]	@ (8001110 <MX_GPIO_Init+0x194>)
 800100a:	f004 f8ab 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800100e:	2200      	movs	r2, #0
 8001010:	2110      	movs	r1, #16
 8001012:	4840      	ldr	r0, [pc, #256]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001014:	f004 f8a6 	bl	8005164 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001018:	2200      	movs	r2, #0
 800101a:	213b      	movs	r1, #59	@ 0x3b
 800101c:	483e      	ldr	r0, [pc, #248]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800101e:	f004 f8a1 	bl	8005164 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8001022:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001026:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001028:	2301      	movs	r3, #1
 800102a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001034:	f107 0314 	add.w	r3, r7, #20
 8001038:	4619      	mov	r1, r3
 800103a:	4835      	ldr	r0, [pc, #212]	@ (8001110 <MX_GPIO_Init+0x194>)
 800103c:	f003 ff0e 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 8001040:	2306      	movs	r3, #6
 8001042:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001048:	2300      	movs	r3, #0
 800104a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	f107 0314 	add.w	r3, r7, #20
 8001050:	4619      	mov	r1, r3
 8001052:	4830      	ldr	r0, [pc, #192]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001054:	f003 ff02 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001058:	2310      	movs	r3, #16
 800105a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800105c:	2301      	movs	r3, #1
 800105e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001064:	2300      	movs	r3, #0
 8001066:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4829      	ldr	r0, [pc, #164]	@ (8001114 <MX_GPIO_Init+0x198>)
 8001070:	f003 fef4 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001074:	233b      	movs	r3, #59	@ 0x3b
 8001076:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001078:	2301      	movs	r3, #1
 800107a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001080:	2300      	movs	r3, #0
 8001082:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	f107 0314 	add.w	r3, r7, #20
 8001088:	4619      	mov	r1, r3
 800108a:	4823      	ldr	r0, [pc, #140]	@ (8001118 <MX_GPIO_Init+0x19c>)
 800108c:	f003 fee6 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 8001090:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001094:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001096:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	4619      	mov	r1, r3
 80010a6:	481c      	ldr	r0, [pc, #112]	@ (8001118 <MX_GPIO_Init+0x19c>)
 80010a8:	f003 fed8 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010ac:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010b2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	4619      	mov	r1, r3
 80010c2:	4814      	ldr	r0, [pc, #80]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010c4:	f003 feca 	bl	8004e5c <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 80010c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ce:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d4:	2300      	movs	r3, #0
 80010d6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 80010d8:	f107 0314 	add.w	r3, r7, #20
 80010dc:	4619      	mov	r1, r3
 80010de:	480d      	ldr	r0, [pc, #52]	@ (8001114 <MX_GPIO_Init+0x198>)
 80010e0:	f003 febc 	bl	8004e5c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e4:	2200      	movs	r2, #0
 80010e6:	2100      	movs	r1, #0
 80010e8:	2017      	movs	r0, #23
 80010ea:	f003 faee 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ee:	2017      	movs	r0, #23
 80010f0:	f003 fb07 	bl	8004702 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f4:	2200      	movs	r2, #0
 80010f6:	2100      	movs	r1, #0
 80010f8:	2028      	movs	r0, #40	@ 0x28
 80010fa:	f003 fae6 	bl	80046ca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fe:	2028      	movs	r0, #40	@ 0x28
 8001100:	f003 faff 	bl	8004702 <HAL_NVIC_EnableIRQ>

}
 8001104:	bf00      	nop
 8001106:	3728      	adds	r7, #40	@ 0x28
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}
 800110c:	40023800 	.word	0x40023800
 8001110:	40020800 	.word	0x40020800
 8001114:	40020000 	.word	0x40020000
 8001118:	40020400 	.word	0x40020400

0800111c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	4603      	mov	r3, r0
 8001124:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001126:	88fb      	ldrh	r3, [r7, #6]
 8001128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800112c:	d103      	bne.n	8001136 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800112e:	4812      	ldr	r0, [pc, #72]	@ (8001178 <HAL_GPIO_EXTI_Callback+0x5c>)
 8001130:	f001 f900 	bl	8002334 <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001134:	e01c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001136:	88fb      	ldrh	r3, [r7, #6]
 8001138:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800113c:	d103      	bne.n	8001146 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800113e:	480f      	ldr	r0, [pc, #60]	@ (800117c <HAL_GPIO_EXTI_Callback+0x60>)
 8001140:	f001 f8f8 	bl	8002334 <USB_Println>
}
 8001144:	e014      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001146:	88fb      	ldrh	r3, [r7, #6]
 8001148:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800114c:	d103      	bne.n	8001156 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800114e:	480c      	ldr	r0, [pc, #48]	@ (8001180 <HAL_GPIO_EXTI_Callback+0x64>)
 8001150:	f001 f8f0 	bl	8002334 <USB_Println>
}
 8001154:	e00c      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001156:	88fb      	ldrh	r3, [r7, #6]
 8001158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800115c:	d103      	bne.n	8001166 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800115e:	4809      	ldr	r0, [pc, #36]	@ (8001184 <HAL_GPIO_EXTI_Callback+0x68>)
 8001160:	f001 f8e8 	bl	8002334 <USB_Println>
}
 8001164:	e004      	b.n	8001170 <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 8001166:	88fb      	ldrh	r3, [r7, #6]
 8001168:	4619      	mov	r1, r3
 800116a:	4807      	ldr	r0, [pc, #28]	@ (8001188 <HAL_GPIO_EXTI_Callback+0x6c>)
 800116c:	f001 f8e2 	bl	8002334 <USB_Println>
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800fe5c 	.word	0x0800fe5c
 800117c:	0800fe74 	.word	0x0800fe74
 8001180:	0800fe8c 	.word	0x0800fe8c
 8001184:	0800fea4 	.word	0x0800fea4
 8001188:	0800febc 	.word	0x0800febc

0800118c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800118c:	b5b0      	push	{r4, r5, r7, lr}
 800118e:	f5ad 6deb 	sub.w	sp, sp, #1880	@ 0x758
 8001192:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001194:	f003 f928 	bl	80043e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001198:	f000 fa7e 	bl	8001698 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800119c:	f7ff feee 	bl	8000f7c <MX_GPIO_Init>
  MX_DMA_Init();
 80011a0:	f7ff f9ee 	bl	8000580 <MX_DMA_Init>
  MX_SPI1_Init();
 80011a4:	f000 fd70 	bl	8001c88 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011a8:	f00d fb86 	bl	800e8b8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011ac:	f000 fda4 	bl	8001cf8 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011b0:	f000 ffbc 	bl	800212c <MX_TIM4_Init>
  MX_FATFS_Init();
 80011b4:	f009 f9be 	bl	800a534 <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011b8:	f207 5304 	addw	r3, r7, #1284	@ 0x504
 80011bc:	2201      	movs	r2, #1
 80011be:	49c5      	ldr	r1, [pc, #788]	@ (80014d4 <main+0x348>)
 80011c0:	4618      	mov	r0, r3
 80011c2:	f00c ff35 	bl	800e030 <f_mount>
 80011c6:	4603      	mov	r3, r0
 80011c8:	f887 3747 	strb.w	r3, [r7, #1863]	@ 0x747
  if (fresult != FR_OK) {
 80011cc:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d00a      	beq.n	80011ea <main+0x5e>
	  HAL_Delay(1000);
 80011d4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011d8:	f003 f978 	bl	80044cc <HAL_Delay>
	  USB_Println("There was an error: %d\n", fresult);
 80011dc:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 80011e0:	4619      	mov	r1, r3
 80011e2:	48bd      	ldr	r0, [pc, #756]	@ (80014d8 <main+0x34c>)
 80011e4:	f001 f8a6 	bl	8002334 <USB_Println>
 80011e8:	e006      	b.n	80011f8 <main+0x6c>
  } else {
	  HAL_Delay(1000);
 80011ea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80011ee:	f003 f96d 	bl	80044cc <HAL_Delay>
	  USB_Println("the sdcard is mounted\n");
 80011f2:	48ba      	ldr	r0, [pc, #744]	@ (80014dc <main+0x350>)
 80011f4:	f001 f89e 	bl	8002334 <USB_Println>
  }

  initializeMCP2515();
 80011f8:	f000 fac0 	bl	800177c <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 2500, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80011fc:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001200:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8001204:	4ab6      	ldr	r2, [pc, #728]	@ (80014e0 <main+0x354>)
 8001206:	461c      	mov	r4, r3
 8001208:	4615      	mov	r5, r2
 800120a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800120c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800120e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001210:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001212:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001216:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800121a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800121e:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 8001222:	2100      	movs	r1, #0
 8001224:	48af      	ldr	r0, [pc, #700]	@ (80014e4 <main+0x358>)
 8001226:	f000 fb6f 	bl	8001908 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 800122a:	2300      	movs	r3, #0
 800122c:	9303      	str	r3, [sp, #12]
 800122e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001232:	9302      	str	r3, [sp, #8]
 8001234:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	2300      	movs	r3, #0
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2300      	movs	r3, #0
 8001240:	2200      	movs	r2, #0
 8001242:	2100      	movs	r1, #0
 8001244:	48a7      	ldr	r0, [pc, #668]	@ (80014e4 <main+0x358>)
 8001246:	f000 fae3 	bl	8001810 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 800124a:	2301      	movs	r3, #1
 800124c:	9303      	str	r3, [sp, #12]
 800124e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001252:	9302      	str	r3, [sp, #8]
 8001254:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	2300      	movs	r3, #0
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	2300      	movs	r3, #0
 8001260:	2200      	movs	r2, #0
 8001262:	2100      	movs	r1, #0
 8001264:	489f      	ldr	r0, [pc, #636]	@ (80014e4 <main+0x358>)
 8001266:	f000 fad3 	bl	8001810 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 800126a:	230e      	movs	r3, #14
 800126c:	9303      	str	r3, [sp, #12]
 800126e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001272:	9302      	str	r3, [sp, #8]
 8001274:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001278:	9301      	str	r3, [sp, #4]
 800127a:	2300      	movs	r3, #0
 800127c:	9300      	str	r3, [sp, #0]
 800127e:	2300      	movs	r3, #0
 8001280:	2200      	movs	r2, #0
 8001282:	2100      	movs	r1, #0
 8001284:	4897      	ldr	r0, [pc, #604]	@ (80014e4 <main+0x358>)
 8001286:	f000 fac3 	bl	8001810 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 800128a:	230f      	movs	r3, #15
 800128c:	9303      	str	r3, [sp, #12]
 800128e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001298:	9301      	str	r3, [sp, #4]
 800129a:	2300      	movs	r3, #0
 800129c:	9300      	str	r3, [sp, #0]
 800129e:	2300      	movs	r3, #0
 80012a0:	2200      	movs	r2, #0
 80012a2:	2100      	movs	r1, #0
 80012a4:	488f      	ldr	r0, [pc, #572]	@ (80014e4 <main+0x358>)
 80012a6:	f000 fab3 	bl	8001810 <setColor>

  resetScreen();\
 80012aa:	f001 fcc5 	bl	8002c38 <resetScreen>
  initializeScreen();
 80012ae:	f001 fce1 	bl	8002c74 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012b2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012b6:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 80012ba:	2100      	movs	r1, #0
 80012bc:	4889      	ldr	r0, [pc, #548]	@ (80014e4 <main+0x358>)
 80012be:	f000 fc7b 	bl	8001bb8 <startUp>
  HAL_Delay(200);
 80012c2:	20c8      	movs	r0, #200	@ 0xc8
 80012c4:	f003 f902 	bl	80044cc <HAL_Delay>

  char result[20] = "null"; //rpm
 80012c8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80012cc:	f2a3 62e4 	subw	r2, r3, #1764	@ 0x6e4
 80012d0:	4985      	ldr	r1, [pc, #532]	@ (80014e8 <main+0x35c>)
 80012d2:	4613      	mov	r3, r2
 80012d4:	c903      	ldmia	r1, {r0, r1}
 80012d6:	6018      	str	r0, [r3, #0]
 80012d8:	3304      	adds	r3, #4
 80012da:	7019      	strb	r1, [r3, #0]
 80012dc:	1d53      	adds	r3, r2, #5
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	f8c3 200b 	str.w	r2, [r3, #11]
  char result2[20] = "null";//temp
 80012ea:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80012ee:	f5a3 62df 	sub.w	r2, r3, #1784	@ 0x6f8
 80012f2:	497d      	ldr	r1, [pc, #500]	@ (80014e8 <main+0x35c>)
 80012f4:	4613      	mov	r3, r2
 80012f6:	c903      	ldmia	r1, {r0, r1}
 80012f8:	6018      	str	r0, [r3, #0]
 80012fa:	3304      	adds	r3, #4
 80012fc:	7019      	strb	r1, [r3, #0]
 80012fe:	1d53      	adds	r3, r2, #5
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	f8c3 200b 	str.w	r2, [r3, #11]
  char result3[20] = "8";//gear
 800130c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001310:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 8001314:	2238      	movs	r2, #56	@ 0x38
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	3304      	adds	r3, #4
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 8001324:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001328:	f5a3 62e4 	sub.w	r2, r3, #1824	@ 0x720
 800132c:	496e      	ldr	r1, [pc, #440]	@ (80014e8 <main+0x35c>)
 800132e:	4613      	mov	r3, r2
 8001330:	c903      	ldmia	r1, {r0, r1}
 8001332:	6018      	str	r0, [r3, #0]
 8001334:	3304      	adds	r3, #4
 8001336:	7019      	strb	r1, [r3, #0]
 8001338:	1d53      	adds	r3, r2, #5
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	f8c3 200b 	str.w	r2, [r3, #11]
  settempdata(result2);
 8001346:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800134a:	4618      	mov	r0, r3
 800134c:	f002 f938 	bl	80035c0 <settempdata>
  setgeardata(result3);
 8001350:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001354:	4618      	mov	r0, r3
 8001356:	f002 f95f 	bl	8003618 <setgeardata>
  setrpmdata(result);
 800135a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800135e:	4618      	mov	r0, r3
 8001360:	f002 f8f6 	bl	8003550 <setrpmdata>
  setbattdata(result4);
 8001364:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f97f 	bl	800366c <setbattdata>
  domainscreen();
 800136e:	f002 f9a9 	bl	80036c4 <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 8001372:	f107 0318 	add.w	r3, r7, #24
 8001376:	4618      	mov	r0, r3
 8001378:	f000 fa12 	bl	80017a0 <readMessage>
 800137c:	f8c7 0740 	str.w	r0, [r7, #1856]	@ 0x740
	  if (canresult == 0) {
 8001380:	f8d7 3740 	ldr.w	r3, [r7, #1856]	@ 0x740
 8001384:	2b00      	cmp	r3, #0
 8001386:	f040 8179 	bne.w	800167c <main+0x4f0>
		  if (frame.can_id == 1512) {
 800138a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800138e:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 8001398:	d177      	bne.n	800148a <main+0x2fe>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 800139a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800139e:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013a2:	7a9b      	ldrb	r3, [r3, #10]
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80013ac:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 80013b0:	7ad2      	ldrb	r2, [r2, #11]
 80013b2:	4413      	add	r3, r2
 80013b4:	f8a7 3738 	strh.w	r3, [r7, #1848]	@ 0x738
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013b8:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013bc:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80013c0:	f207 41d4 	addw	r1, r7, #1236	@ 0x4d4
 80013c4:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80013c8:	9201      	str	r2, [sp, #4]
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4603      	mov	r3, r0
 80013ce:	460a      	mov	r2, r1
 80013d0:	2100      	movs	r1, #0
 80013d2:	4844      	ldr	r0, [pc, #272]	@ (80014e4 <main+0x358>)
 80013d4:	f000 fb28 	bl	8001a28 <UpdateShiftLights>

			  itoa(rpm, (char*)(result), 10);
 80013d8:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013dc:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80013e0:	220a      	movs	r2, #10
 80013e2:	4618      	mov	r0, r3
 80013e4:	f00d ffb5 	bl	800f352 <itoa>
			  setrpmdata(result);
 80013e8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80013ec:	4618      	mov	r0, r3
 80013ee:	f002 f8af 	bl	8003550 <setrpmdata>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 80013f2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013f6:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8001404:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 8001408:	7b52      	ldrb	r2, [r2, #13]
 800140a:	4413      	add	r3, r2
 800140c:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  if (temp > 2150) {
 8001410:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001414:	f640 0266 	movw	r2, #2150	@ 0x866
 8001418:	4293      	cmp	r3, r2
 800141a:	d910      	bls.n	800143e <main+0x2b2>
				setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800141c:	230f      	movs	r3, #15
 800141e:	9303      	str	r3, [sp, #12]
 8001420:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800142a:	9301      	str	r3, [sp, #4]
 800142c:	2300      	movs	r3, #0
 800142e:	9300      	str	r3, [sp, #0]
 8001430:	23ff      	movs	r3, #255	@ 0xff
 8001432:	2200      	movs	r2, #0
 8001434:	2100      	movs	r1, #0
 8001436:	482b      	ldr	r0, [pc, #172]	@ (80014e4 <main+0x358>)
 8001438:	f000 f9ea 	bl	8001810 <setColor>
 800143c:	e00f      	b.n	800145e <main+0x2d2>
			  } else {
				setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 800143e:	230f      	movs	r3, #15
 8001440:	9303      	str	r3, [sp, #12]
 8001442:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800144c:	9301      	str	r3, [sp, #4]
 800144e:	2300      	movs	r3, #0
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	2300      	movs	r3, #0
 8001454:	2200      	movs	r2, #0
 8001456:	2100      	movs	r1, #0
 8001458:	4822      	ldr	r0, [pc, #136]	@ (80014e4 <main+0x358>)
 800145a:	f000 f9d9 	bl	8001810 <setColor>
			  }
			  temp /= 10;
 800145e:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001462:	4a22      	ldr	r2, [pc, #136]	@ (80014ec <main+0x360>)
 8001464:	fba2 2303 	umull	r2, r3, r2, r3
 8001468:	08db      	lsrs	r3, r3, #3
 800146a:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  itoa(temp, result2, 10);
 800146e:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001472:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001476:	220a      	movs	r2, #10
 8001478:	4618      	mov	r0, r3
 800147a:	f00d ff6a 	bl	800f352 <itoa>
			  settempdata(result2);
 800147e:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001482:	4618      	mov	r0, r3
 8001484:	f002 f89c 	bl	80035c0 <settempdata>
 8001488:	e0f8      	b.n	800167c <main+0x4f0>
		  } else if (frame.can_id == 1520 + 33) {
 800148a:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800148e:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f240 6211 	movw	r2, #1553	@ 0x611
 8001498:	4293      	cmp	r3, r2
 800149a:	d12b      	bne.n	80014f4 <main+0x368>
			  uint8_t gear = ((uint8_t)frame.data[6]);
 800149c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014a0:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014a4:	7b9b      	ldrb	r3, [r3, #14]
 80014a6:	f887 373a 	strb.w	r3, [r7, #1850]	@ 0x73a
			  USB_Println("the gear value is %d\n", gear);
 80014aa:	f897 373a 	ldrb.w	r3, [r7, #1850]	@ 0x73a
 80014ae:	4619      	mov	r1, r3
 80014b0:	480f      	ldr	r0, [pc, #60]	@ (80014f0 <main+0x364>)
 80014b2:	f000 ff3f 	bl	8002334 <USB_Println>
			  itoa(gear, result3, 10);
 80014b6:	f897 373a 	ldrb.w	r3, [r7, #1850]	@ 0x73a
 80014ba:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80014be:	220a      	movs	r2, #10
 80014c0:	4618      	mov	r0, r3
 80014c2:	f00d ff46 	bl	800f352 <itoa>
			  setgeardata(result3);
 80014c6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014ca:	4618      	mov	r0, r3
 80014cc:	f002 f8a4 	bl	8003618 <setgeardata>
 80014d0:	e0d4      	b.n	800167c <main+0x4f0>
 80014d2:	bf00      	nop
 80014d4:	0800fedc 	.word	0x0800fedc
 80014d8:	0800fee0 	.word	0x0800fee0
 80014dc:	0800fef8 	.word	0x0800fef8
 80014e0:	0800ff50 	.word	0x0800ff50
 80014e4:	200002d4 	.word	0x200002d4
 80014e8:	0800ff80 	.word	0x0800ff80
 80014ec:	cccccccd 	.word	0xcccccccd
 80014f0:	0800ff10 	.word	0x0800ff10
		  } else if (frame.can_id == 1515) {
 80014f4:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014f8:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 8001502:	4293      	cmp	r3, r2
 8001504:	d155      	bne.n	80015b2 <main+0x426>
			  uint8_t battvalue = (((uint16_t)frame.data[0]) << 8) + frame.data[1];
 8001506:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800150a:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 800150e:	7a5b      	ldrb	r3, [r3, #9]
 8001510:	f887 373d 	strb.w	r3, [r7, #1853]	@ 0x73d
			  uint8_t batIntPart = battvalue / 10;
 8001514:	f897 373d 	ldrb.w	r3, [r7, #1853]	@ 0x73d
 8001518:	4a5a      	ldr	r2, [pc, #360]	@ (8001684 <main+0x4f8>)
 800151a:	fba2 2303 	umull	r2, r3, r2, r3
 800151e:	08db      	lsrs	r3, r3, #3
 8001520:	f887 373c 	strb.w	r3, [r7, #1852]	@ 0x73c
			  uint8_t batDecimalPart = battvalue % 10;
 8001524:	f897 273d 	ldrb.w	r2, [r7, #1853]	@ 0x73d
 8001528:	4b56      	ldr	r3, [pc, #344]	@ (8001684 <main+0x4f8>)
 800152a:	fba3 1302 	umull	r1, r3, r3, r2
 800152e:	08d9      	lsrs	r1, r3, #3
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
			  char batint[10];
			  char batdec[10];
			  itoa(batIntPart, batint, 10);
 800153e:	f897 373c 	ldrb.w	r3, [r7, #1852]	@ 0x73c
 8001542:	f107 010c 	add.w	r1, r7, #12
 8001546:	220a      	movs	r2, #10
 8001548:	4618      	mov	r0, r3
 800154a:	f00d ff02 	bl	800f352 <itoa>
			  itoa(batDecimalPart, batdec, 10);
 800154e:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 8001552:	4639      	mov	r1, r7
 8001554:	220a      	movs	r2, #10
 8001556:	4618      	mov	r0, r3
 8001558:	f00d fefb 	bl	800f352 <itoa>
			  strncpy(result4, "", 20);
 800155c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001560:	2214      	movs	r2, #20
 8001562:	4949      	ldr	r1, [pc, #292]	@ (8001688 <main+0x4fc>)
 8001564:	4618      	mov	r0, r3
 8001566:	f00e f84c 	bl	800f602 <strncpy>
			  strncat(result4, batint, 5);
 800156a:	f107 010c 	add.w	r1, r7, #12
 800156e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001572:	2205      	movs	r2, #5
 8001574:	4618      	mov	r0, r3
 8001576:	f00e f831 	bl	800f5dc <strncat>
			  strncat(result4, ".", 5);
 800157a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157e:	4618      	mov	r0, r3
 8001580:	f7fe fe2e 	bl	80001e0 <strlen>
 8001584:	4603      	mov	r3, r0
 8001586:	461a      	mov	r2, r3
 8001588:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158c:	4413      	add	r3, r2
 800158e:	493f      	ldr	r1, [pc, #252]	@ (800168c <main+0x500>)
 8001590:	461a      	mov	r2, r3
 8001592:	460b      	mov	r3, r1
 8001594:	881b      	ldrh	r3, [r3, #0]
 8001596:	8013      	strh	r3, [r2, #0]
			  strncat(result4, batdec, 1);
 8001598:	4639      	mov	r1, r7
 800159a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159e:	2201      	movs	r2, #1
 80015a0:	4618      	mov	r0, r3
 80015a2:	f00e f81b 	bl	800f5dc <strncat>
			  setbattdata(result4);
 80015a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015aa:	4618      	mov	r0, r3
 80015ac:	f002 f85e 	bl	800366c <setbattdata>
 80015b0:	e064      	b.n	800167c <main+0x4f0>
		  } else if (frame.can_id == 504) {
 80015b2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015b6:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015c0:	d15c      	bne.n	800167c <main+0x4f0>
			  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015c2:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015c6:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015ca:	7b9b      	ldrb	r3, [r3, #14]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015d4:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015d8:	7bdb      	ldrb	r3, [r3, #15]
 80015da:	b21b      	sxth	r3, r3
 80015dc:	4313      	orrs	r3, r2
 80015de:	b21b      	sxth	r3, r3
 80015e0:	f8a7 373e 	strh.w	r3, [r7, #1854]	@ 0x73e
			  if (neutrallight < 1024) {
 80015e4:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	@ 0x73e
 80015e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015ec:	d220      	bcs.n	8001630 <main+0x4a4>
				  setColor(&htim4, TIM_CHANNEL_1, 255, 255, 255, ledcolors, ledbytes, 0);
 80015ee:	2300      	movs	r3, #0
 80015f0:	9303      	str	r3, [sp, #12]
 80015f2:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 80015fc:	9301      	str	r3, [sp, #4]
 80015fe:	23ff      	movs	r3, #255	@ 0xff
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	23ff      	movs	r3, #255	@ 0xff
 8001604:	22ff      	movs	r2, #255	@ 0xff
 8001606:	2100      	movs	r1, #0
 8001608:	4821      	ldr	r0, [pc, #132]	@ (8001690 <main+0x504>)
 800160a:	f000 f901 	bl	8001810 <setColor>
				  setColor(&htim4, TIM_CHANNEL_1, 255, 255, 255, ledcolors, ledbytes, 1);
 800160e:	2301      	movs	r3, #1
 8001610:	9303      	str	r3, [sp, #12]
 8001612:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001616:	9302      	str	r3, [sp, #8]
 8001618:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	23ff      	movs	r3, #255	@ 0xff
 8001620:	9300      	str	r3, [sp, #0]
 8001622:	23ff      	movs	r3, #255	@ 0xff
 8001624:	22ff      	movs	r2, #255	@ 0xff
 8001626:	2100      	movs	r1, #0
 8001628:	4819      	ldr	r0, [pc, #100]	@ (8001690 <main+0x504>)
 800162a:	f000 f8f1 	bl	8001810 <setColor>
 800162e:	e01f      	b.n	8001670 <main+0x4e4>
			  } else {
				  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001630:	2300      	movs	r3, #0
 8001632:	9303      	str	r3, [sp, #12]
 8001634:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001638:	9302      	str	r3, [sp, #8]
 800163a:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800163e:	9301      	str	r3, [sp, #4]
 8001640:	2300      	movs	r3, #0
 8001642:	9300      	str	r3, [sp, #0]
 8001644:	2300      	movs	r3, #0
 8001646:	2200      	movs	r2, #0
 8001648:	2100      	movs	r1, #0
 800164a:	4811      	ldr	r0, [pc, #68]	@ (8001690 <main+0x504>)
 800164c:	f000 f8e0 	bl	8001810 <setColor>
				  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001650:	2301      	movs	r3, #1
 8001652:	9303      	str	r3, [sp, #12]
 8001654:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001658:	9302      	str	r3, [sp, #8]
 800165a:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800165e:	9301      	str	r3, [sp, #4]
 8001660:	2300      	movs	r3, #0
 8001662:	9300      	str	r3, [sp, #0]
 8001664:	2300      	movs	r3, #0
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	4809      	ldr	r0, [pc, #36]	@ (8001690 <main+0x504>)
 800166c:	f000 f8d0 	bl	8001810 <setColor>
			  }
			  USB_Println("the neutral light value is %d\n", neutrallight);
 8001670:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	@ 0x73e
 8001674:	4619      	mov	r1, r3
 8001676:	4807      	ldr	r0, [pc, #28]	@ (8001694 <main+0x508>)
 8001678:	f000 fe5c 	bl	8002334 <USB_Println>
		  }
	  }

	  domainscreen();
 800167c:	f002 f822 	bl	80036c4 <domainscreen>
  {
 8001680:	e677      	b.n	8001372 <main+0x1e6>
 8001682:	bf00      	nop
 8001684:	cccccccd 	.word	0xcccccccd
 8001688:	0800ff28 	.word	0x0800ff28
 800168c:	0800ff2c 	.word	0x0800ff2c
 8001690:	200002d4 	.word	0x200002d4
 8001694:	0800ff30 	.word	0x0800ff30

08001698 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	@ 0x50
 800169c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800169e:	f107 0320 	add.w	r3, r7, #32
 80016a2:	2230      	movs	r2, #48	@ 0x30
 80016a4:	2100      	movs	r1, #0
 80016a6:	4618      	mov	r0, r3
 80016a8:	f00d ff90 	bl	800f5cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80016bc:	2300      	movs	r3, #0
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	4b29      	ldr	r3, [pc, #164]	@ (8001768 <SystemClock_Config+0xd0>)
 80016c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c4:	4a28      	ldr	r2, [pc, #160]	@ (8001768 <SystemClock_Config+0xd0>)
 80016c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80016cc:	4b26      	ldr	r3, [pc, #152]	@ (8001768 <SystemClock_Config+0xd0>)
 80016ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016d4:	60bb      	str	r3, [r7, #8]
 80016d6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80016d8:	2300      	movs	r3, #0
 80016da:	607b      	str	r3, [r7, #4]
 80016dc:	4b23      	ldr	r3, [pc, #140]	@ (800176c <SystemClock_Config+0xd4>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80016e4:	4a21      	ldr	r2, [pc, #132]	@ (800176c <SystemClock_Config+0xd4>)
 80016e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	4b1f      	ldr	r3, [pc, #124]	@ (800176c <SystemClock_Config+0xd4>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016f8:	2301      	movs	r3, #1
 80016fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001700:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001702:	2302      	movs	r3, #2
 8001704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001706:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 800170c:	2319      	movs	r3, #25
 800170e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001710:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001714:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001716:	2304      	movs	r3, #4
 8001718:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800171a:	2307      	movs	r3, #7
 800171c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800171e:	f107 0320 	add.w	r3, r7, #32
 8001722:	4618      	mov	r0, r3
 8001724:	f004 ffa2 	bl	800666c <HAL_RCC_OscConfig>
 8001728:	4603      	mov	r3, r0
 800172a:	2b00      	cmp	r3, #0
 800172c:	d001      	beq.n	8001732 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800172e:	f000 f81f 	bl	8001770 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001732:	230f      	movs	r3, #15
 8001734:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001736:	2302      	movs	r3, #2
 8001738:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800173e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001742:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001748:	f107 030c 	add.w	r3, r7, #12
 800174c:	2102      	movs	r1, #2
 800174e:	4618      	mov	r0, r3
 8001750:	f005 fa04 	bl	8006b5c <HAL_RCC_ClockConfig>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800175a:	f000 f809 	bl	8001770 <Error_Handler>
  }
}
 800175e:	bf00      	nop
 8001760:	3750      	adds	r7, #80	@ 0x50
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	40023800 	.word	0x40023800
 800176c:	40007000 	.word	0x40007000

08001770 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001774:	b672      	cpsid	i
}
 8001776:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001778:	bf00      	nop
 800177a:	e7fd      	b.n	8001778 <Error_Handler+0x8>

0800177c <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
	myMCP.reset();
 8001780:	4806      	ldr	r0, [pc, #24]	@ (800179c <initializeMCP2515+0x20>)
 8001782:	f002 f8f3 	bl	800396c <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 8001786:	2202      	movs	r2, #2
 8001788:	210e      	movs	r1, #14
 800178a:	4804      	ldr	r0, [pc, #16]	@ (800179c <initializeMCP2515+0x20>)
 800178c:	f002 fac0 	bl	8003d10 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8001790:	4802      	ldr	r0, [pc, #8]	@ (800179c <initializeMCP2515+0x20>)
 8001792:	f002 fa71 	bl	8003c78 <_ZN7MCP251513setNormalModeEv>
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200001a8 	.word	0x200001a8

080017a0 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b082      	sub	sp, #8
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80017a8:	6879      	ldr	r1, [r7, #4]
 80017aa:	4804      	ldr	r0, [pc, #16]	@ (80017bc <readMessage+0x1c>)
 80017ac:	f002 fdc6 	bl	800433c <_ZN7MCP251511readMessageEP9can_frame>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200001a8 	.word	0x200001a8

080017c0 <_Z41__static_initialization_and_destruction_0ii>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af02      	add	r7, sp, #8
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	d10c      	bne.n	80017ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d107      	bne.n	80017ea <_Z41__static_initialization_and_destruction_0ii+0x2a>
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 80017da:	2310      	movs	r3, #16
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	4b05      	ldr	r3, [pc, #20]	@ (80017f4 <_Z41__static_initialization_and_destruction_0ii+0x34>)
 80017e0:	220a      	movs	r2, #10
 80017e2:	4905      	ldr	r1, [pc, #20]	@ (80017f8 <_Z41__static_initialization_and_destruction_0ii+0x38>)
 80017e4:	4805      	ldr	r0, [pc, #20]	@ (80017fc <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 80017e6:	f002 f861 	bl	80038ac <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 80017ea:	bf00      	nop
 80017ec:	3708      	adds	r7, #8
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40020000 	.word	0x40020000
 80017f8:	20000214 	.word	0x20000214
 80017fc:	200001a8 	.word	0x200001a8

08001800 <_GLOBAL__sub_I_myMCP>:
 8001800:	b580      	push	{r7, lr}
 8001802:	af00      	add	r7, sp, #0
 8001804:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001808:	2001      	movs	r0, #1
 800180a:	f7ff ffd9 	bl	80017c0 <_Z41__static_initialization_and_destruction_0ii>
 800180e:	bd80      	pop	{r7, pc}

08001810 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b088      	sub	sp, #32
 8001814:	af00      	add	r7, sp, #0
 8001816:	60f8      	str	r0, [r7, #12]
 8001818:	60b9      	str	r1, [r7, #8]
 800181a:	4611      	mov	r1, r2
 800181c:	461a      	mov	r2, r3
 800181e:	460b      	mov	r3, r1
 8001820:	71fb      	strb	r3, [r7, #7]
 8001822:	4613      	mov	r3, r2
 8001824:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001826:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001828:	4613      	mov	r3, r2
 800182a:	005b      	lsls	r3, r3, #1
 800182c:	4413      	add	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001834:	4413      	add	r3, r2
 8001836:	79fa      	ldrb	r2, [r7, #7]
 8001838:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	3301      	adds	r3, #1
 800183e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001840:	4413      	add	r3, r2
 8001842:	79ba      	ldrb	r2, [r7, #6]
 8001844:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	3302      	adds	r3, #2
 800184a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800184c:	4413      	add	r3, r2
 800184e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001852:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	61fb      	str	r3, [r7, #28]
 8001858:	e02a      	b.n	80018b0 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	e021      	b.n	80018a4 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001864:	4413      	add	r3, r2
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	461a      	mov	r2, r3
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	fa02 f303 	lsl.w	r3, r2, r3
 8001870:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001874:	2b00      	cmp	r3, #0
 8001876:	d009      	beq.n	800188c <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8001878:	69fb      	ldr	r3, [r7, #28]
 800187a:	00da      	lsls	r2, r3, #3
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	4413      	add	r3, r2
 8001880:	005b      	lsls	r3, r3, #1
 8001882:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001884:	4413      	add	r3, r2
 8001886:	2246      	movs	r2, #70	@ 0x46
 8001888:	801a      	strh	r2, [r3, #0]
 800188a:	e008      	b.n	800189e <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 800188c:	69fb      	ldr	r3, [r7, #28]
 800188e:	00da      	lsls	r2, r3, #3
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4413      	add	r3, r2
 8001894:	005b      	lsls	r3, r3, #1
 8001896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001898:	4413      	add	r3, r2
 800189a:	2223      	movs	r2, #35	@ 0x23
 800189c:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 800189e:	69bb      	ldr	r3, [r7, #24]
 80018a0:	3301      	adds	r3, #1
 80018a2:	61bb      	str	r3, [r7, #24]
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	2b07      	cmp	r3, #7
 80018a8:	ddda      	ble.n	8001860 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	3301      	adds	r3, #1
 80018ae:	61fb      	str	r3, [r7, #28]
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	3302      	adds	r3, #2
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	429a      	cmp	r2, r3
 80018b8:	ddcf      	ble.n	800185a <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80018ba:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018be:	617b      	str	r3, [r7, #20]
 80018c0:	e008      	b.n	80018d4 <setColor+0xc4>
    	ledbytes[i] = 0;
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018c8:	4413      	add	r3, r2
 80018ca:	2200      	movs	r2, #0
 80018cc:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80018ce:	697b      	ldr	r3, [r7, #20]
 80018d0:	3301      	adds	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f240 2215 	movw	r2, #533	@ 0x215
 80018da:	4293      	cmp	r3, r2
 80018dc:	ddf1      	ble.n	80018c2 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 80018de:	f240 2316 	movw	r3, #534	@ 0x216
 80018e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e4:	68b9      	ldr	r1, [r7, #8]
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f006 fab2 	bl	8007e50 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 80018ec:	bf00      	nop
 80018ee:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <setColor+0xf4>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0fb      	beq.n	80018ee <setColor+0xde>
    datasentflag = 0;
 80018f6:	4b03      	ldr	r3, [pc, #12]	@ (8001904 <setColor+0xf4>)
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	200001b8 	.word	0x200001b8

08001908 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001908:	b580      	push	{r7, lr}
 800190a:	b088      	sub	sp, #32
 800190c:	af00      	add	r7, sp, #0
 800190e:	60f8      	str	r0, [r7, #12]
 8001910:	60b9      	str	r1, [r7, #8]
 8001912:	607a      	str	r2, [r7, #4]
 8001914:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	e013      	b.n	8001944 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	687a      	ldr	r2, [r7, #4]
 8001920:	4413      	add	r3, r2
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	3301      	adds	r3, #1
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	4413      	add	r3, r2
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	3302      	adds	r3, #2
 8001936:	687a      	ldr	r2, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	22ff      	movs	r2, #255	@ 0xff
 800193c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800193e:	69fb      	ldr	r3, [r7, #28]
 8001940:	3303      	adds	r3, #3
 8001942:	61fb      	str	r3, [r7, #28]
 8001944:	69fb      	ldr	r3, [r7, #28]
 8001946:	2b2f      	cmp	r3, #47	@ 0x2f
 8001948:	dde8      	ble.n	800191c <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 800194a:	2300      	movs	r3, #0
 800194c:	61bb      	str	r3, [r7, #24]
 800194e:	e02a      	b.n	80019a6 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8001950:	2300      	movs	r3, #0
 8001952:	617b      	str	r3, [r7, #20]
 8001954:	e021      	b.n	800199a <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 8001956:	69bb      	ldr	r3, [r7, #24]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	4413      	add	r3, r2
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 800196e:	69bb      	ldr	r3, [r7, #24]
 8001970:	00da      	lsls	r2, r3, #3
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	4413      	add	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	4413      	add	r3, r2
 800197c:	2246      	movs	r2, #70	@ 0x46
 800197e:	801a      	strh	r2, [r3, #0]
 8001980:	e008      	b.n	8001994 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8001982:	69bb      	ldr	r3, [r7, #24]
 8001984:	00da      	lsls	r2, r3, #3
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	4413      	add	r3, r2
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	4413      	add	r3, r2
 8001990:	2223      	movs	r2, #35	@ 0x23
 8001992:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3301      	adds	r3, #1
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	2b07      	cmp	r3, #7
 800199e:	ddda      	ble.n	8001956 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	3301      	adds	r3, #1
 80019a4:	61bb      	str	r3, [r7, #24]
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	2b2f      	cmp	r3, #47	@ 0x2f
 80019aa:	ddd1      	ble.n	8001950 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019ac:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019b0:	613b      	str	r3, [r7, #16]
 80019b2:	e008      	b.n	80019c6 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	005b      	lsls	r3, r3, #1
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	2200      	movs	r2, #0
 80019be:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	3301      	adds	r3, #1
 80019c4:	613b      	str	r3, [r7, #16]
 80019c6:	693b      	ldr	r3, [r7, #16]
 80019c8:	f240 2215 	movw	r2, #533	@ 0x215
 80019cc:	4293      	cmp	r3, r2
 80019ce:	ddf1      	ble.n	80019b4 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 80019d0:	f240 2316 	movw	r3, #534	@ 0x216
 80019d4:	683a      	ldr	r2, [r7, #0]
 80019d6:	68b9      	ldr	r1, [r7, #8]
 80019d8:	68f8      	ldr	r0, [r7, #12]
 80019da:	f006 fa39 	bl	8007e50 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 80019de:	bf00      	nop
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <shiftLightsInit+0xf4>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d0fb      	beq.n	80019e0 <shiftLightsInit+0xd8>
	datasentflag = 0;
 80019e8:	4b04      	ldr	r3, [pc, #16]	@ (80019fc <shiftLightsInit+0xf4>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 80019ee:	2300      	movs	r3, #0
 80019f0:	603b      	str	r3, [r7, #0]
}
 80019f2:	bf00      	nop
 80019f4:	3720      	adds	r7, #32
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	200001b8 	.word	0x200001b8

08001a00 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4805      	ldr	r0, [pc, #20]	@ (8001a20 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a0c:	f006 fbd0 	bl	80081b0 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a10:	4b04      	ldr	r3, [pc, #16]	@ (8001a24 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a12:	2201      	movs	r2, #1
 8001a14:	601a      	str	r2, [r3, #0]
}
 8001a16:	bf00      	nop
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	200002d4 	.word	0x200002d4
 8001a24:	200001b8 	.word	0x200001b8

08001a28 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b08a      	sub	sp, #40	@ 0x28
 8001a2c:	af04      	add	r7, sp, #16
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
 8001a34:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a36:	6a3b      	ldr	r3, [r7, #32]
 8001a38:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	dd06      	ble.n	8001a4e <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	68b9      	ldr	r1, [r7, #8]
 8001a46:	68f8      	ldr	r0, [r7, #12]
 8001a48:	f000 f8b6 	bl	8001bb8 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001a4c:	e02a      	b.n	8001aa4 <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001a4e:	2302      	movs	r3, #2
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e024      	b.n	8001a9e <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a5a:	3b02      	subs	r3, #2
 8001a5c:	009b      	lsls	r3, r3, #2
 8001a5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a60:	4413      	add	r3, r2
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	6a3a      	ldr	r2, [r7, #32]
 8001a66:	429a      	cmp	r2, r3
 8001a68:	db08      	blt.n	8001a7c <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	9300      	str	r3, [sp, #0]
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	68b9      	ldr	r1, [r7, #8]
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	f000 f819 	bl	8001aac <lightOn>
 8001a7a:	e00d      	b.n	8001a98 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	9303      	str	r3, [sp, #12]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	9302      	str	r3, [sp, #8]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	9301      	str	r3, [sp, #4]
 8001a88:	2300      	movs	r3, #0
 8001a8a:	9300      	str	r3, [sp, #0]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	2200      	movs	r2, #0
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f7ff febc 	bl	8001810 <setColor>
	for (int i = 2; i < 14; i++) {
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	3301      	adds	r3, #1
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2b0d      	cmp	r3, #13
 8001aa2:	ddd7      	ble.n	8001a54 <UpdateShiftLights+0x2c>
}
 8001aa4:	bf00      	nop
 8001aa6:	3718      	adds	r7, #24
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af04      	add	r7, sp, #16
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
 8001ab8:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001aba:	69bb      	ldr	r3, [r7, #24]
 8001abc:	2b0d      	cmp	r3, #13
 8001abe:	d140      	bne.n	8001b42 <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	68f8      	ldr	r0, [r7, #12]
 8001ac8:	f7ff ff1e 	bl	8001908 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001acc:	2300      	movs	r3, #0
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	2300      	movs	r3, #0
 8001ade:	2200      	movs	r2, #0
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	4834      	ldr	r0, [pc, #208]	@ (8001bb4 <lightOn+0x108>)
 8001ae4:	f7ff fe94 	bl	8001810 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001ae8:	2301      	movs	r3, #1
 8001aea:	9303      	str	r3, [sp, #12]
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	2300      	movs	r3, #0
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2300      	movs	r3, #0
 8001afa:	2200      	movs	r2, #0
 8001afc:	2100      	movs	r1, #0
 8001afe:	482d      	ldr	r0, [pc, #180]	@ (8001bb4 <lightOn+0x108>)
 8001b00:	f7ff fe86 	bl	8001810 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b04:	230e      	movs	r3, #14
 8001b06:	9303      	str	r3, [sp, #12]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4826      	ldr	r0, [pc, #152]	@ (8001bb4 <lightOn+0x108>)
 8001b1c:	f7ff fe78 	bl	8001810 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b20:	230f      	movs	r3, #15
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	481f      	ldr	r0, [pc, #124]	@ (8001bb4 <lightOn+0x108>)
 8001b38:	f7ff fe6a 	bl	8001810 <setColor>
		HAL_Delay(5);
 8001b3c:	2005      	movs	r0, #5
 8001b3e:	f002 fcc5 	bl	80044cc <HAL_Delay>
	}
	if (index < 6) {
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	dc0e      	bgt.n	8001b66 <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	9303      	str	r3, [sp, #12]
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	9302      	str	r3, [sp, #8]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	9301      	str	r3, [sp, #4]
 8001b54:	2300      	movs	r3, #0
 8001b56:	9300      	str	r3, [sp, #0]
 8001b58:	2300      	movs	r3, #0
 8001b5a:	22ff      	movs	r2, #255	@ 0xff
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fe56 	bl	8001810 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001b64:	e022      	b.n	8001bac <lightOn+0x100>
	} else if (index < 10) {
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	2b09      	cmp	r3, #9
 8001b6a:	dc0e      	bgt.n	8001b8a <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001b6c:	69bb      	ldr	r3, [r7, #24]
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	23ff      	movs	r3, #255	@ 0xff
 8001b7e:	2200      	movs	r2, #0
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	68f8      	ldr	r0, [r7, #12]
 8001b84:	f7ff fe44 	bl	8001810 <setColor>
}
 8001b88:	e010      	b.n	8001bac <lightOn+0x100>
	} else if (index < 14){
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	2b0d      	cmp	r3, #13
 8001b8e:	dc0d      	bgt.n	8001bac <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	23ff      	movs	r3, #255	@ 0xff
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	68b9      	ldr	r1, [r7, #8]
 8001ba6:	68f8      	ldr	r0, [r7, #12]
 8001ba8:	f7ff fe32 	bl	8001810 <setColor>
}
 8001bac:	bf00      	nop
 8001bae:	3710      	adds	r7, #16
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200002d4 	.word	0x200002d4

08001bb8 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b08c      	sub	sp, #48	@ 0x30
 8001bbc:	af04      	add	r7, sp, #16
 8001bbe:	60f8      	str	r0, [r7, #12]
 8001bc0:	60b9      	str	r1, [r7, #8]
 8001bc2:	607a      	str	r2, [r7, #4]
 8001bc4:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001bc6:	2307      	movs	r3, #7
 8001bc8:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001bca:	2300      	movs	r3, #0
 8001bcc:	61fb      	str	r3, [r7, #28]
 8001bce:	e026      	b.n	8001c1e <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001bd0:	697a      	ldr	r2, [r7, #20]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	9303      	str	r3, [sp, #12]
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	9302      	str	r3, [sp, #8]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	9301      	str	r3, [sp, #4]
 8001be0:	2300      	movs	r3, #0
 8001be2:	9300      	str	r3, [sp, #0]
 8001be4:	23ff      	movs	r3, #255	@ 0xff
 8001be6:	2200      	movs	r2, #0
 8001be8:	68b9      	ldr	r1, [r7, #8]
 8001bea:	68f8      	ldr	r0, [r7, #12]
 8001bec:	f7ff fe10 	bl	8001810 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001bf0:	697a      	ldr	r2, [r7, #20]
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	4413      	add	r3, r2
 8001bf6:	3301      	adds	r3, #1
 8001bf8:	9303      	str	r3, [sp, #12]
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	9302      	str	r3, [sp, #8]
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	9301      	str	r3, [sp, #4]
 8001c02:	2300      	movs	r3, #0
 8001c04:	9300      	str	r3, [sp, #0]
 8001c06:	23ff      	movs	r3, #255	@ 0xff
 8001c08:	2200      	movs	r2, #0
 8001c0a:	68b9      	ldr	r1, [r7, #8]
 8001c0c:	68f8      	ldr	r0, [r7, #12]
 8001c0e:	f7ff fdff 	bl	8001810 <setColor>
		HAL_Delay(20);
 8001c12:	2014      	movs	r0, #20
 8001c14:	f002 fc5a 	bl	80044cc <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	3301      	adds	r3, #1
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	2b05      	cmp	r3, #5
 8001c22:	ddd5      	ble.n	8001bd0 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c24:	2300      	movs	r3, #0
 8001c26:	61bb      	str	r3, [r7, #24]
 8001c28:	e026      	b.n	8001c78 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c2a:	697a      	ldr	r2, [r7, #20]
 8001c2c:	69bb      	ldr	r3, [r7, #24]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	2200      	movs	r2, #0
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fde3 	bl	8001810 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	4413      	add	r3, r2
 8001c50:	3301      	adds	r3, #1
 8001c52:	9303      	str	r3, [sp, #12]
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	9302      	str	r3, [sp, #8]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	9301      	str	r3, [sp, #4]
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	9300      	str	r3, [sp, #0]
 8001c60:	2300      	movs	r3, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	68b9      	ldr	r1, [r7, #8]
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff fdd2 	bl	8001810 <setColor>
		HAL_Delay(20);
 8001c6c:	2014      	movs	r0, #20
 8001c6e:	f002 fc2d 	bl	80044cc <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	3301      	adds	r3, #1
 8001c76:	61bb      	str	r3, [r7, #24]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2b05      	cmp	r3, #5
 8001c7c:	ddd5      	ble.n	8001c2a <startUp+0x72>
	}
}
 8001c7e:	bf00      	nop
 8001c80:	bf00      	nop
 8001c82:	3720      	adds	r7, #32
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001c8c:	4b18      	ldr	r3, [pc, #96]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001c8e:	4a19      	ldr	r2, [pc, #100]	@ (8001cf4 <MX_SPI1_Init+0x6c>)
 8001c90:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001c92:	4b17      	ldr	r3, [pc, #92]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001c94:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c98:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001c9a:	4b15      	ldr	r3, [pc, #84]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001ca0:	4b13      	ldr	r3, [pc, #76]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001ca2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ca6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ca8:	4b11      	ldr	r3, [pc, #68]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cae:	4b10      	ldr	r3, [pc, #64]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cb4:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cb6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cba:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cbc:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cbe:	2208      	movs	r2, #8
 8001cc0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cce:	4b08      	ldr	r3, [pc, #32]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cd4:	4b06      	ldr	r3, [pc, #24]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cd6:	220a      	movs	r2, #10
 8001cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001cda:	4805      	ldr	r0, [pc, #20]	@ (8001cf0 <MX_SPI1_Init+0x68>)
 8001cdc:	f005 f8f6 	bl	8006ecc <HAL_SPI_Init>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d001      	beq.n	8001cea <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001ce6:	f7ff fd43 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001cea:	bf00      	nop
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	200001bc 	.word	0x200001bc
 8001cf4:	40013000 	.word	0x40013000

08001cf8 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001cfe:	4a18      	ldr	r2, [pc, #96]	@ (8001d60 <MX_SPI2_Init+0x68>)
 8001d00:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d02:	4b16      	ldr	r3, [pc, #88]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d04:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d08:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d0a:	4b14      	ldr	r3, [pc, #80]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d10:	4b12      	ldr	r3, [pc, #72]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d16:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d1c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d22:	4b0e      	ldr	r3, [pc, #56]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d28:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d2a:	4b0c      	ldr	r3, [pc, #48]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d2c:	2220      	movs	r2, #32
 8001d2e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d30:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d36:	4b09      	ldr	r3, [pc, #36]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d3c:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d44:	220a      	movs	r2, #10
 8001d46:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d48:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <MX_SPI2_Init+0x64>)
 8001d4a:	f005 f8bf 	bl	8006ecc <HAL_SPI_Init>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d001      	beq.n	8001d58 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d54:	f7ff fd0c 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d58:	bf00      	nop
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	20000214 	.word	0x20000214
 8001d60:	40003800 	.word	0x40003800

08001d64 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b08c      	sub	sp, #48	@ 0x30
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d6c:	f107 031c 	add.w	r3, r7, #28
 8001d70:	2200      	movs	r2, #0
 8001d72:	601a      	str	r2, [r3, #0]
 8001d74:	605a      	str	r2, [r3, #4]
 8001d76:	609a      	str	r2, [r3, #8]
 8001d78:	60da      	str	r2, [r3, #12]
 8001d7a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a4a      	ldr	r2, [pc, #296]	@ (8001eac <HAL_SPI_MspInit+0x148>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d15c      	bne.n	8001e40 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d86:	2300      	movs	r3, #0
 8001d88:	61bb      	str	r3, [r7, #24]
 8001d8a:	4b49      	ldr	r3, [pc, #292]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001d8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8e:	4a48      	ldr	r2, [pc, #288]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001d90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001d94:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d96:	4b46      	ldr	r3, [pc, #280]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001d98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2300      	movs	r3, #0
 8001da4:	617b      	str	r3, [r7, #20]
 8001da6:	4b42      	ldr	r3, [pc, #264]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001daa:	4a41      	ldr	r2, [pc, #260]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001db2:	4b3f      	ldr	r3, [pc, #252]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	617b      	str	r3, [r7, #20]
 8001dbc:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001dbe:	23a0      	movs	r3, #160	@ 0xa0
 8001dc0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001dce:	2305      	movs	r3, #5
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f107 031c 	add.w	r3, r7, #28
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4836      	ldr	r0, [pc, #216]	@ (8001eb4 <HAL_SPI_MspInit+0x150>)
 8001dda:	f003 f83f 	bl	8004e5c <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001dde:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001de0:	4a36      	ldr	r2, [pc, #216]	@ (8001ebc <HAL_SPI_MspInit+0x158>)
 8001de2:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001de4:	4b34      	ldr	r3, [pc, #208]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001de6:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001dea:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001dec:	4b32      	ldr	r3, [pc, #200]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001dee:	2240      	movs	r2, #64	@ 0x40
 8001df0:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001df2:	4b31      	ldr	r3, [pc, #196]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001df8:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001dfa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001dfe:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e00:	4b2d      	ldr	r3, [pc, #180]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e06:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e08:	4b2b      	ldr	r3, [pc, #172]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e0a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e0e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e10:	4b29      	ldr	r3, [pc, #164]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e16:	4b28      	ldr	r3, [pc, #160]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e1c:	4b26      	ldr	r3, [pc, #152]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e22:	4825      	ldr	r0, [pc, #148]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e24:	f002 fc88 	bl	8004738 <HAL_DMA_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e2e:	f7ff fc9f 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a20      	ldr	r2, [pc, #128]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e36:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e38:	4a1f      	ldr	r2, [pc, #124]	@ (8001eb8 <HAL_SPI_MspInit+0x154>)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e3e:	e031      	b.n	8001ea4 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a1e      	ldr	r2, [pc, #120]	@ (8001ec0 <HAL_SPI_MspInit+0x15c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d12c      	bne.n	8001ea4 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	613b      	str	r3, [r7, #16]
 8001e4e:	4b18      	ldr	r3, [pc, #96]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a17      	ldr	r2, [pc, #92]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e54:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b15      	ldr	r3, [pc, #84]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e62:	613b      	str	r3, [r7, #16]
 8001e64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e66:	2300      	movs	r3, #0
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	4b11      	ldr	r3, [pc, #68]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e6e:	4a10      	ldr	r2, [pc, #64]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e70:	f043 0302 	orr.w	r3, r3, #2
 8001e74:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e76:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb0 <HAL_SPI_MspInit+0x14c>)
 8001e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	60fb      	str	r3, [r7, #12]
 8001e80:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001e82:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001e86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e88:	2302      	movs	r3, #2
 8001e8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e90:	2303      	movs	r3, #3
 8001e92:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e94:	2305      	movs	r3, #5
 8001e96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e98:	f107 031c 	add.w	r3, r7, #28
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	4809      	ldr	r0, [pc, #36]	@ (8001ec4 <HAL_SPI_MspInit+0x160>)
 8001ea0:	f002 ffdc 	bl	8004e5c <HAL_GPIO_Init>
}
 8001ea4:	bf00      	nop
 8001ea6:	3730      	adds	r7, #48	@ 0x30
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	40013000 	.word	0x40013000
 8001eb0:	40023800 	.word	0x40023800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	2000026c 	.word	0x2000026c
 8001ebc:	40026458 	.word	0x40026458
 8001ec0:	40003800 	.word	0x40003800
 8001ec4:	40020400 	.word	0x40020400

08001ec8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b083      	sub	sp, #12
 8001ecc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ece:	2300      	movs	r3, #0
 8001ed0:	607b      	str	r3, [r7, #4]
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ed4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ed6:	4a0f      	ldr	r2, [pc, #60]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ed8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001edc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ee2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ee6:	607b      	str	r3, [r7, #4]
 8001ee8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	603b      	str	r3, [r7, #0]
 8001eee:	4b09      	ldr	r3, [pc, #36]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ef2:	4a08      	ldr	r2, [pc, #32]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001ef4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ef8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001efa:	4b06      	ldr	r3, [pc, #24]	@ (8001f14 <HAL_MspInit+0x4c>)
 8001efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f02:	603b      	str	r3, [r7, #0]
 8001f04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
 8001f12:	bf00      	nop
 8001f14:	40023800 	.word	0x40023800

08001f18 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f1e:	881b      	ldrh	r3, [r3, #0]
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d006      	beq.n	8001f34 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f26:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	3b01      	subs	r3, #1
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b09      	ldr	r3, [pc, #36]	@ (8001f58 <SDTimer_Handler+0x40>)
 8001f32:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f34:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f36:	881b      	ldrh	r3, [r3, #0]
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d006      	beq.n	8001f4c <SDTimer_Handler+0x34>
    Timer2--;
 8001f3e:	4b07      	ldr	r3, [pc, #28]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f40:	881b      	ldrh	r3, [r3, #0]
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	3b01      	subs	r3, #1
 8001f46:	b29a      	uxth	r2, r3
 8001f48:	4b04      	ldr	r3, [pc, #16]	@ (8001f5c <SDTimer_Handler+0x44>)
 8001f4a:	801a      	strh	r2, [r3, #0]
}
 8001f4c:	bf00      	nop
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f54:	4770      	bx	lr
 8001f56:	bf00      	nop
 8001f58:	200001a0 	.word	0x200001a0
 8001f5c:	200001a2 	.word	0x200001a2

08001f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f64:	bf00      	nop
 8001f66:	e7fd      	b.n	8001f64 <NMI_Handler+0x4>

08001f68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f6c:	bf00      	nop
 8001f6e:	e7fd      	b.n	8001f6c <HardFault_Handler+0x4>

08001f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f74:	bf00      	nop
 8001f76:	e7fd      	b.n	8001f74 <MemManage_Handler+0x4>

08001f78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f7c:	bf00      	nop
 8001f7e:	e7fd      	b.n	8001f7c <BusFault_Handler+0x4>

08001f80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f84:	bf00      	nop
 8001f86:	e7fd      	b.n	8001f84 <UsageFault_Handler+0x4>

08001f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001fb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fc4:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001fc6:	4b07      	ldr	r3, [pc, #28]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	2b09      	cmp	r3, #9
 8001fce:	d904      	bls.n	8001fda <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001fd0:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <SysTick_Handler+0x30>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001fd6:	f7ff ff9f 	bl	8001f18 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fda:	f002 fa57 	bl	800448c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fde:	bf00      	nop
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	200002cc 	.word	0x200002cc

08001fe8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001fec:	4802      	ldr	r0, [pc, #8]	@ (8001ff8 <DMA1_Stream0_IRQHandler+0x10>)
 8001fee:	f002 fccb 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000031c 	.word	0x2000031c

08001ffc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002000:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002004:	f003 f8c8 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002008:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800200c:	f003 f8c4 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002010:	bf00      	nop
 8002012:	bd80      	pop	{r7, pc}

08002014 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002018:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800201c:	f003 f8bc 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8002020:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002024:	f003 f8b8 	bl	8005198 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002028:	bf00      	nop
 800202a:	bd80      	pop	{r7, pc}

0800202c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002030:	4802      	ldr	r0, [pc, #8]	@ (800203c <DMA2_Stream3_IRQHandler+0x10>)
 8002032:	f002 fca9 	bl	8004988 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	2000026c 	.word	0x2000026c

08002040 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002044:	4802      	ldr	r0, [pc, #8]	@ (8002050 <OTG_FS_IRQHandler+0x10>)
 8002046:	f003 fa03 	bl	8005450 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800204a:	bf00      	nop
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20001108 	.word	0x20001108

08002054 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002054:	b480      	push	{r7}
 8002056:	af00      	add	r7, sp, #0
  return 1;
 8002058:	2301      	movs	r3, #1
}
 800205a:	4618      	mov	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <_kill>:

int _kill(int pid, int sig)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800206e:	f00d fb2f 	bl	800f6d0 <__errno>
 8002072:	4603      	mov	r3, r0
 8002074:	2216      	movs	r2, #22
 8002076:	601a      	str	r2, [r3, #0]
  return -1;
 8002078:	f04f 33ff 	mov.w	r3, #4294967295
}
 800207c:	4618      	mov	r0, r3
 800207e:	3708      	adds	r7, #8
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <_exit>:

void _exit (int status)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800208c:	f04f 31ff 	mov.w	r1, #4294967295
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff ffe7 	bl	8002064 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002096:	bf00      	nop
 8002098:	e7fd      	b.n	8002096 <_exit+0x12>
	...

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	@ (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	@ (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	@ (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4413      	add	r3, r2
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f00d fb00 	bl	800f6d0 <__errno>
 80020d0:	4603      	mov	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	@ (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a05      	ldr	r2, [pc, #20]	@ (8002100 <_sbrk+0x64>)
 80020ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3718      	adds	r7, #24
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20010000 	.word	0x20010000
 80020fc:	00000400 	.word	0x00000400
 8002100:	200002d0 	.word	0x200002d0
 8002104:	20001958 	.word	0x20001958

08002108 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b480      	push	{r7}
 800210a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800210c:	4b06      	ldr	r3, [pc, #24]	@ (8002128 <SystemInit+0x20>)
 800210e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002112:	4a05      	ldr	r2, [pc, #20]	@ (8002128 <SystemInit+0x20>)
 8002114:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002118:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800211c:	bf00      	nop
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	e000ed00 	.word	0xe000ed00

0800212c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b08e      	sub	sp, #56	@ 0x38
 8002130:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002132:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
 800213a:	605a      	str	r2, [r3, #4]
 800213c:	609a      	str	r2, [r3, #8]
 800213e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002140:	f107 0320 	add.w	r3, r7, #32
 8002144:	2200      	movs	r2, #0
 8002146:	601a      	str	r2, [r3, #0]
 8002148:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
 8002150:	605a      	str	r2, [r3, #4]
 8002152:	609a      	str	r2, [r3, #8]
 8002154:	60da      	str	r2, [r3, #12]
 8002156:	611a      	str	r2, [r3, #16]
 8002158:	615a      	str	r2, [r3, #20]
 800215a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800215c:	4b2c      	ldr	r3, [pc, #176]	@ (8002210 <MX_TIM4_Init+0xe4>)
 800215e:	4a2d      	ldr	r2, [pc, #180]	@ (8002214 <MX_TIM4_Init+0xe8>)
 8002160:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8002162:	4b2b      	ldr	r3, [pc, #172]	@ (8002210 <MX_TIM4_Init+0xe4>)
 8002164:	2200      	movs	r2, #0
 8002166:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002168:	4b29      	ldr	r3, [pc, #164]	@ (8002210 <MX_TIM4_Init+0xe4>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 800216e:	4b28      	ldr	r3, [pc, #160]	@ (8002210 <MX_TIM4_Init+0xe4>)
 8002170:	2269      	movs	r2, #105	@ 0x69
 8002172:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002174:	4b26      	ldr	r3, [pc, #152]	@ (8002210 <MX_TIM4_Init+0xe4>)
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800217a:	4b25      	ldr	r3, [pc, #148]	@ (8002210 <MX_TIM4_Init+0xe4>)
 800217c:	2200      	movs	r2, #0
 800217e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002180:	4823      	ldr	r0, [pc, #140]	@ (8002210 <MX_TIM4_Init+0xe4>)
 8002182:	f005 fdbd 	bl	8007d00 <HAL_TIM_Base_Init>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d001      	beq.n	8002190 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 800218c:	f7ff faf0 	bl	8001770 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002190:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002194:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002196:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800219a:	4619      	mov	r1, r3
 800219c:	481c      	ldr	r0, [pc, #112]	@ (8002210 <MX_TIM4_Init+0xe4>)
 800219e:	f006 f98f 	bl	80084c0 <HAL_TIM_ConfigClockSource>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d001      	beq.n	80021ac <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021a8:	f7ff fae2 	bl	8001770 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021ac:	4818      	ldr	r0, [pc, #96]	@ (8002210 <MX_TIM4_Init+0xe4>)
 80021ae:	f005 fdf6 	bl	8007d9e <HAL_TIM_PWM_Init>
 80021b2:	4603      	mov	r3, r0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d001      	beq.n	80021bc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80021b8:	f7ff fada 	bl	8001770 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021bc:	2300      	movs	r3, #0
 80021be:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c0:	2300      	movs	r3, #0
 80021c2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021c4:	f107 0320 	add.w	r3, r7, #32
 80021c8:	4619      	mov	r1, r3
 80021ca:	4811      	ldr	r0, [pc, #68]	@ (8002210 <MX_TIM4_Init+0xe4>)
 80021cc:	f006 fdfc 	bl	8008dc8 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80021d6:	f7ff facb 	bl	8001770 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021da:	2360      	movs	r3, #96	@ 0x60
 80021dc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021e2:	2300      	movs	r3, #0
 80021e4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021ea:	1d3b      	adds	r3, r7, #4
 80021ec:	2200      	movs	r2, #0
 80021ee:	4619      	mov	r1, r3
 80021f0:	4807      	ldr	r0, [pc, #28]	@ (8002210 <MX_TIM4_Init+0xe4>)
 80021f2:	f006 f8a3 	bl	800833c <HAL_TIM_PWM_ConfigChannel>
 80021f6:	4603      	mov	r3, r0
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d001      	beq.n	8002200 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80021fc:	f7ff fab8 	bl	8001770 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002200:	4803      	ldr	r0, [pc, #12]	@ (8002210 <MX_TIM4_Init+0xe4>)
 8002202:	f000 f85d 	bl	80022c0 <HAL_TIM_MspPostInit>

}
 8002206:	bf00      	nop
 8002208:	3738      	adds	r7, #56	@ 0x38
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	200002d4 	.word	0x200002d4
 8002214:	40000800 	.word	0x40000800

08002218 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a22      	ldr	r2, [pc, #136]	@ (80022b0 <HAL_TIM_Base_MspInit+0x98>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d13d      	bne.n	80022a6 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	60fb      	str	r3, [r7, #12]
 800222e:	4b21      	ldr	r3, [pc, #132]	@ (80022b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002230:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002232:	4a20      	ldr	r2, [pc, #128]	@ (80022b4 <HAL_TIM_Base_MspInit+0x9c>)
 8002234:	f043 0304 	orr.w	r3, r3, #4
 8002238:	6413      	str	r3, [r2, #64]	@ 0x40
 800223a:	4b1e      	ldr	r3, [pc, #120]	@ (80022b4 <HAL_TIM_Base_MspInit+0x9c>)
 800223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800223e:	f003 0304 	and.w	r3, r3, #4
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002246:	4b1c      	ldr	r3, [pc, #112]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002248:	4a1c      	ldr	r2, [pc, #112]	@ (80022bc <HAL_TIM_Base_MspInit+0xa4>)
 800224a:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 800224c:	4b1a      	ldr	r3, [pc, #104]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800224e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002252:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002254:	4b18      	ldr	r3, [pc, #96]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002256:	2240      	movs	r2, #64	@ 0x40
 8002258:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800225a:	4b17      	ldr	r3, [pc, #92]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800225c:	2200      	movs	r2, #0
 800225e:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002260:	4b15      	ldr	r3, [pc, #84]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002262:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002266:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002268:	4b13      	ldr	r3, [pc, #76]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800226a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800226e:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002270:	4b11      	ldr	r3, [pc, #68]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002272:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002276:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002278:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800227a:	2200      	movs	r2, #0
 800227c:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 800227e:	4b0e      	ldr	r3, [pc, #56]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002280:	2200      	movs	r2, #0
 8002282:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 8002286:	2200      	movs	r2, #0
 8002288:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 800228a:	480b      	ldr	r0, [pc, #44]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800228c:	f002 fa54 	bl	8004738 <HAL_DMA_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8002296:	f7ff fa6b 	bl	8001770 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	4a06      	ldr	r2, [pc, #24]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 800229e:	625a      	str	r2, [r3, #36]	@ 0x24
 80022a0:	4a05      	ldr	r2, [pc, #20]	@ (80022b8 <HAL_TIM_Base_MspInit+0xa0>)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022a6:	bf00      	nop
 80022a8:	3710      	adds	r7, #16
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40000800 	.word	0x40000800
 80022b4:	40023800 	.word	0x40023800
 80022b8:	2000031c 	.word	0x2000031c
 80022bc:	40026010 	.word	0x40026010

080022c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c8:	f107 030c 	add.w	r3, r7, #12
 80022cc:	2200      	movs	r2, #0
 80022ce:	601a      	str	r2, [r3, #0]
 80022d0:	605a      	str	r2, [r3, #4]
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	60da      	str	r2, [r3, #12]
 80022d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a12      	ldr	r2, [pc, #72]	@ (8002328 <HAL_TIM_MspPostInit+0x68>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d11d      	bne.n	800231e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e2:	2300      	movs	r3, #0
 80022e4:	60bb      	str	r3, [r7, #8]
 80022e6:	4b11      	ldr	r3, [pc, #68]	@ (800232c <HAL_TIM_MspPostInit+0x6c>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	4a10      	ldr	r2, [pc, #64]	@ (800232c <HAL_TIM_MspPostInit+0x6c>)
 80022ec:	f043 0302 	orr.w	r3, r3, #2
 80022f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022f2:	4b0e      	ldr	r3, [pc, #56]	@ (800232c <HAL_TIM_MspPostInit+0x6c>)
 80022f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80022fe:	2340      	movs	r3, #64	@ 0x40
 8002300:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002302:	2302      	movs	r3, #2
 8002304:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002306:	2300      	movs	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800230a:	2300      	movs	r3, #0
 800230c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800230e:	2302      	movs	r3, #2
 8002310:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002312:	f107 030c 	add.w	r3, r7, #12
 8002316:	4619      	mov	r1, r3
 8002318:	4805      	ldr	r0, [pc, #20]	@ (8002330 <HAL_TIM_MspPostInit+0x70>)
 800231a:	f002 fd9f 	bl	8004e5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800231e:	bf00      	nop
 8002320:	3720      	adds	r7, #32
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	40000800 	.word	0x40000800
 800232c:	40023800 	.word	0x40023800
 8002330:	40020400 	.word	0x40020400

08002334 <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 8002334:	b40f      	push	{r0, r1, r2, r3}
 8002336:	b580      	push	{r7, lr}
 8002338:	b0a2      	sub	sp, #136	@ 0x88
 800233a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 800233c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002340:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 8002342:	f107 0008 	add.w	r0, r7, #8
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800234c:	2180      	movs	r1, #128	@ 0x80
 800234e:	f00d f92f 	bl	800f5b0 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 8002352:	f107 0308 	add.w	r3, r7, #8
 8002356:	4618      	mov	r0, r3
 8002358:	f7fd ff42 	bl	80001e0 <strlen>
 800235c:	4603      	mov	r3, r0
 800235e:	b29a      	uxth	r2, r3
 8002360:	f107 0308 	add.w	r3, r7, #8
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f00c fb64 	bl	800ea34 <CDC_Transmit_FS>
}
 800236c:	bf00      	nop
 800236e:	3788      	adds	r7, #136	@ 0x88
 8002370:	46bd      	mov	sp, r7
 8002372:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002376:	b004      	add	sp, #16
 8002378:	4770      	bx	lr
	...

0800237c <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	4613      	mov	r3, r2
 8002388:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 800238a:	4b06      	ldr	r3, [pc, #24]	@ (80023a4 <transmitdma+0x28>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8002390:	88fb      	ldrh	r3, [r7, #6]
 8002392:	461a      	mov	r2, r3
 8002394:	68b9      	ldr	r1, [r7, #8]
 8002396:	68f8      	ldr	r0, [r7, #12]
 8002398:	f005 fa28 	bl	80077ec <HAL_SPI_Transmit_DMA>
}
 800239c:	bf00      	nop
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	2000037c 	.word	0x2000037c

080023a8 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023a8:	b480      	push	{r7}
 80023aa:	b083      	sub	sp, #12
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a05      	ldr	r2, [pc, #20]	@ (80023cc <HAL_SPI_TxCpltCallback+0x24>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d102      	bne.n	80023c0 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 80023ba:	4b05      	ldr	r3, [pc, #20]	@ (80023d0 <HAL_SPI_TxCpltCallback+0x28>)
 80023bc:	2201      	movs	r2, #1
 80023be:	701a      	strb	r2, [r3, #0]
	}
}
 80023c0:	bf00      	nop
 80023c2:	370c      	adds	r7, #12
 80023c4:	46bd      	mov	sp, r7
 80023c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ca:	4770      	bx	lr
 80023cc:	40013000 	.word	0x40013000
 80023d0:	2000037c 	.word	0x2000037c

080023d4 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b084      	sub	sp, #16
 80023d8:	af00      	add	r7, sp, #0
 80023da:	60f8      	str	r0, [r7, #12]
 80023dc:	60b9      	str	r1, [r7, #8]
 80023de:	4613      	mov	r3, r2
 80023e0:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	461a      	mov	r2, r3
 80023e6:	68b9      	ldr	r1, [r7, #8]
 80023e8:	68f8      	ldr	r0, [r7, #12]
 80023ea:	f000 f805 	bl	80023f8 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	4613      	mov	r3, r2
 8002404:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	79fa      	ldrb	r2, [r7, #7]
 8002410:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2201      	movs	r2, #1
 8002416:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 800241e:	2300      	movs	r3, #0
 8002420:	617b      	str	r3, [r7, #20]
 8002422:	e014      	b.n	800244e <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 8002424:	697b      	ldr	r3, [r7, #20]
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	68ba      	ldr	r2, [r7, #8]
 800242a:	4413      	add	r3, r2
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4618      	mov	r0, r3
 8002430:	f000 f9da 	bl	80027e8 <_ZN13DisplayObject11getpriorityEv>
 8002434:	4603      	mov	r3, r0
 8002436:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	799b      	ldrb	r3, [r3, #6]
 800243c:	7cfa      	ldrb	r2, [r7, #19]
 800243e:	429a      	cmp	r2, r3
 8002440:	d902      	bls.n	8002448 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	7cfa      	ldrb	r2, [r7, #19]
 8002446:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002448:	697b      	ldr	r3, [r7, #20]
 800244a:	3301      	adds	r3, #1
 800244c:	617b      	str	r3, [r7, #20]
 800244e:	79fb      	ldrb	r3, [r7, #7]
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	429a      	cmp	r2, r3
 8002454:	dbe6      	blt.n	8002424 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 8002456:	bf00      	nop
 8002458:	bf00      	nop
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 8002460:	b590      	push	{r4, r7, lr}
 8002462:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002466:	b089      	sub	sp, #36	@ 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800246e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002472:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 8002474:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002478:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	795b      	ldrb	r3, [r3, #5]
 8002480:	2b00      	cmp	r3, #0
 8002482:	f000 813e 	beq.w	8002702 <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 8002486:	f240 133f 	movw	r3, #319	@ 0x13f
 800248a:	f240 12df 	movw	r2, #479	@ 0x1df
 800248e:	2100      	movs	r1, #0
 8002490:	2000      	movs	r0, #0
 8002492:	f000 fca8 	bl	8002de6 <modifySpace>
		startCommand(WRITE_COMMAND);
 8002496:	202c      	movs	r0, #44	@ 0x2c
 8002498:	f000 fbb2 	bl	8002c00 <startCommand>
		dataOrRegister(1);
 800249c:	2001      	movs	r0, #1
 800249e:	f000 fb6d 	bl	8002b7c <dataOrRegister>
		uint8_t anychanges = 0;
 80024a2:	2300      	movs	r3, #0
 80024a4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024a8:	f102 021f 	add.w	r2, r2, #31
 80024ac:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024ae:	2300      	movs	r3, #0
 80024b0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024b4:	f102 0218 	add.w	r2, r2, #24
 80024b8:	6013      	str	r3, [r2, #0]
 80024ba:	e028      	b.n	800250e <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 80024bc:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024c0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80024cc:	f103 0318 	add.w	r3, r3, #24
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	009b      	lsls	r3, r3, #2
 80024d4:	4413      	add	r3, r2
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4618      	mov	r0, r3
 80024da:	f000 f9a0 	bl	800281e <_ZN13DisplayObject13getChangeFlagEv>
 80024de:	4603      	mov	r3, r0
 80024e0:	461a      	mov	r2, r3
 80024e2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80024e6:	f103 031f 	add.w	r3, r3, #31
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4413      	add	r3, r2
 80024ee:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024f2:	f102 021f 	add.w	r2, r2, #31
 80024f6:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024f8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80024fc:	f103 0318 	add.w	r3, r3, #24
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	3301      	adds	r3, #1
 8002504:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002508:	f102 0218 	add.w	r2, r2, #24
 800250c:	6013      	str	r3, [r2, #0]
 800250e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002512:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	791b      	ldrb	r3, [r3, #4]
 800251a:	461a      	mov	r2, r3
 800251c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002520:	f103 0318 	add.w	r3, r3, #24
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4293      	cmp	r3, r2
 8002528:	dbc8      	blt.n	80024bc <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 800252a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800252e:	f103 031f 	add.w	r3, r3, #31
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b00      	cmp	r3, #0
 8002536:	f000 80ec 	beq.w	8002712 <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800253a:	2300      	movs	r3, #0
 800253c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002540:	f102 0214 	add.w	r2, r2, #20
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	e0d2      	b.n	80026ee <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8002548:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800254c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8002550:	4618      	mov	r0, r3
 8002552:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8002556:	461a      	mov	r2, r3
 8002558:	2100      	movs	r1, #0
 800255a:	f00d f837 	bl	800f5cc <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 800255e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002562:	f103 0314 	add.w	r3, r3, #20
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4613      	mov	r3, r2
 800256a:	009b      	lsls	r3, r3, #2
 800256c:	4413      	add	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002574:	f102 0208 	add.w	r2, r2, #8
 8002578:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 800257a:	2300      	movs	r3, #0
 800257c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002580:	f102 0210 	add.w	r2, r2, #16
 8002584:	6013      	str	r3, [r2, #0]
 8002586:	e084      	b.n	8002692 <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 8002588:	2300      	movs	r3, #0
 800258a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800258e:	f102 020c 	add.w	r2, r2, #12
 8002592:	6013      	str	r3, [r2, #0]
 8002594:	e064      	b.n	8002660 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 8002596:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800259a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025a6:	f103 030c 	add.w	r3, r3, #12
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	4413      	add	r3, r2
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f000 f918 	bl	80027e8 <_ZN13DisplayObject11getpriorityEv>
 80025b8:	4603      	mov	r3, r0
 80025ba:	461a      	mov	r2, r3
 80025bc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025c0:	f103 0310 	add.w	r3, r3, #16
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4293      	cmp	r3, r2
 80025c8:	bf0c      	ite	eq
 80025ca:	2301      	moveq	r3, #1
 80025cc:	2300      	movne	r3, #0
 80025ce:	b2db      	uxtb	r3, r3
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d03a      	beq.n	800264a <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80025d4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025d8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025e4:	f103 030c 	add.w	r3, r3, #12
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	4413      	add	r3, r2
 80025ee:	6818      	ldr	r0, [r3, #0]
 80025f0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025f4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002600:	f103 030c 	add.w	r3, r3, #12
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	4413      	add	r3, r2
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	3308      	adds	r3, #8
 8002610:	681c      	ldr	r4, [r3, #0]
 8002612:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002616:	f103 0308 	add.w	r3, r3, #8
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	b29b      	uxth	r3, r3
 800261e:	f107 0120 	add.w	r1, r7, #32
 8002622:	3918      	subs	r1, #24
 8002624:	2250      	movs	r2, #80	@ 0x50
 8002626:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002628:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800262c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002638:	f103 030c 	add.w	r3, r3, #12
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4618      	mov	r0, r3
 8002646:	f000 f87f 	bl	8002748 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 800264a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264e:	f103 030c 	add.w	r3, r3, #12
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	3301      	adds	r3, #1
 8002656:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800265a:	f102 020c 	add.w	r2, r2, #12
 800265e:	6013      	str	r3, [r2, #0]
 8002660:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002664:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	791b      	ldrb	r3, [r3, #4]
 800266c:	461a      	mov	r2, r3
 800266e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002672:	f103 030c 	add.w	r3, r3, #12
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4293      	cmp	r3, r2
 800267a:	db8c      	blt.n	8002596 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 800267c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002680:	f103 0310 	add.w	r3, r3, #16
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	3301      	adds	r3, #1
 8002688:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800268c:	f102 0210 	add.w	r2, r2, #16
 8002690:	6013      	str	r3, [r2, #0]
 8002692:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002696:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	799b      	ldrb	r3, [r3, #6]
 800269e:	461a      	mov	r2, r3
 80026a0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026a4:	f103 0310 	add.w	r3, r3, #16
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4293      	cmp	r3, r2
 80026ac:	f77f af6c 	ble.w	8002588 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 80026b0:	f107 0320 	add.w	r3, r7, #32
 80026b4:	3b18      	subs	r3, #24
 80026b6:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80026ba:	4619      	mov	r1, r3
 80026bc:	4818      	ldr	r0, [pc, #96]	@ (8002720 <_ZN5Scene9drawSceneEv+0x2c0>)
 80026be:	f7ff fe5d 	bl	800237c <transmitdma>
			while(!spidatasentflag) {}
 80026c2:	bf00      	nop
 80026c4:	4b17      	ldr	r3, [pc, #92]	@ (8002724 <_ZN5Scene9drawSceneEv+0x2c4>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	b2db      	uxtb	r3, r3
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	bf0c      	ite	eq
 80026ce:	2301      	moveq	r3, #1
 80026d0:	2300      	movne	r3, #0
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d1f5      	bne.n	80026c4 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80026d8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026dc:	f103 0314 	add.w	r3, r3, #20
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	3301      	adds	r3, #1
 80026e4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026e8:	f102 0214 	add.w	r2, r2, #20
 80026ec:	6013      	str	r3, [r2, #0]
 80026ee:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f2:	f103 0314 	add.w	r3, r3, #20
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2b05      	cmp	r3, #5
 80026fa:	f77f af25 	ble.w	8002548 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 80026fe:	f000 fa95 	bl	8002c2c <endCommand>
	}
	this->changed = 0;
 8002702:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002706:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2200      	movs	r2, #0
 800270e:	715a      	strb	r2, [r3, #5]
 8002710:	e000      	b.n	8002714 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 8002712:	bf00      	nop
}
 8002714:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002718:	3724      	adds	r7, #36	@ 0x24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd90      	pop	{r4, r7, pc}
 800271e:	bf00      	nop
 8002720:	200001bc 	.word	0x200001bc
 8002724:	2000037c 	.word	0x2000037c

08002728 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]
 8002730:	4a04      	ldr	r2, [pc, #16]	@ (8002744 <_ZN13DisplayObjectD1Ev+0x1c>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4618      	mov	r0, r3
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	08010114 	.word	0x08010114

08002748 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	715a      	strb	r2, [r3, #5]
}
 8002756:	bf00      	nop
 8002758:	370c      	adds	r7, #12
 800275a:	46bd      	mov	sp, r7
 800275c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002760:	4770      	bx	lr

08002762 <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	715a      	strb	r2, [r3, #5]
}
 8002770:	bf00      	nop
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr

0800277c <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 800277c:	b480      	push	{r7}
 800277e:	b083      	sub	sp, #12
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
	return this->xpos;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	88db      	ldrh	r3, [r3, #6]
}
 8002788:	4618      	mov	r0, r3
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	460b      	mov	r3, r1
 800279e:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	887a      	ldrh	r2, [r7, #2]
 80027a4:	80da      	strh	r2, [r3, #6]
}
 80027a6:	bf00      	nop
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
	return this->ypos;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	891b      	ldrh	r3, [r3, #8]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr

080027ca <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 80027ca:	b480      	push	{r7}
 80027cc:	b083      	sub	sp, #12
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	887a      	ldrh	r2, [r7, #2]
 80027da:	811a      	strh	r2, [r3, #8]
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	return this->priority;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	791b      	ldrb	r3, [r3, #4]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr

08002800 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	460b      	mov	r3, r1
 800280a:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	78fa      	ldrb	r2, [r7, #3]
 8002810:	711a      	strb	r2, [r3, #4]
}
 8002812:	bf00      	nop
 8002814:	370c      	adds	r7, #12
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr

0800281e <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 800281e:	b480      	push	{r7}
 8002820:	b083      	sub	sp, #12
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
	return this->changed;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	795b      	ldrb	r3, [r3, #5]
}
 800282a:	4618      	mov	r0, r3
 800282c:	370c      	adds	r7, #12
 800282e:	46bd      	mov	sp, r7
 8002830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002834:	4770      	bx	lr
	...

08002838 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	4a04      	ldr	r2, [pc, #16]	@ (8002854 <_ZN13DisplayObjectC1Ev+0x1c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	601a      	str	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4618      	mov	r0, r3
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	08010114 	.word	0x08010114

08002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	60f8      	str	r0, [r7, #12]
 8002860:	4608      	mov	r0, r1
 8002862:	4611      	mov	r1, r2
 8002864:	461a      	mov	r2, r3
 8002866:	4603      	mov	r3, r0
 8002868:	817b      	strh	r3, [r7, #10]
 800286a:	460b      	mov	r3, r1
 800286c:	813b      	strh	r3, [r7, #8]
 800286e:	4613      	mov	r3, r2
 8002870:	80fb      	strh	r3, [r7, #6]
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4618      	mov	r0, r3
 8002876:	f7ff ffdf 	bl	8002838 <_ZN13DisplayObjectC1Ev>
 800287a:	4a15      	ldr	r2, [pc, #84]	@ (80028d0 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	6a3a      	ldr	r2, [r7, #32]
 8002884:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	897a      	ldrh	r2, [r7, #10]
 800288a:	4611      	mov	r1, r2
 800288c:	4618      	mov	r0, r3
 800288e:	f7ff ff81 	bl	8002794 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	893a      	ldrh	r2, [r7, #8]
 8002896:	4611      	mov	r1, r2
 8002898:	4618      	mov	r0, r3
 800289a:	f7ff ff96 	bl	80027ca <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	7f3a      	ldrb	r2, [r7, #28]
 80028a8:	751a      	strb	r2, [r3, #20]
	this->font = font;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	69ba      	ldr	r2, [r7, #24]
 80028ae:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ffa1 	bl	8002800 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff4e 	bl	8002762 <_ZN13DisplayObject12redrawObjectEv>
}
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	4618      	mov	r0, r3
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	08010100 	.word	0x08010100

080028d4 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80028d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028d8:	b08a      	sub	sp, #40	@ 0x28
 80028da:	af06      	add	r7, sp, #24
 80028dc:	60f8      	str	r0, [r7, #12]
 80028de:	60b9      	str	r1, [r7, #8]
 80028e0:	4611      	mov	r1, r2
 80028e2:	461a      	mov	r2, r3
 80028e4:	460b      	mov	r3, r1
 80028e6:	80fb      	strh	r3, [r7, #6]
 80028e8:	4613      	mov	r3, r2
 80028ea:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	68dc      	ldr	r4, [r3, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	691d      	ldr	r5, [r3, #16]
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	895e      	ldrh	r6, [r3, #10]
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7ff ff3e 	bl	800277c <_ZN13DisplayObject7getxposEv>
 8002900:	4603      	mov	r3, r0
 8002902:	4698      	mov	r8, r3
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	4618      	mov	r0, r3
 8002908:	f7ff ff53 	bl	80027b2 <_ZN13DisplayObject7getyposEv>
 800290c:	4603      	mov	r3, r0
 800290e:	4619      	mov	r1, r3
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	7d1b      	ldrb	r3, [r3, #20]
 8002914:	88ba      	ldrh	r2, [r7, #4]
 8002916:	9204      	str	r2, [sp, #16]
 8002918:	88fa      	ldrh	r2, [r7, #6]
 800291a:	9203      	str	r2, [sp, #12]
 800291c:	68ba      	ldr	r2, [r7, #8]
 800291e:	9202      	str	r2, [sp, #8]
 8002920:	9301      	str	r3, [sp, #4]
 8002922:	9100      	str	r1, [sp, #0]
 8002924:	4643      	mov	r3, r8
 8002926:	4632      	mov	r2, r6
 8002928:	4629      	mov	r1, r5
 800292a:	4620      	mov	r0, r4
 800292c:	f000 fc57 	bl	80031de <drawStringIntoFramebuffer>
 8002930:	4603      	mov	r3, r0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800293c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 800293c:	b580      	push	{r7, lr}
 800293e:	b084      	sub	sp, #16
 8002940:	af00      	add	r7, sp, #0
 8002942:	60f8      	str	r0, [r7, #12]
 8002944:	60b9      	str	r1, [r7, #8]
 8002946:	4611      	mov	r1, r2
 8002948:	461a      	mov	r2, r3
 800294a:	460b      	mov	r3, r1
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	4613      	mov	r3, r2
 8002950:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	79fa      	ldrb	r2, [r7, #7]
 800295c:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	88ba      	ldrh	r2, [r7, #4]
 8002962:	815a      	strh	r2, [r3, #10]
	this->font = font;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8bba      	ldrh	r2, [r7, #28]
 800296e:	4611      	mov	r1, r2
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff ff0f 	bl	8002794 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	8c3a      	ldrh	r2, [r7, #32]
 800297a:	4611      	mov	r1, r2
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ff24 	bl	80027ca <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002988:	4611      	mov	r1, r2
 800298a:	4618      	mov	r0, r3
 800298c:	f7ff ff38 	bl	8002800 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	4618      	mov	r0, r3
 8002994:	f7ff fee5 	bl	8002762 <_ZN13DisplayObject12redrawObjectEv>
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 80029a0:	b580      	push	{r7, lr}
 80029a2:	b088      	sub	sp, #32
 80029a4:	af04      	add	r7, sp, #16
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	4611      	mov	r1, r2
 80029ac:	461a      	mov	r2, r3
 80029ae:	460b      	mov	r3, r1
 80029b0:	80fb      	strh	r3, [r7, #6]
 80029b2:	4613      	mov	r3, r2
 80029b4:	80bb      	strh	r3, [r7, #4]
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4618      	mov	r0, r3
 80029ba:	f7ff ff3d 	bl	8002838 <_ZN13DisplayObjectC1Ev>
 80029be:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <_ZN11ImageObjectC1EPctttthh+0x50>)
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 80029c4:	88b9      	ldrh	r1, [r7, #4]
 80029c6:	88fa      	ldrh	r2, [r7, #6]
 80029c8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80029cc:	9303      	str	r3, [sp, #12]
 80029ce:	f897 3020 	ldrb.w	r3, [r7, #32]
 80029d2:	9302      	str	r3, [sp, #8]
 80029d4:	8bbb      	ldrh	r3, [r7, #28]
 80029d6:	9301      	str	r3, [sp, #4]
 80029d8:	8b3b      	ldrh	r3, [r7, #24]
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	460b      	mov	r3, r1
 80029de:	68b9      	ldr	r1, [r7, #8]
 80029e0:	68f8      	ldr	r0, [r7, #12]
 80029e2:	f000 f83b 	bl	8002a5c <_ZN11ImageObject11updateImageEPctttthh>
}
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	080100ec 	.word	0x080100ec

080029f4 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80029f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80029f8:	b08a      	sub	sp, #40	@ 0x28
 80029fa:	af06      	add	r7, sp, #24
 80029fc:	60f8      	str	r0, [r7, #12]
 80029fe:	60b9      	str	r1, [r7, #8]
 8002a00:	4611      	mov	r1, r2
 8002a02:	461a      	mov	r2, r3
 8002a04:	460b      	mov	r3, r1
 8002a06:	80fb      	strh	r3, [r7, #6]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	691c      	ldr	r4, [r3, #16]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	895d      	ldrh	r5, [r3, #10]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	899e      	ldrh	r6, [r3, #12]
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff feae 	bl	800277c <_ZN13DisplayObject7getxposEv>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4698      	mov	r8, r3
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fec3 	bl	80027b2 <_ZN13DisplayObject7getyposEv>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	4619      	mov	r1, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	7b9b      	ldrb	r3, [r3, #14]
 8002a34:	88ba      	ldrh	r2, [r7, #4]
 8002a36:	9204      	str	r2, [sp, #16]
 8002a38:	88fa      	ldrh	r2, [r7, #6]
 8002a3a:	9203      	str	r2, [sp, #12]
 8002a3c:	68ba      	ldr	r2, [r7, #8]
 8002a3e:	9202      	str	r2, [sp, #8]
 8002a40:	9301      	str	r3, [sp, #4]
 8002a42:	9100      	str	r1, [sp, #0]
 8002a44:	4643      	mov	r3, r8
 8002a46:	4632      	mov	r2, r6
 8002a48:	4629      	mov	r1, r5
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	f000 fc28 	bl	80032a0 <drawImageIntoFramebuffer>
	return 0;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3710      	adds	r7, #16
 8002a56:	46bd      	mov	sp, r7
 8002a58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a5c <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b084      	sub	sp, #16
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	4611      	mov	r1, r2
 8002a68:	461a      	mov	r2, r3
 8002a6a:	460b      	mov	r3, r1
 8002a6c:	80fb      	strh	r3, [r7, #6]
 8002a6e:	4613      	mov	r3, r2
 8002a70:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8b3a      	ldrh	r2, [r7, #24]
 8002a76:	4611      	mov	r1, r2
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe8b 	bl	8002794 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	8bba      	ldrh	r2, [r7, #28]
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fea0 	bl	80027ca <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	68ba      	ldr	r2, [r7, #8]
 8002a8e:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	88fa      	ldrh	r2, [r7, #6]
 8002a94:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	88ba      	ldrh	r2, [r7, #4]
 8002a9a:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aa2:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002aaa:	4611      	mov	r1, r2
 8002aac:	4618      	mov	r0, r3
 8002aae:	f7ff fea7 	bl	8002800 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f7ff fe54 	bl	8002762 <_ZN13DisplayObject12redrawObjectEv>
}
 8002aba:	bf00      	nop
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b082      	sub	sp, #8
 8002ac8:	af00      	add	r7, sp, #0
 8002aca:	6078      	str	r0, [r7, #4]
 8002acc:	4a05      	ldr	r2, [pc, #20]	@ (8002ae4 <_ZN11ImageObjectD1Ev+0x20>)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	601a      	str	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff fe27 	bl	8002728 <_ZN13DisplayObjectD1Ev>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4618      	mov	r0, r3
 8002ade:	3708      	adds	r7, #8
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}
 8002ae4:	080100ec 	.word	0x080100ec

08002ae8 <_ZN11ImageObjectD0Ev>:
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
 8002af0:	6878      	ldr	r0, [r7, #4]
 8002af2:	f7ff ffe7 	bl	8002ac4 <_ZN11ImageObjectD1Ev>
 8002af6:	2114      	movs	r1, #20
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f00c fbed 	bl	800f2d8 <_ZdlPvj>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	4618      	mov	r0, r3
 8002b02:	3708      	adds	r7, #8
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bd80      	pop	{r7, pc}

08002b08 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b082      	sub	sp, #8
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
 8002b10:	4a05      	ldr	r2, [pc, #20]	@ (8002b28 <_ZN12StringObjectD1Ev+0x20>)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	601a      	str	r2, [r3, #0]
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7ff fe05 	bl	8002728 <_ZN13DisplayObjectD1Ev>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	4618      	mov	r0, r3
 8002b22:	3708      	adds	r7, #8
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	08010100 	.word	0x08010100

08002b2c <_ZN12StringObjectD0Ev>:
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f7ff ffe7 	bl	8002b08 <_ZN12StringObjectD1Ev>
 8002b3a:	2118      	movs	r1, #24
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f00c fbcb 	bl	800f2d8 <_ZdlPvj>
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4618      	mov	r0, r3
 8002b46:	3708      	adds	r7, #8
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd80      	pop	{r7, pc}

08002b4c <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b50:	2200      	movs	r2, #0
 8002b52:	2108      	movs	r1, #8
 8002b54:	4802      	ldr	r0, [pc, #8]	@ (8002b60 <startTransaction+0x14>)
 8002b56:	f002 fb05 	bl	8005164 <HAL_GPIO_WritePin>
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020400 	.word	0x40020400

08002b64 <endTransaction>:

void endTransaction() {
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002b68:	2201      	movs	r2, #1
 8002b6a:	2108      	movs	r1, #8
 8002b6c:	4802      	ldr	r0, [pc, #8]	@ (8002b78 <endTransaction+0x14>)
 8002b6e:	f002 faf9 	bl	8005164 <HAL_GPIO_WritePin>
}
 8002b72:	bf00      	nop
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40020400 	.word	0x40020400

08002b7c <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002b86:	79fb      	ldrb	r3, [r7, #7]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	2110      	movs	r1, #16
 8002b90:	4806      	ldr	r0, [pc, #24]	@ (8002bac <dataOrRegister+0x30>)
 8002b92:	f002 fae7 	bl	8005164 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002b96:	e004      	b.n	8002ba2 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002b98:	2200      	movs	r2, #0
 8002b9a:	2110      	movs	r1, #16
 8002b9c:	4803      	ldr	r0, [pc, #12]	@ (8002bac <dataOrRegister+0x30>)
 8002b9e:	f002 fae1 	bl	8005164 <HAL_GPIO_WritePin>
}
 8002ba2:	bf00      	nop
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}
 8002baa:	bf00      	nop
 8002bac:	40020400 	.word	0x40020400

08002bb0 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b084      	sub	sp, #16
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	60b9      	str	r1, [r7, #8]
 8002bba:	607a      	str	r2, [r7, #4]
 8002bbc:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002bbe:	f7ff ffc5 	bl	8002b4c <startTransaction>

	dataOrRegister(0);
 8002bc2:	2000      	movs	r0, #0
 8002bc4:	f7ff ffda 	bl	8002b7c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002bc8:	f107 010e 	add.w	r1, r7, #14
 8002bcc:	230a      	movs	r3, #10
 8002bce:	2201      	movs	r2, #1
 8002bd0:	480a      	ldr	r0, [pc, #40]	@ (8002bfc <commandAndData+0x4c>)
 8002bd2:	f004 fa04 	bl	8006fde <HAL_SPI_Transmit>

	if (size) {
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d009      	beq.n	8002bf0 <commandAndData+0x40>
		dataOrRegister(1);
 8002bdc:	2001      	movs	r0, #1
 8002bde:	f7ff ffcd 	bl	8002b7c <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	230a      	movs	r3, #10
 8002be8:	68b9      	ldr	r1, [r7, #8]
 8002bea:	4804      	ldr	r0, [pc, #16]	@ (8002bfc <commandAndData+0x4c>)
 8002bec:	f004 f9f7 	bl	8006fde <HAL_SPI_Transmit>
	}

	endTransaction();
 8002bf0:	f7ff ffb8 	bl	8002b64 <endTransaction>
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}
 8002bfc:	200001bc 	.word	0x200001bc

08002c00 <startCommand>:

void startCommand(uint16_t command) {
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b082      	sub	sp, #8
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002c0a:	f7ff ff9f 	bl	8002b4c <startTransaction>
	dataOrRegister(0);
 8002c0e:	2000      	movs	r0, #0
 8002c10:	f7ff ffb4 	bl	8002b7c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002c14:	1db9      	adds	r1, r7, #6
 8002c16:	230a      	movs	r3, #10
 8002c18:	2201      	movs	r2, #1
 8002c1a:	4803      	ldr	r0, [pc, #12]	@ (8002c28 <startCommand+0x28>)
 8002c1c:	f004 f9df 	bl	8006fde <HAL_SPI_Transmit>
}
 8002c20:	bf00      	nop
 8002c22:	3708      	adds	r7, #8
 8002c24:	46bd      	mov	sp, r7
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	200001bc 	.word	0x200001bc

08002c2c <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	endTransaction();
 8002c30:	f7ff ff98 	bl	8002b64 <endTransaction>
}
 8002c34:	bf00      	nop
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <resetScreen>:

void resetScreen() {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2120      	movs	r1, #32
 8002c40:	480b      	ldr	r0, [pc, #44]	@ (8002c70 <resetScreen+0x38>)
 8002c42:	f002 fa8f 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002c46:	2014      	movs	r0, #20
 8002c48:	f001 fc40 	bl	80044cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	2120      	movs	r1, #32
 8002c50:	4807      	ldr	r0, [pc, #28]	@ (8002c70 <resetScreen+0x38>)
 8002c52:	f002 fa87 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002c56:	2014      	movs	r0, #20
 8002c58:	f001 fc38 	bl	80044cc <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	2120      	movs	r1, #32
 8002c60:	4803      	ldr	r0, [pc, #12]	@ (8002c70 <resetScreen+0x38>)
 8002c62:	f002 fa7f 	bl	8005164 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c66:	2064      	movs	r0, #100	@ 0x64
 8002c68:	f001 fc30 	bl	80044cc <HAL_Delay>
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}
 8002c70:	40020400 	.word	0x40020400

08002c74 <initializeScreen>:

void initializeScreen() {
 8002c74:	b5b0      	push	{r4, r5, r7, lr}
 8002c76:	b09c      	sub	sp, #112	@ 0x70
 8002c78:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2100      	movs	r1, #0
 8002c7e:	2001      	movs	r0, #1
 8002c80:	f7ff ff96 	bl	8002bb0 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2100      	movs	r1, #0
 8002c88:	2011      	movs	r0, #17
 8002c8a:	f7ff ff91 	bl	8002bb0 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002c8e:	2355      	movs	r3, #85	@ 0x55
 8002c90:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002c94:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002c98:	2202      	movs	r2, #2
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	203a      	movs	r0, #58	@ 0x3a
 8002c9e:	f7ff ff87 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002ca2:	4b47      	ldr	r3, [pc, #284]	@ (8002dc0 <initializeScreen+0x14c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002ca8:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002cac:	2204      	movs	r2, #4
 8002cae:	4619      	mov	r1, r3
 8002cb0:	20c0      	movs	r0, #192	@ 0xc0
 8002cb2:	f7ff ff7d 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002cb6:	2345      	movs	r3, #69	@ 0x45
 8002cb8:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002cc2:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002cc6:	2204      	movs	r2, #4
 8002cc8:	4619      	mov	r1, r3
 8002cca:	20c1      	movs	r0, #193	@ 0xc1
 8002ccc:	f7ff ff70 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002cd0:	2333      	movs	r3, #51	@ 0x33
 8002cd2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002cd6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002cda:	2202      	movs	r2, #2
 8002cdc:	4619      	mov	r1, r3
 8002cde:	20c2      	movs	r0, #194	@ 0xc2
 8002ce0:	f7ff ff66 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002cea:	2328      	movs	r3, #40	@ 0x28
 8002cec:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002cf0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	20c5      	movs	r0, #197	@ 0xc5
 8002cfa:	f7ff ff59 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002cfe:	4b31      	ldr	r3, [pc, #196]	@ (8002dc4 <initializeScreen+0x150>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002d04:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d08:	2204      	movs	r2, #4
 8002d0a:	4619      	mov	r1, r3
 8002d0c:	20b1      	movs	r0, #177	@ 0xb1
 8002d0e:	f7ff ff4f 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002d12:	2302      	movs	r3, #2
 8002d14:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002d18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d1c:	2202      	movs	r2, #2
 8002d1e:	4619      	mov	r1, r3
 8002d20:	20b4      	movs	r0, #180	@ 0xb4
 8002d22:	f7ff ff45 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002d26:	4a28      	ldr	r2, [pc, #160]	@ (8002dc8 <initializeScreen+0x154>)
 8002d28:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d2c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d30:	6018      	str	r0, [r3, #0]
 8002d32:	3304      	adds	r3, #4
 8002d34:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002d36:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d3a:	2206      	movs	r2, #6
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	20b6      	movs	r0, #182	@ 0xb6
 8002d40:	f7ff ff36 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002d44:	4b21      	ldr	r3, [pc, #132]	@ (8002dcc <initializeScreen+0x158>)
 8002d46:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002d4a:	461d      	mov	r5, r3
 8002d4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d50:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d54:	c407      	stmia	r4!, {r0, r1, r2}
 8002d56:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002d58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d5c:	221e      	movs	r2, #30
 8002d5e:	4619      	mov	r1, r3
 8002d60:	20e0      	movs	r0, #224	@ 0xe0
 8002d62:	f7ff ff25 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002d66:	4b1a      	ldr	r3, [pc, #104]	@ (8002dd0 <initializeScreen+0x15c>)
 8002d68:	f107 040c 	add.w	r4, r7, #12
 8002d6c:	461d      	mov	r5, r3
 8002d6e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d70:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d72:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d76:	c407      	stmia	r4!, {r0, r1, r2}
 8002d78:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002d7a:	f107 030c 	add.w	r3, r7, #12
 8002d7e:	221e      	movs	r2, #30
 8002d80:	4619      	mov	r1, r3
 8002d82:	20e1      	movs	r0, #225	@ 0xe1
 8002d84:	f7ff ff14 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002d88:	2300      	movs	r3, #0
 8002d8a:	813b      	strh	r3, [r7, #8]
 8002d8c:	2322      	movs	r3, #34	@ 0x22
 8002d8e:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002d90:	f107 0308 	add.w	r3, r7, #8
 8002d94:	2204      	movs	r2, #4
 8002d96:	4619      	mov	r1, r3
 8002d98:	20b6      	movs	r0, #182	@ 0xb6
 8002d9a:	f7ff ff09 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002d9e:	2308      	movs	r3, #8
 8002da0:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	2202      	movs	r2, #2
 8002da6:	4619      	mov	r1, r3
 8002da8:	2036      	movs	r0, #54	@ 0x36
 8002daa:	f7ff ff01 	bl	8002bb0 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002dae:	2000      	movs	r0, #0
 8002db0:	f000 f85a 	bl	8002e68 <clearScreenfast>
	displayOn();
 8002db4:	f000 f80e 	bl	8002dd4 <displayOn>
}
 8002db8:	bf00      	nop
 8002dba:	3770      	adds	r7, #112	@ 0x70
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bdb0      	pop	{r4, r5, r7, pc}
 8002dc0:	0800ff94 	.word	0x0800ff94
 8002dc4:	0800ff98 	.word	0x0800ff98
 8002dc8:	0800ff9c 	.word	0x0800ff9c
 8002dcc:	0800ffa4 	.word	0x0800ffa4
 8002dd0:	0800ffc4 	.word	0x0800ffc4

08002dd4 <displayOn>:

void displayOn() {
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	2100      	movs	r1, #0
 8002ddc:	2029      	movs	r0, #41	@ 0x29
 8002dde:	f7ff fee7 	bl	8002bb0 <commandAndData>
}
 8002de2:	bf00      	nop
 8002de4:	bd80      	pop	{r7, pc}

08002de6 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002de6:	b590      	push	{r4, r7, lr}
 8002de8:	b087      	sub	sp, #28
 8002dea:	af00      	add	r7, sp, #0
 8002dec:	4604      	mov	r4, r0
 8002dee:	4608      	mov	r0, r1
 8002df0:	4611      	mov	r1, r2
 8002df2:	461a      	mov	r2, r3
 8002df4:	4623      	mov	r3, r4
 8002df6:	80fb      	strh	r3, [r7, #6]
 8002df8:	4603      	mov	r3, r0
 8002dfa:	80bb      	strh	r3, [r7, #4]
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	807b      	strh	r3, [r7, #2]
 8002e00:	4613      	mov	r3, r2
 8002e02:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002e04:	88bb      	ldrh	r3, [r7, #4]
 8002e06:	0a1b      	lsrs	r3, r3, #8
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	823b      	strh	r3, [r7, #16]
 8002e0c:	88bb      	ldrh	r3, [r7, #4]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	827b      	strh	r3, [r7, #18]
 8002e14:	883b      	ldrh	r3, [r7, #0]
 8002e16:	0a1b      	lsrs	r3, r3, #8
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	82bb      	strh	r3, [r7, #20]
 8002e1c:	883b      	ldrh	r3, [r7, #0]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	b29b      	uxth	r3, r3
 8002e22:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002e24:	f107 0310 	add.w	r3, r7, #16
 8002e28:	2208      	movs	r2, #8
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	202a      	movs	r0, #42	@ 0x2a
 8002e2e:	f7ff febf 	bl	8002bb0 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002e32:	88fb      	ldrh	r3, [r7, #6]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	813b      	strh	r3, [r7, #8]
 8002e3a:	88fb      	ldrh	r3, [r7, #6]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	817b      	strh	r3, [r7, #10]
 8002e42:	887b      	ldrh	r3, [r7, #2]
 8002e44:	0a1b      	lsrs	r3, r3, #8
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	81bb      	strh	r3, [r7, #12]
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	b29b      	uxth	r3, r3
 8002e50:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002e52:	f107 0308 	add.w	r3, r7, #8
 8002e56:	2208      	movs	r2, #8
 8002e58:	4619      	mov	r1, r3
 8002e5a:	202b      	movs	r0, #43	@ 0x2b
 8002e5c:	f7ff fea8 	bl	8002bb0 <commandAndData>
	}
}
 8002e60:	bf00      	nop
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd90      	pop	{r4, r7, pc}

08002e68 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002e6e:	b084      	sub	sp, #16
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4602      	mov	r2, r0
 8002e74:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002e78:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002e7c:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002e84:	f102 020c 	add.w	r2, r2, #12
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	e01a      	b.n	8002ec2 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8002e8c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002e90:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8002e94:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002e98:	f102 020c 	add.w	r2, r2, #12
 8002e9c:	6812      	ldr	r2, [r2, #0]
 8002e9e:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8002ea2:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8002ea6:	8809      	ldrh	r1, [r1, #0]
 8002ea8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002eac:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002eb0:	f103 030c 	add.w	r3, r3, #12
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ebc:	f102 020c 	add.w	r2, r2, #12
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002ec6:	f103 030c 	add.w	r3, r3, #12
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8002ed0:	dbdc      	blt.n	8002e8c <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8002ed2:	f240 133f 	movw	r3, #319	@ 0x13f
 8002ed6:	f240 12df 	movw	r2, #479	@ 0x1df
 8002eda:	2100      	movs	r1, #0
 8002edc:	2000      	movs	r0, #0
 8002ede:	f7ff ff82 	bl	8002de6 <modifySpace>
	startCommand(0x2C);
 8002ee2:	202c      	movs	r0, #44	@ 0x2c
 8002ee4:	f7ff fe8c 	bl	8002c00 <startCommand>
	dataOrRegister(1);
 8002ee8:	2001      	movs	r0, #1
 8002eea:	f7ff fe47 	bl	8002b7c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ef4:	f102 0208 	add.w	r2, r2, #8
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	e019      	b.n	8002f30 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8002efc:	f107 0310 	add.w	r3, r7, #16
 8002f00:	3b08      	subs	r3, #8
 8002f02:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002f06:	4619      	mov	r1, r3
 8002f08:	4811      	ldr	r0, [pc, #68]	@ (8002f50 <clearScreenfast+0xe8>)
 8002f0a:	f7ff fa37 	bl	800237c <transmitdma>
		while (!spidatasentflag) {}
 8002f0e:	bf00      	nop
 8002f10:	4b10      	ldr	r3, [pc, #64]	@ (8002f54 <clearScreenfast+0xec>)
 8002f12:	781b      	ldrb	r3, [r3, #0]
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d0fa      	beq.n	8002f10 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002f1a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f1e:	f103 0308 	add.w	r3, r3, #8
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	3301      	adds	r3, #1
 8002f26:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f2a:	f102 0208 	add.w	r2, r2, #8
 8002f2e:	6013      	str	r3, [r2, #0]
 8002f30:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f34:	f103 0308 	add.w	r3, r3, #8
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2b05      	cmp	r3, #5
 8002f3c:	ddde      	ble.n	8002efc <clearScreenfast+0x94>
	}
	endCommand();
 8002f3e:	f7ff fe75 	bl	8002c2c <endCommand>
}
 8002f42:	bf00      	nop
 8002f44:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002f48:	3710      	adds	r7, #16
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}
 8002f4e:	bf00      	nop
 8002f50:	200001bc 	.word	0x200001bc
 8002f54:	2000037c 	.word	0x2000037c

08002f58 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8002f58:	b480      	push	{r7}
 8002f5a:	b085      	sub	sp, #20
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	460b      	mov	r3, r1
 8002f68:	80fb      	strh	r3, [r7, #6]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	881a      	ldrh	r2, [r3, #0]
 8002f72:	88fb      	ldrh	r3, [r7, #6]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	b29b      	uxth	r3, r3
 8002f78:	1ad3      	subs	r3, r2, r3
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8002f80:	68bb      	ldr	r3, [r7, #8]
 8002f82:	881a      	ldrh	r2, [r3, #0]
 8002f84:	88bb      	ldrh	r3, [r7, #4]
 8002f86:	085b      	lsrs	r3, r3, #1
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	1ad3      	subs	r3, r2, r3
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	801a      	strh	r2, [r3, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3714      	adds	r7, #20
 8002f96:	46bd      	mov	sp, r7
 8002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9c:	4770      	bx	lr

08002f9e <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8002f9e:	b480      	push	{r7}
 8002fa0:	b089      	sub	sp, #36	@ 0x24
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	60f8      	str	r0, [r7, #12]
 8002fa6:	60b9      	str	r1, [r7, #8]
 8002fa8:	607a      	str	r2, [r7, #4]
 8002faa:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8002fb4:	e015      	b.n	8002fe2 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	69fb      	ldr	r3, [r7, #28]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	460b      	mov	r3, r1
 8002fc2:	009b      	lsls	r3, r3, #2
 8002fc4:	440b      	add	r3, r1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002fcc:	4413      	add	r3, r2
 8002fce:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	791b      	ldrb	r3, [r3, #4]
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	8b7b      	ldrh	r3, [r7, #26]
 8002fd8:	4413      	add	r3, r2
 8002fda:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d1e5      	bne.n	8002fb6 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	8b7b      	ldrh	r3, [r7, #26]
 8002ff0:	085b      	lsrs	r3, r3, #1
 8002ff2:	b29b      	uxth	r3, r3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	b29a      	uxth	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8002ffc:	bf00      	nop
 8002ffe:	3724      	adds	r7, #36	@ 0x24
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr

08003008 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003008:	b480      	push	{r7}
 800300a:	b089      	sub	sp, #36	@ 0x24
 800300c:	af00      	add	r7, sp, #0
 800300e:	60f8      	str	r0, [r7, #12]
 8003010:	60b9      	str	r1, [r7, #8]
 8003012:	607a      	str	r2, [r7, #4]
 8003014:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800301a:	2300      	movs	r3, #0
 800301c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 800301e:	e015      	b.n	800304c <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	781b      	ldrb	r3, [r3, #0]
 8003028:	4619      	mov	r1, r3
 800302a:	460b      	mov	r3, r1
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	005b      	lsls	r3, r3, #1
 8003032:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003036:	4413      	add	r3, r2
 8003038:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	791b      	ldrb	r3, [r3, #4]
 800303e:	461a      	mov	r2, r3
 8003040:	8b7b      	ldrh	r3, [r7, #26]
 8003042:	4413      	add	r3, r2
 8003044:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3301      	adds	r3, #1
 800304a:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 800304c:	69fb      	ldr	r3, [r7, #28]
 800304e:	781b      	ldrb	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1e5      	bne.n	8003020 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	881a      	ldrh	r2, [r3, #0]
 8003058:	8b7b      	ldrh	r3, [r7, #26]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003062:	bf00      	nop
 8003064:	3724      	adds	r7, #36	@ 0x24
 8003066:	46bd      	mov	sp, r7
 8003068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306c:	4770      	bx	lr

0800306e <drawCharIntoFramebuffer>:

	return (uint16_t)xadv;
}

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800306e:	b480      	push	{r7}
 8003070:	b08d      	sub	sp, #52	@ 0x34
 8003072:	af00      	add	r7, sp, #0
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	4611      	mov	r1, r2
 8003078:	461a      	mov	r2, r3
 800307a:	4603      	mov	r3, r0
 800307c:	73fb      	strb	r3, [r7, #15]
 800307e:	460b      	mov	r3, r1
 8003080:	81bb      	strh	r3, [r7, #12]
 8003082:	4613      	mov	r3, r2
 8003084:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	6859      	ldr	r1, [r3, #4]
 800308a:	7bfa      	ldrb	r2, [r7, #15]
 800308c:	4613      	mov	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	4413      	add	r3, r2
 8003092:	005b      	lsls	r3, r3, #1
 8003094:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003098:	440b      	add	r3, r1
 800309a:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 800309c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800309e:	789b      	ldrb	r3, [r3, #2]
 80030a0:	847b      	strh	r3, [r7, #34]	@ 0x22
 80030a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030a4:	78db      	ldrb	r3, [r3, #3]
 80030a6:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80030a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030aa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80030ae:	77fb      	strb	r3, [r7, #31]
 80030b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030b6:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80030b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ba:	791b      	ldrb	r3, [r3, #4]
 80030bc:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 80030c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030c6:	881b      	ldrh	r3, [r3, #0]
 80030c8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 80030ca:	2300      	movs	r3, #0
 80030cc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 80030d6:	2300      	movs	r3, #0
 80030d8:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80030da:	e071      	b.n	80031c0 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 80030dc:	2300      	movs	r3, #0
 80030de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80030e0:	e062      	b.n	80031a8 <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 80030e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80030e6:	1c5a      	adds	r2, r3, #1
 80030e8:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d108      	bne.n	8003106 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 80030f4:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80030f6:	1c5a      	adds	r2, r3, #1
 80030f8:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80030fa:	461a      	mov	r2, r3
 80030fc:	69bb      	ldr	r3, [r7, #24]
 80030fe:	4413      	add	r3, r2
 8003100:	781b      	ldrb	r3, [r3, #0]
 8003102:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003106:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800310a:	2b00      	cmp	r3, #0
 800310c:	da41      	bge.n	8003192 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 800310e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003112:	b29a      	uxth	r2, r3
 8003114:	88fb      	ldrh	r3, [r7, #6]
 8003116:	4413      	add	r3, r2
 8003118:	b29a      	uxth	r2, r3
 800311a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800311e:	b29b      	uxth	r3, r3
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	b29a      	uxth	r2, r3
 8003124:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 800312a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800312c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800312e:	1ad3      	subs	r3, r2, r3
 8003130:	b29a      	uxth	r2, r3
 8003132:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003136:	b29b      	uxth	r3, r3
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 800313c:	8afa      	ldrh	r2, [r7, #22]
 800313e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003142:	429a      	cmp	r2, r3
 8003144:	bf2c      	ite	cs
 8003146:	2301      	movcs	r3, #1
 8003148:	2300      	movcc	r3, #0
 800314a:	b2da      	uxtb	r2, r3
 800314c:	8af9      	ldrh	r1, [r7, #22]
 800314e:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8003152:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 8003156:	4403      	add	r3, r0
 8003158:	4299      	cmp	r1, r3
 800315a:	bfb4      	ite	lt
 800315c:	2301      	movlt	r3, #1
 800315e:	2300      	movge	r3, #0
 8003160:	b2db      	uxtb	r3, r3
 8003162:	4013      	ands	r3, r2
 8003164:	b2db      	uxtb	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d013      	beq.n	8003192 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 800316a:	8abb      	ldrh	r3, [r7, #20]
 800316c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003170:	d20f      	bcs.n	8003192 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 8003172:	8afa      	ldrh	r2, [r7, #22]
 8003174:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003178:	1ad2      	subs	r2, r2, r3
 800317a:	4613      	mov	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	4413      	add	r3, r2
 8003180:	019b      	lsls	r3, r3, #6
 8003182:	461a      	mov	r2, r3
 8003184:	8abb      	ldrh	r3, [r7, #20]
 8003186:	4413      	add	r3, r2
 8003188:	005b      	lsls	r3, r3, #1
 800318a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800318c:	4413      	add	r3, r2
 800318e:	89ba      	ldrh	r2, [r7, #12]
 8003190:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 8003192:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 800319c:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	3301      	adds	r3, #1
 80031a4:	b29b      	uxth	r3, r3
 80031a6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80031a8:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80031ac:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80031b0:	429a      	cmp	r2, r3
 80031b2:	db96      	blt.n	80030e2 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 80031b4:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80031c0:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80031c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	db87      	blt.n	80030dc <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 80031cc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80031d0:	b29b      	uxth	r3, r3
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3734      	adds	r7, #52	@ 0x34
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr

080031de <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80031de:	b590      	push	{r4, r7, lr}
 80031e0:	b08d      	sub	sp, #52	@ 0x34
 80031e2:	af06      	add	r7, sp, #24
 80031e4:	60f8      	str	r0, [r7, #12]
 80031e6:	60b9      	str	r1, [r7, #8]
 80031e8:	4611      	mov	r1, r2
 80031ea:	461a      	mov	r2, r3
 80031ec:	460b      	mov	r3, r1
 80031ee:	80fb      	strh	r3, [r7, #6]
 80031f0:	4613      	mov	r3, r2
 80031f2:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 80031f4:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d007      	beq.n	8003210 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003200:	1d38      	adds	r0, r7, #4
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	68fa      	ldr	r2, [r7, #12]
 8003206:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800320a:	f7ff fec8 	bl	8002f9e <getStringCenter>
 800320e:	e00c      	b.n	800322a <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003210:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b00      	cmp	r3, #0
 800321a:	d006      	beq.n	800322a <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 800321c:	1d38      	adds	r0, r7, #4
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003226:	f7ff feef 	bl	8003008 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 800322a:	2300      	movs	r3, #0
 800322c:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 8003232:	bf00      	nop
 8003234:	8abb      	ldrh	r3, [r7, #20]
 8003236:	3301      	adds	r3, #1
 8003238:	82bb      	strh	r3, [r7, #20]
 800323a:	8abb      	ldrh	r3, [r7, #20]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	4413      	add	r3, r2
 8003240:	781b      	ldrb	r3, [r3, #0]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d1f6      	bne.n	8003234 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 8003246:	8abb      	ldrh	r3, [r7, #20]
 8003248:	3b01      	subs	r3, #1
 800324a:	613b      	str	r3, [r7, #16]
 800324c:	e01f      	b.n	800328e <drawStringIntoFramebuffer+0xb0>
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	4413      	add	r3, r2
 8003254:	7818      	ldrb	r0, [r3, #0]
 8003256:	88ba      	ldrh	r2, [r7, #4]
 8003258:	8afb      	ldrh	r3, [r7, #22]
 800325a:	4413      	add	r3, r2
 800325c:	b29c      	uxth	r4, r3
 800325e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003260:	88f9      	ldrh	r1, [r7, #6]
 8003262:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003264:	9204      	str	r2, [sp, #16]
 8003266:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003268:	9203      	str	r2, [sp, #12]
 800326a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326c:	9202      	str	r2, [sp, #8]
 800326e:	2200      	movs	r2, #0
 8003270:	9201      	str	r2, [sp, #4]
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	4623      	mov	r3, r4
 8003276:	460a      	mov	r2, r1
 8003278:	68b9      	ldr	r1, [r7, #8]
 800327a:	f7ff fef8 	bl	800306e <drawCharIntoFramebuffer>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	8afb      	ldrh	r3, [r7, #22]
 8003284:	4413      	add	r3, r2
 8003286:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	3b01      	subs	r3, #1
 800328c:	613b      	str	r3, [r7, #16]
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	dadc      	bge.n	800324e <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	7b1b      	ldrb	r3, [r3, #12]
}
 8003298:	4618      	mov	r0, r3
 800329a:	371c      	adds	r7, #28
 800329c:	46bd      	mov	sp, r7
 800329e:	bd90      	pop	{r4, r7, pc}

080032a0 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80032a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032a4:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 80032ae:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 80032b2:	6030      	str	r0, [r6, #0]
 80032b4:	460e      	mov	r6, r1
 80032b6:	4610      	mov	r0, r2
 80032b8:	4619      	mov	r1, r3
 80032ba:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032be:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80032c2:	4632      	mov	r2, r6
 80032c4:	801a      	strh	r2, [r3, #0]
 80032c6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032ca:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80032ce:	4602      	mov	r2, r0
 80032d0:	801a      	strh	r2, [r3, #0]
 80032d2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032d6:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 80032da:	460a      	mov	r2, r1
 80032dc:	801a      	strh	r2, [r3, #0]
 80032de:	466b      	mov	r3, sp
 80032e0:	469a      	mov	sl, r3
	length = 400;
 80032e2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032e6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80032ea:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 80032ee:	801a      	strh	r2, [r3, #0]
	height = 215;
 80032f0:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032f4:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80032f8:	22d7      	movs	r2, #215	@ 0xd7
 80032fa:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 80032fc:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00f      	beq.n	8003328 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 8003308:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800330c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003310:	8819      	ldrh	r1, [r3, #0]
 8003312:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003316:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800331a:	881a      	ldrh	r2, [r3, #0]
 800331c:	1db8      	adds	r0, r7, #6
 800331e:	460b      	mov	r3, r1
 8003320:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8003324:	f7ff fe18 	bl	8002f58 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 8003328:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800332c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003330:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003334:	2201      	movs	r2, #1
 8003336:	6819      	ldr	r1, [r3, #0]
 8003338:	f00a fec0 	bl	800e0bc <f_open>
 800333c:	4603      	mov	r3, r0
 800333e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 8003342:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 8003346:	2b00      	cmp	r3, #0
 8003348:	d103      	bne.n	8003352 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 800334a:	487e      	ldr	r0, [pc, #504]	@ (8003544 <drawImageIntoFramebuffer+0x2a4>)
 800334c:	f7fe fff2 	bl	8002334 <USB_Println>
 8003350:	e007      	b.n	8003362 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 8003352:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003356:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 800335a:	6819      	ldr	r1, [r3, #0]
 800335c:	487a      	ldr	r0, [pc, #488]	@ (8003548 <drawImageIntoFramebuffer+0x2a8>)
 800335e:	f7fe ffe9 	bl	8002334 <USB_Println>
	}
	uint16_t readbuffer[height];
 8003362:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003366:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800336a:	881e      	ldrh	r6, [r3, #0]
 800336c:	4633      	mov	r3, r6
 800336e:	3b01      	subs	r3, #1
 8003370:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 8003374:	b2b3      	uxth	r3, r6
 8003376:	2200      	movs	r2, #0
 8003378:	4698      	mov	r8, r3
 800337a:	4691      	mov	r9, r2
 800337c:	f04f 0200 	mov.w	r2, #0
 8003380:	f04f 0300 	mov.w	r3, #0
 8003384:	ea4f 1309 	mov.w	r3, r9, lsl #4
 8003388:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 800338c:	ea4f 1208 	mov.w	r2, r8, lsl #4
 8003390:	b2b3      	uxth	r3, r6
 8003392:	2200      	movs	r2, #0
 8003394:	461c      	mov	r4, r3
 8003396:	4615      	mov	r5, r2
 8003398:	f04f 0200 	mov.w	r2, #0
 800339c:	f04f 0300 	mov.w	r3, #0
 80033a0:	012b      	lsls	r3, r5, #4
 80033a2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80033a6:	0122      	lsls	r2, r4, #4
 80033a8:	4633      	mov	r3, r6
 80033aa:	005b      	lsls	r3, r3, #1
 80033ac:	3307      	adds	r3, #7
 80033ae:	08db      	lsrs	r3, r3, #3
 80033b0:	00db      	lsls	r3, r3, #3
 80033b2:	ebad 0d03 	sub.w	sp, sp, r3
 80033b6:	466b      	mov	r3, sp
 80033b8:	3301      	adds	r3, #1
 80033ba:	085b      	lsrs	r3, r3, #1
 80033bc:	005b      	lsls	r3, r3, #1
 80033be:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 80033c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033c6:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 80033ca:	2200      	movs	r2, #0
 80033cc:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 80033ce:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033d2:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 80033d6:	881b      	ldrh	r3, [r3, #0]
 80033d8:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 80033dc:	e093      	b.n	8003506 <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 80033de:	4633      	mov	r3, r6
 80033e0:	005a      	lsls	r2, r3, #1
 80033e2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80033e6:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 80033ea:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 80033ee:	f00b f81f 	bl	800e430 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 80033f2:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80033f6:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80033fa:	429a      	cmp	r2, r3
 80033fc:	bfac      	ite	ge
 80033fe:	2301      	movge	r3, #1
 8003400:	2300      	movlt	r3, #0
 8003402:	b2da      	uxtb	r2, r3
 8003404:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 8003408:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 800340c:	440b      	add	r3, r1
 800340e:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8003412:	4299      	cmp	r1, r3
 8003414:	bfb4      	ite	lt
 8003416:	2301      	movlt	r3, #1
 8003418:	2300      	movge	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	4013      	ands	r3, r2
 800341e:	b2db      	uxtb	r3, r3
 8003420:	2b00      	cmp	r3, #0
 8003422:	d062      	beq.n	80034ea <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 8003424:	2300      	movs	r3, #0
 8003426:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800342a:	e055      	b.n	80034d8 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 800342c:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003430:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003434:	1ad2      	subs	r2, r2, r3
 8003436:	4613      	mov	r3, r2
 8003438:	009b      	lsls	r3, r3, #2
 800343a:	4413      	add	r3, r2
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	461a      	mov	r2, r3
 8003440:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003444:	4413      	add	r3, r2
 8003446:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800344a:	4413      	add	r3, r2
 800344c:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 8003450:	f107 0310 	add.w	r3, r7, #16
 8003454:	220a      	movs	r2, #10
 8003456:	4619      	mov	r1, r3
 8003458:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 800345c:	f00b ff79 	bl	800f352 <itoa>
				strncat(whatbuffer, "\n", 10);
 8003460:	f107 0310 	add.w	r3, r7, #16
 8003464:	4618      	mov	r0, r3
 8003466:	f7fc febb 	bl	80001e0 <strlen>
 800346a:	4603      	mov	r3, r0
 800346c:	461a      	mov	r2, r3
 800346e:	f107 0310 	add.w	r3, r7, #16
 8003472:	4413      	add	r3, r2
 8003474:	4935      	ldr	r1, [pc, #212]	@ (800354c <drawImageIntoFramebuffer+0x2ac>)
 8003476:	461a      	mov	r2, r3
 8003478:	460b      	mov	r3, r1
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 800347e:	f107 0310 	add.w	r3, r7, #16
 8003482:	4618      	mov	r0, r3
 8003484:	f7fc feac 	bl	80001e0 <strlen>
 8003488:	4603      	mov	r3, r0
 800348a:	b29a      	uxth	r2, r3
 800348c:	f107 0310 	add.w	r3, r7, #16
 8003490:	4611      	mov	r1, r2
 8003492:	4618      	mov	r0, r3
 8003494:	f00b face 	bl	800ea34 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 8003498:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800349c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80034a0:	1ad2      	subs	r2, r2, r3
 80034a2:	4613      	mov	r3, r2
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	4413      	add	r3, r2
 80034a8:	019b      	lsls	r3, r3, #6
 80034aa:	461a      	mov	r2, r3
 80034ac:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80034b0:	441a      	add	r2, r3
 80034b2:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80034b6:	4413      	add	r3, r2
 80034b8:	005b      	lsls	r3, r3, #1
 80034ba:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80034be:	4413      	add	r3, r2
 80034c0:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80034c4:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 80034c8:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80034cc:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 80034ce:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80034d2:	3301      	adds	r3, #1
 80034d4:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 80034d8:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80034dc:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80034e0:	881b      	ldrh	r3, [r3, #0]
 80034e2:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80034e6:	429a      	cmp	r2, r3
 80034e8:	dba0      	blt.n	800342c <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 80034ea:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 80034ee:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 80034f2:	4413      	add	r3, r2
 80034f4:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80034f8:	429a      	cmp	r2, r3
 80034fa:	dc16      	bgt.n	800352a <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 80034fc:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003500:	3301      	adds	r3, #1
 8003502:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003506:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800350a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800350e:	881b      	ldrh	r3, [r3, #0]
 8003510:	461a      	mov	r2, r3
 8003512:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003516:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800351a:	881b      	ldrh	r3, [r3, #0]
 800351c:	4413      	add	r3, r2
 800351e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003522:	429a      	cmp	r2, r3
 8003524:	f6ff af5b 	blt.w	80033de <drawImageIntoFramebuffer+0x13e>
 8003528:	e000      	b.n	800352c <drawImageIntoFramebuffer+0x28c>
			break;
 800352a:	bf00      	nop
		}
	}
	f_close(&newfile);
 800352c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003530:	4618      	mov	r0, r3
 8003532:	f00b f93a 	bl	800e7aa <f_close>
 8003536:	46d5      	mov	sp, sl
}
 8003538:	bf00      	nop
 800353a:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 800353e:	46bd      	mov	sp, r7
 8003540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003544:	0800fff4 	.word	0x0800fff4
 8003548:	08010010 	.word	0x08010010
 800354c:	08010024 	.word	0x08010024

08003550 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af04      	add	r7, sp, #16
 8003556:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 8003558:	220a      	movs	r2, #10
 800355a:	4914      	ldr	r1, [pc, #80]	@ (80035ac <setrpmdata+0x5c>)
 800355c:	4814      	ldr	r0, [pc, #80]	@ (80035b0 <setrpmdata+0x60>)
 800355e:	f00c f850 	bl	800f602 <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 8003562:	220a      	movs	r2, #10
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4812      	ldr	r0, [pc, #72]	@ (80035b0 <setrpmdata+0x60>)
 8003568:	f00c f838 	bl	800f5dc <strncat>
	strncat(rpmresult, "RPM", 10);
 800356c:	4810      	ldr	r0, [pc, #64]	@ (80035b0 <setrpmdata+0x60>)
 800356e:	f7fc fe37 	bl	80001e0 <strlen>
 8003572:	4603      	mov	r3, r0
 8003574:	461a      	mov	r2, r3
 8003576:	4b0e      	ldr	r3, [pc, #56]	@ (80035b0 <setrpmdata+0x60>)
 8003578:	4413      	add	r3, r2
 800357a:	4a0e      	ldr	r2, [pc, #56]	@ (80035b4 <setrpmdata+0x64>)
 800357c:	6810      	ldr	r0, [r2, #0]
 800357e:	6018      	str	r0, [r3, #0]
	((StringObject*)otherobjects[0])->updateString(rpmresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 420, 260, 1);
 8003580:	4b0d      	ldr	r3, [pc, #52]	@ (80035b8 <setrpmdata+0x68>)
 8003582:	6818      	ldr	r0, [r3, #0]
 8003584:	2301      	movs	r3, #1
 8003586:	9303      	str	r3, [sp, #12]
 8003588:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800358c:	9302      	str	r3, [sp, #8]
 800358e:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 8003592:	9301      	str	r3, [sp, #4]
 8003594:	4b09      	ldr	r3, [pc, #36]	@ (80035bc <setrpmdata+0x6c>)
 8003596:	9300      	str	r3, [sp, #0]
 8003598:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800359c:	2201      	movs	r2, #1
 800359e:	4904      	ldr	r1, [pc, #16]	@ (80035b0 <setrpmdata+0x60>)
 80035a0:	f7ff f9cc 	bl	800293c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80035a4:	bf00      	nop
 80035a6:	3708      	adds	r7, #8
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	08010034 	.word	0x08010034
 80035b0:	20000380 	.word	0x20000380
 80035b4:	08010038 	.word	0x08010038
 80035b8:	200003bc 	.word	0x200003bc
 80035bc:	08013370 	.word	0x08013370

080035c0 <settempdata>:

void settempdata(char *tempvalue) {
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b086      	sub	sp, #24
 80035c4:	af04      	add	r7, sp, #16
 80035c6:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 80035c8:	220a      	movs	r2, #10
 80035ca:	490f      	ldr	r1, [pc, #60]	@ (8003608 <settempdata+0x48>)
 80035cc:	480f      	ldr	r0, [pc, #60]	@ (800360c <settempdata+0x4c>)
 80035ce:	f00c f818 	bl	800f602 <strncpy>
	strncat(tempresult, tempvalue, 10);
 80035d2:	220a      	movs	r2, #10
 80035d4:	6879      	ldr	r1, [r7, #4]
 80035d6:	480d      	ldr	r0, [pc, #52]	@ (800360c <settempdata+0x4c>)
 80035d8:	f00c f800 	bl	800f5dc <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 80035dc:	4b0c      	ldr	r3, [pc, #48]	@ (8003610 <settempdata+0x50>)
 80035de:	6858      	ldr	r0, [r3, #4]
 80035e0:	2303      	movs	r3, #3
 80035e2:	9303      	str	r3, [sp, #12]
 80035e4:	2364      	movs	r3, #100	@ 0x64
 80035e6:	9302      	str	r3, [sp, #8]
 80035e8:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80035ec:	9301      	str	r3, [sp, #4]
 80035ee:	4b09      	ldr	r3, [pc, #36]	@ (8003614 <settempdata+0x54>)
 80035f0:	9300      	str	r3, [sp, #0]
 80035f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035f6:	2202      	movs	r2, #2
 80035f8:	4904      	ldr	r1, [pc, #16]	@ (800360c <settempdata+0x4c>)
 80035fa:	f7ff f99f 	bl	800293c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 80035fe:	bf00      	nop
 8003600:	3708      	adds	r7, #8
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	08010034 	.word	0x08010034
 800360c:	20000394 	.word	0x20000394
 8003610:	200003bc 	.word	0x200003bc
 8003614:	08011518 	.word	0x08011518

08003618 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b086      	sub	sp, #24
 800361c:	af04      	add	r7, sp, #16
 800361e:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003620:	220a      	movs	r2, #10
 8003622:	490e      	ldr	r1, [pc, #56]	@ (800365c <setgeardata+0x44>)
 8003624:	480e      	ldr	r0, [pc, #56]	@ (8003660 <setgeardata+0x48>)
 8003626:	f00b ffec 	bl	800f602 <strncpy>
	strncat(gearresult, gearvalue, 10);
 800362a:	220a      	movs	r2, #10
 800362c:	6879      	ldr	r1, [r7, #4]
 800362e:	480c      	ldr	r0, [pc, #48]	@ (8003660 <setgeardata+0x48>)
 8003630:	f00b ffd4 	bl	800f5dc <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 8003634:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <setgeardata+0x4c>)
 8003636:	68d8      	ldr	r0, [r3, #12]
 8003638:	2302      	movs	r3, #2
 800363a:	9303      	str	r3, [sp, #12]
 800363c:	23f0      	movs	r3, #240	@ 0xf0
 800363e:	9302      	str	r3, [sp, #8]
 8003640:	2364      	movs	r3, #100	@ 0x64
 8003642:	9301      	str	r3, [sp, #4]
 8003644:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <setgeardata+0x50>)
 8003646:	9300      	str	r3, [sp, #0]
 8003648:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800364c:	2202      	movs	r2, #2
 800364e:	4904      	ldr	r1, [pc, #16]	@ (8003660 <setgeardata+0x48>)
 8003650:	f7ff f974 	bl	800293c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003654:	bf00      	nop
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	08010034 	.word	0x08010034
 8003660:	20000008 	.word	0x20000008
 8003664:	200003bc 	.word	0x200003bc
 8003668:	0801777c 	.word	0x0801777c

0800366c <setbattdata>:

void setbattdata(char *battvalue) {
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af04      	add	r7, sp, #16
 8003672:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 8003674:	220a      	movs	r2, #10
 8003676:	490f      	ldr	r1, [pc, #60]	@ (80036b4 <setbattdata+0x48>)
 8003678:	480f      	ldr	r0, [pc, #60]	@ (80036b8 <setbattdata+0x4c>)
 800367a:	f00b ffc2 	bl	800f602 <strncpy>
	strncat(battresult, battvalue, 10);
 800367e:	220a      	movs	r2, #10
 8003680:	6879      	ldr	r1, [r7, #4]
 8003682:	480d      	ldr	r0, [pc, #52]	@ (80036b8 <setbattdata+0x4c>)
 8003684:	f00b ffaa 	bl	800f5dc <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 8003688:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <setbattdata+0x50>)
 800368a:	6898      	ldr	r0, [r3, #8]
 800368c:	2306      	movs	r3, #6
 800368e:	9303      	str	r3, [sp, #12]
 8003690:	233c      	movs	r3, #60	@ 0x3c
 8003692:	9302      	str	r3, [sp, #8]
 8003694:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003698:	9301      	str	r3, [sp, #4]
 800369a:	4b09      	ldr	r3, [pc, #36]	@ (80036c0 <setbattdata+0x54>)
 800369c:	9300      	str	r3, [sp, #0]
 800369e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036a2:	2202      	movs	r2, #2
 80036a4:	4904      	ldr	r1, [pc, #16]	@ (80036b8 <setbattdata+0x4c>)
 80036a6:	f7ff f949 	bl	800293c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80036aa:	bf00      	nop
 80036ac:	3708      	adds	r7, #8
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	08010034 	.word	0x08010034
 80036b8:	200003a8 	.word	0x200003a8
 80036bc:	200003bc 	.word	0x200003bc
 80036c0:	08011518 	.word	0x08011518

080036c4 <domainscreen>:

void domainscreen() {
 80036c4:	b580      	push	{r7, lr}
 80036c6:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 80036c8:	4804      	ldr	r0, [pc, #16]	@ (80036dc <domainscreen+0x18>)
 80036ca:	f7fe fec9 	bl	8002460 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 6);
 80036ce:	2206      	movs	r2, #6
 80036d0:	4903      	ldr	r1, [pc, #12]	@ (80036e0 <domainscreen+0x1c>)
 80036d2:	4802      	ldr	r0, [pc, #8]	@ (80036dc <domainscreen+0x18>)
 80036d4:	f7fe fe90 	bl	80023f8 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80036d8:	bf00      	nop
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	200003d4 	.word	0x200003d4
 80036e0:	200003bc 	.word	0x200003bc

080036e4 <_Z41__static_initialization_and_destruction_0ii>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 80036e4:	b590      	push	{r4, r7, lr}
 80036e6:	b087      	sub	sp, #28
 80036e8:	af04      	add	r7, sp, #16
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	f040 80b1 	bne.w	8003858 <_Z41__static_initialization_and_destruction_0ii+0x174>
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80036fc:	4293      	cmp	r3, r2
 80036fe:	f040 80ab 	bne.w	8003858 <_Z41__static_initialization_and_destruction_0ii+0x174>
		new StringObject(420, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, LEFTDRAW_OBJECT, rpmresult, 1),
 8003702:	2018      	movs	r0, #24
 8003704:	f00b fdea 	bl	800f2dc <_Znwj>
 8003708:	4603      	mov	r3, r0
 800370a:	461c      	mov	r4, r3
 800370c:	2301      	movs	r3, #1
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	4b53      	ldr	r3, [pc, #332]	@ (8003860 <_Z41__static_initialization_and_destruction_0ii+0x17c>)
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	2301      	movs	r3, #1
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	4b52      	ldr	r3, [pc, #328]	@ (8003864 <_Z41__static_initialization_and_destruction_0ii+0x180>)
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003720:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003724:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003728:	4620      	mov	r0, r4
 800372a:	f7ff f895 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800372e:	4b4e      	ldr	r3, [pc, #312]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8003730:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003732:	2018      	movs	r0, #24
 8003734:	f00b fdd2 	bl	800f2dc <_Znwj>
 8003738:	4603      	mov	r3, r0
 800373a:	461c      	mov	r4, r3
 800373c:	2303      	movs	r3, #3
 800373e:	9303      	str	r3, [sp, #12]
 8003740:	4b4a      	ldr	r3, [pc, #296]	@ (800386c <_Z41__static_initialization_and_destruction_0ii+0x188>)
 8003742:	9302      	str	r3, [sp, #8]
 8003744:	2302      	movs	r3, #2
 8003746:	9301      	str	r3, [sp, #4]
 8003748:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 800374a:	9300      	str	r3, [sp, #0]
 800374c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003750:	2264      	movs	r2, #100	@ 0x64
 8003752:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003756:	4620      	mov	r0, r4
 8003758:	f7ff f87e 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800375c:	4b42      	ldr	r3, [pc, #264]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800375e:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003760:	2018      	movs	r0, #24
 8003762:	f00b fdbb 	bl	800f2dc <_Znwj>
 8003766:	4603      	mov	r3, r0
 8003768:	461c      	mov	r4, r3
 800376a:	2306      	movs	r3, #6
 800376c:	9303      	str	r3, [sp, #12]
 800376e:	4b41      	ldr	r3, [pc, #260]	@ (8003874 <_Z41__static_initialization_and_destruction_0ii+0x190>)
 8003770:	9302      	str	r3, [sp, #8]
 8003772:	2302      	movs	r3, #2
 8003774:	9301      	str	r3, [sp, #4]
 8003776:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <_Z41__static_initialization_and_destruction_0ii+0x18c>)
 8003778:	9300      	str	r3, [sp, #0]
 800377a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800377e:	223c      	movs	r2, #60	@ 0x3c
 8003780:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003784:	4620      	mov	r0, r4
 8003786:	f7ff f867 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800378a:	4b37      	ldr	r3, [pc, #220]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800378c:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 800378e:	2018      	movs	r0, #24
 8003790:	f00b fda4 	bl	800f2dc <_Znwj>
 8003794:	4603      	mov	r3, r0
 8003796:	461c      	mov	r4, r3
 8003798:	2302      	movs	r3, #2
 800379a:	9303      	str	r3, [sp, #12]
 800379c:	4b36      	ldr	r3, [pc, #216]	@ (8003878 <_Z41__static_initialization_and_destruction_0ii+0x194>)
 800379e:	9302      	str	r3, [sp, #8]
 80037a0:	2302      	movs	r3, #2
 80037a2:	9301      	str	r3, [sp, #4]
 80037a4:	4b35      	ldr	r3, [pc, #212]	@ (800387c <_Z41__static_initialization_and_destruction_0ii+0x198>)
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037ac:	22f0      	movs	r2, #240	@ 0xf0
 80037ae:	2164      	movs	r1, #100	@ 0x64
 80037b0:	4620      	mov	r0, r4
 80037b2:	f7ff f851 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80037b6:	4b2c      	ldr	r3, [pc, #176]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80037b8:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 80037ba:	2018      	movs	r0, #24
 80037bc:	f00b fd8e 	bl	800f2dc <_Znwj>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461c      	mov	r4, r3
 80037c4:	2304      	movs	r3, #4
 80037c6:	9303      	str	r3, [sp, #12]
 80037c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003880 <_Z41__static_initialization_and_destruction_0ii+0x19c>)
 80037ca:	9302      	str	r3, [sp, #8]
 80037cc:	2302      	movs	r3, #2
 80037ce:	9301      	str	r3, [sp, #4]
 80037d0:	4b2c      	ldr	r3, [pc, #176]	@ (8003884 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 80037d2:	9300      	str	r3, [sp, #0]
 80037d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037d8:	2282      	movs	r2, #130	@ 0x82
 80037da:	f240 118b 	movw	r1, #395	@ 0x18b
 80037de:	4620      	mov	r0, r4
 80037e0:	f7ff f83a 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80037e4:	4b20      	ldr	r3, [pc, #128]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 80037e6:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5)
 80037e8:	2018      	movs	r0, #24
 80037ea:	f00b fd77 	bl	800f2dc <_Znwj>
 80037ee:	4603      	mov	r3, r0
 80037f0:	461c      	mov	r4, r3
 80037f2:	2305      	movs	r3, #5
 80037f4:	9303      	str	r3, [sp, #12]
 80037f6:	4b24      	ldr	r3, [pc, #144]	@ (8003888 <_Z41__static_initialization_and_destruction_0ii+0x1a4>)
 80037f8:	9302      	str	r3, [sp, #8]
 80037fa:	2302      	movs	r3, #2
 80037fc:	9301      	str	r3, [sp, #4]
 80037fe:	4b21      	ldr	r3, [pc, #132]	@ (8003884 <_Z41__static_initialization_and_destruction_0ii+0x1a0>)
 8003800:	9300      	str	r3, [sp, #0]
 8003802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003806:	225a      	movs	r2, #90	@ 0x5a
 8003808:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800380c:	4620      	mov	r0, r4
 800380e:	f7ff f823 	bl	8002858 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003812:	4b15      	ldr	r3, [pc, #84]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 8003814:	615c      	str	r4, [r3, #20]
Scene myScene2(otherobjects, 5);
 8003816:	2205      	movs	r2, #5
 8003818:	4913      	ldr	r1, [pc, #76]	@ (8003868 <_Z41__static_initialization_and_destruction_0ii+0x184>)
 800381a:	481c      	ldr	r0, [pc, #112]	@ (800388c <_Z41__static_initialization_and_destruction_0ii+0x1a8>)
 800381c:	f7fe fdda 	bl	80023d4 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003820:	2014      	movs	r0, #20
 8003822:	f00b fd5b 	bl	800f2dc <_Znwj>
 8003826:	4603      	mov	r3, r0
 8003828:	461c      	mov	r4, r3
 800382a:	4b19      	ldr	r3, [pc, #100]	@ (8003890 <_Z41__static_initialization_and_destruction_0ii+0x1ac>)
 800382c:	6819      	ldr	r1, [r3, #0]
 800382e:	2302      	movs	r3, #2
 8003830:	9303      	str	r3, [sp, #12]
 8003832:	2302      	movs	r3, #2
 8003834:	9302      	str	r3, [sp, #8]
 8003836:	23a0      	movs	r3, #160	@ 0xa0
 8003838:	9301      	str	r3, [sp, #4]
 800383a:	23f0      	movs	r3, #240	@ 0xf0
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	23d7      	movs	r3, #215	@ 0xd7
 8003840:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003844:	4620      	mov	r0, r4
 8003846:	f7ff f8ab 	bl	80029a0 <_ZN11ImageObjectC1EPctttthh>
};
 800384a:	4b12      	ldr	r3, [pc, #72]	@ (8003894 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 800384c:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 800384e:	2201      	movs	r2, #1
 8003850:	4910      	ldr	r1, [pc, #64]	@ (8003894 <_Z41__static_initialization_and_destruction_0ii+0x1b0>)
 8003852:	4811      	ldr	r0, [pc, #68]	@ (8003898 <_Z41__static_initialization_and_destruction_0ii+0x1b4>)
 8003854:	f7fe fdbe 	bl	80023d4 <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003858:	bf00      	nop
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	bd90      	pop	{r4, r7, pc}
 8003860:	20000380 	.word	0x20000380
 8003864:	08013370 	.word	0x08013370
 8003868:	200003bc 	.word	0x200003bc
 800386c:	20000394 	.word	0x20000394
 8003870:	08011518 	.word	0x08011518
 8003874:	200003a8 	.word	0x200003a8
 8003878:	20000008 	.word	0x20000008
 800387c:	0801777c 	.word	0x0801777c
 8003880:	2000001c 	.word	0x2000001c
 8003884:	08017964 	.word	0x08017964
 8003888:	20000020 	.word	0x20000020
 800388c:	200003d4 	.word	0x200003d4
 8003890:	20000024 	.word	0x20000024
 8003894:	200003dc 	.word	0x200003dc
 8003898:	200003e0 	.word	0x200003e0

0800389c <_GLOBAL__sub_I_epd_bitmap_allArray>:
 800389c:	b580      	push	{r7, lr}
 800389e:	af00      	add	r7, sp, #0
 80038a0:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80038a4:	2001      	movs	r0, #1
 80038a6:	f7ff ff1d 	bl	80036e4 <_Z41__static_initialization_and_destruction_0ii>
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b084      	sub	sp, #16
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	60f8      	str	r0, [r7, #12]
 80038b4:	60b9      	str	r1, [r7, #8]
 80038b6:	607a      	str	r2, [r7, #4]
 80038b8:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	683a      	ldr	r2, [r7, #0]
 80038be:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	7e3a      	ldrb	r2, [r7, #24]
 80038c4:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	68ba      	ldr	r2, [r7, #8]
 80038ca:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	605a      	str	r2, [r3, #4]
    endSPI();
 80038d2:	68f8      	ldr	r0, [r7, #12]
 80038d4:	f000 f839 	bl	800394a <_ZN7MCP25156endSPIEv>
}
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4618      	mov	r0, r3
 80038dc:	3710      	adds	r7, #16
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b082      	sub	sp, #8
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	1cf9      	adds	r1, r7, #3
 80038f8:	2201      	movs	r2, #1
 80038fa:	f003 fb70 	bl	8006fde <HAL_SPI_Transmit>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003906:	b580      	push	{r7, lr}
 8003908:	b084      	sub	sp, #16
 800390a:	af00      	add	r7, sp, #0
 800390c:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6818      	ldr	r0, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f107 010f 	add.w	r1, r7, #15
 800391a:	2201      	movs	r2, #1
 800391c:	f003 fca3 	bl	8007266 <HAL_SPI_Receive>
	return retVal;
 8003920:	7bfb      	ldrb	r3, [r7, #15]
}
 8003922:	4618      	mov	r0, r3
 8003924:	3710      	adds	r7, #16
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}

0800392a <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 800392a:	b580      	push	{r7, lr}
 800392c:	b082      	sub	sp, #8
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6898      	ldr	r0, [r3, #8]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	7b1b      	ldrb	r3, [r3, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	4619      	mov	r1, r3
 800393e:	f001 fc11 	bl	8005164 <HAL_GPIO_WritePin>
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 800394a:	b580      	push	{r7, lr}
 800394c:	b082      	sub	sp, #8
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6898      	ldr	r0, [r3, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	7b1b      	ldrb	r3, [r3, #12]
 800395a:	2201      	movs	r2, #1
 800395c:	4619      	mov	r1, r3
 800395e:	f001 fc01 	bl	8005164 <HAL_GPIO_WritePin>
}
 8003962:	bf00      	nop
 8003964:	3708      	adds	r7, #8
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b08c      	sub	sp, #48	@ 0x30
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
	startSPI();
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ffd8 	bl	800392a <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 800397a:	21c0      	movs	r1, #192	@ 0xc0
 800397c:	6878      	ldr	r0, [r7, #4]
 800397e:	f7ff ffb0 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003982:	6878      	ldr	r0, [r7, #4]
 8003984:	f7ff ffe1 	bl	800394a <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003988:	f107 0314 	add.w	r3, r7, #20
 800398c:	220e      	movs	r2, #14
 800398e:	2100      	movs	r1, #0
 8003990:	4618      	mov	r0, r3
 8003992:	f00b fe1b 	bl	800f5cc <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003996:	f107 0214 	add.w	r2, r7, #20
 800399a:	230e      	movs	r3, #14
 800399c:	2130      	movs	r1, #48	@ 0x30
 800399e:	6878      	ldr	r0, [r7, #4]
 80039a0:	f000 f8ec 	bl	8003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 80039a4:	f107 0214 	add.w	r2, r7, #20
 80039a8:	230e      	movs	r3, #14
 80039aa:	2140      	movs	r1, #64	@ 0x40
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 f8e5 	bl	8003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 80039b2:	f107 0214 	add.w	r2, r7, #20
 80039b6:	230e      	movs	r3, #14
 80039b8:	2150      	movs	r1, #80	@ 0x50
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f000 f8de 	bl	8003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 80039c0:	2200      	movs	r2, #0
 80039c2:	2160      	movs	r1, #96	@ 0x60
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8b9 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 80039ca:	2200      	movs	r2, #0
 80039cc:	2170      	movs	r1, #112	@ 0x70
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 f8b4 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 80039d4:	22a3      	movs	r2, #163	@ 0xa3
 80039d6:	212b      	movs	r1, #43	@ 0x2b
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f8af 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 80039de:	2304      	movs	r3, #4
 80039e0:	2267      	movs	r2, #103	@ 0x67
 80039e2:	2160      	movs	r1, #96	@ 0x60
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f8f8 	bl	8003bda <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 80039ea:	2301      	movs	r3, #1
 80039ec:	2267      	movs	r2, #103	@ 0x67
 80039ee:	2170      	movs	r1, #112	@ 0x70
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8f2 	bl	8003bda <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 80039f6:	4a29      	ldr	r2, [pc, #164]	@ (8003a9c <_ZN7MCP25155resetEv+0x130>)
 80039f8:	f107 030c 	add.w	r3, r7, #12
 80039fc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a00:	6018      	str	r0, [r3, #0]
 8003a02:	3304      	adds	r3, #4
 8003a04:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003a06:	2300      	movs	r3, #0
 8003a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a0a:	e01e      	b.n	8003a4a <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003a0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a0e:	2b01      	cmp	r3, #1
 8003a10:	bf0c      	ite	eq
 8003a12:	2301      	moveq	r3, #1
 8003a14:	2300      	movne	r3, #0
 8003a16:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003a1a:	f107 020c 	add.w	r2, r7, #12
 8003a1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a20:	4413      	add	r3, r2
 8003a22:	7819      	ldrb	r1, [r3, #0]
 8003a24:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003a28:	2300      	movs	r3, #0
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f000 fbcc 	bl	80041c8 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003a30:	4603      	mov	r3, r0
 8003a32:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003a36:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d002      	beq.n	8003a44 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003a3e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a42:	e027      	b.n	8003a94 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a46:	3301      	adds	r3, #1
 8003a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a4c:	2b05      	cmp	r3, #5
 8003a4e:	dddd      	ble.n	8003a0c <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003a50:	2300      	movs	r3, #0
 8003a52:	723b      	strb	r3, [r7, #8]
 8003a54:	2301      	movs	r3, #1
 8003a56:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a5c:	e016      	b.n	8003a8c <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003a5e:	f107 0208 	add.w	r2, r7, #8
 8003a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a64:	4413      	add	r3, r2
 8003a66:	7819      	ldrb	r1, [r3, #0]
 8003a68:	2300      	movs	r3, #0
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fb77 	bl	8004160 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003a80:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a84:	e006      	b.n	8003a94 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a88:	3301      	adds	r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	dde5      	ble.n	8003a5e <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003a92:	2300      	movs	r3, #0
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	3730      	adds	r7, #48	@ 0x30
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd80      	pop	{r7, pc}
 8003a9c:	0801003c 	.word	0x0801003c

08003aa0 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b084      	sub	sp, #16
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
 8003aa8:	460b      	mov	r3, r1
 8003aaa:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff ff3c 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003ab2:	2103      	movs	r1, #3
 8003ab4:	6878      	ldr	r0, [r7, #4]
 8003ab6:	f7ff ff14 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	4619      	mov	r1, r3
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f7ff ff0f 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff1e 	bl	8003906 <_ZN7MCP25156SPI_RxEv>
 8003aca:	4603      	mov	r3, r0
 8003acc:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7ff ff3b 	bl	800394a <_ZN7MCP25156endSPIEv>

    return ret;
 8003ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}

08003ade <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003ade:	b590      	push	{r4, r7, lr}
 8003ae0:	b087      	sub	sp, #28
 8003ae2:	af00      	add	r7, sp, #0
 8003ae4:	60f8      	str	r0, [r7, #12]
 8003ae6:	607a      	str	r2, [r7, #4]
 8003ae8:	461a      	mov	r2, r3
 8003aea:	460b      	mov	r3, r1
 8003aec:	72fb      	strb	r3, [r7, #11]
 8003aee:	4613      	mov	r3, r2
 8003af0:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff19 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003af8:	2103      	movs	r1, #3
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f7ff fef1 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b00:	7afb      	ldrb	r3, [r7, #11]
 8003b02:	4619      	mov	r1, r3
 8003b04:	68f8      	ldr	r0, [r7, #12]
 8003b06:	f7ff feec 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	75fb      	strb	r3, [r7, #23]
 8003b0e:	e00a      	b.n	8003b26 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003b10:	7dfb      	ldrb	r3, [r7, #23]
 8003b12:	687a      	ldr	r2, [r7, #4]
 8003b14:	18d4      	adds	r4, r2, r3
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7ff fef5 	bl	8003906 <_ZN7MCP25156SPI_RxEv>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003b20:	7dfb      	ldrb	r3, [r7, #23]
 8003b22:	3301      	adds	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	7dfa      	ldrb	r2, [r7, #23]
 8003b28:	7abb      	ldrb	r3, [r7, #10]
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d3f0      	bcc.n	8003b10 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff ff0b 	bl	800394a <_ZN7MCP25156endSPIEv>
}
 8003b34:	bf00      	nop
 8003b36:	371c      	adds	r7, #28
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	bd90      	pop	{r4, r7, pc}

08003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	460b      	mov	r3, r1
 8003b46:	70fb      	strb	r3, [r7, #3]
 8003b48:	4613      	mov	r3, r2
 8003b4a:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003b4c:	6878      	ldr	r0, [r7, #4]
 8003b4e:	f7ff feec 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003b52:	2102      	movs	r1, #2
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f7ff fec4 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b5a:	78fb      	ldrb	r3, [r7, #3]
 8003b5c:	4619      	mov	r1, r3
 8003b5e:	6878      	ldr	r0, [r7, #4]
 8003b60:	f7ff febf 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003b64:	78bb      	ldrb	r3, [r7, #2]
 8003b66:	4619      	mov	r1, r3
 8003b68:	6878      	ldr	r0, [r7, #4]
 8003b6a:	f7ff feba 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f7ff feeb 	bl	800394a <_ZN7MCP25156endSPIEv>
}
 8003b74:	bf00      	nop
 8003b76:	3708      	adds	r7, #8
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	60f8      	str	r0, [r7, #12]
 8003b84:	607a      	str	r2, [r7, #4]
 8003b86:	461a      	mov	r2, r3
 8003b88:	460b      	mov	r3, r1
 8003b8a:	72fb      	strb	r3, [r7, #11]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f7ff feca 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003b96:	2102      	movs	r1, #2
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7ff fea2 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b9e:	7afb      	ldrb	r3, [r7, #11]
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	68f8      	ldr	r0, [r7, #12]
 8003ba4:	f7ff fe9d 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	75fb      	strb	r3, [r7, #23]
 8003bac:	e00a      	b.n	8003bc4 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003bae:	7dfb      	ldrb	r3, [r7, #23]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	68f8      	ldr	r0, [r7, #12]
 8003bba:	f7ff fe92 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003bbe:	7dfb      	ldrb	r3, [r7, #23]
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	75fb      	strb	r3, [r7, #23]
 8003bc4:	7dfa      	ldrb	r2, [r7, #23]
 8003bc6:	7abb      	ldrb	r3, [r7, #10]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d3f0      	bcc.n	8003bae <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f7ff febc 	bl	800394a <_ZN7MCP25156endSPIEv>
}
 8003bd2:	bf00      	nop
 8003bd4:	3718      	adds	r7, #24
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003bda:	b580      	push	{r7, lr}
 8003bdc:	b082      	sub	sp, #8
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
 8003be2:	4608      	mov	r0, r1
 8003be4:	4611      	mov	r1, r2
 8003be6:	461a      	mov	r2, r3
 8003be8:	4603      	mov	r3, r0
 8003bea:	70fb      	strb	r3, [r7, #3]
 8003bec:	460b      	mov	r3, r1
 8003bee:	70bb      	strb	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f7ff fe98 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003bfa:	2105      	movs	r1, #5
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff fe70 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003c02:	78fb      	ldrb	r3, [r7, #3]
 8003c04:	4619      	mov	r1, r3
 8003c06:	6878      	ldr	r0, [r7, #4]
 8003c08:	f7ff fe6b 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003c0c:	78bb      	ldrb	r3, [r7, #2]
 8003c0e:	4619      	mov	r1, r3
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f7ff fe66 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003c16:	787b      	ldrb	r3, [r7, #1]
 8003c18:	4619      	mov	r1, r3
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff fe61 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f7ff fe92 	bl	800394a <_ZN7MCP25156endSPIEv>
}
 8003c26:	bf00      	nop
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}

08003c2e <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003c2e:	b580      	push	{r7, lr}
 8003c30:	b084      	sub	sp, #16
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	6078      	str	r0, [r7, #4]
    startSPI();
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe77 	bl	800392a <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003c3c:	21a0      	movs	r1, #160	@ 0xa0
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7ff fe4f 	bl	80038e2 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f7ff fe5e 	bl	8003906 <_ZN7MCP25156SPI_RxEv>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fe7b 	bl	800394a <_ZN7MCP25156endSPIEv>

    return i;
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3710      	adds	r7, #16
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}

08003c5e <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003c5e:	b580      	push	{r7, lr}
 8003c60:	b082      	sub	sp, #8
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8003c66:	2180      	movs	r1, #128	@ 0x80
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 f812 	bl	8003c92 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8003c80:	2100      	movs	r1, #0
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f805 	bl	8003c92 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003c88:	4603      	mov	r3, r0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}

08003c92 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8003c92:	b580      	push	{r7, lr}
 8003c94:	b086      	sub	sp, #24
 8003c96:	af00      	add	r7, sp, #0
 8003c98:	6078      	str	r0, [r7, #4]
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8003c9e:	78fb      	ldrb	r3, [r7, #3]
 8003ca0:	22e0      	movs	r2, #224	@ 0xe0
 8003ca2:	210f      	movs	r1, #15
 8003ca4:	6878      	ldr	r0, [r7, #4]
 8003ca6:	f7ff ff98 	bl	8003bda <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8003caa:	f000 fc03 	bl	80044b4 <HAL_GetTick>
 8003cae:	4603      	mov	r3, r0
 8003cb0:	330a      	adds	r3, #10
 8003cb2:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8003cb8:	e013      	b.n	8003ce2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8003cba:	210e      	movs	r1, #14
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff feef 	bl	8003aa0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8003cc6:	7bfb      	ldrb	r3, [r7, #15]
 8003cc8:	f023 031f 	bic.w	r3, r3, #31
 8003ccc:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8003cce:	7bfa      	ldrb	r2, [r7, #15]
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	429a      	cmp	r2, r3
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d10b      	bne.n	8003cfa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8003ce2:	f000 fbe7 	bl	80044b4 <HAL_GetTick>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	4293      	cmp	r3, r2
 8003cec:	bf8c      	ite	hi
 8003cee:	2301      	movhi	r3, #1
 8003cf0:	2300      	movls	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d1e0      	bne.n	8003cba <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8003cf8:	e000      	b.n	8003cfc <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8003cfa:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8003cfc:	7dfb      	ldrb	r3, [r7, #23]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d001      	beq.n	8003d06 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8003d02:	2300      	movs	r3, #0
 8003d04:	e000      	b.n	8003d08 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8003d06:	2301      	movs	r3, #1

}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b084      	sub	sp, #16
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	460b      	mov	r3, r1
 8003d1a:	70fb      	strb	r3, [r7, #3]
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff9c 	bl	8003c5e <_ZN7MCP251513setConfigModeEv>
 8003d26:	4603      	mov	r3, r0
 8003d28:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8003d2a:	7afb      	ldrb	r3, [r7, #11]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d001      	beq.n	8003d34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8003d30:	7afb      	ldrb	r3, [r7, #11]
 8003d32:	e1b5      	b.n	80040a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8003d34:	2301      	movs	r3, #1
 8003d36:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8003d38:	78bb      	ldrb	r3, [r7, #2]
 8003d3a:	2b02      	cmp	r3, #2
 8003d3c:	d009      	beq.n	8003d52 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8003d3e:	2b02      	cmp	r3, #2
 8003d40:	f300 8193 	bgt.w	800406a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 811f 	beq.w	8003f88 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	f000 808e 	beq.w	8003e6c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8003d50:	e18b      	b.n	800406a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	2b0f      	cmp	r3, #15
 8003d56:	f200 8085 	bhi.w	8003e64 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8003d5a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d60 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8003d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d60:	08003da1 	.word	0x08003da1
 8003d64:	08003daf 	.word	0x08003daf
 8003d68:	08003dbd 	.word	0x08003dbd
 8003d6c:	08003dcb 	.word	0x08003dcb
 8003d70:	08003dd9 	.word	0x08003dd9
 8003d74:	08003de7 	.word	0x08003de7
 8003d78:	08003df5 	.word	0x08003df5
 8003d7c:	08003e03 	.word	0x08003e03
 8003d80:	08003e65 	.word	0x08003e65
 8003d84:	08003e65 	.word	0x08003e65
 8003d88:	08003e11 	.word	0x08003e11
 8003d8c:	08003e1f 	.word	0x08003e1f
 8003d90:	08003e2d 	.word	0x08003e2d
 8003d94:	08003e3b 	.word	0x08003e3b
 8003d98:	08003e49 	.word	0x08003e49
 8003d9c:	08003e57 	.word	0x08003e57
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8003da0:	231f      	movs	r3, #31
 8003da2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8003da4:	23bf      	movs	r3, #191	@ 0xbf
 8003da6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8003da8:	2387      	movs	r3, #135	@ 0x87
 8003daa:	733b      	strb	r3, [r7, #12]
            break;
 8003dac:	e05d      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8003dae:	230f      	movs	r3, #15
 8003db0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8003db2:	23bf      	movs	r3, #191	@ 0xbf
 8003db4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8003db6:	2387      	movs	r3, #135	@ 0x87
 8003db8:	733b      	strb	r3, [r7, #12]
            break;
 8003dba:	e056      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8003dbc:	2307      	movs	r3, #7
 8003dbe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8003dc0:	23bf      	movs	r3, #191	@ 0xbf
 8003dc2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8003dc4:	2387      	movs	r3, #135	@ 0x87
 8003dc6:	733b      	strb	r3, [r7, #12]
            break;
 8003dc8:	e04f      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8003dca:	2307      	movs	r3, #7
 8003dcc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8003dce:	23a4      	movs	r3, #164	@ 0xa4
 8003dd0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8003dd2:	2384      	movs	r3, #132	@ 0x84
 8003dd4:	733b      	strb	r3, [r7, #12]
            break;
 8003dd6:	e048      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8003dd8:	2347      	movs	r3, #71	@ 0x47
 8003dda:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8003ddc:	23e2      	movs	r3, #226	@ 0xe2
 8003dde:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8003de0:	2385      	movs	r3, #133	@ 0x85
 8003de2:	733b      	strb	r3, [r7, #12]
            break;
 8003de4:	e041      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8003de6:	2303      	movs	r3, #3
 8003de8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8003dea:	23bf      	movs	r3, #191	@ 0xbf
 8003dec:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8003dee:	2387      	movs	r3, #135	@ 0x87
 8003df0:	733b      	strb	r3, [r7, #12]
            break;
 8003df2:	e03a      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8003df4:	2303      	movs	r3, #3
 8003df6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8003df8:	23b4      	movs	r3, #180	@ 0xb4
 8003dfa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8003dfc:	2386      	movs	r3, #134	@ 0x86
 8003dfe:	733b      	strb	r3, [r7, #12]
            break;
 8003e00:	e033      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8003e02:	2301      	movs	r3, #1
 8003e04:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8003e06:	23bf      	movs	r3, #191	@ 0xbf
 8003e08:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8003e0a:	2387      	movs	r3, #135	@ 0x87
 8003e0c:	733b      	strb	r3, [r7, #12]
            break;
 8003e0e:	e02c      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8003e10:	2301      	movs	r3, #1
 8003e12:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8003e14:	23b4      	movs	r3, #180	@ 0xb4
 8003e16:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8003e18:	2386      	movs	r3, #134	@ 0x86
 8003e1a:	733b      	strb	r3, [r7, #12]
            break;
 8003e1c:	e025      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8003e22:	23b1      	movs	r3, #177	@ 0xb1
 8003e24:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8003e26:	2385      	movs	r3, #133	@ 0x85
 8003e28:	733b      	strb	r3, [r7, #12]
            break;
 8003e2a:	e01e      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8003e30:	23b4      	movs	r3, #180	@ 0xb4
 8003e32:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8003e34:	2386      	movs	r3, #134	@ 0x86
 8003e36:	733b      	strb	r3, [r7, #12]
            break;
 8003e38:	e017      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8003e3e:	23b1      	movs	r3, #177	@ 0xb1
 8003e40:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8003e42:	2385      	movs	r3, #133	@ 0x85
 8003e44:	733b      	strb	r3, [r7, #12]
            break;
 8003e46:	e010      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8003e48:	2300      	movs	r3, #0
 8003e4a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8003e4c:	2390      	movs	r3, #144	@ 0x90
 8003e4e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8003e50:	2382      	movs	r3, #130	@ 0x82
 8003e52:	733b      	strb	r3, [r7, #12]
            break;
 8003e54:	e009      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8003e56:	2300      	movs	r3, #0
 8003e58:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8003e5a:	2380      	movs	r3, #128	@ 0x80
 8003e5c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8003e5e:	2380      	movs	r3, #128	@ 0x80
 8003e60:	733b      	strb	r3, [r7, #12]
            break;
 8003e62:	e002      	b.n	8003e6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8003e64:	2300      	movs	r3, #0
 8003e66:	73fb      	strb	r3, [r7, #15]
            break;
 8003e68:	bf00      	nop
        }
        break;
 8003e6a:	e101      	b.n	8004070 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8003e6c:	78fb      	ldrb	r3, [r7, #3]
 8003e6e:	2b0f      	cmp	r3, #15
 8003e70:	f200 8086 	bhi.w	8003f80 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8003e74:	a201      	add	r2, pc, #4	@ (adr r2, 8003e7c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8003e76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7a:	bf00      	nop
 8003e7c:	08003ebd 	.word	0x08003ebd
 8003e80:	08003ecb 	.word	0x08003ecb
 8003e84:	08003ed9 	.word	0x08003ed9
 8003e88:	08003f81 	.word	0x08003f81
 8003e8c:	08003ee7 	.word	0x08003ee7
 8003e90:	08003ef5 	.word	0x08003ef5
 8003e94:	08003f03 	.word	0x08003f03
 8003e98:	08003f11 	.word	0x08003f11
 8003e9c:	08003f1f 	.word	0x08003f1f
 8003ea0:	08003f81 	.word	0x08003f81
 8003ea4:	08003f2d 	.word	0x08003f2d
 8003ea8:	08003f3b 	.word	0x08003f3b
 8003eac:	08003f49 	.word	0x08003f49
 8003eb0:	08003f57 	.word	0x08003f57
 8003eb4:	08003f65 	.word	0x08003f65
 8003eb8:	08003f73 	.word	0x08003f73
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8003ebc:	233f      	movs	r3, #63	@ 0x3f
 8003ebe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8003ec0:	23ff      	movs	r3, #255	@ 0xff
 8003ec2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8003ec4:	2387      	movs	r3, #135	@ 0x87
 8003ec6:	733b      	strb	r3, [r7, #12]
            break;
 8003ec8:	e05d      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8003eca:	231f      	movs	r3, #31
 8003ecc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8003ece:	23ff      	movs	r3, #255	@ 0xff
 8003ed0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8003ed2:	2387      	movs	r3, #135	@ 0x87
 8003ed4:	733b      	strb	r3, [r7, #12]
            break;
 8003ed6:	e056      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8003ed8:	230f      	movs	r3, #15
 8003eda:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8003edc:	23ff      	movs	r3, #255	@ 0xff
 8003ede:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8003ee0:	2387      	movs	r3, #135	@ 0x87
 8003ee2:	733b      	strb	r3, [r7, #12]
            break;
 8003ee4:	e04f      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8003ee6:	234e      	movs	r3, #78	@ 0x4e
 8003ee8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8003eea:	23f1      	movs	r3, #241	@ 0xf1
 8003eec:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8003eee:	2385      	movs	r3, #133	@ 0x85
 8003ef0:	733b      	strb	r3, [r7, #12]
            break;
 8003ef2:	e048      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8003ef4:	2307      	movs	r3, #7
 8003ef6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8003ef8:	23ff      	movs	r3, #255	@ 0xff
 8003efa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8003efc:	2387      	movs	r3, #135	@ 0x87
 8003efe:	733b      	strb	r3, [r7, #12]
            break;
 8003f00:	e041      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8003f02:	2307      	movs	r3, #7
 8003f04:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8003f06:	23fa      	movs	r3, #250	@ 0xfa
 8003f08:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8003f0a:	2387      	movs	r3, #135	@ 0x87
 8003f0c:	733b      	strb	r3, [r7, #12]
            break;
 8003f0e:	e03a      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8003f10:	2303      	movs	r3, #3
 8003f12:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8003f14:	23ff      	movs	r3, #255	@ 0xff
 8003f16:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8003f18:	2387      	movs	r3, #135	@ 0x87
 8003f1a:	733b      	strb	r3, [r7, #12]
            break;
 8003f1c:	e033      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8003f1e:	2303      	movs	r3, #3
 8003f20:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8003f22:	23be      	movs	r3, #190	@ 0xbe
 8003f24:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8003f26:	2307      	movs	r3, #7
 8003f28:	733b      	strb	r3, [r7, #12]
            break;
 8003f2a:	e02c      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8003f2c:	2303      	movs	r3, #3
 8003f2e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8003f30:	23fa      	movs	r3, #250	@ 0xfa
 8003f32:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8003f34:	2387      	movs	r3, #135	@ 0x87
 8003f36:	733b      	strb	r3, [r7, #12]
            break;
 8003f38:	e025      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8003f3e:	23f0      	movs	r3, #240	@ 0xf0
 8003f40:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8003f42:	2386      	movs	r3, #134	@ 0x86
 8003f44:	733b      	strb	r3, [r7, #12]
            break;
 8003f46:	e01e      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8003f4c:	23fa      	movs	r3, #250	@ 0xfa
 8003f4e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8003f50:	2387      	movs	r3, #135	@ 0x87
 8003f52:	733b      	strb	r3, [r7, #12]
            break;
 8003f54:	e017      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8003f56:	2341      	movs	r3, #65	@ 0x41
 8003f58:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8003f5a:	23f1      	movs	r3, #241	@ 0xf1
 8003f5c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8003f5e:	2385      	movs	r3, #133	@ 0x85
 8003f60:	733b      	strb	r3, [r7, #12]
            break;
 8003f62:	e010      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8003f64:	2300      	movs	r3, #0
 8003f66:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8003f68:	23f0      	movs	r3, #240	@ 0xf0
 8003f6a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8003f6c:	2386      	movs	r3, #134	@ 0x86
 8003f6e:	733b      	strb	r3, [r7, #12]
            break;
 8003f70:	e009      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8003f72:	2300      	movs	r3, #0
 8003f74:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8003f76:	23d0      	movs	r3, #208	@ 0xd0
 8003f78:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8003f7a:	2382      	movs	r3, #130	@ 0x82
 8003f7c:	733b      	strb	r3, [r7, #12]
            break;
 8003f7e:	e002      	b.n	8003f86 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8003f80:	2300      	movs	r3, #0
 8003f82:	73fb      	strb	r3, [r7, #15]
            break;
 8003f84:	bf00      	nop
        }
        break;
 8003f86:	e073      	b.n	8004070 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8003f88:	78fb      	ldrb	r3, [r7, #3]
 8003f8a:	3b04      	subs	r3, #4
 8003f8c:	2b0b      	cmp	r3, #11
 8003f8e:	d868      	bhi.n	8004062 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8003f90:	a201      	add	r2, pc, #4	@ (adr r2, 8003f98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8003f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f96:	bf00      	nop
 8003f98:	08003fc9 	.word	0x08003fc9
 8003f9c:	08003fd7 	.word	0x08003fd7
 8003fa0:	08003fe5 	.word	0x08003fe5
 8003fa4:	08003ff3 	.word	0x08003ff3
 8003fa8:	08004001 	.word	0x08004001
 8003fac:	08004063 	.word	0x08004063
 8003fb0:	0800400f 	.word	0x0800400f
 8003fb4:	0800401d 	.word	0x0800401d
 8003fb8:	0800402b 	.word	0x0800402b
 8003fbc:	08004039 	.word	0x08004039
 8003fc0:	08004047 	.word	0x08004047
 8003fc4:	08004055 	.word	0x08004055
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8003fc8:	230b      	movs	r3, #11
 8003fca:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8003fcc:	23ff      	movs	r3, #255	@ 0xff
 8003fce:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8003fd0:	2387      	movs	r3, #135	@ 0x87
 8003fd2:	733b      	strb	r3, [r7, #12]
	    break;
 8003fd4:	e048      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8003fd6:	2309      	movs	r3, #9
 8003fd8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8003fda:	23ff      	movs	r3, #255	@ 0xff
 8003fdc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8003fde:	2387      	movs	r3, #135	@ 0x87
 8003fe0:	733b      	strb	r3, [r7, #12]
            break;
 8003fe2:	e041      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8003fe4:	2309      	movs	r3, #9
 8003fe6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8003fe8:	23fa      	movs	r3, #250	@ 0xfa
 8003fea:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8003fec:	2387      	movs	r3, #135	@ 0x87
 8003fee:	733b      	strb	r3, [r7, #12]
            break;
 8003ff0:	e03a      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8003ff2:	2304      	movs	r3, #4
 8003ff4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8003ff6:	23ff      	movs	r3, #255	@ 0xff
 8003ff8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8003ffa:	2387      	movs	r3, #135	@ 0x87
 8003ffc:	733b      	strb	r3, [r7, #12]
            break;
 8003ffe:	e033      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004000:	2304      	movs	r3, #4
 8004002:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004004:	23fe      	movs	r3, #254	@ 0xfe
 8004006:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8004008:	2387      	movs	r3, #135	@ 0x87
 800400a:	733b      	strb	r3, [r7, #12]
	    break;
 800400c:	e02c      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 800400e:	2304      	movs	r3, #4
 8004010:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8004012:	23fa      	movs	r3, #250	@ 0xfa
 8004014:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8004016:	2387      	movs	r3, #135	@ 0x87
 8004018:	733b      	strb	r3, [r7, #12]
            break;
 800401a:	e025      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 800401c:	2303      	movs	r3, #3
 800401e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8004020:	23fa      	movs	r3, #250	@ 0xfa
 8004022:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8004024:	2387      	movs	r3, #135	@ 0x87
 8004026:	733b      	strb	r3, [r7, #12]
            break;
 8004028:	e01e      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 800402a:	2301      	movs	r3, #1
 800402c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 800402e:	23ff      	movs	r3, #255	@ 0xff
 8004030:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8004032:	2387      	movs	r3, #135	@ 0x87
 8004034:	733b      	strb	r3, [r7, #12]
            break;
 8004036:	e017      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8004038:	2341      	movs	r3, #65	@ 0x41
 800403a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 800403c:	23fb      	movs	r3, #251	@ 0xfb
 800403e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8004040:	2386      	movs	r3, #134	@ 0x86
 8004042:	733b      	strb	r3, [r7, #12]
            break;
 8004044:	e010      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8004046:	2300      	movs	r3, #0
 8004048:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 800404a:	23fa      	movs	r3, #250	@ 0xfa
 800404c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 800404e:	2387      	movs	r3, #135	@ 0x87
 8004050:	733b      	strb	r3, [r7, #12]
            break;
 8004052:	e009      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8004054:	2300      	movs	r3, #0
 8004056:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8004058:	23d9      	movs	r3, #217	@ 0xd9
 800405a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 800405c:	2382      	movs	r3, #130	@ 0x82
 800405e:	733b      	strb	r3, [r7, #12]
            break;
 8004060:	e002      	b.n	8004068 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004062:	2300      	movs	r3, #0
 8004064:	73fb      	strb	r3, [r7, #15]
            break;
 8004066:	bf00      	nop
        }
        break;
 8004068:	e002      	b.n	8004070 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800406a:	2300      	movs	r3, #0
 800406c:	73fb      	strb	r3, [r7, #15]
        break;
 800406e:	bf00      	nop
    }

    if (set) {
 8004070:	7bfb      	ldrb	r3, [r7, #15]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d013      	beq.n	800409e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8004076:	7bbb      	ldrb	r3, [r7, #14]
 8004078:	461a      	mov	r2, r3
 800407a:	212a      	movs	r1, #42	@ 0x2a
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7ff fd5d 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8004082:	7b7b      	ldrb	r3, [r7, #13]
 8004084:	461a      	mov	r2, r3
 8004086:	2129      	movs	r1, #41	@ 0x29
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f7ff fd57 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 800408e:	7b3b      	ldrb	r3, [r7, #12]
 8004090:	461a      	mov	r2, r3
 8004092:	2128      	movs	r1, #40	@ 0x28
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fd51 	bl	8003b3c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 800409a:	2300      	movs	r3, #0
 800409c:	e000      	b.n	80040a0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 800409e:	2301      	movs	r3, #1
    }
}
 80040a0:	4618      	mov	r0, r3
 80040a2:	3710      	adds	r7, #16
 80040a4:	46bd      	mov	sp, r7
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 80040bc:	79fb      	ldrb	r3, [r7, #7]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d034      	beq.n	800412c <_ZN7MCP25159prepareIdEPhbm+0x84>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80040c2:	68bb      	ldr	r3, [r7, #8]
 80040c4:	3303      	adds	r3, #3
 80040c6:	8afa      	ldrh	r2, [r7, #22]
 80040c8:	b2d2      	uxtb	r2, r2
 80040ca:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 80040cc:	8afb      	ldrh	r3, [r7, #22]
 80040ce:	0a1b      	lsrs	r3, r3, #8
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	68bb      	ldr	r3, [r7, #8]
 80040d4:	3302      	adds	r3, #2
 80040d6:	b2d2      	uxtb	r2, r2
 80040d8:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	0c1b      	lsrs	r3, r3, #16
 80040de:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 80040e0:	8afb      	ldrh	r3, [r7, #22]
 80040e2:	b2da      	uxtb	r2, r3
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	3301      	adds	r3, #1
 80040e8:	f002 0203 	and.w	r2, r2, #3
 80040ec:	b2d2      	uxtb	r2, r2
 80040ee:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	3301      	adds	r3, #1
 80040f4:	7819      	ldrb	r1, [r3, #0]
 80040f6:	8afb      	ldrh	r3, [r7, #22]
 80040f8:	00db      	lsls	r3, r3, #3
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	f023 031f 	bic.w	r3, r3, #31
 8004100:	b2da      	uxtb	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3301      	adds	r3, #1
 8004106:	440a      	add	r2, r1
 8004108:	b2d2      	uxtb	r2, r2
 800410a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	3301      	adds	r3, #1
 8004110:	781a      	ldrb	r2, [r3, #0]
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	3301      	adds	r3, #1
 8004116:	f042 0208 	orr.w	r2, r2, #8
 800411a:	b2d2      	uxtb	r2, r2
 800411c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 800411e:	8afb      	ldrh	r3, [r7, #22]
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	b29b      	uxth	r3, r3
 8004124:	b2da      	uxtb	r2, r3
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800412a:	e013      	b.n	8004154 <_ZN7MCP25159prepareIdEPhbm+0xac>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 800412c:	8afb      	ldrh	r3, [r7, #22]
 800412e:	08db      	lsrs	r3, r3, #3
 8004130:	b29b      	uxth	r3, r3
 8004132:	b2da      	uxtb	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	3301      	adds	r3, #1
 8004140:	b2d2      	uxtb	r2, r2
 8004142:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	3303      	adds	r3, #3
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	3302      	adds	r3, #2
 8004150:	2200      	movs	r2, #0
 8004152:	701a      	strb	r2, [r3, #0]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	b086      	sub	sp, #24
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	607b      	str	r3, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	72fb      	strb	r3, [r7, #11]
 800416e:	4613      	mov	r3, r2
 8004170:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f7ff fd73 	bl	8003c5e <_ZN7MCP251513setConfigModeEv>
 8004178:	4603      	mov	r3, r0
 800417a:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 800417c:	7dbb      	ldrb	r3, [r7, #22]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8004182:	7dbb      	ldrb	r3, [r7, #22]
 8004184:	e01c      	b.n	80041c0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004186:	7aba      	ldrb	r2, [r7, #10]
 8004188:	f107 0110 	add.w	r1, r7, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff ff8a 	bl	80040a8 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8004194:	7afb      	ldrb	r3, [r7, #11]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 800419a:	2b01      	cmp	r3, #1
 800419c:	d003      	beq.n	80041a6 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 800419e:	e005      	b.n	80041ac <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80041a0:	2320      	movs	r3, #32
 80041a2:	75fb      	strb	r3, [r7, #23]
 80041a4:	e004      	b.n	80041b0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80041a6:	2324      	movs	r3, #36	@ 0x24
 80041a8:	75fb      	strb	r3, [r7, #23]
 80041aa:	e001      	b.n	80041b0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80041ac:	2301      	movs	r3, #1
 80041ae:	e007      	b.n	80041c0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80041b0:	f107 0210 	add.w	r2, r7, #16
 80041b4:	7df9      	ldrb	r1, [r7, #23]
 80041b6:	2304      	movs	r3, #4
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fcdf 	bl	8003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80041be:	2300      	movs	r3, #0
}
 80041c0:	4618      	mov	r0, r3
 80041c2:	3718      	adds	r7, #24
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b086      	sub	sp, #24
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	607b      	str	r3, [r7, #4]
 80041d2:	460b      	mov	r3, r1
 80041d4:	72fb      	strb	r3, [r7, #11]
 80041d6:	4613      	mov	r3, r2
 80041d8:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f7ff fd3f 	bl	8003c5e <_ZN7MCP251513setConfigModeEv>
 80041e0:	4603      	mov	r3, r0
 80041e2:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80041e4:	7dbb      	ldrb	r3, [r7, #22]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 80041ea:	7dbb      	ldrb	r3, [r7, #22]
 80041ec:	e035      	b.n	800425a <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 80041ee:	7afb      	ldrb	r3, [r7, #11]
 80041f0:	2b05      	cmp	r3, #5
 80041f2:	d821      	bhi.n	8004238 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 80041f4:	a201      	add	r2, pc, #4	@ (adr r2, 80041fc <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 80041f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041fa:	bf00      	nop
 80041fc:	08004215 	.word	0x08004215
 8004200:	0800421b 	.word	0x0800421b
 8004204:	08004221 	.word	0x08004221
 8004208:	08004227 	.word	0x08004227
 800420c:	0800422d 	.word	0x0800422d
 8004210:	08004233 	.word	0x08004233
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004214:	2300      	movs	r3, #0
 8004216:	75fb      	strb	r3, [r7, #23]
 8004218:	e010      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800421a:	2304      	movs	r3, #4
 800421c:	75fb      	strb	r3, [r7, #23]
 800421e:	e00d      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8004220:	2308      	movs	r3, #8
 8004222:	75fb      	strb	r3, [r7, #23]
 8004224:	e00a      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8004226:	2310      	movs	r3, #16
 8004228:	75fb      	strb	r3, [r7, #23]
 800422a:	e007      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 800422c:	2314      	movs	r3, #20
 800422e:	75fb      	strb	r3, [r7, #23]
 8004230:	e004      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8004232:	2318      	movs	r3, #24
 8004234:	75fb      	strb	r3, [r7, #23]
 8004236:	e001      	b.n	800423c <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8004238:	2301      	movs	r3, #1
 800423a:	e00e      	b.n	800425a <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800423c:	7aba      	ldrb	r2, [r7, #10]
 800423e:	f107 0110 	add.w	r1, r7, #16
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f7ff ff2f 	bl	80040a8 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 800424a:	f107 0210 	add.w	r2, r7, #16
 800424e:	7df9      	ldrb	r1, [r7, #23]
 8004250:	2304      	movs	r3, #4
 8004252:	68f8      	ldr	r0, [r7, #12]
 8004254:	f7ff fc92 	bl	8003b7c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004258:	2300      	movs	r3, #0
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}
 8004262:	bf00      	nop

08004264 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b088      	sub	sp, #32
 8004268:	af00      	add	r7, sp, #0
 800426a:	60f8      	str	r0, [r7, #12]
 800426c:	460b      	mov	r3, r1
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 8004272:	7afb      	ldrb	r3, [r7, #11]
 8004274:	009b      	lsls	r3, r3, #2
 8004276:	4a30      	ldr	r2, [pc, #192]	@ (8004338 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 8004278:	4413      	add	r3, r2
 800427a:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 800427c:	69bb      	ldr	r3, [r7, #24]
 800427e:	7859      	ldrb	r1, [r3, #1]
 8004280:	f107 0210 	add.w	r2, r7, #16
 8004284:	2305      	movs	r3, #5
 8004286:	68f8      	ldr	r0, [r7, #12]
 8004288:	f7ff fc29 	bl	8003ade <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 800428c:	7c3b      	ldrb	r3, [r7, #16]
 800428e:	00db      	lsls	r3, r3, #3
 8004290:	7c7a      	ldrb	r2, [r7, #17]
 8004292:	0952      	lsrs	r2, r2, #5
 8004294:	b2d2      	uxtb	r2, r2
 8004296:	4413      	add	r3, r2
 8004298:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 800429a:	7c7b      	ldrb	r3, [r7, #17]
 800429c:	f003 0308 	and.w	r3, r3, #8
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d014      	beq.n	80042ce <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	009a      	lsls	r2, r3, #2
 80042a8:	7c7b      	ldrb	r3, [r7, #17]
 80042aa:	f003 0303 	and.w	r3, r3, #3
 80042ae:	4413      	add	r3, r2
 80042b0:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	021b      	lsls	r3, r3, #8
 80042b6:	7cba      	ldrb	r2, [r7, #18]
 80042b8:	4413      	add	r3, r2
 80042ba:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	021b      	lsls	r3, r3, #8
 80042c0:	7cfa      	ldrb	r2, [r7, #19]
 80042c2:	4413      	add	r3, r2
 80042c4:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80042c6:	69fb      	ldr	r3, [r7, #28]
 80042c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042cc:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 80042ce:	7d3b      	ldrb	r3, [r7, #20]
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 80042d6:	7dfb      	ldrb	r3, [r7, #23]
 80042d8:	2b08      	cmp	r3, #8
 80042da:	d901      	bls.n	80042e0 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80042dc:	2301      	movs	r3, #1
 80042de:	e027      	b.n	8004330 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4619      	mov	r1, r3
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fbda 	bl	8003aa0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80042ec:	4603      	mov	r3, r0
 80042ee:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 80042f0:	7dbb      	ldrb	r3, [r7, #22]
 80042f2:	f003 0308 	and.w	r3, r3, #8
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d003      	beq.n	8004302 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004300:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	69fa      	ldr	r2, [r7, #28]
 8004306:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	7dfa      	ldrb	r2, [r7, #23]
 800430c:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 800430e:	69bb      	ldr	r3, [r7, #24]
 8004310:	7899      	ldrb	r1, [r3, #2]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	f103 0208 	add.w	r2, r3, #8
 8004318:	7dfb      	ldrb	r3, [r7, #23]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fbdf 	bl	8003ade <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004320:	69bb      	ldr	r3, [r7, #24]
 8004322:	78da      	ldrb	r2, [r3, #3]
 8004324:	2300      	movs	r3, #0
 8004326:	212c      	movs	r1, #44	@ 0x2c
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f7ff fc56 	bl	8003bda <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3720      	adds	r7, #32
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	08017974 	.word	0x08017974

0800433c <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b084      	sub	sp, #16
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7ff fc71 	bl	8003c2e <_ZN7MCP25159getStatusEv>
 800434c:	4603      	mov	r3, r0
 800434e:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004350:	7bbb      	ldrb	r3, [r7, #14]
 8004352:	f003 0301 	and.w	r3, r3, #1
 8004356:	2b00      	cmp	r3, #0
 8004358:	d007      	beq.n	800436a <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	2100      	movs	r1, #0
 800435e:	6878      	ldr	r0, [r7, #4]
 8004360:	f7ff ff80 	bl	8004264 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004364:	4603      	mov	r3, r0
 8004366:	73fb      	strb	r3, [r7, #15]
 8004368:	e00e      	b.n	8004388 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800436a:	7bbb      	ldrb	r3, [r7, #14]
 800436c:	f003 0302 	and.w	r3, r3, #2
 8004370:	2b00      	cmp	r3, #0
 8004372:	d007      	beq.n	8004384 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8004374:	683a      	ldr	r2, [r7, #0]
 8004376:	2101      	movs	r1, #1
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff73 	bl	8004264 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 800437e:	4603      	mov	r3, r0
 8004380:	73fb      	strb	r3, [r7, #15]
 8004382:	e001      	b.n	8004388 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8004384:	2305      	movs	r3, #5
 8004386:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8004388:	7bfb      	ldrb	r3, [r7, #15]
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004394:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043cc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004398:	f7fd feb6 	bl	8002108 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800439c:	480c      	ldr	r0, [pc, #48]	@ (80043d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800439e:	490d      	ldr	r1, [pc, #52]	@ (80043d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043a0:	4a0d      	ldr	r2, [pc, #52]	@ (80043d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043a4:	e002      	b.n	80043ac <LoopCopyDataInit>

080043a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043aa:	3304      	adds	r3, #4

080043ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043b0:	d3f9      	bcc.n	80043a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043b2:	4a0a      	ldr	r2, [pc, #40]	@ (80043dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043b4:	4c0a      	ldr	r4, [pc, #40]	@ (80043e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80043b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043b8:	e001      	b.n	80043be <LoopFillZerobss>

080043ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043bc:	3204      	adds	r2, #4

080043be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043c0:	d3fb      	bcc.n	80043ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043c2:	f00b f98b 	bl	800f6dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043c6:	f7fc fee1 	bl	800118c <main>
  bx  lr    
 80043ca:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043cc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80043d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043d4:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80043d8:	08017a74 	.word	0x08017a74
  ldr r2, =_sbss
 80043dc:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80043e0:	20001958 	.word	0x20001958

080043e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043e4:	e7fe      	b.n	80043e4 <ADC_IRQHandler>
	...

080043e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043ec:	4b0e      	ldr	r3, [pc, #56]	@ (8004428 <HAL_Init+0x40>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a0d      	ldr	r2, [pc, #52]	@ (8004428 <HAL_Init+0x40>)
 80043f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80043f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043f8:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <HAL_Init+0x40>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a0a      	ldr	r2, [pc, #40]	@ (8004428 <HAL_Init+0x40>)
 80043fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004402:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004404:	4b08      	ldr	r3, [pc, #32]	@ (8004428 <HAL_Init+0x40>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a07      	ldr	r2, [pc, #28]	@ (8004428 <HAL_Init+0x40>)
 800440a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800440e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004410:	2003      	movs	r0, #3
 8004412:	f000 f94f 	bl	80046b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004416:	200f      	movs	r0, #15
 8004418:	f000 f808 	bl	800442c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800441c:	f7fd fd54 	bl	8001ec8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004420:	2300      	movs	r3, #0
}
 8004422:	4618      	mov	r0, r3
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40023c00 	.word	0x40023c00

0800442c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b082      	sub	sp, #8
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004434:	4b12      	ldr	r3, [pc, #72]	@ (8004480 <HAL_InitTick+0x54>)
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b12      	ldr	r3, [pc, #72]	@ (8004484 <HAL_InitTick+0x58>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4619      	mov	r1, r3
 800443e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004442:	fbb3 f3f1 	udiv	r3, r3, r1
 8004446:	fbb2 f3f3 	udiv	r3, r2, r3
 800444a:	4618      	mov	r0, r3
 800444c:	f000 f967 	bl	800471e <HAL_SYSTICK_Config>
 8004450:	4603      	mov	r3, r0
 8004452:	2b00      	cmp	r3, #0
 8004454:	d001      	beq.n	800445a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e00e      	b.n	8004478 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2b0f      	cmp	r3, #15
 800445e:	d80a      	bhi.n	8004476 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004460:	2200      	movs	r2, #0
 8004462:	6879      	ldr	r1, [r7, #4]
 8004464:	f04f 30ff 	mov.w	r0, #4294967295
 8004468:	f000 f92f 	bl	80046ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800446c:	4a06      	ldr	r2, [pc, #24]	@ (8004488 <HAL_InitTick+0x5c>)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
 8004474:	e000      	b.n	8004478 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004476:	2301      	movs	r3, #1
}
 8004478:	4618      	mov	r0, r3
 800447a:	3708      	adds	r7, #8
 800447c:	46bd      	mov	sp, r7
 800447e:	bd80      	pop	{r7, pc}
 8004480:	20000004 	.word	0x20000004
 8004484:	2000002c 	.word	0x2000002c
 8004488:	20000028 	.word	0x20000028

0800448c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004490:	4b06      	ldr	r3, [pc, #24]	@ (80044ac <HAL_IncTick+0x20>)
 8004492:	781b      	ldrb	r3, [r3, #0]
 8004494:	461a      	mov	r2, r3
 8004496:	4b06      	ldr	r3, [pc, #24]	@ (80044b0 <HAL_IncTick+0x24>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4413      	add	r3, r2
 800449c:	4a04      	ldr	r2, [pc, #16]	@ (80044b0 <HAL_IncTick+0x24>)
 800449e:	6013      	str	r3, [r2, #0]
}
 80044a0:	bf00      	nop
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	2000002c 	.word	0x2000002c
 80044b0:	200003e8 	.word	0x200003e8

080044b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044b4:	b480      	push	{r7}
 80044b6:	af00      	add	r7, sp, #0
  return uwTick;
 80044b8:	4b03      	ldr	r3, [pc, #12]	@ (80044c8 <HAL_GetTick+0x14>)
 80044ba:	681b      	ldr	r3, [r3, #0]
}
 80044bc:	4618      	mov	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	200003e8 	.word	0x200003e8

080044cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044d4:	f7ff ffee 	bl	80044b4 <HAL_GetTick>
 80044d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044e4:	d005      	beq.n	80044f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004510 <HAL_Delay+0x44>)
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	461a      	mov	r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	4413      	add	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044f2:	bf00      	nop
 80044f4:	f7ff ffde 	bl	80044b4 <HAL_GetTick>
 80044f8:	4602      	mov	r2, r0
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	1ad3      	subs	r3, r2, r3
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	429a      	cmp	r2, r3
 8004502:	d8f7      	bhi.n	80044f4 <HAL_Delay+0x28>
  {
  }
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop
 8004508:	3710      	adds	r7, #16
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	2000002c 	.word	0x2000002c

08004514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004514:	b480      	push	{r7}
 8004516:	b085      	sub	sp, #20
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f003 0307 	and.w	r3, r3, #7
 8004522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004524:	4b0c      	ldr	r3, [pc, #48]	@ (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004530:	4013      	ands	r3, r2
 8004532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800453c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004546:	4a04      	ldr	r2, [pc, #16]	@ (8004558 <__NVIC_SetPriorityGrouping+0x44>)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	60d3      	str	r3, [r2, #12]
}
 800454c:	bf00      	nop
 800454e:	3714      	adds	r7, #20
 8004550:	46bd      	mov	sp, r7
 8004552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004556:	4770      	bx	lr
 8004558:	e000ed00 	.word	0xe000ed00

0800455c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800455c:	b480      	push	{r7}
 800455e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004560:	4b04      	ldr	r3, [pc, #16]	@ (8004574 <__NVIC_GetPriorityGrouping+0x18>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	0a1b      	lsrs	r3, r3, #8
 8004566:	f003 0307 	and.w	r3, r3, #7
}
 800456a:	4618      	mov	r0, r3
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	4603      	mov	r3, r0
 8004580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004586:	2b00      	cmp	r3, #0
 8004588:	db0b      	blt.n	80045a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800458a:	79fb      	ldrb	r3, [r7, #7]
 800458c:	f003 021f 	and.w	r2, r3, #31
 8004590:	4907      	ldr	r1, [pc, #28]	@ (80045b0 <__NVIC_EnableIRQ+0x38>)
 8004592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004596:	095b      	lsrs	r3, r3, #5
 8004598:	2001      	movs	r0, #1
 800459a:	fa00 f202 	lsl.w	r2, r0, r2
 800459e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045a2:	bf00      	nop
 80045a4:	370c      	adds	r7, #12
 80045a6:	46bd      	mov	sp, r7
 80045a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ac:	4770      	bx	lr
 80045ae:	bf00      	nop
 80045b0:	e000e100 	.word	0xe000e100

080045b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	4603      	mov	r3, r0
 80045bc:	6039      	str	r1, [r7, #0]
 80045be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	db0a      	blt.n	80045de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	b2da      	uxtb	r2, r3
 80045cc:	490c      	ldr	r1, [pc, #48]	@ (8004600 <__NVIC_SetPriority+0x4c>)
 80045ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045d2:	0112      	lsls	r2, r2, #4
 80045d4:	b2d2      	uxtb	r2, r2
 80045d6:	440b      	add	r3, r1
 80045d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045dc:	e00a      	b.n	80045f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	b2da      	uxtb	r2, r3
 80045e2:	4908      	ldr	r1, [pc, #32]	@ (8004604 <__NVIC_SetPriority+0x50>)
 80045e4:	79fb      	ldrb	r3, [r7, #7]
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	3b04      	subs	r3, #4
 80045ec:	0112      	lsls	r2, r2, #4
 80045ee:	b2d2      	uxtb	r2, r2
 80045f0:	440b      	add	r3, r1
 80045f2:	761a      	strb	r2, [r3, #24]
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr
 8004600:	e000e100 	.word	0xe000e100
 8004604:	e000ed00 	.word	0xe000ed00

08004608 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004608:	b480      	push	{r7}
 800460a:	b089      	sub	sp, #36	@ 0x24
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	60b9      	str	r1, [r7, #8]
 8004612:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f003 0307 	and.w	r3, r3, #7
 800461a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	f1c3 0307 	rsb	r3, r3, #7
 8004622:	2b04      	cmp	r3, #4
 8004624:	bf28      	it	cs
 8004626:	2304      	movcs	r3, #4
 8004628:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	3304      	adds	r3, #4
 800462e:	2b06      	cmp	r3, #6
 8004630:	d902      	bls.n	8004638 <NVIC_EncodePriority+0x30>
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	3b03      	subs	r3, #3
 8004636:	e000      	b.n	800463a <NVIC_EncodePriority+0x32>
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800463c:	f04f 32ff 	mov.w	r2, #4294967295
 8004640:	69bb      	ldr	r3, [r7, #24]
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43da      	mvns	r2, r3
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	401a      	ands	r2, r3
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004650:	f04f 31ff 	mov.w	r1, #4294967295
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	fa01 f303 	lsl.w	r3, r1, r3
 800465a:	43d9      	mvns	r1, r3
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004660:	4313      	orrs	r3, r2
         );
}
 8004662:	4618      	mov	r0, r3
 8004664:	3724      	adds	r7, #36	@ 0x24
 8004666:	46bd      	mov	sp, r7
 8004668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466c:	4770      	bx	lr
	...

08004670 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	3b01      	subs	r3, #1
 800467c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004680:	d301      	bcc.n	8004686 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004682:	2301      	movs	r3, #1
 8004684:	e00f      	b.n	80046a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004686:	4a0a      	ldr	r2, [pc, #40]	@ (80046b0 <SysTick_Config+0x40>)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	3b01      	subs	r3, #1
 800468c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800468e:	210f      	movs	r1, #15
 8004690:	f04f 30ff 	mov.w	r0, #4294967295
 8004694:	f7ff ff8e 	bl	80045b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004698:	4b05      	ldr	r3, [pc, #20]	@ (80046b0 <SysTick_Config+0x40>)
 800469a:	2200      	movs	r2, #0
 800469c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800469e:	4b04      	ldr	r3, [pc, #16]	@ (80046b0 <SysTick_Config+0x40>)
 80046a0:	2207      	movs	r2, #7
 80046a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a4:	2300      	movs	r3, #0
}
 80046a6:	4618      	mov	r0, r3
 80046a8:	3708      	adds	r7, #8
 80046aa:	46bd      	mov	sp, r7
 80046ac:	bd80      	pop	{r7, pc}
 80046ae:	bf00      	nop
 80046b0:	e000e010 	.word	0xe000e010

080046b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b082      	sub	sp, #8
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff29 	bl	8004514 <__NVIC_SetPriorityGrouping>
}
 80046c2:	bf00      	nop
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ca:	b580      	push	{r7, lr}
 80046cc:	b086      	sub	sp, #24
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	4603      	mov	r3, r0
 80046d2:	60b9      	str	r1, [r7, #8]
 80046d4:	607a      	str	r2, [r7, #4]
 80046d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046dc:	f7ff ff3e 	bl	800455c <__NVIC_GetPriorityGrouping>
 80046e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	68b9      	ldr	r1, [r7, #8]
 80046e6:	6978      	ldr	r0, [r7, #20]
 80046e8:	f7ff ff8e 	bl	8004608 <NVIC_EncodePriority>
 80046ec:	4602      	mov	r2, r0
 80046ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f2:	4611      	mov	r1, r2
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7ff ff5d 	bl	80045b4 <__NVIC_SetPriority>
}
 80046fa:	bf00      	nop
 80046fc:	3718      	adds	r7, #24
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}

08004702 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004702:	b580      	push	{r7, lr}
 8004704:	b082      	sub	sp, #8
 8004706:	af00      	add	r7, sp, #0
 8004708:	4603      	mov	r3, r0
 800470a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800470c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff31 	bl	8004578 <__NVIC_EnableIRQ>
}
 8004716:	bf00      	nop
 8004718:	3708      	adds	r7, #8
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ffa2 	bl	8004670 <SysTick_Config>
 800472c:	4603      	mov	r3, r0
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
	...

08004738 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004740:	2300      	movs	r3, #0
 8004742:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004744:	f7ff feb6 	bl	80044b4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d101      	bne.n	8004754 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004750:	2301      	movs	r3, #1
 8004752:	e099      	b.n	8004888 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2202      	movs	r2, #2
 8004758:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f022 0201 	bic.w	r2, r2, #1
 8004772:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004774:	e00f      	b.n	8004796 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004776:	f7ff fe9d 	bl	80044b4 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b05      	cmp	r3, #5
 8004782:	d908      	bls.n	8004796 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2220      	movs	r2, #32
 8004788:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	2203      	movs	r2, #3
 800478e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004792:	2303      	movs	r3, #3
 8004794:	e078      	b.n	8004888 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f003 0301 	and.w	r3, r3, #1
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1e8      	bne.n	8004776 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4b38      	ldr	r3, [pc, #224]	@ (8004890 <HAL_DMA_Init+0x158>)
 80047b0:	4013      	ands	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	685a      	ldr	r2, [r3, #4]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	699b      	ldr	r3, [r3, #24]
 80047d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a1b      	ldr	r3, [r3, #32]
 80047e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d107      	bne.n	8004800 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	4313      	orrs	r3, r2
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	697a      	ldr	r2, [r7, #20]
 8004806:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	f023 0307 	bic.w	r3, r3, #7
 8004816:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004826:	2b04      	cmp	r3, #4
 8004828:	d117      	bne.n	800485a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004838:	2b00      	cmp	r3, #0
 800483a:	d00e      	beq.n	800485a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800483c:	6878      	ldr	r0, [r7, #4]
 800483e:	f000 fa91 	bl	8004d64 <DMA_CheckFifoParam>
 8004842:	4603      	mov	r3, r0
 8004844:	2b00      	cmp	r3, #0
 8004846:	d008      	beq.n	800485a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2240      	movs	r2, #64	@ 0x40
 800484c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004856:	2301      	movs	r3, #1
 8004858:	e016      	b.n	8004888 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	697a      	ldr	r2, [r7, #20]
 8004860:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa48 	bl	8004cf8 <DMA_CalcBaseAndBitshift>
 8004868:	4603      	mov	r3, r0
 800486a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004870:	223f      	movs	r2, #63	@ 0x3f
 8004872:	409a      	lsls	r2, r3
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004886:	2300      	movs	r3, #0
}
 8004888:	4618      	mov	r0, r3
 800488a:	3718      	adds	r7, #24
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	f010803f 	.word	0xf010803f

08004894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b086      	sub	sp, #24
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
 80048a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048aa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d101      	bne.n	80048ba <HAL_DMA_Start_IT+0x26>
 80048b6:	2302      	movs	r3, #2
 80048b8:	e040      	b.n	800493c <HAL_DMA_Start_IT+0xa8>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2201      	movs	r2, #1
 80048be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b01      	cmp	r3, #1
 80048cc:	d12f      	bne.n	800492e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2202      	movs	r2, #2
 80048d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	687a      	ldr	r2, [r7, #4]
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 f9da 	bl	8004c9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048ec:	223f      	movs	r2, #63	@ 0x3f
 80048ee:	409a      	lsls	r2, r3
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f042 0216 	orr.w	r2, r2, #22
 8004902:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004908:	2b00      	cmp	r3, #0
 800490a:	d007      	beq.n	800491c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681a      	ldr	r2, [r3, #0]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0208 	orr.w	r2, r2, #8
 800491a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0201 	orr.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e005      	b.n	800493a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004936:	2302      	movs	r3, #2
 8004938:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800493a:	7dfb      	ldrb	r3, [r7, #23]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3718      	adds	r7, #24
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004952:	b2db      	uxtb	r3, r3
 8004954:	2b02      	cmp	r3, #2
 8004956:	d004      	beq.n	8004962 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e00c      	b.n	800497c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2205      	movs	r2, #5
 8004966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	681a      	ldr	r2, [r3, #0]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f022 0201 	bic.w	r2, r2, #1
 8004978:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800497a:	2300      	movs	r3, #0
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b086      	sub	sp, #24
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004990:	2300      	movs	r3, #0
 8004992:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004994:	4b8e      	ldr	r3, [pc, #568]	@ (8004bd0 <HAL_DMA_IRQHandler+0x248>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a8e      	ldr	r2, [pc, #568]	@ (8004bd4 <HAL_DMA_IRQHandler+0x24c>)
 800499a:	fba2 2303 	umull	r2, r3, r2, r3
 800499e:	0a9b      	lsrs	r3, r3, #10
 80049a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049b2:	2208      	movs	r2, #8
 80049b4:	409a      	lsls	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	4013      	ands	r3, r2
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d01a      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f003 0304 	and.w	r3, r3, #4
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d013      	beq.n	80049f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0204 	bic.w	r2, r2, #4
 80049da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e0:	2208      	movs	r2, #8
 80049e2:	409a      	lsls	r2, r3
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049ec:	f043 0201 	orr.w	r2, r3, #1
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f8:	2201      	movs	r2, #1
 80049fa:	409a      	lsls	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4013      	ands	r3, r2
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d012      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	695b      	ldr	r3, [r3, #20]
 8004a0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00b      	beq.n	8004a2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a16:	2201      	movs	r2, #1
 8004a18:	409a      	lsls	r2, r3
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f043 0202 	orr.w	r2, r3, #2
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a2e:	2204      	movs	r2, #4
 8004a30:	409a      	lsls	r2, r3
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	4013      	ands	r3, r2
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d012      	beq.n	8004a60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f003 0302 	and.w	r3, r3, #2
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d00b      	beq.n	8004a60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4c:	2204      	movs	r2, #4
 8004a4e:	409a      	lsls	r2, r3
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a58:	f043 0204 	orr.w	r2, r3, #4
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a64:	2210      	movs	r2, #16
 8004a66:	409a      	lsls	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d043      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0308 	and.w	r3, r3, #8
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d03c      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a82:	2210      	movs	r2, #16
 8004a84:	409a      	lsls	r2, r3
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d018      	beq.n	8004aca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d108      	bne.n	8004ab8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d024      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	4798      	blx	r3
 8004ab6:	e01f      	b.n	8004af8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d01b      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	4798      	blx	r3
 8004ac8:	e016      	b.n	8004af8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d107      	bne.n	8004ae8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	681a      	ldr	r2, [r3, #0]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f022 0208 	bic.w	r2, r2, #8
 8004ae6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d003      	beq.n	8004af8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004af4:	6878      	ldr	r0, [r7, #4]
 8004af6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004afc:	2220      	movs	r2, #32
 8004afe:	409a      	lsls	r2, r3
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 808f 	beq.w	8004c28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f003 0310 	and.w	r3, r3, #16
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 8087 	beq.w	8004c28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b1e:	2220      	movs	r2, #32
 8004b20:	409a      	lsls	r2, r3
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b2c:	b2db      	uxtb	r3, r3
 8004b2e:	2b05      	cmp	r3, #5
 8004b30:	d136      	bne.n	8004ba0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0216 	bic.w	r2, r2, #22
 8004b40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695a      	ldr	r2, [r3, #20]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <HAL_DMA_IRQHandler+0x1da>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d007      	beq.n	8004b72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	681a      	ldr	r2, [r3, #0]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0208 	bic.w	r2, r2, #8
 8004b70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b76:	223f      	movs	r2, #63	@ 0x3f
 8004b78:	409a      	lsls	r2, r3
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2201      	movs	r2, #1
 8004b82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d07e      	beq.n	8004c94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	4798      	blx	r3
        }
        return;
 8004b9e:	e079      	b.n	8004c94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d01d      	beq.n	8004bea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d10d      	bne.n	8004bd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d031      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	4798      	blx	r3
 8004bcc:	e02c      	b.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
 8004bce:	bf00      	nop
 8004bd0:	20000004 	.word	0x20000004
 8004bd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d023      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
 8004be8:	e01e      	b.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d10f      	bne.n	8004c18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f022 0210 	bic.w	r2, r2, #16
 8004c06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d003      	beq.n	8004c28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d032      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d022      	beq.n	8004c82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2205      	movs	r2, #5
 8004c40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f022 0201 	bic.w	r2, r2, #1
 8004c52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	3301      	adds	r3, #1
 8004c58:	60bb      	str	r3, [r7, #8]
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d307      	bcc.n	8004c70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0301 	and.w	r3, r3, #1
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d1f2      	bne.n	8004c54 <HAL_DMA_IRQHandler+0x2cc>
 8004c6e:	e000      	b.n	8004c72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2201      	movs	r2, #1
 8004c76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d005      	beq.n	8004c96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004c8e:	6878      	ldr	r0, [r7, #4]
 8004c90:	4798      	blx	r3
 8004c92:	e000      	b.n	8004c96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c94:	bf00      	nop
    }
  }
}
 8004c96:	3718      	adds	r7, #24
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cb8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	683a      	ldr	r2, [r7, #0]
 8004cc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	2b40      	cmp	r3, #64	@ 0x40
 8004cc8:	d108      	bne.n	8004cdc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	68ba      	ldr	r2, [r7, #8]
 8004cd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cda:	e007      	b.n	8004cec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	687a      	ldr	r2, [r7, #4]
 8004cea:	60da      	str	r2, [r3, #12]
}
 8004cec:	bf00      	nop
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr

08004cf8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	3b10      	subs	r3, #16
 8004d08:	4a14      	ldr	r2, [pc, #80]	@ (8004d5c <DMA_CalcBaseAndBitshift+0x64>)
 8004d0a:	fba2 2303 	umull	r2, r3, r2, r3
 8004d0e:	091b      	lsrs	r3, r3, #4
 8004d10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d12:	4a13      	ldr	r2, [pc, #76]	@ (8004d60 <DMA_CalcBaseAndBitshift+0x68>)
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4413      	add	r3, r2
 8004d18:	781b      	ldrb	r3, [r3, #0]
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2b03      	cmp	r3, #3
 8004d24:	d909      	bls.n	8004d3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d2e:	f023 0303 	bic.w	r3, r3, #3
 8004d32:	1d1a      	adds	r2, r3, #4
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d38:	e007      	b.n	8004d4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d42:	f023 0303 	bic.w	r3, r3, #3
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3714      	adds	r7, #20
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
 8004d5a:	bf00      	nop
 8004d5c:	aaaaaaab 	.word	0xaaaaaaab
 8004d60:	0801797c 	.word	0x0801797c

08004d64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d64:	b480      	push	{r7}
 8004d66:	b085      	sub	sp, #20
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	699b      	ldr	r3, [r3, #24]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d11f      	bne.n	8004dbe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	2b03      	cmp	r3, #3
 8004d82:	d856      	bhi.n	8004e32 <DMA_CheckFifoParam+0xce>
 8004d84:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <DMA_CheckFifoParam+0x28>)
 8004d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8a:	bf00      	nop
 8004d8c:	08004d9d 	.word	0x08004d9d
 8004d90:	08004daf 	.word	0x08004daf
 8004d94:	08004d9d 	.word	0x08004d9d
 8004d98:	08004e33 	.word	0x08004e33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004da0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d046      	beq.n	8004e36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004da8:	2301      	movs	r3, #1
 8004daa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dac:	e043      	b.n	8004e36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004db2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004db6:	d140      	bne.n	8004e3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dbc:	e03d      	b.n	8004e3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004dc6:	d121      	bne.n	8004e0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d837      	bhi.n	8004e3e <DMA_CheckFifoParam+0xda>
 8004dce:	a201      	add	r2, pc, #4	@ (adr r2, 8004dd4 <DMA_CheckFifoParam+0x70>)
 8004dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dd4:	08004de5 	.word	0x08004de5
 8004dd8:	08004deb 	.word	0x08004deb
 8004ddc:	08004de5 	.word	0x08004de5
 8004de0:	08004dfd 	.word	0x08004dfd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	73fb      	strb	r3, [r7, #15]
      break;
 8004de8:	e030      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d025      	beq.n	8004e42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004df6:	2301      	movs	r3, #1
 8004df8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dfa:	e022      	b.n	8004e42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e04:	d11f      	bne.n	8004e46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e0a:	e01c      	b.n	8004e46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e0c:	68bb      	ldr	r3, [r7, #8]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d903      	bls.n	8004e1a <DMA_CheckFifoParam+0xb6>
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	2b03      	cmp	r3, #3
 8004e16:	d003      	beq.n	8004e20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e18:	e018      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1e:	e015      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d00e      	beq.n	8004e4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	73fb      	strb	r3, [r7, #15]
      break;
 8004e30:	e00b      	b.n	8004e4a <DMA_CheckFifoParam+0xe6>
      break;
 8004e32:	bf00      	nop
 8004e34:	e00a      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;
 8004e36:	bf00      	nop
 8004e38:	e008      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;
 8004e3a:	bf00      	nop
 8004e3c:	e006      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;
 8004e3e:	bf00      	nop
 8004e40:	e004      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;
 8004e42:	bf00      	nop
 8004e44:	e002      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;   
 8004e46:	bf00      	nop
 8004e48:	e000      	b.n	8004e4c <DMA_CheckFifoParam+0xe8>
      break;
 8004e4a:	bf00      	nop
    }
  } 
  
  return status; 
 8004e4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e4e:	4618      	mov	r0, r3
 8004e50:	3714      	adds	r7, #20
 8004e52:	46bd      	mov	sp, r7
 8004e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e58:	4770      	bx	lr
 8004e5a:	bf00      	nop

08004e5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e5c:	b480      	push	{r7}
 8004e5e:	b089      	sub	sp, #36	@ 0x24
 8004e60:	af00      	add	r7, sp, #0
 8004e62:	6078      	str	r0, [r7, #4]
 8004e64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e66:	2300      	movs	r3, #0
 8004e68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e72:	2300      	movs	r3, #0
 8004e74:	61fb      	str	r3, [r7, #28]
 8004e76:	e159      	b.n	800512c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e78:	2201      	movs	r2, #1
 8004e7a:	69fb      	ldr	r3, [r7, #28]
 8004e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e8c:	693a      	ldr	r2, [r7, #16]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	f040 8148 	bne.w	8005126 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f003 0303 	and.w	r3, r3, #3
 8004e9e:	2b01      	cmp	r3, #1
 8004ea0:	d005      	beq.n	8004eae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d130      	bne.n	8004f10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	005b      	lsls	r3, r3, #1
 8004eb8:	2203      	movs	r2, #3
 8004eba:	fa02 f303 	lsl.w	r3, r2, r3
 8004ebe:	43db      	mvns	r3, r3
 8004ec0:	69ba      	ldr	r2, [r7, #24]
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	68da      	ldr	r2, [r3, #12]
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	005b      	lsls	r3, r3, #1
 8004ece:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed2:	69ba      	ldr	r2, [r7, #24]
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4013      	ands	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	091b      	lsrs	r3, r3, #4
 8004efa:	f003 0201 	and.w	r2, r3, #1
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	fa02 f303 	lsl.w	r3, r2, r3
 8004f04:	69ba      	ldr	r2, [r7, #24]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	f003 0303 	and.w	r3, r3, #3
 8004f18:	2b03      	cmp	r3, #3
 8004f1a:	d017      	beq.n	8004f4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	68db      	ldr	r3, [r3, #12]
 8004f20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	005b      	lsls	r3, r3, #1
 8004f26:	2203      	movs	r2, #3
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	689a      	ldr	r2, [r3, #8]
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	005b      	lsls	r3, r3, #1
 8004f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f40:	69ba      	ldr	r2, [r7, #24]
 8004f42:	4313      	orrs	r3, r2
 8004f44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f003 0303 	and.w	r3, r3, #3
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d123      	bne.n	8004fa0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	08da      	lsrs	r2, r3, #3
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	3208      	adds	r2, #8
 8004f60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	f003 0307 	and.w	r3, r3, #7
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	220f      	movs	r2, #15
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	43db      	mvns	r3, r3
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	4013      	ands	r3, r2
 8004f7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	691a      	ldr	r2, [r3, #16]
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	f003 0307 	and.w	r3, r3, #7
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	fa02 f303 	lsl.w	r3, r2, r3
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	4313      	orrs	r3, r2
 8004f90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	08da      	lsrs	r2, r3, #3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	3208      	adds	r2, #8
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	005b      	lsls	r3, r3, #1
 8004faa:	2203      	movs	r2, #3
 8004fac:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb0:	43db      	mvns	r3, r3
 8004fb2:	69ba      	ldr	r2, [r7, #24]
 8004fb4:	4013      	ands	r3, r2
 8004fb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f003 0203 	and.w	r2, r3, #3
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	005b      	lsls	r3, r3, #1
 8004fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fc8:	69ba      	ldr	r2, [r7, #24]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 80a2 	beq.w	8005126 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
 8004fe6:	4b57      	ldr	r3, [pc, #348]	@ (8005144 <HAL_GPIO_Init+0x2e8>)
 8004fe8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fea:	4a56      	ldr	r2, [pc, #344]	@ (8005144 <HAL_GPIO_Init+0x2e8>)
 8004fec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ff0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ff2:	4b54      	ldr	r3, [pc, #336]	@ (8005144 <HAL_GPIO_Init+0x2e8>)
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ffa:	60fb      	str	r3, [r7, #12]
 8004ffc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004ffe:	4a52      	ldr	r2, [pc, #328]	@ (8005148 <HAL_GPIO_Init+0x2ec>)
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	089b      	lsrs	r3, r3, #2
 8005004:	3302      	adds	r3, #2
 8005006:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800500a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	220f      	movs	r2, #15
 8005016:	fa02 f303 	lsl.w	r3, r2, r3
 800501a:	43db      	mvns	r3, r3
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4013      	ands	r3, r2
 8005020:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4a49      	ldr	r2, [pc, #292]	@ (800514c <HAL_GPIO_Init+0x2f0>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d019      	beq.n	800505e <HAL_GPIO_Init+0x202>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a48      	ldr	r2, [pc, #288]	@ (8005150 <HAL_GPIO_Init+0x2f4>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d013      	beq.n	800505a <HAL_GPIO_Init+0x1fe>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a47      	ldr	r2, [pc, #284]	@ (8005154 <HAL_GPIO_Init+0x2f8>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00d      	beq.n	8005056 <HAL_GPIO_Init+0x1fa>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a46      	ldr	r2, [pc, #280]	@ (8005158 <HAL_GPIO_Init+0x2fc>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d007      	beq.n	8005052 <HAL_GPIO_Init+0x1f6>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a45      	ldr	r2, [pc, #276]	@ (800515c <HAL_GPIO_Init+0x300>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d101      	bne.n	800504e <HAL_GPIO_Init+0x1f2>
 800504a:	2304      	movs	r3, #4
 800504c:	e008      	b.n	8005060 <HAL_GPIO_Init+0x204>
 800504e:	2307      	movs	r3, #7
 8005050:	e006      	b.n	8005060 <HAL_GPIO_Init+0x204>
 8005052:	2303      	movs	r3, #3
 8005054:	e004      	b.n	8005060 <HAL_GPIO_Init+0x204>
 8005056:	2302      	movs	r3, #2
 8005058:	e002      	b.n	8005060 <HAL_GPIO_Init+0x204>
 800505a:	2301      	movs	r3, #1
 800505c:	e000      	b.n	8005060 <HAL_GPIO_Init+0x204>
 800505e:	2300      	movs	r3, #0
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	f002 0203 	and.w	r2, r2, #3
 8005066:	0092      	lsls	r2, r2, #2
 8005068:	4093      	lsls	r3, r2
 800506a:	69ba      	ldr	r2, [r7, #24]
 800506c:	4313      	orrs	r3, r2
 800506e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005070:	4935      	ldr	r1, [pc, #212]	@ (8005148 <HAL_GPIO_Init+0x2ec>)
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	089b      	lsrs	r3, r3, #2
 8005076:	3302      	adds	r3, #2
 8005078:	69ba      	ldr	r2, [r7, #24]
 800507a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800507e:	4b38      	ldr	r3, [pc, #224]	@ (8005160 <HAL_GPIO_Init+0x304>)
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	43db      	mvns	r3, r3
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	4013      	ands	r3, r2
 800508c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005096:	2b00      	cmp	r3, #0
 8005098:	d003      	beq.n	80050a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800509a:	69ba      	ldr	r2, [r7, #24]
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4313      	orrs	r3, r2
 80050a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050a2:	4a2f      	ldr	r2, [pc, #188]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a8:	4b2d      	ldr	r3, [pc, #180]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050aa:	68db      	ldr	r3, [r3, #12]
 80050ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	4013      	ands	r3, r2
 80050b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80050c4:	69ba      	ldr	r2, [r7, #24]
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050cc:	4a24      	ldr	r2, [pc, #144]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050d2:	4b23      	ldr	r3, [pc, #140]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	43db      	mvns	r3, r3
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	4013      	ands	r3, r2
 80050e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050f6:	4a1a      	ldr	r2, [pc, #104]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050fc:	4b18      	ldr	r3, [pc, #96]	@ (8005160 <HAL_GPIO_Init+0x304>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	43db      	mvns	r3, r3
 8005106:	69ba      	ldr	r2, [r7, #24]
 8005108:	4013      	ands	r3, r2
 800510a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	693b      	ldr	r3, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005120:	4a0f      	ldr	r2, [pc, #60]	@ (8005160 <HAL_GPIO_Init+0x304>)
 8005122:	69bb      	ldr	r3, [r7, #24]
 8005124:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	3301      	adds	r3, #1
 800512a:	61fb      	str	r3, [r7, #28]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	2b0f      	cmp	r3, #15
 8005130:	f67f aea2 	bls.w	8004e78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	3724      	adds	r7, #36	@ 0x24
 800513a:	46bd      	mov	sp, r7
 800513c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005140:	4770      	bx	lr
 8005142:	bf00      	nop
 8005144:	40023800 	.word	0x40023800
 8005148:	40013800 	.word	0x40013800
 800514c:	40020000 	.word	0x40020000
 8005150:	40020400 	.word	0x40020400
 8005154:	40020800 	.word	0x40020800
 8005158:	40020c00 	.word	0x40020c00
 800515c:	40021000 	.word	0x40021000
 8005160:	40013c00 	.word	0x40013c00

08005164 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005164:	b480      	push	{r7}
 8005166:	b083      	sub	sp, #12
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	460b      	mov	r3, r1
 800516e:	807b      	strh	r3, [r7, #2]
 8005170:	4613      	mov	r3, r2
 8005172:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005174:	787b      	ldrb	r3, [r7, #1]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800517a:	887a      	ldrh	r2, [r7, #2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005180:	e003      	b.n	800518a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005182:	887b      	ldrh	r3, [r7, #2]
 8005184:	041a      	lsls	r2, r3, #16
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	619a      	str	r2, [r3, #24]
}
 800518a:	bf00      	nop
 800518c:	370c      	adds	r7, #12
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
	...

08005198 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051a2:	4b08      	ldr	r3, [pc, #32]	@ (80051c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051a4:	695a      	ldr	r2, [r3, #20]
 80051a6:	88fb      	ldrh	r3, [r7, #6]
 80051a8:	4013      	ands	r3, r2
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d006      	beq.n	80051bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ae:	4a05      	ldr	r2, [pc, #20]	@ (80051c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051b0:	88fb      	ldrh	r3, [r7, #6]
 80051b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051b4:	88fb      	ldrh	r3, [r7, #6]
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fb ffb0 	bl	800111c <HAL_GPIO_EXTI_Callback>
  }
}
 80051bc:	bf00      	nop
 80051be:	3708      	adds	r7, #8
 80051c0:	46bd      	mov	sp, r7
 80051c2:	bd80      	pop	{r7, pc}
 80051c4:	40013c00 	.word	0x40013c00

080051c8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af02      	add	r7, sp, #8
 80051ce:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e101      	b.n	80053de <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d106      	bne.n	80051fa <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2200      	movs	r2, #0
 80051f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80051f4:	6878      	ldr	r0, [r7, #4]
 80051f6:	f009 fd65 	bl	800ecc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2203      	movs	r2, #3
 80051fe:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005208:	d102      	bne.n	8005210 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f003 ff5c 	bl	80090d2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6818      	ldr	r0, [r3, #0]
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	7c1a      	ldrb	r2, [r3, #16]
 8005222:	f88d 2000 	strb.w	r2, [sp]
 8005226:	3304      	adds	r3, #4
 8005228:	cb0e      	ldmia	r3, {r1, r2, r3}
 800522a:	f003 fe3b 	bl	8008ea4 <USB_CoreInit>
 800522e:	4603      	mov	r3, r0
 8005230:	2b00      	cmp	r3, #0
 8005232:	d005      	beq.n	8005240 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2202      	movs	r2, #2
 8005238:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0ce      	b.n	80053de <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	2100      	movs	r1, #0
 8005246:	4618      	mov	r0, r3
 8005248:	f003 ff54 	bl	80090f4 <USB_SetCurrentMode>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d005      	beq.n	800525e <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2202      	movs	r2, #2
 8005256:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e0bf      	b.n	80053de <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800525e:	2300      	movs	r3, #0
 8005260:	73fb      	strb	r3, [r7, #15]
 8005262:	e04a      	b.n	80052fa <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	3315      	adds	r3, #21
 8005274:	2201      	movs	r2, #1
 8005276:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005278:	7bfa      	ldrb	r2, [r7, #15]
 800527a:	6879      	ldr	r1, [r7, #4]
 800527c:	4613      	mov	r3, r2
 800527e:	00db      	lsls	r3, r3, #3
 8005280:	4413      	add	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	440b      	add	r3, r1
 8005286:	3314      	adds	r3, #20
 8005288:	7bfa      	ldrb	r2, [r7, #15]
 800528a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800528c:	7bfa      	ldrb	r2, [r7, #15]
 800528e:	7bfb      	ldrb	r3, [r7, #15]
 8005290:	b298      	uxth	r0, r3
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	332e      	adds	r3, #46	@ 0x2e
 80052a0:	4602      	mov	r2, r0
 80052a2:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	6879      	ldr	r1, [r7, #4]
 80052a8:	4613      	mov	r3, r2
 80052aa:	00db      	lsls	r3, r3, #3
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	440b      	add	r3, r1
 80052b2:	3318      	adds	r3, #24
 80052b4:	2200      	movs	r2, #0
 80052b6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052b8:	7bfa      	ldrb	r2, [r7, #15]
 80052ba:	6879      	ldr	r1, [r7, #4]
 80052bc:	4613      	mov	r3, r2
 80052be:	00db      	lsls	r3, r3, #3
 80052c0:	4413      	add	r3, r2
 80052c2:	009b      	lsls	r3, r3, #2
 80052c4:	440b      	add	r3, r1
 80052c6:	331c      	adds	r3, #28
 80052c8:	2200      	movs	r2, #0
 80052ca:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052cc:	7bfa      	ldrb	r2, [r7, #15]
 80052ce:	6879      	ldr	r1, [r7, #4]
 80052d0:	4613      	mov	r3, r2
 80052d2:	00db      	lsls	r3, r3, #3
 80052d4:	4413      	add	r3, r2
 80052d6:	009b      	lsls	r3, r3, #2
 80052d8:	440b      	add	r3, r1
 80052da:	3320      	adds	r3, #32
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052e0:	7bfa      	ldrb	r2, [r7, #15]
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	4613      	mov	r3, r2
 80052e6:	00db      	lsls	r3, r3, #3
 80052e8:	4413      	add	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	440b      	add	r3, r1
 80052ee:	3324      	adds	r3, #36	@ 0x24
 80052f0:	2200      	movs	r2, #0
 80052f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052f4:	7bfb      	ldrb	r3, [r7, #15]
 80052f6:	3301      	adds	r3, #1
 80052f8:	73fb      	strb	r3, [r7, #15]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	791b      	ldrb	r3, [r3, #4]
 80052fe:	7bfa      	ldrb	r2, [r7, #15]
 8005300:	429a      	cmp	r2, r3
 8005302:	d3af      	bcc.n	8005264 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005304:	2300      	movs	r3, #0
 8005306:	73fb      	strb	r3, [r7, #15]
 8005308:	e044      	b.n	8005394 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800530a:	7bfa      	ldrb	r2, [r7, #15]
 800530c:	6879      	ldr	r1, [r7, #4]
 800530e:	4613      	mov	r3, r2
 8005310:	00db      	lsls	r3, r3, #3
 8005312:	4413      	add	r3, r2
 8005314:	009b      	lsls	r3, r3, #2
 8005316:	440b      	add	r3, r1
 8005318:	f203 2355 	addw	r3, r3, #597	@ 0x255
 800531c:	2200      	movs	r2, #0
 800531e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005320:	7bfa      	ldrb	r2, [r7, #15]
 8005322:	6879      	ldr	r1, [r7, #4]
 8005324:	4613      	mov	r3, r2
 8005326:	00db      	lsls	r3, r3, #3
 8005328:	4413      	add	r3, r2
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	440b      	add	r3, r1
 800532e:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005332:	7bfa      	ldrb	r2, [r7, #15]
 8005334:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005336:	7bfa      	ldrb	r2, [r7, #15]
 8005338:	6879      	ldr	r1, [r7, #4]
 800533a:	4613      	mov	r3, r2
 800533c:	00db      	lsls	r3, r3, #3
 800533e:	4413      	add	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	440b      	add	r3, r1
 8005344:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800534c:	7bfa      	ldrb	r2, [r7, #15]
 800534e:	6879      	ldr	r1, [r7, #4]
 8005350:	4613      	mov	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	4413      	add	r3, r2
 8005356:	009b      	lsls	r3, r3, #2
 8005358:	440b      	add	r3, r1
 800535a:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005362:	7bfa      	ldrb	r2, [r7, #15]
 8005364:	6879      	ldr	r1, [r7, #4]
 8005366:	4613      	mov	r3, r2
 8005368:	00db      	lsls	r3, r3, #3
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	440b      	add	r3, r1
 8005370:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005374:	2200      	movs	r2, #0
 8005376:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005378:	7bfa      	ldrb	r2, [r7, #15]
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4613      	mov	r3, r2
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	4413      	add	r3, r2
 8005382:	009b      	lsls	r3, r3, #2
 8005384:	440b      	add	r3, r1
 8005386:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800538a:	2200      	movs	r2, #0
 800538c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800538e:	7bfb      	ldrb	r3, [r7, #15]
 8005390:	3301      	adds	r3, #1
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	791b      	ldrb	r3, [r3, #4]
 8005398:	7bfa      	ldrb	r2, [r7, #15]
 800539a:	429a      	cmp	r2, r3
 800539c:	d3b5      	bcc.n	800530a <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6818      	ldr	r0, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	7c1a      	ldrb	r2, [r3, #16]
 80053a6:	f88d 2000 	strb.w	r2, [sp]
 80053aa:	3304      	adds	r3, #4
 80053ac:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ae:	f003 feed 	bl	800918c <USB_DevInit>
 80053b2:	4603      	mov	r3, r0
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d005      	beq.n	80053c4 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2202      	movs	r2, #2
 80053bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053c0:	2301      	movs	r3, #1
 80053c2:	e00c      	b.n	80053de <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2200      	movs	r2, #0
 80053c8:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f004 ff37 	bl	800a24a <USB_DevDisconnect>

  return HAL_OK;
 80053dc:	2300      	movs	r3, #0
}
 80053de:	4618      	mov	r0, r3
 80053e0:	3710      	adds	r7, #16
 80053e2:	46bd      	mov	sp, r7
 80053e4:	bd80      	pop	{r7, pc}

080053e6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80053e6:	b580      	push	{r7, lr}
 80053e8:	b084      	sub	sp, #16
 80053ea:	af00      	add	r7, sp, #0
 80053ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	d101      	bne.n	8005402 <HAL_PCD_Start+0x1c>
 80053fe:	2302      	movs	r3, #2
 8005400:	e022      	b.n	8005448 <HAL_PCD_Start+0x62>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
 800540e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005412:	2b00      	cmp	r3, #0
 8005414:	d009      	beq.n	800542a <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800541a:	2b01      	cmp	r3, #1
 800541c:	d105      	bne.n	800542a <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005422:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4618      	mov	r0, r3
 8005430:	f003 fe3e 	bl	80090b0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4618      	mov	r0, r3
 800543a:	f004 fee5 	bl	800a208 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2200      	movs	r2, #0
 8005442:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005446:	2300      	movs	r3, #0
}
 8005448:	4618      	mov	r0, r3
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005450:	b590      	push	{r4, r7, lr}
 8005452:	b08d      	sub	sp, #52	@ 0x34
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4618      	mov	r0, r3
 8005468:	f004 ffa3 	bl	800a3b2 <USB_GetMode>
 800546c:	4603      	mov	r3, r0
 800546e:	2b00      	cmp	r3, #0
 8005470:	f040 848c 	bne.w	8005d8c <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4618      	mov	r0, r3
 800547a:	f004 ff07 	bl	800a28c <USB_ReadInterrupts>
 800547e:	4603      	mov	r3, r0
 8005480:	2b00      	cmp	r3, #0
 8005482:	f000 8482 	beq.w	8005d8a <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	0a1b      	lsrs	r3, r3, #8
 8005490:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	4618      	mov	r0, r3
 80054a0:	f004 fef4 	bl	800a28c <USB_ReadInterrupts>
 80054a4:	4603      	mov	r3, r0
 80054a6:	f003 0302 	and.w	r3, r3, #2
 80054aa:	2b02      	cmp	r3, #2
 80054ac:	d107      	bne.n	80054be <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	695a      	ldr	r2, [r3, #20]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f002 0202 	and.w	r2, r2, #2
 80054bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	4618      	mov	r0, r3
 80054c4:	f004 fee2 	bl	800a28c <USB_ReadInterrupts>
 80054c8:	4603      	mov	r3, r0
 80054ca:	f003 0310 	and.w	r3, r3, #16
 80054ce:	2b10      	cmp	r3, #16
 80054d0:	d161      	bne.n	8005596 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	699a      	ldr	r2, [r3, #24]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f022 0210 	bic.w	r2, r2, #16
 80054e0:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054e2:	6a3b      	ldr	r3, [r7, #32]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	f003 020f 	and.w	r2, r3, #15
 80054ee:	4613      	mov	r3, r2
 80054f0:	00db      	lsls	r3, r3, #3
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	4413      	add	r3, r2
 80054fe:	3304      	adds	r3, #4
 8005500:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	0c5b      	lsrs	r3, r3, #17
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	2b02      	cmp	r3, #2
 800550c:	d124      	bne.n	8005558 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800550e:	69ba      	ldr	r2, [r7, #24]
 8005510:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005514:	4013      	ands	r3, r2
 8005516:	2b00      	cmp	r3, #0
 8005518:	d035      	beq.n	8005586 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800551a:	697b      	ldr	r3, [r7, #20]
 800551c:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	091b      	lsrs	r3, r3, #4
 8005522:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005524:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005528:	b29b      	uxth	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	6a38      	ldr	r0, [r7, #32]
 800552e:	f004 fd19 	bl	8009f64 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005532:	697b      	ldr	r3, [r7, #20]
 8005534:	68da      	ldr	r2, [r3, #12]
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	091b      	lsrs	r3, r3, #4
 800553a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800553e:	441a      	add	r2, r3
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	695a      	ldr	r2, [r3, #20]
 8005548:	69bb      	ldr	r3, [r7, #24]
 800554a:	091b      	lsrs	r3, r3, #4
 800554c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005550:	441a      	add	r2, r3
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	615a      	str	r2, [r3, #20]
 8005556:	e016      	b.n	8005586 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	0c5b      	lsrs	r3, r3, #17
 800555c:	f003 030f 	and.w	r3, r3, #15
 8005560:	2b06      	cmp	r3, #6
 8005562:	d110      	bne.n	8005586 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800556a:	2208      	movs	r2, #8
 800556c:	4619      	mov	r1, r3
 800556e:	6a38      	ldr	r0, [r7, #32]
 8005570:	f004 fcf8 	bl	8009f64 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	695a      	ldr	r2, [r3, #20]
 8005578:	69bb      	ldr	r3, [r7, #24]
 800557a:	091b      	lsrs	r3, r3, #4
 800557c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005580:	441a      	add	r2, r3
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	699a      	ldr	r2, [r3, #24]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f042 0210 	orr.w	r2, r2, #16
 8005594:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	4618      	mov	r0, r3
 800559c:	f004 fe76 	bl	800a28c <USB_ReadInterrupts>
 80055a0:	4603      	mov	r3, r0
 80055a2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055a6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055aa:	f040 80a7 	bne.w	80056fc <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055ae:	2300      	movs	r3, #0
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fe7b 	bl	800a2b2 <USB_ReadDevAllOutEpInterrupt>
 80055bc:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80055be:	e099      	b.n	80056f4 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	f000 808e 	beq.w	80056e8 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055d2:	b2d2      	uxtb	r2, r2
 80055d4:	4611      	mov	r1, r2
 80055d6:	4618      	mov	r0, r3
 80055d8:	f004 fe9f 	bl	800a31a <USB_ReadDevOutEPInterrupt>
 80055dc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	f003 0301 	and.w	r3, r3, #1
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00c      	beq.n	8005602 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80055e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055f4:	461a      	mov	r2, r3
 80055f6:	2301      	movs	r3, #1
 80055f8:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80055fa:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f000 fea3 	bl	8006348 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00c      	beq.n	8005626 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800560c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	69fb      	ldr	r3, [r7, #28]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005618:	461a      	mov	r2, r3
 800561a:	2308      	movs	r3, #8
 800561c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800561e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f000 ff79 	bl	8006518 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005626:	693b      	ldr	r3, [r7, #16]
 8005628:	f003 0310 	and.w	r3, r3, #16
 800562c:	2b00      	cmp	r3, #0
 800562e:	d008      	beq.n	8005642 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005630:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005632:	015a      	lsls	r2, r3, #5
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	4413      	add	r3, r2
 8005638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800563c:	461a      	mov	r2, r3
 800563e:	2310      	movs	r3, #16
 8005640:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d030      	beq.n	80056ae <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800564c:	6a3b      	ldr	r3, [r7, #32]
 800564e:	695b      	ldr	r3, [r3, #20]
 8005650:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005654:	2b80      	cmp	r3, #128	@ 0x80
 8005656:	d109      	bne.n	800566c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	69fa      	ldr	r2, [r7, #28]
 8005662:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800566a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800566c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	3304      	adds	r3, #4
 8005680:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	78db      	ldrb	r3, [r3, #3]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d108      	bne.n	800569c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	2200      	movs	r2, #0
 800568e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	b2db      	uxtb	r3, r3
 8005694:	4619      	mov	r1, r3
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f009 fc10 	bl	800eebc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	015a      	lsls	r2, r3, #5
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	4413      	add	r3, r2
 80056a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056a8:	461a      	mov	r2, r3
 80056aa:	2302      	movs	r3, #2
 80056ac:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	f003 0320 	and.w	r3, r3, #32
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d008      	beq.n	80056ca <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2320      	movs	r3, #32
 80056c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d009      	beq.n	80056e8 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80056e6:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ea:	3301      	adds	r3, #1
 80056ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80056ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f0:	085b      	lsrs	r3, r3, #1
 80056f2:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80056f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	f47f af62 	bne.w	80055c0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4618      	mov	r0, r3
 8005702:	f004 fdc3 	bl	800a28c <USB_ReadInterrupts>
 8005706:	4603      	mov	r3, r0
 8005708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800570c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005710:	f040 80db 	bne.w	80058ca <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4618      	mov	r0, r3
 800571a:	f004 fde4 	bl	800a2e6 <USB_ReadDevAllInEpInterrupt>
 800571e:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005724:	e0cd      	b.n	80058c2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005728:	f003 0301 	and.w	r3, r3, #1
 800572c:	2b00      	cmp	r3, #0
 800572e:	f000 80c2 	beq.w	80058b6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	b2d2      	uxtb	r2, r2
 800573a:	4611      	mov	r1, r2
 800573c:	4618      	mov	r0, r3
 800573e:	f004 fe0a 	bl	800a356 <USB_ReadDevInEPInterrupt>
 8005742:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b00      	cmp	r3, #0
 800574c:	d057      	beq.n	80057fe <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800574e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005750:	f003 030f 	and.w	r3, r3, #15
 8005754:	2201      	movs	r2, #1
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005762:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	43db      	mvns	r3, r3
 8005768:	69f9      	ldr	r1, [r7, #28]
 800576a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800576e:	4013      	ands	r3, r2
 8005770:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005774:	015a      	lsls	r2, r3, #5
 8005776:	69fb      	ldr	r3, [r7, #28]
 8005778:	4413      	add	r3, r2
 800577a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800577e:	461a      	mov	r2, r3
 8005780:	2301      	movs	r3, #1
 8005782:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	799b      	ldrb	r3, [r3, #6]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d132      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800578c:	6879      	ldr	r1, [r7, #4]
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	3320      	adds	r3, #32
 800579c:	6819      	ldr	r1, [r3, #0]
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057a2:	4613      	mov	r3, r2
 80057a4:	00db      	lsls	r3, r3, #3
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	4403      	add	r3, r0
 80057ac:	331c      	adds	r3, #28
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4419      	add	r1, r3
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b6:	4613      	mov	r3, r2
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	009b      	lsls	r3, r3, #2
 80057be:	4403      	add	r3, r0
 80057c0:	3320      	adds	r3, #32
 80057c2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d113      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x3a2>
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ce:	4613      	mov	r3, r2
 80057d0:	00db      	lsls	r3, r3, #3
 80057d2:	4413      	add	r3, r2
 80057d4:	009b      	lsls	r3, r3, #2
 80057d6:	440b      	add	r3, r1
 80057d8:	3324      	adds	r3, #36	@ 0x24
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d108      	bne.n	80057f2 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6818      	ldr	r0, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80057ea:	461a      	mov	r2, r3
 80057ec:	2101      	movs	r1, #1
 80057ee:	f004 fe11 	bl	800a414 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80057f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f4:	b2db      	uxtb	r3, r3
 80057f6:	4619      	mov	r1, r3
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f009 fae4 	bl	800edc6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	f003 0308 	and.w	r3, r3, #8
 8005804:	2b00      	cmp	r3, #0
 8005806:	d008      	beq.n	800581a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800580a:	015a      	lsls	r2, r3, #5
 800580c:	69fb      	ldr	r3, [r7, #28]
 800580e:	4413      	add	r3, r2
 8005810:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005814:	461a      	mov	r2, r3
 8005816:	2308      	movs	r3, #8
 8005818:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f003 0310 	and.w	r3, r3, #16
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	2310      	movs	r3, #16
 8005834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	2340      	movs	r3, #64	@ 0x40
 8005850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0302 	and.w	r3, r3, #2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d023      	beq.n	80058a4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800585c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800585e:	6a38      	ldr	r0, [r7, #32]
 8005860:	f003 fdf8 	bl	8009454 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005864:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005866:	4613      	mov	r3, r2
 8005868:	00db      	lsls	r3, r3, #3
 800586a:	4413      	add	r3, r2
 800586c:	009b      	lsls	r3, r3, #2
 800586e:	3310      	adds	r3, #16
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4413      	add	r3, r2
 8005874:	3304      	adds	r3, #4
 8005876:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	78db      	ldrb	r3, [r3, #3]
 800587c:	2b01      	cmp	r3, #1
 800587e:	d108      	bne.n	8005892 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	2200      	movs	r2, #0
 8005884:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005886:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005888:	b2db      	uxtb	r3, r3
 800588a:	4619      	mov	r1, r3
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f009 fb27 	bl	800eee0 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	015a      	lsls	r2, r3, #5
 8005896:	69fb      	ldr	r3, [r7, #28]
 8005898:	4413      	add	r3, r2
 800589a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800589e:	461a      	mov	r2, r3
 80058a0:	2302      	movs	r3, #2
 80058a2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d003      	beq.n	80058b6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058ae:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 fcbd 	bl	8006230 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	3301      	adds	r3, #1
 80058ba:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	085b      	lsrs	r3, r3, #1
 80058c0:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80058c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	f47f af2e 	bne.w	8005726 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f004 fcdc 	bl	800a28c <USB_ReadInterrupts>
 80058d4:	4603      	mov	r3, r0
 80058d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058de:	d122      	bne.n	8005926 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058e0:	69fb      	ldr	r3, [r7, #28]
 80058e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058e6:	685b      	ldr	r3, [r3, #4]
 80058e8:	69fa      	ldr	r2, [r7, #28]
 80058ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d108      	bne.n	8005910 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2200      	movs	r2, #0
 8005902:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005906:	2100      	movs	r1, #0
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 fea3 	bl	8006654 <HAL_PCDEx_LPM_Callback>
 800590e:	e002      	b.n	8005916 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005910:	6878      	ldr	r0, [r7, #4]
 8005912:	f009 fac5 	bl	800eea0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	695a      	ldr	r2, [r3, #20]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005924:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4618      	mov	r0, r3
 800592c:	f004 fcae 	bl	800a28c <USB_ReadInterrupts>
 8005930:	4603      	mov	r3, r0
 8005932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005936:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800593a:	d112      	bne.n	8005962 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f003 0301 	and.w	r3, r3, #1
 8005948:	2b01      	cmp	r3, #1
 800594a:	d102      	bne.n	8005952 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800594c:	6878      	ldr	r0, [r7, #4]
 800594e:	f009 fa81 	bl	800ee54 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	695a      	ldr	r2, [r3, #20]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005960:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f004 fc90 	bl	800a28c <USB_ReadInterrupts>
 800596c:	4603      	mov	r3, r0
 800596e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005972:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005976:	f040 80b7 	bne.w	8005ae8 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005980:	685b      	ldr	r3, [r3, #4]
 8005982:	69fa      	ldr	r2, [r7, #28]
 8005984:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005988:	f023 0301 	bic.w	r3, r3, #1
 800598c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2110      	movs	r1, #16
 8005994:	4618      	mov	r0, r3
 8005996:	f003 fd5d 	bl	8009454 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800599a:	2300      	movs	r3, #0
 800599c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800599e:	e046      	b.n	8005a2e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a2:	015a      	lsls	r2, r3, #5
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	4413      	add	r3, r2
 80059a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ac:	461a      	mov	r2, r3
 80059ae:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059b2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059b6:	015a      	lsls	r2, r3, #5
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	4413      	add	r3, r2
 80059bc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059c4:	0151      	lsls	r1, r2, #5
 80059c6:	69fa      	ldr	r2, [r7, #28]
 80059c8:	440a      	add	r2, r1
 80059ca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ce:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059d2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d6:	015a      	lsls	r2, r3, #5
 80059d8:	69fb      	ldr	r3, [r7, #28]
 80059da:	4413      	add	r3, r2
 80059dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059e0:	461a      	mov	r2, r3
 80059e2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059e6:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ea:	015a      	lsls	r2, r3, #5
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	4413      	add	r3, r2
 80059f0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059f8:	0151      	lsls	r1, r2, #5
 80059fa:	69fa      	ldr	r2, [r7, #28]
 80059fc:	440a      	add	r2, r1
 80059fe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a0a:	015a      	lsls	r2, r3, #5
 8005a0c:	69fb      	ldr	r3, [r7, #28]
 8005a0e:	4413      	add	r3, r2
 8005a10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a18:	0151      	lsls	r1, r2, #5
 8005a1a:	69fa      	ldr	r2, [r7, #28]
 8005a1c:	440a      	add	r2, r1
 8005a1e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a26:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a2a:	3301      	adds	r3, #1
 8005a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	791b      	ldrb	r3, [r3, #4]
 8005a32:	461a      	mov	r2, r3
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	4293      	cmp	r3, r2
 8005a38:	d3b2      	bcc.n	80059a0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a40:	69db      	ldr	r3, [r3, #28]
 8005a42:	69fa      	ldr	r2, [r7, #28]
 8005a44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a48:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a4c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	7bdb      	ldrb	r3, [r3, #15]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d016      	beq.n	8005a84 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a60:	69fa      	ldr	r2, [r7, #28]
 8005a62:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a66:	f043 030b 	orr.w	r3, r3, #11
 8005a6a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a6e:	69fb      	ldr	r3, [r7, #28]
 8005a70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a76:	69fa      	ldr	r2, [r7, #28]
 8005a78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a7c:	f043 030b 	orr.w	r3, r3, #11
 8005a80:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a82:	e015      	b.n	8005ab0 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005a84:	69fb      	ldr	r3, [r7, #28]
 8005a86:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	69fa      	ldr	r2, [r7, #28]
 8005a8e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a92:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005a96:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005a9a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa2:	691b      	ldr	r3, [r3, #16]
 8005aa4:	69fa      	ldr	r2, [r7, #28]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aaa:	f043 030b 	orr.w	r3, r3, #11
 8005aae:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69fa      	ldr	r2, [r7, #28]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005abe:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ac2:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6818      	ldr	r0, [r3, #0]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ad2:	461a      	mov	r2, r3
 8005ad4:	f004 fc9e 	bl	800a414 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	695a      	ldr	r2, [r3, #20]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005ae6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4618      	mov	r0, r3
 8005aee:	f004 fbcd 	bl	800a28c <USB_ReadInterrupts>
 8005af2:	4603      	mov	r3, r0
 8005af4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005af8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005afc:	d123      	bne.n	8005b46 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f004 fc63 	bl	800a3ce <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f003 fd1a 	bl	8009546 <USB_GetDevSpeed>
 8005b12:	4603      	mov	r3, r0
 8005b14:	461a      	mov	r2, r3
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681c      	ldr	r4, [r3, #0]
 8005b1e:	f001 f9c9 	bl	8006eb4 <HAL_RCC_GetHCLKFreq>
 8005b22:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b28:	461a      	mov	r2, r3
 8005b2a:	4620      	mov	r0, r4
 8005b2c:	f003 fa1e 	bl	8008f6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f009 f970 	bl	800ee16 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695a      	ldr	r2, [r3, #20]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005b44:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	f004 fb9e 	bl	800a28c <USB_ReadInterrupts>
 8005b50:	4603      	mov	r3, r0
 8005b52:	f003 0308 	and.w	r3, r3, #8
 8005b56:	2b08      	cmp	r3, #8
 8005b58:	d10a      	bne.n	8005b70 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f009 f94d 	bl	800edfa <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f002 0208 	and.w	r2, r2, #8
 8005b6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	4618      	mov	r0, r3
 8005b76:	f004 fb89 	bl	800a28c <USB_ReadInterrupts>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b80:	2b80      	cmp	r3, #128	@ 0x80
 8005b82:	d123      	bne.n	8005bcc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005b84:	6a3b      	ldr	r3, [r7, #32]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005b8c:	6a3b      	ldr	r3, [r7, #32]
 8005b8e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b90:	2301      	movs	r3, #1
 8005b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b94:	e014      	b.n	8005bc0 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005b96:	6879      	ldr	r1, [r7, #4]
 8005b98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	00db      	lsls	r3, r3, #3
 8005b9e:	4413      	add	r3, r2
 8005ba0:	009b      	lsls	r3, r3, #2
 8005ba2:	440b      	add	r3, r1
 8005ba4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d105      	bne.n	8005bba <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 fb0a 	bl	80061ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbc:	3301      	adds	r3, #1
 8005bbe:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	791b      	ldrb	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d3e4      	bcc.n	8005b96 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	f004 fb5b 	bl	800a28c <USB_ReadInterrupts>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bdc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005be0:	d13c      	bne.n	8005c5c <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005be2:	2301      	movs	r3, #1
 8005be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8005be6:	e02b      	b.n	8005c40 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bea:	015a      	lsls	r2, r3, #5
 8005bec:	69fb      	ldr	r3, [r7, #28]
 8005bee:	4413      	add	r3, r2
 8005bf0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	009b      	lsls	r3, r3, #2
 8005c04:	440b      	add	r3, r1
 8005c06:	3318      	adds	r3, #24
 8005c08:	781b      	ldrb	r3, [r3, #0]
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d115      	bne.n	8005c3a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c0e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	da12      	bge.n	8005c3a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	3317      	adds	r3, #23
 8005c24:	2201      	movs	r2, #1
 8005c26:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	4619      	mov	r1, r3
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 faca 	bl	80061ce <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	791b      	ldrb	r3, [r3, #4]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	4293      	cmp	r3, r2
 8005c4a:	d3cd      	bcc.n	8005be8 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	695a      	ldr	r2, [r3, #20]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c5a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4618      	mov	r0, r3
 8005c62:	f004 fb13 	bl	800a28c <USB_ReadInterrupts>
 8005c66:	4603      	mov	r3, r0
 8005c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c6c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c70:	d156      	bne.n	8005d20 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c72:	2301      	movs	r3, #1
 8005c74:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c76:	e045      	b.n	8005d04 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7a:	015a      	lsls	r2, r3, #5
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	4413      	add	r3, r2
 8005c80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c88:	6879      	ldr	r1, [r7, #4]
 8005c8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c8c:	4613      	mov	r3, r2
 8005c8e:	00db      	lsls	r3, r3, #3
 8005c90:	4413      	add	r3, r2
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	440b      	add	r3, r1
 8005c96:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005c9a:	781b      	ldrb	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d12e      	bne.n	8005cfe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005ca0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	da2b      	bge.n	8005cfe <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005ca6:	69bb      	ldr	r3, [r7, #24]
 8005ca8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005cb2:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d121      	bne.n	8005cfe <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cba:	6879      	ldr	r1, [r7, #4]
 8005cbc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cbe:	4613      	mov	r3, r2
 8005cc0:	00db      	lsls	r3, r3, #3
 8005cc2:	4413      	add	r3, r2
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	440b      	add	r3, r1
 8005cc8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ccc:	2201      	movs	r2, #1
 8005cce:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005cd0:	6a3b      	ldr	r3, [r7, #32]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cd8:	6a3b      	ldr	r3, [r7, #32]
 8005cda:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cdc:	6a3b      	ldr	r3, [r7, #32]
 8005cde:	695b      	ldr	r3, [r3, #20]
 8005ce0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d10a      	bne.n	8005cfe <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cee:	685b      	ldr	r3, [r3, #4]
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005cf6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005cfa:	6053      	str	r3, [r2, #4]
            break;
 8005cfc:	e008      	b.n	8005d10 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d00:	3301      	adds	r3, #1
 8005d02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	791b      	ldrb	r3, [r3, #4]
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d3b3      	bcc.n	8005c78 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695a      	ldr	r2, [r3, #20]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d1e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f004 fab1 	bl	800a28c <USB_ReadInterrupts>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d34:	d10a      	bne.n	8005d4c <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f009 f8e4 	bl	800ef04 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695a      	ldr	r2, [r3, #20]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4618      	mov	r0, r3
 8005d52:	f004 fa9b 	bl	800a28c <USB_ReadInterrupts>
 8005d56:	4603      	mov	r3, r0
 8005d58:	f003 0304 	and.w	r3, r3, #4
 8005d5c:	2b04      	cmp	r3, #4
 8005d5e:	d115      	bne.n	8005d8c <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d68:	69bb      	ldr	r3, [r7, #24]
 8005d6a:	f003 0304 	and.w	r3, r3, #4
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f009 f8d4 	bl	800ef20 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6859      	ldr	r1, [r3, #4]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	69ba      	ldr	r2, [r7, #24]
 8005d84:	430a      	orrs	r2, r1
 8005d86:	605a      	str	r2, [r3, #4]
 8005d88:	e000      	b.n	8005d8c <HAL_PCD_IRQHandler+0x93c>
      return;
 8005d8a:	bf00      	nop
    }
  }
}
 8005d8c:	3734      	adds	r7, #52	@ 0x34
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	bd90      	pop	{r4, r7, pc}

08005d92 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005d92:	b580      	push	{r7, lr}
 8005d94:	b082      	sub	sp, #8
 8005d96:	af00      	add	r7, sp, #0
 8005d98:	6078      	str	r0, [r7, #4]
 8005d9a:	460b      	mov	r3, r1
 8005d9c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005da4:	2b01      	cmp	r3, #1
 8005da6:	d101      	bne.n	8005dac <HAL_PCD_SetAddress+0x1a>
 8005da8:	2302      	movs	r3, #2
 8005daa:	e012      	b.n	8005dd2 <HAL_PCD_SetAddress+0x40>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	78fa      	ldrb	r2, [r7, #3]
 8005dc0:	4611      	mov	r1, r2
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	f004 f9fa 	bl	800a1bc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dd0:	2300      	movs	r3, #0
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3708      	adds	r7, #8
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}

08005dda <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005dda:	b580      	push	{r7, lr}
 8005ddc:	b084      	sub	sp, #16
 8005dde:	af00      	add	r7, sp, #0
 8005de0:	6078      	str	r0, [r7, #4]
 8005de2:	4608      	mov	r0, r1
 8005de4:	4611      	mov	r1, r2
 8005de6:	461a      	mov	r2, r3
 8005de8:	4603      	mov	r3, r0
 8005dea:	70fb      	strb	r3, [r7, #3]
 8005dec:	460b      	mov	r3, r1
 8005dee:	803b      	strh	r3, [r7, #0]
 8005df0:	4613      	mov	r3, r2
 8005df2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005df4:	2300      	movs	r3, #0
 8005df6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	da0f      	bge.n	8005e20 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e00:	78fb      	ldrb	r3, [r7, #3]
 8005e02:	f003 020f 	and.w	r2, r3, #15
 8005e06:	4613      	mov	r3, r2
 8005e08:	00db      	lsls	r3, r3, #3
 8005e0a:	4413      	add	r3, r2
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	3310      	adds	r3, #16
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	4413      	add	r3, r2
 8005e14:	3304      	adds	r3, #4
 8005e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	705a      	strb	r2, [r3, #1]
 8005e1e:	e00f      	b.n	8005e40 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e20:	78fb      	ldrb	r3, [r7, #3]
 8005e22:	f003 020f 	and.w	r2, r3, #15
 8005e26:	4613      	mov	r3, r2
 8005e28:	00db      	lsls	r3, r3, #3
 8005e2a:	4413      	add	r3, r2
 8005e2c:	009b      	lsls	r3, r3, #2
 8005e2e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4413      	add	r3, r2
 8005e36:	3304      	adds	r3, #4
 8005e38:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e40:	78fb      	ldrb	r3, [r7, #3]
 8005e42:	f003 030f 	and.w	r3, r3, #15
 8005e46:	b2da      	uxtb	r2, r3
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e4c:	883b      	ldrh	r3, [r7, #0]
 8005e4e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	78ba      	ldrb	r2, [r7, #2]
 8005e5a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	785b      	ldrb	r3, [r3, #1]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d004      	beq.n	8005e6e <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	781b      	ldrb	r3, [r3, #0]
 8005e68:	461a      	mov	r2, r3
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e6e:	78bb      	ldrb	r3, [r7, #2]
 8005e70:	2b02      	cmp	r3, #2
 8005e72:	d102      	bne.n	8005e7a <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2200      	movs	r2, #0
 8005e78:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d101      	bne.n	8005e88 <HAL_PCD_EP_Open+0xae>
 8005e84:	2302      	movs	r3, #2
 8005e86:	e00e      	b.n	8005ea6 <HAL_PCD_EP_Open+0xcc>
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68f9      	ldr	r1, [r7, #12]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f003 fb7a 	bl	8009590 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005ea4:	7afb      	ldrb	r3, [r7, #11]
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3710      	adds	r7, #16
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bd80      	pop	{r7, pc}

08005eae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b084      	sub	sp, #16
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005eba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	da0f      	bge.n	8005ee2 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ec2:	78fb      	ldrb	r3, [r7, #3]
 8005ec4:	f003 020f 	and.w	r2, r3, #15
 8005ec8:	4613      	mov	r3, r2
 8005eca:	00db      	lsls	r3, r3, #3
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	3310      	adds	r3, #16
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	4413      	add	r3, r2
 8005ed6:	3304      	adds	r3, #4
 8005ed8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2201      	movs	r2, #1
 8005ede:	705a      	strb	r2, [r3, #1]
 8005ee0:	e00f      	b.n	8005f02 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005ee2:	78fb      	ldrb	r3, [r7, #3]
 8005ee4:	f003 020f 	and.w	r2, r3, #15
 8005ee8:	4613      	mov	r3, r2
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	4413      	add	r3, r2
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ef4:	687a      	ldr	r2, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3304      	adds	r3, #4
 8005efa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	2200      	movs	r2, #0
 8005f00:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f02:	78fb      	ldrb	r3, [r7, #3]
 8005f04:	f003 030f 	and.w	r3, r3, #15
 8005f08:	b2da      	uxtb	r2, r3
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d101      	bne.n	8005f1c <HAL_PCD_EP_Close+0x6e>
 8005f18:	2302      	movs	r3, #2
 8005f1a:	e00e      	b.n	8005f3a <HAL_PCD_EP_Close+0x8c>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68f9      	ldr	r1, [r7, #12]
 8005f2a:	4618      	mov	r0, r3
 8005f2c:	f003 fbb8 	bl	80096a0 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005f38:	2300      	movs	r3, #0
}
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	3710      	adds	r7, #16
 8005f3e:	46bd      	mov	sp, r7
 8005f40:	bd80      	pop	{r7, pc}

08005f42 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b086      	sub	sp, #24
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	607a      	str	r2, [r7, #4]
 8005f4c:	603b      	str	r3, [r7, #0]
 8005f4e:	460b      	mov	r3, r1
 8005f50:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f52:	7afb      	ldrb	r3, [r7, #11]
 8005f54:	f003 020f 	and.w	r2, r3, #15
 8005f58:	4613      	mov	r3, r2
 8005f5a:	00db      	lsls	r3, r3, #3
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f64:	68fa      	ldr	r2, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	3304      	adds	r3, #4
 8005f6a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	687a      	ldr	r2, [r7, #4]
 8005f70:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	683a      	ldr	r2, [r7, #0]
 8005f76:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f78:	697b      	ldr	r3, [r7, #20]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f7e:	697b      	ldr	r3, [r7, #20]
 8005f80:	2200      	movs	r2, #0
 8005f82:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f84:	7afb      	ldrb	r3, [r7, #11]
 8005f86:	f003 030f 	and.w	r3, r3, #15
 8005f8a:	b2da      	uxtb	r2, r3
 8005f8c:	697b      	ldr	r3, [r7, #20]
 8005f8e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	799b      	ldrb	r3, [r3, #6]
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d102      	bne.n	8005f9e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f98:	687a      	ldr	r2, [r7, #4]
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	6818      	ldr	r0, [r3, #0]
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	799b      	ldrb	r3, [r3, #6]
 8005fa6:	461a      	mov	r2, r3
 8005fa8:	6979      	ldr	r1, [r7, #20]
 8005faa:	f003 fc55 	bl	8009858 <USB_EPStartXfer>

  return HAL_OK;
 8005fae:	2300      	movs	r3, #0
}
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	3718      	adds	r7, #24
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	bd80      	pop	{r7, pc}

08005fb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b083      	sub	sp, #12
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fc4:	78fb      	ldrb	r3, [r7, #3]
 8005fc6:	f003 020f 	and.w	r2, r3, #15
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	607a      	str	r2, [r7, #4]
 8005ff2:	603b      	str	r3, [r7, #0]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ff8:	7afb      	ldrb	r3, [r7, #11]
 8005ffa:	f003 020f 	and.w	r2, r3, #15
 8005ffe:	4613      	mov	r3, r2
 8006000:	00db      	lsls	r3, r3, #3
 8006002:	4413      	add	r3, r2
 8006004:	009b      	lsls	r3, r3, #2
 8006006:	3310      	adds	r3, #16
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	3304      	adds	r3, #4
 800600e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006010:	697b      	ldr	r3, [r7, #20]
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006016:	697b      	ldr	r3, [r7, #20]
 8006018:	683a      	ldr	r2, [r7, #0]
 800601a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	2200      	movs	r2, #0
 8006020:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	2201      	movs	r2, #1
 8006026:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006028:	7afb      	ldrb	r3, [r7, #11]
 800602a:	f003 030f 	and.w	r3, r3, #15
 800602e:	b2da      	uxtb	r2, r3
 8006030:	697b      	ldr	r3, [r7, #20]
 8006032:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	799b      	ldrb	r3, [r3, #6]
 8006038:	2b01      	cmp	r3, #1
 800603a:	d102      	bne.n	8006042 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6818      	ldr	r0, [r3, #0]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	799b      	ldrb	r3, [r3, #6]
 800604a:	461a      	mov	r2, r3
 800604c:	6979      	ldr	r1, [r7, #20]
 800604e:	f003 fc03 	bl	8009858 <USB_EPStartXfer>

  return HAL_OK;
 8006052:	2300      	movs	r3, #0
}
 8006054:	4618      	mov	r0, r3
 8006056:	3718      	adds	r7, #24
 8006058:	46bd      	mov	sp, r7
 800605a:	bd80      	pop	{r7, pc}

0800605c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	460b      	mov	r3, r1
 8006066:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006068:	78fb      	ldrb	r3, [r7, #3]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	7912      	ldrb	r2, [r2, #4]
 8006072:	4293      	cmp	r3, r2
 8006074:	d901      	bls.n	800607a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e04f      	b.n	800611a <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800607a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	da0f      	bge.n	80060a2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006082:	78fb      	ldrb	r3, [r7, #3]
 8006084:	f003 020f 	and.w	r2, r3, #15
 8006088:	4613      	mov	r3, r2
 800608a:	00db      	lsls	r3, r3, #3
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	3310      	adds	r3, #16
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	4413      	add	r3, r2
 8006096:	3304      	adds	r3, #4
 8006098:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	2201      	movs	r2, #1
 800609e:	705a      	strb	r2, [r3, #1]
 80060a0:	e00d      	b.n	80060be <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060a2:	78fa      	ldrb	r2, [r7, #3]
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060b0:	687a      	ldr	r2, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	3304      	adds	r3, #4
 80060b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2200      	movs	r2, #0
 80060bc:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2201      	movs	r2, #1
 80060c2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c4:	78fb      	ldrb	r3, [r7, #3]
 80060c6:	f003 030f 	and.w	r3, r3, #15
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060d6:	2b01      	cmp	r3, #1
 80060d8:	d101      	bne.n	80060de <HAL_PCD_EP_SetStall+0x82>
 80060da:	2302      	movs	r3, #2
 80060dc:	e01d      	b.n	800611a <HAL_PCD_EP_SetStall+0xbe>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2201      	movs	r2, #1
 80060e2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68f9      	ldr	r1, [r7, #12]
 80060ec:	4618      	mov	r0, r3
 80060ee:	f003 ff91 	bl	800a014 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060f2:	78fb      	ldrb	r3, [r7, #3]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d109      	bne.n	8006110 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6818      	ldr	r0, [r3, #0]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7999      	ldrb	r1, [r3, #6]
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800610a:	461a      	mov	r2, r3
 800610c:	f004 f982 	bl	800a414 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800612e:	78fb      	ldrb	r3, [r7, #3]
 8006130:	f003 030f 	and.w	r3, r3, #15
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	7912      	ldrb	r2, [r2, #4]
 8006138:	4293      	cmp	r3, r2
 800613a:	d901      	bls.n	8006140 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800613c:	2301      	movs	r3, #1
 800613e:	e042      	b.n	80061c6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006140:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006144:	2b00      	cmp	r3, #0
 8006146:	da0f      	bge.n	8006168 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006148:	78fb      	ldrb	r3, [r7, #3]
 800614a:	f003 020f 	and.w	r2, r3, #15
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	3310      	adds	r3, #16
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	4413      	add	r3, r2
 800615c:	3304      	adds	r3, #4
 800615e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	2201      	movs	r2, #1
 8006164:	705a      	strb	r2, [r3, #1]
 8006166:	e00f      	b.n	8006188 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006168:	78fb      	ldrb	r3, [r7, #3]
 800616a:	f003 020f 	and.w	r2, r3, #15
 800616e:	4613      	mov	r3, r2
 8006170:	00db      	lsls	r3, r3, #3
 8006172:	4413      	add	r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800617a:	687a      	ldr	r2, [r7, #4]
 800617c:	4413      	add	r3, r2
 800617e:	3304      	adds	r3, #4
 8006180:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	2200      	movs	r2, #0
 800618c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800618e:	78fb      	ldrb	r3, [r7, #3]
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	b2da      	uxtb	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_PCD_EP_ClrStall+0x86>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e00e      	b.n	80061c6 <HAL_PCD_EP_ClrStall+0xa4>
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68f9      	ldr	r1, [r7, #12]
 80061b6:	4618      	mov	r0, r3
 80061b8:	f003 ff9a 	bl	800a0f0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2200      	movs	r2, #0
 80061c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3710      	adds	r7, #16
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b084      	sub	sp, #16
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	460b      	mov	r3, r1
 80061d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061da:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	da0c      	bge.n	80061fc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061e2:	78fb      	ldrb	r3, [r7, #3]
 80061e4:	f003 020f 	and.w	r2, r3, #15
 80061e8:	4613      	mov	r3, r2
 80061ea:	00db      	lsls	r3, r3, #3
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	3310      	adds	r3, #16
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	4413      	add	r3, r2
 80061f6:	3304      	adds	r3, #4
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e00c      	b.n	8006216 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061fc:	78fb      	ldrb	r3, [r7, #3]
 80061fe:	f003 020f 	and.w	r2, r3, #15
 8006202:	4613      	mov	r3, r2
 8006204:	00db      	lsls	r3, r3, #3
 8006206:	4413      	add	r3, r2
 8006208:	009b      	lsls	r3, r3, #2
 800620a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	68f9      	ldr	r1, [r7, #12]
 800621c:	4618      	mov	r0, r3
 800621e:	f003 fdb9 	bl	8009d94 <USB_EPStopXfer>
 8006222:	4603      	mov	r3, r0
 8006224:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006226:	7afb      	ldrb	r3, [r7, #11]
}
 8006228:	4618      	mov	r0, r3
 800622a:	3710      	adds	r7, #16
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b08a      	sub	sp, #40	@ 0x28
 8006234:	af02      	add	r7, sp, #8
 8006236:	6078      	str	r0, [r7, #4]
 8006238:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	4613      	mov	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	4413      	add	r3, r2
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	3310      	adds	r3, #16
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	4413      	add	r3, r2
 8006254:	3304      	adds	r3, #4
 8006256:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	695a      	ldr	r2, [r3, #20]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	429a      	cmp	r2, r3
 8006262:	d901      	bls.n	8006268 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e06b      	b.n	8006340 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	691a      	ldr	r2, [r3, #16]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	695b      	ldr	r3, [r3, #20]
 8006270:	1ad3      	subs	r3, r2, r3
 8006272:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	689b      	ldr	r3, [r3, #8]
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	429a      	cmp	r2, r3
 800627c:	d902      	bls.n	8006284 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	3303      	adds	r3, #3
 8006288:	089b      	lsrs	r3, r3, #2
 800628a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800628c:	e02a      	b.n	80062e4 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d902      	bls.n	80062aa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	689b      	ldr	r3, [r3, #8]
 80062a8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062aa:	69fb      	ldr	r3, [r7, #28]
 80062ac:	3303      	adds	r3, #3
 80062ae:	089b      	lsrs	r3, r3, #2
 80062b0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	68d9      	ldr	r1, [r3, #12]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	b2da      	uxtb	r2, r3
 80062ba:	69fb      	ldr	r3, [r7, #28]
 80062bc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062c2:	9300      	str	r3, [sp, #0]
 80062c4:	4603      	mov	r3, r0
 80062c6:	6978      	ldr	r0, [r7, #20]
 80062c8:	f003 fe0e 	bl	8009ee8 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	68da      	ldr	r2, [r3, #12]
 80062d0:	69fb      	ldr	r3, [r7, #28]
 80062d2:	441a      	add	r2, r3
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	695a      	ldr	r2, [r3, #20]
 80062dc:	69fb      	ldr	r3, [r7, #28]
 80062de:	441a      	add	r2, r3
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062f0:	699b      	ldr	r3, [r3, #24]
 80062f2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80062f4:	69ba      	ldr	r2, [r7, #24]
 80062f6:	429a      	cmp	r2, r3
 80062f8:	d809      	bhi.n	800630e <PCD_WriteEmptyTxFifo+0xde>
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	695a      	ldr	r2, [r3, #20]
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006302:	429a      	cmp	r2, r3
 8006304:	d203      	bcs.n	800630e <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	691b      	ldr	r3, [r3, #16]
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1bf      	bne.n	800628e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	691a      	ldr	r2, [r3, #16]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	695b      	ldr	r3, [r3, #20]
 8006316:	429a      	cmp	r2, r3
 8006318:	d811      	bhi.n	800633e <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	f003 030f 	and.w	r3, r3, #15
 8006320:	2201      	movs	r2, #1
 8006322:	fa02 f303 	lsl.w	r3, r2, r3
 8006326:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006328:	693b      	ldr	r3, [r7, #16]
 800632a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800632e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	43db      	mvns	r3, r3
 8006334:	6939      	ldr	r1, [r7, #16]
 8006336:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800633a:	4013      	ands	r3, r2
 800633c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3720      	adds	r7, #32
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b088      	sub	sp, #32
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800635c:	69fb      	ldr	r3, [r7, #28]
 800635e:	333c      	adds	r3, #60	@ 0x3c
 8006360:	3304      	adds	r3, #4
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	015a      	lsls	r2, r3, #5
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	4413      	add	r3, r2
 800636e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006372:	689b      	ldr	r3, [r3, #8]
 8006374:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	799b      	ldrb	r3, [r3, #6]
 800637a:	2b01      	cmp	r3, #1
 800637c:	d17b      	bne.n	8006476 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	f003 0308 	and.w	r3, r3, #8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d015      	beq.n	80063b4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006388:	697b      	ldr	r3, [r7, #20]
 800638a:	4a61      	ldr	r2, [pc, #388]	@ (8006510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800638c:	4293      	cmp	r3, r2
 800638e:	f240 80b9 	bls.w	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006392:	693b      	ldr	r3, [r7, #16]
 8006394:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006398:	2b00      	cmp	r3, #0
 800639a:	f000 80b3 	beq.w	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	015a      	lsls	r2, r3, #5
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	4413      	add	r3, r2
 80063a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063aa:	461a      	mov	r2, r3
 80063ac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063b0:	6093      	str	r3, [r2, #8]
 80063b2:	e0a7      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	f003 0320 	and.w	r3, r3, #32
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d009      	beq.n	80063d2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063be:	683b      	ldr	r3, [r7, #0]
 80063c0:	015a      	lsls	r2, r3, #5
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063ca:	461a      	mov	r2, r3
 80063cc:	2320      	movs	r3, #32
 80063ce:	6093      	str	r3, [r2, #8]
 80063d0:	e098      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063d8:	2b00      	cmp	r3, #0
 80063da:	f040 8093 	bne.w	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	4a4b      	ldr	r2, [pc, #300]	@ (8006510 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d90f      	bls.n	8006406 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063e6:	693b      	ldr	r3, [r7, #16]
 80063e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d00a      	beq.n	8006406 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063fc:	461a      	mov	r2, r3
 80063fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006402:	6093      	str	r3, [r2, #8]
 8006404:	e07e      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006406:	683a      	ldr	r2, [r7, #0]
 8006408:	4613      	mov	r3, r2
 800640a:	00db      	lsls	r3, r3, #3
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006414:	687a      	ldr	r2, [r7, #4]
 8006416:	4413      	add	r3, r2
 8006418:	3304      	adds	r3, #4
 800641a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	6a1a      	ldr	r2, [r3, #32]
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	0159      	lsls	r1, r3, #5
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	440b      	add	r3, r1
 8006428:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800642c:	691b      	ldr	r3, [r3, #16]
 800642e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006432:	1ad2      	subs	r2, r2, r3
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d114      	bne.n	8006468 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	691b      	ldr	r3, [r3, #16]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d109      	bne.n	800645a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6818      	ldr	r0, [r3, #0]
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006450:	461a      	mov	r2, r3
 8006452:	2101      	movs	r1, #1
 8006454:	f003 ffde 	bl	800a414 <USB_EP0_OutStart>
 8006458:	e006      	b.n	8006468 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	68da      	ldr	r2, [r3, #12]
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	695b      	ldr	r3, [r3, #20]
 8006462:	441a      	add	r2, r3
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006468:	683b      	ldr	r3, [r7, #0]
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f008 fc8e 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 8006474:	e046      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	4a26      	ldr	r2, [pc, #152]	@ (8006514 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d124      	bne.n	80064c8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006484:	2b00      	cmp	r3, #0
 8006486:	d00a      	beq.n	800649e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	015a      	lsls	r2, r3, #5
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	4413      	add	r3, r2
 8006490:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006494:	461a      	mov	r2, r3
 8006496:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800649a:	6093      	str	r3, [r2, #8]
 800649c:	e032      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	f003 0320 	and.w	r3, r3, #32
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d008      	beq.n	80064ba <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	015a      	lsls	r2, r3, #5
 80064ac:	69bb      	ldr	r3, [r7, #24]
 80064ae:	4413      	add	r3, r2
 80064b0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b4:	461a      	mov	r2, r3
 80064b6:	2320      	movs	r3, #32
 80064b8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	b2db      	uxtb	r3, r3
 80064be:	4619      	mov	r1, r3
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	f008 fc65 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
 80064c6:	e01d      	b.n	8006504 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d114      	bne.n	80064f8 <PCD_EP_OutXfrComplete_int+0x1b0>
 80064ce:	6879      	ldr	r1, [r7, #4]
 80064d0:	683a      	ldr	r2, [r7, #0]
 80064d2:	4613      	mov	r3, r2
 80064d4:	00db      	lsls	r3, r3, #3
 80064d6:	4413      	add	r3, r2
 80064d8:	009b      	lsls	r3, r3, #2
 80064da:	440b      	add	r3, r1
 80064dc:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d108      	bne.n	80064f8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6818      	ldr	r0, [r3, #0]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064f0:	461a      	mov	r2, r3
 80064f2:	2100      	movs	r1, #0
 80064f4:	f003 ff8e 	bl	800a414 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	4619      	mov	r1, r3
 80064fe:	6878      	ldr	r0, [r7, #4]
 8006500:	f008 fc46 	bl	800ed90 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3720      	adds	r7, #32
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	4f54300a 	.word	0x4f54300a
 8006514:	4f54310a 	.word	0x4f54310a

08006518 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
 8006520:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	333c      	adds	r3, #60	@ 0x3c
 8006530:	3304      	adds	r3, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	015a      	lsls	r2, r3, #5
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	4413      	add	r3, r2
 800653e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006542:	689b      	ldr	r3, [r3, #8]
 8006544:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <PCD_EP_OutSetupPacket_int+0x88>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d90e      	bls.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006554:	2b00      	cmp	r3, #0
 8006556:	d009      	beq.n	800656c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4413      	add	r3, r2
 8006560:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006564:	461a      	mov	r2, r3
 8006566:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800656a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f008 fbfd 	bl	800ed6c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	4a0a      	ldr	r2, [pc, #40]	@ (80065a0 <PCD_EP_OutSetupPacket_int+0x88>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d90c      	bls.n	8006594 <PCD_EP_OutSetupPacket_int+0x7c>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	799b      	ldrb	r3, [r3, #6]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d108      	bne.n	8006594 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6818      	ldr	r0, [r3, #0]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800658c:	461a      	mov	r2, r3
 800658e:	2101      	movs	r1, #1
 8006590:	f003 ff40 	bl	800a414 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006594:	2300      	movs	r3, #0
}
 8006596:	4618      	mov	r0, r3
 8006598:	3718      	adds	r7, #24
 800659a:	46bd      	mov	sp, r7
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	4f54300a 	.word	0x4f54300a

080065a4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
 80065ac:	460b      	mov	r3, r1
 80065ae:	70fb      	strb	r3, [r7, #3]
 80065b0:	4613      	mov	r3, r2
 80065b2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065ba:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065bc:	78fb      	ldrb	r3, [r7, #3]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d107      	bne.n	80065d2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065c2:	883b      	ldrh	r3, [r7, #0]
 80065c4:	0419      	lsls	r1, r3, #16
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	68ba      	ldr	r2, [r7, #8]
 80065cc:	430a      	orrs	r2, r1
 80065ce:	629a      	str	r2, [r3, #40]	@ 0x28
 80065d0:	e028      	b.n	8006624 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	0c1b      	lsrs	r3, r3, #16
 80065da:	68ba      	ldr	r2, [r7, #8]
 80065dc:	4413      	add	r3, r2
 80065de:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065e0:	2300      	movs	r3, #0
 80065e2:	73fb      	strb	r3, [r7, #15]
 80065e4:	e00d      	b.n	8006602 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681a      	ldr	r2, [r3, #0]
 80065ea:	7bfb      	ldrb	r3, [r7, #15]
 80065ec:	3340      	adds	r3, #64	@ 0x40
 80065ee:	009b      	lsls	r3, r3, #2
 80065f0:	4413      	add	r3, r2
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	0c1b      	lsrs	r3, r3, #16
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	3301      	adds	r3, #1
 8006600:	73fb      	strb	r3, [r7, #15]
 8006602:	7bfa      	ldrb	r2, [r7, #15]
 8006604:	78fb      	ldrb	r3, [r7, #3]
 8006606:	3b01      	subs	r3, #1
 8006608:	429a      	cmp	r2, r3
 800660a:	d3ec      	bcc.n	80065e6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800660c:	883b      	ldrh	r3, [r7, #0]
 800660e:	0418      	lsls	r0, r3, #16
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6819      	ldr	r1, [r3, #0]
 8006614:	78fb      	ldrb	r3, [r7, #3]
 8006616:	3b01      	subs	r3, #1
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	4302      	orrs	r2, r0
 800661c:	3340      	adds	r3, #64	@ 0x40
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	440b      	add	r3, r1
 8006622:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006624:	2300      	movs	r3, #0
}
 8006626:	4618      	mov	r0, r3
 8006628:	3714      	adds	r7, #20
 800662a:	46bd      	mov	sp, r7
 800662c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006630:	4770      	bx	lr

08006632 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
 800663a:	460b      	mov	r3, r1
 800663c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	887a      	ldrh	r2, [r7, #2]
 8006644:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	370c      	adds	r7, #12
 800664c:	46bd      	mov	sp, r7
 800664e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006652:	4770      	bx	lr

08006654 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006660:	bf00      	nop
 8006662:	370c      	adds	r7, #12
 8006664:	46bd      	mov	sp, r7
 8006666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666a:	4770      	bx	lr

0800666c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e267      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f003 0301 	and.w	r3, r3, #1
 8006686:	2b00      	cmp	r3, #0
 8006688:	d075      	beq.n	8006776 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800668a:	4b88      	ldr	r3, [pc, #544]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	f003 030c 	and.w	r3, r3, #12
 8006692:	2b04      	cmp	r3, #4
 8006694:	d00c      	beq.n	80066b0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006696:	4b85      	ldr	r3, [pc, #532]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800669e:	2b08      	cmp	r3, #8
 80066a0:	d112      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066a2:	4b82      	ldr	r3, [pc, #520]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066a4:	685b      	ldr	r3, [r3, #4]
 80066a6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066aa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ae:	d10b      	bne.n	80066c8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b0:	4b7e      	ldr	r3, [pc, #504]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d05b      	beq.n	8006774 <HAL_RCC_OscConfig+0x108>
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d157      	bne.n	8006774 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e242      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066d0:	d106      	bne.n	80066e0 <HAL_RCC_OscConfig+0x74>
 80066d2:	4b76      	ldr	r3, [pc, #472]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	4a75      	ldr	r2, [pc, #468]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066d8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066dc:	6013      	str	r3, [r2, #0]
 80066de:	e01d      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80066e8:	d10c      	bne.n	8006704 <HAL_RCC_OscConfig+0x98>
 80066ea:	4b70      	ldr	r3, [pc, #448]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	4a6f      	ldr	r2, [pc, #444]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80066f4:	6013      	str	r3, [r2, #0]
 80066f6:	4b6d      	ldr	r3, [pc, #436]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a6c      	ldr	r2, [pc, #432]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80066fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006700:	6013      	str	r3, [r2, #0]
 8006702:	e00b      	b.n	800671c <HAL_RCC_OscConfig+0xb0>
 8006704:	4b69      	ldr	r3, [pc, #420]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a68      	ldr	r2, [pc, #416]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 800670a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800670e:	6013      	str	r3, [r2, #0]
 8006710:	4b66      	ldr	r3, [pc, #408]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a65      	ldr	r2, [pc, #404]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006716:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800671a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d013      	beq.n	800674c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fd fec6 	bl	80044b4 <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800672c:	f7fd fec2 	bl	80044b4 <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b64      	cmp	r3, #100	@ 0x64
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e207      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800673e:	4b5b      	ldr	r3, [pc, #364]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d0f0      	beq.n	800672c <HAL_RCC_OscConfig+0xc0>
 800674a:	e014      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800674c:	f7fd feb2 	bl	80044b4 <HAL_GetTick>
 8006750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006752:	e008      	b.n	8006766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006754:	f7fd feae 	bl	80044b4 <HAL_GetTick>
 8006758:	4602      	mov	r2, r0
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	1ad3      	subs	r3, r2, r3
 800675e:	2b64      	cmp	r3, #100	@ 0x64
 8006760:	d901      	bls.n	8006766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006762:	2303      	movs	r3, #3
 8006764:	e1f3      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006766:	4b51      	ldr	r3, [pc, #324]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800676e:	2b00      	cmp	r3, #0
 8006770:	d1f0      	bne.n	8006754 <HAL_RCC_OscConfig+0xe8>
 8006772:	e000      	b.n	8006776 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0302 	and.w	r3, r3, #2
 800677e:	2b00      	cmp	r3, #0
 8006780:	d063      	beq.n	800684a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006782:	4b4a      	ldr	r3, [pc, #296]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006784:	689b      	ldr	r3, [r3, #8]
 8006786:	f003 030c 	and.w	r3, r3, #12
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00b      	beq.n	80067a6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800678e:	4b47      	ldr	r3, [pc, #284]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006790:	689b      	ldr	r3, [r3, #8]
 8006792:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006796:	2b08      	cmp	r3, #8
 8006798:	d11c      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800679a:	4b44      	ldr	r3, [pc, #272]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d116      	bne.n	80067d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067a6:	4b41      	ldr	r3, [pc, #260]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f003 0302 	and.w	r3, r3, #2
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	d005      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68db      	ldr	r3, [r3, #12]
 80067b6:	2b01      	cmp	r3, #1
 80067b8:	d001      	beq.n	80067be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067ba:	2301      	movs	r3, #1
 80067bc:	e1c7      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067be:	4b3b      	ldr	r3, [pc, #236]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	4937      	ldr	r1, [pc, #220]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067d2:	e03a      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	68db      	ldr	r3, [r3, #12]
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d020      	beq.n	800681e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067dc:	4b34      	ldr	r3, [pc, #208]	@ (80068b0 <HAL_RCC_OscConfig+0x244>)
 80067de:	2201      	movs	r2, #1
 80067e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067e2:	f7fd fe67 	bl	80044b4 <HAL_GetTick>
 80067e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067e8:	e008      	b.n	80067fc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067ea:	f7fd fe63 	bl	80044b4 <HAL_GetTick>
 80067ee:	4602      	mov	r2, r0
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	1ad3      	subs	r3, r2, r3
 80067f4:	2b02      	cmp	r3, #2
 80067f6:	d901      	bls.n	80067fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80067f8:	2303      	movs	r3, #3
 80067fa:	e1a8      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80067fc:	4b2b      	ldr	r3, [pc, #172]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d0f0      	beq.n	80067ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006808:	4b28      	ldr	r3, [pc, #160]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	691b      	ldr	r3, [r3, #16]
 8006814:	00db      	lsls	r3, r3, #3
 8006816:	4925      	ldr	r1, [pc, #148]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006818:	4313      	orrs	r3, r2
 800681a:	600b      	str	r3, [r1, #0]
 800681c:	e015      	b.n	800684a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800681e:	4b24      	ldr	r3, [pc, #144]	@ (80068b0 <HAL_RCC_OscConfig+0x244>)
 8006820:	2200      	movs	r2, #0
 8006822:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006824:	f7fd fe46 	bl	80044b4 <HAL_GetTick>
 8006828:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800682a:	e008      	b.n	800683e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800682c:	f7fd fe42 	bl	80044b4 <HAL_GetTick>
 8006830:	4602      	mov	r2, r0
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	2b02      	cmp	r3, #2
 8006838:	d901      	bls.n	800683e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800683a:	2303      	movs	r3, #3
 800683c:	e187      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800683e:	4b1b      	ldr	r3, [pc, #108]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f003 0302 	and.w	r3, r3, #2
 8006846:	2b00      	cmp	r3, #0
 8006848:	d1f0      	bne.n	800682c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f003 0308 	and.w	r3, r3, #8
 8006852:	2b00      	cmp	r3, #0
 8006854:	d036      	beq.n	80068c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	695b      	ldr	r3, [r3, #20]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d016      	beq.n	800688c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800685e:	4b15      	ldr	r3, [pc, #84]	@ (80068b4 <HAL_RCC_OscConfig+0x248>)
 8006860:	2201      	movs	r2, #1
 8006862:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006864:	f7fd fe26 	bl	80044b4 <HAL_GetTick>
 8006868:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800686a:	e008      	b.n	800687e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800686c:	f7fd fe22 	bl	80044b4 <HAL_GetTick>
 8006870:	4602      	mov	r2, r0
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	1ad3      	subs	r3, r2, r3
 8006876:	2b02      	cmp	r3, #2
 8006878:	d901      	bls.n	800687e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800687a:	2303      	movs	r3, #3
 800687c:	e167      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800687e:	4b0b      	ldr	r3, [pc, #44]	@ (80068ac <HAL_RCC_OscConfig+0x240>)
 8006880:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006882:	f003 0302 	and.w	r3, r3, #2
 8006886:	2b00      	cmp	r3, #0
 8006888:	d0f0      	beq.n	800686c <HAL_RCC_OscConfig+0x200>
 800688a:	e01b      	b.n	80068c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800688c:	4b09      	ldr	r3, [pc, #36]	@ (80068b4 <HAL_RCC_OscConfig+0x248>)
 800688e:	2200      	movs	r2, #0
 8006890:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006892:	f7fd fe0f 	bl	80044b4 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006898:	e00e      	b.n	80068b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800689a:	f7fd fe0b 	bl	80044b4 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d907      	bls.n	80068b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e150      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
 80068ac:	40023800 	.word	0x40023800
 80068b0:	42470000 	.word	0x42470000
 80068b4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b8:	4b88      	ldr	r3, [pc, #544]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80068ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d1ea      	bne.n	800689a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f003 0304 	and.w	r3, r3, #4
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 8097 	beq.w	8006a00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068d2:	2300      	movs	r3, #0
 80068d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068d6:	4b81      	ldr	r3, [pc, #516]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80068d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d10f      	bne.n	8006902 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068e2:	2300      	movs	r3, #0
 80068e4:	60bb      	str	r3, [r7, #8]
 80068e6:	4b7d      	ldr	r3, [pc, #500]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80068e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068ea:	4a7c      	ldr	r2, [pc, #496]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80068ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80068f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80068f2:	4b7a      	ldr	r3, [pc, #488]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	60bb      	str	r3, [r7, #8]
 80068fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80068fe:	2301      	movs	r3, #1
 8006900:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006902:	4b77      	ldr	r3, [pc, #476]	@ (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800690a:	2b00      	cmp	r3, #0
 800690c:	d118      	bne.n	8006940 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800690e:	4b74      	ldr	r3, [pc, #464]	@ (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	4a73      	ldr	r2, [pc, #460]	@ (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006914:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006918:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800691a:	f7fd fdcb 	bl	80044b4 <HAL_GetTick>
 800691e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006920:	e008      	b.n	8006934 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006922:	f7fd fdc7 	bl	80044b4 <HAL_GetTick>
 8006926:	4602      	mov	r2, r0
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	1ad3      	subs	r3, r2, r3
 800692c:	2b02      	cmp	r3, #2
 800692e:	d901      	bls.n	8006934 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006930:	2303      	movs	r3, #3
 8006932:	e10c      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006934:	4b6a      	ldr	r3, [pc, #424]	@ (8006ae0 <HAL_RCC_OscConfig+0x474>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800693c:	2b00      	cmp	r3, #0
 800693e:	d0f0      	beq.n	8006922 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	2b01      	cmp	r3, #1
 8006946:	d106      	bne.n	8006956 <HAL_RCC_OscConfig+0x2ea>
 8006948:	4b64      	ldr	r3, [pc, #400]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800694a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800694c:	4a63      	ldr	r2, [pc, #396]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800694e:	f043 0301 	orr.w	r3, r3, #1
 8006952:	6713      	str	r3, [r2, #112]	@ 0x70
 8006954:	e01c      	b.n	8006990 <HAL_RCC_OscConfig+0x324>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b05      	cmp	r3, #5
 800695c:	d10c      	bne.n	8006978 <HAL_RCC_OscConfig+0x30c>
 800695e:	4b5f      	ldr	r3, [pc, #380]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006960:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006962:	4a5e      	ldr	r2, [pc, #376]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006964:	f043 0304 	orr.w	r3, r3, #4
 8006968:	6713      	str	r3, [r2, #112]	@ 0x70
 800696a:	4b5c      	ldr	r3, [pc, #368]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800696c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800696e:	4a5b      	ldr	r2, [pc, #364]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006970:	f043 0301 	orr.w	r3, r3, #1
 8006974:	6713      	str	r3, [r2, #112]	@ 0x70
 8006976:	e00b      	b.n	8006990 <HAL_RCC_OscConfig+0x324>
 8006978:	4b58      	ldr	r3, [pc, #352]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800697a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697c:	4a57      	ldr	r2, [pc, #348]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800697e:	f023 0301 	bic.w	r3, r3, #1
 8006982:	6713      	str	r3, [r2, #112]	@ 0x70
 8006984:	4b55      	ldr	r3, [pc, #340]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006988:	4a54      	ldr	r2, [pc, #336]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 800698a:	f023 0304 	bic.w	r3, r3, #4
 800698e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	689b      	ldr	r3, [r3, #8]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d015      	beq.n	80069c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006998:	f7fd fd8c 	bl	80044b4 <HAL_GetTick>
 800699c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800699e:	e00a      	b.n	80069b6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069a0:	f7fd fd88 	bl	80044b4 <HAL_GetTick>
 80069a4:	4602      	mov	r2, r0
 80069a6:	693b      	ldr	r3, [r7, #16]
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e0cb      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069b6:	4b49      	ldr	r3, [pc, #292]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80069b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069ba:	f003 0302 	and.w	r3, r3, #2
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d0ee      	beq.n	80069a0 <HAL_RCC_OscConfig+0x334>
 80069c2:	e014      	b.n	80069ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069c4:	f7fd fd76 	bl	80044b4 <HAL_GetTick>
 80069c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069ca:	e00a      	b.n	80069e2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069cc:	f7fd fd72 	bl	80044b4 <HAL_GetTick>
 80069d0:	4602      	mov	r2, r0
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	1ad3      	subs	r3, r2, r3
 80069d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069da:	4293      	cmp	r3, r2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e0b5      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e2:	4b3e      	ldr	r3, [pc, #248]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80069e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1ee      	bne.n	80069cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80069ee:	7dfb      	ldrb	r3, [r7, #23]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d105      	bne.n	8006a00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80069f4:	4b39      	ldr	r3, [pc, #228]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80069f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069f8:	4a38      	ldr	r2, [pc, #224]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 80069fa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80069fe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	699b      	ldr	r3, [r3, #24]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a1 	beq.w	8006b4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a0a:	4b34      	ldr	r3, [pc, #208]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a0c:	689b      	ldr	r3, [r3, #8]
 8006a0e:	f003 030c 	and.w	r3, r3, #12
 8006a12:	2b08      	cmp	r3, #8
 8006a14:	d05c      	beq.n	8006ad0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d141      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1e:	4b31      	ldr	r3, [pc, #196]	@ (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006a20:	2200      	movs	r2, #0
 8006a22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a24:	f7fd fd46 	bl	80044b4 <HAL_GetTick>
 8006a28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a2a:	e008      	b.n	8006a3e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a2c:	f7fd fd42 	bl	80044b4 <HAL_GetTick>
 8006a30:	4602      	mov	r2, r0
 8006a32:	693b      	ldr	r3, [r7, #16]
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d901      	bls.n	8006a3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a3a:	2303      	movs	r3, #3
 8006a3c:	e087      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3e:	4b27      	ldr	r3, [pc, #156]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1f0      	bne.n	8006a2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	69da      	ldr	r2, [r3, #28]
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	431a      	orrs	r2, r3
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a58:	019b      	lsls	r3, r3, #6
 8006a5a:	431a      	orrs	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a60:	085b      	lsrs	r3, r3, #1
 8006a62:	3b01      	subs	r3, #1
 8006a64:	041b      	lsls	r3, r3, #16
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a6c:	061b      	lsls	r3, r3, #24
 8006a6e:	491b      	ldr	r1, [pc, #108]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a70:	4313      	orrs	r3, r2
 8006a72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a74:	4b1b      	ldr	r3, [pc, #108]	@ (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006a76:	2201      	movs	r2, #1
 8006a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7a:	f7fd fd1b 	bl	80044b4 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a82:	f7fd fd17 	bl	80044b4 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e05c      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a94:	4b11      	ldr	r3, [pc, #68]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d0f0      	beq.n	8006a82 <HAL_RCC_OscConfig+0x416>
 8006aa0:	e054      	b.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006aa2:	4b10      	ldr	r3, [pc, #64]	@ (8006ae4 <HAL_RCC_OscConfig+0x478>)
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006aa8:	f7fd fd04 	bl	80044b4 <HAL_GetTick>
 8006aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aae:	e008      	b.n	8006ac2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ab0:	f7fd fd00 	bl	80044b4 <HAL_GetTick>
 8006ab4:	4602      	mov	r2, r0
 8006ab6:	693b      	ldr	r3, [r7, #16]
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	2b02      	cmp	r3, #2
 8006abc:	d901      	bls.n	8006ac2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006abe:	2303      	movs	r3, #3
 8006ac0:	e045      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ac2:	4b06      	ldr	r3, [pc, #24]	@ (8006adc <HAL_RCC_OscConfig+0x470>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d1f0      	bne.n	8006ab0 <HAL_RCC_OscConfig+0x444>
 8006ace:	e03d      	b.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	2b01      	cmp	r3, #1
 8006ad6:	d107      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e038      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
 8006adc:	40023800 	.word	0x40023800
 8006ae0:	40007000 	.word	0x40007000
 8006ae4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8006b58 <HAL_RCC_OscConfig+0x4ec>)
 8006aea:	685b      	ldr	r3, [r3, #4]
 8006aec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	699b      	ldr	r3, [r3, #24]
 8006af2:	2b01      	cmp	r3, #1
 8006af4:	d028      	beq.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d121      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d11a      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b12:	68fa      	ldr	r2, [r7, #12]
 8006b14:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b18:	4013      	ands	r3, r2
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d111      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b2e:	085b      	lsrs	r3, r3, #1
 8006b30:	3b01      	subs	r3, #1
 8006b32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d107      	bne.n	8006b48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d001      	beq.n	8006b4c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b48:	2301      	movs	r3, #1
 8006b4a:	e000      	b.n	8006b4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3718      	adds	r7, #24
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}
 8006b56:	bf00      	nop
 8006b58:	40023800 	.word	0x40023800

08006b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2b00      	cmp	r3, #0
 8006b6a:	d101      	bne.n	8006b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	e0cc      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b70:	4b68      	ldr	r3, [pc, #416]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 0307 	and.w	r3, r3, #7
 8006b78:	683a      	ldr	r2, [r7, #0]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d90c      	bls.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b7e:	4b65      	ldr	r3, [pc, #404]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006b86:	4b63      	ldr	r3, [pc, #396]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f003 0307 	and.w	r3, r3, #7
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d001      	beq.n	8006b98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e0b8      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f003 0302 	and.w	r3, r3, #2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d020      	beq.n	8006be6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d005      	beq.n	8006bbc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bb0:	4b59      	ldr	r3, [pc, #356]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	4a58      	ldr	r2, [pc, #352]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bba:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d005      	beq.n	8006bd4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006bc8:	4b53      	ldr	r3, [pc, #332]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	4a52      	ldr	r2, [pc, #328]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bd2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bd4:	4b50      	ldr	r3, [pc, #320]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd6:	689b      	ldr	r3, [r3, #8]
 8006bd8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	494d      	ldr	r1, [pc, #308]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f003 0301 	and.w	r3, r3, #1
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d044      	beq.n	8006c7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2b01      	cmp	r3, #1
 8006bf8:	d107      	bne.n	8006c0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006bfa:	4b47      	ldr	r3, [pc, #284]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d119      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c06:	2301      	movs	r3, #1
 8006c08:	e07f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d003      	beq.n	8006c1a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c16:	2b03      	cmp	r3, #3
 8006c18:	d107      	bne.n	8006c2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c1a:	4b3f      	ldr	r3, [pc, #252]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e06f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c2a:	4b3b      	ldr	r3, [pc, #236]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f003 0302 	and.w	r3, r3, #2
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d101      	bne.n	8006c3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c36:	2301      	movs	r3, #1
 8006c38:	e067      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c3a:	4b37      	ldr	r3, [pc, #220]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c3c:	689b      	ldr	r3, [r3, #8]
 8006c3e:	f023 0203 	bic.w	r2, r3, #3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	4934      	ldr	r1, [pc, #208]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c4c:	f7fd fc32 	bl	80044b4 <HAL_GetTick>
 8006c50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c52:	e00a      	b.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c54:	f7fd fc2e 	bl	80044b4 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d901      	bls.n	8006c6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c66:	2303      	movs	r3, #3
 8006c68:	e04f      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6a:	4b2b      	ldr	r3, [pc, #172]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 020c 	and.w	r2, r3, #12
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d1eb      	bne.n	8006c54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c7c:	4b25      	ldr	r3, [pc, #148]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f003 0307 	and.w	r3, r3, #7
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d20c      	bcs.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c8a:	4b22      	ldr	r3, [pc, #136]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c8c:	683a      	ldr	r2, [r7, #0]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c92:	4b20      	ldr	r3, [pc, #128]	@ (8006d14 <HAL_RCC_ClockConfig+0x1b8>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	f003 0307 	and.w	r3, r3, #7
 8006c9a:	683a      	ldr	r2, [r7, #0]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d001      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ca0:	2301      	movs	r3, #1
 8006ca2:	e032      	b.n	8006d0a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f003 0304 	and.w	r3, r3, #4
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d008      	beq.n	8006cc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006cb0:	4b19      	ldr	r3, [pc, #100]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb2:	689b      	ldr	r3, [r3, #8]
 8006cb4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	68db      	ldr	r3, [r3, #12]
 8006cbc:	4916      	ldr	r1, [pc, #88]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f003 0308 	and.w	r3, r3, #8
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cce:	4b12      	ldr	r3, [pc, #72]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd0:	689b      	ldr	r3, [r3, #8]
 8006cd2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	00db      	lsls	r3, r3, #3
 8006cdc:	490e      	ldr	r1, [pc, #56]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cde:	4313      	orrs	r3, r2
 8006ce0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006ce2:	f000 f821 	bl	8006d28 <HAL_RCC_GetSysClockFreq>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8006d18 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	091b      	lsrs	r3, r3, #4
 8006cee:	f003 030f 	and.w	r3, r3, #15
 8006cf2:	490a      	ldr	r1, [pc, #40]	@ (8006d1c <HAL_RCC_ClockConfig+0x1c0>)
 8006cf4:	5ccb      	ldrb	r3, [r1, r3]
 8006cf6:	fa22 f303 	lsr.w	r3, r2, r3
 8006cfa:	4a09      	ldr	r2, [pc, #36]	@ (8006d20 <HAL_RCC_ClockConfig+0x1c4>)
 8006cfc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006cfe:	4b09      	ldr	r3, [pc, #36]	@ (8006d24 <HAL_RCC_ClockConfig+0x1c8>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fd fb92 	bl	800442c <HAL_InitTick>

  return HAL_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3710      	adds	r7, #16
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	40023c00 	.word	0x40023c00
 8006d18:	40023800 	.word	0x40023800
 8006d1c:	080100d4 	.word	0x080100d4
 8006d20:	20000004 	.word	0x20000004
 8006d24:	20000028 	.word	0x20000028

08006d28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d28:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d2c:	b090      	sub	sp, #64	@ 0x40
 8006d2e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d34:	2300      	movs	r3, #0
 8006d36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d40:	4b59      	ldr	r3, [pc, #356]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f003 030c 	and.w	r3, r3, #12
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d00d      	beq.n	8006d68 <HAL_RCC_GetSysClockFreq+0x40>
 8006d4c:	2b08      	cmp	r3, #8
 8006d4e:	f200 80a1 	bhi.w	8006e94 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d002      	beq.n	8006d5c <HAL_RCC_GetSysClockFreq+0x34>
 8006d56:	2b04      	cmp	r3, #4
 8006d58:	d003      	beq.n	8006d62 <HAL_RCC_GetSysClockFreq+0x3a>
 8006d5a:	e09b      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d5c:	4b53      	ldr	r3, [pc, #332]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x184>)
 8006d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d60:	e09b      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d62:	4b53      	ldr	r3, [pc, #332]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d64:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d66:	e098      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d68:	4b4f      	ldr	r3, [pc, #316]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d70:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d72:	4b4d      	ldr	r3, [pc, #308]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d74:	685b      	ldr	r3, [r3, #4]
 8006d76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d028      	beq.n	8006dd0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d7e:	4b4a      	ldr	r3, [pc, #296]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	099b      	lsrs	r3, r3, #6
 8006d84:	2200      	movs	r2, #0
 8006d86:	623b      	str	r3, [r7, #32]
 8006d88:	627a      	str	r2, [r7, #36]	@ 0x24
 8006d8a:	6a3b      	ldr	r3, [r7, #32]
 8006d8c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006d90:	2100      	movs	r1, #0
 8006d92:	4b47      	ldr	r3, [pc, #284]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006d94:	fb03 f201 	mul.w	r2, r3, r1
 8006d98:	2300      	movs	r3, #0
 8006d9a:	fb00 f303 	mul.w	r3, r0, r3
 8006d9e:	4413      	add	r3, r2
 8006da0:	4a43      	ldr	r2, [pc, #268]	@ (8006eb0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006da2:	fba0 1202 	umull	r1, r2, r0, r2
 8006da6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006da8:	460a      	mov	r2, r1
 8006daa:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006dac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dae:	4413      	add	r3, r2
 8006db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006db2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006db4:	2200      	movs	r2, #0
 8006db6:	61bb      	str	r3, [r7, #24]
 8006db8:	61fa      	str	r2, [r7, #28]
 8006dba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dbe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006dc2:	f7f9 fa65 	bl	8000290 <__aeabi_uldivmod>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	460b      	mov	r3, r1
 8006dca:	4613      	mov	r3, r2
 8006dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dce:	e053      	b.n	8006e78 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dd0:	4b35      	ldr	r3, [pc, #212]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dd2:	685b      	ldr	r3, [r3, #4]
 8006dd4:	099b      	lsrs	r3, r3, #6
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	613b      	str	r3, [r7, #16]
 8006dda:	617a      	str	r2, [r7, #20]
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006de2:	f04f 0b00 	mov.w	fp, #0
 8006de6:	4652      	mov	r2, sl
 8006de8:	465b      	mov	r3, fp
 8006dea:	f04f 0000 	mov.w	r0, #0
 8006dee:	f04f 0100 	mov.w	r1, #0
 8006df2:	0159      	lsls	r1, r3, #5
 8006df4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006df8:	0150      	lsls	r0, r2, #5
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	460b      	mov	r3, r1
 8006dfe:	ebb2 080a 	subs.w	r8, r2, sl
 8006e02:	eb63 090b 	sbc.w	r9, r3, fp
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	f04f 0300 	mov.w	r3, #0
 8006e0e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e12:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e16:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e1a:	ebb2 0408 	subs.w	r4, r2, r8
 8006e1e:	eb63 0509 	sbc.w	r5, r3, r9
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	00eb      	lsls	r3, r5, #3
 8006e2c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e30:	00e2      	lsls	r2, r4, #3
 8006e32:	4614      	mov	r4, r2
 8006e34:	461d      	mov	r5, r3
 8006e36:	eb14 030a 	adds.w	r3, r4, sl
 8006e3a:	603b      	str	r3, [r7, #0]
 8006e3c:	eb45 030b 	adc.w	r3, r5, fp
 8006e40:	607b      	str	r3, [r7, #4]
 8006e42:	f04f 0200 	mov.w	r2, #0
 8006e46:	f04f 0300 	mov.w	r3, #0
 8006e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e4e:	4629      	mov	r1, r5
 8006e50:	028b      	lsls	r3, r1, #10
 8006e52:	4621      	mov	r1, r4
 8006e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e58:	4621      	mov	r1, r4
 8006e5a:	028a      	lsls	r2, r1, #10
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e62:	2200      	movs	r2, #0
 8006e64:	60bb      	str	r3, [r7, #8]
 8006e66:	60fa      	str	r2, [r7, #12]
 8006e68:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e6c:	f7f9 fa10 	bl	8000290 <__aeabi_uldivmod>
 8006e70:	4602      	mov	r2, r0
 8006e72:	460b      	mov	r3, r1
 8006e74:	4613      	mov	r3, r2
 8006e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e78:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	0c1b      	lsrs	r3, r3, #16
 8006e7e:	f003 0303 	and.w	r3, r3, #3
 8006e82:	3301      	adds	r3, #1
 8006e84:	005b      	lsls	r3, r3, #1
 8006e86:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006e88:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e90:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e92:	e002      	b.n	8006e9a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_RCC_GetSysClockFreq+0x184>)
 8006e96:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3740      	adds	r7, #64	@ 0x40
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ea6:	bf00      	nop
 8006ea8:	40023800 	.word	0x40023800
 8006eac:	00f42400 	.word	0x00f42400
 8006eb0:	017d7840 	.word	0x017d7840

08006eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb8:	4b03      	ldr	r3, [pc, #12]	@ (8006ec8 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eba:	681b      	ldr	r3, [r3, #0]
}
 8006ebc:	4618      	mov	r0, r3
 8006ebe:	46bd      	mov	sp, r7
 8006ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec4:	4770      	bx	lr
 8006ec6:	bf00      	nop
 8006ec8:	20000004 	.word	0x20000004

08006ecc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d101      	bne.n	8006ede <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006eda:	2301      	movs	r3, #1
 8006edc:	e07b      	b.n	8006fd6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d108      	bne.n	8006ef8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	685b      	ldr	r3, [r3, #4]
 8006eea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006eee:	d009      	beq.n	8006f04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	61da      	str	r2, [r3, #28]
 8006ef6:	e005      	b.n	8006f04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2200      	movs	r2, #0
 8006f02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2200      	movs	r2, #0
 8006f08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d106      	bne.n	8006f24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	2200      	movs	r2, #0
 8006f1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f1e:	6878      	ldr	r0, [r7, #4]
 8006f20:	f7fa ff20 	bl	8001d64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2202      	movs	r2, #2
 8006f28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	685b      	ldr	r3, [r3, #4]
 8006f40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	689b      	ldr	r3, [r3, #8]
 8006f48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f4c:	431a      	orrs	r2, r3
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	68db      	ldr	r3, [r3, #12]
 8006f52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f56:	431a      	orrs	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	691b      	ldr	r3, [r3, #16]
 8006f5c:	f003 0302 	and.w	r3, r3, #2
 8006f60:	431a      	orrs	r2, r3
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	695b      	ldr	r3, [r3, #20]
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	431a      	orrs	r2, r3
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	699b      	ldr	r3, [r3, #24]
 8006f70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f74:	431a      	orrs	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	69db      	ldr	r3, [r3, #28]
 8006f7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f7e:	431a      	orrs	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6a1b      	ldr	r3, [r3, #32]
 8006f84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006f88:	ea42 0103 	orr.w	r1, r2, r3
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	430a      	orrs	r2, r1
 8006f9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	699b      	ldr	r3, [r3, #24]
 8006fa0:	0c1b      	lsrs	r3, r3, #16
 8006fa2:	f003 0104 	and.w	r1, r3, #4
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006faa:	f003 0210 	and.w	r2, r3, #16
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	430a      	orrs	r2, r1
 8006fb4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	69da      	ldr	r2, [r3, #28]
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fc4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	2200      	movs	r2, #0
 8006fca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3708      	adds	r7, #8
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b088      	sub	sp, #32
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	603b      	str	r3, [r7, #0]
 8006fea:	4613      	mov	r3, r2
 8006fec:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fee:	f7fd fa61 	bl	80044b4 <HAL_GetTick>
 8006ff2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ff4:	88fb      	ldrh	r3, [r7, #6]
 8006ff6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b01      	cmp	r3, #1
 8007002:	d001      	beq.n	8007008 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007004:	2302      	movs	r3, #2
 8007006:	e12a      	b.n	800725e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007008:	68bb      	ldr	r3, [r7, #8]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d002      	beq.n	8007014 <HAL_SPI_Transmit+0x36>
 800700e:	88fb      	ldrh	r3, [r7, #6]
 8007010:	2b00      	cmp	r3, #0
 8007012:	d101      	bne.n	8007018 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e122      	b.n	800725e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800701e:	2b01      	cmp	r3, #1
 8007020:	d101      	bne.n	8007026 <HAL_SPI_Transmit+0x48>
 8007022:	2302      	movs	r3, #2
 8007024:	e11b      	b.n	800725e <HAL_SPI_Transmit+0x280>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2201      	movs	r2, #1
 800702a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	2203      	movs	r2, #3
 8007032:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	2200      	movs	r2, #0
 800703a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	88fa      	ldrh	r2, [r7, #6]
 8007046:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	88fa      	ldrh	r2, [r7, #6]
 800704c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	2200      	movs	r2, #0
 8007052:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	2200      	movs	r2, #0
 8007058:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	2200      	movs	r2, #0
 800705e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	2200      	movs	r2, #0
 8007064:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	2200      	movs	r2, #0
 800706a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007074:	d10f      	bne.n	8007096 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	681a      	ldr	r2, [r3, #0]
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007084:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007094:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070a0:	2b40      	cmp	r3, #64	@ 0x40
 80070a2:	d007      	beq.n	80070b4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	681a      	ldr	r2, [r3, #0]
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	68db      	ldr	r3, [r3, #12]
 80070b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070bc:	d152      	bne.n	8007164 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <HAL_SPI_Transmit+0xee>
 80070c6:	8b7b      	ldrh	r3, [r7, #26]
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d145      	bne.n	8007158 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070d0:	881a      	ldrh	r2, [r3, #0]
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070dc:	1c9a      	adds	r2, r3, #2
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070e6:	b29b      	uxth	r3, r3
 80070e8:	3b01      	subs	r3, #1
 80070ea:	b29a      	uxth	r2, r3
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80070f0:	e032      	b.n	8007158 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f003 0302 	and.w	r3, r3, #2
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d112      	bne.n	8007126 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007104:	881a      	ldrh	r2, [r3, #0]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007110:	1c9a      	adds	r2, r3, #2
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800711a:	b29b      	uxth	r3, r3
 800711c:	3b01      	subs	r3, #1
 800711e:	b29a      	uxth	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007124:	e018      	b.n	8007158 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007126:	f7fd f9c5 	bl	80044b4 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	683a      	ldr	r2, [r7, #0]
 8007132:	429a      	cmp	r2, r3
 8007134:	d803      	bhi.n	800713e <HAL_SPI_Transmit+0x160>
 8007136:	683b      	ldr	r3, [r7, #0]
 8007138:	f1b3 3fff 	cmp.w	r3, #4294967295
 800713c:	d102      	bne.n	8007144 <HAL_SPI_Transmit+0x166>
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d109      	bne.n	8007158 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	2201      	movs	r2, #1
 8007148:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	2200      	movs	r2, #0
 8007150:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007154:	2303      	movs	r3, #3
 8007156:	e082      	b.n	800725e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800715c:	b29b      	uxth	r3, r3
 800715e:	2b00      	cmp	r3, #0
 8007160:	d1c7      	bne.n	80070f2 <HAL_SPI_Transmit+0x114>
 8007162:	e053      	b.n	800720c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	685b      	ldr	r3, [r3, #4]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_SPI_Transmit+0x194>
 800716c:	8b7b      	ldrh	r3, [r7, #26]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d147      	bne.n	8007202 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	330c      	adds	r3, #12
 800717c:	7812      	ldrb	r2, [r2, #0]
 800717e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007184:	1c5a      	adds	r2, r3, #1
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007198:	e033      	b.n	8007202 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b02      	cmp	r3, #2
 80071a6:	d113      	bne.n	80071d0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	330c      	adds	r3, #12
 80071b2:	7812      	ldrb	r2, [r2, #0]
 80071b4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071ba:	1c5a      	adds	r2, r3, #1
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071c4:	b29b      	uxth	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	b29a      	uxth	r2, r3
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071ce:	e018      	b.n	8007202 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071d0:	f7fd f970 	bl	80044b4 <HAL_GetTick>
 80071d4:	4602      	mov	r2, r0
 80071d6:	69fb      	ldr	r3, [r7, #28]
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	429a      	cmp	r2, r3
 80071de:	d803      	bhi.n	80071e8 <HAL_SPI_Transmit+0x20a>
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	d102      	bne.n	80071ee <HAL_SPI_Transmit+0x210>
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d109      	bne.n	8007202 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2201      	movs	r2, #1
 80071f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2200      	movs	r2, #0
 80071fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80071fe:	2303      	movs	r3, #3
 8007200:	e02d      	b.n	800725e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007206:	b29b      	uxth	r3, r3
 8007208:	2b00      	cmp	r3, #0
 800720a:	d1c6      	bne.n	800719a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800720c:	69fa      	ldr	r2, [r7, #28]
 800720e:	6839      	ldr	r1, [r7, #0]
 8007210:	68f8      	ldr	r0, [r7, #12]
 8007212:	f000 fd21 	bl	8007c58 <SPI_EndRxTxTransaction>
 8007216:	4603      	mov	r3, r0
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	2220      	movs	r2, #32
 8007220:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	689b      	ldr	r3, [r3, #8]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d10a      	bne.n	8007240 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800722a:	2300      	movs	r3, #0
 800722c:	617b      	str	r3, [r7, #20]
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	68db      	ldr	r3, [r3, #12]
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	689b      	ldr	r3, [r3, #8]
 800723c:	617b      	str	r3, [r7, #20]
 800723e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	2200      	movs	r2, #0
 800724c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007254:	2b00      	cmp	r3, #0
 8007256:	d001      	beq.n	800725c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800725c:	2300      	movs	r3, #0
  }
}
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007266:	b580      	push	{r7, lr}
 8007268:	b088      	sub	sp, #32
 800726a:	af02      	add	r7, sp, #8
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800727c:	b2db      	uxtb	r3, r3
 800727e:	2b01      	cmp	r3, #1
 8007280:	d001      	beq.n	8007286 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007282:	2302      	movs	r3, #2
 8007284:	e104      	b.n	8007490 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	685b      	ldr	r3, [r3, #4]
 800728a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800728e:	d112      	bne.n	80072b6 <HAL_SPI_Receive+0x50>
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	689b      	ldr	r3, [r3, #8]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10e      	bne.n	80072b6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	2204      	movs	r2, #4
 800729c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072a0:	88fa      	ldrh	r2, [r7, #6]
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	9300      	str	r3, [sp, #0]
 80072a6:	4613      	mov	r3, r2
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	68b9      	ldr	r1, [r7, #8]
 80072ac:	68f8      	ldr	r0, [r7, #12]
 80072ae:	f000 f8f3 	bl	8007498 <HAL_SPI_TransmitReceive>
 80072b2:	4603      	mov	r3, r0
 80072b4:	e0ec      	b.n	8007490 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072b6:	f7fd f8fd 	bl	80044b4 <HAL_GetTick>
 80072ba:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d002      	beq.n	80072c8 <HAL_SPI_Receive+0x62>
 80072c2:	88fb      	ldrh	r3, [r7, #6]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d101      	bne.n	80072cc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80072c8:	2301      	movs	r3, #1
 80072ca:	e0e1      	b.n	8007490 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072d2:	2b01      	cmp	r3, #1
 80072d4:	d101      	bne.n	80072da <HAL_SPI_Receive+0x74>
 80072d6:	2302      	movs	r3, #2
 80072d8:	e0da      	b.n	8007490 <HAL_SPI_Receive+0x22a>
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	2201      	movs	r2, #1
 80072de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2204      	movs	r2, #4
 80072e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2200      	movs	r2, #0
 80072ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	68ba      	ldr	r2, [r7, #8]
 80072f4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	88fa      	ldrh	r2, [r7, #6]
 80072fa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	88fa      	ldrh	r2, [r7, #6]
 8007300:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	2200      	movs	r2, #0
 800730c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2200      	movs	r2, #0
 8007312:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	2200      	movs	r2, #0
 8007318:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	689b      	ldr	r3, [r3, #8]
 8007324:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007328:	d10f      	bne.n	800734a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007338:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	681a      	ldr	r2, [r3, #0]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007348:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007354:	2b40      	cmp	r3, #64	@ 0x40
 8007356:	d007      	beq.n	8007368 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007366:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	68db      	ldr	r3, [r3, #12]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d170      	bne.n	8007452 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007370:	e035      	b.n	80073de <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b01      	cmp	r3, #1
 800737e:	d115      	bne.n	80073ac <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f103 020c 	add.w	r2, r3, #12
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738c:	7812      	ldrb	r2, [r2, #0]
 800738e:	b2d2      	uxtb	r2, r2
 8007390:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073a0:	b29b      	uxth	r3, r3
 80073a2:	3b01      	subs	r3, #1
 80073a4:	b29a      	uxth	r2, r3
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073aa:	e018      	b.n	80073de <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073ac:	f7fd f882 	bl	80044b4 <HAL_GetTick>
 80073b0:	4602      	mov	r2, r0
 80073b2:	697b      	ldr	r3, [r7, #20]
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	683a      	ldr	r2, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d803      	bhi.n	80073c4 <HAL_SPI_Receive+0x15e>
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c2:	d102      	bne.n	80073ca <HAL_SPI_Receive+0x164>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d109      	bne.n	80073de <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2201      	movs	r2, #1
 80073ce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	2200      	movs	r2, #0
 80073d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073da:	2303      	movs	r3, #3
 80073dc:	e058      	b.n	8007490 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073e2:	b29b      	uxth	r3, r3
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d1c4      	bne.n	8007372 <HAL_SPI_Receive+0x10c>
 80073e8:	e038      	b.n	800745c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0301 	and.w	r3, r3, #1
 80073f4:	2b01      	cmp	r3, #1
 80073f6:	d113      	bne.n	8007420 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007402:	b292      	uxth	r2, r2
 8007404:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740a:	1c9a      	adds	r2, r3, #2
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800741e:	e018      	b.n	8007452 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007420:	f7fd f848 	bl	80044b4 <HAL_GetTick>
 8007424:	4602      	mov	r2, r0
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	1ad3      	subs	r3, r2, r3
 800742a:	683a      	ldr	r2, [r7, #0]
 800742c:	429a      	cmp	r2, r3
 800742e:	d803      	bhi.n	8007438 <HAL_SPI_Receive+0x1d2>
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007436:	d102      	bne.n	800743e <HAL_SPI_Receive+0x1d8>
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d109      	bne.n	8007452 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	2201      	movs	r2, #1
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	2200      	movs	r2, #0
 800744a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800744e:	2303      	movs	r3, #3
 8007450:	e01e      	b.n	8007490 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007456:	b29b      	uxth	r3, r3
 8007458:	2b00      	cmp	r3, #0
 800745a:	d1c6      	bne.n	80073ea <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800745c:	697a      	ldr	r2, [r7, #20]
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	68f8      	ldr	r0, [r7, #12]
 8007462:	f000 fb93 	bl	8007b8c <SPI_EndRxTransaction>
 8007466:	4603      	mov	r3, r0
 8007468:	2b00      	cmp	r3, #0
 800746a:	d002      	beq.n	8007472 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	2220      	movs	r2, #32
 8007470:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007486:	2b00      	cmp	r3, #0
 8007488:	d001      	beq.n	800748e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e000      	b.n	8007490 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800748e:	2300      	movs	r3, #0
  }
}
 8007490:	4618      	mov	r0, r3
 8007492:	3718      	adds	r7, #24
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b08a      	sub	sp, #40	@ 0x28
 800749c:	af00      	add	r7, sp, #0
 800749e:	60f8      	str	r0, [r7, #12]
 80074a0:	60b9      	str	r1, [r7, #8]
 80074a2:	607a      	str	r2, [r7, #4]
 80074a4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074a6:	2301      	movs	r3, #1
 80074a8:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074aa:	f7fd f803 	bl	80044b4 <HAL_GetTick>
 80074ae:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074b6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80074be:	887b      	ldrh	r3, [r7, #2]
 80074c0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074c2:	7ffb      	ldrb	r3, [r7, #31]
 80074c4:	2b01      	cmp	r3, #1
 80074c6:	d00c      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x4a>
 80074c8:	69bb      	ldr	r3, [r7, #24]
 80074ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074ce:	d106      	bne.n	80074de <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	689b      	ldr	r3, [r3, #8]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d102      	bne.n	80074de <HAL_SPI_TransmitReceive+0x46>
 80074d8:	7ffb      	ldrb	r3, [r7, #31]
 80074da:	2b04      	cmp	r3, #4
 80074dc:	d001      	beq.n	80074e2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80074de:	2302      	movs	r3, #2
 80074e0:	e17f      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d005      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x5c>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_SPI_TransmitReceive+0x5c>
 80074ee:	887b      	ldrh	r3, [r7, #2]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	e174      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d101      	bne.n	8007506 <HAL_SPI_TransmitReceive+0x6e>
 8007502:	2302      	movs	r3, #2
 8007504:	e16d      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007514:	b2db      	uxtb	r3, r3
 8007516:	2b04      	cmp	r3, #4
 8007518:	d003      	beq.n	8007522 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2205      	movs	r2, #5
 800751e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2200      	movs	r2, #0
 8007526:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	887a      	ldrh	r2, [r7, #2]
 8007532:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	887a      	ldrh	r2, [r7, #2]
 8007538:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	68ba      	ldr	r2, [r7, #8]
 800753e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	887a      	ldrh	r2, [r7, #2]
 8007544:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	887a      	ldrh	r2, [r7, #2]
 800754a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2200      	movs	r2, #0
 8007550:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2200      	movs	r2, #0
 8007556:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007562:	2b40      	cmp	r3, #64	@ 0x40
 8007564:	d007      	beq.n	8007576 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007574:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	68db      	ldr	r3, [r3, #12]
 800757a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800757e:	d17e      	bne.n	800767e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d002      	beq.n	800758e <HAL_SPI_TransmitReceive+0xf6>
 8007588:	8afb      	ldrh	r3, [r7, #22]
 800758a:	2b01      	cmp	r3, #1
 800758c:	d16c      	bne.n	8007668 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800759e:	1c9a      	adds	r2, r3, #2
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a8:	b29b      	uxth	r3, r3
 80075aa:	3b01      	subs	r3, #1
 80075ac:	b29a      	uxth	r2, r3
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075b2:	e059      	b.n	8007668 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f003 0302 	and.w	r3, r3, #2
 80075be:	2b02      	cmp	r3, #2
 80075c0:	d11b      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x162>
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c6:	b29b      	uxth	r3, r3
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d016      	beq.n	80075fa <HAL_SPI_TransmitReceive+0x162>
 80075cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ce:	2b01      	cmp	r3, #1
 80075d0:	d113      	bne.n	80075fa <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075d6:	881a      	ldrh	r2, [r3, #0]
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	1c9a      	adds	r2, r3, #2
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80075f6:	2300      	movs	r3, #0
 80075f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 0301 	and.w	r3, r3, #1
 8007604:	2b01      	cmp	r3, #1
 8007606:	d119      	bne.n	800763c <HAL_SPI_TransmitReceive+0x1a4>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800760c:	b29b      	uxth	r3, r3
 800760e:	2b00      	cmp	r3, #0
 8007610:	d014      	beq.n	800763c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	68da      	ldr	r2, [r3, #12]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800761c:	b292      	uxth	r2, r2
 800761e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007624:	1c9a      	adds	r2, r3, #2
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800762e:	b29b      	uxth	r3, r3
 8007630:	3b01      	subs	r3, #1
 8007632:	b29a      	uxth	r2, r3
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007638:	2301      	movs	r3, #1
 800763a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800763c:	f7fc ff3a 	bl	80044b4 <HAL_GetTick>
 8007640:	4602      	mov	r2, r0
 8007642:	6a3b      	ldr	r3, [r7, #32]
 8007644:	1ad3      	subs	r3, r2, r3
 8007646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007648:	429a      	cmp	r2, r3
 800764a:	d80d      	bhi.n	8007668 <HAL_SPI_TransmitReceive+0x1d0>
 800764c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800764e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007652:	d009      	beq.n	8007668 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007664:	2303      	movs	r3, #3
 8007666:	e0bc      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800766c:	b29b      	uxth	r3, r3
 800766e:	2b00      	cmp	r3, #0
 8007670:	d1a0      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x11c>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007676:	b29b      	uxth	r3, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	d19b      	bne.n	80075b4 <HAL_SPI_TransmitReceive+0x11c>
 800767c:	e082      	b.n	8007784 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d002      	beq.n	800768c <HAL_SPI_TransmitReceive+0x1f4>
 8007686:	8afb      	ldrh	r3, [r7, #22]
 8007688:	2b01      	cmp	r3, #1
 800768a:	d171      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	7812      	ldrb	r2, [r2, #0]
 8007698:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800769e:	1c5a      	adds	r2, r3, #1
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076a8:	b29b      	uxth	r3, r3
 80076aa:	3b01      	subs	r3, #1
 80076ac:	b29a      	uxth	r2, r3
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b2:	e05d      	b.n	8007770 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	f003 0302 	and.w	r3, r3, #2
 80076be:	2b02      	cmp	r3, #2
 80076c0:	d11c      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x264>
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d017      	beq.n	80076fc <HAL_SPI_TransmitReceive+0x264>
 80076cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ce:	2b01      	cmp	r3, #1
 80076d0:	d114      	bne.n	80076fc <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	330c      	adds	r3, #12
 80076dc:	7812      	ldrb	r2, [r2, #0]
 80076de:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076e4:	1c5a      	adds	r2, r3, #1
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	3b01      	subs	r3, #1
 80076f2:	b29a      	uxth	r2, r3
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80076f8:	2300      	movs	r3, #0
 80076fa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	f003 0301 	and.w	r3, r3, #1
 8007706:	2b01      	cmp	r3, #1
 8007708:	d119      	bne.n	800773e <HAL_SPI_TransmitReceive+0x2a6>
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800770e:	b29b      	uxth	r3, r3
 8007710:	2b00      	cmp	r3, #0
 8007712:	d014      	beq.n	800773e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68da      	ldr	r2, [r3, #12]
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800771e:	b2d2      	uxtb	r2, r2
 8007720:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007726:	1c5a      	adds	r2, r3, #1
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007730:	b29b      	uxth	r3, r3
 8007732:	3b01      	subs	r3, #1
 8007734:	b29a      	uxth	r2, r3
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800773a:	2301      	movs	r3, #1
 800773c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800773e:	f7fc feb9 	bl	80044b4 <HAL_GetTick>
 8007742:	4602      	mov	r2, r0
 8007744:	6a3b      	ldr	r3, [r7, #32]
 8007746:	1ad3      	subs	r3, r2, r3
 8007748:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800774a:	429a      	cmp	r2, r3
 800774c:	d803      	bhi.n	8007756 <HAL_SPI_TransmitReceive+0x2be>
 800774e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007754:	d102      	bne.n	800775c <HAL_SPI_TransmitReceive+0x2c4>
 8007756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007758:	2b00      	cmp	r3, #0
 800775a:	d109      	bne.n	8007770 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	2201      	movs	r2, #1
 8007760:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800776c:	2303      	movs	r3, #3
 800776e:	e038      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b00      	cmp	r3, #0
 8007778:	d19c      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x21c>
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800777e:	b29b      	uxth	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d197      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007784:	6a3a      	ldr	r2, [r7, #32]
 8007786:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007788:	68f8      	ldr	r0, [r7, #12]
 800778a:	f000 fa65 	bl	8007c58 <SPI_EndRxTxTransaction>
 800778e:	4603      	mov	r3, r0
 8007790:	2b00      	cmp	r3, #0
 8007792:	d008      	beq.n	80077a6 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2220      	movs	r2, #32
 8007798:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077a2:	2301      	movs	r3, #1
 80077a4:	e01d      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	689b      	ldr	r3, [r3, #8]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d10a      	bne.n	80077c4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ae:	2300      	movs	r3, #0
 80077b0:	613b      	str	r3, [r7, #16]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	68db      	ldr	r3, [r3, #12]
 80077b8:	613b      	str	r3, [r7, #16]
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	613b      	str	r3, [r7, #16]
 80077c2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2200      	movs	r2, #0
 80077d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d001      	beq.n	80077e0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80077dc:	2301      	movs	r3, #1
 80077de:	e000      	b.n	80077e2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80077e0:	2300      	movs	r3, #0
  }
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3728      	adds	r7, #40	@ 0x28
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
	...

080077ec <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	4613      	mov	r3, r2
 80077f8:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007800:	b2db      	uxtb	r3, r3
 8007802:	2b01      	cmp	r3, #1
 8007804:	d001      	beq.n	800780a <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007806:	2302      	movs	r3, #2
 8007808:	e097      	b.n	800793a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800780a:	68bb      	ldr	r3, [r7, #8]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d002      	beq.n	8007816 <HAL_SPI_Transmit_DMA+0x2a>
 8007810:	88fb      	ldrh	r3, [r7, #6]
 8007812:	2b00      	cmp	r3, #0
 8007814:	d101      	bne.n	800781a <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007816:	2301      	movs	r3, #1
 8007818:	e08f      	b.n	800793a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007820:	2b01      	cmp	r3, #1
 8007822:	d101      	bne.n	8007828 <HAL_SPI_Transmit_DMA+0x3c>
 8007824:	2302      	movs	r3, #2
 8007826:	e088      	b.n	800793a <HAL_SPI_Transmit_DMA+0x14e>
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	2201      	movs	r2, #1
 800782c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	2203      	movs	r2, #3
 8007834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2200      	movs	r2, #0
 800783c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	68ba      	ldr	r2, [r7, #8]
 8007842:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	88fa      	ldrh	r2, [r7, #6]
 8007848:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	88fa      	ldrh	r2, [r7, #6]
 800784e:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2200      	movs	r2, #0
 8007854:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2200      	movs	r2, #0
 800785a:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2200      	movs	r2, #0
 8007860:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2200      	movs	r2, #0
 8007866:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007876:	d10f      	bne.n	8007898 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007886:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681a      	ldr	r2, [r3, #0]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007896:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800789c:	4a29      	ldr	r2, [pc, #164]	@ (8007944 <HAL_SPI_Transmit_DMA+0x158>)
 800789e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078a4:	4a28      	ldr	r2, [pc, #160]	@ (8007948 <HAL_SPI_Transmit_DMA+0x15c>)
 80078a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078ac:	4a27      	ldr	r2, [pc, #156]	@ (800794c <HAL_SPI_Transmit_DMA+0x160>)
 80078ae:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b4:	2200      	movs	r2, #0
 80078b6:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078c0:	4619      	mov	r1, r3
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	330c      	adds	r3, #12
 80078c8:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078ca:	68fb      	ldr	r3, [r7, #12]
 80078cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078d0:	f7fc ffe0 	bl	8004894 <HAL_DMA_Start_IT>
 80078d4:	4603      	mov	r3, r0
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00b      	beq.n	80078f2 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078de:	f043 0210 	orr.w	r2, r3, #16
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e023      	b.n	800793a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fc:	2b40      	cmp	r3, #64	@ 0x40
 80078fe:	d007      	beq.n	8007910 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800790e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f042 0220 	orr.w	r2, r2, #32
 8007926:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f042 0202 	orr.w	r2, r2, #2
 8007936:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3710      	adds	r7, #16
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}
 8007942:	bf00      	nop
 8007944:	08007a21 	.word	0x08007a21
 8007948:	08007979 	.word	0x08007979
 800794c:	08007a3d 	.word	0x08007a3d

08007950 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800796c:	bf00      	nop
 800796e:	370c      	adds	r7, #12
 8007970:	46bd      	mov	sp, r7
 8007972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007976:	4770      	bx	lr

08007978 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007984:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007986:	f7fc fd95 	bl	80044b4 <HAL_GetTick>
 800798a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007996:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800799a:	d03b      	beq.n	8007a14 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800799c:	697b      	ldr	r3, [r7, #20]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	685a      	ldr	r2, [r3, #4]
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0220 	bic.w	r2, r2, #32
 80079aa:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	685a      	ldr	r2, [r3, #4]
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f022 0202 	bic.w	r2, r2, #2
 80079ba:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079bc:	693a      	ldr	r2, [r7, #16]
 80079be:	2164      	movs	r1, #100	@ 0x64
 80079c0:	6978      	ldr	r0, [r7, #20]
 80079c2:	f000 f949 	bl	8007c58 <SPI_EndRxTxTransaction>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d005      	beq.n	80079d8 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079d0:	f043 0220 	orr.w	r2, r3, #32
 80079d4:	697b      	ldr	r3, [r7, #20]
 80079d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079d8:	697b      	ldr	r3, [r7, #20]
 80079da:	689b      	ldr	r3, [r3, #8]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d10a      	bne.n	80079f6 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079e0:	2300      	movs	r3, #0
 80079e2:	60fb      	str	r3, [r7, #12]
 80079e4:	697b      	ldr	r3, [r7, #20]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	68db      	ldr	r3, [r3, #12]
 80079ea:	60fb      	str	r3, [r7, #12]
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	60fb      	str	r3, [r7, #12]
 80079f4:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	2200      	movs	r2, #0
 80079fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 80079fc:	697b      	ldr	r3, [r7, #20]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a04:	697b      	ldr	r3, [r7, #20]
 8007a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d003      	beq.n	8007a14 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a0c:	6978      	ldr	r0, [r7, #20]
 8007a0e:	f7ff ffa9 	bl	8007964 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a12:	e002      	b.n	8007a1a <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007a14:	6978      	ldr	r0, [r7, #20]
 8007a16:	f7fa fcc7 	bl	80023a8 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a1a:	3718      	adds	r7, #24
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a20:	b580      	push	{r7, lr}
 8007a22:	b084      	sub	sp, #16
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007a2e:	68f8      	ldr	r0, [r7, #12]
 8007a30:	f7ff ff8e 	bl	8007950 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a34:	bf00      	nop
 8007a36:	3710      	adds	r7, #16
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f022 0203 	bic.w	r2, r2, #3
 8007a58:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a5e:	f043 0210 	orr.w	r2, r3, #16
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a6e:	68f8      	ldr	r0, [r7, #12]
 8007a70:	f7ff ff78 	bl	8007964 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a74:	bf00      	nop
 8007a76:	3710      	adds	r7, #16
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b088      	sub	sp, #32
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	60f8      	str	r0, [r7, #12]
 8007a84:	60b9      	str	r1, [r7, #8]
 8007a86:	603b      	str	r3, [r7, #0]
 8007a88:	4613      	mov	r3, r2
 8007a8a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007a8c:	f7fc fd12 	bl	80044b4 <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a94:	1a9b      	subs	r3, r3, r2
 8007a96:	683a      	ldr	r2, [r7, #0]
 8007a98:	4413      	add	r3, r2
 8007a9a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007a9c:	f7fc fd0a 	bl	80044b4 <HAL_GetTick>
 8007aa0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007aa2:	4b39      	ldr	r3, [pc, #228]	@ (8007b88 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	015b      	lsls	r3, r3, #5
 8007aa8:	0d1b      	lsrs	r3, r3, #20
 8007aaa:	69fa      	ldr	r2, [r7, #28]
 8007aac:	fb02 f303 	mul.w	r3, r2, r3
 8007ab0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ab2:	e054      	b.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ab4:	683b      	ldr	r3, [r7, #0]
 8007ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007aba:	d050      	beq.n	8007b5e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007abc:	f7fc fcfa 	bl	80044b4 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d902      	bls.n	8007ad2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d13d      	bne.n	8007b4e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ae0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007aea:	d111      	bne.n	8007b10 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	689b      	ldr	r3, [r3, #8]
 8007af0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007af4:	d004      	beq.n	8007b00 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	689b      	ldr	r3, [r3, #8]
 8007afa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007afe:	d107      	bne.n	8007b10 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	681a      	ldr	r2, [r3, #0]
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b0e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b18:	d10f      	bne.n	8007b3a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b28:	601a      	str	r2, [r3, #0]
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	681a      	ldr	r2, [r3, #0]
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b38:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	2201      	movs	r2, #1
 8007b3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	2200      	movs	r2, #0
 8007b46:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b4a:	2303      	movs	r3, #3
 8007b4c:	e017      	b.n	8007b7e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d101      	bne.n	8007b58 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b54:	2300      	movs	r3, #0
 8007b56:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	3b01      	subs	r3, #1
 8007b5c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	689a      	ldr	r2, [r3, #8]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	4013      	ands	r3, r2
 8007b68:	68ba      	ldr	r2, [r7, #8]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	bf0c      	ite	eq
 8007b6e:	2301      	moveq	r3, #1
 8007b70:	2300      	movne	r3, #0
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	461a      	mov	r2, r3
 8007b76:	79fb      	ldrb	r3, [r7, #7]
 8007b78:	429a      	cmp	r2, r3
 8007b7a:	d19b      	bne.n	8007ab4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3720      	adds	r7, #32
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	20000004 	.word	0x20000004

08007b8c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b086      	sub	sp, #24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	685b      	ldr	r3, [r3, #4]
 8007b9c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ba0:	d111      	bne.n	8007bc6 <SPI_EndRxTransaction+0x3a>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	689b      	ldr	r3, [r3, #8]
 8007ba6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007baa:	d004      	beq.n	8007bb6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	689b      	ldr	r3, [r3, #8]
 8007bb0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bb4:	d107      	bne.n	8007bc6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	681a      	ldr	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bc4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	685b      	ldr	r3, [r3, #4]
 8007bca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bce:	d12a      	bne.n	8007c26 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd8:	d012      	beq.n	8007c00 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	9300      	str	r3, [sp, #0]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	2200      	movs	r2, #0
 8007be2:	2180      	movs	r1, #128	@ 0x80
 8007be4:	68f8      	ldr	r0, [r7, #12]
 8007be6:	f7ff ff49 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007bea:	4603      	mov	r3, r0
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d02d      	beq.n	8007c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bf4:	f043 0220 	orr.w	r2, r3, #32
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e026      	b.n	8007c4e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	9300      	str	r3, [sp, #0]
 8007c04:	68bb      	ldr	r3, [r7, #8]
 8007c06:	2200      	movs	r2, #0
 8007c08:	2101      	movs	r1, #1
 8007c0a:	68f8      	ldr	r0, [r7, #12]
 8007c0c:	f7ff ff36 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007c10:	4603      	mov	r3, r0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d01a      	beq.n	8007c4c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c1a:	f043 0220 	orr.w	r2, r3, #32
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e013      	b.n	8007c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	9300      	str	r3, [sp, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	2101      	movs	r1, #1
 8007c30:	68f8      	ldr	r0, [r7, #12]
 8007c32:	f7ff ff23 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007c36:	4603      	mov	r3, r0
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d007      	beq.n	8007c4c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c40:	f043 0220 	orr.w	r2, r3, #32
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c48:	2303      	movs	r3, #3
 8007c4a:	e000      	b.n	8007c4e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b088      	sub	sp, #32
 8007c5c:	af02      	add	r7, sp, #8
 8007c5e:	60f8      	str	r0, [r7, #12]
 8007c60:	60b9      	str	r1, [r7, #8]
 8007c62:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	9300      	str	r3, [sp, #0]
 8007c68:	68bb      	ldr	r3, [r7, #8]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	2102      	movs	r1, #2
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	f7ff ff04 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007c74:	4603      	mov	r3, r0
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d007      	beq.n	8007c8a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c7e:	f043 0220 	orr.w	r2, r3, #32
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007c86:	2303      	movs	r3, #3
 8007c88:	e032      	b.n	8007cf0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007cf8 <SPI_EndRxTxTransaction+0xa0>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4a1b      	ldr	r2, [pc, #108]	@ (8007cfc <SPI_EndRxTxTransaction+0xa4>)
 8007c90:	fba2 2303 	umull	r2, r3, r2, r3
 8007c94:	0d5b      	lsrs	r3, r3, #21
 8007c96:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007c9a:	fb02 f303 	mul.w	r3, r2, r3
 8007c9e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007ca0:	68fb      	ldr	r3, [r7, #12]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ca8:	d112      	bne.n	8007cd0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	9300      	str	r3, [sp, #0]
 8007cae:	68bb      	ldr	r3, [r7, #8]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	2180      	movs	r1, #128	@ 0x80
 8007cb4:	68f8      	ldr	r0, [r7, #12]
 8007cb6:	f7ff fee1 	bl	8007a7c <SPI_WaitFlagStateUntilTimeout>
 8007cba:	4603      	mov	r3, r0
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d016      	beq.n	8007cee <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cc4:	f043 0220 	orr.w	r2, r3, #32
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e00f      	b.n	8007cf0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cd0:	697b      	ldr	r3, [r7, #20]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d00a      	beq.n	8007cec <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007cd6:	697b      	ldr	r3, [r7, #20]
 8007cd8:	3b01      	subs	r3, #1
 8007cda:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	689b      	ldr	r3, [r3, #8]
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d0f2      	beq.n	8007cd0 <SPI_EndRxTxTransaction+0x78>
 8007cea:	e000      	b.n	8007cee <SPI_EndRxTxTransaction+0x96>
        break;
 8007cec:	bf00      	nop
  }

  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3718      	adds	r7, #24
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	20000004 	.word	0x20000004
 8007cfc:	165e9f81 	.word	0x165e9f81

08007d00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d101      	bne.n	8007d12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e041      	b.n	8007d96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d18:	b2db      	uxtb	r3, r3
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f7fa fa76 	bl	8002218 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2202      	movs	r2, #2
 8007d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681a      	ldr	r2, [r3, #0]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	3304      	adds	r3, #4
 8007d3c:	4619      	mov	r1, r3
 8007d3e:	4610      	mov	r0, r2
 8007d40:	f000 fd6a 	bl	8008818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	2201      	movs	r2, #1
 8007d50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2201      	movs	r2, #1
 8007d58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2201      	movs	r2, #1
 8007d68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	2201      	movs	r2, #1
 8007d78:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2201      	movs	r2, #1
 8007d80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	2201      	movs	r2, #1
 8007d88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2201      	movs	r2, #1
 8007d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d94:	2300      	movs	r3, #0
}
 8007d96:	4618      	mov	r0, r3
 8007d98:	3708      	adds	r7, #8
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b082      	sub	sp, #8
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d101      	bne.n	8007db0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dac:	2301      	movs	r3, #1
 8007dae:	e041      	b.n	8007e34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007dc4:	6878      	ldr	r0, [r7, #4]
 8007dc6:	f000 f839 	bl	8007e3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	2202      	movs	r2, #2
 8007dce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681a      	ldr	r2, [r3, #0]
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	3304      	adds	r3, #4
 8007dda:	4619      	mov	r1, r3
 8007ddc:	4610      	mov	r0, r2
 8007dde:	f000 fd1b 	bl	8008818 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2201      	movs	r2, #1
 8007de6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2201      	movs	r2, #1
 8007dee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	2201      	movs	r2, #1
 8007e06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2201      	movs	r2, #1
 8007e0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2201      	movs	r2, #1
 8007e1e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2201      	movs	r2, #1
 8007e26:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	2201      	movs	r2, #1
 8007e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e32:	2300      	movs	r3, #0
}
 8007e34:	4618      	mov	r0, r3
 8007e36:	3708      	adds	r7, #8
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}

08007e3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e44:	bf00      	nop
 8007e46:	370c      	adds	r7, #12
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4e:	4770      	bx	lr

08007e50 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b086      	sub	sp, #24
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	60f8      	str	r0, [r7, #12]
 8007e58:	60b9      	str	r1, [r7, #8]
 8007e5a:	607a      	str	r2, [r7, #4]
 8007e5c:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007e5e:	2300      	movs	r3, #0
 8007e60:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d109      	bne.n	8007e7c <HAL_TIM_PWM_Start_DMA+0x2c>
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e6e:	b2db      	uxtb	r3, r3
 8007e70:	2b02      	cmp	r3, #2
 8007e72:	bf0c      	ite	eq
 8007e74:	2301      	moveq	r3, #1
 8007e76:	2300      	movne	r3, #0
 8007e78:	b2db      	uxtb	r3, r3
 8007e7a:	e022      	b.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007e7c:	68bb      	ldr	r3, [r7, #8]
 8007e7e:	2b04      	cmp	r3, #4
 8007e80:	d109      	bne.n	8007e96 <HAL_TIM_PWM_Start_DMA+0x46>
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	2b02      	cmp	r3, #2
 8007e8c:	bf0c      	ite	eq
 8007e8e:	2301      	moveq	r3, #1
 8007e90:	2300      	movne	r3, #0
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	e015      	b.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	2b08      	cmp	r3, #8
 8007e9a:	d109      	bne.n	8007eb0 <HAL_TIM_PWM_Start_DMA+0x60>
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ea2:	b2db      	uxtb	r3, r3
 8007ea4:	2b02      	cmp	r3, #2
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	e008      	b.n	8007ec2 <HAL_TIM_PWM_Start_DMA+0x72>
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007eb6:	b2db      	uxtb	r3, r3
 8007eb8:	2b02      	cmp	r3, #2
 8007eba:	bf0c      	ite	eq
 8007ebc:	2301      	moveq	r3, #1
 8007ebe:	2300      	movne	r3, #0
 8007ec0:	b2db      	uxtb	r3, r3
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d001      	beq.n	8007eca <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007ec6:	2302      	movs	r3, #2
 8007ec8:	e15d      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d109      	bne.n	8007ee4 <HAL_TIM_PWM_Start_DMA+0x94>
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ed6:	b2db      	uxtb	r3, r3
 8007ed8:	2b01      	cmp	r3, #1
 8007eda:	bf0c      	ite	eq
 8007edc:	2301      	moveq	r3, #1
 8007ede:	2300      	movne	r3, #0
 8007ee0:	b2db      	uxtb	r3, r3
 8007ee2:	e022      	b.n	8007f2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	2b04      	cmp	r3, #4
 8007ee8:	d109      	bne.n	8007efe <HAL_TIM_PWM_Start_DMA+0xae>
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ef0:	b2db      	uxtb	r3, r3
 8007ef2:	2b01      	cmp	r3, #1
 8007ef4:	bf0c      	ite	eq
 8007ef6:	2301      	moveq	r3, #1
 8007ef8:	2300      	movne	r3, #0
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	e015      	b.n	8007f2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007efe:	68bb      	ldr	r3, [r7, #8]
 8007f00:	2b08      	cmp	r3, #8
 8007f02:	d109      	bne.n	8007f18 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	bf0c      	ite	eq
 8007f10:	2301      	moveq	r3, #1
 8007f12:	2300      	movne	r3, #0
 8007f14:	b2db      	uxtb	r3, r3
 8007f16:	e008      	b.n	8007f2a <HAL_TIM_PWM_Start_DMA+0xda>
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f1e:	b2db      	uxtb	r3, r3
 8007f20:	2b01      	cmp	r3, #1
 8007f22:	bf0c      	ite	eq
 8007f24:	2301      	moveq	r3, #1
 8007f26:	2300      	movne	r3, #0
 8007f28:	b2db      	uxtb	r3, r3
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d024      	beq.n	8007f78 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2b00      	cmp	r3, #0
 8007f32:	d002      	beq.n	8007f3a <HAL_TIM_PWM_Start_DMA+0xea>
 8007f34:	887b      	ldrh	r3, [r7, #2]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d101      	bne.n	8007f3e <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007f3a:	2301      	movs	r3, #1
 8007f3c:	e123      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d104      	bne.n	8007f4e <HAL_TIM_PWM_Start_DMA+0xfe>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	2202      	movs	r2, #2
 8007f48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f4c:	e016      	b.n	8007f7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f4e:	68bb      	ldr	r3, [r7, #8]
 8007f50:	2b04      	cmp	r3, #4
 8007f52:	d104      	bne.n	8007f5e <HAL_TIM_PWM_Start_DMA+0x10e>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f5c:	e00e      	b.n	8007f7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	2b08      	cmp	r3, #8
 8007f62:	d104      	bne.n	8007f6e <HAL_TIM_PWM_Start_DMA+0x11e>
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2202      	movs	r2, #2
 8007f68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f6c:	e006      	b.n	8007f7c <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2202      	movs	r2, #2
 8007f72:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f76:	e001      	b.n	8007f7c <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f78:	2301      	movs	r3, #1
 8007f7a:	e104      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2b0c      	cmp	r3, #12
 8007f80:	f200 80ae 	bhi.w	80080e0 <HAL_TIM_PWM_Start_DMA+0x290>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	080080e1 	.word	0x080080e1
 8007f94:	080080e1 	.word	0x080080e1
 8007f98:	080080e1 	.word	0x080080e1
 8007f9c:	08008009 	.word	0x08008009
 8007fa0:	080080e1 	.word	0x080080e1
 8007fa4:	080080e1 	.word	0x080080e1
 8007fa8:	080080e1 	.word	0x080080e1
 8007fac:	08008051 	.word	0x08008051
 8007fb0:	080080e1 	.word	0x080080e1
 8007fb4:	080080e1 	.word	0x080080e1
 8007fb8:	080080e1 	.word	0x080080e1
 8007fbc:	08008099 	.word	0x08008099
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fc4:	4a72      	ldr	r2, [pc, #456]	@ (8008190 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007fc6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fcc:	4a71      	ldr	r2, [pc, #452]	@ (8008194 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd4:	4a70      	ldr	r2, [pc, #448]	@ (8008198 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007fd6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007fdc:	6879      	ldr	r1, [r7, #4]
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	3334      	adds	r3, #52	@ 0x34
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	887b      	ldrh	r3, [r7, #2]
 8007fe8:	f7fc fc54 	bl	8004894 <HAL_DMA_Start_IT>
 8007fec:	4603      	mov	r3, r0
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d001      	beq.n	8007ff6 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	e0c7      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	68da      	ldr	r2, [r3, #12]
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008004:	60da      	str	r2, [r3, #12]
      break;
 8008006:	e06e      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800800c:	4a60      	ldr	r2, [pc, #384]	@ (8008190 <HAL_TIM_PWM_Start_DMA+0x340>)
 800800e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008014:	4a5f      	ldr	r2, [pc, #380]	@ (8008194 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800801c:	4a5e      	ldr	r2, [pc, #376]	@ (8008198 <HAL_TIM_PWM_Start_DMA+0x348>)
 800801e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	3338      	adds	r3, #56	@ 0x38
 800802c:	461a      	mov	r2, r3
 800802e:	887b      	ldrh	r3, [r7, #2]
 8008030:	f7fc fc30 	bl	8004894 <HAL_DMA_Start_IT>
 8008034:	4603      	mov	r3, r0
 8008036:	2b00      	cmp	r3, #0
 8008038:	d001      	beq.n	800803e <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800803a:	2301      	movs	r3, #1
 800803c:	e0a3      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	68da      	ldr	r2, [r3, #12]
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800804c:	60da      	str	r2, [r3, #12]
      break;
 800804e:	e04a      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008054:	4a4e      	ldr	r2, [pc, #312]	@ (8008190 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008056:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800805c:	4a4d      	ldr	r2, [pc, #308]	@ (8008194 <HAL_TIM_PWM_Start_DMA+0x344>)
 800805e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008064:	4a4c      	ldr	r2, [pc, #304]	@ (8008198 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008066:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 800806c:	6879      	ldr	r1, [r7, #4]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	333c      	adds	r3, #60	@ 0x3c
 8008074:	461a      	mov	r2, r3
 8008076:	887b      	ldrh	r3, [r7, #2]
 8008078:	f7fc fc0c 	bl	8004894 <HAL_DMA_Start_IT>
 800807c:	4603      	mov	r3, r0
 800807e:	2b00      	cmp	r3, #0
 8008080:	d001      	beq.n	8008086 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008082:	2301      	movs	r3, #1
 8008084:	e07f      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	68da      	ldr	r2, [r3, #12]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008094:	60da      	str	r2, [r3, #12]
      break;
 8008096:	e026      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800809c:	4a3c      	ldr	r2, [pc, #240]	@ (8008190 <HAL_TIM_PWM_Start_DMA+0x340>)
 800809e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080a4:	4a3b      	ldr	r2, [pc, #236]	@ (8008194 <HAL_TIM_PWM_Start_DMA+0x344>)
 80080a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080ac:	4a3a      	ldr	r2, [pc, #232]	@ (8008198 <HAL_TIM_PWM_Start_DMA+0x348>)
 80080ae:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80080b4:	6879      	ldr	r1, [r7, #4]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3340      	adds	r3, #64	@ 0x40
 80080bc:	461a      	mov	r2, r3
 80080be:	887b      	ldrh	r3, [r7, #2]
 80080c0:	f7fc fbe8 	bl	8004894 <HAL_DMA_Start_IT>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d001      	beq.n	80080ce <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080ca:	2301      	movs	r3, #1
 80080cc:	e05b      	b.n	8008186 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080dc:	60da      	str	r2, [r3, #12]
      break;
 80080de:	e002      	b.n	80080e6 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80080e0:	2301      	movs	r3, #1
 80080e2:	75fb      	strb	r3, [r7, #23]
      break;
 80080e4:	bf00      	nop
  }

  if (status == HAL_OK)
 80080e6:	7dfb      	ldrb	r3, [r7, #23]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d14b      	bne.n	8008184 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2201      	movs	r2, #1
 80080f2:	68b9      	ldr	r1, [r7, #8]
 80080f4:	4618      	mov	r0, r3
 80080f6:	f000 fe41 	bl	8008d7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a27      	ldr	r2, [pc, #156]	@ (800819c <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d107      	bne.n	8008114 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008112:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a20      	ldr	r2, [pc, #128]	@ (800819c <HAL_TIM_PWM_Start_DMA+0x34c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d018      	beq.n	8008150 <HAL_TIM_PWM_Start_DMA+0x300>
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008126:	d013      	beq.n	8008150 <HAL_TIM_PWM_Start_DMA+0x300>
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	4a1c      	ldr	r2, [pc, #112]	@ (80081a0 <HAL_TIM_PWM_Start_DMA+0x350>)
 800812e:	4293      	cmp	r3, r2
 8008130:	d00e      	beq.n	8008150 <HAL_TIM_PWM_Start_DMA+0x300>
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	4a1b      	ldr	r2, [pc, #108]	@ (80081a4 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008138:	4293      	cmp	r3, r2
 800813a:	d009      	beq.n	8008150 <HAL_TIM_PWM_Start_DMA+0x300>
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a19      	ldr	r2, [pc, #100]	@ (80081a8 <HAL_TIM_PWM_Start_DMA+0x358>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d004      	beq.n	8008150 <HAL_TIM_PWM_Start_DMA+0x300>
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	4a18      	ldr	r2, [pc, #96]	@ (80081ac <HAL_TIM_PWM_Start_DMA+0x35c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d111      	bne.n	8008174 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	689b      	ldr	r3, [r3, #8]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	2b06      	cmp	r3, #6
 8008160:	d010      	beq.n	8008184 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	681a      	ldr	r2, [r3, #0]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	f042 0201 	orr.w	r2, r2, #1
 8008170:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008172:	e007      	b.n	8008184 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681a      	ldr	r2, [r3, #0]
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	f042 0201 	orr.w	r2, r2, #1
 8008182:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008184:	7dfb      	ldrb	r3, [r7, #23]
}
 8008186:	4618      	mov	r0, r3
 8008188:	3718      	adds	r7, #24
 800818a:	46bd      	mov	sp, r7
 800818c:	bd80      	pop	{r7, pc}
 800818e:	bf00      	nop
 8008190:	08008709 	.word	0x08008709
 8008194:	080087b1 	.word	0x080087b1
 8008198:	08008677 	.word	0x08008677
 800819c:	40010000 	.word	0x40010000
 80081a0:	40000400 	.word	0x40000400
 80081a4:	40000800 	.word	0x40000800
 80081a8:	40000c00 	.word	0x40000c00
 80081ac:	40014000 	.word	0x40014000

080081b0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081b0:	b580      	push	{r7, lr}
 80081b2:	b084      	sub	sp, #16
 80081b4:	af00      	add	r7, sp, #0
 80081b6:	6078      	str	r0, [r7, #4]
 80081b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081ba:	2300      	movs	r3, #0
 80081bc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	2b0c      	cmp	r3, #12
 80081c2:	d855      	bhi.n	8008270 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80081c4:	a201      	add	r2, pc, #4	@ (adr r2, 80081cc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80081c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081ca:	bf00      	nop
 80081cc:	08008201 	.word	0x08008201
 80081d0:	08008271 	.word	0x08008271
 80081d4:	08008271 	.word	0x08008271
 80081d8:	08008271 	.word	0x08008271
 80081dc:	0800821d 	.word	0x0800821d
 80081e0:	08008271 	.word	0x08008271
 80081e4:	08008271 	.word	0x08008271
 80081e8:	08008271 	.word	0x08008271
 80081ec:	08008239 	.word	0x08008239
 80081f0:	08008271 	.word	0x08008271
 80081f4:	08008271 	.word	0x08008271
 80081f8:	08008271 	.word	0x08008271
 80081fc:	08008255 	.word	0x08008255
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	68da      	ldr	r2, [r3, #12]
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800820e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008214:	4618      	mov	r0, r3
 8008216:	f7fc fb95 	bl	8004944 <HAL_DMA_Abort_IT>
      break;
 800821a:	e02c      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800822a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008230:	4618      	mov	r0, r3
 8008232:	f7fc fb87 	bl	8004944 <HAL_DMA_Abort_IT>
      break;
 8008236:	e01e      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008246:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800824c:	4618      	mov	r0, r3
 800824e:	f7fc fb79 	bl	8004944 <HAL_DMA_Abort_IT>
      break;
 8008252:	e010      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008262:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	4618      	mov	r0, r3
 800826a:	f7fc fb6b 	bl	8004944 <HAL_DMA_Abort_IT>
      break;
 800826e:	e002      	b.n	8008276 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008270:	2301      	movs	r3, #1
 8008272:	73fb      	strb	r3, [r7, #15]
      break;
 8008274:	bf00      	nop
  }

  if (status == HAL_OK)
 8008276:	7bfb      	ldrb	r3, [r7, #15]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d157      	bne.n	800832c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	2200      	movs	r2, #0
 8008282:	6839      	ldr	r1, [r7, #0]
 8008284:	4618      	mov	r0, r3
 8008286:	f000 fd79 	bl	8008d7c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	4a2a      	ldr	r2, [pc, #168]	@ (8008338 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8008290:	4293      	cmp	r3, r2
 8008292:	d117      	bne.n	80082c4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	6a1a      	ldr	r2, [r3, #32]
 800829a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800829e:	4013      	ands	r3, r2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d10f      	bne.n	80082c4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	6a1a      	ldr	r2, [r3, #32]
 80082aa:	f240 4344 	movw	r3, #1092	@ 0x444
 80082ae:	4013      	ands	r3, r2
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d107      	bne.n	80082c4 <HAL_TIM_PWM_Stop_DMA+0x114>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082c2:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	6a1a      	ldr	r2, [r3, #32]
 80082ca:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082ce:	4013      	ands	r3, r2
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d10f      	bne.n	80082f4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	6a1a      	ldr	r2, [r3, #32]
 80082da:	f240 4344 	movw	r3, #1092	@ 0x444
 80082de:	4013      	ands	r3, r2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d107      	bne.n	80082f4 <HAL_TIM_PWM_Stop_DMA+0x144>
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	681a      	ldr	r2, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	f022 0201 	bic.w	r2, r2, #1
 80082f2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d104      	bne.n	8008304 <HAL_TIM_PWM_Stop_DMA+0x154>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2201      	movs	r2, #1
 80082fe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008302:	e013      	b.n	800832c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	2b04      	cmp	r3, #4
 8008308:	d104      	bne.n	8008314 <HAL_TIM_PWM_Stop_DMA+0x164>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2201      	movs	r2, #1
 800830e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008312:	e00b      	b.n	800832c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008314:	683b      	ldr	r3, [r7, #0]
 8008316:	2b08      	cmp	r3, #8
 8008318:	d104      	bne.n	8008324 <HAL_TIM_PWM_Stop_DMA+0x174>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2201      	movs	r2, #1
 800831e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008322:	e003      	b.n	800832c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2201      	movs	r2, #1
 8008328:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 800832c:	7bfb      	ldrb	r3, [r7, #15]
}
 800832e:	4618      	mov	r0, r3
 8008330:	3710      	adds	r7, #16
 8008332:	46bd      	mov	sp, r7
 8008334:	bd80      	pop	{r7, pc}
 8008336:	bf00      	nop
 8008338:	40010000 	.word	0x40010000

0800833c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b086      	sub	sp, #24
 8008340:	af00      	add	r7, sp, #0
 8008342:	60f8      	str	r0, [r7, #12]
 8008344:	60b9      	str	r1, [r7, #8]
 8008346:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008352:	2b01      	cmp	r3, #1
 8008354:	d101      	bne.n	800835a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008356:	2302      	movs	r3, #2
 8008358:	e0ae      	b.n	80084b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	2201      	movs	r2, #1
 800835e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b0c      	cmp	r3, #12
 8008366:	f200 809f 	bhi.w	80084a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800836a:	a201      	add	r2, pc, #4	@ (adr r2, 8008370 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800836c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008370:	080083a5 	.word	0x080083a5
 8008374:	080084a9 	.word	0x080084a9
 8008378:	080084a9 	.word	0x080084a9
 800837c:	080084a9 	.word	0x080084a9
 8008380:	080083e5 	.word	0x080083e5
 8008384:	080084a9 	.word	0x080084a9
 8008388:	080084a9 	.word	0x080084a9
 800838c:	080084a9 	.word	0x080084a9
 8008390:	08008427 	.word	0x08008427
 8008394:	080084a9 	.word	0x080084a9
 8008398:	080084a9 	.word	0x080084a9
 800839c:	080084a9 	.word	0x080084a9
 80083a0:	08008467 	.word	0x08008467
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	68b9      	ldr	r1, [r7, #8]
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fac0 	bl	8008930 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	699a      	ldr	r2, [r3, #24]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f042 0208 	orr.w	r2, r2, #8
 80083be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	699a      	ldr	r2, [r3, #24]
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	f022 0204 	bic.w	r2, r2, #4
 80083ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	6999      	ldr	r1, [r3, #24]
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	691a      	ldr	r2, [r3, #16]
 80083da:	68fb      	ldr	r3, [r7, #12]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	430a      	orrs	r2, r1
 80083e0:	619a      	str	r2, [r3, #24]
      break;
 80083e2:	e064      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68b9      	ldr	r1, [r7, #8]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 fb06 	bl	80089fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	699a      	ldr	r2, [r3, #24]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	699a      	ldr	r2, [r3, #24]
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800840e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	6999      	ldr	r1, [r3, #24]
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	021a      	lsls	r2, r3, #8
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	430a      	orrs	r2, r1
 8008422:	619a      	str	r2, [r3, #24]
      break;
 8008424:	e043      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	68b9      	ldr	r1, [r7, #8]
 800842c:	4618      	mov	r0, r3
 800842e:	f000 fb51 	bl	8008ad4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	69da      	ldr	r2, [r3, #28]
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f042 0208 	orr.w	r2, r2, #8
 8008440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	69da      	ldr	r2, [r3, #28]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 0204 	bic.w	r2, r2, #4
 8008450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	69d9      	ldr	r1, [r3, #28]
 8008458:	68bb      	ldr	r3, [r7, #8]
 800845a:	691a      	ldr	r2, [r3, #16]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	430a      	orrs	r2, r1
 8008462:	61da      	str	r2, [r3, #28]
      break;
 8008464:	e023      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68b9      	ldr	r1, [r7, #8]
 800846c:	4618      	mov	r0, r3
 800846e:	f000 fb9b 	bl	8008ba8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	69da      	ldr	r2, [r3, #28]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	69da      	ldr	r2, [r3, #28]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	69d9      	ldr	r1, [r3, #28]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	691b      	ldr	r3, [r3, #16]
 800849c:	021a      	lsls	r2, r3, #8
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	430a      	orrs	r2, r1
 80084a4:	61da      	str	r2, [r3, #28]
      break;
 80084a6:	e002      	b.n	80084ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084a8:	2301      	movs	r3, #1
 80084aa:	75fb      	strb	r3, [r7, #23]
      break;
 80084ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3718      	adds	r7, #24
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd80      	pop	{r7, pc}

080084c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b084      	sub	sp, #16
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084ca:	2300      	movs	r3, #0
 80084cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d101      	bne.n	80084dc <HAL_TIM_ConfigClockSource+0x1c>
 80084d8:	2302      	movs	r3, #2
 80084da:	e0b4      	b.n	8008646 <HAL_TIM_ConfigClockSource+0x186>
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	2201      	movs	r2, #1
 80084e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	2202      	movs	r2, #2
 80084e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80084fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008502:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	68ba      	ldr	r2, [r7, #8]
 800850a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008514:	d03e      	beq.n	8008594 <HAL_TIM_ConfigClockSource+0xd4>
 8008516:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800851a:	f200 8087 	bhi.w	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800851e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008522:	f000 8086 	beq.w	8008632 <HAL_TIM_ConfigClockSource+0x172>
 8008526:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800852a:	d87f      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800852c:	2b70      	cmp	r3, #112	@ 0x70
 800852e:	d01a      	beq.n	8008566 <HAL_TIM_ConfigClockSource+0xa6>
 8008530:	2b70      	cmp	r3, #112	@ 0x70
 8008532:	d87b      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008534:	2b60      	cmp	r3, #96	@ 0x60
 8008536:	d050      	beq.n	80085da <HAL_TIM_ConfigClockSource+0x11a>
 8008538:	2b60      	cmp	r3, #96	@ 0x60
 800853a:	d877      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800853c:	2b50      	cmp	r3, #80	@ 0x50
 800853e:	d03c      	beq.n	80085ba <HAL_TIM_ConfigClockSource+0xfa>
 8008540:	2b50      	cmp	r3, #80	@ 0x50
 8008542:	d873      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008544:	2b40      	cmp	r3, #64	@ 0x40
 8008546:	d058      	beq.n	80085fa <HAL_TIM_ConfigClockSource+0x13a>
 8008548:	2b40      	cmp	r3, #64	@ 0x40
 800854a:	d86f      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800854c:	2b30      	cmp	r3, #48	@ 0x30
 800854e:	d064      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008550:	2b30      	cmp	r3, #48	@ 0x30
 8008552:	d86b      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 8008554:	2b20      	cmp	r3, #32
 8008556:	d060      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008558:	2b20      	cmp	r3, #32
 800855a:	d867      	bhi.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
 800855c:	2b00      	cmp	r3, #0
 800855e:	d05c      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008560:	2b10      	cmp	r3, #16
 8008562:	d05a      	beq.n	800861a <HAL_TIM_ConfigClockSource+0x15a>
 8008564:	e062      	b.n	800862c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800856e:	683b      	ldr	r3, [r7, #0]
 8008570:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008576:	f000 fbe1 	bl	8008d3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008582:	68bb      	ldr	r3, [r7, #8]
 8008584:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008588:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	609a      	str	r2, [r3, #8]
      break;
 8008592:	e04f      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085a4:	f000 fbca 	bl	8008d3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	689a      	ldr	r2, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085b6:	609a      	str	r2, [r3, #8]
      break;
 80085b8:	e03c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085be:	683b      	ldr	r3, [r7, #0]
 80085c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085c6:	461a      	mov	r2, r3
 80085c8:	f000 fb3e 	bl	8008c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	2150      	movs	r1, #80	@ 0x50
 80085d2:	4618      	mov	r0, r3
 80085d4:	f000 fb97 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 80085d8:	e02c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085e6:	461a      	mov	r2, r3
 80085e8:	f000 fb5d 	bl	8008ca6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	2160      	movs	r1, #96	@ 0x60
 80085f2:	4618      	mov	r0, r3
 80085f4:	f000 fb87 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 80085f8:	e01c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008602:	683b      	ldr	r3, [r7, #0]
 8008604:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008606:	461a      	mov	r2, r3
 8008608:	f000 fb1e 	bl	8008c48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	2140      	movs	r1, #64	@ 0x40
 8008612:	4618      	mov	r0, r3
 8008614:	f000 fb77 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 8008618:	e00c      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	4619      	mov	r1, r3
 8008624:	4610      	mov	r0, r2
 8008626:	f000 fb6e 	bl	8008d06 <TIM_ITRx_SetConfig>
      break;
 800862a:	e003      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800862c:	2301      	movs	r3, #1
 800862e:	73fb      	strb	r3, [r7, #15]
      break;
 8008630:	e000      	b.n	8008634 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008632:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	2200      	movs	r2, #0
 8008640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008644:	7bfb      	ldrb	r3, [r7, #15]
}
 8008646:	4618      	mov	r0, r3
 8008648:	3710      	adds	r7, #16
 800864a:	46bd      	mov	sp, r7
 800864c:	bd80      	pop	{r7, pc}

0800864e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800864e:	b480      	push	{r7}
 8008650:	b083      	sub	sp, #12
 8008652:	af00      	add	r7, sp, #0
 8008654:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008656:	bf00      	nop
 8008658:	370c      	adds	r7, #12
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008662:	b480      	push	{r7}
 8008664:	b083      	sub	sp, #12
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800866a:	bf00      	nop
 800866c:	370c      	adds	r7, #12
 800866e:	46bd      	mov	sp, r7
 8008670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008674:	4770      	bx	lr

08008676 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008676:	b580      	push	{r7, lr}
 8008678:	b084      	sub	sp, #16
 800867a:	af00      	add	r7, sp, #0
 800867c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008682:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d107      	bne.n	800869e <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2201      	movs	r2, #1
 8008692:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800869c:	e02a      	b.n	80086f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d107      	bne.n	80086b8 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2202      	movs	r2, #2
 80086ac:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	2201      	movs	r2, #1
 80086b2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086b6:	e01d      	b.n	80086f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086bc:	687a      	ldr	r2, [r7, #4]
 80086be:	429a      	cmp	r2, r3
 80086c0:	d107      	bne.n	80086d2 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	2204      	movs	r2, #4
 80086c6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	2201      	movs	r2, #1
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086d0:	e010      	b.n	80086f4 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086d6:	687a      	ldr	r2, [r7, #4]
 80086d8:	429a      	cmp	r2, r3
 80086da:	d107      	bne.n	80086ec <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086dc:	68fb      	ldr	r3, [r7, #12]
 80086de:	2208      	movs	r2, #8
 80086e0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80086ea:	e003      	b.n	80086f4 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80086ec:	68fb      	ldr	r3, [r7, #12]
 80086ee:	2201      	movs	r2, #1
 80086f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80086f4:	68f8      	ldr	r0, [r7, #12]
 80086f6:	f7ff ffb4 	bl	8008662 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	2200      	movs	r2, #0
 80086fe:	771a      	strb	r2, [r3, #28]
}
 8008700:	bf00      	nop
 8008702:	3710      	adds	r7, #16
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008708:	b580      	push	{r7, lr}
 800870a:	b084      	sub	sp, #16
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008714:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	429a      	cmp	r2, r3
 800871e:	d10b      	bne.n	8008738 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008720:	68fb      	ldr	r3, [r7, #12]
 8008722:	2201      	movs	r2, #1
 8008724:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	2b00      	cmp	r3, #0
 800872c:	d136      	bne.n	800879c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008736:	e031      	b.n	800879c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	429a      	cmp	r2, r3
 8008740:	d10b      	bne.n	800875a <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2202      	movs	r2, #2
 8008746:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	69db      	ldr	r3, [r3, #28]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d125      	bne.n	800879c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008758:	e020      	b.n	800879c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800875e:	687a      	ldr	r2, [r7, #4]
 8008760:	429a      	cmp	r2, r3
 8008762:	d10b      	bne.n	800877c <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	2204      	movs	r2, #4
 8008768:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	69db      	ldr	r3, [r3, #28]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d114      	bne.n	800879c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	2201      	movs	r2, #1
 8008776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800877a:	e00f      	b.n	800879c <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008780:	687a      	ldr	r2, [r7, #4]
 8008782:	429a      	cmp	r2, r3
 8008784:	d10a      	bne.n	800879c <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	2208      	movs	r2, #8
 800878a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d103      	bne.n	800879c <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	2201      	movs	r2, #1
 8008798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 800879c:	68f8      	ldr	r0, [r7, #12]
 800879e:	f7f9 f92f 	bl	8001a00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2200      	movs	r2, #0
 80087a6:	771a      	strb	r2, [r3, #28]
}
 80087a8:	bf00      	nop
 80087aa:	3710      	adds	r7, #16
 80087ac:	46bd      	mov	sp, r7
 80087ae:	bd80      	pop	{r7, pc}

080087b0 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	b084      	sub	sp, #16
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087bc:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087c2:	687a      	ldr	r2, [r7, #4]
 80087c4:	429a      	cmp	r2, r3
 80087c6:	d103      	bne.n	80087d0 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087c8:	68fb      	ldr	r3, [r7, #12]
 80087ca:	2201      	movs	r2, #1
 80087cc:	771a      	strb	r2, [r3, #28]
 80087ce:	e019      	b.n	8008804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087d4:	687a      	ldr	r2, [r7, #4]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d103      	bne.n	80087e2 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2202      	movs	r2, #2
 80087de:	771a      	strb	r2, [r3, #28]
 80087e0:	e010      	b.n	8008804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087e6:	687a      	ldr	r2, [r7, #4]
 80087e8:	429a      	cmp	r2, r3
 80087ea:	d103      	bne.n	80087f4 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	2204      	movs	r2, #4
 80087f0:	771a      	strb	r2, [r3, #28]
 80087f2:	e007      	b.n	8008804 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80087f8:	687a      	ldr	r2, [r7, #4]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	d102      	bne.n	8008804 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2208      	movs	r2, #8
 8008802:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008804:	68f8      	ldr	r0, [r7, #12]
 8008806:	f7ff ff22 	bl	800864e <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	2200      	movs	r2, #0
 800880e:	771a      	strb	r2, [r3, #28]
}
 8008810:	bf00      	nop
 8008812:	3710      	adds	r7, #16
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008818:	b480      	push	{r7}
 800881a:	b085      	sub	sp, #20
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
 8008820:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	4a3a      	ldr	r2, [pc, #232]	@ (8008914 <TIM_Base_SetConfig+0xfc>)
 800882c:	4293      	cmp	r3, r2
 800882e:	d00f      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008836:	d00b      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	4a37      	ldr	r2, [pc, #220]	@ (8008918 <TIM_Base_SetConfig+0x100>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d007      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a36      	ldr	r2, [pc, #216]	@ (800891c <TIM_Base_SetConfig+0x104>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_Base_SetConfig+0x38>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a35      	ldr	r2, [pc, #212]	@ (8008920 <TIM_Base_SetConfig+0x108>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d108      	bne.n	8008862 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008856:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	685b      	ldr	r3, [r3, #4]
 800885c:	68fa      	ldr	r2, [r7, #12]
 800885e:	4313      	orrs	r3, r2
 8008860:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	4a2b      	ldr	r2, [pc, #172]	@ (8008914 <TIM_Base_SetConfig+0xfc>)
 8008866:	4293      	cmp	r3, r2
 8008868:	d01b      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008870:	d017      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	4a28      	ldr	r2, [pc, #160]	@ (8008918 <TIM_Base_SetConfig+0x100>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d013      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	4a27      	ldr	r2, [pc, #156]	@ (800891c <TIM_Base_SetConfig+0x104>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d00f      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	4a26      	ldr	r2, [pc, #152]	@ (8008920 <TIM_Base_SetConfig+0x108>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d00b      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a25      	ldr	r2, [pc, #148]	@ (8008924 <TIM_Base_SetConfig+0x10c>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d007      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	4a24      	ldr	r2, [pc, #144]	@ (8008928 <TIM_Base_SetConfig+0x110>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d003      	beq.n	80088a2 <TIM_Base_SetConfig+0x8a>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a23      	ldr	r2, [pc, #140]	@ (800892c <TIM_Base_SetConfig+0x114>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d108      	bne.n	80088b4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088aa:	683b      	ldr	r3, [r7, #0]
 80088ac:	68db      	ldr	r3, [r3, #12]
 80088ae:	68fa      	ldr	r2, [r7, #12]
 80088b0:	4313      	orrs	r3, r2
 80088b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088ba:	683b      	ldr	r3, [r7, #0]
 80088bc:	695b      	ldr	r3, [r3, #20]
 80088be:	4313      	orrs	r3, r2
 80088c0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	689a      	ldr	r2, [r3, #8]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088d0:	683b      	ldr	r3, [r7, #0]
 80088d2:	681a      	ldr	r2, [r3, #0]
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	4a0e      	ldr	r2, [pc, #56]	@ (8008914 <TIM_Base_SetConfig+0xfc>)
 80088dc:	4293      	cmp	r3, r2
 80088de:	d103      	bne.n	80088e8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088e0:	683b      	ldr	r3, [r7, #0]
 80088e2:	691a      	ldr	r2, [r3, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2201      	movs	r2, #1
 80088ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	691b      	ldr	r3, [r3, #16]
 80088f2:	f003 0301 	and.w	r3, r3, #1
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d105      	bne.n	8008906 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	691b      	ldr	r3, [r3, #16]
 80088fe:	f023 0201 	bic.w	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	611a      	str	r2, [r3, #16]
  }
}
 8008906:	bf00      	nop
 8008908:	3714      	adds	r7, #20
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
 8008912:	bf00      	nop
 8008914:	40010000 	.word	0x40010000
 8008918:	40000400 	.word	0x40000400
 800891c:	40000800 	.word	0x40000800
 8008920:	40000c00 	.word	0x40000c00
 8008924:	40014000 	.word	0x40014000
 8008928:	40014400 	.word	0x40014400
 800892c:	40014800 	.word	0x40014800

08008930 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008930:	b480      	push	{r7}
 8008932:	b087      	sub	sp, #28
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	6a1b      	ldr	r3, [r3, #32]
 800893e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6a1b      	ldr	r3, [r3, #32]
 8008944:	f023 0201 	bic.w	r2, r3, #1
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	699b      	ldr	r3, [r3, #24]
 8008956:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800895e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008968:	683b      	ldr	r3, [r7, #0]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68fa      	ldr	r2, [r7, #12]
 800896e:	4313      	orrs	r3, r2
 8008970:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f023 0302 	bic.w	r3, r3, #2
 8008978:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	689b      	ldr	r3, [r3, #8]
 800897e:	697a      	ldr	r2, [r7, #20]
 8008980:	4313      	orrs	r3, r2
 8008982:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	4a1c      	ldr	r2, [pc, #112]	@ (80089f8 <TIM_OC1_SetConfig+0xc8>)
 8008988:	4293      	cmp	r3, r2
 800898a:	d10c      	bne.n	80089a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800898c:	697b      	ldr	r3, [r7, #20]
 800898e:	f023 0308 	bic.w	r3, r3, #8
 8008992:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	68db      	ldr	r3, [r3, #12]
 8008998:	697a      	ldr	r2, [r7, #20]
 800899a:	4313      	orrs	r3, r2
 800899c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800899e:	697b      	ldr	r3, [r7, #20]
 80089a0:	f023 0304 	bic.w	r3, r3, #4
 80089a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	4a13      	ldr	r2, [pc, #76]	@ (80089f8 <TIM_OC1_SetConfig+0xc8>)
 80089aa:	4293      	cmp	r3, r2
 80089ac:	d111      	bne.n	80089d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ae:	693b      	ldr	r3, [r7, #16]
 80089b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089be:	683b      	ldr	r3, [r7, #0]
 80089c0:	695b      	ldr	r3, [r3, #20]
 80089c2:	693a      	ldr	r2, [r7, #16]
 80089c4:	4313      	orrs	r3, r2
 80089c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089c8:	683b      	ldr	r3, [r7, #0]
 80089ca:	699b      	ldr	r3, [r3, #24]
 80089cc:	693a      	ldr	r2, [r7, #16]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	693a      	ldr	r2, [r7, #16]
 80089d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68fa      	ldr	r2, [r7, #12]
 80089dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	685a      	ldr	r2, [r3, #4]
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	621a      	str	r2, [r3, #32]
}
 80089ec:	bf00      	nop
 80089ee:	371c      	adds	r7, #28
 80089f0:	46bd      	mov	sp, r7
 80089f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f6:	4770      	bx	lr
 80089f8:	40010000 	.word	0x40010000

080089fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80089fc:	b480      	push	{r7}
 80089fe:	b087      	sub	sp, #28
 8008a00:	af00      	add	r7, sp, #0
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	6a1b      	ldr	r3, [r3, #32]
 8008a0a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a1b      	ldr	r3, [r3, #32]
 8008a10:	f023 0210 	bic.w	r2, r3, #16
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	699b      	ldr	r3, [r3, #24]
 8008a22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a34:	683b      	ldr	r3, [r7, #0]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	021b      	lsls	r3, r3, #8
 8008a3a:	68fa      	ldr	r2, [r7, #12]
 8008a3c:	4313      	orrs	r3, r2
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a40:	697b      	ldr	r3, [r7, #20]
 8008a42:	f023 0320 	bic.w	r3, r3, #32
 8008a46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a48:	683b      	ldr	r3, [r7, #0]
 8008a4a:	689b      	ldr	r3, [r3, #8]
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	697a      	ldr	r2, [r7, #20]
 8008a50:	4313      	orrs	r3, r2
 8008a52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	4a1e      	ldr	r2, [pc, #120]	@ (8008ad0 <TIM_OC2_SetConfig+0xd4>)
 8008a58:	4293      	cmp	r3, r2
 8008a5a:	d10d      	bne.n	8008a78 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	68db      	ldr	r3, [r3, #12]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a70:	697b      	ldr	r3, [r7, #20]
 8008a72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	4a15      	ldr	r2, [pc, #84]	@ (8008ad0 <TIM_OC2_SetConfig+0xd4>)
 8008a7c:	4293      	cmp	r3, r2
 8008a7e:	d113      	bne.n	8008aa8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a80:	693b      	ldr	r3, [r7, #16]
 8008a82:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008a88:	693b      	ldr	r3, [r7, #16]
 8008a8a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	695b      	ldr	r3, [r3, #20]
 8008a94:	009b      	lsls	r3, r3, #2
 8008a96:	693a      	ldr	r2, [r7, #16]
 8008a98:	4313      	orrs	r3, r2
 8008a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	699b      	ldr	r3, [r3, #24]
 8008aa0:	009b      	lsls	r3, r3, #2
 8008aa2:	693a      	ldr	r2, [r7, #16]
 8008aa4:	4313      	orrs	r3, r2
 8008aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	693a      	ldr	r2, [r7, #16]
 8008aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ab4:	683b      	ldr	r3, [r7, #0]
 8008ab6:	685a      	ldr	r2, [r3, #4]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	697a      	ldr	r2, [r7, #20]
 8008ac0:	621a      	str	r2, [r3, #32]
}
 8008ac2:	bf00      	nop
 8008ac4:	371c      	adds	r7, #28
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008acc:	4770      	bx	lr
 8008ace:	bf00      	nop
 8008ad0:	40010000 	.word	0x40010000

08008ad4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b087      	sub	sp, #28
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	6a1b      	ldr	r3, [r3, #32]
 8008ae8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	685b      	ldr	r3, [r3, #4]
 8008af4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f023 0303 	bic.w	r3, r3, #3
 8008b0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b0c:	683b      	ldr	r3, [r7, #0]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	689b      	ldr	r3, [r3, #8]
 8008b22:	021b      	lsls	r3, r3, #8
 8008b24:	697a      	ldr	r2, [r7, #20]
 8008b26:	4313      	orrs	r3, r2
 8008b28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8008ba4 <TIM_OC3_SetConfig+0xd0>)
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d10d      	bne.n	8008b4e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	68db      	ldr	r3, [r3, #12]
 8008b3e:	021b      	lsls	r3, r3, #8
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	4a14      	ldr	r2, [pc, #80]	@ (8008ba4 <TIM_OC3_SetConfig+0xd0>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d113      	bne.n	8008b7e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b5e:	693b      	ldr	r3, [r7, #16]
 8008b60:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b66:	683b      	ldr	r3, [r7, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	011b      	lsls	r3, r3, #4
 8008b6c:	693a      	ldr	r2, [r7, #16]
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	699b      	ldr	r3, [r3, #24]
 8008b76:	011b      	lsls	r3, r3, #4
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	4313      	orrs	r3, r2
 8008b7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	693a      	ldr	r2, [r7, #16]
 8008b82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	68fa      	ldr	r2, [r7, #12]
 8008b88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685a      	ldr	r2, [r3, #4]
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	697a      	ldr	r2, [r7, #20]
 8008b96:	621a      	str	r2, [r3, #32]
}
 8008b98:	bf00      	nop
 8008b9a:	371c      	adds	r7, #28
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba2:	4770      	bx	lr
 8008ba4:	40010000 	.word	0x40010000

08008ba8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	6078      	str	r0, [r7, #4]
 8008bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6a1b      	ldr	r3, [r3, #32]
 8008bb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	69db      	ldr	r3, [r3, #28]
 8008bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008be0:	683b      	ldr	r3, [r7, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	021b      	lsls	r3, r3, #8
 8008be6:	68fa      	ldr	r2, [r7, #12]
 8008be8:	4313      	orrs	r3, r2
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008bf2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008bf4:	683b      	ldr	r3, [r7, #0]
 8008bf6:	689b      	ldr	r3, [r3, #8]
 8008bf8:	031b      	lsls	r3, r3, #12
 8008bfa:	693a      	ldr	r2, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	4a10      	ldr	r2, [pc, #64]	@ (8008c44 <TIM_OC4_SetConfig+0x9c>)
 8008c04:	4293      	cmp	r3, r2
 8008c06:	d109      	bne.n	8008c1c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c08:	697b      	ldr	r3, [r7, #20]
 8008c0a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c0e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	695b      	ldr	r3, [r3, #20]
 8008c14:	019b      	lsls	r3, r3, #6
 8008c16:	697a      	ldr	r2, [r7, #20]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	697a      	ldr	r2, [r7, #20]
 8008c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	68fa      	ldr	r2, [r7, #12]
 8008c26:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c28:	683b      	ldr	r3, [r7, #0]
 8008c2a:	685a      	ldr	r2, [r3, #4]
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	693a      	ldr	r2, [r7, #16]
 8008c34:	621a      	str	r2, [r3, #32]
}
 8008c36:	bf00      	nop
 8008c38:	371c      	adds	r7, #28
 8008c3a:	46bd      	mov	sp, r7
 8008c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c40:	4770      	bx	lr
 8008c42:	bf00      	nop
 8008c44:	40010000 	.word	0x40010000

08008c48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b087      	sub	sp, #28
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	6a1b      	ldr	r3, [r3, #32]
 8008c58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	6a1b      	ldr	r3, [r3, #32]
 8008c5e:	f023 0201 	bic.w	r2, r3, #1
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	011b      	lsls	r3, r3, #4
 8008c78:	693a      	ldr	r2, [r7, #16]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c7e:	697b      	ldr	r3, [r7, #20]
 8008c80:	f023 030a 	bic.w	r3, r3, #10
 8008c84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008c86:	697a      	ldr	r2, [r7, #20]
 8008c88:	68bb      	ldr	r3, [r7, #8]
 8008c8a:	4313      	orrs	r3, r2
 8008c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	693a      	ldr	r2, [r7, #16]
 8008c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	697a      	ldr	r2, [r7, #20]
 8008c98:	621a      	str	r2, [r3, #32]
}
 8008c9a:	bf00      	nop
 8008c9c:	371c      	adds	r7, #28
 8008c9e:	46bd      	mov	sp, r7
 8008ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ca6:	b480      	push	{r7}
 8008ca8:	b087      	sub	sp, #28
 8008caa:	af00      	add	r7, sp, #0
 8008cac:	60f8      	str	r0, [r7, #12]
 8008cae:	60b9      	str	r1, [r7, #8]
 8008cb0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	6a1b      	ldr	r3, [r3, #32]
 8008cb6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6a1b      	ldr	r3, [r3, #32]
 8008cbc:	f023 0210 	bic.w	r2, r3, #16
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	699b      	ldr	r3, [r3, #24]
 8008cc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	031b      	lsls	r3, r3, #12
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cdc:	697b      	ldr	r3, [r7, #20]
 8008cde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008ce2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	011b      	lsls	r3, r3, #4
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	693a      	ldr	r2, [r7, #16]
 8008cf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	697a      	ldr	r2, [r7, #20]
 8008cf8:	621a      	str	r2, [r3, #32]
}
 8008cfa:	bf00      	nop
 8008cfc:	371c      	adds	r7, #28
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr

08008d06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d06:	b480      	push	{r7}
 8008d08:	b085      	sub	sp, #20
 8008d0a:	af00      	add	r7, sp, #0
 8008d0c:	6078      	str	r0, [r7, #4]
 8008d0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d1e:	683a      	ldr	r2, [r7, #0]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	4313      	orrs	r3, r2
 8008d24:	f043 0307 	orr.w	r3, r3, #7
 8008d28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	68fa      	ldr	r2, [r7, #12]
 8008d2e:	609a      	str	r2, [r3, #8]
}
 8008d30:	bf00      	nop
 8008d32:	3714      	adds	r7, #20
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b087      	sub	sp, #28
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	60f8      	str	r0, [r7, #12]
 8008d44:	60b9      	str	r1, [r7, #8]
 8008d46:	607a      	str	r2, [r7, #4]
 8008d48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	689b      	ldr	r3, [r3, #8]
 8008d4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	021a      	lsls	r2, r3, #8
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	431a      	orrs	r2, r3
 8008d60:	68bb      	ldr	r3, [r7, #8]
 8008d62:	4313      	orrs	r3, r2
 8008d64:	697a      	ldr	r2, [r7, #20]
 8008d66:	4313      	orrs	r3, r2
 8008d68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	609a      	str	r2, [r3, #8]
}
 8008d70:	bf00      	nop
 8008d72:	371c      	adds	r7, #28
 8008d74:	46bd      	mov	sp, r7
 8008d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7a:	4770      	bx	lr

08008d7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d7c:	b480      	push	{r7}
 8008d7e:	b087      	sub	sp, #28
 8008d80:	af00      	add	r7, sp, #0
 8008d82:	60f8      	str	r0, [r7, #12]
 8008d84:	60b9      	str	r1, [r7, #8]
 8008d86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008d88:	68bb      	ldr	r3, [r7, #8]
 8008d8a:	f003 031f 	and.w	r3, r3, #31
 8008d8e:	2201      	movs	r2, #1
 8008d90:	fa02 f303 	lsl.w	r3, r2, r3
 8008d94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	6a1a      	ldr	r2, [r3, #32]
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	43db      	mvns	r3, r3
 8008d9e:	401a      	ands	r2, r3
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	6a1a      	ldr	r2, [r3, #32]
 8008da8:	68bb      	ldr	r3, [r7, #8]
 8008daa:	f003 031f 	and.w	r3, r3, #31
 8008dae:	6879      	ldr	r1, [r7, #4]
 8008db0:	fa01 f303 	lsl.w	r3, r1, r3
 8008db4:	431a      	orrs	r2, r3
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	621a      	str	r2, [r3, #32]
}
 8008dba:	bf00      	nop
 8008dbc:	371c      	adds	r7, #28
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc4:	4770      	bx	lr
	...

08008dc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008dc8:	b480      	push	{r7}
 8008dca:	b085      	sub	sp, #20
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008dd8:	2b01      	cmp	r3, #1
 8008dda:	d101      	bne.n	8008de0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008ddc:	2302      	movs	r3, #2
 8008dde:	e050      	b.n	8008e82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	2201      	movs	r2, #1
 8008de4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	2202      	movs	r2, #2
 8008dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	689b      	ldr	r3, [r3, #8]
 8008dfe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e08:	683b      	ldr	r3, [r7, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	68fa      	ldr	r2, [r7, #12]
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	68fa      	ldr	r2, [r7, #12]
 8008e18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	4a1c      	ldr	r2, [pc, #112]	@ (8008e90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e20:	4293      	cmp	r3, r2
 8008e22:	d018      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e2c:	d013      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	4a18      	ldr	r2, [pc, #96]	@ (8008e94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d00e      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	4a16      	ldr	r2, [pc, #88]	@ (8008e98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e3e:	4293      	cmp	r3, r2
 8008e40:	d009      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	4a15      	ldr	r2, [pc, #84]	@ (8008e9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d004      	beq.n	8008e56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	4a13      	ldr	r2, [pc, #76]	@ (8008ea0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e52:	4293      	cmp	r3, r2
 8008e54:	d10c      	bne.n	8008e70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e5e:	683b      	ldr	r3, [r7, #0]
 8008e60:	685b      	ldr	r3, [r3, #4]
 8008e62:	68ba      	ldr	r2, [r7, #8]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	68ba      	ldr	r2, [r7, #8]
 8008e6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e80:	2300      	movs	r3, #0
}
 8008e82:	4618      	mov	r0, r3
 8008e84:	3714      	adds	r7, #20
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40010000 	.word	0x40010000
 8008e94:	40000400 	.word	0x40000400
 8008e98:	40000800 	.word	0x40000800
 8008e9c:	40000c00 	.word	0x40000c00
 8008ea0:	40014000 	.word	0x40014000

08008ea4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ea4:	b084      	sub	sp, #16
 8008ea6:	b580      	push	{r7, lr}
 8008ea8:	b084      	sub	sp, #16
 8008eaa:	af00      	add	r7, sp, #0
 8008eac:	6078      	str	r0, [r7, #4]
 8008eae:	f107 001c 	add.w	r0, r7, #28
 8008eb2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008eb6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d123      	bne.n	8008f06 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ec2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ed6:	687a      	ldr	r2, [r7, #4]
 8008ed8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	68db      	ldr	r3, [r3, #12]
 8008ede:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008ee6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008eea:	2b01      	cmp	r3, #1
 8008eec:	d105      	bne.n	8008efa <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	68db      	ldr	r3, [r3, #12]
 8008ef2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008efa:	6878      	ldr	r0, [r7, #4]
 8008efc:	f001 fae8 	bl	800a4d0 <USB_CoreReset>
 8008f00:	4603      	mov	r3, r0
 8008f02:	73fb      	strb	r3, [r7, #15]
 8008f04:	e01b      	b.n	8008f3e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f12:	6878      	ldr	r0, [r7, #4]
 8008f14:	f001 fadc 	bl	800a4d0 <USB_CoreReset>
 8008f18:	4603      	mov	r3, r0
 8008f1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f1c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d106      	bne.n	8008f32 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f28:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f30:	e005      	b.n	8008f3e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f36:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f3e:	7fbb      	ldrb	r3, [r7, #30]
 8008f40:	2b01      	cmp	r3, #1
 8008f42:	d10b      	bne.n	8008f5c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	689b      	ldr	r3, [r3, #8]
 8008f48:	f043 0206 	orr.w	r2, r3, #6
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	689b      	ldr	r3, [r3, #8]
 8008f54:	f043 0220 	orr.w	r2, r3, #32
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f5e:	4618      	mov	r0, r3
 8008f60:	3710      	adds	r7, #16
 8008f62:	46bd      	mov	sp, r7
 8008f64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f68:	b004      	add	sp, #16
 8008f6a:	4770      	bx	lr

08008f6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b087      	sub	sp, #28
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	60f8      	str	r0, [r7, #12]
 8008f74:	60b9      	str	r1, [r7, #8]
 8008f76:	4613      	mov	r3, r2
 8008f78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f7a:	79fb      	ldrb	r3, [r7, #7]
 8008f7c:	2b02      	cmp	r3, #2
 8008f7e:	d165      	bne.n	800904c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	4a41      	ldr	r2, [pc, #260]	@ (8009088 <USB_SetTurnaroundTime+0x11c>)
 8008f84:	4293      	cmp	r3, r2
 8008f86:	d906      	bls.n	8008f96 <USB_SetTurnaroundTime+0x2a>
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	4a40      	ldr	r2, [pc, #256]	@ (800908c <USB_SetTurnaroundTime+0x120>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d202      	bcs.n	8008f96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008f90:	230f      	movs	r3, #15
 8008f92:	617b      	str	r3, [r7, #20]
 8008f94:	e062      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	4a3c      	ldr	r2, [pc, #240]	@ (800908c <USB_SetTurnaroundTime+0x120>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d306      	bcc.n	8008fac <USB_SetTurnaroundTime+0x40>
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	4a3b      	ldr	r2, [pc, #236]	@ (8009090 <USB_SetTurnaroundTime+0x124>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d202      	bcs.n	8008fac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008fa6:	230e      	movs	r3, #14
 8008fa8:	617b      	str	r3, [r7, #20]
 8008faa:	e057      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008fac:	68bb      	ldr	r3, [r7, #8]
 8008fae:	4a38      	ldr	r2, [pc, #224]	@ (8009090 <USB_SetTurnaroundTime+0x124>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d306      	bcc.n	8008fc2 <USB_SetTurnaroundTime+0x56>
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	4a37      	ldr	r2, [pc, #220]	@ (8009094 <USB_SetTurnaroundTime+0x128>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d202      	bcs.n	8008fc2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008fbc:	230d      	movs	r3, #13
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e04c      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008fc2:	68bb      	ldr	r3, [r7, #8]
 8008fc4:	4a33      	ldr	r2, [pc, #204]	@ (8009094 <USB_SetTurnaroundTime+0x128>)
 8008fc6:	4293      	cmp	r3, r2
 8008fc8:	d306      	bcc.n	8008fd8 <USB_SetTurnaroundTime+0x6c>
 8008fca:	68bb      	ldr	r3, [r7, #8]
 8008fcc:	4a32      	ldr	r2, [pc, #200]	@ (8009098 <USB_SetTurnaroundTime+0x12c>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d802      	bhi.n	8008fd8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008fd2:	230c      	movs	r3, #12
 8008fd4:	617b      	str	r3, [r7, #20]
 8008fd6:	e041      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	4a2f      	ldr	r2, [pc, #188]	@ (8009098 <USB_SetTurnaroundTime+0x12c>)
 8008fdc:	4293      	cmp	r3, r2
 8008fde:	d906      	bls.n	8008fee <USB_SetTurnaroundTime+0x82>
 8008fe0:	68bb      	ldr	r3, [r7, #8]
 8008fe2:	4a2e      	ldr	r2, [pc, #184]	@ (800909c <USB_SetTurnaroundTime+0x130>)
 8008fe4:	4293      	cmp	r3, r2
 8008fe6:	d802      	bhi.n	8008fee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008fe8:	230b      	movs	r3, #11
 8008fea:	617b      	str	r3, [r7, #20]
 8008fec:	e036      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	4a2a      	ldr	r2, [pc, #168]	@ (800909c <USB_SetTurnaroundTime+0x130>)
 8008ff2:	4293      	cmp	r3, r2
 8008ff4:	d906      	bls.n	8009004 <USB_SetTurnaroundTime+0x98>
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	4a29      	ldr	r2, [pc, #164]	@ (80090a0 <USB_SetTurnaroundTime+0x134>)
 8008ffa:	4293      	cmp	r3, r2
 8008ffc:	d802      	bhi.n	8009004 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008ffe:	230a      	movs	r3, #10
 8009000:	617b      	str	r3, [r7, #20]
 8009002:	e02b      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009004:	68bb      	ldr	r3, [r7, #8]
 8009006:	4a26      	ldr	r2, [pc, #152]	@ (80090a0 <USB_SetTurnaroundTime+0x134>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d906      	bls.n	800901a <USB_SetTurnaroundTime+0xae>
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	4a25      	ldr	r2, [pc, #148]	@ (80090a4 <USB_SetTurnaroundTime+0x138>)
 8009010:	4293      	cmp	r3, r2
 8009012:	d202      	bcs.n	800901a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009014:	2309      	movs	r3, #9
 8009016:	617b      	str	r3, [r7, #20]
 8009018:	e020      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	4a21      	ldr	r2, [pc, #132]	@ (80090a4 <USB_SetTurnaroundTime+0x138>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d306      	bcc.n	8009030 <USB_SetTurnaroundTime+0xc4>
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	4a20      	ldr	r2, [pc, #128]	@ (80090a8 <USB_SetTurnaroundTime+0x13c>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d802      	bhi.n	8009030 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800902a:	2308      	movs	r3, #8
 800902c:	617b      	str	r3, [r7, #20]
 800902e:	e015      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	4a1d      	ldr	r2, [pc, #116]	@ (80090a8 <USB_SetTurnaroundTime+0x13c>)
 8009034:	4293      	cmp	r3, r2
 8009036:	d906      	bls.n	8009046 <USB_SetTurnaroundTime+0xda>
 8009038:	68bb      	ldr	r3, [r7, #8]
 800903a:	4a1c      	ldr	r2, [pc, #112]	@ (80090ac <USB_SetTurnaroundTime+0x140>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d202      	bcs.n	8009046 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009040:	2307      	movs	r3, #7
 8009042:	617b      	str	r3, [r7, #20]
 8009044:	e00a      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009046:	2306      	movs	r3, #6
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	e007      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800904c:	79fb      	ldrb	r3, [r7, #7]
 800904e:	2b00      	cmp	r3, #0
 8009050:	d102      	bne.n	8009058 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009052:	2309      	movs	r3, #9
 8009054:	617b      	str	r3, [r7, #20]
 8009056:	e001      	b.n	800905c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009058:	2309      	movs	r3, #9
 800905a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	68db      	ldr	r3, [r3, #12]
 8009060:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	68da      	ldr	r2, [r3, #12]
 800906c:	697b      	ldr	r3, [r7, #20]
 800906e:	029b      	lsls	r3, r3, #10
 8009070:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009074:	431a      	orrs	r2, r3
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800907a:	2300      	movs	r3, #0
}
 800907c:	4618      	mov	r0, r3
 800907e:	371c      	adds	r7, #28
 8009080:	46bd      	mov	sp, r7
 8009082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009086:	4770      	bx	lr
 8009088:	00d8acbf 	.word	0x00d8acbf
 800908c:	00e4e1c0 	.word	0x00e4e1c0
 8009090:	00f42400 	.word	0x00f42400
 8009094:	01067380 	.word	0x01067380
 8009098:	011a499f 	.word	0x011a499f
 800909c:	01312cff 	.word	0x01312cff
 80090a0:	014ca43f 	.word	0x014ca43f
 80090a4:	016e3600 	.word	0x016e3600
 80090a8:	01a6ab1f 	.word	0x01a6ab1f
 80090ac:	01e84800 	.word	0x01e84800

080090b0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090b0:	b480      	push	{r7}
 80090b2:	b083      	sub	sp, #12
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	689b      	ldr	r3, [r3, #8]
 80090bc:	f043 0201 	orr.w	r2, r3, #1
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090c4:	2300      	movs	r3, #0
}
 80090c6:	4618      	mov	r0, r3
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d0:	4770      	bx	lr

080090d2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090d2:	b480      	push	{r7}
 80090d4:	b083      	sub	sp, #12
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	f023 0201 	bic.w	r2, r3, #1
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b084      	sub	sp, #16
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009110:	78fb      	ldrb	r3, [r7, #3]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d115      	bne.n	8009142 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009122:	200a      	movs	r0, #10
 8009124:	f7fb f9d2 	bl	80044cc <HAL_Delay>
      ms += 10U;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	330a      	adds	r3, #10
 800912c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800912e:	6878      	ldr	r0, [r7, #4]
 8009130:	f001 f93f 	bl	800a3b2 <USB_GetMode>
 8009134:	4603      	mov	r3, r0
 8009136:	2b01      	cmp	r3, #1
 8009138:	d01e      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	2bc7      	cmp	r3, #199	@ 0xc7
 800913e:	d9f0      	bls.n	8009122 <USB_SetCurrentMode+0x2e>
 8009140:	e01a      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009142:	78fb      	ldrb	r3, [r7, #3]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d115      	bne.n	8009174 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	68db      	ldr	r3, [r3, #12]
 800914c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009154:	200a      	movs	r0, #10
 8009156:	f7fb f9b9 	bl	80044cc <HAL_Delay>
      ms += 10U;
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	330a      	adds	r3, #10
 800915e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009160:	6878      	ldr	r0, [r7, #4]
 8009162:	f001 f926 	bl	800a3b2 <USB_GetMode>
 8009166:	4603      	mov	r3, r0
 8009168:	2b00      	cmp	r3, #0
 800916a:	d005      	beq.n	8009178 <USB_SetCurrentMode+0x84>
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	2bc7      	cmp	r3, #199	@ 0xc7
 8009170:	d9f0      	bls.n	8009154 <USB_SetCurrentMode+0x60>
 8009172:	e001      	b.n	8009178 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009174:	2301      	movs	r3, #1
 8009176:	e005      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	2bc8      	cmp	r3, #200	@ 0xc8
 800917c:	d101      	bne.n	8009182 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800917e:	2301      	movs	r3, #1
 8009180:	e000      	b.n	8009184 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009182:	2300      	movs	r3, #0
}
 8009184:	4618      	mov	r0, r3
 8009186:	3710      	adds	r7, #16
 8009188:	46bd      	mov	sp, r7
 800918a:	bd80      	pop	{r7, pc}

0800918c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800918c:	b084      	sub	sp, #16
 800918e:	b580      	push	{r7, lr}
 8009190:	b086      	sub	sp, #24
 8009192:	af00      	add	r7, sp, #0
 8009194:	6078      	str	r0, [r7, #4]
 8009196:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800919a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800919e:	2300      	movs	r3, #0
 80091a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091a6:	2300      	movs	r3, #0
 80091a8:	613b      	str	r3, [r7, #16]
 80091aa:	e009      	b.n	80091c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091ac:	687a      	ldr	r2, [r7, #4]
 80091ae:	693b      	ldr	r3, [r7, #16]
 80091b0:	3340      	adds	r3, #64	@ 0x40
 80091b2:	009b      	lsls	r3, r3, #2
 80091b4:	4413      	add	r3, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	3301      	adds	r3, #1
 80091be:	613b      	str	r3, [r7, #16]
 80091c0:	693b      	ldr	r3, [r7, #16]
 80091c2:	2b0e      	cmp	r3, #14
 80091c4:	d9f2      	bls.n	80091ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091c6:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d11c      	bne.n	8009208 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	68fa      	ldr	r2, [r7, #12]
 80091d8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091dc:	f043 0302 	orr.w	r3, r3, #2
 80091e0:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091e6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091f2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091fe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	639a      	str	r2, [r3, #56]	@ 0x38
 8009206:	e00b      	b.n	8009220 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920c:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009218:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009226:	461a      	mov	r2, r3
 8009228:	2300      	movs	r3, #0
 800922a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800922c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009230:	2b01      	cmp	r3, #1
 8009232:	d10d      	bne.n	8009250 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009234:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009238:	2b00      	cmp	r3, #0
 800923a:	d104      	bne.n	8009246 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800923c:	2100      	movs	r1, #0
 800923e:	6878      	ldr	r0, [r7, #4]
 8009240:	f000 f968 	bl	8009514 <USB_SetDevSpeed>
 8009244:	e008      	b.n	8009258 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009246:	2101      	movs	r1, #1
 8009248:	6878      	ldr	r0, [r7, #4]
 800924a:	f000 f963 	bl	8009514 <USB_SetDevSpeed>
 800924e:	e003      	b.n	8009258 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009250:	2103      	movs	r1, #3
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f95e 	bl	8009514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009258:	2110      	movs	r1, #16
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f8fa 	bl	8009454 <USB_FlushTxFifo>
 8009260:	4603      	mov	r3, r0
 8009262:	2b00      	cmp	r3, #0
 8009264:	d001      	beq.n	800926a <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009266:	2301      	movs	r3, #1
 8009268:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800926a:	6878      	ldr	r0, [r7, #4]
 800926c:	f000 f924 	bl	80094b8 <USB_FlushRxFifo>
 8009270:	4603      	mov	r3, r0
 8009272:	2b00      	cmp	r3, #0
 8009274:	d001      	beq.n	800927a <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009276:	2301      	movs	r3, #1
 8009278:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009280:	461a      	mov	r2, r3
 8009282:	2300      	movs	r3, #0
 8009284:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800928c:	461a      	mov	r2, r3
 800928e:	2300      	movs	r3, #0
 8009290:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009298:	461a      	mov	r2, r3
 800929a:	2300      	movs	r3, #0
 800929c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800929e:	2300      	movs	r3, #0
 80092a0:	613b      	str	r3, [r7, #16]
 80092a2:	e043      	b.n	800932c <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092a4:	693b      	ldr	r3, [r7, #16]
 80092a6:	015a      	lsls	r2, r3, #5
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	4413      	add	r3, r2
 80092ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092b6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ba:	d118      	bne.n	80092ee <USB_DevInit+0x162>
    {
      if (i == 0U)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d10a      	bne.n	80092d8 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092c2:	693b      	ldr	r3, [r7, #16]
 80092c4:	015a      	lsls	r2, r3, #5
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	4413      	add	r3, r2
 80092ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ce:	461a      	mov	r2, r3
 80092d0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092d4:	6013      	str	r3, [r2, #0]
 80092d6:	e013      	b.n	8009300 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	015a      	lsls	r2, r3, #5
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	4413      	add	r3, r2
 80092e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e4:	461a      	mov	r2, r3
 80092e6:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092ea:	6013      	str	r3, [r2, #0]
 80092ec:	e008      	b.n	8009300 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	015a      	lsls	r2, r3, #5
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	4413      	add	r3, r2
 80092f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092fa:	461a      	mov	r2, r3
 80092fc:	2300      	movs	r3, #0
 80092fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009300:	693b      	ldr	r3, [r7, #16]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800930c:	461a      	mov	r2, r3
 800930e:	2300      	movs	r3, #0
 8009310:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009312:	693b      	ldr	r3, [r7, #16]
 8009314:	015a      	lsls	r2, r3, #5
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	4413      	add	r3, r2
 800931a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800931e:	461a      	mov	r2, r3
 8009320:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009326:	693b      	ldr	r3, [r7, #16]
 8009328:	3301      	adds	r3, #1
 800932a:	613b      	str	r3, [r7, #16]
 800932c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009330:	461a      	mov	r2, r3
 8009332:	693b      	ldr	r3, [r7, #16]
 8009334:	4293      	cmp	r3, r2
 8009336:	d3b5      	bcc.n	80092a4 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009338:	2300      	movs	r3, #0
 800933a:	613b      	str	r3, [r7, #16]
 800933c:	e043      	b.n	80093c6 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	015a      	lsls	r2, r3, #5
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	4413      	add	r3, r2
 8009346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009350:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009354:	d118      	bne.n	8009388 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	2b00      	cmp	r3, #0
 800935a:	d10a      	bne.n	8009372 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800935c:	693b      	ldr	r3, [r7, #16]
 800935e:	015a      	lsls	r2, r3, #5
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	4413      	add	r3, r2
 8009364:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009368:	461a      	mov	r2, r3
 800936a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800936e:	6013      	str	r3, [r2, #0]
 8009370:	e013      	b.n	800939a <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	015a      	lsls	r2, r3, #5
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	4413      	add	r3, r2
 800937a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800937e:	461a      	mov	r2, r3
 8009380:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009384:	6013      	str	r3, [r2, #0]
 8009386:	e008      	b.n	800939a <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009394:	461a      	mov	r2, r3
 8009396:	2300      	movs	r3, #0
 8009398:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	015a      	lsls	r2, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	4413      	add	r3, r2
 80093a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a6:	461a      	mov	r2, r3
 80093a8:	2300      	movs	r3, #0
 80093aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	015a      	lsls	r2, r3, #5
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	4413      	add	r3, r2
 80093b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b8:	461a      	mov	r2, r3
 80093ba:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80093be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	3301      	adds	r3, #1
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093ca:	461a      	mov	r2, r3
 80093cc:	693b      	ldr	r3, [r7, #16]
 80093ce:	4293      	cmp	r3, r2
 80093d0:	d3b5      	bcc.n	800933e <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093d8:	691b      	ldr	r3, [r3, #16]
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80093e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2200      	movs	r2, #0
 80093ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80093f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80093f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d105      	bne.n	8009408 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	699b      	ldr	r3, [r3, #24]
 8009400:	f043 0210 	orr.w	r2, r3, #16
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	699a      	ldr	r2, [r3, #24]
 800940c:	4b10      	ldr	r3, [pc, #64]	@ (8009450 <USB_DevInit+0x2c4>)
 800940e:	4313      	orrs	r3, r2
 8009410:	687a      	ldr	r2, [r7, #4]
 8009412:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009414:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009418:	2b00      	cmp	r3, #0
 800941a:	d005      	beq.n	8009428 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	699b      	ldr	r3, [r3, #24]
 8009420:	f043 0208 	orr.w	r2, r3, #8
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009428:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800942c:	2b01      	cmp	r3, #1
 800942e:	d107      	bne.n	8009440 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	699b      	ldr	r3, [r3, #24]
 8009434:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009438:	f043 0304 	orr.w	r3, r3, #4
 800943c:	687a      	ldr	r2, [r7, #4]
 800943e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009440:	7dfb      	ldrb	r3, [r7, #23]
}
 8009442:	4618      	mov	r0, r3
 8009444:	3718      	adds	r7, #24
 8009446:	46bd      	mov	sp, r7
 8009448:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800944c:	b004      	add	sp, #16
 800944e:	4770      	bx	lr
 8009450:	803c3800 	.word	0x803c3800

08009454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009454:	b480      	push	{r7}
 8009456:	b085      	sub	sp, #20
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	3301      	adds	r3, #1
 8009466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800946e:	d901      	bls.n	8009474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009470:	2303      	movs	r3, #3
 8009472:	e01b      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	691b      	ldr	r3, [r3, #16]
 8009478:	2b00      	cmp	r3, #0
 800947a:	daf2      	bge.n	8009462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	019b      	lsls	r3, r3, #6
 8009484:	f043 0220 	orr.w	r2, r3, #32
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	3301      	adds	r3, #1
 8009490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009498:	d901      	bls.n	800949e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800949a:	2303      	movs	r3, #3
 800949c:	e006      	b.n	80094ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	691b      	ldr	r3, [r3, #16]
 80094a2:	f003 0320 	and.w	r3, r3, #32
 80094a6:	2b20      	cmp	r3, #32
 80094a8:	d0f0      	beq.n	800948c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094aa:	2300      	movs	r3, #0
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	3714      	adds	r7, #20
 80094b0:	46bd      	mov	sp, r7
 80094b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b6:	4770      	bx	lr

080094b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094b8:	b480      	push	{r7}
 80094ba:	b085      	sub	sp, #20
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094c0:	2300      	movs	r3, #0
 80094c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	3301      	adds	r3, #1
 80094c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094d0:	d901      	bls.n	80094d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094d2:	2303      	movs	r3, #3
 80094d4:	e018      	b.n	8009508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	691b      	ldr	r3, [r3, #16]
 80094da:	2b00      	cmp	r3, #0
 80094dc:	daf2      	bge.n	80094c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094de:	2300      	movs	r3, #0
 80094e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2210      	movs	r2, #16
 80094e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	3301      	adds	r3, #1
 80094ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094f4:	d901      	bls.n	80094fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80094f6:	2303      	movs	r3, #3
 80094f8:	e006      	b.n	8009508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
 80094fe:	f003 0310 	and.w	r3, r3, #16
 8009502:	2b10      	cmp	r3, #16
 8009504:	d0f0      	beq.n	80094e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009506:	2300      	movs	r3, #0
}
 8009508:	4618      	mov	r0, r3
 800950a:	3714      	adds	r7, #20
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009514:	b480      	push	{r7}
 8009516:	b085      	sub	sp, #20
 8009518:	af00      	add	r7, sp, #0
 800951a:	6078      	str	r0, [r7, #4]
 800951c:	460b      	mov	r3, r1
 800951e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	78fb      	ldrb	r3, [r7, #3]
 800952e:	68f9      	ldr	r1, [r7, #12]
 8009530:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009534:	4313      	orrs	r3, r2
 8009536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009538:	2300      	movs	r3, #0
}
 800953a:	4618      	mov	r0, r3
 800953c:	3714      	adds	r7, #20
 800953e:	46bd      	mov	sp, r7
 8009540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009544:	4770      	bx	lr

08009546 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009546:	b480      	push	{r7}
 8009548:	b087      	sub	sp, #28
 800954a:	af00      	add	r7, sp, #0
 800954c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009558:	689b      	ldr	r3, [r3, #8]
 800955a:	f003 0306 	and.w	r3, r3, #6
 800955e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d102      	bne.n	800956c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009566:	2300      	movs	r3, #0
 8009568:	75fb      	strb	r3, [r7, #23]
 800956a:	e00a      	b.n	8009582 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	2b02      	cmp	r3, #2
 8009570:	d002      	beq.n	8009578 <USB_GetDevSpeed+0x32>
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	2b06      	cmp	r3, #6
 8009576:	d102      	bne.n	800957e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009578:	2302      	movs	r3, #2
 800957a:	75fb      	strb	r3, [r7, #23]
 800957c:	e001      	b.n	8009582 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800957e:	230f      	movs	r3, #15
 8009580:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009582:	7dfb      	ldrb	r3, [r7, #23]
}
 8009584:	4618      	mov	r0, r3
 8009586:	371c      	adds	r7, #28
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800959e:	683b      	ldr	r3, [r7, #0]
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095a4:	683b      	ldr	r3, [r7, #0]
 80095a6:	785b      	ldrb	r3, [r3, #1]
 80095a8:	2b01      	cmp	r3, #1
 80095aa:	d13a      	bne.n	8009622 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b2:	69da      	ldr	r2, [r3, #28]
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	781b      	ldrb	r3, [r3, #0]
 80095b8:	f003 030f 	and.w	r3, r3, #15
 80095bc:	2101      	movs	r1, #1
 80095be:	fa01 f303 	lsl.w	r3, r1, r3
 80095c2:	b29b      	uxth	r3, r3
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095ca:	4313      	orrs	r3, r2
 80095cc:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	015a      	lsls	r2, r3, #5
 80095d2:	68fb      	ldr	r3, [r7, #12]
 80095d4:	4413      	add	r3, r2
 80095d6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d155      	bne.n	8009690 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	015a      	lsls	r2, r3, #5
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	4413      	add	r3, r2
 80095ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f0:	681a      	ldr	r2, [r3, #0]
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	689b      	ldr	r3, [r3, #8]
 80095f6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80095fa:	683b      	ldr	r3, [r7, #0]
 80095fc:	791b      	ldrb	r3, [r3, #4]
 80095fe:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009600:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009602:	68bb      	ldr	r3, [r7, #8]
 8009604:	059b      	lsls	r3, r3, #22
 8009606:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009608:	4313      	orrs	r3, r2
 800960a:	68ba      	ldr	r2, [r7, #8]
 800960c:	0151      	lsls	r1, r2, #5
 800960e:	68fa      	ldr	r2, [r7, #12]
 8009610:	440a      	add	r2, r1
 8009612:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009616:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800961a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	e036      	b.n	8009690 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009628:	69da      	ldr	r2, [r3, #28]
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	781b      	ldrb	r3, [r3, #0]
 800962e:	f003 030f 	and.w	r3, r3, #15
 8009632:	2101      	movs	r1, #1
 8009634:	fa01 f303 	lsl.w	r3, r1, r3
 8009638:	041b      	lsls	r3, r3, #16
 800963a:	68f9      	ldr	r1, [r7, #12]
 800963c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009640:	4313      	orrs	r3, r2
 8009642:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009644:	68bb      	ldr	r3, [r7, #8]
 8009646:	015a      	lsls	r2, r3, #5
 8009648:	68fb      	ldr	r3, [r7, #12]
 800964a:	4413      	add	r3, r2
 800964c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009656:	2b00      	cmp	r3, #0
 8009658:	d11a      	bne.n	8009690 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800965a:	68bb      	ldr	r3, [r7, #8]
 800965c:	015a      	lsls	r2, r3, #5
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	4413      	add	r3, r2
 8009662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009666:	681a      	ldr	r2, [r3, #0]
 8009668:	683b      	ldr	r3, [r7, #0]
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009670:	683b      	ldr	r3, [r7, #0]
 8009672:	791b      	ldrb	r3, [r3, #4]
 8009674:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009676:	430b      	orrs	r3, r1
 8009678:	4313      	orrs	r3, r2
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	0151      	lsls	r1, r2, #5
 800967e:	68fa      	ldr	r2, [r7, #12]
 8009680:	440a      	add	r2, r1
 8009682:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009686:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800968a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800968e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3714      	adds	r7, #20
 8009696:	46bd      	mov	sp, r7
 8009698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800969c:	4770      	bx	lr
	...

080096a0 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096a0:	b480      	push	{r7}
 80096a2:	b085      	sub	sp, #20
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80096b4:	683b      	ldr	r3, [r7, #0]
 80096b6:	785b      	ldrb	r3, [r3, #1]
 80096b8:	2b01      	cmp	r3, #1
 80096ba:	d161      	bne.n	8009780 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096bc:	68bb      	ldr	r3, [r7, #8]
 80096be:	015a      	lsls	r2, r3, #5
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	4413      	add	r3, r2
 80096c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096d2:	d11f      	bne.n	8009714 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	015a      	lsls	r2, r3, #5
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	4413      	add	r3, r2
 80096dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	68ba      	ldr	r2, [r7, #8]
 80096e4:	0151      	lsls	r1, r2, #5
 80096e6:	68fa      	ldr	r2, [r7, #12]
 80096e8:	440a      	add	r2, r1
 80096ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096ee:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096f2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80096f4:	68bb      	ldr	r3, [r7, #8]
 80096f6:	015a      	lsls	r2, r3, #5
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	4413      	add	r3, r2
 80096fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68ba      	ldr	r2, [r7, #8]
 8009704:	0151      	lsls	r1, r2, #5
 8009706:	68fa      	ldr	r2, [r7, #12]
 8009708:	440a      	add	r2, r1
 800970a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009712:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800971a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	781b      	ldrb	r3, [r3, #0]
 8009720:	f003 030f 	and.w	r3, r3, #15
 8009724:	2101      	movs	r1, #1
 8009726:	fa01 f303 	lsl.w	r3, r1, r3
 800972a:	b29b      	uxth	r3, r3
 800972c:	43db      	mvns	r3, r3
 800972e:	68f9      	ldr	r1, [r7, #12]
 8009730:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009734:	4013      	ands	r3, r2
 8009736:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800973e:	69da      	ldr	r2, [r3, #28]
 8009740:	683b      	ldr	r3, [r7, #0]
 8009742:	781b      	ldrb	r3, [r3, #0]
 8009744:	f003 030f 	and.w	r3, r3, #15
 8009748:	2101      	movs	r1, #1
 800974a:	fa01 f303 	lsl.w	r3, r1, r3
 800974e:	b29b      	uxth	r3, r3
 8009750:	43db      	mvns	r3, r3
 8009752:	68f9      	ldr	r1, [r7, #12]
 8009754:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009758:	4013      	ands	r3, r2
 800975a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800975c:	68bb      	ldr	r3, [r7, #8]
 800975e:	015a      	lsls	r2, r3, #5
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	4413      	add	r3, r2
 8009764:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009768:	681a      	ldr	r2, [r3, #0]
 800976a:	68bb      	ldr	r3, [r7, #8]
 800976c:	0159      	lsls	r1, r3, #5
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	440b      	add	r3, r1
 8009772:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009776:	4619      	mov	r1, r3
 8009778:	4b35      	ldr	r3, [pc, #212]	@ (8009850 <USB_DeactivateEndpoint+0x1b0>)
 800977a:	4013      	ands	r3, r2
 800977c:	600b      	str	r3, [r1, #0]
 800977e:	e060      	b.n	8009842 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009780:	68bb      	ldr	r3, [r7, #8]
 8009782:	015a      	lsls	r2, r3, #5
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	4413      	add	r3, r2
 8009788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009792:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009796:	d11f      	bne.n	80097d8 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009798:	68bb      	ldr	r3, [r7, #8]
 800979a:	015a      	lsls	r2, r3, #5
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	4413      	add	r3, r2
 80097a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68ba      	ldr	r2, [r7, #8]
 80097a8:	0151      	lsls	r1, r2, #5
 80097aa:	68fa      	ldr	r2, [r7, #12]
 80097ac:	440a      	add	r2, r1
 80097ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097b2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097b6:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	015a      	lsls	r2, r3, #5
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	4413      	add	r3, r2
 80097c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	68ba      	ldr	r2, [r7, #8]
 80097c8:	0151      	lsls	r1, r2, #5
 80097ca:	68fa      	ldr	r2, [r7, #12]
 80097cc:	440a      	add	r2, r1
 80097ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097d6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097de:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097e0:	683b      	ldr	r3, [r7, #0]
 80097e2:	781b      	ldrb	r3, [r3, #0]
 80097e4:	f003 030f 	and.w	r3, r3, #15
 80097e8:	2101      	movs	r1, #1
 80097ea:	fa01 f303 	lsl.w	r3, r1, r3
 80097ee:	041b      	lsls	r3, r3, #16
 80097f0:	43db      	mvns	r3, r3
 80097f2:	68f9      	ldr	r1, [r7, #12]
 80097f4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80097f8:	4013      	ands	r3, r2
 80097fa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009802:	69da      	ldr	r2, [r3, #28]
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	781b      	ldrb	r3, [r3, #0]
 8009808:	f003 030f 	and.w	r3, r3, #15
 800980c:	2101      	movs	r1, #1
 800980e:	fa01 f303 	lsl.w	r3, r1, r3
 8009812:	041b      	lsls	r3, r3, #16
 8009814:	43db      	mvns	r3, r3
 8009816:	68f9      	ldr	r1, [r7, #12]
 8009818:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800981c:	4013      	ands	r3, r2
 800981e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	015a      	lsls	r2, r3, #5
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4413      	add	r3, r2
 8009828:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	0159      	lsls	r1, r3, #5
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	440b      	add	r3, r1
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	4619      	mov	r1, r3
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <USB_DeactivateEndpoint+0x1b4>)
 800983e:	4013      	ands	r3, r2
 8009840:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009842:	2300      	movs	r3, #0
}
 8009844:	4618      	mov	r0, r3
 8009846:	3714      	adds	r7, #20
 8009848:	46bd      	mov	sp, r7
 800984a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984e:	4770      	bx	lr
 8009850:	ec337800 	.word	0xec337800
 8009854:	eff37800 	.word	0xeff37800

08009858 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b08a      	sub	sp, #40	@ 0x28
 800985c:	af02      	add	r7, sp, #8
 800985e:	60f8      	str	r0, [r7, #12]
 8009860:	60b9      	str	r1, [r7, #8]
 8009862:	4613      	mov	r3, r2
 8009864:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800986a:	68bb      	ldr	r3, [r7, #8]
 800986c:	781b      	ldrb	r3, [r3, #0]
 800986e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	785b      	ldrb	r3, [r3, #1]
 8009874:	2b01      	cmp	r3, #1
 8009876:	f040 817f 	bne.w	8009b78 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	691b      	ldr	r3, [r3, #16]
 800987e:	2b00      	cmp	r3, #0
 8009880:	d132      	bne.n	80098e8 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009882:	69bb      	ldr	r3, [r7, #24]
 8009884:	015a      	lsls	r2, r3, #5
 8009886:	69fb      	ldr	r3, [r7, #28]
 8009888:	4413      	add	r3, r2
 800988a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800988e:	691b      	ldr	r3, [r3, #16]
 8009890:	69ba      	ldr	r2, [r7, #24]
 8009892:	0151      	lsls	r1, r2, #5
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	440a      	add	r2, r1
 8009898:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800989c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80098a0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098a4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098a6:	69bb      	ldr	r3, [r7, #24]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098b2:	691b      	ldr	r3, [r3, #16]
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	0151      	lsls	r1, r2, #5
 80098b8:	69fa      	ldr	r2, [r7, #28]
 80098ba:	440a      	add	r2, r1
 80098bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098c0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098c4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098c6:	69bb      	ldr	r3, [r7, #24]
 80098c8:	015a      	lsls	r2, r3, #5
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	4413      	add	r3, r2
 80098ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098d2:	691b      	ldr	r3, [r3, #16]
 80098d4:	69ba      	ldr	r2, [r7, #24]
 80098d6:	0151      	lsls	r1, r2, #5
 80098d8:	69fa      	ldr	r2, [r7, #28]
 80098da:	440a      	add	r2, r1
 80098dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098e0:	0cdb      	lsrs	r3, r3, #19
 80098e2:	04db      	lsls	r3, r3, #19
 80098e4:	6113      	str	r3, [r2, #16]
 80098e6:	e097      	b.n	8009a18 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	015a      	lsls	r2, r3, #5
 80098ec:	69fb      	ldr	r3, [r7, #28]
 80098ee:	4413      	add	r3, r2
 80098f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	69ba      	ldr	r2, [r7, #24]
 80098f8:	0151      	lsls	r1, r2, #5
 80098fa:	69fa      	ldr	r2, [r7, #28]
 80098fc:	440a      	add	r2, r1
 80098fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009902:	0cdb      	lsrs	r3, r3, #19
 8009904:	04db      	lsls	r3, r3, #19
 8009906:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009908:	69bb      	ldr	r3, [r7, #24]
 800990a:	015a      	lsls	r2, r3, #5
 800990c:	69fb      	ldr	r3, [r7, #28]
 800990e:	4413      	add	r3, r2
 8009910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009914:	691b      	ldr	r3, [r3, #16]
 8009916:	69ba      	ldr	r2, [r7, #24]
 8009918:	0151      	lsls	r1, r2, #5
 800991a:	69fa      	ldr	r2, [r7, #28]
 800991c:	440a      	add	r2, r1
 800991e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009922:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009926:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800992a:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 800992c:	69bb      	ldr	r3, [r7, #24]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d11a      	bne.n	8009968 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	691a      	ldr	r2, [r3, #16]
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	689b      	ldr	r3, [r3, #8]
 800993a:	429a      	cmp	r2, r3
 800993c:	d903      	bls.n	8009946 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	689a      	ldr	r2, [r3, #8]
 8009942:	68bb      	ldr	r3, [r7, #8]
 8009944:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009946:	69bb      	ldr	r3, [r7, #24]
 8009948:	015a      	lsls	r2, r3, #5
 800994a:	69fb      	ldr	r3, [r7, #28]
 800994c:	4413      	add	r3, r2
 800994e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009952:	691b      	ldr	r3, [r3, #16]
 8009954:	69ba      	ldr	r2, [r7, #24]
 8009956:	0151      	lsls	r1, r2, #5
 8009958:	69fa      	ldr	r2, [r7, #28]
 800995a:	440a      	add	r2, r1
 800995c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009960:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009964:	6113      	str	r3, [r2, #16]
 8009966:	e044      	b.n	80099f2 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	691a      	ldr	r2, [r3, #16]
 800996c:	68bb      	ldr	r3, [r7, #8]
 800996e:	689b      	ldr	r3, [r3, #8]
 8009970:	4413      	add	r3, r2
 8009972:	1e5a      	subs	r2, r3, #1
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	689b      	ldr	r3, [r3, #8]
 8009978:	fbb2 f3f3 	udiv	r3, r2, r3
 800997c:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800997e:	69bb      	ldr	r3, [r7, #24]
 8009980:	015a      	lsls	r2, r3, #5
 8009982:	69fb      	ldr	r3, [r7, #28]
 8009984:	4413      	add	r3, r2
 8009986:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800998a:	691a      	ldr	r2, [r3, #16]
 800998c:	8afb      	ldrh	r3, [r7, #22]
 800998e:	04d9      	lsls	r1, r3, #19
 8009990:	4ba4      	ldr	r3, [pc, #656]	@ (8009c24 <USB_EPStartXfer+0x3cc>)
 8009992:	400b      	ands	r3, r1
 8009994:	69b9      	ldr	r1, [r7, #24]
 8009996:	0148      	lsls	r0, r1, #5
 8009998:	69f9      	ldr	r1, [r7, #28]
 800999a:	4401      	add	r1, r0
 800999c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80099a0:	4313      	orrs	r3, r2
 80099a2:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	791b      	ldrb	r3, [r3, #4]
 80099a8:	2b01      	cmp	r3, #1
 80099aa:	d122      	bne.n	80099f2 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	015a      	lsls	r2, r3, #5
 80099b0:	69fb      	ldr	r3, [r7, #28]
 80099b2:	4413      	add	r3, r2
 80099b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099b8:	691b      	ldr	r3, [r3, #16]
 80099ba:	69ba      	ldr	r2, [r7, #24]
 80099bc:	0151      	lsls	r1, r2, #5
 80099be:	69fa      	ldr	r2, [r7, #28]
 80099c0:	440a      	add	r2, r1
 80099c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099c6:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80099ca:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80099cc:	69bb      	ldr	r3, [r7, #24]
 80099ce:	015a      	lsls	r2, r3, #5
 80099d0:	69fb      	ldr	r3, [r7, #28]
 80099d2:	4413      	add	r3, r2
 80099d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d8:	691a      	ldr	r2, [r3, #16]
 80099da:	8afb      	ldrh	r3, [r7, #22]
 80099dc:	075b      	lsls	r3, r3, #29
 80099de:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80099e2:	69b9      	ldr	r1, [r7, #24]
 80099e4:	0148      	lsls	r0, r1, #5
 80099e6:	69f9      	ldr	r1, [r7, #28]
 80099e8:	4401      	add	r1, r0
 80099ea:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80099ee:	4313      	orrs	r3, r2
 80099f0:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80099f2:	69bb      	ldr	r3, [r7, #24]
 80099f4:	015a      	lsls	r2, r3, #5
 80099f6:	69fb      	ldr	r3, [r7, #28]
 80099f8:	4413      	add	r3, r2
 80099fa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099fe:	691a      	ldr	r2, [r3, #16]
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	691b      	ldr	r3, [r3, #16]
 8009a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a08:	69b9      	ldr	r1, [r7, #24]
 8009a0a:	0148      	lsls	r0, r1, #5
 8009a0c:	69f9      	ldr	r1, [r7, #28]
 8009a0e:	4401      	add	r1, r0
 8009a10:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a14:	4313      	orrs	r3, r2
 8009a16:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a18:	79fb      	ldrb	r3, [r7, #7]
 8009a1a:	2b01      	cmp	r3, #1
 8009a1c:	d14b      	bne.n	8009ab6 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a1e:	68bb      	ldr	r3, [r7, #8]
 8009a20:	69db      	ldr	r3, [r3, #28]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d009      	beq.n	8009a3a <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a26:	69bb      	ldr	r3, [r7, #24]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	69fb      	ldr	r3, [r7, #28]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a32:	461a      	mov	r2, r3
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	69db      	ldr	r3, [r3, #28]
 8009a38:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	791b      	ldrb	r3, [r3, #4]
 8009a3e:	2b01      	cmp	r3, #1
 8009a40:	d128      	bne.n	8009a94 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a42:	69fb      	ldr	r3, [r7, #28]
 8009a44:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d110      	bne.n	8009a74 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	015a      	lsls	r2, r3, #5
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	4413      	add	r3, r2
 8009a5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	69ba      	ldr	r2, [r7, #24]
 8009a62:	0151      	lsls	r1, r2, #5
 8009a64:	69fa      	ldr	r2, [r7, #28]
 8009a66:	440a      	add	r2, r1
 8009a68:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a6c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a70:	6013      	str	r3, [r2, #0]
 8009a72:	e00f      	b.n	8009a94 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a74:	69bb      	ldr	r3, [r7, #24]
 8009a76:	015a      	lsls	r2, r3, #5
 8009a78:	69fb      	ldr	r3, [r7, #28]
 8009a7a:	4413      	add	r3, r2
 8009a7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	69ba      	ldr	r2, [r7, #24]
 8009a84:	0151      	lsls	r1, r2, #5
 8009a86:	69fa      	ldr	r2, [r7, #28]
 8009a88:	440a      	add	r2, r1
 8009a8a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a8e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a92:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a94:	69bb      	ldr	r3, [r7, #24]
 8009a96:	015a      	lsls	r2, r3, #5
 8009a98:	69fb      	ldr	r3, [r7, #28]
 8009a9a:	4413      	add	r3, r2
 8009a9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	69ba      	ldr	r2, [r7, #24]
 8009aa4:	0151      	lsls	r1, r2, #5
 8009aa6:	69fa      	ldr	r2, [r7, #28]
 8009aa8:	440a      	add	r2, r1
 8009aaa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aae:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ab2:	6013      	str	r3, [r2, #0]
 8009ab4:	e166      	b.n	8009d84 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	015a      	lsls	r2, r3, #5
 8009aba:	69fb      	ldr	r3, [r7, #28]
 8009abc:	4413      	add	r3, r2
 8009abe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	69ba      	ldr	r2, [r7, #24]
 8009ac6:	0151      	lsls	r1, r2, #5
 8009ac8:	69fa      	ldr	r2, [r7, #28]
 8009aca:	440a      	add	r2, r1
 8009acc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ad0:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ad4:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009ad6:	68bb      	ldr	r3, [r7, #8]
 8009ad8:	791b      	ldrb	r3, [r3, #4]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d015      	beq.n	8009b0a <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ade:	68bb      	ldr	r3, [r7, #8]
 8009ae0:	691b      	ldr	r3, [r3, #16]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	f000 814e 	beq.w	8009d84 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ae8:	69fb      	ldr	r3, [r7, #28]
 8009aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009aee:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009af0:	68bb      	ldr	r3, [r7, #8]
 8009af2:	781b      	ldrb	r3, [r3, #0]
 8009af4:	f003 030f 	and.w	r3, r3, #15
 8009af8:	2101      	movs	r1, #1
 8009afa:	fa01 f303 	lsl.w	r3, r1, r3
 8009afe:	69f9      	ldr	r1, [r7, #28]
 8009b00:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b04:	4313      	orrs	r3, r2
 8009b06:	634b      	str	r3, [r1, #52]	@ 0x34
 8009b08:	e13c      	b.n	8009d84 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b0a:	69fb      	ldr	r3, [r7, #28]
 8009b0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b10:	689b      	ldr	r3, [r3, #8]
 8009b12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d110      	bne.n	8009b3c <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b1a:	69bb      	ldr	r3, [r7, #24]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	69fb      	ldr	r3, [r7, #28]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	69ba      	ldr	r2, [r7, #24]
 8009b2a:	0151      	lsls	r1, r2, #5
 8009b2c:	69fa      	ldr	r2, [r7, #28]
 8009b2e:	440a      	add	r2, r1
 8009b30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b34:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b38:	6013      	str	r3, [r2, #0]
 8009b3a:	e00f      	b.n	8009b5c <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b3c:	69bb      	ldr	r3, [r7, #24]
 8009b3e:	015a      	lsls	r2, r3, #5
 8009b40:	69fb      	ldr	r3, [r7, #28]
 8009b42:	4413      	add	r3, r2
 8009b44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69ba      	ldr	r2, [r7, #24]
 8009b4c:	0151      	lsls	r1, r2, #5
 8009b4e:	69fa      	ldr	r2, [r7, #28]
 8009b50:	440a      	add	r2, r1
 8009b52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b56:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b5a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	68d9      	ldr	r1, [r3, #12]
 8009b60:	68bb      	ldr	r3, [r7, #8]
 8009b62:	781a      	ldrb	r2, [r3, #0]
 8009b64:	68bb      	ldr	r3, [r7, #8]
 8009b66:	691b      	ldr	r3, [r3, #16]
 8009b68:	b298      	uxth	r0, r3
 8009b6a:	79fb      	ldrb	r3, [r7, #7]
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	4603      	mov	r3, r0
 8009b70:	68f8      	ldr	r0, [r7, #12]
 8009b72:	f000 f9b9 	bl	8009ee8 <USB_WritePacket>
 8009b76:	e105      	b.n	8009d84 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	69fb      	ldr	r3, [r7, #28]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	69ba      	ldr	r2, [r7, #24]
 8009b88:	0151      	lsls	r1, r2, #5
 8009b8a:	69fa      	ldr	r2, [r7, #28]
 8009b8c:	440a      	add	r2, r1
 8009b8e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b92:	0cdb      	lsrs	r3, r3, #19
 8009b94:	04db      	lsls	r3, r3, #19
 8009b96:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b98:	69bb      	ldr	r3, [r7, #24]
 8009b9a:	015a      	lsls	r2, r3, #5
 8009b9c:	69fb      	ldr	r3, [r7, #28]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba4:	691b      	ldr	r3, [r3, #16]
 8009ba6:	69ba      	ldr	r2, [r7, #24]
 8009ba8:	0151      	lsls	r1, r2, #5
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	440a      	add	r2, r1
 8009bae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bb2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bb6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bba:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009bbc:	69bb      	ldr	r3, [r7, #24]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d132      	bne.n	8009c28 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	691b      	ldr	r3, [r3, #16]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d003      	beq.n	8009bd2 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009bca:	68bb      	ldr	r3, [r7, #8]
 8009bcc:	689a      	ldr	r2, [r3, #8]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	689a      	ldr	r2, [r3, #8]
 8009bd6:	68bb      	ldr	r3, [r7, #8]
 8009bd8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009bda:	69bb      	ldr	r3, [r7, #24]
 8009bdc:	015a      	lsls	r2, r3, #5
 8009bde:	69fb      	ldr	r3, [r7, #28]
 8009be0:	4413      	add	r3, r2
 8009be2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009be6:	691a      	ldr	r2, [r3, #16]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6a1b      	ldr	r3, [r3, #32]
 8009bec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009bf0:	69b9      	ldr	r1, [r7, #24]
 8009bf2:	0148      	lsls	r0, r1, #5
 8009bf4:	69f9      	ldr	r1, [r7, #28]
 8009bf6:	4401      	add	r1, r0
 8009bf8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009bfc:	4313      	orrs	r3, r2
 8009bfe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c00:	69bb      	ldr	r3, [r7, #24]
 8009c02:	015a      	lsls	r2, r3, #5
 8009c04:	69fb      	ldr	r3, [r7, #28]
 8009c06:	4413      	add	r3, r2
 8009c08:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c0c:	691b      	ldr	r3, [r3, #16]
 8009c0e:	69ba      	ldr	r2, [r7, #24]
 8009c10:	0151      	lsls	r1, r2, #5
 8009c12:	69fa      	ldr	r2, [r7, #28]
 8009c14:	440a      	add	r2, r1
 8009c16:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c1a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c1e:	6113      	str	r3, [r2, #16]
 8009c20:	e062      	b.n	8009ce8 <USB_EPStartXfer+0x490>
 8009c22:	bf00      	nop
 8009c24:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	691b      	ldr	r3, [r3, #16]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d123      	bne.n	8009c78 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c30:	69bb      	ldr	r3, [r7, #24]
 8009c32:	015a      	lsls	r2, r3, #5
 8009c34:	69fb      	ldr	r3, [r7, #28]
 8009c36:	4413      	add	r3, r2
 8009c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c3c:	691a      	ldr	r2, [r3, #16]
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	689b      	ldr	r3, [r3, #8]
 8009c42:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c46:	69b9      	ldr	r1, [r7, #24]
 8009c48:	0148      	lsls	r0, r1, #5
 8009c4a:	69f9      	ldr	r1, [r7, #28]
 8009c4c:	4401      	add	r1, r0
 8009c4e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c52:	4313      	orrs	r3, r2
 8009c54:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c56:	69bb      	ldr	r3, [r7, #24]
 8009c58:	015a      	lsls	r2, r3, #5
 8009c5a:	69fb      	ldr	r3, [r7, #28]
 8009c5c:	4413      	add	r3, r2
 8009c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c62:	691b      	ldr	r3, [r3, #16]
 8009c64:	69ba      	ldr	r2, [r7, #24]
 8009c66:	0151      	lsls	r1, r2, #5
 8009c68:	69fa      	ldr	r2, [r7, #28]
 8009c6a:	440a      	add	r2, r1
 8009c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c70:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c74:	6113      	str	r3, [r2, #16]
 8009c76:	e037      	b.n	8009ce8 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	691a      	ldr	r2, [r3, #16]
 8009c7c:	68bb      	ldr	r3, [r7, #8]
 8009c7e:	689b      	ldr	r3, [r3, #8]
 8009c80:	4413      	add	r3, r2
 8009c82:	1e5a      	subs	r2, r3, #1
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	689b      	ldr	r3, [r3, #8]
 8009c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8009c8c:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	689b      	ldr	r3, [r3, #8]
 8009c92:	8afa      	ldrh	r2, [r7, #22]
 8009c94:	fb03 f202 	mul.w	r2, r3, r2
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009c9c:	69bb      	ldr	r3, [r7, #24]
 8009c9e:	015a      	lsls	r2, r3, #5
 8009ca0:	69fb      	ldr	r3, [r7, #28]
 8009ca2:	4413      	add	r3, r2
 8009ca4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ca8:	691a      	ldr	r2, [r3, #16]
 8009caa:	8afb      	ldrh	r3, [r7, #22]
 8009cac:	04d9      	lsls	r1, r3, #19
 8009cae:	4b38      	ldr	r3, [pc, #224]	@ (8009d90 <USB_EPStartXfer+0x538>)
 8009cb0:	400b      	ands	r3, r1
 8009cb2:	69b9      	ldr	r1, [r7, #24]
 8009cb4:	0148      	lsls	r0, r1, #5
 8009cb6:	69f9      	ldr	r1, [r7, #28]
 8009cb8:	4401      	add	r1, r0
 8009cba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cc2:	69bb      	ldr	r3, [r7, #24]
 8009cc4:	015a      	lsls	r2, r3, #5
 8009cc6:	69fb      	ldr	r3, [r7, #28]
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cce:	691a      	ldr	r2, [r3, #16]
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	6a1b      	ldr	r3, [r3, #32]
 8009cd4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cd8:	69b9      	ldr	r1, [r7, #24]
 8009cda:	0148      	lsls	r0, r1, #5
 8009cdc:	69f9      	ldr	r1, [r7, #28]
 8009cde:	4401      	add	r1, r0
 8009ce0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009ce4:	4313      	orrs	r3, r2
 8009ce6:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009ce8:	79fb      	ldrb	r3, [r7, #7]
 8009cea:	2b01      	cmp	r3, #1
 8009cec:	d10d      	bne.n	8009d0a <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	68db      	ldr	r3, [r3, #12]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d009      	beq.n	8009d0a <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	68d9      	ldr	r1, [r3, #12]
 8009cfa:	69bb      	ldr	r3, [r7, #24]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	69fb      	ldr	r3, [r7, #28]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d06:	460a      	mov	r2, r1
 8009d08:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d128      	bne.n	8009d64 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d12:	69fb      	ldr	r3, [r7, #28]
 8009d14:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d18:	689b      	ldr	r3, [r3, #8]
 8009d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d110      	bne.n	8009d44 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d22:	69bb      	ldr	r3, [r7, #24]
 8009d24:	015a      	lsls	r2, r3, #5
 8009d26:	69fb      	ldr	r3, [r7, #28]
 8009d28:	4413      	add	r3, r2
 8009d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	69ba      	ldr	r2, [r7, #24]
 8009d32:	0151      	lsls	r1, r2, #5
 8009d34:	69fa      	ldr	r2, [r7, #28]
 8009d36:	440a      	add	r2, r1
 8009d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d3c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d40:	6013      	str	r3, [r2, #0]
 8009d42:	e00f      	b.n	8009d64 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d44:	69bb      	ldr	r3, [r7, #24]
 8009d46:	015a      	lsls	r2, r3, #5
 8009d48:	69fb      	ldr	r3, [r7, #28]
 8009d4a:	4413      	add	r3, r2
 8009d4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	69ba      	ldr	r2, [r7, #24]
 8009d54:	0151      	lsls	r1, r2, #5
 8009d56:	69fa      	ldr	r2, [r7, #28]
 8009d58:	440a      	add	r2, r1
 8009d5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d62:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d64:	69bb      	ldr	r3, [r7, #24]
 8009d66:	015a      	lsls	r2, r3, #5
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	69ba      	ldr	r2, [r7, #24]
 8009d74:	0151      	lsls	r1, r2, #5
 8009d76:	69fa      	ldr	r2, [r7, #28]
 8009d78:	440a      	add	r2, r1
 8009d7a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009d84:	2300      	movs	r3, #0
}
 8009d86:	4618      	mov	r0, r3
 8009d88:	3720      	adds	r7, #32
 8009d8a:	46bd      	mov	sp, r7
 8009d8c:	bd80      	pop	{r7, pc}
 8009d8e:	bf00      	nop
 8009d90:	1ff80000 	.word	0x1ff80000

08009d94 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009d94:	b480      	push	{r7}
 8009d96:	b087      	sub	sp, #28
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009da2:	2300      	movs	r3, #0
 8009da4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009daa:	683b      	ldr	r3, [r7, #0]
 8009dac:	785b      	ldrb	r3, [r3, #1]
 8009dae:	2b01      	cmp	r3, #1
 8009db0:	d14a      	bne.n	8009e48 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	781b      	ldrb	r3, [r3, #0]
 8009db6:	015a      	lsls	r2, r3, #5
 8009db8:	693b      	ldr	r3, [r7, #16]
 8009dba:	4413      	add	r3, r2
 8009dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009dc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009dca:	f040 8086 	bne.w	8009eda <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	683a      	ldr	r2, [r7, #0]
 8009de0:	7812      	ldrb	r2, [r2, #0]
 8009de2:	0151      	lsls	r1, r2, #5
 8009de4:	693a      	ldr	r2, [r7, #16]
 8009de6:	440a      	add	r2, r1
 8009de8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009df0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	781b      	ldrb	r3, [r3, #0]
 8009df6:	015a      	lsls	r2, r3, #5
 8009df8:	693b      	ldr	r3, [r7, #16]
 8009dfa:	4413      	add	r3, r2
 8009dfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e00:	681b      	ldr	r3, [r3, #0]
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	7812      	ldrb	r2, [r2, #0]
 8009e06:	0151      	lsls	r1, r2, #5
 8009e08:	693a      	ldr	r2, [r7, #16]
 8009e0a:	440a      	add	r2, r1
 8009e0c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	3301      	adds	r3, #1
 8009e1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e22:	4293      	cmp	r3, r2
 8009e24:	d902      	bls.n	8009e2c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009e26:	2301      	movs	r3, #1
 8009e28:	75fb      	strb	r3, [r7, #23]
          break;
 8009e2a:	e056      	b.n	8009eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009e2c:	683b      	ldr	r3, [r7, #0]
 8009e2e:	781b      	ldrb	r3, [r3, #0]
 8009e30:	015a      	lsls	r2, r3, #5
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	4413      	add	r3, r2
 8009e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e44:	d0e7      	beq.n	8009e16 <USB_EPStopXfer+0x82>
 8009e46:	e048      	b.n	8009eda <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e60:	d13b      	bne.n	8009eda <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	781b      	ldrb	r3, [r3, #0]
 8009e66:	015a      	lsls	r2, r3, #5
 8009e68:	693b      	ldr	r3, [r7, #16]
 8009e6a:	4413      	add	r3, r2
 8009e6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	683a      	ldr	r2, [r7, #0]
 8009e74:	7812      	ldrb	r2, [r2, #0]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	693a      	ldr	r2, [r7, #16]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e80:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e84:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009e86:	683b      	ldr	r3, [r7, #0]
 8009e88:	781b      	ldrb	r3, [r3, #0]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	693b      	ldr	r3, [r7, #16]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	683a      	ldr	r2, [r7, #0]
 8009e98:	7812      	ldrb	r2, [r2, #0]
 8009e9a:	0151      	lsls	r1, r2, #5
 8009e9c:	693a      	ldr	r2, [r7, #16]
 8009e9e:	440a      	add	r2, r1
 8009ea0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ea4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ea8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009eaa:	68fb      	ldr	r3, [r7, #12]
 8009eac:	3301      	adds	r3, #1
 8009eae:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d902      	bls.n	8009ec0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009eba:	2301      	movs	r3, #1
 8009ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8009ebe:	e00c      	b.n	8009eda <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009ec0:	683b      	ldr	r3, [r7, #0]
 8009ec2:	781b      	ldrb	r3, [r3, #0]
 8009ec4:	015a      	lsls	r2, r3, #5
 8009ec6:	693b      	ldr	r3, [r7, #16]
 8009ec8:	4413      	add	r3, r2
 8009eca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ed8:	d0e7      	beq.n	8009eaa <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009eda:	7dfb      	ldrb	r3, [r7, #23]
}
 8009edc:	4618      	mov	r0, r3
 8009ede:	371c      	adds	r7, #28
 8009ee0:	46bd      	mov	sp, r7
 8009ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee6:	4770      	bx	lr

08009ee8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009ee8:	b480      	push	{r7}
 8009eea:	b089      	sub	sp, #36	@ 0x24
 8009eec:	af00      	add	r7, sp, #0
 8009eee:	60f8      	str	r0, [r7, #12]
 8009ef0:	60b9      	str	r1, [r7, #8]
 8009ef2:	4611      	mov	r1, r2
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	460b      	mov	r3, r1
 8009ef8:	71fb      	strb	r3, [r7, #7]
 8009efa:	4613      	mov	r3, r2
 8009efc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009f02:	68bb      	ldr	r3, [r7, #8]
 8009f04:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009f06:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d123      	bne.n	8009f56 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f0e:	88bb      	ldrh	r3, [r7, #4]
 8009f10:	3303      	adds	r3, #3
 8009f12:	089b      	lsrs	r3, r3, #2
 8009f14:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f16:	2300      	movs	r3, #0
 8009f18:	61bb      	str	r3, [r7, #24]
 8009f1a:	e018      	b.n	8009f4e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f1c:	79fb      	ldrb	r3, [r7, #7]
 8009f1e:	031a      	lsls	r2, r3, #12
 8009f20:	697b      	ldr	r3, [r7, #20]
 8009f22:	4413      	add	r3, r2
 8009f24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f28:	461a      	mov	r2, r3
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f30:	69fb      	ldr	r3, [r7, #28]
 8009f32:	3301      	adds	r3, #1
 8009f34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	3301      	adds	r3, #1
 8009f3a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f3c:	69fb      	ldr	r3, [r7, #28]
 8009f3e:	3301      	adds	r3, #1
 8009f40:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f42:	69fb      	ldr	r3, [r7, #28]
 8009f44:	3301      	adds	r3, #1
 8009f46:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f48:	69bb      	ldr	r3, [r7, #24]
 8009f4a:	3301      	adds	r3, #1
 8009f4c:	61bb      	str	r3, [r7, #24]
 8009f4e:	69ba      	ldr	r2, [r7, #24]
 8009f50:	693b      	ldr	r3, [r7, #16]
 8009f52:	429a      	cmp	r2, r3
 8009f54:	d3e2      	bcc.n	8009f1c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	3724      	adds	r7, #36	@ 0x24
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f64:	b480      	push	{r7}
 8009f66:	b08b      	sub	sp, #44	@ 0x2c
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	60f8      	str	r0, [r7, #12]
 8009f6c:	60b9      	str	r1, [r7, #8]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f7a:	88fb      	ldrh	r3, [r7, #6]
 8009f7c:	089b      	lsrs	r3, r3, #2
 8009f7e:	b29b      	uxth	r3, r3
 8009f80:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f82:	88fb      	ldrh	r3, [r7, #6]
 8009f84:	f003 0303 	and.w	r3, r3, #3
 8009f88:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	623b      	str	r3, [r7, #32]
 8009f8e:	e014      	b.n	8009fba <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009f90:	69bb      	ldr	r3, [r7, #24]
 8009f92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9a:	601a      	str	r2, [r3, #0]
    pDest++;
 8009f9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f9e:	3301      	adds	r3, #1
 8009fa0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	3301      	adds	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009faa:	3301      	adds	r3, #1
 8009fac:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb0:	3301      	adds	r3, #1
 8009fb2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009fb4:	6a3b      	ldr	r3, [r7, #32]
 8009fb6:	3301      	adds	r3, #1
 8009fb8:	623b      	str	r3, [r7, #32]
 8009fba:	6a3a      	ldr	r2, [r7, #32]
 8009fbc:	697b      	ldr	r3, [r7, #20]
 8009fbe:	429a      	cmp	r2, r3
 8009fc0:	d3e6      	bcc.n	8009f90 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009fc2:	8bfb      	ldrh	r3, [r7, #30]
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	d01e      	beq.n	800a006 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fd2:	461a      	mov	r2, r3
 8009fd4:	f107 0310 	add.w	r3, r7, #16
 8009fd8:	6812      	ldr	r2, [r2, #0]
 8009fda:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009fdc:	693a      	ldr	r2, [r7, #16]
 8009fde:	6a3b      	ldr	r3, [r7, #32]
 8009fe0:	b2db      	uxtb	r3, r3
 8009fe2:	00db      	lsls	r3, r3, #3
 8009fe4:	fa22 f303 	lsr.w	r3, r2, r3
 8009fe8:	b2da      	uxtb	r2, r3
 8009fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fec:	701a      	strb	r2, [r3, #0]
      i++;
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	3301      	adds	r3, #1
 8009ff2:	623b      	str	r3, [r7, #32]
      pDest++;
 8009ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009ffa:	8bfb      	ldrh	r3, [r7, #30]
 8009ffc:	3b01      	subs	r3, #1
 8009ffe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a000:	8bfb      	ldrh	r3, [r7, #30]
 800a002:	2b00      	cmp	r3, #0
 800a004:	d1ea      	bne.n	8009fdc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a008:	4618      	mov	r0, r3
 800a00a:	372c      	adds	r7, #44	@ 0x2c
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr

0800a014 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a014:	b480      	push	{r7}
 800a016:	b085      	sub	sp, #20
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a028:	683b      	ldr	r3, [r7, #0]
 800a02a:	785b      	ldrb	r3, [r3, #1]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d12c      	bne.n	800a08a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a030:	68bb      	ldr	r3, [r7, #8]
 800a032:	015a      	lsls	r2, r3, #5
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	4413      	add	r3, r2
 800a038:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	db12      	blt.n	800a068 <USB_EPSetStall+0x54>
 800a042:	68bb      	ldr	r3, [r7, #8]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00f      	beq.n	800a068 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	015a      	lsls	r2, r3, #5
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	4413      	add	r3, r2
 800a050:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68ba      	ldr	r2, [r7, #8]
 800a058:	0151      	lsls	r1, r2, #5
 800a05a:	68fa      	ldr	r2, [r7, #12]
 800a05c:	440a      	add	r2, r1
 800a05e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a062:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a066:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	015a      	lsls	r2, r3, #5
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	4413      	add	r3, r2
 800a070:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68ba      	ldr	r2, [r7, #8]
 800a078:	0151      	lsls	r1, r2, #5
 800a07a:	68fa      	ldr	r2, [r7, #12]
 800a07c:	440a      	add	r2, r1
 800a07e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a082:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a086:	6013      	str	r3, [r2, #0]
 800a088:	e02b      	b.n	800a0e2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a08a:	68bb      	ldr	r3, [r7, #8]
 800a08c:	015a      	lsls	r2, r3, #5
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	db12      	blt.n	800a0c2 <USB_EPSetStall+0xae>
 800a09c:	68bb      	ldr	r3, [r7, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d00f      	beq.n	800a0c2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0bc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0c0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a0c2:	68bb      	ldr	r3, [r7, #8]
 800a0c4:	015a      	lsls	r2, r3, #5
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	4413      	add	r3, r2
 800a0ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	68ba      	ldr	r2, [r7, #8]
 800a0d2:	0151      	lsls	r1, r2, #5
 800a0d4:	68fa      	ldr	r2, [r7, #12]
 800a0d6:	440a      	add	r2, r1
 800a0d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0dc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0e0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0e2:	2300      	movs	r3, #0
}
 800a0e4:	4618      	mov	r0, r3
 800a0e6:	3714      	adds	r7, #20
 800a0e8:	46bd      	mov	sp, r7
 800a0ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ee:	4770      	bx	lr

0800a0f0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a0f0:	b480      	push	{r7}
 800a0f2:	b085      	sub	sp, #20
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
 800a0f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	781b      	ldrb	r3, [r3, #0]
 800a102:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	785b      	ldrb	r3, [r3, #1]
 800a108:	2b01      	cmp	r3, #1
 800a10a:	d128      	bne.n	800a15e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	015a      	lsls	r2, r3, #5
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	4413      	add	r3, r2
 800a114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	68ba      	ldr	r2, [r7, #8]
 800a11c:	0151      	lsls	r1, r2, #5
 800a11e:	68fa      	ldr	r2, [r7, #12]
 800a120:	440a      	add	r2, r1
 800a122:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a126:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a12a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	791b      	ldrb	r3, [r3, #4]
 800a130:	2b03      	cmp	r3, #3
 800a132:	d003      	beq.n	800a13c <USB_EPClearStall+0x4c>
 800a134:	683b      	ldr	r3, [r7, #0]
 800a136:	791b      	ldrb	r3, [r3, #4]
 800a138:	2b02      	cmp	r3, #2
 800a13a:	d138      	bne.n	800a1ae <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a13c:	68bb      	ldr	r3, [r7, #8]
 800a13e:	015a      	lsls	r2, r3, #5
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	4413      	add	r3, r2
 800a144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	68ba      	ldr	r2, [r7, #8]
 800a14c:	0151      	lsls	r1, r2, #5
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	440a      	add	r2, r1
 800a152:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a156:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a15a:	6013      	str	r3, [r2, #0]
 800a15c:	e027      	b.n	800a1ae <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a15e:	68bb      	ldr	r3, [r7, #8]
 800a160:	015a      	lsls	r2, r3, #5
 800a162:	68fb      	ldr	r3, [r7, #12]
 800a164:	4413      	add	r3, r2
 800a166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	68ba      	ldr	r2, [r7, #8]
 800a16e:	0151      	lsls	r1, r2, #5
 800a170:	68fa      	ldr	r2, [r7, #12]
 800a172:	440a      	add	r2, r1
 800a174:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a178:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a17c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a17e:	683b      	ldr	r3, [r7, #0]
 800a180:	791b      	ldrb	r3, [r3, #4]
 800a182:	2b03      	cmp	r3, #3
 800a184:	d003      	beq.n	800a18e <USB_EPClearStall+0x9e>
 800a186:	683b      	ldr	r3, [r7, #0]
 800a188:	791b      	ldrb	r3, [r3, #4]
 800a18a:	2b02      	cmp	r3, #2
 800a18c:	d10f      	bne.n	800a1ae <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	015a      	lsls	r2, r3, #5
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	4413      	add	r3, r2
 800a196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	68ba      	ldr	r2, [r7, #8]
 800a19e:	0151      	lsls	r1, r2, #5
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	440a      	add	r2, r1
 800a1a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1ac:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3714      	adds	r7, #20
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ba:	4770      	bx	lr

0800a1bc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a1bc:	b480      	push	{r7}
 800a1be:	b085      	sub	sp, #20
 800a1c0:	af00      	add	r7, sp, #0
 800a1c2:	6078      	str	r0, [r7, #4]
 800a1c4:	460b      	mov	r3, r1
 800a1c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	68fa      	ldr	r2, [r7, #12]
 800a1d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1da:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a1de:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1e6:	681a      	ldr	r2, [r3, #0]
 800a1e8:	78fb      	ldrb	r3, [r7, #3]
 800a1ea:	011b      	lsls	r3, r3, #4
 800a1ec:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a1f0:	68f9      	ldr	r1, [r7, #12]
 800a1f2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a1f6:	4313      	orrs	r3, r2
 800a1f8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a1fa:	2300      	movs	r3, #0
}
 800a1fc:	4618      	mov	r0, r3
 800a1fe:	3714      	adds	r7, #20
 800a200:	46bd      	mov	sp, r7
 800a202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a206:	4770      	bx	lr

0800a208 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a208:	b480      	push	{r7}
 800a20a:	b085      	sub	sp, #20
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a222:	f023 0303 	bic.w	r3, r3, #3
 800a226:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	68fa      	ldr	r2, [r7, #12]
 800a232:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a236:	f023 0302 	bic.w	r3, r3, #2
 800a23a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	3714      	adds	r7, #20
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b085      	sub	sp, #20
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	68fa      	ldr	r2, [r7, #12]
 800a260:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a264:	f023 0303 	bic.w	r3, r3, #3
 800a268:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a270:	685b      	ldr	r3, [r3, #4]
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a278:	f043 0302 	orr.w	r3, r3, #2
 800a27c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a27e:	2300      	movs	r3, #0
}
 800a280:	4618      	mov	r0, r3
 800a282:	3714      	adds	r7, #20
 800a284:	46bd      	mov	sp, r7
 800a286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28a:	4770      	bx	lr

0800a28c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b085      	sub	sp, #20
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	695b      	ldr	r3, [r3, #20]
 800a298:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a29a:	687b      	ldr	r3, [r7, #4]
 800a29c:	699b      	ldr	r3, [r3, #24]
 800a29e:	68fa      	ldr	r2, [r7, #12]
 800a2a0:	4013      	ands	r3, r2
 800a2a2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
}
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	3714      	adds	r7, #20
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b085      	sub	sp, #20
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ce:	69db      	ldr	r3, [r3, #28]
 800a2d0:	68ba      	ldr	r2, [r7, #8]
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a2d6:	68bb      	ldr	r3, [r7, #8]
 800a2d8:	0c1b      	lsrs	r3, r3, #16
}
 800a2da:	4618      	mov	r0, r3
 800a2dc:	3714      	adds	r7, #20
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e4:	4770      	bx	lr

0800a2e6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2e6:	b480      	push	{r7}
 800a2e8:	b085      	sub	sp, #20
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2f8:	699b      	ldr	r3, [r3, #24]
 800a2fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a302:	69db      	ldr	r3, [r3, #28]
 800a304:	68ba      	ldr	r2, [r7, #8]
 800a306:	4013      	ands	r3, r2
 800a308:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a30a:	68bb      	ldr	r3, [r7, #8]
 800a30c:	b29b      	uxth	r3, r3
}
 800a30e:	4618      	mov	r0, r3
 800a310:	3714      	adds	r7, #20
 800a312:	46bd      	mov	sp, r7
 800a314:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a318:	4770      	bx	lr

0800a31a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a31a:	b480      	push	{r7}
 800a31c:	b085      	sub	sp, #20
 800a31e:	af00      	add	r7, sp, #0
 800a320:	6078      	str	r0, [r7, #4]
 800a322:	460b      	mov	r3, r1
 800a324:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a32a:	78fb      	ldrb	r3, [r7, #3]
 800a32c:	015a      	lsls	r2, r3, #5
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	4413      	add	r3, r2
 800a332:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a336:	689b      	ldr	r3, [r3, #8]
 800a338:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a340:	695b      	ldr	r3, [r3, #20]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	4013      	ands	r3, r2
 800a346:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a348:	68bb      	ldr	r3, [r7, #8]
}
 800a34a:	4618      	mov	r0, r3
 800a34c:	3714      	adds	r7, #20
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a356:	b480      	push	{r7}
 800a358:	b087      	sub	sp, #28
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	460b      	mov	r3, r1
 800a360:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a366:	697b      	ldr	r3, [r7, #20]
 800a368:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a36c:	691b      	ldr	r3, [r3, #16]
 800a36e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a370:	697b      	ldr	r3, [r7, #20]
 800a372:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a376:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a378:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a37a:	78fb      	ldrb	r3, [r7, #3]
 800a37c:	f003 030f 	and.w	r3, r3, #15
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	fa22 f303 	lsr.w	r3, r2, r3
 800a386:	01db      	lsls	r3, r3, #7
 800a388:	b2db      	uxtb	r3, r3
 800a38a:	693a      	ldr	r2, [r7, #16]
 800a38c:	4313      	orrs	r3, r2
 800a38e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a390:	78fb      	ldrb	r3, [r7, #3]
 800a392:	015a      	lsls	r2, r3, #5
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	4413      	add	r3, r2
 800a398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a39c:	689b      	ldr	r3, [r3, #8]
 800a39e:	693a      	ldr	r2, [r7, #16]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3a4:	68bb      	ldr	r3, [r7, #8]
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	371c      	adds	r7, #28
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b0:	4770      	bx	lr

0800a3b2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3b2:	b480      	push	{r7}
 800a3b4:	b083      	sub	sp, #12
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	695b      	ldr	r3, [r3, #20]
 800a3be:	f003 0301 	and.w	r3, r3, #1
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	370c      	adds	r7, #12
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b085      	sub	sp, #20
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	68fa      	ldr	r2, [r7, #12]
 800a3e4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a3e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a3ec:	f023 0307 	bic.w	r3, r3, #7
 800a3f0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a3f8:	685b      	ldr	r3, [r3, #4]
 800a3fa:	68fa      	ldr	r2, [r7, #12]
 800a3fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a400:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a404:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a406:	2300      	movs	r3, #0
}
 800a408:	4618      	mov	r0, r3
 800a40a:	3714      	adds	r7, #20
 800a40c:	46bd      	mov	sp, r7
 800a40e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a412:	4770      	bx	lr

0800a414 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a414:	b480      	push	{r7}
 800a416:	b087      	sub	sp, #28
 800a418:	af00      	add	r7, sp, #0
 800a41a:	60f8      	str	r0, [r7, #12]
 800a41c:	460b      	mov	r3, r1
 800a41e:	607a      	str	r2, [r7, #4]
 800a420:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	333c      	adds	r3, #60	@ 0x3c
 800a42a:	3304      	adds	r3, #4
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	4a26      	ldr	r2, [pc, #152]	@ (800a4cc <USB_EP0_OutStart+0xb8>)
 800a434:	4293      	cmp	r3, r2
 800a436:	d90a      	bls.n	800a44e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a438:	697b      	ldr	r3, [r7, #20]
 800a43a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a444:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a448:	d101      	bne.n	800a44e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a44a:	2300      	movs	r3, #0
 800a44c:	e037      	b.n	800a4be <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a454:	461a      	mov	r2, r3
 800a456:	2300      	movs	r3, #0
 800a458:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a45a:	697b      	ldr	r3, [r7, #20]
 800a45c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a460:	691b      	ldr	r3, [r3, #16]
 800a462:	697a      	ldr	r2, [r7, #20]
 800a464:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a468:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a46c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a46e:	697b      	ldr	r3, [r7, #20]
 800a470:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	697a      	ldr	r2, [r7, #20]
 800a478:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a47c:	f043 0318 	orr.w	r3, r3, #24
 800a480:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a482:	697b      	ldr	r3, [r7, #20]
 800a484:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a488:	691b      	ldr	r3, [r3, #16]
 800a48a:	697a      	ldr	r2, [r7, #20]
 800a48c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a490:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a494:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a496:	7afb      	ldrb	r3, [r7, #11]
 800a498:	2b01      	cmp	r3, #1
 800a49a:	d10f      	bne.n	800a4bc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a2:	461a      	mov	r2, r3
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a4a8:	697b      	ldr	r3, [r7, #20]
 800a4aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4b6:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a4ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4bc:	2300      	movs	r3, #0
}
 800a4be:	4618      	mov	r0, r3
 800a4c0:	371c      	adds	r7, #28
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr
 800a4ca:	bf00      	nop
 800a4cc:	4f54300a 	.word	0x4f54300a

0800a4d0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4d0:	b480      	push	{r7}
 800a4d2:	b085      	sub	sp, #20
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4d8:	2300      	movs	r3, #0
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	3301      	adds	r3, #1
 800a4e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a4e8:	d901      	bls.n	800a4ee <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a4ea:	2303      	movs	r3, #3
 800a4ec:	e01b      	b.n	800a526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	daf2      	bge.n	800a4dc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	691b      	ldr	r3, [r3, #16]
 800a4fe:	f043 0201 	orr.w	r2, r3, #1
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	3301      	adds	r3, #1
 800a50a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a512:	d901      	bls.n	800a518 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a514:	2303      	movs	r3, #3
 800a516:	e006      	b.n	800a526 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	691b      	ldr	r3, [r3, #16]
 800a51c:	f003 0301 	and.w	r3, r3, #1
 800a520:	2b01      	cmp	r3, #1
 800a522:	d0f0      	beq.n	800a506 <USB_CoreReset+0x36>

  return HAL_OK;
 800a524:	2300      	movs	r3, #0
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr
	...

0800a534 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a538:	4904      	ldr	r1, [pc, #16]	@ (800a54c <MX_FATFS_Init+0x18>)
 800a53a:	4805      	ldr	r0, [pc, #20]	@ (800a550 <MX_FATFS_Init+0x1c>)
 800a53c:	f004 f9ac 	bl	800e898 <FATFS_LinkDriver>
 800a540:	4603      	mov	r3, r0
 800a542:	461a      	mov	r2, r3
 800a544:	4b03      	ldr	r3, [pc, #12]	@ (800a554 <MX_FATFS_Init+0x20>)
 800a546:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a548:	bf00      	nop
 800a54a:	bd80      	pop	{r7, pc}
 800a54c:	200003f0 	.word	0x200003f0
 800a550:	20000030 	.word	0x20000030
 800a554:	200003ec 	.word	0x200003ec

0800a558 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a558:	b480      	push	{r7}
 800a55a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a55c:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a55e:	4618      	mov	r0, r3
 800a560:	46bd      	mov	sp, r7
 800a562:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a566:	4770      	bx	lr

0800a568 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	4603      	mov	r3, r0
 800a570:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a572:	79fb      	ldrb	r3, [r7, #7]
 800a574:	4618      	mov	r0, r3
 800a576:	f7f6 f9ed 	bl	8000954 <SD_disk_initialize>
 800a57a:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a57c:	4618      	mov	r0, r3
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	4618      	mov	r0, r3
 800a592:	f7f6 fac5 	bl	8000b20 <SD_disk_status>
 800a596:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	60b9      	str	r1, [r7, #8]
 800a5a8:	607a      	str	r2, [r7, #4]
 800a5aa:	603b      	str	r3, [r7, #0]
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a5b0:	7bf8      	ldrb	r0, [r7, #15]
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	687a      	ldr	r2, [r7, #4]
 800a5b6:	68b9      	ldr	r1, [r7, #8]
 800a5b8:	f7f6 fac8 	bl	8000b4c <SD_disk_read>
 800a5bc:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3710      	adds	r7, #16
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	bd80      	pop	{r7, pc}

0800a5c6 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a5c6:	b580      	push	{r7, lr}
 800a5c8:	b084      	sub	sp, #16
 800a5ca:	af00      	add	r7, sp, #0
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	607a      	str	r2, [r7, #4]
 800a5d0:	603b      	str	r3, [r7, #0]
 800a5d2:	4603      	mov	r3, r0
 800a5d4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a5d6:	7bf8      	ldrb	r0, [r7, #15]
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	68b9      	ldr	r1, [r7, #8]
 800a5de:	f7f6 fb1f 	bl	8000c20 <SD_disk_write>
 800a5e2:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800a5e4:	4618      	mov	r0, r3
 800a5e6:	3710      	adds	r7, #16
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}

0800a5ec <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b082      	sub	sp, #8
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	4603      	mov	r3, r0
 800a5f4:	603a      	str	r2, [r7, #0]
 800a5f6:	71fb      	strb	r3, [r7, #7]
 800a5f8:	460b      	mov	r3, r1
 800a5fa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a5fc:	79b9      	ldrb	r1, [r7, #6]
 800a5fe:	79fb      	ldrb	r3, [r7, #7]
 800a600:	683a      	ldr	r2, [r7, #0]
 800a602:	4618      	mov	r0, r3
 800a604:	f7f6 fb90 	bl	8000d28 <SD_disk_ioctl>
 800a608:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3708      	adds	r7, #8
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
	...

0800a614 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b084      	sub	sp, #16
 800a618:	af00      	add	r7, sp, #0
 800a61a:	6078      	str	r0, [r7, #4]
 800a61c:	460b      	mov	r3, r1
 800a61e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a620:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a624:	f004 fe14 	bl	800f250 <USBD_static_malloc>
 800a628:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a62a:	68fb      	ldr	r3, [r7, #12]
 800a62c:	2b00      	cmp	r3, #0
 800a62e:	d109      	bne.n	800a644 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	32b0      	adds	r2, #176	@ 0xb0
 800a63a:	2100      	movs	r1, #0
 800a63c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a640:	2302      	movs	r3, #2
 800a642:	e0d4      	b.n	800a7ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a644:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a648:	2100      	movs	r1, #0
 800a64a:	68f8      	ldr	r0, [r7, #12]
 800a64c:	f004 ffbe 	bl	800f5cc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	32b0      	adds	r2, #176	@ 0xb0
 800a65a:	68f9      	ldr	r1, [r7, #12]
 800a65c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	32b0      	adds	r2, #176	@ 0xb0
 800a66a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	7c1b      	ldrb	r3, [r3, #16]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d138      	bne.n	800a6ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a67c:	4b5e      	ldr	r3, [pc, #376]	@ (800a7f8 <USBD_CDC_Init+0x1e4>)
 800a67e:	7819      	ldrb	r1, [r3, #0]
 800a680:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a684:	2202      	movs	r2, #2
 800a686:	6878      	ldr	r0, [r7, #4]
 800a688:	f004 fcbf 	bl	800f00a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a68c:	4b5a      	ldr	r3, [pc, #360]	@ (800a7f8 <USBD_CDC_Init+0x1e4>)
 800a68e:	781b      	ldrb	r3, [r3, #0]
 800a690:	f003 020f 	and.w	r2, r3, #15
 800a694:	6879      	ldr	r1, [r7, #4]
 800a696:	4613      	mov	r3, r2
 800a698:	009b      	lsls	r3, r3, #2
 800a69a:	4413      	add	r3, r2
 800a69c:	009b      	lsls	r3, r3, #2
 800a69e:	440b      	add	r3, r1
 800a6a0:	3324      	adds	r3, #36	@ 0x24
 800a6a2:	2201      	movs	r2, #1
 800a6a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6a6:	4b55      	ldr	r3, [pc, #340]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a6a8:	7819      	ldrb	r1, [r3, #0]
 800a6aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6ae:	2202      	movs	r2, #2
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f004 fcaa 	bl	800f00a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6b6:	4b51      	ldr	r3, [pc, #324]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a6b8:	781b      	ldrb	r3, [r3, #0]
 800a6ba:	f003 020f 	and.w	r2, r3, #15
 800a6be:	6879      	ldr	r1, [r7, #4]
 800a6c0:	4613      	mov	r3, r2
 800a6c2:	009b      	lsls	r3, r3, #2
 800a6c4:	4413      	add	r3, r2
 800a6c6:	009b      	lsls	r3, r3, #2
 800a6c8:	440b      	add	r3, r1
 800a6ca:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6ce:	2201      	movs	r2, #1
 800a6d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6d2:	4b4b      	ldr	r3, [pc, #300]	@ (800a800 <USBD_CDC_Init+0x1ec>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f003 020f 	and.w	r2, r3, #15
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	3326      	adds	r3, #38	@ 0x26
 800a6e8:	2210      	movs	r2, #16
 800a6ea:	801a      	strh	r2, [r3, #0]
 800a6ec:	e035      	b.n	800a75a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a6ee:	4b42      	ldr	r3, [pc, #264]	@ (800a7f8 <USBD_CDC_Init+0x1e4>)
 800a6f0:	7819      	ldrb	r1, [r3, #0]
 800a6f2:	2340      	movs	r3, #64	@ 0x40
 800a6f4:	2202      	movs	r2, #2
 800a6f6:	6878      	ldr	r0, [r7, #4]
 800a6f8:	f004 fc87 	bl	800f00a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6fc:	4b3e      	ldr	r3, [pc, #248]	@ (800a7f8 <USBD_CDC_Init+0x1e4>)
 800a6fe:	781b      	ldrb	r3, [r3, #0]
 800a700:	f003 020f 	and.w	r2, r3, #15
 800a704:	6879      	ldr	r1, [r7, #4]
 800a706:	4613      	mov	r3, r2
 800a708:	009b      	lsls	r3, r3, #2
 800a70a:	4413      	add	r3, r2
 800a70c:	009b      	lsls	r3, r3, #2
 800a70e:	440b      	add	r3, r1
 800a710:	3324      	adds	r3, #36	@ 0x24
 800a712:	2201      	movs	r2, #1
 800a714:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a716:	4b39      	ldr	r3, [pc, #228]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a718:	7819      	ldrb	r1, [r3, #0]
 800a71a:	2340      	movs	r3, #64	@ 0x40
 800a71c:	2202      	movs	r2, #2
 800a71e:	6878      	ldr	r0, [r7, #4]
 800a720:	f004 fc73 	bl	800f00a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a724:	4b35      	ldr	r3, [pc, #212]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	f003 020f 	and.w	r2, r3, #15
 800a72c:	6879      	ldr	r1, [r7, #4]
 800a72e:	4613      	mov	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	4413      	add	r3, r2
 800a734:	009b      	lsls	r3, r3, #2
 800a736:	440b      	add	r3, r1
 800a738:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a73c:	2201      	movs	r2, #1
 800a73e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a740:	4b2f      	ldr	r3, [pc, #188]	@ (800a800 <USBD_CDC_Init+0x1ec>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	f003 020f 	and.w	r2, r3, #15
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	440b      	add	r3, r1
 800a754:	3326      	adds	r3, #38	@ 0x26
 800a756:	2210      	movs	r2, #16
 800a758:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a75a:	4b29      	ldr	r3, [pc, #164]	@ (800a800 <USBD_CDC_Init+0x1ec>)
 800a75c:	7819      	ldrb	r1, [r3, #0]
 800a75e:	2308      	movs	r3, #8
 800a760:	2203      	movs	r2, #3
 800a762:	6878      	ldr	r0, [r7, #4]
 800a764:	f004 fc51 	bl	800f00a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a768:	4b25      	ldr	r3, [pc, #148]	@ (800a800 <USBD_CDC_Init+0x1ec>)
 800a76a:	781b      	ldrb	r3, [r3, #0]
 800a76c:	f003 020f 	and.w	r2, r3, #15
 800a770:	6879      	ldr	r1, [r7, #4]
 800a772:	4613      	mov	r3, r2
 800a774:	009b      	lsls	r3, r3, #2
 800a776:	4413      	add	r3, r2
 800a778:	009b      	lsls	r3, r3, #2
 800a77a:	440b      	add	r3, r1
 800a77c:	3324      	adds	r3, #36	@ 0x24
 800a77e:	2201      	movs	r2, #1
 800a780:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2200      	movs	r2, #0
 800a786:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	33b0      	adds	r3, #176	@ 0xb0
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	4413      	add	r3, r2
 800a798:	685b      	ldr	r3, [r3, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	2200      	movs	r2, #0
 800a7aa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d101      	bne.n	800a7bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7b8:	2302      	movs	r3, #2
 800a7ba:	e018      	b.n	800a7ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	7c1b      	ldrb	r3, [r3, #16]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10a      	bne.n	800a7da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7c4:	4b0d      	ldr	r3, [pc, #52]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a7c6:	7819      	ldrb	r1, [r3, #0]
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7d2:	6878      	ldr	r0, [r7, #4]
 800a7d4:	f004 fd08 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800a7d8:	e008      	b.n	800a7ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7da:	4b08      	ldr	r3, [pc, #32]	@ (800a7fc <USBD_CDC_Init+0x1e8>)
 800a7dc:	7819      	ldrb	r1, [r3, #0]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7e4:	2340      	movs	r3, #64	@ 0x40
 800a7e6:	6878      	ldr	r0, [r7, #4]
 800a7e8:	f004 fcfe 	bl	800f1e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3710      	adds	r7, #16
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	200000cb 	.word	0x200000cb
 800a7fc:	200000cc 	.word	0x200000cc
 800a800:	200000cd 	.word	0x200000cd

0800a804 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a804:	b580      	push	{r7, lr}
 800a806:	b082      	sub	sp, #8
 800a808:	af00      	add	r7, sp, #0
 800a80a:	6078      	str	r0, [r7, #4]
 800a80c:	460b      	mov	r3, r1
 800a80e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a810:	4b3a      	ldr	r3, [pc, #232]	@ (800a8fc <USBD_CDC_DeInit+0xf8>)
 800a812:	781b      	ldrb	r3, [r3, #0]
 800a814:	4619      	mov	r1, r3
 800a816:	6878      	ldr	r0, [r7, #4]
 800a818:	f004 fc1d 	bl	800f056 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a81c:	4b37      	ldr	r3, [pc, #220]	@ (800a8fc <USBD_CDC_DeInit+0xf8>)
 800a81e:	781b      	ldrb	r3, [r3, #0]
 800a820:	f003 020f 	and.w	r2, r3, #15
 800a824:	6879      	ldr	r1, [r7, #4]
 800a826:	4613      	mov	r3, r2
 800a828:	009b      	lsls	r3, r3, #2
 800a82a:	4413      	add	r3, r2
 800a82c:	009b      	lsls	r3, r3, #2
 800a82e:	440b      	add	r3, r1
 800a830:	3324      	adds	r3, #36	@ 0x24
 800a832:	2200      	movs	r2, #0
 800a834:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a836:	4b32      	ldr	r3, [pc, #200]	@ (800a900 <USBD_CDC_DeInit+0xfc>)
 800a838:	781b      	ldrb	r3, [r3, #0]
 800a83a:	4619      	mov	r1, r3
 800a83c:	6878      	ldr	r0, [r7, #4]
 800a83e:	f004 fc0a 	bl	800f056 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a842:	4b2f      	ldr	r3, [pc, #188]	@ (800a900 <USBD_CDC_DeInit+0xfc>)
 800a844:	781b      	ldrb	r3, [r3, #0]
 800a846:	f003 020f 	and.w	r2, r3, #15
 800a84a:	6879      	ldr	r1, [r7, #4]
 800a84c:	4613      	mov	r3, r2
 800a84e:	009b      	lsls	r3, r3, #2
 800a850:	4413      	add	r3, r2
 800a852:	009b      	lsls	r3, r3, #2
 800a854:	440b      	add	r3, r1
 800a856:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a85a:	2200      	movs	r2, #0
 800a85c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a85e:	4b29      	ldr	r3, [pc, #164]	@ (800a904 <USBD_CDC_DeInit+0x100>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	4619      	mov	r1, r3
 800a864:	6878      	ldr	r0, [r7, #4]
 800a866:	f004 fbf6 	bl	800f056 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a86a:	4b26      	ldr	r3, [pc, #152]	@ (800a904 <USBD_CDC_DeInit+0x100>)
 800a86c:	781b      	ldrb	r3, [r3, #0]
 800a86e:	f003 020f 	and.w	r2, r3, #15
 800a872:	6879      	ldr	r1, [r7, #4]
 800a874:	4613      	mov	r3, r2
 800a876:	009b      	lsls	r3, r3, #2
 800a878:	4413      	add	r3, r2
 800a87a:	009b      	lsls	r3, r3, #2
 800a87c:	440b      	add	r3, r1
 800a87e:	3324      	adds	r3, #36	@ 0x24
 800a880:	2200      	movs	r2, #0
 800a882:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a884:	4b1f      	ldr	r3, [pc, #124]	@ (800a904 <USBD_CDC_DeInit+0x100>)
 800a886:	781b      	ldrb	r3, [r3, #0]
 800a888:	f003 020f 	and.w	r2, r3, #15
 800a88c:	6879      	ldr	r1, [r7, #4]
 800a88e:	4613      	mov	r3, r2
 800a890:	009b      	lsls	r3, r3, #2
 800a892:	4413      	add	r3, r2
 800a894:	009b      	lsls	r3, r3, #2
 800a896:	440b      	add	r3, r1
 800a898:	3326      	adds	r3, #38	@ 0x26
 800a89a:	2200      	movs	r2, #0
 800a89c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	32b0      	adds	r2, #176	@ 0xb0
 800a8a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ac:	2b00      	cmp	r3, #0
 800a8ae:	d01f      	beq.n	800a8f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8b6:	687a      	ldr	r2, [r7, #4]
 800a8b8:	33b0      	adds	r3, #176	@ 0xb0
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4413      	add	r3, r2
 800a8be:	685b      	ldr	r3, [r3, #4]
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	32b0      	adds	r2, #176	@ 0xb0
 800a8ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f004 fcca 	bl	800f26c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	32b0      	adds	r2, #176	@ 0xb0
 800a8e2:	2100      	movs	r1, #0
 800a8e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a8f0:	2300      	movs	r3, #0
}
 800a8f2:	4618      	mov	r0, r3
 800a8f4:	3708      	adds	r7, #8
 800a8f6:	46bd      	mov	sp, r7
 800a8f8:	bd80      	pop	{r7, pc}
 800a8fa:	bf00      	nop
 800a8fc:	200000cb 	.word	0x200000cb
 800a900:	200000cc 	.word	0x200000cc
 800a904:	200000cd 	.word	0x200000cd

0800a908 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	6078      	str	r0, [r7, #4]
 800a910:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	32b0      	adds	r2, #176	@ 0xb0
 800a91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a920:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a926:	2300      	movs	r3, #0
 800a928:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a92a:	2300      	movs	r3, #0
 800a92c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a934:	2303      	movs	r3, #3
 800a936:	e0bf      	b.n	800aab8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	781b      	ldrb	r3, [r3, #0]
 800a93c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a940:	2b00      	cmp	r3, #0
 800a942:	d050      	beq.n	800a9e6 <USBD_CDC_Setup+0xde>
 800a944:	2b20      	cmp	r3, #32
 800a946:	f040 80af 	bne.w	800aaa8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a94a:	683b      	ldr	r3, [r7, #0]
 800a94c:	88db      	ldrh	r3, [r3, #6]
 800a94e:	2b00      	cmp	r3, #0
 800a950:	d03a      	beq.n	800a9c8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	781b      	ldrb	r3, [r3, #0]
 800a956:	b25b      	sxtb	r3, r3
 800a958:	2b00      	cmp	r3, #0
 800a95a:	da1b      	bge.n	800a994 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	33b0      	adds	r3, #176	@ 0xb0
 800a966:	009b      	lsls	r3, r3, #2
 800a968:	4413      	add	r3, r2
 800a96a:	685b      	ldr	r3, [r3, #4]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	683a      	ldr	r2, [r7, #0]
 800a970:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a972:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a974:	683a      	ldr	r2, [r7, #0]
 800a976:	88d2      	ldrh	r2, [r2, #6]
 800a978:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	88db      	ldrh	r3, [r3, #6]
 800a97e:	2b07      	cmp	r3, #7
 800a980:	bf28      	it	cs
 800a982:	2307      	movcs	r3, #7
 800a984:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a986:	693b      	ldr	r3, [r7, #16]
 800a988:	89fa      	ldrh	r2, [r7, #14]
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f001 fd93 	bl	800c4b8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a992:	e090      	b.n	800aab6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	785a      	ldrb	r2, [r3, #1]
 800a998:	693b      	ldr	r3, [r7, #16]
 800a99a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	88db      	ldrh	r3, [r3, #6]
 800a9a2:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9a4:	d803      	bhi.n	800a9ae <USBD_CDC_Setup+0xa6>
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	88db      	ldrh	r3, [r3, #6]
 800a9aa:	b2da      	uxtb	r2, r3
 800a9ac:	e000      	b.n	800a9b0 <USBD_CDC_Setup+0xa8>
 800a9ae:	2240      	movs	r2, #64	@ 0x40
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9b6:	6939      	ldr	r1, [r7, #16]
 800a9b8:	693b      	ldr	r3, [r7, #16]
 800a9ba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9be:	461a      	mov	r2, r3
 800a9c0:	6878      	ldr	r0, [r7, #4]
 800a9c2:	f001 fda5 	bl	800c510 <USBD_CtlPrepareRx>
      break;
 800a9c6:	e076      	b.n	800aab6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ce:	687a      	ldr	r2, [r7, #4]
 800a9d0:	33b0      	adds	r3, #176	@ 0xb0
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	4413      	add	r3, r2
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	689b      	ldr	r3, [r3, #8]
 800a9da:	683a      	ldr	r2, [r7, #0]
 800a9dc:	7850      	ldrb	r0, [r2, #1]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	6839      	ldr	r1, [r7, #0]
 800a9e2:	4798      	blx	r3
      break;
 800a9e4:	e067      	b.n	800aab6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a9e6:	683b      	ldr	r3, [r7, #0]
 800a9e8:	785b      	ldrb	r3, [r3, #1]
 800a9ea:	2b0b      	cmp	r3, #11
 800a9ec:	d851      	bhi.n	800aa92 <USBD_CDC_Setup+0x18a>
 800a9ee:	a201      	add	r2, pc, #4	@ (adr r2, 800a9f4 <USBD_CDC_Setup+0xec>)
 800a9f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9f4:	0800aa25 	.word	0x0800aa25
 800a9f8:	0800aaa1 	.word	0x0800aaa1
 800a9fc:	0800aa93 	.word	0x0800aa93
 800aa00:	0800aa93 	.word	0x0800aa93
 800aa04:	0800aa93 	.word	0x0800aa93
 800aa08:	0800aa93 	.word	0x0800aa93
 800aa0c:	0800aa93 	.word	0x0800aa93
 800aa10:	0800aa93 	.word	0x0800aa93
 800aa14:	0800aa93 	.word	0x0800aa93
 800aa18:	0800aa93 	.word	0x0800aa93
 800aa1c:	0800aa4f 	.word	0x0800aa4f
 800aa20:	0800aa79 	.word	0x0800aa79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	2b03      	cmp	r3, #3
 800aa2e:	d107      	bne.n	800aa40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa30:	f107 030a 	add.w	r3, r7, #10
 800aa34:	2202      	movs	r2, #2
 800aa36:	4619      	mov	r1, r3
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 fd3d 	bl	800c4b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa3e:	e032      	b.n	800aaa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa40:	6839      	ldr	r1, [r7, #0]
 800aa42:	6878      	ldr	r0, [r7, #4]
 800aa44:	f001 fcbb 	bl	800c3be <USBD_CtlError>
            ret = USBD_FAIL;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	75fb      	strb	r3, [r7, #23]
          break;
 800aa4c:	e02b      	b.n	800aaa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa54:	b2db      	uxtb	r3, r3
 800aa56:	2b03      	cmp	r3, #3
 800aa58:	d107      	bne.n	800aa6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa5a:	f107 030d 	add.w	r3, r7, #13
 800aa5e:	2201      	movs	r2, #1
 800aa60:	4619      	mov	r1, r3
 800aa62:	6878      	ldr	r0, [r7, #4]
 800aa64:	f001 fd28 	bl	800c4b8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa68:	e01d      	b.n	800aaa6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa6a:	6839      	ldr	r1, [r7, #0]
 800aa6c:	6878      	ldr	r0, [r7, #4]
 800aa6e:	f001 fca6 	bl	800c3be <USBD_CtlError>
            ret = USBD_FAIL;
 800aa72:	2303      	movs	r3, #3
 800aa74:	75fb      	strb	r3, [r7, #23]
          break;
 800aa76:	e016      	b.n	800aaa6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa7e:	b2db      	uxtb	r3, r3
 800aa80:	2b03      	cmp	r3, #3
 800aa82:	d00f      	beq.n	800aaa4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aa84:	6839      	ldr	r1, [r7, #0]
 800aa86:	6878      	ldr	r0, [r7, #4]
 800aa88:	f001 fc99 	bl	800c3be <USBD_CtlError>
            ret = USBD_FAIL;
 800aa8c:	2303      	movs	r3, #3
 800aa8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aa90:	e008      	b.n	800aaa4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aa92:	6839      	ldr	r1, [r7, #0]
 800aa94:	6878      	ldr	r0, [r7, #4]
 800aa96:	f001 fc92 	bl	800c3be <USBD_CtlError>
          ret = USBD_FAIL;
 800aa9a:	2303      	movs	r3, #3
 800aa9c:	75fb      	strb	r3, [r7, #23]
          break;
 800aa9e:	e002      	b.n	800aaa6 <USBD_CDC_Setup+0x19e>
          break;
 800aaa0:	bf00      	nop
 800aaa2:	e008      	b.n	800aab6 <USBD_CDC_Setup+0x1ae>
          break;
 800aaa4:	bf00      	nop
      }
      break;
 800aaa6:	e006      	b.n	800aab6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f001 fc87 	bl	800c3be <USBD_CtlError>
      ret = USBD_FAIL;
 800aab0:	2303      	movs	r3, #3
 800aab2:	75fb      	strb	r3, [r7, #23]
      break;
 800aab4:	bf00      	nop
  }

  return (uint8_t)ret;
 800aab6:	7dfb      	ldrb	r3, [r7, #23]
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3718      	adds	r7, #24
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}

0800aac0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aac0:	b580      	push	{r7, lr}
 800aac2:	b084      	sub	sp, #16
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
 800aac8:	460b      	mov	r3, r1
 800aaca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aad2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	32b0      	adds	r2, #176	@ 0xb0
 800aade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d101      	bne.n	800aaea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aae6:	2303      	movs	r3, #3
 800aae8:	e065      	b.n	800abb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	32b0      	adds	r2, #176	@ 0xb0
 800aaf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aafa:	78fb      	ldrb	r3, [r7, #3]
 800aafc:	f003 020f 	and.w	r2, r3, #15
 800ab00:	6879      	ldr	r1, [r7, #4]
 800ab02:	4613      	mov	r3, r2
 800ab04:	009b      	lsls	r3, r3, #2
 800ab06:	4413      	add	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	440b      	add	r3, r1
 800ab0c:	3318      	adds	r3, #24
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d02f      	beq.n	800ab74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab14:	78fb      	ldrb	r3, [r7, #3]
 800ab16:	f003 020f 	and.w	r2, r3, #15
 800ab1a:	6879      	ldr	r1, [r7, #4]
 800ab1c:	4613      	mov	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4413      	add	r3, r2
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	440b      	add	r3, r1
 800ab26:	3318      	adds	r3, #24
 800ab28:	681a      	ldr	r2, [r3, #0]
 800ab2a:	78fb      	ldrb	r3, [r7, #3]
 800ab2c:	f003 010f 	and.w	r1, r3, #15
 800ab30:	68f8      	ldr	r0, [r7, #12]
 800ab32:	460b      	mov	r3, r1
 800ab34:	00db      	lsls	r3, r3, #3
 800ab36:	440b      	add	r3, r1
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	4403      	add	r3, r0
 800ab3c:	331c      	adds	r3, #28
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab44:	fb01 f303 	mul.w	r3, r1, r3
 800ab48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d112      	bne.n	800ab74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab4e:	78fb      	ldrb	r3, [r7, #3]
 800ab50:	f003 020f 	and.w	r2, r3, #15
 800ab54:	6879      	ldr	r1, [r7, #4]
 800ab56:	4613      	mov	r3, r2
 800ab58:	009b      	lsls	r3, r3, #2
 800ab5a:	4413      	add	r3, r2
 800ab5c:	009b      	lsls	r3, r3, #2
 800ab5e:	440b      	add	r3, r1
 800ab60:	3318      	adds	r3, #24
 800ab62:	2200      	movs	r2, #0
 800ab64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab66:	78f9      	ldrb	r1, [r7, #3]
 800ab68:	2300      	movs	r3, #0
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	f004 fb1a 	bl	800f1a6 <USBD_LL_Transmit>
 800ab72:	e01f      	b.n	800abb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab74:	68bb      	ldr	r3, [r7, #8]
 800ab76:	2200      	movs	r2, #0
 800ab78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	33b0      	adds	r3, #176	@ 0xb0
 800ab86:	009b      	lsls	r3, r3, #2
 800ab88:	4413      	add	r3, r2
 800ab8a:	685b      	ldr	r3, [r3, #4]
 800ab8c:	691b      	ldr	r3, [r3, #16]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d010      	beq.n	800abb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab98:	687a      	ldr	r2, [r7, #4]
 800ab9a:	33b0      	adds	r3, #176	@ 0xb0
 800ab9c:	009b      	lsls	r3, r3, #2
 800ab9e:	4413      	add	r3, r2
 800aba0:	685b      	ldr	r3, [r3, #4]
 800aba2:	691b      	ldr	r3, [r3, #16]
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abaa:	68ba      	ldr	r2, [r7, #8]
 800abac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abb0:	78fa      	ldrb	r2, [r7, #3]
 800abb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3710      	adds	r7, #16
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	32b0      	adds	r2, #176	@ 0xb0
 800abd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	32b0      	adds	r2, #176	@ 0xb0
 800abe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d101      	bne.n	800abf0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800abec:	2303      	movs	r3, #3
 800abee:	e01a      	b.n	800ac26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800abf0:	78fb      	ldrb	r3, [r7, #3]
 800abf2:	4619      	mov	r1, r3
 800abf4:	6878      	ldr	r0, [r7, #4]
 800abf6:	f004 fb18 	bl	800f22a <USBD_LL_GetRxDataSize>
 800abfa:	4602      	mov	r2, r0
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac08:	687a      	ldr	r2, [r7, #4]
 800ac0a:	33b0      	adds	r3, #176	@ 0xb0
 800ac0c:	009b      	lsls	r3, r3, #2
 800ac0e:	4413      	add	r3, r2
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	68db      	ldr	r3, [r3, #12]
 800ac14:	68fa      	ldr	r2, [r7, #12]
 800ac16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac1a:	68fa      	ldr	r2, [r7, #12]
 800ac1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac20:	4611      	mov	r1, r2
 800ac22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac24:	2300      	movs	r3, #0
}
 800ac26:	4618      	mov	r0, r3
 800ac28:	3710      	adds	r7, #16
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}

0800ac2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac2e:	b580      	push	{r7, lr}
 800ac30:	b084      	sub	sp, #16
 800ac32:	af00      	add	r7, sp, #0
 800ac34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	32b0      	adds	r2, #176	@ 0xb0
 800ac40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e024      	b.n	800ac9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	33b0      	adds	r3, #176	@ 0xb0
 800ac5a:	009b      	lsls	r3, r3, #2
 800ac5c:	4413      	add	r3, r2
 800ac5e:	685b      	ldr	r3, [r3, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d019      	beq.n	800ac98 <USBD_CDC_EP0_RxReady+0x6a>
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac6a:	2bff      	cmp	r3, #255	@ 0xff
 800ac6c:	d014      	beq.n	800ac98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	33b0      	adds	r3, #176	@ 0xb0
 800ac78:	009b      	lsls	r3, r3, #2
 800ac7a:	4413      	add	r3, r2
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	689b      	ldr	r3, [r3, #8]
 800ac80:	68fa      	ldr	r2, [r7, #12]
 800ac82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800ac86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800ac88:	68fa      	ldr	r2, [r7, #12]
 800ac8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	22ff      	movs	r2, #255	@ 0xff
 800ac94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800ac98:	2300      	movs	r3, #0
}
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	3710      	adds	r7, #16
 800ac9e:	46bd      	mov	sp, r7
 800aca0:	bd80      	pop	{r7, pc}
	...

0800aca4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	b086      	sub	sp, #24
 800aca8:	af00      	add	r7, sp, #0
 800acaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acac:	2182      	movs	r1, #130	@ 0x82
 800acae:	4818      	ldr	r0, [pc, #96]	@ (800ad10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acb0:	f000 fd4f 	bl	800b752 <USBD_GetEpDesc>
 800acb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acb6:	2101      	movs	r1, #1
 800acb8:	4815      	ldr	r0, [pc, #84]	@ (800ad10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acba:	f000 fd4a 	bl	800b752 <USBD_GetEpDesc>
 800acbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acc0:	2181      	movs	r1, #129	@ 0x81
 800acc2:	4813      	ldr	r0, [pc, #76]	@ (800ad10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acc4:	f000 fd45 	bl	800b752 <USBD_GetEpDesc>
 800acc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acca:	697b      	ldr	r3, [r7, #20]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d002      	beq.n	800acd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	2210      	movs	r2, #16
 800acd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acd6:	693b      	ldr	r3, [r7, #16]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d006      	beq.n	800acea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acdc:	693b      	ldr	r3, [r7, #16]
 800acde:	2200      	movs	r2, #0
 800ace0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ace4:	711a      	strb	r2, [r3, #4]
 800ace6:	2200      	movs	r2, #0
 800ace8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	2b00      	cmp	r3, #0
 800acee:	d006      	beq.n	800acfe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	2200      	movs	r2, #0
 800acf4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800acf8:	711a      	strb	r2, [r3, #4]
 800acfa:	2200      	movs	r2, #0
 800acfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	2243      	movs	r2, #67	@ 0x43
 800ad02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad04:	4b02      	ldr	r3, [pc, #8]	@ (800ad10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3718      	adds	r7, #24
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	20000088 	.word	0x20000088

0800ad14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	b086      	sub	sp, #24
 800ad18:	af00      	add	r7, sp, #0
 800ad1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad1c:	2182      	movs	r1, #130	@ 0x82
 800ad1e:	4818      	ldr	r0, [pc, #96]	@ (800ad80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad20:	f000 fd17 	bl	800b752 <USBD_GetEpDesc>
 800ad24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad26:	2101      	movs	r1, #1
 800ad28:	4815      	ldr	r0, [pc, #84]	@ (800ad80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad2a:	f000 fd12 	bl	800b752 <USBD_GetEpDesc>
 800ad2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad30:	2181      	movs	r1, #129	@ 0x81
 800ad32:	4813      	ldr	r0, [pc, #76]	@ (800ad80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad34:	f000 fd0d 	bl	800b752 <USBD_GetEpDesc>
 800ad38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d002      	beq.n	800ad46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad40:	697b      	ldr	r3, [r7, #20]
 800ad42:	2210      	movs	r2, #16
 800ad44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad46:	693b      	ldr	r3, [r7, #16]
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	d006      	beq.n	800ad5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad4c:	693b      	ldr	r3, [r7, #16]
 800ad4e:	2200      	movs	r2, #0
 800ad50:	711a      	strb	r2, [r3, #4]
 800ad52:	2200      	movs	r2, #0
 800ad54:	f042 0202 	orr.w	r2, r2, #2
 800ad58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d006      	beq.n	800ad6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad60:	68fb      	ldr	r3, [r7, #12]
 800ad62:	2200      	movs	r2, #0
 800ad64:	711a      	strb	r2, [r3, #4]
 800ad66:	2200      	movs	r2, #0
 800ad68:	f042 0202 	orr.w	r2, r2, #2
 800ad6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	2243      	movs	r2, #67	@ 0x43
 800ad72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad74:	4b02      	ldr	r3, [pc, #8]	@ (800ad80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3718      	adds	r7, #24
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd80      	pop	{r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20000088 	.word	0x20000088

0800ad84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b086      	sub	sp, #24
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad8c:	2182      	movs	r1, #130	@ 0x82
 800ad8e:	4818      	ldr	r0, [pc, #96]	@ (800adf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad90:	f000 fcdf 	bl	800b752 <USBD_GetEpDesc>
 800ad94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad96:	2101      	movs	r1, #1
 800ad98:	4815      	ldr	r0, [pc, #84]	@ (800adf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ad9a:	f000 fcda 	bl	800b752 <USBD_GetEpDesc>
 800ad9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ada0:	2181      	movs	r1, #129	@ 0x81
 800ada2:	4813      	ldr	r0, [pc, #76]	@ (800adf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ada4:	f000 fcd5 	bl	800b752 <USBD_GetEpDesc>
 800ada8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adaa:	697b      	ldr	r3, [r7, #20]
 800adac:	2b00      	cmp	r3, #0
 800adae:	d002      	beq.n	800adb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	2210      	movs	r2, #16
 800adb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	2b00      	cmp	r3, #0
 800adba:	d006      	beq.n	800adca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adbc:	693b      	ldr	r3, [r7, #16]
 800adbe:	2200      	movs	r2, #0
 800adc0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adc4:	711a      	strb	r2, [r3, #4]
 800adc6:	2200      	movs	r2, #0
 800adc8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d006      	beq.n	800adde <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800add0:	68fb      	ldr	r3, [r7, #12]
 800add2:	2200      	movs	r2, #0
 800add4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800add8:	711a      	strb	r2, [r3, #4]
 800adda:	2200      	movs	r2, #0
 800addc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2243      	movs	r2, #67	@ 0x43
 800ade2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ade4:	4b02      	ldr	r3, [pc, #8]	@ (800adf0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ade6:	4618      	mov	r0, r3
 800ade8:	3718      	adds	r7, #24
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	20000088 	.word	0x20000088

0800adf4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	220a      	movs	r2, #10
 800ae00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae02:	4b03      	ldr	r3, [pc, #12]	@ (800ae10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae04:	4618      	mov	r0, r3
 800ae06:	370c      	adds	r7, #12
 800ae08:	46bd      	mov	sp, r7
 800ae0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae0e:	4770      	bx	lr
 800ae10:	20000044 	.word	0x20000044

0800ae14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b083      	sub	sp, #12
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae1e:	683b      	ldr	r3, [r7, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d101      	bne.n	800ae28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae24:	2303      	movs	r3, #3
 800ae26:	e009      	b.n	800ae3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae2e:	687a      	ldr	r2, [r7, #4]
 800ae30:	33b0      	adds	r3, #176	@ 0xb0
 800ae32:	009b      	lsls	r3, r3, #2
 800ae34:	4413      	add	r3, r2
 800ae36:	683a      	ldr	r2, [r7, #0]
 800ae38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae3a:	2300      	movs	r3, #0
}
 800ae3c:	4618      	mov	r0, r3
 800ae3e:	370c      	adds	r7, #12
 800ae40:	46bd      	mov	sp, r7
 800ae42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae46:	4770      	bx	lr

0800ae48 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae48:	b480      	push	{r7}
 800ae4a:	b087      	sub	sp, #28
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	60f8      	str	r0, [r7, #12]
 800ae50:	60b9      	str	r1, [r7, #8]
 800ae52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	32b0      	adds	r2, #176	@ 0xb0
 800ae5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae62:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae64:	697b      	ldr	r3, [r7, #20]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d101      	bne.n	800ae6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae6a:	2303      	movs	r3, #3
 800ae6c:	e008      	b.n	800ae80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae6e:	697b      	ldr	r3, [r7, #20]
 800ae70:	68ba      	ldr	r2, [r7, #8]
 800ae72:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae76:	697b      	ldr	r3, [r7, #20]
 800ae78:	687a      	ldr	r2, [r7, #4]
 800ae7a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	4618      	mov	r0, r3
 800ae82:	371c      	adds	r7, #28
 800ae84:	46bd      	mov	sp, r7
 800ae86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8a:	4770      	bx	lr

0800ae8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800ae8c:	b480      	push	{r7}
 800ae8e:	b085      	sub	sp, #20
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
 800ae94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	32b0      	adds	r2, #176	@ 0xb0
 800aea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d101      	bne.n	800aeb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aeac:	2303      	movs	r3, #3
 800aeae:	e004      	b.n	800aeba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aeb8:	2300      	movs	r3, #0
}
 800aeba:	4618      	mov	r0, r3
 800aebc:	3714      	adds	r7, #20
 800aebe:	46bd      	mov	sp, r7
 800aec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec4:	4770      	bx	lr
	...

0800aec8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b084      	sub	sp, #16
 800aecc:	af00      	add	r7, sp, #0
 800aece:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	32b0      	adds	r2, #176	@ 0xb0
 800aeda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aede:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aee0:	2301      	movs	r3, #1
 800aee2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800aee4:	68bb      	ldr	r3, [r7, #8]
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d101      	bne.n	800aeee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800aeea:	2303      	movs	r3, #3
 800aeec:	e025      	b.n	800af3a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800aeee:	68bb      	ldr	r3, [r7, #8]
 800aef0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d11f      	bne.n	800af38 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800aef8:	68bb      	ldr	r3, [r7, #8]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800af00:	4b10      	ldr	r3, [pc, #64]	@ (800af44 <USBD_CDC_TransmitPacket+0x7c>)
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	f003 020f 	and.w	r2, r3, #15
 800af08:	68bb      	ldr	r3, [r7, #8]
 800af0a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	4613      	mov	r3, r2
 800af12:	009b      	lsls	r3, r3, #2
 800af14:	4413      	add	r3, r2
 800af16:	009b      	lsls	r3, r3, #2
 800af18:	4403      	add	r3, r0
 800af1a:	3318      	adds	r3, #24
 800af1c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af1e:	4b09      	ldr	r3, [pc, #36]	@ (800af44 <USBD_CDC_TransmitPacket+0x7c>)
 800af20:	7819      	ldrb	r1, [r3, #0]
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af2e:	6878      	ldr	r0, [r7, #4]
 800af30:	f004 f939 	bl	800f1a6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800af34:	2300      	movs	r3, #0
 800af36:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af38:	7bfb      	ldrb	r3, [r7, #15]
}
 800af3a:	4618      	mov	r0, r3
 800af3c:	3710      	adds	r7, #16
 800af3e:	46bd      	mov	sp, r7
 800af40:	bd80      	pop	{r7, pc}
 800af42:	bf00      	nop
 800af44:	200000cb 	.word	0x200000cb

0800af48 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b084      	sub	sp, #16
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	32b0      	adds	r2, #176	@ 0xb0
 800af5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af5e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	32b0      	adds	r2, #176	@ 0xb0
 800af6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d101      	bne.n	800af76 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af72:	2303      	movs	r3, #3
 800af74:	e018      	b.n	800afa8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	7c1b      	ldrb	r3, [r3, #16]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d10a      	bne.n	800af94 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af7e:	4b0c      	ldr	r3, [pc, #48]	@ (800afb0 <USBD_CDC_ReceivePacket+0x68>)
 800af80:	7819      	ldrb	r1, [r3, #0]
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af88:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800af8c:	6878      	ldr	r0, [r7, #4]
 800af8e:	f004 f92b 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800af92:	e008      	b.n	800afa6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af94:	4b06      	ldr	r3, [pc, #24]	@ (800afb0 <USBD_CDC_ReceivePacket+0x68>)
 800af96:	7819      	ldrb	r1, [r3, #0]
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800af9e:	2340      	movs	r3, #64	@ 0x40
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f004 f921 	bl	800f1e8 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afa6:	2300      	movs	r3, #0
}
 800afa8:	4618      	mov	r0, r3
 800afaa:	3710      	adds	r7, #16
 800afac:	46bd      	mov	sp, r7
 800afae:	bd80      	pop	{r7, pc}
 800afb0:	200000cc 	.word	0x200000cc

0800afb4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b086      	sub	sp, #24
 800afb8:	af00      	add	r7, sp, #0
 800afba:	60f8      	str	r0, [r7, #12]
 800afbc:	60b9      	str	r1, [r7, #8]
 800afbe:	4613      	mov	r3, r2
 800afc0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d101      	bne.n	800afcc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afc8:	2303      	movs	r3, #3
 800afca:	e01f      	b.n	800b00c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	2200      	movs	r2, #0
 800afd0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	2200      	movs	r2, #0
 800afe0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800afe4:	68bb      	ldr	r3, [r7, #8]
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	d003      	beq.n	800aff2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	2201      	movs	r2, #1
 800aff6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	79fa      	ldrb	r2, [r7, #7]
 800affe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b000:	68f8      	ldr	r0, [r7, #12]
 800b002:	f003 ff9b 	bl	800ef3c <USBD_LL_Init>
 800b006:	4603      	mov	r3, r0
 800b008:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b00a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b00c:	4618      	mov	r0, r3
 800b00e:	3718      	adds	r7, #24
 800b010:	46bd      	mov	sp, r7
 800b012:	bd80      	pop	{r7, pc}

0800b014 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b084      	sub	sp, #16
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
 800b01c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b01e:	2300      	movs	r3, #0
 800b020:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b022:	683b      	ldr	r3, [r7, #0]
 800b024:	2b00      	cmp	r3, #0
 800b026:	d101      	bne.n	800b02c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b028:	2303      	movs	r3, #3
 800b02a:	e025      	b.n	800b078 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	683a      	ldr	r2, [r7, #0]
 800b030:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	32ae      	adds	r2, #174	@ 0xae
 800b03e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	2b00      	cmp	r3, #0
 800b046:	d00f      	beq.n	800b068 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	32ae      	adds	r2, #174	@ 0xae
 800b052:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b058:	f107 020e 	add.w	r2, r7, #14
 800b05c:	4610      	mov	r0, r2
 800b05e:	4798      	blx	r3
 800b060:	4602      	mov	r2, r0
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b06e:	1c5a      	adds	r2, r3, #1
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b076:	2300      	movs	r3, #0
}
 800b078:	4618      	mov	r0, r3
 800b07a:	3710      	adds	r7, #16
 800b07c:	46bd      	mov	sp, r7
 800b07e:	bd80      	pop	{r7, pc}

0800b080 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b082      	sub	sp, #8
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	f003 ffa3 	bl	800efd4 <USBD_LL_Start>
 800b08e:	4603      	mov	r3, r0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3708      	adds	r7, #8
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b098:	b480      	push	{r7}
 800b09a:	b083      	sub	sp, #12
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0a2:	4618      	mov	r0, r3
 800b0a4:	370c      	adds	r7, #12
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b084      	sub	sp, #16
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	460b      	mov	r3, r1
 800b0b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0ba:	2300      	movs	r3, #0
 800b0bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d009      	beq.n	800b0dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	78fa      	ldrb	r2, [r7, #3]
 800b0d2:	4611      	mov	r1, r2
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	4798      	blx	r3
 800b0d8:	4603      	mov	r3, r0
 800b0da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3710      	adds	r7, #16
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0f2:	2300      	movs	r3, #0
 800b0f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	78fa      	ldrb	r2, [r7, #3]
 800b100:	4611      	mov	r1, r2
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	4798      	blx	r3
 800b106:	4603      	mov	r3, r0
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d001      	beq.n	800b110 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b10c:	2303      	movs	r3, #3
 800b10e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b110:	7bfb      	ldrb	r3, [r7, #15]
}
 800b112:	4618      	mov	r0, r3
 800b114:	3710      	adds	r7, #16
 800b116:	46bd      	mov	sp, r7
 800b118:	bd80      	pop	{r7, pc}

0800b11a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b11a:	b580      	push	{r7, lr}
 800b11c:	b084      	sub	sp, #16
 800b11e:	af00      	add	r7, sp, #0
 800b120:	6078      	str	r0, [r7, #4]
 800b122:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b12a:	6839      	ldr	r1, [r7, #0]
 800b12c:	4618      	mov	r0, r3
 800b12e:	f001 f90c 	bl	800c34a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	2201      	movs	r2, #1
 800b136:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b140:	461a      	mov	r2, r3
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b14e:	f003 031f 	and.w	r3, r3, #31
 800b152:	2b02      	cmp	r3, #2
 800b154:	d01a      	beq.n	800b18c <USBD_LL_SetupStage+0x72>
 800b156:	2b02      	cmp	r3, #2
 800b158:	d822      	bhi.n	800b1a0 <USBD_LL_SetupStage+0x86>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d002      	beq.n	800b164 <USBD_LL_SetupStage+0x4a>
 800b15e:	2b01      	cmp	r3, #1
 800b160:	d00a      	beq.n	800b178 <USBD_LL_SetupStage+0x5e>
 800b162:	e01d      	b.n	800b1a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b16a:	4619      	mov	r1, r3
 800b16c:	6878      	ldr	r0, [r7, #4]
 800b16e:	f000 fb63 	bl	800b838 <USBD_StdDevReq>
 800b172:	4603      	mov	r3, r0
 800b174:	73fb      	strb	r3, [r7, #15]
      break;
 800b176:	e020      	b.n	800b1ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b17e:	4619      	mov	r1, r3
 800b180:	6878      	ldr	r0, [r7, #4]
 800b182:	f000 fbcb 	bl	800b91c <USBD_StdItfReq>
 800b186:	4603      	mov	r3, r0
 800b188:	73fb      	strb	r3, [r7, #15]
      break;
 800b18a:	e016      	b.n	800b1ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b192:	4619      	mov	r1, r3
 800b194:	6878      	ldr	r0, [r7, #4]
 800b196:	f000 fc2d 	bl	800b9f4 <USBD_StdEPReq>
 800b19a:	4603      	mov	r3, r0
 800b19c:	73fb      	strb	r3, [r7, #15]
      break;
 800b19e:	e00c      	b.n	800b1ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1aa:	b2db      	uxtb	r3, r3
 800b1ac:	4619      	mov	r1, r3
 800b1ae:	6878      	ldr	r0, [r7, #4]
 800b1b0:	f003 ff70 	bl	800f094 <USBD_LL_StallEP>
 800b1b4:	4603      	mov	r3, r0
 800b1b6:	73fb      	strb	r3, [r7, #15]
      break;
 800b1b8:	bf00      	nop
  }

  return ret;
 800b1ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1bc:	4618      	mov	r0, r3
 800b1be:	3710      	adds	r7, #16
 800b1c0:	46bd      	mov	sp, r7
 800b1c2:	bd80      	pop	{r7, pc}

0800b1c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1c4:	b580      	push	{r7, lr}
 800b1c6:	b086      	sub	sp, #24
 800b1c8:	af00      	add	r7, sp, #0
 800b1ca:	60f8      	str	r0, [r7, #12]
 800b1cc:	460b      	mov	r3, r1
 800b1ce:	607a      	str	r2, [r7, #4]
 800b1d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1d6:	7afb      	ldrb	r3, [r7, #11]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d16e      	bne.n	800b2ba <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b1ea:	2b03      	cmp	r3, #3
 800b1ec:	f040 8098 	bne.w	800b320 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b1f0:	693b      	ldr	r3, [r7, #16]
 800b1f2:	689a      	ldr	r2, [r3, #8]
 800b1f4:	693b      	ldr	r3, [r7, #16]
 800b1f6:	68db      	ldr	r3, [r3, #12]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d913      	bls.n	800b224 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	689a      	ldr	r2, [r3, #8]
 800b200:	693b      	ldr	r3, [r7, #16]
 800b202:	68db      	ldr	r3, [r3, #12]
 800b204:	1ad2      	subs	r2, r2, r3
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	68da      	ldr	r2, [r3, #12]
 800b20e:	693b      	ldr	r3, [r7, #16]
 800b210:	689b      	ldr	r3, [r3, #8]
 800b212:	4293      	cmp	r3, r2
 800b214:	bf28      	it	cs
 800b216:	4613      	movcs	r3, r2
 800b218:	461a      	mov	r2, r3
 800b21a:	6879      	ldr	r1, [r7, #4]
 800b21c:	68f8      	ldr	r0, [r7, #12]
 800b21e:	f001 f994 	bl	800c54a <USBD_CtlContinueRx>
 800b222:	e07d      	b.n	800b320 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b22a:	f003 031f 	and.w	r3, r3, #31
 800b22e:	2b02      	cmp	r3, #2
 800b230:	d014      	beq.n	800b25c <USBD_LL_DataOutStage+0x98>
 800b232:	2b02      	cmp	r3, #2
 800b234:	d81d      	bhi.n	800b272 <USBD_LL_DataOutStage+0xae>
 800b236:	2b00      	cmp	r3, #0
 800b238:	d002      	beq.n	800b240 <USBD_LL_DataOutStage+0x7c>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d003      	beq.n	800b246 <USBD_LL_DataOutStage+0x82>
 800b23e:	e018      	b.n	800b272 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b240:	2300      	movs	r3, #0
 800b242:	75bb      	strb	r3, [r7, #22]
            break;
 800b244:	e018      	b.n	800b278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b24c:	b2db      	uxtb	r3, r3
 800b24e:	4619      	mov	r1, r3
 800b250:	68f8      	ldr	r0, [r7, #12]
 800b252:	f000 fa64 	bl	800b71e <USBD_CoreFindIF>
 800b256:	4603      	mov	r3, r0
 800b258:	75bb      	strb	r3, [r7, #22]
            break;
 800b25a:	e00d      	b.n	800b278 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b262:	b2db      	uxtb	r3, r3
 800b264:	4619      	mov	r1, r3
 800b266:	68f8      	ldr	r0, [r7, #12]
 800b268:	f000 fa66 	bl	800b738 <USBD_CoreFindEP>
 800b26c:	4603      	mov	r3, r0
 800b26e:	75bb      	strb	r3, [r7, #22]
            break;
 800b270:	e002      	b.n	800b278 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	75bb      	strb	r3, [r7, #22]
            break;
 800b276:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b278:	7dbb      	ldrb	r3, [r7, #22]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d119      	bne.n	800b2b2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b284:	b2db      	uxtb	r3, r3
 800b286:	2b03      	cmp	r3, #3
 800b288:	d113      	bne.n	800b2b2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b28a:	7dba      	ldrb	r2, [r7, #22]
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	32ae      	adds	r2, #174	@ 0xae
 800b290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b294:	691b      	ldr	r3, [r3, #16]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d00b      	beq.n	800b2b2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b29a:	7dba      	ldrb	r2, [r7, #22]
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2a2:	7dba      	ldrb	r2, [r7, #22]
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	32ae      	adds	r2, #174	@ 0xae
 800b2a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2ac:	691b      	ldr	r3, [r3, #16]
 800b2ae:	68f8      	ldr	r0, [r7, #12]
 800b2b0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	f001 f95a 	bl	800c56c <USBD_CtlSendStatus>
 800b2b8:	e032      	b.n	800b320 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2ba:	7afb      	ldrb	r3, [r7, #11]
 800b2bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2c0:	b2db      	uxtb	r3, r3
 800b2c2:	4619      	mov	r1, r3
 800b2c4:	68f8      	ldr	r0, [r7, #12]
 800b2c6:	f000 fa37 	bl	800b738 <USBD_CoreFindEP>
 800b2ca:	4603      	mov	r3, r0
 800b2cc:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ce:	7dbb      	ldrb	r3, [r7, #22]
 800b2d0:	2bff      	cmp	r3, #255	@ 0xff
 800b2d2:	d025      	beq.n	800b320 <USBD_LL_DataOutStage+0x15c>
 800b2d4:	7dbb      	ldrb	r3, [r7, #22]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d122      	bne.n	800b320 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2e0:	b2db      	uxtb	r3, r3
 800b2e2:	2b03      	cmp	r3, #3
 800b2e4:	d117      	bne.n	800b316 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b2e6:	7dba      	ldrb	r2, [r7, #22]
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	32ae      	adds	r2, #174	@ 0xae
 800b2ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00f      	beq.n	800b316 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b2f6:	7dba      	ldrb	r2, [r7, #22]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b2fe:	7dba      	ldrb	r2, [r7, #22]
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	32ae      	adds	r2, #174	@ 0xae
 800b304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b308:	699b      	ldr	r3, [r3, #24]
 800b30a:	7afa      	ldrb	r2, [r7, #11]
 800b30c:	4611      	mov	r1, r2
 800b30e:	68f8      	ldr	r0, [r7, #12]
 800b310:	4798      	blx	r3
 800b312:	4603      	mov	r3, r0
 800b314:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b316:	7dfb      	ldrb	r3, [r7, #23]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d001      	beq.n	800b320 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b31c:	7dfb      	ldrb	r3, [r7, #23]
 800b31e:	e000      	b.n	800b322 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b320:	2300      	movs	r3, #0
}
 800b322:	4618      	mov	r0, r3
 800b324:	3718      	adds	r7, #24
 800b326:	46bd      	mov	sp, r7
 800b328:	bd80      	pop	{r7, pc}

0800b32a <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b32a:	b580      	push	{r7, lr}
 800b32c:	b086      	sub	sp, #24
 800b32e:	af00      	add	r7, sp, #0
 800b330:	60f8      	str	r0, [r7, #12]
 800b332:	460b      	mov	r3, r1
 800b334:	607a      	str	r2, [r7, #4]
 800b336:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b338:	7afb      	ldrb	r3, [r7, #11]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d16f      	bne.n	800b41e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	3314      	adds	r3, #20
 800b342:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b34a:	2b02      	cmp	r3, #2
 800b34c:	d15a      	bne.n	800b404 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	689a      	ldr	r2, [r3, #8]
 800b352:	693b      	ldr	r3, [r7, #16]
 800b354:	68db      	ldr	r3, [r3, #12]
 800b356:	429a      	cmp	r2, r3
 800b358:	d914      	bls.n	800b384 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b35a:	693b      	ldr	r3, [r7, #16]
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	693b      	ldr	r3, [r7, #16]
 800b360:	68db      	ldr	r3, [r3, #12]
 800b362:	1ad2      	subs	r2, r2, r3
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b368:	693b      	ldr	r3, [r7, #16]
 800b36a:	689b      	ldr	r3, [r3, #8]
 800b36c:	461a      	mov	r2, r3
 800b36e:	6879      	ldr	r1, [r7, #4]
 800b370:	68f8      	ldr	r0, [r7, #12]
 800b372:	f001 f8bc 	bl	800c4ee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b376:	2300      	movs	r3, #0
 800b378:	2200      	movs	r2, #0
 800b37a:	2100      	movs	r1, #0
 800b37c:	68f8      	ldr	r0, [r7, #12]
 800b37e:	f003 ff33 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800b382:	e03f      	b.n	800b404 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	68da      	ldr	r2, [r3, #12]
 800b388:	693b      	ldr	r3, [r7, #16]
 800b38a:	689b      	ldr	r3, [r3, #8]
 800b38c:	429a      	cmp	r2, r3
 800b38e:	d11c      	bne.n	800b3ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b390:	693b      	ldr	r3, [r7, #16]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	693b      	ldr	r3, [r7, #16]
 800b396:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b398:	429a      	cmp	r2, r3
 800b39a:	d316      	bcc.n	800b3ca <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	685a      	ldr	r2, [r3, #4]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3a6:	429a      	cmp	r2, r3
 800b3a8:	d20f      	bcs.n	800b3ca <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3aa:	2200      	movs	r2, #0
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	68f8      	ldr	r0, [r7, #12]
 800b3b0:	f001 f89d 	bl	800c4ee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2200      	movs	r2, #0
 800b3b8:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3bc:	2300      	movs	r3, #0
 800b3be:	2200      	movs	r2, #0
 800b3c0:	2100      	movs	r1, #0
 800b3c2:	68f8      	ldr	r0, [r7, #12]
 800b3c4:	f003 ff10 	bl	800f1e8 <USBD_LL_PrepareReceive>
 800b3c8:	e01c      	b.n	800b404 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3ca:	68fb      	ldr	r3, [r7, #12]
 800b3cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3d0:	b2db      	uxtb	r3, r3
 800b3d2:	2b03      	cmp	r3, #3
 800b3d4:	d10f      	bne.n	800b3f6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3dc:	68db      	ldr	r3, [r3, #12]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d009      	beq.n	800b3f6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f0:	68db      	ldr	r3, [r3, #12]
 800b3f2:	68f8      	ldr	r0, [r7, #12]
 800b3f4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b3f6:	2180      	movs	r1, #128	@ 0x80
 800b3f8:	68f8      	ldr	r0, [r7, #12]
 800b3fa:	f003 fe4b 	bl	800f094 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b3fe:	68f8      	ldr	r0, [r7, #12]
 800b400:	f001 f8c7 	bl	800c592 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d03a      	beq.n	800b484 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	f7ff fe42 	bl	800b098 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b414:	68fb      	ldr	r3, [r7, #12]
 800b416:	2200      	movs	r2, #0
 800b418:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b41c:	e032      	b.n	800b484 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b41e:	7afb      	ldrb	r3, [r7, #11]
 800b420:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b424:	b2db      	uxtb	r3, r3
 800b426:	4619      	mov	r1, r3
 800b428:	68f8      	ldr	r0, [r7, #12]
 800b42a:	f000 f985 	bl	800b738 <USBD_CoreFindEP>
 800b42e:	4603      	mov	r3, r0
 800b430:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b432:	7dfb      	ldrb	r3, [r7, #23]
 800b434:	2bff      	cmp	r3, #255	@ 0xff
 800b436:	d025      	beq.n	800b484 <USBD_LL_DataInStage+0x15a>
 800b438:	7dfb      	ldrb	r3, [r7, #23]
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	d122      	bne.n	800b484 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b444:	b2db      	uxtb	r3, r3
 800b446:	2b03      	cmp	r3, #3
 800b448:	d11c      	bne.n	800b484 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b44a:	7dfa      	ldrb	r2, [r7, #23]
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	32ae      	adds	r2, #174	@ 0xae
 800b450:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b454:	695b      	ldr	r3, [r3, #20]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d014      	beq.n	800b484 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b45a:	7dfa      	ldrb	r2, [r7, #23]
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b462:	7dfa      	ldrb	r2, [r7, #23]
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	32ae      	adds	r2, #174	@ 0xae
 800b468:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46c:	695b      	ldr	r3, [r3, #20]
 800b46e:	7afa      	ldrb	r2, [r7, #11]
 800b470:	4611      	mov	r1, r2
 800b472:	68f8      	ldr	r0, [r7, #12]
 800b474:	4798      	blx	r3
 800b476:	4603      	mov	r3, r0
 800b478:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b47a:	7dbb      	ldrb	r3, [r7, #22]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d001      	beq.n	800b484 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b480:	7dbb      	ldrb	r3, [r7, #22]
 800b482:	e000      	b.n	800b486 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b484:	2300      	movs	r3, #0
}
 800b486:	4618      	mov	r0, r3
 800b488:	3718      	adds	r7, #24
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2201      	movs	r2, #1
 800b49e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	2200      	movs	r2, #0
 800b4b4:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2200      	movs	r2, #0
 800b4bc:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4c6:	2b00      	cmp	r3, #0
 800b4c8:	d014      	beq.n	800b4f4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	2b00      	cmp	r3, #0
 800b4d4:	d00e      	beq.n	800b4f4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4dc:	685b      	ldr	r3, [r3, #4]
 800b4de:	687a      	ldr	r2, [r7, #4]
 800b4e0:	6852      	ldr	r2, [r2, #4]
 800b4e2:	b2d2      	uxtb	r2, r2
 800b4e4:	4611      	mov	r1, r2
 800b4e6:	6878      	ldr	r0, [r7, #4]
 800b4e8:	4798      	blx	r3
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b4f4:	2340      	movs	r3, #64	@ 0x40
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	2100      	movs	r1, #0
 800b4fa:	6878      	ldr	r0, [r7, #4]
 800b4fc:	f003 fd85 	bl	800f00a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2201      	movs	r2, #1
 800b504:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	2240      	movs	r2, #64	@ 0x40
 800b50c:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b510:	2340      	movs	r3, #64	@ 0x40
 800b512:	2200      	movs	r2, #0
 800b514:	2180      	movs	r1, #128	@ 0x80
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f003 fd77 	bl	800f00a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	2240      	movs	r2, #64	@ 0x40
 800b526:	621a      	str	r2, [r3, #32]

  return ret;
 800b528:	7bfb      	ldrb	r3, [r7, #15]
}
 800b52a:	4618      	mov	r0, r3
 800b52c:	3710      	adds	r7, #16
 800b52e:	46bd      	mov	sp, r7
 800b530:	bd80      	pop	{r7, pc}

0800b532 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b532:	b480      	push	{r7}
 800b534:	b083      	sub	sp, #12
 800b536:	af00      	add	r7, sp, #0
 800b538:	6078      	str	r0, [r7, #4]
 800b53a:	460b      	mov	r3, r1
 800b53c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	78fa      	ldrb	r2, [r7, #3]
 800b542:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b544:	2300      	movs	r3, #0
}
 800b546:	4618      	mov	r0, r3
 800b548:	370c      	adds	r7, #12
 800b54a:	46bd      	mov	sp, r7
 800b54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b550:	4770      	bx	lr

0800b552 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b552:	b480      	push	{r7}
 800b554:	b083      	sub	sp, #12
 800b556:	af00      	add	r7, sp, #0
 800b558:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b560:	b2db      	uxtb	r3, r3
 800b562:	2b04      	cmp	r3, #4
 800b564:	d006      	beq.n	800b574 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b56c:	b2da      	uxtb	r2, r3
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2204      	movs	r2, #4
 800b578:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b57c:	2300      	movs	r3, #0
}
 800b57e:	4618      	mov	r0, r3
 800b580:	370c      	adds	r7, #12
 800b582:	46bd      	mov	sp, r7
 800b584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b588:	4770      	bx	lr

0800b58a <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b58a:	b480      	push	{r7}
 800b58c:	b083      	sub	sp, #12
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b04      	cmp	r3, #4
 800b59c:	d106      	bne.n	800b5ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5a4:	b2da      	uxtb	r2, r3
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5ac:	2300      	movs	r3, #0
}
 800b5ae:	4618      	mov	r0, r3
 800b5b0:	370c      	adds	r7, #12
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b8:	4770      	bx	lr

0800b5ba <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5ba:	b580      	push	{r7, lr}
 800b5bc:	b082      	sub	sp, #8
 800b5be:	af00      	add	r7, sp, #0
 800b5c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5c8:	b2db      	uxtb	r3, r3
 800b5ca:	2b03      	cmp	r3, #3
 800b5cc:	d110      	bne.n	800b5f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d00b      	beq.n	800b5f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5de:	69db      	ldr	r3, [r3, #28]
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d005      	beq.n	800b5f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5ea:	69db      	ldr	r3, [r3, #28]
 800b5ec:	6878      	ldr	r0, [r7, #4]
 800b5ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b5f0:	2300      	movs	r3, #0
}
 800b5f2:	4618      	mov	r0, r3
 800b5f4:	3708      	adds	r7, #8
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}

0800b5fa <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b5fa:	b580      	push	{r7, lr}
 800b5fc:	b082      	sub	sp, #8
 800b5fe:	af00      	add	r7, sp, #0
 800b600:	6078      	str	r0, [r7, #4]
 800b602:	460b      	mov	r3, r1
 800b604:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	32ae      	adds	r2, #174	@ 0xae
 800b610:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d101      	bne.n	800b61c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b618:	2303      	movs	r3, #3
 800b61a:	e01c      	b.n	800b656 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b61c:	687b      	ldr	r3, [r7, #4]
 800b61e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b622:	b2db      	uxtb	r3, r3
 800b624:	2b03      	cmp	r3, #3
 800b626:	d115      	bne.n	800b654 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	32ae      	adds	r2, #174	@ 0xae
 800b632:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b636:	6a1b      	ldr	r3, [r3, #32]
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d00b      	beq.n	800b654 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	32ae      	adds	r2, #174	@ 0xae
 800b646:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b64a:	6a1b      	ldr	r3, [r3, #32]
 800b64c:	78fa      	ldrb	r2, [r7, #3]
 800b64e:	4611      	mov	r1, r2
 800b650:	6878      	ldr	r0, [r7, #4]
 800b652:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b654:	2300      	movs	r3, #0
}
 800b656:	4618      	mov	r0, r3
 800b658:	3708      	adds	r7, #8
 800b65a:	46bd      	mov	sp, r7
 800b65c:	bd80      	pop	{r7, pc}

0800b65e <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b65e:	b580      	push	{r7, lr}
 800b660:	b082      	sub	sp, #8
 800b662:	af00      	add	r7, sp, #0
 800b664:	6078      	str	r0, [r7, #4]
 800b666:	460b      	mov	r3, r1
 800b668:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	32ae      	adds	r2, #174	@ 0xae
 800b674:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b678:	2b00      	cmp	r3, #0
 800b67a:	d101      	bne.n	800b680 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b67c:	2303      	movs	r3, #3
 800b67e:	e01c      	b.n	800b6ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b686:	b2db      	uxtb	r3, r3
 800b688:	2b03      	cmp	r3, #3
 800b68a:	d115      	bne.n	800b6b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	32ae      	adds	r2, #174	@ 0xae
 800b696:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b69a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d00b      	beq.n	800b6b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	32ae      	adds	r2, #174	@ 0xae
 800b6aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b0:	78fa      	ldrb	r2, [r7, #3]
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6b8:	2300      	movs	r3, #0
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	3708      	adds	r7, #8
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}

0800b6c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6c2:	b480      	push	{r7}
 800b6c4:	b083      	sub	sp, #12
 800b6c6:	af00      	add	r7, sp, #0
 800b6c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6ca:	2300      	movs	r3, #0
}
 800b6cc:	4618      	mov	r0, r3
 800b6ce:	370c      	adds	r7, #12
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6d6:	4770      	bx	lr

0800b6d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b084      	sub	sp, #16
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d00e      	beq.n	800b714 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	687a      	ldr	r2, [r7, #4]
 800b700:	6852      	ldr	r2, [r2, #4]
 800b702:	b2d2      	uxtb	r2, r2
 800b704:	4611      	mov	r1, r2
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	4798      	blx	r3
 800b70a:	4603      	mov	r3, r0
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d001      	beq.n	800b714 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b710:	2303      	movs	r3, #3
 800b712:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b714:	7bfb      	ldrb	r3, [r7, #15]
}
 800b716:	4618      	mov	r0, r3
 800b718:	3710      	adds	r7, #16
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
 800b726:	460b      	mov	r3, r1
 800b728:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b72a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b738:	b480      	push	{r7}
 800b73a:	b083      	sub	sp, #12
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	6078      	str	r0, [r7, #4]
 800b740:	460b      	mov	r3, r1
 800b742:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b744:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b746:	4618      	mov	r0, r3
 800b748:	370c      	adds	r7, #12
 800b74a:	46bd      	mov	sp, r7
 800b74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b750:	4770      	bx	lr

0800b752 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b752:	b580      	push	{r7, lr}
 800b754:	b086      	sub	sp, #24
 800b756:	af00      	add	r7, sp, #0
 800b758:	6078      	str	r0, [r7, #4]
 800b75a:	460b      	mov	r3, r1
 800b75c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b766:	2300      	movs	r3, #0
 800b768:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	885b      	ldrh	r3, [r3, #2]
 800b76e:	b29b      	uxth	r3, r3
 800b770:	68fa      	ldr	r2, [r7, #12]
 800b772:	7812      	ldrb	r2, [r2, #0]
 800b774:	4293      	cmp	r3, r2
 800b776:	d91f      	bls.n	800b7b8 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	781b      	ldrb	r3, [r3, #0]
 800b77c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b77e:	e013      	b.n	800b7a8 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b780:	f107 030a 	add.w	r3, r7, #10
 800b784:	4619      	mov	r1, r3
 800b786:	6978      	ldr	r0, [r7, #20]
 800b788:	f000 f81b 	bl	800b7c2 <USBD_GetNextDesc>
 800b78c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	785b      	ldrb	r3, [r3, #1]
 800b792:	2b05      	cmp	r3, #5
 800b794:	d108      	bne.n	800b7a8 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b796:	697b      	ldr	r3, [r7, #20]
 800b798:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b79a:	693b      	ldr	r3, [r7, #16]
 800b79c:	789b      	ldrb	r3, [r3, #2]
 800b79e:	78fa      	ldrb	r2, [r7, #3]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d008      	beq.n	800b7b6 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7a4:	2300      	movs	r3, #0
 800b7a6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7a8:	68fb      	ldr	r3, [r7, #12]
 800b7aa:	885b      	ldrh	r3, [r3, #2]
 800b7ac:	b29a      	uxth	r2, r3
 800b7ae:	897b      	ldrh	r3, [r7, #10]
 800b7b0:	429a      	cmp	r2, r3
 800b7b2:	d8e5      	bhi.n	800b780 <USBD_GetEpDesc+0x2e>
 800b7b4:	e000      	b.n	800b7b8 <USBD_GetEpDesc+0x66>
          break;
 800b7b6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7b8:	693b      	ldr	r3, [r7, #16]
}
 800b7ba:	4618      	mov	r0, r3
 800b7bc:	3718      	adds	r7, #24
 800b7be:	46bd      	mov	sp, r7
 800b7c0:	bd80      	pop	{r7, pc}

0800b7c2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7c2:	b480      	push	{r7}
 800b7c4:	b085      	sub	sp, #20
 800b7c6:	af00      	add	r7, sp, #0
 800b7c8:	6078      	str	r0, [r7, #4]
 800b7ca:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7d0:	683b      	ldr	r3, [r7, #0]
 800b7d2:	881b      	ldrh	r3, [r3, #0]
 800b7d4:	68fa      	ldr	r2, [r7, #12]
 800b7d6:	7812      	ldrb	r2, [r2, #0]
 800b7d8:	4413      	add	r3, r2
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7e0:	68fb      	ldr	r3, [r7, #12]
 800b7e2:	781b      	ldrb	r3, [r3, #0]
 800b7e4:	461a      	mov	r2, r3
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	4413      	add	r3, r2
 800b7ea:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b7ec:	68fb      	ldr	r3, [r7, #12]
}
 800b7ee:	4618      	mov	r0, r3
 800b7f0:	3714      	adds	r7, #20
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f8:	4770      	bx	lr

0800b7fa <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b7fa:	b480      	push	{r7}
 800b7fc:	b087      	sub	sp, #28
 800b7fe:	af00      	add	r7, sp, #0
 800b800:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b806:	697b      	ldr	r3, [r7, #20]
 800b808:	781b      	ldrb	r3, [r3, #0]
 800b80a:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b80c:	697b      	ldr	r3, [r7, #20]
 800b80e:	3301      	adds	r3, #1
 800b810:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b812:	697b      	ldr	r3, [r7, #20]
 800b814:	781b      	ldrb	r3, [r3, #0]
 800b816:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b818:	8a3b      	ldrh	r3, [r7, #16]
 800b81a:	021b      	lsls	r3, r3, #8
 800b81c:	b21a      	sxth	r2, r3
 800b81e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b822:	4313      	orrs	r3, r2
 800b824:	b21b      	sxth	r3, r3
 800b826:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b828:	89fb      	ldrh	r3, [r7, #14]
}
 800b82a:	4618      	mov	r0, r3
 800b82c:	371c      	adds	r7, #28
 800b82e:	46bd      	mov	sp, r7
 800b830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b834:	4770      	bx	lr
	...

0800b838 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	6078      	str	r0, [r7, #4]
 800b840:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b842:	2300      	movs	r3, #0
 800b844:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	781b      	ldrb	r3, [r3, #0]
 800b84a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b84e:	2b40      	cmp	r3, #64	@ 0x40
 800b850:	d005      	beq.n	800b85e <USBD_StdDevReq+0x26>
 800b852:	2b40      	cmp	r3, #64	@ 0x40
 800b854:	d857      	bhi.n	800b906 <USBD_StdDevReq+0xce>
 800b856:	2b00      	cmp	r3, #0
 800b858:	d00f      	beq.n	800b87a <USBD_StdDevReq+0x42>
 800b85a:	2b20      	cmp	r3, #32
 800b85c:	d153      	bne.n	800b906 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	32ae      	adds	r2, #174	@ 0xae
 800b868:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b86c:	689b      	ldr	r3, [r3, #8]
 800b86e:	6839      	ldr	r1, [r7, #0]
 800b870:	6878      	ldr	r0, [r7, #4]
 800b872:	4798      	blx	r3
 800b874:	4603      	mov	r3, r0
 800b876:	73fb      	strb	r3, [r7, #15]
      break;
 800b878:	e04a      	b.n	800b910 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b87a:	683b      	ldr	r3, [r7, #0]
 800b87c:	785b      	ldrb	r3, [r3, #1]
 800b87e:	2b09      	cmp	r3, #9
 800b880:	d83b      	bhi.n	800b8fa <USBD_StdDevReq+0xc2>
 800b882:	a201      	add	r2, pc, #4	@ (adr r2, 800b888 <USBD_StdDevReq+0x50>)
 800b884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b888:	0800b8dd 	.word	0x0800b8dd
 800b88c:	0800b8f1 	.word	0x0800b8f1
 800b890:	0800b8fb 	.word	0x0800b8fb
 800b894:	0800b8e7 	.word	0x0800b8e7
 800b898:	0800b8fb 	.word	0x0800b8fb
 800b89c:	0800b8bb 	.word	0x0800b8bb
 800b8a0:	0800b8b1 	.word	0x0800b8b1
 800b8a4:	0800b8fb 	.word	0x0800b8fb
 800b8a8:	0800b8d3 	.word	0x0800b8d3
 800b8ac:	0800b8c5 	.word	0x0800b8c5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8b0:	6839      	ldr	r1, [r7, #0]
 800b8b2:	6878      	ldr	r0, [r7, #4]
 800b8b4:	f000 fa3c 	bl	800bd30 <USBD_GetDescriptor>
          break;
 800b8b8:	e024      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8ba:	6839      	ldr	r1, [r7, #0]
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fba1 	bl	800c004 <USBD_SetAddress>
          break;
 800b8c2:	e01f      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 fbe0 	bl	800c08c <USBD_SetConfig>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	73fb      	strb	r3, [r7, #15]
          break;
 800b8d0:	e018      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8d2:	6839      	ldr	r1, [r7, #0]
 800b8d4:	6878      	ldr	r0, [r7, #4]
 800b8d6:	f000 fc83 	bl	800c1e0 <USBD_GetConfig>
          break;
 800b8da:	e013      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8dc:	6839      	ldr	r1, [r7, #0]
 800b8de:	6878      	ldr	r0, [r7, #4]
 800b8e0:	f000 fcb4 	bl	800c24c <USBD_GetStatus>
          break;
 800b8e4:	e00e      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b8e6:	6839      	ldr	r1, [r7, #0]
 800b8e8:	6878      	ldr	r0, [r7, #4]
 800b8ea:	f000 fce3 	bl	800c2b4 <USBD_SetFeature>
          break;
 800b8ee:	e009      	b.n	800b904 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b8f0:	6839      	ldr	r1, [r7, #0]
 800b8f2:	6878      	ldr	r0, [r7, #4]
 800b8f4:	f000 fd07 	bl	800c306 <USBD_ClrFeature>
          break;
 800b8f8:	e004      	b.n	800b904 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b8fa:	6839      	ldr	r1, [r7, #0]
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f000 fd5e 	bl	800c3be <USBD_CtlError>
          break;
 800b902:	bf00      	nop
      }
      break;
 800b904:	e004      	b.n	800b910 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b906:	6839      	ldr	r1, [r7, #0]
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f000 fd58 	bl	800c3be <USBD_CtlError>
      break;
 800b90e:	bf00      	nop
  }

  return ret;
 800b910:	7bfb      	ldrb	r3, [r7, #15]
}
 800b912:	4618      	mov	r0, r3
 800b914:	3710      	adds	r7, #16
 800b916:	46bd      	mov	sp, r7
 800b918:	bd80      	pop	{r7, pc}
 800b91a:	bf00      	nop

0800b91c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b91c:	b580      	push	{r7, lr}
 800b91e:	b084      	sub	sp, #16
 800b920:	af00      	add	r7, sp, #0
 800b922:	6078      	str	r0, [r7, #4]
 800b924:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	781b      	ldrb	r3, [r3, #0]
 800b92e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b932:	2b40      	cmp	r3, #64	@ 0x40
 800b934:	d005      	beq.n	800b942 <USBD_StdItfReq+0x26>
 800b936:	2b40      	cmp	r3, #64	@ 0x40
 800b938:	d852      	bhi.n	800b9e0 <USBD_StdItfReq+0xc4>
 800b93a:	2b00      	cmp	r3, #0
 800b93c:	d001      	beq.n	800b942 <USBD_StdItfReq+0x26>
 800b93e:	2b20      	cmp	r3, #32
 800b940:	d14e      	bne.n	800b9e0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	3b01      	subs	r3, #1
 800b94c:	2b02      	cmp	r3, #2
 800b94e:	d840      	bhi.n	800b9d2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b950:	683b      	ldr	r3, [r7, #0]
 800b952:	889b      	ldrh	r3, [r3, #4]
 800b954:	b2db      	uxtb	r3, r3
 800b956:	2b01      	cmp	r3, #1
 800b958:	d836      	bhi.n	800b9c8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b95a:	683b      	ldr	r3, [r7, #0]
 800b95c:	889b      	ldrh	r3, [r3, #4]
 800b95e:	b2db      	uxtb	r3, r3
 800b960:	4619      	mov	r1, r3
 800b962:	6878      	ldr	r0, [r7, #4]
 800b964:	f7ff fedb 	bl	800b71e <USBD_CoreFindIF>
 800b968:	4603      	mov	r3, r0
 800b96a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b96c:	7bbb      	ldrb	r3, [r7, #14]
 800b96e:	2bff      	cmp	r3, #255	@ 0xff
 800b970:	d01d      	beq.n	800b9ae <USBD_StdItfReq+0x92>
 800b972:	7bbb      	ldrb	r3, [r7, #14]
 800b974:	2b00      	cmp	r3, #0
 800b976:	d11a      	bne.n	800b9ae <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b978:	7bba      	ldrb	r2, [r7, #14]
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	32ae      	adds	r2, #174	@ 0xae
 800b97e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b982:	689b      	ldr	r3, [r3, #8]
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00f      	beq.n	800b9a8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b988:	7bba      	ldrb	r2, [r7, #14]
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b990:	7bba      	ldrb	r2, [r7, #14]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	32ae      	adds	r2, #174	@ 0xae
 800b996:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99a:	689b      	ldr	r3, [r3, #8]
 800b99c:	6839      	ldr	r1, [r7, #0]
 800b99e:	6878      	ldr	r0, [r7, #4]
 800b9a0:	4798      	blx	r3
 800b9a2:	4603      	mov	r3, r0
 800b9a4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9a6:	e004      	b.n	800b9b2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9a8:	2303      	movs	r3, #3
 800b9aa:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9ac:	e001      	b.n	800b9b2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9ae:	2303      	movs	r3, #3
 800b9b0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9b2:	683b      	ldr	r3, [r7, #0]
 800b9b4:	88db      	ldrh	r3, [r3, #6]
 800b9b6:	2b00      	cmp	r3, #0
 800b9b8:	d110      	bne.n	800b9dc <USBD_StdItfReq+0xc0>
 800b9ba:	7bfb      	ldrb	r3, [r7, #15]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10d      	bne.n	800b9dc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 fdd3 	bl	800c56c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9c6:	e009      	b.n	800b9dc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9c8:	6839      	ldr	r1, [r7, #0]
 800b9ca:	6878      	ldr	r0, [r7, #4]
 800b9cc:	f000 fcf7 	bl	800c3be <USBD_CtlError>
          break;
 800b9d0:	e004      	b.n	800b9dc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9d2:	6839      	ldr	r1, [r7, #0]
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fcf2 	bl	800c3be <USBD_CtlError>
          break;
 800b9da:	e000      	b.n	800b9de <USBD_StdItfReq+0xc2>
          break;
 800b9dc:	bf00      	nop
      }
      break;
 800b9de:	e004      	b.n	800b9ea <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9e0:	6839      	ldr	r1, [r7, #0]
 800b9e2:	6878      	ldr	r0, [r7, #4]
 800b9e4:	f000 fceb 	bl	800c3be <USBD_CtlError>
      break;
 800b9e8:	bf00      	nop
  }

  return ret;
 800b9ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}

0800b9f4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f4:	b580      	push	{r7, lr}
 800b9f6:	b084      	sub	sp, #16
 800b9f8:	af00      	add	r7, sp, #0
 800b9fa:	6078      	str	r0, [r7, #4]
 800b9fc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b9fe:	2300      	movs	r3, #0
 800ba00:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	889b      	ldrh	r3, [r3, #4]
 800ba06:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	781b      	ldrb	r3, [r3, #0]
 800ba0c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba10:	2b40      	cmp	r3, #64	@ 0x40
 800ba12:	d007      	beq.n	800ba24 <USBD_StdEPReq+0x30>
 800ba14:	2b40      	cmp	r3, #64	@ 0x40
 800ba16:	f200 817f 	bhi.w	800bd18 <USBD_StdEPReq+0x324>
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d02a      	beq.n	800ba74 <USBD_StdEPReq+0x80>
 800ba1e:	2b20      	cmp	r3, #32
 800ba20:	f040 817a 	bne.w	800bd18 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba24:	7bbb      	ldrb	r3, [r7, #14]
 800ba26:	4619      	mov	r1, r3
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f7ff fe85 	bl	800b738 <USBD_CoreFindEP>
 800ba2e:	4603      	mov	r3, r0
 800ba30:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba32:	7b7b      	ldrb	r3, [r7, #13]
 800ba34:	2bff      	cmp	r3, #255	@ 0xff
 800ba36:	f000 8174 	beq.w	800bd22 <USBD_StdEPReq+0x32e>
 800ba3a:	7b7b      	ldrb	r3, [r7, #13]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	f040 8170 	bne.w	800bd22 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba42:	7b7a      	ldrb	r2, [r7, #13]
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba4a:	7b7a      	ldrb	r2, [r7, #13]
 800ba4c:	687b      	ldr	r3, [r7, #4]
 800ba4e:	32ae      	adds	r2, #174	@ 0xae
 800ba50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba54:	689b      	ldr	r3, [r3, #8]
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	f000 8163 	beq.w	800bd22 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba5c:	7b7a      	ldrb	r2, [r7, #13]
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	32ae      	adds	r2, #174	@ 0xae
 800ba62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba66:	689b      	ldr	r3, [r3, #8]
 800ba68:	6839      	ldr	r1, [r7, #0]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	4798      	blx	r3
 800ba6e:	4603      	mov	r3, r0
 800ba70:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba72:	e156      	b.n	800bd22 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba74:	683b      	ldr	r3, [r7, #0]
 800ba76:	785b      	ldrb	r3, [r3, #1]
 800ba78:	2b03      	cmp	r3, #3
 800ba7a:	d008      	beq.n	800ba8e <USBD_StdEPReq+0x9a>
 800ba7c:	2b03      	cmp	r3, #3
 800ba7e:	f300 8145 	bgt.w	800bd0c <USBD_StdEPReq+0x318>
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	f000 809b 	beq.w	800bbbe <USBD_StdEPReq+0x1ca>
 800ba88:	2b01      	cmp	r3, #1
 800ba8a:	d03c      	beq.n	800bb06 <USBD_StdEPReq+0x112>
 800ba8c:	e13e      	b.n	800bd0c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b02      	cmp	r3, #2
 800ba98:	d002      	beq.n	800baa0 <USBD_StdEPReq+0xac>
 800ba9a:	2b03      	cmp	r3, #3
 800ba9c:	d016      	beq.n	800bacc <USBD_StdEPReq+0xd8>
 800ba9e:	e02c      	b.n	800bafa <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800baa0:	7bbb      	ldrb	r3, [r7, #14]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00d      	beq.n	800bac2 <USBD_StdEPReq+0xce>
 800baa6:	7bbb      	ldrb	r3, [r7, #14]
 800baa8:	2b80      	cmp	r3, #128	@ 0x80
 800baaa:	d00a      	beq.n	800bac2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800baac:	7bbb      	ldrb	r3, [r7, #14]
 800baae:	4619      	mov	r1, r3
 800bab0:	6878      	ldr	r0, [r7, #4]
 800bab2:	f003 faef 	bl	800f094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bab6:	2180      	movs	r1, #128	@ 0x80
 800bab8:	6878      	ldr	r0, [r7, #4]
 800baba:	f003 faeb 	bl	800f094 <USBD_LL_StallEP>
 800babe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bac0:	e020      	b.n	800bb04 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bac2:	6839      	ldr	r1, [r7, #0]
 800bac4:	6878      	ldr	r0, [r7, #4]
 800bac6:	f000 fc7a 	bl	800c3be <USBD_CtlError>
              break;
 800baca:	e01b      	b.n	800bb04 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	885b      	ldrh	r3, [r3, #2]
 800bad0:	2b00      	cmp	r3, #0
 800bad2:	d10e      	bne.n	800baf2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bad4:	7bbb      	ldrb	r3, [r7, #14]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d00b      	beq.n	800baf2 <USBD_StdEPReq+0xfe>
 800bada:	7bbb      	ldrb	r3, [r7, #14]
 800badc:	2b80      	cmp	r3, #128	@ 0x80
 800bade:	d008      	beq.n	800baf2 <USBD_StdEPReq+0xfe>
 800bae0:	683b      	ldr	r3, [r7, #0]
 800bae2:	88db      	ldrh	r3, [r3, #6]
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d104      	bne.n	800baf2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bae8:	7bbb      	ldrb	r3, [r7, #14]
 800baea:	4619      	mov	r1, r3
 800baec:	6878      	ldr	r0, [r7, #4]
 800baee:	f003 fad1 	bl	800f094 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800baf2:	6878      	ldr	r0, [r7, #4]
 800baf4:	f000 fd3a 	bl	800c56c <USBD_CtlSendStatus>

              break;
 800baf8:	e004      	b.n	800bb04 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bafa:	6839      	ldr	r1, [r7, #0]
 800bafc:	6878      	ldr	r0, [r7, #4]
 800bafe:	f000 fc5e 	bl	800c3be <USBD_CtlError>
              break;
 800bb02:	bf00      	nop
          }
          break;
 800bb04:	e107      	b.n	800bd16 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb0c:	b2db      	uxtb	r3, r3
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d002      	beq.n	800bb18 <USBD_StdEPReq+0x124>
 800bb12:	2b03      	cmp	r3, #3
 800bb14:	d016      	beq.n	800bb44 <USBD_StdEPReq+0x150>
 800bb16:	e04b      	b.n	800bbb0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb18:	7bbb      	ldrb	r3, [r7, #14]
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d00d      	beq.n	800bb3a <USBD_StdEPReq+0x146>
 800bb1e:	7bbb      	ldrb	r3, [r7, #14]
 800bb20:	2b80      	cmp	r3, #128	@ 0x80
 800bb22:	d00a      	beq.n	800bb3a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb24:	7bbb      	ldrb	r3, [r7, #14]
 800bb26:	4619      	mov	r1, r3
 800bb28:	6878      	ldr	r0, [r7, #4]
 800bb2a:	f003 fab3 	bl	800f094 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb2e:	2180      	movs	r1, #128	@ 0x80
 800bb30:	6878      	ldr	r0, [r7, #4]
 800bb32:	f003 faaf 	bl	800f094 <USBD_LL_StallEP>
 800bb36:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb38:	e040      	b.n	800bbbc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb3a:	6839      	ldr	r1, [r7, #0]
 800bb3c:	6878      	ldr	r0, [r7, #4]
 800bb3e:	f000 fc3e 	bl	800c3be <USBD_CtlError>
              break;
 800bb42:	e03b      	b.n	800bbbc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	885b      	ldrh	r3, [r3, #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d136      	bne.n	800bbba <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb4c:	7bbb      	ldrb	r3, [r7, #14]
 800bb4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	d004      	beq.n	800bb60 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb56:	7bbb      	ldrb	r3, [r7, #14]
 800bb58:	4619      	mov	r1, r3
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f003 fab9 	bl	800f0d2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb60:	6878      	ldr	r0, [r7, #4]
 800bb62:	f000 fd03 	bl	800c56c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb66:	7bbb      	ldrb	r3, [r7, #14]
 800bb68:	4619      	mov	r1, r3
 800bb6a:	6878      	ldr	r0, [r7, #4]
 800bb6c:	f7ff fde4 	bl	800b738 <USBD_CoreFindEP>
 800bb70:	4603      	mov	r3, r0
 800bb72:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb74:	7b7b      	ldrb	r3, [r7, #13]
 800bb76:	2bff      	cmp	r3, #255	@ 0xff
 800bb78:	d01f      	beq.n	800bbba <USBD_StdEPReq+0x1c6>
 800bb7a:	7b7b      	ldrb	r3, [r7, #13]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d11c      	bne.n	800bbba <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb80:	7b7a      	ldrb	r2, [r7, #13]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bb88:	7b7a      	ldrb	r2, [r7, #13]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	32ae      	adds	r2, #174	@ 0xae
 800bb8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb92:	689b      	ldr	r3, [r3, #8]
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d010      	beq.n	800bbba <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bb98:	7b7a      	ldrb	r2, [r7, #13]
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	32ae      	adds	r2, #174	@ 0xae
 800bb9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bba2:	689b      	ldr	r3, [r3, #8]
 800bba4:	6839      	ldr	r1, [r7, #0]
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	4798      	blx	r3
 800bbaa:	4603      	mov	r3, r0
 800bbac:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbae:	e004      	b.n	800bbba <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbb0:	6839      	ldr	r1, [r7, #0]
 800bbb2:	6878      	ldr	r0, [r7, #4]
 800bbb4:	f000 fc03 	bl	800c3be <USBD_CtlError>
              break;
 800bbb8:	e000      	b.n	800bbbc <USBD_StdEPReq+0x1c8>
              break;
 800bbba:	bf00      	nop
          }
          break;
 800bbbc:	e0ab      	b.n	800bd16 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbc4:	b2db      	uxtb	r3, r3
 800bbc6:	2b02      	cmp	r3, #2
 800bbc8:	d002      	beq.n	800bbd0 <USBD_StdEPReq+0x1dc>
 800bbca:	2b03      	cmp	r3, #3
 800bbcc:	d032      	beq.n	800bc34 <USBD_StdEPReq+0x240>
 800bbce:	e097      	b.n	800bd00 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbd0:	7bbb      	ldrb	r3, [r7, #14]
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d007      	beq.n	800bbe6 <USBD_StdEPReq+0x1f2>
 800bbd6:	7bbb      	ldrb	r3, [r7, #14]
 800bbd8:	2b80      	cmp	r3, #128	@ 0x80
 800bbda:	d004      	beq.n	800bbe6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbdc:	6839      	ldr	r1, [r7, #0]
 800bbde:	6878      	ldr	r0, [r7, #4]
 800bbe0:	f000 fbed 	bl	800c3be <USBD_CtlError>
                break;
 800bbe4:	e091      	b.n	800bd0a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbe6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	da0b      	bge.n	800bc06 <USBD_StdEPReq+0x212>
 800bbee:	7bbb      	ldrb	r3, [r7, #14]
 800bbf0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbf4:	4613      	mov	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	4413      	add	r3, r2
 800bbfa:	009b      	lsls	r3, r3, #2
 800bbfc:	3310      	adds	r3, #16
 800bbfe:	687a      	ldr	r2, [r7, #4]
 800bc00:	4413      	add	r3, r2
 800bc02:	3304      	adds	r3, #4
 800bc04:	e00b      	b.n	800bc1e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc06:	7bbb      	ldrb	r3, [r7, #14]
 800bc08:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc0c:	4613      	mov	r3, r2
 800bc0e:	009b      	lsls	r3, r3, #2
 800bc10:	4413      	add	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc18:	687a      	ldr	r2, [r7, #4]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	3304      	adds	r3, #4
 800bc1e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc20:	68bb      	ldr	r3, [r7, #8]
 800bc22:	2200      	movs	r2, #0
 800bc24:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc26:	68bb      	ldr	r3, [r7, #8]
 800bc28:	2202      	movs	r2, #2
 800bc2a:	4619      	mov	r1, r3
 800bc2c:	6878      	ldr	r0, [r7, #4]
 800bc2e:	f000 fc43 	bl	800c4b8 <USBD_CtlSendData>
              break;
 800bc32:	e06a      	b.n	800bd0a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc34:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	da11      	bge.n	800bc60 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc3c:	7bbb      	ldrb	r3, [r7, #14]
 800bc3e:	f003 020f 	and.w	r2, r3, #15
 800bc42:	6879      	ldr	r1, [r7, #4]
 800bc44:	4613      	mov	r3, r2
 800bc46:	009b      	lsls	r3, r3, #2
 800bc48:	4413      	add	r3, r2
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	440b      	add	r3, r1
 800bc4e:	3324      	adds	r3, #36	@ 0x24
 800bc50:	881b      	ldrh	r3, [r3, #0]
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d117      	bne.n	800bc86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc56:	6839      	ldr	r1, [r7, #0]
 800bc58:	6878      	ldr	r0, [r7, #4]
 800bc5a:	f000 fbb0 	bl	800c3be <USBD_CtlError>
                  break;
 800bc5e:	e054      	b.n	800bd0a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc60:	7bbb      	ldrb	r3, [r7, #14]
 800bc62:	f003 020f 	and.w	r2, r3, #15
 800bc66:	6879      	ldr	r1, [r7, #4]
 800bc68:	4613      	mov	r3, r2
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	4413      	add	r3, r2
 800bc6e:	009b      	lsls	r3, r3, #2
 800bc70:	440b      	add	r3, r1
 800bc72:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc76:	881b      	ldrh	r3, [r3, #0]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d104      	bne.n	800bc86 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc7c:	6839      	ldr	r1, [r7, #0]
 800bc7e:	6878      	ldr	r0, [r7, #4]
 800bc80:	f000 fb9d 	bl	800c3be <USBD_CtlError>
                  break;
 800bc84:	e041      	b.n	800bd0a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc86:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	da0b      	bge.n	800bca6 <USBD_StdEPReq+0x2b2>
 800bc8e:	7bbb      	ldrb	r3, [r7, #14]
 800bc90:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc94:	4613      	mov	r3, r2
 800bc96:	009b      	lsls	r3, r3, #2
 800bc98:	4413      	add	r3, r2
 800bc9a:	009b      	lsls	r3, r3, #2
 800bc9c:	3310      	adds	r3, #16
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	4413      	add	r3, r2
 800bca2:	3304      	adds	r3, #4
 800bca4:	e00b      	b.n	800bcbe <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bca6:	7bbb      	ldrb	r3, [r7, #14]
 800bca8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcac:	4613      	mov	r3, r2
 800bcae:	009b      	lsls	r3, r3, #2
 800bcb0:	4413      	add	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcb8:	687a      	ldr	r2, [r7, #4]
 800bcba:	4413      	add	r3, r2
 800bcbc:	3304      	adds	r3, #4
 800bcbe:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcc0:	7bbb      	ldrb	r3, [r7, #14]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d002      	beq.n	800bccc <USBD_StdEPReq+0x2d8>
 800bcc6:	7bbb      	ldrb	r3, [r7, #14]
 800bcc8:	2b80      	cmp	r3, #128	@ 0x80
 800bcca:	d103      	bne.n	800bcd4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bccc:	68bb      	ldr	r3, [r7, #8]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	601a      	str	r2, [r3, #0]
 800bcd2:	e00e      	b.n	800bcf2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcd4:	7bbb      	ldrb	r3, [r7, #14]
 800bcd6:	4619      	mov	r1, r3
 800bcd8:	6878      	ldr	r0, [r7, #4]
 800bcda:	f003 fa19 	bl	800f110 <USBD_LL_IsStallEP>
 800bcde:	4603      	mov	r3, r0
 800bce0:	2b00      	cmp	r3, #0
 800bce2:	d003      	beq.n	800bcec <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bce4:	68bb      	ldr	r3, [r7, #8]
 800bce6:	2201      	movs	r2, #1
 800bce8:	601a      	str	r2, [r3, #0]
 800bcea:	e002      	b.n	800bcf2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bcec:	68bb      	ldr	r3, [r7, #8]
 800bcee:	2200      	movs	r2, #0
 800bcf0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bcf2:	68bb      	ldr	r3, [r7, #8]
 800bcf4:	2202      	movs	r2, #2
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	6878      	ldr	r0, [r7, #4]
 800bcfa:	f000 fbdd 	bl	800c4b8 <USBD_CtlSendData>
              break;
 800bcfe:	e004      	b.n	800bd0a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd00:	6839      	ldr	r1, [r7, #0]
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f000 fb5b 	bl	800c3be <USBD_CtlError>
              break;
 800bd08:	bf00      	nop
          }
          break;
 800bd0a:	e004      	b.n	800bd16 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd0c:	6839      	ldr	r1, [r7, #0]
 800bd0e:	6878      	ldr	r0, [r7, #4]
 800bd10:	f000 fb55 	bl	800c3be <USBD_CtlError>
          break;
 800bd14:	bf00      	nop
      }
      break;
 800bd16:	e005      	b.n	800bd24 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd18:	6839      	ldr	r1, [r7, #0]
 800bd1a:	6878      	ldr	r0, [r7, #4]
 800bd1c:	f000 fb4f 	bl	800c3be <USBD_CtlError>
      break;
 800bd20:	e000      	b.n	800bd24 <USBD_StdEPReq+0x330>
      break;
 800bd22:	bf00      	nop
  }

  return ret;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
	...

0800bd30 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd3e:	2300      	movs	r3, #0
 800bd40:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd42:	2300      	movs	r3, #0
 800bd44:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd46:	683b      	ldr	r3, [r7, #0]
 800bd48:	885b      	ldrh	r3, [r3, #2]
 800bd4a:	0a1b      	lsrs	r3, r3, #8
 800bd4c:	b29b      	uxth	r3, r3
 800bd4e:	3b01      	subs	r3, #1
 800bd50:	2b06      	cmp	r3, #6
 800bd52:	f200 8128 	bhi.w	800bfa6 <USBD_GetDescriptor+0x276>
 800bd56:	a201      	add	r2, pc, #4	@ (adr r2, 800bd5c <USBD_GetDescriptor+0x2c>)
 800bd58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd5c:	0800bd79 	.word	0x0800bd79
 800bd60:	0800bd91 	.word	0x0800bd91
 800bd64:	0800bdd1 	.word	0x0800bdd1
 800bd68:	0800bfa7 	.word	0x0800bfa7
 800bd6c:	0800bfa7 	.word	0x0800bfa7
 800bd70:	0800bf47 	.word	0x0800bf47
 800bd74:	0800bf73 	.word	0x0800bf73
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd78:	687b      	ldr	r3, [r7, #4]
 800bd7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	687a      	ldr	r2, [r7, #4]
 800bd82:	7c12      	ldrb	r2, [r2, #16]
 800bd84:	f107 0108 	add.w	r1, r7, #8
 800bd88:	4610      	mov	r0, r2
 800bd8a:	4798      	blx	r3
 800bd8c:	60f8      	str	r0, [r7, #12]
      break;
 800bd8e:	e112      	b.n	800bfb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	7c1b      	ldrb	r3, [r3, #16]
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10d      	bne.n	800bdb4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bd9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda0:	f107 0208 	add.w	r2, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3301      	adds	r3, #1
 800bdae:	2202      	movs	r2, #2
 800bdb0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdb2:	e100      	b.n	800bfb6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdbc:	f107 0208 	add.w	r2, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	2202      	movs	r2, #2
 800bdcc:	701a      	strb	r2, [r3, #0]
      break;
 800bdce:	e0f2      	b.n	800bfb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	885b      	ldrh	r3, [r3, #2]
 800bdd4:	b2db      	uxtb	r3, r3
 800bdd6:	2b05      	cmp	r3, #5
 800bdd8:	f200 80ac 	bhi.w	800bf34 <USBD_GetDescriptor+0x204>
 800bddc:	a201      	add	r2, pc, #4	@ (adr r2, 800bde4 <USBD_GetDescriptor+0xb4>)
 800bdde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bde2:	bf00      	nop
 800bde4:	0800bdfd 	.word	0x0800bdfd
 800bde8:	0800be31 	.word	0x0800be31
 800bdec:	0800be65 	.word	0x0800be65
 800bdf0:	0800be99 	.word	0x0800be99
 800bdf4:	0800becd 	.word	0x0800becd
 800bdf8:	0800bf01 	.word	0x0800bf01
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be02:	685b      	ldr	r3, [r3, #4]
 800be04:	2b00      	cmp	r3, #0
 800be06:	d00b      	beq.n	800be20 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	7c12      	ldrb	r2, [r2, #16]
 800be14:	f107 0108 	add.w	r1, r7, #8
 800be18:	4610      	mov	r0, r2
 800be1a:	4798      	blx	r3
 800be1c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be1e:	e091      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be20:	6839      	ldr	r1, [r7, #0]
 800be22:	6878      	ldr	r0, [r7, #4]
 800be24:	f000 facb 	bl	800c3be <USBD_CtlError>
            err++;
 800be28:	7afb      	ldrb	r3, [r7, #11]
 800be2a:	3301      	adds	r3, #1
 800be2c:	72fb      	strb	r3, [r7, #11]
          break;
 800be2e:	e089      	b.n	800bf44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00b      	beq.n	800be54 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be42:	689b      	ldr	r3, [r3, #8]
 800be44:	687a      	ldr	r2, [r7, #4]
 800be46:	7c12      	ldrb	r2, [r2, #16]
 800be48:	f107 0108 	add.w	r1, r7, #8
 800be4c:	4610      	mov	r0, r2
 800be4e:	4798      	blx	r3
 800be50:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be52:	e077      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be54:	6839      	ldr	r1, [r7, #0]
 800be56:	6878      	ldr	r0, [r7, #4]
 800be58:	f000 fab1 	bl	800c3be <USBD_CtlError>
            err++;
 800be5c:	7afb      	ldrb	r3, [r7, #11]
 800be5e:	3301      	adds	r3, #1
 800be60:	72fb      	strb	r3, [r7, #11]
          break;
 800be62:	e06f      	b.n	800bf44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be64:	687b      	ldr	r3, [r7, #4]
 800be66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be6a:	68db      	ldr	r3, [r3, #12]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d00b      	beq.n	800be88 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be70:	687b      	ldr	r3, [r7, #4]
 800be72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be76:	68db      	ldr	r3, [r3, #12]
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	7c12      	ldrb	r2, [r2, #16]
 800be7c:	f107 0108 	add.w	r1, r7, #8
 800be80:	4610      	mov	r0, r2
 800be82:	4798      	blx	r3
 800be84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be86:	e05d      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be88:	6839      	ldr	r1, [r7, #0]
 800be8a:	6878      	ldr	r0, [r7, #4]
 800be8c:	f000 fa97 	bl	800c3be <USBD_CtlError>
            err++;
 800be90:	7afb      	ldrb	r3, [r7, #11]
 800be92:	3301      	adds	r3, #1
 800be94:	72fb      	strb	r3, [r7, #11]
          break;
 800be96:	e055      	b.n	800bf44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	2b00      	cmp	r3, #0
 800bea2:	d00b      	beq.n	800bebc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beaa:	691b      	ldr	r3, [r3, #16]
 800beac:	687a      	ldr	r2, [r7, #4]
 800beae:	7c12      	ldrb	r2, [r2, #16]
 800beb0:	f107 0108 	add.w	r1, r7, #8
 800beb4:	4610      	mov	r0, r2
 800beb6:	4798      	blx	r3
 800beb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beba:	e043      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bebc:	6839      	ldr	r1, [r7, #0]
 800bebe:	6878      	ldr	r0, [r7, #4]
 800bec0:	f000 fa7d 	bl	800c3be <USBD_CtlError>
            err++;
 800bec4:	7afb      	ldrb	r3, [r7, #11]
 800bec6:	3301      	adds	r3, #1
 800bec8:	72fb      	strb	r3, [r7, #11]
          break;
 800beca:	e03b      	b.n	800bf44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bed2:	695b      	ldr	r3, [r3, #20]
 800bed4:	2b00      	cmp	r3, #0
 800bed6:	d00b      	beq.n	800bef0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bede:	695b      	ldr	r3, [r3, #20]
 800bee0:	687a      	ldr	r2, [r7, #4]
 800bee2:	7c12      	ldrb	r2, [r2, #16]
 800bee4:	f107 0108 	add.w	r1, r7, #8
 800bee8:	4610      	mov	r0, r2
 800beea:	4798      	blx	r3
 800beec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800beee:	e029      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bef0:	6839      	ldr	r1, [r7, #0]
 800bef2:	6878      	ldr	r0, [r7, #4]
 800bef4:	f000 fa63 	bl	800c3be <USBD_CtlError>
            err++;
 800bef8:	7afb      	ldrb	r3, [r7, #11]
 800befa:	3301      	adds	r3, #1
 800befc:	72fb      	strb	r3, [r7, #11]
          break;
 800befe:	e021      	b.n	800bf44 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf06:	699b      	ldr	r3, [r3, #24]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d00b      	beq.n	800bf24 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf12:	699b      	ldr	r3, [r3, #24]
 800bf14:	687a      	ldr	r2, [r7, #4]
 800bf16:	7c12      	ldrb	r2, [r2, #16]
 800bf18:	f107 0108 	add.w	r1, r7, #8
 800bf1c:	4610      	mov	r0, r2
 800bf1e:	4798      	blx	r3
 800bf20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf22:	e00f      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf24:	6839      	ldr	r1, [r7, #0]
 800bf26:	6878      	ldr	r0, [r7, #4]
 800bf28:	f000 fa49 	bl	800c3be <USBD_CtlError>
            err++;
 800bf2c:	7afb      	ldrb	r3, [r7, #11]
 800bf2e:	3301      	adds	r3, #1
 800bf30:	72fb      	strb	r3, [r7, #11]
          break;
 800bf32:	e007      	b.n	800bf44 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf34:	6839      	ldr	r1, [r7, #0]
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 fa41 	bl	800c3be <USBD_CtlError>
          err++;
 800bf3c:	7afb      	ldrb	r3, [r7, #11]
 800bf3e:	3301      	adds	r3, #1
 800bf40:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf42:	bf00      	nop
      }
      break;
 800bf44:	e037      	b.n	800bfb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf46:	687b      	ldr	r3, [r7, #4]
 800bf48:	7c1b      	ldrb	r3, [r3, #16]
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d109      	bne.n	800bf62 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf56:	f107 0208 	add.w	r2, r7, #8
 800bf5a:	4610      	mov	r0, r2
 800bf5c:	4798      	blx	r3
 800bf5e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf60:	e029      	b.n	800bfb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf62:	6839      	ldr	r1, [r7, #0]
 800bf64:	6878      	ldr	r0, [r7, #4]
 800bf66:	f000 fa2a 	bl	800c3be <USBD_CtlError>
        err++;
 800bf6a:	7afb      	ldrb	r3, [r7, #11]
 800bf6c:	3301      	adds	r3, #1
 800bf6e:	72fb      	strb	r3, [r7, #11]
      break;
 800bf70:	e021      	b.n	800bfb6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	7c1b      	ldrb	r3, [r3, #16]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	d10d      	bne.n	800bf96 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf82:	f107 0208 	add.w	r2, r7, #8
 800bf86:	4610      	mov	r0, r2
 800bf88:	4798      	blx	r3
 800bf8a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	3301      	adds	r3, #1
 800bf90:	2207      	movs	r2, #7
 800bf92:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf94:	e00f      	b.n	800bfb6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf96:	6839      	ldr	r1, [r7, #0]
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f000 fa10 	bl	800c3be <USBD_CtlError>
        err++;
 800bf9e:	7afb      	ldrb	r3, [r7, #11]
 800bfa0:	3301      	adds	r3, #1
 800bfa2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfa4:	e007      	b.n	800bfb6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bfa6:	6839      	ldr	r1, [r7, #0]
 800bfa8:	6878      	ldr	r0, [r7, #4]
 800bfaa:	f000 fa08 	bl	800c3be <USBD_CtlError>
      err++;
 800bfae:	7afb      	ldrb	r3, [r7, #11]
 800bfb0:	3301      	adds	r3, #1
 800bfb2:	72fb      	strb	r3, [r7, #11]
      break;
 800bfb4:	bf00      	nop
  }

  if (err != 0U)
 800bfb6:	7afb      	ldrb	r3, [r7, #11]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d11e      	bne.n	800bffa <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bfbc:	683b      	ldr	r3, [r7, #0]
 800bfbe:	88db      	ldrh	r3, [r3, #6]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d016      	beq.n	800bff2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bfc4:	893b      	ldrh	r3, [r7, #8]
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d00e      	beq.n	800bfe8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bfca:	683b      	ldr	r3, [r7, #0]
 800bfcc:	88da      	ldrh	r2, [r3, #6]
 800bfce:	893b      	ldrh	r3, [r7, #8]
 800bfd0:	4293      	cmp	r3, r2
 800bfd2:	bf28      	it	cs
 800bfd4:	4613      	movcs	r3, r2
 800bfd6:	b29b      	uxth	r3, r3
 800bfd8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bfda:	893b      	ldrh	r3, [r7, #8]
 800bfdc:	461a      	mov	r2, r3
 800bfde:	68f9      	ldr	r1, [r7, #12]
 800bfe0:	6878      	ldr	r0, [r7, #4]
 800bfe2:	f000 fa69 	bl	800c4b8 <USBD_CtlSendData>
 800bfe6:	e009      	b.n	800bffc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bfe8:	6839      	ldr	r1, [r7, #0]
 800bfea:	6878      	ldr	r0, [r7, #4]
 800bfec:	f000 f9e7 	bl	800c3be <USBD_CtlError>
 800bff0:	e004      	b.n	800bffc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 faba 	bl	800c56c <USBD_CtlSendStatus>
 800bff8:	e000      	b.n	800bffc <USBD_GetDescriptor+0x2cc>
    return;
 800bffa:	bf00      	nop
  }
}
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop

0800c004 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c00e:	683b      	ldr	r3, [r7, #0]
 800c010:	889b      	ldrh	r3, [r3, #4]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d131      	bne.n	800c07a <USBD_SetAddress+0x76>
 800c016:	683b      	ldr	r3, [r7, #0]
 800c018:	88db      	ldrh	r3, [r3, #6]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d12d      	bne.n	800c07a <USBD_SetAddress+0x76>
 800c01e:	683b      	ldr	r3, [r7, #0]
 800c020:	885b      	ldrh	r3, [r3, #2]
 800c022:	2b7f      	cmp	r3, #127	@ 0x7f
 800c024:	d829      	bhi.n	800c07a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	885b      	ldrh	r3, [r3, #2]
 800c02a:	b2db      	uxtb	r3, r3
 800c02c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c030:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c038:	b2db      	uxtb	r3, r3
 800c03a:	2b03      	cmp	r3, #3
 800c03c:	d104      	bne.n	800c048 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c03e:	6839      	ldr	r1, [r7, #0]
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 f9bc 	bl	800c3be <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c046:	e01d      	b.n	800c084 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	7bfa      	ldrb	r2, [r7, #15]
 800c04c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c050:	7bfb      	ldrb	r3, [r7, #15]
 800c052:	4619      	mov	r1, r3
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f003 f887 	bl	800f168 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c05a:	6878      	ldr	r0, [r7, #4]
 800c05c:	f000 fa86 	bl	800c56c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c060:	7bfb      	ldrb	r3, [r7, #15]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d004      	beq.n	800c070 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c066:	687b      	ldr	r3, [r7, #4]
 800c068:	2202      	movs	r2, #2
 800c06a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c06e:	e009      	b.n	800c084 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	2201      	movs	r2, #1
 800c074:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c078:	e004      	b.n	800c084 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c07a:	6839      	ldr	r1, [r7, #0]
 800c07c:	6878      	ldr	r0, [r7, #4]
 800c07e:	f000 f99e 	bl	800c3be <USBD_CtlError>
  }
}
 800c082:	bf00      	nop
 800c084:	bf00      	nop
 800c086:	3710      	adds	r7, #16
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	b084      	sub	sp, #16
 800c090:	af00      	add	r7, sp, #0
 800c092:	6078      	str	r0, [r7, #4]
 800c094:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c096:	2300      	movs	r3, #0
 800c098:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c09a:	683b      	ldr	r3, [r7, #0]
 800c09c:	885b      	ldrh	r3, [r3, #2]
 800c09e:	b2da      	uxtb	r2, r3
 800c0a0:	4b4e      	ldr	r3, [pc, #312]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c0a2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0a4:	4b4d      	ldr	r3, [pc, #308]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c0a6:	781b      	ldrb	r3, [r3, #0]
 800c0a8:	2b01      	cmp	r3, #1
 800c0aa:	d905      	bls.n	800c0b8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0ac:	6839      	ldr	r1, [r7, #0]
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	f000 f985 	bl	800c3be <USBD_CtlError>
    return USBD_FAIL;
 800c0b4:	2303      	movs	r3, #3
 800c0b6:	e08c      	b.n	800c1d2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0be:	b2db      	uxtb	r3, r3
 800c0c0:	2b02      	cmp	r3, #2
 800c0c2:	d002      	beq.n	800c0ca <USBD_SetConfig+0x3e>
 800c0c4:	2b03      	cmp	r3, #3
 800c0c6:	d029      	beq.n	800c11c <USBD_SetConfig+0x90>
 800c0c8:	e075      	b.n	800c1b6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0ca:	4b44      	ldr	r3, [pc, #272]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c0cc:	781b      	ldrb	r3, [r3, #0]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	d020      	beq.n	800c114 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c0d2:	4b42      	ldr	r3, [pc, #264]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	461a      	mov	r2, r3
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0dc:	4b3f      	ldr	r3, [pc, #252]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c0de:	781b      	ldrb	r3, [r3, #0]
 800c0e0:	4619      	mov	r1, r3
 800c0e2:	6878      	ldr	r0, [r7, #4]
 800c0e4:	f7fe ffe3 	bl	800b0ae <USBD_SetClassConfig>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c0ec:	7bfb      	ldrb	r3, [r7, #15]
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	d008      	beq.n	800c104 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c0f2:	6839      	ldr	r1, [r7, #0]
 800c0f4:	6878      	ldr	r0, [r7, #4]
 800c0f6:	f000 f962 	bl	800c3be <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	2202      	movs	r2, #2
 800c0fe:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c102:	e065      	b.n	800c1d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c104:	6878      	ldr	r0, [r7, #4]
 800c106:	f000 fa31 	bl	800c56c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2203      	movs	r2, #3
 800c10e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c112:	e05d      	b.n	800c1d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c114:	6878      	ldr	r0, [r7, #4]
 800c116:	f000 fa29 	bl	800c56c <USBD_CtlSendStatus>
      break;
 800c11a:	e059      	b.n	800c1d0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c11c:	4b2f      	ldr	r3, [pc, #188]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c11e:	781b      	ldrb	r3, [r3, #0]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d112      	bne.n	800c14a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2202      	movs	r2, #2
 800c128:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c12c:	4b2b      	ldr	r3, [pc, #172]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c12e:	781b      	ldrb	r3, [r3, #0]
 800c130:	461a      	mov	r2, r3
 800c132:	687b      	ldr	r3, [r7, #4]
 800c134:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c136:	4b29      	ldr	r3, [pc, #164]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c138:	781b      	ldrb	r3, [r3, #0]
 800c13a:	4619      	mov	r1, r3
 800c13c:	6878      	ldr	r0, [r7, #4]
 800c13e:	f7fe ffd2 	bl	800b0e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c142:	6878      	ldr	r0, [r7, #4]
 800c144:	f000 fa12 	bl	800c56c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c148:	e042      	b.n	800c1d0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c14a:	4b24      	ldr	r3, [pc, #144]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c14c:	781b      	ldrb	r3, [r3, #0]
 800c14e:	461a      	mov	r2, r3
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	685b      	ldr	r3, [r3, #4]
 800c154:	429a      	cmp	r2, r3
 800c156:	d02a      	beq.n	800c1ae <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	b2db      	uxtb	r3, r3
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f7fe ffc0 	bl	800b0e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c166:	4b1d      	ldr	r3, [pc, #116]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c170:	4b1a      	ldr	r3, [pc, #104]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c172:	781b      	ldrb	r3, [r3, #0]
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f7fe ff99 	bl	800b0ae <USBD_SetClassConfig>
 800c17c:	4603      	mov	r3, r0
 800c17e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c180:	7bfb      	ldrb	r3, [r7, #15]
 800c182:	2b00      	cmp	r3, #0
 800c184:	d00f      	beq.n	800c1a6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c186:	6839      	ldr	r1, [r7, #0]
 800c188:	6878      	ldr	r0, [r7, #4]
 800c18a:	f000 f918 	bl	800c3be <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	b2db      	uxtb	r3, r3
 800c194:	4619      	mov	r1, r3
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7fe ffa5 	bl	800b0e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	2202      	movs	r2, #2
 800c1a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c1a4:	e014      	b.n	800c1d0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f000 f9e0 	bl	800c56c <USBD_CtlSendStatus>
      break;
 800c1ac:	e010      	b.n	800c1d0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1ae:	6878      	ldr	r0, [r7, #4]
 800c1b0:	f000 f9dc 	bl	800c56c <USBD_CtlSendStatus>
      break;
 800c1b4:	e00c      	b.n	800c1d0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c1b6:	6839      	ldr	r1, [r7, #0]
 800c1b8:	6878      	ldr	r0, [r7, #4]
 800c1ba:	f000 f900 	bl	800c3be <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1be:	4b07      	ldr	r3, [pc, #28]	@ (800c1dc <USBD_SetConfig+0x150>)
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7fe ff8e 	bl	800b0e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1ca:	2303      	movs	r3, #3
 800c1cc:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ce:	bf00      	nop
  }

  return ret;
 800c1d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1d2:	4618      	mov	r0, r3
 800c1d4:	3710      	adds	r7, #16
 800c1d6:	46bd      	mov	sp, r7
 800c1d8:	bd80      	pop	{r7, pc}
 800c1da:	bf00      	nop
 800c1dc:	200003f4 	.word	0x200003f4

0800c1e0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c1ea:	683b      	ldr	r3, [r7, #0]
 800c1ec:	88db      	ldrh	r3, [r3, #6]
 800c1ee:	2b01      	cmp	r3, #1
 800c1f0:	d004      	beq.n	800c1fc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c1f2:	6839      	ldr	r1, [r7, #0]
 800c1f4:	6878      	ldr	r0, [r7, #4]
 800c1f6:	f000 f8e2 	bl	800c3be <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c1fa:	e023      	b.n	800c244 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c202:	b2db      	uxtb	r3, r3
 800c204:	2b02      	cmp	r3, #2
 800c206:	dc02      	bgt.n	800c20e <USBD_GetConfig+0x2e>
 800c208:	2b00      	cmp	r3, #0
 800c20a:	dc03      	bgt.n	800c214 <USBD_GetConfig+0x34>
 800c20c:	e015      	b.n	800c23a <USBD_GetConfig+0x5a>
 800c20e:	2b03      	cmp	r3, #3
 800c210:	d00b      	beq.n	800c22a <USBD_GetConfig+0x4a>
 800c212:	e012      	b.n	800c23a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2200      	movs	r2, #0
 800c218:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	3308      	adds	r3, #8
 800c21e:	2201      	movs	r2, #1
 800c220:	4619      	mov	r1, r3
 800c222:	6878      	ldr	r0, [r7, #4]
 800c224:	f000 f948 	bl	800c4b8 <USBD_CtlSendData>
        break;
 800c228:	e00c      	b.n	800c244 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	3304      	adds	r3, #4
 800c22e:	2201      	movs	r2, #1
 800c230:	4619      	mov	r1, r3
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f940 	bl	800c4b8 <USBD_CtlSendData>
        break;
 800c238:	e004      	b.n	800c244 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f8be 	bl	800c3be <USBD_CtlError>
        break;
 800c242:	bf00      	nop
}
 800c244:	bf00      	nop
 800c246:	3708      	adds	r7, #8
 800c248:	46bd      	mov	sp, r7
 800c24a:	bd80      	pop	{r7, pc}

0800c24c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
 800c254:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25c:	b2db      	uxtb	r3, r3
 800c25e:	3b01      	subs	r3, #1
 800c260:	2b02      	cmp	r3, #2
 800c262:	d81e      	bhi.n	800c2a2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c264:	683b      	ldr	r3, [r7, #0]
 800c266:	88db      	ldrh	r3, [r3, #6]
 800c268:	2b02      	cmp	r3, #2
 800c26a:	d004      	beq.n	800c276 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c26c:	6839      	ldr	r1, [r7, #0]
 800c26e:	6878      	ldr	r0, [r7, #4]
 800c270:	f000 f8a5 	bl	800c3be <USBD_CtlError>
        break;
 800c274:	e01a      	b.n	800c2ac <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	2201      	movs	r2, #1
 800c27a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c282:	2b00      	cmp	r3, #0
 800c284:	d005      	beq.n	800c292 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	f043 0202 	orr.w	r2, r3, #2
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	330c      	adds	r3, #12
 800c296:	2202      	movs	r2, #2
 800c298:	4619      	mov	r1, r3
 800c29a:	6878      	ldr	r0, [r7, #4]
 800c29c:	f000 f90c 	bl	800c4b8 <USBD_CtlSendData>
      break;
 800c2a0:	e004      	b.n	800c2ac <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2a2:	6839      	ldr	r1, [r7, #0]
 800c2a4:	6878      	ldr	r0, [r7, #4]
 800c2a6:	f000 f88a 	bl	800c3be <USBD_CtlError>
      break;
 800c2aa:	bf00      	nop
  }
}
 800c2ac:	bf00      	nop
 800c2ae:	3708      	adds	r7, #8
 800c2b0:	46bd      	mov	sp, r7
 800c2b2:	bd80      	pop	{r7, pc}

0800c2b4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2b4:	b580      	push	{r7, lr}
 800c2b6:	b082      	sub	sp, #8
 800c2b8:	af00      	add	r7, sp, #0
 800c2ba:	6078      	str	r0, [r7, #4]
 800c2bc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2be:	683b      	ldr	r3, [r7, #0]
 800c2c0:	885b      	ldrh	r3, [r3, #2]
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d107      	bne.n	800c2d6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2c6:	687b      	ldr	r3, [r7, #4]
 800c2c8:	2201      	movs	r2, #1
 800c2ca:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2ce:	6878      	ldr	r0, [r7, #4]
 800c2d0:	f000 f94c 	bl	800c56c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c2d4:	e013      	b.n	800c2fe <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	885b      	ldrh	r3, [r3, #2]
 800c2da:	2b02      	cmp	r3, #2
 800c2dc:	d10b      	bne.n	800c2f6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c2de:	683b      	ldr	r3, [r7, #0]
 800c2e0:	889b      	ldrh	r3, [r3, #4]
 800c2e2:	0a1b      	lsrs	r3, r3, #8
 800c2e4:	b29b      	uxth	r3, r3
 800c2e6:	b2da      	uxtb	r2, r3
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c2ee:	6878      	ldr	r0, [r7, #4]
 800c2f0:	f000 f93c 	bl	800c56c <USBD_CtlSendStatus>
}
 800c2f4:	e003      	b.n	800c2fe <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c2f6:	6839      	ldr	r1, [r7, #0]
 800c2f8:	6878      	ldr	r0, [r7, #4]
 800c2fa:	f000 f860 	bl	800c3be <USBD_CtlError>
}
 800c2fe:	bf00      	nop
 800c300:	3708      	adds	r7, #8
 800c302:	46bd      	mov	sp, r7
 800c304:	bd80      	pop	{r7, pc}

0800c306 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c306:	b580      	push	{r7, lr}
 800c308:	b082      	sub	sp, #8
 800c30a:	af00      	add	r7, sp, #0
 800c30c:	6078      	str	r0, [r7, #4]
 800c30e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c316:	b2db      	uxtb	r3, r3
 800c318:	3b01      	subs	r3, #1
 800c31a:	2b02      	cmp	r3, #2
 800c31c:	d80b      	bhi.n	800c336 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c31e:	683b      	ldr	r3, [r7, #0]
 800c320:	885b      	ldrh	r3, [r3, #2]
 800c322:	2b01      	cmp	r3, #1
 800c324:	d10c      	bne.n	800c340 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	2200      	movs	r2, #0
 800c32a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c32e:	6878      	ldr	r0, [r7, #4]
 800c330:	f000 f91c 	bl	800c56c <USBD_CtlSendStatus>
      }
      break;
 800c334:	e004      	b.n	800c340 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c336:	6839      	ldr	r1, [r7, #0]
 800c338:	6878      	ldr	r0, [r7, #4]
 800c33a:	f000 f840 	bl	800c3be <USBD_CtlError>
      break;
 800c33e:	e000      	b.n	800c342 <USBD_ClrFeature+0x3c>
      break;
 800c340:	bf00      	nop
  }
}
 800c342:	bf00      	nop
 800c344:	3708      	adds	r7, #8
 800c346:	46bd      	mov	sp, r7
 800c348:	bd80      	pop	{r7, pc}

0800c34a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c34a:	b580      	push	{r7, lr}
 800c34c:	b084      	sub	sp, #16
 800c34e:	af00      	add	r7, sp, #0
 800c350:	6078      	str	r0, [r7, #4]
 800c352:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c354:	683b      	ldr	r3, [r7, #0]
 800c356:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c358:	68fb      	ldr	r3, [r7, #12]
 800c35a:	781a      	ldrb	r2, [r3, #0]
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	3301      	adds	r3, #1
 800c364:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	781a      	ldrb	r2, [r3, #0]
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c36e:	68fb      	ldr	r3, [r7, #12]
 800c370:	3301      	adds	r3, #1
 800c372:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c374:	68f8      	ldr	r0, [r7, #12]
 800c376:	f7ff fa40 	bl	800b7fa <SWAPBYTE>
 800c37a:	4603      	mov	r3, r0
 800c37c:	461a      	mov	r2, r3
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	3301      	adds	r3, #1
 800c386:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c388:	68fb      	ldr	r3, [r7, #12]
 800c38a:	3301      	adds	r3, #1
 800c38c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c38e:	68f8      	ldr	r0, [r7, #12]
 800c390:	f7ff fa33 	bl	800b7fa <SWAPBYTE>
 800c394:	4603      	mov	r3, r0
 800c396:	461a      	mov	r2, r3
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c39c:	68fb      	ldr	r3, [r7, #12]
 800c39e:	3301      	adds	r3, #1
 800c3a0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3a2:	68fb      	ldr	r3, [r7, #12]
 800c3a4:	3301      	adds	r3, #1
 800c3a6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3a8:	68f8      	ldr	r0, [r7, #12]
 800c3aa:	f7ff fa26 	bl	800b7fa <SWAPBYTE>
 800c3ae:	4603      	mov	r3, r0
 800c3b0:	461a      	mov	r2, r3
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	80da      	strh	r2, [r3, #6]
}
 800c3b6:	bf00      	nop
 800c3b8:	3710      	adds	r7, #16
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}

0800c3be <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3be:	b580      	push	{r7, lr}
 800c3c0:	b082      	sub	sp, #8
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3c8:	2180      	movs	r1, #128	@ 0x80
 800c3ca:	6878      	ldr	r0, [r7, #4]
 800c3cc:	f002 fe62 	bl	800f094 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3d0:	2100      	movs	r1, #0
 800c3d2:	6878      	ldr	r0, [r7, #4]
 800c3d4:	f002 fe5e 	bl	800f094 <USBD_LL_StallEP>
}
 800c3d8:	bf00      	nop
 800c3da:	3708      	adds	r7, #8
 800c3dc:	46bd      	mov	sp, r7
 800c3de:	bd80      	pop	{r7, pc}

0800c3e0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3e0:	b580      	push	{r7, lr}
 800c3e2:	b086      	sub	sp, #24
 800c3e4:	af00      	add	r7, sp, #0
 800c3e6:	60f8      	str	r0, [r7, #12]
 800c3e8:	60b9      	str	r1, [r7, #8]
 800c3ea:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2b00      	cmp	r3, #0
 800c3f4:	d042      	beq.n	800c47c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c3fa:	6938      	ldr	r0, [r7, #16]
 800c3fc:	f000 f842 	bl	800c484 <USBD_GetLen>
 800c400:	4603      	mov	r3, r0
 800c402:	3301      	adds	r3, #1
 800c404:	005b      	lsls	r3, r3, #1
 800c406:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c40a:	d808      	bhi.n	800c41e <USBD_GetString+0x3e>
 800c40c:	6938      	ldr	r0, [r7, #16]
 800c40e:	f000 f839 	bl	800c484 <USBD_GetLen>
 800c412:	4603      	mov	r3, r0
 800c414:	3301      	adds	r3, #1
 800c416:	b29b      	uxth	r3, r3
 800c418:	005b      	lsls	r3, r3, #1
 800c41a:	b29a      	uxth	r2, r3
 800c41c:	e001      	b.n	800c422 <USBD_GetString+0x42>
 800c41e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c422:	687b      	ldr	r3, [r7, #4]
 800c424:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c426:	7dfb      	ldrb	r3, [r7, #23]
 800c428:	68ba      	ldr	r2, [r7, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	7812      	ldrb	r2, [r2, #0]
 800c430:	701a      	strb	r2, [r3, #0]
  idx++;
 800c432:	7dfb      	ldrb	r3, [r7, #23]
 800c434:	3301      	adds	r3, #1
 800c436:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c438:	7dfb      	ldrb	r3, [r7, #23]
 800c43a:	68ba      	ldr	r2, [r7, #8]
 800c43c:	4413      	add	r3, r2
 800c43e:	2203      	movs	r2, #3
 800c440:	701a      	strb	r2, [r3, #0]
  idx++;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	3301      	adds	r3, #1
 800c446:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c448:	e013      	b.n	800c472 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c44a:	7dfb      	ldrb	r3, [r7, #23]
 800c44c:	68ba      	ldr	r2, [r7, #8]
 800c44e:	4413      	add	r3, r2
 800c450:	693a      	ldr	r2, [r7, #16]
 800c452:	7812      	ldrb	r2, [r2, #0]
 800c454:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	3301      	adds	r3, #1
 800c45a:	613b      	str	r3, [r7, #16]
    idx++;
 800c45c:	7dfb      	ldrb	r3, [r7, #23]
 800c45e:	3301      	adds	r3, #1
 800c460:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
 800c464:	68ba      	ldr	r2, [r7, #8]
 800c466:	4413      	add	r3, r2
 800c468:	2200      	movs	r2, #0
 800c46a:	701a      	strb	r2, [r3, #0]
    idx++;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	3301      	adds	r3, #1
 800c470:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	781b      	ldrb	r3, [r3, #0]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d1e7      	bne.n	800c44a <USBD_GetString+0x6a>
 800c47a:	e000      	b.n	800c47e <USBD_GetString+0x9e>
    return;
 800c47c:	bf00      	nop
  }
}
 800c47e:	3718      	adds	r7, #24
 800c480:	46bd      	mov	sp, r7
 800c482:	bd80      	pop	{r7, pc}

0800c484 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c484:	b480      	push	{r7}
 800c486:	b085      	sub	sp, #20
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c48c:	2300      	movs	r3, #0
 800c48e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c494:	e005      	b.n	800c4a2 <USBD_GetLen+0x1e>
  {
    len++;
 800c496:	7bfb      	ldrb	r3, [r7, #15]
 800c498:	3301      	adds	r3, #1
 800c49a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c49c:	68bb      	ldr	r3, [r7, #8]
 800c49e:	3301      	adds	r3, #1
 800c4a0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4a2:	68bb      	ldr	r3, [r7, #8]
 800c4a4:	781b      	ldrb	r3, [r3, #0]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d1f5      	bne.n	800c496 <USBD_GetLen+0x12>
  }

  return len;
 800c4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4ac:	4618      	mov	r0, r3
 800c4ae:	3714      	adds	r7, #20
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4b6:	4770      	bx	lr

0800c4b8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4b8:	b580      	push	{r7, lr}
 800c4ba:	b084      	sub	sp, #16
 800c4bc:	af00      	add	r7, sp, #0
 800c4be:	60f8      	str	r0, [r7, #12]
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2202      	movs	r2, #2
 800c4c8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	687a      	ldr	r2, [r7, #4]
 800c4d0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	687a      	ldr	r2, [r7, #4]
 800c4d6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	68ba      	ldr	r2, [r7, #8]
 800c4dc:	2100      	movs	r1, #0
 800c4de:	68f8      	ldr	r0, [r7, #12]
 800c4e0:	f002 fe61 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c4e4:	2300      	movs	r3, #0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3710      	adds	r7, #16
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b084      	sub	sp, #16
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	60f8      	str	r0, [r7, #12]
 800c4f6:	60b9      	str	r1, [r7, #8]
 800c4f8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	68ba      	ldr	r2, [r7, #8]
 800c4fe:	2100      	movs	r1, #0
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f002 fe50 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c506:	2300      	movs	r3, #0
}
 800c508:	4618      	mov	r0, r3
 800c50a:	3710      	adds	r7, #16
 800c50c:	46bd      	mov	sp, r7
 800c50e:	bd80      	pop	{r7, pc}

0800c510 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c510:	b580      	push	{r7, lr}
 800c512:	b084      	sub	sp, #16
 800c514:	af00      	add	r7, sp, #0
 800c516:	60f8      	str	r0, [r7, #12]
 800c518:	60b9      	str	r1, [r7, #8]
 800c51a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	2203      	movs	r2, #3
 800c520:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	687a      	ldr	r2, [r7, #4]
 800c528:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	68ba      	ldr	r2, [r7, #8]
 800c538:	2100      	movs	r1, #0
 800c53a:	68f8      	ldr	r0, [r7, #12]
 800c53c:	f002 fe54 	bl	800f1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c540:	2300      	movs	r3, #0
}
 800c542:	4618      	mov	r0, r3
 800c544:	3710      	adds	r7, #16
 800c546:	46bd      	mov	sp, r7
 800c548:	bd80      	pop	{r7, pc}

0800c54a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c54a:	b580      	push	{r7, lr}
 800c54c:	b084      	sub	sp, #16
 800c54e:	af00      	add	r7, sp, #0
 800c550:	60f8      	str	r0, [r7, #12]
 800c552:	60b9      	str	r1, [r7, #8]
 800c554:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	68ba      	ldr	r2, [r7, #8]
 800c55a:	2100      	movs	r1, #0
 800c55c:	68f8      	ldr	r0, [r7, #12]
 800c55e:	f002 fe43 	bl	800f1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c562:	2300      	movs	r3, #0
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}

0800c56c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c56c:	b580      	push	{r7, lr}
 800c56e:	b082      	sub	sp, #8
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	2204      	movs	r2, #4
 800c578:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c57c:	2300      	movs	r3, #0
 800c57e:	2200      	movs	r2, #0
 800c580:	2100      	movs	r1, #0
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f002 fe0f 	bl	800f1a6 <USBD_LL_Transmit>

  return USBD_OK;
 800c588:	2300      	movs	r3, #0
}
 800c58a:	4618      	mov	r0, r3
 800c58c:	3708      	adds	r7, #8
 800c58e:	46bd      	mov	sp, r7
 800c590:	bd80      	pop	{r7, pc}

0800c592 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c592:	b580      	push	{r7, lr}
 800c594:	b082      	sub	sp, #8
 800c596:	af00      	add	r7, sp, #0
 800c598:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2205      	movs	r2, #5
 800c59e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	2100      	movs	r1, #0
 800c5a8:	6878      	ldr	r0, [r7, #4]
 800c5aa:	f002 fe1d 	bl	800f1e8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ae:	2300      	movs	r3, #0
}
 800c5b0:	4618      	mov	r0, r3
 800c5b2:	3708      	adds	r7, #8
 800c5b4:	46bd      	mov	sp, r7
 800c5b6:	bd80      	pop	{r7, pc}

0800c5b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5b8:	b580      	push	{r7, lr}
 800c5ba:	b084      	sub	sp, #16
 800c5bc:	af00      	add	r7, sp, #0
 800c5be:	4603      	mov	r3, r0
 800c5c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c5c2:	79fb      	ldrb	r3, [r7, #7]
 800c5c4:	4a08      	ldr	r2, [pc, #32]	@ (800c5e8 <disk_status+0x30>)
 800c5c6:	009b      	lsls	r3, r3, #2
 800c5c8:	4413      	add	r3, r2
 800c5ca:	685b      	ldr	r3, [r3, #4]
 800c5cc:	685b      	ldr	r3, [r3, #4]
 800c5ce:	79fa      	ldrb	r2, [r7, #7]
 800c5d0:	4905      	ldr	r1, [pc, #20]	@ (800c5e8 <disk_status+0x30>)
 800c5d2:	440a      	add	r2, r1
 800c5d4:	7a12      	ldrb	r2, [r2, #8]
 800c5d6:	4610      	mov	r0, r2
 800c5d8:	4798      	blx	r3
 800c5da:	4603      	mov	r3, r0
 800c5dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c5de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5e0:	4618      	mov	r0, r3
 800c5e2:	3710      	adds	r7, #16
 800c5e4:	46bd      	mov	sp, r7
 800c5e6:	bd80      	pop	{r7, pc}
 800c5e8:	20000420 	.word	0x20000420

0800c5ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b084      	sub	sp, #16
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	4603      	mov	r3, r0
 800c5f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c5f6:	2300      	movs	r3, #0
 800c5f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c5fa:	79fb      	ldrb	r3, [r7, #7]
 800c5fc:	4a0e      	ldr	r2, [pc, #56]	@ (800c638 <disk_initialize+0x4c>)
 800c5fe:	5cd3      	ldrb	r3, [r2, r3]
 800c600:	2b00      	cmp	r3, #0
 800c602:	d114      	bne.n	800c62e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c604:	79fb      	ldrb	r3, [r7, #7]
 800c606:	4a0c      	ldr	r2, [pc, #48]	@ (800c638 <disk_initialize+0x4c>)
 800c608:	009b      	lsls	r3, r3, #2
 800c60a:	4413      	add	r3, r2
 800c60c:	685b      	ldr	r3, [r3, #4]
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	79fa      	ldrb	r2, [r7, #7]
 800c612:	4909      	ldr	r1, [pc, #36]	@ (800c638 <disk_initialize+0x4c>)
 800c614:	440a      	add	r2, r1
 800c616:	7a12      	ldrb	r2, [r2, #8]
 800c618:	4610      	mov	r0, r2
 800c61a:	4798      	blx	r3
 800c61c:	4603      	mov	r3, r0
 800c61e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d103      	bne.n	800c62e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c626:	79fb      	ldrb	r3, [r7, #7]
 800c628:	4a03      	ldr	r2, [pc, #12]	@ (800c638 <disk_initialize+0x4c>)
 800c62a:	2101      	movs	r1, #1
 800c62c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20000420 	.word	0x20000420

0800c63c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c63c:	b590      	push	{r4, r7, lr}
 800c63e:	b087      	sub	sp, #28
 800c640:	af00      	add	r7, sp, #0
 800c642:	60b9      	str	r1, [r7, #8]
 800c644:	607a      	str	r2, [r7, #4]
 800c646:	603b      	str	r3, [r7, #0]
 800c648:	4603      	mov	r3, r0
 800c64a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c64c:	7bfb      	ldrb	r3, [r7, #15]
 800c64e:	4a0a      	ldr	r2, [pc, #40]	@ (800c678 <disk_read+0x3c>)
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	4413      	add	r3, r2
 800c654:	685b      	ldr	r3, [r3, #4]
 800c656:	689c      	ldr	r4, [r3, #8]
 800c658:	7bfb      	ldrb	r3, [r7, #15]
 800c65a:	4a07      	ldr	r2, [pc, #28]	@ (800c678 <disk_read+0x3c>)
 800c65c:	4413      	add	r3, r2
 800c65e:	7a18      	ldrb	r0, [r3, #8]
 800c660:	683b      	ldr	r3, [r7, #0]
 800c662:	687a      	ldr	r2, [r7, #4]
 800c664:	68b9      	ldr	r1, [r7, #8]
 800c666:	47a0      	blx	r4
 800c668:	4603      	mov	r3, r0
 800c66a:	75fb      	strb	r3, [r7, #23]
  return res;
 800c66c:	7dfb      	ldrb	r3, [r7, #23]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	371c      	adds	r7, #28
 800c672:	46bd      	mov	sp, r7
 800c674:	bd90      	pop	{r4, r7, pc}
 800c676:	bf00      	nop
 800c678:	20000420 	.word	0x20000420

0800c67c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c67c:	b590      	push	{r4, r7, lr}
 800c67e:	b087      	sub	sp, #28
 800c680:	af00      	add	r7, sp, #0
 800c682:	60b9      	str	r1, [r7, #8]
 800c684:	607a      	str	r2, [r7, #4]
 800c686:	603b      	str	r3, [r7, #0]
 800c688:	4603      	mov	r3, r0
 800c68a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c68c:	7bfb      	ldrb	r3, [r7, #15]
 800c68e:	4a0a      	ldr	r2, [pc, #40]	@ (800c6b8 <disk_write+0x3c>)
 800c690:	009b      	lsls	r3, r3, #2
 800c692:	4413      	add	r3, r2
 800c694:	685b      	ldr	r3, [r3, #4]
 800c696:	68dc      	ldr	r4, [r3, #12]
 800c698:	7bfb      	ldrb	r3, [r7, #15]
 800c69a:	4a07      	ldr	r2, [pc, #28]	@ (800c6b8 <disk_write+0x3c>)
 800c69c:	4413      	add	r3, r2
 800c69e:	7a18      	ldrb	r0, [r3, #8]
 800c6a0:	683b      	ldr	r3, [r7, #0]
 800c6a2:	687a      	ldr	r2, [r7, #4]
 800c6a4:	68b9      	ldr	r1, [r7, #8]
 800c6a6:	47a0      	blx	r4
 800c6a8:	4603      	mov	r3, r0
 800c6aa:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	371c      	adds	r7, #28
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	bd90      	pop	{r4, r7, pc}
 800c6b6:	bf00      	nop
 800c6b8:	20000420 	.word	0x20000420

0800c6bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b084      	sub	sp, #16
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	603a      	str	r2, [r7, #0]
 800c6c6:	71fb      	strb	r3, [r7, #7]
 800c6c8:	460b      	mov	r3, r1
 800c6ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c6cc:	79fb      	ldrb	r3, [r7, #7]
 800c6ce:	4a09      	ldr	r2, [pc, #36]	@ (800c6f4 <disk_ioctl+0x38>)
 800c6d0:	009b      	lsls	r3, r3, #2
 800c6d2:	4413      	add	r3, r2
 800c6d4:	685b      	ldr	r3, [r3, #4]
 800c6d6:	691b      	ldr	r3, [r3, #16]
 800c6d8:	79fa      	ldrb	r2, [r7, #7]
 800c6da:	4906      	ldr	r1, [pc, #24]	@ (800c6f4 <disk_ioctl+0x38>)
 800c6dc:	440a      	add	r2, r1
 800c6de:	7a10      	ldrb	r0, [r2, #8]
 800c6e0:	79b9      	ldrb	r1, [r7, #6]
 800c6e2:	683a      	ldr	r2, [r7, #0]
 800c6e4:	4798      	blx	r3
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	73fb      	strb	r3, [r7, #15]
  return res;
 800c6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6ec:	4618      	mov	r0, r3
 800c6ee:	3710      	adds	r7, #16
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}
 800c6f4:	20000420 	.word	0x20000420

0800c6f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c6f8:	b480      	push	{r7}
 800c6fa:	b085      	sub	sp, #20
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	3301      	adds	r3, #1
 800c704:	781b      	ldrb	r3, [r3, #0]
 800c706:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c708:	89fb      	ldrh	r3, [r7, #14]
 800c70a:	021b      	lsls	r3, r3, #8
 800c70c:	b21a      	sxth	r2, r3
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	781b      	ldrb	r3, [r3, #0]
 800c712:	b21b      	sxth	r3, r3
 800c714:	4313      	orrs	r3, r2
 800c716:	b21b      	sxth	r3, r3
 800c718:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c71a:	89fb      	ldrh	r3, [r7, #14]
}
 800c71c:	4618      	mov	r0, r3
 800c71e:	3714      	adds	r7, #20
 800c720:	46bd      	mov	sp, r7
 800c722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c726:	4770      	bx	lr

0800c728 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c728:	b480      	push	{r7}
 800c72a:	b085      	sub	sp, #20
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	3303      	adds	r3, #3
 800c734:	781b      	ldrb	r3, [r3, #0]
 800c736:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	021b      	lsls	r3, r3, #8
 800c73c:	687a      	ldr	r2, [r7, #4]
 800c73e:	3202      	adds	r2, #2
 800c740:	7812      	ldrb	r2, [r2, #0]
 800c742:	4313      	orrs	r3, r2
 800c744:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	021b      	lsls	r3, r3, #8
 800c74a:	687a      	ldr	r2, [r7, #4]
 800c74c:	3201      	adds	r2, #1
 800c74e:	7812      	ldrb	r2, [r2, #0]
 800c750:	4313      	orrs	r3, r2
 800c752:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	021b      	lsls	r3, r3, #8
 800c758:	687a      	ldr	r2, [r7, #4]
 800c75a:	7812      	ldrb	r2, [r2, #0]
 800c75c:	4313      	orrs	r3, r2
 800c75e:	60fb      	str	r3, [r7, #12]
	return rv;
 800c760:	68fb      	ldr	r3, [r7, #12]
}
 800c762:	4618      	mov	r0, r3
 800c764:	3714      	adds	r7, #20
 800c766:	46bd      	mov	sp, r7
 800c768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c76c:	4770      	bx	lr

0800c76e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c76e:	b480      	push	{r7}
 800c770:	b083      	sub	sp, #12
 800c772:	af00      	add	r7, sp, #0
 800c774:	6078      	str	r0, [r7, #4]
 800c776:	460b      	mov	r3, r1
 800c778:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	1c5a      	adds	r2, r3, #1
 800c77e:	607a      	str	r2, [r7, #4]
 800c780:	887a      	ldrh	r2, [r7, #2]
 800c782:	b2d2      	uxtb	r2, r2
 800c784:	701a      	strb	r2, [r3, #0]
 800c786:	887b      	ldrh	r3, [r7, #2]
 800c788:	0a1b      	lsrs	r3, r3, #8
 800c78a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	1c5a      	adds	r2, r3, #1
 800c790:	607a      	str	r2, [r7, #4]
 800c792:	887a      	ldrh	r2, [r7, #2]
 800c794:	b2d2      	uxtb	r2, r2
 800c796:	701a      	strb	r2, [r3, #0]
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	1c5a      	adds	r2, r3, #1
 800c7b2:	607a      	str	r2, [r7, #4]
 800c7b4:	683a      	ldr	r2, [r7, #0]
 800c7b6:	b2d2      	uxtb	r2, r2
 800c7b8:	701a      	strb	r2, [r3, #0]
 800c7ba:	683b      	ldr	r3, [r7, #0]
 800c7bc:	0a1b      	lsrs	r3, r3, #8
 800c7be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	1c5a      	adds	r2, r3, #1
 800c7c4:	607a      	str	r2, [r7, #4]
 800c7c6:	683a      	ldr	r2, [r7, #0]
 800c7c8:	b2d2      	uxtb	r2, r2
 800c7ca:	701a      	strb	r2, [r3, #0]
 800c7cc:	683b      	ldr	r3, [r7, #0]
 800c7ce:	0a1b      	lsrs	r3, r3, #8
 800c7d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	607a      	str	r2, [r7, #4]
 800c7d8:	683a      	ldr	r2, [r7, #0]
 800c7da:	b2d2      	uxtb	r2, r2
 800c7dc:	701a      	strb	r2, [r3, #0]
 800c7de:	683b      	ldr	r3, [r7, #0]
 800c7e0:	0a1b      	lsrs	r3, r3, #8
 800c7e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c7e4:	687b      	ldr	r3, [r7, #4]
 800c7e6:	1c5a      	adds	r2, r3, #1
 800c7e8:	607a      	str	r2, [r7, #4]
 800c7ea:	683a      	ldr	r2, [r7, #0]
 800c7ec:	b2d2      	uxtb	r2, r2
 800c7ee:	701a      	strb	r2, [r3, #0]
}
 800c7f0:	bf00      	nop
 800c7f2:	370c      	adds	r7, #12
 800c7f4:	46bd      	mov	sp, r7
 800c7f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7fa:	4770      	bx	lr

0800c7fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c7fc:	b480      	push	{r7}
 800c7fe:	b087      	sub	sp, #28
 800c800:	af00      	add	r7, sp, #0
 800c802:	60f8      	str	r0, [r7, #12]
 800c804:	60b9      	str	r1, [r7, #8]
 800c806:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c808:	68fb      	ldr	r3, [r7, #12]
 800c80a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c80c:	68bb      	ldr	r3, [r7, #8]
 800c80e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d00d      	beq.n	800c832 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c816:	693a      	ldr	r2, [r7, #16]
 800c818:	1c53      	adds	r3, r2, #1
 800c81a:	613b      	str	r3, [r7, #16]
 800c81c:	697b      	ldr	r3, [r7, #20]
 800c81e:	1c59      	adds	r1, r3, #1
 800c820:	6179      	str	r1, [r7, #20]
 800c822:	7812      	ldrb	r2, [r2, #0]
 800c824:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c826:	687b      	ldr	r3, [r7, #4]
 800c828:	3b01      	subs	r3, #1
 800c82a:	607b      	str	r3, [r7, #4]
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2b00      	cmp	r3, #0
 800c830:	d1f1      	bne.n	800c816 <mem_cpy+0x1a>
	}
}
 800c832:	bf00      	nop
 800c834:	371c      	adds	r7, #28
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr

0800c83e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c83e:	b480      	push	{r7}
 800c840:	b087      	sub	sp, #28
 800c842:	af00      	add	r7, sp, #0
 800c844:	60f8      	str	r0, [r7, #12]
 800c846:	60b9      	str	r1, [r7, #8]
 800c848:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c84a:	68fb      	ldr	r3, [r7, #12]
 800c84c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c84e:	697b      	ldr	r3, [r7, #20]
 800c850:	1c5a      	adds	r2, r3, #1
 800c852:	617a      	str	r2, [r7, #20]
 800c854:	68ba      	ldr	r2, [r7, #8]
 800c856:	b2d2      	uxtb	r2, r2
 800c858:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3b01      	subs	r3, #1
 800c85e:	607b      	str	r3, [r7, #4]
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2b00      	cmp	r3, #0
 800c864:	d1f3      	bne.n	800c84e <mem_set+0x10>
}
 800c866:	bf00      	nop
 800c868:	bf00      	nop
 800c86a:	371c      	adds	r7, #28
 800c86c:	46bd      	mov	sp, r7
 800c86e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c872:	4770      	bx	lr

0800c874 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c874:	b480      	push	{r7}
 800c876:	b089      	sub	sp, #36	@ 0x24
 800c878:	af00      	add	r7, sp, #0
 800c87a:	60f8      	str	r0, [r7, #12]
 800c87c:	60b9      	str	r1, [r7, #8]
 800c87e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c880:	68fb      	ldr	r3, [r7, #12]
 800c882:	61fb      	str	r3, [r7, #28]
 800c884:	68bb      	ldr	r3, [r7, #8]
 800c886:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c888:	2300      	movs	r3, #0
 800c88a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c88c:	69fb      	ldr	r3, [r7, #28]
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	61fa      	str	r2, [r7, #28]
 800c892:	781b      	ldrb	r3, [r3, #0]
 800c894:	4619      	mov	r1, r3
 800c896:	69bb      	ldr	r3, [r7, #24]
 800c898:	1c5a      	adds	r2, r3, #1
 800c89a:	61ba      	str	r2, [r7, #24]
 800c89c:	781b      	ldrb	r3, [r3, #0]
 800c89e:	1acb      	subs	r3, r1, r3
 800c8a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	607b      	str	r3, [r7, #4]
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d002      	beq.n	800c8b4 <mem_cmp+0x40>
 800c8ae:	697b      	ldr	r3, [r7, #20]
 800c8b0:	2b00      	cmp	r3, #0
 800c8b2:	d0eb      	beq.n	800c88c <mem_cmp+0x18>

	return r;
 800c8b4:	697b      	ldr	r3, [r7, #20]
}
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	3724      	adds	r7, #36	@ 0x24
 800c8ba:	46bd      	mov	sp, r7
 800c8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8c0:	4770      	bx	lr

0800c8c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c8c2:	b480      	push	{r7}
 800c8c4:	b083      	sub	sp, #12
 800c8c6:	af00      	add	r7, sp, #0
 800c8c8:	6078      	str	r0, [r7, #4]
 800c8ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c8cc:	e002      	b.n	800c8d4 <chk_chr+0x12>
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3301      	adds	r3, #1
 800c8d2:	607b      	str	r3, [r7, #4]
 800c8d4:	687b      	ldr	r3, [r7, #4]
 800c8d6:	781b      	ldrb	r3, [r3, #0]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d005      	beq.n	800c8e8 <chk_chr+0x26>
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	781b      	ldrb	r3, [r3, #0]
 800c8e0:	461a      	mov	r2, r3
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	4293      	cmp	r3, r2
 800c8e6:	d1f2      	bne.n	800c8ce <chk_chr+0xc>
	return *str;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	781b      	ldrb	r3, [r3, #0]
}
 800c8ec:	4618      	mov	r0, r3
 800c8ee:	370c      	adds	r7, #12
 800c8f0:	46bd      	mov	sp, r7
 800c8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f6:	4770      	bx	lr

0800c8f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
 800c900:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c902:	2300      	movs	r3, #0
 800c904:	60bb      	str	r3, [r7, #8]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	60fb      	str	r3, [r7, #12]
 800c90a:	e029      	b.n	800c960 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c90c:	4a27      	ldr	r2, [pc, #156]	@ (800c9ac <chk_lock+0xb4>)
 800c90e:	68fb      	ldr	r3, [r7, #12]
 800c910:	011b      	lsls	r3, r3, #4
 800c912:	4413      	add	r3, r2
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	2b00      	cmp	r3, #0
 800c918:	d01d      	beq.n	800c956 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c91a:	4a24      	ldr	r2, [pc, #144]	@ (800c9ac <chk_lock+0xb4>)
 800c91c:	68fb      	ldr	r3, [r7, #12]
 800c91e:	011b      	lsls	r3, r3, #4
 800c920:	4413      	add	r3, r2
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	429a      	cmp	r2, r3
 800c92a:	d116      	bne.n	800c95a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c92c:	4a1f      	ldr	r2, [pc, #124]	@ (800c9ac <chk_lock+0xb4>)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	4413      	add	r3, r2
 800c934:	3304      	adds	r3, #4
 800c936:	681a      	ldr	r2, [r3, #0]
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c93c:	429a      	cmp	r2, r3
 800c93e:	d10c      	bne.n	800c95a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c940:	4a1a      	ldr	r2, [pc, #104]	@ (800c9ac <chk_lock+0xb4>)
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	011b      	lsls	r3, r3, #4
 800c946:	4413      	add	r3, r2
 800c948:	3308      	adds	r3, #8
 800c94a:	681a      	ldr	r2, [r3, #0]
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c950:	429a      	cmp	r2, r3
 800c952:	d102      	bne.n	800c95a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c954:	e007      	b.n	800c966 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c956:	2301      	movs	r3, #1
 800c958:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	3301      	adds	r3, #1
 800c95e:	60fb      	str	r3, [r7, #12]
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	2b01      	cmp	r3, #1
 800c964:	d9d2      	bls.n	800c90c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b02      	cmp	r3, #2
 800c96a:	d109      	bne.n	800c980 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d102      	bne.n	800c978 <chk_lock+0x80>
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	2b02      	cmp	r3, #2
 800c976:	d101      	bne.n	800c97c <chk_lock+0x84>
 800c978:	2300      	movs	r3, #0
 800c97a:	e010      	b.n	800c99e <chk_lock+0xa6>
 800c97c:	2312      	movs	r3, #18
 800c97e:	e00e      	b.n	800c99e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	2b00      	cmp	r3, #0
 800c984:	d108      	bne.n	800c998 <chk_lock+0xa0>
 800c986:	4a09      	ldr	r2, [pc, #36]	@ (800c9ac <chk_lock+0xb4>)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	011b      	lsls	r3, r3, #4
 800c98c:	4413      	add	r3, r2
 800c98e:	330c      	adds	r3, #12
 800c990:	881b      	ldrh	r3, [r3, #0]
 800c992:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c996:	d101      	bne.n	800c99c <chk_lock+0xa4>
 800c998:	2310      	movs	r3, #16
 800c99a:	e000      	b.n	800c99e <chk_lock+0xa6>
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3714      	adds	r7, #20
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20000400 	.word	0x20000400

0800c9b0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c9b0:	b480      	push	{r7}
 800c9b2:	b083      	sub	sp, #12
 800c9b4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	607b      	str	r3, [r7, #4]
 800c9ba:	e002      	b.n	800c9c2 <enq_lock+0x12>
 800c9bc:	687b      	ldr	r3, [r7, #4]
 800c9be:	3301      	adds	r3, #1
 800c9c0:	607b      	str	r3, [r7, #4]
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2b01      	cmp	r3, #1
 800c9c6:	d806      	bhi.n	800c9d6 <enq_lock+0x26>
 800c9c8:	4a09      	ldr	r2, [pc, #36]	@ (800c9f0 <enq_lock+0x40>)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	011b      	lsls	r3, r3, #4
 800c9ce:	4413      	add	r3, r2
 800c9d0:	681b      	ldr	r3, [r3, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d1f2      	bne.n	800c9bc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b02      	cmp	r3, #2
 800c9da:	bf14      	ite	ne
 800c9dc:	2301      	movne	r3, #1
 800c9de:	2300      	moveq	r3, #0
 800c9e0:	b2db      	uxtb	r3, r3
}
 800c9e2:	4618      	mov	r0, r3
 800c9e4:	370c      	adds	r7, #12
 800c9e6:	46bd      	mov	sp, r7
 800c9e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ec:	4770      	bx	lr
 800c9ee:	bf00      	nop
 800c9f0:	20000400 	.word	0x20000400

0800c9f4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c9f4:	b480      	push	{r7}
 800c9f6:	b085      	sub	sp, #20
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c9fe:	2300      	movs	r3, #0
 800ca00:	60fb      	str	r3, [r7, #12]
 800ca02:	e01f      	b.n	800ca44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ca04:	4a41      	ldr	r2, [pc, #260]	@ (800cb0c <inc_lock+0x118>)
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	011b      	lsls	r3, r3, #4
 800ca0a:	4413      	add	r3, r2
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	687b      	ldr	r3, [r7, #4]
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	429a      	cmp	r2, r3
 800ca14:	d113      	bne.n	800ca3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ca16:	4a3d      	ldr	r2, [pc, #244]	@ (800cb0c <inc_lock+0x118>)
 800ca18:	68fb      	ldr	r3, [r7, #12]
 800ca1a:	011b      	lsls	r3, r3, #4
 800ca1c:	4413      	add	r3, r2
 800ca1e:	3304      	adds	r3, #4
 800ca20:	681a      	ldr	r2, [r3, #0]
 800ca22:	687b      	ldr	r3, [r7, #4]
 800ca24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d109      	bne.n	800ca3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ca2a:	4a38      	ldr	r2, [pc, #224]	@ (800cb0c <inc_lock+0x118>)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	011b      	lsls	r3, r3, #4
 800ca30:	4413      	add	r3, r2
 800ca32:	3308      	adds	r3, #8
 800ca34:	681a      	ldr	r2, [r3, #0]
 800ca36:	687b      	ldr	r3, [r7, #4]
 800ca38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ca3a:	429a      	cmp	r2, r3
 800ca3c:	d006      	beq.n	800ca4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	3301      	adds	r3, #1
 800ca42:	60fb      	str	r3, [r7, #12]
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	2b01      	cmp	r3, #1
 800ca48:	d9dc      	bls.n	800ca04 <inc_lock+0x10>
 800ca4a:	e000      	b.n	800ca4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ca4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2b02      	cmp	r3, #2
 800ca52:	d132      	bne.n	800caba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca54:	2300      	movs	r3, #0
 800ca56:	60fb      	str	r3, [r7, #12]
 800ca58:	e002      	b.n	800ca60 <inc_lock+0x6c>
 800ca5a:	68fb      	ldr	r3, [r7, #12]
 800ca5c:	3301      	adds	r3, #1
 800ca5e:	60fb      	str	r3, [r7, #12]
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	2b01      	cmp	r3, #1
 800ca64:	d806      	bhi.n	800ca74 <inc_lock+0x80>
 800ca66:	4a29      	ldr	r2, [pc, #164]	@ (800cb0c <inc_lock+0x118>)
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	011b      	lsls	r3, r3, #4
 800ca6c:	4413      	add	r3, r2
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d1f2      	bne.n	800ca5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	2b02      	cmp	r3, #2
 800ca78:	d101      	bne.n	800ca7e <inc_lock+0x8a>
 800ca7a:	2300      	movs	r3, #0
 800ca7c:	e040      	b.n	800cb00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681a      	ldr	r2, [r3, #0]
 800ca82:	4922      	ldr	r1, [pc, #136]	@ (800cb0c <inc_lock+0x118>)
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	011b      	lsls	r3, r3, #4
 800ca88:	440b      	add	r3, r1
 800ca8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	689a      	ldr	r2, [r3, #8]
 800ca90:	491e      	ldr	r1, [pc, #120]	@ (800cb0c <inc_lock+0x118>)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	011b      	lsls	r3, r3, #4
 800ca96:	440b      	add	r3, r1
 800ca98:	3304      	adds	r3, #4
 800ca9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	695a      	ldr	r2, [r3, #20]
 800caa0:	491a      	ldr	r1, [pc, #104]	@ (800cb0c <inc_lock+0x118>)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	011b      	lsls	r3, r3, #4
 800caa6:	440b      	add	r3, r1
 800caa8:	3308      	adds	r3, #8
 800caaa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800caac:	4a17      	ldr	r2, [pc, #92]	@ (800cb0c <inc_lock+0x118>)
 800caae:	68fb      	ldr	r3, [r7, #12]
 800cab0:	011b      	lsls	r3, r3, #4
 800cab2:	4413      	add	r3, r2
 800cab4:	330c      	adds	r3, #12
 800cab6:	2200      	movs	r2, #0
 800cab8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800caba:	683b      	ldr	r3, [r7, #0]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d009      	beq.n	800cad4 <inc_lock+0xe0>
 800cac0:	4a12      	ldr	r2, [pc, #72]	@ (800cb0c <inc_lock+0x118>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	011b      	lsls	r3, r3, #4
 800cac6:	4413      	add	r3, r2
 800cac8:	330c      	adds	r3, #12
 800caca:	881b      	ldrh	r3, [r3, #0]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d001      	beq.n	800cad4 <inc_lock+0xe0>
 800cad0:	2300      	movs	r3, #0
 800cad2:	e015      	b.n	800cb00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d108      	bne.n	800caec <inc_lock+0xf8>
 800cada:	4a0c      	ldr	r2, [pc, #48]	@ (800cb0c <inc_lock+0x118>)
 800cadc:	68fb      	ldr	r3, [r7, #12]
 800cade:	011b      	lsls	r3, r3, #4
 800cae0:	4413      	add	r3, r2
 800cae2:	330c      	adds	r3, #12
 800cae4:	881b      	ldrh	r3, [r3, #0]
 800cae6:	3301      	adds	r3, #1
 800cae8:	b29a      	uxth	r2, r3
 800caea:	e001      	b.n	800caf0 <inc_lock+0xfc>
 800caec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caf0:	4906      	ldr	r1, [pc, #24]	@ (800cb0c <inc_lock+0x118>)
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	011b      	lsls	r3, r3, #4
 800caf6:	440b      	add	r3, r1
 800caf8:	330c      	adds	r3, #12
 800cafa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	3301      	adds	r3, #1
}
 800cb00:	4618      	mov	r0, r3
 800cb02:	3714      	adds	r7, #20
 800cb04:	46bd      	mov	sp, r7
 800cb06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb0a:	4770      	bx	lr
 800cb0c:	20000400 	.word	0x20000400

0800cb10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cb10:	b480      	push	{r7}
 800cb12:	b085      	sub	sp, #20
 800cb14:	af00      	add	r7, sp, #0
 800cb16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	607b      	str	r3, [r7, #4]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d825      	bhi.n	800cb70 <dec_lock+0x60>
		n = Files[i].ctr;
 800cb24:	4a17      	ldr	r2, [pc, #92]	@ (800cb84 <dec_lock+0x74>)
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	011b      	lsls	r3, r3, #4
 800cb2a:	4413      	add	r3, r2
 800cb2c:	330c      	adds	r3, #12
 800cb2e:	881b      	ldrh	r3, [r3, #0]
 800cb30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cb32:	89fb      	ldrh	r3, [r7, #14]
 800cb34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb38:	d101      	bne.n	800cb3e <dec_lock+0x2e>
 800cb3a:	2300      	movs	r3, #0
 800cb3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cb3e:	89fb      	ldrh	r3, [r7, #14]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d002      	beq.n	800cb4a <dec_lock+0x3a>
 800cb44:	89fb      	ldrh	r3, [r7, #14]
 800cb46:	3b01      	subs	r3, #1
 800cb48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cb4a:	4a0e      	ldr	r2, [pc, #56]	@ (800cb84 <dec_lock+0x74>)
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	011b      	lsls	r3, r3, #4
 800cb50:	4413      	add	r3, r2
 800cb52:	330c      	adds	r3, #12
 800cb54:	89fa      	ldrh	r2, [r7, #14]
 800cb56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cb58:	89fb      	ldrh	r3, [r7, #14]
 800cb5a:	2b00      	cmp	r3, #0
 800cb5c:	d105      	bne.n	800cb6a <dec_lock+0x5a>
 800cb5e:	4a09      	ldr	r2, [pc, #36]	@ (800cb84 <dec_lock+0x74>)
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	011b      	lsls	r3, r3, #4
 800cb64:	4413      	add	r3, r2
 800cb66:	2200      	movs	r2, #0
 800cb68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	737b      	strb	r3, [r7, #13]
 800cb6e:	e001      	b.n	800cb74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cb70:	2302      	movs	r3, #2
 800cb72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cb74:	7b7b      	ldrb	r3, [r7, #13]
}
 800cb76:	4618      	mov	r0, r3
 800cb78:	3714      	adds	r7, #20
 800cb7a:	46bd      	mov	sp, r7
 800cb7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb80:	4770      	bx	lr
 800cb82:	bf00      	nop
 800cb84:	20000400 	.word	0x20000400

0800cb88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cb88:	b480      	push	{r7}
 800cb8a:	b085      	sub	sp, #20
 800cb8c:	af00      	add	r7, sp, #0
 800cb8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cb90:	2300      	movs	r3, #0
 800cb92:	60fb      	str	r3, [r7, #12]
 800cb94:	e010      	b.n	800cbb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cb96:	4a0d      	ldr	r2, [pc, #52]	@ (800cbcc <clear_lock+0x44>)
 800cb98:	68fb      	ldr	r3, [r7, #12]
 800cb9a:	011b      	lsls	r3, r3, #4
 800cb9c:	4413      	add	r3, r2
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	687a      	ldr	r2, [r7, #4]
 800cba2:	429a      	cmp	r2, r3
 800cba4:	d105      	bne.n	800cbb2 <clear_lock+0x2a>
 800cba6:	4a09      	ldr	r2, [pc, #36]	@ (800cbcc <clear_lock+0x44>)
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	011b      	lsls	r3, r3, #4
 800cbac:	4413      	add	r3, r2
 800cbae:	2200      	movs	r2, #0
 800cbb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	60fb      	str	r3, [r7, #12]
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	2b01      	cmp	r3, #1
 800cbbc:	d9eb      	bls.n	800cb96 <clear_lock+0xe>
	}
}
 800cbbe:	bf00      	nop
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr
 800cbcc:	20000400 	.word	0x20000400

0800cbd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cbd0:	b580      	push	{r7, lr}
 800cbd2:	b086      	sub	sp, #24
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cbd8:	2300      	movs	r3, #0
 800cbda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	78db      	ldrb	r3, [r3, #3]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d034      	beq.n	800cc4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbe8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	7858      	ldrb	r0, [r3, #1]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	f7ff fd40 	bl	800c67c <disk_write>
 800cbfc:	4603      	mov	r3, r0
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	d002      	beq.n	800cc08 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cc02:	2301      	movs	r3, #1
 800cc04:	73fb      	strb	r3, [r7, #15]
 800cc06:	e022      	b.n	800cc4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	2200      	movs	r2, #0
 800cc0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	6a1b      	ldr	r3, [r3, #32]
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	1ad2      	subs	r2, r2, r3
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	699b      	ldr	r3, [r3, #24]
 800cc1a:	429a      	cmp	r2, r3
 800cc1c:	d217      	bcs.n	800cc4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	789b      	ldrb	r3, [r3, #2]
 800cc22:	613b      	str	r3, [r7, #16]
 800cc24:	e010      	b.n	800cc48 <sync_window+0x78>
					wsect += fs->fsize;
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	699b      	ldr	r3, [r3, #24]
 800cc2a:	697a      	ldr	r2, [r7, #20]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc30:	687b      	ldr	r3, [r7, #4]
 800cc32:	7858      	ldrb	r0, [r3, #1]
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	697a      	ldr	r2, [r7, #20]
 800cc3e:	f7ff fd1d 	bl	800c67c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	3b01      	subs	r3, #1
 800cc46:	613b      	str	r3, [r7, #16]
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	2b01      	cmp	r3, #1
 800cc4c:	d8eb      	bhi.n	800cc26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cc4e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3718      	adds	r7, #24
 800cc54:	46bd      	mov	sp, r7
 800cc56:	bd80      	pop	{r7, pc}

0800cc58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
 800cc60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cc62:	2300      	movs	r3, #0
 800cc64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc6a:	683a      	ldr	r2, [r7, #0]
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d01b      	beq.n	800cca8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cc70:	6878      	ldr	r0, [r7, #4]
 800cc72:	f7ff ffad 	bl	800cbd0 <sync_window>
 800cc76:	4603      	mov	r3, r0
 800cc78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cc7a:	7bfb      	ldrb	r3, [r7, #15]
 800cc7c:	2b00      	cmp	r3, #0
 800cc7e:	d113      	bne.n	800cca8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	7858      	ldrb	r0, [r3, #1]
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc8a:	2301      	movs	r3, #1
 800cc8c:	683a      	ldr	r2, [r7, #0]
 800cc8e:	f7ff fcd5 	bl	800c63c <disk_read>
 800cc92:	4603      	mov	r3, r0
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cc98:	f04f 33ff 	mov.w	r3, #4294967295
 800cc9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cc9e:	2301      	movs	r3, #1
 800cca0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	683a      	ldr	r2, [r7, #0]
 800cca6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cca8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccaa:	4618      	mov	r0, r3
 800ccac:	3710      	adds	r7, #16
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd80      	pop	{r7, pc}
	...

0800ccb4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ccb4:	b580      	push	{r7, lr}
 800ccb6:	b084      	sub	sp, #16
 800ccb8:	af00      	add	r7, sp, #0
 800ccba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ccbc:	6878      	ldr	r0, [r7, #4]
 800ccbe:	f7ff ff87 	bl	800cbd0 <sync_window>
 800ccc2:	4603      	mov	r3, r0
 800ccc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d158      	bne.n	800cd7e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	781b      	ldrb	r3, [r3, #0]
 800ccd0:	2b03      	cmp	r3, #3
 800ccd2:	d148      	bne.n	800cd66 <sync_fs+0xb2>
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	791b      	ldrb	r3, [r3, #4]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d144      	bne.n	800cd66 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	3330      	adds	r3, #48	@ 0x30
 800cce0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cce4:	2100      	movs	r1, #0
 800cce6:	4618      	mov	r0, r3
 800cce8:	f7ff fda9 	bl	800c83e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	3330      	adds	r3, #48	@ 0x30
 800ccf0:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800ccf4:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800ccf8:	4618      	mov	r0, r3
 800ccfa:	f7ff fd38 	bl	800c76e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	3330      	adds	r3, #48	@ 0x30
 800cd02:	4921      	ldr	r1, [pc, #132]	@ (800cd88 <sync_fs+0xd4>)
 800cd04:	4618      	mov	r0, r3
 800cd06:	f7ff fd4d 	bl	800c7a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cd0a:	687b      	ldr	r3, [r7, #4]
 800cd0c:	3330      	adds	r3, #48	@ 0x30
 800cd0e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd12:	491e      	ldr	r1, [pc, #120]	@ (800cd8c <sync_fs+0xd8>)
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff fd45 	bl	800c7a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	3330      	adds	r3, #48	@ 0x30
 800cd1e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	691b      	ldr	r3, [r3, #16]
 800cd26:	4619      	mov	r1, r3
 800cd28:	4610      	mov	r0, r2
 800cd2a:	f7ff fd3b 	bl	800c7a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	3330      	adds	r3, #48	@ 0x30
 800cd32:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	68db      	ldr	r3, [r3, #12]
 800cd3a:	4619      	mov	r1, r3
 800cd3c:	4610      	mov	r0, r2
 800cd3e:	f7ff fd31 	bl	800c7a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	69db      	ldr	r3, [r3, #28]
 800cd46:	1c5a      	adds	r2, r3, #1
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	7858      	ldrb	r0, [r3, #1]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	f7ff fc8e 	bl	800c67c <disk_write>
			fs->fsi_flag = 0;
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	785b      	ldrb	r3, [r3, #1]
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	2100      	movs	r1, #0
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f7ff fca4 	bl	800c6bc <disk_ioctl>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d001      	beq.n	800cd7e <sync_fs+0xca>
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cd7e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd80:	4618      	mov	r0, r3
 800cd82:	3710      	adds	r7, #16
 800cd84:	46bd      	mov	sp, r7
 800cd86:	bd80      	pop	{r7, pc}
 800cd88:	41615252 	.word	0x41615252
 800cd8c:	61417272 	.word	0x61417272

0800cd90 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cd90:	b480      	push	{r7}
 800cd92:	b083      	sub	sp, #12
 800cd94:	af00      	add	r7, sp, #0
 800cd96:	6078      	str	r0, [r7, #4]
 800cd98:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cd9a:	683b      	ldr	r3, [r7, #0]
 800cd9c:	3b02      	subs	r3, #2
 800cd9e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cda0:	687b      	ldr	r3, [r7, #4]
 800cda2:	695b      	ldr	r3, [r3, #20]
 800cda4:	3b02      	subs	r3, #2
 800cda6:	683a      	ldr	r2, [r7, #0]
 800cda8:	429a      	cmp	r2, r3
 800cdaa:	d301      	bcc.n	800cdb0 <clust2sect+0x20>
 800cdac:	2300      	movs	r3, #0
 800cdae:	e008      	b.n	800cdc2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	895b      	ldrh	r3, [r3, #10]
 800cdb4:	461a      	mov	r2, r3
 800cdb6:	683b      	ldr	r3, [r7, #0]
 800cdb8:	fb03 f202 	mul.w	r2, r3, r2
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cdc0:	4413      	add	r3, r2
}
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	370c      	adds	r7, #12
 800cdc6:	46bd      	mov	sp, r7
 800cdc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdcc:	4770      	bx	lr

0800cdce <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cdce:	b580      	push	{r7, lr}
 800cdd0:	b086      	sub	sp, #24
 800cdd2:	af00      	add	r7, sp, #0
 800cdd4:	6078      	str	r0, [r7, #4]
 800cdd6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	2b01      	cmp	r3, #1
 800cde2:	d904      	bls.n	800cdee <get_fat+0x20>
 800cde4:	693b      	ldr	r3, [r7, #16]
 800cde6:	695b      	ldr	r3, [r3, #20]
 800cde8:	683a      	ldr	r2, [r7, #0]
 800cdea:	429a      	cmp	r2, r3
 800cdec:	d302      	bcc.n	800cdf4 <get_fat+0x26>
		val = 1;	/* Internal error */
 800cdee:	2301      	movs	r3, #1
 800cdf0:	617b      	str	r3, [r7, #20]
 800cdf2:	e08e      	b.n	800cf12 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cdf4:	f04f 33ff 	mov.w	r3, #4294967295
 800cdf8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cdfa:	693b      	ldr	r3, [r7, #16]
 800cdfc:	781b      	ldrb	r3, [r3, #0]
 800cdfe:	2b03      	cmp	r3, #3
 800ce00:	d061      	beq.n	800cec6 <get_fat+0xf8>
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	dc7b      	bgt.n	800cefe <get_fat+0x130>
 800ce06:	2b01      	cmp	r3, #1
 800ce08:	d002      	beq.n	800ce10 <get_fat+0x42>
 800ce0a:	2b02      	cmp	r3, #2
 800ce0c:	d041      	beq.n	800ce92 <get_fat+0xc4>
 800ce0e:	e076      	b.n	800cefe <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	60fb      	str	r3, [r7, #12]
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	085b      	lsrs	r3, r3, #1
 800ce18:	68fa      	ldr	r2, [r7, #12]
 800ce1a:	4413      	add	r3, r2
 800ce1c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce1e:	693b      	ldr	r3, [r7, #16]
 800ce20:	6a1a      	ldr	r2, [r3, #32]
 800ce22:	68fb      	ldr	r3, [r7, #12]
 800ce24:	0a5b      	lsrs	r3, r3, #9
 800ce26:	4413      	add	r3, r2
 800ce28:	4619      	mov	r1, r3
 800ce2a:	6938      	ldr	r0, [r7, #16]
 800ce2c:	f7ff ff14 	bl	800cc58 <move_window>
 800ce30:	4603      	mov	r3, r0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d166      	bne.n	800cf04 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	1c5a      	adds	r2, r3, #1
 800ce3a:	60fa      	str	r2, [r7, #12]
 800ce3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce40:	693a      	ldr	r2, [r7, #16]
 800ce42:	4413      	add	r3, r2
 800ce44:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce48:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce4a:	693b      	ldr	r3, [r7, #16]
 800ce4c:	6a1a      	ldr	r2, [r3, #32]
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	0a5b      	lsrs	r3, r3, #9
 800ce52:	4413      	add	r3, r2
 800ce54:	4619      	mov	r1, r3
 800ce56:	6938      	ldr	r0, [r7, #16]
 800ce58:	f7ff fefe 	bl	800cc58 <move_window>
 800ce5c:	4603      	mov	r3, r0
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d152      	bne.n	800cf08 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce68:	693a      	ldr	r2, [r7, #16]
 800ce6a:	4413      	add	r3, r2
 800ce6c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce70:	021b      	lsls	r3, r3, #8
 800ce72:	68ba      	ldr	r2, [r7, #8]
 800ce74:	4313      	orrs	r3, r2
 800ce76:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	f003 0301 	and.w	r3, r3, #1
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d002      	beq.n	800ce88 <get_fat+0xba>
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	091b      	lsrs	r3, r3, #4
 800ce86:	e002      	b.n	800ce8e <get_fat+0xc0>
 800ce88:	68bb      	ldr	r3, [r7, #8]
 800ce8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ce8e:	617b      	str	r3, [r7, #20]
			break;
 800ce90:	e03f      	b.n	800cf12 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce92:	693b      	ldr	r3, [r7, #16]
 800ce94:	6a1a      	ldr	r2, [r3, #32]
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	0a1b      	lsrs	r3, r3, #8
 800ce9a:	4413      	add	r3, r2
 800ce9c:	4619      	mov	r1, r3
 800ce9e:	6938      	ldr	r0, [r7, #16]
 800cea0:	f7ff feda 	bl	800cc58 <move_window>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d130      	bne.n	800cf0c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ceaa:	693b      	ldr	r3, [r7, #16]
 800ceac:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ceb0:	683b      	ldr	r3, [r7, #0]
 800ceb2:	005b      	lsls	r3, r3, #1
 800ceb4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ceb8:	4413      	add	r3, r2
 800ceba:	4618      	mov	r0, r3
 800cebc:	f7ff fc1c 	bl	800c6f8 <ld_word>
 800cec0:	4603      	mov	r3, r0
 800cec2:	617b      	str	r3, [r7, #20]
			break;
 800cec4:	e025      	b.n	800cf12 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cec6:	693b      	ldr	r3, [r7, #16]
 800cec8:	6a1a      	ldr	r2, [r3, #32]
 800ceca:	683b      	ldr	r3, [r7, #0]
 800cecc:	09db      	lsrs	r3, r3, #7
 800cece:	4413      	add	r3, r2
 800ced0:	4619      	mov	r1, r3
 800ced2:	6938      	ldr	r0, [r7, #16]
 800ced4:	f7ff fec0 	bl	800cc58 <move_window>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d118      	bne.n	800cf10 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cee4:	683b      	ldr	r3, [r7, #0]
 800cee6:	009b      	lsls	r3, r3, #2
 800cee8:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ceec:	4413      	add	r3, r2
 800ceee:	4618      	mov	r0, r3
 800cef0:	f7ff fc1a 	bl	800c728 <ld_dword>
 800cef4:	4603      	mov	r3, r0
 800cef6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cefa:	617b      	str	r3, [r7, #20]
			break;
 800cefc:	e009      	b.n	800cf12 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cefe:	2301      	movs	r3, #1
 800cf00:	617b      	str	r3, [r7, #20]
 800cf02:	e006      	b.n	800cf12 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf04:	bf00      	nop
 800cf06:	e004      	b.n	800cf12 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf08:	bf00      	nop
 800cf0a:	e002      	b.n	800cf12 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf0c:	bf00      	nop
 800cf0e:	e000      	b.n	800cf12 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf10:	bf00      	nop
		}
	}

	return val;
 800cf12:	697b      	ldr	r3, [r7, #20]
}
 800cf14:	4618      	mov	r0, r3
 800cf16:	3718      	adds	r7, #24
 800cf18:	46bd      	mov	sp, r7
 800cf1a:	bd80      	pop	{r7, pc}

0800cf1c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cf1c:	b590      	push	{r4, r7, lr}
 800cf1e:	b089      	sub	sp, #36	@ 0x24
 800cf20:	af00      	add	r7, sp, #0
 800cf22:	60f8      	str	r0, [r7, #12]
 800cf24:	60b9      	str	r1, [r7, #8]
 800cf26:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cf28:	2302      	movs	r3, #2
 800cf2a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cf2c:	68bb      	ldr	r3, [r7, #8]
 800cf2e:	2b01      	cmp	r3, #1
 800cf30:	f240 80d9 	bls.w	800d0e6 <put_fat+0x1ca>
 800cf34:	68fb      	ldr	r3, [r7, #12]
 800cf36:	695b      	ldr	r3, [r3, #20]
 800cf38:	68ba      	ldr	r2, [r7, #8]
 800cf3a:	429a      	cmp	r2, r3
 800cf3c:	f080 80d3 	bcs.w	800d0e6 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cf40:	68fb      	ldr	r3, [r7, #12]
 800cf42:	781b      	ldrb	r3, [r3, #0]
 800cf44:	2b03      	cmp	r3, #3
 800cf46:	f000 8096 	beq.w	800d076 <put_fat+0x15a>
 800cf4a:	2b03      	cmp	r3, #3
 800cf4c:	f300 80cb 	bgt.w	800d0e6 <put_fat+0x1ca>
 800cf50:	2b01      	cmp	r3, #1
 800cf52:	d002      	beq.n	800cf5a <put_fat+0x3e>
 800cf54:	2b02      	cmp	r3, #2
 800cf56:	d06e      	beq.n	800d036 <put_fat+0x11a>
 800cf58:	e0c5      	b.n	800d0e6 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cf5a:	68bb      	ldr	r3, [r7, #8]
 800cf5c:	61bb      	str	r3, [r7, #24]
 800cf5e:	69bb      	ldr	r3, [r7, #24]
 800cf60:	085b      	lsrs	r3, r3, #1
 800cf62:	69ba      	ldr	r2, [r7, #24]
 800cf64:	4413      	add	r3, r2
 800cf66:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6a1a      	ldr	r2, [r3, #32]
 800cf6c:	69bb      	ldr	r3, [r7, #24]
 800cf6e:	0a5b      	lsrs	r3, r3, #9
 800cf70:	4413      	add	r3, r2
 800cf72:	4619      	mov	r1, r3
 800cf74:	68f8      	ldr	r0, [r7, #12]
 800cf76:	f7ff fe6f 	bl	800cc58 <move_window>
 800cf7a:	4603      	mov	r3, r0
 800cf7c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf7e:	7ffb      	ldrb	r3, [r7, #31]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	f040 80a9 	bne.w	800d0d8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	1c59      	adds	r1, r3, #1
 800cf90:	61b9      	str	r1, [r7, #24]
 800cf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf96:	4413      	add	r3, r2
 800cf98:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cf9a:	68bb      	ldr	r3, [r7, #8]
 800cf9c:	f003 0301 	and.w	r3, r3, #1
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d00d      	beq.n	800cfc0 <put_fat+0xa4>
 800cfa4:	697b      	ldr	r3, [r7, #20]
 800cfa6:	781b      	ldrb	r3, [r3, #0]
 800cfa8:	b25b      	sxtb	r3, r3
 800cfaa:	f003 030f 	and.w	r3, r3, #15
 800cfae:	b25a      	sxtb	r2, r3
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	b2db      	uxtb	r3, r3
 800cfb4:	011b      	lsls	r3, r3, #4
 800cfb6:	b25b      	sxtb	r3, r3
 800cfb8:	4313      	orrs	r3, r2
 800cfba:	b25b      	sxtb	r3, r3
 800cfbc:	b2db      	uxtb	r3, r3
 800cfbe:	e001      	b.n	800cfc4 <put_fat+0xa8>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	b2db      	uxtb	r3, r3
 800cfc4:	697a      	ldr	r2, [r7, #20]
 800cfc6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cfc8:	68fb      	ldr	r3, [r7, #12]
 800cfca:	2201      	movs	r2, #1
 800cfcc:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	6a1a      	ldr	r2, [r3, #32]
 800cfd2:	69bb      	ldr	r3, [r7, #24]
 800cfd4:	0a5b      	lsrs	r3, r3, #9
 800cfd6:	4413      	add	r3, r2
 800cfd8:	4619      	mov	r1, r3
 800cfda:	68f8      	ldr	r0, [r7, #12]
 800cfdc:	f7ff fe3c 	bl	800cc58 <move_window>
 800cfe0:	4603      	mov	r3, r0
 800cfe2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfe4:	7ffb      	ldrb	r3, [r7, #31]
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d178      	bne.n	800d0dc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cff0:	69bb      	ldr	r3, [r7, #24]
 800cff2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cff6:	4413      	add	r3, r2
 800cff8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cffa:	68bb      	ldr	r3, [r7, #8]
 800cffc:	f003 0301 	and.w	r3, r3, #1
 800d000:	2b00      	cmp	r3, #0
 800d002:	d003      	beq.n	800d00c <put_fat+0xf0>
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	091b      	lsrs	r3, r3, #4
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	e00e      	b.n	800d02a <put_fat+0x10e>
 800d00c:	697b      	ldr	r3, [r7, #20]
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	b25b      	sxtb	r3, r3
 800d012:	f023 030f 	bic.w	r3, r3, #15
 800d016:	b25a      	sxtb	r2, r3
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	0a1b      	lsrs	r3, r3, #8
 800d01c:	b25b      	sxtb	r3, r3
 800d01e:	f003 030f 	and.w	r3, r3, #15
 800d022:	b25b      	sxtb	r3, r3
 800d024:	4313      	orrs	r3, r2
 800d026:	b25b      	sxtb	r3, r3
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	2201      	movs	r2, #1
 800d032:	70da      	strb	r2, [r3, #3]
			break;
 800d034:	e057      	b.n	800d0e6 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d036:	68fb      	ldr	r3, [r7, #12]
 800d038:	6a1a      	ldr	r2, [r3, #32]
 800d03a:	68bb      	ldr	r3, [r7, #8]
 800d03c:	0a1b      	lsrs	r3, r3, #8
 800d03e:	4413      	add	r3, r2
 800d040:	4619      	mov	r1, r3
 800d042:	68f8      	ldr	r0, [r7, #12]
 800d044:	f7ff fe08 	bl	800cc58 <move_window>
 800d048:	4603      	mov	r3, r0
 800d04a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d04c:	7ffb      	ldrb	r3, [r7, #31]
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d146      	bne.n	800d0e0 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	005b      	lsls	r3, r3, #1
 800d05c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d060:	4413      	add	r3, r2
 800d062:	687a      	ldr	r2, [r7, #4]
 800d064:	b292      	uxth	r2, r2
 800d066:	4611      	mov	r1, r2
 800d068:	4618      	mov	r0, r3
 800d06a:	f7ff fb80 	bl	800c76e <st_word>
			fs->wflag = 1;
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	2201      	movs	r2, #1
 800d072:	70da      	strb	r2, [r3, #3]
			break;
 800d074:	e037      	b.n	800d0e6 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	6a1a      	ldr	r2, [r3, #32]
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	09db      	lsrs	r3, r3, #7
 800d07e:	4413      	add	r3, r2
 800d080:	4619      	mov	r1, r3
 800d082:	68f8      	ldr	r0, [r7, #12]
 800d084:	f7ff fde8 	bl	800cc58 <move_window>
 800d088:	4603      	mov	r3, r0
 800d08a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d08c:	7ffb      	ldrb	r3, [r7, #31]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d128      	bne.n	800d0e4 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d098:	68fb      	ldr	r3, [r7, #12]
 800d09a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d09e:	68bb      	ldr	r3, [r7, #8]
 800d0a0:	009b      	lsls	r3, r3, #2
 800d0a2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d0a6:	4413      	add	r3, r2
 800d0a8:	4618      	mov	r0, r3
 800d0aa:	f7ff fb3d 	bl	800c728 <ld_dword>
 800d0ae:	4603      	mov	r3, r0
 800d0b0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d0b4:	4323      	orrs	r3, r4
 800d0b6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d0c6:	4413      	add	r3, r2
 800d0c8:	6879      	ldr	r1, [r7, #4]
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	f7ff fb6a 	bl	800c7a4 <st_dword>
			fs->wflag = 1;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2201      	movs	r2, #1
 800d0d4:	70da      	strb	r2, [r3, #3]
			break;
 800d0d6:	e006      	b.n	800d0e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0d8:	bf00      	nop
 800d0da:	e004      	b.n	800d0e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0dc:	bf00      	nop
 800d0de:	e002      	b.n	800d0e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0e0:	bf00      	nop
 800d0e2:	e000      	b.n	800d0e6 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0e4:	bf00      	nop
		}
	}
	return res;
 800d0e6:	7ffb      	ldrb	r3, [r7, #31]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3724      	adds	r7, #36	@ 0x24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd90      	pop	{r4, r7, pc}

0800d0f0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b088      	sub	sp, #32
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	60f8      	str	r0, [r7, #12]
 800d0f8:	60b9      	str	r1, [r7, #8]
 800d0fa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d0fc:	2300      	movs	r3, #0
 800d0fe:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d106:	68bb      	ldr	r3, [r7, #8]
 800d108:	2b01      	cmp	r3, #1
 800d10a:	d904      	bls.n	800d116 <remove_chain+0x26>
 800d10c:	69bb      	ldr	r3, [r7, #24]
 800d10e:	695b      	ldr	r3, [r3, #20]
 800d110:	68ba      	ldr	r2, [r7, #8]
 800d112:	429a      	cmp	r2, r3
 800d114:	d301      	bcc.n	800d11a <remove_chain+0x2a>
 800d116:	2302      	movs	r3, #2
 800d118:	e04b      	b.n	800d1b2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	2b00      	cmp	r3, #0
 800d11e:	d00c      	beq.n	800d13a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d120:	f04f 32ff 	mov.w	r2, #4294967295
 800d124:	6879      	ldr	r1, [r7, #4]
 800d126:	69b8      	ldr	r0, [r7, #24]
 800d128:	f7ff fef8 	bl	800cf1c <put_fat>
 800d12c:	4603      	mov	r3, r0
 800d12e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d130:	7ffb      	ldrb	r3, [r7, #31]
 800d132:	2b00      	cmp	r3, #0
 800d134:	d001      	beq.n	800d13a <remove_chain+0x4a>
 800d136:	7ffb      	ldrb	r3, [r7, #31]
 800d138:	e03b      	b.n	800d1b2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d13a:	68b9      	ldr	r1, [r7, #8]
 800d13c:	68f8      	ldr	r0, [r7, #12]
 800d13e:	f7ff fe46 	bl	800cdce <get_fat>
 800d142:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d144:	697b      	ldr	r3, [r7, #20]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d031      	beq.n	800d1ae <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d14a:	697b      	ldr	r3, [r7, #20]
 800d14c:	2b01      	cmp	r3, #1
 800d14e:	d101      	bne.n	800d154 <remove_chain+0x64>
 800d150:	2302      	movs	r3, #2
 800d152:	e02e      	b.n	800d1b2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d154:	697b      	ldr	r3, [r7, #20]
 800d156:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d15a:	d101      	bne.n	800d160 <remove_chain+0x70>
 800d15c:	2301      	movs	r3, #1
 800d15e:	e028      	b.n	800d1b2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d160:	2200      	movs	r2, #0
 800d162:	68b9      	ldr	r1, [r7, #8]
 800d164:	69b8      	ldr	r0, [r7, #24]
 800d166:	f7ff fed9 	bl	800cf1c <put_fat>
 800d16a:	4603      	mov	r3, r0
 800d16c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d16e:	7ffb      	ldrb	r3, [r7, #31]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d001      	beq.n	800d178 <remove_chain+0x88>
 800d174:	7ffb      	ldrb	r3, [r7, #31]
 800d176:	e01c      	b.n	800d1b2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d178:	69bb      	ldr	r3, [r7, #24]
 800d17a:	691a      	ldr	r2, [r3, #16]
 800d17c:	69bb      	ldr	r3, [r7, #24]
 800d17e:	695b      	ldr	r3, [r3, #20]
 800d180:	3b02      	subs	r3, #2
 800d182:	429a      	cmp	r2, r3
 800d184:	d20b      	bcs.n	800d19e <remove_chain+0xae>
			fs->free_clst++;
 800d186:	69bb      	ldr	r3, [r7, #24]
 800d188:	691b      	ldr	r3, [r3, #16]
 800d18a:	1c5a      	adds	r2, r3, #1
 800d18c:	69bb      	ldr	r3, [r7, #24]
 800d18e:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d190:	69bb      	ldr	r3, [r7, #24]
 800d192:	791b      	ldrb	r3, [r3, #4]
 800d194:	f043 0301 	orr.w	r3, r3, #1
 800d198:	b2da      	uxtb	r2, r3
 800d19a:	69bb      	ldr	r3, [r7, #24]
 800d19c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d19e:	697b      	ldr	r3, [r7, #20]
 800d1a0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d1a2:	69bb      	ldr	r3, [r7, #24]
 800d1a4:	695b      	ldr	r3, [r3, #20]
 800d1a6:	68ba      	ldr	r2, [r7, #8]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d3c6      	bcc.n	800d13a <remove_chain+0x4a>
 800d1ac:	e000      	b.n	800d1b0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d1ae:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d1b0:	2300      	movs	r3, #0
}
 800d1b2:	4618      	mov	r0, r3
 800d1b4:	3720      	adds	r7, #32
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}

0800d1ba <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d1ba:	b580      	push	{r7, lr}
 800d1bc:	b088      	sub	sp, #32
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
 800d1c2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10d      	bne.n	800d1ec <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d1d0:	693b      	ldr	r3, [r7, #16]
 800d1d2:	68db      	ldr	r3, [r3, #12]
 800d1d4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d1d6:	69bb      	ldr	r3, [r7, #24]
 800d1d8:	2b00      	cmp	r3, #0
 800d1da:	d004      	beq.n	800d1e6 <create_chain+0x2c>
 800d1dc:	693b      	ldr	r3, [r7, #16]
 800d1de:	695b      	ldr	r3, [r3, #20]
 800d1e0:	69ba      	ldr	r2, [r7, #24]
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d31b      	bcc.n	800d21e <create_chain+0x64>
 800d1e6:	2301      	movs	r3, #1
 800d1e8:	61bb      	str	r3, [r7, #24]
 800d1ea:	e018      	b.n	800d21e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d1ec:	6839      	ldr	r1, [r7, #0]
 800d1ee:	6878      	ldr	r0, [r7, #4]
 800d1f0:	f7ff fded 	bl	800cdce <get_fat>
 800d1f4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d1f6:	68fb      	ldr	r3, [r7, #12]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d801      	bhi.n	800d200 <create_chain+0x46>
 800d1fc:	2301      	movs	r3, #1
 800d1fe:	e070      	b.n	800d2e2 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d206:	d101      	bne.n	800d20c <create_chain+0x52>
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	e06a      	b.n	800d2e2 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	695b      	ldr	r3, [r3, #20]
 800d210:	68fa      	ldr	r2, [r7, #12]
 800d212:	429a      	cmp	r2, r3
 800d214:	d201      	bcs.n	800d21a <create_chain+0x60>
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	e063      	b.n	800d2e2 <create_chain+0x128>
		scl = clst;
 800d21a:	683b      	ldr	r3, [r7, #0]
 800d21c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d222:	69fb      	ldr	r3, [r7, #28]
 800d224:	3301      	adds	r3, #1
 800d226:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d228:	693b      	ldr	r3, [r7, #16]
 800d22a:	695b      	ldr	r3, [r3, #20]
 800d22c:	69fa      	ldr	r2, [r7, #28]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d307      	bcc.n	800d242 <create_chain+0x88>
				ncl = 2;
 800d232:	2302      	movs	r3, #2
 800d234:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d236:	69fa      	ldr	r2, [r7, #28]
 800d238:	69bb      	ldr	r3, [r7, #24]
 800d23a:	429a      	cmp	r2, r3
 800d23c:	d901      	bls.n	800d242 <create_chain+0x88>
 800d23e:	2300      	movs	r3, #0
 800d240:	e04f      	b.n	800d2e2 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d242:	69f9      	ldr	r1, [r7, #28]
 800d244:	6878      	ldr	r0, [r7, #4]
 800d246:	f7ff fdc2 	bl	800cdce <get_fat>
 800d24a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d00e      	beq.n	800d270 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d252:	68fb      	ldr	r3, [r7, #12]
 800d254:	2b01      	cmp	r3, #1
 800d256:	d003      	beq.n	800d260 <create_chain+0xa6>
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d25e:	d101      	bne.n	800d264 <create_chain+0xaa>
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	e03e      	b.n	800d2e2 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d264:	69fa      	ldr	r2, [r7, #28]
 800d266:	69bb      	ldr	r3, [r7, #24]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d1da      	bne.n	800d222 <create_chain+0x68>
 800d26c:	2300      	movs	r3, #0
 800d26e:	e038      	b.n	800d2e2 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d270:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d272:	f04f 32ff 	mov.w	r2, #4294967295
 800d276:	69f9      	ldr	r1, [r7, #28]
 800d278:	6938      	ldr	r0, [r7, #16]
 800d27a:	f7ff fe4f 	bl	800cf1c <put_fat>
 800d27e:	4603      	mov	r3, r0
 800d280:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d282:	7dfb      	ldrb	r3, [r7, #23]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <create_chain+0xe2>
 800d288:	683b      	ldr	r3, [r7, #0]
 800d28a:	2b00      	cmp	r3, #0
 800d28c:	d006      	beq.n	800d29c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d28e:	69fa      	ldr	r2, [r7, #28]
 800d290:	6839      	ldr	r1, [r7, #0]
 800d292:	6938      	ldr	r0, [r7, #16]
 800d294:	f7ff fe42 	bl	800cf1c <put_fat>
 800d298:	4603      	mov	r3, r0
 800d29a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d29c:	7dfb      	ldrb	r3, [r7, #23]
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d116      	bne.n	800d2d0 <create_chain+0x116>
		fs->last_clst = ncl;
 800d2a2:	693b      	ldr	r3, [r7, #16]
 800d2a4:	69fa      	ldr	r2, [r7, #28]
 800d2a6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	691a      	ldr	r2, [r3, #16]
 800d2ac:	693b      	ldr	r3, [r7, #16]
 800d2ae:	695b      	ldr	r3, [r3, #20]
 800d2b0:	3b02      	subs	r3, #2
 800d2b2:	429a      	cmp	r2, r3
 800d2b4:	d804      	bhi.n	800d2c0 <create_chain+0x106>
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	691b      	ldr	r3, [r3, #16]
 800d2ba:	1e5a      	subs	r2, r3, #1
 800d2bc:	693b      	ldr	r3, [r7, #16]
 800d2be:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d2c0:	693b      	ldr	r3, [r7, #16]
 800d2c2:	791b      	ldrb	r3, [r3, #4]
 800d2c4:	f043 0301 	orr.w	r3, r3, #1
 800d2c8:	b2da      	uxtb	r2, r3
 800d2ca:	693b      	ldr	r3, [r7, #16]
 800d2cc:	711a      	strb	r2, [r3, #4]
 800d2ce:	e007      	b.n	800d2e0 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d102      	bne.n	800d2dc <create_chain+0x122>
 800d2d6:	f04f 33ff 	mov.w	r3, #4294967295
 800d2da:	e000      	b.n	800d2de <create_chain+0x124>
 800d2dc:	2301      	movs	r3, #1
 800d2de:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d2e0:	69fb      	ldr	r3, [r7, #28]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3720      	adds	r7, #32
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}

0800d2ea <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d2ea:	b480      	push	{r7}
 800d2ec:	b087      	sub	sp, #28
 800d2ee:	af00      	add	r7, sp, #0
 800d2f0:	6078      	str	r0, [r7, #4]
 800d2f2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d2fe:	3304      	adds	r3, #4
 800d300:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	0a5b      	lsrs	r3, r3, #9
 800d306:	68fa      	ldr	r2, [r7, #12]
 800d308:	8952      	ldrh	r2, [r2, #10]
 800d30a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d30e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d310:	693b      	ldr	r3, [r7, #16]
 800d312:	1d1a      	adds	r2, r3, #4
 800d314:	613a      	str	r2, [r7, #16]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d31a:	68bb      	ldr	r3, [r7, #8]
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d101      	bne.n	800d324 <clmt_clust+0x3a>
 800d320:	2300      	movs	r3, #0
 800d322:	e010      	b.n	800d346 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d324:	697a      	ldr	r2, [r7, #20]
 800d326:	68bb      	ldr	r3, [r7, #8]
 800d328:	429a      	cmp	r2, r3
 800d32a:	d307      	bcc.n	800d33c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	68bb      	ldr	r3, [r7, #8]
 800d330:	1ad3      	subs	r3, r2, r3
 800d332:	617b      	str	r3, [r7, #20]
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3304      	adds	r3, #4
 800d338:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d33a:	e7e9      	b.n	800d310 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d33c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d33e:	693b      	ldr	r3, [r7, #16]
 800d340:	681a      	ldr	r2, [r3, #0]
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	4413      	add	r3, r2
}
 800d346:	4618      	mov	r0, r3
 800d348:	371c      	adds	r7, #28
 800d34a:	46bd      	mov	sp, r7
 800d34c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d350:	4770      	bx	lr

0800d352 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d352:	b580      	push	{r7, lr}
 800d354:	b086      	sub	sp, #24
 800d356:	af00      	add	r7, sp, #0
 800d358:	6078      	str	r0, [r7, #4]
 800d35a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d35c:	687b      	ldr	r3, [r7, #4]
 800d35e:	681b      	ldr	r3, [r3, #0]
 800d360:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d368:	d204      	bcs.n	800d374 <dir_sdi+0x22>
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	f003 031f 	and.w	r3, r3, #31
 800d370:	2b00      	cmp	r3, #0
 800d372:	d001      	beq.n	800d378 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d374:	2302      	movs	r3, #2
 800d376:	e063      	b.n	800d440 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d378:	687b      	ldr	r3, [r7, #4]
 800d37a:	683a      	ldr	r2, [r7, #0]
 800d37c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d37e:	687b      	ldr	r3, [r7, #4]
 800d380:	689b      	ldr	r3, [r3, #8]
 800d382:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d384:	697b      	ldr	r3, [r7, #20]
 800d386:	2b00      	cmp	r3, #0
 800d388:	d106      	bne.n	800d398 <dir_sdi+0x46>
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	781b      	ldrb	r3, [r3, #0]
 800d38e:	2b02      	cmp	r3, #2
 800d390:	d902      	bls.n	800d398 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d392:	693b      	ldr	r3, [r7, #16]
 800d394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d396:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d398:	697b      	ldr	r3, [r7, #20]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d10c      	bne.n	800d3b8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	095b      	lsrs	r3, r3, #5
 800d3a2:	693a      	ldr	r2, [r7, #16]
 800d3a4:	8912      	ldrh	r2, [r2, #8]
 800d3a6:	4293      	cmp	r3, r2
 800d3a8:	d301      	bcc.n	800d3ae <dir_sdi+0x5c>
 800d3aa:	2302      	movs	r3, #2
 800d3ac:	e048      	b.n	800d440 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	61da      	str	r2, [r3, #28]
 800d3b6:	e029      	b.n	800d40c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d3b8:	693b      	ldr	r3, [r7, #16]
 800d3ba:	895b      	ldrh	r3, [r3, #10]
 800d3bc:	025b      	lsls	r3, r3, #9
 800d3be:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d3c0:	e019      	b.n	800d3f6 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	6979      	ldr	r1, [r7, #20]
 800d3c6:	4618      	mov	r0, r3
 800d3c8:	f7ff fd01 	bl	800cdce <get_fat>
 800d3cc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3ce:	697b      	ldr	r3, [r7, #20]
 800d3d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d3d4:	d101      	bne.n	800d3da <dir_sdi+0x88>
 800d3d6:	2301      	movs	r3, #1
 800d3d8:	e032      	b.n	800d440 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d3da:	697b      	ldr	r3, [r7, #20]
 800d3dc:	2b01      	cmp	r3, #1
 800d3de:	d904      	bls.n	800d3ea <dir_sdi+0x98>
 800d3e0:	693b      	ldr	r3, [r7, #16]
 800d3e2:	695b      	ldr	r3, [r3, #20]
 800d3e4:	697a      	ldr	r2, [r7, #20]
 800d3e6:	429a      	cmp	r2, r3
 800d3e8:	d301      	bcc.n	800d3ee <dir_sdi+0x9c>
 800d3ea:	2302      	movs	r3, #2
 800d3ec:	e028      	b.n	800d440 <dir_sdi+0xee>
			ofs -= csz;
 800d3ee:	683a      	ldr	r2, [r7, #0]
 800d3f0:	68fb      	ldr	r3, [r7, #12]
 800d3f2:	1ad3      	subs	r3, r2, r3
 800d3f4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d3f6:	683a      	ldr	r2, [r7, #0]
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d2e1      	bcs.n	800d3c2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d3fe:	6979      	ldr	r1, [r7, #20]
 800d400:	6938      	ldr	r0, [r7, #16]
 800d402:	f7ff fcc5 	bl	800cd90 <clust2sect>
 800d406:	4602      	mov	r2, r0
 800d408:	687b      	ldr	r3, [r7, #4]
 800d40a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	697a      	ldr	r2, [r7, #20]
 800d410:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	69db      	ldr	r3, [r3, #28]
 800d416:	2b00      	cmp	r3, #0
 800d418:	d101      	bne.n	800d41e <dir_sdi+0xcc>
 800d41a:	2302      	movs	r3, #2
 800d41c:	e010      	b.n	800d440 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	69da      	ldr	r2, [r3, #28]
 800d422:	683b      	ldr	r3, [r7, #0]
 800d424:	0a5b      	lsrs	r3, r3, #9
 800d426:	441a      	add	r2, r3
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d42c:	693b      	ldr	r3, [r7, #16]
 800d42e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d438:	441a      	add	r2, r3
 800d43a:	687b      	ldr	r3, [r7, #4]
 800d43c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d43e:	2300      	movs	r3, #0
}
 800d440:	4618      	mov	r0, r3
 800d442:	3718      	adds	r7, #24
 800d444:	46bd      	mov	sp, r7
 800d446:	bd80      	pop	{r7, pc}

0800d448 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d448:	b580      	push	{r7, lr}
 800d44a:	b086      	sub	sp, #24
 800d44c:	af00      	add	r7, sp, #0
 800d44e:	6078      	str	r0, [r7, #4]
 800d450:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d452:	687b      	ldr	r3, [r7, #4]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	695b      	ldr	r3, [r3, #20]
 800d45c:	3320      	adds	r3, #32
 800d45e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	69db      	ldr	r3, [r3, #28]
 800d464:	2b00      	cmp	r3, #0
 800d466:	d003      	beq.n	800d470 <dir_next+0x28>
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d46e:	d301      	bcc.n	800d474 <dir_next+0x2c>
 800d470:	2304      	movs	r3, #4
 800d472:	e0aa      	b.n	800d5ca <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d474:	68bb      	ldr	r3, [r7, #8]
 800d476:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	f040 8098 	bne.w	800d5b0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	1c5a      	adds	r2, r3, #1
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	699b      	ldr	r3, [r3, #24]
 800d48e:	2b00      	cmp	r3, #0
 800d490:	d10b      	bne.n	800d4aa <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	095b      	lsrs	r3, r3, #5
 800d496:	68fa      	ldr	r2, [r7, #12]
 800d498:	8912      	ldrh	r2, [r2, #8]
 800d49a:	4293      	cmp	r3, r2
 800d49c:	f0c0 8088 	bcc.w	800d5b0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	2200      	movs	r2, #0
 800d4a4:	61da      	str	r2, [r3, #28]
 800d4a6:	2304      	movs	r3, #4
 800d4a8:	e08f      	b.n	800d5ca <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d4aa:	68bb      	ldr	r3, [r7, #8]
 800d4ac:	0a5b      	lsrs	r3, r3, #9
 800d4ae:	68fa      	ldr	r2, [r7, #12]
 800d4b0:	8952      	ldrh	r2, [r2, #10]
 800d4b2:	3a01      	subs	r2, #1
 800d4b4:	4013      	ands	r3, r2
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	d17a      	bne.n	800d5b0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d4ba:	687a      	ldr	r2, [r7, #4]
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	699b      	ldr	r3, [r3, #24]
 800d4c0:	4619      	mov	r1, r3
 800d4c2:	4610      	mov	r0, r2
 800d4c4:	f7ff fc83 	bl	800cdce <get_fat>
 800d4c8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d4ca:	697b      	ldr	r3, [r7, #20]
 800d4cc:	2b01      	cmp	r3, #1
 800d4ce:	d801      	bhi.n	800d4d4 <dir_next+0x8c>
 800d4d0:	2302      	movs	r3, #2
 800d4d2:	e07a      	b.n	800d5ca <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d4d4:	697b      	ldr	r3, [r7, #20]
 800d4d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4da:	d101      	bne.n	800d4e0 <dir_next+0x98>
 800d4dc:	2301      	movs	r3, #1
 800d4de:	e074      	b.n	800d5ca <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	695b      	ldr	r3, [r3, #20]
 800d4e4:	697a      	ldr	r2, [r7, #20]
 800d4e6:	429a      	cmp	r2, r3
 800d4e8:	d358      	bcc.n	800d59c <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d104      	bne.n	800d4fa <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2200      	movs	r2, #0
 800d4f4:	61da      	str	r2, [r3, #28]
 800d4f6:	2304      	movs	r3, #4
 800d4f8:	e067      	b.n	800d5ca <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	699b      	ldr	r3, [r3, #24]
 800d500:	4619      	mov	r1, r3
 800d502:	4610      	mov	r0, r2
 800d504:	f7ff fe59 	bl	800d1ba <create_chain>
 800d508:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d50a:	697b      	ldr	r3, [r7, #20]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d101      	bne.n	800d514 <dir_next+0xcc>
 800d510:	2307      	movs	r3, #7
 800d512:	e05a      	b.n	800d5ca <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d514:	697b      	ldr	r3, [r7, #20]
 800d516:	2b01      	cmp	r3, #1
 800d518:	d101      	bne.n	800d51e <dir_next+0xd6>
 800d51a:	2302      	movs	r3, #2
 800d51c:	e055      	b.n	800d5ca <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d524:	d101      	bne.n	800d52a <dir_next+0xe2>
 800d526:	2301      	movs	r3, #1
 800d528:	e04f      	b.n	800d5ca <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d52a:	68f8      	ldr	r0, [r7, #12]
 800d52c:	f7ff fb50 	bl	800cbd0 <sync_window>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d001      	beq.n	800d53a <dir_next+0xf2>
 800d536:	2301      	movs	r3, #1
 800d538:	e047      	b.n	800d5ca <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	3330      	adds	r3, #48	@ 0x30
 800d53e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d542:	2100      	movs	r1, #0
 800d544:	4618      	mov	r0, r3
 800d546:	f7ff f97a 	bl	800c83e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d54a:	2300      	movs	r3, #0
 800d54c:	613b      	str	r3, [r7, #16]
 800d54e:	6979      	ldr	r1, [r7, #20]
 800d550:	68f8      	ldr	r0, [r7, #12]
 800d552:	f7ff fc1d 	bl	800cd90 <clust2sect>
 800d556:	4602      	mov	r2, r0
 800d558:	68fb      	ldr	r3, [r7, #12]
 800d55a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d55c:	e012      	b.n	800d584 <dir_next+0x13c>
						fs->wflag = 1;
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	2201      	movs	r2, #1
 800d562:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d564:	68f8      	ldr	r0, [r7, #12]
 800d566:	f7ff fb33 	bl	800cbd0 <sync_window>
 800d56a:	4603      	mov	r3, r0
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d001      	beq.n	800d574 <dir_next+0x12c>
 800d570:	2301      	movs	r3, #1
 800d572:	e02a      	b.n	800d5ca <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d574:	693b      	ldr	r3, [r7, #16]
 800d576:	3301      	adds	r3, #1
 800d578:	613b      	str	r3, [r7, #16]
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d57e:	1c5a      	adds	r2, r3, #1
 800d580:	68fb      	ldr	r3, [r7, #12]
 800d582:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	895b      	ldrh	r3, [r3, #10]
 800d588:	461a      	mov	r2, r3
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d3e6      	bcc.n	800d55e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d590:	68fb      	ldr	r3, [r7, #12]
 800d592:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	1ad2      	subs	r2, r2, r3
 800d598:	68fb      	ldr	r3, [r7, #12]
 800d59a:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	697a      	ldr	r2, [r7, #20]
 800d5a0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d5a2:	6979      	ldr	r1, [r7, #20]
 800d5a4:	68f8      	ldr	r0, [r7, #12]
 800d5a6:	f7ff fbf3 	bl	800cd90 <clust2sect>
 800d5aa:	4602      	mov	r2, r0
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68ba      	ldr	r2, [r7, #8]
 800d5b4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5c2:	441a      	add	r2, r3
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3718      	adds	r7, #24
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b086      	sub	sp, #24
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d5e2:	2100      	movs	r1, #0
 800d5e4:	6878      	ldr	r0, [r7, #4]
 800d5e6:	f7ff feb4 	bl	800d352 <dir_sdi>
 800d5ea:	4603      	mov	r3, r0
 800d5ec:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d5ee:	7dfb      	ldrb	r3, [r7, #23]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d12b      	bne.n	800d64c <dir_alloc+0x7a>
		n = 0;
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	69db      	ldr	r3, [r3, #28]
 800d5fc:	4619      	mov	r1, r3
 800d5fe:	68f8      	ldr	r0, [r7, #12]
 800d600:	f7ff fb2a 	bl	800cc58 <move_window>
 800d604:	4603      	mov	r3, r0
 800d606:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d608:	7dfb      	ldrb	r3, [r7, #23]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d11d      	bne.n	800d64a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d60e:	687b      	ldr	r3, [r7, #4]
 800d610:	6a1b      	ldr	r3, [r3, #32]
 800d612:	781b      	ldrb	r3, [r3, #0]
 800d614:	2be5      	cmp	r3, #229	@ 0xe5
 800d616:	d004      	beq.n	800d622 <dir_alloc+0x50>
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	6a1b      	ldr	r3, [r3, #32]
 800d61c:	781b      	ldrb	r3, [r3, #0]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d107      	bne.n	800d632 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d622:	693b      	ldr	r3, [r7, #16]
 800d624:	3301      	adds	r3, #1
 800d626:	613b      	str	r3, [r7, #16]
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	683b      	ldr	r3, [r7, #0]
 800d62c:	429a      	cmp	r2, r3
 800d62e:	d102      	bne.n	800d636 <dir_alloc+0x64>
 800d630:	e00c      	b.n	800d64c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d632:	2300      	movs	r3, #0
 800d634:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d636:	2101      	movs	r1, #1
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f7ff ff05 	bl	800d448 <dir_next>
 800d63e:	4603      	mov	r3, r0
 800d640:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d642:	7dfb      	ldrb	r3, [r7, #23]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d0d7      	beq.n	800d5f8 <dir_alloc+0x26>
 800d648:	e000      	b.n	800d64c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d64a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d64c:	7dfb      	ldrb	r3, [r7, #23]
 800d64e:	2b04      	cmp	r3, #4
 800d650:	d101      	bne.n	800d656 <dir_alloc+0x84>
 800d652:	2307      	movs	r3, #7
 800d654:	75fb      	strb	r3, [r7, #23]
	return res;
 800d656:	7dfb      	ldrb	r3, [r7, #23]
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3718      	adds	r7, #24
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}

0800d660 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d660:	b580      	push	{r7, lr}
 800d662:	b084      	sub	sp, #16
 800d664:	af00      	add	r7, sp, #0
 800d666:	6078      	str	r0, [r7, #4]
 800d668:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d66a:	683b      	ldr	r3, [r7, #0]
 800d66c:	331a      	adds	r3, #26
 800d66e:	4618      	mov	r0, r3
 800d670:	f7ff f842 	bl	800c6f8 <ld_word>
 800d674:	4603      	mov	r3, r0
 800d676:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	2b03      	cmp	r3, #3
 800d67e:	d109      	bne.n	800d694 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d680:	683b      	ldr	r3, [r7, #0]
 800d682:	3314      	adds	r3, #20
 800d684:	4618      	mov	r0, r3
 800d686:	f7ff f837 	bl	800c6f8 <ld_word>
 800d68a:	4603      	mov	r3, r0
 800d68c:	041b      	lsls	r3, r3, #16
 800d68e:	68fa      	ldr	r2, [r7, #12]
 800d690:	4313      	orrs	r3, r2
 800d692:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d694:	68fb      	ldr	r3, [r7, #12]
}
 800d696:	4618      	mov	r0, r3
 800d698:	3710      	adds	r7, #16
 800d69a:	46bd      	mov	sp, r7
 800d69c:	bd80      	pop	{r7, pc}

0800d69e <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d69e:	b580      	push	{r7, lr}
 800d6a0:	b084      	sub	sp, #16
 800d6a2:	af00      	add	r7, sp, #0
 800d6a4:	60f8      	str	r0, [r7, #12]
 800d6a6:	60b9      	str	r1, [r7, #8]
 800d6a8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d6aa:	68bb      	ldr	r3, [r7, #8]
 800d6ac:	331a      	adds	r3, #26
 800d6ae:	687a      	ldr	r2, [r7, #4]
 800d6b0:	b292      	uxth	r2, r2
 800d6b2:	4611      	mov	r1, r2
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff f85a 	bl	800c76e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	781b      	ldrb	r3, [r3, #0]
 800d6be:	2b03      	cmp	r3, #3
 800d6c0:	d109      	bne.n	800d6d6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d6c2:	68bb      	ldr	r3, [r7, #8]
 800d6c4:	f103 0214 	add.w	r2, r3, #20
 800d6c8:	687b      	ldr	r3, [r7, #4]
 800d6ca:	0c1b      	lsrs	r3, r3, #16
 800d6cc:	b29b      	uxth	r3, r3
 800d6ce:	4619      	mov	r1, r3
 800d6d0:	4610      	mov	r0, r2
 800d6d2:	f7ff f84c 	bl	800c76e <st_word>
	}
}
 800d6d6:	bf00      	nop
 800d6d8:	3710      	adds	r7, #16
 800d6da:	46bd      	mov	sp, r7
 800d6dc:	bd80      	pop	{r7, pc}

0800d6de <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d6de:	b580      	push	{r7, lr}
 800d6e0:	b086      	sub	sp, #24
 800d6e2:	af00      	add	r7, sp, #0
 800d6e4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	681b      	ldr	r3, [r3, #0]
 800d6ea:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d6ec:	2100      	movs	r1, #0
 800d6ee:	6878      	ldr	r0, [r7, #4]
 800d6f0:	f7ff fe2f 	bl	800d352 <dir_sdi>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d6f8:	7dfb      	ldrb	r3, [r7, #23]
 800d6fa:	2b00      	cmp	r3, #0
 800d6fc:	d001      	beq.n	800d702 <dir_find+0x24>
 800d6fe:	7dfb      	ldrb	r3, [r7, #23]
 800d700:	e03e      	b.n	800d780 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	69db      	ldr	r3, [r3, #28]
 800d706:	4619      	mov	r1, r3
 800d708:	6938      	ldr	r0, [r7, #16]
 800d70a:	f7ff faa5 	bl	800cc58 <move_window>
 800d70e:	4603      	mov	r3, r0
 800d710:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d712:	7dfb      	ldrb	r3, [r7, #23]
 800d714:	2b00      	cmp	r3, #0
 800d716:	d12f      	bne.n	800d778 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	6a1b      	ldr	r3, [r3, #32]
 800d71c:	781b      	ldrb	r3, [r3, #0]
 800d71e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d720:	7bfb      	ldrb	r3, [r7, #15]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d102      	bne.n	800d72c <dir_find+0x4e>
 800d726:	2304      	movs	r3, #4
 800d728:	75fb      	strb	r3, [r7, #23]
 800d72a:	e028      	b.n	800d77e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	6a1b      	ldr	r3, [r3, #32]
 800d730:	330b      	adds	r3, #11
 800d732:	781b      	ldrb	r3, [r3, #0]
 800d734:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d738:	b2da      	uxtb	r2, r3
 800d73a:	687b      	ldr	r3, [r7, #4]
 800d73c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	6a1b      	ldr	r3, [r3, #32]
 800d742:	330b      	adds	r3, #11
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	f003 0308 	and.w	r3, r3, #8
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d10a      	bne.n	800d764 <dir_find+0x86>
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	6a18      	ldr	r0, [r3, #32]
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	3324      	adds	r3, #36	@ 0x24
 800d756:	220b      	movs	r2, #11
 800d758:	4619      	mov	r1, r3
 800d75a:	f7ff f88b 	bl	800c874 <mem_cmp>
 800d75e:	4603      	mov	r3, r0
 800d760:	2b00      	cmp	r3, #0
 800d762:	d00b      	beq.n	800d77c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d764:	2100      	movs	r1, #0
 800d766:	6878      	ldr	r0, [r7, #4]
 800d768:	f7ff fe6e 	bl	800d448 <dir_next>
 800d76c:	4603      	mov	r3, r0
 800d76e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d770:	7dfb      	ldrb	r3, [r7, #23]
 800d772:	2b00      	cmp	r3, #0
 800d774:	d0c5      	beq.n	800d702 <dir_find+0x24>
 800d776:	e002      	b.n	800d77e <dir_find+0xa0>
		if (res != FR_OK) break;
 800d778:	bf00      	nop
 800d77a:	e000      	b.n	800d77e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d77c:	bf00      	nop

	return res;
 800d77e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d780:	4618      	mov	r0, r3
 800d782:	3718      	adds	r7, #24
 800d784:	46bd      	mov	sp, r7
 800d786:	bd80      	pop	{r7, pc}

0800d788 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d788:	b580      	push	{r7, lr}
 800d78a:	b084      	sub	sp, #16
 800d78c:	af00      	add	r7, sp, #0
 800d78e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d796:	2101      	movs	r1, #1
 800d798:	6878      	ldr	r0, [r7, #4]
 800d79a:	f7ff ff1a 	bl	800d5d2 <dir_alloc>
 800d79e:	4603      	mov	r3, r0
 800d7a0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d7a2:	7bfb      	ldrb	r3, [r7, #15]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d11c      	bne.n	800d7e2 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d7a8:	687b      	ldr	r3, [r7, #4]
 800d7aa:	69db      	ldr	r3, [r3, #28]
 800d7ac:	4619      	mov	r1, r3
 800d7ae:	68b8      	ldr	r0, [r7, #8]
 800d7b0:	f7ff fa52 	bl	800cc58 <move_window>
 800d7b4:	4603      	mov	r3, r0
 800d7b6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7b8:	7bfb      	ldrb	r3, [r7, #15]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d111      	bne.n	800d7e2 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	6a1b      	ldr	r3, [r3, #32]
 800d7c2:	2220      	movs	r2, #32
 800d7c4:	2100      	movs	r1, #0
 800d7c6:	4618      	mov	r0, r3
 800d7c8:	f7ff f839 	bl	800c83e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	6a18      	ldr	r0, [r3, #32]
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	3324      	adds	r3, #36	@ 0x24
 800d7d4:	220b      	movs	r2, #11
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f7ff f810 	bl	800c7fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2201      	movs	r2, #1
 800d7e0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d7e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7e4:	4618      	mov	r0, r3
 800d7e6:	3710      	adds	r7, #16
 800d7e8:	46bd      	mov	sp, r7
 800d7ea:	bd80      	pop	{r7, pc}

0800d7ec <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b088      	sub	sp, #32
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
 800d7f4:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d7f6:	683b      	ldr	r3, [r7, #0]
 800d7f8:	681b      	ldr	r3, [r3, #0]
 800d7fa:	60fb      	str	r3, [r7, #12]
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	3324      	adds	r3, #36	@ 0x24
 800d800:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d802:	220b      	movs	r2, #11
 800d804:	2120      	movs	r1, #32
 800d806:	68b8      	ldr	r0, [r7, #8]
 800d808:	f7ff f819 	bl	800c83e <mem_set>
	si = i = 0; ni = 8;
 800d80c:	2300      	movs	r3, #0
 800d80e:	613b      	str	r3, [r7, #16]
 800d810:	693b      	ldr	r3, [r7, #16]
 800d812:	61fb      	str	r3, [r7, #28]
 800d814:	2308      	movs	r3, #8
 800d816:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d818:	69fb      	ldr	r3, [r7, #28]
 800d81a:	1c5a      	adds	r2, r3, #1
 800d81c:	61fa      	str	r2, [r7, #28]
 800d81e:	68fa      	ldr	r2, [r7, #12]
 800d820:	4413      	add	r3, r2
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d826:	7efb      	ldrb	r3, [r7, #27]
 800d828:	2b20      	cmp	r3, #32
 800d82a:	d94e      	bls.n	800d8ca <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d82c:	7efb      	ldrb	r3, [r7, #27]
 800d82e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d830:	d006      	beq.n	800d840 <create_name+0x54>
 800d832:	7efb      	ldrb	r3, [r7, #27]
 800d834:	2b5c      	cmp	r3, #92	@ 0x5c
 800d836:	d110      	bne.n	800d85a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d838:	e002      	b.n	800d840 <create_name+0x54>
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	3301      	adds	r3, #1
 800d83e:	61fb      	str	r3, [r7, #28]
 800d840:	68fa      	ldr	r2, [r7, #12]
 800d842:	69fb      	ldr	r3, [r7, #28]
 800d844:	4413      	add	r3, r2
 800d846:	781b      	ldrb	r3, [r3, #0]
 800d848:	2b2f      	cmp	r3, #47	@ 0x2f
 800d84a:	d0f6      	beq.n	800d83a <create_name+0x4e>
 800d84c:	68fa      	ldr	r2, [r7, #12]
 800d84e:	69fb      	ldr	r3, [r7, #28]
 800d850:	4413      	add	r3, r2
 800d852:	781b      	ldrb	r3, [r3, #0]
 800d854:	2b5c      	cmp	r3, #92	@ 0x5c
 800d856:	d0f0      	beq.n	800d83a <create_name+0x4e>
			break;
 800d858:	e038      	b.n	800d8cc <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d85a:	7efb      	ldrb	r3, [r7, #27]
 800d85c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d85e:	d003      	beq.n	800d868 <create_name+0x7c>
 800d860:	693a      	ldr	r2, [r7, #16]
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	429a      	cmp	r2, r3
 800d866:	d30c      	bcc.n	800d882 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d868:	697b      	ldr	r3, [r7, #20]
 800d86a:	2b0b      	cmp	r3, #11
 800d86c:	d002      	beq.n	800d874 <create_name+0x88>
 800d86e:	7efb      	ldrb	r3, [r7, #27]
 800d870:	2b2e      	cmp	r3, #46	@ 0x2e
 800d872:	d001      	beq.n	800d878 <create_name+0x8c>
 800d874:	2306      	movs	r3, #6
 800d876:	e044      	b.n	800d902 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d878:	2308      	movs	r3, #8
 800d87a:	613b      	str	r3, [r7, #16]
 800d87c:	230b      	movs	r3, #11
 800d87e:	617b      	str	r3, [r7, #20]
			continue;
 800d880:	e022      	b.n	800d8c8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d882:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d886:	2b00      	cmp	r3, #0
 800d888:	da04      	bge.n	800d894 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d88a:	7efb      	ldrb	r3, [r7, #27]
 800d88c:	3b80      	subs	r3, #128	@ 0x80
 800d88e:	4a1f      	ldr	r2, [pc, #124]	@ (800d90c <create_name+0x120>)
 800d890:	5cd3      	ldrb	r3, [r2, r3]
 800d892:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d894:	7efb      	ldrb	r3, [r7, #27]
 800d896:	4619      	mov	r1, r3
 800d898:	481d      	ldr	r0, [pc, #116]	@ (800d910 <create_name+0x124>)
 800d89a:	f7ff f812 	bl	800c8c2 <chk_chr>
 800d89e:	4603      	mov	r3, r0
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d001      	beq.n	800d8a8 <create_name+0xbc>
 800d8a4:	2306      	movs	r3, #6
 800d8a6:	e02c      	b.n	800d902 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d8a8:	7efb      	ldrb	r3, [r7, #27]
 800d8aa:	2b60      	cmp	r3, #96	@ 0x60
 800d8ac:	d905      	bls.n	800d8ba <create_name+0xce>
 800d8ae:	7efb      	ldrb	r3, [r7, #27]
 800d8b0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d8b2:	d802      	bhi.n	800d8ba <create_name+0xce>
 800d8b4:	7efb      	ldrb	r3, [r7, #27]
 800d8b6:	3b20      	subs	r3, #32
 800d8b8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d8ba:	693b      	ldr	r3, [r7, #16]
 800d8bc:	1c5a      	adds	r2, r3, #1
 800d8be:	613a      	str	r2, [r7, #16]
 800d8c0:	68ba      	ldr	r2, [r7, #8]
 800d8c2:	4413      	add	r3, r2
 800d8c4:	7efa      	ldrb	r2, [r7, #27]
 800d8c6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d8c8:	e7a6      	b.n	800d818 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d8ca:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d8cc:	68fa      	ldr	r2, [r7, #12]
 800d8ce:	69fb      	ldr	r3, [r7, #28]
 800d8d0:	441a      	add	r2, r3
 800d8d2:	683b      	ldr	r3, [r7, #0]
 800d8d4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d8d6:	693b      	ldr	r3, [r7, #16]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d101      	bne.n	800d8e0 <create_name+0xf4>
 800d8dc:	2306      	movs	r3, #6
 800d8de:	e010      	b.n	800d902 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d8e0:	68bb      	ldr	r3, [r7, #8]
 800d8e2:	781b      	ldrb	r3, [r3, #0]
 800d8e4:	2be5      	cmp	r3, #229	@ 0xe5
 800d8e6:	d102      	bne.n	800d8ee <create_name+0x102>
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	2205      	movs	r2, #5
 800d8ec:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d8ee:	7efb      	ldrb	r3, [r7, #27]
 800d8f0:	2b20      	cmp	r3, #32
 800d8f2:	d801      	bhi.n	800d8f8 <create_name+0x10c>
 800d8f4:	2204      	movs	r2, #4
 800d8f6:	e000      	b.n	800d8fa <create_name+0x10e>
 800d8f8:	2200      	movs	r2, #0
 800d8fa:	68bb      	ldr	r3, [r7, #8]
 800d8fc:	330b      	adds	r3, #11
 800d8fe:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d900:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d902:	4618      	mov	r0, r3
 800d904:	3720      	adds	r7, #32
 800d906:	46bd      	mov	sp, r7
 800d908:	bd80      	pop	{r7, pc}
 800d90a:	bf00      	nop
 800d90c:	08017984 	.word	0x08017984
 800d910:	08010048 	.word	0x08010048

0800d914 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d914:	b580      	push	{r7, lr}
 800d916:	b086      	sub	sp, #24
 800d918:	af00      	add	r7, sp, #0
 800d91a:	6078      	str	r0, [r7, #4]
 800d91c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d922:	693b      	ldr	r3, [r7, #16]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d928:	e002      	b.n	800d930 <follow_path+0x1c>
 800d92a:	683b      	ldr	r3, [r7, #0]
 800d92c:	3301      	adds	r3, #1
 800d92e:	603b      	str	r3, [r7, #0]
 800d930:	683b      	ldr	r3, [r7, #0]
 800d932:	781b      	ldrb	r3, [r3, #0]
 800d934:	2b2f      	cmp	r3, #47	@ 0x2f
 800d936:	d0f8      	beq.n	800d92a <follow_path+0x16>
 800d938:	683b      	ldr	r3, [r7, #0]
 800d93a:	781b      	ldrb	r3, [r3, #0]
 800d93c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d93e:	d0f4      	beq.n	800d92a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	2200      	movs	r2, #0
 800d944:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d946:	683b      	ldr	r3, [r7, #0]
 800d948:	781b      	ldrb	r3, [r3, #0]
 800d94a:	2b1f      	cmp	r3, #31
 800d94c:	d80a      	bhi.n	800d964 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	2280      	movs	r2, #128	@ 0x80
 800d952:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d956:	2100      	movs	r1, #0
 800d958:	6878      	ldr	r0, [r7, #4]
 800d95a:	f7ff fcfa 	bl	800d352 <dir_sdi>
 800d95e:	4603      	mov	r3, r0
 800d960:	75fb      	strb	r3, [r7, #23]
 800d962:	e043      	b.n	800d9ec <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d964:	463b      	mov	r3, r7
 800d966:	4619      	mov	r1, r3
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	f7ff ff3f 	bl	800d7ec <create_name>
 800d96e:	4603      	mov	r3, r0
 800d970:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d972:	7dfb      	ldrb	r3, [r7, #23]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d134      	bne.n	800d9e2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff feb0 	bl	800d6de <dir_find>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d988:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d98a:	7dfb      	ldrb	r3, [r7, #23]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d00a      	beq.n	800d9a6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d990:	7dfb      	ldrb	r3, [r7, #23]
 800d992:	2b04      	cmp	r3, #4
 800d994:	d127      	bne.n	800d9e6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d996:	7afb      	ldrb	r3, [r7, #11]
 800d998:	f003 0304 	and.w	r3, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d122      	bne.n	800d9e6 <follow_path+0xd2>
 800d9a0:	2305      	movs	r3, #5
 800d9a2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9a4:	e01f      	b.n	800d9e6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9a6:	7afb      	ldrb	r3, [r7, #11]
 800d9a8:	f003 0304 	and.w	r3, r3, #4
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d11c      	bne.n	800d9ea <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	799b      	ldrb	r3, [r3, #6]
 800d9b4:	f003 0310 	and.w	r3, r3, #16
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d102      	bne.n	800d9c2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d9bc:	2305      	movs	r3, #5
 800d9be:	75fb      	strb	r3, [r7, #23]
 800d9c0:	e014      	b.n	800d9ec <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	695b      	ldr	r3, [r3, #20]
 800d9cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9d0:	4413      	add	r3, r2
 800d9d2:	4619      	mov	r1, r3
 800d9d4:	68f8      	ldr	r0, [r7, #12]
 800d9d6:	f7ff fe43 	bl	800d660 <ld_clust>
 800d9da:	4602      	mov	r2, r0
 800d9dc:	693b      	ldr	r3, [r7, #16]
 800d9de:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d9e0:	e7c0      	b.n	800d964 <follow_path+0x50>
			if (res != FR_OK) break;
 800d9e2:	bf00      	nop
 800d9e4:	e002      	b.n	800d9ec <follow_path+0xd8>
				break;
 800d9e6:	bf00      	nop
 800d9e8:	e000      	b.n	800d9ec <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9ea:	bf00      	nop
			}
		}
	}

	return res;
 800d9ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800d9ee:	4618      	mov	r0, r3
 800d9f0:	3718      	adds	r7, #24
 800d9f2:	46bd      	mov	sp, r7
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d9f6:	b480      	push	{r7}
 800d9f8:	b087      	sub	sp, #28
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d9fe:	f04f 33ff 	mov.w	r3, #4294967295
 800da02:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d031      	beq.n	800da70 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	617b      	str	r3, [r7, #20]
 800da12:	e002      	b.n	800da1a <get_ldnumber+0x24>
 800da14:	697b      	ldr	r3, [r7, #20]
 800da16:	3301      	adds	r3, #1
 800da18:	617b      	str	r3, [r7, #20]
 800da1a:	697b      	ldr	r3, [r7, #20]
 800da1c:	781b      	ldrb	r3, [r3, #0]
 800da1e:	2b20      	cmp	r3, #32
 800da20:	d903      	bls.n	800da2a <get_ldnumber+0x34>
 800da22:	697b      	ldr	r3, [r7, #20]
 800da24:	781b      	ldrb	r3, [r3, #0]
 800da26:	2b3a      	cmp	r3, #58	@ 0x3a
 800da28:	d1f4      	bne.n	800da14 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da2a:	697b      	ldr	r3, [r7, #20]
 800da2c:	781b      	ldrb	r3, [r3, #0]
 800da2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800da30:	d11c      	bne.n	800da6c <get_ldnumber+0x76>
			tp = *path;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	1c5a      	adds	r2, r3, #1
 800da3c:	60fa      	str	r2, [r7, #12]
 800da3e:	781b      	ldrb	r3, [r3, #0]
 800da40:	3b30      	subs	r3, #48	@ 0x30
 800da42:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da44:	68bb      	ldr	r3, [r7, #8]
 800da46:	2b09      	cmp	r3, #9
 800da48:	d80e      	bhi.n	800da68 <get_ldnumber+0x72>
 800da4a:	68fa      	ldr	r2, [r7, #12]
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	429a      	cmp	r2, r3
 800da50:	d10a      	bne.n	800da68 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da52:	68bb      	ldr	r3, [r7, #8]
 800da54:	2b00      	cmp	r3, #0
 800da56:	d107      	bne.n	800da68 <get_ldnumber+0x72>
					vol = (int)i;
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800da5c:	697b      	ldr	r3, [r7, #20]
 800da5e:	3301      	adds	r3, #1
 800da60:	617b      	str	r3, [r7, #20]
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	697a      	ldr	r2, [r7, #20]
 800da66:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800da68:	693b      	ldr	r3, [r7, #16]
 800da6a:	e002      	b.n	800da72 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800da6c:	2300      	movs	r3, #0
 800da6e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da70:	693b      	ldr	r3, [r7, #16]
}
 800da72:	4618      	mov	r0, r3
 800da74:	371c      	adds	r7, #28
 800da76:	46bd      	mov	sp, r7
 800da78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da7c:	4770      	bx	lr
	...

0800da80 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800da80:	b580      	push	{r7, lr}
 800da82:	b082      	sub	sp, #8
 800da84:	af00      	add	r7, sp, #0
 800da86:	6078      	str	r0, [r7, #4]
 800da88:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	2200      	movs	r2, #0
 800da8e:	70da      	strb	r2, [r3, #3]
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	f04f 32ff 	mov.w	r2, #4294967295
 800da96:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800da98:	6839      	ldr	r1, [r7, #0]
 800da9a:	6878      	ldr	r0, [r7, #4]
 800da9c:	f7ff f8dc 	bl	800cc58 <move_window>
 800daa0:	4603      	mov	r3, r0
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	d001      	beq.n	800daaa <check_fs+0x2a>
 800daa6:	2304      	movs	r3, #4
 800daa8:	e038      	b.n	800db1c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	3330      	adds	r3, #48	@ 0x30
 800daae:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dab2:	4618      	mov	r0, r3
 800dab4:	f7fe fe20 	bl	800c6f8 <ld_word>
 800dab8:	4603      	mov	r3, r0
 800daba:	461a      	mov	r2, r3
 800dabc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dac0:	429a      	cmp	r2, r3
 800dac2:	d001      	beq.n	800dac8 <check_fs+0x48>
 800dac4:	2303      	movs	r3, #3
 800dac6:	e029      	b.n	800db1c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dace:	2be9      	cmp	r3, #233	@ 0xe9
 800dad0:	d009      	beq.n	800dae6 <check_fs+0x66>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dad8:	2beb      	cmp	r3, #235	@ 0xeb
 800dada:	d11e      	bne.n	800db1a <check_fs+0x9a>
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800dae2:	2b90      	cmp	r3, #144	@ 0x90
 800dae4:	d119      	bne.n	800db1a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	3330      	adds	r3, #48	@ 0x30
 800daea:	3336      	adds	r3, #54	@ 0x36
 800daec:	4618      	mov	r0, r3
 800daee:	f7fe fe1b 	bl	800c728 <ld_dword>
 800daf2:	4603      	mov	r3, r0
 800daf4:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800daf8:	4a0a      	ldr	r2, [pc, #40]	@ (800db24 <check_fs+0xa4>)
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d101      	bne.n	800db02 <check_fs+0x82>
 800dafe:	2300      	movs	r3, #0
 800db00:	e00c      	b.n	800db1c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db02:	687b      	ldr	r3, [r7, #4]
 800db04:	3330      	adds	r3, #48	@ 0x30
 800db06:	3352      	adds	r3, #82	@ 0x52
 800db08:	4618      	mov	r0, r3
 800db0a:	f7fe fe0d 	bl	800c728 <ld_dword>
 800db0e:	4603      	mov	r3, r0
 800db10:	4a05      	ldr	r2, [pc, #20]	@ (800db28 <check_fs+0xa8>)
 800db12:	4293      	cmp	r3, r2
 800db14:	d101      	bne.n	800db1a <check_fs+0x9a>
 800db16:	2300      	movs	r3, #0
 800db18:	e000      	b.n	800db1c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db1a:	2302      	movs	r3, #2
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3708      	adds	r7, #8
 800db20:	46bd      	mov	sp, r7
 800db22:	bd80      	pop	{r7, pc}
 800db24:	00544146 	.word	0x00544146
 800db28:	33544146 	.word	0x33544146

0800db2c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db2c:	b580      	push	{r7, lr}
 800db2e:	b096      	sub	sp, #88	@ 0x58
 800db30:	af00      	add	r7, sp, #0
 800db32:	60f8      	str	r0, [r7, #12]
 800db34:	60b9      	str	r1, [r7, #8]
 800db36:	4613      	mov	r3, r2
 800db38:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db3a:	68bb      	ldr	r3, [r7, #8]
 800db3c:	2200      	movs	r2, #0
 800db3e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db40:	68f8      	ldr	r0, [r7, #12]
 800db42:	f7ff ff58 	bl	800d9f6 <get_ldnumber>
 800db46:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	da01      	bge.n	800db52 <find_volume+0x26>
 800db4e:	230b      	movs	r3, #11
 800db50:	e22d      	b.n	800dfae <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db52:	4aa1      	ldr	r2, [pc, #644]	@ (800ddd8 <find_volume+0x2ac>)
 800db54:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db5a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800db5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db5e:	2b00      	cmp	r3, #0
 800db60:	d101      	bne.n	800db66 <find_volume+0x3a>
 800db62:	230c      	movs	r3, #12
 800db64:	e223      	b.n	800dfae <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800db66:	68bb      	ldr	r3, [r7, #8]
 800db68:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db6a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800db6c:	79fb      	ldrb	r3, [r7, #7]
 800db6e:	f023 0301 	bic.w	r3, r3, #1
 800db72:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800db74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db76:	781b      	ldrb	r3, [r3, #0]
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d01a      	beq.n	800dbb2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800db7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7e:	785b      	ldrb	r3, [r3, #1]
 800db80:	4618      	mov	r0, r3
 800db82:	f7fe fd19 	bl	800c5b8 <disk_status>
 800db86:	4603      	mov	r3, r0
 800db88:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800db8c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db90:	f003 0301 	and.w	r3, r3, #1
 800db94:	2b00      	cmp	r3, #0
 800db96:	d10c      	bne.n	800dbb2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800db98:	79fb      	ldrb	r3, [r7, #7]
 800db9a:	2b00      	cmp	r3, #0
 800db9c:	d007      	beq.n	800dbae <find_volume+0x82>
 800db9e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dba2:	f003 0304 	and.w	r3, r3, #4
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbaa:	230a      	movs	r3, #10
 800dbac:	e1ff      	b.n	800dfae <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dbae:	2300      	movs	r3, #0
 800dbb0:	e1fd      	b.n	800dfae <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbb4:	2200      	movs	r2, #0
 800dbb6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dbb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbba:	b2da      	uxtb	r2, r3
 800dbbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbbe:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dbc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbc2:	785b      	ldrb	r3, [r3, #1]
 800dbc4:	4618      	mov	r0, r3
 800dbc6:	f7fe fd11 	bl	800c5ec <disk_initialize>
 800dbca:	4603      	mov	r3, r0
 800dbcc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dbd0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbd4:	f003 0301 	and.w	r3, r3, #1
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d001      	beq.n	800dbe0 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dbdc:	2303      	movs	r3, #3
 800dbde:	e1e6      	b.n	800dfae <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dbe0:	79fb      	ldrb	r3, [r7, #7]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d007      	beq.n	800dbf6 <find_volume+0xca>
 800dbe6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbea:	f003 0304 	and.w	r3, r3, #4
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dbf2:	230a      	movs	r3, #10
 800dbf4:	e1db      	b.n	800dfae <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dbf6:	2300      	movs	r3, #0
 800dbf8:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dbfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbfc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbfe:	f7ff ff3f 	bl	800da80 <check_fs>
 800dc02:	4603      	mov	r3, r0
 800dc04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc0c:	2b02      	cmp	r3, #2
 800dc0e:	d149      	bne.n	800dca4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc10:	2300      	movs	r3, #0
 800dc12:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc14:	e01e      	b.n	800dc54 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc18:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc1e:	011b      	lsls	r3, r3, #4
 800dc20:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dc24:	4413      	add	r3, r2
 800dc26:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc2a:	3304      	adds	r3, #4
 800dc2c:	781b      	ldrb	r3, [r3, #0]
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d006      	beq.n	800dc40 <find_volume+0x114>
 800dc32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc34:	3308      	adds	r3, #8
 800dc36:	4618      	mov	r0, r3
 800dc38:	f7fe fd76 	bl	800c728 <ld_dword>
 800dc3c:	4602      	mov	r2, r0
 800dc3e:	e000      	b.n	800dc42 <find_volume+0x116>
 800dc40:	2200      	movs	r2, #0
 800dc42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc44:	009b      	lsls	r3, r3, #2
 800dc46:	3358      	adds	r3, #88	@ 0x58
 800dc48:	443b      	add	r3, r7
 800dc4a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc50:	3301      	adds	r3, #1
 800dc52:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc54:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc56:	2b03      	cmp	r3, #3
 800dc58:	d9dd      	bls.n	800dc16 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc5a:	2300      	movs	r3, #0
 800dc5c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dc5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc60:	2b00      	cmp	r3, #0
 800dc62:	d002      	beq.n	800dc6a <find_volume+0x13e>
 800dc64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc66:	3b01      	subs	r3, #1
 800dc68:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dc6a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc6c:	009b      	lsls	r3, r3, #2
 800dc6e:	3358      	adds	r3, #88	@ 0x58
 800dc70:	443b      	add	r3, r7
 800dc72:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dc76:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d005      	beq.n	800dc8a <find_volume+0x15e>
 800dc7e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc80:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc82:	f7ff fefd 	bl	800da80 <check_fs>
 800dc86:	4603      	mov	r3, r0
 800dc88:	e000      	b.n	800dc8c <find_volume+0x160>
 800dc8a:	2303      	movs	r3, #3
 800dc8c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dc90:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc94:	2b01      	cmp	r3, #1
 800dc96:	d905      	bls.n	800dca4 <find_volume+0x178>
 800dc98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d9e2      	bls.n	800dc6a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dca4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dca8:	2b04      	cmp	r3, #4
 800dcaa:	d101      	bne.n	800dcb0 <find_volume+0x184>
 800dcac:	2301      	movs	r3, #1
 800dcae:	e17e      	b.n	800dfae <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d901      	bls.n	800dcbc <find_volume+0x190>
 800dcb8:	230d      	movs	r3, #13
 800dcba:	e178      	b.n	800dfae <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dcbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcbe:	3330      	adds	r3, #48	@ 0x30
 800dcc0:	330b      	adds	r3, #11
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	f7fe fd18 	bl	800c6f8 <ld_word>
 800dcc8:	4603      	mov	r3, r0
 800dcca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcce:	d001      	beq.n	800dcd4 <find_volume+0x1a8>
 800dcd0:	230d      	movs	r3, #13
 800dcd2:	e16c      	b.n	800dfae <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dcd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcd6:	3330      	adds	r3, #48	@ 0x30
 800dcd8:	3316      	adds	r3, #22
 800dcda:	4618      	mov	r0, r3
 800dcdc:	f7fe fd0c 	bl	800c6f8 <ld_word>
 800dce0:	4603      	mov	r3, r0
 800dce2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dce4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d106      	bne.n	800dcf8 <find_volume+0x1cc>
 800dcea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcec:	3330      	adds	r3, #48	@ 0x30
 800dcee:	3324      	adds	r3, #36	@ 0x24
 800dcf0:	4618      	mov	r0, r3
 800dcf2:	f7fe fd19 	bl	800c728 <ld_dword>
 800dcf6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dcf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcfa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dcfc:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dcfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd00:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800dd04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd06:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0a:	789b      	ldrb	r3, [r3, #2]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d005      	beq.n	800dd1c <find_volume+0x1f0>
 800dd10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd12:	789b      	ldrb	r3, [r3, #2]
 800dd14:	2b02      	cmp	r3, #2
 800dd16:	d001      	beq.n	800dd1c <find_volume+0x1f0>
 800dd18:	230d      	movs	r3, #13
 800dd1a:	e148      	b.n	800dfae <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1e:	789b      	ldrb	r3, [r3, #2]
 800dd20:	461a      	mov	r2, r3
 800dd22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd24:	fb02 f303 	mul.w	r3, r2, r3
 800dd28:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd30:	461a      	mov	r2, r3
 800dd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd34:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd38:	895b      	ldrh	r3, [r3, #10]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d008      	beq.n	800dd50 <find_volume+0x224>
 800dd3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd40:	895b      	ldrh	r3, [r3, #10]
 800dd42:	461a      	mov	r2, r3
 800dd44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd46:	895b      	ldrh	r3, [r3, #10]
 800dd48:	3b01      	subs	r3, #1
 800dd4a:	4013      	ands	r3, r2
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d001      	beq.n	800dd54 <find_volume+0x228>
 800dd50:	230d      	movs	r3, #13
 800dd52:	e12c      	b.n	800dfae <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd56:	3330      	adds	r3, #48	@ 0x30
 800dd58:	3311      	adds	r3, #17
 800dd5a:	4618      	mov	r0, r3
 800dd5c:	f7fe fccc 	bl	800c6f8 <ld_word>
 800dd60:	4603      	mov	r3, r0
 800dd62:	461a      	mov	r2, r3
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6a:	891b      	ldrh	r3, [r3, #8]
 800dd6c:	f003 030f 	and.w	r3, r3, #15
 800dd70:	b29b      	uxth	r3, r3
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d001      	beq.n	800dd7a <find_volume+0x24e>
 800dd76:	230d      	movs	r3, #13
 800dd78:	e119      	b.n	800dfae <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7c:	3330      	adds	r3, #48	@ 0x30
 800dd7e:	3313      	adds	r3, #19
 800dd80:	4618      	mov	r0, r3
 800dd82:	f7fe fcb9 	bl	800c6f8 <ld_word>
 800dd86:	4603      	mov	r3, r0
 800dd88:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dd8a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d106      	bne.n	800dd9e <find_volume+0x272>
 800dd90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd92:	3330      	adds	r3, #48	@ 0x30
 800dd94:	3320      	adds	r3, #32
 800dd96:	4618      	mov	r0, r3
 800dd98:	f7fe fcc6 	bl	800c728 <ld_dword>
 800dd9c:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dd9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda0:	3330      	adds	r3, #48	@ 0x30
 800dda2:	330e      	adds	r3, #14
 800dda4:	4618      	mov	r0, r3
 800dda6:	f7fe fca7 	bl	800c6f8 <ld_word>
 800ddaa:	4603      	mov	r3, r0
 800ddac:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ddae:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	d101      	bne.n	800ddb8 <find_volume+0x28c>
 800ddb4:	230d      	movs	r3, #13
 800ddb6:	e0fa      	b.n	800dfae <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ddb8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ddba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddbc:	4413      	add	r3, r2
 800ddbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800ddc0:	8912      	ldrh	r2, [r2, #8]
 800ddc2:	0912      	lsrs	r2, r2, #4
 800ddc4:	b292      	uxth	r2, r2
 800ddc6:	4413      	add	r3, r2
 800ddc8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ddca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d204      	bcs.n	800dddc <find_volume+0x2b0>
 800ddd2:	230d      	movs	r3, #13
 800ddd4:	e0eb      	b.n	800dfae <find_volume+0x482>
 800ddd6:	bf00      	nop
 800ddd8:	200003f8 	.word	0x200003f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dddc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dde0:	1ad3      	subs	r3, r2, r3
 800dde2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dde4:	8952      	ldrh	r2, [r2, #10]
 800dde6:	fbb3 f3f2 	udiv	r3, r3, r2
 800ddea:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800ddec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	d101      	bne.n	800ddf6 <find_volume+0x2ca>
 800ddf2:	230d      	movs	r3, #13
 800ddf4:	e0db      	b.n	800dfae <find_volume+0x482>
		fmt = FS_FAT32;
 800ddf6:	2303      	movs	r3, #3
 800ddf8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800ddfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ddfe:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800de02:	4293      	cmp	r3, r2
 800de04:	d802      	bhi.n	800de0c <find_volume+0x2e0>
 800de06:	2302      	movs	r3, #2
 800de08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800de12:	4293      	cmp	r3, r2
 800de14:	d802      	bhi.n	800de1c <find_volume+0x2f0>
 800de16:	2301      	movs	r3, #1
 800de18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1e:	1c9a      	adds	r2, r3, #2
 800de20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de22:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800de24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de26:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de28:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de2a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800de2c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de2e:	441a      	add	r2, r3
 800de30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de32:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800de34:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de38:	441a      	add	r2, r3
 800de3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de3c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800de3e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de42:	2b03      	cmp	r3, #3
 800de44:	d11e      	bne.n	800de84 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de48:	3330      	adds	r3, #48	@ 0x30
 800de4a:	332a      	adds	r3, #42	@ 0x2a
 800de4c:	4618      	mov	r0, r3
 800de4e:	f7fe fc53 	bl	800c6f8 <ld_word>
 800de52:	4603      	mov	r3, r0
 800de54:	2b00      	cmp	r3, #0
 800de56:	d001      	beq.n	800de5c <find_volume+0x330>
 800de58:	230d      	movs	r3, #13
 800de5a:	e0a8      	b.n	800dfae <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800de5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de5e:	891b      	ldrh	r3, [r3, #8]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d001      	beq.n	800de68 <find_volume+0x33c>
 800de64:	230d      	movs	r3, #13
 800de66:	e0a2      	b.n	800dfae <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800de68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6a:	3330      	adds	r3, #48	@ 0x30
 800de6c:	332c      	adds	r3, #44	@ 0x2c
 800de6e:	4618      	mov	r0, r3
 800de70:	f7fe fc5a 	bl	800c728 <ld_dword>
 800de74:	4602      	mov	r2, r0
 800de76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de78:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7c:	695b      	ldr	r3, [r3, #20]
 800de7e:	009b      	lsls	r3, r3, #2
 800de80:	647b      	str	r3, [r7, #68]	@ 0x44
 800de82:	e01f      	b.n	800dec4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800de84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de86:	891b      	ldrh	r3, [r3, #8]
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d101      	bne.n	800de90 <find_volume+0x364>
 800de8c:	230d      	movs	r3, #13
 800de8e:	e08e      	b.n	800dfae <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800de90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de92:	6a1a      	ldr	r2, [r3, #32]
 800de94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800de96:	441a      	add	r2, r3
 800de98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9a:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800de9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dea0:	2b02      	cmp	r3, #2
 800dea2:	d103      	bne.n	800deac <find_volume+0x380>
 800dea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea6:	695b      	ldr	r3, [r3, #20]
 800dea8:	005b      	lsls	r3, r3, #1
 800deaa:	e00a      	b.n	800dec2 <find_volume+0x396>
 800deac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deae:	695a      	ldr	r2, [r3, #20]
 800deb0:	4613      	mov	r3, r2
 800deb2:	005b      	lsls	r3, r3, #1
 800deb4:	4413      	add	r3, r2
 800deb6:	085a      	lsrs	r2, r3, #1
 800deb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deba:	695b      	ldr	r3, [r3, #20]
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dec2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec6:	699a      	ldr	r2, [r3, #24]
 800dec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800deca:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800dece:	0a5b      	lsrs	r3, r3, #9
 800ded0:	429a      	cmp	r2, r3
 800ded2:	d201      	bcs.n	800ded8 <find_volume+0x3ac>
 800ded4:	230d      	movs	r3, #13
 800ded6:	e06a      	b.n	800dfae <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800ded8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deda:	f04f 32ff 	mov.w	r2, #4294967295
 800dede:	611a      	str	r2, [r3, #16]
 800dee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee2:	691a      	ldr	r2, [r3, #16]
 800dee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee6:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800dee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deea:	2280      	movs	r2, #128	@ 0x80
 800deec:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800deee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800def2:	2b03      	cmp	r3, #3
 800def4:	d149      	bne.n	800df8a <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800def6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800def8:	3330      	adds	r3, #48	@ 0x30
 800defa:	3330      	adds	r3, #48	@ 0x30
 800defc:	4618      	mov	r0, r3
 800defe:	f7fe fbfb 	bl	800c6f8 <ld_word>
 800df02:	4603      	mov	r3, r0
 800df04:	2b01      	cmp	r3, #1
 800df06:	d140      	bne.n	800df8a <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df0a:	3301      	adds	r3, #1
 800df0c:	4619      	mov	r1, r3
 800df0e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df10:	f7fe fea2 	bl	800cc58 <move_window>
 800df14:	4603      	mov	r3, r0
 800df16:	2b00      	cmp	r3, #0
 800df18:	d137      	bne.n	800df8a <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800df1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df1c:	2200      	movs	r2, #0
 800df1e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df22:	3330      	adds	r3, #48	@ 0x30
 800df24:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800df28:	4618      	mov	r0, r3
 800df2a:	f7fe fbe5 	bl	800c6f8 <ld_word>
 800df2e:	4603      	mov	r3, r0
 800df30:	461a      	mov	r2, r3
 800df32:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df36:	429a      	cmp	r2, r3
 800df38:	d127      	bne.n	800df8a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	3330      	adds	r3, #48	@ 0x30
 800df3e:	4618      	mov	r0, r3
 800df40:	f7fe fbf2 	bl	800c728 <ld_dword>
 800df44:	4603      	mov	r3, r0
 800df46:	4a1c      	ldr	r2, [pc, #112]	@ (800dfb8 <find_volume+0x48c>)
 800df48:	4293      	cmp	r3, r2
 800df4a:	d11e      	bne.n	800df8a <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df4e:	3330      	adds	r3, #48	@ 0x30
 800df50:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800df54:	4618      	mov	r0, r3
 800df56:	f7fe fbe7 	bl	800c728 <ld_dword>
 800df5a:	4603      	mov	r3, r0
 800df5c:	4a17      	ldr	r2, [pc, #92]	@ (800dfbc <find_volume+0x490>)
 800df5e:	4293      	cmp	r3, r2
 800df60:	d113      	bne.n	800df8a <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800df62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df64:	3330      	adds	r3, #48	@ 0x30
 800df66:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800df6a:	4618      	mov	r0, r3
 800df6c:	f7fe fbdc 	bl	800c728 <ld_dword>
 800df70:	4602      	mov	r2, r0
 800df72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df74:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800df76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df78:	3330      	adds	r3, #48	@ 0x30
 800df7a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800df7e:	4618      	mov	r0, r3
 800df80:	f7fe fbd2 	bl	800c728 <ld_dword>
 800df84:	4602      	mov	r2, r0
 800df86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df88:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800df8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8c:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800df90:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800df92:	4b0b      	ldr	r3, [pc, #44]	@ (800dfc0 <find_volume+0x494>)
 800df94:	881b      	ldrh	r3, [r3, #0]
 800df96:	3301      	adds	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	4b09      	ldr	r3, [pc, #36]	@ (800dfc0 <find_volume+0x494>)
 800df9c:	801a      	strh	r2, [r3, #0]
 800df9e:	4b08      	ldr	r3, [pc, #32]	@ (800dfc0 <find_volume+0x494>)
 800dfa0:	881a      	ldrh	r2, [r3, #0]
 800dfa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dfa6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfa8:	f7fe fdee 	bl	800cb88 <clear_lock>
#endif
	return FR_OK;
 800dfac:	2300      	movs	r3, #0
}
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3758      	adds	r7, #88	@ 0x58
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	41615252 	.word	0x41615252
 800dfbc:	61417272 	.word	0x61417272
 800dfc0:	200003fc 	.word	0x200003fc

0800dfc4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dfc4:	b580      	push	{r7, lr}
 800dfc6:	b084      	sub	sp, #16
 800dfc8:	af00      	add	r7, sp, #0
 800dfca:	6078      	str	r0, [r7, #4]
 800dfcc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dfce:	2309      	movs	r3, #9
 800dfd0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dfd2:	687b      	ldr	r3, [r7, #4]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d01c      	beq.n	800e012 <validate+0x4e>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	2b00      	cmp	r3, #0
 800dfde:	d018      	beq.n	800e012 <validate+0x4e>
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	781b      	ldrb	r3, [r3, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	d013      	beq.n	800e012 <validate+0x4e>
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	889a      	ldrh	r2, [r3, #4]
 800dfee:	687b      	ldr	r3, [r7, #4]
 800dff0:	681b      	ldr	r3, [r3, #0]
 800dff2:	88db      	ldrh	r3, [r3, #6]
 800dff4:	429a      	cmp	r2, r3
 800dff6:	d10c      	bne.n	800e012 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	785b      	ldrb	r3, [r3, #1]
 800dffe:	4618      	mov	r0, r3
 800e000:	f7fe fada 	bl	800c5b8 <disk_status>
 800e004:	4603      	mov	r3, r0
 800e006:	f003 0301 	and.w	r3, r3, #1
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d101      	bne.n	800e012 <validate+0x4e>
			res = FR_OK;
 800e00e:	2300      	movs	r3, #0
 800e010:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e012:	7bfb      	ldrb	r3, [r7, #15]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d102      	bne.n	800e01e <validate+0x5a>
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	e000      	b.n	800e020 <validate+0x5c>
 800e01e:	2300      	movs	r3, #0
 800e020:	683a      	ldr	r2, [r7, #0]
 800e022:	6013      	str	r3, [r2, #0]
	return res;
 800e024:	7bfb      	ldrb	r3, [r7, #15]
}
 800e026:	4618      	mov	r0, r3
 800e028:	3710      	adds	r7, #16
 800e02a:	46bd      	mov	sp, r7
 800e02c:	bd80      	pop	{r7, pc}
	...

0800e030 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e030:	b580      	push	{r7, lr}
 800e032:	b088      	sub	sp, #32
 800e034:	af00      	add	r7, sp, #0
 800e036:	60f8      	str	r0, [r7, #12]
 800e038:	60b9      	str	r1, [r7, #8]
 800e03a:	4613      	mov	r3, r2
 800e03c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e03e:	68bb      	ldr	r3, [r7, #8]
 800e040:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e042:	f107 0310 	add.w	r3, r7, #16
 800e046:	4618      	mov	r0, r3
 800e048:	f7ff fcd5 	bl	800d9f6 <get_ldnumber>
 800e04c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e04e:	69fb      	ldr	r3, [r7, #28]
 800e050:	2b00      	cmp	r3, #0
 800e052:	da01      	bge.n	800e058 <f_mount+0x28>
 800e054:	230b      	movs	r3, #11
 800e056:	e02b      	b.n	800e0b0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e058:	4a17      	ldr	r2, [pc, #92]	@ (800e0b8 <f_mount+0x88>)
 800e05a:	69fb      	ldr	r3, [r7, #28]
 800e05c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e060:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e062:	69bb      	ldr	r3, [r7, #24]
 800e064:	2b00      	cmp	r3, #0
 800e066:	d005      	beq.n	800e074 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e068:	69b8      	ldr	r0, [r7, #24]
 800e06a:	f7fe fd8d 	bl	800cb88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e06e:	69bb      	ldr	r3, [r7, #24]
 800e070:	2200      	movs	r2, #0
 800e072:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e074:	68fb      	ldr	r3, [r7, #12]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d002      	beq.n	800e080 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	2200      	movs	r2, #0
 800e07e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e080:	68fa      	ldr	r2, [r7, #12]
 800e082:	490d      	ldr	r1, [pc, #52]	@ (800e0b8 <f_mount+0x88>)
 800e084:	69fb      	ldr	r3, [r7, #28]
 800e086:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d002      	beq.n	800e096 <f_mount+0x66>
 800e090:	79fb      	ldrb	r3, [r7, #7]
 800e092:	2b01      	cmp	r3, #1
 800e094:	d001      	beq.n	800e09a <f_mount+0x6a>
 800e096:	2300      	movs	r3, #0
 800e098:	e00a      	b.n	800e0b0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e09a:	f107 010c 	add.w	r1, r7, #12
 800e09e:	f107 0308 	add.w	r3, r7, #8
 800e0a2:	2200      	movs	r2, #0
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f7ff fd41 	bl	800db2c <find_volume>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e0ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0b0:	4618      	mov	r0, r3
 800e0b2:	3720      	adds	r7, #32
 800e0b4:	46bd      	mov	sp, r7
 800e0b6:	bd80      	pop	{r7, pc}
 800e0b8:	200003f8 	.word	0x200003f8

0800e0bc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e0bc:	b580      	push	{r7, lr}
 800e0be:	b098      	sub	sp, #96	@ 0x60
 800e0c0:	af00      	add	r7, sp, #0
 800e0c2:	60f8      	str	r0, [r7, #12]
 800e0c4:	60b9      	str	r1, [r7, #8]
 800e0c6:	4613      	mov	r3, r2
 800e0c8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e0ca:	68fb      	ldr	r3, [r7, #12]
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	d101      	bne.n	800e0d4 <f_open+0x18>
 800e0d0:	2309      	movs	r3, #9
 800e0d2:	e1a9      	b.n	800e428 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e0d4:	79fb      	ldrb	r3, [r7, #7]
 800e0d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0da:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e0dc:	79fa      	ldrb	r2, [r7, #7]
 800e0de:	f107 0110 	add.w	r1, r7, #16
 800e0e2:	f107 0308 	add.w	r3, r7, #8
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	f7ff fd20 	bl	800db2c <find_volume>
 800e0ec:	4603      	mov	r3, r0
 800e0ee:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e0f2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	f040 818d 	bne.w	800e416 <f_open+0x35a>
		dj.obj.fs = fs;
 800e0fc:	693b      	ldr	r3, [r7, #16]
 800e0fe:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e100:	68ba      	ldr	r2, [r7, #8]
 800e102:	f107 0314 	add.w	r3, r7, #20
 800e106:	4611      	mov	r1, r2
 800e108:	4618      	mov	r0, r3
 800e10a:	f7ff fc03 	bl	800d914 <follow_path>
 800e10e:	4603      	mov	r3, r0
 800e110:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e114:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d118      	bne.n	800e14e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e11c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e120:	b25b      	sxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	da03      	bge.n	800e12e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e126:	2306      	movs	r3, #6
 800e128:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e12c:	e00f      	b.n	800e14e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e12e:	79fb      	ldrb	r3, [r7, #7]
 800e130:	2b01      	cmp	r3, #1
 800e132:	bf8c      	ite	hi
 800e134:	2301      	movhi	r3, #1
 800e136:	2300      	movls	r3, #0
 800e138:	b2db      	uxtb	r3, r3
 800e13a:	461a      	mov	r2, r3
 800e13c:	f107 0314 	add.w	r3, r7, #20
 800e140:	4611      	mov	r1, r2
 800e142:	4618      	mov	r0, r3
 800e144:	f7fe fbd8 	bl	800c8f8 <chk_lock>
 800e148:	4603      	mov	r3, r0
 800e14a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	f003 031c 	and.w	r3, r3, #28
 800e154:	2b00      	cmp	r3, #0
 800e156:	d07f      	beq.n	800e258 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e158:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d017      	beq.n	800e190 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e160:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e164:	2b04      	cmp	r3, #4
 800e166:	d10e      	bne.n	800e186 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e168:	f7fe fc22 	bl	800c9b0 <enq_lock>
 800e16c:	4603      	mov	r3, r0
 800e16e:	2b00      	cmp	r3, #0
 800e170:	d006      	beq.n	800e180 <f_open+0xc4>
 800e172:	f107 0314 	add.w	r3, r7, #20
 800e176:	4618      	mov	r0, r3
 800e178:	f7ff fb06 	bl	800d788 <dir_register>
 800e17c:	4603      	mov	r3, r0
 800e17e:	e000      	b.n	800e182 <f_open+0xc6>
 800e180:	2312      	movs	r3, #18
 800e182:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e186:	79fb      	ldrb	r3, [r7, #7]
 800e188:	f043 0308 	orr.w	r3, r3, #8
 800e18c:	71fb      	strb	r3, [r7, #7]
 800e18e:	e010      	b.n	800e1b2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e190:	7ebb      	ldrb	r3, [r7, #26]
 800e192:	f003 0311 	and.w	r3, r3, #17
 800e196:	2b00      	cmp	r3, #0
 800e198:	d003      	beq.n	800e1a2 <f_open+0xe6>
					res = FR_DENIED;
 800e19a:	2307      	movs	r3, #7
 800e19c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e1a0:	e007      	b.n	800e1b2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	f003 0304 	and.w	r3, r3, #4
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d002      	beq.n	800e1b2 <f_open+0xf6>
 800e1ac:	2308      	movs	r3, #8
 800e1ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e1b2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d168      	bne.n	800e28c <f_open+0x1d0>
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	f003 0308 	and.w	r3, r3, #8
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d063      	beq.n	800e28c <f_open+0x1d0>
				dw = GET_FATTIME();
 800e1c4:	f7fc f9c8 	bl	800a558 <get_fattime>
 800e1c8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e1ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1cc:	330e      	adds	r3, #14
 800e1ce:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1d0:	4618      	mov	r0, r3
 800e1d2:	f7fe fae7 	bl	800c7a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e1d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1d8:	3316      	adds	r3, #22
 800e1da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1dc:	4618      	mov	r0, r3
 800e1de:	f7fe fae1 	bl	800c7a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e1e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1e4:	330b      	adds	r3, #11
 800e1e6:	2220      	movs	r2, #32
 800e1e8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e1ea:	693b      	ldr	r3, [r7, #16]
 800e1ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1ee:	4611      	mov	r1, r2
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7ff fa35 	bl	800d660 <ld_clust>
 800e1f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e1f8:	693b      	ldr	r3, [r7, #16]
 800e1fa:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e1fc:	2200      	movs	r2, #0
 800e1fe:	4618      	mov	r0, r3
 800e200:	f7ff fa4d 	bl	800d69e <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e206:	331c      	adds	r3, #28
 800e208:	2100      	movs	r1, #0
 800e20a:	4618      	mov	r0, r3
 800e20c:	f7fe faca 	bl	800c7a4 <st_dword>
					fs->wflag = 1;
 800e210:	693b      	ldr	r3, [r7, #16]
 800e212:	2201      	movs	r2, #1
 800e214:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e216:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d037      	beq.n	800e28c <f_open+0x1d0>
						dw = fs->winsect;
 800e21c:	693b      	ldr	r3, [r7, #16]
 800e21e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e220:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e222:	f107 0314 	add.w	r3, r7, #20
 800e226:	2200      	movs	r2, #0
 800e228:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe ff60 	bl	800d0f0 <remove_chain>
 800e230:	4603      	mov	r3, r0
 800e232:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e236:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e23a:	2b00      	cmp	r3, #0
 800e23c:	d126      	bne.n	800e28c <f_open+0x1d0>
							res = move_window(fs, dw);
 800e23e:	693b      	ldr	r3, [r7, #16]
 800e240:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e242:	4618      	mov	r0, r3
 800e244:	f7fe fd08 	bl	800cc58 <move_window>
 800e248:	4603      	mov	r3, r0
 800e24a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e24e:	693b      	ldr	r3, [r7, #16]
 800e250:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e252:	3a01      	subs	r2, #1
 800e254:	60da      	str	r2, [r3, #12]
 800e256:	e019      	b.n	800e28c <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e258:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e25c:	2b00      	cmp	r3, #0
 800e25e:	d115      	bne.n	800e28c <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e260:	7ebb      	ldrb	r3, [r7, #26]
 800e262:	f003 0310 	and.w	r3, r3, #16
 800e266:	2b00      	cmp	r3, #0
 800e268:	d003      	beq.n	800e272 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e26a:	2304      	movs	r3, #4
 800e26c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e270:	e00c      	b.n	800e28c <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e272:	79fb      	ldrb	r3, [r7, #7]
 800e274:	f003 0302 	and.w	r3, r3, #2
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d007      	beq.n	800e28c <f_open+0x1d0>
 800e27c:	7ebb      	ldrb	r3, [r7, #26]
 800e27e:	f003 0301 	and.w	r3, r3, #1
 800e282:	2b00      	cmp	r3, #0
 800e284:	d002      	beq.n	800e28c <f_open+0x1d0>
						res = FR_DENIED;
 800e286:	2307      	movs	r3, #7
 800e288:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e28c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e290:	2b00      	cmp	r3, #0
 800e292:	d126      	bne.n	800e2e2 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e294:	79fb      	ldrb	r3, [r7, #7]
 800e296:	f003 0308 	and.w	r3, r3, #8
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d003      	beq.n	800e2a6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e29e:	79fb      	ldrb	r3, [r7, #7]
 800e2a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2a4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e2a6:	693b      	ldr	r3, [r7, #16]
 800e2a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e2ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	2b01      	cmp	r3, #1
 800e2b8:	bf8c      	ite	hi
 800e2ba:	2301      	movhi	r3, #1
 800e2bc:	2300      	movls	r3, #0
 800e2be:	b2db      	uxtb	r3, r3
 800e2c0:	461a      	mov	r2, r3
 800e2c2:	f107 0314 	add.w	r3, r7, #20
 800e2c6:	4611      	mov	r1, r2
 800e2c8:	4618      	mov	r0, r3
 800e2ca:	f7fe fb93 	bl	800c9f4 <inc_lock>
 800e2ce:	4602      	mov	r2, r0
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	691b      	ldr	r3, [r3, #16]
 800e2d8:	2b00      	cmp	r3, #0
 800e2da:	d102      	bne.n	800e2e2 <f_open+0x226>
 800e2dc:	2302      	movs	r3, #2
 800e2de:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e2e2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	f040 8095 	bne.w	800e416 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e2ec:	693b      	ldr	r3, [r7, #16]
 800e2ee:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2f0:	4611      	mov	r1, r2
 800e2f2:	4618      	mov	r0, r3
 800e2f4:	f7ff f9b4 	bl	800d660 <ld_clust>
 800e2f8:	4602      	mov	r2, r0
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e2fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e300:	331c      	adds	r3, #28
 800e302:	4618      	mov	r0, r3
 800e304:	f7fe fa10 	bl	800c728 <ld_dword>
 800e308:	4602      	mov	r2, r0
 800e30a:	68fb      	ldr	r3, [r7, #12]
 800e30c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2200      	movs	r2, #0
 800e312:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e314:	693a      	ldr	r2, [r7, #16]
 800e316:	68fb      	ldr	r3, [r7, #12]
 800e318:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e31a:	693b      	ldr	r3, [r7, #16]
 800e31c:	88da      	ldrh	r2, [r3, #6]
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e322:	68fb      	ldr	r3, [r7, #12]
 800e324:	79fa      	ldrb	r2, [r7, #7]
 800e326:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	2200      	movs	r2, #0
 800e32c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e334:	68fb      	ldr	r3, [r7, #12]
 800e336:	2200      	movs	r2, #0
 800e338:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	3330      	adds	r3, #48	@ 0x30
 800e33e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e342:	2100      	movs	r1, #0
 800e344:	4618      	mov	r0, r3
 800e346:	f7fe fa7a 	bl	800c83e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e34a:	79fb      	ldrb	r3, [r7, #7]
 800e34c:	f003 0320 	and.w	r3, r3, #32
 800e350:	2b00      	cmp	r3, #0
 800e352:	d060      	beq.n	800e416 <f_open+0x35a>
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	68db      	ldr	r3, [r3, #12]
 800e358:	2b00      	cmp	r3, #0
 800e35a:	d05c      	beq.n	800e416 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e35c:	68fb      	ldr	r3, [r7, #12]
 800e35e:	68da      	ldr	r2, [r3, #12]
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e364:	693b      	ldr	r3, [r7, #16]
 800e366:	895b      	ldrh	r3, [r3, #10]
 800e368:	025b      	lsls	r3, r3, #9
 800e36a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	689b      	ldr	r3, [r3, #8]
 800e370:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	68db      	ldr	r3, [r3, #12]
 800e376:	657b      	str	r3, [r7, #84]	@ 0x54
 800e378:	e016      	b.n	800e3a8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e37a:	68fb      	ldr	r3, [r7, #12]
 800e37c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e37e:	4618      	mov	r0, r3
 800e380:	f7fe fd25 	bl	800cdce <get_fat>
 800e384:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e386:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e388:	2b01      	cmp	r3, #1
 800e38a:	d802      	bhi.n	800e392 <f_open+0x2d6>
 800e38c:	2302      	movs	r3, #2
 800e38e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e392:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e394:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e398:	d102      	bne.n	800e3a0 <f_open+0x2e4>
 800e39a:	2301      	movs	r3, #1
 800e39c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3a4:	1ad3      	subs	r3, r2, r3
 800e3a6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d103      	bne.n	800e3b8 <f_open+0x2fc>
 800e3b0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3b4:	429a      	cmp	r2, r3
 800e3b6:	d8e0      	bhi.n	800e37a <f_open+0x2be>
				}
				fp->clust = clst;
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3bc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e3be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3c2:	2b00      	cmp	r3, #0
 800e3c4:	d127      	bne.n	800e416 <f_open+0x35a>
 800e3c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d022      	beq.n	800e416 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e3d0:	693b      	ldr	r3, [r7, #16]
 800e3d2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e3d4:	4618      	mov	r0, r3
 800e3d6:	f7fe fcdb 	bl	800cd90 <clust2sect>
 800e3da:	6478      	str	r0, [r7, #68]	@ 0x44
 800e3dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d103      	bne.n	800e3ea <f_open+0x32e>
						res = FR_INT_ERR;
 800e3e2:	2302      	movs	r3, #2
 800e3e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e3e8:	e015      	b.n	800e416 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e3ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3ec:	0a5a      	lsrs	r2, r3, #9
 800e3ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3f0:	441a      	add	r2, r3
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e3f6:	693b      	ldr	r3, [r7, #16]
 800e3f8:	7858      	ldrb	r0, [r3, #1]
 800e3fa:	68fb      	ldr	r3, [r7, #12]
 800e3fc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6a1a      	ldr	r2, [r3, #32]
 800e404:	2301      	movs	r3, #1
 800e406:	f7fe f919 	bl	800c63c <disk_read>
 800e40a:	4603      	mov	r3, r0
 800e40c:	2b00      	cmp	r3, #0
 800e40e:	d002      	beq.n	800e416 <f_open+0x35a>
 800e410:	2301      	movs	r3, #1
 800e412:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e416:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e41a:	2b00      	cmp	r3, #0
 800e41c:	d002      	beq.n	800e424 <f_open+0x368>
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	2200      	movs	r2, #0
 800e422:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e424:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e428:	4618      	mov	r0, r3
 800e42a:	3760      	adds	r7, #96	@ 0x60
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b08e      	sub	sp, #56	@ 0x38
 800e434:	af00      	add	r7, sp, #0
 800e436:	60f8      	str	r0, [r7, #12]
 800e438:	60b9      	str	r1, [r7, #8]
 800e43a:	607a      	str	r2, [r7, #4]
 800e43c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e442:	683b      	ldr	r3, [r7, #0]
 800e444:	2200      	movs	r2, #0
 800e446:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	f107 0214 	add.w	r2, r7, #20
 800e44e:	4611      	mov	r1, r2
 800e450:	4618      	mov	r0, r3
 800e452:	f7ff fdb7 	bl	800dfc4 <validate>
 800e456:	4603      	mov	r3, r0
 800e458:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e45c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e460:	2b00      	cmp	r3, #0
 800e462:	d107      	bne.n	800e474 <f_read+0x44>
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	7d5b      	ldrb	r3, [r3, #21]
 800e468:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e46c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e470:	2b00      	cmp	r3, #0
 800e472:	d002      	beq.n	800e47a <f_read+0x4a>
 800e474:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e478:	e115      	b.n	800e6a6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e47a:	68fb      	ldr	r3, [r7, #12]
 800e47c:	7d1b      	ldrb	r3, [r3, #20]
 800e47e:	f003 0301 	and.w	r3, r3, #1
 800e482:	2b00      	cmp	r3, #0
 800e484:	d101      	bne.n	800e48a <f_read+0x5a>
 800e486:	2307      	movs	r3, #7
 800e488:	e10d      	b.n	800e6a6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	68da      	ldr	r2, [r3, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	699b      	ldr	r3, [r3, #24]
 800e492:	1ad3      	subs	r3, r2, r3
 800e494:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e496:	687a      	ldr	r2, [r7, #4]
 800e498:	6a3b      	ldr	r3, [r7, #32]
 800e49a:	429a      	cmp	r2, r3
 800e49c:	f240 80fe 	bls.w	800e69c <f_read+0x26c>
 800e4a0:	6a3b      	ldr	r3, [r7, #32]
 800e4a2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e4a4:	e0fa      	b.n	800e69c <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e4a6:	68fb      	ldr	r3, [r7, #12]
 800e4a8:	699b      	ldr	r3, [r3, #24]
 800e4aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	f040 80c6 	bne.w	800e640 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e4b4:	68fb      	ldr	r3, [r7, #12]
 800e4b6:	699b      	ldr	r3, [r3, #24]
 800e4b8:	0a5b      	lsrs	r3, r3, #9
 800e4ba:	697a      	ldr	r2, [r7, #20]
 800e4bc:	8952      	ldrh	r2, [r2, #10]
 800e4be:	3a01      	subs	r2, #1
 800e4c0:	4013      	ands	r3, r2
 800e4c2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e4c4:	69fb      	ldr	r3, [r7, #28]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d12f      	bne.n	800e52a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e4ca:	68fb      	ldr	r3, [r7, #12]
 800e4cc:	699b      	ldr	r3, [r3, #24]
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d103      	bne.n	800e4da <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	689b      	ldr	r3, [r3, #8]
 800e4d6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4d8:	e013      	b.n	800e502 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	d007      	beq.n	800e4f2 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	699b      	ldr	r3, [r3, #24]
 800e4e6:	4619      	mov	r1, r3
 800e4e8:	68f8      	ldr	r0, [r7, #12]
 800e4ea:	f7fe fefe 	bl	800d2ea <clmt_clust>
 800e4ee:	6338      	str	r0, [r7, #48]	@ 0x30
 800e4f0:	e007      	b.n	800e502 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e4f2:	68fa      	ldr	r2, [r7, #12]
 800e4f4:	68fb      	ldr	r3, [r7, #12]
 800e4f6:	69db      	ldr	r3, [r3, #28]
 800e4f8:	4619      	mov	r1, r3
 800e4fa:	4610      	mov	r0, r2
 800e4fc:	f7fe fc67 	bl	800cdce <get_fat>
 800e500:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e504:	2b01      	cmp	r3, #1
 800e506:	d804      	bhi.n	800e512 <f_read+0xe2>
 800e508:	68fb      	ldr	r3, [r7, #12]
 800e50a:	2202      	movs	r2, #2
 800e50c:	755a      	strb	r2, [r3, #21]
 800e50e:	2302      	movs	r3, #2
 800e510:	e0c9      	b.n	800e6a6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e512:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e514:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e518:	d104      	bne.n	800e524 <f_read+0xf4>
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	2201      	movs	r2, #1
 800e51e:	755a      	strb	r2, [r3, #21]
 800e520:	2301      	movs	r3, #1
 800e522:	e0c0      	b.n	800e6a6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e528:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	68fb      	ldr	r3, [r7, #12]
 800e52e:	69db      	ldr	r3, [r3, #28]
 800e530:	4619      	mov	r1, r3
 800e532:	4610      	mov	r0, r2
 800e534:	f7fe fc2c 	bl	800cd90 <clust2sect>
 800e538:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e53a:	69bb      	ldr	r3, [r7, #24]
 800e53c:	2b00      	cmp	r3, #0
 800e53e:	d104      	bne.n	800e54a <f_read+0x11a>
 800e540:	68fb      	ldr	r3, [r7, #12]
 800e542:	2202      	movs	r2, #2
 800e544:	755a      	strb	r2, [r3, #21]
 800e546:	2302      	movs	r3, #2
 800e548:	e0ad      	b.n	800e6a6 <f_read+0x276>
			sect += csect;
 800e54a:	69ba      	ldr	r2, [r7, #24]
 800e54c:	69fb      	ldr	r3, [r7, #28]
 800e54e:	4413      	add	r3, r2
 800e550:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	0a5b      	lsrs	r3, r3, #9
 800e556:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d039      	beq.n	800e5d2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e55e:	69fa      	ldr	r2, [r7, #28]
 800e560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e562:	4413      	add	r3, r2
 800e564:	697a      	ldr	r2, [r7, #20]
 800e566:	8952      	ldrh	r2, [r2, #10]
 800e568:	4293      	cmp	r3, r2
 800e56a:	d905      	bls.n	800e578 <f_read+0x148>
					cc = fs->csize - csect;
 800e56c:	697b      	ldr	r3, [r7, #20]
 800e56e:	895b      	ldrh	r3, [r3, #10]
 800e570:	461a      	mov	r2, r3
 800e572:	69fb      	ldr	r3, [r7, #28]
 800e574:	1ad3      	subs	r3, r2, r3
 800e576:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e578:	697b      	ldr	r3, [r7, #20]
 800e57a:	7858      	ldrb	r0, [r3, #1]
 800e57c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57e:	69ba      	ldr	r2, [r7, #24]
 800e580:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e582:	f7fe f85b 	bl	800c63c <disk_read>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d004      	beq.n	800e596 <f_read+0x166>
 800e58c:	68fb      	ldr	r3, [r7, #12]
 800e58e:	2201      	movs	r2, #1
 800e590:	755a      	strb	r2, [r3, #21]
 800e592:	2301      	movs	r3, #1
 800e594:	e087      	b.n	800e6a6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	7d1b      	ldrb	r3, [r3, #20]
 800e59a:	b25b      	sxtb	r3, r3
 800e59c:	2b00      	cmp	r3, #0
 800e59e:	da14      	bge.n	800e5ca <f_read+0x19a>
 800e5a0:	68fb      	ldr	r3, [r7, #12]
 800e5a2:	6a1a      	ldr	r2, [r3, #32]
 800e5a4:	69bb      	ldr	r3, [r7, #24]
 800e5a6:	1ad3      	subs	r3, r2, r3
 800e5a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5aa:	429a      	cmp	r2, r3
 800e5ac:	d90d      	bls.n	800e5ca <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	6a1a      	ldr	r2, [r3, #32]
 800e5b2:	69bb      	ldr	r3, [r7, #24]
 800e5b4:	1ad3      	subs	r3, r2, r3
 800e5b6:	025b      	lsls	r3, r3, #9
 800e5b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5ba:	18d0      	adds	r0, r2, r3
 800e5bc:	68fb      	ldr	r3, [r7, #12]
 800e5be:	3330      	adds	r3, #48	@ 0x30
 800e5c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5c4:	4619      	mov	r1, r3
 800e5c6:	f7fe f919 	bl	800c7fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e5ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5cc:	025b      	lsls	r3, r3, #9
 800e5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e5d0:	e050      	b.n	800e674 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	6a1b      	ldr	r3, [r3, #32]
 800e5d6:	69ba      	ldr	r2, [r7, #24]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d02e      	beq.n	800e63a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	7d1b      	ldrb	r3, [r3, #20]
 800e5e0:	b25b      	sxtb	r3, r3
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	da18      	bge.n	800e618 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e5e6:	697b      	ldr	r3, [r7, #20]
 800e5e8:	7858      	ldrb	r0, [r3, #1]
 800e5ea:	68fb      	ldr	r3, [r7, #12]
 800e5ec:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e5f0:	68fb      	ldr	r3, [r7, #12]
 800e5f2:	6a1a      	ldr	r2, [r3, #32]
 800e5f4:	2301      	movs	r3, #1
 800e5f6:	f7fe f841 	bl	800c67c <disk_write>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <f_read+0x1da>
 800e600:	68fb      	ldr	r3, [r7, #12]
 800e602:	2201      	movs	r2, #1
 800e604:	755a      	strb	r2, [r3, #21]
 800e606:	2301      	movs	r3, #1
 800e608:	e04d      	b.n	800e6a6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	7d1b      	ldrb	r3, [r3, #20]
 800e60e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e612:	b2da      	uxtb	r2, r3
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e618:	697b      	ldr	r3, [r7, #20]
 800e61a:	7858      	ldrb	r0, [r3, #1]
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e622:	2301      	movs	r3, #1
 800e624:	69ba      	ldr	r2, [r7, #24]
 800e626:	f7fe f809 	bl	800c63c <disk_read>
 800e62a:	4603      	mov	r3, r0
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	d004      	beq.n	800e63a <f_read+0x20a>
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	2201      	movs	r2, #1
 800e634:	755a      	strb	r2, [r3, #21]
 800e636:	2301      	movs	r3, #1
 800e638:	e035      	b.n	800e6a6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e63a:	68fb      	ldr	r3, [r7, #12]
 800e63c:	69ba      	ldr	r2, [r7, #24]
 800e63e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	699b      	ldr	r3, [r3, #24]
 800e644:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e648:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e64e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	429a      	cmp	r2, r3
 800e654:	d901      	bls.n	800e65a <f_read+0x22a>
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e668:	4413      	add	r3, r2
 800e66a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e66c:	4619      	mov	r1, r3
 800e66e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e670:	f7fe f8c4 	bl	800c7fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e674:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e676:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e678:	4413      	add	r3, r2
 800e67a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	699a      	ldr	r2, [r3, #24]
 800e680:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e682:	441a      	add	r2, r3
 800e684:	68fb      	ldr	r3, [r7, #12]
 800e686:	619a      	str	r2, [r3, #24]
 800e688:	683b      	ldr	r3, [r7, #0]
 800e68a:	681a      	ldr	r2, [r3, #0]
 800e68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e68e:	441a      	add	r2, r3
 800e690:	683b      	ldr	r3, [r7, #0]
 800e692:	601a      	str	r2, [r3, #0]
 800e694:	687a      	ldr	r2, [r7, #4]
 800e696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e698:	1ad3      	subs	r3, r2, r3
 800e69a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e69c:	687b      	ldr	r3, [r7, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	f47f af01 	bne.w	800e4a6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e6a4:	2300      	movs	r3, #0
}
 800e6a6:	4618      	mov	r0, r3
 800e6a8:	3738      	adds	r7, #56	@ 0x38
 800e6aa:	46bd      	mov	sp, r7
 800e6ac:	bd80      	pop	{r7, pc}

0800e6ae <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e6ae:	b580      	push	{r7, lr}
 800e6b0:	b086      	sub	sp, #24
 800e6b2:	af00      	add	r7, sp, #0
 800e6b4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	f107 0208 	add.w	r2, r7, #8
 800e6bc:	4611      	mov	r1, r2
 800e6be:	4618      	mov	r0, r3
 800e6c0:	f7ff fc80 	bl	800dfc4 <validate>
 800e6c4:	4603      	mov	r3, r0
 800e6c6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6c8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ca:	2b00      	cmp	r3, #0
 800e6cc:	d168      	bne.n	800e7a0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	7d1b      	ldrb	r3, [r3, #20]
 800e6d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d062      	beq.n	800e7a0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	7d1b      	ldrb	r3, [r3, #20]
 800e6de:	b25b      	sxtb	r3, r3
 800e6e0:	2b00      	cmp	r3, #0
 800e6e2:	da15      	bge.n	800e710 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e6e4:	68bb      	ldr	r3, [r7, #8]
 800e6e6:	7858      	ldrb	r0, [r3, #1]
 800e6e8:	687b      	ldr	r3, [r7, #4]
 800e6ea:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	6a1a      	ldr	r2, [r3, #32]
 800e6f2:	2301      	movs	r3, #1
 800e6f4:	f7fd ffc2 	bl	800c67c <disk_write>
 800e6f8:	4603      	mov	r3, r0
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	d001      	beq.n	800e702 <f_sync+0x54>
 800e6fe:	2301      	movs	r3, #1
 800e700:	e04f      	b.n	800e7a2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e702:	687b      	ldr	r3, [r7, #4]
 800e704:	7d1b      	ldrb	r3, [r3, #20]
 800e706:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e70a:	b2da      	uxtb	r2, r3
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e710:	f7fb ff22 	bl	800a558 <get_fattime>
 800e714:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e716:	68ba      	ldr	r2, [r7, #8]
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e71c:	4619      	mov	r1, r3
 800e71e:	4610      	mov	r0, r2
 800e720:	f7fe fa9a 	bl	800cc58 <move_window>
 800e724:	4603      	mov	r3, r0
 800e726:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e728:	7dfb      	ldrb	r3, [r7, #23]
 800e72a:	2b00      	cmp	r3, #0
 800e72c:	d138      	bne.n	800e7a0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e732:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	330b      	adds	r3, #11
 800e738:	781a      	ldrb	r2, [r3, #0]
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	330b      	adds	r3, #11
 800e73e:	f042 0220 	orr.w	r2, r2, #32
 800e742:	b2d2      	uxtb	r2, r2
 800e744:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6818      	ldr	r0, [r3, #0]
 800e74a:	687b      	ldr	r3, [r7, #4]
 800e74c:	689b      	ldr	r3, [r3, #8]
 800e74e:	461a      	mov	r2, r3
 800e750:	68f9      	ldr	r1, [r7, #12]
 800e752:	f7fe ffa4 	bl	800d69e <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	f103 021c 	add.w	r2, r3, #28
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	68db      	ldr	r3, [r3, #12]
 800e760:	4619      	mov	r1, r3
 800e762:	4610      	mov	r0, r2
 800e764:	f7fe f81e 	bl	800c7a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	3316      	adds	r3, #22
 800e76c:	6939      	ldr	r1, [r7, #16]
 800e76e:	4618      	mov	r0, r3
 800e770:	f7fe f818 	bl	800c7a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	3312      	adds	r3, #18
 800e778:	2100      	movs	r1, #0
 800e77a:	4618      	mov	r0, r3
 800e77c:	f7fd fff7 	bl	800c76e <st_word>
					fs->wflag = 1;
 800e780:	68bb      	ldr	r3, [r7, #8]
 800e782:	2201      	movs	r2, #1
 800e784:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e786:	68bb      	ldr	r3, [r7, #8]
 800e788:	4618      	mov	r0, r3
 800e78a:	f7fe fa93 	bl	800ccb4 <sync_fs>
 800e78e:	4603      	mov	r3, r0
 800e790:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	7d1b      	ldrb	r3, [r3, #20]
 800e796:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e79a:	b2da      	uxtb	r2, r3
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e7a0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	3718      	adds	r7, #24
 800e7a6:	46bd      	mov	sp, r7
 800e7a8:	bd80      	pop	{r7, pc}

0800e7aa <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e7aa:	b580      	push	{r7, lr}
 800e7ac:	b084      	sub	sp, #16
 800e7ae:	af00      	add	r7, sp, #0
 800e7b0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e7b2:	6878      	ldr	r0, [r7, #4]
 800e7b4:	f7ff ff7b 	bl	800e6ae <f_sync>
 800e7b8:	4603      	mov	r3, r0
 800e7ba:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e7bc:	7bfb      	ldrb	r3, [r7, #15]
 800e7be:	2b00      	cmp	r3, #0
 800e7c0:	d118      	bne.n	800e7f4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	f107 0208 	add.w	r2, r7, #8
 800e7c8:	4611      	mov	r1, r2
 800e7ca:	4618      	mov	r0, r3
 800e7cc:	f7ff fbfa 	bl	800dfc4 <validate>
 800e7d0:	4603      	mov	r3, r0
 800e7d2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e7d4:	7bfb      	ldrb	r3, [r7, #15]
 800e7d6:	2b00      	cmp	r3, #0
 800e7d8:	d10c      	bne.n	800e7f4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	691b      	ldr	r3, [r3, #16]
 800e7de:	4618      	mov	r0, r3
 800e7e0:	f7fe f996 	bl	800cb10 <dec_lock>
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e7e8:	7bfb      	ldrb	r3, [r7, #15]
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d102      	bne.n	800e7f4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3710      	adds	r7, #16
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e800:	b480      	push	{r7}
 800e802:	b087      	sub	sp, #28
 800e804:	af00      	add	r7, sp, #0
 800e806:	60f8      	str	r0, [r7, #12]
 800e808:	60b9      	str	r1, [r7, #8]
 800e80a:	4613      	mov	r3, r2
 800e80c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e80e:	2301      	movs	r3, #1
 800e810:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e812:	2300      	movs	r3, #0
 800e814:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e816:	4b1f      	ldr	r3, [pc, #124]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e818:	7a5b      	ldrb	r3, [r3, #9]
 800e81a:	b2db      	uxtb	r3, r3
 800e81c:	2b00      	cmp	r3, #0
 800e81e:	d131      	bne.n	800e884 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e820:	4b1c      	ldr	r3, [pc, #112]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e822:	7a5b      	ldrb	r3, [r3, #9]
 800e824:	b2db      	uxtb	r3, r3
 800e826:	461a      	mov	r2, r3
 800e828:	4b1a      	ldr	r3, [pc, #104]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e82a:	2100      	movs	r1, #0
 800e82c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e82e:	4b19      	ldr	r3, [pc, #100]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e830:	7a5b      	ldrb	r3, [r3, #9]
 800e832:	b2db      	uxtb	r3, r3
 800e834:	4a17      	ldr	r2, [pc, #92]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e836:	009b      	lsls	r3, r3, #2
 800e838:	4413      	add	r3, r2
 800e83a:	68fa      	ldr	r2, [r7, #12]
 800e83c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e83e:	4b15      	ldr	r3, [pc, #84]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e840:	7a5b      	ldrb	r3, [r3, #9]
 800e842:	b2db      	uxtb	r3, r3
 800e844:	461a      	mov	r2, r3
 800e846:	4b13      	ldr	r3, [pc, #76]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e848:	4413      	add	r3, r2
 800e84a:	79fa      	ldrb	r2, [r7, #7]
 800e84c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e84e:	4b11      	ldr	r3, [pc, #68]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e850:	7a5b      	ldrb	r3, [r3, #9]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	1c5a      	adds	r2, r3, #1
 800e856:	b2d1      	uxtb	r1, r2
 800e858:	4a0e      	ldr	r2, [pc, #56]	@ (800e894 <FATFS_LinkDriverEx+0x94>)
 800e85a:	7251      	strb	r1, [r2, #9]
 800e85c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e85e:	7dbb      	ldrb	r3, [r7, #22]
 800e860:	3330      	adds	r3, #48	@ 0x30
 800e862:	b2da      	uxtb	r2, r3
 800e864:	68bb      	ldr	r3, [r7, #8]
 800e866:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	3301      	adds	r3, #1
 800e86c:	223a      	movs	r2, #58	@ 0x3a
 800e86e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e870:	68bb      	ldr	r3, [r7, #8]
 800e872:	3302      	adds	r3, #2
 800e874:	222f      	movs	r2, #47	@ 0x2f
 800e876:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e878:	68bb      	ldr	r3, [r7, #8]
 800e87a:	3303      	adds	r3, #3
 800e87c:	2200      	movs	r2, #0
 800e87e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e880:	2300      	movs	r3, #0
 800e882:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e884:	7dfb      	ldrb	r3, [r7, #23]
}
 800e886:	4618      	mov	r0, r3
 800e888:	371c      	adds	r7, #28
 800e88a:	46bd      	mov	sp, r7
 800e88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e890:	4770      	bx	lr
 800e892:	bf00      	nop
 800e894:	20000420 	.word	0x20000420

0800e898 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
 800e8a0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	6839      	ldr	r1, [r7, #0]
 800e8a6:	6878      	ldr	r0, [r7, #4]
 800e8a8:	f7ff ffaa 	bl	800e800 <FATFS_LinkDriverEx>
 800e8ac:	4603      	mov	r3, r0
}
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	3708      	adds	r7, #8
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	bd80      	pop	{r7, pc}
	...

0800e8b8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8bc:	2200      	movs	r2, #0
 800e8be:	4912      	ldr	r1, [pc, #72]	@ (800e908 <MX_USB_DEVICE_Init+0x50>)
 800e8c0:	4812      	ldr	r0, [pc, #72]	@ (800e90c <MX_USB_DEVICE_Init+0x54>)
 800e8c2:	f7fc fb77 	bl	800afb4 <USBD_Init>
 800e8c6:	4603      	mov	r3, r0
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d001      	beq.n	800e8d0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8cc:	f7f2 ff50 	bl	8001770 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8d0:	490f      	ldr	r1, [pc, #60]	@ (800e910 <MX_USB_DEVICE_Init+0x58>)
 800e8d2:	480e      	ldr	r0, [pc, #56]	@ (800e90c <MX_USB_DEVICE_Init+0x54>)
 800e8d4:	f7fc fb9e 	bl	800b014 <USBD_RegisterClass>
 800e8d8:	4603      	mov	r3, r0
 800e8da:	2b00      	cmp	r3, #0
 800e8dc:	d001      	beq.n	800e8e2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8de:	f7f2 ff47 	bl	8001770 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e8e2:	490c      	ldr	r1, [pc, #48]	@ (800e914 <MX_USB_DEVICE_Init+0x5c>)
 800e8e4:	4809      	ldr	r0, [pc, #36]	@ (800e90c <MX_USB_DEVICE_Init+0x54>)
 800e8e6:	f7fc fa95 	bl	800ae14 <USBD_CDC_RegisterInterface>
 800e8ea:	4603      	mov	r3, r0
 800e8ec:	2b00      	cmp	r3, #0
 800e8ee:	d001      	beq.n	800e8f4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e8f0:	f7f2 ff3e 	bl	8001770 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e8f4:	4805      	ldr	r0, [pc, #20]	@ (800e90c <MX_USB_DEVICE_Init+0x54>)
 800e8f6:	f7fc fbc3 	bl	800b080 <USBD_Start>
 800e8fa:	4603      	mov	r3, r0
 800e8fc:	2b00      	cmp	r3, #0
 800e8fe:	d001      	beq.n	800e904 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e900:	f7f2 ff36 	bl	8001770 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e904:	bf00      	nop
 800e906:	bd80      	pop	{r7, pc}
 800e908:	200000e4 	.word	0x200000e4
 800e90c:	2000042c 	.word	0x2000042c
 800e910:	20000050 	.word	0x20000050
 800e914:	200000d0 	.word	0x200000d0

0800e918 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e918:	b580      	push	{r7, lr}
 800e91a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e91c:	2200      	movs	r2, #0
 800e91e:	4905      	ldr	r1, [pc, #20]	@ (800e934 <CDC_Init_FS+0x1c>)
 800e920:	4805      	ldr	r0, [pc, #20]	@ (800e938 <CDC_Init_FS+0x20>)
 800e922:	f7fc fa91 	bl	800ae48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e926:	4905      	ldr	r1, [pc, #20]	@ (800e93c <CDC_Init_FS+0x24>)
 800e928:	4803      	ldr	r0, [pc, #12]	@ (800e938 <CDC_Init_FS+0x20>)
 800e92a:	f7fc faaf 	bl	800ae8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e92e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e930:	4618      	mov	r0, r3
 800e932:	bd80      	pop	{r7, pc}
 800e934:	20000b08 	.word	0x20000b08
 800e938:	2000042c 	.word	0x2000042c
 800e93c:	20000708 	.word	0x20000708

0800e940 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e940:	b480      	push	{r7}
 800e942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e944:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e946:	4618      	mov	r0, r3
 800e948:	46bd      	mov	sp, r7
 800e94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94e:	4770      	bx	lr

0800e950 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e950:	b480      	push	{r7}
 800e952:	b083      	sub	sp, #12
 800e954:	af00      	add	r7, sp, #0
 800e956:	4603      	mov	r3, r0
 800e958:	6039      	str	r1, [r7, #0]
 800e95a:	71fb      	strb	r3, [r7, #7]
 800e95c:	4613      	mov	r3, r2
 800e95e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e960:	79fb      	ldrb	r3, [r7, #7]
 800e962:	2b23      	cmp	r3, #35	@ 0x23
 800e964:	d84a      	bhi.n	800e9fc <CDC_Control_FS+0xac>
 800e966:	a201      	add	r2, pc, #4	@ (adr r2, 800e96c <CDC_Control_FS+0x1c>)
 800e968:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e96c:	0800e9fd 	.word	0x0800e9fd
 800e970:	0800e9fd 	.word	0x0800e9fd
 800e974:	0800e9fd 	.word	0x0800e9fd
 800e978:	0800e9fd 	.word	0x0800e9fd
 800e97c:	0800e9fd 	.word	0x0800e9fd
 800e980:	0800e9fd 	.word	0x0800e9fd
 800e984:	0800e9fd 	.word	0x0800e9fd
 800e988:	0800e9fd 	.word	0x0800e9fd
 800e98c:	0800e9fd 	.word	0x0800e9fd
 800e990:	0800e9fd 	.word	0x0800e9fd
 800e994:	0800e9fd 	.word	0x0800e9fd
 800e998:	0800e9fd 	.word	0x0800e9fd
 800e99c:	0800e9fd 	.word	0x0800e9fd
 800e9a0:	0800e9fd 	.word	0x0800e9fd
 800e9a4:	0800e9fd 	.word	0x0800e9fd
 800e9a8:	0800e9fd 	.word	0x0800e9fd
 800e9ac:	0800e9fd 	.word	0x0800e9fd
 800e9b0:	0800e9fd 	.word	0x0800e9fd
 800e9b4:	0800e9fd 	.word	0x0800e9fd
 800e9b8:	0800e9fd 	.word	0x0800e9fd
 800e9bc:	0800e9fd 	.word	0x0800e9fd
 800e9c0:	0800e9fd 	.word	0x0800e9fd
 800e9c4:	0800e9fd 	.word	0x0800e9fd
 800e9c8:	0800e9fd 	.word	0x0800e9fd
 800e9cc:	0800e9fd 	.word	0x0800e9fd
 800e9d0:	0800e9fd 	.word	0x0800e9fd
 800e9d4:	0800e9fd 	.word	0x0800e9fd
 800e9d8:	0800e9fd 	.word	0x0800e9fd
 800e9dc:	0800e9fd 	.word	0x0800e9fd
 800e9e0:	0800e9fd 	.word	0x0800e9fd
 800e9e4:	0800e9fd 	.word	0x0800e9fd
 800e9e8:	0800e9fd 	.word	0x0800e9fd
 800e9ec:	0800e9fd 	.word	0x0800e9fd
 800e9f0:	0800e9fd 	.word	0x0800e9fd
 800e9f4:	0800e9fd 	.word	0x0800e9fd
 800e9f8:	0800e9fd 	.word	0x0800e9fd
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e9fc:	bf00      	nop
  }

  return (USBD_OK);
 800e9fe:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea0c:	b580      	push	{r7, lr}
 800ea0e:	b082      	sub	sp, #8
 800ea10:	af00      	add	r7, sp, #0
 800ea12:	6078      	str	r0, [r7, #4]
 800ea14:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	4805      	ldr	r0, [pc, #20]	@ (800ea30 <CDC_Receive_FS+0x24>)
 800ea1a:	f7fc fa37 	bl	800ae8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea1e:	4804      	ldr	r0, [pc, #16]	@ (800ea30 <CDC_Receive_FS+0x24>)
 800ea20:	f7fc fa92 	bl	800af48 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea24:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	3708      	adds	r7, #8
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	bd80      	pop	{r7, pc}
 800ea2e:	bf00      	nop
 800ea30:	2000042c 	.word	0x2000042c

0800ea34 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b084      	sub	sp, #16
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	6078      	str	r0, [r7, #4]
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea40:	2300      	movs	r3, #0
 800ea42:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea44:	4b0d      	ldr	r3, [pc, #52]	@ (800ea7c <CDC_Transmit_FS+0x48>)
 800ea46:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea4a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea4c:	68bb      	ldr	r3, [r7, #8]
 800ea4e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d001      	beq.n	800ea5a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea56:	2301      	movs	r3, #1
 800ea58:	e00b      	b.n	800ea72 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea5a:	887b      	ldrh	r3, [r7, #2]
 800ea5c:	461a      	mov	r2, r3
 800ea5e:	6879      	ldr	r1, [r7, #4]
 800ea60:	4806      	ldr	r0, [pc, #24]	@ (800ea7c <CDC_Transmit_FS+0x48>)
 800ea62:	f7fc f9f1 	bl	800ae48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea66:	4805      	ldr	r0, [pc, #20]	@ (800ea7c <CDC_Transmit_FS+0x48>)
 800ea68:	f7fc fa2e 	bl	800aec8 <USBD_CDC_TransmitPacket>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	3710      	adds	r7, #16
 800ea76:	46bd      	mov	sp, r7
 800ea78:	bd80      	pop	{r7, pc}
 800ea7a:	bf00      	nop
 800ea7c:	2000042c 	.word	0x2000042c

0800ea80 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ea80:	b480      	push	{r7}
 800ea82:	b087      	sub	sp, #28
 800ea84:	af00      	add	r7, sp, #0
 800ea86:	60f8      	str	r0, [r7, #12]
 800ea88:	60b9      	str	r1, [r7, #8]
 800ea8a:	4613      	mov	r3, r2
 800ea8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ea92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ea96:	4618      	mov	r0, r3
 800ea98:	371c      	adds	r7, #28
 800ea9a:	46bd      	mov	sp, r7
 800ea9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaa0:	4770      	bx	lr
	...

0800eaa4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaa4:	b480      	push	{r7}
 800eaa6:	b083      	sub	sp, #12
 800eaa8:	af00      	add	r7, sp, #0
 800eaaa:	4603      	mov	r3, r0
 800eaac:	6039      	str	r1, [r7, #0]
 800eaae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	2212      	movs	r2, #18
 800eab4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eab6:	4b03      	ldr	r3, [pc, #12]	@ (800eac4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800eab8:	4618      	mov	r0, r3
 800eaba:	370c      	adds	r7, #12
 800eabc:	46bd      	mov	sp, r7
 800eabe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac2:	4770      	bx	lr
 800eac4:	20000100 	.word	0x20000100

0800eac8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	4603      	mov	r3, r0
 800ead0:	6039      	str	r1, [r7, #0]
 800ead2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2204      	movs	r2, #4
 800ead8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eada:	4b03      	ldr	r3, [pc, #12]	@ (800eae8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eadc:	4618      	mov	r0, r3
 800eade:	370c      	adds	r7, #12
 800eae0:	46bd      	mov	sp, r7
 800eae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae6:	4770      	bx	lr
 800eae8:	20000114 	.word	0x20000114

0800eaec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaec:	b580      	push	{r7, lr}
 800eaee:	b082      	sub	sp, #8
 800eaf0:	af00      	add	r7, sp, #0
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	6039      	str	r1, [r7, #0]
 800eaf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eaf8:	79fb      	ldrb	r3, [r7, #7]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d105      	bne.n	800eb0a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eafe:	683a      	ldr	r2, [r7, #0]
 800eb00:	4907      	ldr	r1, [pc, #28]	@ (800eb20 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb02:	4808      	ldr	r0, [pc, #32]	@ (800eb24 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb04:	f7fd fc6c 	bl	800c3e0 <USBD_GetString>
 800eb08:	e004      	b.n	800eb14 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	4904      	ldr	r1, [pc, #16]	@ (800eb20 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb0e:	4805      	ldr	r0, [pc, #20]	@ (800eb24 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb10:	f7fd fc66 	bl	800c3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb14:	4b02      	ldr	r3, [pc, #8]	@ (800eb20 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb16:	4618      	mov	r0, r3
 800eb18:	3708      	adds	r7, #8
 800eb1a:	46bd      	mov	sp, r7
 800eb1c:	bd80      	pop	{r7, pc}
 800eb1e:	bf00      	nop
 800eb20:	20000f08 	.word	0x20000f08
 800eb24:	0801008c 	.word	0x0801008c

0800eb28 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
 800eb2e:	4603      	mov	r3, r0
 800eb30:	6039      	str	r1, [r7, #0]
 800eb32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb34:	683a      	ldr	r2, [r7, #0]
 800eb36:	4904      	ldr	r1, [pc, #16]	@ (800eb48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb38:	4804      	ldr	r0, [pc, #16]	@ (800eb4c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb3a:	f7fd fc51 	bl	800c3e0 <USBD_GetString>
  return USBD_StrDesc;
 800eb3e:	4b02      	ldr	r3, [pc, #8]	@ (800eb48 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb40:	4618      	mov	r0, r3
 800eb42:	3708      	adds	r7, #8
 800eb44:	46bd      	mov	sp, r7
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	20000f08 	.word	0x20000f08
 800eb4c:	080100a4 	.word	0x080100a4

0800eb50 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b082      	sub	sp, #8
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	4603      	mov	r3, r0
 800eb58:	6039      	str	r1, [r7, #0]
 800eb5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb5c:	683b      	ldr	r3, [r7, #0]
 800eb5e:	221a      	movs	r2, #26
 800eb60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb62:	f000 f843 	bl	800ebec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb66:	4b02      	ldr	r3, [pc, #8]	@ (800eb70 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb68:	4618      	mov	r0, r3
 800eb6a:	3708      	adds	r7, #8
 800eb6c:	46bd      	mov	sp, r7
 800eb6e:	bd80      	pop	{r7, pc}
 800eb70:	20000118 	.word	0x20000118

0800eb74 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb74:	b580      	push	{r7, lr}
 800eb76:	b082      	sub	sp, #8
 800eb78:	af00      	add	r7, sp, #0
 800eb7a:	4603      	mov	r3, r0
 800eb7c:	6039      	str	r1, [r7, #0]
 800eb7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eb80:	79fb      	ldrb	r3, [r7, #7]
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d105      	bne.n	800eb92 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb86:	683a      	ldr	r2, [r7, #0]
 800eb88:	4907      	ldr	r1, [pc, #28]	@ (800eba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb8a:	4808      	ldr	r0, [pc, #32]	@ (800ebac <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb8c:	f7fd fc28 	bl	800c3e0 <USBD_GetString>
 800eb90:	e004      	b.n	800eb9c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eb92:	683a      	ldr	r2, [r7, #0]
 800eb94:	4904      	ldr	r1, [pc, #16]	@ (800eba8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eb96:	4805      	ldr	r0, [pc, #20]	@ (800ebac <USBD_FS_ConfigStrDescriptor+0x38>)
 800eb98:	f7fd fc22 	bl	800c3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb9c:	4b02      	ldr	r3, [pc, #8]	@ (800eba8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eb9e:	4618      	mov	r0, r3
 800eba0:	3708      	adds	r7, #8
 800eba2:	46bd      	mov	sp, r7
 800eba4:	bd80      	pop	{r7, pc}
 800eba6:	bf00      	nop
 800eba8:	20000f08 	.word	0x20000f08
 800ebac:	080100b8 	.word	0x080100b8

0800ebb0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b082      	sub	sp, #8
 800ebb4:	af00      	add	r7, sp, #0
 800ebb6:	4603      	mov	r3, r0
 800ebb8:	6039      	str	r1, [r7, #0]
 800ebba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebbc:	79fb      	ldrb	r3, [r7, #7]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d105      	bne.n	800ebce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebc2:	683a      	ldr	r2, [r7, #0]
 800ebc4:	4907      	ldr	r1, [pc, #28]	@ (800ebe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebc6:	4808      	ldr	r0, [pc, #32]	@ (800ebe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebc8:	f7fd fc0a 	bl	800c3e0 <USBD_GetString>
 800ebcc:	e004      	b.n	800ebd8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebce:	683a      	ldr	r2, [r7, #0]
 800ebd0:	4904      	ldr	r1, [pc, #16]	@ (800ebe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebd2:	4805      	ldr	r0, [pc, #20]	@ (800ebe8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebd4:	f7fd fc04 	bl	800c3e0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebd8:	4b02      	ldr	r3, [pc, #8]	@ (800ebe4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3708      	adds	r7, #8
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	bd80      	pop	{r7, pc}
 800ebe2:	bf00      	nop
 800ebe4:	20000f08 	.word	0x20000f08
 800ebe8:	080100c4 	.word	0x080100c4

0800ebec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ebec:	b580      	push	{r7, lr}
 800ebee:	b084      	sub	sp, #16
 800ebf0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ebf2:	4b0f      	ldr	r3, [pc, #60]	@ (800ec30 <Get_SerialNum+0x44>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ebf8:	4b0e      	ldr	r3, [pc, #56]	@ (800ec34 <Get_SerialNum+0x48>)
 800ebfa:	681b      	ldr	r3, [r3, #0]
 800ebfc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ebfe:	4b0e      	ldr	r3, [pc, #56]	@ (800ec38 <Get_SerialNum+0x4c>)
 800ec00:	681b      	ldr	r3, [r3, #0]
 800ec02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec04:	68fa      	ldr	r2, [r7, #12]
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	4413      	add	r3, r2
 800ec0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec0c:	68fb      	ldr	r3, [r7, #12]
 800ec0e:	2b00      	cmp	r3, #0
 800ec10:	d009      	beq.n	800ec26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec12:	2208      	movs	r2, #8
 800ec14:	4909      	ldr	r1, [pc, #36]	@ (800ec3c <Get_SerialNum+0x50>)
 800ec16:	68f8      	ldr	r0, [r7, #12]
 800ec18:	f000 f814 	bl	800ec44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec1c:	2204      	movs	r2, #4
 800ec1e:	4908      	ldr	r1, [pc, #32]	@ (800ec40 <Get_SerialNum+0x54>)
 800ec20:	68b8      	ldr	r0, [r7, #8]
 800ec22:	f000 f80f 	bl	800ec44 <IntToUnicode>
  }
}
 800ec26:	bf00      	nop
 800ec28:	3710      	adds	r7, #16
 800ec2a:	46bd      	mov	sp, r7
 800ec2c:	bd80      	pop	{r7, pc}
 800ec2e:	bf00      	nop
 800ec30:	1fff7a10 	.word	0x1fff7a10
 800ec34:	1fff7a14 	.word	0x1fff7a14
 800ec38:	1fff7a18 	.word	0x1fff7a18
 800ec3c:	2000011a 	.word	0x2000011a
 800ec40:	2000012a 	.word	0x2000012a

0800ec44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec44:	b480      	push	{r7}
 800ec46:	b087      	sub	sp, #28
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	60f8      	str	r0, [r7, #12]
 800ec4c:	60b9      	str	r1, [r7, #8]
 800ec4e:	4613      	mov	r3, r2
 800ec50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec56:	2300      	movs	r3, #0
 800ec58:	75fb      	strb	r3, [r7, #23]
 800ec5a:	e027      	b.n	800ecac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec5c:	68fb      	ldr	r3, [r7, #12]
 800ec5e:	0f1b      	lsrs	r3, r3, #28
 800ec60:	2b09      	cmp	r3, #9
 800ec62:	d80b      	bhi.n	800ec7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec64:	68fb      	ldr	r3, [r7, #12]
 800ec66:	0f1b      	lsrs	r3, r3, #28
 800ec68:	b2da      	uxtb	r2, r3
 800ec6a:	7dfb      	ldrb	r3, [r7, #23]
 800ec6c:	005b      	lsls	r3, r3, #1
 800ec6e:	4619      	mov	r1, r3
 800ec70:	68bb      	ldr	r3, [r7, #8]
 800ec72:	440b      	add	r3, r1
 800ec74:	3230      	adds	r2, #48	@ 0x30
 800ec76:	b2d2      	uxtb	r2, r2
 800ec78:	701a      	strb	r2, [r3, #0]
 800ec7a:	e00a      	b.n	800ec92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	0f1b      	lsrs	r3, r3, #28
 800ec80:	b2da      	uxtb	r2, r3
 800ec82:	7dfb      	ldrb	r3, [r7, #23]
 800ec84:	005b      	lsls	r3, r3, #1
 800ec86:	4619      	mov	r1, r3
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	440b      	add	r3, r1
 800ec8c:	3237      	adds	r2, #55	@ 0x37
 800ec8e:	b2d2      	uxtb	r2, r2
 800ec90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ec92:	68fb      	ldr	r3, [r7, #12]
 800ec94:	011b      	lsls	r3, r3, #4
 800ec96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ec98:	7dfb      	ldrb	r3, [r7, #23]
 800ec9a:	005b      	lsls	r3, r3, #1
 800ec9c:	3301      	adds	r3, #1
 800ec9e:	68ba      	ldr	r2, [r7, #8]
 800eca0:	4413      	add	r3, r2
 800eca2:	2200      	movs	r2, #0
 800eca4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800eca6:	7dfb      	ldrb	r3, [r7, #23]
 800eca8:	3301      	adds	r3, #1
 800ecaa:	75fb      	strb	r3, [r7, #23]
 800ecac:	7dfa      	ldrb	r2, [r7, #23]
 800ecae:	79fb      	ldrb	r3, [r7, #7]
 800ecb0:	429a      	cmp	r2, r3
 800ecb2:	d3d3      	bcc.n	800ec5c <IntToUnicode+0x18>
  }
}
 800ecb4:	bf00      	nop
 800ecb6:	bf00      	nop
 800ecb8:	371c      	adds	r7, #28
 800ecba:	46bd      	mov	sp, r7
 800ecbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc0:	4770      	bx	lr
	...

0800ecc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ecc4:	b580      	push	{r7, lr}
 800ecc6:	b08a      	sub	sp, #40	@ 0x28
 800ecc8:	af00      	add	r7, sp, #0
 800ecca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800eccc:	f107 0314 	add.w	r3, r7, #20
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	601a      	str	r2, [r3, #0]
 800ecd4:	605a      	str	r2, [r3, #4]
 800ecd6:	609a      	str	r2, [r3, #8]
 800ecd8:	60da      	str	r2, [r3, #12]
 800ecda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecdc:	687b      	ldr	r3, [r7, #4]
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ece4:	d13a      	bne.n	800ed5c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ece6:	2300      	movs	r3, #0
 800ece8:	613b      	str	r3, [r7, #16]
 800ecea:	4b1e      	ldr	r3, [pc, #120]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecee:	4a1d      	ldr	r2, [pc, #116]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf0:	f043 0301 	orr.w	r3, r3, #1
 800ecf4:	6313      	str	r3, [r2, #48]	@ 0x30
 800ecf6:	4b1b      	ldr	r3, [pc, #108]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ecf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ecfa:	f003 0301 	and.w	r3, r3, #1
 800ecfe:	613b      	str	r3, [r7, #16]
 800ed00:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed02:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ed06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed08:	2302      	movs	r3, #2
 800ed0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed0c:	2300      	movs	r3, #0
 800ed0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed10:	2303      	movs	r3, #3
 800ed12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed14:	230a      	movs	r3, #10
 800ed16:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed18:	f107 0314 	add.w	r3, r7, #20
 800ed1c:	4619      	mov	r1, r3
 800ed1e:	4812      	ldr	r0, [pc, #72]	@ (800ed68 <HAL_PCD_MspInit+0xa4>)
 800ed20:	f7f6 f89c 	bl	8004e5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed24:	4b0f      	ldr	r3, [pc, #60]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed26:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed28:	4a0e      	ldr	r2, [pc, #56]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed2e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ed30:	2300      	movs	r3, #0
 800ed32:	60fb      	str	r3, [r7, #12]
 800ed34:	4b0b      	ldr	r3, [pc, #44]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed38:	4a0a      	ldr	r2, [pc, #40]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed3a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ed3e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ed40:	4b08      	ldr	r3, [pc, #32]	@ (800ed64 <HAL_PCD_MspInit+0xa0>)
 800ed42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed44:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed48:	60fb      	str	r3, [r7, #12]
 800ed4a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed4c:	2200      	movs	r2, #0
 800ed4e:	2100      	movs	r1, #0
 800ed50:	2043      	movs	r0, #67	@ 0x43
 800ed52:	f7f5 fcba 	bl	80046ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed56:	2043      	movs	r0, #67	@ 0x43
 800ed58:	f7f5 fcd3 	bl	8004702 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed5c:	bf00      	nop
 800ed5e:	3728      	adds	r7, #40	@ 0x28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	40023800 	.word	0x40023800
 800ed68:	40020000 	.word	0x40020000

0800ed6c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b082      	sub	sp, #8
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed74:	687b      	ldr	r3, [r7, #4]
 800ed76:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ed80:	4619      	mov	r1, r3
 800ed82:	4610      	mov	r0, r2
 800ed84:	f7fc f9c9 	bl	800b11a <USBD_LL_SetupStage>
}
 800ed88:	bf00      	nop
 800ed8a:	3708      	adds	r7, #8
 800ed8c:	46bd      	mov	sp, r7
 800ed8e:	bd80      	pop	{r7, pc}

0800ed90 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed90:	b580      	push	{r7, lr}
 800ed92:	b082      	sub	sp, #8
 800ed94:	af00      	add	r7, sp, #0
 800ed96:	6078      	str	r0, [r7, #4]
 800ed98:	460b      	mov	r3, r1
 800ed9a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ed9c:	687b      	ldr	r3, [r7, #4]
 800ed9e:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800eda2:	78fa      	ldrb	r2, [r7, #3]
 800eda4:	6879      	ldr	r1, [r7, #4]
 800eda6:	4613      	mov	r3, r2
 800eda8:	00db      	lsls	r3, r3, #3
 800edaa:	4413      	add	r3, r2
 800edac:	009b      	lsls	r3, r3, #2
 800edae:	440b      	add	r3, r1
 800edb0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800edb4:	681a      	ldr	r2, [r3, #0]
 800edb6:	78fb      	ldrb	r3, [r7, #3]
 800edb8:	4619      	mov	r1, r3
 800edba:	f7fc fa03 	bl	800b1c4 <USBD_LL_DataOutStage>
}
 800edbe:	bf00      	nop
 800edc0:	3708      	adds	r7, #8
 800edc2:	46bd      	mov	sp, r7
 800edc4:	bd80      	pop	{r7, pc}

0800edc6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edc6:	b580      	push	{r7, lr}
 800edc8:	b082      	sub	sp, #8
 800edca:	af00      	add	r7, sp, #0
 800edcc:	6078      	str	r0, [r7, #4]
 800edce:	460b      	mov	r3, r1
 800edd0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800edd8:	78fa      	ldrb	r2, [r7, #3]
 800edda:	6879      	ldr	r1, [r7, #4]
 800eddc:	4613      	mov	r3, r2
 800edde:	00db      	lsls	r3, r3, #3
 800ede0:	4413      	add	r3, r2
 800ede2:	009b      	lsls	r3, r3, #2
 800ede4:	440b      	add	r3, r1
 800ede6:	3320      	adds	r3, #32
 800ede8:	681a      	ldr	r2, [r3, #0]
 800edea:	78fb      	ldrb	r3, [r7, #3]
 800edec:	4619      	mov	r1, r3
 800edee:	f7fc fa9c 	bl	800b32a <USBD_LL_DataInStage>
}
 800edf2:	bf00      	nop
 800edf4:	3708      	adds	r7, #8
 800edf6:	46bd      	mov	sp, r7
 800edf8:	bd80      	pop	{r7, pc}

0800edfa <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edfa:	b580      	push	{r7, lr}
 800edfc:	b082      	sub	sp, #8
 800edfe:	af00      	add	r7, sp, #0
 800ee00:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee08:	4618      	mov	r0, r3
 800ee0a:	f7fc fbd6 	bl	800b5ba <USBD_LL_SOF>
}
 800ee0e:	bf00      	nop
 800ee10:	3708      	adds	r7, #8
 800ee12:	46bd      	mov	sp, r7
 800ee14:	bd80      	pop	{r7, pc}

0800ee16 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee16:	b580      	push	{r7, lr}
 800ee18:	b084      	sub	sp, #16
 800ee1a:	af00      	add	r7, sp, #0
 800ee1c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee1e:	2301      	movs	r3, #1
 800ee20:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	79db      	ldrb	r3, [r3, #7]
 800ee26:	2b02      	cmp	r3, #2
 800ee28:	d001      	beq.n	800ee2e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee2a:	f7f2 fca1 	bl	8001770 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee2e:	687b      	ldr	r3, [r7, #4]
 800ee30:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee34:	7bfa      	ldrb	r2, [r7, #15]
 800ee36:	4611      	mov	r1, r2
 800ee38:	4618      	mov	r0, r3
 800ee3a:	f7fc fb7a 	bl	800b532 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee44:	4618      	mov	r0, r3
 800ee46:	f7fc fb22 	bl	800b48e <USBD_LL_Reset>
}
 800ee4a:	bf00      	nop
 800ee4c:	3710      	adds	r7, #16
 800ee4e:	46bd      	mov	sp, r7
 800ee50:	bd80      	pop	{r7, pc}
	...

0800ee54 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee54:	b580      	push	{r7, lr}
 800ee56:	b082      	sub	sp, #8
 800ee58:	af00      	add	r7, sp, #0
 800ee5a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7fc fb75 	bl	800b552 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	681b      	ldr	r3, [r3, #0]
 800ee6c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ee70:	681b      	ldr	r3, [r3, #0]
 800ee72:	687a      	ldr	r2, [r7, #4]
 800ee74:	6812      	ldr	r2, [r2, #0]
 800ee76:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ee7a:	f043 0301 	orr.w	r3, r3, #1
 800ee7e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	7adb      	ldrb	r3, [r3, #11]
 800ee84:	2b00      	cmp	r3, #0
 800ee86:	d005      	beq.n	800ee94 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800ee88:	4b04      	ldr	r3, [pc, #16]	@ (800ee9c <HAL_PCD_SuspendCallback+0x48>)
 800ee8a:	691b      	ldr	r3, [r3, #16]
 800ee8c:	4a03      	ldr	r2, [pc, #12]	@ (800ee9c <HAL_PCD_SuspendCallback+0x48>)
 800ee8e:	f043 0306 	orr.w	r3, r3, #6
 800ee92:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800ee94:	bf00      	nop
 800ee96:	3708      	adds	r7, #8
 800ee98:	46bd      	mov	sp, r7
 800ee9a:	bd80      	pop	{r7, pc}
 800ee9c:	e000ed00 	.word	0xe000ed00

0800eea0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eea0:	b580      	push	{r7, lr}
 800eea2:	b082      	sub	sp, #8
 800eea4:	af00      	add	r7, sp, #0
 800eea6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f7fc fb6b 	bl	800b58a <USBD_LL_Resume>
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}

0800eebc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eebc:	b580      	push	{r7, lr}
 800eebe:	b082      	sub	sp, #8
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]
 800eec4:	460b      	mov	r3, r1
 800eec6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eece:	78fa      	ldrb	r2, [r7, #3]
 800eed0:	4611      	mov	r1, r2
 800eed2:	4618      	mov	r0, r3
 800eed4:	f7fc fbc3 	bl	800b65e <USBD_LL_IsoOUTIncomplete>
}
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}

0800eee0 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eee0:	b580      	push	{r7, lr}
 800eee2:	b082      	sub	sp, #8
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	6078      	str	r0, [r7, #4]
 800eee8:	460b      	mov	r3, r1
 800eeea:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eef2:	78fa      	ldrb	r2, [r7, #3]
 800eef4:	4611      	mov	r1, r2
 800eef6:	4618      	mov	r0, r3
 800eef8:	f7fc fb7f 	bl	800b5fa <USBD_LL_IsoINIncomplete>
}
 800eefc:	bf00      	nop
 800eefe:	3708      	adds	r7, #8
 800ef00:	46bd      	mov	sp, r7
 800ef02:	bd80      	pop	{r7, pc}

0800ef04 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fc fbd5 	bl	800b6c2 <USBD_LL_DevConnected>
}
 800ef18:	bf00      	nop
 800ef1a:	3708      	adds	r7, #8
 800ef1c:	46bd      	mov	sp, r7
 800ef1e:	bd80      	pop	{r7, pc}

0800ef20 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef20:	b580      	push	{r7, lr}
 800ef22:	b082      	sub	sp, #8
 800ef24:	af00      	add	r7, sp, #0
 800ef26:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef2e:	4618      	mov	r0, r3
 800ef30:	f7fc fbd2 	bl	800b6d8 <USBD_LL_DevDisconnected>
}
 800ef34:	bf00      	nop
 800ef36:	3708      	adds	r7, #8
 800ef38:	46bd      	mov	sp, r7
 800ef3a:	bd80      	pop	{r7, pc}

0800ef3c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef3c:	b580      	push	{r7, lr}
 800ef3e:	b082      	sub	sp, #8
 800ef40:	af00      	add	r7, sp, #0
 800ef42:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	781b      	ldrb	r3, [r3, #0]
 800ef48:	2b00      	cmp	r3, #0
 800ef4a:	d13c      	bne.n	800efc6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef4c:	4a20      	ldr	r2, [pc, #128]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	4a1e      	ldr	r2, [pc, #120]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef58:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef5c:	4b1c      	ldr	r3, [pc, #112]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef5e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ef62:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef64:	4b1a      	ldr	r3, [pc, #104]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef66:	2204      	movs	r2, #4
 800ef68:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef6a:	4b19      	ldr	r3, [pc, #100]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef6c:	2202      	movs	r2, #2
 800ef6e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef70:	4b17      	ldr	r3, [pc, #92]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef76:	4b16      	ldr	r3, [pc, #88]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef78:	2202      	movs	r2, #2
 800ef7a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef7c:	4b14      	ldr	r3, [pc, #80]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef7e:	2200      	movs	r2, #0
 800ef80:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800ef82:	4b13      	ldr	r3, [pc, #76]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef84:	2200      	movs	r2, #0
 800ef86:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800ef88:	4b11      	ldr	r3, [pc, #68]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef8a:	2200      	movs	r2, #0
 800ef8c:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800ef8e:	4b10      	ldr	r3, [pc, #64]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef90:	2200      	movs	r2, #0
 800ef92:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800ef94:	4b0e      	ldr	r3, [pc, #56]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef96:	2200      	movs	r2, #0
 800ef98:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800ef9a:	480d      	ldr	r0, [pc, #52]	@ (800efd0 <USBD_LL_Init+0x94>)
 800ef9c:	f7f6 f914 	bl	80051c8 <HAL_PCD_Init>
 800efa0:	4603      	mov	r3, r0
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	d001      	beq.n	800efaa <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efa6:	f7f2 fbe3 	bl	8001770 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efaa:	2180      	movs	r1, #128	@ 0x80
 800efac:	4808      	ldr	r0, [pc, #32]	@ (800efd0 <USBD_LL_Init+0x94>)
 800efae:	f7f7 fb40 	bl	8006632 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efb2:	2240      	movs	r2, #64	@ 0x40
 800efb4:	2100      	movs	r1, #0
 800efb6:	4806      	ldr	r0, [pc, #24]	@ (800efd0 <USBD_LL_Init+0x94>)
 800efb8:	f7f7 faf4 	bl	80065a4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efbc:	2280      	movs	r2, #128	@ 0x80
 800efbe:	2101      	movs	r1, #1
 800efc0:	4803      	ldr	r0, [pc, #12]	@ (800efd0 <USBD_LL_Init+0x94>)
 800efc2:	f7f7 faef 	bl	80065a4 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efc6:	2300      	movs	r3, #0
}
 800efc8:	4618      	mov	r0, r3
 800efca:	3708      	adds	r7, #8
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd80      	pop	{r7, pc}
 800efd0:	20001108 	.word	0x20001108

0800efd4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b084      	sub	sp, #16
 800efd8:	af00      	add	r7, sp, #0
 800efda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efdc:	2300      	movs	r3, #0
 800efde:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efe0:	2300      	movs	r3, #0
 800efe2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800efea:	4618      	mov	r0, r3
 800efec:	f7f6 f9fb 	bl	80053e6 <HAL_PCD_Start>
 800eff0:	4603      	mov	r3, r0
 800eff2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800eff4:	7bfb      	ldrb	r3, [r7, #15]
 800eff6:	4618      	mov	r0, r3
 800eff8:	f000 f942 	bl	800f280 <USBD_Get_USB_Status>
 800effc:	4603      	mov	r3, r0
 800effe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f000:	7bbb      	ldrb	r3, [r7, #14]
}
 800f002:	4618      	mov	r0, r3
 800f004:	3710      	adds	r7, #16
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}

0800f00a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f00a:	b580      	push	{r7, lr}
 800f00c:	b084      	sub	sp, #16
 800f00e:	af00      	add	r7, sp, #0
 800f010:	6078      	str	r0, [r7, #4]
 800f012:	4608      	mov	r0, r1
 800f014:	4611      	mov	r1, r2
 800f016:	461a      	mov	r2, r3
 800f018:	4603      	mov	r3, r0
 800f01a:	70fb      	strb	r3, [r7, #3]
 800f01c:	460b      	mov	r3, r1
 800f01e:	70bb      	strb	r3, [r7, #2]
 800f020:	4613      	mov	r3, r2
 800f022:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f024:	2300      	movs	r3, #0
 800f026:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f028:	2300      	movs	r3, #0
 800f02a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f032:	78bb      	ldrb	r3, [r7, #2]
 800f034:	883a      	ldrh	r2, [r7, #0]
 800f036:	78f9      	ldrb	r1, [r7, #3]
 800f038:	f7f6 fecf 	bl	8005dda <HAL_PCD_EP_Open>
 800f03c:	4603      	mov	r3, r0
 800f03e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f040:	7bfb      	ldrb	r3, [r7, #15]
 800f042:	4618      	mov	r0, r3
 800f044:	f000 f91c 	bl	800f280 <USBD_Get_USB_Status>
 800f048:	4603      	mov	r3, r0
 800f04a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f04c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f04e:	4618      	mov	r0, r3
 800f050:	3710      	adds	r7, #16
 800f052:	46bd      	mov	sp, r7
 800f054:	bd80      	pop	{r7, pc}

0800f056 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f056:	b580      	push	{r7, lr}
 800f058:	b084      	sub	sp, #16
 800f05a:	af00      	add	r7, sp, #0
 800f05c:	6078      	str	r0, [r7, #4]
 800f05e:	460b      	mov	r3, r1
 800f060:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f062:	2300      	movs	r3, #0
 800f064:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f066:	2300      	movs	r3, #0
 800f068:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f070:	78fa      	ldrb	r2, [r7, #3]
 800f072:	4611      	mov	r1, r2
 800f074:	4618      	mov	r0, r3
 800f076:	f7f6 ff1a 	bl	8005eae <HAL_PCD_EP_Close>
 800f07a:	4603      	mov	r3, r0
 800f07c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f07e:	7bfb      	ldrb	r3, [r7, #15]
 800f080:	4618      	mov	r0, r3
 800f082:	f000 f8fd 	bl	800f280 <USBD_Get_USB_Status>
 800f086:	4603      	mov	r3, r0
 800f088:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f08a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f08c:	4618      	mov	r0, r3
 800f08e:	3710      	adds	r7, #16
 800f090:	46bd      	mov	sp, r7
 800f092:	bd80      	pop	{r7, pc}

0800f094 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ae:	78fa      	ldrb	r2, [r7, #3]
 800f0b0:	4611      	mov	r1, r2
 800f0b2:	4618      	mov	r0, r3
 800f0b4:	f7f6 ffd2 	bl	800605c <HAL_PCD_EP_SetStall>
 800f0b8:	4603      	mov	r3, r0
 800f0ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f000 f8de 	bl	800f280 <USBD_Get_USB_Status>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0c8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ca:	4618      	mov	r0, r3
 800f0cc:	3710      	adds	r7, #16
 800f0ce:	46bd      	mov	sp, r7
 800f0d0:	bd80      	pop	{r7, pc}

0800f0d2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0d2:	b580      	push	{r7, lr}
 800f0d4:	b084      	sub	sp, #16
 800f0d6:	af00      	add	r7, sp, #0
 800f0d8:	6078      	str	r0, [r7, #4]
 800f0da:	460b      	mov	r3, r1
 800f0dc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0de:	2300      	movs	r3, #0
 800f0e0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ec:	78fa      	ldrb	r2, [r7, #3]
 800f0ee:	4611      	mov	r1, r2
 800f0f0:	4618      	mov	r0, r3
 800f0f2:	f7f7 f816 	bl	8006122 <HAL_PCD_EP_ClrStall>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0fa:	7bfb      	ldrb	r3, [r7, #15]
 800f0fc:	4618      	mov	r0, r3
 800f0fe:	f000 f8bf 	bl	800f280 <USBD_Get_USB_Status>
 800f102:	4603      	mov	r3, r0
 800f104:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f106:	7bbb      	ldrb	r3, [r7, #14]
}
 800f108:	4618      	mov	r0, r3
 800f10a:	3710      	adds	r7, #16
 800f10c:	46bd      	mov	sp, r7
 800f10e:	bd80      	pop	{r7, pc}

0800f110 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f110:	b480      	push	{r7}
 800f112:	b085      	sub	sp, #20
 800f114:	af00      	add	r7, sp, #0
 800f116:	6078      	str	r0, [r7, #4]
 800f118:	460b      	mov	r3, r1
 800f11a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f122:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f124:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f128:	2b00      	cmp	r3, #0
 800f12a:	da0b      	bge.n	800f144 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f12c:	78fb      	ldrb	r3, [r7, #3]
 800f12e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f132:	68f9      	ldr	r1, [r7, #12]
 800f134:	4613      	mov	r3, r2
 800f136:	00db      	lsls	r3, r3, #3
 800f138:	4413      	add	r3, r2
 800f13a:	009b      	lsls	r3, r3, #2
 800f13c:	440b      	add	r3, r1
 800f13e:	3316      	adds	r3, #22
 800f140:	781b      	ldrb	r3, [r3, #0]
 800f142:	e00b      	b.n	800f15c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f144:	78fb      	ldrb	r3, [r7, #3]
 800f146:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f14a:	68f9      	ldr	r1, [r7, #12]
 800f14c:	4613      	mov	r3, r2
 800f14e:	00db      	lsls	r3, r3, #3
 800f150:	4413      	add	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	440b      	add	r3, r1
 800f156:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f15a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f168:	b580      	push	{r7, lr}
 800f16a:	b084      	sub	sp, #16
 800f16c:	af00      	add	r7, sp, #0
 800f16e:	6078      	str	r0, [r7, #4]
 800f170:	460b      	mov	r3, r1
 800f172:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f174:	2300      	movs	r3, #0
 800f176:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f178:	2300      	movs	r3, #0
 800f17a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f182:	78fa      	ldrb	r2, [r7, #3]
 800f184:	4611      	mov	r1, r2
 800f186:	4618      	mov	r0, r3
 800f188:	f7f6 fe03 	bl	8005d92 <HAL_PCD_SetAddress>
 800f18c:	4603      	mov	r3, r0
 800f18e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f190:	7bfb      	ldrb	r3, [r7, #15]
 800f192:	4618      	mov	r0, r3
 800f194:	f000 f874 	bl	800f280 <USBD_Get_USB_Status>
 800f198:	4603      	mov	r3, r0
 800f19a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f19c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f19e:	4618      	mov	r0, r3
 800f1a0:	3710      	adds	r7, #16
 800f1a2:	46bd      	mov	sp, r7
 800f1a4:	bd80      	pop	{r7, pc}

0800f1a6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1a6:	b580      	push	{r7, lr}
 800f1a8:	b086      	sub	sp, #24
 800f1aa:	af00      	add	r7, sp, #0
 800f1ac:	60f8      	str	r0, [r7, #12]
 800f1ae:	607a      	str	r2, [r7, #4]
 800f1b0:	603b      	str	r3, [r7, #0]
 800f1b2:	460b      	mov	r3, r1
 800f1b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f1c4:	7af9      	ldrb	r1, [r7, #11]
 800f1c6:	683b      	ldr	r3, [r7, #0]
 800f1c8:	687a      	ldr	r2, [r7, #4]
 800f1ca:	f7f6 ff0d 	bl	8005fe8 <HAL_PCD_EP_Transmit>
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1d2:	7dfb      	ldrb	r3, [r7, #23]
 800f1d4:	4618      	mov	r0, r3
 800f1d6:	f000 f853 	bl	800f280 <USBD_Get_USB_Status>
 800f1da:	4603      	mov	r3, r0
 800f1dc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1de:	7dbb      	ldrb	r3, [r7, #22]
}
 800f1e0:	4618      	mov	r0, r3
 800f1e2:	3718      	adds	r7, #24
 800f1e4:	46bd      	mov	sp, r7
 800f1e6:	bd80      	pop	{r7, pc}

0800f1e8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1e8:	b580      	push	{r7, lr}
 800f1ea:	b086      	sub	sp, #24
 800f1ec:	af00      	add	r7, sp, #0
 800f1ee:	60f8      	str	r0, [r7, #12]
 800f1f0:	607a      	str	r2, [r7, #4]
 800f1f2:	603b      	str	r3, [r7, #0]
 800f1f4:	460b      	mov	r3, r1
 800f1f6:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1fc:	2300      	movs	r3, #0
 800f1fe:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f200:	68fb      	ldr	r3, [r7, #12]
 800f202:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f206:	7af9      	ldrb	r1, [r7, #11]
 800f208:	683b      	ldr	r3, [r7, #0]
 800f20a:	687a      	ldr	r2, [r7, #4]
 800f20c:	f7f6 fe99 	bl	8005f42 <HAL_PCD_EP_Receive>
 800f210:	4603      	mov	r3, r0
 800f212:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f214:	7dfb      	ldrb	r3, [r7, #23]
 800f216:	4618      	mov	r0, r3
 800f218:	f000 f832 	bl	800f280 <USBD_Get_USB_Status>
 800f21c:	4603      	mov	r3, r0
 800f21e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f220:	7dbb      	ldrb	r3, [r7, #22]
}
 800f222:	4618      	mov	r0, r3
 800f224:	3718      	adds	r7, #24
 800f226:	46bd      	mov	sp, r7
 800f228:	bd80      	pop	{r7, pc}

0800f22a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f22a:	b580      	push	{r7, lr}
 800f22c:	b082      	sub	sp, #8
 800f22e:	af00      	add	r7, sp, #0
 800f230:	6078      	str	r0, [r7, #4]
 800f232:	460b      	mov	r3, r1
 800f234:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f23c:	78fa      	ldrb	r2, [r7, #3]
 800f23e:	4611      	mov	r1, r2
 800f240:	4618      	mov	r0, r3
 800f242:	f7f6 feb9 	bl	8005fb8 <HAL_PCD_EP_GetRxCount>
 800f246:	4603      	mov	r3, r0
}
 800f248:	4618      	mov	r0, r3
 800f24a:	3708      	adds	r7, #8
 800f24c:	46bd      	mov	sp, r7
 800f24e:	bd80      	pop	{r7, pc}

0800f250 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f250:	b480      	push	{r7}
 800f252:	b083      	sub	sp, #12
 800f254:	af00      	add	r7, sp, #0
 800f256:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f258:	4b03      	ldr	r3, [pc, #12]	@ (800f268 <USBD_static_malloc+0x18>)
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	370c      	adds	r7, #12
 800f25e:	46bd      	mov	sp, r7
 800f260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f264:	4770      	bx	lr
 800f266:	bf00      	nop
 800f268:	200015ec 	.word	0x200015ec

0800f26c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f26c:	b480      	push	{r7}
 800f26e:	b083      	sub	sp, #12
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]

}
 800f274:	bf00      	nop
 800f276:	370c      	adds	r7, #12
 800f278:	46bd      	mov	sp, r7
 800f27a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f27e:	4770      	bx	lr

0800f280 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f280:	b480      	push	{r7}
 800f282:	b085      	sub	sp, #20
 800f284:	af00      	add	r7, sp, #0
 800f286:	4603      	mov	r3, r0
 800f288:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f28e:	79fb      	ldrb	r3, [r7, #7]
 800f290:	2b03      	cmp	r3, #3
 800f292:	d817      	bhi.n	800f2c4 <USBD_Get_USB_Status+0x44>
 800f294:	a201      	add	r2, pc, #4	@ (adr r2, 800f29c <USBD_Get_USB_Status+0x1c>)
 800f296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f29a:	bf00      	nop
 800f29c:	0800f2ad 	.word	0x0800f2ad
 800f2a0:	0800f2b3 	.word	0x0800f2b3
 800f2a4:	0800f2b9 	.word	0x0800f2b9
 800f2a8:	0800f2bf 	.word	0x0800f2bf
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b0:	e00b      	b.n	800f2ca <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2b2:	2303      	movs	r3, #3
 800f2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2b6:	e008      	b.n	800f2ca <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2b8:	2301      	movs	r3, #1
 800f2ba:	73fb      	strb	r3, [r7, #15]
    break;
 800f2bc:	e005      	b.n	800f2ca <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2be:	2303      	movs	r3, #3
 800f2c0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c2:	e002      	b.n	800f2ca <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2c4:	2303      	movs	r3, #3
 800f2c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2c8:	bf00      	nop
  }
  return usb_status;
 800f2ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2cc:	4618      	mov	r0, r3
 800f2ce:	3714      	adds	r7, #20
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2d6:	4770      	bx	lr

0800f2d8 <_ZdlPvj>:
 800f2d8:	f000 b811 	b.w	800f2fe <_ZdlPv>

0800f2dc <_Znwj>:
 800f2dc:	2801      	cmp	r0, #1
 800f2de:	bf38      	it	cc
 800f2e0:	2001      	movcc	r0, #1
 800f2e2:	b510      	push	{r4, lr}
 800f2e4:	4604      	mov	r4, r0
 800f2e6:	4620      	mov	r0, r4
 800f2e8:	f000 f836 	bl	800f358 <malloc>
 800f2ec:	b100      	cbz	r0, 800f2f0 <_Znwj+0x14>
 800f2ee:	bd10      	pop	{r4, pc}
 800f2f0:	f000 f808 	bl	800f304 <_ZSt15get_new_handlerv>
 800f2f4:	b908      	cbnz	r0, 800f2fa <_Znwj+0x1e>
 800f2f6:	f000 f80d 	bl	800f314 <abort>
 800f2fa:	4780      	blx	r0
 800f2fc:	e7f3      	b.n	800f2e6 <_Znwj+0xa>

0800f2fe <_ZdlPv>:
 800f2fe:	f000 b833 	b.w	800f368 <free>
	...

0800f304 <_ZSt15get_new_handlerv>:
 800f304:	4b02      	ldr	r3, [pc, #8]	@ (800f310 <_ZSt15get_new_handlerv+0xc>)
 800f306:	6818      	ldr	r0, [r3, #0]
 800f308:	f3bf 8f5b 	dmb	ish
 800f30c:	4770      	bx	lr
 800f30e:	bf00      	nop
 800f310:	2000180c 	.word	0x2000180c

0800f314 <abort>:
 800f314:	b508      	push	{r3, lr}
 800f316:	2006      	movs	r0, #6
 800f318:	f000 f9ae 	bl	800f678 <raise>
 800f31c:	2001      	movs	r0, #1
 800f31e:	f7f2 feb1 	bl	8002084 <_exit>

0800f322 <__itoa>:
 800f322:	1e93      	subs	r3, r2, #2
 800f324:	2b22      	cmp	r3, #34	@ 0x22
 800f326:	b510      	push	{r4, lr}
 800f328:	460c      	mov	r4, r1
 800f32a:	d904      	bls.n	800f336 <__itoa+0x14>
 800f32c:	2300      	movs	r3, #0
 800f32e:	700b      	strb	r3, [r1, #0]
 800f330:	461c      	mov	r4, r3
 800f332:	4620      	mov	r0, r4
 800f334:	bd10      	pop	{r4, pc}
 800f336:	2a0a      	cmp	r2, #10
 800f338:	d109      	bne.n	800f34e <__itoa+0x2c>
 800f33a:	2800      	cmp	r0, #0
 800f33c:	da07      	bge.n	800f34e <__itoa+0x2c>
 800f33e:	232d      	movs	r3, #45	@ 0x2d
 800f340:	700b      	strb	r3, [r1, #0]
 800f342:	4240      	negs	r0, r0
 800f344:	2101      	movs	r1, #1
 800f346:	4421      	add	r1, r4
 800f348:	f000 f8c4 	bl	800f4d4 <__utoa>
 800f34c:	e7f1      	b.n	800f332 <__itoa+0x10>
 800f34e:	2100      	movs	r1, #0
 800f350:	e7f9      	b.n	800f346 <__itoa+0x24>

0800f352 <itoa>:
 800f352:	f7ff bfe6 	b.w	800f322 <__itoa>
	...

0800f358 <malloc>:
 800f358:	4b02      	ldr	r3, [pc, #8]	@ (800f364 <malloc+0xc>)
 800f35a:	4601      	mov	r1, r0
 800f35c:	6818      	ldr	r0, [r3, #0]
 800f35e:	f000 b82d 	b.w	800f3bc <_malloc_r>
 800f362:	bf00      	nop
 800f364:	20000134 	.word	0x20000134

0800f368 <free>:
 800f368:	4b02      	ldr	r3, [pc, #8]	@ (800f374 <free+0xc>)
 800f36a:	4601      	mov	r1, r0
 800f36c:	6818      	ldr	r0, [r3, #0]
 800f36e:	f000 b9e9 	b.w	800f744 <_free_r>
 800f372:	bf00      	nop
 800f374:	20000134 	.word	0x20000134

0800f378 <sbrk_aligned>:
 800f378:	b570      	push	{r4, r5, r6, lr}
 800f37a:	4e0f      	ldr	r6, [pc, #60]	@ (800f3b8 <sbrk_aligned+0x40>)
 800f37c:	460c      	mov	r4, r1
 800f37e:	6831      	ldr	r1, [r6, #0]
 800f380:	4605      	mov	r5, r0
 800f382:	b911      	cbnz	r1, 800f38a <sbrk_aligned+0x12>
 800f384:	f000 f994 	bl	800f6b0 <_sbrk_r>
 800f388:	6030      	str	r0, [r6, #0]
 800f38a:	4621      	mov	r1, r4
 800f38c:	4628      	mov	r0, r5
 800f38e:	f000 f98f 	bl	800f6b0 <_sbrk_r>
 800f392:	1c43      	adds	r3, r0, #1
 800f394:	d103      	bne.n	800f39e <sbrk_aligned+0x26>
 800f396:	f04f 34ff 	mov.w	r4, #4294967295
 800f39a:	4620      	mov	r0, r4
 800f39c:	bd70      	pop	{r4, r5, r6, pc}
 800f39e:	1cc4      	adds	r4, r0, #3
 800f3a0:	f024 0403 	bic.w	r4, r4, #3
 800f3a4:	42a0      	cmp	r0, r4
 800f3a6:	d0f8      	beq.n	800f39a <sbrk_aligned+0x22>
 800f3a8:	1a21      	subs	r1, r4, r0
 800f3aa:	4628      	mov	r0, r5
 800f3ac:	f000 f980 	bl	800f6b0 <_sbrk_r>
 800f3b0:	3001      	adds	r0, #1
 800f3b2:	d1f2      	bne.n	800f39a <sbrk_aligned+0x22>
 800f3b4:	e7ef      	b.n	800f396 <sbrk_aligned+0x1e>
 800f3b6:	bf00      	nop
 800f3b8:	20001810 	.word	0x20001810

0800f3bc <_malloc_r>:
 800f3bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3c0:	1ccd      	adds	r5, r1, #3
 800f3c2:	f025 0503 	bic.w	r5, r5, #3
 800f3c6:	3508      	adds	r5, #8
 800f3c8:	2d0c      	cmp	r5, #12
 800f3ca:	bf38      	it	cc
 800f3cc:	250c      	movcc	r5, #12
 800f3ce:	2d00      	cmp	r5, #0
 800f3d0:	4606      	mov	r6, r0
 800f3d2:	db01      	blt.n	800f3d8 <_malloc_r+0x1c>
 800f3d4:	42a9      	cmp	r1, r5
 800f3d6:	d904      	bls.n	800f3e2 <_malloc_r+0x26>
 800f3d8:	230c      	movs	r3, #12
 800f3da:	6033      	str	r3, [r6, #0]
 800f3dc:	2000      	movs	r0, #0
 800f3de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4b8 <_malloc_r+0xfc>
 800f3e6:	f000 f869 	bl	800f4bc <__malloc_lock>
 800f3ea:	f8d8 3000 	ldr.w	r3, [r8]
 800f3ee:	461c      	mov	r4, r3
 800f3f0:	bb44      	cbnz	r4, 800f444 <_malloc_r+0x88>
 800f3f2:	4629      	mov	r1, r5
 800f3f4:	4630      	mov	r0, r6
 800f3f6:	f7ff ffbf 	bl	800f378 <sbrk_aligned>
 800f3fa:	1c43      	adds	r3, r0, #1
 800f3fc:	4604      	mov	r4, r0
 800f3fe:	d158      	bne.n	800f4b2 <_malloc_r+0xf6>
 800f400:	f8d8 4000 	ldr.w	r4, [r8]
 800f404:	4627      	mov	r7, r4
 800f406:	2f00      	cmp	r7, #0
 800f408:	d143      	bne.n	800f492 <_malloc_r+0xd6>
 800f40a:	2c00      	cmp	r4, #0
 800f40c:	d04b      	beq.n	800f4a6 <_malloc_r+0xea>
 800f40e:	6823      	ldr	r3, [r4, #0]
 800f410:	4639      	mov	r1, r7
 800f412:	4630      	mov	r0, r6
 800f414:	eb04 0903 	add.w	r9, r4, r3
 800f418:	f000 f94a 	bl	800f6b0 <_sbrk_r>
 800f41c:	4581      	cmp	r9, r0
 800f41e:	d142      	bne.n	800f4a6 <_malloc_r+0xea>
 800f420:	6821      	ldr	r1, [r4, #0]
 800f422:	1a6d      	subs	r5, r5, r1
 800f424:	4629      	mov	r1, r5
 800f426:	4630      	mov	r0, r6
 800f428:	f7ff ffa6 	bl	800f378 <sbrk_aligned>
 800f42c:	3001      	adds	r0, #1
 800f42e:	d03a      	beq.n	800f4a6 <_malloc_r+0xea>
 800f430:	6823      	ldr	r3, [r4, #0]
 800f432:	442b      	add	r3, r5
 800f434:	6023      	str	r3, [r4, #0]
 800f436:	f8d8 3000 	ldr.w	r3, [r8]
 800f43a:	685a      	ldr	r2, [r3, #4]
 800f43c:	bb62      	cbnz	r2, 800f498 <_malloc_r+0xdc>
 800f43e:	f8c8 7000 	str.w	r7, [r8]
 800f442:	e00f      	b.n	800f464 <_malloc_r+0xa8>
 800f444:	6822      	ldr	r2, [r4, #0]
 800f446:	1b52      	subs	r2, r2, r5
 800f448:	d420      	bmi.n	800f48c <_malloc_r+0xd0>
 800f44a:	2a0b      	cmp	r2, #11
 800f44c:	d917      	bls.n	800f47e <_malloc_r+0xc2>
 800f44e:	1961      	adds	r1, r4, r5
 800f450:	42a3      	cmp	r3, r4
 800f452:	6025      	str	r5, [r4, #0]
 800f454:	bf18      	it	ne
 800f456:	6059      	strne	r1, [r3, #4]
 800f458:	6863      	ldr	r3, [r4, #4]
 800f45a:	bf08      	it	eq
 800f45c:	f8c8 1000 	streq.w	r1, [r8]
 800f460:	5162      	str	r2, [r4, r5]
 800f462:	604b      	str	r3, [r1, #4]
 800f464:	4630      	mov	r0, r6
 800f466:	f000 f82f 	bl	800f4c8 <__malloc_unlock>
 800f46a:	f104 000b 	add.w	r0, r4, #11
 800f46e:	1d23      	adds	r3, r4, #4
 800f470:	f020 0007 	bic.w	r0, r0, #7
 800f474:	1ac2      	subs	r2, r0, r3
 800f476:	bf1c      	itt	ne
 800f478:	1a1b      	subne	r3, r3, r0
 800f47a:	50a3      	strne	r3, [r4, r2]
 800f47c:	e7af      	b.n	800f3de <_malloc_r+0x22>
 800f47e:	6862      	ldr	r2, [r4, #4]
 800f480:	42a3      	cmp	r3, r4
 800f482:	bf0c      	ite	eq
 800f484:	f8c8 2000 	streq.w	r2, [r8]
 800f488:	605a      	strne	r2, [r3, #4]
 800f48a:	e7eb      	b.n	800f464 <_malloc_r+0xa8>
 800f48c:	4623      	mov	r3, r4
 800f48e:	6864      	ldr	r4, [r4, #4]
 800f490:	e7ae      	b.n	800f3f0 <_malloc_r+0x34>
 800f492:	463c      	mov	r4, r7
 800f494:	687f      	ldr	r7, [r7, #4]
 800f496:	e7b6      	b.n	800f406 <_malloc_r+0x4a>
 800f498:	461a      	mov	r2, r3
 800f49a:	685b      	ldr	r3, [r3, #4]
 800f49c:	42a3      	cmp	r3, r4
 800f49e:	d1fb      	bne.n	800f498 <_malloc_r+0xdc>
 800f4a0:	2300      	movs	r3, #0
 800f4a2:	6053      	str	r3, [r2, #4]
 800f4a4:	e7de      	b.n	800f464 <_malloc_r+0xa8>
 800f4a6:	230c      	movs	r3, #12
 800f4a8:	6033      	str	r3, [r6, #0]
 800f4aa:	4630      	mov	r0, r6
 800f4ac:	f000 f80c 	bl	800f4c8 <__malloc_unlock>
 800f4b0:	e794      	b.n	800f3dc <_malloc_r+0x20>
 800f4b2:	6005      	str	r5, [r0, #0]
 800f4b4:	e7d6      	b.n	800f464 <_malloc_r+0xa8>
 800f4b6:	bf00      	nop
 800f4b8:	20001814 	.word	0x20001814

0800f4bc <__malloc_lock>:
 800f4bc:	4801      	ldr	r0, [pc, #4]	@ (800f4c4 <__malloc_lock+0x8>)
 800f4be:	f000 b931 	b.w	800f724 <__retarget_lock_acquire_recursive>
 800f4c2:	bf00      	nop
 800f4c4:	20001954 	.word	0x20001954

0800f4c8 <__malloc_unlock>:
 800f4c8:	4801      	ldr	r0, [pc, #4]	@ (800f4d0 <__malloc_unlock+0x8>)
 800f4ca:	f000 b92c 	b.w	800f726 <__retarget_lock_release_recursive>
 800f4ce:	bf00      	nop
 800f4d0:	20001954 	.word	0x20001954

0800f4d4 <__utoa>:
 800f4d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4d6:	4c1f      	ldr	r4, [pc, #124]	@ (800f554 <__utoa+0x80>)
 800f4d8:	b08b      	sub	sp, #44	@ 0x2c
 800f4da:	4605      	mov	r5, r0
 800f4dc:	460b      	mov	r3, r1
 800f4de:	466e      	mov	r6, sp
 800f4e0:	f104 0c20 	add.w	ip, r4, #32
 800f4e4:	6820      	ldr	r0, [r4, #0]
 800f4e6:	6861      	ldr	r1, [r4, #4]
 800f4e8:	4637      	mov	r7, r6
 800f4ea:	c703      	stmia	r7!, {r0, r1}
 800f4ec:	3408      	adds	r4, #8
 800f4ee:	4564      	cmp	r4, ip
 800f4f0:	463e      	mov	r6, r7
 800f4f2:	d1f7      	bne.n	800f4e4 <__utoa+0x10>
 800f4f4:	7921      	ldrb	r1, [r4, #4]
 800f4f6:	7139      	strb	r1, [r7, #4]
 800f4f8:	1e91      	subs	r1, r2, #2
 800f4fa:	6820      	ldr	r0, [r4, #0]
 800f4fc:	6038      	str	r0, [r7, #0]
 800f4fe:	2922      	cmp	r1, #34	@ 0x22
 800f500:	f04f 0100 	mov.w	r1, #0
 800f504:	d904      	bls.n	800f510 <__utoa+0x3c>
 800f506:	7019      	strb	r1, [r3, #0]
 800f508:	460b      	mov	r3, r1
 800f50a:	4618      	mov	r0, r3
 800f50c:	b00b      	add	sp, #44	@ 0x2c
 800f50e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f510:	1e58      	subs	r0, r3, #1
 800f512:	4684      	mov	ip, r0
 800f514:	fbb5 f7f2 	udiv	r7, r5, r2
 800f518:	fb02 5617 	mls	r6, r2, r7, r5
 800f51c:	3628      	adds	r6, #40	@ 0x28
 800f51e:	446e      	add	r6, sp
 800f520:	460c      	mov	r4, r1
 800f522:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f526:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f52a:	462e      	mov	r6, r5
 800f52c:	42b2      	cmp	r2, r6
 800f52e:	f101 0101 	add.w	r1, r1, #1
 800f532:	463d      	mov	r5, r7
 800f534:	d9ee      	bls.n	800f514 <__utoa+0x40>
 800f536:	2200      	movs	r2, #0
 800f538:	545a      	strb	r2, [r3, r1]
 800f53a:	1919      	adds	r1, r3, r4
 800f53c:	1aa5      	subs	r5, r4, r2
 800f53e:	42aa      	cmp	r2, r5
 800f540:	dae3      	bge.n	800f50a <__utoa+0x36>
 800f542:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f546:	780e      	ldrb	r6, [r1, #0]
 800f548:	7006      	strb	r6, [r0, #0]
 800f54a:	3201      	adds	r2, #1
 800f54c:	f801 5901 	strb.w	r5, [r1], #-1
 800f550:	e7f4      	b.n	800f53c <__utoa+0x68>
 800f552:	bf00      	nop
 800f554:	08017a04 	.word	0x08017a04

0800f558 <_vsniprintf_r>:
 800f558:	b530      	push	{r4, r5, lr}
 800f55a:	4614      	mov	r4, r2
 800f55c:	2c00      	cmp	r4, #0
 800f55e:	b09b      	sub	sp, #108	@ 0x6c
 800f560:	4605      	mov	r5, r0
 800f562:	461a      	mov	r2, r3
 800f564:	da05      	bge.n	800f572 <_vsniprintf_r+0x1a>
 800f566:	238b      	movs	r3, #139	@ 0x8b
 800f568:	6003      	str	r3, [r0, #0]
 800f56a:	f04f 30ff 	mov.w	r0, #4294967295
 800f56e:	b01b      	add	sp, #108	@ 0x6c
 800f570:	bd30      	pop	{r4, r5, pc}
 800f572:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f576:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f57a:	bf14      	ite	ne
 800f57c:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f580:	4623      	moveq	r3, r4
 800f582:	9302      	str	r3, [sp, #8]
 800f584:	9305      	str	r3, [sp, #20]
 800f586:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f58a:	9100      	str	r1, [sp, #0]
 800f58c:	9104      	str	r1, [sp, #16]
 800f58e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f592:	4669      	mov	r1, sp
 800f594:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f596:	f000 f97b 	bl	800f890 <_svfiprintf_r>
 800f59a:	1c43      	adds	r3, r0, #1
 800f59c:	bfbc      	itt	lt
 800f59e:	238b      	movlt	r3, #139	@ 0x8b
 800f5a0:	602b      	strlt	r3, [r5, #0]
 800f5a2:	2c00      	cmp	r4, #0
 800f5a4:	d0e3      	beq.n	800f56e <_vsniprintf_r+0x16>
 800f5a6:	9b00      	ldr	r3, [sp, #0]
 800f5a8:	2200      	movs	r2, #0
 800f5aa:	701a      	strb	r2, [r3, #0]
 800f5ac:	e7df      	b.n	800f56e <_vsniprintf_r+0x16>
	...

0800f5b0 <vsniprintf>:
 800f5b0:	b507      	push	{r0, r1, r2, lr}
 800f5b2:	9300      	str	r3, [sp, #0]
 800f5b4:	4613      	mov	r3, r2
 800f5b6:	460a      	mov	r2, r1
 800f5b8:	4601      	mov	r1, r0
 800f5ba:	4803      	ldr	r0, [pc, #12]	@ (800f5c8 <vsniprintf+0x18>)
 800f5bc:	6800      	ldr	r0, [r0, #0]
 800f5be:	f7ff ffcb 	bl	800f558 <_vsniprintf_r>
 800f5c2:	b003      	add	sp, #12
 800f5c4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5c8:	20000134 	.word	0x20000134

0800f5cc <memset>:
 800f5cc:	4402      	add	r2, r0
 800f5ce:	4603      	mov	r3, r0
 800f5d0:	4293      	cmp	r3, r2
 800f5d2:	d100      	bne.n	800f5d6 <memset+0xa>
 800f5d4:	4770      	bx	lr
 800f5d6:	f803 1b01 	strb.w	r1, [r3], #1
 800f5da:	e7f9      	b.n	800f5d0 <memset+0x4>

0800f5dc <strncat>:
 800f5dc:	b530      	push	{r4, r5, lr}
 800f5de:	4604      	mov	r4, r0
 800f5e0:	7825      	ldrb	r5, [r4, #0]
 800f5e2:	4623      	mov	r3, r4
 800f5e4:	3401      	adds	r4, #1
 800f5e6:	2d00      	cmp	r5, #0
 800f5e8:	d1fa      	bne.n	800f5e0 <strncat+0x4>
 800f5ea:	3a01      	subs	r2, #1
 800f5ec:	d304      	bcc.n	800f5f8 <strncat+0x1c>
 800f5ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f5f2:	f803 4b01 	strb.w	r4, [r3], #1
 800f5f6:	b904      	cbnz	r4, 800f5fa <strncat+0x1e>
 800f5f8:	bd30      	pop	{r4, r5, pc}
 800f5fa:	2a00      	cmp	r2, #0
 800f5fc:	d1f5      	bne.n	800f5ea <strncat+0xe>
 800f5fe:	701a      	strb	r2, [r3, #0]
 800f600:	e7f3      	b.n	800f5ea <strncat+0xe>

0800f602 <strncpy>:
 800f602:	b510      	push	{r4, lr}
 800f604:	3901      	subs	r1, #1
 800f606:	4603      	mov	r3, r0
 800f608:	b132      	cbz	r2, 800f618 <strncpy+0x16>
 800f60a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f60e:	f803 4b01 	strb.w	r4, [r3], #1
 800f612:	3a01      	subs	r2, #1
 800f614:	2c00      	cmp	r4, #0
 800f616:	d1f7      	bne.n	800f608 <strncpy+0x6>
 800f618:	441a      	add	r2, r3
 800f61a:	2100      	movs	r1, #0
 800f61c:	4293      	cmp	r3, r2
 800f61e:	d100      	bne.n	800f622 <strncpy+0x20>
 800f620:	bd10      	pop	{r4, pc}
 800f622:	f803 1b01 	strb.w	r1, [r3], #1
 800f626:	e7f9      	b.n	800f61c <strncpy+0x1a>

0800f628 <_raise_r>:
 800f628:	291f      	cmp	r1, #31
 800f62a:	b538      	push	{r3, r4, r5, lr}
 800f62c:	4605      	mov	r5, r0
 800f62e:	460c      	mov	r4, r1
 800f630:	d904      	bls.n	800f63c <_raise_r+0x14>
 800f632:	2316      	movs	r3, #22
 800f634:	6003      	str	r3, [r0, #0]
 800f636:	f04f 30ff 	mov.w	r0, #4294967295
 800f63a:	bd38      	pop	{r3, r4, r5, pc}
 800f63c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f63e:	b112      	cbz	r2, 800f646 <_raise_r+0x1e>
 800f640:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f644:	b94b      	cbnz	r3, 800f65a <_raise_r+0x32>
 800f646:	4628      	mov	r0, r5
 800f648:	f000 f830 	bl	800f6ac <_getpid_r>
 800f64c:	4622      	mov	r2, r4
 800f64e:	4601      	mov	r1, r0
 800f650:	4628      	mov	r0, r5
 800f652:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f656:	f000 b817 	b.w	800f688 <_kill_r>
 800f65a:	2b01      	cmp	r3, #1
 800f65c:	d00a      	beq.n	800f674 <_raise_r+0x4c>
 800f65e:	1c59      	adds	r1, r3, #1
 800f660:	d103      	bne.n	800f66a <_raise_r+0x42>
 800f662:	2316      	movs	r3, #22
 800f664:	6003      	str	r3, [r0, #0]
 800f666:	2001      	movs	r0, #1
 800f668:	e7e7      	b.n	800f63a <_raise_r+0x12>
 800f66a:	2100      	movs	r1, #0
 800f66c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f670:	4620      	mov	r0, r4
 800f672:	4798      	blx	r3
 800f674:	2000      	movs	r0, #0
 800f676:	e7e0      	b.n	800f63a <_raise_r+0x12>

0800f678 <raise>:
 800f678:	4b02      	ldr	r3, [pc, #8]	@ (800f684 <raise+0xc>)
 800f67a:	4601      	mov	r1, r0
 800f67c:	6818      	ldr	r0, [r3, #0]
 800f67e:	f7ff bfd3 	b.w	800f628 <_raise_r>
 800f682:	bf00      	nop
 800f684:	20000134 	.word	0x20000134

0800f688 <_kill_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	@ (800f6a8 <_kill_r+0x20>)
 800f68c:	2300      	movs	r3, #0
 800f68e:	4604      	mov	r4, r0
 800f690:	4608      	mov	r0, r1
 800f692:	4611      	mov	r1, r2
 800f694:	602b      	str	r3, [r5, #0]
 800f696:	f7f2 fce5 	bl	8002064 <_kill>
 800f69a:	1c43      	adds	r3, r0, #1
 800f69c:	d102      	bne.n	800f6a4 <_kill_r+0x1c>
 800f69e:	682b      	ldr	r3, [r5, #0]
 800f6a0:	b103      	cbz	r3, 800f6a4 <_kill_r+0x1c>
 800f6a2:	6023      	str	r3, [r4, #0]
 800f6a4:	bd38      	pop	{r3, r4, r5, pc}
 800f6a6:	bf00      	nop
 800f6a8:	20001950 	.word	0x20001950

0800f6ac <_getpid_r>:
 800f6ac:	f7f2 bcd2 	b.w	8002054 <_getpid>

0800f6b0 <_sbrk_r>:
 800f6b0:	b538      	push	{r3, r4, r5, lr}
 800f6b2:	4d06      	ldr	r5, [pc, #24]	@ (800f6cc <_sbrk_r+0x1c>)
 800f6b4:	2300      	movs	r3, #0
 800f6b6:	4604      	mov	r4, r0
 800f6b8:	4608      	mov	r0, r1
 800f6ba:	602b      	str	r3, [r5, #0]
 800f6bc:	f7f2 fcee 	bl	800209c <_sbrk>
 800f6c0:	1c43      	adds	r3, r0, #1
 800f6c2:	d102      	bne.n	800f6ca <_sbrk_r+0x1a>
 800f6c4:	682b      	ldr	r3, [r5, #0]
 800f6c6:	b103      	cbz	r3, 800f6ca <_sbrk_r+0x1a>
 800f6c8:	6023      	str	r3, [r4, #0]
 800f6ca:	bd38      	pop	{r3, r4, r5, pc}
 800f6cc:	20001950 	.word	0x20001950

0800f6d0 <__errno>:
 800f6d0:	4b01      	ldr	r3, [pc, #4]	@ (800f6d8 <__errno+0x8>)
 800f6d2:	6818      	ldr	r0, [r3, #0]
 800f6d4:	4770      	bx	lr
 800f6d6:	bf00      	nop
 800f6d8:	20000134 	.word	0x20000134

0800f6dc <__libc_init_array>:
 800f6dc:	b570      	push	{r4, r5, r6, lr}
 800f6de:	4d0d      	ldr	r5, [pc, #52]	@ (800f714 <__libc_init_array+0x38>)
 800f6e0:	4c0d      	ldr	r4, [pc, #52]	@ (800f718 <__libc_init_array+0x3c>)
 800f6e2:	1b64      	subs	r4, r4, r5
 800f6e4:	10a4      	asrs	r4, r4, #2
 800f6e6:	2600      	movs	r6, #0
 800f6e8:	42a6      	cmp	r6, r4
 800f6ea:	d109      	bne.n	800f700 <__libc_init_array+0x24>
 800f6ec:	4d0b      	ldr	r5, [pc, #44]	@ (800f71c <__libc_init_array+0x40>)
 800f6ee:	4c0c      	ldr	r4, [pc, #48]	@ (800f720 <__libc_init_array+0x44>)
 800f6f0:	f000 fba8 	bl	800fe44 <_init>
 800f6f4:	1b64      	subs	r4, r4, r5
 800f6f6:	10a4      	asrs	r4, r4, #2
 800f6f8:	2600      	movs	r6, #0
 800f6fa:	42a6      	cmp	r6, r4
 800f6fc:	d105      	bne.n	800f70a <__libc_init_array+0x2e>
 800f6fe:	bd70      	pop	{r4, r5, r6, pc}
 800f700:	f855 3b04 	ldr.w	r3, [r5], #4
 800f704:	4798      	blx	r3
 800f706:	3601      	adds	r6, #1
 800f708:	e7ee      	b.n	800f6e8 <__libc_init_array+0xc>
 800f70a:	f855 3b04 	ldr.w	r3, [r5], #4
 800f70e:	4798      	blx	r3
 800f710:	3601      	adds	r6, #1
 800f712:	e7f2      	b.n	800f6fa <__libc_init_array+0x1e>
 800f714:	08017a64 	.word	0x08017a64
 800f718:	08017a64 	.word	0x08017a64
 800f71c:	08017a64 	.word	0x08017a64
 800f720:	08017a70 	.word	0x08017a70

0800f724 <__retarget_lock_acquire_recursive>:
 800f724:	4770      	bx	lr

0800f726 <__retarget_lock_release_recursive>:
 800f726:	4770      	bx	lr

0800f728 <memcpy>:
 800f728:	440a      	add	r2, r1
 800f72a:	4291      	cmp	r1, r2
 800f72c:	f100 33ff 	add.w	r3, r0, #4294967295
 800f730:	d100      	bne.n	800f734 <memcpy+0xc>
 800f732:	4770      	bx	lr
 800f734:	b510      	push	{r4, lr}
 800f736:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f73a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f73e:	4291      	cmp	r1, r2
 800f740:	d1f9      	bne.n	800f736 <memcpy+0xe>
 800f742:	bd10      	pop	{r4, pc}

0800f744 <_free_r>:
 800f744:	b538      	push	{r3, r4, r5, lr}
 800f746:	4605      	mov	r5, r0
 800f748:	2900      	cmp	r1, #0
 800f74a:	d041      	beq.n	800f7d0 <_free_r+0x8c>
 800f74c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f750:	1f0c      	subs	r4, r1, #4
 800f752:	2b00      	cmp	r3, #0
 800f754:	bfb8      	it	lt
 800f756:	18e4      	addlt	r4, r4, r3
 800f758:	f7ff feb0 	bl	800f4bc <__malloc_lock>
 800f75c:	4a1d      	ldr	r2, [pc, #116]	@ (800f7d4 <_free_r+0x90>)
 800f75e:	6813      	ldr	r3, [r2, #0]
 800f760:	b933      	cbnz	r3, 800f770 <_free_r+0x2c>
 800f762:	6063      	str	r3, [r4, #4]
 800f764:	6014      	str	r4, [r2, #0]
 800f766:	4628      	mov	r0, r5
 800f768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f76c:	f7ff beac 	b.w	800f4c8 <__malloc_unlock>
 800f770:	42a3      	cmp	r3, r4
 800f772:	d908      	bls.n	800f786 <_free_r+0x42>
 800f774:	6820      	ldr	r0, [r4, #0]
 800f776:	1821      	adds	r1, r4, r0
 800f778:	428b      	cmp	r3, r1
 800f77a:	bf01      	itttt	eq
 800f77c:	6819      	ldreq	r1, [r3, #0]
 800f77e:	685b      	ldreq	r3, [r3, #4]
 800f780:	1809      	addeq	r1, r1, r0
 800f782:	6021      	streq	r1, [r4, #0]
 800f784:	e7ed      	b.n	800f762 <_free_r+0x1e>
 800f786:	461a      	mov	r2, r3
 800f788:	685b      	ldr	r3, [r3, #4]
 800f78a:	b10b      	cbz	r3, 800f790 <_free_r+0x4c>
 800f78c:	42a3      	cmp	r3, r4
 800f78e:	d9fa      	bls.n	800f786 <_free_r+0x42>
 800f790:	6811      	ldr	r1, [r2, #0]
 800f792:	1850      	adds	r0, r2, r1
 800f794:	42a0      	cmp	r0, r4
 800f796:	d10b      	bne.n	800f7b0 <_free_r+0x6c>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	4401      	add	r1, r0
 800f79c:	1850      	adds	r0, r2, r1
 800f79e:	4283      	cmp	r3, r0
 800f7a0:	6011      	str	r1, [r2, #0]
 800f7a2:	d1e0      	bne.n	800f766 <_free_r+0x22>
 800f7a4:	6818      	ldr	r0, [r3, #0]
 800f7a6:	685b      	ldr	r3, [r3, #4]
 800f7a8:	6053      	str	r3, [r2, #4]
 800f7aa:	4408      	add	r0, r1
 800f7ac:	6010      	str	r0, [r2, #0]
 800f7ae:	e7da      	b.n	800f766 <_free_r+0x22>
 800f7b0:	d902      	bls.n	800f7b8 <_free_r+0x74>
 800f7b2:	230c      	movs	r3, #12
 800f7b4:	602b      	str	r3, [r5, #0]
 800f7b6:	e7d6      	b.n	800f766 <_free_r+0x22>
 800f7b8:	6820      	ldr	r0, [r4, #0]
 800f7ba:	1821      	adds	r1, r4, r0
 800f7bc:	428b      	cmp	r3, r1
 800f7be:	bf04      	itt	eq
 800f7c0:	6819      	ldreq	r1, [r3, #0]
 800f7c2:	685b      	ldreq	r3, [r3, #4]
 800f7c4:	6063      	str	r3, [r4, #4]
 800f7c6:	bf04      	itt	eq
 800f7c8:	1809      	addeq	r1, r1, r0
 800f7ca:	6021      	streq	r1, [r4, #0]
 800f7cc:	6054      	str	r4, [r2, #4]
 800f7ce:	e7ca      	b.n	800f766 <_free_r+0x22>
 800f7d0:	bd38      	pop	{r3, r4, r5, pc}
 800f7d2:	bf00      	nop
 800f7d4:	20001814 	.word	0x20001814

0800f7d8 <__ssputs_r>:
 800f7d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f7dc:	688e      	ldr	r6, [r1, #8]
 800f7de:	461f      	mov	r7, r3
 800f7e0:	42be      	cmp	r6, r7
 800f7e2:	680b      	ldr	r3, [r1, #0]
 800f7e4:	4682      	mov	sl, r0
 800f7e6:	460c      	mov	r4, r1
 800f7e8:	4690      	mov	r8, r2
 800f7ea:	d82d      	bhi.n	800f848 <__ssputs_r+0x70>
 800f7ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f7f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f7f4:	d026      	beq.n	800f844 <__ssputs_r+0x6c>
 800f7f6:	6965      	ldr	r5, [r4, #20]
 800f7f8:	6909      	ldr	r1, [r1, #16]
 800f7fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f7fe:	eba3 0901 	sub.w	r9, r3, r1
 800f802:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f806:	1c7b      	adds	r3, r7, #1
 800f808:	444b      	add	r3, r9
 800f80a:	106d      	asrs	r5, r5, #1
 800f80c:	429d      	cmp	r5, r3
 800f80e:	bf38      	it	cc
 800f810:	461d      	movcc	r5, r3
 800f812:	0553      	lsls	r3, r2, #21
 800f814:	d527      	bpl.n	800f866 <__ssputs_r+0x8e>
 800f816:	4629      	mov	r1, r5
 800f818:	f7ff fdd0 	bl	800f3bc <_malloc_r>
 800f81c:	4606      	mov	r6, r0
 800f81e:	b360      	cbz	r0, 800f87a <__ssputs_r+0xa2>
 800f820:	6921      	ldr	r1, [r4, #16]
 800f822:	464a      	mov	r2, r9
 800f824:	f7ff ff80 	bl	800f728 <memcpy>
 800f828:	89a3      	ldrh	r3, [r4, #12]
 800f82a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f82e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f832:	81a3      	strh	r3, [r4, #12]
 800f834:	6126      	str	r6, [r4, #16]
 800f836:	6165      	str	r5, [r4, #20]
 800f838:	444e      	add	r6, r9
 800f83a:	eba5 0509 	sub.w	r5, r5, r9
 800f83e:	6026      	str	r6, [r4, #0]
 800f840:	60a5      	str	r5, [r4, #8]
 800f842:	463e      	mov	r6, r7
 800f844:	42be      	cmp	r6, r7
 800f846:	d900      	bls.n	800f84a <__ssputs_r+0x72>
 800f848:	463e      	mov	r6, r7
 800f84a:	6820      	ldr	r0, [r4, #0]
 800f84c:	4632      	mov	r2, r6
 800f84e:	4641      	mov	r1, r8
 800f850:	f000 faa8 	bl	800fda4 <memmove>
 800f854:	68a3      	ldr	r3, [r4, #8]
 800f856:	1b9b      	subs	r3, r3, r6
 800f858:	60a3      	str	r3, [r4, #8]
 800f85a:	6823      	ldr	r3, [r4, #0]
 800f85c:	4433      	add	r3, r6
 800f85e:	6023      	str	r3, [r4, #0]
 800f860:	2000      	movs	r0, #0
 800f862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f866:	462a      	mov	r2, r5
 800f868:	f000 fab6 	bl	800fdd8 <_realloc_r>
 800f86c:	4606      	mov	r6, r0
 800f86e:	2800      	cmp	r0, #0
 800f870:	d1e0      	bne.n	800f834 <__ssputs_r+0x5c>
 800f872:	6921      	ldr	r1, [r4, #16]
 800f874:	4650      	mov	r0, sl
 800f876:	f7ff ff65 	bl	800f744 <_free_r>
 800f87a:	230c      	movs	r3, #12
 800f87c:	f8ca 3000 	str.w	r3, [sl]
 800f880:	89a3      	ldrh	r3, [r4, #12]
 800f882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f886:	81a3      	strh	r3, [r4, #12]
 800f888:	f04f 30ff 	mov.w	r0, #4294967295
 800f88c:	e7e9      	b.n	800f862 <__ssputs_r+0x8a>
	...

0800f890 <_svfiprintf_r>:
 800f890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f894:	4698      	mov	r8, r3
 800f896:	898b      	ldrh	r3, [r1, #12]
 800f898:	061b      	lsls	r3, r3, #24
 800f89a:	b09d      	sub	sp, #116	@ 0x74
 800f89c:	4607      	mov	r7, r0
 800f89e:	460d      	mov	r5, r1
 800f8a0:	4614      	mov	r4, r2
 800f8a2:	d510      	bpl.n	800f8c6 <_svfiprintf_r+0x36>
 800f8a4:	690b      	ldr	r3, [r1, #16]
 800f8a6:	b973      	cbnz	r3, 800f8c6 <_svfiprintf_r+0x36>
 800f8a8:	2140      	movs	r1, #64	@ 0x40
 800f8aa:	f7ff fd87 	bl	800f3bc <_malloc_r>
 800f8ae:	6028      	str	r0, [r5, #0]
 800f8b0:	6128      	str	r0, [r5, #16]
 800f8b2:	b930      	cbnz	r0, 800f8c2 <_svfiprintf_r+0x32>
 800f8b4:	230c      	movs	r3, #12
 800f8b6:	603b      	str	r3, [r7, #0]
 800f8b8:	f04f 30ff 	mov.w	r0, #4294967295
 800f8bc:	b01d      	add	sp, #116	@ 0x74
 800f8be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8c2:	2340      	movs	r3, #64	@ 0x40
 800f8c4:	616b      	str	r3, [r5, #20]
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ca:	2320      	movs	r3, #32
 800f8cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8d0:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8d4:	2330      	movs	r3, #48	@ 0x30
 800f8d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fa74 <_svfiprintf_r+0x1e4>
 800f8da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f8de:	f04f 0901 	mov.w	r9, #1
 800f8e2:	4623      	mov	r3, r4
 800f8e4:	469a      	mov	sl, r3
 800f8e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8ea:	b10a      	cbz	r2, 800f8f0 <_svfiprintf_r+0x60>
 800f8ec:	2a25      	cmp	r2, #37	@ 0x25
 800f8ee:	d1f9      	bne.n	800f8e4 <_svfiprintf_r+0x54>
 800f8f0:	ebba 0b04 	subs.w	fp, sl, r4
 800f8f4:	d00b      	beq.n	800f90e <_svfiprintf_r+0x7e>
 800f8f6:	465b      	mov	r3, fp
 800f8f8:	4622      	mov	r2, r4
 800f8fa:	4629      	mov	r1, r5
 800f8fc:	4638      	mov	r0, r7
 800f8fe:	f7ff ff6b 	bl	800f7d8 <__ssputs_r>
 800f902:	3001      	adds	r0, #1
 800f904:	f000 80a7 	beq.w	800fa56 <_svfiprintf_r+0x1c6>
 800f908:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f90a:	445a      	add	r2, fp
 800f90c:	9209      	str	r2, [sp, #36]	@ 0x24
 800f90e:	f89a 3000 	ldrb.w	r3, [sl]
 800f912:	2b00      	cmp	r3, #0
 800f914:	f000 809f 	beq.w	800fa56 <_svfiprintf_r+0x1c6>
 800f918:	2300      	movs	r3, #0
 800f91a:	f04f 32ff 	mov.w	r2, #4294967295
 800f91e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f922:	f10a 0a01 	add.w	sl, sl, #1
 800f926:	9304      	str	r3, [sp, #16]
 800f928:	9307      	str	r3, [sp, #28]
 800f92a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f92e:	931a      	str	r3, [sp, #104]	@ 0x68
 800f930:	4654      	mov	r4, sl
 800f932:	2205      	movs	r2, #5
 800f934:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f938:	484e      	ldr	r0, [pc, #312]	@ (800fa74 <_svfiprintf_r+0x1e4>)
 800f93a:	f7f0 fc59 	bl	80001f0 <memchr>
 800f93e:	9a04      	ldr	r2, [sp, #16]
 800f940:	b9d8      	cbnz	r0, 800f97a <_svfiprintf_r+0xea>
 800f942:	06d0      	lsls	r0, r2, #27
 800f944:	bf44      	itt	mi
 800f946:	2320      	movmi	r3, #32
 800f948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f94c:	0711      	lsls	r1, r2, #28
 800f94e:	bf44      	itt	mi
 800f950:	232b      	movmi	r3, #43	@ 0x2b
 800f952:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f956:	f89a 3000 	ldrb.w	r3, [sl]
 800f95a:	2b2a      	cmp	r3, #42	@ 0x2a
 800f95c:	d015      	beq.n	800f98a <_svfiprintf_r+0xfa>
 800f95e:	9a07      	ldr	r2, [sp, #28]
 800f960:	4654      	mov	r4, sl
 800f962:	2000      	movs	r0, #0
 800f964:	f04f 0c0a 	mov.w	ip, #10
 800f968:	4621      	mov	r1, r4
 800f96a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f96e:	3b30      	subs	r3, #48	@ 0x30
 800f970:	2b09      	cmp	r3, #9
 800f972:	d94b      	bls.n	800fa0c <_svfiprintf_r+0x17c>
 800f974:	b1b0      	cbz	r0, 800f9a4 <_svfiprintf_r+0x114>
 800f976:	9207      	str	r2, [sp, #28]
 800f978:	e014      	b.n	800f9a4 <_svfiprintf_r+0x114>
 800f97a:	eba0 0308 	sub.w	r3, r0, r8
 800f97e:	fa09 f303 	lsl.w	r3, r9, r3
 800f982:	4313      	orrs	r3, r2
 800f984:	9304      	str	r3, [sp, #16]
 800f986:	46a2      	mov	sl, r4
 800f988:	e7d2      	b.n	800f930 <_svfiprintf_r+0xa0>
 800f98a:	9b03      	ldr	r3, [sp, #12]
 800f98c:	1d19      	adds	r1, r3, #4
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	9103      	str	r1, [sp, #12]
 800f992:	2b00      	cmp	r3, #0
 800f994:	bfbb      	ittet	lt
 800f996:	425b      	neglt	r3, r3
 800f998:	f042 0202 	orrlt.w	r2, r2, #2
 800f99c:	9307      	strge	r3, [sp, #28]
 800f99e:	9307      	strlt	r3, [sp, #28]
 800f9a0:	bfb8      	it	lt
 800f9a2:	9204      	strlt	r2, [sp, #16]
 800f9a4:	7823      	ldrb	r3, [r4, #0]
 800f9a6:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9a8:	d10a      	bne.n	800f9c0 <_svfiprintf_r+0x130>
 800f9aa:	7863      	ldrb	r3, [r4, #1]
 800f9ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9ae:	d132      	bne.n	800fa16 <_svfiprintf_r+0x186>
 800f9b0:	9b03      	ldr	r3, [sp, #12]
 800f9b2:	1d1a      	adds	r2, r3, #4
 800f9b4:	681b      	ldr	r3, [r3, #0]
 800f9b6:	9203      	str	r2, [sp, #12]
 800f9b8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9bc:	3402      	adds	r4, #2
 800f9be:	9305      	str	r3, [sp, #20]
 800f9c0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fa84 <_svfiprintf_r+0x1f4>
 800f9c4:	7821      	ldrb	r1, [r4, #0]
 800f9c6:	2203      	movs	r2, #3
 800f9c8:	4650      	mov	r0, sl
 800f9ca:	f7f0 fc11 	bl	80001f0 <memchr>
 800f9ce:	b138      	cbz	r0, 800f9e0 <_svfiprintf_r+0x150>
 800f9d0:	9b04      	ldr	r3, [sp, #16]
 800f9d2:	eba0 000a 	sub.w	r0, r0, sl
 800f9d6:	2240      	movs	r2, #64	@ 0x40
 800f9d8:	4082      	lsls	r2, r0
 800f9da:	4313      	orrs	r3, r2
 800f9dc:	3401      	adds	r4, #1
 800f9de:	9304      	str	r3, [sp, #16]
 800f9e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f9e4:	4824      	ldr	r0, [pc, #144]	@ (800fa78 <_svfiprintf_r+0x1e8>)
 800f9e6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f9ea:	2206      	movs	r2, #6
 800f9ec:	f7f0 fc00 	bl	80001f0 <memchr>
 800f9f0:	2800      	cmp	r0, #0
 800f9f2:	d036      	beq.n	800fa62 <_svfiprintf_r+0x1d2>
 800f9f4:	4b21      	ldr	r3, [pc, #132]	@ (800fa7c <_svfiprintf_r+0x1ec>)
 800f9f6:	bb1b      	cbnz	r3, 800fa40 <_svfiprintf_r+0x1b0>
 800f9f8:	9b03      	ldr	r3, [sp, #12]
 800f9fa:	3307      	adds	r3, #7
 800f9fc:	f023 0307 	bic.w	r3, r3, #7
 800fa00:	3308      	adds	r3, #8
 800fa02:	9303      	str	r3, [sp, #12]
 800fa04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa06:	4433      	add	r3, r6
 800fa08:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa0a:	e76a      	b.n	800f8e2 <_svfiprintf_r+0x52>
 800fa0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa10:	460c      	mov	r4, r1
 800fa12:	2001      	movs	r0, #1
 800fa14:	e7a8      	b.n	800f968 <_svfiprintf_r+0xd8>
 800fa16:	2300      	movs	r3, #0
 800fa18:	3401      	adds	r4, #1
 800fa1a:	9305      	str	r3, [sp, #20]
 800fa1c:	4619      	mov	r1, r3
 800fa1e:	f04f 0c0a 	mov.w	ip, #10
 800fa22:	4620      	mov	r0, r4
 800fa24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa28:	3a30      	subs	r2, #48	@ 0x30
 800fa2a:	2a09      	cmp	r2, #9
 800fa2c:	d903      	bls.n	800fa36 <_svfiprintf_r+0x1a6>
 800fa2e:	2b00      	cmp	r3, #0
 800fa30:	d0c6      	beq.n	800f9c0 <_svfiprintf_r+0x130>
 800fa32:	9105      	str	r1, [sp, #20]
 800fa34:	e7c4      	b.n	800f9c0 <_svfiprintf_r+0x130>
 800fa36:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa3a:	4604      	mov	r4, r0
 800fa3c:	2301      	movs	r3, #1
 800fa3e:	e7f0      	b.n	800fa22 <_svfiprintf_r+0x192>
 800fa40:	ab03      	add	r3, sp, #12
 800fa42:	9300      	str	r3, [sp, #0]
 800fa44:	462a      	mov	r2, r5
 800fa46:	4b0e      	ldr	r3, [pc, #56]	@ (800fa80 <_svfiprintf_r+0x1f0>)
 800fa48:	a904      	add	r1, sp, #16
 800fa4a:	4638      	mov	r0, r7
 800fa4c:	f3af 8000 	nop.w
 800fa50:	1c42      	adds	r2, r0, #1
 800fa52:	4606      	mov	r6, r0
 800fa54:	d1d6      	bne.n	800fa04 <_svfiprintf_r+0x174>
 800fa56:	89ab      	ldrh	r3, [r5, #12]
 800fa58:	065b      	lsls	r3, r3, #25
 800fa5a:	f53f af2d 	bmi.w	800f8b8 <_svfiprintf_r+0x28>
 800fa5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa60:	e72c      	b.n	800f8bc <_svfiprintf_r+0x2c>
 800fa62:	ab03      	add	r3, sp, #12
 800fa64:	9300      	str	r3, [sp, #0]
 800fa66:	462a      	mov	r2, r5
 800fa68:	4b05      	ldr	r3, [pc, #20]	@ (800fa80 <_svfiprintf_r+0x1f0>)
 800fa6a:	a904      	add	r1, sp, #16
 800fa6c:	4638      	mov	r0, r7
 800fa6e:	f000 f879 	bl	800fb64 <_printf_i>
 800fa72:	e7ed      	b.n	800fa50 <_svfiprintf_r+0x1c0>
 800fa74:	08017a29 	.word	0x08017a29
 800fa78:	08017a33 	.word	0x08017a33
 800fa7c:	00000000 	.word	0x00000000
 800fa80:	0800f7d9 	.word	0x0800f7d9
 800fa84:	08017a2f 	.word	0x08017a2f

0800fa88 <_printf_common>:
 800fa88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa8c:	4616      	mov	r6, r2
 800fa8e:	4698      	mov	r8, r3
 800fa90:	688a      	ldr	r2, [r1, #8]
 800fa92:	690b      	ldr	r3, [r1, #16]
 800fa94:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fa98:	4293      	cmp	r3, r2
 800fa9a:	bfb8      	it	lt
 800fa9c:	4613      	movlt	r3, r2
 800fa9e:	6033      	str	r3, [r6, #0]
 800faa0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800faa4:	4607      	mov	r7, r0
 800faa6:	460c      	mov	r4, r1
 800faa8:	b10a      	cbz	r2, 800faae <_printf_common+0x26>
 800faaa:	3301      	adds	r3, #1
 800faac:	6033      	str	r3, [r6, #0]
 800faae:	6823      	ldr	r3, [r4, #0]
 800fab0:	0699      	lsls	r1, r3, #26
 800fab2:	bf42      	ittt	mi
 800fab4:	6833      	ldrmi	r3, [r6, #0]
 800fab6:	3302      	addmi	r3, #2
 800fab8:	6033      	strmi	r3, [r6, #0]
 800faba:	6825      	ldr	r5, [r4, #0]
 800fabc:	f015 0506 	ands.w	r5, r5, #6
 800fac0:	d106      	bne.n	800fad0 <_printf_common+0x48>
 800fac2:	f104 0a19 	add.w	sl, r4, #25
 800fac6:	68e3      	ldr	r3, [r4, #12]
 800fac8:	6832      	ldr	r2, [r6, #0]
 800faca:	1a9b      	subs	r3, r3, r2
 800facc:	42ab      	cmp	r3, r5
 800face:	dc26      	bgt.n	800fb1e <_printf_common+0x96>
 800fad0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fad4:	6822      	ldr	r2, [r4, #0]
 800fad6:	3b00      	subs	r3, #0
 800fad8:	bf18      	it	ne
 800fada:	2301      	movne	r3, #1
 800fadc:	0692      	lsls	r2, r2, #26
 800fade:	d42b      	bmi.n	800fb38 <_printf_common+0xb0>
 800fae0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fae4:	4641      	mov	r1, r8
 800fae6:	4638      	mov	r0, r7
 800fae8:	47c8      	blx	r9
 800faea:	3001      	adds	r0, #1
 800faec:	d01e      	beq.n	800fb2c <_printf_common+0xa4>
 800faee:	6823      	ldr	r3, [r4, #0]
 800faf0:	6922      	ldr	r2, [r4, #16]
 800faf2:	f003 0306 	and.w	r3, r3, #6
 800faf6:	2b04      	cmp	r3, #4
 800faf8:	bf02      	ittt	eq
 800fafa:	68e5      	ldreq	r5, [r4, #12]
 800fafc:	6833      	ldreq	r3, [r6, #0]
 800fafe:	1aed      	subeq	r5, r5, r3
 800fb00:	68a3      	ldr	r3, [r4, #8]
 800fb02:	bf0c      	ite	eq
 800fb04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb08:	2500      	movne	r5, #0
 800fb0a:	4293      	cmp	r3, r2
 800fb0c:	bfc4      	itt	gt
 800fb0e:	1a9b      	subgt	r3, r3, r2
 800fb10:	18ed      	addgt	r5, r5, r3
 800fb12:	2600      	movs	r6, #0
 800fb14:	341a      	adds	r4, #26
 800fb16:	42b5      	cmp	r5, r6
 800fb18:	d11a      	bne.n	800fb50 <_printf_common+0xc8>
 800fb1a:	2000      	movs	r0, #0
 800fb1c:	e008      	b.n	800fb30 <_printf_common+0xa8>
 800fb1e:	2301      	movs	r3, #1
 800fb20:	4652      	mov	r2, sl
 800fb22:	4641      	mov	r1, r8
 800fb24:	4638      	mov	r0, r7
 800fb26:	47c8      	blx	r9
 800fb28:	3001      	adds	r0, #1
 800fb2a:	d103      	bne.n	800fb34 <_printf_common+0xac>
 800fb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800fb30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb34:	3501      	adds	r5, #1
 800fb36:	e7c6      	b.n	800fac6 <_printf_common+0x3e>
 800fb38:	18e1      	adds	r1, r4, r3
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	2030      	movs	r0, #48	@ 0x30
 800fb3e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb42:	4422      	add	r2, r4
 800fb44:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb48:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb4c:	3302      	adds	r3, #2
 800fb4e:	e7c7      	b.n	800fae0 <_printf_common+0x58>
 800fb50:	2301      	movs	r3, #1
 800fb52:	4622      	mov	r2, r4
 800fb54:	4641      	mov	r1, r8
 800fb56:	4638      	mov	r0, r7
 800fb58:	47c8      	blx	r9
 800fb5a:	3001      	adds	r0, #1
 800fb5c:	d0e6      	beq.n	800fb2c <_printf_common+0xa4>
 800fb5e:	3601      	adds	r6, #1
 800fb60:	e7d9      	b.n	800fb16 <_printf_common+0x8e>
	...

0800fb64 <_printf_i>:
 800fb64:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb68:	7e0f      	ldrb	r7, [r1, #24]
 800fb6a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb6c:	2f78      	cmp	r7, #120	@ 0x78
 800fb6e:	4691      	mov	r9, r2
 800fb70:	4680      	mov	r8, r0
 800fb72:	460c      	mov	r4, r1
 800fb74:	469a      	mov	sl, r3
 800fb76:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb7a:	d807      	bhi.n	800fb8c <_printf_i+0x28>
 800fb7c:	2f62      	cmp	r7, #98	@ 0x62
 800fb7e:	d80a      	bhi.n	800fb96 <_printf_i+0x32>
 800fb80:	2f00      	cmp	r7, #0
 800fb82:	f000 80d2 	beq.w	800fd2a <_printf_i+0x1c6>
 800fb86:	2f58      	cmp	r7, #88	@ 0x58
 800fb88:	f000 80b9 	beq.w	800fcfe <_printf_i+0x19a>
 800fb8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb90:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fb94:	e03a      	b.n	800fc0c <_printf_i+0xa8>
 800fb96:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fb9a:	2b15      	cmp	r3, #21
 800fb9c:	d8f6      	bhi.n	800fb8c <_printf_i+0x28>
 800fb9e:	a101      	add	r1, pc, #4	@ (adr r1, 800fba4 <_printf_i+0x40>)
 800fba0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fba4:	0800fbfd 	.word	0x0800fbfd
 800fba8:	0800fc11 	.word	0x0800fc11
 800fbac:	0800fb8d 	.word	0x0800fb8d
 800fbb0:	0800fb8d 	.word	0x0800fb8d
 800fbb4:	0800fb8d 	.word	0x0800fb8d
 800fbb8:	0800fb8d 	.word	0x0800fb8d
 800fbbc:	0800fc11 	.word	0x0800fc11
 800fbc0:	0800fb8d 	.word	0x0800fb8d
 800fbc4:	0800fb8d 	.word	0x0800fb8d
 800fbc8:	0800fb8d 	.word	0x0800fb8d
 800fbcc:	0800fb8d 	.word	0x0800fb8d
 800fbd0:	0800fd11 	.word	0x0800fd11
 800fbd4:	0800fc3b 	.word	0x0800fc3b
 800fbd8:	0800fccb 	.word	0x0800fccb
 800fbdc:	0800fb8d 	.word	0x0800fb8d
 800fbe0:	0800fb8d 	.word	0x0800fb8d
 800fbe4:	0800fd33 	.word	0x0800fd33
 800fbe8:	0800fb8d 	.word	0x0800fb8d
 800fbec:	0800fc3b 	.word	0x0800fc3b
 800fbf0:	0800fb8d 	.word	0x0800fb8d
 800fbf4:	0800fb8d 	.word	0x0800fb8d
 800fbf8:	0800fcd3 	.word	0x0800fcd3
 800fbfc:	6833      	ldr	r3, [r6, #0]
 800fbfe:	1d1a      	adds	r2, r3, #4
 800fc00:	681b      	ldr	r3, [r3, #0]
 800fc02:	6032      	str	r2, [r6, #0]
 800fc04:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc08:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc0c:	2301      	movs	r3, #1
 800fc0e:	e09d      	b.n	800fd4c <_printf_i+0x1e8>
 800fc10:	6833      	ldr	r3, [r6, #0]
 800fc12:	6820      	ldr	r0, [r4, #0]
 800fc14:	1d19      	adds	r1, r3, #4
 800fc16:	6031      	str	r1, [r6, #0]
 800fc18:	0606      	lsls	r6, r0, #24
 800fc1a:	d501      	bpl.n	800fc20 <_printf_i+0xbc>
 800fc1c:	681d      	ldr	r5, [r3, #0]
 800fc1e:	e003      	b.n	800fc28 <_printf_i+0xc4>
 800fc20:	0645      	lsls	r5, r0, #25
 800fc22:	d5fb      	bpl.n	800fc1c <_printf_i+0xb8>
 800fc24:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc28:	2d00      	cmp	r5, #0
 800fc2a:	da03      	bge.n	800fc34 <_printf_i+0xd0>
 800fc2c:	232d      	movs	r3, #45	@ 0x2d
 800fc2e:	426d      	negs	r5, r5
 800fc30:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc34:	4859      	ldr	r0, [pc, #356]	@ (800fd9c <_printf_i+0x238>)
 800fc36:	230a      	movs	r3, #10
 800fc38:	e011      	b.n	800fc5e <_printf_i+0xfa>
 800fc3a:	6821      	ldr	r1, [r4, #0]
 800fc3c:	6833      	ldr	r3, [r6, #0]
 800fc3e:	0608      	lsls	r0, r1, #24
 800fc40:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc44:	d402      	bmi.n	800fc4c <_printf_i+0xe8>
 800fc46:	0649      	lsls	r1, r1, #25
 800fc48:	bf48      	it	mi
 800fc4a:	b2ad      	uxthmi	r5, r5
 800fc4c:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc4e:	4853      	ldr	r0, [pc, #332]	@ (800fd9c <_printf_i+0x238>)
 800fc50:	6033      	str	r3, [r6, #0]
 800fc52:	bf14      	ite	ne
 800fc54:	230a      	movne	r3, #10
 800fc56:	2308      	moveq	r3, #8
 800fc58:	2100      	movs	r1, #0
 800fc5a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc5e:	6866      	ldr	r6, [r4, #4]
 800fc60:	60a6      	str	r6, [r4, #8]
 800fc62:	2e00      	cmp	r6, #0
 800fc64:	bfa2      	ittt	ge
 800fc66:	6821      	ldrge	r1, [r4, #0]
 800fc68:	f021 0104 	bicge.w	r1, r1, #4
 800fc6c:	6021      	strge	r1, [r4, #0]
 800fc6e:	b90d      	cbnz	r5, 800fc74 <_printf_i+0x110>
 800fc70:	2e00      	cmp	r6, #0
 800fc72:	d04b      	beq.n	800fd0c <_printf_i+0x1a8>
 800fc74:	4616      	mov	r6, r2
 800fc76:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc7a:	fb03 5711 	mls	r7, r3, r1, r5
 800fc7e:	5dc7      	ldrb	r7, [r0, r7]
 800fc80:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fc84:	462f      	mov	r7, r5
 800fc86:	42bb      	cmp	r3, r7
 800fc88:	460d      	mov	r5, r1
 800fc8a:	d9f4      	bls.n	800fc76 <_printf_i+0x112>
 800fc8c:	2b08      	cmp	r3, #8
 800fc8e:	d10b      	bne.n	800fca8 <_printf_i+0x144>
 800fc90:	6823      	ldr	r3, [r4, #0]
 800fc92:	07df      	lsls	r7, r3, #31
 800fc94:	d508      	bpl.n	800fca8 <_printf_i+0x144>
 800fc96:	6923      	ldr	r3, [r4, #16]
 800fc98:	6861      	ldr	r1, [r4, #4]
 800fc9a:	4299      	cmp	r1, r3
 800fc9c:	bfde      	ittt	le
 800fc9e:	2330      	movle	r3, #48	@ 0x30
 800fca0:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fca4:	f106 36ff 	addle.w	r6, r6, #4294967295
 800fca8:	1b92      	subs	r2, r2, r6
 800fcaa:	6122      	str	r2, [r4, #16]
 800fcac:	f8cd a000 	str.w	sl, [sp]
 800fcb0:	464b      	mov	r3, r9
 800fcb2:	aa03      	add	r2, sp, #12
 800fcb4:	4621      	mov	r1, r4
 800fcb6:	4640      	mov	r0, r8
 800fcb8:	f7ff fee6 	bl	800fa88 <_printf_common>
 800fcbc:	3001      	adds	r0, #1
 800fcbe:	d14a      	bne.n	800fd56 <_printf_i+0x1f2>
 800fcc0:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc4:	b004      	add	sp, #16
 800fcc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcca:	6823      	ldr	r3, [r4, #0]
 800fccc:	f043 0320 	orr.w	r3, r3, #32
 800fcd0:	6023      	str	r3, [r4, #0]
 800fcd2:	4833      	ldr	r0, [pc, #204]	@ (800fda0 <_printf_i+0x23c>)
 800fcd4:	2778      	movs	r7, #120	@ 0x78
 800fcd6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcda:	6823      	ldr	r3, [r4, #0]
 800fcdc:	6831      	ldr	r1, [r6, #0]
 800fcde:	061f      	lsls	r7, r3, #24
 800fce0:	f851 5b04 	ldr.w	r5, [r1], #4
 800fce4:	d402      	bmi.n	800fcec <_printf_i+0x188>
 800fce6:	065f      	lsls	r7, r3, #25
 800fce8:	bf48      	it	mi
 800fcea:	b2ad      	uxthmi	r5, r5
 800fcec:	6031      	str	r1, [r6, #0]
 800fcee:	07d9      	lsls	r1, r3, #31
 800fcf0:	bf44      	itt	mi
 800fcf2:	f043 0320 	orrmi.w	r3, r3, #32
 800fcf6:	6023      	strmi	r3, [r4, #0]
 800fcf8:	b11d      	cbz	r5, 800fd02 <_printf_i+0x19e>
 800fcfa:	2310      	movs	r3, #16
 800fcfc:	e7ac      	b.n	800fc58 <_printf_i+0xf4>
 800fcfe:	4827      	ldr	r0, [pc, #156]	@ (800fd9c <_printf_i+0x238>)
 800fd00:	e7e9      	b.n	800fcd6 <_printf_i+0x172>
 800fd02:	6823      	ldr	r3, [r4, #0]
 800fd04:	f023 0320 	bic.w	r3, r3, #32
 800fd08:	6023      	str	r3, [r4, #0]
 800fd0a:	e7f6      	b.n	800fcfa <_printf_i+0x196>
 800fd0c:	4616      	mov	r6, r2
 800fd0e:	e7bd      	b.n	800fc8c <_printf_i+0x128>
 800fd10:	6833      	ldr	r3, [r6, #0]
 800fd12:	6825      	ldr	r5, [r4, #0]
 800fd14:	6961      	ldr	r1, [r4, #20]
 800fd16:	1d18      	adds	r0, r3, #4
 800fd18:	6030      	str	r0, [r6, #0]
 800fd1a:	062e      	lsls	r6, r5, #24
 800fd1c:	681b      	ldr	r3, [r3, #0]
 800fd1e:	d501      	bpl.n	800fd24 <_printf_i+0x1c0>
 800fd20:	6019      	str	r1, [r3, #0]
 800fd22:	e002      	b.n	800fd2a <_printf_i+0x1c6>
 800fd24:	0668      	lsls	r0, r5, #25
 800fd26:	d5fb      	bpl.n	800fd20 <_printf_i+0x1bc>
 800fd28:	8019      	strh	r1, [r3, #0]
 800fd2a:	2300      	movs	r3, #0
 800fd2c:	6123      	str	r3, [r4, #16]
 800fd2e:	4616      	mov	r6, r2
 800fd30:	e7bc      	b.n	800fcac <_printf_i+0x148>
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	1d1a      	adds	r2, r3, #4
 800fd36:	6032      	str	r2, [r6, #0]
 800fd38:	681e      	ldr	r6, [r3, #0]
 800fd3a:	6862      	ldr	r2, [r4, #4]
 800fd3c:	2100      	movs	r1, #0
 800fd3e:	4630      	mov	r0, r6
 800fd40:	f7f0 fa56 	bl	80001f0 <memchr>
 800fd44:	b108      	cbz	r0, 800fd4a <_printf_i+0x1e6>
 800fd46:	1b80      	subs	r0, r0, r6
 800fd48:	6060      	str	r0, [r4, #4]
 800fd4a:	6863      	ldr	r3, [r4, #4]
 800fd4c:	6123      	str	r3, [r4, #16]
 800fd4e:	2300      	movs	r3, #0
 800fd50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd54:	e7aa      	b.n	800fcac <_printf_i+0x148>
 800fd56:	6923      	ldr	r3, [r4, #16]
 800fd58:	4632      	mov	r2, r6
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	4640      	mov	r0, r8
 800fd5e:	47d0      	blx	sl
 800fd60:	3001      	adds	r0, #1
 800fd62:	d0ad      	beq.n	800fcc0 <_printf_i+0x15c>
 800fd64:	6823      	ldr	r3, [r4, #0]
 800fd66:	079b      	lsls	r3, r3, #30
 800fd68:	d413      	bmi.n	800fd92 <_printf_i+0x22e>
 800fd6a:	68e0      	ldr	r0, [r4, #12]
 800fd6c:	9b03      	ldr	r3, [sp, #12]
 800fd6e:	4298      	cmp	r0, r3
 800fd70:	bfb8      	it	lt
 800fd72:	4618      	movlt	r0, r3
 800fd74:	e7a6      	b.n	800fcc4 <_printf_i+0x160>
 800fd76:	2301      	movs	r3, #1
 800fd78:	4632      	mov	r2, r6
 800fd7a:	4649      	mov	r1, r9
 800fd7c:	4640      	mov	r0, r8
 800fd7e:	47d0      	blx	sl
 800fd80:	3001      	adds	r0, #1
 800fd82:	d09d      	beq.n	800fcc0 <_printf_i+0x15c>
 800fd84:	3501      	adds	r5, #1
 800fd86:	68e3      	ldr	r3, [r4, #12]
 800fd88:	9903      	ldr	r1, [sp, #12]
 800fd8a:	1a5b      	subs	r3, r3, r1
 800fd8c:	42ab      	cmp	r3, r5
 800fd8e:	dcf2      	bgt.n	800fd76 <_printf_i+0x212>
 800fd90:	e7eb      	b.n	800fd6a <_printf_i+0x206>
 800fd92:	2500      	movs	r5, #0
 800fd94:	f104 0619 	add.w	r6, r4, #25
 800fd98:	e7f5      	b.n	800fd86 <_printf_i+0x222>
 800fd9a:	bf00      	nop
 800fd9c:	08017a3a 	.word	0x08017a3a
 800fda0:	08017a4b 	.word	0x08017a4b

0800fda4 <memmove>:
 800fda4:	4288      	cmp	r0, r1
 800fda6:	b510      	push	{r4, lr}
 800fda8:	eb01 0402 	add.w	r4, r1, r2
 800fdac:	d902      	bls.n	800fdb4 <memmove+0x10>
 800fdae:	4284      	cmp	r4, r0
 800fdb0:	4623      	mov	r3, r4
 800fdb2:	d807      	bhi.n	800fdc4 <memmove+0x20>
 800fdb4:	1e43      	subs	r3, r0, #1
 800fdb6:	42a1      	cmp	r1, r4
 800fdb8:	d008      	beq.n	800fdcc <memmove+0x28>
 800fdba:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdbe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fdc2:	e7f8      	b.n	800fdb6 <memmove+0x12>
 800fdc4:	4402      	add	r2, r0
 800fdc6:	4601      	mov	r1, r0
 800fdc8:	428a      	cmp	r2, r1
 800fdca:	d100      	bne.n	800fdce <memmove+0x2a>
 800fdcc:	bd10      	pop	{r4, pc}
 800fdce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdd2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdd6:	e7f7      	b.n	800fdc8 <memmove+0x24>

0800fdd8 <_realloc_r>:
 800fdd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fddc:	4680      	mov	r8, r0
 800fdde:	4615      	mov	r5, r2
 800fde0:	460c      	mov	r4, r1
 800fde2:	b921      	cbnz	r1, 800fdee <_realloc_r+0x16>
 800fde4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fde8:	4611      	mov	r1, r2
 800fdea:	f7ff bae7 	b.w	800f3bc <_malloc_r>
 800fdee:	b92a      	cbnz	r2, 800fdfc <_realloc_r+0x24>
 800fdf0:	f7ff fca8 	bl	800f744 <_free_r>
 800fdf4:	2400      	movs	r4, #0
 800fdf6:	4620      	mov	r0, r4
 800fdf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fdfc:	f000 f81a 	bl	800fe34 <_malloc_usable_size_r>
 800fe00:	4285      	cmp	r5, r0
 800fe02:	4606      	mov	r6, r0
 800fe04:	d802      	bhi.n	800fe0c <_realloc_r+0x34>
 800fe06:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fe0a:	d8f4      	bhi.n	800fdf6 <_realloc_r+0x1e>
 800fe0c:	4629      	mov	r1, r5
 800fe0e:	4640      	mov	r0, r8
 800fe10:	f7ff fad4 	bl	800f3bc <_malloc_r>
 800fe14:	4607      	mov	r7, r0
 800fe16:	2800      	cmp	r0, #0
 800fe18:	d0ec      	beq.n	800fdf4 <_realloc_r+0x1c>
 800fe1a:	42b5      	cmp	r5, r6
 800fe1c:	462a      	mov	r2, r5
 800fe1e:	4621      	mov	r1, r4
 800fe20:	bf28      	it	cs
 800fe22:	4632      	movcs	r2, r6
 800fe24:	f7ff fc80 	bl	800f728 <memcpy>
 800fe28:	4621      	mov	r1, r4
 800fe2a:	4640      	mov	r0, r8
 800fe2c:	f7ff fc8a 	bl	800f744 <_free_r>
 800fe30:	463c      	mov	r4, r7
 800fe32:	e7e0      	b.n	800fdf6 <_realloc_r+0x1e>

0800fe34 <_malloc_usable_size_r>:
 800fe34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe38:	1f18      	subs	r0, r3, #4
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	bfbc      	itt	lt
 800fe3e:	580b      	ldrlt	r3, [r1, r0]
 800fe40:	18c0      	addlt	r0, r0, r3
 800fe42:	4770      	bx	lr

0800fe44 <_init>:
 800fe44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe46:	bf00      	nop
 800fe48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe4a:	bc08      	pop	{r3}
 800fe4c:	469e      	mov	lr, r3
 800fe4e:	4770      	bx	lr

0800fe50 <_fini>:
 800fe50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe52:	bf00      	nop
 800fe54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe56:	bc08      	pop	{r3}
 800fe58:	469e      	mov	lr, r3
 800fe5a:	4770      	bx	lr
