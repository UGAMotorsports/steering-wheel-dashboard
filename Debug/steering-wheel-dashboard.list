
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fcdc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007bf4  0800fe7c  0800fe7c  00010e7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017a70  08017a70  00019184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017a70  08017a70  00018a70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017a78  08017a78  00019184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017a78  08017a78  00018a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017a84  08017a84  00018a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08017a88  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000184  08017c0c  00019184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001958  08017c0c  00019958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bfa  00000000  00000000  000191b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f65  00000000  00000000  0003cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00042d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001674  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205fd  00000000  00000000  0004611c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025503  00000000  00000000  00066719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad2b  00000000  00000000  0008bc1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126947  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f4  00000000  00000000  0012698c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012ea80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fe64 	.word	0x0800fe64

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800fe64 	.word	0x0800fe64

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_DMA_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f004 f871 	bl	80046e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f004 f88a 	bl	800471e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	203b      	movs	r0, #59	@ 0x3b
 8000610:	f004 f869 	bl	80046e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000614:	203b      	movs	r0, #59	@ 0x3b
 8000616:	f004 f882 	bl	800471e <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SELECT+0x18>)
 8000632:	f004 fda5 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f003 ff56 	bl	80044e8 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <DESELECT+0x18>)
 800064e:	f004 fd97 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f003 ff48 	bl	80044e8 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SPI_TxByte+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1f8      	bne.n	800066c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SPI_TxByte+0x30>)
 8000682:	f006 fcba 	bl	8006ffa <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000214 	.word	0x20000214

08000694 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d1f8      	bne.n	80006a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006b8:	f006 fc9f 	bl	8006ffa <HAL_SPI_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000214 	.word	0x20000214

080006c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80006ce:	23ff      	movs	r3, #255	@ 0xff
 80006d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <SPI_RxByte+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006e2:	1dba      	adds	r2, r7, #6
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <SPI_RxByte+0x34>)
 80006ee:	f006 fee1 	bl	80074b4 <HAL_SPI_TransmitReceive>

	return data;
 80006f2:	79bb      	ldrb	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000214 	.word	0x20000214

08000700 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000708:	f7ff ffde 	bl	80006c8 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <SD_ReadyWait+0x30>)
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800072a:	f7ff ffcd 	bl	80006c8 <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d003      	beq.n	8000740 <SD_ReadyWait+0x24>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SD_ReadyWait+0x30>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_ReadyWait+0xe>

	return res;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001a2 	.word	0x200001a2

08000750 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000756:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800075a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800075c:	f7ff ff72 	bl	8000644 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	e005      	b.n	8000772 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	f7ff ff7a 	bl	8000660 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddf6      	ble.n	8000766 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000778:	f7ff ff56 	bl	8000628 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000790:	2395      	movs	r3, #149	@ 0x95
 8000792:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000794:	463b      	mov	r3, r7
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff7b 	bl	8000694 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800079e:	e002      	b.n	80007a6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007a6:	f7ff ff8f 	bl	80006c8 <SPI_RxByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <SD_PowerOn+0x66>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80007b6:	f7ff ff45 	bl	8000644 <DESELECT>
	SPI_TxByte(0XFF);
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	f7ff ff50 	bl	8000660 <SPI_TxByte>

	PowerFlag = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SD_PowerOn+0x80>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001a5 	.word	0x200001a5

080007d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <SD_PowerOff+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200001a5 	.word	0x200001a5

080007ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <SD_CheckPower+0x14>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200001a5 	.word	0x200001a5

08000804 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <SD_RxDataBlock+0x58>)
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000814:	f7ff ff58 	bl	80006c8 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d103      	bne.n	800082a <SD_RxDataBlock+0x26>
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SD_RxDataBlock+0x58>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bfe      	cmp	r3, #254	@ 0xfe
 800082e:	d001      	beq.n	8000834 <SD_RxDataBlock+0x30>
 8000830:	2300      	movs	r3, #0
 8000832:	e00f      	b.n	8000854 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff60 	bl	8000700 <SPI_RxBytePtr>
	} while(len--);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f4      	bne.n	8000834 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800084a:	f7ff ff3d 	bl	80006c8 <SPI_RxByte>
	SPI_RxByte();
 800084e:	f7ff ff3b 	bl	80006c8 <SPI_RxByte>

	return TRUE;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a0 	.word	0x200001a0

08000860 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000870:	f7ff ff54 	bl	800071c <SD_ReadyWait>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d001      	beq.n	800087e <SD_TxDataBlock+0x1e>
 800087a:	2300      	movs	r3, #0
 800087c:	e02f      	b.n	80008de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feed 	bl	8000660 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2bfd      	cmp	r3, #253	@ 0xfd
 800088a:	d020      	beq.n	80008ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff feff 	bl	8000694 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000896:	f7ff ff17 	bl	80006c8 <SPI_RxByte>
		SPI_RxByte();
 800089a:	f7ff ff15 	bl	80006c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800089e:	e00b      	b.n	80008b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008a0:	f7ff ff12 	bl	80006c8 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d006      	beq.n	80008c0 <SD_TxDataBlock+0x60>
			i++;
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d9f0      	bls.n	80008a0 <SD_TxDataBlock+0x40>
 80008be:	e000      	b.n	80008c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80008c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80008c2:	bf00      	nop
 80008c4:	f7ff ff00 	bl	80006c8 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d101      	bne.n	80008dc <SD_TxDataBlock+0x7c>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <SD_TxDataBlock+0x7e>

	return FALSE;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	6039      	str	r1, [r7, #0]
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f2:	f7ff ff13 	bl	800071c <SD_ReadyWait>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d001      	beq.n	8000900 <SD_SendCmd+0x1a>
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	e042      	b.n	8000986 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feac 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea6 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fea0 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b40      	cmp	r3, #64	@ 0x40
 800093a:	d102      	bne.n	8000942 <SD_SendCmd+0x5c>
 800093c:	2395      	movs	r3, #149	@ 0x95
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e007      	b.n	8000952 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d102      	bne.n	800094e <SD_SendCmd+0x68>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <SD_SendCmd+0x6c>
	else crc = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe83 	bl	8000660 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b4c      	cmp	r3, #76	@ 0x4c
 800095e:	d101      	bne.n	8000964 <SD_SendCmd+0x7e>
 8000960:	f7ff feb2 	bl	80006c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000968:	f7ff feae 	bl	80006c8 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000970:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da05      	bge.n	8000984 <SD_SendCmd+0x9e>
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	3b01      	subs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f1      	bne.n	8000968 <SD_SendCmd+0x82>

	return res;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d1      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0c6      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80009ba:	f7ff fec9 	bl	8000750 <SD_PowerOn>

	/* slave select */
	SELECT();
 80009be:	f7ff fe33 	bl	8000628 <SELECT>

	/* check disk type */
	type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8c 	bl	80008e6 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a1 	bne.w	8000b18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80009d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff7f 	bl	80008e6 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d155      	bne.n	8000a9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe67 	bl	80006c8 <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d17e      	bne.n	8000b18 <SD_disk_initialize+0x188>
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000a1e:	d17b      	bne.n	8000b18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	@ 0x77
 8000a24:	f7ff ff5f 	bl	80008e6 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d807      	bhi.n	8000a3e <SD_disk_initialize+0xae>
 8000a2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff57 	bl	80008e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a3e:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ec      	bne.n	8000a20 <SD_disk_initialize+0x90>
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f7ff ff46 	bl	80008e6 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d15b      	bne.n	8000b18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	f7ff fe2e 	bl	80006c8 <SPI_RxByte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f104 0310 	add.w	r3, r4, #16
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d9ef      	bls.n	8000a66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x104>
 8000a90:	230c      	movs	r3, #12
 8000a92:	e000      	b.n	8000a96 <SD_disk_initialize+0x106>
 8000a94:	2304      	movs	r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
 8000a98:	e03e      	b.n	8000b18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2077      	movs	r0, #119	@ 0x77
 8000a9e:	f7ff ff22 	bl	80008e6 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d808      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2069      	movs	r0, #105	@ 0x69
 8000aac:	f7ff ff1b 	bl	80008e6 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d801      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e000      	b.n	8000abc <SD_disk_initialize+0x12c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d10e      	bne.n	8000ae2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2077      	movs	r0, #119	@ 0x77
 8000ac8:	f7ff ff0d 	bl	80008e6 <SD_SendCmd>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d80e      	bhi.n	8000af0 <SD_disk_initialize+0x160>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2069      	movs	r0, #105	@ 0x69
 8000ad6:	f7ff ff06 	bl	80008e6 <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <SD_disk_initialize+0x160>
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2041      	movs	r0, #65	@ 0x41
 8000ae6:	f7ff fefe 	bl	80008e6 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e2      	bne.n	8000abe <SD_disk_initialize+0x12e>
 8000af8:	e000      	b.n	8000afc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000afa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <SD_disk_initialize+0x184>
 8000b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b08:	2050      	movs	r0, #80	@ 0x50
 8000b0a:	f7ff feec 	bl	80008e6 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SD_disk_initialize+0x1c8>)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b1e:	f7ff fd91 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000b22:	f7ff fdd1 	bl	80006c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b3e:	f7ff fe49 	bl	80007d4 <SD_PowerOff>
	}

	return Stat;
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	200001a4 	.word	0x200001a4

08000b5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_status+0x14>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <SD_disk_status+0x1a>
	return Stat;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SD_disk_status+0x28>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x1c>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <SD_disk_read+0x20>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e051      	b.n	8000c4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SD_disk_read+0xcc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_read+0x32>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e048      	b.n	8000c4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <SD_disk_read+0xd0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <SD_disk_read+0x44>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bcc:	f7ff fd2c 	bl	8000628 <SELECT>

	if (count == 1)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f7ff fe84 	bl	80008e6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <SD_disk_read+0xb0>
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fe0b 	bl	8000804 <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <SD_disk_read+0xb0>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e01e      	b.n	8000c38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2052      	movs	r0, #82	@ 0x52
 8000bfe:	f7ff fe72 	bl	80008e6 <SD_SendCmd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdf9 	bl	8000804 <SD_RxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <SD_disk_read+0xa6>
				buff += 512;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ed      	bne.n	8000c08 <SD_disk_read+0x80>
 8000c2c:	e000      	b.n	8000c30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	204c      	movs	r0, #76	@ 0x4c
 8000c34:	f7ff fe57 	bl	80008e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c38:	f7ff fd04 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000c3c:	f7ff fd44 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	200001a4 	.word	0x200001a4

08000c5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <SD_disk_write+0x1c>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <SD_disk_write+0x20>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e06b      	b.n	8000d54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <SD_disk_write+0x100>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SD_disk_write+0x32>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e062      	b.n	8000d54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <SD_disk_write+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SD_disk_write+0x44>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e059      	b.n	8000d54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SD_disk_write+0x104>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <SD_disk_write+0x56>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cb2:	f7ff fcb9 	bl	8000628 <SELECT>

	if (count == 1)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d110      	bne.n	8000cde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2058      	movs	r0, #88	@ 0x58
 8000cc0:	f7ff fe11 	bl	80008e6 <SD_SendCmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13a      	bne.n	8000d40 <SD_disk_write+0xe4>
 8000cca:	21fe      	movs	r1, #254	@ 0xfe
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fdc7 	bl	8000860 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d033      	beq.n	8000d40 <SD_disk_write+0xe4>
			count = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e030      	b.n	8000d40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <SD_disk_write+0x104>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2077      	movs	r0, #119	@ 0x77
 8000cee:	f7ff fdfa 	bl	80008e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	2057      	movs	r0, #87	@ 0x57
 8000cf6:	f7ff fdf6 	bl	80008e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2059      	movs	r0, #89	@ 0x59
 8000cfe:	f7ff fdf2 	bl	80008e6 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d08:	21fc      	movs	r1, #252	@ 0xfc
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fda8 	bl	8000860 <SD_TxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <SD_disk_write+0xd0>
				buff += 512;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_disk_write+0xac>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d2e:	21fd      	movs	r1, #253	@ 0xfd
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd95 	bl	8000860 <SD_TxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d40:	f7ff fc80 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000d44:	f7ff fcc0 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001a4 	.word	0x200001a4

08000d64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	603a      	str	r2, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_disk_ioctl+0x1e>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e113      	b.n	8000faa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d124      	bne.n	8000dd8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d012      	beq.n	8000dbc <SD_disk_ioctl+0x58>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dc1a      	bgt.n	8000dd0 <SD_disk_ioctl+0x6c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <SD_disk_ioctl+0x40>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d006      	beq.n	8000db0 <SD_disk_ioctl+0x4c>
 8000da2:	e015      	b.n	8000dd0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000da4:	f7ff fd16 	bl	80007d4 <SD_PowerOff>
			res = RES_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e0fa      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000db0:	f7ff fcce 	bl	8000750 <SD_PowerOn>
			res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e0f4      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1c5c      	adds	r4, r3, #1
 8000dc0:	f7ff fd14 	bl	80007ec <SD_CheckPower>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e0ea      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	e0e6      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dd8:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <SD_disk_ioctl+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x86>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0df      	b.n	8000faa <SD_disk_ioctl+0x246>

		SELECT();
 8000dea:	f7ff fc1d 	bl	8000628 <SELECT>

		switch (ctrl)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	f200 80c9 	bhi.w	8000f88 <SD_disk_ioctl+0x224>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <SD_disk_ioctl+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f89 	.word	0x08000f89
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f05 	.word	0x08000f05
 8000e2c:	08000f29 	.word	0x08000f29
 8000e30:	08000f4d 	.word	0x08000f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e34:	2100      	movs	r1, #0
 8000e36:	2049      	movs	r0, #73	@ 0x49
 8000e38:	f7ff fd55 	bl	80008e6 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80a6 	bne.w	8000f90 <SD_disk_ioctl+0x22c>
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcda 	bl	8000804 <SD_RxDataBlock>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10d      	bne.n	8000e7e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e62:	7d7b      	ldrb	r3, [r7, #21]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02d      	b.n	8000eda <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7e:	7c7b      	ldrb	r3, [r7, #17]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0306 	and.w	r3, r3, #6
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7cbb      	ldrb	r3, [r7, #18]
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ecc:	8bfa      	ldrh	r2, [r7, #30]
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	3b09      	subs	r3, #9
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ee0:	e056      	b.n	8000f90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ef0:	e055      	b.n	8000f9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ef2:	f7ff fc13 	bl	800071c <SD_ReadyWait>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2bff      	cmp	r3, #255	@ 0xff
 8000efa:	d14b      	bne.n	8000f94 <SD_disk_ioctl+0x230>
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f02:	e047      	b.n	8000f94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f04:	2100      	movs	r1, #0
 8000f06:	2049      	movs	r0, #73	@ 0x49
 8000f08:	f7ff fced 	bl	80008e6 <SD_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d142      	bne.n	8000f98 <SD_disk_ioctl+0x234>
 8000f12:	2110      	movs	r1, #16
 8000f14:	6a38      	ldr	r0, [r7, #32]
 8000f16:	f7ff fc75 	bl	8000804 <SD_RxDataBlock>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d03b      	beq.n	8000f98 <SD_disk_ioctl+0x234>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f26:	e037      	b.n	8000f98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204a      	movs	r0, #74	@ 0x4a
 8000f2c:	f7ff fcdb 	bl	80008e6 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d132      	bne.n	8000f9c <SD_disk_ioctl+0x238>
 8000f36:	2110      	movs	r1, #16
 8000f38:	6a38      	ldr	r0, [r7, #32]
 8000f3a:	f7ff fc63 	bl	8000804 <SD_RxDataBlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02b      	beq.n	8000f9c <SD_disk_ioctl+0x238>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f4a:	e027      	b.n	8000f9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207a      	movs	r0, #122	@ 0x7a
 8000f50:	f7ff fcc9 	bl	80008e6 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f60:	e00b      	b.n	8000f7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f62:	6a3c      	ldr	r4, [r7, #32]
 8000f64:	1c63      	adds	r3, r4, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	f7ff fbae 	bl	80006c8 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f8e:	e006      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f9c:	bf00      	nop
		}

		DESELECT();
 8000f9e:	f7ff fb51 	bl	8000644 <DESELECT>
		SPI_RxByte();
 8000fa2:	f7ff fb91 	bl	80006c8 <SPI_RxByte>
	}

	return res;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x190>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <MX_GPIO_Init+0x190>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001044:	4841      	ldr	r0, [pc, #260]	@ (800114c <MX_GPIO_Init+0x194>)
 8001046:	f004 f89b 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4840      	ldr	r0, [pc, #256]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001050:	f004 f896 	bl	8005180 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	213b      	movs	r1, #59	@ 0x3b
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x19c>)
 800105a:	f004 f891 	bl	8005180 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x194>)
 8001078:	f003 fefe 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 800107c:	2306      	movs	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4830      	ldr	r0, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001090:	f003 fef2 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <MX_GPIO_Init+0x198>)
 80010ac:	f003 fee4 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 80010b0:	233b      	movs	r3, #59	@ 0x3b
 80010b2:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010c8:	f003 fed6 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010e4:	f003 fec8 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001100:	f003 feba 	bl	8004e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_GPIO_Init+0x198>)
 800111c:	f003 feac 	bl	8004e78 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f003 fade 	bl	80046e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f003 faf7 	bl	800471e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f003 fad6 	bl	80046e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f003 faef 	bl	800471e <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800116c:	f001 f8fe 	bl	800236c <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001170:	e01c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001178:	d103      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800117a:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800117c:	f001 f8f6 	bl	800236c <USB_Println>
}
 8001180:	e014      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001188:	d103      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x64>)
 800118c:	f001 f8ee 	bl	800236c <USB_Println>
}
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001198:	d103      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x68>)
 800119c:	f001 f8e6 	bl	800236c <USB_Println>
}
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011a8:	f001 f8e0 	bl	800236c <USB_Println>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800fe7c 	.word	0x0800fe7c
 80011b8:	0800fe94 	.word	0x0800fe94
 80011bc:	0800feac 	.word	0x0800feac
 80011c0:	0800fec4 	.word	0x0800fec4
 80011c4:	0800fedc 	.word	0x0800fedc

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	f5ad 6deb 	sub.w	sp, sp, #1880	@ 0x758
 80011ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f003 f918 	bl	8004404 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 fa8a 	bl	80016ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f7ff feee 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011dc:	f7ff f9ee 	bl	80005bc <MX_DMA_Init>
  MX_SPI1_Init();
 80011e0:	f000 fd6e 	bl	8001cc0 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011e4:	f00d fb78 	bl	800e8d8 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011e8:	f000 fda2 	bl	8001d30 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011ec:	f000 ffba 	bl	8002164 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011f0:	f009 f9ae 	bl	800a550 <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011f4:	f207 5304 	addw	r3, r7, #1284	@ 0x504
 80011f8:	2201      	movs	r2, #1
 80011fa:	49bd      	ldr	r1, [pc, #756]	@ (80014f0 <main+0x328>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00c ff27 	bl	800e050 <f_mount>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3747 	strb.w	r3, [r7, #1863]	@ 0x747
  if (fresult != FR_OK) {
 8001208:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <main+0x5e>
	  HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001214:	f003 f968 	bl	80044e8 <HAL_Delay>
	  USB_Println("There was an error: %d\n", fresult);
 8001218:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800121c:	4619      	mov	r1, r3
 800121e:	48b5      	ldr	r0, [pc, #724]	@ (80014f4 <main+0x32c>)
 8001220:	f001 f8a4 	bl	800236c <USB_Println>
 8001224:	e006      	b.n	8001234 <main+0x6c>
  } else {
	  HAL_Delay(1000);
 8001226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122a:	f003 f95d 	bl	80044e8 <HAL_Delay>
	  USB_Println("the sdcard is mounted\n");
 800122e:	48b2      	ldr	r0, [pc, #712]	@ (80014f8 <main+0x330>)
 8001230:	f001 f89c 	bl	800236c <USB_Println>
  }

  initializeMCP2515();
 8001234:	f000 facc 	bl	80017d0 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 2500, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 8001238:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800123c:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8001240:	4aae      	ldr	r2, [pc, #696]	@ (80014fc <main+0x334>)
 8001242:	461c      	mov	r4, r3
 8001244:	4615      	mov	r5, r2
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001256:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800125a:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 800125e:	2100      	movs	r1, #0
 8001260:	48a7      	ldr	r0, [pc, #668]	@ (8001500 <main+0x338>)
 8001262:	f000 fb6d 	bl	8001940 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001266:	2300      	movs	r3, #0
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	489f      	ldr	r0, [pc, #636]	@ (8001500 <main+0x338>)
 8001282:	f000 fae1 	bl	8001848 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001286:	2301      	movs	r3, #1
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	4897      	ldr	r0, [pc, #604]	@ (8001500 <main+0x338>)
 80012a2:	f000 fad1 	bl	8001848 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 80012a6:	230e      	movs	r3, #14
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	488f      	ldr	r0, [pc, #572]	@ (8001500 <main+0x338>)
 80012c2:	f000 fac1 	bl	8001848 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80012c6:	230f      	movs	r3, #15
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	4887      	ldr	r0, [pc, #540]	@ (8001500 <main+0x338>)
 80012e2:	f000 fab1 	bl	8001848 <setColor>

  resetScreen();\
 80012e6:	f001 fcc3 	bl	8002c70 <resetScreen>
  initializeScreen();
 80012ea:	f001 fcdf 	bl	8002cac <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012ee:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012f2:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 80012f6:	2100      	movs	r1, #0
 80012f8:	4881      	ldr	r0, [pc, #516]	@ (8001500 <main+0x338>)
 80012fa:	f000 fc79 	bl	8001bf0 <startUp>
  HAL_Delay(200);
 80012fe:	20c8      	movs	r0, #200	@ 0xc8
 8001300:	f003 f8f2 	bl	80044e8 <HAL_Delay>

  char result[20] = "null"; //rpm
 8001304:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001308:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 800130c:	4a7d      	ldr	r2, [pc, #500]	@ (8001504 <main+0x33c>)
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	3304      	adds	r3, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 800131c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001320:	f5a3 63df 	sub.w	r3, r3, #1784	@ 0x6f8
 8001324:	4a77      	ldr	r2, [pc, #476]	@ (8001504 <main+0x33c>)
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  char result3[20] = "8";//gear
 8001334:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001338:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 800133c:	2238      	movs	r2, #56	@ 0x38
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 800134c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001350:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 8001354:	4a6b      	ldr	r2, [pc, #428]	@ (8001504 <main+0x33c>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	3304      	adds	r3, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 8001364:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f945 	bl	80035f8 <settempdata>
  setgeardata(result3);
 800136e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f96c 	bl	8003650 <setgeardata>
  setrpmdata(result);
 8001378:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f903 	bl	8003588 <setrpmdata>
  setbattdata(result4);
 8001382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f98c 	bl	80036a4 <setbattdata>
  domainscreen();
 800138c:	f002 f9b6 	bl	80036fc <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f000 fa2d 	bl	80017f4 <readMessage>
 800139a:	f8c7 0740 	str.w	r0, [r7, #1856]	@ 0x740
	  if (canresult == 0) {
 800139e:	f8d7 3740 	ldr.w	r3, [r7, #1856]	@ 0x740
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 8191 	bne.w	80016ca <main+0x502>
		  if (frame.can_id == 1512) {
 80013a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013ac:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 80013b6:	d177      	bne.n	80014a8 <main+0x2e0>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 80013b8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013bc:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013c0:	7a9b      	ldrb	r3, [r3, #10]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80013ca:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 80013ce:	7ad2      	ldrb	r2, [r2, #11]
 80013d0:	4413      	add	r3, r2
 80013d2:	f8a7 3738 	strh.w	r3, [r7, #1848]	@ 0x738
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013d6:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013da:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80013de:	f207 41d4 	addw	r1, r7, #1236	@ 0x4d4
 80013e2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	2100      	movs	r1, #0
 80013f0:	4843      	ldr	r0, [pc, #268]	@ (8001500 <main+0x338>)
 80013f2:	f000 fb35 	bl	8001a60 <UpdateShiftLights>

			  itoa(rpm, (char*)(result), 10);
 80013f6:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013fa:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80013fe:	220a      	movs	r2, #10
 8001400:	4618      	mov	r0, r3
 8001402:	f00d ffb6 	bl	800f372 <itoa>
			  setrpmdata(result);
 8001406:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800140a:	4618      	mov	r0, r3
 800140c:	f002 f8bc 	bl	8003588 <setrpmdata>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 8001410:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001414:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8001422:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 8001426:	7b52      	ldrb	r2, [r2, #13]
 8001428:	4413      	add	r3, r2
 800142a:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  if (temp > 2150) {
 800142e:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001432:	f640 0266 	movw	r2, #2150	@ 0x866
 8001436:	4293      	cmp	r3, r2
 8001438:	d910      	bls.n	800145c <main+0x294>
				setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800143a:	230f      	movs	r3, #15
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	23ff      	movs	r3, #255	@ 0xff
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	482a      	ldr	r0, [pc, #168]	@ (8001500 <main+0x338>)
 8001456:	f000 f9f7 	bl	8001848 <setColor>
 800145a:	e00f      	b.n	800147c <main+0x2b4>
			  } else {
				setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 800145c:	230f      	movs	r3, #15
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	4822      	ldr	r0, [pc, #136]	@ (8001500 <main+0x338>)
 8001478:	f000 f9e6 	bl	8001848 <setColor>
			  }
			  temp /= 10;
 800147c:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001480:	4a21      	ldr	r2, [pc, #132]	@ (8001508 <main+0x340>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  itoa(temp, result2, 10);
 800148c:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001490:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001494:	220a      	movs	r2, #10
 8001496:	4618      	mov	r0, r3
 8001498:	f00d ff6b 	bl	800f372 <itoa>
			  settempdata(result2);
 800149c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 f8a9 	bl	80035f8 <settempdata>
 80014a6:	e110      	b.n	80016ca <main+0x502>
		  } else if (frame.can_id == 1520 + 33) {
 80014a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014ac:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f240 6211 	movw	r2, #1553	@ 0x611
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d12a      	bne.n	8001510 <main+0x348>
			  uint8_t gear = ((uint8_t)frame.data[6]);
 80014ba:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014be:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014c2:	7b9b      	ldrb	r3, [r3, #14]
 80014c4:	f887 373a 	strb.w	r3, [r7, #1850]	@ 0x73a
			  USB_Println("the gear value is %d\n", gear);
 80014c8:	f897 373a 	ldrb.w	r3, [r7, #1850]	@ 0x73a
 80014cc:	4619      	mov	r1, r3
 80014ce:	480f      	ldr	r0, [pc, #60]	@ (800150c <main+0x344>)
 80014d0:	f000 ff4c 	bl	800236c <USB_Println>
			  itoa(gear, result3, 10);
 80014d4:	f897 373a 	ldrb.w	r3, [r7, #1850]	@ 0x73a
 80014d8:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80014dc:	220a      	movs	r2, #10
 80014de:	4618      	mov	r0, r3
 80014e0:	f00d ff47 	bl	800f372 <itoa>
			  setgeardata(result3);
 80014e4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014e8:	4618      	mov	r0, r3
 80014ea:	f002 f8b1 	bl	8003650 <setgeardata>
 80014ee:	e0ec      	b.n	80016ca <main+0x502>
 80014f0:	0800fefc 	.word	0x0800fefc
 80014f4:	0800ff00 	.word	0x0800ff00
 80014f8:	0800ff18 	.word	0x0800ff18
 80014fc:	0800ff78 	.word	0x0800ff78
 8001500:	200002d4 	.word	0x200002d4
 8001504:	6c6c756e 	.word	0x6c6c756e
 8001508:	cccccccd 	.word	0xcccccccd
 800150c:	0800ff30 	.word	0x0800ff30
		  } else if (frame.can_id == 1515) {
 8001510:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001514:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 800151e:	4293      	cmp	r3, r2
 8001520:	d155      	bne.n	80015ce <main+0x406>
			  uint8_t battvalue = (((uint16_t)frame.data[0]) << 8) + frame.data[1];
 8001522:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001526:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 800152a:	7a5b      	ldrb	r3, [r3, #9]
 800152c:	f887 373d 	strb.w	r3, [r7, #1853]	@ 0x73d
			  uint8_t batIntPart = battvalue / 10;
 8001530:	f897 373d 	ldrb.w	r3, [r7, #1853]	@ 0x73d
 8001534:	4a66      	ldr	r2, [pc, #408]	@ (80016d0 <main+0x508>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	f887 373c 	strb.w	r3, [r7, #1852]	@ 0x73c
			  uint8_t batDecimalPart = battvalue % 10;
 8001540:	f897 273d 	ldrb.w	r2, [r7, #1853]	@ 0x73d
 8001544:	4b62      	ldr	r3, [pc, #392]	@ (80016d0 <main+0x508>)
 8001546:	fba3 1302 	umull	r1, r3, r3, r2
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
			  char batint[10];
			  char batdec[10];
			  itoa(batIntPart, batint, 10);
 800155a:	f897 373c 	ldrb.w	r3, [r7, #1852]	@ 0x73c
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	220a      	movs	r2, #10
 8001564:	4618      	mov	r0, r3
 8001566:	f00d ff04 	bl	800f372 <itoa>
			  itoa(batDecimalPart, batdec, 10);
 800156a:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 800156e:	4639      	mov	r1, r7
 8001570:	220a      	movs	r2, #10
 8001572:	4618      	mov	r0, r3
 8001574:	f00d fefd 	bl	800f372 <itoa>
			  strncpy(result4, "", 20);
 8001578:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157c:	2214      	movs	r2, #20
 800157e:	4955      	ldr	r1, [pc, #340]	@ (80016d4 <main+0x50c>)
 8001580:	4618      	mov	r0, r3
 8001582:	f00e f850 	bl	800f626 <strncpy>
			  strncat(result4, batint, 5);
 8001586:	f107 010c 	add.w	r1, r7, #12
 800158a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158e:	2205      	movs	r2, #5
 8001590:	4618      	mov	r0, r3
 8001592:	f00e f835 	bl	800f600 <strncat>
			  strncat(result4, ".", 5);
 8001596:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe20 	bl	80001e0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015a8:	4413      	add	r3, r2
 80015aa:	494b      	ldr	r1, [pc, #300]	@ (80016d8 <main+0x510>)
 80015ac:	461a      	mov	r2, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	8013      	strh	r3, [r2, #0]
			  strncat(result4, batdec, 1);
 80015b4:	4639      	mov	r1, r7
 80015b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015ba:	2201      	movs	r2, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f00e f81f 	bl	800f600 <strncat>
			  setbattdata(result4);
 80015c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f86c 	bl	80036a4 <setbattdata>
 80015cc:	e07d      	b.n	80016ca <main+0x502>
		  } else if (frame.can_id == 504) {
 80015ce:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015d2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015dc:	d175      	bne.n	80016ca <main+0x502>
			  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015de:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015e2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015e6:	7b9b      	ldrb	r3, [r3, #14]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015f2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015f6:	7bdb      	ldrb	r3, [r3, #15]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	f8a7 373e 	strh.w	r3, [r7, #1854]	@ 0x73e
			  if (neutrallight < 1024) {
 8001602:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	@ 0x73e
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160a:	d22c      	bcs.n	8001666 <main+0x49e>
				  setColor(&htim4, TIM_CHANNEL_1, 255, 255, 255, ledcolors, ledbytes, 0);
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	23ff      	movs	r3, #255	@ 0xff
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	23ff      	movs	r3, #255	@ 0xff
 8001622:	22ff      	movs	r2, #255	@ 0xff
 8001624:	2100      	movs	r1, #0
 8001626:	482d      	ldr	r0, [pc, #180]	@ (80016dc <main+0x514>)
 8001628:	f000 f90e 	bl	8001848 <setColor>
				  setColor(&htim4, TIM_CHANNEL_1, 255, 255, 255, ledcolors, ledbytes, 1);
 800162c:	2301      	movs	r3, #1
 800162e:	9303      	str	r3, [sp, #12]
 8001630:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800163a:	9301      	str	r3, [sp, #4]
 800163c:	23ff      	movs	r3, #255	@ 0xff
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	23ff      	movs	r3, #255	@ 0xff
 8001642:	22ff      	movs	r2, #255	@ 0xff
 8001644:	2100      	movs	r1, #0
 8001646:	4825      	ldr	r0, [pc, #148]	@ (80016dc <main+0x514>)
 8001648:	f000 f8fe 	bl	8001848 <setColor>
				  strncpy(result3, "7", 10);
 800164c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001650:	220a      	movs	r2, #10
 8001652:	4923      	ldr	r1, [pc, #140]	@ (80016e0 <main+0x518>)
 8001654:	4618      	mov	r0, r3
 8001656:	f00d ffe6 	bl	800f626 <strncpy>
				  setgeardata(result3);
 800165a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800165e:	4618      	mov	r0, r3
 8001660:	f001 fff6 	bl	8003650 <setgeardata>
 8001664:	e02b      	b.n	80016be <main+0x4f6>
			  } else {
				  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001666:	2300      	movs	r3, #0
 8001668:	9303      	str	r3, [sp, #12]
 800166a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800166e:	9302      	str	r3, [sp, #8]
 8001670:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001674:	9301      	str	r3, [sp, #4]
 8001676:	2300      	movs	r3, #0
 8001678:	9300      	str	r3, [sp, #0]
 800167a:	2300      	movs	r3, #0
 800167c:	2200      	movs	r2, #0
 800167e:	2100      	movs	r1, #0
 8001680:	4816      	ldr	r0, [pc, #88]	@ (80016dc <main+0x514>)
 8001682:	f000 f8e1 	bl	8001848 <setColor>
				  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001686:	2301      	movs	r3, #1
 8001688:	9303      	str	r3, [sp, #12]
 800168a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800168e:	9302      	str	r3, [sp, #8]
 8001690:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001694:	9301      	str	r3, [sp, #4]
 8001696:	2300      	movs	r3, #0
 8001698:	9300      	str	r3, [sp, #0]
 800169a:	2300      	movs	r3, #0
 800169c:	2200      	movs	r2, #0
 800169e:	2100      	movs	r1, #0
 80016a0:	480e      	ldr	r0, [pc, #56]	@ (80016dc <main+0x514>)
 80016a2:	f000 f8d1 	bl	8001848 <setColor>
				  strncpy(result3, "8", 10);
 80016a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016aa:	220a      	movs	r2, #10
 80016ac:	490d      	ldr	r1, [pc, #52]	@ (80016e4 <main+0x51c>)
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00d ffb9 	bl	800f626 <strncpy>
				  setgeardata(result3);
 80016b4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80016b8:	4618      	mov	r0, r3
 80016ba:	f001 ffc9 	bl	8003650 <setgeardata>
			  }
			  USB_Println("the neutral light value is %d\n", neutrallight);
 80016be:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	@ 0x73e
 80016c2:	4619      	mov	r1, r3
 80016c4:	4808      	ldr	r0, [pc, #32]	@ (80016e8 <main+0x520>)
 80016c6:	f000 fe51 	bl	800236c <USB_Println>
		  }
	  }

	  domainscreen();
 80016ca:	f002 f817 	bl	80036fc <domainscreen>
  {
 80016ce:	e65f      	b.n	8001390 <main+0x1c8>
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	0800ff48 	.word	0x0800ff48
 80016d8:	0800ff4c 	.word	0x0800ff4c
 80016dc:	200002d4 	.word	0x200002d4
 80016e0:	0800ff50 	.word	0x0800ff50
 80016e4:	0800ff54 	.word	0x0800ff54
 80016e8:	0800ff58 	.word	0x0800ff58

080016ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b094      	sub	sp, #80	@ 0x50
 80016f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f2:	f107 0320 	add.w	r3, r7, #32
 80016f6:	2230      	movs	r2, #48	@ 0x30
 80016f8:	2100      	movs	r1, #0
 80016fa:	4618      	mov	r0, r3
 80016fc:	f00d ff78 	bl	800f5f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001700:	f107 030c 	add.w	r3, r7, #12
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001710:	2300      	movs	r3, #0
 8001712:	60bb      	str	r3, [r7, #8]
 8001714:	4b29      	ldr	r3, [pc, #164]	@ (80017bc <SystemClock_Config+0xd0>)
 8001716:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001718:	4a28      	ldr	r2, [pc, #160]	@ (80017bc <SystemClock_Config+0xd0>)
 800171a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800171e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001720:	4b26      	ldr	r3, [pc, #152]	@ (80017bc <SystemClock_Config+0xd0>)
 8001722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001724:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800172c:	2300      	movs	r3, #0
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	4b23      	ldr	r3, [pc, #140]	@ (80017c0 <SystemClock_Config+0xd4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001738:	4a21      	ldr	r2, [pc, #132]	@ (80017c0 <SystemClock_Config+0xd4>)
 800173a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	4b1f      	ldr	r3, [pc, #124]	@ (80017c0 <SystemClock_Config+0xd4>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001748:	607b      	str	r3, [r7, #4]
 800174a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800174c:	2301      	movs	r3, #1
 800174e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001750:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	2302      	movs	r3, #2
 8001758:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800175a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800175e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001760:	2319      	movs	r3, #25
 8001762:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001764:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001768:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800176a:	2304      	movs	r3, #4
 800176c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800176e:	2307      	movs	r3, #7
 8001770:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001772:	f107 0320 	add.w	r3, r7, #32
 8001776:	4618      	mov	r0, r3
 8001778:	f004 ff86 	bl	8006688 <HAL_RCC_OscConfig>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001782:	f000 f81f 	bl	80017c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001786:	230f      	movs	r3, #15
 8001788:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800178a:	2302      	movs	r3, #2
 800178c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800178e:	2300      	movs	r3, #0
 8001790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001792:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001796:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001798:	2300      	movs	r3, #0
 800179a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2102      	movs	r1, #2
 80017a2:	4618      	mov	r0, r3
 80017a4:	f005 f9e8 	bl	8006b78 <HAL_RCC_ClockConfig>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017ae:	f000 f809 	bl	80017c4 <Error_Handler>
  }
}
 80017b2:	bf00      	nop
 80017b4:	3750      	adds	r7, #80	@ 0x50
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40007000 	.word	0x40007000

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <Error_Handler+0x8>

080017d0 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017d0:	b580      	push	{r7, lr}
 80017d2:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017d4:	4806      	ldr	r0, [pc, #24]	@ (80017f0 <initializeMCP2515+0x20>)
 80017d6:	f002 f8d5 	bl	8003984 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017da:	2202      	movs	r2, #2
 80017dc:	210e      	movs	r1, #14
 80017de:	4804      	ldr	r0, [pc, #16]	@ (80017f0 <initializeMCP2515+0x20>)
 80017e0:	f002 faa2 	bl	8003d28 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80017e4:	4802      	ldr	r0, [pc, #8]	@ (80017f0 <initializeMCP2515+0x20>)
 80017e6:	f002 fa53 	bl	8003c90 <_ZN7MCP251513setNormalModeEv>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200001a8 	.word	0x200001a8

080017f4 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	4804      	ldr	r0, [pc, #16]	@ (8001810 <readMessage+0x1c>)
 8001800:	f002 fdaa 	bl	8004358 <_ZN7MCP251511readMessageEP9can_frame>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	200001a8 	.word	0x200001a8

08001814 <_Z41__static_initialization_and_destruction_0v>:
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800181a:	2310      	movs	r3, #16
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	4b04      	ldr	r3, [pc, #16]	@ (8001830 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001820:	220a      	movs	r2, #10
 8001822:	4904      	ldr	r1, [pc, #16]	@ (8001834 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8001826:	f002 f84e 	bl	80038c6 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800182a:	bf00      	nop
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020000 	.word	0x40020000
 8001834:	20000214 	.word	0x20000214
 8001838:	200001a8 	.word	0x200001a8

0800183c <_GLOBAL__sub_I_myMCP>:
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
 8001840:	f7ff ffe8 	bl	8001814 <_Z41__static_initialization_and_destruction_0v>
 8001844:	bd80      	pop	{r7, pc}
	...

08001848 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	4611      	mov	r1, r2
 8001854:	461a      	mov	r2, r3
 8001856:	460b      	mov	r3, r1
 8001858:	71fb      	strb	r3, [r7, #7]
 800185a:	4613      	mov	r3, r2
 800185c:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 800185e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001860:	4613      	mov	r3, r2
 8001862:	005b      	lsls	r3, r3, #1
 8001864:	4413      	add	r3, r2
 8001866:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800186c:	4413      	add	r3, r2
 800186e:	79fa      	ldrb	r2, [r7, #7]
 8001870:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	3301      	adds	r3, #1
 8001876:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001878:	4413      	add	r3, r2
 800187a:	79ba      	ldrb	r2, [r7, #6]
 800187c:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 800187e:	693b      	ldr	r3, [r7, #16]
 8001880:	3302      	adds	r3, #2
 8001882:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001884:	4413      	add	r3, r2
 8001886:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800188a:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	61fb      	str	r3, [r7, #28]
 8001890:	e02a      	b.n	80018e8 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8001892:	2300      	movs	r3, #0
 8001894:	61bb      	str	r3, [r7, #24]
 8001896:	e021      	b.n	80018dc <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8001898:	69fb      	ldr	r3, [r7, #28]
 800189a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800189c:	4413      	add	r3, r2
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	461a      	mov	r2, r3
 80018a2:	69bb      	ldr	r3, [r7, #24]
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d009      	beq.n	80018c4 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80018b0:	69fb      	ldr	r3, [r7, #28]
 80018b2:	00da      	lsls	r2, r3, #3
 80018b4:	69bb      	ldr	r3, [r7, #24]
 80018b6:	4413      	add	r3, r2
 80018b8:	005b      	lsls	r3, r3, #1
 80018ba:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018bc:	4413      	add	r3, r2
 80018be:	2246      	movs	r2, #70	@ 0x46
 80018c0:	801a      	strh	r2, [r3, #0]
 80018c2:	e008      	b.n	80018d6 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d0:	4413      	add	r3, r2
 80018d2:	2223      	movs	r2, #35	@ 0x23
 80018d4:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80018d6:	69bb      	ldr	r3, [r7, #24]
 80018d8:	3301      	adds	r3, #1
 80018da:	61bb      	str	r3, [r7, #24]
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b07      	cmp	r3, #7
 80018e0:	ddda      	ble.n	8001898 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3301      	adds	r3, #1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	693b      	ldr	r3, [r7, #16]
 80018ea:	3302      	adds	r3, #2
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	ddcf      	ble.n	8001892 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80018f2:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80018f6:	617b      	str	r3, [r7, #20]
 80018f8:	e008      	b.n	800190c <setColor+0xc4>
    	ledbytes[i] = 0;
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	005b      	lsls	r3, r3, #1
 80018fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001900:	4413      	add	r3, r2
 8001902:	2200      	movs	r2, #0
 8001904:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	3301      	adds	r3, #1
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f240 2215 	movw	r2, #533	@ 0x215
 8001912:	4293      	cmp	r3, r2
 8001914:	ddf1      	ble.n	80018fa <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001916:	f240 2316 	movw	r3, #534	@ 0x216
 800191a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800191c:	68b9      	ldr	r1, [r7, #8]
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f006 faa4 	bl	8007e6c <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001924:	bf00      	nop
 8001926:	4b05      	ldr	r3, [pc, #20]	@ (800193c <setColor+0xf4>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d0fb      	beq.n	8001926 <setColor+0xde>
    datasentflag = 0;
 800192e:	4b03      	ldr	r3, [pc, #12]	@ (800193c <setColor+0xf4>)
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
}
 8001934:	bf00      	nop
 8001936:	3720      	adds	r7, #32
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}
 800193c:	200001b8 	.word	0x200001b8

08001940 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001940:	b580      	push	{r7, lr}
 8001942:	b088      	sub	sp, #32
 8001944:	af00      	add	r7, sp, #0
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	60b9      	str	r1, [r7, #8]
 800194a:	607a      	str	r2, [r7, #4]
 800194c:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 800194e:	2300      	movs	r3, #0
 8001950:	61fb      	str	r3, [r7, #28]
 8001952:	e013      	b.n	800197c <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8001954:	69fb      	ldr	r3, [r7, #28]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	4413      	add	r3, r2
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3301      	adds	r3, #1
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	2200      	movs	r2, #0
 8001968:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 800196a:	69fb      	ldr	r3, [r7, #28]
 800196c:	3302      	adds	r3, #2
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	4413      	add	r3, r2
 8001972:	22ff      	movs	r2, #255	@ 0xff
 8001974:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3303      	adds	r3, #3
 800197a:	61fb      	str	r3, [r7, #28]
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	2b2f      	cmp	r3, #47	@ 0x2f
 8001980:	dde8      	ble.n	8001954 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
 8001986:	e02a      	b.n	80019de <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8001988:	2300      	movs	r3, #0
 800198a:	617b      	str	r3, [r7, #20]
 800198c:	e021      	b.n	80019d2 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 800198e:	69bb      	ldr	r3, [r7, #24]
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	4413      	add	r3, r2
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	461a      	mov	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	fa02 f303 	lsl.w	r3, r2, r3
 800199e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80019a6:	69bb      	ldr	r3, [r7, #24]
 80019a8:	00da      	lsls	r2, r3, #3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4413      	add	r3, r2
 80019ae:	005b      	lsls	r3, r3, #1
 80019b0:	683a      	ldr	r2, [r7, #0]
 80019b2:	4413      	add	r3, r2
 80019b4:	2246      	movs	r2, #70	@ 0x46
 80019b6:	801a      	strh	r2, [r3, #0]
 80019b8:	e008      	b.n	80019cc <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	00da      	lsls	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	2223      	movs	r2, #35	@ 0x23
 80019ca:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	3301      	adds	r3, #1
 80019d0:	617b      	str	r3, [r7, #20]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2b07      	cmp	r3, #7
 80019d6:	ddda      	ble.n	800198e <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	3301      	adds	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	2b2f      	cmp	r3, #47	@ 0x2f
 80019e2:	ddd1      	ble.n	8001988 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019e4:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019e8:	613b      	str	r3, [r7, #16]
 80019ea:	e008      	b.n	80019fe <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	683a      	ldr	r2, [r7, #0]
 80019f2:	4413      	add	r3, r2
 80019f4:	2200      	movs	r2, #0
 80019f6:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	3301      	adds	r3, #1
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	f240 2215 	movw	r2, #533	@ 0x215
 8001a04:	4293      	cmp	r3, r2
 8001a06:	ddf1      	ble.n	80019ec <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a08:	f240 2316 	movw	r3, #534	@ 0x216
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	68b9      	ldr	r1, [r7, #8]
 8001a10:	68f8      	ldr	r0, [r7, #12]
 8001a12:	f006 fa2b 	bl	8007e6c <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a16:	bf00      	nop
 8001a18:	4b06      	ldr	r3, [pc, #24]	@ (8001a34 <shiftLightsInit+0xf4>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0fb      	beq.n	8001a18 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a20:	4b04      	ldr	r3, [pc, #16]	@ (8001a34 <shiftLightsInit+0xf4>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a26:	2300      	movs	r3, #0
 8001a28:	603b      	str	r3, [r7, #0]
}
 8001a2a:	bf00      	nop
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	200001b8 	.word	0x200001b8

08001a38 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a40:	2100      	movs	r1, #0
 8001a42:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a44:	f006 fbc2 	bl	80081cc <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a48:	4b04      	ldr	r3, [pc, #16]	@ (8001a5c <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	601a      	str	r2, [r3, #0]
}
 8001a4e:	bf00      	nop
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200002d4 	.word	0x200002d4
 8001a5c:	200001b8 	.word	0x200001b8

08001a60 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	@ 0x28
 8001a64:	af04      	add	r7, sp, #16
 8001a66:	60f8      	str	r0, [r7, #12]
 8001a68:	60b9      	str	r1, [r7, #8]
 8001a6a:	607a      	str	r2, [r7, #4]
 8001a6c:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a6e:	6a3b      	ldr	r3, [r7, #32]
 8001a70:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001a74:	4293      	cmp	r3, r2
 8001a76:	dd06      	ble.n	8001a86 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	68f8      	ldr	r0, [r7, #12]
 8001a80:	f000 f8b6 	bl	8001bf0 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001a84:	e02a      	b.n	8001adc <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001a86:	2302      	movs	r3, #2
 8001a88:	617b      	str	r3, [r7, #20]
 8001a8a:	e024      	b.n	8001ad6 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001a92:	3b02      	subs	r3, #2
 8001a94:	009b      	lsls	r3, r3, #2
 8001a96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a98:	4413      	add	r3, r2
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6a3a      	ldr	r2, [r7, #32]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	db08      	blt.n	8001ab4 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	9300      	str	r3, [sp, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	68b9      	ldr	r1, [r7, #8]
 8001aac:	68f8      	ldr	r0, [r7, #12]
 8001aae:	f000 f819 	bl	8001ae4 <lightOn>
 8001ab2:	e00d      	b.n	8001ad0 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001ab4:	697b      	ldr	r3, [r7, #20]
 8001ab6:	9303      	str	r3, [sp, #12]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	9302      	str	r3, [sp, #8]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	9301      	str	r3, [sp, #4]
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	9300      	str	r3, [sp, #0]
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	68f8      	ldr	r0, [r7, #12]
 8001acc:	f7ff febc 	bl	8001848 <setColor>
	for (int i = 2; i < 14; i++) {
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	617b      	str	r3, [r7, #20]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	2b0d      	cmp	r3, #13
 8001ada:	ddd7      	ble.n	8001a8c <UpdateShiftLights+0x2c>
}
 8001adc:	bf00      	nop
 8001ade:	3718      	adds	r7, #24
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b088      	sub	sp, #32
 8001ae8:	af04      	add	r7, sp, #16
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
 8001af0:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b0d      	cmp	r3, #13
 8001af6:	d140      	bne.n	8001b7a <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	68b9      	ldr	r1, [r7, #8]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7ff ff1e 	bl	8001940 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b04:	2300      	movs	r3, #0
 8001b06:	9303      	str	r3, [sp, #12]
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	9302      	str	r3, [sp, #8]
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	9301      	str	r3, [sp, #4]
 8001b10:	2300      	movs	r3, #0
 8001b12:	9300      	str	r3, [sp, #0]
 8001b14:	2300      	movs	r3, #0
 8001b16:	2200      	movs	r2, #0
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4834      	ldr	r0, [pc, #208]	@ (8001bec <lightOn+0x108>)
 8001b1c:	f7ff fe94 	bl	8001848 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b20:	2301      	movs	r3, #1
 8001b22:	9303      	str	r3, [sp, #12]
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	9302      	str	r3, [sp, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	9301      	str	r3, [sp, #4]
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	9300      	str	r3, [sp, #0]
 8001b30:	2300      	movs	r3, #0
 8001b32:	2200      	movs	r2, #0
 8001b34:	2100      	movs	r1, #0
 8001b36:	482d      	ldr	r0, [pc, #180]	@ (8001bec <lightOn+0x108>)
 8001b38:	f7ff fe86 	bl	8001848 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b3c:	230e      	movs	r3, #14
 8001b3e:	9303      	str	r3, [sp, #12]
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	9302      	str	r3, [sp, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	9301      	str	r3, [sp, #4]
 8001b48:	2300      	movs	r3, #0
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	4826      	ldr	r0, [pc, #152]	@ (8001bec <lightOn+0x108>)
 8001b54:	f7ff fe78 	bl	8001848 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b58:	230f      	movs	r3, #15
 8001b5a:	9303      	str	r3, [sp, #12]
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	9302      	str	r3, [sp, #8]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	9301      	str	r3, [sp, #4]
 8001b64:	2300      	movs	r3, #0
 8001b66:	9300      	str	r3, [sp, #0]
 8001b68:	2300      	movs	r3, #0
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	2100      	movs	r1, #0
 8001b6e:	481f      	ldr	r0, [pc, #124]	@ (8001bec <lightOn+0x108>)
 8001b70:	f7ff fe6a 	bl	8001848 <setColor>
		HAL_Delay(5);
 8001b74:	2005      	movs	r0, #5
 8001b76:	f002 fcb7 	bl	80044e8 <HAL_Delay>
	}
	if (index < 6) {
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	2b05      	cmp	r3, #5
 8001b7e:	dc0e      	bgt.n	8001b9e <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001b80:	69bb      	ldr	r3, [r7, #24]
 8001b82:	9303      	str	r3, [sp, #12]
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	9302      	str	r3, [sp, #8]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	9301      	str	r3, [sp, #4]
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	9300      	str	r3, [sp, #0]
 8001b90:	2300      	movs	r3, #0
 8001b92:	22ff      	movs	r2, #255	@ 0xff
 8001b94:	68b9      	ldr	r1, [r7, #8]
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f7ff fe56 	bl	8001848 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001b9c:	e022      	b.n	8001be4 <lightOn+0x100>
	} else if (index < 10) {
 8001b9e:	69bb      	ldr	r3, [r7, #24]
 8001ba0:	2b09      	cmp	r3, #9
 8001ba2:	dc0e      	bgt.n	8001bc2 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	9303      	str	r3, [sp, #12]
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	9302      	str	r3, [sp, #8]
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	9301      	str	r3, [sp, #4]
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	9300      	str	r3, [sp, #0]
 8001bb4:	23ff      	movs	r3, #255	@ 0xff
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f7ff fe44 	bl	8001848 <setColor>
}
 8001bc0:	e010      	b.n	8001be4 <lightOn+0x100>
	} else if (index < 14){
 8001bc2:	69bb      	ldr	r3, [r7, #24]
 8001bc4:	2b0d      	cmp	r3, #13
 8001bc6:	dc0d      	bgt.n	8001be4 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001bc8:	69bb      	ldr	r3, [r7, #24]
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	23ff      	movs	r3, #255	@ 0xff
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	68b9      	ldr	r1, [r7, #8]
 8001bde:	68f8      	ldr	r0, [r7, #12]
 8001be0:	f7ff fe32 	bl	8001848 <setColor>
}
 8001be4:	bf00      	nop
 8001be6:	3710      	adds	r7, #16
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	200002d4 	.word	0x200002d4

08001bf0 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b08c      	sub	sp, #48	@ 0x30
 8001bf4:	af04      	add	r7, sp, #16
 8001bf6:	60f8      	str	r0, [r7, #12]
 8001bf8:	60b9      	str	r1, [r7, #8]
 8001bfa:	607a      	str	r2, [r7, #4]
 8001bfc:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001bfe:	2307      	movs	r3, #7
 8001c00:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c02:	2300      	movs	r3, #0
 8001c04:	61fb      	str	r3, [r7, #28]
 8001c06:	e026      	b.n	8001c56 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c08:	697a      	ldr	r2, [r7, #20]
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	9303      	str	r3, [sp, #12]
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	9302      	str	r3, [sp, #8]
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	2300      	movs	r3, #0
 8001c1a:	9300      	str	r3, [sp, #0]
 8001c1c:	23ff      	movs	r3, #255	@ 0xff
 8001c1e:	2200      	movs	r2, #0
 8001c20:	68b9      	ldr	r1, [r7, #8]
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f7ff fe10 	bl	8001848 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	9303      	str	r3, [sp, #12]
 8001c32:	683b      	ldr	r3, [r7, #0]
 8001c34:	9302      	str	r3, [sp, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	9301      	str	r3, [sp, #4]
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	9300      	str	r3, [sp, #0]
 8001c3e:	23ff      	movs	r3, #255	@ 0xff
 8001c40:	2200      	movs	r2, #0
 8001c42:	68b9      	ldr	r1, [r7, #8]
 8001c44:	68f8      	ldr	r0, [r7, #12]
 8001c46:	f7ff fdff 	bl	8001848 <setColor>
		HAL_Delay(20);
 8001c4a:	2014      	movs	r0, #20
 8001c4c:	f002 fc4c 	bl	80044e8 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c50:	69fb      	ldr	r3, [r7, #28]
 8001c52:	3301      	adds	r3, #1
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	2b05      	cmp	r3, #5
 8001c5a:	ddd5      	ble.n	8001c08 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	61bb      	str	r3, [r7, #24]
 8001c60:	e026      	b.n	8001cb0 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c62:	697a      	ldr	r2, [r7, #20]
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	9303      	str	r3, [sp, #12]
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	9302      	str	r3, [sp, #8]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	9301      	str	r3, [sp, #4]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9300      	str	r3, [sp, #0]
 8001c76:	2300      	movs	r3, #0
 8001c78:	2200      	movs	r2, #0
 8001c7a:	68b9      	ldr	r1, [r7, #8]
 8001c7c:	68f8      	ldr	r0, [r7, #12]
 8001c7e:	f7ff fde3 	bl	8001848 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	69bb      	ldr	r3, [r7, #24]
 8001c86:	4413      	add	r3, r2
 8001c88:	3301      	adds	r3, #1
 8001c8a:	9303      	str	r3, [sp, #12]
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	9302      	str	r3, [sp, #8]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	9301      	str	r3, [sp, #4]
 8001c94:	2300      	movs	r3, #0
 8001c96:	9300      	str	r3, [sp, #0]
 8001c98:	2300      	movs	r3, #0
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	68b9      	ldr	r1, [r7, #8]
 8001c9e:	68f8      	ldr	r0, [r7, #12]
 8001ca0:	f7ff fdd2 	bl	8001848 <setColor>
		HAL_Delay(20);
 8001ca4:	2014      	movs	r0, #20
 8001ca6:	f002 fc1f 	bl	80044e8 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	3301      	adds	r3, #1
 8001cae:	61bb      	str	r3, [r7, #24]
 8001cb0:	69bb      	ldr	r3, [r7, #24]
 8001cb2:	2b05      	cmp	r3, #5
 8001cb4:	ddd5      	ble.n	8001c62 <startUp+0x72>
	}
}
 8001cb6:	bf00      	nop
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}

08001cc0 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cc4:	4b18      	ldr	r3, [pc, #96]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cc6:	4a19      	ldr	r2, [pc, #100]	@ (8001d2c <MX_SPI1_Init+0x6c>)
 8001cc8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cca:	4b17      	ldr	r3, [pc, #92]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001ccc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001cd0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cd2:	4b15      	ldr	r3, [pc, #84]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cd8:	4b13      	ldr	r3, [pc, #76]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cda:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cde:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ce0:	4b11      	ldr	r3, [pc, #68]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ce6:	4b10      	ldr	r3, [pc, #64]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cec:	4b0e      	ldr	r3, [pc, #56]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001cf2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cf6:	2208      	movs	r2, #8
 8001cf8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d00:	4b09      	ldr	r3, [pc, #36]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d06:	4b08      	ldr	r3, [pc, #32]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d0c:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001d0e:	220a      	movs	r2, #10
 8001d10:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d12:	4805      	ldr	r0, [pc, #20]	@ (8001d28 <MX_SPI1_Init+0x68>)
 8001d14:	f005 f8e8 	bl	8006ee8 <HAL_SPI_Init>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d001      	beq.n	8001d22 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d1e:	f7ff fd51 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d22:	bf00      	nop
 8001d24:	bd80      	pop	{r7, pc}
 8001d26:	bf00      	nop
 8001d28:	200001bc 	.word	0x200001bc
 8001d2c:	40013000 	.word	0x40013000

08001d30 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d34:	4b17      	ldr	r3, [pc, #92]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d36:	4a18      	ldr	r2, [pc, #96]	@ (8001d98 <MX_SPI2_Init+0x68>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b16      	ldr	r3, [pc, #88]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b14      	ldr	r3, [pc, #80]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d48:	4b12      	ldr	r3, [pc, #72]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d4e:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d54:	4b0f      	ldr	r3, [pc, #60]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d60:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d62:	4b0c      	ldr	r3, [pc, #48]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d64:	2220      	movs	r2, #32
 8001d66:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d68:	4b0a      	ldr	r3, [pc, #40]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d74:	4b07      	ldr	r3, [pc, #28]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d7a:	4b06      	ldr	r3, [pc, #24]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d7c:	220a      	movs	r2, #10
 8001d7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d80:	4804      	ldr	r0, [pc, #16]	@ (8001d94 <MX_SPI2_Init+0x64>)
 8001d82:	f005 f8b1 	bl	8006ee8 <HAL_SPI_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001d8c:	f7ff fd1a 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d90:	bf00      	nop
 8001d92:	bd80      	pop	{r7, pc}
 8001d94:	20000214 	.word	0x20000214
 8001d98:	40003800 	.word	0x40003800

08001d9c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b08c      	sub	sp, #48	@ 0x30
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 031c 	add.w	r3, r7, #28
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee4 <HAL_SPI_MspInit+0x148>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d15c      	bne.n	8001e78 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	61bb      	str	r3, [r7, #24]
 8001dc2:	4b49      	ldr	r3, [pc, #292]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dc6:	4a48      	ldr	r2, [pc, #288]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001dc8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001dcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dce:	4b46      	ldr	r3, [pc, #280]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd6:	61bb      	str	r3, [r7, #24]
 8001dd8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
 8001dde:	4b42      	ldr	r3, [pc, #264]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de2:	4a41      	ldr	r2, [pc, #260]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001de4:	f043 0301 	orr.w	r3, r3, #1
 8001de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dea:	4b3f      	ldr	r3, [pc, #252]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dee:	f003 0301 	and.w	r3, r3, #1
 8001df2:	617b      	str	r3, [r7, #20]
 8001df4:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001df6:	23a0      	movs	r3, #160	@ 0xa0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dfa:	2302      	movs	r3, #2
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e02:	2303      	movs	r3, #3
 8001e04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e06:	2305      	movs	r3, #5
 8001e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e0a:	f107 031c 	add.w	r3, r7, #28
 8001e0e:	4619      	mov	r1, r3
 8001e10:	4836      	ldr	r0, [pc, #216]	@ (8001eec <HAL_SPI_MspInit+0x150>)
 8001e12:	f003 f831 	bl	8004e78 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e16:	4b36      	ldr	r3, [pc, #216]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e18:	4a36      	ldr	r2, [pc, #216]	@ (8001ef4 <HAL_SPI_MspInit+0x158>)
 8001e1a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e1c:	4b34      	ldr	r3, [pc, #208]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e1e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e22:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e24:	4b32      	ldr	r3, [pc, #200]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e26:	2240      	movs	r2, #64	@ 0x40
 8001e28:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e2a:	4b31      	ldr	r3, [pc, #196]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e30:	4b2f      	ldr	r3, [pc, #188]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e32:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e36:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e38:	4b2d      	ldr	r3, [pc, #180]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e3e:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e40:	4b2b      	ldr	r3, [pc, #172]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e42:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e46:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e48:	4b29      	ldr	r3, [pc, #164]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e54:	4b26      	ldr	r3, [pc, #152]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e5a:	4825      	ldr	r0, [pc, #148]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e5c:	f002 fc7a 	bl	8004754 <HAL_DMA_Init>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e66:	f7ff fcad 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e6e:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e70:	4a1f      	ldr	r2, [pc, #124]	@ (8001ef0 <HAL_SPI_MspInit+0x154>)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e76:	e031      	b.n	8001edc <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ef8 <HAL_SPI_MspInit+0x15c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d12c      	bne.n	8001edc <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e82:	2300      	movs	r3, #0
 8001e84:	613b      	str	r3, [r7, #16]
 8001e86:	4b18      	ldr	r3, [pc, #96]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e8a:	4a17      	ldr	r2, [pc, #92]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001e8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e90:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e92:	4b15      	ldr	r3, [pc, #84]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
 8001ea2:	4b11      	ldr	r3, [pc, #68]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ea6:	4a10      	ldr	r2, [pc, #64]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001ea8:	f043 0302 	orr.w	r3, r3, #2
 8001eac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001eae:	4b0e      	ldr	r3, [pc, #56]	@ (8001ee8 <HAL_SPI_MspInit+0x14c>)
 8001eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001eba:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ebe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ecc:	2305      	movs	r3, #5
 8001ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4809      	ldr	r0, [pc, #36]	@ (8001efc <HAL_SPI_MspInit+0x160>)
 8001ed8:	f002 ffce 	bl	8004e78 <HAL_GPIO_Init>
}
 8001edc:	bf00      	nop
 8001ede:	3730      	adds	r7, #48	@ 0x30
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40013000 	.word	0x40013000
 8001ee8:	40023800 	.word	0x40023800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	2000026c 	.word	0x2000026c
 8001ef4:	40026458 	.word	0x40026458
 8001ef8:	40003800 	.word	0x40003800
 8001efc:	40020400 	.word	0x40020400

08001f00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	607b      	str	r3, [r7, #4]
 8001f0a:	4b10      	ldr	r3, [pc, #64]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f0e:	4a0f      	ldr	r2, [pc, #60]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f10:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f14:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f16:	4b0d      	ldr	r3, [pc, #52]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f1a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f1e:	607b      	str	r3, [r7, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	603b      	str	r3, [r7, #0]
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2a:	4a08      	ldr	r2, [pc, #32]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_MspInit+0x4c>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f3a:	603b      	str	r3, [r7, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	370c      	adds	r7, #12
 8001f42:	46bd      	mov	sp, r7
 8001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f48:	4770      	bx	lr
 8001f4a:	bf00      	nop
 8001f4c:	40023800 	.word	0x40023800

08001f50 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f54:	4b0e      	ldr	r3, [pc, #56]	@ (8001f90 <SDTimer_Handler+0x40>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d006      	beq.n	8001f6c <SDTimer_Handler+0x1c>
    Timer1--;
 8001f5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001f90 <SDTimer_Handler+0x40>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	b29b      	uxth	r3, r3
 8001f64:	3b01      	subs	r3, #1
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	4b09      	ldr	r3, [pc, #36]	@ (8001f90 <SDTimer_Handler+0x40>)
 8001f6a:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f6c:	4b09      	ldr	r3, [pc, #36]	@ (8001f94 <SDTimer_Handler+0x44>)
 8001f6e:	881b      	ldrh	r3, [r3, #0]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d006      	beq.n	8001f84 <SDTimer_Handler+0x34>
    Timer2--;
 8001f76:	4b07      	ldr	r3, [pc, #28]	@ (8001f94 <SDTimer_Handler+0x44>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	b29b      	uxth	r3, r3
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	b29a      	uxth	r2, r3
 8001f80:	4b04      	ldr	r3, [pc, #16]	@ (8001f94 <SDTimer_Handler+0x44>)
 8001f82:	801a      	strh	r2, [r3, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	200001a0 	.word	0x200001a0
 8001f94:	200001a2 	.word	0x200001a2

08001f98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f9c:	bf00      	nop
 8001f9e:	e7fd      	b.n	8001f9c <NMI_Handler+0x4>

08001fa0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fa4:	bf00      	nop
 8001fa6:	e7fd      	b.n	8001fa4 <HardFault_Handler+0x4>

08001fa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fac:	bf00      	nop
 8001fae:	e7fd      	b.n	8001fac <MemManage_Handler+0x4>

08001fb0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fb4:	bf00      	nop
 8001fb6:	e7fd      	b.n	8001fb4 <BusFault_Handler+0x4>

08001fb8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <UsageFault_Handler+0x4>

08001fc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fe0:	bf00      	nop
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr
	...

08001fec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001ff0:	4b0a      	ldr	r3, [pc, #40]	@ (800201c <SysTick_Handler+0x30>)
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	3301      	adds	r3, #1
 8001ff8:	b2da      	uxtb	r2, r3
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <SysTick_Handler+0x30>)
 8001ffc:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001ffe:	4b07      	ldr	r3, [pc, #28]	@ (800201c <SysTick_Handler+0x30>)
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	b2db      	uxtb	r3, r3
 8002004:	2b09      	cmp	r3, #9
 8002006:	d904      	bls.n	8002012 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002008:	4b04      	ldr	r3, [pc, #16]	@ (800201c <SysTick_Handler+0x30>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800200e:	f7ff ff9f 	bl	8001f50 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002012:	f002 fa49 	bl	80044a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200002cc 	.word	0x200002cc

08002020 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002024:	4802      	ldr	r0, [pc, #8]	@ (8002030 <DMA1_Stream0_IRQHandler+0x10>)
 8002026:	f002 fcbd 	bl	80049a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	2000031c 	.word	0x2000031c

08002034 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8002038:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800203c:	f003 f8ba 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002040:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002044:	f003 f8b6 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002048:	bf00      	nop
 800204a:	bd80      	pop	{r7, pc}

0800204c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002050:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002054:	f003 f8ae 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8002058:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 800205c:	f003 f8aa 	bl	80051b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002060:	bf00      	nop
 8002062:	bd80      	pop	{r7, pc}

08002064 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8002068:	4802      	ldr	r0, [pc, #8]	@ (8002074 <DMA2_Stream3_IRQHandler+0x10>)
 800206a:	f002 fc9b 	bl	80049a4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	2000026c 	.word	0x2000026c

08002078 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <OTG_FS_IRQHandler+0x10>)
 800207e:	f003 f9f5 	bl	800546c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20001108 	.word	0x20001108

0800208c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return 1;
 8002090:	2301      	movs	r3, #1
}
 8002092:	4618      	mov	r0, r3
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_kill>:

int _kill(int pid, int sig)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020a6:	f00d fb25 	bl	800f6f4 <__errno>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2216      	movs	r2, #22
 80020ae:	601a      	str	r2, [r3, #0]
  return -1;
 80020b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3708      	adds	r7, #8
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <_exit>:

void _exit (int status)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b082      	sub	sp, #8
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff ffe7 	bl	800209c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020ce:	bf00      	nop
 80020d0:	e7fd      	b.n	80020ce <_exit+0x12>
	...

080020d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b086      	sub	sp, #24
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020dc:	4a14      	ldr	r2, [pc, #80]	@ (8002130 <_sbrk+0x5c>)
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <_sbrk+0x60>)
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e8:	4b13      	ldr	r3, [pc, #76]	@ (8002138 <_sbrk+0x64>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d102      	bne.n	80020f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020f0:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <_sbrk+0x64>)
 80020f2:	4a12      	ldr	r2, [pc, #72]	@ (800213c <_sbrk+0x68>)
 80020f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020f6:	4b10      	ldr	r3, [pc, #64]	@ (8002138 <_sbrk+0x64>)
 80020f8:	681a      	ldr	r2, [r3, #0]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	4413      	add	r3, r2
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d207      	bcs.n	8002114 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002104:	f00d faf6 	bl	800f6f4 <__errno>
 8002108:	4603      	mov	r3, r0
 800210a:	220c      	movs	r2, #12
 800210c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800210e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002112:	e009      	b.n	8002128 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002114:	4b08      	ldr	r3, [pc, #32]	@ (8002138 <_sbrk+0x64>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800211a:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <_sbrk+0x64>)
 800211c:	681a      	ldr	r2, [r3, #0]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	4a05      	ldr	r2, [pc, #20]	@ (8002138 <_sbrk+0x64>)
 8002124:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002126:	68fb      	ldr	r3, [r7, #12]
}
 8002128:	4618      	mov	r0, r3
 800212a:	3718      	adds	r7, #24
 800212c:	46bd      	mov	sp, r7
 800212e:	bd80      	pop	{r7, pc}
 8002130:	20010000 	.word	0x20010000
 8002134:	00000400 	.word	0x00000400
 8002138:	200002d0 	.word	0x200002d0
 800213c:	20001958 	.word	0x20001958

08002140 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002144:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <SystemInit+0x20>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800214a:	4a05      	ldr	r2, [pc, #20]	@ (8002160 <SystemInit+0x20>)
 800214c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002150:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002154:	bf00      	nop
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr
 800215e:	bf00      	nop
 8002160:	e000ed00 	.word	0xe000ed00

08002164 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b08e      	sub	sp, #56	@ 0x38
 8002168:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800216a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800216e:	2200      	movs	r2, #0
 8002170:	601a      	str	r2, [r3, #0]
 8002172:	605a      	str	r2, [r3, #4]
 8002174:	609a      	str	r2, [r3, #8]
 8002176:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002178:	f107 0320 	add.w	r3, r7, #32
 800217c:	2200      	movs	r2, #0
 800217e:	601a      	str	r2, [r3, #0]
 8002180:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002194:	4b2c      	ldr	r3, [pc, #176]	@ (8002248 <MX_TIM4_Init+0xe4>)
 8002196:	4a2d      	ldr	r2, [pc, #180]	@ (800224c <MX_TIM4_Init+0xe8>)
 8002198:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800219a:	4b2b      	ldr	r3, [pc, #172]	@ (8002248 <MX_TIM4_Init+0xe4>)
 800219c:	2200      	movs	r2, #0
 800219e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b29      	ldr	r3, [pc, #164]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80021a6:	4b28      	ldr	r3, [pc, #160]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021a8:	2269      	movs	r2, #105	@ 0x69
 80021aa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ac:	4b26      	ldr	r3, [pc, #152]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b2:	4b25      	ldr	r3, [pc, #148]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021b8:	4823      	ldr	r0, [pc, #140]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021ba:	f005 fdaf 	bl	8007d1c <HAL_TIM_Base_Init>
 80021be:	4603      	mov	r3, r0
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d001      	beq.n	80021c8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021c4:	f7ff fafe 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021ce:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d2:	4619      	mov	r1, r3
 80021d4:	481c      	ldr	r0, [pc, #112]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021d6:	f006 f981 	bl	80084dc <HAL_TIM_ConfigClockSource>
 80021da:	4603      	mov	r3, r0
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d001      	beq.n	80021e4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021e0:	f7ff faf0 	bl	80017c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021e4:	4818      	ldr	r0, [pc, #96]	@ (8002248 <MX_TIM4_Init+0xe4>)
 80021e6:	f005 fde8 	bl	8007dba <HAL_TIM_PWM_Init>
 80021ea:	4603      	mov	r3, r0
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d001      	beq.n	80021f4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80021f0:	f7ff fae8 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021f4:	2300      	movs	r3, #0
 80021f6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021f8:	2300      	movs	r3, #0
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80021fc:	f107 0320 	add.w	r3, r7, #32
 8002200:	4619      	mov	r1, r3
 8002202:	4811      	ldr	r0, [pc, #68]	@ (8002248 <MX_TIM4_Init+0xe4>)
 8002204:	f006 fdee 	bl	8008de4 <HAL_TIMEx_MasterConfigSynchronization>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800220e:	f7ff fad9 	bl	80017c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002212:	2360      	movs	r3, #96	@ 0x60
 8002214:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002216:	2300      	movs	r3, #0
 8002218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2200      	movs	r2, #0
 8002226:	4619      	mov	r1, r3
 8002228:	4807      	ldr	r0, [pc, #28]	@ (8002248 <MX_TIM4_Init+0xe4>)
 800222a:	f006 f895 	bl	8008358 <HAL_TIM_PWM_ConfigChannel>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002234:	f7ff fac6 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002238:	4803      	ldr	r0, [pc, #12]	@ (8002248 <MX_TIM4_Init+0xe4>)
 800223a:	f000 f85d 	bl	80022f8 <HAL_TIM_MspPostInit>

}
 800223e:	bf00      	nop
 8002240:	3738      	adds	r7, #56	@ 0x38
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	200002d4 	.word	0x200002d4
 800224c:	40000800 	.word	0x40000800

08002250 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a22      	ldr	r2, [pc, #136]	@ (80022e8 <HAL_TIM_Base_MspInit+0x98>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d13d      	bne.n	80022de <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b21      	ldr	r3, [pc, #132]	@ (80022ec <HAL_TIM_Base_MspInit+0x9c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a20      	ldr	r2, [pc, #128]	@ (80022ec <HAL_TIM_Base_MspInit+0x9c>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b1e      	ldr	r3, [pc, #120]	@ (80022ec <HAL_TIM_Base_MspInit+0x9c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f003 0304 	and.w	r3, r3, #4
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800227e:	4b1c      	ldr	r3, [pc, #112]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002280:	4a1c      	ldr	r2, [pc, #112]	@ (80022f4 <HAL_TIM_Base_MspInit+0xa4>)
 8002282:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002284:	4b1a      	ldr	r3, [pc, #104]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002286:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800228a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800228c:	4b18      	ldr	r3, [pc, #96]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 800228e:	2240      	movs	r2, #64	@ 0x40
 8002290:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002292:	4b17      	ldr	r3, [pc, #92]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002298:	4b15      	ldr	r3, [pc, #84]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 800229a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800229e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022a0:	4b13      	ldr	r3, [pc, #76]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022a6:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022a8:	4b11      	ldr	r3, [pc, #68]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022aa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ae:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022b0:	4b0f      	ldr	r3, [pc, #60]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022b2:	2200      	movs	r2, #0
 80022b4:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022b6:	4b0e      	ldr	r3, [pc, #56]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022bc:	4b0c      	ldr	r3, [pc, #48]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022c2:	480b      	ldr	r0, [pc, #44]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022c4:	f002 fa46 	bl	8004754 <HAL_DMA_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022ce:	f7ff fa79 	bl	80017c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a06      	ldr	r2, [pc, #24]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80022d8:	4a05      	ldr	r2, [pc, #20]	@ (80022f0 <HAL_TIM_Base_MspInit+0xa0>)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022de:	bf00      	nop
 80022e0:	3710      	adds	r7, #16
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40000800 	.word	0x40000800
 80022ec:	40023800 	.word	0x40023800
 80022f0:	2000031c 	.word	0x2000031c
 80022f4:	40026010 	.word	0x40026010

080022f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b088      	sub	sp, #32
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002300:	f107 030c 	add.w	r3, r7, #12
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	605a      	str	r2, [r3, #4]
 800230a:	609a      	str	r2, [r3, #8]
 800230c:	60da      	str	r2, [r3, #12]
 800230e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a12      	ldr	r2, [pc, #72]	@ (8002360 <HAL_TIM_MspPostInit+0x68>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d11d      	bne.n	8002356 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b11      	ldr	r3, [pc, #68]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002322:	4a10      	ldr	r2, [pc, #64]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	@ 0x30
 800232a:	4b0e      	ldr	r3, [pc, #56]	@ (8002364 <HAL_TIM_MspPostInit+0x6c>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002336:	2340      	movs	r3, #64	@ 0x40
 8002338:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800233a:	2302      	movs	r3, #2
 800233c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800233e:	2300      	movs	r3, #0
 8002340:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002346:	2302      	movs	r3, #2
 8002348:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800234a:	f107 030c 	add.w	r3, r7, #12
 800234e:	4619      	mov	r1, r3
 8002350:	4805      	ldr	r0, [pc, #20]	@ (8002368 <HAL_TIM_MspPostInit+0x70>)
 8002352:	f002 fd91 	bl	8004e78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002356:	bf00      	nop
 8002358:	3720      	adds	r7, #32
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}
 800235e:	bf00      	nop
 8002360:	40000800 	.word	0x40000800
 8002364:	40023800 	.word	0x40023800
 8002368:	40020400 	.word	0x40020400

0800236c <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 800236c:	b40f      	push	{r0, r1, r2, r3}
 800236e:	b580      	push	{r7, lr}
 8002370:	b0a2      	sub	sp, #136	@ 0x88
 8002372:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8002374:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8002378:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800237a:	f107 0008 	add.w	r0, r7, #8
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002384:	2180      	movs	r1, #128	@ 0x80
 8002386:	f00d f925 	bl	800f5d4 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800238a:	f107 0308 	add.w	r3, r7, #8
 800238e:	4618      	mov	r0, r3
 8002390:	f7fd ff26 	bl	80001e0 <strlen>
 8002394:	4603      	mov	r3, r0
 8002396:	b29a      	uxth	r2, r3
 8002398:	f107 0308 	add.w	r3, r7, #8
 800239c:	4611      	mov	r1, r2
 800239e:	4618      	mov	r0, r3
 80023a0:	f00c fb58 	bl	800ea54 <CDC_Transmit_FS>
}
 80023a4:	bf00      	nop
 80023a6:	3788      	adds	r7, #136	@ 0x88
 80023a8:	46bd      	mov	sp, r7
 80023aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023ae:	b004      	add	sp, #16
 80023b0:	4770      	bx	lr
	...

080023b4 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	4613      	mov	r3, r2
 80023c0:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80023c2:	4b06      	ldr	r3, [pc, #24]	@ (80023dc <transmitdma+0x28>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80023c8:	88fb      	ldrh	r3, [r7, #6]
 80023ca:	461a      	mov	r2, r3
 80023cc:	68b9      	ldr	r1, [r7, #8]
 80023ce:	68f8      	ldr	r0, [r7, #12]
 80023d0:	f005 fa1a 	bl	8007808 <HAL_SPI_Transmit_DMA>
}
 80023d4:	bf00      	nop
 80023d6:	3710      	adds	r7, #16
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	2000037c 	.word	0x2000037c

080023e0 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023e0:	b480      	push	{r7}
 80023e2:	b083      	sub	sp, #12
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a05      	ldr	r2, [pc, #20]	@ (8002404 <HAL_SPI_TxCpltCallback+0x24>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d102      	bne.n	80023f8 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 80023f2:	4b05      	ldr	r3, [pc, #20]	@ (8002408 <HAL_SPI_TxCpltCallback+0x28>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
	}
}
 80023f8:	bf00      	nop
 80023fa:	370c      	adds	r7, #12
 80023fc:	46bd      	mov	sp, r7
 80023fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002402:	4770      	bx	lr
 8002404:	40013000 	.word	0x40013000
 8002408:	2000037c 	.word	0x2000037c

0800240c <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 800240c:	b580      	push	{r7, lr}
 800240e:	b084      	sub	sp, #16
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	4613      	mov	r3, r2
 8002418:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800241a:	79fb      	ldrb	r3, [r7, #7]
 800241c:	461a      	mov	r2, r3
 800241e:	68b9      	ldr	r1, [r7, #8]
 8002420:	68f8      	ldr	r0, [r7, #12]
 8002422:	f000 f805 	bl	8002430 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	4618      	mov	r0, r3
 800242a:	3710      	adds	r7, #16
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	4613      	mov	r3, r2
 800243c:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	68ba      	ldr	r2, [r7, #8]
 8002442:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	79fa      	ldrb	r2, [r7, #7]
 8002448:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2201      	movs	r2, #1
 800244e:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	2200      	movs	r2, #0
 8002454:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002456:	2300      	movs	r3, #0
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	e014      	b.n	8002486 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	4413      	add	r3, r2
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4618      	mov	r0, r3
 8002468:	f000 f9da 	bl	8002820 <_ZN13DisplayObject11getpriorityEv>
 800246c:	4603      	mov	r3, r0
 800246e:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	799b      	ldrb	r3, [r3, #6]
 8002474:	7cfa      	ldrb	r2, [r7, #19]
 8002476:	429a      	cmp	r2, r3
 8002478:	d902      	bls.n	8002480 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	7cfa      	ldrb	r2, [r7, #19]
 800247e:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002480:	697b      	ldr	r3, [r7, #20]
 8002482:	3301      	adds	r3, #1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	79fb      	ldrb	r3, [r7, #7]
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	429a      	cmp	r2, r3
 800248c:	dbe6      	blt.n	800245c <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 800248e:	bf00      	nop
 8002490:	bf00      	nop
 8002492:	3718      	adds	r7, #24
 8002494:	46bd      	mov	sp, r7
 8002496:	bd80      	pop	{r7, pc}

08002498 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 8002498:	b590      	push	{r4, r7, lr}
 800249a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024a6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024aa:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80024ac:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024b0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	795b      	ldrb	r3, [r3, #5]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	f000 813e 	beq.w	800273a <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80024be:	f240 133f 	movw	r3, #319	@ 0x13f
 80024c2:	f240 12df 	movw	r2, #479	@ 0x1df
 80024c6:	2100      	movs	r1, #0
 80024c8:	2000      	movs	r0, #0
 80024ca:	f000 fca8 	bl	8002e1e <modifySpace>
		startCommand(WRITE_COMMAND);
 80024ce:	202c      	movs	r0, #44	@ 0x2c
 80024d0:	f000 fbb2 	bl	8002c38 <startCommand>
		dataOrRegister(1);
 80024d4:	2001      	movs	r0, #1
 80024d6:	f000 fb6d 	bl	8002bb4 <dataOrRegister>
		uint8_t anychanges = 0;
 80024da:	2300      	movs	r3, #0
 80024dc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024e0:	f102 021f 	add.w	r2, r2, #31
 80024e4:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024e6:	2300      	movs	r3, #0
 80024e8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024ec:	f102 0218 	add.w	r2, r2, #24
 80024f0:	6013      	str	r3, [r2, #0]
 80024f2:	e028      	b.n	8002546 <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 80024f4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024f8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681a      	ldr	r2, [r3, #0]
 8002500:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002504:	f103 0318 	add.w	r3, r3, #24
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	009b      	lsls	r3, r3, #2
 800250c:	4413      	add	r3, r2
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f000 f9a0 	bl	8002856 <_ZN13DisplayObject13getChangeFlagEv>
 8002516:	4603      	mov	r3, r0
 8002518:	461a      	mov	r2, r3
 800251a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800251e:	f103 031f 	add.w	r3, r3, #31
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	4413      	add	r3, r2
 8002526:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800252a:	f102 021f 	add.w	r2, r2, #31
 800252e:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002530:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002534:	f103 0318 	add.w	r3, r3, #24
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	3301      	adds	r3, #1
 800253c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002540:	f102 0218 	add.w	r2, r2, #24
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800254a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	791b      	ldrb	r3, [r3, #4]
 8002552:	461a      	mov	r2, r3
 8002554:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002558:	f103 0318 	add.w	r3, r3, #24
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4293      	cmp	r3, r2
 8002560:	dbc8      	blt.n	80024f4 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 8002562:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002566:	f103 031f 	add.w	r3, r3, #31
 800256a:	781b      	ldrb	r3, [r3, #0]
 800256c:	2b00      	cmp	r3, #0
 800256e:	f000 80ec 	beq.w	800274a <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002572:	2300      	movs	r3, #0
 8002574:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002578:	f102 0214 	add.w	r2, r2, #20
 800257c:	6013      	str	r3, [r2, #0]
 800257e:	e0d2      	b.n	8002726 <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8002580:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002584:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8002588:	4618      	mov	r0, r3
 800258a:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 800258e:	461a      	mov	r2, r3
 8002590:	2100      	movs	r1, #0
 8002592:	f00d f82d 	bl	800f5f0 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 8002596:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800259a:	f103 0314 	add.w	r3, r3, #20
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	4613      	mov	r3, r2
 80025a2:	009b      	lsls	r3, r3, #2
 80025a4:	4413      	add	r3, r2
 80025a6:	011b      	lsls	r3, r3, #4
 80025a8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025ac:	f102 0208 	add.w	r2, r2, #8
 80025b0:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025b8:	f102 0210 	add.w	r2, r2, #16
 80025bc:	6013      	str	r3, [r2, #0]
 80025be:	e084      	b.n	80026ca <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025c6:	f102 020c 	add.w	r2, r2, #12
 80025ca:	6013      	str	r3, [r2, #0]
 80025cc:	e064      	b.n	8002698 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80025ce:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025d2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025de:	f103 030c 	add.w	r3, r3, #12
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	009b      	lsls	r3, r3, #2
 80025e6:	4413      	add	r3, r2
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f000 f918 	bl	8002820 <_ZN13DisplayObject11getpriorityEv>
 80025f0:	4603      	mov	r3, r0
 80025f2:	461a      	mov	r2, r3
 80025f4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025f8:	f103 0310 	add.w	r3, r3, #16
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4293      	cmp	r3, r2
 8002600:	bf0c      	ite	eq
 8002602:	2301      	moveq	r3, #1
 8002604:	2300      	movne	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	2b00      	cmp	r3, #0
 800260a:	d03a      	beq.n	8002682 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 800260c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002610:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800261c:	f103 030c 	add.w	r3, r3, #12
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	4413      	add	r3, r2
 8002626:	6818      	ldr	r0, [r3, #0]
 8002628:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800262c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	681a      	ldr	r2, [r3, #0]
 8002634:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002638:	f103 030c 	add.w	r3, r3, #12
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	3308      	adds	r3, #8
 8002648:	681c      	ldr	r4, [r3, #0]
 800264a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264e:	f103 0308 	add.w	r3, r3, #8
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	b29b      	uxth	r3, r3
 8002656:	f107 0120 	add.w	r1, r7, #32
 800265a:	3918      	subs	r1, #24
 800265c:	2250      	movs	r2, #80	@ 0x50
 800265e:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002660:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002664:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002670:	f103 030c 	add.w	r3, r3, #12
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	4413      	add	r3, r2
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4618      	mov	r0, r3
 800267e:	f000 f87f 	bl	8002780 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 8002682:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002686:	f103 030c 	add.w	r3, r3, #12
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	3301      	adds	r3, #1
 800268e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002692:	f102 020c 	add.w	r2, r2, #12
 8002696:	6013      	str	r3, [r2, #0]
 8002698:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800269c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	791b      	ldrb	r3, [r3, #4]
 80026a4:	461a      	mov	r2, r3
 80026a6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026aa:	f103 030c 	add.w	r3, r3, #12
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4293      	cmp	r3, r2
 80026b2:	db8c      	blt.n	80025ce <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80026b4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026b8:	f103 0310 	add.w	r3, r3, #16
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	3301      	adds	r3, #1
 80026c0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026c4:	f102 0210 	add.w	r2, r2, #16
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026ce:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	799b      	ldrb	r3, [r3, #6]
 80026d6:	461a      	mov	r2, r3
 80026d8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026dc:	f103 0310 	add.w	r3, r3, #16
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4293      	cmp	r3, r2
 80026e4:	f77f af6c 	ble.w	80025c0 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 80026e8:	f107 0320 	add.w	r3, r7, #32
 80026ec:	3b18      	subs	r3, #24
 80026ee:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80026f2:	4619      	mov	r1, r3
 80026f4:	4818      	ldr	r0, [pc, #96]	@ (8002758 <_ZN5Scene9drawSceneEv+0x2c0>)
 80026f6:	f7ff fe5d 	bl	80023b4 <transmitdma>
			while(!spidatasentflag) {}
 80026fa:	bf00      	nop
 80026fc:	4b17      	ldr	r3, [pc, #92]	@ (800275c <_ZN5Scene9drawSceneEv+0x2c4>)
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	bf0c      	ite	eq
 8002706:	2301      	moveq	r3, #1
 8002708:	2300      	movne	r3, #0
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f5      	bne.n	80026fc <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002710:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002714:	f103 0314 	add.w	r3, r3, #20
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	3301      	adds	r3, #1
 800271c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002720:	f102 0214 	add.w	r2, r2, #20
 8002724:	6013      	str	r3, [r2, #0]
 8002726:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800272a:	f103 0314 	add.w	r3, r3, #20
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	2b05      	cmp	r3, #5
 8002732:	f77f af25 	ble.w	8002580 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 8002736:	f000 fa95 	bl	8002c64 <endCommand>
	}
	this->changed = 0;
 800273a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800273e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2200      	movs	r2, #0
 8002746:	715a      	strb	r2, [r3, #5]
 8002748:	e000      	b.n	800274c <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 800274a:	bf00      	nop
}
 800274c:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002750:	3724      	adds	r7, #36	@ 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	bd90      	pop	{r4, r7, pc}
 8002756:	bf00      	nop
 8002758:	200001bc 	.word	0x200001bc
 800275c:	2000037c 	.word	0x2000037c

08002760 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	4a04      	ldr	r2, [pc, #16]	@ (800277c <_ZN13DisplayObjectD1Ev+0x1c>)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4618      	mov	r0, r3
 8002772:	370c      	adds	r7, #12
 8002774:	46bd      	mov	sp, r7
 8002776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277a:	4770      	bx	lr
 800277c:	08010128 	.word	0x08010128

08002780 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	715a      	strb	r2, [r3, #5]
}
 800278e:	bf00      	nop
 8002790:	370c      	adds	r7, #12
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr

0800279a <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2201      	movs	r2, #1
 80027a6:	715a      	strb	r2, [r3, #5]
}
 80027a8:	bf00      	nop
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr

080027b4 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	88db      	ldrh	r3, [r3, #6]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80027cc:	b480      	push	{r7}
 80027ce:	b083      	sub	sp, #12
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
 80027d4:	460b      	mov	r3, r1
 80027d6:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	80da      	strh	r2, [r3, #6]
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr

080027ea <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 80027ea:	b480      	push	{r7}
 80027ec:	b083      	sub	sp, #12
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	6078      	str	r0, [r7, #4]
	return this->ypos;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	891b      	ldrh	r3, [r3, #8]
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002802:	b480      	push	{r7}
 8002804:	b083      	sub	sp, #12
 8002806:	af00      	add	r7, sp, #0
 8002808:	6078      	str	r0, [r7, #4]
 800280a:	460b      	mov	r3, r1
 800280c:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	887a      	ldrh	r2, [r7, #2]
 8002812:	811a      	strh	r2, [r3, #8]
}
 8002814:	bf00      	nop
 8002816:	370c      	adds	r7, #12
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	791b      	ldrb	r3, [r3, #4]
}
 800282c:	4618      	mov	r0, r3
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	460b      	mov	r3, r1
 8002842:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	78fa      	ldrb	r2, [r7, #3]
 8002848:	711a      	strb	r2, [r3, #4]
}
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr

08002856 <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 8002856:	b480      	push	{r7}
 8002858:	b083      	sub	sp, #12
 800285a:	af00      	add	r7, sp, #0
 800285c:	6078      	str	r0, [r7, #4]
	return this->changed;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	795b      	ldrb	r3, [r3, #5]
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
	...

08002870 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	4a04      	ldr	r2, [pc, #16]	@ (800288c <_ZN13DisplayObjectC1Ev+0x1c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	601a      	str	r2, [r3, #0]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	08010128 	.word	0x08010128

08002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	4608      	mov	r0, r1
 800289a:	4611      	mov	r1, r2
 800289c:	461a      	mov	r2, r3
 800289e:	4603      	mov	r3, r0
 80028a0:	817b      	strh	r3, [r7, #10]
 80028a2:	460b      	mov	r3, r1
 80028a4:	813b      	strh	r3, [r7, #8]
 80028a6:	4613      	mov	r3, r2
 80028a8:	80fb      	strh	r3, [r7, #6]
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff ffdf 	bl	8002870 <_ZN13DisplayObjectC1Ev>
 80028b2:	4a15      	ldr	r2, [pc, #84]	@ (8002908 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6a3a      	ldr	r2, [r7, #32]
 80028bc:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	897a      	ldrh	r2, [r7, #10]
 80028c2:	4611      	mov	r1, r2
 80028c4:	4618      	mov	r0, r3
 80028c6:	f7ff ff81 	bl	80027cc <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	893a      	ldrh	r2, [r7, #8]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff96 	bl	8002802 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	88fa      	ldrh	r2, [r7, #6]
 80028da:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	7f3a      	ldrb	r2, [r7, #28]
 80028e0:	751a      	strb	r2, [r3, #20]
	this->font = font;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80028ee:	4611      	mov	r1, r2
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7ff ffa1 	bl	8002838 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7ff ff4e 	bl	800279a <_ZN13DisplayObject12redrawObjectEv>
}
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	4618      	mov	r0, r3
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	08010114 	.word	0x08010114

0800290c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800290c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002910:	b08a      	sub	sp, #40	@ 0x28
 8002912:	af06      	add	r7, sp, #24
 8002914:	60f8      	str	r0, [r7, #12]
 8002916:	60b9      	str	r1, [r7, #8]
 8002918:	4611      	mov	r1, r2
 800291a:	461a      	mov	r2, r3
 800291c:	460b      	mov	r3, r1
 800291e:	80fb      	strh	r3, [r7, #6]
 8002920:	4613      	mov	r3, r2
 8002922:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	68dc      	ldr	r4, [r3, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	691d      	ldr	r5, [r3, #16]
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	895e      	ldrh	r6, [r3, #10]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	4618      	mov	r0, r3
 8002934:	f7ff ff3e 	bl	80027b4 <_ZN13DisplayObject7getxposEv>
 8002938:	4603      	mov	r3, r0
 800293a:	4698      	mov	r8, r3
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff ff53 	bl	80027ea <_ZN13DisplayObject7getyposEv>
 8002944:	4603      	mov	r3, r0
 8002946:	4619      	mov	r1, r3
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	7d1b      	ldrb	r3, [r3, #20]
 800294c:	88ba      	ldrh	r2, [r7, #4]
 800294e:	9204      	str	r2, [sp, #16]
 8002950:	88fa      	ldrh	r2, [r7, #6]
 8002952:	9203      	str	r2, [sp, #12]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	9202      	str	r2, [sp, #8]
 8002958:	9301      	str	r3, [sp, #4]
 800295a:	9100      	str	r1, [sp, #0]
 800295c:	4643      	mov	r3, r8
 800295e:	4632      	mov	r2, r6
 8002960:	4629      	mov	r1, r5
 8002962:	4620      	mov	r0, r4
 8002964:	f000 fc57 	bl	8003216 <drawStringIntoFramebuffer>
 8002968:	4603      	mov	r3, r0
}
 800296a:	4618      	mov	r0, r3
 800296c:	3710      	adds	r7, #16
 800296e:	46bd      	mov	sp, r7
 8002970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002974 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b084      	sub	sp, #16
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	4611      	mov	r1, r2
 8002980:	461a      	mov	r2, r3
 8002982:	460b      	mov	r3, r1
 8002984:	71fb      	strb	r3, [r7, #7]
 8002986:	4613      	mov	r3, r2
 8002988:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	79fa      	ldrb	r2, [r7, #7]
 8002994:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	88ba      	ldrh	r2, [r7, #4]
 800299a:	815a      	strh	r2, [r3, #10]
	this->font = font;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8bba      	ldrh	r2, [r7, #28]
 80029a6:	4611      	mov	r1, r2
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff ff0f 	bl	80027cc <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	8c3a      	ldrh	r2, [r7, #32]
 80029b2:	4611      	mov	r1, r2
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7ff ff24 	bl	8002802 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029c0:	4611      	mov	r1, r2
 80029c2:	4618      	mov	r0, r3
 80029c4:	f7ff ff38 	bl	8002838 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fee5 	bl	800279a <_ZN13DisplayObject12redrawObjectEv>
}
 80029d0:	bf00      	nop
 80029d2:	3710      	adds	r7, #16
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b088      	sub	sp, #32
 80029dc:	af04      	add	r7, sp, #16
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	460b      	mov	r3, r1
 80029e8:	80fb      	strh	r3, [r7, #6]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80bb      	strh	r3, [r7, #4]
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	4618      	mov	r0, r3
 80029f2:	f7ff ff3d 	bl	8002870 <_ZN13DisplayObjectC1Ev>
 80029f6:	4a0c      	ldr	r2, [pc, #48]	@ (8002a28 <_ZN11ImageObjectC1EPctttthh+0x50>)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 80029fc:	88b9      	ldrh	r1, [r7, #4]
 80029fe:	88fa      	ldrh	r2, [r7, #6]
 8002a00:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002a04:	9303      	str	r3, [sp, #12]
 8002a06:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	8bbb      	ldrh	r3, [r7, #28]
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	8b3b      	ldrh	r3, [r7, #24]
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	460b      	mov	r3, r1
 8002a16:	68b9      	ldr	r1, [r7, #8]
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f000 f83b 	bl	8002a94 <_ZN11ImageObject11updateImageEPctttthh>
}
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	4618      	mov	r0, r3
 8002a22:	3710      	adds	r7, #16
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	08010100 	.word	0x08010100

08002a2c <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a30:	b08a      	sub	sp, #40	@ 0x28
 8002a32:	af06      	add	r7, sp, #24
 8002a34:	60f8      	str	r0, [r7, #12]
 8002a36:	60b9      	str	r1, [r7, #8]
 8002a38:	4611      	mov	r1, r2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	80fb      	strh	r3, [r7, #6]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	691c      	ldr	r4, [r3, #16]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	895d      	ldrh	r5, [r3, #10]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	899e      	ldrh	r6, [r3, #12]
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7ff feae 	bl	80027b4 <_ZN13DisplayObject7getxposEv>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	4698      	mov	r8, r3
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff fec3 	bl	80027ea <_ZN13DisplayObject7getyposEv>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4619      	mov	r1, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	7b9b      	ldrb	r3, [r3, #14]
 8002a6c:	88ba      	ldrh	r2, [r7, #4]
 8002a6e:	9204      	str	r2, [sp, #16]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	9203      	str	r2, [sp, #12]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	9202      	str	r2, [sp, #8]
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	9100      	str	r1, [sp, #0]
 8002a7c:	4643      	mov	r3, r8
 8002a7e:	4632      	mov	r2, r6
 8002a80:	4629      	mov	r1, r5
 8002a82:	4620      	mov	r0, r4
 8002a84:	f000 fc28 	bl	80032d8 <drawImageIntoFramebuffer>
	return 0;
 8002a88:	2300      	movs	r3, #0
}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3710      	adds	r7, #16
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002a94 <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b084      	sub	sp, #16
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	80fb      	strh	r3, [r7, #6]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	8b3a      	ldrh	r2, [r7, #24]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff fe8b 	bl	80027cc <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	8bba      	ldrh	r2, [r7, #28]
 8002aba:	4611      	mov	r1, r2
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff fea0 	bl	8002802 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	68ba      	ldr	r2, [r7, #8]
 8002ac6:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	88fa      	ldrh	r2, [r7, #6]
 8002acc:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	88ba      	ldrh	r2, [r7, #4]
 8002ad2:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002ada:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002ae2:	4611      	mov	r1, r2
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff fea7 	bl	8002838 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fe54 	bl	800279a <_ZN13DisplayObject12redrawObjectEv>
}
 8002af2:	bf00      	nop
 8002af4:	3710      	adds	r7, #16
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
 8002b04:	4a05      	ldr	r2, [pc, #20]	@ (8002b1c <_ZN11ImageObjectD1Ev+0x20>)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7ff fe27 	bl	8002760 <_ZN13DisplayObjectD1Ev>
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4618      	mov	r0, r3
 8002b16:	3708      	adds	r7, #8
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	bd80      	pop	{r7, pc}
 8002b1c:	08010100 	.word	0x08010100

08002b20 <_ZN11ImageObjectD0Ev>:
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6878      	ldr	r0, [r7, #4]
 8002b2a:	f7ff ffe7 	bl	8002afc <_ZN11ImageObjectD1Ev>
 8002b2e:	2114      	movs	r1, #20
 8002b30:	6878      	ldr	r0, [r7, #4]
 8002b32:	f00c fbe1 	bl	800f2f8 <_ZdlPvj>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3708      	adds	r7, #8
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	bd80      	pop	{r7, pc}

08002b40 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	4a05      	ldr	r2, [pc, #20]	@ (8002b60 <_ZN12StringObjectD1Ev+0x20>)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff fe05 	bl	8002760 <_ZN13DisplayObjectD1Ev>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	08010114 	.word	0x08010114

08002b64 <_ZN12StringObjectD0Ev>:
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b082      	sub	sp, #8
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe7 	bl	8002b40 <_ZN12StringObjectD1Ev>
 8002b72:	2118      	movs	r1, #24
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f00c fbbf 	bl	800f2f8 <_ZdlPvj>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	2108      	movs	r1, #8
 8002b8c:	4802      	ldr	r0, [pc, #8]	@ (8002b98 <startTransaction+0x14>)
 8002b8e:	f002 faf7 	bl	8005180 <HAL_GPIO_WritePin>
}
 8002b92:	bf00      	nop
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	40020400 	.word	0x40020400

08002b9c <endTransaction>:

void endTransaction() {
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	2108      	movs	r1, #8
 8002ba4:	4802      	ldr	r0, [pc, #8]	@ (8002bb0 <endTransaction+0x14>)
 8002ba6:	f002 faeb 	bl	8005180 <HAL_GPIO_WritePin>
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40020400 	.word	0x40020400

08002bb4 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002bbe:	79fb      	ldrb	r3, [r7, #7]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	2110      	movs	r1, #16
 8002bc8:	4806      	ldr	r0, [pc, #24]	@ (8002be4 <dataOrRegister+0x30>)
 8002bca:	f002 fad9 	bl	8005180 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002bce:	e004      	b.n	8002bda <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	4803      	ldr	r0, [pc, #12]	@ (8002be4 <dataOrRegister+0x30>)
 8002bd6:	f002 fad3 	bl	8005180 <HAL_GPIO_WritePin>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40020400 	.word	0x40020400

08002be8 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b084      	sub	sp, #16
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002bf6:	f7ff ffc5 	bl	8002b84 <startTransaction>

	dataOrRegister(0);
 8002bfa:	2000      	movs	r0, #0
 8002bfc:	f7ff ffda 	bl	8002bb4 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002c00:	f107 010e 	add.w	r1, r7, #14
 8002c04:	230a      	movs	r3, #10
 8002c06:	2201      	movs	r2, #1
 8002c08:	480a      	ldr	r0, [pc, #40]	@ (8002c34 <commandAndData+0x4c>)
 8002c0a:	f004 f9f6 	bl	8006ffa <HAL_SPI_Transmit>

	if (size) {
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d009      	beq.n	8002c28 <commandAndData+0x40>
		dataOrRegister(1);
 8002c14:	2001      	movs	r0, #1
 8002c16:	f7ff ffcd 	bl	8002bb4 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	b29a      	uxth	r2, r3
 8002c1e:	230a      	movs	r3, #10
 8002c20:	68b9      	ldr	r1, [r7, #8]
 8002c22:	4804      	ldr	r0, [pc, #16]	@ (8002c34 <commandAndData+0x4c>)
 8002c24:	f004 f9e9 	bl	8006ffa <HAL_SPI_Transmit>
	}

	endTransaction();
 8002c28:	f7ff ffb8 	bl	8002b9c <endTransaction>
}
 8002c2c:	bf00      	nop
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	200001bc 	.word	0x200001bc

08002c38 <startCommand>:

void startCommand(uint16_t command) {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	4603      	mov	r3, r0
 8002c40:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002c42:	f7ff ff9f 	bl	8002b84 <startTransaction>
	dataOrRegister(0);
 8002c46:	2000      	movs	r0, #0
 8002c48:	f7ff ffb4 	bl	8002bb4 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002c4c:	1db9      	adds	r1, r7, #6
 8002c4e:	230a      	movs	r3, #10
 8002c50:	2201      	movs	r2, #1
 8002c52:	4803      	ldr	r0, [pc, #12]	@ (8002c60 <startCommand+0x28>)
 8002c54:	f004 f9d1 	bl	8006ffa <HAL_SPI_Transmit>
}
 8002c58:	bf00      	nop
 8002c5a:	3708      	adds	r7, #8
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}
 8002c60:	200001bc 	.word	0x200001bc

08002c64 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002c64:	b580      	push	{r7, lr}
 8002c66:	af00      	add	r7, sp, #0
	endTransaction();
 8002c68:	f7ff ff98 	bl	8002b9c <endTransaction>
}
 8002c6c:	bf00      	nop
 8002c6e:	bd80      	pop	{r7, pc}

08002c70 <resetScreen>:

void resetScreen() {
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002c74:	2201      	movs	r2, #1
 8002c76:	2120      	movs	r1, #32
 8002c78:	480b      	ldr	r0, [pc, #44]	@ (8002ca8 <resetScreen+0x38>)
 8002c7a:	f002 fa81 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002c7e:	2014      	movs	r0, #20
 8002c80:	f001 fc32 	bl	80044e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002c84:	2200      	movs	r2, #0
 8002c86:	2120      	movs	r1, #32
 8002c88:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <resetScreen+0x38>)
 8002c8a:	f002 fa79 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002c8e:	2014      	movs	r0, #20
 8002c90:	f001 fc2a 	bl	80044e8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002c94:	2201      	movs	r2, #1
 8002c96:	2120      	movs	r1, #32
 8002c98:	4803      	ldr	r0, [pc, #12]	@ (8002ca8 <resetScreen+0x38>)
 8002c9a:	f002 fa71 	bl	8005180 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002c9e:	2064      	movs	r0, #100	@ 0x64
 8002ca0:	f001 fc22 	bl	80044e8 <HAL_Delay>
}
 8002ca4:	bf00      	nop
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40020400 	.word	0x40020400

08002cac <initializeScreen>:

void initializeScreen() {
 8002cac:	b5b0      	push	{r4, r5, r7, lr}
 8002cae:	b09c      	sub	sp, #112	@ 0x70
 8002cb0:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	2001      	movs	r0, #1
 8002cb8:	f7ff ff96 	bl	8002be8 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	2100      	movs	r1, #0
 8002cc0:	2011      	movs	r0, #17
 8002cc2:	f7ff ff91 	bl	8002be8 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002cc6:	2355      	movs	r3, #85	@ 0x55
 8002cc8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002ccc:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	203a      	movs	r0, #58	@ 0x3a
 8002cd6:	f7ff ff87 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002cda:	4b47      	ldr	r3, [pc, #284]	@ (8002df8 <initializeScreen+0x14c>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002ce0:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002ce4:	2204      	movs	r2, #4
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	20c0      	movs	r0, #192	@ 0xc0
 8002cea:	f7ff ff7d 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002cee:	2345      	movs	r3, #69	@ 0x45
 8002cf0:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002cfa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002cfe:	2204      	movs	r2, #4
 8002d00:	4619      	mov	r1, r3
 8002d02:	20c1      	movs	r0, #193	@ 0xc1
 8002d04:	f7ff ff70 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002d08:	2333      	movs	r3, #51	@ 0x33
 8002d0a:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002d0e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002d12:	2202      	movs	r2, #2
 8002d14:	4619      	mov	r1, r3
 8002d16:	20c2      	movs	r0, #194	@ 0xc2
 8002d18:	f7ff ff66 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002d22:	2328      	movs	r3, #40	@ 0x28
 8002d24:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002d28:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4619      	mov	r1, r3
 8002d30:	20c5      	movs	r0, #197	@ 0xc5
 8002d32:	f7ff ff59 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002d36:	4b31      	ldr	r3, [pc, #196]	@ (8002dfc <initializeScreen+0x150>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002d3c:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002d40:	2204      	movs	r2, #4
 8002d42:	4619      	mov	r1, r3
 8002d44:	20b1      	movs	r0, #177	@ 0xb1
 8002d46:	f7ff ff4f 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002d50:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002d54:	2202      	movs	r2, #2
 8002d56:	4619      	mov	r1, r3
 8002d58:	20b4      	movs	r0, #180	@ 0xb4
 8002d5a:	f7ff ff45 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002d5e:	4a28      	ldr	r2, [pc, #160]	@ (8002e00 <initializeScreen+0x154>)
 8002d60:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d64:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002d68:	6018      	str	r0, [r3, #0]
 8002d6a:	3304      	adds	r3, #4
 8002d6c:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002d6e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002d72:	2206      	movs	r2, #6
 8002d74:	4619      	mov	r1, r3
 8002d76:	20b6      	movs	r0, #182	@ 0xb6
 8002d78:	f7ff ff36 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002d7c:	4b21      	ldr	r3, [pc, #132]	@ (8002e04 <initializeScreen+0x158>)
 8002d7e:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002d82:	461d      	mov	r5, r3
 8002d84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002d86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002d88:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002d8c:	c407      	stmia	r4!, {r0, r1, r2}
 8002d8e:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002d90:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002d94:	221e      	movs	r2, #30
 8002d96:	4619      	mov	r1, r3
 8002d98:	20e0      	movs	r0, #224	@ 0xe0
 8002d9a:	f7ff ff25 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	@ (8002e08 <initializeScreen+0x15c>)
 8002da0:	f107 040c 	add.w	r4, r7, #12
 8002da4:	461d      	mov	r5, r3
 8002da6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002da8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002daa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002dae:	c407      	stmia	r4!, {r0, r1, r2}
 8002db0:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002db2:	f107 030c 	add.w	r3, r7, #12
 8002db6:	221e      	movs	r2, #30
 8002db8:	4619      	mov	r1, r3
 8002dba:	20e1      	movs	r0, #225	@ 0xe1
 8002dbc:	f7ff ff14 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	813b      	strh	r3, [r7, #8]
 8002dc4:	2322      	movs	r3, #34	@ 0x22
 8002dc6:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002dc8:	f107 0308 	add.w	r3, r7, #8
 8002dcc:	2204      	movs	r2, #4
 8002dce:	4619      	mov	r1, r3
 8002dd0:	20b6      	movs	r0, #182	@ 0xb6
 8002dd2:	f7ff ff09 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002dda:	1d3b      	adds	r3, r7, #4
 8002ddc:	2202      	movs	r2, #2
 8002dde:	4619      	mov	r1, r3
 8002de0:	2036      	movs	r0, #54	@ 0x36
 8002de2:	f7ff ff01 	bl	8002be8 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002de6:	2000      	movs	r0, #0
 8002de8:	f000 f85a 	bl	8002ea0 <clearScreenfast>
	displayOn();
 8002dec:	f000 f80e 	bl	8002e0c <displayOn>
}
 8002df0:	bf00      	nop
 8002df2:	3770      	adds	r7, #112	@ 0x70
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bdb0      	pop	{r4, r5, r7, pc}
 8002df8:	0800ffa8 	.word	0x0800ffa8
 8002dfc:	0800ffac 	.word	0x0800ffac
 8002e00:	0800ffb0 	.word	0x0800ffb0
 8002e04:	0800ffb8 	.word	0x0800ffb8
 8002e08:	0800ffd8 	.word	0x0800ffd8

08002e0c <displayOn>:

void displayOn() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002e10:	2200      	movs	r2, #0
 8002e12:	2100      	movs	r1, #0
 8002e14:	2029      	movs	r0, #41	@ 0x29
 8002e16:	f7ff fee7 	bl	8002be8 <commandAndData>
}
 8002e1a:	bf00      	nop
 8002e1c:	bd80      	pop	{r7, pc}

08002e1e <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002e1e:	b590      	push	{r4, r7, lr}
 8002e20:	b087      	sub	sp, #28
 8002e22:	af00      	add	r7, sp, #0
 8002e24:	4604      	mov	r4, r0
 8002e26:	4608      	mov	r0, r1
 8002e28:	4611      	mov	r1, r2
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	4623      	mov	r3, r4
 8002e2e:	80fb      	strh	r3, [r7, #6]
 8002e30:	4603      	mov	r3, r0
 8002e32:	80bb      	strh	r3, [r7, #4]
 8002e34:	460b      	mov	r3, r1
 8002e36:	807b      	strh	r3, [r7, #2]
 8002e38:	4613      	mov	r3, r2
 8002e3a:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002e3c:	88bb      	ldrh	r3, [r7, #4]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	823b      	strh	r3, [r7, #16]
 8002e44:	88bb      	ldrh	r3, [r7, #4]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	827b      	strh	r3, [r7, #18]
 8002e4c:	883b      	ldrh	r3, [r7, #0]
 8002e4e:	0a1b      	lsrs	r3, r3, #8
 8002e50:	b29b      	uxth	r3, r3
 8002e52:	82bb      	strh	r3, [r7, #20]
 8002e54:	883b      	ldrh	r3, [r7, #0]
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	2208      	movs	r2, #8
 8002e62:	4619      	mov	r1, r3
 8002e64:	202a      	movs	r0, #42	@ 0x2a
 8002e66:	f7ff febf 	bl	8002be8 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	0a1b      	lsrs	r3, r3, #8
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	813b      	strh	r3, [r7, #8]
 8002e72:	88fb      	ldrh	r3, [r7, #6]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	817b      	strh	r3, [r7, #10]
 8002e7a:	887b      	ldrh	r3, [r7, #2]
 8002e7c:	0a1b      	lsrs	r3, r3, #8
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	81bb      	strh	r3, [r7, #12]
 8002e82:	887b      	ldrh	r3, [r7, #2]
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002e8a:	f107 0308 	add.w	r3, r7, #8
 8002e8e:	2208      	movs	r2, #8
 8002e90:	4619      	mov	r1, r3
 8002e92:	202b      	movs	r0, #43	@ 0x2b
 8002e94:	f7ff fea8 	bl	8002be8 <commandAndData>
	}
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd90      	pop	{r4, r7, pc}

08002ea0 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	4602      	mov	r2, r0
 8002eac:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002eb0:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002eb4:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ebc:	f102 020c 	add.w	r2, r2, #12
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	e01a      	b.n	8002efa <clearScreenfast+0x5a>
		buffer1[i] = color;
 8002ec4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002ec8:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8002ecc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ed0:	f102 020c 	add.w	r2, r2, #12
 8002ed4:	6812      	ldr	r2, [r2, #0]
 8002ed6:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8002eda:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8002ede:	8809      	ldrh	r1, [r1, #0]
 8002ee0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002ee4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002ee8:	f103 030c 	add.w	r3, r3, #12
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ef4:	f102 020c 	add.w	r2, r2, #12
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002efe:	f103 030c 	add.w	r3, r3, #12
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8002f08:	dbdc      	blt.n	8002ec4 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8002f0a:	f240 133f 	movw	r3, #319	@ 0x13f
 8002f0e:	f240 12df 	movw	r2, #479	@ 0x1df
 8002f12:	2100      	movs	r1, #0
 8002f14:	2000      	movs	r0, #0
 8002f16:	f7ff ff82 	bl	8002e1e <modifySpace>
	startCommand(0x2C);
 8002f1a:	202c      	movs	r0, #44	@ 0x2c
 8002f1c:	f7ff fe8c 	bl	8002c38 <startCommand>
	dataOrRegister(1);
 8002f20:	2001      	movs	r0, #1
 8002f22:	f7ff fe47 	bl	8002bb4 <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002f26:	2300      	movs	r3, #0
 8002f28:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f2c:	f102 0208 	add.w	r2, r2, #8
 8002f30:	6013      	str	r3, [r2, #0]
 8002f32:	e019      	b.n	8002f68 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8002f34:	f107 0310 	add.w	r3, r7, #16
 8002f38:	3b08      	subs	r3, #8
 8002f3a:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4811      	ldr	r0, [pc, #68]	@ (8002f88 <clearScreenfast+0xe8>)
 8002f42:	f7ff fa37 	bl	80023b4 <transmitdma>
		while (!spidatasentflag) {}
 8002f46:	bf00      	nop
 8002f48:	4b10      	ldr	r3, [pc, #64]	@ (8002f8c <clearScreenfast+0xec>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d0fa      	beq.n	8002f48 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002f52:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f56:	f103 0308 	add.w	r3, r3, #8
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	3301      	adds	r3, #1
 8002f5e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002f62:	f102 0208 	add.w	r2, r2, #8
 8002f66:	6013      	str	r3, [r2, #0]
 8002f68:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002f6c:	f103 0308 	add.w	r3, r3, #8
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2b05      	cmp	r3, #5
 8002f74:	ddde      	ble.n	8002f34 <clearScreenfast+0x94>
	}
	endCommand();
 8002f76:	f7ff fe75 	bl	8002c64 <endCommand>
}
 8002f7a:	bf00      	nop
 8002f7c:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	200001bc 	.word	0x200001bc
 8002f8c:	2000037c 	.word	0x2000037c

08002f90 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8002f90:	b480      	push	{r7}
 8002f92:	b085      	sub	sp, #20
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	4611      	mov	r1, r2
 8002f9c:	461a      	mov	r2, r3
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	80fb      	strh	r3, [r7, #6]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	88fb      	ldrh	r3, [r7, #6]
 8002fac:	085b      	lsrs	r3, r3, #1
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	b29a      	uxth	r2, r3
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	881a      	ldrh	r2, [r3, #0]
 8002fbc:	88bb      	ldrh	r3, [r7, #4]
 8002fbe:	085b      	lsrs	r3, r3, #1
 8002fc0:	b29b      	uxth	r3, r3
 8002fc2:	1ad3      	subs	r3, r2, r3
 8002fc4:	b29a      	uxth	r2, r3
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	801a      	strh	r2, [r3, #0]
}
 8002fca:	bf00      	nop
 8002fcc:	3714      	adds	r7, #20
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8002fd6:	b480      	push	{r7}
 8002fd8:	b089      	sub	sp, #36	@ 0x24
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	60f8      	str	r0, [r7, #12]
 8002fde:	60b9      	str	r1, [r7, #8]
 8002fe0:	607a      	str	r2, [r7, #4]
 8002fe2:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8002fec:	e015      	b.n	800301a <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685a      	ldr	r2, [r3, #4]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	781b      	ldrb	r3, [r3, #0]
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	460b      	mov	r3, r1
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	440b      	add	r3, r1
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003004:	4413      	add	r3, r2
 8003006:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	791b      	ldrb	r3, [r3, #4]
 800300c:	461a      	mov	r2, r3
 800300e:	8b7b      	ldrh	r3, [r7, #26]
 8003010:	4413      	add	r3, r2
 8003012:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	3301      	adds	r3, #1
 8003018:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1e5      	bne.n	8002fee <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	881a      	ldrh	r2, [r3, #0]
 8003026:	8b7b      	ldrh	r3, [r7, #26]
 8003028:	085b      	lsrs	r3, r3, #1
 800302a:	b29b      	uxth	r3, r3
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	b29a      	uxth	r2, r3
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003034:	bf00      	nop
 8003036:	3724      	adds	r7, #36	@ 0x24
 8003038:	46bd      	mov	sp, r7
 800303a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303e:	4770      	bx	lr

08003040 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003040:	b480      	push	{r7}
 8003042:	b089      	sub	sp, #36	@ 0x24
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
 800304c:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003052:	2300      	movs	r3, #0
 8003054:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003056:	e015      	b.n	8003084 <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	781b      	ldrb	r3, [r3, #0]
 8003060:	4619      	mov	r1, r3
 8003062:	460b      	mov	r3, r1
 8003064:	009b      	lsls	r3, r3, #2
 8003066:	440b      	add	r3, r1
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800306e:	4413      	add	r3, r2
 8003070:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	791b      	ldrb	r3, [r3, #4]
 8003076:	461a      	mov	r2, r3
 8003078:	8b7b      	ldrh	r3, [r7, #26]
 800307a:	4413      	add	r3, r2
 800307c:	837b      	strh	r3, [r7, #26]
		currentletter++;
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	3301      	adds	r3, #1
 8003082:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d1e5      	bne.n	8003058 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	8b7b      	ldrh	r3, [r7, #26]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	b29a      	uxth	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 800309a:	bf00      	nop
 800309c:	3724      	adds	r7, #36	@ 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <drawCharIntoFramebuffer>:

	return (uint16_t)xadv;
}

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80030a6:	b480      	push	{r7}
 80030a8:	b08d      	sub	sp, #52	@ 0x34
 80030aa:	af00      	add	r7, sp, #0
 80030ac:	60b9      	str	r1, [r7, #8]
 80030ae:	4611      	mov	r1, r2
 80030b0:	461a      	mov	r2, r3
 80030b2:	4603      	mov	r3, r0
 80030b4:	73fb      	strb	r3, [r7, #15]
 80030b6:	460b      	mov	r3, r1
 80030b8:	81bb      	strh	r3, [r7, #12]
 80030ba:	4613      	mov	r3, r2
 80030bc:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	6859      	ldr	r1, [r3, #4]
 80030c2:	7bfa      	ldrb	r2, [r7, #15]
 80030c4:	4613      	mov	r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	4413      	add	r3, r2
 80030ca:	005b      	lsls	r3, r3, #1
 80030cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80030d0:	440b      	add	r3, r1
 80030d2:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80030d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d6:	789b      	ldrb	r3, [r3, #2]
 80030d8:	847b      	strh	r3, [r7, #34]	@ 0x22
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	78db      	ldrb	r3, [r3, #3]
 80030de:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80030e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e2:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80030e6:	77fb      	strb	r3, [r7, #31]
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80030ee:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80030f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f2:	791b      	ldrb	r3, [r3, #4]
 80030f4:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	881b      	ldrh	r3, [r3, #0]
 8003100:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 800310e:	2300      	movs	r3, #0
 8003110:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003112:	e071      	b.n	80031f8 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 8003114:	2300      	movs	r3, #0
 8003116:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003118:	e062      	b.n	80031e0 <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 800311a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800311e:	1c5a      	adds	r2, r3, #1
 8003120:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8003124:	f003 0307 	and.w	r3, r3, #7
 8003128:	2b00      	cmp	r3, #0
 800312a:	d108      	bne.n	800313e <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 800312c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800312e:	1c5a      	adds	r2, r3, #1
 8003130:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8003132:	461a      	mov	r2, r3
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	4413      	add	r3, r2
 8003138:	781b      	ldrb	r3, [r3, #0]
 800313a:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 800313e:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8003142:	2b00      	cmp	r3, #0
 8003144:	da41      	bge.n	80031ca <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003146:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800314a:	b29a      	uxth	r2, r3
 800314c:	88fb      	ldrh	r3, [r7, #6]
 800314e:	4413      	add	r3, r2
 8003150:	b29a      	uxth	r2, r3
 8003152:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003156:	b29b      	uxth	r3, r3
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	b29a      	uxth	r2, r3
 800315c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 8003162:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003164:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003166:	1ad3      	subs	r3, r2, r3
 8003168:	b29a      	uxth	r2, r3
 800316a:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800316e:	b29b      	uxth	r3, r3
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 8003174:	8afa      	ldrh	r2, [r7, #22]
 8003176:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800317a:	429a      	cmp	r2, r3
 800317c:	bf2c      	ite	cs
 800317e:	2301      	movcs	r3, #1
 8003180:	2300      	movcc	r3, #0
 8003182:	b2da      	uxtb	r2, r3
 8003184:	8af9      	ldrh	r1, [r7, #22]
 8003186:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 800318a:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800318e:	4403      	add	r3, r0
 8003190:	4299      	cmp	r1, r3
 8003192:	bfb4      	ite	lt
 8003194:	2301      	movlt	r3, #1
 8003196:	2300      	movge	r3, #0
 8003198:	b2db      	uxtb	r3, r3
 800319a:	4013      	ands	r3, r2
 800319c:	b2db      	uxtb	r3, r3
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d013      	beq.n	80031ca <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80031a2:	8abb      	ldrh	r3, [r7, #20]
 80031a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80031a8:	d20f      	bcs.n	80031ca <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80031aa:	8afa      	ldrh	r2, [r7, #22]
 80031ac:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80031b0:	1ad2      	subs	r2, r2, r3
 80031b2:	4613      	mov	r3, r2
 80031b4:	009b      	lsls	r3, r3, #2
 80031b6:	4413      	add	r3, r2
 80031b8:	019b      	lsls	r3, r3, #6
 80031ba:	461a      	mov	r2, r3
 80031bc:	8abb      	ldrh	r3, [r7, #20]
 80031be:	4413      	add	r3, r2
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80031c4:	4413      	add	r3, r2
 80031c6:	89ba      	ldrh	r2, [r7, #12]
 80031c8:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 80031ca:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80031d4:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3301      	adds	r3, #1
 80031dc:	b29b      	uxth	r3, r3
 80031de:	853b      	strh	r3, [r7, #40]	@ 0x28
 80031e0:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80031e4:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80031e8:	429a      	cmp	r2, r3
 80031ea:	db96      	blt.n	800311a <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 80031ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80031f0:	b29b      	uxth	r3, r3
 80031f2:	3301      	adds	r3, #1
 80031f4:	b29b      	uxth	r3, r3
 80031f6:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80031f8:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80031fc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003200:	429a      	cmp	r2, r3
 8003202:	db87      	blt.n	8003114 <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 8003204:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003208:	b29b      	uxth	r3, r3
}
 800320a:	4618      	mov	r0, r3
 800320c:	3734      	adds	r7, #52	@ 0x34
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr

08003216 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003216:	b590      	push	{r4, r7, lr}
 8003218:	b08d      	sub	sp, #52	@ 0x34
 800321a:	af06      	add	r7, sp, #24
 800321c:	60f8      	str	r0, [r7, #12]
 800321e:	60b9      	str	r1, [r7, #8]
 8003220:	4611      	mov	r1, r2
 8003222:	461a      	mov	r2, r3
 8003224:	460b      	mov	r3, r1
 8003226:	80fb      	strh	r3, [r7, #6]
 8003228:	4613      	mov	r3, r2
 800322a:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 800322c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b00      	cmp	r3, #0
 8003236:	d007      	beq.n	8003248 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003238:	1d38      	adds	r0, r7, #4
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	68fa      	ldr	r2, [r7, #12]
 800323e:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003242:	f7ff fec8 	bl	8002fd6 <getStringCenter>
 8003246:	e00c      	b.n	8003262 <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003248:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	d006      	beq.n	8003262 <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 8003254:	1d38      	adds	r0, r7, #4
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	68fa      	ldr	r2, [r7, #12]
 800325a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800325e:	f7ff feef 	bl	8003040 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8003266:	2300      	movs	r3, #0
 8003268:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 800326a:	bf00      	nop
 800326c:	8abb      	ldrh	r3, [r7, #20]
 800326e:	3301      	adds	r3, #1
 8003270:	82bb      	strh	r3, [r7, #20]
 8003272:	8abb      	ldrh	r3, [r7, #20]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	4413      	add	r3, r2
 8003278:	781b      	ldrb	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d1f6      	bne.n	800326c <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 800327e:	8abb      	ldrh	r3, [r7, #20]
 8003280:	3b01      	subs	r3, #1
 8003282:	613b      	str	r3, [r7, #16]
 8003284:	e01f      	b.n	80032c6 <drawStringIntoFramebuffer+0xb0>
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	68fa      	ldr	r2, [r7, #12]
 800328a:	4413      	add	r3, r2
 800328c:	7818      	ldrb	r0, [r3, #0]
 800328e:	88ba      	ldrh	r2, [r7, #4]
 8003290:	8afb      	ldrh	r3, [r7, #22]
 8003292:	4413      	add	r3, r2
 8003294:	b29c      	uxth	r4, r3
 8003296:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003298:	88f9      	ldrh	r1, [r7, #6]
 800329a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800329c:	9204      	str	r2, [sp, #16]
 800329e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80032a0:	9203      	str	r2, [sp, #12]
 80032a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80032a4:	9202      	str	r2, [sp, #8]
 80032a6:	2200      	movs	r2, #0
 80032a8:	9201      	str	r2, [sp, #4]
 80032aa:	9300      	str	r3, [sp, #0]
 80032ac:	4623      	mov	r3, r4
 80032ae:	460a      	mov	r2, r1
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	f7ff fef8 	bl	80030a6 <drawCharIntoFramebuffer>
 80032b6:	4603      	mov	r3, r0
 80032b8:	461a      	mov	r2, r3
 80032ba:	8afb      	ldrh	r3, [r7, #22]
 80032bc:	4413      	add	r3, r2
 80032be:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	613b      	str	r3, [r7, #16]
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	dadc      	bge.n	8003286 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	7b1b      	ldrb	r3, [r3, #12]
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	371c      	adds	r7, #28
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd90      	pop	{r4, r7, pc}

080032d8 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80032d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032dc:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 80032e6:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 80032ea:	6030      	str	r0, [r6, #0]
 80032ec:	460e      	mov	r6, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032f6:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 80032fa:	4632      	mov	r2, r6
 80032fc:	801a      	strh	r2, [r3, #0]
 80032fe:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003302:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003306:	4602      	mov	r2, r0
 8003308:	801a      	strh	r2, [r3, #0]
 800330a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800330e:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003312:	460a      	mov	r2, r1
 8003314:	801a      	strh	r2, [r3, #0]
 8003316:	466b      	mov	r3, sp
 8003318:	469a      	mov	sl, r3
	length = 400;
 800331a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800331e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003322:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003326:	801a      	strh	r2, [r3, #0]
	height = 215;
 8003328:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800332c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003330:	22d7      	movs	r2, #215	@ 0xd7
 8003332:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 8003334:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003338:	f003 0302 	and.w	r3, r3, #2
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00f      	beq.n	8003360 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 8003340:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003344:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003348:	8819      	ldrh	r1, [r3, #0]
 800334a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800334e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003352:	881a      	ldrh	r2, [r3, #0]
 8003354:	1db8      	adds	r0, r7, #6
 8003356:	460b      	mov	r3, r1
 8003358:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 800335c:	f7ff fe18 	bl	8002f90 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 8003360:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003364:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003368:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800336c:	2201      	movs	r2, #1
 800336e:	6819      	ldr	r1, [r3, #0]
 8003370:	f00a feb4 	bl	800e0dc <f_open>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 800337a:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 800337e:	2b00      	cmp	r3, #0
 8003380:	d103      	bne.n	800338a <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 8003382:	487e      	ldr	r0, [pc, #504]	@ (800357c <drawImageIntoFramebuffer+0x2a4>)
 8003384:	f7fe fff2 	bl	800236c <USB_Println>
 8003388:	e007      	b.n	800339a <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 800338a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800338e:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003392:	6819      	ldr	r1, [r3, #0]
 8003394:	487a      	ldr	r0, [pc, #488]	@ (8003580 <drawImageIntoFramebuffer+0x2a8>)
 8003396:	f7fe ffe9 	bl	800236c <USB_Println>
	}
	uint16_t readbuffer[height];
 800339a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800339e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80033a2:	881e      	ldrh	r6, [r3, #0]
 80033a4:	4633      	mov	r3, r6
 80033a6:	3b01      	subs	r3, #1
 80033a8:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80033ac:	b2b3      	uxth	r3, r6
 80033ae:	2200      	movs	r2, #0
 80033b0:	4698      	mov	r8, r3
 80033b2:	4691      	mov	r9, r2
 80033b4:	f04f 0200 	mov.w	r2, #0
 80033b8:	f04f 0300 	mov.w	r3, #0
 80033bc:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80033c0:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80033c4:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80033c8:	b2b3      	uxth	r3, r6
 80033ca:	2200      	movs	r2, #0
 80033cc:	461c      	mov	r4, r3
 80033ce:	4615      	mov	r5, r2
 80033d0:	f04f 0200 	mov.w	r2, #0
 80033d4:	f04f 0300 	mov.w	r3, #0
 80033d8:	012b      	lsls	r3, r5, #4
 80033da:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80033de:	0122      	lsls	r2, r4, #4
 80033e0:	4633      	mov	r3, r6
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	3307      	adds	r3, #7
 80033e6:	08db      	lsrs	r3, r3, #3
 80033e8:	00db      	lsls	r3, r3, #3
 80033ea:	ebad 0d03 	sub.w	sp, sp, r3
 80033ee:	466b      	mov	r3, sp
 80033f0:	3301      	adds	r3, #1
 80033f2:	085b      	lsrs	r3, r3, #1
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 80033fa:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80033fe:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003402:	2200      	movs	r2, #0
 8003404:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 8003406:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800340a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800340e:	881b      	ldrh	r3, [r3, #0]
 8003410:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003414:	e093      	b.n	800353e <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003416:	4633      	mov	r3, r6
 8003418:	005a      	lsls	r2, r3, #1
 800341a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800341e:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003422:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 8003426:	f00b f813 	bl	800e450 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 800342a:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800342e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003432:	429a      	cmp	r2, r3
 8003434:	bfac      	ite	ge
 8003436:	2301      	movge	r3, #1
 8003438:	2300      	movlt	r3, #0
 800343a:	b2da      	uxtb	r2, r3
 800343c:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 8003440:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003444:	440b      	add	r3, r1
 8003446:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 800344a:	4299      	cmp	r1, r3
 800344c:	bfb4      	ite	lt
 800344e:	2301      	movlt	r3, #1
 8003450:	2300      	movge	r3, #0
 8003452:	b2db      	uxtb	r3, r3
 8003454:	4013      	ands	r3, r2
 8003456:	b2db      	uxtb	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d062      	beq.n	8003522 <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 800345c:	2300      	movs	r3, #0
 800345e:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003462:	e055      	b.n	8003510 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 8003464:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003468:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800346c:	1ad2      	subs	r2, r2, r3
 800346e:	4613      	mov	r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	4413      	add	r3, r2
 8003474:	019b      	lsls	r3, r3, #6
 8003476:	461a      	mov	r2, r3
 8003478:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 800347c:	4413      	add	r3, r2
 800347e:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003482:	4413      	add	r3, r2
 8003484:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 8003488:	f107 0310 	add.w	r3, r7, #16
 800348c:	220a      	movs	r2, #10
 800348e:	4619      	mov	r1, r3
 8003490:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 8003494:	f00b ff6d 	bl	800f372 <itoa>
				strncat(whatbuffer, "\n", 10);
 8003498:	f107 0310 	add.w	r3, r7, #16
 800349c:	4618      	mov	r0, r3
 800349e:	f7fc fe9f 	bl	80001e0 <strlen>
 80034a2:	4603      	mov	r3, r0
 80034a4:	461a      	mov	r2, r3
 80034a6:	f107 0310 	add.w	r3, r7, #16
 80034aa:	4413      	add	r3, r2
 80034ac:	4935      	ldr	r1, [pc, #212]	@ (8003584 <drawImageIntoFramebuffer+0x2ac>)
 80034ae:	461a      	mov	r2, r3
 80034b0:	460b      	mov	r3, r1
 80034b2:	881b      	ldrh	r3, [r3, #0]
 80034b4:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 80034b6:	f107 0310 	add.w	r3, r7, #16
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fc fe90 	bl	80001e0 <strlen>
 80034c0:	4603      	mov	r3, r0
 80034c2:	b29a      	uxth	r2, r3
 80034c4:	f107 0310 	add.w	r3, r7, #16
 80034c8:	4611      	mov	r1, r2
 80034ca:	4618      	mov	r0, r3
 80034cc:	f00b fac2 	bl	800ea54 <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 80034d0:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80034d4:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 80034d8:	1ad2      	subs	r2, r2, r3
 80034da:	4613      	mov	r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	4413      	add	r3, r2
 80034e0:	019b      	lsls	r3, r3, #6
 80034e2:	461a      	mov	r2, r3
 80034e4:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80034e8:	441a      	add	r2, r3
 80034ea:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 80034ee:	4413      	add	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 80034f6:	4413      	add	r3, r2
 80034f8:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 80034fc:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003500:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003504:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 8003506:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800350a:	3301      	adds	r3, #1
 800350c:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003510:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003514:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800351e:	429a      	cmp	r2, r3
 8003520:	dba0      	blt.n	8003464 <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 8003522:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 8003526:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 800352a:	4413      	add	r3, r2
 800352c:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003530:	429a      	cmp	r2, r3
 8003532:	dc16      	bgt.n	8003562 <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 8003534:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003538:	3301      	adds	r3, #1
 800353a:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800353e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003542:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003546:	881b      	ldrh	r3, [r3, #0]
 8003548:	461a      	mov	r2, r3
 800354a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800354e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003552:	881b      	ldrh	r3, [r3, #0]
 8003554:	4413      	add	r3, r2
 8003556:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800355a:	429a      	cmp	r2, r3
 800355c:	f6ff af5b 	blt.w	8003416 <drawImageIntoFramebuffer+0x13e>
 8003560:	e000      	b.n	8003564 <drawImageIntoFramebuffer+0x28c>
			break;
 8003562:	bf00      	nop
		}
	}
	f_close(&newfile);
 8003564:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003568:	4618      	mov	r0, r3
 800356a:	f00b f92e 	bl	800e7ca <f_close>
 800356e:	46d5      	mov	sp, sl
}
 8003570:	bf00      	nop
 8003572:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 8003576:	46bd      	mov	sp, r7
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	08010008 	.word	0x08010008
 8003580:	08010024 	.word	0x08010024
 8003584:	08010038 	.word	0x08010038

08003588 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af04      	add	r7, sp, #16
 800358e:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 8003590:	220a      	movs	r2, #10
 8003592:	4914      	ldr	r1, [pc, #80]	@ (80035e4 <setrpmdata+0x5c>)
 8003594:	4814      	ldr	r0, [pc, #80]	@ (80035e8 <setrpmdata+0x60>)
 8003596:	f00c f846 	bl	800f626 <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 800359a:	220a      	movs	r2, #10
 800359c:	6879      	ldr	r1, [r7, #4]
 800359e:	4812      	ldr	r0, [pc, #72]	@ (80035e8 <setrpmdata+0x60>)
 80035a0:	f00c f82e 	bl	800f600 <strncat>
	strncat(rpmresult, "RPM", 10);
 80035a4:	4810      	ldr	r0, [pc, #64]	@ (80035e8 <setrpmdata+0x60>)
 80035a6:	f7fc fe1b 	bl	80001e0 <strlen>
 80035aa:	4603      	mov	r3, r0
 80035ac:	461a      	mov	r2, r3
 80035ae:	4b0e      	ldr	r3, [pc, #56]	@ (80035e8 <setrpmdata+0x60>)
 80035b0:	4413      	add	r3, r2
 80035b2:	4a0e      	ldr	r2, [pc, #56]	@ (80035ec <setrpmdata+0x64>)
 80035b4:	6810      	ldr	r0, [r2, #0]
 80035b6:	6018      	str	r0, [r3, #0]
	((StringObject*)otherobjects[0])->updateString(rpmresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 420, 260, 1);
 80035b8:	4b0d      	ldr	r3, [pc, #52]	@ (80035f0 <setrpmdata+0x68>)
 80035ba:	6818      	ldr	r0, [r3, #0]
 80035bc:	2301      	movs	r3, #1
 80035be:	9303      	str	r3, [sp, #12]
 80035c0:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80035c4:	9302      	str	r3, [sp, #8]
 80035c6:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80035ca:	9301      	str	r3, [sp, #4]
 80035cc:	4b09      	ldr	r3, [pc, #36]	@ (80035f4 <setrpmdata+0x6c>)
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035d4:	2201      	movs	r2, #1
 80035d6:	4904      	ldr	r1, [pc, #16]	@ (80035e8 <setrpmdata+0x60>)
 80035d8:	f7ff f9cc 	bl	8002974 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80035dc:	bf00      	nop
 80035de:	3708      	adds	r7, #8
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08010048 	.word	0x08010048
 80035e8:	20000380 	.word	0x20000380
 80035ec:	0801004c 	.word	0x0801004c
 80035f0:	200003bc 	.word	0x200003bc
 80035f4:	08013384 	.word	0x08013384

080035f8 <settempdata>:

void settempdata(char *tempvalue) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af04      	add	r7, sp, #16
 80035fe:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003600:	220a      	movs	r2, #10
 8003602:	490f      	ldr	r1, [pc, #60]	@ (8003640 <settempdata+0x48>)
 8003604:	480f      	ldr	r0, [pc, #60]	@ (8003644 <settempdata+0x4c>)
 8003606:	f00c f80e 	bl	800f626 <strncpy>
	strncat(tempresult, tempvalue, 10);
 800360a:	220a      	movs	r2, #10
 800360c:	6879      	ldr	r1, [r7, #4]
 800360e:	480d      	ldr	r0, [pc, #52]	@ (8003644 <settempdata+0x4c>)
 8003610:	f00b fff6 	bl	800f600 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 8003614:	4b0c      	ldr	r3, [pc, #48]	@ (8003648 <settempdata+0x50>)
 8003616:	6858      	ldr	r0, [r3, #4]
 8003618:	2303      	movs	r3, #3
 800361a:	9303      	str	r3, [sp, #12]
 800361c:	2364      	movs	r3, #100	@ 0x64
 800361e:	9302      	str	r3, [sp, #8]
 8003620:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003624:	9301      	str	r3, [sp, #4]
 8003626:	4b09      	ldr	r3, [pc, #36]	@ (800364c <settempdata+0x54>)
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800362e:	2202      	movs	r2, #2
 8003630:	4904      	ldr	r1, [pc, #16]	@ (8003644 <settempdata+0x4c>)
 8003632:	f7ff f99f 	bl	8002974 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 8003636:	bf00      	nop
 8003638:	3708      	adds	r7, #8
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	08010048 	.word	0x08010048
 8003644:	20000394 	.word	0x20000394
 8003648:	200003bc 	.word	0x200003bc
 800364c:	0801152c 	.word	0x0801152c

08003650 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003650:	b580      	push	{r7, lr}
 8003652:	b086      	sub	sp, #24
 8003654:	af04      	add	r7, sp, #16
 8003656:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003658:	220a      	movs	r2, #10
 800365a:	490e      	ldr	r1, [pc, #56]	@ (8003694 <setgeardata+0x44>)
 800365c:	480e      	ldr	r0, [pc, #56]	@ (8003698 <setgeardata+0x48>)
 800365e:	f00b ffe2 	bl	800f626 <strncpy>
	strncat(gearresult, gearvalue, 10);
 8003662:	220a      	movs	r2, #10
 8003664:	6879      	ldr	r1, [r7, #4]
 8003666:	480c      	ldr	r0, [pc, #48]	@ (8003698 <setgeardata+0x48>)
 8003668:	f00b ffca 	bl	800f600 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <setgeardata+0x4c>)
 800366e:	68d8      	ldr	r0, [r3, #12]
 8003670:	2302      	movs	r3, #2
 8003672:	9303      	str	r3, [sp, #12]
 8003674:	23f0      	movs	r3, #240	@ 0xf0
 8003676:	9302      	str	r3, [sp, #8]
 8003678:	2364      	movs	r3, #100	@ 0x64
 800367a:	9301      	str	r3, [sp, #4]
 800367c:	4b08      	ldr	r3, [pc, #32]	@ (80036a0 <setgeardata+0x50>)
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003684:	2202      	movs	r2, #2
 8003686:	4904      	ldr	r1, [pc, #16]	@ (8003698 <setgeardata+0x48>)
 8003688:	f7ff f974 	bl	8002974 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800368c:	bf00      	nop
 800368e:	3708      	adds	r7, #8
 8003690:	46bd      	mov	sp, r7
 8003692:	bd80      	pop	{r7, pc}
 8003694:	08010048 	.word	0x08010048
 8003698:	20000008 	.word	0x20000008
 800369c:	200003bc 	.word	0x200003bc
 80036a0:	08017790 	.word	0x08017790

080036a4 <setbattdata>:

void setbattdata(char *battvalue) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b086      	sub	sp, #24
 80036a8:	af04      	add	r7, sp, #16
 80036aa:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80036ac:	220a      	movs	r2, #10
 80036ae:	490f      	ldr	r1, [pc, #60]	@ (80036ec <setbattdata+0x48>)
 80036b0:	480f      	ldr	r0, [pc, #60]	@ (80036f0 <setbattdata+0x4c>)
 80036b2:	f00b ffb8 	bl	800f626 <strncpy>
	strncat(battresult, battvalue, 10);
 80036b6:	220a      	movs	r2, #10
 80036b8:	6879      	ldr	r1, [r7, #4]
 80036ba:	480d      	ldr	r0, [pc, #52]	@ (80036f0 <setbattdata+0x4c>)
 80036bc:	f00b ffa0 	bl	800f600 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 80036c0:	4b0c      	ldr	r3, [pc, #48]	@ (80036f4 <setbattdata+0x50>)
 80036c2:	6898      	ldr	r0, [r3, #8]
 80036c4:	2306      	movs	r3, #6
 80036c6:	9303      	str	r3, [sp, #12]
 80036c8:	233c      	movs	r3, #60	@ 0x3c
 80036ca:	9302      	str	r3, [sp, #8]
 80036cc:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80036d0:	9301      	str	r3, [sp, #4]
 80036d2:	4b09      	ldr	r3, [pc, #36]	@ (80036f8 <setbattdata+0x54>)
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036da:	2202      	movs	r2, #2
 80036dc:	4904      	ldr	r1, [pc, #16]	@ (80036f0 <setbattdata+0x4c>)
 80036de:	f7ff f949 	bl	8002974 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	08010048 	.word	0x08010048
 80036f0:	200003a8 	.word	0x200003a8
 80036f4:	200003bc 	.word	0x200003bc
 80036f8:	0801152c 	.word	0x0801152c

080036fc <domainscreen>:

void domainscreen() {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003700:	4804      	ldr	r0, [pc, #16]	@ (8003714 <domainscreen+0x18>)
 8003702:	f7fe fec9 	bl	8002498 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 6);
 8003706:	2206      	movs	r2, #6
 8003708:	4903      	ldr	r1, [pc, #12]	@ (8003718 <domainscreen+0x1c>)
 800370a:	4802      	ldr	r0, [pc, #8]	@ (8003714 <domainscreen+0x18>)
 800370c:	f7fe fe90 	bl	8002430 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003710:	bf00      	nop
 8003712:	bd80      	pop	{r7, pc}
 8003714:	200003d4 	.word	0x200003d4
 8003718:	200003bc 	.word	0x200003bc

0800371c <_Z41__static_initialization_and_destruction_0v>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 800371c:	b590      	push	{r4, r7, lr}
 800371e:	b085      	sub	sp, #20
 8003720:	af04      	add	r7, sp, #16
		new StringObject(420, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, LEFTDRAW_OBJECT, rpmresult, 1),
 8003722:	2018      	movs	r0, #24
 8003724:	f00b fdea 	bl	800f2fc <_Znwj>
 8003728:	4603      	mov	r3, r0
 800372a:	461c      	mov	r4, r3
 800372c:	2301      	movs	r3, #1
 800372e:	9303      	str	r3, [sp, #12]
 8003730:	4b53      	ldr	r3, [pc, #332]	@ (8003880 <_Z41__static_initialization_and_destruction_0v+0x164>)
 8003732:	9302      	str	r3, [sp, #8]
 8003734:	2301      	movs	r3, #1
 8003736:	9301      	str	r3, [sp, #4]
 8003738:	4b52      	ldr	r3, [pc, #328]	@ (8003884 <_Z41__static_initialization_and_destruction_0v+0x168>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003740:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003744:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003748:	4620      	mov	r0, r4
 800374a:	f7ff f8a1 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800374e:	4b4e      	ldr	r3, [pc, #312]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003750:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003752:	2018      	movs	r0, #24
 8003754:	f00b fdd2 	bl	800f2fc <_Znwj>
 8003758:	4603      	mov	r3, r0
 800375a:	461c      	mov	r4, r3
 800375c:	2303      	movs	r3, #3
 800375e:	9303      	str	r3, [sp, #12]
 8003760:	4b4a      	ldr	r3, [pc, #296]	@ (800388c <_Z41__static_initialization_and_destruction_0v+0x170>)
 8003762:	9302      	str	r3, [sp, #8]
 8003764:	2302      	movs	r3, #2
 8003766:	9301      	str	r3, [sp, #4]
 8003768:	4b49      	ldr	r3, [pc, #292]	@ (8003890 <_Z41__static_initialization_and_destruction_0v+0x174>)
 800376a:	9300      	str	r3, [sp, #0]
 800376c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003770:	2264      	movs	r2, #100	@ 0x64
 8003772:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003776:	4620      	mov	r0, r4
 8003778:	f7ff f88a 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800377c:	4b42      	ldr	r3, [pc, #264]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 800377e:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003780:	2018      	movs	r0, #24
 8003782:	f00b fdbb 	bl	800f2fc <_Znwj>
 8003786:	4603      	mov	r3, r0
 8003788:	461c      	mov	r4, r3
 800378a:	2306      	movs	r3, #6
 800378c:	9303      	str	r3, [sp, #12]
 800378e:	4b41      	ldr	r3, [pc, #260]	@ (8003894 <_Z41__static_initialization_and_destruction_0v+0x178>)
 8003790:	9302      	str	r3, [sp, #8]
 8003792:	2302      	movs	r3, #2
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	4b3e      	ldr	r3, [pc, #248]	@ (8003890 <_Z41__static_initialization_and_destruction_0v+0x174>)
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800379e:	223c      	movs	r2, #60	@ 0x3c
 80037a0:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80037a4:	4620      	mov	r0, r4
 80037a6:	f7ff f873 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80037aa:	4b37      	ldr	r3, [pc, #220]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 80037ac:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 80037ae:	2018      	movs	r0, #24
 80037b0:	f00b fda4 	bl	800f2fc <_Znwj>
 80037b4:	4603      	mov	r3, r0
 80037b6:	461c      	mov	r4, r3
 80037b8:	2302      	movs	r3, #2
 80037ba:	9303      	str	r3, [sp, #12]
 80037bc:	4b36      	ldr	r3, [pc, #216]	@ (8003898 <_Z41__static_initialization_and_destruction_0v+0x17c>)
 80037be:	9302      	str	r3, [sp, #8]
 80037c0:	2302      	movs	r3, #2
 80037c2:	9301      	str	r3, [sp, #4]
 80037c4:	4b35      	ldr	r3, [pc, #212]	@ (800389c <_Z41__static_initialization_and_destruction_0v+0x180>)
 80037c6:	9300      	str	r3, [sp, #0]
 80037c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037cc:	22f0      	movs	r2, #240	@ 0xf0
 80037ce:	2164      	movs	r1, #100	@ 0x64
 80037d0:	4620      	mov	r0, r4
 80037d2:	f7ff f85d 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80037d6:	4b2c      	ldr	r3, [pc, #176]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 80037d8:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 80037da:	2018      	movs	r0, #24
 80037dc:	f00b fd8e 	bl	800f2fc <_Znwj>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461c      	mov	r4, r3
 80037e4:	2304      	movs	r3, #4
 80037e6:	9303      	str	r3, [sp, #12]
 80037e8:	4b2d      	ldr	r3, [pc, #180]	@ (80038a0 <_Z41__static_initialization_and_destruction_0v+0x184>)
 80037ea:	9302      	str	r3, [sp, #8]
 80037ec:	2302      	movs	r3, #2
 80037ee:	9301      	str	r3, [sp, #4]
 80037f0:	4b2c      	ldr	r3, [pc, #176]	@ (80038a4 <_Z41__static_initialization_and_destruction_0v+0x188>)
 80037f2:	9300      	str	r3, [sp, #0]
 80037f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80037f8:	2282      	movs	r2, #130	@ 0x82
 80037fa:	f240 118b 	movw	r1, #395	@ 0x18b
 80037fe:	4620      	mov	r0, r4
 8003800:	f7ff f846 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003804:	4b20      	ldr	r3, [pc, #128]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003806:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5)
 8003808:	2018      	movs	r0, #24
 800380a:	f00b fd77 	bl	800f2fc <_Znwj>
 800380e:	4603      	mov	r3, r0
 8003810:	461c      	mov	r4, r3
 8003812:	2305      	movs	r3, #5
 8003814:	9303      	str	r3, [sp, #12]
 8003816:	4b24      	ldr	r3, [pc, #144]	@ (80038a8 <_Z41__static_initialization_and_destruction_0v+0x18c>)
 8003818:	9302      	str	r3, [sp, #8]
 800381a:	2302      	movs	r3, #2
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	4b21      	ldr	r3, [pc, #132]	@ (80038a4 <_Z41__static_initialization_and_destruction_0v+0x188>)
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003826:	225a      	movs	r2, #90	@ 0x5a
 8003828:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800382c:	4620      	mov	r0, r4
 800382e:	f7ff f82f 	bl	8002890 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003834:	615c      	str	r4, [r3, #20]
Scene myScene2(otherobjects, 5);
 8003836:	2205      	movs	r2, #5
 8003838:	4913      	ldr	r1, [pc, #76]	@ (8003888 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 800383a:	481c      	ldr	r0, [pc, #112]	@ (80038ac <_Z41__static_initialization_and_destruction_0v+0x190>)
 800383c:	f7fe fde6 	bl	800240c <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003840:	2014      	movs	r0, #20
 8003842:	f00b fd5b 	bl	800f2fc <_Znwj>
 8003846:	4603      	mov	r3, r0
 8003848:	461c      	mov	r4, r3
 800384a:	4b19      	ldr	r3, [pc, #100]	@ (80038b0 <_Z41__static_initialization_and_destruction_0v+0x194>)
 800384c:	6819      	ldr	r1, [r3, #0]
 800384e:	2302      	movs	r3, #2
 8003850:	9303      	str	r3, [sp, #12]
 8003852:	2302      	movs	r3, #2
 8003854:	9302      	str	r3, [sp, #8]
 8003856:	23a0      	movs	r3, #160	@ 0xa0
 8003858:	9301      	str	r3, [sp, #4]
 800385a:	23f0      	movs	r3, #240	@ 0xf0
 800385c:	9300      	str	r3, [sp, #0]
 800385e:	23d7      	movs	r3, #215	@ 0xd7
 8003860:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003864:	4620      	mov	r0, r4
 8003866:	f7ff f8b7 	bl	80029d8 <_ZN11ImageObjectC1EPctttthh>
};
 800386a:	4b12      	ldr	r3, [pc, #72]	@ (80038b4 <_Z41__static_initialization_and_destruction_0v+0x198>)
 800386c:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 800386e:	2201      	movs	r2, #1
 8003870:	4910      	ldr	r1, [pc, #64]	@ (80038b4 <_Z41__static_initialization_and_destruction_0v+0x198>)
 8003872:	4811      	ldr	r0, [pc, #68]	@ (80038b8 <_Z41__static_initialization_and_destruction_0v+0x19c>)
 8003874:	f7fe fdca 	bl	800240c <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003878:	bf00      	nop
 800387a:	3704      	adds	r7, #4
 800387c:	46bd      	mov	sp, r7
 800387e:	bd90      	pop	{r4, r7, pc}
 8003880:	20000380 	.word	0x20000380
 8003884:	08013384 	.word	0x08013384
 8003888:	200003bc 	.word	0x200003bc
 800388c:	20000394 	.word	0x20000394
 8003890:	0801152c 	.word	0x0801152c
 8003894:	200003a8 	.word	0x200003a8
 8003898:	20000008 	.word	0x20000008
 800389c:	08017790 	.word	0x08017790
 80038a0:	2000001c 	.word	0x2000001c
 80038a4:	08017978 	.word	0x08017978
 80038a8:	20000020 	.word	0x20000020
 80038ac:	200003d4 	.word	0x200003d4
 80038b0:	20000024 	.word	0x20000024
 80038b4:	200003dc 	.word	0x200003dc
 80038b8:	200003e0 	.word	0x200003e0

080038bc <_GLOBAL__sub_I_epd_bitmap_allArray>:
 80038bc:	b580      	push	{r7, lr}
 80038be:	af00      	add	r7, sp, #0
 80038c0:	f7ff ff2c 	bl	800371c <_Z41__static_initialization_and_destruction_0v>
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b084      	sub	sp, #16
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	683a      	ldr	r2, [r7, #0]
 80038d8:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	7e3a      	ldrb	r2, [r7, #24]
 80038de:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	68ba      	ldr	r2, [r7, #8]
 80038e4:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	605a      	str	r2, [r3, #4]
    endSPI();
 80038ec:	68f8      	ldr	r0, [r7, #12]
 80038ee:	f000 f839 	bl	8003964 <_ZN7MCP25156endSPIEv>
}
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	4618      	mov	r0, r3
 80038f6:	3710      	adds	r7, #16
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
 8003904:	460b      	mov	r3, r1
 8003906:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6818      	ldr	r0, [r3, #0]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	1cf9      	adds	r1, r7, #3
 8003912:	2201      	movs	r2, #1
 8003914:	f003 fb71 	bl	8006ffa <HAL_SPI_Transmit>
}
 8003918:	bf00      	nop
 800391a:	3708      	adds	r7, #8
 800391c:	46bd      	mov	sp, r7
 800391e:	bd80      	pop	{r7, pc}

08003920 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6818      	ldr	r0, [r3, #0]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	f107 010f 	add.w	r1, r7, #15
 8003934:	2201      	movs	r2, #1
 8003936:	f003 fca4 	bl	8007282 <HAL_SPI_Receive>
	return retVal;
 800393a:	7bfb      	ldrb	r3, [r7, #15]
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003944:	b580      	push	{r7, lr}
 8003946:	b082      	sub	sp, #8
 8003948:	af00      	add	r7, sp, #0
 800394a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6898      	ldr	r0, [r3, #8]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	7b1b      	ldrb	r3, [r3, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	4619      	mov	r1, r3
 8003958:	f001 fc12 	bl	8005180 <HAL_GPIO_WritePin>
}
 800395c:	bf00      	nop
 800395e:	3708      	adds	r7, #8
 8003960:	46bd      	mov	sp, r7
 8003962:	bd80      	pop	{r7, pc}

08003964 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6898      	ldr	r0, [r3, #8]
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	7b1b      	ldrb	r3, [r3, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	4619      	mov	r1, r3
 8003978:	f001 fc02 	bl	8005180 <HAL_GPIO_WritePin>
}
 800397c:	bf00      	nop
 800397e:	3708      	adds	r7, #8
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003984:	b580      	push	{r7, lr}
 8003986:	b08c      	sub	sp, #48	@ 0x30
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
	startSPI();
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f7ff ffd9 	bl	8003944 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003992:	21c0      	movs	r1, #192	@ 0xc0
 8003994:	6878      	ldr	r0, [r7, #4]
 8003996:	f7ff ffb1 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
	endSPI();
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	f7ff ffe2 	bl	8003964 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	220e      	movs	r2, #14
 80039a6:	2100      	movs	r1, #0
 80039a8:	4618      	mov	r0, r3
 80039aa:	f00b fe21 	bl	800f5f0 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 80039ae:	f107 0214 	add.w	r2, r7, #20
 80039b2:	230e      	movs	r3, #14
 80039b4:	2130      	movs	r1, #48	@ 0x30
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f000 f8ec 	bl	8003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 80039bc:	f107 0214 	add.w	r2, r7, #20
 80039c0:	230e      	movs	r3, #14
 80039c2:	2140      	movs	r1, #64	@ 0x40
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f8e5 	bl	8003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 80039ca:	f107 0214 	add.w	r2, r7, #20
 80039ce:	230e      	movs	r3, #14
 80039d0:	2150      	movs	r1, #80	@ 0x50
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 f8de 	bl	8003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 80039d8:	2200      	movs	r2, #0
 80039da:	2160      	movs	r1, #96	@ 0x60
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f000 f8b9 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2170      	movs	r1, #112	@ 0x70
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f000 f8b4 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 80039ec:	22a3      	movs	r2, #163	@ 0xa3
 80039ee:	212b      	movs	r1, #43	@ 0x2b
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 f8af 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 80039f6:	2304      	movs	r3, #4
 80039f8:	2267      	movs	r2, #103	@ 0x67
 80039fa:	2160      	movs	r1, #96	@ 0x60
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 f8f8 	bl	8003bf2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003a02:	2301      	movs	r3, #1
 8003a04:	2267      	movs	r2, #103	@ 0x67
 8003a06:	2170      	movs	r1, #112	@ 0x70
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	f000 f8f2 	bl	8003bf2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003a0e:	4a29      	ldr	r2, [pc, #164]	@ (8003ab4 <_ZN7MCP25155resetEv+0x130>)
 8003a10:	f107 030c 	add.w	r3, r7, #12
 8003a14:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003a18:	6018      	str	r0, [r3, #0]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003a1e:	2300      	movs	r3, #0
 8003a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a22:	e01e      	b.n	8003a62 <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	bf0c      	ite	eq
 8003a2a:	2301      	moveq	r3, #1
 8003a2c:	2300      	movne	r3, #0
 8003a2e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003a32:	f107 020c 	add.w	r2, r7, #12
 8003a36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a38:	4413      	add	r3, r2
 8003a3a:	7819      	ldrb	r1, [r3, #0]
 8003a3c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003a40:	2300      	movs	r3, #0
 8003a42:	6878      	ldr	r0, [r7, #4]
 8003a44:	f000 fbce 	bl	80041e4 <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003a4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d002      	beq.n	8003a5c <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003a56:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003a5a:	e027      	b.n	8003aac <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003a5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a5e:	3301      	adds	r3, #1
 8003a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003a64:	2b05      	cmp	r3, #5
 8003a66:	dddd      	ble.n	8003a24 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003a68:	2300      	movs	r3, #0
 8003a6a:	723b      	strb	r3, [r7, #8]
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003a70:	2300      	movs	r3, #0
 8003a72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003a74:	e016      	b.n	8003aa4 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003a76:	f107 0208 	add.w	r2, r7, #8
 8003a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a7c:	4413      	add	r3, r2
 8003a7e:	7819      	ldrb	r1, [r3, #0]
 8003a80:	2300      	movs	r3, #0
 8003a82:	2201      	movs	r2, #1
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 fb79 	bl	800417c <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003a90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d002      	beq.n	8003a9e <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003a98:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003a9c:	e006      	b.n	8003aac <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003a9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa0:	3301      	adds	r3, #1
 8003aa2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003aa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aa6:	2b01      	cmp	r3, #1
 8003aa8:	dde5      	ble.n	8003a76 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003aaa:	2300      	movs	r3, #0
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3730      	adds	r7, #48	@ 0x30
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}
 8003ab4:	08010050 	.word	0x08010050

08003ab8 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	460b      	mov	r3, r1
 8003ac2:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7ff ff3d 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003aca:	2103      	movs	r1, #3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff ff15 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003ad2:	78fb      	ldrb	r3, [r7, #3]
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f7ff ff10 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f7ff ff1f 	bl	8003920 <_ZN7MCP25156SPI_RxEv>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff3c 	bl	8003964 <_ZN7MCP25156endSPIEv>

    return ret;
 8003aec:	7bfb      	ldrb	r3, [r7, #15]
}
 8003aee:	4618      	mov	r0, r3
 8003af0:	3710      	adds	r7, #16
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003af6:	b590      	push	{r4, r7, lr}
 8003af8:	b087      	sub	sp, #28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	461a      	mov	r2, r3
 8003b02:	460b      	mov	r3, r1
 8003b04:	72fb      	strb	r3, [r7, #11]
 8003b06:	4613      	mov	r3, r2
 8003b08:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff ff1a 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003b10:	2103      	movs	r1, #3
 8003b12:	68f8      	ldr	r0, [r7, #12]
 8003b14:	f7ff fef2 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b18:	7afb      	ldrb	r3, [r7, #11]
 8003b1a:	4619      	mov	r1, r3
 8003b1c:	68f8      	ldr	r0, [r7, #12]
 8003b1e:	f7ff feed 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	75fb      	strb	r3, [r7, #23]
 8003b26:	e00a      	b.n	8003b3e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003b28:	7dfb      	ldrb	r3, [r7, #23]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	18d4      	adds	r4, r2, r3
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7ff fef6 	bl	8003920 <_ZN7MCP25156SPI_RxEv>
 8003b34:	4603      	mov	r3, r0
 8003b36:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003b38:	7dfb      	ldrb	r3, [r7, #23]
 8003b3a:	3301      	adds	r3, #1
 8003b3c:	75fb      	strb	r3, [r7, #23]
 8003b3e:	7dfa      	ldrb	r2, [r7, #23]
 8003b40:	7abb      	ldrb	r3, [r7, #10]
 8003b42:	429a      	cmp	r2, r3
 8003b44:	d3f0      	bcc.n	8003b28 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff0c 	bl	8003964 <_ZN7MCP25156endSPIEv>
}
 8003b4c:	bf00      	nop
 8003b4e:	371c      	adds	r7, #28
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd90      	pop	{r4, r7, pc}

08003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b082      	sub	sp, #8
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	460b      	mov	r3, r1
 8003b5e:	70fb      	strb	r3, [r7, #3]
 8003b60:	4613      	mov	r3, r2
 8003b62:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff feed 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003b6a:	2102      	movs	r1, #2
 8003b6c:	6878      	ldr	r0, [r7, #4]
 8003b6e:	f7ff fec5 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b72:	78fb      	ldrb	r3, [r7, #3]
 8003b74:	4619      	mov	r1, r3
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fec0 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003b7c:	78bb      	ldrb	r3, [r7, #2]
 8003b7e:	4619      	mov	r1, r3
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f7ff febb 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f7ff feec 	bl	8003964 <_ZN7MCP25156endSPIEv>
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b086      	sub	sp, #24
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	60f8      	str	r0, [r7, #12]
 8003b9c:	607a      	str	r2, [r7, #4]
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	72fb      	strb	r3, [r7, #11]
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003ba8:	68f8      	ldr	r0, [r7, #12]
 8003baa:	f7ff fecb 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003bae:	2102      	movs	r1, #2
 8003bb0:	68f8      	ldr	r0, [r7, #12]
 8003bb2:	f7ff fea3 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003bb6:	7afb      	ldrb	r3, [r7, #11]
 8003bb8:	4619      	mov	r1, r3
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f7ff fe9e 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]
 8003bc4:	e00a      	b.n	8003bdc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003bc6:	7dfb      	ldrb	r3, [r7, #23]
 8003bc8:	687a      	ldr	r2, [r7, #4]
 8003bca:	4413      	add	r3, r2
 8003bcc:	781b      	ldrb	r3, [r3, #0]
 8003bce:	4619      	mov	r1, r3
 8003bd0:	68f8      	ldr	r0, [r7, #12]
 8003bd2:	f7ff fe93 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003bd6:	7dfb      	ldrb	r3, [r7, #23]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	75fb      	strb	r3, [r7, #23]
 8003bdc:	7dfa      	ldrb	r2, [r7, #23]
 8003bde:	7abb      	ldrb	r3, [r7, #10]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d3f0      	bcc.n	8003bc6 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003be4:	68f8      	ldr	r0, [r7, #12]
 8003be6:	f7ff febd 	bl	8003964 <_ZN7MCP25156endSPIEv>
}
 8003bea:	bf00      	nop
 8003bec:	3718      	adds	r7, #24
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bd80      	pop	{r7, pc}

08003bf2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003bf2:	b580      	push	{r7, lr}
 8003bf4:	b082      	sub	sp, #8
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	6078      	str	r0, [r7, #4]
 8003bfa:	4608      	mov	r0, r1
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4603      	mov	r3, r0
 8003c02:	70fb      	strb	r3, [r7, #3]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70bb      	strb	r3, [r7, #2]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003c0c:	6878      	ldr	r0, [r7, #4]
 8003c0e:	f7ff fe99 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003c12:	2105      	movs	r1, #5
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff fe71 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003c1a:	78fb      	ldrb	r3, [r7, #3]
 8003c1c:	4619      	mov	r1, r3
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff fe6c 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003c24:	78bb      	ldrb	r3, [r7, #2]
 8003c26:	4619      	mov	r1, r3
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f7ff fe67 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003c2e:	787b      	ldrb	r3, [r7, #1]
 8003c30:	4619      	mov	r1, r3
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f7ff fe62 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f7ff fe93 	bl	8003964 <_ZN7MCP25156endSPIEv>
}
 8003c3e:	bf00      	nop
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003c46:	b580      	push	{r7, lr}
 8003c48:	b084      	sub	sp, #16
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
    startSPI();
 8003c4e:	6878      	ldr	r0, [r7, #4]
 8003c50:	f7ff fe78 	bl	8003944 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003c54:	21a0      	movs	r1, #160	@ 0xa0
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fe50 	bl	80038fc <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f7ff fe5f 	bl	8003920 <_ZN7MCP25156SPI_RxEv>
 8003c62:	4603      	mov	r3, r0
 8003c64:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f7ff fe7c 	bl	8003964 <_ZN7MCP25156endSPIEv>

    return i;
 8003c6c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003c76:	b580      	push	{r7, lr}
 8003c78:	b082      	sub	sp, #8
 8003c7a:	af00      	add	r7, sp, #0
 8003c7c:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8003c7e:	2180      	movs	r1, #128	@ 0x80
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f812 	bl	8003caa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003c86:	4603      	mov	r3, r0
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8003c98:	2100      	movs	r1, #0
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 f805 	bl	8003caa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003ca0:	4603      	mov	r3, r0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}

08003caa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8003caa:	b580      	push	{r7, lr}
 8003cac:	b086      	sub	sp, #24
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
 8003cb2:	460b      	mov	r3, r1
 8003cb4:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8003cb6:	78fb      	ldrb	r3, [r7, #3]
 8003cb8:	22e0      	movs	r2, #224	@ 0xe0
 8003cba:	210f      	movs	r1, #15
 8003cbc:	6878      	ldr	r0, [r7, #4]
 8003cbe:	f7ff ff98 	bl	8003bf2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8003cc2:	f000 fc05 	bl	80044d0 <HAL_GetTick>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	330a      	adds	r3, #10
 8003cca:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8003cd0:	e013      	b.n	8003cfa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8003cd2:	210e      	movs	r1, #14
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7ff feef 	bl	8003ab8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8003cde:	7bfb      	ldrb	r3, [r7, #15]
 8003ce0:	f023 031f 	bic.w	r3, r3, #31
 8003ce4:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8003ce6:	7bfa      	ldrb	r2, [r7, #15]
 8003ce8:	78fb      	ldrb	r3, [r7, #3]
 8003cea:	429a      	cmp	r2, r3
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8003cf4:	7dfb      	ldrb	r3, [r7, #23]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d10b      	bne.n	8003d12 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8003cfa:	f000 fbe9 	bl	80044d0 <HAL_GetTick>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	4293      	cmp	r3, r2
 8003d04:	bf8c      	ite	hi
 8003d06:	2301      	movhi	r3, #1
 8003d08:	2300      	movls	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d1e0      	bne.n	8003cd2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8003d10:	e000      	b.n	8003d14 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8003d12:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d001      	beq.n	8003d1e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	e000      	b.n	8003d20 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8003d1e:	2301      	movs	r3, #1

}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3718      	adds	r7, #24
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b084      	sub	sp, #16
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
 8003d30:	460b      	mov	r3, r1
 8003d32:	70fb      	strb	r3, [r7, #3]
 8003d34:	4613      	mov	r3, r2
 8003d36:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff ff9c 	bl	8003c76 <_ZN7MCP251513setConfigModeEv>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8003d42:	7afb      	ldrb	r3, [r7, #11]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8003d48:	7afb      	ldrb	r3, [r7, #11]
 8003d4a:	e1b5      	b.n	80040b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8003d50:	78bb      	ldrb	r3, [r7, #2]
 8003d52:	2b02      	cmp	r3, #2
 8003d54:	d009      	beq.n	8003d6a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	f300 8193 	bgt.w	8004082 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	f000 811f 	beq.w	8003fa0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	f000 808e 	beq.w	8003e84 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8003d68:	e18b      	b.n	8004082 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8003d6a:	78fb      	ldrb	r3, [r7, #3]
 8003d6c:	2b0f      	cmp	r3, #15
 8003d6e:	f200 8085 	bhi.w	8003e7c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8003d72:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003db9 	.word	0x08003db9
 8003d7c:	08003dc7 	.word	0x08003dc7
 8003d80:	08003dd5 	.word	0x08003dd5
 8003d84:	08003de3 	.word	0x08003de3
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003dff 	.word	0x08003dff
 8003d90:	08003e0d 	.word	0x08003e0d
 8003d94:	08003e1b 	.word	0x08003e1b
 8003d98:	08003e7d 	.word	0x08003e7d
 8003d9c:	08003e7d 	.word	0x08003e7d
 8003da0:	08003e29 	.word	0x08003e29
 8003da4:	08003e37 	.word	0x08003e37
 8003da8:	08003e45 	.word	0x08003e45
 8003dac:	08003e53 	.word	0x08003e53
 8003db0:	08003e61 	.word	0x08003e61
 8003db4:	08003e6f 	.word	0x08003e6f
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8003db8:	231f      	movs	r3, #31
 8003dba:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8003dbc:	23bf      	movs	r3, #191	@ 0xbf
 8003dbe:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8003dc0:	2387      	movs	r3, #135	@ 0x87
 8003dc2:	733b      	strb	r3, [r7, #12]
            break;
 8003dc4:	e05d      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8003dc6:	230f      	movs	r3, #15
 8003dc8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8003dca:	23bf      	movs	r3, #191	@ 0xbf
 8003dcc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8003dce:	2387      	movs	r3, #135	@ 0x87
 8003dd0:	733b      	strb	r3, [r7, #12]
            break;
 8003dd2:	e056      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8003dd4:	2307      	movs	r3, #7
 8003dd6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8003dd8:	23bf      	movs	r3, #191	@ 0xbf
 8003dda:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8003ddc:	2387      	movs	r3, #135	@ 0x87
 8003dde:	733b      	strb	r3, [r7, #12]
            break;
 8003de0:	e04f      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8003de2:	2307      	movs	r3, #7
 8003de4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8003de6:	23a4      	movs	r3, #164	@ 0xa4
 8003de8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8003dea:	2384      	movs	r3, #132	@ 0x84
 8003dec:	733b      	strb	r3, [r7, #12]
            break;
 8003dee:	e048      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8003df0:	2347      	movs	r3, #71	@ 0x47
 8003df2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8003df4:	23e2      	movs	r3, #226	@ 0xe2
 8003df6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8003df8:	2385      	movs	r3, #133	@ 0x85
 8003dfa:	733b      	strb	r3, [r7, #12]
            break;
 8003dfc:	e041      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8003dfe:	2303      	movs	r3, #3
 8003e00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8003e02:	23bf      	movs	r3, #191	@ 0xbf
 8003e04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8003e06:	2387      	movs	r3, #135	@ 0x87
 8003e08:	733b      	strb	r3, [r7, #12]
            break;
 8003e0a:	e03a      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8003e10:	23b4      	movs	r3, #180	@ 0xb4
 8003e12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8003e14:	2386      	movs	r3, #134	@ 0x86
 8003e16:	733b      	strb	r3, [r7, #12]
            break;
 8003e18:	e033      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8003e1e:	23bf      	movs	r3, #191	@ 0xbf
 8003e20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8003e22:	2387      	movs	r3, #135	@ 0x87
 8003e24:	733b      	strb	r3, [r7, #12]
            break;
 8003e26:	e02c      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8003e28:	2301      	movs	r3, #1
 8003e2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8003e2c:	23b4      	movs	r3, #180	@ 0xb4
 8003e2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8003e30:	2386      	movs	r3, #134	@ 0x86
 8003e32:	733b      	strb	r3, [r7, #12]
            break;
 8003e34:	e025      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8003e36:	2301      	movs	r3, #1
 8003e38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8003e3a:	23b1      	movs	r3, #177	@ 0xb1
 8003e3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8003e3e:	2385      	movs	r3, #133	@ 0x85
 8003e40:	733b      	strb	r3, [r7, #12]
            break;
 8003e42:	e01e      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8003e44:	2300      	movs	r3, #0
 8003e46:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8003e48:	23b4      	movs	r3, #180	@ 0xb4
 8003e4a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8003e4c:	2386      	movs	r3, #134	@ 0x86
 8003e4e:	733b      	strb	r3, [r7, #12]
            break;
 8003e50:	e017      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8003e52:	2300      	movs	r3, #0
 8003e54:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8003e56:	23b1      	movs	r3, #177	@ 0xb1
 8003e58:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8003e5a:	2385      	movs	r3, #133	@ 0x85
 8003e5c:	733b      	strb	r3, [r7, #12]
            break;
 8003e5e:	e010      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8003e60:	2300      	movs	r3, #0
 8003e62:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8003e64:	2390      	movs	r3, #144	@ 0x90
 8003e66:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8003e68:	2382      	movs	r3, #130	@ 0x82
 8003e6a:	733b      	strb	r3, [r7, #12]
            break;
 8003e6c:	e009      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8003e6e:	2300      	movs	r3, #0
 8003e70:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8003e72:	2380      	movs	r3, #128	@ 0x80
 8003e74:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8003e76:	2380      	movs	r3, #128	@ 0x80
 8003e78:	733b      	strb	r3, [r7, #12]
            break;
 8003e7a:	e002      	b.n	8003e82 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
            break;
 8003e80:	bf00      	nop
        }
        break;
 8003e82:	e101      	b.n	8004088 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8003e84:	78fb      	ldrb	r3, [r7, #3]
 8003e86:	2b0f      	cmp	r3, #15
 8003e88:	f200 8086 	bhi.w	8003f98 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8003e8c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e94 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8003e8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e92:	bf00      	nop
 8003e94:	08003ed5 	.word	0x08003ed5
 8003e98:	08003ee3 	.word	0x08003ee3
 8003e9c:	08003ef1 	.word	0x08003ef1
 8003ea0:	08003f99 	.word	0x08003f99
 8003ea4:	08003eff 	.word	0x08003eff
 8003ea8:	08003f0d 	.word	0x08003f0d
 8003eac:	08003f1b 	.word	0x08003f1b
 8003eb0:	08003f29 	.word	0x08003f29
 8003eb4:	08003f37 	.word	0x08003f37
 8003eb8:	08003f99 	.word	0x08003f99
 8003ebc:	08003f45 	.word	0x08003f45
 8003ec0:	08003f53 	.word	0x08003f53
 8003ec4:	08003f61 	.word	0x08003f61
 8003ec8:	08003f6f 	.word	0x08003f6f
 8003ecc:	08003f7d 	.word	0x08003f7d
 8003ed0:	08003f8b 	.word	0x08003f8b
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8003ed4:	233f      	movs	r3, #63	@ 0x3f
 8003ed6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8003ed8:	23ff      	movs	r3, #255	@ 0xff
 8003eda:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8003edc:	2387      	movs	r3, #135	@ 0x87
 8003ede:	733b      	strb	r3, [r7, #12]
            break;
 8003ee0:	e05d      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8003ee2:	231f      	movs	r3, #31
 8003ee4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8003ee6:	23ff      	movs	r3, #255	@ 0xff
 8003ee8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8003eea:	2387      	movs	r3, #135	@ 0x87
 8003eec:	733b      	strb	r3, [r7, #12]
            break;
 8003eee:	e056      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8003ef0:	230f      	movs	r3, #15
 8003ef2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8003ef4:	23ff      	movs	r3, #255	@ 0xff
 8003ef6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8003ef8:	2387      	movs	r3, #135	@ 0x87
 8003efa:	733b      	strb	r3, [r7, #12]
            break;
 8003efc:	e04f      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8003efe:	234e      	movs	r3, #78	@ 0x4e
 8003f00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8003f02:	23f1      	movs	r3, #241	@ 0xf1
 8003f04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8003f06:	2385      	movs	r3, #133	@ 0x85
 8003f08:	733b      	strb	r3, [r7, #12]
            break;
 8003f0a:	e048      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8003f0c:	2307      	movs	r3, #7
 8003f0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8003f10:	23ff      	movs	r3, #255	@ 0xff
 8003f12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8003f14:	2387      	movs	r3, #135	@ 0x87
 8003f16:	733b      	strb	r3, [r7, #12]
            break;
 8003f18:	e041      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8003f1a:	2307      	movs	r3, #7
 8003f1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8003f1e:	23fa      	movs	r3, #250	@ 0xfa
 8003f20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8003f22:	2387      	movs	r3, #135	@ 0x87
 8003f24:	733b      	strb	r3, [r7, #12]
            break;
 8003f26:	e03a      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8003f2c:	23ff      	movs	r3, #255	@ 0xff
 8003f2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8003f30:	2387      	movs	r3, #135	@ 0x87
 8003f32:	733b      	strb	r3, [r7, #12]
            break;
 8003f34:	e033      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8003f36:	2303      	movs	r3, #3
 8003f38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8003f3a:	23be      	movs	r3, #190	@ 0xbe
 8003f3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8003f3e:	2307      	movs	r3, #7
 8003f40:	733b      	strb	r3, [r7, #12]
            break;
 8003f42:	e02c      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8003f44:	2303      	movs	r3, #3
 8003f46:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8003f48:	23fa      	movs	r3, #250	@ 0xfa
 8003f4a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8003f4c:	2387      	movs	r3, #135	@ 0x87
 8003f4e:	733b      	strb	r3, [r7, #12]
            break;
 8003f50:	e025      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8003f52:	2303      	movs	r3, #3
 8003f54:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8003f56:	23f0      	movs	r3, #240	@ 0xf0
 8003f58:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8003f5a:	2386      	movs	r3, #134	@ 0x86
 8003f5c:	733b      	strb	r3, [r7, #12]
            break;
 8003f5e:	e01e      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8003f64:	23fa      	movs	r3, #250	@ 0xfa
 8003f66:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8003f68:	2387      	movs	r3, #135	@ 0x87
 8003f6a:	733b      	strb	r3, [r7, #12]
            break;
 8003f6c:	e017      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8003f6e:	2341      	movs	r3, #65	@ 0x41
 8003f70:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8003f72:	23f1      	movs	r3, #241	@ 0xf1
 8003f74:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8003f76:	2385      	movs	r3, #133	@ 0x85
 8003f78:	733b      	strb	r3, [r7, #12]
            break;
 8003f7a:	e010      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8003f80:	23f0      	movs	r3, #240	@ 0xf0
 8003f82:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8003f84:	2386      	movs	r3, #134	@ 0x86
 8003f86:	733b      	strb	r3, [r7, #12]
            break;
 8003f88:	e009      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8003f8e:	23d0      	movs	r3, #208	@ 0xd0
 8003f90:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8003f92:	2382      	movs	r3, #130	@ 0x82
 8003f94:	733b      	strb	r3, [r7, #12]
            break;
 8003f96:	e002      	b.n	8003f9e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	73fb      	strb	r3, [r7, #15]
            break;
 8003f9c:	bf00      	nop
        }
        break;
 8003f9e:	e073      	b.n	8004088 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	3b04      	subs	r3, #4
 8003fa4:	2b0b      	cmp	r3, #11
 8003fa6:	d868      	bhi.n	800407a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8003fa8:	a201      	add	r2, pc, #4	@ (adr r2, 8003fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8003faa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fae:	bf00      	nop
 8003fb0:	08003fe1 	.word	0x08003fe1
 8003fb4:	08003fef 	.word	0x08003fef
 8003fb8:	08003ffd 	.word	0x08003ffd
 8003fbc:	0800400b 	.word	0x0800400b
 8003fc0:	08004019 	.word	0x08004019
 8003fc4:	0800407b 	.word	0x0800407b
 8003fc8:	08004027 	.word	0x08004027
 8003fcc:	08004035 	.word	0x08004035
 8003fd0:	08004043 	.word	0x08004043
 8003fd4:	08004051 	.word	0x08004051
 8003fd8:	0800405f 	.word	0x0800405f
 8003fdc:	0800406d 	.word	0x0800406d
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8003fe0:	230b      	movs	r3, #11
 8003fe2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8003fe4:	23ff      	movs	r3, #255	@ 0xff
 8003fe6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8003fe8:	2387      	movs	r3, #135	@ 0x87
 8003fea:	733b      	strb	r3, [r7, #12]
	    break;
 8003fec:	e048      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8003fee:	2309      	movs	r3, #9
 8003ff0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8003ff2:	23ff      	movs	r3, #255	@ 0xff
 8003ff4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8003ff6:	2387      	movs	r3, #135	@ 0x87
 8003ff8:	733b      	strb	r3, [r7, #12]
            break;
 8003ffa:	e041      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8003ffc:	2309      	movs	r3, #9
 8003ffe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8004000:	23fa      	movs	r3, #250	@ 0xfa
 8004002:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8004004:	2387      	movs	r3, #135	@ 0x87
 8004006:	733b      	strb	r3, [r7, #12]
            break;
 8004008:	e03a      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 800400a:	2304      	movs	r3, #4
 800400c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 800400e:	23ff      	movs	r3, #255	@ 0xff
 8004010:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8004012:	2387      	movs	r3, #135	@ 0x87
 8004014:	733b      	strb	r3, [r7, #12]
            break;
 8004016:	e033      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004018:	2304      	movs	r3, #4
 800401a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 800401c:	23fe      	movs	r3, #254	@ 0xfe
 800401e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8004020:	2387      	movs	r3, #135	@ 0x87
 8004022:	733b      	strb	r3, [r7, #12]
	    break;
 8004024:	e02c      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8004026:	2304      	movs	r3, #4
 8004028:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 800402a:	23fa      	movs	r3, #250	@ 0xfa
 800402c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 800402e:	2387      	movs	r3, #135	@ 0x87
 8004030:	733b      	strb	r3, [r7, #12]
            break;
 8004032:	e025      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8004034:	2303      	movs	r3, #3
 8004036:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8004038:	23fa      	movs	r3, #250	@ 0xfa
 800403a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 800403c:	2387      	movs	r3, #135	@ 0x87
 800403e:	733b      	strb	r3, [r7, #12]
            break;
 8004040:	e01e      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8004042:	2301      	movs	r3, #1
 8004044:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8004046:	23ff      	movs	r3, #255	@ 0xff
 8004048:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 800404a:	2387      	movs	r3, #135	@ 0x87
 800404c:	733b      	strb	r3, [r7, #12]
            break;
 800404e:	e017      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8004050:	2341      	movs	r3, #65	@ 0x41
 8004052:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8004054:	23fb      	movs	r3, #251	@ 0xfb
 8004056:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8004058:	2386      	movs	r3, #134	@ 0x86
 800405a:	733b      	strb	r3, [r7, #12]
            break;
 800405c:	e010      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 800405e:	2300      	movs	r3, #0
 8004060:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8004062:	23fa      	movs	r3, #250	@ 0xfa
 8004064:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8004066:	2387      	movs	r3, #135	@ 0x87
 8004068:	733b      	strb	r3, [r7, #12]
            break;
 800406a:	e009      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 800406c:	2300      	movs	r3, #0
 800406e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8004070:	23d9      	movs	r3, #217	@ 0xd9
 8004072:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8004074:	2382      	movs	r3, #130	@ 0x82
 8004076:	733b      	strb	r3, [r7, #12]
            break;
 8004078:	e002      	b.n	8004080 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 800407a:	2300      	movs	r3, #0
 800407c:	73fb      	strb	r3, [r7, #15]
            break;
 800407e:	bf00      	nop
        }
        break;
 8004080:	e002      	b.n	8004088 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 8004082:	2300      	movs	r3, #0
 8004084:	73fb      	strb	r3, [r7, #15]
        break;
 8004086:	bf00      	nop
    }

    if (set) {
 8004088:	7bfb      	ldrb	r3, [r7, #15]
 800408a:	2b00      	cmp	r3, #0
 800408c:	d013      	beq.n	80040b6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 800408e:	7bbb      	ldrb	r3, [r7, #14]
 8004090:	461a      	mov	r2, r3
 8004092:	212a      	movs	r1, #42	@ 0x2a
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	f7ff fd5d 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 800409a:	7b7b      	ldrb	r3, [r7, #13]
 800409c:	461a      	mov	r2, r3
 800409e:	2129      	movs	r1, #41	@ 0x29
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f7ff fd57 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 80040a6:	7b3b      	ldrb	r3, [r7, #12]
 80040a8:	461a      	mov	r2, r3
 80040aa:	2128      	movs	r1, #40	@ 0x28
 80040ac:	6878      	ldr	r0, [r7, #4]
 80040ae:	f7ff fd51 	bl	8003b54 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e000      	b.n	80040b8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80040b6:	2301      	movs	r3, #1
    }
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}

080040c0 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	603b      	str	r3, [r7, #0]
 80040cc:	4613      	mov	r3, r2
 80040ce:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 80040d4:	79fb      	ldrb	r3, [r7, #7]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d035      	beq.n	8004146 <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	3303      	adds	r3, #3
 80040de:	8afa      	ldrh	r2, [r7, #22]
 80040e0:	b2d2      	uxtb	r2, r2
 80040e2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 80040e4:	8afb      	ldrh	r3, [r7, #22]
 80040e6:	0a1b      	lsrs	r3, r3, #8
 80040e8:	b29a      	uxth	r2, r3
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	3302      	adds	r3, #2
 80040ee:	b2d2      	uxtb	r2, r2
 80040f0:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	0c1b      	lsrs	r3, r3, #16
 80040f6:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 80040f8:	8afb      	ldrh	r3, [r7, #22]
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	3301      	adds	r3, #1
 8004100:	f002 0203 	and.w	r2, r2, #3
 8004104:	b2d2      	uxtb	r2, r2
 8004106:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	3301      	adds	r3, #1
 800410c:	7819      	ldrb	r1, [r3, #0]
 800410e:	8afb      	ldrh	r3, [r7, #22]
 8004110:	b2db      	uxtb	r3, r3
 8004112:	00db      	lsls	r3, r3, #3
 8004114:	b2db      	uxtb	r3, r3
 8004116:	f023 031f 	bic.w	r3, r3, #31
 800411a:	b2da      	uxtb	r2, r3
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	3301      	adds	r3, #1
 8004120:	440a      	add	r2, r1
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	3301      	adds	r3, #1
 800412a:	781a      	ldrb	r2, [r3, #0]
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	3301      	adds	r3, #1
 8004130:	f042 0208 	orr.w	r2, r2, #8
 8004134:	b2d2      	uxtb	r2, r2
 8004136:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8004138:	8afb      	ldrh	r3, [r7, #22]
 800413a:	095b      	lsrs	r3, r3, #5
 800413c:	b29b      	uxth	r3, r3
 800413e:	b2da      	uxtb	r2, r3
 8004140:	68bb      	ldr	r3, [r7, #8]
 8004142:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8004144:	e014      	b.n	8004170 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8004146:	8afb      	ldrh	r3, [r7, #22]
 8004148:	08db      	lsrs	r3, r3, #3
 800414a:	b29b      	uxth	r3, r3
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8004152:	8afb      	ldrh	r3, [r7, #22]
 8004154:	b2da      	uxtb	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	3301      	adds	r3, #1
 800415a:	0152      	lsls	r2, r2, #5
 800415c:	b2d2      	uxtb	r2, r2
 800415e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	3303      	adds	r3, #3
 8004164:	2200      	movs	r2, #0
 8004166:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	3302      	adds	r3, #2
 800416c:	2200      	movs	r2, #0
 800416e:	701a      	strb	r2, [r3, #0]
}
 8004170:	bf00      	nop
 8004172:	371c      	adds	r7, #28
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b086      	sub	sp, #24
 8004180:	af00      	add	r7, sp, #0
 8004182:	60f8      	str	r0, [r7, #12]
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	460b      	mov	r3, r1
 8004188:	72fb      	strb	r3, [r7, #11]
 800418a:	4613      	mov	r3, r2
 800418c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f7ff fd71 	bl	8003c76 <_ZN7MCP251513setConfigModeEv>
 8004194:	4603      	mov	r3, r0
 8004196:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004198:	7dbb      	ldrb	r3, [r7, #22]
 800419a:	2b00      	cmp	r3, #0
 800419c:	d001      	beq.n	80041a2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 800419e:	7dbb      	ldrb	r3, [r7, #22]
 80041a0:	e01c      	b.n	80041dc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80041a2:	7aba      	ldrb	r2, [r7, #10]
 80041a4:	f107 0110 	add.w	r1, r7, #16
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f7ff ff88 	bl	80040c0 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80041b0:	7afb      	ldrb	r3, [r7, #11]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d003      	beq.n	80041c2 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80041ba:	e005      	b.n	80041c8 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80041bc:	2320      	movs	r3, #32
 80041be:	75fb      	strb	r3, [r7, #23]
 80041c0:	e004      	b.n	80041cc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80041c2:	2324      	movs	r3, #36	@ 0x24
 80041c4:	75fb      	strb	r3, [r7, #23]
 80041c6:	e001      	b.n	80041cc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e007      	b.n	80041dc <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80041cc:	f107 0210 	add.w	r2, r7, #16
 80041d0:	7df9      	ldrb	r1, [r7, #23]
 80041d2:	2304      	movs	r3, #4
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fcdd 	bl	8003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80041da:	2300      	movs	r3, #0
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3718      	adds	r7, #24
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}

080041e4 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 80041e4:	b580      	push	{r7, lr}
 80041e6:	b086      	sub	sp, #24
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	60f8      	str	r0, [r7, #12]
 80041ec:	607b      	str	r3, [r7, #4]
 80041ee:	460b      	mov	r3, r1
 80041f0:	72fb      	strb	r3, [r7, #11]
 80041f2:	4613      	mov	r3, r2
 80041f4:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fd3d 	bl	8003c76 <_ZN7MCP251513setConfigModeEv>
 80041fc:	4603      	mov	r3, r0
 80041fe:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004200:	7dbb      	ldrb	r3, [r7, #22]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 8004206:	7dbb      	ldrb	r3, [r7, #22]
 8004208:	e035      	b.n	8004276 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 800420a:	7afb      	ldrb	r3, [r7, #11]
 800420c:	2b05      	cmp	r3, #5
 800420e:	d821      	bhi.n	8004254 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004210:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 8004212:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004216:	bf00      	nop
 8004218:	08004231 	.word	0x08004231
 800421c:	08004237 	.word	0x08004237
 8004220:	0800423d 	.word	0x0800423d
 8004224:	08004243 	.word	0x08004243
 8004228:	08004249 	.word	0x08004249
 800422c:	0800424f 	.word	0x0800424f
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004230:	2300      	movs	r3, #0
 8004232:	75fb      	strb	r3, [r7, #23]
 8004234:	e010      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 8004236:	2304      	movs	r3, #4
 8004238:	75fb      	strb	r3, [r7, #23]
 800423a:	e00d      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 800423c:	2308      	movs	r3, #8
 800423e:	75fb      	strb	r3, [r7, #23]
 8004240:	e00a      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 8004242:	2310      	movs	r3, #16
 8004244:	75fb      	strb	r3, [r7, #23]
 8004246:	e007      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004248:	2314      	movs	r3, #20
 800424a:	75fb      	strb	r3, [r7, #23]
 800424c:	e004      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 800424e:	2318      	movs	r3, #24
 8004250:	75fb      	strb	r3, [r7, #23]
 8004252:	e001      	b.n	8004258 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8004254:	2301      	movs	r3, #1
 8004256:	e00e      	b.n	8004276 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004258:	7aba      	ldrb	r2, [r7, #10]
 800425a:	f107 0110 	add.w	r1, r7, #16
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff2d 	bl	80040c0 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 8004266:	f107 0210 	add.w	r2, r7, #16
 800426a:	7df9      	ldrb	r1, [r7, #23]
 800426c:	2304      	movs	r3, #4
 800426e:	68f8      	ldr	r0, [r7, #12]
 8004270:	f7ff fc90 	bl	8003b94 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop

08004280 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b088      	sub	sp, #32
 8004284:	af00      	add	r7, sp, #0
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	460b      	mov	r3, r1
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 800428e:	7afb      	ldrb	r3, [r7, #11]
 8004290:	009b      	lsls	r3, r3, #2
 8004292:	4a30      	ldr	r2, [pc, #192]	@ (8004354 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 8004294:	4413      	add	r3, r2
 8004296:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	7859      	ldrb	r1, [r3, #1]
 800429c:	f107 0210 	add.w	r2, r7, #16
 80042a0:	2305      	movs	r3, #5
 80042a2:	68f8      	ldr	r0, [r7, #12]
 80042a4:	f7ff fc27 	bl	8003af6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80042a8:	7c3b      	ldrb	r3, [r7, #16]
 80042aa:	00db      	lsls	r3, r3, #3
 80042ac:	7c7a      	ldrb	r2, [r7, #17]
 80042ae:	0952      	lsrs	r2, r2, #5
 80042b0:	b2d2      	uxtb	r2, r2
 80042b2:	4413      	add	r3, r2
 80042b4:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80042b6:	7c7b      	ldrb	r3, [r7, #17]
 80042b8:	f003 0308 	and.w	r3, r3, #8
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d014      	beq.n	80042ea <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80042c0:	69fb      	ldr	r3, [r7, #28]
 80042c2:	009a      	lsls	r2, r3, #2
 80042c4:	7c7b      	ldrb	r3, [r7, #17]
 80042c6:	f003 0303 	and.w	r3, r3, #3
 80042ca:	4413      	add	r3, r2
 80042cc:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	021b      	lsls	r3, r3, #8
 80042d2:	7cba      	ldrb	r2, [r7, #18]
 80042d4:	4413      	add	r3, r2
 80042d6:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	021b      	lsls	r3, r3, #8
 80042dc:	7cfa      	ldrb	r2, [r7, #19]
 80042de:	4413      	add	r3, r2
 80042e0:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80042e2:	69fb      	ldr	r3, [r7, #28]
 80042e4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042e8:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 80042ea:	7d3b      	ldrb	r3, [r7, #20]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d901      	bls.n	80042fc <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e027      	b.n	800434c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	4619      	mov	r1, r3
 8004302:	68f8      	ldr	r0, [r7, #12]
 8004304:	f7ff fbd8 	bl	8003ab8 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004308:	4603      	mov	r3, r0
 800430a:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 800430c:	7dbb      	ldrb	r3, [r7, #22]
 800430e:	f003 0308 	and.w	r3, r3, #8
 8004312:	2b00      	cmp	r3, #0
 8004314:	d003      	beq.n	800431e <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 8004316:	69fb      	ldr	r3, [r7, #28]
 8004318:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800431c:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	7dfa      	ldrb	r2, [r7, #23]
 8004328:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 800432a:	69bb      	ldr	r3, [r7, #24]
 800432c:	7899      	ldrb	r1, [r3, #2]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f103 0208 	add.w	r2, r3, #8
 8004334:	7dfb      	ldrb	r3, [r7, #23]
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff fbdd 	bl	8003af6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	78da      	ldrb	r2, [r3, #3]
 8004340:	2300      	movs	r3, #0
 8004342:	212c      	movs	r1, #44	@ 0x2c
 8004344:	68f8      	ldr	r0, [r7, #12]
 8004346:	f7ff fc54 	bl	8003bf2 <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 800434a:	2300      	movs	r3, #0
}
 800434c:	4618      	mov	r0, r3
 800434e:	3720      	adds	r7, #32
 8004350:	46bd      	mov	sp, r7
 8004352:	bd80      	pop	{r7, pc}
 8004354:	08017988 	.word	0x08017988

08004358 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b084      	sub	sp, #16
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f7ff fc6f 	bl	8003c46 <_ZN7MCP25159getStatusEv>
 8004368:	4603      	mov	r3, r0
 800436a:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 800436c:	7bbb      	ldrb	r3, [r7, #14]
 800436e:	f003 0301 	and.w	r3, r3, #1
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 8004376:	683a      	ldr	r2, [r7, #0]
 8004378:	2100      	movs	r1, #0
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7ff ff80 	bl	8004280 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004380:	4603      	mov	r3, r0
 8004382:	73fb      	strb	r3, [r7, #15]
 8004384:	e00e      	b.n	80043a4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 8004386:	7bbb      	ldrb	r3, [r7, #14]
 8004388:	f003 0302 	and.w	r3, r3, #2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d007      	beq.n	80043a0 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8004390:	683a      	ldr	r2, [r7, #0]
 8004392:	2101      	movs	r1, #1
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f7ff ff73 	bl	8004280 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 800439a:	4603      	mov	r3, r0
 800439c:	73fb      	strb	r3, [r7, #15]
 800439e:	e001      	b.n	80043a4 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80043a0:	2305      	movs	r3, #5
 80043a2:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80043a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3710      	adds	r7, #16
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}
	...

080043b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80043b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80043e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80043b4:	f7fd fec4 	bl	8002140 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80043b8:	480c      	ldr	r0, [pc, #48]	@ (80043ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80043ba:	490d      	ldr	r1, [pc, #52]	@ (80043f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80043bc:	4a0d      	ldr	r2, [pc, #52]	@ (80043f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80043be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80043c0:	e002      	b.n	80043c8 <LoopCopyDataInit>

080043c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80043c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80043c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80043c6:	3304      	adds	r3, #4

080043c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80043c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80043ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80043cc:	d3f9      	bcc.n	80043c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80043ce:	4a0a      	ldr	r2, [pc, #40]	@ (80043f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80043d0:	4c0a      	ldr	r4, [pc, #40]	@ (80043fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80043d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80043d4:	e001      	b.n	80043da <LoopFillZerobss>

080043d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80043d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80043d8:	3204      	adds	r2, #4

080043da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80043da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80043dc:	d3fb      	bcc.n	80043d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80043de:	f00b f98f 	bl	800f700 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80043e2:	f7fc fef1 	bl	80011c8 <main>
  bx  lr    
 80043e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80043e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80043ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043f0:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 80043f4:	08017a88 	.word	0x08017a88
  ldr r2, =_sbss
 80043f8:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 80043fc:	20001958 	.word	0x20001958

08004400 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004400:	e7fe      	b.n	8004400 <ADC_IRQHandler>
	...

08004404 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004408:	4b0e      	ldr	r3, [pc, #56]	@ (8004444 <HAL_Init+0x40>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a0d      	ldr	r2, [pc, #52]	@ (8004444 <HAL_Init+0x40>)
 800440e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004412:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004414:	4b0b      	ldr	r3, [pc, #44]	@ (8004444 <HAL_Init+0x40>)
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	4a0a      	ldr	r2, [pc, #40]	@ (8004444 <HAL_Init+0x40>)
 800441a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800441e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004420:	4b08      	ldr	r3, [pc, #32]	@ (8004444 <HAL_Init+0x40>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a07      	ldr	r2, [pc, #28]	@ (8004444 <HAL_Init+0x40>)
 8004426:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800442a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800442c:	2003      	movs	r0, #3
 800442e:	f000 f94f 	bl	80046d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004432:	200f      	movs	r0, #15
 8004434:	f000 f808 	bl	8004448 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004438:	f7fd fd62 	bl	8001f00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	bd80      	pop	{r7, pc}
 8004442:	bf00      	nop
 8004444:	40023c00 	.word	0x40023c00

08004448 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004448:	b580      	push	{r7, lr}
 800444a:	b082      	sub	sp, #8
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004450:	4b12      	ldr	r3, [pc, #72]	@ (800449c <HAL_InitTick+0x54>)
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	4b12      	ldr	r3, [pc, #72]	@ (80044a0 <HAL_InitTick+0x58>)
 8004456:	781b      	ldrb	r3, [r3, #0]
 8004458:	4619      	mov	r1, r3
 800445a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800445e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004462:	fbb2 f3f3 	udiv	r3, r2, r3
 8004466:	4618      	mov	r0, r3
 8004468:	f000 f967 	bl	800473a <HAL_SYSTICK_Config>
 800446c:	4603      	mov	r3, r0
 800446e:	2b00      	cmp	r3, #0
 8004470:	d001      	beq.n	8004476 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e00e      	b.n	8004494 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2b0f      	cmp	r3, #15
 800447a:	d80a      	bhi.n	8004492 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800447c:	2200      	movs	r2, #0
 800447e:	6879      	ldr	r1, [r7, #4]
 8004480:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004484:	f000 f92f 	bl	80046e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004488:	4a06      	ldr	r2, [pc, #24]	@ (80044a4 <HAL_InitTick+0x5c>)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800448e:	2300      	movs	r3, #0
 8004490:	e000      	b.n	8004494 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
}
 8004494:	4618      	mov	r0, r3
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}
 800449c:	20000004 	.word	0x20000004
 80044a0:	2000002c 	.word	0x2000002c
 80044a4:	20000028 	.word	0x20000028

080044a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80044a8:	b480      	push	{r7}
 80044aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80044ac:	4b06      	ldr	r3, [pc, #24]	@ (80044c8 <HAL_IncTick+0x20>)
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	461a      	mov	r2, r3
 80044b2:	4b06      	ldr	r3, [pc, #24]	@ (80044cc <HAL_IncTick+0x24>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	4413      	add	r3, r2
 80044b8:	4a04      	ldr	r2, [pc, #16]	@ (80044cc <HAL_IncTick+0x24>)
 80044ba:	6013      	str	r3, [r2, #0]
}
 80044bc:	bf00      	nop
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	2000002c 	.word	0x2000002c
 80044cc:	200003e8 	.word	0x200003e8

080044d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80044d0:	b480      	push	{r7}
 80044d2:	af00      	add	r7, sp, #0
  return uwTick;
 80044d4:	4b03      	ldr	r3, [pc, #12]	@ (80044e4 <HAL_GetTick+0x14>)
 80044d6:	681b      	ldr	r3, [r3, #0]
}
 80044d8:	4618      	mov	r0, r3
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	200003e8 	.word	0x200003e8

080044e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044f0:	f7ff ffee 	bl	80044d0 <HAL_GetTick>
 80044f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004500:	d005      	beq.n	800450e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004502:	4b0a      	ldr	r3, [pc, #40]	@ (800452c <HAL_Delay+0x44>)
 8004504:	781b      	ldrb	r3, [r3, #0]
 8004506:	461a      	mov	r2, r3
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	4413      	add	r3, r2
 800450c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800450e:	bf00      	nop
 8004510:	f7ff ffde 	bl	80044d0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	68fa      	ldr	r2, [r7, #12]
 800451c:	429a      	cmp	r2, r3
 800451e:	d8f7      	bhi.n	8004510 <HAL_Delay+0x28>
  {
  }
}
 8004520:	bf00      	nop
 8004522:	bf00      	nop
 8004524:	3710      	adds	r7, #16
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	2000002c 	.word	0x2000002c

08004530 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004530:	b480      	push	{r7}
 8004532:	b085      	sub	sp, #20
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f003 0307 	and.w	r3, r3, #7
 800453e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004540:	4b0c      	ldr	r3, [pc, #48]	@ (8004574 <__NVIC_SetPriorityGrouping+0x44>)
 8004542:	68db      	ldr	r3, [r3, #12]
 8004544:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800454c:	4013      	ands	r3, r2
 800454e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004558:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800455c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004560:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004562:	4a04      	ldr	r2, [pc, #16]	@ (8004574 <__NVIC_SetPriorityGrouping+0x44>)
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	60d3      	str	r3, [r2, #12]
}
 8004568:	bf00      	nop
 800456a:	3714      	adds	r7, #20
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	e000ed00 	.word	0xe000ed00

08004578 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800457c:	4b04      	ldr	r3, [pc, #16]	@ (8004590 <__NVIC_GetPriorityGrouping+0x18>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	0a1b      	lsrs	r3, r3, #8
 8004582:	f003 0307 	and.w	r3, r3, #7
}
 8004586:	4618      	mov	r0, r3
 8004588:	46bd      	mov	sp, r7
 800458a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458e:	4770      	bx	lr
 8004590:	e000ed00 	.word	0xe000ed00

08004594 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004594:	b480      	push	{r7}
 8004596:	b083      	sub	sp, #12
 8004598:	af00      	add	r7, sp, #0
 800459a:	4603      	mov	r3, r0
 800459c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	db0b      	blt.n	80045be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a6:	79fb      	ldrb	r3, [r7, #7]
 80045a8:	f003 021f 	and.w	r2, r3, #31
 80045ac:	4907      	ldr	r1, [pc, #28]	@ (80045cc <__NVIC_EnableIRQ+0x38>)
 80045ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045b2:	095b      	lsrs	r3, r3, #5
 80045b4:	2001      	movs	r0, #1
 80045b6:	fa00 f202 	lsl.w	r2, r0, r2
 80045ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80045be:	bf00      	nop
 80045c0:	370c      	adds	r7, #12
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr
 80045ca:	bf00      	nop
 80045cc:	e000e100 	.word	0xe000e100

080045d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	4603      	mov	r3, r0
 80045d8:	6039      	str	r1, [r7, #0]
 80045da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	db0a      	blt.n	80045fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	b2da      	uxtb	r2, r3
 80045e8:	490c      	ldr	r1, [pc, #48]	@ (800461c <__NVIC_SetPriority+0x4c>)
 80045ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ee:	0112      	lsls	r2, r2, #4
 80045f0:	b2d2      	uxtb	r2, r2
 80045f2:	440b      	add	r3, r1
 80045f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f8:	e00a      	b.n	8004610 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	b2da      	uxtb	r2, r3
 80045fe:	4908      	ldr	r1, [pc, #32]	@ (8004620 <__NVIC_SetPriority+0x50>)
 8004600:	79fb      	ldrb	r3, [r7, #7]
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	3b04      	subs	r3, #4
 8004608:	0112      	lsls	r2, r2, #4
 800460a:	b2d2      	uxtb	r2, r2
 800460c:	440b      	add	r3, r1
 800460e:	761a      	strb	r2, [r3, #24]
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr
 800461c:	e000e100 	.word	0xe000e100
 8004620:	e000ed00 	.word	0xe000ed00

08004624 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004624:	b480      	push	{r7}
 8004626:	b089      	sub	sp, #36	@ 0x24
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f003 0307 	and.w	r3, r3, #7
 8004636:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	f1c3 0307 	rsb	r3, r3, #7
 800463e:	2b04      	cmp	r3, #4
 8004640:	bf28      	it	cs
 8004642:	2304      	movcs	r3, #4
 8004644:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004646:	69fb      	ldr	r3, [r7, #28]
 8004648:	3304      	adds	r3, #4
 800464a:	2b06      	cmp	r3, #6
 800464c:	d902      	bls.n	8004654 <NVIC_EncodePriority+0x30>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	3b03      	subs	r3, #3
 8004652:	e000      	b.n	8004656 <NVIC_EncodePriority+0x32>
 8004654:	2300      	movs	r3, #0
 8004656:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004658:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800465c:	69bb      	ldr	r3, [r7, #24]
 800465e:	fa02 f303 	lsl.w	r3, r2, r3
 8004662:	43da      	mvns	r2, r3
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	401a      	ands	r2, r3
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800466c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	fa01 f303 	lsl.w	r3, r1, r3
 8004676:	43d9      	mvns	r1, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800467c:	4313      	orrs	r3, r2
         );
}
 800467e:	4618      	mov	r0, r3
 8004680:	3724      	adds	r7, #36	@ 0x24
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
	...

0800468c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	3b01      	subs	r3, #1
 8004698:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800469c:	d301      	bcc.n	80046a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800469e:	2301      	movs	r3, #1
 80046a0:	e00f      	b.n	80046c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80046a2:	4a0a      	ldr	r2, [pc, #40]	@ (80046cc <SysTick_Config+0x40>)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	3b01      	subs	r3, #1
 80046a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80046aa:	210f      	movs	r1, #15
 80046ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80046b0:	f7ff ff8e 	bl	80045d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <SysTick_Config+0x40>)
 80046b6:	2200      	movs	r2, #0
 80046b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046ba:	4b04      	ldr	r3, [pc, #16]	@ (80046cc <SysTick_Config+0x40>)
 80046bc:	2207      	movs	r2, #7
 80046be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3708      	adds	r7, #8
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}
 80046ca:	bf00      	nop
 80046cc:	e000e010 	.word	0xe000e010

080046d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7ff ff29 	bl	8004530 <__NVIC_SetPriorityGrouping>
}
 80046de:	bf00      	nop
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b086      	sub	sp, #24
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	4603      	mov	r3, r0
 80046ee:	60b9      	str	r1, [r7, #8]
 80046f0:	607a      	str	r2, [r7, #4]
 80046f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046f4:	2300      	movs	r3, #0
 80046f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046f8:	f7ff ff3e 	bl	8004578 <__NVIC_GetPriorityGrouping>
 80046fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	68b9      	ldr	r1, [r7, #8]
 8004702:	6978      	ldr	r0, [r7, #20]
 8004704:	f7ff ff8e 	bl	8004624 <NVIC_EncodePriority>
 8004708:	4602      	mov	r2, r0
 800470a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800470e:	4611      	mov	r1, r2
 8004710:	4618      	mov	r0, r3
 8004712:	f7ff ff5d 	bl	80045d0 <__NVIC_SetPriority>
}
 8004716:	bf00      	nop
 8004718:	3718      	adds	r7, #24
 800471a:	46bd      	mov	sp, r7
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	4603      	mov	r3, r0
 8004726:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004728:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800472c:	4618      	mov	r0, r3
 800472e:	f7ff ff31 	bl	8004594 <__NVIC_EnableIRQ>
}
 8004732:	bf00      	nop
 8004734:	3708      	adds	r7, #8
 8004736:	46bd      	mov	sp, r7
 8004738:	bd80      	pop	{r7, pc}

0800473a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800473a:	b580      	push	{r7, lr}
 800473c:	b082      	sub	sp, #8
 800473e:	af00      	add	r7, sp, #0
 8004740:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f7ff ffa2 	bl	800468c <SysTick_Config>
 8004748:	4603      	mov	r3, r0
}
 800474a:	4618      	mov	r0, r3
 800474c:	3708      	adds	r7, #8
 800474e:	46bd      	mov	sp, r7
 8004750:	bd80      	pop	{r7, pc}
	...

08004754 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800475c:	2300      	movs	r3, #0
 800475e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004760:	f7ff feb6 	bl	80044d0 <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d101      	bne.n	8004770 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	e099      	b.n	80048a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 0201 	bic.w	r2, r2, #1
 800478e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004790:	e00f      	b.n	80047b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004792:	f7ff fe9d 	bl	80044d0 <HAL_GetTick>
 8004796:	4602      	mov	r2, r0
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	1ad3      	subs	r3, r2, r3
 800479c:	2b05      	cmp	r3, #5
 800479e:	d908      	bls.n	80047b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2220      	movs	r2, #32
 80047a4:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2203      	movs	r2, #3
 80047aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80047ae:	2303      	movs	r3, #3
 80047b0:	e078      	b.n	80048a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f003 0301 	and.w	r3, r3, #1
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d1e8      	bne.n	8004792 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80047c8:	697a      	ldr	r2, [r7, #20]
 80047ca:	4b38      	ldr	r3, [pc, #224]	@ (80048ac <HAL_DMA_Init+0x158>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	691b      	ldr	r3, [r3, #16]
 80047e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80047ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	699b      	ldr	r3, [r3, #24]
 80047f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80047f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a1b      	ldr	r3, [r3, #32]
 80047fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80047fe:	697a      	ldr	r2, [r7, #20]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	2b04      	cmp	r3, #4
 800480a:	d107      	bne.n	800481c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004814:	4313      	orrs	r3, r2
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	697a      	ldr	r2, [r7, #20]
 8004822:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	695b      	ldr	r3, [r3, #20]
 800482a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004838:	697a      	ldr	r2, [r7, #20]
 800483a:	4313      	orrs	r3, r2
 800483c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004842:	2b04      	cmp	r3, #4
 8004844:	d117      	bne.n	8004876 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800484a:	697a      	ldr	r2, [r7, #20]
 800484c:	4313      	orrs	r3, r2
 800484e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 fa91 	bl	8004d80 <DMA_CheckFifoParam>
 800485e:	4603      	mov	r3, r0
 8004860:	2b00      	cmp	r3, #0
 8004862:	d008      	beq.n	8004876 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2240      	movs	r2, #64	@ 0x40
 8004868:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2201      	movs	r2, #1
 800486e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004872:	2301      	movs	r3, #1
 8004874:	e016      	b.n	80048a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fa48 	bl	8004d14 <DMA_CalcBaseAndBitshift>
 8004884:	4603      	mov	r3, r0
 8004886:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800488c:	223f      	movs	r2, #63	@ 0x3f
 800488e:	409a      	lsls	r2, r3
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	f010803f 	.word	0xf010803f

080048b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	60f8      	str	r0, [r7, #12]
 80048b8:	60b9      	str	r1, [r7, #8]
 80048ba:	607a      	str	r2, [r7, #4]
 80048bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80048be:	2300      	movs	r3, #0
 80048c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d101      	bne.n	80048d6 <HAL_DMA_Start_IT+0x26>
 80048d2:	2302      	movs	r3, #2
 80048d4:	e040      	b.n	8004958 <HAL_DMA_Start_IT+0xa8>
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2201      	movs	r2, #1
 80048da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	2b01      	cmp	r3, #1
 80048e8:	d12f      	bne.n	800494a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80048f8:	683b      	ldr	r3, [r7, #0]
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	68b9      	ldr	r1, [r7, #8]
 80048fe:	68f8      	ldr	r0, [r7, #12]
 8004900:	f000 f9da 	bl	8004cb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004908:	223f      	movs	r2, #63	@ 0x3f
 800490a:	409a      	lsls	r2, r3
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f042 0216 	orr.w	r2, r2, #22
 800491e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004924:	2b00      	cmp	r3, #0
 8004926:	d007      	beq.n	8004938 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f042 0208 	orr.w	r2, r2, #8
 8004936:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f042 0201 	orr.w	r2, r2, #1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e005      	b.n	8004956 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004952:	2302      	movs	r3, #2
 8004954:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004956:	7dfb      	ldrb	r3, [r7, #23]
}
 8004958:	4618      	mov	r0, r3
 800495a:	3718      	adds	r7, #24
 800495c:	46bd      	mov	sp, r7
 800495e:	bd80      	pop	{r7, pc}

08004960 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004960:	b480      	push	{r7}
 8004962:	b083      	sub	sp, #12
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d004      	beq.n	800497e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2280      	movs	r2, #128	@ 0x80
 8004978:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e00c      	b.n	8004998 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2205      	movs	r2, #5
 8004982:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f022 0201 	bic.w	r2, r2, #1
 8004994:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	370c      	adds	r7, #12
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80049ac:	2300      	movs	r3, #0
 80049ae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80049b0:	4b8e      	ldr	r3, [pc, #568]	@ (8004bec <HAL_DMA_IRQHandler+0x248>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	4a8e      	ldr	r2, [pc, #568]	@ (8004bf0 <HAL_DMA_IRQHandler+0x24c>)
 80049b6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ba:	0a9b      	lsrs	r3, r3, #10
 80049bc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049c2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049ce:	2208      	movs	r2, #8
 80049d0:	409a      	lsls	r2, r3
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4013      	ands	r3, r2
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d01a      	beq.n	8004a10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f003 0304 	and.w	r3, r3, #4
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d013      	beq.n	8004a10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f022 0204 	bic.w	r2, r2, #4
 80049f6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049fc:	2208      	movs	r2, #8
 80049fe:	409a      	lsls	r2, r3
 8004a00:	693b      	ldr	r3, [r7, #16]
 8004a02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a08:	f043 0201 	orr.w	r2, r3, #1
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a14:	2201      	movs	r2, #1
 8004a16:	409a      	lsls	r2, r3
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	4013      	ands	r3, r2
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d012      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00b      	beq.n	8004a46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a32:	2201      	movs	r2, #1
 8004a34:	409a      	lsls	r2, r3
 8004a36:	693b      	ldr	r3, [r7, #16]
 8004a38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a3e:	f043 0202 	orr.w	r2, r3, #2
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a4a:	2204      	movs	r2, #4
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	4013      	ands	r3, r2
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d012      	beq.n	8004a7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d00b      	beq.n	8004a7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a68:	2204      	movs	r2, #4
 8004a6a:	409a      	lsls	r2, r3
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a80:	2210      	movs	r2, #16
 8004a82:	409a      	lsls	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	4013      	ands	r3, r2
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d043      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d03c      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a9e:	2210      	movs	r2, #16
 8004aa0:	409a      	lsls	r2, r3
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d018      	beq.n	8004ae6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d108      	bne.n	8004ad4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d024      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	4798      	blx	r3
 8004ad2:	e01f      	b.n	8004b14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01b      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	4798      	blx	r3
 8004ae4:	e016      	b.n	8004b14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d107      	bne.n	8004b04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	681a      	ldr	r2, [r3, #0]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f022 0208 	bic.w	r2, r2, #8
 8004b02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b18:	2220      	movs	r2, #32
 8004b1a:	409a      	lsls	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 808f 	beq.w	8004c44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f003 0310 	and.w	r3, r3, #16
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	f000 8087 	beq.w	8004c44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b3a:	2220      	movs	r2, #32
 8004b3c:	409a      	lsls	r2, r3
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b05      	cmp	r3, #5
 8004b4c:	d136      	bne.n	8004bbc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f022 0216 	bic.w	r2, r2, #22
 8004b5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	695a      	ldr	r2, [r3, #20]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d103      	bne.n	8004b7e <HAL_DMA_IRQHandler+0x1da>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	681a      	ldr	r2, [r3, #0]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0208 	bic.w	r2, r2, #8
 8004b8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b92:	223f      	movs	r2, #63	@ 0x3f
 8004b94:	409a      	lsls	r2, r3
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d07e      	beq.n	8004cb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	4798      	blx	r3
        }
        return;
 8004bba:	e079      	b.n	8004cb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d01d      	beq.n	8004c06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d031      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	4798      	blx	r3
 8004be8:	e02c      	b.n	8004c44 <HAL_DMA_IRQHandler+0x2a0>
 8004bea:	bf00      	nop
 8004bec:	20000004 	.word	0x20000004
 8004bf0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d023      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	4798      	blx	r3
 8004c04:	e01e      	b.n	8004c44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10f      	bne.n	8004c34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f022 0210 	bic.w	r2, r2, #16
 8004c22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d003      	beq.n	8004c44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c40:	6878      	ldr	r0, [r7, #4]
 8004c42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d032      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d022      	beq.n	8004c9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	2205      	movs	r2, #5
 8004c5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	681a      	ldr	r2, [r3, #0]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f022 0201 	bic.w	r2, r2, #1
 8004c6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	3301      	adds	r3, #1
 8004c74:	60bb      	str	r3, [r7, #8]
 8004c76:	697a      	ldr	r2, [r7, #20]
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d307      	bcc.n	8004c8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f003 0301 	and.w	r3, r3, #1
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d1f2      	bne.n	8004c70 <HAL_DMA_IRQHandler+0x2cc>
 8004c8a:	e000      	b.n	8004c8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2201      	movs	r2, #1
 8004c92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d005      	beq.n	8004cb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	4798      	blx	r3
 8004cae:	e000      	b.n	8004cb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004cb0:	bf00      	nop
    }
  }
}
 8004cb2:	3718      	adds	r7, #24
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	bd80      	pop	{r7, pc}

08004cb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b085      	sub	sp, #20
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	60f8      	str	r0, [r7, #12]
 8004cc0:	60b9      	str	r1, [r7, #8]
 8004cc2:	607a      	str	r2, [r7, #4]
 8004cc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	681a      	ldr	r2, [r3, #0]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004cd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	683a      	ldr	r2, [r7, #0]
 8004cdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	2b40      	cmp	r3, #64	@ 0x40
 8004ce4:	d108      	bne.n	8004cf8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cf6:	e007      	b.n	8004d08 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	68ba      	ldr	r2, [r7, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	60da      	str	r2, [r3, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr

08004d14 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	3b10      	subs	r3, #16
 8004d24:	4a14      	ldr	r2, [pc, #80]	@ (8004d78 <DMA_CalcBaseAndBitshift+0x64>)
 8004d26:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2a:	091b      	lsrs	r3, r3, #4
 8004d2c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d2e:	4a13      	ldr	r2, [pc, #76]	@ (8004d7c <DMA_CalcBaseAndBitshift+0x68>)
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	461a      	mov	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2b03      	cmp	r3, #3
 8004d40:	d909      	bls.n	8004d56 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d4a:	f023 0303 	bic.w	r3, r3, #3
 8004d4e:	1d1a      	adds	r2, r3, #4
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	659a      	str	r2, [r3, #88]	@ 0x58
 8004d54:	e007      	b.n	8004d66 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004d5e:	f023 0303 	bic.w	r3, r3, #3
 8004d62:	687a      	ldr	r2, [r7, #4]
 8004d64:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	aaaaaaab 	.word	0xaaaaaaab
 8004d7c:	08017990 	.word	0x08017990

08004d80 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b085      	sub	sp, #20
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d88:	2300      	movs	r3, #0
 8004d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d90:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	699b      	ldr	r3, [r3, #24]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d11f      	bne.n	8004dda <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	2b03      	cmp	r3, #3
 8004d9e:	d856      	bhi.n	8004e4e <DMA_CheckFifoParam+0xce>
 8004da0:	a201      	add	r2, pc, #4	@ (adr r2, 8004da8 <DMA_CheckFifoParam+0x28>)
 8004da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da6:	bf00      	nop
 8004da8:	08004db9 	.word	0x08004db9
 8004dac:	08004dcb 	.word	0x08004dcb
 8004db0:	08004db9 	.word	0x08004db9
 8004db4:	08004e4f 	.word	0x08004e4f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dbc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d046      	beq.n	8004e52 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dc8:	e043      	b.n	8004e52 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dce:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004dd2:	d140      	bne.n	8004e56 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004dd4:	2301      	movs	r3, #1
 8004dd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004dd8:	e03d      	b.n	8004e56 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004de2:	d121      	bne.n	8004e28 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	2b03      	cmp	r3, #3
 8004de8:	d837      	bhi.n	8004e5a <DMA_CheckFifoParam+0xda>
 8004dea:	a201      	add	r2, pc, #4	@ (adr r2, 8004df0 <DMA_CheckFifoParam+0x70>)
 8004dec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df0:	08004e01 	.word	0x08004e01
 8004df4:	08004e07 	.word	0x08004e07
 8004df8:	08004e01 	.word	0x08004e01
 8004dfc:	08004e19 	.word	0x08004e19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004e00:	2301      	movs	r3, #1
 8004e02:	73fb      	strb	r3, [r7, #15]
      break;
 8004e04:	e030      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e0a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d025      	beq.n	8004e5e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e16:	e022      	b.n	8004e5e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e1c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004e20:	d11f      	bne.n	8004e62 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004e22:	2301      	movs	r3, #1
 8004e24:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004e26:	e01c      	b.n	8004e62 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004e28:	68bb      	ldr	r3, [r7, #8]
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d903      	bls.n	8004e36 <DMA_CheckFifoParam+0xb6>
 8004e2e:	68bb      	ldr	r3, [r7, #8]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d003      	beq.n	8004e3c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e34:	e018      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e36:	2301      	movs	r3, #1
 8004e38:	73fb      	strb	r3, [r7, #15]
      break;
 8004e3a:	e015      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e40:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d00e      	beq.n	8004e66 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e00b      	b.n	8004e66 <DMA_CheckFifoParam+0xe6>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e00a      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e52:	bf00      	nop
 8004e54:	e008      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e56:	bf00      	nop
 8004e58:	e006      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5a:	bf00      	nop
 8004e5c:	e004      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e5e:	bf00      	nop
 8004e60:	e002      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e62:	bf00      	nop
 8004e64:	e000      	b.n	8004e68 <DMA_CheckFifoParam+0xe8>
      break;
 8004e66:	bf00      	nop
    }
  } 
  
  return status; 
 8004e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3714      	adds	r7, #20
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop

08004e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b089      	sub	sp, #36	@ 0x24
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
 8004e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e82:	2300      	movs	r3, #0
 8004e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e86:	2300      	movs	r3, #0
 8004e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e8e:	2300      	movs	r3, #0
 8004e90:	61fb      	str	r3, [r7, #28]
 8004e92:	e159      	b.n	8005148 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e94:	2201      	movs	r2, #1
 8004e96:	69fb      	ldr	r3, [r7, #28]
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4013      	ands	r3, r2
 8004ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ea8:	693a      	ldr	r2, [r7, #16]
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	f040 8148 	bne.w	8005142 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eb2:	683b      	ldr	r3, [r7, #0]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	f003 0303 	and.w	r3, r3, #3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d005      	beq.n	8004eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	685b      	ldr	r3, [r3, #4]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ec6:	2b02      	cmp	r3, #2
 8004ec8:	d130      	bne.n	8004f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	005b      	lsls	r3, r3, #1
 8004ed4:	2203      	movs	r2, #3
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	43db      	mvns	r3, r3
 8004edc:	69ba      	ldr	r2, [r7, #24]
 8004ede:	4013      	ands	r3, r2
 8004ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68da      	ldr	r2, [r3, #12]
 8004ee6:	69fb      	ldr	r3, [r7, #28]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	fa02 f303 	lsl.w	r3, r2, r3
 8004eee:	69ba      	ldr	r2, [r7, #24]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f00:	2201      	movs	r2, #1
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	fa02 f303 	lsl.w	r3, r2, r3
 8004f08:	43db      	mvns	r3, r3
 8004f0a:	69ba      	ldr	r2, [r7, #24]
 8004f0c:	4013      	ands	r3, r2
 8004f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f10:	683b      	ldr	r3, [r7, #0]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	091b      	lsrs	r3, r3, #4
 8004f16:	f003 0201 	and.w	r2, r3, #1
 8004f1a:	69fb      	ldr	r3, [r7, #28]
 8004f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f20:	69ba      	ldr	r2, [r7, #24]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	69ba      	ldr	r2, [r7, #24]
 8004f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0303 	and.w	r3, r3, #3
 8004f34:	2b03      	cmp	r3, #3
 8004f36:	d017      	beq.n	8004f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	68db      	ldr	r3, [r3, #12]
 8004f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	005b      	lsls	r3, r3, #1
 8004f42:	2203      	movs	r2, #3
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	005b      	lsls	r3, r3, #1
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4313      	orrs	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f003 0303 	and.w	r3, r3, #3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d123      	bne.n	8004fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f74:	69fb      	ldr	r3, [r7, #28]
 8004f76:	08da      	lsrs	r2, r3, #3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	3208      	adds	r2, #8
 8004f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	f003 0307 	and.w	r3, r3, #7
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	220f      	movs	r2, #15
 8004f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f90:	43db      	mvns	r3, r3
 8004f92:	69ba      	ldr	r2, [r7, #24]
 8004f94:	4013      	ands	r3, r2
 8004f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	691a      	ldr	r2, [r3, #16]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0307 	and.w	r3, r3, #7
 8004fa2:	009b      	lsls	r3, r3, #2
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	69ba      	ldr	r2, [r7, #24]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	3208      	adds	r2, #8
 8004fb6:	69b9      	ldr	r1, [r7, #24]
 8004fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	005b      	lsls	r3, r3, #1
 8004fc6:	2203      	movs	r2, #3
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	43db      	mvns	r3, r3
 8004fce:	69ba      	ldr	r2, [r7, #24]
 8004fd0:	4013      	ands	r3, r2
 8004fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fd4:	683b      	ldr	r3, [r7, #0]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	f003 0203 	and.w	r2, r3, #3
 8004fdc:	69fb      	ldr	r3, [r7, #28]
 8004fde:	005b      	lsls	r3, r3, #1
 8004fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fe4:	69ba      	ldr	r2, [r7, #24]
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	685b      	ldr	r3, [r3, #4]
 8004ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	f000 80a2 	beq.w	8005142 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ffe:	2300      	movs	r3, #0
 8005000:	60fb      	str	r3, [r7, #12]
 8005002:	4b57      	ldr	r3, [pc, #348]	@ (8005160 <HAL_GPIO_Init+0x2e8>)
 8005004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005006:	4a56      	ldr	r2, [pc, #344]	@ (8005160 <HAL_GPIO_Init+0x2e8>)
 8005008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800500c:	6453      	str	r3, [r2, #68]	@ 0x44
 800500e:	4b54      	ldr	r3, [pc, #336]	@ (8005160 <HAL_GPIO_Init+0x2e8>)
 8005010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800501a:	4a52      	ldr	r2, [pc, #328]	@ (8005164 <HAL_GPIO_Init+0x2ec>)
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	089b      	lsrs	r3, r3, #2
 8005020:	3302      	adds	r3, #2
 8005022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	220f      	movs	r2, #15
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	4013      	ands	r3, r2
 800503c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a49      	ldr	r2, [pc, #292]	@ (8005168 <HAL_GPIO_Init+0x2f0>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d019      	beq.n	800507a <HAL_GPIO_Init+0x202>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a48      	ldr	r2, [pc, #288]	@ (800516c <HAL_GPIO_Init+0x2f4>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d013      	beq.n	8005076 <HAL_GPIO_Init+0x1fe>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	4a47      	ldr	r2, [pc, #284]	@ (8005170 <HAL_GPIO_Init+0x2f8>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d00d      	beq.n	8005072 <HAL_GPIO_Init+0x1fa>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4a46      	ldr	r2, [pc, #280]	@ (8005174 <HAL_GPIO_Init+0x2fc>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d007      	beq.n	800506e <HAL_GPIO_Init+0x1f6>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	4a45      	ldr	r2, [pc, #276]	@ (8005178 <HAL_GPIO_Init+0x300>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d101      	bne.n	800506a <HAL_GPIO_Init+0x1f2>
 8005066:	2304      	movs	r3, #4
 8005068:	e008      	b.n	800507c <HAL_GPIO_Init+0x204>
 800506a:	2307      	movs	r3, #7
 800506c:	e006      	b.n	800507c <HAL_GPIO_Init+0x204>
 800506e:	2303      	movs	r3, #3
 8005070:	e004      	b.n	800507c <HAL_GPIO_Init+0x204>
 8005072:	2302      	movs	r3, #2
 8005074:	e002      	b.n	800507c <HAL_GPIO_Init+0x204>
 8005076:	2301      	movs	r3, #1
 8005078:	e000      	b.n	800507c <HAL_GPIO_Init+0x204>
 800507a:	2300      	movs	r3, #0
 800507c:	69fa      	ldr	r2, [r7, #28]
 800507e:	f002 0203 	and.w	r2, r2, #3
 8005082:	0092      	lsls	r2, r2, #2
 8005084:	4093      	lsls	r3, r2
 8005086:	69ba      	ldr	r2, [r7, #24]
 8005088:	4313      	orrs	r3, r2
 800508a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800508c:	4935      	ldr	r1, [pc, #212]	@ (8005164 <HAL_GPIO_Init+0x2ec>)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	089b      	lsrs	r3, r3, #2
 8005092:	3302      	adds	r3, #2
 8005094:	69ba      	ldr	r2, [r7, #24]
 8005096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800509a:	4b38      	ldr	r3, [pc, #224]	@ (800517c <HAL_GPIO_Init+0x304>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	43db      	mvns	r3, r3
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	4013      	ands	r3, r2
 80050a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80050b6:	69ba      	ldr	r2, [r7, #24]
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	4313      	orrs	r3, r2
 80050bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050be:	4a2f      	ldr	r2, [pc, #188]	@ (800517c <HAL_GPIO_Init+0x304>)
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050c4:	4b2d      	ldr	r3, [pc, #180]	@ (800517c <HAL_GPIO_Init+0x304>)
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	43db      	mvns	r3, r3
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4013      	ands	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d003      	beq.n	80050e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050e8:	4a24      	ldr	r2, [pc, #144]	@ (800517c <HAL_GPIO_Init+0x304>)
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050ee:	4b23      	ldr	r3, [pc, #140]	@ (800517c <HAL_GPIO_Init+0x304>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	43db      	mvns	r3, r3
 80050f8:	69ba      	ldr	r2, [r7, #24]
 80050fa:	4013      	ands	r3, r2
 80050fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d003      	beq.n	8005112 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	4313      	orrs	r3, r2
 8005110:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005112:	4a1a      	ldr	r2, [pc, #104]	@ (800517c <HAL_GPIO_Init+0x304>)
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005118:	4b18      	ldr	r3, [pc, #96]	@ (800517c <HAL_GPIO_Init+0x304>)
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	43db      	mvns	r3, r3
 8005122:	69ba      	ldr	r2, [r7, #24]
 8005124:	4013      	ands	r3, r2
 8005126:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d003      	beq.n	800513c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	4313      	orrs	r3, r2
 800513a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800513c:	4a0f      	ldr	r2, [pc, #60]	@ (800517c <HAL_GPIO_Init+0x304>)
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	3301      	adds	r3, #1
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	2b0f      	cmp	r3, #15
 800514c:	f67f aea2 	bls.w	8004e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005150:	bf00      	nop
 8005152:	bf00      	nop
 8005154:	3724      	adds	r7, #36	@ 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	40023800 	.word	0x40023800
 8005164:	40013800 	.word	0x40013800
 8005168:	40020000 	.word	0x40020000
 800516c:	40020400 	.word	0x40020400
 8005170:	40020800 	.word	0x40020800
 8005174:	40020c00 	.word	0x40020c00
 8005178:	40021000 	.word	0x40021000
 800517c:	40013c00 	.word	0x40013c00

08005180 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	460b      	mov	r3, r1
 800518a:	807b      	strh	r3, [r7, #2]
 800518c:	4613      	mov	r3, r2
 800518e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005190:	787b      	ldrb	r3, [r7, #1]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005196:	887a      	ldrh	r2, [r7, #2]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800519c:	e003      	b.n	80051a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800519e:	887b      	ldrh	r3, [r7, #2]
 80051a0:	041a      	lsls	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	619a      	str	r2, [r3, #24]
}
 80051a6:	bf00      	nop
 80051a8:	370c      	adds	r7, #12
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
	...

080051b4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b082      	sub	sp, #8
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	4603      	mov	r3, r0
 80051bc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80051be:	4b08      	ldr	r3, [pc, #32]	@ (80051e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	88fb      	ldrh	r3, [r7, #6]
 80051c4:	4013      	ands	r3, r2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d006      	beq.n	80051d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80051ca:	4a05      	ldr	r2, [pc, #20]	@ (80051e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80051cc:	88fb      	ldrh	r3, [r7, #6]
 80051ce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80051d0:	88fb      	ldrh	r3, [r7, #6]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f7fb ffc0 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 80051d8:	bf00      	nop
 80051da:	3708      	adds	r7, #8
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}
 80051e0:	40013c00 	.word	0x40013c00

080051e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af02      	add	r7, sp, #8
 80051ea:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80051f2:	2301      	movs	r3, #1
 80051f4:	e101      	b.n	80053fa <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8005202:	b2db      	uxtb	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d106      	bne.n	8005216 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f009 fd67 	bl	800ece4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2203      	movs	r2, #3
 800521a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005224:	d102      	bne.n	800522c <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f003 ff5c 	bl	80090ee <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6818      	ldr	r0, [r3, #0]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	7c1a      	ldrb	r2, [r3, #16]
 800523e:	f88d 2000 	strb.w	r2, [sp]
 8005242:	3304      	adds	r3, #4
 8005244:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005246:	f003 fe3b 	bl	8008ec0 <USB_CoreInit>
 800524a:	4603      	mov	r3, r0
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2202      	movs	r2, #2
 8005254:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e0ce      	b.n	80053fa <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	2100      	movs	r1, #0
 8005262:	4618      	mov	r0, r3
 8005264:	f003 ff54 	bl	8009110 <USB_SetCurrentMode>
 8005268:	4603      	mov	r3, r0
 800526a:	2b00      	cmp	r3, #0
 800526c:	d005      	beq.n	800527a <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2202      	movs	r2, #2
 8005272:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e0bf      	b.n	80053fa <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800527a:	2300      	movs	r3, #0
 800527c:	73fb      	strb	r3, [r7, #15]
 800527e:	e04a      	b.n	8005316 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005280:	7bfa      	ldrb	r2, [r7, #15]
 8005282:	6879      	ldr	r1, [r7, #4]
 8005284:	4613      	mov	r3, r2
 8005286:	00db      	lsls	r3, r3, #3
 8005288:	4413      	add	r3, r2
 800528a:	009b      	lsls	r3, r3, #2
 800528c:	440b      	add	r3, r1
 800528e:	3315      	adds	r3, #21
 8005290:	2201      	movs	r2, #1
 8005292:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005294:	7bfa      	ldrb	r2, [r7, #15]
 8005296:	6879      	ldr	r1, [r7, #4]
 8005298:	4613      	mov	r3, r2
 800529a:	00db      	lsls	r3, r3, #3
 800529c:	4413      	add	r3, r2
 800529e:	009b      	lsls	r3, r3, #2
 80052a0:	440b      	add	r3, r1
 80052a2:	3314      	adds	r3, #20
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80052a8:	7bfa      	ldrb	r2, [r7, #15]
 80052aa:	7bfb      	ldrb	r3, [r7, #15]
 80052ac:	b298      	uxth	r0, r3
 80052ae:	6879      	ldr	r1, [r7, #4]
 80052b0:	4613      	mov	r3, r2
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	440b      	add	r3, r1
 80052ba:	332e      	adds	r3, #46	@ 0x2e
 80052bc:	4602      	mov	r2, r0
 80052be:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80052c0:	7bfa      	ldrb	r2, [r7, #15]
 80052c2:	6879      	ldr	r1, [r7, #4]
 80052c4:	4613      	mov	r3, r2
 80052c6:	00db      	lsls	r3, r3, #3
 80052c8:	4413      	add	r3, r2
 80052ca:	009b      	lsls	r3, r3, #2
 80052cc:	440b      	add	r3, r1
 80052ce:	3318      	adds	r3, #24
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80052d4:	7bfa      	ldrb	r2, [r7, #15]
 80052d6:	6879      	ldr	r1, [r7, #4]
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	331c      	adds	r3, #28
 80052e4:	2200      	movs	r2, #0
 80052e6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80052e8:	7bfa      	ldrb	r2, [r7, #15]
 80052ea:	6879      	ldr	r1, [r7, #4]
 80052ec:	4613      	mov	r3, r2
 80052ee:	00db      	lsls	r3, r3, #3
 80052f0:	4413      	add	r3, r2
 80052f2:	009b      	lsls	r3, r3, #2
 80052f4:	440b      	add	r3, r1
 80052f6:	3320      	adds	r3, #32
 80052f8:	2200      	movs	r2, #0
 80052fa:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80052fc:	7bfa      	ldrb	r2, [r7, #15]
 80052fe:	6879      	ldr	r1, [r7, #4]
 8005300:	4613      	mov	r3, r2
 8005302:	00db      	lsls	r3, r3, #3
 8005304:	4413      	add	r3, r2
 8005306:	009b      	lsls	r3, r3, #2
 8005308:	440b      	add	r3, r1
 800530a:	3324      	adds	r3, #36	@ 0x24
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	3301      	adds	r3, #1
 8005314:	73fb      	strb	r3, [r7, #15]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	791b      	ldrb	r3, [r3, #4]
 800531a:	7bfa      	ldrb	r2, [r7, #15]
 800531c:	429a      	cmp	r2, r3
 800531e:	d3af      	bcc.n	8005280 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005320:	2300      	movs	r3, #0
 8005322:	73fb      	strb	r3, [r7, #15]
 8005324:	e044      	b.n	80053b0 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005326:	7bfa      	ldrb	r2, [r7, #15]
 8005328:	6879      	ldr	r1, [r7, #4]
 800532a:	4613      	mov	r3, r2
 800532c:	00db      	lsls	r3, r3, #3
 800532e:	4413      	add	r3, r2
 8005330:	009b      	lsls	r3, r3, #2
 8005332:	440b      	add	r3, r1
 8005334:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005338:	2200      	movs	r2, #0
 800533a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800533c:	7bfa      	ldrb	r2, [r7, #15]
 800533e:	6879      	ldr	r1, [r7, #4]
 8005340:	4613      	mov	r3, r2
 8005342:	00db      	lsls	r3, r3, #3
 8005344:	4413      	add	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	440b      	add	r3, r1
 800534a:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 800534e:	7bfa      	ldrb	r2, [r7, #15]
 8005350:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005352:	7bfa      	ldrb	r2, [r7, #15]
 8005354:	6879      	ldr	r1, [r7, #4]
 8005356:	4613      	mov	r3, r2
 8005358:	00db      	lsls	r3, r3, #3
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005364:	2200      	movs	r2, #0
 8005366:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005368:	7bfa      	ldrb	r2, [r7, #15]
 800536a:	6879      	ldr	r1, [r7, #4]
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	4413      	add	r3, r2
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	440b      	add	r3, r1
 8005376:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800537a:	2200      	movs	r2, #0
 800537c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800537e:	7bfa      	ldrb	r2, [r7, #15]
 8005380:	6879      	ldr	r1, [r7, #4]
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005390:	2200      	movs	r2, #0
 8005392:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005394:	7bfa      	ldrb	r2, [r7, #15]
 8005396:	6879      	ldr	r1, [r7, #4]
 8005398:	4613      	mov	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	4413      	add	r3, r2
 800539e:	009b      	lsls	r3, r3, #2
 80053a0:	440b      	add	r3, r1
 80053a2:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80053aa:	7bfb      	ldrb	r3, [r7, #15]
 80053ac:	3301      	adds	r3, #1
 80053ae:	73fb      	strb	r3, [r7, #15]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	791b      	ldrb	r3, [r3, #4]
 80053b4:	7bfa      	ldrb	r2, [r7, #15]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d3b5      	bcc.n	8005326 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	7c1a      	ldrb	r2, [r3, #16]
 80053c2:	f88d 2000 	strb.w	r2, [sp]
 80053c6:	3304      	adds	r3, #4
 80053c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053ca:	f003 feed 	bl	80091a8 <USB_DevInit>
 80053ce:	4603      	mov	r3, r0
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d005      	beq.n	80053e0 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	2202      	movs	r2, #2
 80053d8:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80053dc:	2301      	movs	r3, #1
 80053de:	e00c      	b.n	80053fa <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2200      	movs	r2, #0
 80053e4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4618      	mov	r0, r3
 80053f4:	f004 ff37 	bl	800a266 <USB_DevDisconnect>

  return HAL_OK;
 80053f8:	2300      	movs	r3, #0
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005416:	2b01      	cmp	r3, #1
 8005418:	d101      	bne.n	800541e <HAL_PCD_Start+0x1c>
 800541a:	2302      	movs	r3, #2
 800541c:	e022      	b.n	8005464 <HAL_PCD_Start+0x62>
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2201      	movs	r2, #1
 8005422:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800542e:	2b00      	cmp	r3, #0
 8005430:	d009      	beq.n	8005446 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005436:	2b01      	cmp	r3, #1
 8005438:	d105      	bne.n	8005446 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800543e:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	4618      	mov	r0, r3
 800544c:	f003 fe3e 	bl	80090cc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	4618      	mov	r0, r3
 8005456:	f004 fee5 	bl	800a224 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005462:	2300      	movs	r3, #0
}
 8005464:	4618      	mov	r0, r3
 8005466:	3710      	adds	r7, #16
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800546c:	b590      	push	{r4, r7, lr}
 800546e:	b08d      	sub	sp, #52	@ 0x34
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800547a:	6a3b      	ldr	r3, [r7, #32]
 800547c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4618      	mov	r0, r3
 8005484:	f004 ffa3 	bl	800a3ce <USB_GetMode>
 8005488:	4603      	mov	r3, r0
 800548a:	2b00      	cmp	r3, #0
 800548c:	f040 848c 	bne.w	8005da8 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4618      	mov	r0, r3
 8005496:	f004 ff07 	bl	800a2a8 <USB_ReadInterrupts>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	f000 8482 	beq.w	8005da6 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a1b      	lsrs	r3, r3, #8
 80054ac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4618      	mov	r0, r3
 80054bc:	f004 fef4 	bl	800a2a8 <USB_ReadInterrupts>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f003 0302 	and.w	r3, r3, #2
 80054c6:	2b02      	cmp	r3, #2
 80054c8:	d107      	bne.n	80054da <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695a      	ldr	r2, [r3, #20]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f002 0202 	and.w	r2, r2, #2
 80054d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 fee2 	bl	800a2a8 <USB_ReadInterrupts>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f003 0310 	and.w	r3, r3, #16
 80054ea:	2b10      	cmp	r3, #16
 80054ec:	d161      	bne.n	80055b2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	699a      	ldr	r2, [r3, #24]
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f022 0210 	bic.w	r2, r2, #16
 80054fc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80054fe:	6a3b      	ldr	r3, [r7, #32]
 8005500:	6a1b      	ldr	r3, [r3, #32]
 8005502:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005504:	69bb      	ldr	r3, [r7, #24]
 8005506:	f003 020f 	and.w	r2, r3, #15
 800550a:	4613      	mov	r3, r2
 800550c:	00db      	lsls	r3, r3, #3
 800550e:	4413      	add	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005516:	687a      	ldr	r2, [r7, #4]
 8005518:	4413      	add	r3, r2
 800551a:	3304      	adds	r3, #4
 800551c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005528:	d124      	bne.n	8005574 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800552a:	69ba      	ldr	r2, [r7, #24]
 800552c:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d035      	beq.n	80055a2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800553a:	69bb      	ldr	r3, [r7, #24]
 800553c:	091b      	lsrs	r3, r3, #4
 800553e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005540:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005544:	b29b      	uxth	r3, r3
 8005546:	461a      	mov	r2, r3
 8005548:	6a38      	ldr	r0, [r7, #32]
 800554a:	f004 fd19 	bl	8009f80 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	68da      	ldr	r2, [r3, #12]
 8005552:	69bb      	ldr	r3, [r7, #24]
 8005554:	091b      	lsrs	r3, r3, #4
 8005556:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800555a:	441a      	add	r2, r3
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	695a      	ldr	r2, [r3, #20]
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	091b      	lsrs	r3, r3, #4
 8005568:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	615a      	str	r2, [r3, #20]
 8005572:	e016      	b.n	80055a2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800557a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800557e:	d110      	bne.n	80055a2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005586:	2208      	movs	r2, #8
 8005588:	4619      	mov	r1, r3
 800558a:	6a38      	ldr	r0, [r7, #32]
 800558c:	f004 fcf8 	bl	8009f80 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	695a      	ldr	r2, [r3, #20]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	091b      	lsrs	r3, r3, #4
 8005598:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800559c:	441a      	add	r2, r3
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	699a      	ldr	r2, [r3, #24]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f042 0210 	orr.w	r2, r2, #16
 80055b0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f004 fe76 	bl	800a2a8 <USB_ReadInterrupts>
 80055bc:	4603      	mov	r3, r0
 80055be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80055c2:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80055c6:	f040 80a7 	bne.w	8005718 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f004 fe7b 	bl	800a2ce <USB_ReadDevAllOutEpInterrupt>
 80055d8:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80055da:	e099      	b.n	8005710 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80055dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	f000 808e 	beq.w	8005704 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	4611      	mov	r1, r2
 80055f2:	4618      	mov	r0, r3
 80055f4:	f004 fe9f 	bl	800a336 <USB_ReadDevOutEPInterrupt>
 80055f8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	f003 0301 	and.w	r3, r3, #1
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00c      	beq.n	800561e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005606:	015a      	lsls	r2, r3, #5
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	4413      	add	r3, r2
 800560c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005610:	461a      	mov	r2, r3
 8005612:	2301      	movs	r3, #1
 8005614:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005618:	6878      	ldr	r0, [r7, #4]
 800561a:	f000 fea3 	bl	8006364 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	f003 0308 	and.w	r3, r3, #8
 8005624:	2b00      	cmp	r3, #0
 8005626:	d00c      	beq.n	8005642 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562a:	015a      	lsls	r2, r3, #5
 800562c:	69fb      	ldr	r3, [r7, #28]
 800562e:	4413      	add	r3, r2
 8005630:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005634:	461a      	mov	r2, r3
 8005636:	2308      	movs	r3, #8
 8005638:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800563a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800563c:	6878      	ldr	r0, [r7, #4]
 800563e:	f000 ff79 	bl	8006534 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f003 0310 	and.w	r3, r3, #16
 8005648:	2b00      	cmp	r3, #0
 800564a:	d008      	beq.n	800565e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800564c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800564e:	015a      	lsls	r2, r3, #5
 8005650:	69fb      	ldr	r3, [r7, #28]
 8005652:	4413      	add	r3, r2
 8005654:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005658:	461a      	mov	r2, r3
 800565a:	2310      	movs	r3, #16
 800565c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f003 0302 	and.w	r3, r3, #2
 8005664:	2b00      	cmp	r3, #0
 8005666:	d030      	beq.n	80056ca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005668:	6a3b      	ldr	r3, [r7, #32]
 800566a:	695b      	ldr	r3, [r3, #20]
 800566c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005670:	2b80      	cmp	r3, #128	@ 0x80
 8005672:	d109      	bne.n	8005688 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005674:	69fb      	ldr	r3, [r7, #28]
 8005676:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800567a:	685b      	ldr	r3, [r3, #4]
 800567c:	69fa      	ldr	r2, [r7, #28]
 800567e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005682:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005686:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800568a:	4613      	mov	r3, r2
 800568c:	00db      	lsls	r3, r3, #3
 800568e:	4413      	add	r3, r2
 8005690:	009b      	lsls	r3, r3, #2
 8005692:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005696:	687a      	ldr	r2, [r7, #4]
 8005698:	4413      	add	r3, r2
 800569a:	3304      	adds	r3, #4
 800569c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	78db      	ldrb	r3, [r3, #3]
 80056a2:	2b01      	cmp	r3, #1
 80056a4:	d108      	bne.n	80056b8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	2200      	movs	r2, #0
 80056aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80056ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	4619      	mov	r1, r3
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f009 fc12 	bl	800eedc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80056b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ba:	015a      	lsls	r2, r3, #5
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	4413      	add	r3, r2
 80056c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056c4:	461a      	mov	r2, r3
 80056c6:	2302      	movs	r3, #2
 80056c8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	f003 0320 	and.w	r3, r3, #32
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d008      	beq.n	80056e6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80056d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	69fb      	ldr	r3, [r7, #28]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e0:	461a      	mov	r2, r3
 80056e2:	2320      	movs	r3, #32
 80056e4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d009      	beq.n	8005704 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80056f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056f2:	015a      	lsls	r2, r3, #5
 80056f4:	69fb      	ldr	r3, [r7, #28]
 80056f6:	4413      	add	r3, r2
 80056f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056fc:	461a      	mov	r2, r3
 80056fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005702:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005704:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005706:	3301      	adds	r3, #1
 8005708:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800570a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800570c:	085b      	lsrs	r3, r3, #1
 800570e:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005712:	2b00      	cmp	r3, #0
 8005714:	f47f af62 	bne.w	80055dc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	4618      	mov	r0, r3
 800571e:	f004 fdc3 	bl	800a2a8 <USB_ReadInterrupts>
 8005722:	4603      	mov	r3, r0
 8005724:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005728:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800572c:	f040 80db 	bne.w	80058e6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4618      	mov	r0, r3
 8005736:	f004 fde4 	bl	800a302 <USB_ReadDevAllInEpInterrupt>
 800573a:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005740:	e0cd      	b.n	80058de <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005744:	f003 0301 	and.w	r3, r3, #1
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 80c2 	beq.w	80058d2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005754:	b2d2      	uxtb	r2, r2
 8005756:	4611      	mov	r1, r2
 8005758:	4618      	mov	r0, r3
 800575a:	f004 fe0a 	bl	800a372 <USB_ReadDevInEPInterrupt>
 800575e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b00      	cmp	r3, #0
 8005768:	d057      	beq.n	800581a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	f003 030f 	and.w	r3, r3, #15
 8005770:	2201      	movs	r2, #1
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800577e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	43db      	mvns	r3, r3
 8005784:	69f9      	ldr	r1, [r7, #28]
 8005786:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800578a:	4013      	ands	r3, r2
 800578c:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800578e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005790:	015a      	lsls	r2, r3, #5
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	4413      	add	r3, r2
 8005796:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800579a:	461a      	mov	r2, r3
 800579c:	2301      	movs	r3, #1
 800579e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	799b      	ldrb	r3, [r3, #6]
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d132      	bne.n	800580e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80057a8:	6879      	ldr	r1, [r7, #4]
 80057aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ac:	4613      	mov	r3, r2
 80057ae:	00db      	lsls	r3, r3, #3
 80057b0:	4413      	add	r3, r2
 80057b2:	009b      	lsls	r3, r3, #2
 80057b4:	440b      	add	r3, r1
 80057b6:	3320      	adds	r3, #32
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	6878      	ldr	r0, [r7, #4]
 80057bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057be:	4613      	mov	r3, r2
 80057c0:	00db      	lsls	r3, r3, #3
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4403      	add	r3, r0
 80057c8:	331c      	adds	r3, #28
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	4419      	add	r1, r3
 80057ce:	6878      	ldr	r0, [r7, #4]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d2:	4613      	mov	r3, r2
 80057d4:	00db      	lsls	r3, r3, #3
 80057d6:	4413      	add	r3, r2
 80057d8:	009b      	lsls	r3, r3, #2
 80057da:	4403      	add	r3, r0
 80057dc:	3320      	adds	r3, #32
 80057de:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80057e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d113      	bne.n	800580e <HAL_PCD_IRQHandler+0x3a2>
 80057e6:	6879      	ldr	r1, [r7, #4]
 80057e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ea:	4613      	mov	r3, r2
 80057ec:	00db      	lsls	r3, r3, #3
 80057ee:	4413      	add	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	440b      	add	r3, r1
 80057f4:	3324      	adds	r3, #36	@ 0x24
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d108      	bne.n	800580e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6818      	ldr	r0, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005806:	461a      	mov	r2, r3
 8005808:	2101      	movs	r1, #1
 800580a:	f004 fe11 	bl	800a430 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	b2db      	uxtb	r3, r3
 8005812:	4619      	mov	r1, r3
 8005814:	6878      	ldr	r0, [r7, #4]
 8005816:	f009 fae6 	bl	800ede6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800581a:	693b      	ldr	r3, [r7, #16]
 800581c:	f003 0308 	and.w	r3, r3, #8
 8005820:	2b00      	cmp	r3, #0
 8005822:	d008      	beq.n	8005836 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005824:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005826:	015a      	lsls	r2, r3, #5
 8005828:	69fb      	ldr	r3, [r7, #28]
 800582a:	4413      	add	r3, r2
 800582c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005830:	461a      	mov	r2, r3
 8005832:	2308      	movs	r3, #8
 8005834:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005836:	693b      	ldr	r3, [r7, #16]
 8005838:	f003 0310 	and.w	r3, r3, #16
 800583c:	2b00      	cmp	r3, #0
 800583e:	d008      	beq.n	8005852 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	015a      	lsls	r2, r3, #5
 8005844:	69fb      	ldr	r3, [r7, #28]
 8005846:	4413      	add	r3, r2
 8005848:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800584c:	461a      	mov	r2, r3
 800584e:	2310      	movs	r3, #16
 8005850:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d008      	beq.n	800586e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800585c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800585e:	015a      	lsls	r2, r3, #5
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	4413      	add	r3, r2
 8005864:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005868:	461a      	mov	r2, r3
 800586a:	2340      	movs	r3, #64	@ 0x40
 800586c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	f003 0302 	and.w	r3, r3, #2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d023      	beq.n	80058c0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005878:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800587a:	6a38      	ldr	r0, [r7, #32]
 800587c:	f003 fdf8 	bl	8009470 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005880:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005882:	4613      	mov	r3, r2
 8005884:	00db      	lsls	r3, r3, #3
 8005886:	4413      	add	r3, r2
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	3310      	adds	r3, #16
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	4413      	add	r3, r2
 8005890:	3304      	adds	r3, #4
 8005892:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	78db      	ldrb	r3, [r3, #3]
 8005898:	2b01      	cmp	r3, #1
 800589a:	d108      	bne.n	80058ae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	2200      	movs	r2, #0
 80058a0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	4619      	mov	r1, r3
 80058a8:	6878      	ldr	r0, [r7, #4]
 80058aa:	f009 fb29 	bl	800ef00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80058ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ba:	461a      	mov	r2, r3
 80058bc:	2302      	movs	r3, #2
 80058be:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d003      	beq.n	80058d2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80058ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058cc:	6878      	ldr	r0, [r7, #4]
 80058ce:	f000 fcbd 	bl	800624c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80058d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058d4:	3301      	adds	r3, #1
 80058d6:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80058d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058da:	085b      	lsrs	r3, r3, #1
 80058dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80058de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	f47f af2e 	bne.w	8005742 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	4618      	mov	r0, r3
 80058ec:	f004 fcdc 	bl	800a2a8 <USB_ReadInterrupts>
 80058f0:	4603      	mov	r3, r0
 80058f2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80058f6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80058fa:	d122      	bne.n	8005942 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005902:	685b      	ldr	r3, [r3, #4]
 8005904:	69fa      	ldr	r2, [r7, #28]
 8005906:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800590a:	f023 0301 	bic.w	r3, r3, #1
 800590e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005916:	2b01      	cmp	r3, #1
 8005918:	d108      	bne.n	800592c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005922:	2100      	movs	r1, #0
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f000 fea3 	bl	8006670 <HAL_PCDEx_LPM_Callback>
 800592a:	e002      	b.n	8005932 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	f009 fac7 	bl	800eec0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	695a      	ldr	r2, [r3, #20]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005940:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4618      	mov	r0, r3
 8005948:	f004 fcae 	bl	800a2a8 <USB_ReadInterrupts>
 800594c:	4603      	mov	r3, r0
 800594e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005952:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005956:	d112      	bne.n	800597e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f003 0301 	and.w	r3, r3, #1
 8005964:	2b01      	cmp	r3, #1
 8005966:	d102      	bne.n	800596e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f009 fa83 	bl	800ee74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	695a      	ldr	r2, [r3, #20]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 800597c:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4618      	mov	r0, r3
 8005984:	f004 fc90 	bl	800a2a8 <USB_ReadInterrupts>
 8005988:	4603      	mov	r3, r0
 800598a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800598e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005992:	f040 80b7 	bne.w	8005b04 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	69fa      	ldr	r2, [r7, #28]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059a4:	f023 0301 	bic.w	r3, r3, #1
 80059a8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2110      	movs	r1, #16
 80059b0:	4618      	mov	r0, r3
 80059b2:	f003 fd5d 	bl	8009470 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80059b6:	2300      	movs	r3, #0
 80059b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80059ba:	e046      	b.n	8005a4a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80059bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059be:	015a      	lsls	r2, r3, #5
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	4413      	add	r3, r2
 80059c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059c8:	461a      	mov	r2, r3
 80059ca:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80059ce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059d2:	015a      	lsls	r2, r3, #5
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	4413      	add	r3, r2
 80059d8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059e0:	0151      	lsls	r1, r2, #5
 80059e2:	69fa      	ldr	r2, [r7, #28]
 80059e4:	440a      	add	r2, r1
 80059e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059ea:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059ee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80059f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059f2:	015a      	lsls	r2, r3, #5
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	4413      	add	r3, r2
 80059f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80059fc:	461a      	mov	r2, r3
 80059fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005a02:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a06:	015a      	lsls	r2, r3, #5
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a14:	0151      	lsls	r1, r2, #5
 8005a16:	69fa      	ldr	r2, [r7, #28]
 8005a18:	440a      	add	r2, r1
 8005a1a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a1e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005a22:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005a24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005a3e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005a42:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005a44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a46:	3301      	adds	r3, #1
 8005a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	791b      	ldrb	r3, [r3, #4]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d3b2      	bcc.n	80059bc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5c:	69db      	ldr	r3, [r3, #28]
 8005a5e:	69fa      	ldr	r2, [r7, #28]
 8005a60:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a64:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005a68:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	7bdb      	ldrb	r3, [r3, #15]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d016      	beq.n	8005aa0 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a7c:	69fa      	ldr	r2, [r7, #28]
 8005a7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a82:	f043 030b 	orr.w	r3, r3, #11
 8005a86:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005a8a:	69fb      	ldr	r3, [r7, #28]
 8005a8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005a92:	69fa      	ldr	r2, [r7, #28]
 8005a94:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a98:	f043 030b 	orr.w	r3, r3, #11
 8005a9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8005a9e:	e015      	b.n	8005acc <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005aa6:	695b      	ldr	r3, [r3, #20]
 8005aa8:	69fa      	ldr	r2, [r7, #28]
 8005aaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005aae:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005ab2:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005ab6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	69fa      	ldr	r2, [r7, #28]
 8005ac2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ac6:	f043 030b 	orr.w	r3, r3, #11
 8005aca:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	69fa      	ldr	r2, [r7, #28]
 8005ad6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ada:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ade:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6818      	ldr	r0, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005aee:	461a      	mov	r2, r3
 8005af0:	f004 fc9e 	bl	800a430 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	695a      	ldr	r2, [r3, #20]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005b02:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f004 fbcd 	bl	800a2a8 <USB_ReadInterrupts>
 8005b0e:	4603      	mov	r3, r0
 8005b10:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005b14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005b18:	d123      	bne.n	8005b62 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f004 fc63 	bl	800a3ea <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4618      	mov	r0, r3
 8005b2a:	f003 fd1a 	bl	8009562 <USB_GetDevSpeed>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	461a      	mov	r2, r3
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681c      	ldr	r4, [r3, #0]
 8005b3a:	f001 f9c9 	bl	8006ed0 <HAL_RCC_GetHCLKFreq>
 8005b3e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005b44:	461a      	mov	r2, r3
 8005b46:	4620      	mov	r0, r4
 8005b48:	f003 fa1e 	bl	8008f88 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f009 f972 	bl	800ee36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	695a      	ldr	r2, [r3, #20]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005b60:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4618      	mov	r0, r3
 8005b68:	f004 fb9e 	bl	800a2a8 <USB_ReadInterrupts>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	f003 0308 	and.w	r3, r3, #8
 8005b72:	2b08      	cmp	r3, #8
 8005b74:	d10a      	bne.n	8005b8c <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f009 f94f 	bl	800ee1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	695a      	ldr	r2, [r3, #20]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f002 0208 	and.w	r2, r2, #8
 8005b8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4618      	mov	r0, r3
 8005b92:	f004 fb89 	bl	800a2a8 <USB_ReadInterrupts>
 8005b96:	4603      	mov	r3, r0
 8005b98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b9c:	2b80      	cmp	r3, #128	@ 0x80
 8005b9e:	d123      	bne.n	8005be8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
 8005ba2:	699b      	ldr	r3, [r3, #24]
 8005ba4:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ba8:	6a3b      	ldr	r3, [r7, #32]
 8005baa:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bac:	2301      	movs	r3, #1
 8005bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bb0:	e014      	b.n	8005bdc <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005bb2:	6879      	ldr	r1, [r7, #4]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	440b      	add	r3, r1
 8005bc0:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005bc4:	781b      	ldrb	r3, [r3, #0]
 8005bc6:	2b01      	cmp	r3, #1
 8005bc8:	d105      	bne.n	8005bd6 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	b2db      	uxtb	r3, r3
 8005bce:	4619      	mov	r1, r3
 8005bd0:	6878      	ldr	r0, [r7, #4]
 8005bd2:	f000 fb0a 	bl	80061ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	3301      	adds	r3, #1
 8005bda:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	791b      	ldrb	r3, [r3, #4]
 8005be0:	461a      	mov	r2, r3
 8005be2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be4:	4293      	cmp	r3, r2
 8005be6:	d3e4      	bcc.n	8005bb2 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4618      	mov	r0, r3
 8005bee:	f004 fb5b 	bl	800a2a8 <USB_ReadInterrupts>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005bf8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005bfc:	d13c      	bne.n	8005c78 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bfe:	2301      	movs	r3, #1
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c02:	e02b      	b.n	8005c5c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c14:	6879      	ldr	r1, [r7, #4]
 8005c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c18:	4613      	mov	r3, r2
 8005c1a:	00db      	lsls	r3, r3, #3
 8005c1c:	4413      	add	r3, r2
 8005c1e:	009b      	lsls	r3, r3, #2
 8005c20:	440b      	add	r3, r1
 8005c22:	3318      	adds	r3, #24
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d115      	bne.n	8005c56 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005c2a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	da12      	bge.n	8005c56 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005c30:	6879      	ldr	r1, [r7, #4]
 8005c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c34:	4613      	mov	r3, r2
 8005c36:	00db      	lsls	r3, r3, #3
 8005c38:	4413      	add	r3, r2
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	440b      	add	r3, r1
 8005c3e:	3317      	adds	r3, #23
 8005c40:	2201      	movs	r2, #1
 8005c42:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 faca 	bl	80061ea <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c58:	3301      	adds	r3, #1
 8005c5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	791b      	ldrb	r3, [r3, #4]
 8005c60:	461a      	mov	r2, r3
 8005c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c64:	4293      	cmp	r3, r2
 8005c66:	d3cd      	bcc.n	8005c04 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695a      	ldr	r2, [r3, #20]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005c76:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f004 fb13 	bl	800a2a8 <USB_ReadInterrupts>
 8005c82:	4603      	mov	r3, r0
 8005c84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005c88:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005c8c:	d156      	bne.n	8005d3c <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c8e:	2301      	movs	r3, #1
 8005c90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c92:	e045      	b.n	8005d20 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c96:	015a      	lsls	r2, r3, #5
 8005c98:	69fb      	ldr	r3, [r7, #28]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005ca4:	6879      	ldr	r1, [r7, #4]
 8005ca6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ca8:	4613      	mov	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	4413      	add	r3, r2
 8005cae:	009b      	lsls	r3, r3, #2
 8005cb0:	440b      	add	r3, r1
 8005cb2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005cb6:	781b      	ldrb	r3, [r3, #0]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d12e      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cbc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	da2b      	bge.n	8005d1a <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005cce:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d121      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005cd6:	6879      	ldr	r1, [r7, #4]
 8005cd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cda:	4613      	mov	r3, r2
 8005cdc:	00db      	lsls	r3, r3, #3
 8005cde:	4413      	add	r3, r2
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	440b      	add	r3, r1
 8005ce4:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005ce8:	2201      	movs	r2, #1
 8005cea:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005cec:	6a3b      	ldr	r3, [r7, #32]
 8005cee:	699b      	ldr	r3, [r3, #24]
 8005cf0:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005cf4:	6a3b      	ldr	r3, [r7, #32]
 8005cf6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005cf8:	6a3b      	ldr	r3, [r7, #32]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d10a      	bne.n	8005d1a <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	69fa      	ldr	r2, [r7, #28]
 8005d0e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005d16:	6053      	str	r3, [r2, #4]
            break;
 8005d18:	e008      	b.n	8005d2c <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d1c:	3301      	adds	r3, #1
 8005d1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	791b      	ldrb	r3, [r3, #4]
 8005d24:	461a      	mov	r2, r3
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	4293      	cmp	r3, r2
 8005d2a:	d3b3      	bcc.n	8005c94 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	695a      	ldr	r2, [r3, #20]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005d3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4618      	mov	r0, r3
 8005d42:	f004 fab1 	bl	800a2a8 <USB_ReadInterrupts>
 8005d46:	4603      	mov	r3, r0
 8005d48:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d50:	d10a      	bne.n	8005d68 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f009 f8e6 	bl	800ef24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	695a      	ldr	r2, [r3, #20]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005d66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4618      	mov	r0, r3
 8005d6e:	f004 fa9b 	bl	800a2a8 <USB_ReadInterrupts>
 8005d72:	4603      	mov	r3, r0
 8005d74:	f003 0304 	and.w	r3, r3, #4
 8005d78:	2b04      	cmp	r3, #4
 8005d7a:	d115      	bne.n	8005da8 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f003 0304 	and.w	r3, r3, #4
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d002      	beq.n	8005d94 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f009 f8d6 	bl	800ef40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	6859      	ldr	r1, [r3, #4]
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69ba      	ldr	r2, [r7, #24]
 8005da0:	430a      	orrs	r2, r1
 8005da2:	605a      	str	r2, [r3, #4]
 8005da4:	e000      	b.n	8005da8 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005da6:	bf00      	nop
    }
  }
}
 8005da8:	3734      	adds	r7, #52	@ 0x34
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd90      	pop	{r4, r7, pc}

08005dae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b082      	sub	sp, #8
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	6078      	str	r0, [r7, #4]
 8005db6:	460b      	mov	r3, r1
 8005db8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dc0:	2b01      	cmp	r3, #1
 8005dc2:	d101      	bne.n	8005dc8 <HAL_PCD_SetAddress+0x1a>
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	e012      	b.n	8005dee <HAL_PCD_SetAddress+0x40>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2201      	movs	r2, #1
 8005dcc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	78fa      	ldrb	r2, [r7, #3]
 8005dd4:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	78fa      	ldrb	r2, [r7, #3]
 8005ddc:	4611      	mov	r1, r2
 8005dde:	4618      	mov	r0, r3
 8005de0:	f004 f9fa 	bl	800a1d8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3708      	adds	r7, #8
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	4608      	mov	r0, r1
 8005e00:	4611      	mov	r1, r2
 8005e02:	461a      	mov	r2, r3
 8005e04:	4603      	mov	r3, r0
 8005e06:	70fb      	strb	r3, [r7, #3]
 8005e08:	460b      	mov	r3, r1
 8005e0a:	803b      	strh	r3, [r7, #0]
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e10:	2300      	movs	r3, #0
 8005e12:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005e14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	da0f      	bge.n	8005e3c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e1c:	78fb      	ldrb	r3, [r7, #3]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	4613      	mov	r3, r2
 8005e24:	00db      	lsls	r3, r3, #3
 8005e26:	4413      	add	r3, r2
 8005e28:	009b      	lsls	r3, r3, #2
 8005e2a:	3310      	adds	r3, #16
 8005e2c:	687a      	ldr	r2, [r7, #4]
 8005e2e:	4413      	add	r3, r2
 8005e30:	3304      	adds	r3, #4
 8005e32:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2201      	movs	r2, #1
 8005e38:	705a      	strb	r2, [r3, #1]
 8005e3a:	e00f      	b.n	8005e5c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e3c:	78fb      	ldrb	r3, [r7, #3]
 8005e3e:	f003 020f 	and.w	r2, r3, #15
 8005e42:	4613      	mov	r3, r2
 8005e44:	00db      	lsls	r3, r3, #3
 8005e46:	4413      	add	r3, r2
 8005e48:	009b      	lsls	r3, r3, #2
 8005e4a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	4413      	add	r3, r2
 8005e52:	3304      	adds	r3, #4
 8005e54:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	f003 030f 	and.w	r3, r3, #15
 8005e62:	b2da      	uxtb	r2, r3
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005e68:	883b      	ldrh	r3, [r7, #0]
 8005e6a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	78ba      	ldrb	r2, [r7, #2]
 8005e76:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	785b      	ldrb	r3, [r3, #1]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d004      	beq.n	8005e8a <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	461a      	mov	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005e8a:	78bb      	ldrb	r3, [r7, #2]
 8005e8c:	2b02      	cmp	r3, #2
 8005e8e:	d102      	bne.n	8005e96 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2200      	movs	r2, #0
 8005e94:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d101      	bne.n	8005ea4 <HAL_PCD_EP_Open+0xae>
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e00e      	b.n	8005ec2 <HAL_PCD_EP_Open+0xcc>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	68f9      	ldr	r1, [r7, #12]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f003 fb7a 	bl	80095ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005ec0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3710      	adds	r7, #16
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	bd80      	pop	{r7, pc}

08005eca <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005eca:	b580      	push	{r7, lr}
 8005ecc:	b084      	sub	sp, #16
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	6078      	str	r0, [r7, #4]
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ed6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	da0f      	bge.n	8005efe <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	f003 020f 	and.w	r2, r3, #15
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	00db      	lsls	r3, r3, #3
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	3310      	adds	r3, #16
 8005eee:	687a      	ldr	r2, [r7, #4]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	3304      	adds	r3, #4
 8005ef4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	705a      	strb	r2, [r3, #1]
 8005efc:	e00f      	b.n	8005f1e <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005efe:	78fb      	ldrb	r3, [r7, #3]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	4613      	mov	r3, r2
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	4413      	add	r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f10:	687a      	ldr	r2, [r7, #4]
 8005f12:	4413      	add	r3, r2
 8005f14:	3304      	adds	r3, #4
 8005f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f1e:	78fb      	ldrb	r3, [r7, #3]
 8005f20:	f003 030f 	and.w	r3, r3, #15
 8005f24:	b2da      	uxtb	r2, r3
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d101      	bne.n	8005f38 <HAL_PCD_EP_Close+0x6e>
 8005f34:	2302      	movs	r3, #2
 8005f36:	e00e      	b.n	8005f56 <HAL_PCD_EP_Close+0x8c>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68f9      	ldr	r1, [r7, #12]
 8005f46:	4618      	mov	r0, r3
 8005f48:	f003 fbb8 	bl	80096bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}

08005f5e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f5e:	b580      	push	{r7, lr}
 8005f60:	b086      	sub	sp, #24
 8005f62:	af00      	add	r7, sp, #0
 8005f64:	60f8      	str	r0, [r7, #12]
 8005f66:	607a      	str	r2, [r7, #4]
 8005f68:	603b      	str	r3, [r7, #0]
 8005f6a:	460b      	mov	r3, r1
 8005f6c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f6e:	7afb      	ldrb	r3, [r7, #11]
 8005f70:	f003 020f 	and.w	r2, r3, #15
 8005f74:	4613      	mov	r3, r2
 8005f76:	00db      	lsls	r3, r3, #3
 8005f78:	4413      	add	r3, r2
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	4413      	add	r3, r2
 8005f84:	3304      	adds	r3, #4
 8005f86:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	687a      	ldr	r2, [r7, #4]
 8005f8c:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	683a      	ldr	r2, [r7, #0]
 8005f92:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f94:	697b      	ldr	r3, [r7, #20]
 8005f96:	2200      	movs	r2, #0
 8005f98:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005fa0:	7afb      	ldrb	r3, [r7, #11]
 8005fa2:	f003 030f 	and.w	r3, r3, #15
 8005fa6:	b2da      	uxtb	r2, r3
 8005fa8:	697b      	ldr	r3, [r7, #20]
 8005faa:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	799b      	ldrb	r3, [r3, #6]
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d102      	bne.n	8005fba <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005fb4:	687a      	ldr	r2, [r7, #4]
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	799b      	ldrb	r3, [r3, #6]
 8005fc2:	461a      	mov	r2, r3
 8005fc4:	6979      	ldr	r1, [r7, #20]
 8005fc6:	f003 fc55 	bl	8009874 <USB_EPStartXfer>

  return HAL_OK;
 8005fca:	2300      	movs	r3, #0
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3718      	adds	r7, #24
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
 8005fdc:	460b      	mov	r3, r1
 8005fde:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005fe0:	78fb      	ldrb	r3, [r7, #3]
 8005fe2:	f003 020f 	and.w	r2, r3, #15
 8005fe6:	6879      	ldr	r1, [r7, #4]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	440b      	add	r3, r1
 8005ff2:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005ff6:	681b      	ldr	r3, [r3, #0]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	60f8      	str	r0, [r7, #12]
 800600c:	607a      	str	r2, [r7, #4]
 800600e:	603b      	str	r3, [r7, #0]
 8006010:	460b      	mov	r3, r1
 8006012:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006014:	7afb      	ldrb	r3, [r7, #11]
 8006016:	f003 020f 	and.w	r2, r3, #15
 800601a:	4613      	mov	r3, r2
 800601c:	00db      	lsls	r3, r3, #3
 800601e:	4413      	add	r3, r2
 8006020:	009b      	lsls	r3, r3, #2
 8006022:	3310      	adds	r3, #16
 8006024:	68fa      	ldr	r2, [r7, #12]
 8006026:	4413      	add	r3, r2
 8006028:	3304      	adds	r3, #4
 800602a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006038:	697b      	ldr	r3, [r7, #20]
 800603a:	2200      	movs	r2, #0
 800603c:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	2201      	movs	r2, #1
 8006042:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006044:	7afb      	ldrb	r3, [r7, #11]
 8006046:	f003 030f 	and.w	r3, r3, #15
 800604a:	b2da      	uxtb	r2, r3
 800604c:	697b      	ldr	r3, [r7, #20]
 800604e:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	799b      	ldrb	r3, [r3, #6]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d102      	bne.n	800605e <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6818      	ldr	r0, [r3, #0]
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	799b      	ldrb	r3, [r3, #6]
 8006066:	461a      	mov	r2, r3
 8006068:	6979      	ldr	r1, [r7, #20]
 800606a:	f003 fc03 	bl	8009874 <USB_EPStartXfer>

  return HAL_OK;
 800606e:	2300      	movs	r3, #0
}
 8006070:	4618      	mov	r0, r3
 8006072:	3718      	adds	r7, #24
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}

08006078 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b084      	sub	sp, #16
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
 8006080:	460b      	mov	r3, r1
 8006082:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8006084:	78fb      	ldrb	r3, [r7, #3]
 8006086:	f003 030f 	and.w	r3, r3, #15
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	7912      	ldrb	r2, [r2, #4]
 800608e:	4293      	cmp	r3, r2
 8006090:	d901      	bls.n	8006096 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e04f      	b.n	8006136 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006096:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800609a:	2b00      	cmp	r3, #0
 800609c:	da0f      	bge.n	80060be <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800609e:	78fb      	ldrb	r3, [r7, #3]
 80060a0:	f003 020f 	and.w	r2, r3, #15
 80060a4:	4613      	mov	r3, r2
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	4413      	add	r3, r2
 80060aa:	009b      	lsls	r3, r3, #2
 80060ac:	3310      	adds	r3, #16
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	3304      	adds	r3, #4
 80060b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	705a      	strb	r2, [r3, #1]
 80060bc:	e00d      	b.n	80060da <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80060be:	78fa      	ldrb	r2, [r7, #3]
 80060c0:	4613      	mov	r3, r2
 80060c2:	00db      	lsls	r3, r3, #3
 80060c4:	4413      	add	r3, r2
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060cc:	687a      	ldr	r2, [r7, #4]
 80060ce:	4413      	add	r3, r2
 80060d0:	3304      	adds	r3, #4
 80060d2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2200      	movs	r2, #0
 80060d8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	2201      	movs	r2, #1
 80060de:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060e0:	78fb      	ldrb	r3, [r7, #3]
 80060e2:	f003 030f 	and.w	r3, r3, #15
 80060e6:	b2da      	uxtb	r2, r3
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060f2:	2b01      	cmp	r3, #1
 80060f4:	d101      	bne.n	80060fa <HAL_PCD_EP_SetStall+0x82>
 80060f6:	2302      	movs	r3, #2
 80060f8:	e01d      	b.n	8006136 <HAL_PCD_EP_SetStall+0xbe>
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	68f9      	ldr	r1, [r7, #12]
 8006108:	4618      	mov	r0, r3
 800610a:	f003 ff91 	bl	800a030 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800610e:	78fb      	ldrb	r3, [r7, #3]
 8006110:	f003 030f 	and.w	r3, r3, #15
 8006114:	2b00      	cmp	r3, #0
 8006116:	d109      	bne.n	800612c <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	6818      	ldr	r0, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	7999      	ldrb	r1, [r3, #6]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006126:	461a      	mov	r2, r3
 8006128:	f004 f982 	bl	800a430 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b084      	sub	sp, #16
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 030f 	and.w	r3, r3, #15
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	7912      	ldrb	r2, [r2, #4]
 8006154:	4293      	cmp	r3, r2
 8006156:	d901      	bls.n	800615c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e042      	b.n	80061e2 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800615c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006160:	2b00      	cmp	r3, #0
 8006162:	da0f      	bge.n	8006184 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	4613      	mov	r3, r2
 800616c:	00db      	lsls	r3, r3, #3
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	3310      	adds	r3, #16
 8006174:	687a      	ldr	r2, [r7, #4]
 8006176:	4413      	add	r3, r2
 8006178:	3304      	adds	r3, #4
 800617a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2201      	movs	r2, #1
 8006180:	705a      	strb	r2, [r3, #1]
 8006182:	e00f      	b.n	80061a4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	4413      	add	r3, r2
 800619a:	3304      	adds	r3, #4
 800619c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2200      	movs	r2, #0
 80061a2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	2200      	movs	r2, #0
 80061a8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061aa:	78fb      	ldrb	r3, [r7, #3]
 80061ac:	f003 030f 	and.w	r3, r3, #15
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061bc:	2b01      	cmp	r3, #1
 80061be:	d101      	bne.n	80061c4 <HAL_PCD_EP_ClrStall+0x86>
 80061c0:	2302      	movs	r3, #2
 80061c2:	e00e      	b.n	80061e2 <HAL_PCD_EP_ClrStall+0xa4>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68f9      	ldr	r1, [r7, #12]
 80061d2:	4618      	mov	r0, r3
 80061d4:	f003 ff9a 	bl	800a10c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2200      	movs	r2, #0
 80061dc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	3710      	adds	r7, #16
 80061e6:	46bd      	mov	sp, r7
 80061e8:	bd80      	pop	{r7, pc}

080061ea <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b084      	sub	sp, #16
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	6078      	str	r0, [r7, #4]
 80061f2:	460b      	mov	r3, r1
 80061f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80061f6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	da0c      	bge.n	8006218 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061fe:	78fb      	ldrb	r3, [r7, #3]
 8006200:	f003 020f 	and.w	r2, r3, #15
 8006204:	4613      	mov	r3, r2
 8006206:	00db      	lsls	r3, r3, #3
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	3310      	adds	r3, #16
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	4413      	add	r3, r2
 8006212:	3304      	adds	r3, #4
 8006214:	60fb      	str	r3, [r7, #12]
 8006216:	e00c      	b.n	8006232 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006218:	78fb      	ldrb	r3, [r7, #3]
 800621a:	f003 020f 	and.w	r2, r3, #15
 800621e:	4613      	mov	r3, r2
 8006220:	00db      	lsls	r3, r3, #3
 8006222:	4413      	add	r3, r2
 8006224:	009b      	lsls	r3, r3, #2
 8006226:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4413      	add	r3, r2
 800622e:	3304      	adds	r3, #4
 8006230:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68f9      	ldr	r1, [r7, #12]
 8006238:	4618      	mov	r0, r3
 800623a:	f003 fdb9 	bl	8009db0 <USB_EPStopXfer>
 800623e:	4603      	mov	r3, r0
 8006240:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006242:	7afb      	ldrb	r3, [r7, #11]
}
 8006244:	4618      	mov	r0, r3
 8006246:	3710      	adds	r7, #16
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	@ 0x28
 8006250:	af02      	add	r7, sp, #8
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006260:	683a      	ldr	r2, [r7, #0]
 8006262:	4613      	mov	r3, r2
 8006264:	00db      	lsls	r3, r3, #3
 8006266:	4413      	add	r3, r2
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	3310      	adds	r3, #16
 800626c:	687a      	ldr	r2, [r7, #4]
 800626e:	4413      	add	r3, r2
 8006270:	3304      	adds	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	695a      	ldr	r2, [r3, #20]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	691b      	ldr	r3, [r3, #16]
 800627c:	429a      	cmp	r2, r3
 800627e:	d901      	bls.n	8006284 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e06b      	b.n	800635c <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	691a      	ldr	r2, [r3, #16]
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	1ad3      	subs	r3, r2, r3
 800628e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	69fa      	ldr	r2, [r7, #28]
 8006296:	429a      	cmp	r2, r3
 8006298:	d902      	bls.n	80062a0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	689b      	ldr	r3, [r3, #8]
 800629e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	3303      	adds	r3, #3
 80062a4:	089b      	lsrs	r3, r3, #2
 80062a6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80062a8:	e02a      	b.n	8006300 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	691a      	ldr	r2, [r3, #16]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	69fa      	ldr	r2, [r7, #28]
 80062bc:	429a      	cmp	r2, r3
 80062be:	d902      	bls.n	80062c6 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	689b      	ldr	r3, [r3, #8]
 80062c4:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80062c6:	69fb      	ldr	r3, [r7, #28]
 80062c8:	3303      	adds	r3, #3
 80062ca:	089b      	lsrs	r3, r3, #2
 80062cc:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	68d9      	ldr	r1, [r3, #12]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	b2da      	uxtb	r2, r3
 80062d6:	69fb      	ldr	r3, [r7, #28]
 80062d8:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80062de:	9300      	str	r3, [sp, #0]
 80062e0:	4603      	mov	r3, r0
 80062e2:	6978      	ldr	r0, [r7, #20]
 80062e4:	f003 fe0e 	bl	8009f04 <USB_WritePacket>

    ep->xfer_buff  += len;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	441a      	add	r2, r3
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	695a      	ldr	r2, [r3, #20]
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	441a      	add	r2, r3
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006310:	69ba      	ldr	r2, [r7, #24]
 8006312:	429a      	cmp	r2, r3
 8006314:	d809      	bhi.n	800632a <PCD_WriteEmptyTxFifo+0xde>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800631e:	429a      	cmp	r2, r3
 8006320:	d203      	bcs.n	800632a <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	691b      	ldr	r3, [r3, #16]
 8006326:	2b00      	cmp	r3, #0
 8006328:	d1bf      	bne.n	80062aa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	691a      	ldr	r2, [r3, #16]
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	695b      	ldr	r3, [r3, #20]
 8006332:	429a      	cmp	r2, r3
 8006334:	d811      	bhi.n	800635a <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	f003 030f 	and.w	r3, r3, #15
 800633c:	2201      	movs	r2, #1
 800633e:	fa02 f303 	lsl.w	r3, r2, r3
 8006342:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800634a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	43db      	mvns	r3, r3
 8006350:	6939      	ldr	r1, [r7, #16]
 8006352:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8006356:	4013      	ands	r3, r2
 8006358:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3720      	adds	r7, #32
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	333c      	adds	r3, #60	@ 0x3c
 800637c:	3304      	adds	r3, #4
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	015a      	lsls	r2, r3, #5
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	4413      	add	r3, r2
 800638a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800638e:	689b      	ldr	r3, [r3, #8]
 8006390:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	799b      	ldrb	r3, [r3, #6]
 8006396:	2b01      	cmp	r3, #1
 8006398:	d17b      	bne.n	8006492 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	f003 0308 	and.w	r3, r3, #8
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d015      	beq.n	80063d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	4a61      	ldr	r2, [pc, #388]	@ (800652c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	f240 80b9 	bls.w	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	f000 80b3 	beq.w	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	015a      	lsls	r2, r3, #5
 80063be:	69bb      	ldr	r3, [r7, #24]
 80063c0:	4413      	add	r3, r2
 80063c2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063c6:	461a      	mov	r2, r3
 80063c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063cc:	6093      	str	r3, [r2, #8]
 80063ce:	e0a7      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f003 0320 	and.w	r3, r3, #32
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d009      	beq.n	80063ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	015a      	lsls	r2, r3, #5
 80063de:	69bb      	ldr	r3, [r7, #24]
 80063e0:	4413      	add	r3, r2
 80063e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063e6:	461a      	mov	r2, r3
 80063e8:	2320      	movs	r3, #32
 80063ea:	6093      	str	r3, [r2, #8]
 80063ec:	e098      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	f040 8093 	bne.w	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	4a4b      	ldr	r2, [pc, #300]	@ (800652c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80063fe:	4293      	cmp	r3, r2
 8006400:	d90f      	bls.n	8006422 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006402:	693b      	ldr	r3, [r7, #16]
 8006404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006408:	2b00      	cmp	r3, #0
 800640a:	d00a      	beq.n	8006422 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	015a      	lsls	r2, r3, #5
 8006410:	69bb      	ldr	r3, [r7, #24]
 8006412:	4413      	add	r3, r2
 8006414:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006418:	461a      	mov	r2, r3
 800641a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800641e:	6093      	str	r3, [r2, #8]
 8006420:	e07e      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	4413      	add	r3, r2
 8006434:	3304      	adds	r3, #4
 8006436:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1a      	ldr	r2, [r3, #32]
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	0159      	lsls	r1, r3, #5
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	440b      	add	r3, r1
 8006444:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006448:	691b      	ldr	r3, [r3, #16]
 800644a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800644e:	1ad2      	subs	r2, r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d114      	bne.n	8006484 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d109      	bne.n	8006476 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6818      	ldr	r0, [r3, #0]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800646c:	461a      	mov	r2, r3
 800646e:	2101      	movs	r1, #1
 8006470:	f003 ffde 	bl	800a430 <USB_EP0_OutStart>
 8006474:	e006      	b.n	8006484 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	68da      	ldr	r2, [r3, #12]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	695b      	ldr	r3, [r3, #20]
 800647e:	441a      	add	r2, r3
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	b2db      	uxtb	r3, r3
 8006488:	4619      	mov	r1, r3
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f008 fc90 	bl	800edb0 <HAL_PCD_DataOutStageCallback>
 8006490:	e046      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	4a26      	ldr	r2, [pc, #152]	@ (8006530 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d124      	bne.n	80064e4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d00a      	beq.n	80064ba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	015a      	lsls	r2, r3, #5
 80064a8:	69bb      	ldr	r3, [r7, #24]
 80064aa:	4413      	add	r3, r2
 80064ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064b0:	461a      	mov	r2, r3
 80064b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b6:	6093      	str	r3, [r2, #8]
 80064b8:	e032      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	f003 0320 	and.w	r3, r3, #32
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d008      	beq.n	80064d6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80064c4:	683b      	ldr	r3, [r7, #0]
 80064c6:	015a      	lsls	r2, r3, #5
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	4413      	add	r3, r2
 80064cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064d0:	461a      	mov	r2, r3
 80064d2:	2320      	movs	r3, #32
 80064d4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	4619      	mov	r1, r3
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f008 fc67 	bl	800edb0 <HAL_PCD_DataOutStageCallback>
 80064e2:	e01d      	b.n	8006520 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d114      	bne.n	8006514 <PCD_EP_OutXfrComplete_int+0x1b0>
 80064ea:	6879      	ldr	r1, [r7, #4]
 80064ec:	683a      	ldr	r2, [r7, #0]
 80064ee:	4613      	mov	r3, r2
 80064f0:	00db      	lsls	r3, r3, #3
 80064f2:	4413      	add	r3, r2
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d108      	bne.n	8006514 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800650c:	461a      	mov	r2, r3
 800650e:	2100      	movs	r1, #0
 8006510:	f003 ff8e 	bl	800a430 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	b2db      	uxtb	r3, r3
 8006518:	4619      	mov	r1, r3
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f008 fc48 	bl	800edb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3720      	adds	r7, #32
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}
 800652a:	bf00      	nop
 800652c:	4f54300a 	.word	0x4f54300a
 8006530:	4f54310a 	.word	0x4f54310a

08006534 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b086      	sub	sp, #24
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	333c      	adds	r3, #60	@ 0x3c
 800654c:	3304      	adds	r3, #4
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	015a      	lsls	r2, r3, #5
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	4413      	add	r3, r2
 800655a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800655e:	689b      	ldr	r3, [r3, #8]
 8006560:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	4a15      	ldr	r2, [pc, #84]	@ (80065bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d90e      	bls.n	8006588 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800656a:	68bb      	ldr	r3, [r7, #8]
 800656c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	015a      	lsls	r2, r3, #5
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	4413      	add	r3, r2
 800657c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006580:	461a      	mov	r2, r3
 8006582:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006586:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f008 fbff 	bl	800ed8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	4a0a      	ldr	r2, [pc, #40]	@ (80065bc <PCD_EP_OutSetupPacket_int+0x88>)
 8006592:	4293      	cmp	r3, r2
 8006594:	d90c      	bls.n	80065b0 <PCD_EP_OutSetupPacket_int+0x7c>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	799b      	ldrb	r3, [r3, #6]
 800659a:	2b01      	cmp	r3, #1
 800659c:	d108      	bne.n	80065b0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6818      	ldr	r0, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80065a8:	461a      	mov	r2, r3
 80065aa:	2101      	movs	r1, #1
 80065ac:	f003 ff40 	bl	800a430 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3718      	adds	r7, #24
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	4f54300a 	.word	0x4f54300a

080065c0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b085      	sub	sp, #20
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	6078      	str	r0, [r7, #4]
 80065c8:	460b      	mov	r3, r1
 80065ca:	70fb      	strb	r3, [r7, #3]
 80065cc:	4613      	mov	r3, r2
 80065ce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065d6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80065d8:	78fb      	ldrb	r3, [r7, #3]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d107      	bne.n	80065ee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80065de:	883b      	ldrh	r3, [r7, #0]
 80065e0:	0419      	lsls	r1, r3, #16
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68ba      	ldr	r2, [r7, #8]
 80065e8:	430a      	orrs	r2, r1
 80065ea:	629a      	str	r2, [r3, #40]	@ 0x28
 80065ec:	e028      	b.n	8006640 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065f4:	0c1b      	lsrs	r3, r3, #16
 80065f6:	68ba      	ldr	r2, [r7, #8]
 80065f8:	4413      	add	r3, r2
 80065fa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80065fc:	2300      	movs	r3, #0
 80065fe:	73fb      	strb	r3, [r7, #15]
 8006600:	e00d      	b.n	800661e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681a      	ldr	r2, [r3, #0]
 8006606:	7bfb      	ldrb	r3, [r7, #15]
 8006608:	3340      	adds	r3, #64	@ 0x40
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4413      	add	r3, r2
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	0c1b      	lsrs	r3, r3, #16
 8006612:	68ba      	ldr	r2, [r7, #8]
 8006614:	4413      	add	r3, r2
 8006616:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	3301      	adds	r3, #1
 800661c:	73fb      	strb	r3, [r7, #15]
 800661e:	7bfa      	ldrb	r2, [r7, #15]
 8006620:	78fb      	ldrb	r3, [r7, #3]
 8006622:	3b01      	subs	r3, #1
 8006624:	429a      	cmp	r2, r3
 8006626:	d3ec      	bcc.n	8006602 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006628:	883b      	ldrh	r3, [r7, #0]
 800662a:	0418      	lsls	r0, r3, #16
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6819      	ldr	r1, [r3, #0]
 8006630:	78fb      	ldrb	r3, [r7, #3]
 8006632:	3b01      	subs	r3, #1
 8006634:	68ba      	ldr	r2, [r7, #8]
 8006636:	4302      	orrs	r2, r0
 8006638:	3340      	adds	r3, #64	@ 0x40
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	440b      	add	r3, r1
 800663e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	3714      	adds	r7, #20
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr

0800664e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800664e:	b480      	push	{r7}
 8006650:	b083      	sub	sp, #12
 8006652:	af00      	add	r7, sp, #0
 8006654:	6078      	str	r0, [r7, #4]
 8006656:	460b      	mov	r3, r1
 8006658:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	887a      	ldrh	r2, [r7, #2]
 8006660:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006662:	2300      	movs	r3, #0
}
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006670:	b480      	push	{r7}
 8006672:	b083      	sub	sp, #12
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
 8006678:	460b      	mov	r3, r1
 800667a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800667c:	bf00      	nop
 800667e:	370c      	adds	r7, #12
 8006680:	46bd      	mov	sp, r7
 8006682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006686:	4770      	bx	lr

08006688 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b086      	sub	sp, #24
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d101      	bne.n	800669a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e267      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d075      	beq.n	8006792 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066a6:	4b88      	ldr	r3, [pc, #544]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	f003 030c 	and.w	r3, r3, #12
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d00c      	beq.n	80066cc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066b2:	4b85      	ldr	r3, [pc, #532]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066b4:	689b      	ldr	r3, [r3, #8]
 80066b6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80066ba:	2b08      	cmp	r3, #8
 80066bc:	d112      	bne.n	80066e4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066be:	4b82      	ldr	r3, [pc, #520]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066c6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80066ca:	d10b      	bne.n	80066e4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066cc:	4b7e      	ldr	r3, [pc, #504]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d05b      	beq.n	8006790 <HAL_RCC_OscConfig+0x108>
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d157      	bne.n	8006790 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80066e0:	2301      	movs	r3, #1
 80066e2:	e242      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	685b      	ldr	r3, [r3, #4]
 80066e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ec:	d106      	bne.n	80066fc <HAL_RCC_OscConfig+0x74>
 80066ee:	4b76      	ldr	r3, [pc, #472]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	4a75      	ldr	r2, [pc, #468]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80066f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80066f8:	6013      	str	r3, [r2, #0]
 80066fa:	e01d      	b.n	8006738 <HAL_RCC_OscConfig+0xb0>
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	685b      	ldr	r3, [r3, #4]
 8006700:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006704:	d10c      	bne.n	8006720 <HAL_RCC_OscConfig+0x98>
 8006706:	4b70      	ldr	r3, [pc, #448]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	4a6f      	ldr	r2, [pc, #444]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800670c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	4b6d      	ldr	r3, [pc, #436]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	4a6c      	ldr	r2, [pc, #432]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006718:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	e00b      	b.n	8006738 <HAL_RCC_OscConfig+0xb0>
 8006720:	4b69      	ldr	r3, [pc, #420]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a68      	ldr	r2, [pc, #416]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006726:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800672a:	6013      	str	r3, [r2, #0]
 800672c:	4b66      	ldr	r3, [pc, #408]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a65      	ldr	r2, [pc, #404]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006732:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006736:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d013      	beq.n	8006768 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006740:	f7fd fec6 	bl	80044d0 <HAL_GetTick>
 8006744:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006746:	e008      	b.n	800675a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006748:	f7fd fec2 	bl	80044d0 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	693b      	ldr	r3, [r7, #16]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	2b64      	cmp	r3, #100	@ 0x64
 8006754:	d901      	bls.n	800675a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006756:	2303      	movs	r3, #3
 8006758:	e207      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800675a:	4b5b      	ldr	r3, [pc, #364]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006762:	2b00      	cmp	r3, #0
 8006764:	d0f0      	beq.n	8006748 <HAL_RCC_OscConfig+0xc0>
 8006766:	e014      	b.n	8006792 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006768:	f7fd feb2 	bl	80044d0 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006770:	f7fd feae 	bl	80044d0 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b64      	cmp	r3, #100	@ 0x64
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e1f3      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006782:	4b51      	ldr	r3, [pc, #324]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f0      	bne.n	8006770 <HAL_RCC_OscConfig+0xe8>
 800678e:	e000      	b.n	8006792 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006790:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f003 0302 	and.w	r3, r3, #2
 800679a:	2b00      	cmp	r3, #0
 800679c:	d063      	beq.n	8006866 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800679e:	4b4a      	ldr	r3, [pc, #296]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	f003 030c 	and.w	r3, r3, #12
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00b      	beq.n	80067c2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067aa:	4b47      	ldr	r3, [pc, #284]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80067b2:	2b08      	cmp	r3, #8
 80067b4:	d11c      	bne.n	80067f0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067b6:	4b44      	ldr	r3, [pc, #272]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d116      	bne.n	80067f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067c2:	4b41      	ldr	r3, [pc, #260]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d005      	beq.n	80067da <HAL_RCC_OscConfig+0x152>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	2b01      	cmp	r3, #1
 80067d4:	d001      	beq.n	80067da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80067d6:	2301      	movs	r3, #1
 80067d8:	e1c7      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80067da:	4b3b      	ldr	r3, [pc, #236]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	691b      	ldr	r3, [r3, #16]
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	4937      	ldr	r1, [pc, #220]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 80067ea:	4313      	orrs	r3, r2
 80067ec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067ee:	e03a      	b.n	8006866 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d020      	beq.n	800683a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80067f8:	4b34      	ldr	r3, [pc, #208]	@ (80068cc <HAL_RCC_OscConfig+0x244>)
 80067fa:	2201      	movs	r2, #1
 80067fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067fe:	f7fd fe67 	bl	80044d0 <HAL_GetTick>
 8006802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006804:	e008      	b.n	8006818 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006806:	f7fd fe63 	bl	80044d0 <HAL_GetTick>
 800680a:	4602      	mov	r2, r0
 800680c:	693b      	ldr	r3, [r7, #16]
 800680e:	1ad3      	subs	r3, r2, r3
 8006810:	2b02      	cmp	r3, #2
 8006812:	d901      	bls.n	8006818 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006814:	2303      	movs	r3, #3
 8006816:	e1a8      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006818:	4b2b      	ldr	r3, [pc, #172]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f003 0302 	and.w	r3, r3, #2
 8006820:	2b00      	cmp	r3, #0
 8006822:	d0f0      	beq.n	8006806 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006824:	4b28      	ldr	r3, [pc, #160]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	4925      	ldr	r1, [pc, #148]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 8006834:	4313      	orrs	r3, r2
 8006836:	600b      	str	r3, [r1, #0]
 8006838:	e015      	b.n	8006866 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800683a:	4b24      	ldr	r3, [pc, #144]	@ (80068cc <HAL_RCC_OscConfig+0x244>)
 800683c:	2200      	movs	r2, #0
 800683e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006840:	f7fd fe46 	bl	80044d0 <HAL_GetTick>
 8006844:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006846:	e008      	b.n	800685a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006848:	f7fd fe42 	bl	80044d0 <HAL_GetTick>
 800684c:	4602      	mov	r2, r0
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	1ad3      	subs	r3, r2, r3
 8006852:	2b02      	cmp	r3, #2
 8006854:	d901      	bls.n	800685a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006856:	2303      	movs	r3, #3
 8006858:	e187      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800685a:	4b1b      	ldr	r3, [pc, #108]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	f003 0302 	and.w	r3, r3, #2
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1f0      	bne.n	8006848 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	f003 0308 	and.w	r3, r3, #8
 800686e:	2b00      	cmp	r3, #0
 8006870:	d036      	beq.n	80068e0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d016      	beq.n	80068a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800687a:	4b15      	ldr	r3, [pc, #84]	@ (80068d0 <HAL_RCC_OscConfig+0x248>)
 800687c:	2201      	movs	r2, #1
 800687e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006880:	f7fd fe26 	bl	80044d0 <HAL_GetTick>
 8006884:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006886:	e008      	b.n	800689a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006888:	f7fd fe22 	bl	80044d0 <HAL_GetTick>
 800688c:	4602      	mov	r2, r0
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad3      	subs	r3, r2, r3
 8006892:	2b02      	cmp	r3, #2
 8006894:	d901      	bls.n	800689a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006896:	2303      	movs	r3, #3
 8006898:	e167      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800689a:	4b0b      	ldr	r3, [pc, #44]	@ (80068c8 <HAL_RCC_OscConfig+0x240>)
 800689c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800689e:	f003 0302 	and.w	r3, r3, #2
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d0f0      	beq.n	8006888 <HAL_RCC_OscConfig+0x200>
 80068a6:	e01b      	b.n	80068e0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068a8:	4b09      	ldr	r3, [pc, #36]	@ (80068d0 <HAL_RCC_OscConfig+0x248>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068ae:	f7fd fe0f 	bl	80044d0 <HAL_GetTick>
 80068b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068b4:	e00e      	b.n	80068d4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80068b6:	f7fd fe0b 	bl	80044d0 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d907      	bls.n	80068d4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80068c4:	2303      	movs	r3, #3
 80068c6:	e150      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
 80068c8:	40023800 	.word	0x40023800
 80068cc:	42470000 	.word	0x42470000
 80068d0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068d4:	4b88      	ldr	r3, [pc, #544]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 80068d6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068d8:	f003 0302 	and.w	r3, r3, #2
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d1ea      	bne.n	80068b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f003 0304 	and.w	r3, r3, #4
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	f000 8097 	beq.w	8006a1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80068ee:	2300      	movs	r3, #0
 80068f0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80068f2:	4b81      	ldr	r3, [pc, #516]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 80068f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80068f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d10f      	bne.n	800691e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]
 8006902:	4b7d      	ldr	r3, [pc, #500]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006906:	4a7c      	ldr	r2, [pc, #496]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800690c:	6413      	str	r3, [r2, #64]	@ 0x40
 800690e:	4b7a      	ldr	r3, [pc, #488]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006916:	60bb      	str	r3, [r7, #8]
 8006918:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800691a:	2301      	movs	r3, #1
 800691c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800691e:	4b77      	ldr	r3, [pc, #476]	@ (8006afc <HAL_RCC_OscConfig+0x474>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006926:	2b00      	cmp	r3, #0
 8006928:	d118      	bne.n	800695c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800692a:	4b74      	ldr	r3, [pc, #464]	@ (8006afc <HAL_RCC_OscConfig+0x474>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	4a73      	ldr	r2, [pc, #460]	@ (8006afc <HAL_RCC_OscConfig+0x474>)
 8006930:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006934:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006936:	f7fd fdcb 	bl	80044d0 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800693e:	f7fd fdc7 	bl	80044d0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e10c      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006950:	4b6a      	ldr	r3, [pc, #424]	@ (8006afc <HAL_RCC_OscConfig+0x474>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	689b      	ldr	r3, [r3, #8]
 8006960:	2b01      	cmp	r3, #1
 8006962:	d106      	bne.n	8006972 <HAL_RCC_OscConfig+0x2ea>
 8006964:	4b64      	ldr	r3, [pc, #400]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006966:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006968:	4a63      	ldr	r2, [pc, #396]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 800696a:	f043 0301 	orr.w	r3, r3, #1
 800696e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006970:	e01c      	b.n	80069ac <HAL_RCC_OscConfig+0x324>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	689b      	ldr	r3, [r3, #8]
 8006976:	2b05      	cmp	r3, #5
 8006978:	d10c      	bne.n	8006994 <HAL_RCC_OscConfig+0x30c>
 800697a:	4b5f      	ldr	r3, [pc, #380]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 800697c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800697e:	4a5e      	ldr	r2, [pc, #376]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006980:	f043 0304 	orr.w	r3, r3, #4
 8006984:	6713      	str	r3, [r2, #112]	@ 0x70
 8006986:	4b5c      	ldr	r3, [pc, #368]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006988:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800698a:	4a5b      	ldr	r2, [pc, #364]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 800698c:	f043 0301 	orr.w	r3, r3, #1
 8006990:	6713      	str	r3, [r2, #112]	@ 0x70
 8006992:	e00b      	b.n	80069ac <HAL_RCC_OscConfig+0x324>
 8006994:	4b58      	ldr	r3, [pc, #352]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006996:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006998:	4a57      	ldr	r2, [pc, #348]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 800699a:	f023 0301 	bic.w	r3, r3, #1
 800699e:	6713      	str	r3, [r2, #112]	@ 0x70
 80069a0:	4b55      	ldr	r3, [pc, #340]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 80069a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069a4:	4a54      	ldr	r2, [pc, #336]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 80069a6:	f023 0304 	bic.w	r3, r3, #4
 80069aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d015      	beq.n	80069e0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b4:	f7fd fd8c 	bl	80044d0 <HAL_GetTick>
 80069b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069ba:	e00a      	b.n	80069d2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069bc:	f7fd fd88 	bl	80044d0 <HAL_GetTick>
 80069c0:	4602      	mov	r2, r0
 80069c2:	693b      	ldr	r3, [r7, #16]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e0cb      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069d2:	4b49      	ldr	r3, [pc, #292]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 80069d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0ee      	beq.n	80069bc <HAL_RCC_OscConfig+0x334>
 80069de:	e014      	b.n	8006a0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e0:	f7fd fd76 	bl	80044d0 <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069e6:	e00a      	b.n	80069fe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80069e8:	f7fd fd72 	bl	80044d0 <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d901      	bls.n	80069fe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80069fa:	2303      	movs	r3, #3
 80069fc:	e0b5      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80069fe:	4b3e      	ldr	r3, [pc, #248]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a02:	f003 0302 	and.w	r3, r3, #2
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d1ee      	bne.n	80069e8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006a0a:	7dfb      	ldrb	r3, [r7, #23]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d105      	bne.n	8006a1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a10:	4b39      	ldr	r3, [pc, #228]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a14:	4a38      	ldr	r2, [pc, #224]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006a1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	699b      	ldr	r3, [r3, #24]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 80a1 	beq.w	8006b68 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a26:	4b34      	ldr	r3, [pc, #208]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a28:	689b      	ldr	r3, [r3, #8]
 8006a2a:	f003 030c 	and.w	r3, r3, #12
 8006a2e:	2b08      	cmp	r3, #8
 8006a30:	d05c      	beq.n	8006aec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d141      	bne.n	8006abe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a3a:	4b31      	ldr	r3, [pc, #196]	@ (8006b00 <HAL_RCC_OscConfig+0x478>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a40:	f7fd fd46 	bl	80044d0 <HAL_GetTick>
 8006a44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a46:	e008      	b.n	8006a5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a48:	f7fd fd42 	bl	80044d0 <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e087      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a5a:	4b27      	ldr	r3, [pc, #156]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d1f0      	bne.n	8006a48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69da      	ldr	r2, [r3, #28]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6a1b      	ldr	r3, [r3, #32]
 8006a6e:	431a      	orrs	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a74:	019b      	lsls	r3, r3, #6
 8006a76:	431a      	orrs	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7c:	085b      	lsrs	r3, r3, #1
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	041b      	lsls	r3, r3, #16
 8006a82:	431a      	orrs	r2, r3
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a88:	061b      	lsls	r3, r3, #24
 8006a8a:	491b      	ldr	r1, [pc, #108]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	4313      	orrs	r3, r2
 8006a8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006a90:	4b1b      	ldr	r3, [pc, #108]	@ (8006b00 <HAL_RCC_OscConfig+0x478>)
 8006a92:	2201      	movs	r2, #1
 8006a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a96:	f7fd fd1b 	bl	80044d0 <HAL_GetTick>
 8006a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a9c:	e008      	b.n	8006ab0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a9e:	f7fd fd17 	bl	80044d0 <HAL_GetTick>
 8006aa2:	4602      	mov	r2, r0
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	1ad3      	subs	r3, r2, r3
 8006aa8:	2b02      	cmp	r3, #2
 8006aaa:	d901      	bls.n	8006ab0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006aac:	2303      	movs	r3, #3
 8006aae:	e05c      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ab0:	4b11      	ldr	r3, [pc, #68]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	d0f0      	beq.n	8006a9e <HAL_RCC_OscConfig+0x416>
 8006abc:	e054      	b.n	8006b68 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006abe:	4b10      	ldr	r3, [pc, #64]	@ (8006b00 <HAL_RCC_OscConfig+0x478>)
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ac4:	f7fd fd04 	bl	80044d0 <HAL_GetTick>
 8006ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006aca:	e008      	b.n	8006ade <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006acc:	f7fd fd00 	bl	80044d0 <HAL_GetTick>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	1ad3      	subs	r3, r2, r3
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d901      	bls.n	8006ade <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ada:	2303      	movs	r3, #3
 8006adc:	e045      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ade:	4b06      	ldr	r3, [pc, #24]	@ (8006af8 <HAL_RCC_OscConfig+0x470>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1f0      	bne.n	8006acc <HAL_RCC_OscConfig+0x444>
 8006aea:	e03d      	b.n	8006b68 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	2b01      	cmp	r3, #1
 8006af2:	d107      	bne.n	8006b04 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006af4:	2301      	movs	r3, #1
 8006af6:	e038      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
 8006af8:	40023800 	.word	0x40023800
 8006afc:	40007000 	.word	0x40007000
 8006b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b04:	4b1b      	ldr	r3, [pc, #108]	@ (8006b74 <HAL_RCC_OscConfig+0x4ec>)
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d028      	beq.n	8006b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b1c:	429a      	cmp	r2, r3
 8006b1e:	d121      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b2a:	429a      	cmp	r2, r3
 8006b2c:	d11a      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b2e:	68fa      	ldr	r2, [r7, #12]
 8006b30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006b34:	4013      	ands	r3, r2
 8006b36:	687a      	ldr	r2, [r7, #4]
 8006b38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d111      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b4a:	085b      	lsrs	r3, r3, #1
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d107      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b60:	429a      	cmp	r2, r3
 8006b62:	d001      	beq.n	8006b68 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006b64:	2301      	movs	r3, #1
 8006b66:	e000      	b.n	8006b6a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006b68:	2300      	movs	r3, #0
}
 8006b6a:	4618      	mov	r0, r3
 8006b6c:	3718      	adds	r7, #24
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}
 8006b72:	bf00      	nop
 8006b74:	40023800 	.word	0x40023800

08006b78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006b78:	b580      	push	{r7, lr}
 8006b7a:	b084      	sub	sp, #16
 8006b7c:	af00      	add	r7, sp, #0
 8006b7e:	6078      	str	r0, [r7, #4]
 8006b80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e0cc      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006b8c:	4b68      	ldr	r3, [pc, #416]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	f003 0307 	and.w	r3, r3, #7
 8006b94:	683a      	ldr	r2, [r7, #0]
 8006b96:	429a      	cmp	r2, r3
 8006b98:	d90c      	bls.n	8006bb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006b9a:	4b65      	ldr	r3, [pc, #404]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006b9c:	683a      	ldr	r2, [r7, #0]
 8006b9e:	b2d2      	uxtb	r2, r2
 8006ba0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ba2:	4b63      	ldr	r3, [pc, #396]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0307 	and.w	r3, r3, #7
 8006baa:	683a      	ldr	r2, [r7, #0]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d001      	beq.n	8006bb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006bb0:	2301      	movs	r3, #1
 8006bb2:	e0b8      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f003 0302 	and.w	r3, r3, #2
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d020      	beq.n	8006c02 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0304 	and.w	r3, r3, #4
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d005      	beq.n	8006bd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006bcc:	4b59      	ldr	r3, [pc, #356]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	4a58      	ldr	r2, [pc, #352]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006bd2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006bd6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f003 0308 	and.w	r3, r3, #8
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d005      	beq.n	8006bf0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006be4:	4b53      	ldr	r3, [pc, #332]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	4a52      	ldr	r2, [pc, #328]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006bea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006bee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006bf0:	4b50      	ldr	r3, [pc, #320]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	494d      	ldr	r1, [pc, #308]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 0301 	and.w	r3, r3, #1
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d044      	beq.n	8006c98 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d107      	bne.n	8006c26 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c16:	4b47      	ldr	r3, [pc, #284]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d119      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c22:	2301      	movs	r3, #1
 8006c24:	e07f      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	685b      	ldr	r3, [r3, #4]
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d003      	beq.n	8006c36 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c32:	2b03      	cmp	r3, #3
 8006c34:	d107      	bne.n	8006c46 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c36:	4b3f      	ldr	r3, [pc, #252]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d109      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c42:	2301      	movs	r3, #1
 8006c44:	e06f      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c46:	4b3b      	ldr	r3, [pc, #236]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f003 0302 	and.w	r3, r3, #2
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c52:	2301      	movs	r3, #1
 8006c54:	e067      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c56:	4b37      	ldr	r3, [pc, #220]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c58:	689b      	ldr	r3, [r3, #8]
 8006c5a:	f023 0203 	bic.w	r2, r3, #3
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	4934      	ldr	r1, [pc, #208]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c64:	4313      	orrs	r3, r2
 8006c66:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c68:	f7fd fc32 	bl	80044d0 <HAL_GetTick>
 8006c6c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c6e:	e00a      	b.n	8006c86 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006c70:	f7fd fc2e 	bl	80044d0 <HAL_GetTick>
 8006c74:	4602      	mov	r2, r0
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	1ad3      	subs	r3, r2, r3
 8006c7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d901      	bls.n	8006c86 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006c82:	2303      	movs	r3, #3
 8006c84:	e04f      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006c86:	4b2b      	ldr	r3, [pc, #172]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006c88:	689b      	ldr	r3, [r3, #8]
 8006c8a:	f003 020c 	and.w	r2, r3, #12
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	009b      	lsls	r3, r3, #2
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d1eb      	bne.n	8006c70 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006c98:	4b25      	ldr	r3, [pc, #148]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 0307 	and.w	r3, r3, #7
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d20c      	bcs.n	8006cc0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ca6:	4b22      	ldr	r3, [pc, #136]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca8:	683a      	ldr	r2, [r7, #0]
 8006caa:	b2d2      	uxtb	r2, r2
 8006cac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cae:	4b20      	ldr	r3, [pc, #128]	@ (8006d30 <HAL_RCC_ClockConfig+0x1b8>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	f003 0307 	and.w	r3, r3, #7
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d001      	beq.n	8006cc0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cbc:	2301      	movs	r3, #1
 8006cbe:	e032      	b.n	8006d26 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 0304 	and.w	r3, r3, #4
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d008      	beq.n	8006cde <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006ccc:	4b19      	ldr	r3, [pc, #100]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	68db      	ldr	r3, [r3, #12]
 8006cd8:	4916      	ldr	r1, [pc, #88]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006cda:	4313      	orrs	r3, r2
 8006cdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d009      	beq.n	8006cfe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006cea:	4b12      	ldr	r3, [pc, #72]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	691b      	ldr	r3, [r3, #16]
 8006cf6:	00db      	lsls	r3, r3, #3
 8006cf8:	490e      	ldr	r1, [pc, #56]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006cfa:	4313      	orrs	r3, r2
 8006cfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006cfe:	f000 f821 	bl	8006d44 <HAL_RCC_GetSysClockFreq>
 8006d02:	4602      	mov	r2, r0
 8006d04:	4b0b      	ldr	r3, [pc, #44]	@ (8006d34 <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	091b      	lsrs	r3, r3, #4
 8006d0a:	f003 030f 	and.w	r3, r3, #15
 8006d0e:	490a      	ldr	r1, [pc, #40]	@ (8006d38 <HAL_RCC_ClockConfig+0x1c0>)
 8006d10:	5ccb      	ldrb	r3, [r1, r3]
 8006d12:	fa22 f303 	lsr.w	r3, r2, r3
 8006d16:	4a09      	ldr	r2, [pc, #36]	@ (8006d3c <HAL_RCC_ClockConfig+0x1c4>)
 8006d18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006d1a:	4b09      	ldr	r3, [pc, #36]	@ (8006d40 <HAL_RCC_ClockConfig+0x1c8>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f7fd fb92 	bl	8004448 <HAL_InitTick>

  return HAL_OK;
 8006d24:	2300      	movs	r3, #0
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	40023c00 	.word	0x40023c00
 8006d34:	40023800 	.word	0x40023800
 8006d38:	080100e8 	.word	0x080100e8
 8006d3c:	20000004 	.word	0x20000004
 8006d40:	20000028 	.word	0x20000028

08006d44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d48:	b090      	sub	sp, #64	@ 0x40
 8006d4a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006d50:	2300      	movs	r3, #0
 8006d52:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006d58:	2300      	movs	r3, #0
 8006d5a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d5c:	4b59      	ldr	r3, [pc, #356]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f003 030c 	and.w	r3, r3, #12
 8006d64:	2b08      	cmp	r3, #8
 8006d66:	d00d      	beq.n	8006d84 <HAL_RCC_GetSysClockFreq+0x40>
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	f200 80a1 	bhi.w	8006eb0 <HAL_RCC_GetSysClockFreq+0x16c>
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d002      	beq.n	8006d78 <HAL_RCC_GetSysClockFreq+0x34>
 8006d72:	2b04      	cmp	r3, #4
 8006d74:	d003      	beq.n	8006d7e <HAL_RCC_GetSysClockFreq+0x3a>
 8006d76:	e09b      	b.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006d78:	4b53      	ldr	r3, [pc, #332]	@ (8006ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006d7a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d7c:	e09b      	b.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006d7e:	4b53      	ldr	r3, [pc, #332]	@ (8006ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8006d80:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006d82:	e098      	b.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006d84:	4b4f      	ldr	r3, [pc, #316]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d86:	685b      	ldr	r3, [r3, #4]
 8006d88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006d8c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006d8e:	4b4d      	ldr	r3, [pc, #308]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d028      	beq.n	8006dec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d9a:	4b4a      	ldr	r3, [pc, #296]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	099b      	lsrs	r3, r3, #6
 8006da0:	2200      	movs	r2, #0
 8006da2:	623b      	str	r3, [r7, #32]
 8006da4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006da6:	6a3b      	ldr	r3, [r7, #32]
 8006da8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006dac:	2100      	movs	r1, #0
 8006dae:	4b47      	ldr	r3, [pc, #284]	@ (8006ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8006db0:	fb03 f201 	mul.w	r2, r3, r1
 8006db4:	2300      	movs	r3, #0
 8006db6:	fb00 f303 	mul.w	r3, r0, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	4a43      	ldr	r2, [pc, #268]	@ (8006ecc <HAL_RCC_GetSysClockFreq+0x188>)
 8006dbe:	fba0 1202 	umull	r1, r2, r0, r2
 8006dc2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dc4:	460a      	mov	r2, r1
 8006dc6:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006dc8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006dca:	4413      	add	r3, r2
 8006dcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006dce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	61fa      	str	r2, [r7, #28]
 8006dd6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006dda:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006dde:	f7f9 fa57 	bl	8000290 <__aeabi_uldivmod>
 8006de2:	4602      	mov	r2, r0
 8006de4:	460b      	mov	r3, r1
 8006de6:	4613      	mov	r3, r2
 8006de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dea:	e053      	b.n	8006e94 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dec:	4b35      	ldr	r3, [pc, #212]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	099b      	lsrs	r3, r3, #6
 8006df2:	2200      	movs	r2, #0
 8006df4:	613b      	str	r3, [r7, #16]
 8006df6:	617a      	str	r2, [r7, #20]
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006dfe:	f04f 0b00 	mov.w	fp, #0
 8006e02:	4652      	mov	r2, sl
 8006e04:	465b      	mov	r3, fp
 8006e06:	f04f 0000 	mov.w	r0, #0
 8006e0a:	f04f 0100 	mov.w	r1, #0
 8006e0e:	0159      	lsls	r1, r3, #5
 8006e10:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006e14:	0150      	lsls	r0, r2, #5
 8006e16:	4602      	mov	r2, r0
 8006e18:	460b      	mov	r3, r1
 8006e1a:	ebb2 080a 	subs.w	r8, r2, sl
 8006e1e:	eb63 090b 	sbc.w	r9, r3, fp
 8006e22:	f04f 0200 	mov.w	r2, #0
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006e2e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006e32:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006e36:	ebb2 0408 	subs.w	r4, r2, r8
 8006e3a:	eb63 0509 	sbc.w	r5, r3, r9
 8006e3e:	f04f 0200 	mov.w	r2, #0
 8006e42:	f04f 0300 	mov.w	r3, #0
 8006e46:	00eb      	lsls	r3, r5, #3
 8006e48:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e4c:	00e2      	lsls	r2, r4, #3
 8006e4e:	4614      	mov	r4, r2
 8006e50:	461d      	mov	r5, r3
 8006e52:	eb14 030a 	adds.w	r3, r4, sl
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	eb45 030b 	adc.w	r3, r5, fp
 8006e5c:	607b      	str	r3, [r7, #4]
 8006e5e:	f04f 0200 	mov.w	r2, #0
 8006e62:	f04f 0300 	mov.w	r3, #0
 8006e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e6a:	4629      	mov	r1, r5
 8006e6c:	028b      	lsls	r3, r1, #10
 8006e6e:	4621      	mov	r1, r4
 8006e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e74:	4621      	mov	r1, r4
 8006e76:	028a      	lsls	r2, r1, #10
 8006e78:	4610      	mov	r0, r2
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e7e:	2200      	movs	r2, #0
 8006e80:	60bb      	str	r3, [r7, #8]
 8006e82:	60fa      	str	r2, [r7, #12]
 8006e84:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006e88:	f7f9 fa02 	bl	8000290 <__aeabi_uldivmod>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	460b      	mov	r3, r1
 8006e90:	4613      	mov	r3, r2
 8006e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e94:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec4 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	0c1b      	lsrs	r3, r3, #16
 8006e9a:	f003 0303 	and.w	r3, r3, #3
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	005b      	lsls	r3, r3, #1
 8006ea2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006ea4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ea8:	fbb2 f3f3 	udiv	r3, r2, r3
 8006eac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006eae:	e002      	b.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006eb0:	4b05      	ldr	r3, [pc, #20]	@ (8006ec8 <HAL_RCC_GetSysClockFreq+0x184>)
 8006eb2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006eb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3740      	adds	r7, #64	@ 0x40
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ec2:	bf00      	nop
 8006ec4:	40023800 	.word	0x40023800
 8006ec8:	00f42400 	.word	0x00f42400
 8006ecc:	017d7840 	.word	0x017d7840

08006ed0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006ed0:	b480      	push	{r7}
 8006ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006ed4:	4b03      	ldr	r3, [pc, #12]	@ (8006ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	46bd      	mov	sp, r7
 8006edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee0:	4770      	bx	lr
 8006ee2:	bf00      	nop
 8006ee4:	20000004 	.word	0x20000004

08006ee8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d101      	bne.n	8006efa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ef6:	2301      	movs	r3, #1
 8006ef8:	e07b      	b.n	8006ff2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d108      	bne.n	8006f14 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f0a:	d009      	beq.n	8006f20 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	61da      	str	r2, [r3, #28]
 8006f12:	e005      	b.n	8006f20 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2200      	movs	r2, #0
 8006f18:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d106      	bne.n	8006f40 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	2200      	movs	r2, #0
 8006f36:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006f3a:	6878      	ldr	r0, [r7, #4]
 8006f3c:	f7fa ff2e 	bl	8001d9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	681a      	ldr	r2, [r3, #0]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006f56:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006f68:	431a      	orrs	r2, r3
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	68db      	ldr	r3, [r3, #12]
 8006f6e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006f72:	431a      	orrs	r2, r3
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	691b      	ldr	r3, [r3, #16]
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	695b      	ldr	r3, [r3, #20]
 8006f82:	f003 0301 	and.w	r3, r3, #1
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	699b      	ldr	r3, [r3, #24]
 8006f8c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006f90:	431a      	orrs	r2, r3
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69db      	ldr	r3, [r3, #28]
 8006f96:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6a1b      	ldr	r3, [r3, #32]
 8006fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fa4:	ea42 0103 	orr.w	r1, r2, r3
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fac:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	430a      	orrs	r2, r1
 8006fb6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	699b      	ldr	r3, [r3, #24]
 8006fbc:	0c1b      	lsrs	r3, r3, #16
 8006fbe:	f003 0104 	and.w	r1, r3, #4
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006fc6:	f003 0210 	and.w	r2, r3, #16
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	430a      	orrs	r2, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	69da      	ldr	r2, [r3, #28]
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006fe0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3708      	adds	r7, #8
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b088      	sub	sp, #32
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	603b      	str	r3, [r7, #0]
 8007006:	4613      	mov	r3, r2
 8007008:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800700a:	f7fd fa61 	bl	80044d0 <HAL_GetTick>
 800700e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007010:	88fb      	ldrh	r3, [r7, #6]
 8007012:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800701a:	b2db      	uxtb	r3, r3
 800701c:	2b01      	cmp	r3, #1
 800701e:	d001      	beq.n	8007024 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007020:	2302      	movs	r3, #2
 8007022:	e12a      	b.n	800727a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8007024:	68bb      	ldr	r3, [r7, #8]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d002      	beq.n	8007030 <HAL_SPI_Transmit+0x36>
 800702a:	88fb      	ldrh	r3, [r7, #6]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d101      	bne.n	8007034 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007030:	2301      	movs	r3, #1
 8007032:	e122      	b.n	800727a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800703a:	2b01      	cmp	r3, #1
 800703c:	d101      	bne.n	8007042 <HAL_SPI_Transmit+0x48>
 800703e:	2302      	movs	r3, #2
 8007040:	e11b      	b.n	800727a <HAL_SPI_Transmit+0x280>
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	2201      	movs	r2, #1
 8007046:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2203      	movs	r2, #3
 800704e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	2200      	movs	r2, #0
 8007056:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68ba      	ldr	r2, [r7, #8]
 800705c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	88fa      	ldrh	r2, [r7, #6]
 8007062:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	88fa      	ldrh	r2, [r7, #6]
 8007068:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2200      	movs	r2, #0
 800706e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2200      	movs	r2, #0
 8007086:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	689b      	ldr	r3, [r3, #8]
 800708c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007090:	d10f      	bne.n	80070b2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80070a0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	681a      	ldr	r2, [r3, #0]
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80070b0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070bc:	2b40      	cmp	r3, #64	@ 0x40
 80070be:	d007      	beq.n	80070d0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80070ce:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80070d8:	d152      	bne.n	8007180 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d002      	beq.n	80070e8 <HAL_SPI_Transmit+0xee>
 80070e2:	8b7b      	ldrh	r3, [r7, #26]
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d145      	bne.n	8007174 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070ec:	881a      	ldrh	r2, [r3, #0]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070f8:	1c9a      	adds	r2, r3, #2
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007102:	b29b      	uxth	r3, r3
 8007104:	3b01      	subs	r3, #1
 8007106:	b29a      	uxth	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800710c:	e032      	b.n	8007174 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	f003 0302 	and.w	r3, r3, #2
 8007118:	2b02      	cmp	r3, #2
 800711a:	d112      	bne.n	8007142 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007120:	881a      	ldrh	r2, [r3, #0]
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800712c:	1c9a      	adds	r2, r3, #2
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007136:	b29b      	uxth	r3, r3
 8007138:	3b01      	subs	r3, #1
 800713a:	b29a      	uxth	r2, r3
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007140:	e018      	b.n	8007174 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007142:	f7fd f9c5 	bl	80044d0 <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	69fb      	ldr	r3, [r7, #28]
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	429a      	cmp	r2, r3
 8007150:	d803      	bhi.n	800715a <HAL_SPI_Transmit+0x160>
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007158:	d102      	bne.n	8007160 <HAL_SPI_Transmit+0x166>
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d109      	bne.n	8007174 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2200      	movs	r2, #0
 800716c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007170:	2303      	movs	r3, #3
 8007172:	e082      	b.n	800727a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007178:	b29b      	uxth	r3, r3
 800717a:	2b00      	cmp	r3, #0
 800717c:	d1c7      	bne.n	800710e <HAL_SPI_Transmit+0x114>
 800717e:	e053      	b.n	8007228 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_SPI_Transmit+0x194>
 8007188:	8b7b      	ldrh	r3, [r7, #26]
 800718a:	2b01      	cmp	r3, #1
 800718c:	d147      	bne.n	800721e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	330c      	adds	r3, #12
 8007198:	7812      	ldrb	r2, [r2, #0]
 800719a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071a0:	1c5a      	adds	r2, r3, #1
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071aa:	b29b      	uxth	r3, r3
 80071ac:	3b01      	subs	r3, #1
 80071ae:	b29a      	uxth	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80071b4:	e033      	b.n	800721e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	689b      	ldr	r3, [r3, #8]
 80071bc:	f003 0302 	and.w	r3, r3, #2
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d113      	bne.n	80071ec <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	330c      	adds	r3, #12
 80071ce:	7812      	ldrb	r2, [r2, #0]
 80071d0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80071d6:	1c5a      	adds	r2, r3, #1
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80071e0:	b29b      	uxth	r3, r3
 80071e2:	3b01      	subs	r3, #1
 80071e4:	b29a      	uxth	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80071ea:	e018      	b.n	800721e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80071ec:	f7fd f970 	bl	80044d0 <HAL_GetTick>
 80071f0:	4602      	mov	r2, r0
 80071f2:	69fb      	ldr	r3, [r7, #28]
 80071f4:	1ad3      	subs	r3, r2, r3
 80071f6:	683a      	ldr	r2, [r7, #0]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d803      	bhi.n	8007204 <HAL_SPI_Transmit+0x20a>
 80071fc:	683b      	ldr	r3, [r7, #0]
 80071fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007202:	d102      	bne.n	800720a <HAL_SPI_Transmit+0x210>
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d109      	bne.n	800721e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e02d      	b.n	800727a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007222:	b29b      	uxth	r3, r3
 8007224:	2b00      	cmp	r3, #0
 8007226:	d1c6      	bne.n	80071b6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007228:	69fa      	ldr	r2, [r7, #28]
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	68f8      	ldr	r0, [r7, #12]
 800722e:	f000 fd21 	bl	8007c74 <SPI_EndRxTxTransaction>
 8007232:	4603      	mov	r3, r0
 8007234:	2b00      	cmp	r3, #0
 8007236:	d002      	beq.n	800723e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2220      	movs	r2, #32
 800723c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	689b      	ldr	r3, [r3, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d10a      	bne.n	800725c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007246:	2300      	movs	r3, #0
 8007248:	617b      	str	r3, [r7, #20]
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	617b      	str	r3, [r7, #20]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	617b      	str	r3, [r7, #20]
 800725a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	2201      	movs	r2, #1
 8007260:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007270:	2b00      	cmp	r3, #0
 8007272:	d001      	beq.n	8007278 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e000      	b.n	800727a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007278:	2300      	movs	r3, #0
  }
}
 800727a:	4618      	mov	r0, r3
 800727c:	3720      	adds	r7, #32
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}

08007282 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007282:	b580      	push	{r7, lr}
 8007284:	b088      	sub	sp, #32
 8007286:	af02      	add	r7, sp, #8
 8007288:	60f8      	str	r0, [r7, #12]
 800728a:	60b9      	str	r1, [r7, #8]
 800728c:	603b      	str	r3, [r7, #0]
 800728e:	4613      	mov	r3, r2
 8007290:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b01      	cmp	r3, #1
 800729c:	d001      	beq.n	80072a2 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800729e:	2302      	movs	r3, #2
 80072a0:	e104      	b.n	80074ac <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	685b      	ldr	r3, [r3, #4]
 80072a6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80072aa:	d112      	bne.n	80072d2 <HAL_SPI_Receive+0x50>
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	689b      	ldr	r3, [r3, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10e      	bne.n	80072d2 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2204      	movs	r2, #4
 80072b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	4613      	mov	r3, r2
 80072c4:	68ba      	ldr	r2, [r7, #8]
 80072c6:	68b9      	ldr	r1, [r7, #8]
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f8f3 	bl	80074b4 <HAL_SPI_TransmitReceive>
 80072ce:	4603      	mov	r3, r0
 80072d0:	e0ec      	b.n	80074ac <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80072d2:	f7fd f8fd 	bl	80044d0 <HAL_GetTick>
 80072d6:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d002      	beq.n	80072e4 <HAL_SPI_Receive+0x62>
 80072de:	88fb      	ldrh	r3, [r7, #6]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d101      	bne.n	80072e8 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0e1      	b.n	80074ac <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80072ee:	2b01      	cmp	r3, #1
 80072f0:	d101      	bne.n	80072f6 <HAL_SPI_Receive+0x74>
 80072f2:	2302      	movs	r3, #2
 80072f4:	e0da      	b.n	80074ac <HAL_SPI_Receive+0x22a>
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2201      	movs	r2, #1
 80072fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2204      	movs	r2, #4
 8007302:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	88fa      	ldrh	r2, [r7, #6]
 8007316:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	88fa      	ldrh	r2, [r7, #6]
 800731c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2200      	movs	r2, #0
 8007322:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2200      	movs	r2, #0
 8007328:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2200      	movs	r2, #0
 800732e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2200      	movs	r2, #0
 8007334:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007344:	d10f      	bne.n	8007366 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007354:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007364:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007370:	2b40      	cmp	r3, #64	@ 0x40
 8007372:	d007      	beq.n	8007384 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	681a      	ldr	r2, [r3, #0]
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007382:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d170      	bne.n	800746e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800738c:	e035      	b.n	80073fa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	689b      	ldr	r3, [r3, #8]
 8007394:	f003 0301 	and.w	r3, r3, #1
 8007398:	2b01      	cmp	r3, #1
 800739a:	d115      	bne.n	80073c8 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	f103 020c 	add.w	r2, r3, #12
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	b2d2      	uxtb	r2, r2
 80073ac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b2:	1c5a      	adds	r2, r3, #1
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073bc:	b29b      	uxth	r3, r3
 80073be:	3b01      	subs	r3, #1
 80073c0:	b29a      	uxth	r2, r3
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80073c6:	e018      	b.n	80073fa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80073c8:	f7fd f882 	bl	80044d0 <HAL_GetTick>
 80073cc:	4602      	mov	r2, r0
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	1ad3      	subs	r3, r2, r3
 80073d2:	683a      	ldr	r2, [r7, #0]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d803      	bhi.n	80073e0 <HAL_SPI_Receive+0x15e>
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80073de:	d102      	bne.n	80073e6 <HAL_SPI_Receive+0x164>
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d109      	bne.n	80073fa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2201      	movs	r2, #1
 80073ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2200      	movs	r2, #0
 80073f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80073f6:	2303      	movs	r3, #3
 80073f8:	e058      	b.n	80074ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d1c4      	bne.n	800738e <HAL_SPI_Receive+0x10c>
 8007404:	e038      	b.n	8007478 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f003 0301 	and.w	r3, r3, #1
 8007410:	2b01      	cmp	r3, #1
 8007412:	d113      	bne.n	800743c <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	68da      	ldr	r2, [r3, #12]
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800741e:	b292      	uxth	r2, r2
 8007420:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007426:	1c9a      	adds	r2, r3, #2
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007430:	b29b      	uxth	r3, r3
 8007432:	3b01      	subs	r3, #1
 8007434:	b29a      	uxth	r2, r3
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800743a:	e018      	b.n	800746e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800743c:	f7fd f848 	bl	80044d0 <HAL_GetTick>
 8007440:	4602      	mov	r2, r0
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	1ad3      	subs	r3, r2, r3
 8007446:	683a      	ldr	r2, [r7, #0]
 8007448:	429a      	cmp	r2, r3
 800744a:	d803      	bhi.n	8007454 <HAL_SPI_Receive+0x1d2>
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007452:	d102      	bne.n	800745a <HAL_SPI_Receive+0x1d8>
 8007454:	683b      	ldr	r3, [r7, #0]
 8007456:	2b00      	cmp	r3, #0
 8007458:	d109      	bne.n	800746e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2201      	movs	r2, #1
 800745e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800746a:	2303      	movs	r3, #3
 800746c:	e01e      	b.n	80074ac <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007472:	b29b      	uxth	r3, r3
 8007474:	2b00      	cmp	r3, #0
 8007476:	d1c6      	bne.n	8007406 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007478:	697a      	ldr	r2, [r7, #20]
 800747a:	6839      	ldr	r1, [r7, #0]
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f000 fb93 	bl	8007ba8 <SPI_EndRxTransaction>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d002      	beq.n	800748e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2220      	movs	r2, #32
 800748c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2201      	movs	r2, #1
 8007492:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d001      	beq.n	80074aa <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80074a6:	2301      	movs	r3, #1
 80074a8:	e000      	b.n	80074ac <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80074aa:	2300      	movs	r3, #0
  }
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3718      	adds	r7, #24
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b08a      	sub	sp, #40	@ 0x28
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	60f8      	str	r0, [r7, #12]
 80074bc:	60b9      	str	r1, [r7, #8]
 80074be:	607a      	str	r2, [r7, #4]
 80074c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80074c2:	2301      	movs	r3, #1
 80074c4:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074c6:	f7fd f803 	bl	80044d0 <HAL_GetTick>
 80074ca:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80074d2:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80074da:	887b      	ldrh	r3, [r7, #2]
 80074dc:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80074de:	7ffb      	ldrb	r3, [r7, #31]
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d00c      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x4a>
 80074e4:	69bb      	ldr	r3, [r7, #24]
 80074e6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80074ea:	d106      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <HAL_SPI_TransmitReceive+0x46>
 80074f4:	7ffb      	ldrb	r3, [r7, #31]
 80074f6:	2b04      	cmp	r3, #4
 80074f8:	d001      	beq.n	80074fe <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80074fa:	2302      	movs	r3, #2
 80074fc:	e17f      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d005      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x5c>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d002      	beq.n	8007510 <HAL_SPI_TransmitReceive+0x5c>
 800750a:	887b      	ldrh	r3, [r7, #2]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d101      	bne.n	8007514 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e174      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800751a:	2b01      	cmp	r3, #1
 800751c:	d101      	bne.n	8007522 <HAL_SPI_TransmitReceive+0x6e>
 800751e:	2302      	movs	r3, #2
 8007520:	e16d      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	2201      	movs	r2, #1
 8007526:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007530:	b2db      	uxtb	r3, r3
 8007532:	2b04      	cmp	r3, #4
 8007534:	d003      	beq.n	800753e <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	2205      	movs	r2, #5
 800753a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	2200      	movs	r2, #0
 8007542:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	887a      	ldrh	r2, [r7, #2]
 800754e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	887a      	ldrh	r2, [r7, #2]
 8007554:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	68ba      	ldr	r2, [r7, #8]
 800755a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	887a      	ldrh	r2, [r7, #2]
 8007560:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	887a      	ldrh	r2, [r7, #2]
 8007566:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	2200      	movs	r2, #0
 800756c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2200      	movs	r2, #0
 8007572:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800757e:	2b40      	cmp	r3, #64	@ 0x40
 8007580:	d007      	beq.n	8007592 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007590:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	68db      	ldr	r3, [r3, #12]
 8007596:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800759a:	d17e      	bne.n	800769a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d002      	beq.n	80075aa <HAL_SPI_TransmitReceive+0xf6>
 80075a4:	8afb      	ldrh	r3, [r7, #22]
 80075a6:	2b01      	cmp	r3, #1
 80075a8:	d16c      	bne.n	8007684 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ae:	881a      	ldrh	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ba:	1c9a      	adds	r2, r3, #2
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075c4:	b29b      	uxth	r3, r3
 80075c6:	3b01      	subs	r3, #1
 80075c8:	b29a      	uxth	r2, r3
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ce:	e059      	b.n	8007684 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	f003 0302 	and.w	r3, r3, #2
 80075da:	2b02      	cmp	r3, #2
 80075dc:	d11b      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x162>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075e2:	b29b      	uxth	r3, r3
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d016      	beq.n	8007616 <HAL_SPI_TransmitReceive+0x162>
 80075e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ea:	2b01      	cmp	r3, #1
 80075ec:	d113      	bne.n	8007616 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075f2:	881a      	ldrh	r2, [r3, #0]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075fe:	1c9a      	adds	r2, r3, #2
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007608:	b29b      	uxth	r3, r3
 800760a:	3b01      	subs	r3, #1
 800760c:	b29a      	uxth	r2, r3
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007612:	2300      	movs	r3, #0
 8007614:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	f003 0301 	and.w	r3, r3, #1
 8007620:	2b01      	cmp	r3, #1
 8007622:	d119      	bne.n	8007658 <HAL_SPI_TransmitReceive+0x1a4>
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007628:	b29b      	uxth	r3, r3
 800762a:	2b00      	cmp	r3, #0
 800762c:	d014      	beq.n	8007658 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	68da      	ldr	r2, [r3, #12]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007638:	b292      	uxth	r2, r2
 800763a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007640:	1c9a      	adds	r2, r3, #2
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800764a:	b29b      	uxth	r3, r3
 800764c:	3b01      	subs	r3, #1
 800764e:	b29a      	uxth	r2, r3
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007654:	2301      	movs	r3, #1
 8007656:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007658:	f7fc ff3a 	bl	80044d0 <HAL_GetTick>
 800765c:	4602      	mov	r2, r0
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	1ad3      	subs	r3, r2, r3
 8007662:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007664:	429a      	cmp	r2, r3
 8007666:	d80d      	bhi.n	8007684 <HAL_SPI_TransmitReceive+0x1d0>
 8007668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800766a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800766e:	d009      	beq.n	8007684 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	2201      	movs	r2, #1
 8007674:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007680:	2303      	movs	r3, #3
 8007682:	e0bc      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007688:	b29b      	uxth	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d1a0      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x11c>
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b00      	cmp	r3, #0
 8007696:	d19b      	bne.n	80075d0 <HAL_SPI_TransmitReceive+0x11c>
 8007698:	e082      	b.n	80077a0 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d002      	beq.n	80076a8 <HAL_SPI_TransmitReceive+0x1f4>
 80076a2:	8afb      	ldrh	r3, [r7, #22]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d171      	bne.n	800778c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	330c      	adds	r3, #12
 80076b2:	7812      	ldrb	r2, [r2, #0]
 80076b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ba:	1c5a      	adds	r2, r3, #1
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	3b01      	subs	r3, #1
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076ce:	e05d      	b.n	800778c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	f003 0302 	and.w	r3, r3, #2
 80076da:	2b02      	cmp	r3, #2
 80076dc:	d11c      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x264>
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076e2:	b29b      	uxth	r3, r3
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d017      	beq.n	8007718 <HAL_SPI_TransmitReceive+0x264>
 80076e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ea:	2b01      	cmp	r3, #1
 80076ec:	d114      	bne.n	8007718 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	330c      	adds	r3, #12
 80076f8:	7812      	ldrb	r2, [r2, #0]
 80076fa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800770a:	b29b      	uxth	r3, r3
 800770c:	3b01      	subs	r3, #1
 800770e:	b29a      	uxth	r2, r3
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007714:	2300      	movs	r3, #0
 8007716:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b01      	cmp	r3, #1
 8007724:	d119      	bne.n	800775a <HAL_SPI_TransmitReceive+0x2a6>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800772a:	b29b      	uxth	r3, r3
 800772c:	2b00      	cmp	r3, #0
 800772e:	d014      	beq.n	800775a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	68da      	ldr	r2, [r3, #12]
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800773a:	b2d2      	uxtb	r2, r2
 800773c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007742:	1c5a      	adds	r2, r3, #1
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800774c:	b29b      	uxth	r3, r3
 800774e:	3b01      	subs	r3, #1
 8007750:	b29a      	uxth	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007756:	2301      	movs	r3, #1
 8007758:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800775a:	f7fc feb9 	bl	80044d0 <HAL_GetTick>
 800775e:	4602      	mov	r2, r0
 8007760:	6a3b      	ldr	r3, [r7, #32]
 8007762:	1ad3      	subs	r3, r2, r3
 8007764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007766:	429a      	cmp	r2, r3
 8007768:	d803      	bhi.n	8007772 <HAL_SPI_TransmitReceive+0x2be>
 800776a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800776c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007770:	d102      	bne.n	8007778 <HAL_SPI_TransmitReceive+0x2c4>
 8007772:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007774:	2b00      	cmp	r3, #0
 8007776:	d109      	bne.n	800778c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2201      	movs	r2, #1
 800777c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	2200      	movs	r2, #0
 8007784:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e038      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007790:	b29b      	uxth	r3, r3
 8007792:	2b00      	cmp	r3, #0
 8007794:	d19c      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x21c>
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d197      	bne.n	80076d0 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077a0:	6a3a      	ldr	r2, [r7, #32]
 80077a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80077a4:	68f8      	ldr	r0, [r7, #12]
 80077a6:	f000 fa65 	bl	8007c74 <SPI_EndRxTxTransaction>
 80077aa:	4603      	mov	r3, r0
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d008      	beq.n	80077c2 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	2220      	movs	r2, #32
 80077b4:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	2200      	movs	r2, #0
 80077ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80077be:	2301      	movs	r3, #1
 80077c0:	e01d      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	689b      	ldr	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d10a      	bne.n	80077e0 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077ca:	2300      	movs	r3, #0
 80077cc:	613b      	str	r3, [r7, #16]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	68db      	ldr	r3, [r3, #12]
 80077d4:	613b      	str	r3, [r7, #16]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	613b      	str	r3, [r7, #16]
 80077de:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2201      	movs	r2, #1
 80077e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2200      	movs	r2, #0
 80077ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d001      	beq.n	80077fc <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80077f8:	2301      	movs	r3, #1
 80077fa:	e000      	b.n	80077fe <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80077fc:	2300      	movs	r3, #0
  }
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3728      	adds	r7, #40	@ 0x28
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}
	...

08007808 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	4613      	mov	r3, r2
 8007814:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800781c:	b2db      	uxtb	r3, r3
 800781e:	2b01      	cmp	r3, #1
 8007820:	d001      	beq.n	8007826 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007822:	2302      	movs	r3, #2
 8007824:	e097      	b.n	8007956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	2b00      	cmp	r3, #0
 800782a:	d002      	beq.n	8007832 <HAL_SPI_Transmit_DMA+0x2a>
 800782c:	88fb      	ldrh	r3, [r7, #6]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d101      	bne.n	8007836 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e08f      	b.n	8007956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800783c:	2b01      	cmp	r3, #1
 800783e:	d101      	bne.n	8007844 <HAL_SPI_Transmit_DMA+0x3c>
 8007840:	2302      	movs	r3, #2
 8007842:	e088      	b.n	8007956 <HAL_SPI_Transmit_DMA+0x14e>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	2203      	movs	r2, #3
 8007850:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	68ba      	ldr	r2, [r7, #8]
 800785e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	88fa      	ldrh	r2, [r7, #6]
 8007864:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	88fa      	ldrh	r2, [r7, #6]
 800786a:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	2200      	movs	r2, #0
 8007870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2200      	movs	r2, #0
 8007876:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2200      	movs	r2, #0
 800787c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2200      	movs	r2, #0
 8007888:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	689b      	ldr	r3, [r3, #8]
 800788e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007892:	d10f      	bne.n	80078b4 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80078b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b8:	4a29      	ldr	r2, [pc, #164]	@ (8007960 <HAL_SPI_Transmit_DMA+0x158>)
 80078ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c0:	4a28      	ldr	r2, [pc, #160]	@ (8007964 <HAL_SPI_Transmit_DMA+0x15c>)
 80078c2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078c8:	4a27      	ldr	r2, [pc, #156]	@ (8007968 <HAL_SPI_Transmit_DMA+0x160>)
 80078ca:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078d0:	2200      	movs	r2, #0
 80078d2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078dc:	4619      	mov	r1, r3
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	330c      	adds	r3, #12
 80078e4:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80078ea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80078ec:	f7fc ffe0 	bl	80048b0 <HAL_DMA_Start_IT>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d00b      	beq.n	800790e <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80078fa:	f043 0210 	orr.w	r2, r3, #16
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	e023      	b.n	8007956 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007918:	2b40      	cmp	r3, #64	@ 0x40
 800791a:	d007      	beq.n	800792c <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800792a:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2200      	movs	r2, #0
 8007930:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	685a      	ldr	r2, [r3, #4]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f042 0220 	orr.w	r2, r2, #32
 8007942:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	685a      	ldr	r2, [r3, #4]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0202 	orr.w	r2, r2, #2
 8007952:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3710      	adds	r7, #16
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}
 800795e:	bf00      	nop
 8007960:	08007a3d 	.word	0x08007a3d
 8007964:	08007995 	.word	0x08007995
 8007968:	08007a59 	.word	0x08007a59

0800796c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800796c:	b480      	push	{r7}
 800796e:	b083      	sub	sp, #12
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007974:	bf00      	nop
 8007976:	370c      	adds	r7, #12
 8007978:	46bd      	mov	sp, r7
 800797a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797e:	4770      	bx	lr

08007980 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007980:	b480      	push	{r7}
 8007982:	b083      	sub	sp, #12
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007988:	bf00      	nop
 800798a:	370c      	adds	r7, #12
 800798c:	46bd      	mov	sp, r7
 800798e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007992:	4770      	bx	lr

08007994 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079a2:	f7fc fd95 	bl	80044d0 <HAL_GetTick>
 80079a6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80079b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80079b6:	d03b      	beq.n	8007a30 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685a      	ldr	r2, [r3, #4]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	f022 0220 	bic.w	r2, r2, #32
 80079c6:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	685a      	ldr	r2, [r3, #4]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f022 0202 	bic.w	r2, r2, #2
 80079d6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80079d8:	693a      	ldr	r2, [r7, #16]
 80079da:	2164      	movs	r1, #100	@ 0x64
 80079dc:	6978      	ldr	r0, [r7, #20]
 80079de:	f000 f949 	bl	8007c74 <SPI_EndRxTxTransaction>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d005      	beq.n	80079f4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ec:	f043 0220 	orr.w	r2, r3, #32
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80079f4:	697b      	ldr	r3, [r7, #20]
 80079f6:	689b      	ldr	r3, [r3, #8]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d10a      	bne.n	8007a12 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80079fc:	2300      	movs	r3, #0
 80079fe:	60fb      	str	r3, [r7, #12]
 8007a00:	697b      	ldr	r3, [r7, #20]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	68db      	ldr	r3, [r3, #12]
 8007a06:	60fb      	str	r3, [r7, #12]
 8007a08:	697b      	ldr	r3, [r7, #20]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	60fb      	str	r3, [r7, #12]
 8007a10:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007a12:	697b      	ldr	r3, [r7, #20]
 8007a14:	2200      	movs	r2, #0
 8007a16:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007a18:	697b      	ldr	r3, [r7, #20]
 8007a1a:	2201      	movs	r2, #1
 8007a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d003      	beq.n	8007a30 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007a28:	6978      	ldr	r0, [r7, #20]
 8007a2a:	f7ff ffa9 	bl	8007980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007a2e:	e002      	b.n	8007a36 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007a30:	6978      	ldr	r0, [r7, #20]
 8007a32:	f7fa fcd5 	bl	80023e0 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a36:	3718      	adds	r7, #24
 8007a38:	46bd      	mov	sp, r7
 8007a3a:	bd80      	pop	{r7, pc}

08007a3c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	b084      	sub	sp, #16
 8007a40:	af00      	add	r7, sp, #0
 8007a42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a48:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007a4a:	68f8      	ldr	r0, [r7, #12]
 8007a4c:	f7ff ff8e 	bl	800796c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a50:	bf00      	nop
 8007a52:	3710      	adds	r7, #16
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}

08007a58 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a64:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f022 0203 	bic.w	r2, r2, #3
 8007a74:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a7a:	f043 0210 	orr.w	r2, r3, #16
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2201      	movs	r2, #1
 8007a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007a8a:	68f8      	ldr	r0, [r7, #12]
 8007a8c:	f7ff ff78 	bl	8007980 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007a90:	bf00      	nop
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b088      	sub	sp, #32
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	60f8      	str	r0, [r7, #12]
 8007aa0:	60b9      	str	r1, [r7, #8]
 8007aa2:	603b      	str	r3, [r7, #0]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007aa8:	f7fc fd12 	bl	80044d0 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ab0:	1a9b      	subs	r3, r3, r2
 8007ab2:	683a      	ldr	r2, [r7, #0]
 8007ab4:	4413      	add	r3, r2
 8007ab6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007ab8:	f7fc fd0a 	bl	80044d0 <HAL_GetTick>
 8007abc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007abe:	4b39      	ldr	r3, [pc, #228]	@ (8007ba4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	015b      	lsls	r3, r3, #5
 8007ac4:	0d1b      	lsrs	r3, r3, #20
 8007ac6:	69fa      	ldr	r2, [r7, #28]
 8007ac8:	fb02 f303 	mul.w	r3, r2, r3
 8007acc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ace:	e054      	b.n	8007b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ad6:	d050      	beq.n	8007b7a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ad8:	f7fc fcfa 	bl	80044d0 <HAL_GetTick>
 8007adc:	4602      	mov	r2, r0
 8007ade:	69bb      	ldr	r3, [r7, #24]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d902      	bls.n	8007aee <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ae8:	69fb      	ldr	r3, [r7, #28]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d13d      	bne.n	8007b6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685a      	ldr	r2, [r3, #4]
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007afc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	685b      	ldr	r3, [r3, #4]
 8007b02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b06:	d111      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	689b      	ldr	r3, [r3, #8]
 8007b0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007b10:	d004      	beq.n	8007b1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1a:	d107      	bne.n	8007b2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	681a      	ldr	r2, [r3, #0]
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007b34:	d10f      	bne.n	8007b56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007b44:	601a      	str	r2, [r3, #0]
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	681a      	ldr	r2, [r3, #0]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007b54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2200      	movs	r2, #0
 8007b62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e017      	b.n	8007b9a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007b6a:	697b      	ldr	r3, [r7, #20]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d101      	bne.n	8007b74 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007b70:	2300      	movs	r3, #0
 8007b72:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	3b01      	subs	r3, #1
 8007b78:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	689a      	ldr	r2, [r3, #8]
 8007b80:	68bb      	ldr	r3, [r7, #8]
 8007b82:	4013      	ands	r3, r2
 8007b84:	68ba      	ldr	r2, [r7, #8]
 8007b86:	429a      	cmp	r2, r3
 8007b88:	bf0c      	ite	eq
 8007b8a:	2301      	moveq	r3, #1
 8007b8c:	2300      	movne	r3, #0
 8007b8e:	b2db      	uxtb	r3, r3
 8007b90:	461a      	mov	r2, r3
 8007b92:	79fb      	ldrb	r3, [r7, #7]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	d19b      	bne.n	8007ad0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	3720      	adds	r7, #32
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	bd80      	pop	{r7, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000004 	.word	0x20000004

08007ba8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af02      	add	r7, sp, #8
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bbc:	d111      	bne.n	8007be2 <SPI_EndRxTransaction+0x3a>
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007bc6:	d004      	beq.n	8007bd2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bd0:	d107      	bne.n	8007be2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007be0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	685b      	ldr	r3, [r3, #4]
 8007be6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bea:	d12a      	bne.n	8007c42 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007bec:	68fb      	ldr	r3, [r7, #12]
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007bf4:	d012      	beq.n	8007c1c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	9300      	str	r3, [sp, #0]
 8007bfa:	68bb      	ldr	r3, [r7, #8]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2180      	movs	r1, #128	@ 0x80
 8007c00:	68f8      	ldr	r0, [r7, #12]
 8007c02:	f7ff ff49 	bl	8007a98 <SPI_WaitFlagStateUntilTimeout>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d02d      	beq.n	8007c68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c10:	f043 0220 	orr.w	r2, r3, #32
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e026      	b.n	8007c6a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	9300      	str	r3, [sp, #0]
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	2200      	movs	r2, #0
 8007c24:	2101      	movs	r1, #1
 8007c26:	68f8      	ldr	r0, [r7, #12]
 8007c28:	f7ff ff36 	bl	8007a98 <SPI_WaitFlagStateUntilTimeout>
 8007c2c:	4603      	mov	r3, r0
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d01a      	beq.n	8007c68 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c36:	f043 0220 	orr.w	r2, r3, #32
 8007c3a:	68fb      	ldr	r3, [r7, #12]
 8007c3c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e013      	b.n	8007c6a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	9300      	str	r3, [sp, #0]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	2200      	movs	r2, #0
 8007c4a:	2101      	movs	r1, #1
 8007c4c:	68f8      	ldr	r0, [r7, #12]
 8007c4e:	f7ff ff23 	bl	8007a98 <SPI_WaitFlagStateUntilTimeout>
 8007c52:	4603      	mov	r3, r0
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d007      	beq.n	8007c68 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c5c:	f043 0220 	orr.w	r2, r3, #32
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c64:	2303      	movs	r3, #3
 8007c66:	e000      	b.n	8007c6a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007c68:	2300      	movs	r3, #0
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b088      	sub	sp, #32
 8007c78:	af02      	add	r7, sp, #8
 8007c7a:	60f8      	str	r0, [r7, #12]
 8007c7c:	60b9      	str	r1, [r7, #8]
 8007c7e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	9300      	str	r3, [sp, #0]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	2201      	movs	r2, #1
 8007c88:	2102      	movs	r1, #2
 8007c8a:	68f8      	ldr	r0, [r7, #12]
 8007c8c:	f7ff ff04 	bl	8007a98 <SPI_WaitFlagStateUntilTimeout>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d007      	beq.n	8007ca6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c9a:	f043 0220 	orr.w	r2, r3, #32
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007ca2:	2303      	movs	r3, #3
 8007ca4:	e032      	b.n	8007d0c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8007d14 <SPI_EndRxTxTransaction+0xa0>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	4a1b      	ldr	r2, [pc, #108]	@ (8007d18 <SPI_EndRxTxTransaction+0xa4>)
 8007cac:	fba2 2303 	umull	r2, r3, r2, r3
 8007cb0:	0d5b      	lsrs	r3, r3, #21
 8007cb2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007cb6:	fb02 f303 	mul.w	r3, r2, r3
 8007cba:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007cc4:	d112      	bne.n	8007cec <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	9300      	str	r3, [sp, #0]
 8007cca:	68bb      	ldr	r3, [r7, #8]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	2180      	movs	r1, #128	@ 0x80
 8007cd0:	68f8      	ldr	r0, [r7, #12]
 8007cd2:	f7ff fee1 	bl	8007a98 <SPI_WaitFlagStateUntilTimeout>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d016      	beq.n	8007d0a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007ce0:	f043 0220 	orr.w	r2, r3, #32
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ce8:	2303      	movs	r3, #3
 8007cea:	e00f      	b.n	8007d0c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007cec:	697b      	ldr	r3, [r7, #20]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00a      	beq.n	8007d08 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	3b01      	subs	r3, #1
 8007cf6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d02:	2b80      	cmp	r3, #128	@ 0x80
 8007d04:	d0f2      	beq.n	8007cec <SPI_EndRxTxTransaction+0x78>
 8007d06:	e000      	b.n	8007d0a <SPI_EndRxTxTransaction+0x96>
        break;
 8007d08:	bf00      	nop
  }

  return HAL_OK;
 8007d0a:	2300      	movs	r3, #0
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3718      	adds	r7, #24
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000004 	.word	0x20000004
 8007d18:	165e9f81 	.word	0x165e9f81

08007d1c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b082      	sub	sp, #8
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d101      	bne.n	8007d2e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	e041      	b.n	8007db2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d106      	bne.n	8007d48 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fa fa84 	bl	8002250 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2202      	movs	r2, #2
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	3304      	adds	r3, #4
 8007d58:	4619      	mov	r1, r3
 8007d5a:	4610      	mov	r0, r2
 8007d5c:	f000 fd6a 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2201      	movs	r2, #1
 8007d64:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2201      	movs	r2, #1
 8007d6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2201      	movs	r2, #1
 8007d74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2201      	movs	r2, #1
 8007d7c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2201      	movs	r2, #1
 8007d84:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	2201      	movs	r2, #1
 8007d8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	2201      	movs	r2, #1
 8007d94:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2201      	movs	r2, #1
 8007d9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	2201      	movs	r2, #1
 8007da4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	2201      	movs	r2, #1
 8007dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007db0:	2300      	movs	r3, #0
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	3708      	adds	r7, #8
 8007db6:	46bd      	mov	sp, r7
 8007db8:	bd80      	pop	{r7, pc}

08007dba <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007dba:	b580      	push	{r7, lr}
 8007dbc:	b082      	sub	sp, #8
 8007dbe:	af00      	add	r7, sp, #0
 8007dc0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d101      	bne.n	8007dcc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007dc8:	2301      	movs	r3, #1
 8007dca:	e041      	b.n	8007e50 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007dd2:	b2db      	uxtb	r3, r3
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d106      	bne.n	8007de6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2200      	movs	r2, #0
 8007ddc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f000 f839 	bl	8007e58 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	2202      	movs	r2, #2
 8007dea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	3304      	adds	r3, #4
 8007df6:	4619      	mov	r1, r3
 8007df8:	4610      	mov	r0, r2
 8007dfa:	f000 fd1b 	bl	8008834 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	2201      	movs	r2, #1
 8007e02:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2201      	movs	r2, #1
 8007e12:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2201      	movs	r2, #1
 8007e2a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2201      	movs	r2, #1
 8007e3a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	2201      	movs	r2, #1
 8007e42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	2201      	movs	r2, #1
 8007e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007e4e:	2300      	movs	r3, #0
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3708      	adds	r7, #8
 8007e54:	46bd      	mov	sp, r7
 8007e56:	bd80      	pop	{r7, pc}

08007e58 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007e58:	b480      	push	{r7}
 8007e5a:	b083      	sub	sp, #12
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007e60:	bf00      	nop
 8007e62:	370c      	adds	r7, #12
 8007e64:	46bd      	mov	sp, r7
 8007e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e6a:	4770      	bx	lr

08007e6c <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b086      	sub	sp, #24
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	60f8      	str	r0, [r7, #12]
 8007e74:	60b9      	str	r1, [r7, #8]
 8007e76:	607a      	str	r2, [r7, #4]
 8007e78:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007e7e:	68bb      	ldr	r3, [r7, #8]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d109      	bne.n	8007e98 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e8a:	b2db      	uxtb	r3, r3
 8007e8c:	2b02      	cmp	r3, #2
 8007e8e:	bf0c      	ite	eq
 8007e90:	2301      	moveq	r3, #1
 8007e92:	2300      	movne	r3, #0
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	e022      	b.n	8007ede <HAL_TIM_PWM_Start_DMA+0x72>
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b04      	cmp	r3, #4
 8007e9c:	d109      	bne.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0x46>
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007ea4:	b2db      	uxtb	r3, r3
 8007ea6:	2b02      	cmp	r3, #2
 8007ea8:	bf0c      	ite	eq
 8007eaa:	2301      	moveq	r3, #1
 8007eac:	2300      	movne	r3, #0
 8007eae:	b2db      	uxtb	r3, r3
 8007eb0:	e015      	b.n	8007ede <HAL_TIM_PWM_Start_DMA+0x72>
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	2b08      	cmp	r3, #8
 8007eb6:	d109      	bne.n	8007ecc <HAL_TIM_PWM_Start_DMA+0x60>
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007ebe:	b2db      	uxtb	r3, r3
 8007ec0:	2b02      	cmp	r3, #2
 8007ec2:	bf0c      	ite	eq
 8007ec4:	2301      	moveq	r3, #1
 8007ec6:	2300      	movne	r3, #0
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	e008      	b.n	8007ede <HAL_TIM_PWM_Start_DMA+0x72>
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ed2:	b2db      	uxtb	r3, r3
 8007ed4:	2b02      	cmp	r3, #2
 8007ed6:	bf0c      	ite	eq
 8007ed8:	2301      	moveq	r3, #1
 8007eda:	2300      	movne	r3, #0
 8007edc:	b2db      	uxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d001      	beq.n	8007ee6 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007ee2:	2302      	movs	r3, #2
 8007ee4:	e15d      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d109      	bne.n	8007f00 <HAL_TIM_PWM_Start_DMA+0x94>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007ef2:	b2db      	uxtb	r3, r3
 8007ef4:	2b01      	cmp	r3, #1
 8007ef6:	bf0c      	ite	eq
 8007ef8:	2301      	moveq	r3, #1
 8007efa:	2300      	movne	r3, #0
 8007efc:	b2db      	uxtb	r3, r3
 8007efe:	e022      	b.n	8007f46 <HAL_TIM_PWM_Start_DMA+0xda>
 8007f00:	68bb      	ldr	r3, [r7, #8]
 8007f02:	2b04      	cmp	r3, #4
 8007f04:	d109      	bne.n	8007f1a <HAL_TIM_PWM_Start_DMA+0xae>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007f0c:	b2db      	uxtb	r3, r3
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	bf0c      	ite	eq
 8007f12:	2301      	moveq	r3, #1
 8007f14:	2300      	movne	r3, #0
 8007f16:	b2db      	uxtb	r3, r3
 8007f18:	e015      	b.n	8007f46 <HAL_TIM_PWM_Start_DMA+0xda>
 8007f1a:	68bb      	ldr	r3, [r7, #8]
 8007f1c:	2b08      	cmp	r3, #8
 8007f1e:	d109      	bne.n	8007f34 <HAL_TIM_PWM_Start_DMA+0xc8>
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007f26:	b2db      	uxtb	r3, r3
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	bf0c      	ite	eq
 8007f2c:	2301      	moveq	r3, #1
 8007f2e:	2300      	movne	r3, #0
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	e008      	b.n	8007f46 <HAL_TIM_PWM_Start_DMA+0xda>
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007f3a:	b2db      	uxtb	r3, r3
 8007f3c:	2b01      	cmp	r3, #1
 8007f3e:	bf0c      	ite	eq
 8007f40:	2301      	moveq	r3, #1
 8007f42:	2300      	movne	r3, #0
 8007f44:	b2db      	uxtb	r3, r3
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d024      	beq.n	8007f94 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d002      	beq.n	8007f56 <HAL_TIM_PWM_Start_DMA+0xea>
 8007f50:	887b      	ldrh	r3, [r7, #2]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d101      	bne.n	8007f5a <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	e123      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007f5a:	68bb      	ldr	r3, [r7, #8]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d104      	bne.n	8007f6a <HAL_TIM_PWM_Start_DMA+0xfe>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2202      	movs	r2, #2
 8007f64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007f68:	e016      	b.n	8007f98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	2b04      	cmp	r3, #4
 8007f6e:	d104      	bne.n	8007f7a <HAL_TIM_PWM_Start_DMA+0x10e>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2202      	movs	r2, #2
 8007f74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007f78:	e00e      	b.n	8007f98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	d104      	bne.n	8007f8a <HAL_TIM_PWM_Start_DMA+0x11e>
 8007f80:	68fb      	ldr	r3, [r7, #12]
 8007f82:	2202      	movs	r2, #2
 8007f84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007f88:	e006      	b.n	8007f98 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2202      	movs	r2, #2
 8007f8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007f92:	e001      	b.n	8007f98 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007f94:	2301      	movs	r3, #1
 8007f96:	e104      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	2b0c      	cmp	r3, #12
 8007f9c:	f200 80ae 	bhi.w	80080fc <HAL_TIM_PWM_Start_DMA+0x290>
 8007fa0:	a201      	add	r2, pc, #4	@ (adr r2, 8007fa8 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007fa2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fa6:	bf00      	nop
 8007fa8:	08007fdd 	.word	0x08007fdd
 8007fac:	080080fd 	.word	0x080080fd
 8007fb0:	080080fd 	.word	0x080080fd
 8007fb4:	080080fd 	.word	0x080080fd
 8007fb8:	08008025 	.word	0x08008025
 8007fbc:	080080fd 	.word	0x080080fd
 8007fc0:	080080fd 	.word	0x080080fd
 8007fc4:	080080fd 	.word	0x080080fd
 8007fc8:	0800806d 	.word	0x0800806d
 8007fcc:	080080fd 	.word	0x080080fd
 8007fd0:	080080fd 	.word	0x080080fd
 8007fd4:	080080fd 	.word	0x080080fd
 8007fd8:	080080b5 	.word	0x080080b5
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe0:	4a72      	ldr	r2, [pc, #456]	@ (80081ac <HAL_TIM_PWM_Start_DMA+0x340>)
 8007fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fe8:	4a71      	ldr	r2, [pc, #452]	@ (80081b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ff0:	4a70      	ldr	r2, [pc, #448]	@ (80081b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3334      	adds	r3, #52	@ 0x34
 8008000:	461a      	mov	r2, r3
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	f7fc fc54 	bl	80048b0 <HAL_DMA_Start_IT>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e0c7      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008020:	60da      	str	r2, [r3, #12]
      break;
 8008022:	e06e      	b.n	8008102 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008028:	4a60      	ldr	r2, [pc, #384]	@ (80081ac <HAL_TIM_PWM_Start_DMA+0x340>)
 800802a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008030:	4a5f      	ldr	r2, [pc, #380]	@ (80081b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008032:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008038:	4a5e      	ldr	r2, [pc, #376]	@ (80081b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 800803a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008040:	6879      	ldr	r1, [r7, #4]
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3338      	adds	r3, #56	@ 0x38
 8008048:	461a      	mov	r2, r3
 800804a:	887b      	ldrh	r3, [r7, #2]
 800804c:	f7fc fc30 	bl	80048b0 <HAL_DMA_Start_IT>
 8008050:	4603      	mov	r3, r0
 8008052:	2b00      	cmp	r3, #0
 8008054:	d001      	beq.n	800805a <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e0a3      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	68da      	ldr	r2, [r3, #12]
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008068:	60da      	str	r2, [r3, #12]
      break;
 800806a:	e04a      	b.n	8008102 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008070:	4a4e      	ldr	r2, [pc, #312]	@ (80081ac <HAL_TIM_PWM_Start_DMA+0x340>)
 8008072:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008078:	4a4d      	ldr	r2, [pc, #308]	@ (80081b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 800807a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	4a4c      	ldr	r2, [pc, #304]	@ (80081b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 8008082:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008088:	6879      	ldr	r1, [r7, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	333c      	adds	r3, #60	@ 0x3c
 8008090:	461a      	mov	r2, r3
 8008092:	887b      	ldrh	r3, [r7, #2]
 8008094:	f7fc fc0c 	bl	80048b0 <HAL_DMA_Start_IT>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e07f      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	68da      	ldr	r2, [r3, #12]
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80080b0:	60da      	str	r2, [r3, #12]
      break;
 80080b2:	e026      	b.n	8008102 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080b8:	4a3c      	ldr	r2, [pc, #240]	@ (80081ac <HAL_TIM_PWM_Start_DMA+0x340>)
 80080ba:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c0:	4a3b      	ldr	r2, [pc, #236]	@ (80081b0 <HAL_TIM_PWM_Start_DMA+0x344>)
 80080c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80080c4:	68fb      	ldr	r3, [r7, #12]
 80080c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80080c8:	4a3a      	ldr	r2, [pc, #232]	@ (80081b4 <HAL_TIM_PWM_Start_DMA+0x348>)
 80080ca:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80080d0:	6879      	ldr	r1, [r7, #4]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	3340      	adds	r3, #64	@ 0x40
 80080d8:	461a      	mov	r2, r3
 80080da:	887b      	ldrh	r3, [r7, #2]
 80080dc:	f7fc fbe8 	bl	80048b0 <HAL_DMA_Start_IT>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d001      	beq.n	80080ea <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e05b      	b.n	80081a2 <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	68da      	ldr	r2, [r3, #12]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80080f8:	60da      	str	r2, [r3, #12]
      break;
 80080fa:	e002      	b.n	8008102 <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80080fc:	2301      	movs	r3, #1
 80080fe:	75fb      	strb	r3, [r7, #23]
      break;
 8008100:	bf00      	nop
  }

  if (status == HAL_OK)
 8008102:	7dfb      	ldrb	r3, [r7, #23]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d14b      	bne.n	80081a0 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	2201      	movs	r2, #1
 800810e:	68b9      	ldr	r1, [r7, #8]
 8008110:	4618      	mov	r0, r3
 8008112:	f000 fe41 	bl	8008d98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a27      	ldr	r2, [pc, #156]	@ (80081b8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d107      	bne.n	8008130 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800812e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a20      	ldr	r2, [pc, #128]	@ (80081b8 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008136:	4293      	cmp	r3, r2
 8008138:	d018      	beq.n	800816c <HAL_TIM_PWM_Start_DMA+0x300>
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008142:	d013      	beq.n	800816c <HAL_TIM_PWM_Start_DMA+0x300>
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	4a1c      	ldr	r2, [pc, #112]	@ (80081bc <HAL_TIM_PWM_Start_DMA+0x350>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00e      	beq.n	800816c <HAL_TIM_PWM_Start_DMA+0x300>
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	4a1b      	ldr	r2, [pc, #108]	@ (80081c0 <HAL_TIM_PWM_Start_DMA+0x354>)
 8008154:	4293      	cmp	r3, r2
 8008156:	d009      	beq.n	800816c <HAL_TIM_PWM_Start_DMA+0x300>
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	4a19      	ldr	r2, [pc, #100]	@ (80081c4 <HAL_TIM_PWM_Start_DMA+0x358>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d004      	beq.n	800816c <HAL_TIM_PWM_Start_DMA+0x300>
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	4a18      	ldr	r2, [pc, #96]	@ (80081c8 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008168:	4293      	cmp	r3, r2
 800816a:	d111      	bne.n	8008190 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	689b      	ldr	r3, [r3, #8]
 8008172:	f003 0307 	and.w	r3, r3, #7
 8008176:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008178:	693b      	ldr	r3, [r7, #16]
 800817a:	2b06      	cmp	r3, #6
 800817c:	d010      	beq.n	80081a0 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f042 0201 	orr.w	r2, r2, #1
 800818c:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800818e:	e007      	b.n	80081a0 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	681a      	ldr	r2, [r3, #0]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f042 0201 	orr.w	r2, r2, #1
 800819e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80081a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3718      	adds	r7, #24
 80081a6:	46bd      	mov	sp, r7
 80081a8:	bd80      	pop	{r7, pc}
 80081aa:	bf00      	nop
 80081ac:	08008725 	.word	0x08008725
 80081b0:	080087cd 	.word	0x080087cd
 80081b4:	08008693 	.word	0x08008693
 80081b8:	40010000 	.word	0x40010000
 80081bc:	40000400 	.word	0x40000400
 80081c0:	40000800 	.word	0x40000800
 80081c4:	40000c00 	.word	0x40000c00
 80081c8:	40014000 	.word	0x40014000

080081cc <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b084      	sub	sp, #16
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80081d6:	2300      	movs	r3, #0
 80081d8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	2b0c      	cmp	r3, #12
 80081de:	d855      	bhi.n	800828c <HAL_TIM_PWM_Stop_DMA+0xc0>
 80081e0:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	0800821d 	.word	0x0800821d
 80081ec:	0800828d 	.word	0x0800828d
 80081f0:	0800828d 	.word	0x0800828d
 80081f4:	0800828d 	.word	0x0800828d
 80081f8:	08008239 	.word	0x08008239
 80081fc:	0800828d 	.word	0x0800828d
 8008200:	0800828d 	.word	0x0800828d
 8008204:	0800828d 	.word	0x0800828d
 8008208:	08008255 	.word	0x08008255
 800820c:	0800828d 	.word	0x0800828d
 8008210:	0800828d 	.word	0x0800828d
 8008214:	0800828d 	.word	0x0800828d
 8008218:	08008271 	.word	0x08008271
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	68da      	ldr	r2, [r3, #12]
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800822a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008230:	4618      	mov	r0, r3
 8008232:	f7fc fb95 	bl	8004960 <HAL_DMA_Abort_IT>
      break;
 8008236:	e02c      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	68da      	ldr	r2, [r3, #12]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008246:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800824c:	4618      	mov	r0, r3
 800824e:	f7fc fb87 	bl	8004960 <HAL_DMA_Abort_IT>
      break;
 8008252:	e01e      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	68da      	ldr	r2, [r3, #12]
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008262:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008268:	4618      	mov	r0, r3
 800826a:	f7fc fb79 	bl	8004960 <HAL_DMA_Abort_IT>
      break;
 800826e:	e010      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	68da      	ldr	r2, [r3, #12]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800827e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008284:	4618      	mov	r0, r3
 8008286:	f7fc fb6b 	bl	8004960 <HAL_DMA_Abort_IT>
      break;
 800828a:	e002      	b.n	8008292 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	73fb      	strb	r3, [r7, #15]
      break;
 8008290:	bf00      	nop
  }

  if (status == HAL_OK)
 8008292:	7bfb      	ldrb	r3, [r7, #15]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d157      	bne.n	8008348 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	2200      	movs	r2, #0
 800829e:	6839      	ldr	r1, [r7, #0]
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 fd79 	bl	8008d98 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008354 <HAL_TIM_PWM_Stop_DMA+0x188>)
 80082ac:	4293      	cmp	r3, r2
 80082ae:	d117      	bne.n	80082e0 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	6a1a      	ldr	r2, [r3, #32]
 80082b6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082ba:	4013      	ands	r3, r2
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d10f      	bne.n	80082e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	6a1a      	ldr	r2, [r3, #32]
 80082c6:	f240 4344 	movw	r3, #1092	@ 0x444
 80082ca:	4013      	ands	r3, r2
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d107      	bne.n	80082e0 <HAL_TIM_PWM_Stop_DMA+0x114>
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80082de:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6a1a      	ldr	r2, [r3, #32]
 80082e6:	f241 1311 	movw	r3, #4369	@ 0x1111
 80082ea:	4013      	ands	r3, r2
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d10f      	bne.n	8008310 <HAL_TIM_PWM_Stop_DMA+0x144>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	6a1a      	ldr	r2, [r3, #32]
 80082f6:	f240 4344 	movw	r3, #1092	@ 0x444
 80082fa:	4013      	ands	r3, r2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	681a      	ldr	r2, [r3, #0]
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	f022 0201 	bic.w	r2, r2, #1
 800830e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008310:	683b      	ldr	r3, [r7, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d104      	bne.n	8008320 <HAL_TIM_PWM_Stop_DMA+0x154>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800831e:	e013      	b.n	8008348 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	2b04      	cmp	r3, #4
 8008324:	d104      	bne.n	8008330 <HAL_TIM_PWM_Stop_DMA+0x164>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800832e:	e00b      	b.n	8008348 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	2b08      	cmp	r3, #8
 8008334:	d104      	bne.n	8008340 <HAL_TIM_PWM_Stop_DMA+0x174>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800833e:	e003      	b.n	8008348 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008348:	7bfb      	ldrb	r3, [r7, #15]
}
 800834a:	4618      	mov	r0, r3
 800834c:	3710      	adds	r7, #16
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	40010000 	.word	0x40010000

08008358 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b086      	sub	sp, #24
 800835c:	af00      	add	r7, sp, #0
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800836e:	2b01      	cmp	r3, #1
 8008370:	d101      	bne.n	8008376 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008372:	2302      	movs	r3, #2
 8008374:	e0ae      	b.n	80084d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	2201      	movs	r2, #1
 800837a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b0c      	cmp	r3, #12
 8008382:	f200 809f 	bhi.w	80084c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8008386:	a201      	add	r2, pc, #4	@ (adr r2, 800838c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008388:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800838c:	080083c1 	.word	0x080083c1
 8008390:	080084c5 	.word	0x080084c5
 8008394:	080084c5 	.word	0x080084c5
 8008398:	080084c5 	.word	0x080084c5
 800839c:	08008401 	.word	0x08008401
 80083a0:	080084c5 	.word	0x080084c5
 80083a4:	080084c5 	.word	0x080084c5
 80083a8:	080084c5 	.word	0x080084c5
 80083ac:	08008443 	.word	0x08008443
 80083b0:	080084c5 	.word	0x080084c5
 80083b4:	080084c5 	.word	0x080084c5
 80083b8:	080084c5 	.word	0x080084c5
 80083bc:	08008483 	.word	0x08008483
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	68b9      	ldr	r1, [r7, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f000 fac0 	bl	800894c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	699a      	ldr	r2, [r3, #24]
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f042 0208 	orr.w	r2, r2, #8
 80083da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	699a      	ldr	r2, [r3, #24]
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	f022 0204 	bic.w	r2, r2, #4
 80083ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	6999      	ldr	r1, [r3, #24]
 80083f2:	68bb      	ldr	r3, [r7, #8]
 80083f4:	691a      	ldr	r2, [r3, #16]
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	430a      	orrs	r2, r1
 80083fc:	619a      	str	r2, [r3, #24]
      break;
 80083fe:	e064      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	68b9      	ldr	r1, [r7, #8]
 8008406:	4618      	mov	r0, r3
 8008408:	f000 fb06 	bl	8008a18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	699a      	ldr	r2, [r3, #24]
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800841a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	699a      	ldr	r2, [r3, #24]
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800842a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	6999      	ldr	r1, [r3, #24]
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	691b      	ldr	r3, [r3, #16]
 8008436:	021a      	lsls	r2, r3, #8
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	430a      	orrs	r2, r1
 800843e:	619a      	str	r2, [r3, #24]
      break;
 8008440:	e043      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	4618      	mov	r0, r3
 800844a:	f000 fb51 	bl	8008af0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	69da      	ldr	r2, [r3, #28]
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f042 0208 	orr.w	r2, r2, #8
 800845c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	69da      	ldr	r2, [r3, #28]
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0204 	bic.w	r2, r2, #4
 800846c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800846e:	68fb      	ldr	r3, [r7, #12]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	69d9      	ldr	r1, [r3, #28]
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	691a      	ldr	r2, [r3, #16]
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	430a      	orrs	r2, r1
 800847e:	61da      	str	r2, [r3, #28]
      break;
 8008480:	e023      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	68b9      	ldr	r1, [r7, #8]
 8008488:	4618      	mov	r0, r3
 800848a:	f000 fb9b 	bl	8008bc4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	69da      	ldr	r2, [r3, #28]
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800849c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	69da      	ldr	r2, [r3, #28]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80084ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	69d9      	ldr	r1, [r3, #28]
 80084b4:	68bb      	ldr	r3, [r7, #8]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	021a      	lsls	r2, r3, #8
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	430a      	orrs	r2, r1
 80084c0:	61da      	str	r2, [r3, #28]
      break;
 80084c2:	e002      	b.n	80084ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80084c4:	2301      	movs	r3, #1
 80084c6:	75fb      	strb	r3, [r7, #23]
      break;
 80084c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2200      	movs	r2, #0
 80084ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b084      	sub	sp, #16
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
 80084e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80084e6:	2300      	movs	r3, #0
 80084e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	d101      	bne.n	80084f8 <HAL_TIM_ConfigClockSource+0x1c>
 80084f4:	2302      	movs	r3, #2
 80084f6:	e0b4      	b.n	8008662 <HAL_TIM_ConfigClockSource+0x186>
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2201      	movs	r2, #1
 80084fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2202      	movs	r2, #2
 8008504:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	689b      	ldr	r3, [r3, #8]
 800850e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800851e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	681b      	ldr	r3, [r3, #0]
 8008524:	68ba      	ldr	r2, [r7, #8]
 8008526:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008530:	d03e      	beq.n	80085b0 <HAL_TIM_ConfigClockSource+0xd4>
 8008532:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008536:	f200 8087 	bhi.w	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 800853a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800853e:	f000 8086 	beq.w	800864e <HAL_TIM_ConfigClockSource+0x172>
 8008542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008546:	d87f      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008548:	2b70      	cmp	r3, #112	@ 0x70
 800854a:	d01a      	beq.n	8008582 <HAL_TIM_ConfigClockSource+0xa6>
 800854c:	2b70      	cmp	r3, #112	@ 0x70
 800854e:	d87b      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008550:	2b60      	cmp	r3, #96	@ 0x60
 8008552:	d050      	beq.n	80085f6 <HAL_TIM_ConfigClockSource+0x11a>
 8008554:	2b60      	cmp	r3, #96	@ 0x60
 8008556:	d877      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008558:	2b50      	cmp	r3, #80	@ 0x50
 800855a:	d03c      	beq.n	80085d6 <HAL_TIM_ConfigClockSource+0xfa>
 800855c:	2b50      	cmp	r3, #80	@ 0x50
 800855e:	d873      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008560:	2b40      	cmp	r3, #64	@ 0x40
 8008562:	d058      	beq.n	8008616 <HAL_TIM_ConfigClockSource+0x13a>
 8008564:	2b40      	cmp	r3, #64	@ 0x40
 8008566:	d86f      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008568:	2b30      	cmp	r3, #48	@ 0x30
 800856a:	d064      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x15a>
 800856c:	2b30      	cmp	r3, #48	@ 0x30
 800856e:	d86b      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008570:	2b20      	cmp	r3, #32
 8008572:	d060      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x15a>
 8008574:	2b20      	cmp	r3, #32
 8008576:	d867      	bhi.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
 8008578:	2b00      	cmp	r3, #0
 800857a:	d05c      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x15a>
 800857c:	2b10      	cmp	r3, #16
 800857e:	d05a      	beq.n	8008636 <HAL_TIM_ConfigClockSource+0x15a>
 8008580:	e062      	b.n	8008648 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008586:	683b      	ldr	r3, [r7, #0]
 8008588:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800858a:	683b      	ldr	r3, [r7, #0]
 800858c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800858e:	683b      	ldr	r3, [r7, #0]
 8008590:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008592:	f000 fbe1 	bl	8008d58 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	689b      	ldr	r3, [r3, #8]
 800859c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800859e:	68bb      	ldr	r3, [r7, #8]
 80085a0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80085a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	609a      	str	r2, [r3, #8]
      break;
 80085ae:	e04f      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80085b8:	683b      	ldr	r3, [r7, #0]
 80085ba:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80085bc:	683b      	ldr	r3, [r7, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80085c0:	f000 fbca 	bl	8008d58 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	689a      	ldr	r2, [r3, #8]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80085d2:	609a      	str	r2, [r3, #8]
      break;
 80085d4:	e03c      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085da:	683b      	ldr	r3, [r7, #0]
 80085dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e2:	461a      	mov	r2, r3
 80085e4:	f000 fb3e 	bl	8008c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2150      	movs	r1, #80	@ 0x50
 80085ee:	4618      	mov	r0, r3
 80085f0:	f000 fb97 	bl	8008d22 <TIM_ITRx_SetConfig>
      break;
 80085f4:	e02c      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80085fa:	683b      	ldr	r3, [r7, #0]
 80085fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008602:	461a      	mov	r2, r3
 8008604:	f000 fb5d 	bl	8008cc2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	2160      	movs	r1, #96	@ 0x60
 800860e:	4618      	mov	r0, r3
 8008610:	f000 fb87 	bl	8008d22 <TIM_ITRx_SetConfig>
      break;
 8008614:	e01c      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800861e:	683b      	ldr	r3, [r7, #0]
 8008620:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008622:	461a      	mov	r2, r3
 8008624:	f000 fb1e 	bl	8008c64 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	2140      	movs	r1, #64	@ 0x40
 800862e:	4618      	mov	r0, r3
 8008630:	f000 fb77 	bl	8008d22 <TIM_ITRx_SetConfig>
      break;
 8008634:	e00c      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4619      	mov	r1, r3
 8008640:	4610      	mov	r0, r2
 8008642:	f000 fb6e 	bl	8008d22 <TIM_ITRx_SetConfig>
      break;
 8008646:	e003      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008648:	2301      	movs	r3, #1
 800864a:	73fb      	strb	r3, [r7, #15]
      break;
 800864c:	e000      	b.n	8008650 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800864e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008660:	7bfb      	ldrb	r3, [r7, #15]
}
 8008662:	4618      	mov	r0, r3
 8008664:	3710      	adds	r7, #16
 8008666:	46bd      	mov	sp, r7
 8008668:	bd80      	pop	{r7, pc}

0800866a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800866a:	b480      	push	{r7}
 800866c:	b083      	sub	sp, #12
 800866e:	af00      	add	r7, sp, #0
 8008670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008672:	bf00      	nop
 8008674:	370c      	adds	r7, #12
 8008676:	46bd      	mov	sp, r7
 8008678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800867c:	4770      	bx	lr

0800867e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800867e:	b480      	push	{r7}
 8008680:	b083      	sub	sp, #12
 8008682:	af00      	add	r7, sp, #0
 8008684:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008686:	bf00      	nop
 8008688:	370c      	adds	r7, #12
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr

08008692 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800869e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086a4:	687a      	ldr	r2, [r7, #4]
 80086a6:	429a      	cmp	r2, r3
 80086a8:	d107      	bne.n	80086ba <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	2201      	movs	r2, #1
 80086ae:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	2201      	movs	r2, #1
 80086b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80086b8:	e02a      	b.n	8008710 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80086be:	687a      	ldr	r2, [r7, #4]
 80086c0:	429a      	cmp	r2, r3
 80086c2:	d107      	bne.n	80086d4 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2202      	movs	r2, #2
 80086c8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2201      	movs	r2, #1
 80086ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80086d2:	e01d      	b.n	8008710 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d107      	bne.n	80086ee <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	2204      	movs	r2, #4
 80086e2:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2201      	movs	r2, #1
 80086e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086ec:	e010      	b.n	8008710 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086f2:	687a      	ldr	r2, [r7, #4]
 80086f4:	429a      	cmp	r2, r3
 80086f6:	d107      	bne.n	8008708 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	2208      	movs	r2, #8
 80086fc:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	2201      	movs	r2, #1
 8008702:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008706:	e003      	b.n	8008710 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008710:	68f8      	ldr	r0, [r7, #12]
 8008712:	f7ff ffb4 	bl	800867e <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2200      	movs	r2, #0
 800871a:	771a      	strb	r2, [r3, #28]
}
 800871c:	bf00      	nop
 800871e:	3710      	adds	r7, #16
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b084      	sub	sp, #16
 8008728:	af00      	add	r7, sp, #0
 800872a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008730:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008736:	687a      	ldr	r2, [r7, #4]
 8008738:	429a      	cmp	r2, r3
 800873a:	d10b      	bne.n	8008754 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2201      	movs	r2, #1
 8008740:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	69db      	ldr	r3, [r3, #28]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d136      	bne.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	2201      	movs	r2, #1
 800874e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008752:	e031      	b.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008758:	687a      	ldr	r2, [r7, #4]
 800875a:	429a      	cmp	r2, r3
 800875c:	d10b      	bne.n	8008776 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2202      	movs	r2, #2
 8008762:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	69db      	ldr	r3, [r3, #28]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d125      	bne.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	2201      	movs	r2, #1
 8008770:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008774:	e020      	b.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	687a      	ldr	r2, [r7, #4]
 800877c:	429a      	cmp	r2, r3
 800877e:	d10b      	bne.n	8008798 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008780:	68fb      	ldr	r3, [r7, #12]
 8008782:	2204      	movs	r2, #4
 8008784:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	69db      	ldr	r3, [r3, #28]
 800878a:	2b00      	cmp	r3, #0
 800878c:	d114      	bne.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2201      	movs	r2, #1
 8008792:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008796:	e00f      	b.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	429a      	cmp	r2, r3
 80087a0:	d10a      	bne.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	2208      	movs	r2, #8
 80087a6:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	69db      	ldr	r3, [r3, #28]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d103      	bne.n	80087b8 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80087b0:	68fb      	ldr	r3, [r7, #12]
 80087b2:	2201      	movs	r2, #1
 80087b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80087b8:	68f8      	ldr	r0, [r7, #12]
 80087ba:	f7f9 f93d 	bl	8001a38 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	771a      	strb	r2, [r3, #28]
}
 80087c4:	bf00      	nop
 80087c6:	3710      	adds	r7, #16
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b084      	sub	sp, #16
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80087d8:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	429a      	cmp	r2, r3
 80087e2:	d103      	bne.n	80087ec <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	2201      	movs	r2, #1
 80087e8:	771a      	strb	r2, [r3, #28]
 80087ea:	e019      	b.n	8008820 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d103      	bne.n	80087fe <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2202      	movs	r2, #2
 80087fa:	771a      	strb	r2, [r3, #28]
 80087fc:	e010      	b.n	8008820 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d103      	bne.n	8008810 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	2204      	movs	r2, #4
 800880c:	771a      	strb	r2, [r3, #28]
 800880e:	e007      	b.n	8008820 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008814:	687a      	ldr	r2, [r7, #4]
 8008816:	429a      	cmp	r2, r3
 8008818:	d102      	bne.n	8008820 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	2208      	movs	r2, #8
 800881e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff ff22 	bl	800866a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2200      	movs	r2, #0
 800882a:	771a      	strb	r2, [r3, #28]
}
 800882c:	bf00      	nop
 800882e:	3710      	adds	r7, #16
 8008830:	46bd      	mov	sp, r7
 8008832:	bd80      	pop	{r7, pc}

08008834 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008834:	b480      	push	{r7}
 8008836:	b085      	sub	sp, #20
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	4a3a      	ldr	r2, [pc, #232]	@ (8008930 <TIM_Base_SetConfig+0xfc>)
 8008848:	4293      	cmp	r3, r2
 800884a:	d00f      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008852:	d00b      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	4a37      	ldr	r2, [pc, #220]	@ (8008934 <TIM_Base_SetConfig+0x100>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d007      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	4a36      	ldr	r2, [pc, #216]	@ (8008938 <TIM_Base_SetConfig+0x104>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d003      	beq.n	800886c <TIM_Base_SetConfig+0x38>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	4a35      	ldr	r2, [pc, #212]	@ (800893c <TIM_Base_SetConfig+0x108>)
 8008868:	4293      	cmp	r3, r2
 800886a:	d108      	bne.n	800887e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008872:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008874:	683b      	ldr	r3, [r7, #0]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	68fa      	ldr	r2, [r7, #12]
 800887a:	4313      	orrs	r3, r2
 800887c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	4a2b      	ldr	r2, [pc, #172]	@ (8008930 <TIM_Base_SetConfig+0xfc>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d01b      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800888c:	d017      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	4a28      	ldr	r2, [pc, #160]	@ (8008934 <TIM_Base_SetConfig+0x100>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d013      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	4a27      	ldr	r2, [pc, #156]	@ (8008938 <TIM_Base_SetConfig+0x104>)
 800889a:	4293      	cmp	r3, r2
 800889c:	d00f      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	4a26      	ldr	r2, [pc, #152]	@ (800893c <TIM_Base_SetConfig+0x108>)
 80088a2:	4293      	cmp	r3, r2
 80088a4:	d00b      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	4a25      	ldr	r2, [pc, #148]	@ (8008940 <TIM_Base_SetConfig+0x10c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d007      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	4a24      	ldr	r2, [pc, #144]	@ (8008944 <TIM_Base_SetConfig+0x110>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d003      	beq.n	80088be <TIM_Base_SetConfig+0x8a>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	4a23      	ldr	r2, [pc, #140]	@ (8008948 <TIM_Base_SetConfig+0x114>)
 80088ba:	4293      	cmp	r3, r2
 80088bc:	d108      	bne.n	80088d0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80088c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	68db      	ldr	r3, [r3, #12]
 80088ca:	68fa      	ldr	r2, [r7, #12]
 80088cc:	4313      	orrs	r3, r2
 80088ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	695b      	ldr	r3, [r3, #20]
 80088da:	4313      	orrs	r3, r2
 80088dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	68fa      	ldr	r2, [r7, #12]
 80088e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	689a      	ldr	r2, [r3, #8]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80088ec:	683b      	ldr	r3, [r7, #0]
 80088ee:	681a      	ldr	r2, [r3, #0]
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	4a0e      	ldr	r2, [pc, #56]	@ (8008930 <TIM_Base_SetConfig+0xfc>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d103      	bne.n	8008904 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	691a      	ldr	r2, [r3, #16]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	691b      	ldr	r3, [r3, #16]
 800890e:	f003 0301 	and.w	r3, r3, #1
 8008912:	2b01      	cmp	r3, #1
 8008914:	d105      	bne.n	8008922 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	691b      	ldr	r3, [r3, #16]
 800891a:	f023 0201 	bic.w	r2, r3, #1
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	611a      	str	r2, [r3, #16]
  }
}
 8008922:	bf00      	nop
 8008924:	3714      	adds	r7, #20
 8008926:	46bd      	mov	sp, r7
 8008928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	40010000 	.word	0x40010000
 8008934:	40000400 	.word	0x40000400
 8008938:	40000800 	.word	0x40000800
 800893c:	40000c00 	.word	0x40000c00
 8008940:	40014000 	.word	0x40014000
 8008944:	40014400 	.word	0x40014400
 8008948:	40014800 	.word	0x40014800

0800894c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800894c:	b480      	push	{r7}
 800894e:	b087      	sub	sp, #28
 8008950:	af00      	add	r7, sp, #0
 8008952:	6078      	str	r0, [r7, #4]
 8008954:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6a1b      	ldr	r3, [r3, #32]
 800895a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6a1b      	ldr	r3, [r3, #32]
 8008960:	f023 0201 	bic.w	r2, r3, #1
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	685b      	ldr	r3, [r3, #4]
 800896c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	699b      	ldr	r3, [r3, #24]
 8008972:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800897a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	f023 0303 	bic.w	r3, r3, #3
 8008982:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008984:	683b      	ldr	r3, [r7, #0]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	68fa      	ldr	r2, [r7, #12]
 800898a:	4313      	orrs	r3, r2
 800898c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800898e:	697b      	ldr	r3, [r7, #20]
 8008990:	f023 0302 	bic.w	r3, r3, #2
 8008994:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	697a      	ldr	r2, [r7, #20]
 800899c:	4313      	orrs	r3, r2
 800899e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	4a1c      	ldr	r2, [pc, #112]	@ (8008a14 <TIM_OC1_SetConfig+0xc8>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d10c      	bne.n	80089c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80089a8:	697b      	ldr	r3, [r7, #20]
 80089aa:	f023 0308 	bic.w	r3, r3, #8
 80089ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	68db      	ldr	r3, [r3, #12]
 80089b4:	697a      	ldr	r2, [r7, #20]
 80089b6:	4313      	orrs	r3, r2
 80089b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80089ba:	697b      	ldr	r3, [r7, #20]
 80089bc:	f023 0304 	bic.w	r3, r3, #4
 80089c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	4a13      	ldr	r2, [pc, #76]	@ (8008a14 <TIM_OC1_SetConfig+0xc8>)
 80089c6:	4293      	cmp	r3, r2
 80089c8:	d111      	bne.n	80089ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80089d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80089d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80089da:	683b      	ldr	r3, [r7, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	693a      	ldr	r2, [r7, #16]
 80089e0:	4313      	orrs	r3, r2
 80089e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	699b      	ldr	r3, [r3, #24]
 80089e8:	693a      	ldr	r2, [r7, #16]
 80089ea:	4313      	orrs	r3, r2
 80089ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	693a      	ldr	r2, [r7, #16]
 80089f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	68fa      	ldr	r2, [r7, #12]
 80089f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80089fa:	683b      	ldr	r3, [r7, #0]
 80089fc:	685a      	ldr	r2, [r3, #4]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	697a      	ldr	r2, [r7, #20]
 8008a06:	621a      	str	r2, [r3, #32]
}
 8008a08:	bf00      	nop
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr
 8008a14:	40010000 	.word	0x40010000

08008a18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f023 0210 	bic.w	r2, r3, #16
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008a4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	021b      	lsls	r3, r3, #8
 8008a56:	68fa      	ldr	r2, [r7, #12]
 8008a58:	4313      	orrs	r3, r2
 8008a5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f023 0320 	bic.w	r3, r3, #32
 8008a62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008a64:	683b      	ldr	r3, [r7, #0]
 8008a66:	689b      	ldr	r3, [r3, #8]
 8008a68:	011b      	lsls	r3, r3, #4
 8008a6a:	697a      	ldr	r2, [r7, #20]
 8008a6c:	4313      	orrs	r3, r2
 8008a6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	4a1e      	ldr	r2, [pc, #120]	@ (8008aec <TIM_OC2_SetConfig+0xd4>)
 8008a74:	4293      	cmp	r3, r2
 8008a76:	d10d      	bne.n	8008a94 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008a78:	697b      	ldr	r3, [r7, #20]
 8008a7a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008a7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008a80:	683b      	ldr	r3, [r7, #0]
 8008a82:	68db      	ldr	r3, [r3, #12]
 8008a84:	011b      	lsls	r3, r3, #4
 8008a86:	697a      	ldr	r2, [r7, #20]
 8008a88:	4313      	orrs	r3, r2
 8008a8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008a8c:	697b      	ldr	r3, [r7, #20]
 8008a8e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	4a15      	ldr	r2, [pc, #84]	@ (8008aec <TIM_OC2_SetConfig+0xd4>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d113      	bne.n	8008ac4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008aa2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008aa4:	693b      	ldr	r3, [r7, #16]
 8008aa6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008aaa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	695b      	ldr	r3, [r3, #20]
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	693a      	ldr	r2, [r7, #16]
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	699b      	ldr	r3, [r3, #24]
 8008abc:	009b      	lsls	r3, r3, #2
 8008abe:	693a      	ldr	r2, [r7, #16]
 8008ac0:	4313      	orrs	r3, r2
 8008ac2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	693a      	ldr	r2, [r7, #16]
 8008ac8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	68fa      	ldr	r2, [r7, #12]
 8008ace:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	621a      	str	r2, [r3, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr
 8008aea:	bf00      	nop
 8008aec:	40010000 	.word	0x40010000

08008af0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008af0:	b480      	push	{r7}
 8008af2:	b087      	sub	sp, #28
 8008af4:	af00      	add	r7, sp, #0
 8008af6:	6078      	str	r0, [r7, #4]
 8008af8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6a1b      	ldr	r3, [r3, #32]
 8008afe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	6a1b      	ldr	r3, [r3, #32]
 8008b04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	685b      	ldr	r3, [r3, #4]
 8008b10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	69db      	ldr	r3, [r3, #28]
 8008b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008b1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	f023 0303 	bic.w	r3, r3, #3
 8008b26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008b28:	683b      	ldr	r3, [r7, #0]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	68fa      	ldr	r2, [r7, #12]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008b38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008b3a:	683b      	ldr	r3, [r7, #0]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	021b      	lsls	r3, r3, #8
 8008b40:	697a      	ldr	r2, [r7, #20]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	4a1d      	ldr	r2, [pc, #116]	@ (8008bc0 <TIM_OC3_SetConfig+0xd0>)
 8008b4a:	4293      	cmp	r3, r2
 8008b4c:	d10d      	bne.n	8008b6a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008b54:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008b56:	683b      	ldr	r3, [r7, #0]
 8008b58:	68db      	ldr	r3, [r3, #12]
 8008b5a:	021b      	lsls	r3, r3, #8
 8008b5c:	697a      	ldr	r2, [r7, #20]
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008b62:	697b      	ldr	r3, [r7, #20]
 8008b64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008b68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	4a14      	ldr	r2, [pc, #80]	@ (8008bc0 <TIM_OC3_SetConfig+0xd0>)
 8008b6e:	4293      	cmp	r3, r2
 8008b70:	d113      	bne.n	8008b9a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008b72:	693b      	ldr	r3, [r7, #16]
 8008b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008b82:	683b      	ldr	r3, [r7, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	011b      	lsls	r3, r3, #4
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008b8e:	683b      	ldr	r3, [r7, #0]
 8008b90:	699b      	ldr	r3, [r3, #24]
 8008b92:	011b      	lsls	r3, r3, #4
 8008b94:	693a      	ldr	r2, [r7, #16]
 8008b96:	4313      	orrs	r3, r2
 8008b98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	693a      	ldr	r2, [r7, #16]
 8008b9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	68fa      	ldr	r2, [r7, #12]
 8008ba4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ba6:	683b      	ldr	r3, [r7, #0]
 8008ba8:	685a      	ldr	r2, [r3, #4]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	697a      	ldr	r2, [r7, #20]
 8008bb2:	621a      	str	r2, [r3, #32]
}
 8008bb4:	bf00      	nop
 8008bb6:	371c      	adds	r7, #28
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr
 8008bc0:	40010000 	.word	0x40010000

08008bc4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
 8008bcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	6a1b      	ldr	r3, [r3, #32]
 8008bd2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	6a1b      	ldr	r3, [r3, #32]
 8008bd8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	685b      	ldr	r3, [r3, #4]
 8008be4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	69db      	ldr	r3, [r3, #28]
 8008bea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008bf2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008bfa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008bfc:	683b      	ldr	r3, [r7, #0]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	68fa      	ldr	r2, [r7, #12]
 8008c04:	4313      	orrs	r3, r2
 8008c06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008c0e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	689b      	ldr	r3, [r3, #8]
 8008c14:	031b      	lsls	r3, r3, #12
 8008c16:	693a      	ldr	r2, [r7, #16]
 8008c18:	4313      	orrs	r3, r2
 8008c1a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a10      	ldr	r2, [pc, #64]	@ (8008c60 <TIM_OC4_SetConfig+0x9c>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d109      	bne.n	8008c38 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008c2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008c2c:	683b      	ldr	r3, [r7, #0]
 8008c2e:	695b      	ldr	r3, [r3, #20]
 8008c30:	019b      	lsls	r3, r3, #6
 8008c32:	697a      	ldr	r2, [r7, #20]
 8008c34:	4313      	orrs	r3, r2
 8008c36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	68fa      	ldr	r2, [r7, #12]
 8008c42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008c44:	683b      	ldr	r3, [r7, #0]
 8008c46:	685a      	ldr	r2, [r3, #4]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	693a      	ldr	r2, [r7, #16]
 8008c50:	621a      	str	r2, [r3, #32]
}
 8008c52:	bf00      	nop
 8008c54:	371c      	adds	r7, #28
 8008c56:	46bd      	mov	sp, r7
 8008c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5c:	4770      	bx	lr
 8008c5e:	bf00      	nop
 8008c60:	40010000 	.word	0x40010000

08008c64 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b087      	sub	sp, #28
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	60b9      	str	r1, [r7, #8]
 8008c6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6a1b      	ldr	r3, [r3, #32]
 8008c74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	6a1b      	ldr	r3, [r3, #32]
 8008c7a:	f023 0201 	bic.w	r2, r3, #1
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	699b      	ldr	r3, [r3, #24]
 8008c86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	011b      	lsls	r3, r3, #4
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	4313      	orrs	r3, r2
 8008c98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008c9a:	697b      	ldr	r3, [r7, #20]
 8008c9c:	f023 030a 	bic.w	r3, r3, #10
 8008ca0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008ca2:	697a      	ldr	r2, [r7, #20]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	693a      	ldr	r2, [r7, #16]
 8008cae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	697a      	ldr	r2, [r7, #20]
 8008cb4:	621a      	str	r2, [r3, #32]
}
 8008cb6:	bf00      	nop
 8008cb8:	371c      	adds	r7, #28
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr

08008cc2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008cc2:	b480      	push	{r7}
 8008cc4:	b087      	sub	sp, #28
 8008cc6:	af00      	add	r7, sp, #0
 8008cc8:	60f8      	str	r0, [r7, #12]
 8008cca:	60b9      	str	r1, [r7, #8]
 8008ccc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	6a1b      	ldr	r3, [r3, #32]
 8008cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6a1b      	ldr	r3, [r3, #32]
 8008cd8:	f023 0210 	bic.w	r2, r3, #16
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	699b      	ldr	r3, [r3, #24]
 8008ce4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008cec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	031b      	lsls	r3, r3, #12
 8008cf2:	693a      	ldr	r2, [r7, #16]
 8008cf4:	4313      	orrs	r3, r2
 8008cf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008cf8:	697b      	ldr	r3, [r7, #20]
 8008cfa:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008cfe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	011b      	lsls	r3, r3, #4
 8008d04:	697a      	ldr	r2, [r7, #20]
 8008d06:	4313      	orrs	r3, r2
 8008d08:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	693a      	ldr	r2, [r7, #16]
 8008d0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	697a      	ldr	r2, [r7, #20]
 8008d14:	621a      	str	r2, [r3, #32]
}
 8008d16:	bf00      	nop
 8008d18:	371c      	adds	r7, #28
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr

08008d22 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008d22:	b480      	push	{r7}
 8008d24:	b085      	sub	sp, #20
 8008d26:	af00      	add	r7, sp, #0
 8008d28:	6078      	str	r0, [r7, #4]
 8008d2a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	689b      	ldr	r3, [r3, #8]
 8008d30:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d38:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	4313      	orrs	r3, r2
 8008d40:	f043 0307 	orr.w	r3, r3, #7
 8008d44:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	68fa      	ldr	r2, [r7, #12]
 8008d4a:	609a      	str	r2, [r3, #8]
}
 8008d4c:	bf00      	nop
 8008d4e:	3714      	adds	r7, #20
 8008d50:	46bd      	mov	sp, r7
 8008d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d56:	4770      	bx	lr

08008d58 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b087      	sub	sp, #28
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	60f8      	str	r0, [r7, #12]
 8008d60:	60b9      	str	r1, [r7, #8]
 8008d62:	607a      	str	r2, [r7, #4]
 8008d64:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008d66:	68fb      	ldr	r3, [r7, #12]
 8008d68:	689b      	ldr	r3, [r3, #8]
 8008d6a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008d72:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	021a      	lsls	r2, r3, #8
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	68bb      	ldr	r3, [r7, #8]
 8008d7e:	4313      	orrs	r3, r2
 8008d80:	697a      	ldr	r2, [r7, #20]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	697a      	ldr	r2, [r7, #20]
 8008d8a:	609a      	str	r2, [r3, #8]
}
 8008d8c:	bf00      	nop
 8008d8e:	371c      	adds	r7, #28
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008d98:	b480      	push	{r7}
 8008d9a:	b087      	sub	sp, #28
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	60f8      	str	r0, [r7, #12]
 8008da0:	60b9      	str	r1, [r7, #8]
 8008da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008da4:	68bb      	ldr	r3, [r7, #8]
 8008da6:	f003 031f 	and.w	r3, r3, #31
 8008daa:	2201      	movs	r2, #1
 8008dac:	fa02 f303 	lsl.w	r3, r2, r3
 8008db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	6a1a      	ldr	r2, [r3, #32]
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	43db      	mvns	r3, r3
 8008dba:	401a      	ands	r2, r3
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	6a1a      	ldr	r2, [r3, #32]
 8008dc4:	68bb      	ldr	r3, [r7, #8]
 8008dc6:	f003 031f 	and.w	r3, r3, #31
 8008dca:	6879      	ldr	r1, [r7, #4]
 8008dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8008dd0:	431a      	orrs	r2, r3
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	621a      	str	r2, [r3, #32]
}
 8008dd6:	bf00      	nop
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
	...

08008de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008de4:	b480      	push	{r7}
 8008de6:	b085      	sub	sp, #20
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
 8008dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008df4:	2b01      	cmp	r3, #1
 8008df6:	d101      	bne.n	8008dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008df8:	2302      	movs	r3, #2
 8008dfa:	e050      	b.n	8008e9e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	2201      	movs	r2, #1
 8008e00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2202      	movs	r2, #2
 8008e08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	685b      	ldr	r3, [r3, #4]
 8008e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	689b      	ldr	r3, [r3, #8]
 8008e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008e1c:	68fb      	ldr	r3, [r7, #12]
 8008e1e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	68fa      	ldr	r2, [r7, #12]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68fa      	ldr	r2, [r7, #12]
 8008e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8008eac <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	d018      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e48:	d013      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	4a18      	ldr	r2, [pc, #96]	@ (8008eb0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008e50:	4293      	cmp	r3, r2
 8008e52:	d00e      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	4a16      	ldr	r2, [pc, #88]	@ (8008eb4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008e5a:	4293      	cmp	r3, r2
 8008e5c:	d009      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	4a15      	ldr	r2, [pc, #84]	@ (8008eb8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008e64:	4293      	cmp	r3, r2
 8008e66:	d004      	beq.n	8008e72 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a13      	ldr	r2, [pc, #76]	@ (8008ebc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008e6e:	4293      	cmp	r3, r2
 8008e70:	d10c      	bne.n	8008e8c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008e72:	68bb      	ldr	r3, [r7, #8]
 8008e74:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008e7a:	683b      	ldr	r3, [r7, #0]
 8008e7c:	685b      	ldr	r3, [r3, #4]
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	68ba      	ldr	r2, [r7, #8]
 8008e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	2201      	movs	r2, #1
 8008e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	2200      	movs	r2, #0
 8008e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3714      	adds	r7, #20
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ea8:	4770      	bx	lr
 8008eaa:	bf00      	nop
 8008eac:	40010000 	.word	0x40010000
 8008eb0:	40000400 	.word	0x40000400
 8008eb4:	40000800 	.word	0x40000800
 8008eb8:	40000c00 	.word	0x40000c00
 8008ebc:	40014000 	.word	0x40014000

08008ec0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ec0:	b084      	sub	sp, #16
 8008ec2:	b580      	push	{r7, lr}
 8008ec4:	b084      	sub	sp, #16
 8008ec6:	af00      	add	r7, sp, #0
 8008ec8:	6078      	str	r0, [r7, #4]
 8008eca:	f107 001c 	add.w	r0, r7, #28
 8008ece:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008ed2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008ed6:	2b01      	cmp	r3, #1
 8008ed8:	d123      	bne.n	8008f22 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ede:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	68db      	ldr	r3, [r3, #12]
 8008eea:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008eee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008ef2:	687a      	ldr	r2, [r7, #4]
 8008ef4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	68db      	ldr	r3, [r3, #12]
 8008efa:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008f02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008f06:	2b01      	cmp	r3, #1
 8008f08:	d105      	bne.n	8008f16 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	68db      	ldr	r3, [r3, #12]
 8008f0e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f001 fae8 	bl	800a4ec <USB_CoreReset>
 8008f1c:	4603      	mov	r3, r0
 8008f1e:	73fb      	strb	r3, [r7, #15]
 8008f20:	e01b      	b.n	8008f5a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f001 fadc 	bl	800a4ec <USB_CoreReset>
 8008f34:	4603      	mov	r3, r0
 8008f36:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008f38:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d106      	bne.n	8008f4e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f44:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008f4c:	e005      	b.n	8008f5a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f52:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008f5a:	7fbb      	ldrb	r3, [r7, #30]
 8008f5c:	2b01      	cmp	r3, #1
 8008f5e:	d10b      	bne.n	8008f78 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	f043 0206 	orr.w	r2, r3, #6
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	689b      	ldr	r3, [r3, #8]
 8008f70:	f043 0220 	orr.w	r2, r3, #32
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	3710      	adds	r7, #16
 8008f7e:	46bd      	mov	sp, r7
 8008f80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008f84:	b004      	add	sp, #16
 8008f86:	4770      	bx	lr

08008f88 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b087      	sub	sp, #28
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	60f8      	str	r0, [r7, #12]
 8008f90:	60b9      	str	r1, [r7, #8]
 8008f92:	4613      	mov	r3, r2
 8008f94:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008f96:	79fb      	ldrb	r3, [r7, #7]
 8008f98:	2b02      	cmp	r3, #2
 8008f9a:	d165      	bne.n	8009068 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008f9c:	68bb      	ldr	r3, [r7, #8]
 8008f9e:	4a41      	ldr	r2, [pc, #260]	@ (80090a4 <USB_SetTurnaroundTime+0x11c>)
 8008fa0:	4293      	cmp	r3, r2
 8008fa2:	d906      	bls.n	8008fb2 <USB_SetTurnaroundTime+0x2a>
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	4a40      	ldr	r2, [pc, #256]	@ (80090a8 <USB_SetTurnaroundTime+0x120>)
 8008fa8:	4293      	cmp	r3, r2
 8008faa:	d202      	bcs.n	8008fb2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008fac:	230f      	movs	r3, #15
 8008fae:	617b      	str	r3, [r7, #20]
 8008fb0:	e062      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008fb2:	68bb      	ldr	r3, [r7, #8]
 8008fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80090a8 <USB_SetTurnaroundTime+0x120>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d306      	bcc.n	8008fc8 <USB_SetTurnaroundTime+0x40>
 8008fba:	68bb      	ldr	r3, [r7, #8]
 8008fbc:	4a3b      	ldr	r2, [pc, #236]	@ (80090ac <USB_SetTurnaroundTime+0x124>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d202      	bcs.n	8008fc8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008fc2:	230e      	movs	r3, #14
 8008fc4:	617b      	str	r3, [r7, #20]
 8008fc6:	e057      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008fc8:	68bb      	ldr	r3, [r7, #8]
 8008fca:	4a38      	ldr	r2, [pc, #224]	@ (80090ac <USB_SetTurnaroundTime+0x124>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d306      	bcc.n	8008fde <USB_SetTurnaroundTime+0x56>
 8008fd0:	68bb      	ldr	r3, [r7, #8]
 8008fd2:	4a37      	ldr	r2, [pc, #220]	@ (80090b0 <USB_SetTurnaroundTime+0x128>)
 8008fd4:	4293      	cmp	r3, r2
 8008fd6:	d202      	bcs.n	8008fde <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008fd8:	230d      	movs	r3, #13
 8008fda:	617b      	str	r3, [r7, #20]
 8008fdc:	e04c      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	4a33      	ldr	r2, [pc, #204]	@ (80090b0 <USB_SetTurnaroundTime+0x128>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d306      	bcc.n	8008ff4 <USB_SetTurnaroundTime+0x6c>
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	4a32      	ldr	r2, [pc, #200]	@ (80090b4 <USB_SetTurnaroundTime+0x12c>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d802      	bhi.n	8008ff4 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008fee:	230c      	movs	r3, #12
 8008ff0:	617b      	str	r3, [r7, #20]
 8008ff2:	e041      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008ff4:	68bb      	ldr	r3, [r7, #8]
 8008ff6:	4a2f      	ldr	r2, [pc, #188]	@ (80090b4 <USB_SetTurnaroundTime+0x12c>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d906      	bls.n	800900a <USB_SetTurnaroundTime+0x82>
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	4a2e      	ldr	r2, [pc, #184]	@ (80090b8 <USB_SetTurnaroundTime+0x130>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d802      	bhi.n	800900a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8009004:	230b      	movs	r3, #11
 8009006:	617b      	str	r3, [r7, #20]
 8009008:	e036      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	4a2a      	ldr	r2, [pc, #168]	@ (80090b8 <USB_SetTurnaroundTime+0x130>)
 800900e:	4293      	cmp	r3, r2
 8009010:	d906      	bls.n	8009020 <USB_SetTurnaroundTime+0x98>
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	4a29      	ldr	r2, [pc, #164]	@ (80090bc <USB_SetTurnaroundTime+0x134>)
 8009016:	4293      	cmp	r3, r2
 8009018:	d802      	bhi.n	8009020 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800901a:	230a      	movs	r3, #10
 800901c:	617b      	str	r3, [r7, #20]
 800901e:	e02b      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	4a26      	ldr	r2, [pc, #152]	@ (80090bc <USB_SetTurnaroundTime+0x134>)
 8009024:	4293      	cmp	r3, r2
 8009026:	d906      	bls.n	8009036 <USB_SetTurnaroundTime+0xae>
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	4a25      	ldr	r2, [pc, #148]	@ (80090c0 <USB_SetTurnaroundTime+0x138>)
 800902c:	4293      	cmp	r3, r2
 800902e:	d202      	bcs.n	8009036 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009030:	2309      	movs	r3, #9
 8009032:	617b      	str	r3, [r7, #20]
 8009034:	e020      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	4a21      	ldr	r2, [pc, #132]	@ (80090c0 <USB_SetTurnaroundTime+0x138>)
 800903a:	4293      	cmp	r3, r2
 800903c:	d306      	bcc.n	800904c <USB_SetTurnaroundTime+0xc4>
 800903e:	68bb      	ldr	r3, [r7, #8]
 8009040:	4a20      	ldr	r2, [pc, #128]	@ (80090c4 <USB_SetTurnaroundTime+0x13c>)
 8009042:	4293      	cmp	r3, r2
 8009044:	d802      	bhi.n	800904c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8009046:	2308      	movs	r3, #8
 8009048:	617b      	str	r3, [r7, #20]
 800904a:	e015      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	4a1d      	ldr	r2, [pc, #116]	@ (80090c4 <USB_SetTurnaroundTime+0x13c>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d906      	bls.n	8009062 <USB_SetTurnaroundTime+0xda>
 8009054:	68bb      	ldr	r3, [r7, #8]
 8009056:	4a1c      	ldr	r2, [pc, #112]	@ (80090c8 <USB_SetTurnaroundTime+0x140>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d202      	bcs.n	8009062 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800905c:	2307      	movs	r3, #7
 800905e:	617b      	str	r3, [r7, #20]
 8009060:	e00a      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8009062:	2306      	movs	r3, #6
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e007      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009068:	79fb      	ldrb	r3, [r7, #7]
 800906a:	2b00      	cmp	r3, #0
 800906c:	d102      	bne.n	8009074 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800906e:	2309      	movs	r3, #9
 8009070:	617b      	str	r3, [r7, #20]
 8009072:	e001      	b.n	8009078 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8009074:	2309      	movs	r3, #9
 8009076:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	68db      	ldr	r3, [r3, #12]
 800907c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	68da      	ldr	r2, [r3, #12]
 8009088:	697b      	ldr	r3, [r7, #20]
 800908a:	029b      	lsls	r3, r3, #10
 800908c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009090:	431a      	orrs	r2, r3
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009096:	2300      	movs	r3, #0
}
 8009098:	4618      	mov	r0, r3
 800909a:	371c      	adds	r7, #28
 800909c:	46bd      	mov	sp, r7
 800909e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a2:	4770      	bx	lr
 80090a4:	00d8acbf 	.word	0x00d8acbf
 80090a8:	00e4e1c0 	.word	0x00e4e1c0
 80090ac:	00f42400 	.word	0x00f42400
 80090b0:	01067380 	.word	0x01067380
 80090b4:	011a499f 	.word	0x011a499f
 80090b8:	01312cff 	.word	0x01312cff
 80090bc:	014ca43f 	.word	0x014ca43f
 80090c0:	016e3600 	.word	0x016e3600
 80090c4:	01a6ab1f 	.word	0x01a6ab1f
 80090c8:	01e84800 	.word	0x01e84800

080090cc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	689b      	ldr	r3, [r3, #8]
 80090d8:	f043 0201 	orr.w	r2, r3, #1
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80090e0:	2300      	movs	r3, #0
}
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80090ee:	b480      	push	{r7}
 80090f0:	b083      	sub	sp, #12
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	689b      	ldr	r3, [r3, #8]
 80090fa:	f023 0201 	bic.w	r2, r3, #1
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	370c      	adds	r7, #12
 8009108:	46bd      	mov	sp, r7
 800910a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910e:	4770      	bx	lr

08009110 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009110:	b580      	push	{r7, lr}
 8009112:	b084      	sub	sp, #16
 8009114:	af00      	add	r7, sp, #0
 8009116:	6078      	str	r0, [r7, #4]
 8009118:	460b      	mov	r3, r1
 800911a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800911c:	2300      	movs	r3, #0
 800911e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	68db      	ldr	r3, [r3, #12]
 8009124:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800912c:	78fb      	ldrb	r3, [r7, #3]
 800912e:	2b01      	cmp	r3, #1
 8009130:	d115      	bne.n	800915e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800913e:	200a      	movs	r0, #10
 8009140:	f7fb f9d2 	bl	80044e8 <HAL_Delay>
      ms += 10U;
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	330a      	adds	r3, #10
 8009148:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f001 f93f 	bl	800a3ce <USB_GetMode>
 8009150:	4603      	mov	r3, r0
 8009152:	2b01      	cmp	r3, #1
 8009154:	d01e      	beq.n	8009194 <USB_SetCurrentMode+0x84>
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	2bc7      	cmp	r3, #199	@ 0xc7
 800915a:	d9f0      	bls.n	800913e <USB_SetCurrentMode+0x2e>
 800915c:	e01a      	b.n	8009194 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800915e:	78fb      	ldrb	r3, [r7, #3]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d115      	bne.n	8009190 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	68db      	ldr	r3, [r3, #12]
 8009168:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009170:	200a      	movs	r0, #10
 8009172:	f7fb f9b9 	bl	80044e8 <HAL_Delay>
      ms += 10U;
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	330a      	adds	r3, #10
 800917a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800917c:	6878      	ldr	r0, [r7, #4]
 800917e:	f001 f926 	bl	800a3ce <USB_GetMode>
 8009182:	4603      	mov	r3, r0
 8009184:	2b00      	cmp	r3, #0
 8009186:	d005      	beq.n	8009194 <USB_SetCurrentMode+0x84>
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	2bc7      	cmp	r3, #199	@ 0xc7
 800918c:	d9f0      	bls.n	8009170 <USB_SetCurrentMode+0x60>
 800918e:	e001      	b.n	8009194 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009190:	2301      	movs	r3, #1
 8009192:	e005      	b.n	80091a0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2bc8      	cmp	r3, #200	@ 0xc8
 8009198:	d101      	bne.n	800919e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800919a:	2301      	movs	r3, #1
 800919c:	e000      	b.n	80091a0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3710      	adds	r7, #16
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80091a8:	b084      	sub	sp, #16
 80091aa:	b580      	push	{r7, lr}
 80091ac:	b086      	sub	sp, #24
 80091ae:	af00      	add	r7, sp, #0
 80091b0:	6078      	str	r0, [r7, #4]
 80091b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80091b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80091ba:	2300      	movs	r3, #0
 80091bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80091c2:	2300      	movs	r3, #0
 80091c4:	613b      	str	r3, [r7, #16]
 80091c6:	e009      	b.n	80091dc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80091c8:	687a      	ldr	r2, [r7, #4]
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	3340      	adds	r3, #64	@ 0x40
 80091ce:	009b      	lsls	r3, r3, #2
 80091d0:	4413      	add	r3, r2
 80091d2:	2200      	movs	r2, #0
 80091d4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	3301      	adds	r3, #1
 80091da:	613b      	str	r3, [r7, #16]
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	2b0e      	cmp	r3, #14
 80091e0:	d9f2      	bls.n	80091c8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80091e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d11c      	bne.n	8009224 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	68fa      	ldr	r2, [r7, #12]
 80091f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80091f8:	f043 0302 	orr.w	r3, r3, #2
 80091fc:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009202:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800920e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800921a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	639a      	str	r2, [r3, #56]	@ 0x38
 8009222:	e00b      	b.n	800923c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009228:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009234:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009242:	461a      	mov	r2, r3
 8009244:	2300      	movs	r3, #0
 8009246:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009248:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 800924c:	2b01      	cmp	r3, #1
 800924e:	d10d      	bne.n	800926c <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009250:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009254:	2b00      	cmp	r3, #0
 8009256:	d104      	bne.n	8009262 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009258:	2100      	movs	r1, #0
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f968 	bl	8009530 <USB_SetDevSpeed>
 8009260:	e008      	b.n	8009274 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8009262:	2101      	movs	r1, #1
 8009264:	6878      	ldr	r0, [r7, #4]
 8009266:	f000 f963 	bl	8009530 <USB_SetDevSpeed>
 800926a:	e003      	b.n	8009274 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800926c:	2103      	movs	r1, #3
 800926e:	6878      	ldr	r0, [r7, #4]
 8009270:	f000 f95e 	bl	8009530 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009274:	2110      	movs	r1, #16
 8009276:	6878      	ldr	r0, [r7, #4]
 8009278:	f000 f8fa 	bl	8009470 <USB_FlushTxFifo>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8009282:	2301      	movs	r3, #1
 8009284:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f000 f924 	bl	80094d4 <USB_FlushRxFifo>
 800928c:	4603      	mov	r3, r0
 800928e:	2b00      	cmp	r3, #0
 8009290:	d001      	beq.n	8009296 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8009292:	2301      	movs	r3, #1
 8009294:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800929c:	461a      	mov	r2, r3
 800929e:	2300      	movs	r3, #0
 80092a0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092a8:	461a      	mov	r2, r3
 80092aa:	2300      	movs	r3, #0
 80092ac:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092b4:	461a      	mov	r2, r3
 80092b6:	2300      	movs	r3, #0
 80092b8:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80092ba:	2300      	movs	r3, #0
 80092bc:	613b      	str	r3, [r7, #16]
 80092be:	e043      	b.n	8009348 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80092c0:	693b      	ldr	r3, [r7, #16]
 80092c2:	015a      	lsls	r2, r3, #5
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	4413      	add	r3, r2
 80092c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092d6:	d118      	bne.n	800930a <USB_DevInit+0x162>
    {
      if (i == 0U)
 80092d8:	693b      	ldr	r3, [r7, #16]
 80092da:	2b00      	cmp	r3, #0
 80092dc:	d10a      	bne.n	80092f4 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092ea:	461a      	mov	r2, r3
 80092ec:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092f0:	6013      	str	r3, [r2, #0]
 80092f2:	e013      	b.n	800931c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	015a      	lsls	r2, r3, #5
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	4413      	add	r3, r2
 80092fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009300:	461a      	mov	r2, r3
 8009302:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009306:	6013      	str	r3, [r2, #0]
 8009308:	e008      	b.n	800931c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	015a      	lsls	r2, r3, #5
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	4413      	add	r3, r2
 8009312:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009316:	461a      	mov	r2, r3
 8009318:	2300      	movs	r3, #0
 800931a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800931c:	693b      	ldr	r3, [r7, #16]
 800931e:	015a      	lsls	r2, r3, #5
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4413      	add	r3, r2
 8009324:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009328:	461a      	mov	r2, r3
 800932a:	2300      	movs	r3, #0
 800932c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	015a      	lsls	r2, r3, #5
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	4413      	add	r3, r2
 8009336:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800933a:	461a      	mov	r2, r3
 800933c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009340:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	3301      	adds	r3, #1
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800934c:	461a      	mov	r2, r3
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	4293      	cmp	r3, r2
 8009352:	d3b5      	bcc.n	80092c0 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009354:	2300      	movs	r3, #0
 8009356:	613b      	str	r3, [r7, #16]
 8009358:	e043      	b.n	80093e2 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800935a:	693b      	ldr	r3, [r7, #16]
 800935c:	015a      	lsls	r2, r3, #5
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4413      	add	r3, r2
 8009362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800936c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009370:	d118      	bne.n	80093a4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8009372:	693b      	ldr	r3, [r7, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d10a      	bne.n	800938e <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009378:	693b      	ldr	r3, [r7, #16]
 800937a:	015a      	lsls	r2, r3, #5
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	4413      	add	r3, r2
 8009380:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009384:	461a      	mov	r2, r3
 8009386:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800938a:	6013      	str	r3, [r2, #0]
 800938c:	e013      	b.n	80093b6 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	015a      	lsls	r2, r3, #5
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	4413      	add	r3, r2
 8009396:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800939a:	461a      	mov	r2, r3
 800939c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80093a0:	6013      	str	r3, [r2, #0]
 80093a2:	e008      	b.n	80093b6 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	015a      	lsls	r2, r3, #5
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	4413      	add	r3, r2
 80093ac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093b0:	461a      	mov	r2, r3
 80093b2:	2300      	movs	r3, #0
 80093b4:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80093b6:	693b      	ldr	r3, [r7, #16]
 80093b8:	015a      	lsls	r2, r3, #5
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	4413      	add	r3, r2
 80093be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093c2:	461a      	mov	r2, r3
 80093c4:	2300      	movs	r3, #0
 80093c6:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	015a      	lsls	r2, r3, #5
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	4413      	add	r3, r2
 80093d0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093d4:	461a      	mov	r2, r3
 80093d6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80093da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80093dc:	693b      	ldr	r3, [r7, #16]
 80093de:	3301      	adds	r3, #1
 80093e0:	613b      	str	r3, [r7, #16]
 80093e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80093e6:	461a      	mov	r2, r3
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	4293      	cmp	r3, r2
 80093ec:	d3b5      	bcc.n	800935a <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	68fa      	ldr	r2, [r7, #12]
 80093f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80093fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009400:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	2200      	movs	r2, #0
 8009406:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800940e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009410:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009414:	2b00      	cmp	r3, #0
 8009416:	d105      	bne.n	8009424 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	699b      	ldr	r3, [r3, #24]
 800941c:	f043 0210 	orr.w	r2, r3, #16
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	699a      	ldr	r2, [r3, #24]
 8009428:	4b10      	ldr	r3, [pc, #64]	@ (800946c <USB_DevInit+0x2c4>)
 800942a:	4313      	orrs	r3, r2
 800942c:	687a      	ldr	r2, [r7, #4]
 800942e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009430:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8009434:	2b00      	cmp	r3, #0
 8009436:	d005      	beq.n	8009444 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	699b      	ldr	r3, [r3, #24]
 800943c:	f043 0208 	orr.w	r2, r3, #8
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009444:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009448:	2b01      	cmp	r3, #1
 800944a:	d107      	bne.n	800945c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	699b      	ldr	r3, [r3, #24]
 8009450:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009454:	f043 0304 	orr.w	r3, r3, #4
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800945c:	7dfb      	ldrb	r3, [r7, #23]
}
 800945e:	4618      	mov	r0, r3
 8009460:	3718      	adds	r7, #24
 8009462:	46bd      	mov	sp, r7
 8009464:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009468:	b004      	add	sp, #16
 800946a:	4770      	bx	lr
 800946c:	803c3800 	.word	0x803c3800

08009470 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009470:	b480      	push	{r7}
 8009472:	b085      	sub	sp, #20
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800947a:	2300      	movs	r3, #0
 800947c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800947e:	68fb      	ldr	r3, [r7, #12]
 8009480:	3301      	adds	r3, #1
 8009482:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800948a:	d901      	bls.n	8009490 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800948c:	2303      	movs	r3, #3
 800948e:	e01b      	b.n	80094c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	691b      	ldr	r3, [r3, #16]
 8009494:	2b00      	cmp	r3, #0
 8009496:	daf2      	bge.n	800947e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009498:	2300      	movs	r3, #0
 800949a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800949c:	683b      	ldr	r3, [r7, #0]
 800949e:	019b      	lsls	r3, r3, #6
 80094a0:	f043 0220 	orr.w	r2, r3, #32
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	3301      	adds	r3, #1
 80094ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094b4:	d901      	bls.n	80094ba <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80094b6:	2303      	movs	r3, #3
 80094b8:	e006      	b.n	80094c8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	691b      	ldr	r3, [r3, #16]
 80094be:	f003 0320 	and.w	r3, r3, #32
 80094c2:	2b20      	cmp	r3, #32
 80094c4:	d0f0      	beq.n	80094a8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80094c6:	2300      	movs	r3, #0
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3714      	adds	r7, #20
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80094dc:	2300      	movs	r3, #0
 80094de:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	3301      	adds	r3, #1
 80094e4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80094ec:	d901      	bls.n	80094f2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e018      	b.n	8009524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	691b      	ldr	r3, [r3, #16]
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	daf2      	bge.n	80094e0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80094fa:	2300      	movs	r3, #0
 80094fc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2210      	movs	r2, #16
 8009502:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	3301      	adds	r3, #1
 8009508:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009510:	d901      	bls.n	8009516 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009512:	2303      	movs	r3, #3
 8009514:	e006      	b.n	8009524 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	691b      	ldr	r3, [r3, #16]
 800951a:	f003 0310 	and.w	r3, r3, #16
 800951e:	2b10      	cmp	r3, #16
 8009520:	d0f0      	beq.n	8009504 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3714      	adds	r7, #20
 8009528:	46bd      	mov	sp, r7
 800952a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952e:	4770      	bx	lr

08009530 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009530:	b480      	push	{r7}
 8009532:	b085      	sub	sp, #20
 8009534:	af00      	add	r7, sp, #0
 8009536:	6078      	str	r0, [r7, #4]
 8009538:	460b      	mov	r3, r1
 800953a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	78fb      	ldrb	r3, [r7, #3]
 800954a:	68f9      	ldr	r1, [r7, #12]
 800954c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009550:	4313      	orrs	r3, r2
 8009552:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009554:	2300      	movs	r3, #0
}
 8009556:	4618      	mov	r0, r3
 8009558:	3714      	adds	r7, #20
 800955a:	46bd      	mov	sp, r7
 800955c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009560:	4770      	bx	lr

08009562 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009562:	b480      	push	{r7}
 8009564:	b087      	sub	sp, #28
 8009566:	af00      	add	r7, sp, #0
 8009568:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009574:	689b      	ldr	r3, [r3, #8]
 8009576:	f003 0306 	and.w	r3, r3, #6
 800957a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009582:	2300      	movs	r3, #0
 8009584:	75fb      	strb	r3, [r7, #23]
 8009586:	e00a      	b.n	800959e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	2b02      	cmp	r3, #2
 800958c:	d002      	beq.n	8009594 <USB_GetDevSpeed+0x32>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2b06      	cmp	r3, #6
 8009592:	d102      	bne.n	800959a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009594:	2302      	movs	r3, #2
 8009596:	75fb      	strb	r3, [r7, #23]
 8009598:	e001      	b.n	800959e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800959a:	230f      	movs	r3, #15
 800959c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800959e:	7dfb      	ldrb	r3, [r7, #23]
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	371c      	adds	r7, #28
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
 80095b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	785b      	ldrb	r3, [r3, #1]
 80095c4:	2b01      	cmp	r3, #1
 80095c6:	d13a      	bne.n	800963e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	781b      	ldrb	r3, [r3, #0]
 80095d4:	f003 030f 	and.w	r3, r3, #15
 80095d8:	2101      	movs	r1, #1
 80095da:	fa01 f303 	lsl.w	r3, r1, r3
 80095de:	b29b      	uxth	r3, r3
 80095e0:	68f9      	ldr	r1, [r7, #12]
 80095e2:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095e6:	4313      	orrs	r3, r2
 80095e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80095ea:	68bb      	ldr	r3, [r7, #8]
 80095ec:	015a      	lsls	r2, r3, #5
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	4413      	add	r3, r2
 80095f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d155      	bne.n	80096ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	683b      	ldr	r3, [r7, #0]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	791b      	ldrb	r3, [r3, #4]
 800961a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800961c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800961e:	68bb      	ldr	r3, [r7, #8]
 8009620:	059b      	lsls	r3, r3, #22
 8009622:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009624:	4313      	orrs	r3, r2
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009632:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009636:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800963a:	6013      	str	r3, [r2, #0]
 800963c:	e036      	b.n	80096ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009644:	69da      	ldr	r2, [r3, #28]
 8009646:	683b      	ldr	r3, [r7, #0]
 8009648:	781b      	ldrb	r3, [r3, #0]
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	2101      	movs	r1, #1
 8009650:	fa01 f303 	lsl.w	r3, r1, r3
 8009654:	041b      	lsls	r3, r3, #16
 8009656:	68f9      	ldr	r1, [r7, #12]
 8009658:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800965c:	4313      	orrs	r3, r2
 800965e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	015a      	lsls	r2, r3, #5
 8009664:	68fb      	ldr	r3, [r7, #12]
 8009666:	4413      	add	r3, r2
 8009668:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009672:	2b00      	cmp	r3, #0
 8009674:	d11a      	bne.n	80096ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009676:	68bb      	ldr	r3, [r7, #8]
 8009678:	015a      	lsls	r2, r3, #5
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	4413      	add	r3, r2
 800967e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800968c:	683b      	ldr	r3, [r7, #0]
 800968e:	791b      	ldrb	r3, [r3, #4]
 8009690:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009692:	430b      	orrs	r3, r1
 8009694:	4313      	orrs	r3, r2
 8009696:	68ba      	ldr	r2, [r7, #8]
 8009698:	0151      	lsls	r1, r2, #5
 800969a:	68fa      	ldr	r2, [r7, #12]
 800969c:	440a      	add	r2, r1
 800969e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096a2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80096aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80096ac:	2300      	movs	r3, #0
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
	...

080096bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80096bc:	b480      	push	{r7}
 80096be:	b085      	sub	sp, #20
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	781b      	ldrb	r3, [r3, #0]
 80096ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80096d0:	683b      	ldr	r3, [r7, #0]
 80096d2:	785b      	ldrb	r3, [r3, #1]
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d161      	bne.n	800979c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096d8:	68bb      	ldr	r3, [r7, #8]
 80096da:	015a      	lsls	r2, r3, #5
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	4413      	add	r3, r2
 80096e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096ee:	d11f      	bne.n	8009730 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80096f0:	68bb      	ldr	r3, [r7, #8]
 80096f2:	015a      	lsls	r2, r3, #5
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	4413      	add	r3, r2
 80096f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	68ba      	ldr	r2, [r7, #8]
 8009700:	0151      	lsls	r1, r2, #5
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	440a      	add	r2, r1
 8009706:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800970a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800970e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009710:	68bb      	ldr	r3, [r7, #8]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	4413      	add	r3, r2
 8009718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68ba      	ldr	r2, [r7, #8]
 8009720:	0151      	lsls	r1, r2, #5
 8009722:	68fa      	ldr	r2, [r7, #12]
 8009724:	440a      	add	r2, r1
 8009726:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800972a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800972e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009736:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	f003 030f 	and.w	r3, r3, #15
 8009740:	2101      	movs	r1, #1
 8009742:	fa01 f303 	lsl.w	r3, r1, r3
 8009746:	b29b      	uxth	r3, r3
 8009748:	43db      	mvns	r3, r3
 800974a:	68f9      	ldr	r1, [r7, #12]
 800974c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009750:	4013      	ands	r3, r2
 8009752:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800975a:	69da      	ldr	r2, [r3, #28]
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 030f 	and.w	r3, r3, #15
 8009764:	2101      	movs	r1, #1
 8009766:	fa01 f303 	lsl.w	r3, r1, r3
 800976a:	b29b      	uxth	r3, r3
 800976c:	43db      	mvns	r3, r3
 800976e:	68f9      	ldr	r1, [r7, #12]
 8009770:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009774:	4013      	ands	r3, r2
 8009776:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	015a      	lsls	r2, r3, #5
 800977c:	68fb      	ldr	r3, [r7, #12]
 800977e:	4413      	add	r3, r2
 8009780:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009784:	681a      	ldr	r2, [r3, #0]
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	0159      	lsls	r1, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	440b      	add	r3, r1
 800978e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009792:	4619      	mov	r1, r3
 8009794:	4b35      	ldr	r3, [pc, #212]	@ (800986c <USB_DeactivateEndpoint+0x1b0>)
 8009796:	4013      	ands	r3, r2
 8009798:	600b      	str	r3, [r1, #0]
 800979a:	e060      	b.n	800985e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800979c:	68bb      	ldr	r3, [r7, #8]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097b2:	d11f      	bne.n	80097f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	68fb      	ldr	r3, [r7, #12]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	68ba      	ldr	r2, [r7, #8]
 80097c4:	0151      	lsls	r1, r2, #5
 80097c6:	68fa      	ldr	r2, [r7, #12]
 80097c8:	440a      	add	r2, r1
 80097ca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ce:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80097d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80097d4:	68bb      	ldr	r3, [r7, #8]
 80097d6:	015a      	lsls	r2, r3, #5
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	4413      	add	r3, r2
 80097dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	68ba      	ldr	r2, [r7, #8]
 80097e4:	0151      	lsls	r1, r2, #5
 80097e6:	68fa      	ldr	r2, [r7, #12]
 80097e8:	440a      	add	r2, r1
 80097ea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097ee:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80097f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097fa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	781b      	ldrb	r3, [r3, #0]
 8009800:	f003 030f 	and.w	r3, r3, #15
 8009804:	2101      	movs	r1, #1
 8009806:	fa01 f303 	lsl.w	r3, r1, r3
 800980a:	041b      	lsls	r3, r3, #16
 800980c:	43db      	mvns	r3, r3
 800980e:	68f9      	ldr	r1, [r7, #12]
 8009810:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009814:	4013      	ands	r3, r2
 8009816:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009818:	68fb      	ldr	r3, [r7, #12]
 800981a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800981e:	69da      	ldr	r2, [r3, #28]
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	781b      	ldrb	r3, [r3, #0]
 8009824:	f003 030f 	and.w	r3, r3, #15
 8009828:	2101      	movs	r1, #1
 800982a:	fa01 f303 	lsl.w	r3, r1, r3
 800982e:	041b      	lsls	r3, r3, #16
 8009830:	43db      	mvns	r3, r3
 8009832:	68f9      	ldr	r1, [r7, #12]
 8009834:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009838:	4013      	ands	r3, r2
 800983a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	015a      	lsls	r2, r3, #5
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	4413      	add	r3, r2
 8009844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009848:	681a      	ldr	r2, [r3, #0]
 800984a:	68bb      	ldr	r3, [r7, #8]
 800984c:	0159      	lsls	r1, r3, #5
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	440b      	add	r3, r1
 8009852:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009856:	4619      	mov	r1, r3
 8009858:	4b05      	ldr	r3, [pc, #20]	@ (8009870 <USB_DeactivateEndpoint+0x1b4>)
 800985a:	4013      	ands	r3, r2
 800985c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800985e:	2300      	movs	r3, #0
}
 8009860:	4618      	mov	r0, r3
 8009862:	3714      	adds	r7, #20
 8009864:	46bd      	mov	sp, r7
 8009866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800986a:	4770      	bx	lr
 800986c:	ec337800 	.word	0xec337800
 8009870:	eff37800 	.word	0xeff37800

08009874 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b08a      	sub	sp, #40	@ 0x28
 8009878:	af02      	add	r7, sp, #8
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	4613      	mov	r3, r2
 8009880:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800988c:	68bb      	ldr	r3, [r7, #8]
 800988e:	785b      	ldrb	r3, [r3, #1]
 8009890:	2b01      	cmp	r3, #1
 8009892:	f040 817f 	bne.w	8009b94 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	691b      	ldr	r3, [r3, #16]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d132      	bne.n	8009904 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800989e:	69bb      	ldr	r3, [r7, #24]
 80098a0:	015a      	lsls	r2, r3, #5
 80098a2:	69fb      	ldr	r3, [r7, #28]
 80098a4:	4413      	add	r3, r2
 80098a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098aa:	691b      	ldr	r3, [r3, #16]
 80098ac:	69ba      	ldr	r2, [r7, #24]
 80098ae:	0151      	lsls	r1, r2, #5
 80098b0:	69fa      	ldr	r2, [r7, #28]
 80098b2:	440a      	add	r2, r1
 80098b4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098b8:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80098bc:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80098c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	69ba      	ldr	r2, [r7, #24]
 80098d2:	0151      	lsls	r1, r2, #5
 80098d4:	69fa      	ldr	r2, [r7, #28]
 80098d6:	440a      	add	r2, r1
 80098d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80098e2:	69bb      	ldr	r3, [r7, #24]
 80098e4:	015a      	lsls	r2, r3, #5
 80098e6:	69fb      	ldr	r3, [r7, #28]
 80098e8:	4413      	add	r3, r2
 80098ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ee:	691b      	ldr	r3, [r3, #16]
 80098f0:	69ba      	ldr	r2, [r7, #24]
 80098f2:	0151      	lsls	r1, r2, #5
 80098f4:	69fa      	ldr	r2, [r7, #28]
 80098f6:	440a      	add	r2, r1
 80098f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098fc:	0cdb      	lsrs	r3, r3, #19
 80098fe:	04db      	lsls	r3, r3, #19
 8009900:	6113      	str	r3, [r2, #16]
 8009902:	e097      	b.n	8009a34 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009904:	69bb      	ldr	r3, [r7, #24]
 8009906:	015a      	lsls	r2, r3, #5
 8009908:	69fb      	ldr	r3, [r7, #28]
 800990a:	4413      	add	r3, r2
 800990c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	69ba      	ldr	r2, [r7, #24]
 8009914:	0151      	lsls	r1, r2, #5
 8009916:	69fa      	ldr	r2, [r7, #28]
 8009918:	440a      	add	r2, r1
 800991a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800991e:	0cdb      	lsrs	r3, r3, #19
 8009920:	04db      	lsls	r3, r3, #19
 8009922:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009924:	69bb      	ldr	r3, [r7, #24]
 8009926:	015a      	lsls	r2, r3, #5
 8009928:	69fb      	ldr	r3, [r7, #28]
 800992a:	4413      	add	r3, r2
 800992c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009930:	691b      	ldr	r3, [r3, #16]
 8009932:	69ba      	ldr	r2, [r7, #24]
 8009934:	0151      	lsls	r1, r2, #5
 8009936:	69fa      	ldr	r2, [r7, #28]
 8009938:	440a      	add	r2, r1
 800993a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800993e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009942:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009946:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d11a      	bne.n	8009984 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	691a      	ldr	r2, [r3, #16]
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	689b      	ldr	r3, [r3, #8]
 8009956:	429a      	cmp	r2, r3
 8009958:	d903      	bls.n	8009962 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	689a      	ldr	r2, [r3, #8]
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009962:	69bb      	ldr	r3, [r7, #24]
 8009964:	015a      	lsls	r2, r3, #5
 8009966:	69fb      	ldr	r3, [r7, #28]
 8009968:	4413      	add	r3, r2
 800996a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996e:	691b      	ldr	r3, [r3, #16]
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	69fa      	ldr	r2, [r7, #28]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009980:	6113      	str	r3, [r2, #16]
 8009982:	e044      	b.n	8009a0e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	691a      	ldr	r2, [r3, #16]
 8009988:	68bb      	ldr	r3, [r7, #8]
 800998a:	689b      	ldr	r3, [r3, #8]
 800998c:	4413      	add	r3, r2
 800998e:	1e5a      	subs	r2, r3, #1
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	689b      	ldr	r3, [r3, #8]
 8009994:	fbb2 f3f3 	udiv	r3, r2, r3
 8009998:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a6:	691a      	ldr	r2, [r3, #16]
 80099a8:	8afb      	ldrh	r3, [r7, #22]
 80099aa:	04d9      	lsls	r1, r3, #19
 80099ac:	4ba4      	ldr	r3, [pc, #656]	@ (8009c40 <USB_EPStartXfer+0x3cc>)
 80099ae:	400b      	ands	r3, r1
 80099b0:	69b9      	ldr	r1, [r7, #24]
 80099b2:	0148      	lsls	r0, r1, #5
 80099b4:	69f9      	ldr	r1, [r7, #28]
 80099b6:	4401      	add	r1, r0
 80099b8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80099bc:	4313      	orrs	r3, r2
 80099be:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80099c0:	68bb      	ldr	r3, [r7, #8]
 80099c2:	791b      	ldrb	r3, [r3, #4]
 80099c4:	2b01      	cmp	r3, #1
 80099c6:	d122      	bne.n	8009a0e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80099c8:	69bb      	ldr	r3, [r7, #24]
 80099ca:	015a      	lsls	r2, r3, #5
 80099cc:	69fb      	ldr	r3, [r7, #28]
 80099ce:	4413      	add	r3, r2
 80099d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	69ba      	ldr	r2, [r7, #24]
 80099d8:	0151      	lsls	r1, r2, #5
 80099da:	69fa      	ldr	r2, [r7, #28]
 80099dc:	440a      	add	r2, r1
 80099de:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099e2:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 80099e6:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 80099e8:	69bb      	ldr	r3, [r7, #24]
 80099ea:	015a      	lsls	r2, r3, #5
 80099ec:	69fb      	ldr	r3, [r7, #28]
 80099ee:	4413      	add	r3, r2
 80099f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099f4:	691a      	ldr	r2, [r3, #16]
 80099f6:	8afb      	ldrh	r3, [r7, #22]
 80099f8:	075b      	lsls	r3, r3, #29
 80099fa:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80099fe:	69b9      	ldr	r1, [r7, #24]
 8009a00:	0148      	lsls	r0, r1, #5
 8009a02:	69f9      	ldr	r1, [r7, #28]
 8009a04:	4401      	add	r1, r0
 8009a06:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a0a:	4313      	orrs	r3, r2
 8009a0c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a0e:	69bb      	ldr	r3, [r7, #24]
 8009a10:	015a      	lsls	r2, r3, #5
 8009a12:	69fb      	ldr	r3, [r7, #28]
 8009a14:	4413      	add	r3, r2
 8009a16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a1a:	691a      	ldr	r2, [r3, #16]
 8009a1c:	68bb      	ldr	r3, [r7, #8]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a24:	69b9      	ldr	r1, [r7, #24]
 8009a26:	0148      	lsls	r0, r1, #5
 8009a28:	69f9      	ldr	r1, [r7, #28]
 8009a2a:	4401      	add	r1, r0
 8009a2c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009a30:	4313      	orrs	r3, r2
 8009a32:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a34:	79fb      	ldrb	r3, [r7, #7]
 8009a36:	2b01      	cmp	r3, #1
 8009a38:	d14b      	bne.n	8009ad2 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a3a:	68bb      	ldr	r3, [r7, #8]
 8009a3c:	69db      	ldr	r3, [r3, #28]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d009      	beq.n	8009a56 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a42:	69bb      	ldr	r3, [r7, #24]
 8009a44:	015a      	lsls	r2, r3, #5
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	4413      	add	r3, r2
 8009a4a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a4e:	461a      	mov	r2, r3
 8009a50:	68bb      	ldr	r3, [r7, #8]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009a56:	68bb      	ldr	r3, [r7, #8]
 8009a58:	791b      	ldrb	r3, [r3, #4]
 8009a5a:	2b01      	cmp	r3, #1
 8009a5c:	d128      	bne.n	8009ab0 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a5e:	69fb      	ldr	r3, [r7, #28]
 8009a60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a64:	689b      	ldr	r3, [r3, #8]
 8009a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d110      	bne.n	8009a90 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	69fb      	ldr	r3, [r7, #28]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	69ba      	ldr	r2, [r7, #24]
 8009a7e:	0151      	lsls	r1, r2, #5
 8009a80:	69fa      	ldr	r2, [r7, #28]
 8009a82:	440a      	add	r2, r1
 8009a84:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a88:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a8c:	6013      	str	r3, [r2, #0]
 8009a8e:	e00f      	b.n	8009ab0 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a90:	69bb      	ldr	r3, [r7, #24]
 8009a92:	015a      	lsls	r2, r3, #5
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	69ba      	ldr	r2, [r7, #24]
 8009aa0:	0151      	lsls	r1, r2, #5
 8009aa2:	69fa      	ldr	r2, [r7, #28]
 8009aa4:	440a      	add	r2, r1
 8009aa6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aaa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009aae:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ab0:	69bb      	ldr	r3, [r7, #24]
 8009ab2:	015a      	lsls	r2, r3, #5
 8009ab4:	69fb      	ldr	r3, [r7, #28]
 8009ab6:	4413      	add	r3, r2
 8009ab8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	69ba      	ldr	r2, [r7, #24]
 8009ac0:	0151      	lsls	r1, r2, #5
 8009ac2:	69fa      	ldr	r2, [r7, #28]
 8009ac4:	440a      	add	r2, r1
 8009ac6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aca:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ace:	6013      	str	r3, [r2, #0]
 8009ad0:	e166      	b.n	8009da0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ad2:	69bb      	ldr	r3, [r7, #24]
 8009ad4:	015a      	lsls	r2, r3, #5
 8009ad6:	69fb      	ldr	r3, [r7, #28]
 8009ad8:	4413      	add	r3, r2
 8009ada:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	69ba      	ldr	r2, [r7, #24]
 8009ae2:	0151      	lsls	r1, r2, #5
 8009ae4:	69fa      	ldr	r2, [r7, #28]
 8009ae6:	440a      	add	r2, r1
 8009ae8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009aec:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009af0:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	791b      	ldrb	r3, [r3, #4]
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d015      	beq.n	8009b26 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691b      	ldr	r3, [r3, #16]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	f000 814e 	beq.w	8009da0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009b04:	69fb      	ldr	r3, [r7, #28]
 8009b06:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	f003 030f 	and.w	r3, r3, #15
 8009b14:	2101      	movs	r1, #1
 8009b16:	fa01 f303 	lsl.w	r3, r1, r3
 8009b1a:	69f9      	ldr	r1, [r7, #28]
 8009b1c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b20:	4313      	orrs	r3, r2
 8009b22:	634b      	str	r3, [r1, #52]	@ 0x34
 8009b24:	e13c      	b.n	8009da0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009b26:	69fb      	ldr	r3, [r7, #28]
 8009b28:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d110      	bne.n	8009b58 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	015a      	lsls	r2, r3, #5
 8009b3a:	69fb      	ldr	r3, [r7, #28]
 8009b3c:	4413      	add	r3, r2
 8009b3e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	69ba      	ldr	r2, [r7, #24]
 8009b46:	0151      	lsls	r1, r2, #5
 8009b48:	69fa      	ldr	r2, [r7, #28]
 8009b4a:	440a      	add	r2, r1
 8009b4c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b50:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009b54:	6013      	str	r3, [r2, #0]
 8009b56:	e00f      	b.n	8009b78 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009b58:	69bb      	ldr	r3, [r7, #24]
 8009b5a:	015a      	lsls	r2, r3, #5
 8009b5c:	69fb      	ldr	r3, [r7, #28]
 8009b5e:	4413      	add	r3, r2
 8009b60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	69ba      	ldr	r2, [r7, #24]
 8009b68:	0151      	lsls	r1, r2, #5
 8009b6a:	69fa      	ldr	r2, [r7, #28]
 8009b6c:	440a      	add	r2, r1
 8009b6e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b76:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	68d9      	ldr	r1, [r3, #12]
 8009b7c:	68bb      	ldr	r3, [r7, #8]
 8009b7e:	781a      	ldrb	r2, [r3, #0]
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	691b      	ldr	r3, [r3, #16]
 8009b84:	b298      	uxth	r0, r3
 8009b86:	79fb      	ldrb	r3, [r7, #7]
 8009b88:	9300      	str	r3, [sp, #0]
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	68f8      	ldr	r0, [r7, #12]
 8009b8e:	f000 f9b9 	bl	8009f04 <USB_WritePacket>
 8009b92:	e105      	b.n	8009da0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	69fb      	ldr	r3, [r7, #28]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba0:	691b      	ldr	r3, [r3, #16]
 8009ba2:	69ba      	ldr	r2, [r7, #24]
 8009ba4:	0151      	lsls	r1, r2, #5
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	440a      	add	r2, r1
 8009baa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bae:	0cdb      	lsrs	r3, r3, #19
 8009bb0:	04db      	lsls	r3, r3, #19
 8009bb2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009bb4:	69bb      	ldr	r3, [r7, #24]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bc0:	691b      	ldr	r3, [r3, #16]
 8009bc2:	69ba      	ldr	r2, [r7, #24]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	69fa      	ldr	r2, [r7, #28]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bce:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009bd2:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009bd6:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009bd8:	69bb      	ldr	r3, [r7, #24]
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d132      	bne.n	8009c44 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	691b      	ldr	r3, [r3, #16]
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d003      	beq.n	8009bee <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	689a      	ldr	r2, [r3, #8]
 8009bea:	68bb      	ldr	r3, [r7, #8]
 8009bec:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	689a      	ldr	r2, [r3, #8]
 8009bf2:	68bb      	ldr	r3, [r7, #8]
 8009bf4:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009bf6:	69bb      	ldr	r3, [r7, #24]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	69fb      	ldr	r3, [r7, #28]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c02:	691a      	ldr	r2, [r3, #16]
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	6a1b      	ldr	r3, [r3, #32]
 8009c08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c0c:	69b9      	ldr	r1, [r7, #24]
 8009c0e:	0148      	lsls	r0, r1, #5
 8009c10:	69f9      	ldr	r1, [r7, #28]
 8009c12:	4401      	add	r1, r0
 8009c14:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c18:	4313      	orrs	r3, r2
 8009c1a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c1c:	69bb      	ldr	r3, [r7, #24]
 8009c1e:	015a      	lsls	r2, r3, #5
 8009c20:	69fb      	ldr	r3, [r7, #28]
 8009c22:	4413      	add	r3, r2
 8009c24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c28:	691b      	ldr	r3, [r3, #16]
 8009c2a:	69ba      	ldr	r2, [r7, #24]
 8009c2c:	0151      	lsls	r1, r2, #5
 8009c2e:	69fa      	ldr	r2, [r7, #28]
 8009c30:	440a      	add	r2, r1
 8009c32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c36:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c3a:	6113      	str	r3, [r2, #16]
 8009c3c:	e062      	b.n	8009d04 <USB_EPStartXfer+0x490>
 8009c3e:	bf00      	nop
 8009c40:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009c44:	68bb      	ldr	r3, [r7, #8]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d123      	bne.n	8009c94 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009c4c:	69bb      	ldr	r3, [r7, #24]
 8009c4e:	015a      	lsls	r2, r3, #5
 8009c50:	69fb      	ldr	r3, [r7, #28]
 8009c52:	4413      	add	r3, r2
 8009c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c58:	691a      	ldr	r2, [r3, #16]
 8009c5a:	68bb      	ldr	r3, [r7, #8]
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c62:	69b9      	ldr	r1, [r7, #24]
 8009c64:	0148      	lsls	r0, r1, #5
 8009c66:	69f9      	ldr	r1, [r7, #28]
 8009c68:	4401      	add	r1, r0
 8009c6a:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c6e:	4313      	orrs	r3, r2
 8009c70:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009c72:	69bb      	ldr	r3, [r7, #24]
 8009c74:	015a      	lsls	r2, r3, #5
 8009c76:	69fb      	ldr	r3, [r7, #28]
 8009c78:	4413      	add	r3, r2
 8009c7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c7e:	691b      	ldr	r3, [r3, #16]
 8009c80:	69ba      	ldr	r2, [r7, #24]
 8009c82:	0151      	lsls	r1, r2, #5
 8009c84:	69fa      	ldr	r2, [r7, #28]
 8009c86:	440a      	add	r2, r1
 8009c88:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c8c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009c90:	6113      	str	r3, [r2, #16]
 8009c92:	e037      	b.n	8009d04 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	691a      	ldr	r2, [r3, #16]
 8009c98:	68bb      	ldr	r3, [r7, #8]
 8009c9a:	689b      	ldr	r3, [r3, #8]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	1e5a      	subs	r2, r3, #1
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	689b      	ldr	r3, [r3, #8]
 8009ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8009ca8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009caa:	68bb      	ldr	r3, [r7, #8]
 8009cac:	689b      	ldr	r3, [r3, #8]
 8009cae:	8afa      	ldrh	r2, [r7, #22]
 8009cb0:	fb03 f202 	mul.w	r2, r3, r2
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009cb8:	69bb      	ldr	r3, [r7, #24]
 8009cba:	015a      	lsls	r2, r3, #5
 8009cbc:	69fb      	ldr	r3, [r7, #28]
 8009cbe:	4413      	add	r3, r2
 8009cc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc4:	691a      	ldr	r2, [r3, #16]
 8009cc6:	8afb      	ldrh	r3, [r7, #22]
 8009cc8:	04d9      	lsls	r1, r3, #19
 8009cca:	4b38      	ldr	r3, [pc, #224]	@ (8009dac <USB_EPStartXfer+0x538>)
 8009ccc:	400b      	ands	r3, r1
 8009cce:	69b9      	ldr	r1, [r7, #24]
 8009cd0:	0148      	lsls	r0, r1, #5
 8009cd2:	69f9      	ldr	r1, [r7, #28]
 8009cd4:	4401      	add	r1, r0
 8009cd6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	015a      	lsls	r2, r3, #5
 8009ce2:	69fb      	ldr	r3, [r7, #28]
 8009ce4:	4413      	add	r3, r2
 8009ce6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cea:	691a      	ldr	r2, [r3, #16]
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	6a1b      	ldr	r3, [r3, #32]
 8009cf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009cf4:	69b9      	ldr	r1, [r7, #24]
 8009cf6:	0148      	lsls	r0, r1, #5
 8009cf8:	69f9      	ldr	r1, [r7, #28]
 8009cfa:	4401      	add	r1, r0
 8009cfc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009d00:	4313      	orrs	r3, r2
 8009d02:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009d04:	79fb      	ldrb	r3, [r7, #7]
 8009d06:	2b01      	cmp	r3, #1
 8009d08:	d10d      	bne.n	8009d26 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	68db      	ldr	r3, [r3, #12]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d009      	beq.n	8009d26 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	68d9      	ldr	r1, [r3, #12]
 8009d16:	69bb      	ldr	r3, [r7, #24]
 8009d18:	015a      	lsls	r2, r3, #5
 8009d1a:	69fb      	ldr	r3, [r7, #28]
 8009d1c:	4413      	add	r3, r2
 8009d1e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d22:	460a      	mov	r2, r1
 8009d24:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	791b      	ldrb	r3, [r3, #4]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d128      	bne.n	8009d80 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d34:	689b      	ldr	r3, [r3, #8]
 8009d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	d110      	bne.n	8009d60 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	015a      	lsls	r2, r3, #5
 8009d42:	69fb      	ldr	r3, [r7, #28]
 8009d44:	4413      	add	r3, r2
 8009d46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	69ba      	ldr	r2, [r7, #24]
 8009d4e:	0151      	lsls	r1, r2, #5
 8009d50:	69fa      	ldr	r2, [r7, #28]
 8009d52:	440a      	add	r2, r1
 8009d54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d58:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009d5c:	6013      	str	r3, [r2, #0]
 8009d5e:	e00f      	b.n	8009d80 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	015a      	lsls	r2, r3, #5
 8009d64:	69fb      	ldr	r3, [r7, #28]
 8009d66:	4413      	add	r3, r2
 8009d68:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	69ba      	ldr	r2, [r7, #24]
 8009d70:	0151      	lsls	r1, r2, #5
 8009d72:	69fa      	ldr	r2, [r7, #28]
 8009d74:	440a      	add	r2, r1
 8009d76:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d7e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009d80:	69bb      	ldr	r3, [r7, #24]
 8009d82:	015a      	lsls	r2, r3, #5
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	4413      	add	r3, r2
 8009d88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	69ba      	ldr	r2, [r7, #24]
 8009d90:	0151      	lsls	r1, r2, #5
 8009d92:	69fa      	ldr	r2, [r7, #28]
 8009d94:	440a      	add	r2, r1
 8009d96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d9a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009d9e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009da0:	2300      	movs	r3, #0
}
 8009da2:	4618      	mov	r0, r3
 8009da4:	3720      	adds	r7, #32
 8009da6:	46bd      	mov	sp, r7
 8009da8:	bd80      	pop	{r7, pc}
 8009daa:	bf00      	nop
 8009dac:	1ff80000 	.word	0x1ff80000

08009db0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009dba:	2300      	movs	r3, #0
 8009dbc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	785b      	ldrb	r3, [r3, #1]
 8009dca:	2b01      	cmp	r3, #1
 8009dcc:	d14a      	bne.n	8009e64 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	015a      	lsls	r2, r3, #5
 8009dd4:	693b      	ldr	r3, [r7, #16]
 8009dd6:	4413      	add	r3, r2
 8009dd8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009de2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009de6:	f040 8086 	bne.w	8009ef6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009dea:	683b      	ldr	r3, [r7, #0]
 8009dec:	781b      	ldrb	r3, [r3, #0]
 8009dee:	015a      	lsls	r2, r3, #5
 8009df0:	693b      	ldr	r3, [r7, #16]
 8009df2:	4413      	add	r3, r2
 8009df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	683a      	ldr	r2, [r7, #0]
 8009dfc:	7812      	ldrb	r2, [r2, #0]
 8009dfe:	0151      	lsls	r1, r2, #5
 8009e00:	693a      	ldr	r2, [r7, #16]
 8009e02:	440a      	add	r2, r1
 8009e04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e08:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009e0c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	015a      	lsls	r2, r3, #5
 8009e14:	693b      	ldr	r3, [r7, #16]
 8009e16:	4413      	add	r3, r2
 8009e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	683a      	ldr	r2, [r7, #0]
 8009e20:	7812      	ldrb	r2, [r2, #0]
 8009e22:	0151      	lsls	r1, r2, #5
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	440a      	add	r2, r1
 8009e28:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e2c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009e30:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	3301      	adds	r3, #1
 8009e36:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d902      	bls.n	8009e48 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009e42:	2301      	movs	r3, #1
 8009e44:	75fb      	strb	r3, [r7, #23]
          break;
 8009e46:	e056      	b.n	8009ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009e48:	683b      	ldr	r3, [r7, #0]
 8009e4a:	781b      	ldrb	r3, [r3, #0]
 8009e4c:	015a      	lsls	r2, r3, #5
 8009e4e:	693b      	ldr	r3, [r7, #16]
 8009e50:	4413      	add	r3, r2
 8009e52:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e5c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e60:	d0e7      	beq.n	8009e32 <USB_EPStopXfer+0x82>
 8009e62:	e048      	b.n	8009ef6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	781b      	ldrb	r3, [r3, #0]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e7c:	d13b      	bne.n	8009ef6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	015a      	lsls	r2, r3, #5
 8009e84:	693b      	ldr	r3, [r7, #16]
 8009e86:	4413      	add	r3, r2
 8009e88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	683a      	ldr	r2, [r7, #0]
 8009e90:	7812      	ldrb	r2, [r2, #0]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009e9c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009ea0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	781b      	ldrb	r3, [r3, #0]
 8009ea6:	015a      	lsls	r2, r3, #5
 8009ea8:	693b      	ldr	r3, [r7, #16]
 8009eaa:	4413      	add	r3, r2
 8009eac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	7812      	ldrb	r2, [r2, #0]
 8009eb6:	0151      	lsls	r1, r2, #5
 8009eb8:	693a      	ldr	r2, [r7, #16]
 8009eba:	440a      	add	r2, r1
 8009ebc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ec0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009ec4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	3301      	adds	r3, #1
 8009eca:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d902      	bls.n	8009edc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009ed6:	2301      	movs	r3, #1
 8009ed8:	75fb      	strb	r3, [r7, #23]
          break;
 8009eda:	e00c      	b.n	8009ef6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	015a      	lsls	r2, r3, #5
 8009ee2:	693b      	ldr	r3, [r7, #16]
 8009ee4:	4413      	add	r3, r2
 8009ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ef0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ef4:	d0e7      	beq.n	8009ec6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ef8:	4618      	mov	r0, r3
 8009efa:	371c      	adds	r7, #28
 8009efc:	46bd      	mov	sp, r7
 8009efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f02:	4770      	bx	lr

08009f04 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009f04:	b480      	push	{r7}
 8009f06:	b089      	sub	sp, #36	@ 0x24
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	4611      	mov	r1, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	460b      	mov	r3, r1
 8009f14:	71fb      	strb	r3, [r7, #7]
 8009f16:	4613      	mov	r3, r2
 8009f18:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f1a:	68fb      	ldr	r3, [r7, #12]
 8009f1c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009f22:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d123      	bne.n	8009f72 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009f2a:	88bb      	ldrh	r3, [r7, #4]
 8009f2c:	3303      	adds	r3, #3
 8009f2e:	089b      	lsrs	r3, r3, #2
 8009f30:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009f32:	2300      	movs	r3, #0
 8009f34:	61bb      	str	r3, [r7, #24]
 8009f36:	e018      	b.n	8009f6a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009f38:	79fb      	ldrb	r3, [r7, #7]
 8009f3a:	031a      	lsls	r2, r3, #12
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	4413      	add	r3, r2
 8009f40:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f44:	461a      	mov	r2, r3
 8009f46:	69fb      	ldr	r3, [r7, #28]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009f4c:	69fb      	ldr	r3, [r7, #28]
 8009f4e:	3301      	adds	r3, #1
 8009f50:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	3301      	adds	r3, #1
 8009f56:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f58:	69fb      	ldr	r3, [r7, #28]
 8009f5a:	3301      	adds	r3, #1
 8009f5c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	3301      	adds	r3, #1
 8009f62:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009f64:	69bb      	ldr	r3, [r7, #24]
 8009f66:	3301      	adds	r3, #1
 8009f68:	61bb      	str	r3, [r7, #24]
 8009f6a:	69ba      	ldr	r2, [r7, #24]
 8009f6c:	693b      	ldr	r3, [r7, #16]
 8009f6e:	429a      	cmp	r2, r3
 8009f70:	d3e2      	bcc.n	8009f38 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3724      	adds	r7, #36	@ 0x24
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b08b      	sub	sp, #44	@ 0x2c
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	60b9      	str	r1, [r7, #8]
 8009f8a:	4613      	mov	r3, r2
 8009f8c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009f92:	68bb      	ldr	r3, [r7, #8]
 8009f94:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009f96:	88fb      	ldrh	r3, [r7, #6]
 8009f98:	089b      	lsrs	r3, r3, #2
 8009f9a:	b29b      	uxth	r3, r3
 8009f9c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009f9e:	88fb      	ldrh	r3, [r7, #6]
 8009fa0:	f003 0303 	and.w	r3, r3, #3
 8009fa4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009fa6:	2300      	movs	r3, #0
 8009fa8:	623b      	str	r3, [r7, #32]
 8009faa:	e014      	b.n	8009fd6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb2:	681a      	ldr	r2, [r3, #0]
 8009fb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fb6:	601a      	str	r2, [r3, #0]
    pDest++;
 8009fb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fba:	3301      	adds	r3, #1
 8009fbc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc0:	3301      	adds	r3, #1
 8009fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fc6:	3301      	adds	r3, #1
 8009fc8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fcc:	3301      	adds	r3, #1
 8009fce:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009fd0:	6a3b      	ldr	r3, [r7, #32]
 8009fd2:	3301      	adds	r3, #1
 8009fd4:	623b      	str	r3, [r7, #32]
 8009fd6:	6a3a      	ldr	r2, [r7, #32]
 8009fd8:	697b      	ldr	r3, [r7, #20]
 8009fda:	429a      	cmp	r2, r3
 8009fdc:	d3e6      	bcc.n	8009fac <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009fde:	8bfb      	ldrh	r3, [r7, #30]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01e      	beq.n	800a022 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009fe8:	69bb      	ldr	r3, [r7, #24]
 8009fea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fee:	461a      	mov	r2, r3
 8009ff0:	f107 0310 	add.w	r3, r7, #16
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009ff8:	693a      	ldr	r2, [r7, #16]
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	b2db      	uxtb	r3, r3
 8009ffe:	00db      	lsls	r3, r3, #3
 800a000:	fa22 f303 	lsr.w	r3, r2, r3
 800a004:	b2da      	uxtb	r2, r3
 800a006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a008:	701a      	strb	r2, [r3, #0]
      i++;
 800a00a:	6a3b      	ldr	r3, [r7, #32]
 800a00c:	3301      	adds	r3, #1
 800a00e:	623b      	str	r3, [r7, #32]
      pDest++;
 800a010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a012:	3301      	adds	r3, #1
 800a014:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a016:	8bfb      	ldrh	r3, [r7, #30]
 800a018:	3b01      	subs	r3, #1
 800a01a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a01c:	8bfb      	ldrh	r3, [r7, #30]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d1ea      	bne.n	8009ff8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a022:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a024:	4618      	mov	r0, r3
 800a026:	372c      	adds	r7, #44	@ 0x2c
 800a028:	46bd      	mov	sp, r7
 800a02a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02e:	4770      	bx	lr

0800a030 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a030:	b480      	push	{r7}
 800a032:	b085      	sub	sp, #20
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
 800a038:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a03e:	683b      	ldr	r3, [r7, #0]
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	785b      	ldrb	r3, [r3, #1]
 800a048:	2b01      	cmp	r3, #1
 800a04a:	d12c      	bne.n	800a0a6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a04c:	68bb      	ldr	r3, [r7, #8]
 800a04e:	015a      	lsls	r2, r3, #5
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4413      	add	r3, r2
 800a054:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	db12      	blt.n	800a084 <USB_EPSetStall+0x54>
 800a05e:	68bb      	ldr	r3, [r7, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d00f      	beq.n	800a084 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	015a      	lsls	r2, r3, #5
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	4413      	add	r3, r2
 800a06c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	68ba      	ldr	r2, [r7, #8]
 800a074:	0151      	lsls	r1, r2, #5
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	440a      	add	r2, r1
 800a07a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a07e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a082:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	015a      	lsls	r2, r3, #5
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	4413      	add	r3, r2
 800a08c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	68ba      	ldr	r2, [r7, #8]
 800a094:	0151      	lsls	r1, r2, #5
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	440a      	add	r2, r1
 800a09a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0a2:	6013      	str	r3, [r2, #0]
 800a0a4:	e02b      	b.n	800a0fe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a0a6:	68bb      	ldr	r3, [r7, #8]
 800a0a8:	015a      	lsls	r2, r3, #5
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	4413      	add	r3, r2
 800a0ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	db12      	blt.n	800a0de <USB_EPSetStall+0xae>
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d00f      	beq.n	800a0de <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a0be:	68bb      	ldr	r3, [r7, #8]
 800a0c0:	015a      	lsls	r2, r3, #5
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	4413      	add	r3, r2
 800a0c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	68ba      	ldr	r2, [r7, #8]
 800a0ce:	0151      	lsls	r1, r2, #5
 800a0d0:	68fa      	ldr	r2, [r7, #12]
 800a0d2:	440a      	add	r2, r1
 800a0d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a0dc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	015a      	lsls	r2, r3, #5
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	0151      	lsls	r1, r2, #5
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	440a      	add	r2, r1
 800a0f4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0f8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a0fc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a0fe:	2300      	movs	r3, #0
}
 800a100:	4618      	mov	r0, r3
 800a102:	3714      	adds	r7, #20
 800a104:	46bd      	mov	sp, r7
 800a106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10a:	4770      	bx	lr

0800a10c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a10c:	b480      	push	{r7}
 800a10e:	b085      	sub	sp, #20
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
 800a114:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a11a:	683b      	ldr	r3, [r7, #0]
 800a11c:	781b      	ldrb	r3, [r3, #0]
 800a11e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a120:	683b      	ldr	r3, [r7, #0]
 800a122:	785b      	ldrb	r3, [r3, #1]
 800a124:	2b01      	cmp	r3, #1
 800a126:	d128      	bne.n	800a17a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a128:	68bb      	ldr	r3, [r7, #8]
 800a12a:	015a      	lsls	r2, r3, #5
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	4413      	add	r3, r2
 800a130:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68ba      	ldr	r2, [r7, #8]
 800a138:	0151      	lsls	r1, r2, #5
 800a13a:	68fa      	ldr	r2, [r7, #12]
 800a13c:	440a      	add	r2, r1
 800a13e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a142:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a146:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	791b      	ldrb	r3, [r3, #4]
 800a14c:	2b03      	cmp	r3, #3
 800a14e:	d003      	beq.n	800a158 <USB_EPClearStall+0x4c>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	791b      	ldrb	r3, [r3, #4]
 800a154:	2b02      	cmp	r3, #2
 800a156:	d138      	bne.n	800a1ca <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a158:	68bb      	ldr	r3, [r7, #8]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	68ba      	ldr	r2, [r7, #8]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	68fa      	ldr	r2, [r7, #12]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	e027      	b.n	800a1ca <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	015a      	lsls	r2, r3, #5
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	4413      	add	r3, r2
 800a182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a186:	681b      	ldr	r3, [r3, #0]
 800a188:	68ba      	ldr	r2, [r7, #8]
 800a18a:	0151      	lsls	r1, r2, #5
 800a18c:	68fa      	ldr	r2, [r7, #12]
 800a18e:	440a      	add	r2, r1
 800a190:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a194:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a198:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	791b      	ldrb	r3, [r3, #4]
 800a19e:	2b03      	cmp	r3, #3
 800a1a0:	d003      	beq.n	800a1aa <USB_EPClearStall+0x9e>
 800a1a2:	683b      	ldr	r3, [r7, #0]
 800a1a4:	791b      	ldrb	r3, [r3, #4]
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d10f      	bne.n	800a1ca <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	015a      	lsls	r2, r3, #5
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	4413      	add	r3, r2
 800a1b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	68ba      	ldr	r2, [r7, #8]
 800a1ba:	0151      	lsls	r1, r2, #5
 800a1bc:	68fa      	ldr	r2, [r7, #12]
 800a1be:	440a      	add	r2, r1
 800a1c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a1c8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a1ca:	2300      	movs	r3, #0
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	3714      	adds	r7, #20
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr

0800a1d8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a1d8:	b480      	push	{r7}
 800a1da:	b085      	sub	sp, #20
 800a1dc:	af00      	add	r7, sp, #0
 800a1de:	6078      	str	r0, [r7, #4]
 800a1e0:	460b      	mov	r3, r1
 800a1e2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1f6:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a1fa:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a202:	681a      	ldr	r2, [r3, #0]
 800a204:	78fb      	ldrb	r3, [r7, #3]
 800a206:	011b      	lsls	r3, r3, #4
 800a208:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a20c:	68f9      	ldr	r1, [r7, #12]
 800a20e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a212:	4313      	orrs	r3, r2
 800a214:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a216:	2300      	movs	r3, #0
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a224:	b480      	push	{r7}
 800a226:	b085      	sub	sp, #20
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68fa      	ldr	r2, [r7, #12]
 800a23a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a23e:	f023 0303 	bic.w	r3, r3, #3
 800a242:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	68fa      	ldr	r2, [r7, #12]
 800a24e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a252:	f023 0302 	bic.w	r3, r3, #2
 800a256:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a258:	2300      	movs	r3, #0
}
 800a25a:	4618      	mov	r0, r3
 800a25c:	3714      	adds	r7, #20
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68fa      	ldr	r2, [r7, #12]
 800a27c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a280:	f023 0303 	bic.w	r3, r3, #3
 800a284:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a28c:	685b      	ldr	r3, [r3, #4]
 800a28e:	68fa      	ldr	r2, [r7, #12]
 800a290:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a294:	f043 0302 	orr.w	r3, r3, #2
 800a298:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a29a:	2300      	movs	r3, #0
}
 800a29c:	4618      	mov	r0, r3
 800a29e:	3714      	adds	r7, #20
 800a2a0:	46bd      	mov	sp, r7
 800a2a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a6:	4770      	bx	lr

0800a2a8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a2a8:	b480      	push	{r7}
 800a2aa:	b085      	sub	sp, #20
 800a2ac:	af00      	add	r7, sp, #0
 800a2ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	695b      	ldr	r3, [r3, #20]
 800a2b4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	699b      	ldr	r3, [r3, #24]
 800a2ba:	68fa      	ldr	r2, [r7, #12]
 800a2bc:	4013      	ands	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a2c0:	68fb      	ldr	r3, [r7, #12]
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3714      	adds	r7, #20
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b085      	sub	sp, #20
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2e0:	699b      	ldr	r3, [r3, #24]
 800a2e2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ea:	69db      	ldr	r3, [r3, #28]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	4013      	ands	r3, r2
 800a2f0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	0c1b      	lsrs	r3, r3, #16
}
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	3714      	adds	r7, #20
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a300:	4770      	bx	lr

0800a302 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a302:	b480      	push	{r7}
 800a304:	b085      	sub	sp, #20
 800a306:	af00      	add	r7, sp, #0
 800a308:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a30e:	68fb      	ldr	r3, [r7, #12]
 800a310:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a314:	699b      	ldr	r3, [r3, #24]
 800a316:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a31e:	69db      	ldr	r3, [r3, #28]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	4013      	ands	r3, r2
 800a324:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	b29b      	uxth	r3, r3
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3714      	adds	r7, #20
 800a32e:	46bd      	mov	sp, r7
 800a330:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a334:	4770      	bx	lr

0800a336 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a336:	b480      	push	{r7}
 800a338:	b085      	sub	sp, #20
 800a33a:	af00      	add	r7, sp, #0
 800a33c:	6078      	str	r0, [r7, #4]
 800a33e:	460b      	mov	r3, r1
 800a340:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a346:	78fb      	ldrb	r3, [r7, #3]
 800a348:	015a      	lsls	r2, r3, #5
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	4413      	add	r3, r2
 800a34e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a352:	689b      	ldr	r3, [r3, #8]
 800a354:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a35c:	695b      	ldr	r3, [r3, #20]
 800a35e:	68ba      	ldr	r2, [r7, #8]
 800a360:	4013      	ands	r3, r2
 800a362:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a364:	68bb      	ldr	r3, [r7, #8]
}
 800a366:	4618      	mov	r0, r3
 800a368:	3714      	adds	r7, #20
 800a36a:	46bd      	mov	sp, r7
 800a36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a370:	4770      	bx	lr

0800a372 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a372:	b480      	push	{r7}
 800a374:	b087      	sub	sp, #28
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	460b      	mov	r3, r1
 800a37c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a382:	697b      	ldr	r3, [r7, #20]
 800a384:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a388:	691b      	ldr	r3, [r3, #16]
 800a38a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a392:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a394:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a396:	78fb      	ldrb	r3, [r7, #3]
 800a398:	f003 030f 	and.w	r3, r3, #15
 800a39c:	68fa      	ldr	r2, [r7, #12]
 800a39e:	fa22 f303 	lsr.w	r3, r2, r3
 800a3a2:	01db      	lsls	r3, r3, #7
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	693a      	ldr	r2, [r7, #16]
 800a3a8:	4313      	orrs	r3, r2
 800a3aa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a3ac:	78fb      	ldrb	r3, [r7, #3]
 800a3ae:	015a      	lsls	r2, r3, #5
 800a3b0:	697b      	ldr	r3, [r7, #20]
 800a3b2:	4413      	add	r3, r2
 800a3b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3b8:	689b      	ldr	r3, [r3, #8]
 800a3ba:	693a      	ldr	r2, [r7, #16]
 800a3bc:	4013      	ands	r3, r2
 800a3be:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a3c0:	68bb      	ldr	r3, [r7, #8]
}
 800a3c2:	4618      	mov	r0, r3
 800a3c4:	371c      	adds	r7, #28
 800a3c6:	46bd      	mov	sp, r7
 800a3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3cc:	4770      	bx	lr

0800a3ce <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ce:	b480      	push	{r7}
 800a3d0:	b083      	sub	sp, #12
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	695b      	ldr	r3, [r3, #20]
 800a3da:	f003 0301 	and.w	r3, r3, #1
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	370c      	adds	r7, #12
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr

0800a3ea <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a3ea:	b480      	push	{r7}
 800a3ec:	b085      	sub	sp, #20
 800a3ee:	af00      	add	r7, sp, #0
 800a3f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a404:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a408:	f023 0307 	bic.w	r3, r3, #7
 800a40c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a414:	685b      	ldr	r3, [r3, #4]
 800a416:	68fa      	ldr	r2, [r7, #12]
 800a418:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a41c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a420:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a422:	2300      	movs	r3, #0
}
 800a424:	4618      	mov	r0, r3
 800a426:	3714      	adds	r7, #20
 800a428:	46bd      	mov	sp, r7
 800a42a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42e:	4770      	bx	lr

0800a430 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a430:	b480      	push	{r7}
 800a432:	b087      	sub	sp, #28
 800a434:	af00      	add	r7, sp, #0
 800a436:	60f8      	str	r0, [r7, #12]
 800a438:	460b      	mov	r3, r1
 800a43a:	607a      	str	r2, [r7, #4]
 800a43c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	333c      	adds	r3, #60	@ 0x3c
 800a446:	3304      	adds	r3, #4
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a44c:	693b      	ldr	r3, [r7, #16]
 800a44e:	4a26      	ldr	r2, [pc, #152]	@ (800a4e8 <USB_EP0_OutStart+0xb8>)
 800a450:	4293      	cmp	r3, r2
 800a452:	d90a      	bls.n	800a46a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a460:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a464:	d101      	bne.n	800a46a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a466:	2300      	movs	r3, #0
 800a468:	e037      	b.n	800a4da <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a46a:	697b      	ldr	r3, [r7, #20]
 800a46c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a470:	461a      	mov	r2, r3
 800a472:	2300      	movs	r3, #0
 800a474:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a484:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a488:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a48a:	697b      	ldr	r3, [r7, #20]
 800a48c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a490:	691b      	ldr	r3, [r3, #16]
 800a492:	697a      	ldr	r2, [r7, #20]
 800a494:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a498:	f043 0318 	orr.w	r3, r3, #24
 800a49c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a49e:	697b      	ldr	r3, [r7, #20]
 800a4a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4a4:	691b      	ldr	r3, [r3, #16]
 800a4a6:	697a      	ldr	r2, [r7, #20]
 800a4a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4ac:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a4b0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a4b2:	7afb      	ldrb	r3, [r7, #11]
 800a4b4:	2b01      	cmp	r3, #1
 800a4b6:	d10f      	bne.n	800a4d8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a4b8:	697b      	ldr	r3, [r7, #20]
 800a4ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4be:	461a      	mov	r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a4c4:	697b      	ldr	r3, [r7, #20]
 800a4c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4ca:	681b      	ldr	r3, [r3, #0]
 800a4cc:	697a      	ldr	r2, [r7, #20]
 800a4ce:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d2:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a4d6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	371c      	adds	r7, #28
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr
 800a4e6:	bf00      	nop
 800a4e8:	4f54300a 	.word	0x4f54300a

0800a4ec <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a4f4:	2300      	movs	r3, #0
 800a4f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	3301      	adds	r3, #1
 800a4fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a504:	d901      	bls.n	800a50a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a506:	2303      	movs	r3, #3
 800a508:	e01b      	b.n	800a542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	2b00      	cmp	r3, #0
 800a510:	daf2      	bge.n	800a4f8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a512:	2300      	movs	r3, #0
 800a514:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	691b      	ldr	r3, [r3, #16]
 800a51a:	f043 0201 	orr.w	r2, r3, #1
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	3301      	adds	r3, #1
 800a526:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a52e:	d901      	bls.n	800a534 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a530:	2303      	movs	r3, #3
 800a532:	e006      	b.n	800a542 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	691b      	ldr	r3, [r3, #16]
 800a538:	f003 0301 	and.w	r3, r3, #1
 800a53c:	2b01      	cmp	r3, #1
 800a53e:	d0f0      	beq.n	800a522 <USB_CoreReset+0x36>

  return HAL_OK;
 800a540:	2300      	movs	r3, #0
}
 800a542:	4618      	mov	r0, r3
 800a544:	3714      	adds	r7, #20
 800a546:	46bd      	mov	sp, r7
 800a548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a54c:	4770      	bx	lr
	...

0800a550 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a550:	b580      	push	{r7, lr}
 800a552:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a554:	4904      	ldr	r1, [pc, #16]	@ (800a568 <MX_FATFS_Init+0x18>)
 800a556:	4805      	ldr	r0, [pc, #20]	@ (800a56c <MX_FATFS_Init+0x1c>)
 800a558:	f004 f9ae 	bl	800e8b8 <FATFS_LinkDriver>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	4b03      	ldr	r3, [pc, #12]	@ (800a570 <MX_FATFS_Init+0x20>)
 800a562:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a564:	bf00      	nop
 800a566:	bd80      	pop	{r7, pc}
 800a568:	200003f0 	.word	0x200003f0
 800a56c:	20000030 	.word	0x20000030
 800a570:	200003ec 	.word	0x200003ec

0800a574 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a574:	b480      	push	{r7}
 800a576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a578:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a57a:	4618      	mov	r0, r3
 800a57c:	46bd      	mov	sp, r7
 800a57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a582:	4770      	bx	lr

0800a584 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a584:	b580      	push	{r7, lr}
 800a586:	b082      	sub	sp, #8
 800a588:	af00      	add	r7, sp, #0
 800a58a:	4603      	mov	r3, r0
 800a58c:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a58e:	79fb      	ldrb	r3, [r7, #7]
 800a590:	4618      	mov	r0, r3
 800a592:	f7f6 f9fd 	bl	8000990 <SD_disk_initialize>
 800a596:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a598:	4618      	mov	r0, r3
 800a59a:	3708      	adds	r7, #8
 800a59c:	46bd      	mov	sp, r7
 800a59e:	bd80      	pop	{r7, pc}

0800a5a0 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	4603      	mov	r3, r0
 800a5a8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a5aa:	79fb      	ldrb	r3, [r7, #7]
 800a5ac:	4618      	mov	r0, r3
 800a5ae:	f7f6 fad5 	bl	8000b5c <SD_disk_status>
 800a5b2:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800a5b4:	4618      	mov	r0, r3
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b084      	sub	sp, #16
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	60b9      	str	r1, [r7, #8]
 800a5c4:	607a      	str	r2, [r7, #4]
 800a5c6:	603b      	str	r3, [r7, #0]
 800a5c8:	4603      	mov	r3, r0
 800a5ca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a5cc:	7bf8      	ldrb	r0, [r7, #15]
 800a5ce:	683b      	ldr	r3, [r7, #0]
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	68b9      	ldr	r1, [r7, #8]
 800a5d4:	f7f6 fad8 	bl	8000b88 <SD_disk_read>
 800a5d8:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800a5da:	4618      	mov	r0, r3
 800a5dc:	3710      	adds	r7, #16
 800a5de:	46bd      	mov	sp, r7
 800a5e0:	bd80      	pop	{r7, pc}

0800a5e2 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a5e2:	b580      	push	{r7, lr}
 800a5e4:	b084      	sub	sp, #16
 800a5e6:	af00      	add	r7, sp, #0
 800a5e8:	60b9      	str	r1, [r7, #8]
 800a5ea:	607a      	str	r2, [r7, #4]
 800a5ec:	603b      	str	r3, [r7, #0]
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a5f2:	7bf8      	ldrb	r0, [r7, #15]
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	687a      	ldr	r2, [r7, #4]
 800a5f8:	68b9      	ldr	r1, [r7, #8]
 800a5fa:	f7f6 fb2f 	bl	8000c5c <SD_disk_write>
 800a5fe:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800a600:	4618      	mov	r0, r3
 800a602:	3710      	adds	r7, #16
 800a604:	46bd      	mov	sp, r7
 800a606:	bd80      	pop	{r7, pc}

0800a608 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b082      	sub	sp, #8
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	4603      	mov	r3, r0
 800a610:	603a      	str	r2, [r7, #0]
 800a612:	71fb      	strb	r3, [r7, #7]
 800a614:	460b      	mov	r3, r1
 800a616:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a618:	79b9      	ldrb	r1, [r7, #6]
 800a61a:	79fb      	ldrb	r3, [r7, #7]
 800a61c:	683a      	ldr	r2, [r7, #0]
 800a61e:	4618      	mov	r0, r3
 800a620:	f7f6 fba0 	bl	8000d64 <SD_disk_ioctl>
 800a624:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800a626:	4618      	mov	r0, r3
 800a628:	3708      	adds	r7, #8
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b084      	sub	sp, #16
 800a634:	af00      	add	r7, sp, #0
 800a636:	6078      	str	r0, [r7, #4]
 800a638:	460b      	mov	r3, r1
 800a63a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a63c:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a640:	f004 fe16 	bl	800f270 <USBD_static_malloc>
 800a644:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d109      	bne.n	800a660 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	32b0      	adds	r2, #176	@ 0xb0
 800a656:	2100      	movs	r1, #0
 800a658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a65c:	2302      	movs	r3, #2
 800a65e:	e0d4      	b.n	800a80a <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a660:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a664:	2100      	movs	r1, #0
 800a666:	68f8      	ldr	r0, [r7, #12]
 800a668:	f004 ffc2 	bl	800f5f0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	32b0      	adds	r2, #176	@ 0xb0
 800a676:	68f9      	ldr	r1, [r7, #12]
 800a678:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32b0      	adds	r2, #176	@ 0xb0
 800a686:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	7c1b      	ldrb	r3, [r3, #16]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d138      	bne.n	800a70a <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a698:	4b5e      	ldr	r3, [pc, #376]	@ (800a814 <USBD_CDC_Init+0x1e4>)
 800a69a:	7819      	ldrb	r1, [r3, #0]
 800a69c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6a0:	2202      	movs	r2, #2
 800a6a2:	6878      	ldr	r0, [r7, #4]
 800a6a4:	f004 fcc1 	bl	800f02a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a6a8:	4b5a      	ldr	r3, [pc, #360]	@ (800a814 <USBD_CDC_Init+0x1e4>)
 800a6aa:	781b      	ldrb	r3, [r3, #0]
 800a6ac:	f003 020f 	and.w	r2, r3, #15
 800a6b0:	6879      	ldr	r1, [r7, #4]
 800a6b2:	4613      	mov	r3, r2
 800a6b4:	009b      	lsls	r3, r3, #2
 800a6b6:	4413      	add	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	440b      	add	r3, r1
 800a6bc:	3324      	adds	r3, #36	@ 0x24
 800a6be:	2201      	movs	r2, #1
 800a6c0:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a6c2:	4b55      	ldr	r3, [pc, #340]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a6c4:	7819      	ldrb	r1, [r3, #0]
 800a6c6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a6ca:	2202      	movs	r2, #2
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f004 fcac 	bl	800f02a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a6d2:	4b51      	ldr	r3, [pc, #324]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a6d4:	781b      	ldrb	r3, [r3, #0]
 800a6d6:	f003 020f 	and.w	r2, r3, #15
 800a6da:	6879      	ldr	r1, [r7, #4]
 800a6dc:	4613      	mov	r3, r2
 800a6de:	009b      	lsls	r3, r3, #2
 800a6e0:	4413      	add	r3, r2
 800a6e2:	009b      	lsls	r3, r3, #2
 800a6e4:	440b      	add	r3, r1
 800a6e6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a6ee:	4b4b      	ldr	r3, [pc, #300]	@ (800a81c <USBD_CDC_Init+0x1ec>)
 800a6f0:	781b      	ldrb	r3, [r3, #0]
 800a6f2:	f003 020f 	and.w	r2, r3, #15
 800a6f6:	6879      	ldr	r1, [r7, #4]
 800a6f8:	4613      	mov	r3, r2
 800a6fa:	009b      	lsls	r3, r3, #2
 800a6fc:	4413      	add	r3, r2
 800a6fe:	009b      	lsls	r3, r3, #2
 800a700:	440b      	add	r3, r1
 800a702:	3326      	adds	r3, #38	@ 0x26
 800a704:	2210      	movs	r2, #16
 800a706:	801a      	strh	r2, [r3, #0]
 800a708:	e035      	b.n	800a776 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a70a:	4b42      	ldr	r3, [pc, #264]	@ (800a814 <USBD_CDC_Init+0x1e4>)
 800a70c:	7819      	ldrb	r1, [r3, #0]
 800a70e:	2340      	movs	r3, #64	@ 0x40
 800a710:	2202      	movs	r2, #2
 800a712:	6878      	ldr	r0, [r7, #4]
 800a714:	f004 fc89 	bl	800f02a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a718:	4b3e      	ldr	r3, [pc, #248]	@ (800a814 <USBD_CDC_Init+0x1e4>)
 800a71a:	781b      	ldrb	r3, [r3, #0]
 800a71c:	f003 020f 	and.w	r2, r3, #15
 800a720:	6879      	ldr	r1, [r7, #4]
 800a722:	4613      	mov	r3, r2
 800a724:	009b      	lsls	r3, r3, #2
 800a726:	4413      	add	r3, r2
 800a728:	009b      	lsls	r3, r3, #2
 800a72a:	440b      	add	r3, r1
 800a72c:	3324      	adds	r3, #36	@ 0x24
 800a72e:	2201      	movs	r2, #1
 800a730:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a732:	4b39      	ldr	r3, [pc, #228]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a734:	7819      	ldrb	r1, [r3, #0]
 800a736:	2340      	movs	r3, #64	@ 0x40
 800a738:	2202      	movs	r2, #2
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	f004 fc75 	bl	800f02a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a740:	4b35      	ldr	r3, [pc, #212]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	f003 020f 	and.w	r2, r3, #15
 800a748:	6879      	ldr	r1, [r7, #4]
 800a74a:	4613      	mov	r3, r2
 800a74c:	009b      	lsls	r3, r3, #2
 800a74e:	4413      	add	r3, r2
 800a750:	009b      	lsls	r3, r3, #2
 800a752:	440b      	add	r3, r1
 800a754:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a758:	2201      	movs	r2, #1
 800a75a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a75c:	4b2f      	ldr	r3, [pc, #188]	@ (800a81c <USBD_CDC_Init+0x1ec>)
 800a75e:	781b      	ldrb	r3, [r3, #0]
 800a760:	f003 020f 	and.w	r2, r3, #15
 800a764:	6879      	ldr	r1, [r7, #4]
 800a766:	4613      	mov	r3, r2
 800a768:	009b      	lsls	r3, r3, #2
 800a76a:	4413      	add	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	440b      	add	r3, r1
 800a770:	3326      	adds	r3, #38	@ 0x26
 800a772:	2210      	movs	r2, #16
 800a774:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a776:	4b29      	ldr	r3, [pc, #164]	@ (800a81c <USBD_CDC_Init+0x1ec>)
 800a778:	7819      	ldrb	r1, [r3, #0]
 800a77a:	2308      	movs	r3, #8
 800a77c:	2203      	movs	r2, #3
 800a77e:	6878      	ldr	r0, [r7, #4]
 800a780:	f004 fc53 	bl	800f02a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a784:	4b25      	ldr	r3, [pc, #148]	@ (800a81c <USBD_CDC_Init+0x1ec>)
 800a786:	781b      	ldrb	r3, [r3, #0]
 800a788:	f003 020f 	and.w	r2, r3, #15
 800a78c:	6879      	ldr	r1, [r7, #4]
 800a78e:	4613      	mov	r3, r2
 800a790:	009b      	lsls	r3, r3, #2
 800a792:	4413      	add	r3, r2
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	440b      	add	r3, r1
 800a798:	3324      	adds	r3, #36	@ 0x24
 800a79a:	2201      	movs	r2, #1
 800a79c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7ac:	687a      	ldr	r2, [r7, #4]
 800a7ae:	33b0      	adds	r3, #176	@ 0xb0
 800a7b0:	009b      	lsls	r3, r3, #2
 800a7b2:	4413      	add	r3, r2
 800a7b4:	685b      	ldr	r3, [r3, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	2200      	movs	r2, #0
 800a7be:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a7ca:	68fb      	ldr	r3, [r7, #12]
 800a7cc:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d101      	bne.n	800a7d8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a7d4:	2302      	movs	r3, #2
 800a7d6:	e018      	b.n	800a80a <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	7c1b      	ldrb	r3, [r3, #16]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d10a      	bne.n	800a7f6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7e0:	4b0d      	ldr	r3, [pc, #52]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a7e2:	7819      	ldrb	r1, [r3, #0]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a7ea:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a7ee:	6878      	ldr	r0, [r7, #4]
 800a7f0:	f004 fd0a 	bl	800f208 <USBD_LL_PrepareReceive>
 800a7f4:	e008      	b.n	800a808 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a7f6:	4b08      	ldr	r3, [pc, #32]	@ (800a818 <USBD_CDC_Init+0x1e8>)
 800a7f8:	7819      	ldrb	r1, [r3, #0]
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a800:	2340      	movs	r3, #64	@ 0x40
 800a802:	6878      	ldr	r0, [r7, #4]
 800a804:	f004 fd00 	bl	800f208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a808:	2300      	movs	r3, #0
}
 800a80a:	4618      	mov	r0, r3
 800a80c:	3710      	adds	r7, #16
 800a80e:	46bd      	mov	sp, r7
 800a810:	bd80      	pop	{r7, pc}
 800a812:	bf00      	nop
 800a814:	200000cb 	.word	0x200000cb
 800a818:	200000cc 	.word	0x200000cc
 800a81c:	200000cd 	.word	0x200000cd

0800a820 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b082      	sub	sp, #8
 800a824:	af00      	add	r7, sp, #0
 800a826:	6078      	str	r0, [r7, #4]
 800a828:	460b      	mov	r3, r1
 800a82a:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a82c:	4b3a      	ldr	r3, [pc, #232]	@ (800a918 <USBD_CDC_DeInit+0xf8>)
 800a82e:	781b      	ldrb	r3, [r3, #0]
 800a830:	4619      	mov	r1, r3
 800a832:	6878      	ldr	r0, [r7, #4]
 800a834:	f004 fc1f 	bl	800f076 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a838:	4b37      	ldr	r3, [pc, #220]	@ (800a918 <USBD_CDC_DeInit+0xf8>)
 800a83a:	781b      	ldrb	r3, [r3, #0]
 800a83c:	f003 020f 	and.w	r2, r3, #15
 800a840:	6879      	ldr	r1, [r7, #4]
 800a842:	4613      	mov	r3, r2
 800a844:	009b      	lsls	r3, r3, #2
 800a846:	4413      	add	r3, r2
 800a848:	009b      	lsls	r3, r3, #2
 800a84a:	440b      	add	r3, r1
 800a84c:	3324      	adds	r3, #36	@ 0x24
 800a84e:	2200      	movs	r2, #0
 800a850:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a852:	4b32      	ldr	r3, [pc, #200]	@ (800a91c <USBD_CDC_DeInit+0xfc>)
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	4619      	mov	r1, r3
 800a858:	6878      	ldr	r0, [r7, #4]
 800a85a:	f004 fc0c 	bl	800f076 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a85e:	4b2f      	ldr	r3, [pc, #188]	@ (800a91c <USBD_CDC_DeInit+0xfc>)
 800a860:	781b      	ldrb	r3, [r3, #0]
 800a862:	f003 020f 	and.w	r2, r3, #15
 800a866:	6879      	ldr	r1, [r7, #4]
 800a868:	4613      	mov	r3, r2
 800a86a:	009b      	lsls	r3, r3, #2
 800a86c:	4413      	add	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	440b      	add	r3, r1
 800a872:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a876:	2200      	movs	r2, #0
 800a878:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a87a:	4b29      	ldr	r3, [pc, #164]	@ (800a920 <USBD_CDC_DeInit+0x100>)
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	4619      	mov	r1, r3
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f004 fbf8 	bl	800f076 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a886:	4b26      	ldr	r3, [pc, #152]	@ (800a920 <USBD_CDC_DeInit+0x100>)
 800a888:	781b      	ldrb	r3, [r3, #0]
 800a88a:	f003 020f 	and.w	r2, r3, #15
 800a88e:	6879      	ldr	r1, [r7, #4]
 800a890:	4613      	mov	r3, r2
 800a892:	009b      	lsls	r3, r3, #2
 800a894:	4413      	add	r3, r2
 800a896:	009b      	lsls	r3, r3, #2
 800a898:	440b      	add	r3, r1
 800a89a:	3324      	adds	r3, #36	@ 0x24
 800a89c:	2200      	movs	r2, #0
 800a89e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a8a0:	4b1f      	ldr	r3, [pc, #124]	@ (800a920 <USBD_CDC_DeInit+0x100>)
 800a8a2:	781b      	ldrb	r3, [r3, #0]
 800a8a4:	f003 020f 	and.w	r2, r3, #15
 800a8a8:	6879      	ldr	r1, [r7, #4]
 800a8aa:	4613      	mov	r3, r2
 800a8ac:	009b      	lsls	r3, r3, #2
 800a8ae:	4413      	add	r3, r2
 800a8b0:	009b      	lsls	r3, r3, #2
 800a8b2:	440b      	add	r3, r1
 800a8b4:	3326      	adds	r3, #38	@ 0x26
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	32b0      	adds	r2, #176	@ 0xb0
 800a8c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8c8:	2b00      	cmp	r3, #0
 800a8ca:	d01f      	beq.n	800a90c <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8d2:	687a      	ldr	r2, [r7, #4]
 800a8d4:	33b0      	adds	r3, #176	@ 0xb0
 800a8d6:	009b      	lsls	r3, r3, #2
 800a8d8:	4413      	add	r3, r2
 800a8da:	685b      	ldr	r3, [r3, #4]
 800a8dc:	685b      	ldr	r3, [r3, #4]
 800a8de:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	32b0      	adds	r2, #176	@ 0xb0
 800a8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	f004 fccc 	bl	800f28c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	32b0      	adds	r2, #176	@ 0xb0
 800a8fe:	2100      	movs	r1, #0
 800a900:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	2200      	movs	r2, #0
 800a908:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a90c:	2300      	movs	r3, #0
}
 800a90e:	4618      	mov	r0, r3
 800a910:	3708      	adds	r7, #8
 800a912:	46bd      	mov	sp, r7
 800a914:	bd80      	pop	{r7, pc}
 800a916:	bf00      	nop
 800a918:	200000cb 	.word	0x200000cb
 800a91c:	200000cc 	.word	0x200000cc
 800a920:	200000cd 	.word	0x200000cd

0800a924 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b086      	sub	sp, #24
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	32b0      	adds	r2, #176	@ 0xb0
 800a938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a93e:	2300      	movs	r3, #0
 800a940:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a942:	2300      	movs	r3, #0
 800a944:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a946:	2300      	movs	r3, #0
 800a948:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a94a:	693b      	ldr	r3, [r7, #16]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a950:	2303      	movs	r3, #3
 800a952:	e0bf      	b.n	800aad4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	781b      	ldrb	r3, [r3, #0]
 800a958:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d050      	beq.n	800aa02 <USBD_CDC_Setup+0xde>
 800a960:	2b20      	cmp	r3, #32
 800a962:	f040 80af 	bne.w	800aac4 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a966:	683b      	ldr	r3, [r7, #0]
 800a968:	88db      	ldrh	r3, [r3, #6]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d03a      	beq.n	800a9e4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	781b      	ldrb	r3, [r3, #0]
 800a972:	b25b      	sxtb	r3, r3
 800a974:	2b00      	cmp	r3, #0
 800a976:	da1b      	bge.n	800a9b0 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	33b0      	adds	r3, #176	@ 0xb0
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	4413      	add	r3, r2
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	689b      	ldr	r3, [r3, #8]
 800a98a:	683a      	ldr	r2, [r7, #0]
 800a98c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a98e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a990:	683a      	ldr	r2, [r7, #0]
 800a992:	88d2      	ldrh	r2, [r2, #6]
 800a994:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	88db      	ldrh	r3, [r3, #6]
 800a99a:	2b07      	cmp	r3, #7
 800a99c:	bf28      	it	cs
 800a99e:	2307      	movcs	r3, #7
 800a9a0:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a9a2:	693b      	ldr	r3, [r7, #16]
 800a9a4:	89fa      	ldrh	r2, [r7, #14]
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	6878      	ldr	r0, [r7, #4]
 800a9aa:	f001 fd93 	bl	800c4d4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a9ae:	e090      	b.n	800aad2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a9b0:	683b      	ldr	r3, [r7, #0]
 800a9b2:	785a      	ldrb	r2, [r3, #1]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	88db      	ldrh	r3, [r3, #6]
 800a9be:	2b3f      	cmp	r3, #63	@ 0x3f
 800a9c0:	d803      	bhi.n	800a9ca <USBD_CDC_Setup+0xa6>
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	88db      	ldrh	r3, [r3, #6]
 800a9c6:	b2da      	uxtb	r2, r3
 800a9c8:	e000      	b.n	800a9cc <USBD_CDC_Setup+0xa8>
 800a9ca:	2240      	movs	r2, #64	@ 0x40
 800a9cc:	693b      	ldr	r3, [r7, #16]
 800a9ce:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a9d2:	6939      	ldr	r1, [r7, #16]
 800a9d4:	693b      	ldr	r3, [r7, #16]
 800a9d6:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a9da:	461a      	mov	r2, r3
 800a9dc:	6878      	ldr	r0, [r7, #4]
 800a9de:	f001 fda5 	bl	800c52c <USBD_CtlPrepareRx>
      break;
 800a9e2:	e076      	b.n	800aad2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a9ea:	687a      	ldr	r2, [r7, #4]
 800a9ec:	33b0      	adds	r3, #176	@ 0xb0
 800a9ee:	009b      	lsls	r3, r3, #2
 800a9f0:	4413      	add	r3, r2
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	683a      	ldr	r2, [r7, #0]
 800a9f8:	7850      	ldrb	r0, [r2, #1]
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	4798      	blx	r3
      break;
 800aa00:	e067      	b.n	800aad2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aa02:	683b      	ldr	r3, [r7, #0]
 800aa04:	785b      	ldrb	r3, [r3, #1]
 800aa06:	2b0b      	cmp	r3, #11
 800aa08:	d851      	bhi.n	800aaae <USBD_CDC_Setup+0x18a>
 800aa0a:	a201      	add	r2, pc, #4	@ (adr r2, 800aa10 <USBD_CDC_Setup+0xec>)
 800aa0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa10:	0800aa41 	.word	0x0800aa41
 800aa14:	0800aabd 	.word	0x0800aabd
 800aa18:	0800aaaf 	.word	0x0800aaaf
 800aa1c:	0800aaaf 	.word	0x0800aaaf
 800aa20:	0800aaaf 	.word	0x0800aaaf
 800aa24:	0800aaaf 	.word	0x0800aaaf
 800aa28:	0800aaaf 	.word	0x0800aaaf
 800aa2c:	0800aaaf 	.word	0x0800aaaf
 800aa30:	0800aaaf 	.word	0x0800aaaf
 800aa34:	0800aaaf 	.word	0x0800aaaf
 800aa38:	0800aa6b 	.word	0x0800aa6b
 800aa3c:	0800aa95 	.word	0x0800aa95
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa46:	b2db      	uxtb	r3, r3
 800aa48:	2b03      	cmp	r3, #3
 800aa4a:	d107      	bne.n	800aa5c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800aa4c:	f107 030a 	add.w	r3, r7, #10
 800aa50:	2202      	movs	r2, #2
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f001 fd3d 	bl	800c4d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa5a:	e032      	b.n	800aac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa5c:	6839      	ldr	r1, [r7, #0]
 800aa5e:	6878      	ldr	r0, [r7, #4]
 800aa60:	f001 fcbb 	bl	800c3da <USBD_CtlError>
            ret = USBD_FAIL;
 800aa64:	2303      	movs	r3, #3
 800aa66:	75fb      	strb	r3, [r7, #23]
          break;
 800aa68:	e02b      	b.n	800aac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa70:	b2db      	uxtb	r3, r3
 800aa72:	2b03      	cmp	r3, #3
 800aa74:	d107      	bne.n	800aa86 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800aa76:	f107 030d 	add.w	r3, r7, #13
 800aa7a:	2201      	movs	r2, #1
 800aa7c:	4619      	mov	r1, r3
 800aa7e:	6878      	ldr	r0, [r7, #4]
 800aa80:	f001 fd28 	bl	800c4d4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800aa84:	e01d      	b.n	800aac2 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800aa86:	6839      	ldr	r1, [r7, #0]
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	f001 fca6 	bl	800c3da <USBD_CtlError>
            ret = USBD_FAIL;
 800aa8e:	2303      	movs	r3, #3
 800aa90:	75fb      	strb	r3, [r7, #23]
          break;
 800aa92:	e016      	b.n	800aac2 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	2b03      	cmp	r3, #3
 800aa9e:	d00f      	beq.n	800aac0 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800aaa0:	6839      	ldr	r1, [r7, #0]
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f001 fc99 	bl	800c3da <USBD_CtlError>
            ret = USBD_FAIL;
 800aaa8:	2303      	movs	r3, #3
 800aaaa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aaac:	e008      	b.n	800aac0 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aaae:	6839      	ldr	r1, [r7, #0]
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f001 fc92 	bl	800c3da <USBD_CtlError>
          ret = USBD_FAIL;
 800aab6:	2303      	movs	r3, #3
 800aab8:	75fb      	strb	r3, [r7, #23]
          break;
 800aaba:	e002      	b.n	800aac2 <USBD_CDC_Setup+0x19e>
          break;
 800aabc:	bf00      	nop
 800aabe:	e008      	b.n	800aad2 <USBD_CDC_Setup+0x1ae>
          break;
 800aac0:	bf00      	nop
      }
      break;
 800aac2:	e006      	b.n	800aad2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aac4:	6839      	ldr	r1, [r7, #0]
 800aac6:	6878      	ldr	r0, [r7, #4]
 800aac8:	f001 fc87 	bl	800c3da <USBD_CtlError>
      ret = USBD_FAIL;
 800aacc:	2303      	movs	r3, #3
 800aace:	75fb      	strb	r3, [r7, #23]
      break;
 800aad0:	bf00      	nop
  }

  return (uint8_t)ret;
 800aad2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	460b      	mov	r3, r1
 800aae6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aaee:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	32b0      	adds	r2, #176	@ 0xb0
 800aafa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d101      	bne.n	800ab06 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800ab02:	2303      	movs	r3, #3
 800ab04:	e065      	b.n	800abd2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	32b0      	adds	r2, #176	@ 0xb0
 800ab10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab14:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab16:	78fb      	ldrb	r3, [r7, #3]
 800ab18:	f003 020f 	and.w	r2, r3, #15
 800ab1c:	6879      	ldr	r1, [r7, #4]
 800ab1e:	4613      	mov	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	4413      	add	r3, r2
 800ab24:	009b      	lsls	r3, r3, #2
 800ab26:	440b      	add	r3, r1
 800ab28:	3318      	adds	r3, #24
 800ab2a:	681b      	ldr	r3, [r3, #0]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d02f      	beq.n	800ab90 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800ab30:	78fb      	ldrb	r3, [r7, #3]
 800ab32:	f003 020f 	and.w	r2, r3, #15
 800ab36:	6879      	ldr	r1, [r7, #4]
 800ab38:	4613      	mov	r3, r2
 800ab3a:	009b      	lsls	r3, r3, #2
 800ab3c:	4413      	add	r3, r2
 800ab3e:	009b      	lsls	r3, r3, #2
 800ab40:	440b      	add	r3, r1
 800ab42:	3318      	adds	r3, #24
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	78fb      	ldrb	r3, [r7, #3]
 800ab48:	f003 010f 	and.w	r1, r3, #15
 800ab4c:	68f8      	ldr	r0, [r7, #12]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	00db      	lsls	r3, r3, #3
 800ab52:	440b      	add	r3, r1
 800ab54:	009b      	lsls	r3, r3, #2
 800ab56:	4403      	add	r3, r0
 800ab58:	331c      	adds	r3, #28
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	fbb2 f1f3 	udiv	r1, r2, r3
 800ab60:	fb01 f303 	mul.w	r3, r1, r3
 800ab64:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d112      	bne.n	800ab90 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800ab6a:	78fb      	ldrb	r3, [r7, #3]
 800ab6c:	f003 020f 	and.w	r2, r3, #15
 800ab70:	6879      	ldr	r1, [r7, #4]
 800ab72:	4613      	mov	r3, r2
 800ab74:	009b      	lsls	r3, r3, #2
 800ab76:	4413      	add	r3, r2
 800ab78:	009b      	lsls	r3, r3, #2
 800ab7a:	440b      	add	r3, r1
 800ab7c:	3318      	adds	r3, #24
 800ab7e:	2200      	movs	r2, #0
 800ab80:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800ab82:	78f9      	ldrb	r1, [r7, #3]
 800ab84:	2300      	movs	r3, #0
 800ab86:	2200      	movs	r2, #0
 800ab88:	6878      	ldr	r0, [r7, #4]
 800ab8a:	f004 fb1c 	bl	800f1c6 <USBD_LL_Transmit>
 800ab8e:	e01f      	b.n	800abd0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800ab90:	68bb      	ldr	r3, [r7, #8]
 800ab92:	2200      	movs	r2, #0
 800ab94:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	33b0      	adds	r3, #176	@ 0xb0
 800aba2:	009b      	lsls	r3, r3, #2
 800aba4:	4413      	add	r3, r2
 800aba6:	685b      	ldr	r3, [r3, #4]
 800aba8:	691b      	ldr	r3, [r3, #16]
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d010      	beq.n	800abd0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abb4:	687a      	ldr	r2, [r7, #4]
 800abb6:	33b0      	adds	r3, #176	@ 0xb0
 800abb8:	009b      	lsls	r3, r3, #2
 800abba:	4413      	add	r3, r2
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	691b      	ldr	r3, [r3, #16]
 800abc0:	68ba      	ldr	r2, [r7, #8]
 800abc2:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800abcc:	78fa      	ldrb	r2, [r7, #3]
 800abce:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800abd0:	2300      	movs	r3, #0
}
 800abd2:	4618      	mov	r0, r3
 800abd4:	3710      	adds	r7, #16
 800abd6:	46bd      	mov	sp, r7
 800abd8:	bd80      	pop	{r7, pc}

0800abda <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800abda:	b580      	push	{r7, lr}
 800abdc:	b084      	sub	sp, #16
 800abde:	af00      	add	r7, sp, #0
 800abe0:	6078      	str	r0, [r7, #4]
 800abe2:	460b      	mov	r3, r1
 800abe4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	32b0      	adds	r2, #176	@ 0xb0
 800abf0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800abf4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	32b0      	adds	r2, #176	@ 0xb0
 800ac00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d101      	bne.n	800ac0c <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ac08:	2303      	movs	r3, #3
 800ac0a:	e01a      	b.n	800ac42 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	4619      	mov	r1, r3
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f004 fb1a 	bl	800f24a <USBD_LL_GetRxDataSize>
 800ac16:	4602      	mov	r2, r0
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac24:	687a      	ldr	r2, [r7, #4]
 800ac26:	33b0      	adds	r3, #176	@ 0xb0
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	4413      	add	r3, r2
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	68fa      	ldr	r2, [r7, #12]
 800ac32:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ac36:	68fa      	ldr	r2, [r7, #12]
 800ac38:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ac3c:	4611      	mov	r1, r2
 800ac3e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b084      	sub	sp, #16
 800ac4e:	af00      	add	r7, sp, #0
 800ac50:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	32b0      	adds	r2, #176	@ 0xb0
 800ac5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac60:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d101      	bne.n	800ac6c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ac68:	2303      	movs	r3, #3
 800ac6a:	e024      	b.n	800acb6 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac72:	687a      	ldr	r2, [r7, #4]
 800ac74:	33b0      	adds	r3, #176	@ 0xb0
 800ac76:	009b      	lsls	r3, r3, #2
 800ac78:	4413      	add	r3, r2
 800ac7a:	685b      	ldr	r3, [r3, #4]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d019      	beq.n	800acb4 <USBD_CDC_EP0_RxReady+0x6a>
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800ac86:	2bff      	cmp	r3, #255	@ 0xff
 800ac88:	d014      	beq.n	800acb4 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ac90:	687a      	ldr	r2, [r7, #4]
 800ac92:	33b0      	adds	r3, #176	@ 0xb0
 800ac94:	009b      	lsls	r3, r3, #2
 800ac96:	4413      	add	r3, r2
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	689b      	ldr	r3, [r3, #8]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800aca2:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800aca4:	68fa      	ldr	r2, [r7, #12]
 800aca6:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800acaa:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	22ff      	movs	r2, #255	@ 0xff
 800acb0:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800acb4:	2300      	movs	r3, #0
}
 800acb6:	4618      	mov	r0, r3
 800acb8:	3710      	adds	r7, #16
 800acba:	46bd      	mov	sp, r7
 800acbc:	bd80      	pop	{r7, pc}
	...

0800acc0 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800acc0:	b580      	push	{r7, lr}
 800acc2:	b086      	sub	sp, #24
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acc8:	2182      	movs	r1, #130	@ 0x82
 800acca:	4818      	ldr	r0, [pc, #96]	@ (800ad2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800accc:	f000 fd4f 	bl	800b76e <USBD_GetEpDesc>
 800acd0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acd2:	2101      	movs	r1, #1
 800acd4:	4815      	ldr	r0, [pc, #84]	@ (800ad2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800acd6:	f000 fd4a 	bl	800b76e <USBD_GetEpDesc>
 800acda:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800acdc:	2181      	movs	r1, #129	@ 0x81
 800acde:	4813      	ldr	r0, [pc, #76]	@ (800ad2c <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ace0:	f000 fd45 	bl	800b76e <USBD_GetEpDesc>
 800ace4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ace6:	697b      	ldr	r3, [r7, #20]
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d002      	beq.n	800acf2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acec:	697b      	ldr	r3, [r7, #20]
 800acee:	2210      	movs	r2, #16
 800acf0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acf2:	693b      	ldr	r3, [r7, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d006      	beq.n	800ad06 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800acf8:	693b      	ldr	r3, [r7, #16]
 800acfa:	2200      	movs	r2, #0
 800acfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad00:	711a      	strb	r2, [r3, #4]
 800ad02:	2200      	movs	r2, #0
 800ad04:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	2b00      	cmp	r3, #0
 800ad0a:	d006      	beq.n	800ad1a <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad14:	711a      	strb	r2, [r3, #4]
 800ad16:	2200      	movs	r2, #0
 800ad18:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2243      	movs	r2, #67	@ 0x43
 800ad1e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad20:	4b02      	ldr	r3, [pc, #8]	@ (800ad2c <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3718      	adds	r7, #24
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	20000088 	.word	0x20000088

0800ad30 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b086      	sub	sp, #24
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ad38:	2182      	movs	r1, #130	@ 0x82
 800ad3a:	4818      	ldr	r0, [pc, #96]	@ (800ad9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad3c:	f000 fd17 	bl	800b76e <USBD_GetEpDesc>
 800ad40:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ad42:	2101      	movs	r1, #1
 800ad44:	4815      	ldr	r0, [pc, #84]	@ (800ad9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad46:	f000 fd12 	bl	800b76e <USBD_GetEpDesc>
 800ad4a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ad4c:	2181      	movs	r1, #129	@ 0x81
 800ad4e:	4813      	ldr	r0, [pc, #76]	@ (800ad9c <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ad50:	f000 fd0d 	bl	800b76e <USBD_GetEpDesc>
 800ad54:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ad56:	697b      	ldr	r3, [r7, #20]
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d002      	beq.n	800ad62 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ad5c:	697b      	ldr	r3, [r7, #20]
 800ad5e:	2210      	movs	r2, #16
 800ad60:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ad62:	693b      	ldr	r3, [r7, #16]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d006      	beq.n	800ad76 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad68:	693b      	ldr	r3, [r7, #16]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	711a      	strb	r2, [r3, #4]
 800ad6e:	2200      	movs	r2, #0
 800ad70:	f042 0202 	orr.w	r2, r2, #2
 800ad74:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad76:	68fb      	ldr	r3, [r7, #12]
 800ad78:	2b00      	cmp	r3, #0
 800ad7a:	d006      	beq.n	800ad8a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ad7c:	68fb      	ldr	r3, [r7, #12]
 800ad7e:	2200      	movs	r2, #0
 800ad80:	711a      	strb	r2, [r3, #4]
 800ad82:	2200      	movs	r2, #0
 800ad84:	f042 0202 	orr.w	r2, r2, #2
 800ad88:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	2243      	movs	r2, #67	@ 0x43
 800ad8e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad90:	4b02      	ldr	r3, [pc, #8]	@ (800ad9c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3718      	adds	r7, #24
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bd80      	pop	{r7, pc}
 800ad9a:	bf00      	nop
 800ad9c:	20000088 	.word	0x20000088

0800ada0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800ada0:	b580      	push	{r7, lr}
 800ada2:	b086      	sub	sp, #24
 800ada4:	af00      	add	r7, sp, #0
 800ada6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ada8:	2182      	movs	r1, #130	@ 0x82
 800adaa:	4818      	ldr	r0, [pc, #96]	@ (800ae0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adac:	f000 fcdf 	bl	800b76e <USBD_GetEpDesc>
 800adb0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800adb2:	2101      	movs	r1, #1
 800adb4:	4815      	ldr	r0, [pc, #84]	@ (800ae0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adb6:	f000 fcda 	bl	800b76e <USBD_GetEpDesc>
 800adba:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800adbc:	2181      	movs	r1, #129	@ 0x81
 800adbe:	4813      	ldr	r0, [pc, #76]	@ (800ae0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800adc0:	f000 fcd5 	bl	800b76e <USBD_GetEpDesc>
 800adc4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800adc6:	697b      	ldr	r3, [r7, #20]
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d002      	beq.n	800add2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800adcc:	697b      	ldr	r3, [r7, #20]
 800adce:	2210      	movs	r2, #16
 800add0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800add2:	693b      	ldr	r3, [r7, #16]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d006      	beq.n	800ade6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800add8:	693b      	ldr	r3, [r7, #16]
 800adda:	2200      	movs	r2, #0
 800addc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ade0:	711a      	strb	r2, [r3, #4]
 800ade2:	2200      	movs	r2, #0
 800ade4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ade6:	68fb      	ldr	r3, [r7, #12]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d006      	beq.n	800adfa <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	2200      	movs	r2, #0
 800adf0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800adf4:	711a      	strb	r2, [r3, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2243      	movs	r2, #67	@ 0x43
 800adfe:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ae00:	4b02      	ldr	r3, [pc, #8]	@ (800ae0c <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3718      	adds	r7, #24
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	20000088 	.word	0x20000088

0800ae10 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ae10:	b480      	push	{r7}
 800ae12:	b083      	sub	sp, #12
 800ae14:	af00      	add	r7, sp, #0
 800ae16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	220a      	movs	r2, #10
 800ae1c:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ae1e:	4b03      	ldr	r3, [pc, #12]	@ (800ae2c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ae20:	4618      	mov	r0, r3
 800ae22:	370c      	adds	r7, #12
 800ae24:	46bd      	mov	sp, r7
 800ae26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2a:	4770      	bx	lr
 800ae2c:	20000044 	.word	0x20000044

0800ae30 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b083      	sub	sp, #12
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ae3a:	683b      	ldr	r3, [r7, #0]
 800ae3c:	2b00      	cmp	r3, #0
 800ae3e:	d101      	bne.n	800ae44 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ae40:	2303      	movs	r3, #3
 800ae42:	e009      	b.n	800ae58 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae4a:	687a      	ldr	r2, [r7, #4]
 800ae4c:	33b0      	adds	r3, #176	@ 0xb0
 800ae4e:	009b      	lsls	r3, r3, #2
 800ae50:	4413      	add	r3, r2
 800ae52:	683a      	ldr	r2, [r7, #0]
 800ae54:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ae56:	2300      	movs	r3, #0
}
 800ae58:	4618      	mov	r0, r3
 800ae5a:	370c      	adds	r7, #12
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr

0800ae64 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ae64:	b480      	push	{r7}
 800ae66:	b087      	sub	sp, #28
 800ae68:	af00      	add	r7, sp, #0
 800ae6a:	60f8      	str	r0, [r7, #12]
 800ae6c:	60b9      	str	r1, [r7, #8]
 800ae6e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	32b0      	adds	r2, #176	@ 0xb0
 800ae7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae7e:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae80:	697b      	ldr	r3, [r7, #20]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d101      	bne.n	800ae8a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	e008      	b.n	800ae9c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	68ba      	ldr	r2, [r7, #8]
 800ae8e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800ae92:	697b      	ldr	r3, [r7, #20]
 800ae94:	687a      	ldr	r2, [r7, #4]
 800ae96:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	371c      	adds	r7, #28
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr

0800aea8 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800aea8:	b480      	push	{r7}
 800aeaa:	b085      	sub	sp, #20
 800aeac:	af00      	add	r7, sp, #0
 800aeae:	6078      	str	r0, [r7, #4]
 800aeb0:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	32b0      	adds	r2, #176	@ 0xb0
 800aebc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec0:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	2b00      	cmp	r3, #0
 800aec6:	d101      	bne.n	800aecc <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800aec8:	2303      	movs	r3, #3
 800aeca:	e004      	b.n	800aed6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	683a      	ldr	r2, [r7, #0]
 800aed0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800aed4:	2300      	movs	r3, #0
}
 800aed6:	4618      	mov	r0, r3
 800aed8:	3714      	adds	r7, #20
 800aeda:	46bd      	mov	sp, r7
 800aedc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee0:	4770      	bx	lr
	...

0800aee4 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	32b0      	adds	r2, #176	@ 0xb0
 800aef6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aefa:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800aefc:	2301      	movs	r3, #1
 800aefe:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d101      	bne.n	800af0a <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800af06:	2303      	movs	r3, #3
 800af08:	e025      	b.n	800af56 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800af0a:	68bb      	ldr	r3, [r7, #8]
 800af0c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800af10:	2b00      	cmp	r3, #0
 800af12:	d11f      	bne.n	800af54 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800af14:	68bb      	ldr	r3, [r7, #8]
 800af16:	2201      	movs	r2, #1
 800af18:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800af1c:	4b10      	ldr	r3, [pc, #64]	@ (800af60 <USBD_CDC_TransmitPacket+0x7c>)
 800af1e:	781b      	ldrb	r3, [r3, #0]
 800af20:	f003 020f 	and.w	r2, r3, #15
 800af24:	68bb      	ldr	r3, [r7, #8]
 800af26:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800af2a:	6878      	ldr	r0, [r7, #4]
 800af2c:	4613      	mov	r3, r2
 800af2e:	009b      	lsls	r3, r3, #2
 800af30:	4413      	add	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4403      	add	r3, r0
 800af36:	3318      	adds	r3, #24
 800af38:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800af3a:	4b09      	ldr	r3, [pc, #36]	@ (800af60 <USBD_CDC_TransmitPacket+0x7c>)
 800af3c:	7819      	ldrb	r1, [r3, #0]
 800af3e:	68bb      	ldr	r3, [r7, #8]
 800af40:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800af44:	68bb      	ldr	r3, [r7, #8]
 800af46:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800af4a:	6878      	ldr	r0, [r7, #4]
 800af4c:	f004 f93b 	bl	800f1c6 <USBD_LL_Transmit>

    ret = USBD_OK;
 800af50:	2300      	movs	r3, #0
 800af52:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800af54:	7bfb      	ldrb	r3, [r7, #15]
}
 800af56:	4618      	mov	r0, r3
 800af58:	3710      	adds	r7, #16
 800af5a:	46bd      	mov	sp, r7
 800af5c:	bd80      	pop	{r7, pc}
 800af5e:	bf00      	nop
 800af60:	200000cb 	.word	0x200000cb

0800af64 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800af64:	b580      	push	{r7, lr}
 800af66:	b084      	sub	sp, #16
 800af68:	af00      	add	r7, sp, #0
 800af6a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	32b0      	adds	r2, #176	@ 0xb0
 800af76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af7a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	32b0      	adds	r2, #176	@ 0xb0
 800af86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d101      	bne.n	800af92 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800af8e:	2303      	movs	r3, #3
 800af90:	e018      	b.n	800afc4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	7c1b      	ldrb	r3, [r3, #16]
 800af96:	2b00      	cmp	r3, #0
 800af98:	d10a      	bne.n	800afb0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800af9a:	4b0c      	ldr	r3, [pc, #48]	@ (800afcc <USBD_CDC_ReceivePacket+0x68>)
 800af9c:	7819      	ldrb	r1, [r3, #0]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afa4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f004 f92d 	bl	800f208 <USBD_LL_PrepareReceive>
 800afae:	e008      	b.n	800afc2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800afb0:	4b06      	ldr	r3, [pc, #24]	@ (800afcc <USBD_CDC_ReceivePacket+0x68>)
 800afb2:	7819      	ldrb	r1, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800afba:	2340      	movs	r3, #64	@ 0x40
 800afbc:	6878      	ldr	r0, [r7, #4]
 800afbe:	f004 f923 	bl	800f208 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800afc2:	2300      	movs	r3, #0
}
 800afc4:	4618      	mov	r0, r3
 800afc6:	3710      	adds	r7, #16
 800afc8:	46bd      	mov	sp, r7
 800afca:	bd80      	pop	{r7, pc}
 800afcc:	200000cc 	.word	0x200000cc

0800afd0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800afd0:	b580      	push	{r7, lr}
 800afd2:	b086      	sub	sp, #24
 800afd4:	af00      	add	r7, sp, #0
 800afd6:	60f8      	str	r0, [r7, #12]
 800afd8:	60b9      	str	r1, [r7, #8]
 800afda:	4613      	mov	r3, r2
 800afdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800afde:	68fb      	ldr	r3, [r7, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800afe4:	2303      	movs	r3, #3
 800afe6:	e01f      	b.n	800b028 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800afe8:	68fb      	ldr	r3, [r7, #12]
 800afea:	2200      	movs	r2, #0
 800afec:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	2200      	movs	r2, #0
 800aff4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aff8:	68fb      	ldr	r3, [r7, #12]
 800affa:	2200      	movs	r2, #0
 800affc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b000:	68bb      	ldr	r3, [r7, #8]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d003      	beq.n	800b00e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	68ba      	ldr	r2, [r7, #8]
 800b00a:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2201      	movs	r2, #1
 800b012:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b016:	68fb      	ldr	r3, [r7, #12]
 800b018:	79fa      	ldrb	r2, [r7, #7]
 800b01a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b01c:	68f8      	ldr	r0, [r7, #12]
 800b01e:	f003 ff9d 	bl	800ef5c <USBD_LL_Init>
 800b022:	4603      	mov	r3, r0
 800b024:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b026:	7dfb      	ldrb	r3, [r7, #23]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}

0800b030 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b030:	b580      	push	{r7, lr}
 800b032:	b084      	sub	sp, #16
 800b034:	af00      	add	r7, sp, #0
 800b036:	6078      	str	r0, [r7, #4]
 800b038:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b03a:	2300      	movs	r3, #0
 800b03c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b03e:	683b      	ldr	r3, [r7, #0]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d101      	bne.n	800b048 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b044:	2303      	movs	r3, #3
 800b046:	e025      	b.n	800b094 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	683a      	ldr	r2, [r7, #0]
 800b04c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	32ae      	adds	r2, #174	@ 0xae
 800b05a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b060:	2b00      	cmp	r3, #0
 800b062:	d00f      	beq.n	800b084 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	32ae      	adds	r2, #174	@ 0xae
 800b06e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b072:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b074:	f107 020e 	add.w	r2, r7, #14
 800b078:	4610      	mov	r0, r2
 800b07a:	4798      	blx	r3
 800b07c:	4602      	mov	r2, r0
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b08a:	1c5a      	adds	r2, r3, #1
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3710      	adds	r7, #16
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}

0800b09c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b082      	sub	sp, #8
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b0a4:	6878      	ldr	r0, [r7, #4]
 800b0a6:	f003 ffa5 	bl	800eff4 <USBD_LL_Start>
 800b0aa:	4603      	mov	r3, r0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3708      	adds	r7, #8
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b0bc:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	370c      	adds	r7, #12
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c8:	4770      	bx	lr

0800b0ca <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b0ca:	b580      	push	{r7, lr}
 800b0cc:	b084      	sub	sp, #16
 800b0ce:	af00      	add	r7, sp, #0
 800b0d0:	6078      	str	r0, [r7, #4]
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b0d6:	2300      	movs	r3, #0
 800b0d8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d009      	beq.n	800b0f8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	78fa      	ldrb	r2, [r7, #3]
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	6878      	ldr	r0, [r7, #4]
 800b0f2:	4798      	blx	r3
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b0f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3710      	adds	r7, #16
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}

0800b102 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b102:	b580      	push	{r7, lr}
 800b104:	b084      	sub	sp, #16
 800b106:	af00      	add	r7, sp, #0
 800b108:	6078      	str	r0, [r7, #4]
 800b10a:	460b      	mov	r3, r1
 800b10c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b10e:	2300      	movs	r3, #0
 800b110:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	78fa      	ldrb	r2, [r7, #3]
 800b11c:	4611      	mov	r1, r2
 800b11e:	6878      	ldr	r0, [r7, #4]
 800b120:	4798      	blx	r3
 800b122:	4603      	mov	r3, r0
 800b124:	2b00      	cmp	r3, #0
 800b126:	d001      	beq.n	800b12c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b128:	2303      	movs	r3, #3
 800b12a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b12c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3710      	adds	r7, #16
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}

0800b136 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b136:	b580      	push	{r7, lr}
 800b138:	b084      	sub	sp, #16
 800b13a:	af00      	add	r7, sp, #0
 800b13c:	6078      	str	r0, [r7, #4]
 800b13e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b146:	6839      	ldr	r1, [r7, #0]
 800b148:	4618      	mov	r0, r3
 800b14a:	f001 f90c 	bl	800c366 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b14e:	687b      	ldr	r3, [r7, #4]
 800b150:	2201      	movs	r2, #1
 800b152:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b15c:	461a      	mov	r2, r3
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b16a:	f003 031f 	and.w	r3, r3, #31
 800b16e:	2b02      	cmp	r3, #2
 800b170:	d01a      	beq.n	800b1a8 <USBD_LL_SetupStage+0x72>
 800b172:	2b02      	cmp	r3, #2
 800b174:	d822      	bhi.n	800b1bc <USBD_LL_SetupStage+0x86>
 800b176:	2b00      	cmp	r3, #0
 800b178:	d002      	beq.n	800b180 <USBD_LL_SetupStage+0x4a>
 800b17a:	2b01      	cmp	r3, #1
 800b17c:	d00a      	beq.n	800b194 <USBD_LL_SetupStage+0x5e>
 800b17e:	e01d      	b.n	800b1bc <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b186:	4619      	mov	r1, r3
 800b188:	6878      	ldr	r0, [r7, #4]
 800b18a:	f000 fb63 	bl	800b854 <USBD_StdDevReq>
 800b18e:	4603      	mov	r3, r0
 800b190:	73fb      	strb	r3, [r7, #15]
      break;
 800b192:	e020      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b19a:	4619      	mov	r1, r3
 800b19c:	6878      	ldr	r0, [r7, #4]
 800b19e:	f000 fbcb 	bl	800b938 <USBD_StdItfReq>
 800b1a2:	4603      	mov	r3, r0
 800b1a4:	73fb      	strb	r3, [r7, #15]
      break;
 800b1a6:	e016      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b1ae:	4619      	mov	r1, r3
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fc2d 	bl	800ba10 <USBD_StdEPReq>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b1ba:	e00c      	b.n	800b1d6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b1c2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b1c6:	b2db      	uxtb	r3, r3
 800b1c8:	4619      	mov	r1, r3
 800b1ca:	6878      	ldr	r0, [r7, #4]
 800b1cc:	f003 ff72 	bl	800f0b4 <USBD_LL_StallEP>
 800b1d0:	4603      	mov	r3, r0
 800b1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800b1d4:	bf00      	nop
  }

  return ret;
 800b1d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d8:	4618      	mov	r0, r3
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}

0800b1e0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b1e0:	b580      	push	{r7, lr}
 800b1e2:	b086      	sub	sp, #24
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	60f8      	str	r0, [r7, #12]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	607a      	str	r2, [r7, #4]
 800b1ec:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b1ee:	2300      	movs	r3, #0
 800b1f0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b1f2:	7afb      	ldrb	r3, [r7, #11]
 800b1f4:	2b00      	cmp	r3, #0
 800b1f6:	d16e      	bne.n	800b2d6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b1fe:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b206:	2b03      	cmp	r3, #3
 800b208:	f040 8098 	bne.w	800b33c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	689a      	ldr	r2, [r3, #8]
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	68db      	ldr	r3, [r3, #12]
 800b214:	429a      	cmp	r2, r3
 800b216:	d913      	bls.n	800b240 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b218:	693b      	ldr	r3, [r7, #16]
 800b21a:	689a      	ldr	r2, [r3, #8]
 800b21c:	693b      	ldr	r3, [r7, #16]
 800b21e:	68db      	ldr	r3, [r3, #12]
 800b220:	1ad2      	subs	r2, r2, r3
 800b222:	693b      	ldr	r3, [r7, #16]
 800b224:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b226:	693b      	ldr	r3, [r7, #16]
 800b228:	68da      	ldr	r2, [r3, #12]
 800b22a:	693b      	ldr	r3, [r7, #16]
 800b22c:	689b      	ldr	r3, [r3, #8]
 800b22e:	4293      	cmp	r3, r2
 800b230:	bf28      	it	cs
 800b232:	4613      	movcs	r3, r2
 800b234:	461a      	mov	r2, r3
 800b236:	6879      	ldr	r1, [r7, #4]
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f001 f994 	bl	800c566 <USBD_CtlContinueRx>
 800b23e:	e07d      	b.n	800b33c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b246:	f003 031f 	and.w	r3, r3, #31
 800b24a:	2b02      	cmp	r3, #2
 800b24c:	d014      	beq.n	800b278 <USBD_LL_DataOutStage+0x98>
 800b24e:	2b02      	cmp	r3, #2
 800b250:	d81d      	bhi.n	800b28e <USBD_LL_DataOutStage+0xae>
 800b252:	2b00      	cmp	r3, #0
 800b254:	d002      	beq.n	800b25c <USBD_LL_DataOutStage+0x7c>
 800b256:	2b01      	cmp	r3, #1
 800b258:	d003      	beq.n	800b262 <USBD_LL_DataOutStage+0x82>
 800b25a:	e018      	b.n	800b28e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b25c:	2300      	movs	r3, #0
 800b25e:	75bb      	strb	r3, [r7, #22]
            break;
 800b260:	e018      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b268:	b2db      	uxtb	r3, r3
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f000 fa64 	bl	800b73a <USBD_CoreFindIF>
 800b272:	4603      	mov	r3, r0
 800b274:	75bb      	strb	r3, [r7, #22]
            break;
 800b276:	e00d      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	4619      	mov	r1, r3
 800b282:	68f8      	ldr	r0, [r7, #12]
 800b284:	f000 fa66 	bl	800b754 <USBD_CoreFindEP>
 800b288:	4603      	mov	r3, r0
 800b28a:	75bb      	strb	r3, [r7, #22]
            break;
 800b28c:	e002      	b.n	800b294 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b28e:	2300      	movs	r3, #0
 800b290:	75bb      	strb	r3, [r7, #22]
            break;
 800b292:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b294:	7dbb      	ldrb	r3, [r7, #22]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d119      	bne.n	800b2ce <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2a0:	b2db      	uxtb	r3, r3
 800b2a2:	2b03      	cmp	r3, #3
 800b2a4:	d113      	bne.n	800b2ce <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b2a6:	7dba      	ldrb	r2, [r7, #22]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	32ae      	adds	r2, #174	@ 0xae
 800b2ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b0:	691b      	ldr	r3, [r3, #16]
 800b2b2:	2b00      	cmp	r3, #0
 800b2b4:	d00b      	beq.n	800b2ce <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b2b6:	7dba      	ldrb	r2, [r7, #22]
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b2be:	7dba      	ldrb	r2, [r7, #22]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	32ae      	adds	r2, #174	@ 0xae
 800b2c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2c8:	691b      	ldr	r3, [r3, #16]
 800b2ca:	68f8      	ldr	r0, [r7, #12]
 800b2cc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b2ce:	68f8      	ldr	r0, [r7, #12]
 800b2d0:	f001 f95a 	bl	800c588 <USBD_CtlSendStatus>
 800b2d4:	e032      	b.n	800b33c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b2d6:	7afb      	ldrb	r3, [r7, #11]
 800b2d8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b2dc:	b2db      	uxtb	r3, r3
 800b2de:	4619      	mov	r1, r3
 800b2e0:	68f8      	ldr	r0, [r7, #12]
 800b2e2:	f000 fa37 	bl	800b754 <USBD_CoreFindEP>
 800b2e6:	4603      	mov	r3, r0
 800b2e8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b2ea:	7dbb      	ldrb	r3, [r7, #22]
 800b2ec:	2bff      	cmp	r3, #255	@ 0xff
 800b2ee:	d025      	beq.n	800b33c <USBD_LL_DataOutStage+0x15c>
 800b2f0:	7dbb      	ldrb	r3, [r7, #22]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d122      	bne.n	800b33c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b2fc:	b2db      	uxtb	r3, r3
 800b2fe:	2b03      	cmp	r3, #3
 800b300:	d117      	bne.n	800b332 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b302:	7dba      	ldrb	r2, [r7, #22]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	32ae      	adds	r2, #174	@ 0xae
 800b308:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b30c:	699b      	ldr	r3, [r3, #24]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d00f      	beq.n	800b332 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b312:	7dba      	ldrb	r2, [r7, #22]
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b31a:	7dba      	ldrb	r2, [r7, #22]
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	32ae      	adds	r2, #174	@ 0xae
 800b320:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b324:	699b      	ldr	r3, [r3, #24]
 800b326:	7afa      	ldrb	r2, [r7, #11]
 800b328:	4611      	mov	r1, r2
 800b32a:	68f8      	ldr	r0, [r7, #12]
 800b32c:	4798      	blx	r3
 800b32e:	4603      	mov	r3, r0
 800b330:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b332:	7dfb      	ldrb	r3, [r7, #23]
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b338:	7dfb      	ldrb	r3, [r7, #23]
 800b33a:	e000      	b.n	800b33e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b33c:	2300      	movs	r3, #0
}
 800b33e:	4618      	mov	r0, r3
 800b340:	3718      	adds	r7, #24
 800b342:	46bd      	mov	sp, r7
 800b344:	bd80      	pop	{r7, pc}

0800b346 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b346:	b580      	push	{r7, lr}
 800b348:	b086      	sub	sp, #24
 800b34a:	af00      	add	r7, sp, #0
 800b34c:	60f8      	str	r0, [r7, #12]
 800b34e:	460b      	mov	r3, r1
 800b350:	607a      	str	r2, [r7, #4]
 800b352:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b354:	7afb      	ldrb	r3, [r7, #11]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d16f      	bne.n	800b43a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b35a:	68fb      	ldr	r3, [r7, #12]
 800b35c:	3314      	adds	r3, #20
 800b35e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b366:	2b02      	cmp	r3, #2
 800b368:	d15a      	bne.n	800b420 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	689a      	ldr	r2, [r3, #8]
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	68db      	ldr	r3, [r3, #12]
 800b372:	429a      	cmp	r2, r3
 800b374:	d914      	bls.n	800b3a0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	68db      	ldr	r3, [r3, #12]
 800b37e:	1ad2      	subs	r2, r2, r3
 800b380:	693b      	ldr	r3, [r7, #16]
 800b382:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	689b      	ldr	r3, [r3, #8]
 800b388:	461a      	mov	r2, r3
 800b38a:	6879      	ldr	r1, [r7, #4]
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f001 f8bc 	bl	800c50a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b392:	2300      	movs	r3, #0
 800b394:	2200      	movs	r2, #0
 800b396:	2100      	movs	r1, #0
 800b398:	68f8      	ldr	r0, [r7, #12]
 800b39a:	f003 ff35 	bl	800f208 <USBD_LL_PrepareReceive>
 800b39e:	e03f      	b.n	800b420 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b3a0:	693b      	ldr	r3, [r7, #16]
 800b3a2:	68da      	ldr	r2, [r3, #12]
 800b3a4:	693b      	ldr	r3, [r7, #16]
 800b3a6:	689b      	ldr	r3, [r3, #8]
 800b3a8:	429a      	cmp	r2, r3
 800b3aa:	d11c      	bne.n	800b3e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b3ac:	693b      	ldr	r3, [r7, #16]
 800b3ae:	685a      	ldr	r2, [r3, #4]
 800b3b0:	693b      	ldr	r3, [r7, #16]
 800b3b2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d316      	bcc.n	800b3e6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	685a      	ldr	r2, [r3, #4]
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b3c2:	429a      	cmp	r2, r3
 800b3c4:	d20f      	bcs.n	800b3e6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	2100      	movs	r1, #0
 800b3ca:	68f8      	ldr	r0, [r7, #12]
 800b3cc:	f001 f89d 	bl	800c50a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b3d8:	2300      	movs	r3, #0
 800b3da:	2200      	movs	r2, #0
 800b3dc:	2100      	movs	r1, #0
 800b3de:	68f8      	ldr	r0, [r7, #12]
 800b3e0:	f003 ff12 	bl	800f208 <USBD_LL_PrepareReceive>
 800b3e4:	e01c      	b.n	800b420 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ec:	b2db      	uxtb	r3, r3
 800b3ee:	2b03      	cmp	r3, #3
 800b3f0:	d10f      	bne.n	800b412 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b3f2:	68fb      	ldr	r3, [r7, #12]
 800b3f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b3f8:	68db      	ldr	r3, [r3, #12]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d009      	beq.n	800b412 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2200      	movs	r2, #0
 800b402:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40c:	68db      	ldr	r3, [r3, #12]
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b412:	2180      	movs	r1, #128	@ 0x80
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f003 fe4d 	bl	800f0b4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b41a:	68f8      	ldr	r0, [r7, #12]
 800b41c:	f001 f8c7 	bl	800c5ae <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b426:	2b00      	cmp	r3, #0
 800b428:	d03a      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b42a:	68f8      	ldr	r0, [r7, #12]
 800b42c:	f7ff fe42 	bl	800b0b4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b430:	68fb      	ldr	r3, [r7, #12]
 800b432:	2200      	movs	r2, #0
 800b434:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b438:	e032      	b.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b43a:	7afb      	ldrb	r3, [r7, #11]
 800b43c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b440:	b2db      	uxtb	r3, r3
 800b442:	4619      	mov	r1, r3
 800b444:	68f8      	ldr	r0, [r7, #12]
 800b446:	f000 f985 	bl	800b754 <USBD_CoreFindEP>
 800b44a:	4603      	mov	r3, r0
 800b44c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b44e:	7dfb      	ldrb	r3, [r7, #23]
 800b450:	2bff      	cmp	r3, #255	@ 0xff
 800b452:	d025      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
 800b454:	7dfb      	ldrb	r3, [r7, #23]
 800b456:	2b00      	cmp	r3, #0
 800b458:	d122      	bne.n	800b4a0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b460:	b2db      	uxtb	r3, r3
 800b462:	2b03      	cmp	r3, #3
 800b464:	d11c      	bne.n	800b4a0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b466:	7dfa      	ldrb	r2, [r7, #23]
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	32ae      	adds	r2, #174	@ 0xae
 800b46c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b470:	695b      	ldr	r3, [r3, #20]
 800b472:	2b00      	cmp	r3, #0
 800b474:	d014      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b476:	7dfa      	ldrb	r2, [r7, #23]
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b47e:	7dfa      	ldrb	r2, [r7, #23]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	32ae      	adds	r2, #174	@ 0xae
 800b484:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	7afa      	ldrb	r2, [r7, #11]
 800b48c:	4611      	mov	r1, r2
 800b48e:	68f8      	ldr	r0, [r7, #12]
 800b490:	4798      	blx	r3
 800b492:	4603      	mov	r3, r0
 800b494:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b496:	7dbb      	ldrb	r3, [r7, #22]
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d001      	beq.n	800b4a0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b49c:	7dbb      	ldrb	r3, [r7, #22]
 800b49e:	e000      	b.n	800b4a2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b4a0:	2300      	movs	r3, #0
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3718      	adds	r7, #24
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}

0800b4aa <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b4aa:	b580      	push	{r7, lr}
 800b4ac:	b084      	sub	sp, #16
 800b4ae:	af00      	add	r7, sp, #0
 800b4b0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2201      	movs	r2, #1
 800b4ba:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2200      	movs	r2, #0
 800b4c2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	2200      	movs	r2, #0
 800b4ca:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b4cc:	687b      	ldr	r3, [r7, #4]
 800b4ce:	2200      	movs	r2, #0
 800b4d0:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d014      	beq.n	800b510 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4ec:	685b      	ldr	r3, [r3, #4]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00e      	beq.n	800b510 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4f8:	685b      	ldr	r3, [r3, #4]
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	6852      	ldr	r2, [r2, #4]
 800b4fe:	b2d2      	uxtb	r2, r2
 800b500:	4611      	mov	r1, r2
 800b502:	6878      	ldr	r0, [r7, #4]
 800b504:	4798      	blx	r3
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d001      	beq.n	800b510 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b50c:	2303      	movs	r3, #3
 800b50e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b510:	2340      	movs	r3, #64	@ 0x40
 800b512:	2200      	movs	r2, #0
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f003 fd87 	bl	800f02a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2201      	movs	r2, #1
 800b520:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	2240      	movs	r2, #64	@ 0x40
 800b528:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b52c:	2340      	movs	r3, #64	@ 0x40
 800b52e:	2200      	movs	r2, #0
 800b530:	2180      	movs	r1, #128	@ 0x80
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f003 fd79 	bl	800f02a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	2201      	movs	r2, #1
 800b53c:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	2240      	movs	r2, #64	@ 0x40
 800b542:	621a      	str	r2, [r3, #32]

  return ret;
 800b544:	7bfb      	ldrb	r3, [r7, #15]
}
 800b546:	4618      	mov	r0, r3
 800b548:	3710      	adds	r7, #16
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}

0800b54e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b54e:	b480      	push	{r7}
 800b550:	b083      	sub	sp, #12
 800b552:	af00      	add	r7, sp, #0
 800b554:	6078      	str	r0, [r7, #4]
 800b556:	460b      	mov	r3, r1
 800b558:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	78fa      	ldrb	r2, [r7, #3]
 800b55e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b560:	2300      	movs	r3, #0
}
 800b562:	4618      	mov	r0, r3
 800b564:	370c      	adds	r7, #12
 800b566:	46bd      	mov	sp, r7
 800b568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b56c:	4770      	bx	lr

0800b56e <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b56e:	b480      	push	{r7}
 800b570:	b083      	sub	sp, #12
 800b572:	af00      	add	r7, sp, #0
 800b574:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b57c:	b2db      	uxtb	r3, r3
 800b57e:	2b04      	cmp	r3, #4
 800b580:	d006      	beq.n	800b590 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	2204      	movs	r2, #4
 800b594:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	370c      	adds	r7, #12
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5a4:	4770      	bx	lr

0800b5a6 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b5a6:	b480      	push	{r7}
 800b5a8:	b083      	sub	sp, #12
 800b5aa:	af00      	add	r7, sp, #0
 800b5ac:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5b4:	b2db      	uxtb	r3, r3
 800b5b6:	2b04      	cmp	r3, #4
 800b5b8:	d106      	bne.n	800b5c8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b5c0:	b2da      	uxtb	r2, r3
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b5c8:	2300      	movs	r3, #0
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	370c      	adds	r7, #12
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d4:	4770      	bx	lr

0800b5d6 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b5d6:	b580      	push	{r7, lr}
 800b5d8:	b082      	sub	sp, #8
 800b5da:	af00      	add	r7, sp, #0
 800b5dc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5e4:	b2db      	uxtb	r3, r3
 800b5e6:	2b03      	cmp	r3, #3
 800b5e8:	d110      	bne.n	800b60c <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f0:	2b00      	cmp	r3, #0
 800b5f2:	d00b      	beq.n	800b60c <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5fa:	69db      	ldr	r3, [r3, #28]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b606:	69db      	ldr	r3, [r3, #28]
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b60c:	2300      	movs	r3, #0
}
 800b60e:	4618      	mov	r0, r3
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	460b      	mov	r3, r1
 800b620:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	32ae      	adds	r2, #174	@ 0xae
 800b62c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b630:	2b00      	cmp	r3, #0
 800b632:	d101      	bne.n	800b638 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b634:	2303      	movs	r3, #3
 800b636:	e01c      	b.n	800b672 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b03      	cmp	r3, #3
 800b642:	d115      	bne.n	800b670 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	6a1b      	ldr	r3, [r3, #32]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d00b      	beq.n	800b670 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	32ae      	adds	r2, #174	@ 0xae
 800b662:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	78fa      	ldrb	r2, [r7, #3]
 800b66a:	4611      	mov	r1, r2
 800b66c:	6878      	ldr	r0, [r7, #4]
 800b66e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b670:	2300      	movs	r3, #0
}
 800b672:	4618      	mov	r0, r3
 800b674:	3708      	adds	r7, #8
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}

0800b67a <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b67a:	b580      	push	{r7, lr}
 800b67c:	b082      	sub	sp, #8
 800b67e:	af00      	add	r7, sp, #0
 800b680:	6078      	str	r0, [r7, #4]
 800b682:	460b      	mov	r3, r1
 800b684:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	32ae      	adds	r2, #174	@ 0xae
 800b690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d101      	bne.n	800b69c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b698:	2303      	movs	r3, #3
 800b69a:	e01c      	b.n	800b6d6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6a2:	b2db      	uxtb	r3, r3
 800b6a4:	2b03      	cmp	r3, #3
 800b6a6:	d115      	bne.n	800b6d4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	32ae      	adds	r2, #174	@ 0xae
 800b6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00b      	beq.n	800b6d4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	32ae      	adds	r2, #174	@ 0xae
 800b6c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6cc:	78fa      	ldrb	r2, [r7, #3]
 800b6ce:	4611      	mov	r1, r2
 800b6d0:	6878      	ldr	r0, [r7, #4]
 800b6d2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b6d4:	2300      	movs	r3, #0
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3708      	adds	r7, #8
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}

0800b6de <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b6de:	b480      	push	{r7}
 800b6e0:	b083      	sub	sp, #12
 800b6e2:	af00      	add	r7, sp, #0
 800b6e4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b6e6:	2300      	movs	r3, #0
}
 800b6e8:	4618      	mov	r0, r3
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b6f4:	b580      	push	{r7, lr}
 800b6f6:	b084      	sub	sp, #16
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b6fc:	2300      	movs	r3, #0
 800b6fe:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	2201      	movs	r2, #1
 800b704:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b70e:	2b00      	cmp	r3, #0
 800b710:	d00e      	beq.n	800b730 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b718:	685b      	ldr	r3, [r3, #4]
 800b71a:	687a      	ldr	r2, [r7, #4]
 800b71c:	6852      	ldr	r2, [r2, #4]
 800b71e:	b2d2      	uxtb	r2, r2
 800b720:	4611      	mov	r1, r2
 800b722:	6878      	ldr	r0, [r7, #4]
 800b724:	4798      	blx	r3
 800b726:	4603      	mov	r3, r0
 800b728:	2b00      	cmp	r3, #0
 800b72a:	d001      	beq.n	800b730 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b72c:	2303      	movs	r3, #3
 800b72e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b730:	7bfb      	ldrb	r3, [r7, #15]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3710      	adds	r7, #16
 800b736:	46bd      	mov	sp, r7
 800b738:	bd80      	pop	{r7, pc}

0800b73a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b73a:	b480      	push	{r7}
 800b73c:	b083      	sub	sp, #12
 800b73e:	af00      	add	r7, sp, #0
 800b740:	6078      	str	r0, [r7, #4]
 800b742:	460b      	mov	r3, r1
 800b744:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b746:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b748:	4618      	mov	r0, r3
 800b74a:	370c      	adds	r7, #12
 800b74c:	46bd      	mov	sp, r7
 800b74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b752:	4770      	bx	lr

0800b754 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b754:	b480      	push	{r7}
 800b756:	b083      	sub	sp, #12
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
 800b75c:	460b      	mov	r3, r1
 800b75e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b760:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b762:	4618      	mov	r0, r3
 800b764:	370c      	adds	r7, #12
 800b766:	46bd      	mov	sp, r7
 800b768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b76c:	4770      	bx	lr

0800b76e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b76e:	b580      	push	{r7, lr}
 800b770:	b086      	sub	sp, #24
 800b772:	af00      	add	r7, sp, #0
 800b774:	6078      	str	r0, [r7, #4]
 800b776:	460b      	mov	r3, r1
 800b778:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b782:	2300      	movs	r3, #0
 800b784:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	885b      	ldrh	r3, [r3, #2]
 800b78a:	b29b      	uxth	r3, r3
 800b78c:	68fa      	ldr	r2, [r7, #12]
 800b78e:	7812      	ldrb	r2, [r2, #0]
 800b790:	4293      	cmp	r3, r2
 800b792:	d91f      	bls.n	800b7d4 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b794:	68fb      	ldr	r3, [r7, #12]
 800b796:	781b      	ldrb	r3, [r3, #0]
 800b798:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b79a:	e013      	b.n	800b7c4 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b79c:	f107 030a 	add.w	r3, r7, #10
 800b7a0:	4619      	mov	r1, r3
 800b7a2:	6978      	ldr	r0, [r7, #20]
 800b7a4:	f000 f81b 	bl	800b7de <USBD_GetNextDesc>
 800b7a8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	785b      	ldrb	r3, [r3, #1]
 800b7ae:	2b05      	cmp	r3, #5
 800b7b0:	d108      	bne.n	800b7c4 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b7b2:	697b      	ldr	r3, [r7, #20]
 800b7b4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	789b      	ldrb	r3, [r3, #2]
 800b7ba:	78fa      	ldrb	r2, [r7, #3]
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	d008      	beq.n	800b7d2 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b7c0:	2300      	movs	r3, #0
 800b7c2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b7c4:	68fb      	ldr	r3, [r7, #12]
 800b7c6:	885b      	ldrh	r3, [r3, #2]
 800b7c8:	b29a      	uxth	r2, r3
 800b7ca:	897b      	ldrh	r3, [r7, #10]
 800b7cc:	429a      	cmp	r2, r3
 800b7ce:	d8e5      	bhi.n	800b79c <USBD_GetEpDesc+0x2e>
 800b7d0:	e000      	b.n	800b7d4 <USBD_GetEpDesc+0x66>
          break;
 800b7d2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b7d4:	693b      	ldr	r3, [r7, #16]
}
 800b7d6:	4618      	mov	r0, r3
 800b7d8:	3718      	adds	r7, #24
 800b7da:	46bd      	mov	sp, r7
 800b7dc:	bd80      	pop	{r7, pc}

0800b7de <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	6078      	str	r0, [r7, #4]
 800b7e6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b7ec:	683b      	ldr	r3, [r7, #0]
 800b7ee:	881b      	ldrh	r3, [r3, #0]
 800b7f0:	68fa      	ldr	r2, [r7, #12]
 800b7f2:	7812      	ldrb	r2, [r2, #0]
 800b7f4:	4413      	add	r3, r2
 800b7f6:	b29a      	uxth	r2, r3
 800b7f8:	683b      	ldr	r3, [r7, #0]
 800b7fa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b7fc:	68fb      	ldr	r3, [r7, #12]
 800b7fe:	781b      	ldrb	r3, [r3, #0]
 800b800:	461a      	mov	r2, r3
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	4413      	add	r3, r2
 800b806:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b808:	68fb      	ldr	r3, [r7, #12]
}
 800b80a:	4618      	mov	r0, r3
 800b80c:	3714      	adds	r7, #20
 800b80e:	46bd      	mov	sp, r7
 800b810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b814:	4770      	bx	lr

0800b816 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b816:	b480      	push	{r7}
 800b818:	b087      	sub	sp, #28
 800b81a:	af00      	add	r7, sp, #0
 800b81c:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	781b      	ldrb	r3, [r3, #0]
 800b826:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b828:	697b      	ldr	r3, [r7, #20]
 800b82a:	3301      	adds	r3, #1
 800b82c:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b82e:	697b      	ldr	r3, [r7, #20]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b834:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b838:	021b      	lsls	r3, r3, #8
 800b83a:	b21a      	sxth	r2, r3
 800b83c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b840:	4313      	orrs	r3, r2
 800b842:	b21b      	sxth	r3, r3
 800b844:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b846:	89fb      	ldrh	r3, [r7, #14]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	371c      	adds	r7, #28
 800b84c:	46bd      	mov	sp, r7
 800b84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b852:	4770      	bx	lr

0800b854 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b854:	b580      	push	{r7, lr}
 800b856:	b084      	sub	sp, #16
 800b858:	af00      	add	r7, sp, #0
 800b85a:	6078      	str	r0, [r7, #4]
 800b85c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b85e:	2300      	movs	r3, #0
 800b860:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b862:	683b      	ldr	r3, [r7, #0]
 800b864:	781b      	ldrb	r3, [r3, #0]
 800b866:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b86a:	2b40      	cmp	r3, #64	@ 0x40
 800b86c:	d005      	beq.n	800b87a <USBD_StdDevReq+0x26>
 800b86e:	2b40      	cmp	r3, #64	@ 0x40
 800b870:	d857      	bhi.n	800b922 <USBD_StdDevReq+0xce>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <USBD_StdDevReq+0x42>
 800b876:	2b20      	cmp	r3, #32
 800b878:	d153      	bne.n	800b922 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	32ae      	adds	r2, #174	@ 0xae
 800b884:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b888:	689b      	ldr	r3, [r3, #8]
 800b88a:	6839      	ldr	r1, [r7, #0]
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	4798      	blx	r3
 800b890:	4603      	mov	r3, r0
 800b892:	73fb      	strb	r3, [r7, #15]
      break;
 800b894:	e04a      	b.n	800b92c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b896:	683b      	ldr	r3, [r7, #0]
 800b898:	785b      	ldrb	r3, [r3, #1]
 800b89a:	2b09      	cmp	r3, #9
 800b89c:	d83b      	bhi.n	800b916 <USBD_StdDevReq+0xc2>
 800b89e:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a4 <USBD_StdDevReq+0x50>)
 800b8a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a4:	0800b8f9 	.word	0x0800b8f9
 800b8a8:	0800b90d 	.word	0x0800b90d
 800b8ac:	0800b917 	.word	0x0800b917
 800b8b0:	0800b903 	.word	0x0800b903
 800b8b4:	0800b917 	.word	0x0800b917
 800b8b8:	0800b8d7 	.word	0x0800b8d7
 800b8bc:	0800b8cd 	.word	0x0800b8cd
 800b8c0:	0800b917 	.word	0x0800b917
 800b8c4:	0800b8ef 	.word	0x0800b8ef
 800b8c8:	0800b8e1 	.word	0x0800b8e1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b8cc:	6839      	ldr	r1, [r7, #0]
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f000 fa3c 	bl	800bd4c <USBD_GetDescriptor>
          break;
 800b8d4:	e024      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b8d6:	6839      	ldr	r1, [r7, #0]
 800b8d8:	6878      	ldr	r0, [r7, #4]
 800b8da:	f000 fba1 	bl	800c020 <USBD_SetAddress>
          break;
 800b8de:	e01f      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fbe0 	bl	800c0a8 <USBD_SetConfig>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	73fb      	strb	r3, [r7, #15]
          break;
 800b8ec:	e018      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b8ee:	6839      	ldr	r1, [r7, #0]
 800b8f0:	6878      	ldr	r0, [r7, #4]
 800b8f2:	f000 fc83 	bl	800c1fc <USBD_GetConfig>
          break;
 800b8f6:	e013      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b8f8:	6839      	ldr	r1, [r7, #0]
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f000 fcb4 	bl	800c268 <USBD_GetStatus>
          break;
 800b900:	e00e      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b902:	6839      	ldr	r1, [r7, #0]
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fce3 	bl	800c2d0 <USBD_SetFeature>
          break;
 800b90a:	e009      	b.n	800b920 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fd07 	bl	800c322 <USBD_ClrFeature>
          break;
 800b914:	e004      	b.n	800b920 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fd5e 	bl	800c3da <USBD_CtlError>
          break;
 800b91e:	bf00      	nop
      }
      break;
 800b920:	e004      	b.n	800b92c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f000 fd58 	bl	800c3da <USBD_CtlError>
      break;
 800b92a:	bf00      	nop
  }

  return ret;
 800b92c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b92e:	4618      	mov	r0, r3
 800b930:	3710      	adds	r7, #16
 800b932:	46bd      	mov	sp, r7
 800b934:	bd80      	pop	{r7, pc}
 800b936:	bf00      	nop

0800b938 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	781b      	ldrb	r3, [r3, #0]
 800b94a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b94e:	2b40      	cmp	r3, #64	@ 0x40
 800b950:	d005      	beq.n	800b95e <USBD_StdItfReq+0x26>
 800b952:	2b40      	cmp	r3, #64	@ 0x40
 800b954:	d852      	bhi.n	800b9fc <USBD_StdItfReq+0xc4>
 800b956:	2b00      	cmp	r3, #0
 800b958:	d001      	beq.n	800b95e <USBD_StdItfReq+0x26>
 800b95a:	2b20      	cmp	r3, #32
 800b95c:	d14e      	bne.n	800b9fc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b964:	b2db      	uxtb	r3, r3
 800b966:	3b01      	subs	r3, #1
 800b968:	2b02      	cmp	r3, #2
 800b96a:	d840      	bhi.n	800b9ee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b96c:	683b      	ldr	r3, [r7, #0]
 800b96e:	889b      	ldrh	r3, [r3, #4]
 800b970:	b2db      	uxtb	r3, r3
 800b972:	2b01      	cmp	r3, #1
 800b974:	d836      	bhi.n	800b9e4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b976:	683b      	ldr	r3, [r7, #0]
 800b978:	889b      	ldrh	r3, [r3, #4]
 800b97a:	b2db      	uxtb	r3, r3
 800b97c:	4619      	mov	r1, r3
 800b97e:	6878      	ldr	r0, [r7, #4]
 800b980:	f7ff fedb 	bl	800b73a <USBD_CoreFindIF>
 800b984:	4603      	mov	r3, r0
 800b986:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b988:	7bbb      	ldrb	r3, [r7, #14]
 800b98a:	2bff      	cmp	r3, #255	@ 0xff
 800b98c:	d01d      	beq.n	800b9ca <USBD_StdItfReq+0x92>
 800b98e:	7bbb      	ldrb	r3, [r7, #14]
 800b990:	2b00      	cmp	r3, #0
 800b992:	d11a      	bne.n	800b9ca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b994:	7bba      	ldrb	r2, [r7, #14]
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	32ae      	adds	r2, #174	@ 0xae
 800b99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b99e:	689b      	ldr	r3, [r3, #8]
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00f      	beq.n	800b9c4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b9a4:	7bba      	ldrb	r2, [r7, #14]
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b9ac:	7bba      	ldrb	r2, [r7, #14]
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	32ae      	adds	r2, #174	@ 0xae
 800b9b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9b6:	689b      	ldr	r3, [r3, #8]
 800b9b8:	6839      	ldr	r1, [r7, #0]
 800b9ba:	6878      	ldr	r0, [r7, #4]
 800b9bc:	4798      	blx	r3
 800b9be:	4603      	mov	r3, r0
 800b9c0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9c2:	e004      	b.n	800b9ce <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b9c4:	2303      	movs	r3, #3
 800b9c6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b9c8:	e001      	b.n	800b9ce <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b9ce:	683b      	ldr	r3, [r7, #0]
 800b9d0:	88db      	ldrh	r3, [r3, #6]
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d110      	bne.n	800b9f8 <USBD_StdItfReq+0xc0>
 800b9d6:	7bfb      	ldrb	r3, [r7, #15]
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d10d      	bne.n	800b9f8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 fdd3 	bl	800c588 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b9e2:	e009      	b.n	800b9f8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b9e4:	6839      	ldr	r1, [r7, #0]
 800b9e6:	6878      	ldr	r0, [r7, #4]
 800b9e8:	f000 fcf7 	bl	800c3da <USBD_CtlError>
          break;
 800b9ec:	e004      	b.n	800b9f8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b9ee:	6839      	ldr	r1, [r7, #0]
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 fcf2 	bl	800c3da <USBD_CtlError>
          break;
 800b9f6:	e000      	b.n	800b9fa <USBD_StdItfReq+0xc2>
          break;
 800b9f8:	bf00      	nop
      }
      break;
 800b9fa:	e004      	b.n	800ba06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b9fc:	6839      	ldr	r1, [r7, #0]
 800b9fe:	6878      	ldr	r0, [r7, #4]
 800ba00:	f000 fceb 	bl	800c3da <USBD_CtlError>
      break;
 800ba04:	bf00      	nop
  }

  return ret;
 800ba06:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba08:	4618      	mov	r0, r3
 800ba0a:	3710      	adds	r7, #16
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	bd80      	pop	{r7, pc}

0800ba10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b084      	sub	sp, #16
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
 800ba18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	889b      	ldrh	r3, [r3, #4]
 800ba22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	781b      	ldrb	r3, [r3, #0]
 800ba28:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ba2c:	2b40      	cmp	r3, #64	@ 0x40
 800ba2e:	d007      	beq.n	800ba40 <USBD_StdEPReq+0x30>
 800ba30:	2b40      	cmp	r3, #64	@ 0x40
 800ba32:	f200 817f 	bhi.w	800bd34 <USBD_StdEPReq+0x324>
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d02a      	beq.n	800ba90 <USBD_StdEPReq+0x80>
 800ba3a:	2b20      	cmp	r3, #32
 800ba3c:	f040 817a 	bne.w	800bd34 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ba40:	7bbb      	ldrb	r3, [r7, #14]
 800ba42:	4619      	mov	r1, r3
 800ba44:	6878      	ldr	r0, [r7, #4]
 800ba46:	f7ff fe85 	bl	800b754 <USBD_CoreFindEP>
 800ba4a:	4603      	mov	r3, r0
 800ba4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ba4e:	7b7b      	ldrb	r3, [r7, #13]
 800ba50:	2bff      	cmp	r3, #255	@ 0xff
 800ba52:	f000 8174 	beq.w	800bd3e <USBD_StdEPReq+0x32e>
 800ba56:	7b7b      	ldrb	r3, [r7, #13]
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f040 8170 	bne.w	800bd3e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800ba5e:	7b7a      	ldrb	r2, [r7, #13]
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ba66:	7b7a      	ldrb	r2, [r7, #13]
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	32ae      	adds	r2, #174	@ 0xae
 800ba6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba70:	689b      	ldr	r3, [r3, #8]
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 8163 	beq.w	800bd3e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ba78:	7b7a      	ldrb	r2, [r7, #13]
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	32ae      	adds	r2, #174	@ 0xae
 800ba7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	4798      	blx	r3
 800ba8a:	4603      	mov	r3, r0
 800ba8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ba8e:	e156      	b.n	800bd3e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ba90:	683b      	ldr	r3, [r7, #0]
 800ba92:	785b      	ldrb	r3, [r3, #1]
 800ba94:	2b03      	cmp	r3, #3
 800ba96:	d008      	beq.n	800baaa <USBD_StdEPReq+0x9a>
 800ba98:	2b03      	cmp	r3, #3
 800ba9a:	f300 8145 	bgt.w	800bd28 <USBD_StdEPReq+0x318>
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 809b 	beq.w	800bbda <USBD_StdEPReq+0x1ca>
 800baa4:	2b01      	cmp	r3, #1
 800baa6:	d03c      	beq.n	800bb22 <USBD_StdEPReq+0x112>
 800baa8:	e13e      	b.n	800bd28 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bab0:	b2db      	uxtb	r3, r3
 800bab2:	2b02      	cmp	r3, #2
 800bab4:	d002      	beq.n	800babc <USBD_StdEPReq+0xac>
 800bab6:	2b03      	cmp	r3, #3
 800bab8:	d016      	beq.n	800bae8 <USBD_StdEPReq+0xd8>
 800baba:	e02c      	b.n	800bb16 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800babc:	7bbb      	ldrb	r3, [r7, #14]
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d00d      	beq.n	800bade <USBD_StdEPReq+0xce>
 800bac2:	7bbb      	ldrb	r3, [r7, #14]
 800bac4:	2b80      	cmp	r3, #128	@ 0x80
 800bac6:	d00a      	beq.n	800bade <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bac8:	7bbb      	ldrb	r3, [r7, #14]
 800baca:	4619      	mov	r1, r3
 800bacc:	6878      	ldr	r0, [r7, #4]
 800bace:	f003 faf1 	bl	800f0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bad2:	2180      	movs	r1, #128	@ 0x80
 800bad4:	6878      	ldr	r0, [r7, #4]
 800bad6:	f003 faed 	bl	800f0b4 <USBD_LL_StallEP>
 800bada:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800badc:	e020      	b.n	800bb20 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bade:	6839      	ldr	r1, [r7, #0]
 800bae0:	6878      	ldr	r0, [r7, #4]
 800bae2:	f000 fc7a 	bl	800c3da <USBD_CtlError>
              break;
 800bae6:	e01b      	b.n	800bb20 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bae8:	683b      	ldr	r3, [r7, #0]
 800baea:	885b      	ldrh	r3, [r3, #2]
 800baec:	2b00      	cmp	r3, #0
 800baee:	d10e      	bne.n	800bb0e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800baf0:	7bbb      	ldrb	r3, [r7, #14]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d00b      	beq.n	800bb0e <USBD_StdEPReq+0xfe>
 800baf6:	7bbb      	ldrb	r3, [r7, #14]
 800baf8:	2b80      	cmp	r3, #128	@ 0x80
 800bafa:	d008      	beq.n	800bb0e <USBD_StdEPReq+0xfe>
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	88db      	ldrh	r3, [r3, #6]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d104      	bne.n	800bb0e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb04:	7bbb      	ldrb	r3, [r7, #14]
 800bb06:	4619      	mov	r1, r3
 800bb08:	6878      	ldr	r0, [r7, #4]
 800bb0a:	f003 fad3 	bl	800f0b4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 fd3a 	bl	800c588 <USBD_CtlSendStatus>

              break;
 800bb14:	e004      	b.n	800bb20 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bb16:	6839      	ldr	r1, [r7, #0]
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 fc5e 	bl	800c3da <USBD_CtlError>
              break;
 800bb1e:	bf00      	nop
          }
          break;
 800bb20:	e107      	b.n	800bd32 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb28:	b2db      	uxtb	r3, r3
 800bb2a:	2b02      	cmp	r3, #2
 800bb2c:	d002      	beq.n	800bb34 <USBD_StdEPReq+0x124>
 800bb2e:	2b03      	cmp	r3, #3
 800bb30:	d016      	beq.n	800bb60 <USBD_StdEPReq+0x150>
 800bb32:	e04b      	b.n	800bbcc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb34:	7bbb      	ldrb	r3, [r7, #14]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00d      	beq.n	800bb56 <USBD_StdEPReq+0x146>
 800bb3a:	7bbb      	ldrb	r3, [r7, #14]
 800bb3c:	2b80      	cmp	r3, #128	@ 0x80
 800bb3e:	d00a      	beq.n	800bb56 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bb40:	7bbb      	ldrb	r3, [r7, #14]
 800bb42:	4619      	mov	r1, r3
 800bb44:	6878      	ldr	r0, [r7, #4]
 800bb46:	f003 fab5 	bl	800f0b4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bb4a:	2180      	movs	r1, #128	@ 0x80
 800bb4c:	6878      	ldr	r0, [r7, #4]
 800bb4e:	f003 fab1 	bl	800f0b4 <USBD_LL_StallEP>
 800bb52:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bb54:	e040      	b.n	800bbd8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bb56:	6839      	ldr	r1, [r7, #0]
 800bb58:	6878      	ldr	r0, [r7, #4]
 800bb5a:	f000 fc3e 	bl	800c3da <USBD_CtlError>
              break;
 800bb5e:	e03b      	b.n	800bbd8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bb60:	683b      	ldr	r3, [r7, #0]
 800bb62:	885b      	ldrh	r3, [r3, #2]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d136      	bne.n	800bbd6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bb68:	7bbb      	ldrb	r3, [r7, #14]
 800bb6a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bb6e:	2b00      	cmp	r3, #0
 800bb70:	d004      	beq.n	800bb7c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bb72:	7bbb      	ldrb	r3, [r7, #14]
 800bb74:	4619      	mov	r1, r3
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f003 fabb 	bl	800f0f2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bb7c:	6878      	ldr	r0, [r7, #4]
 800bb7e:	f000 fd03 	bl	800c588 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bb82:	7bbb      	ldrb	r3, [r7, #14]
 800bb84:	4619      	mov	r1, r3
 800bb86:	6878      	ldr	r0, [r7, #4]
 800bb88:	f7ff fde4 	bl	800b754 <USBD_CoreFindEP>
 800bb8c:	4603      	mov	r3, r0
 800bb8e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bb90:	7b7b      	ldrb	r3, [r7, #13]
 800bb92:	2bff      	cmp	r3, #255	@ 0xff
 800bb94:	d01f      	beq.n	800bbd6 <USBD_StdEPReq+0x1c6>
 800bb96:	7b7b      	ldrb	r3, [r7, #13]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d11c      	bne.n	800bbd6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bb9c:	7b7a      	ldrb	r2, [r7, #13]
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bba4:	7b7a      	ldrb	r2, [r7, #13]
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	32ae      	adds	r2, #174	@ 0xae
 800bbaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d010      	beq.n	800bbd6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bbb4:	7b7a      	ldrb	r2, [r7, #13]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	32ae      	adds	r2, #174	@ 0xae
 800bbba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbbe:	689b      	ldr	r3, [r3, #8]
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bbca:	e004      	b.n	800bbd6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bbcc:	6839      	ldr	r1, [r7, #0]
 800bbce:	6878      	ldr	r0, [r7, #4]
 800bbd0:	f000 fc03 	bl	800c3da <USBD_CtlError>
              break;
 800bbd4:	e000      	b.n	800bbd8 <USBD_StdEPReq+0x1c8>
              break;
 800bbd6:	bf00      	nop
          }
          break;
 800bbd8:	e0ab      	b.n	800bd32 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbe0:	b2db      	uxtb	r3, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d002      	beq.n	800bbec <USBD_StdEPReq+0x1dc>
 800bbe6:	2b03      	cmp	r3, #3
 800bbe8:	d032      	beq.n	800bc50 <USBD_StdEPReq+0x240>
 800bbea:	e097      	b.n	800bd1c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bbec:	7bbb      	ldrb	r3, [r7, #14]
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d007      	beq.n	800bc02 <USBD_StdEPReq+0x1f2>
 800bbf2:	7bbb      	ldrb	r3, [r7, #14]
 800bbf4:	2b80      	cmp	r3, #128	@ 0x80
 800bbf6:	d004      	beq.n	800bc02 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bbf8:	6839      	ldr	r1, [r7, #0]
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f000 fbed 	bl	800c3da <USBD_CtlError>
                break;
 800bc00:	e091      	b.n	800bd26 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	da0b      	bge.n	800bc22 <USBD_StdEPReq+0x212>
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bc10:	4613      	mov	r3, r2
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	3310      	adds	r3, #16
 800bc1a:	687a      	ldr	r2, [r7, #4]
 800bc1c:	4413      	add	r3, r2
 800bc1e:	3304      	adds	r3, #4
 800bc20:	e00b      	b.n	800bc3a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bc22:	7bbb      	ldrb	r3, [r7, #14]
 800bc24:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bc28:	4613      	mov	r3, r2
 800bc2a:	009b      	lsls	r3, r3, #2
 800bc2c:	4413      	add	r3, r2
 800bc2e:	009b      	lsls	r3, r3, #2
 800bc30:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bc34:	687a      	ldr	r2, [r7, #4]
 800bc36:	4413      	add	r3, r2
 800bc38:	3304      	adds	r3, #4
 800bc3a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc42:	68bb      	ldr	r3, [r7, #8]
 800bc44:	2202      	movs	r2, #2
 800bc46:	4619      	mov	r1, r3
 800bc48:	6878      	ldr	r0, [r7, #4]
 800bc4a:	f000 fc43 	bl	800c4d4 <USBD_CtlSendData>
              break;
 800bc4e:	e06a      	b.n	800bd26 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bc50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bc54:	2b00      	cmp	r3, #0
 800bc56:	da11      	bge.n	800bc7c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bc58:	7bbb      	ldrb	r3, [r7, #14]
 800bc5a:	f003 020f 	and.w	r2, r3, #15
 800bc5e:	6879      	ldr	r1, [r7, #4]
 800bc60:	4613      	mov	r3, r2
 800bc62:	009b      	lsls	r3, r3, #2
 800bc64:	4413      	add	r3, r2
 800bc66:	009b      	lsls	r3, r3, #2
 800bc68:	440b      	add	r3, r1
 800bc6a:	3324      	adds	r3, #36	@ 0x24
 800bc6c:	881b      	ldrh	r3, [r3, #0]
 800bc6e:	2b00      	cmp	r3, #0
 800bc70:	d117      	bne.n	800bca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc72:	6839      	ldr	r1, [r7, #0]
 800bc74:	6878      	ldr	r0, [r7, #4]
 800bc76:	f000 fbb0 	bl	800c3da <USBD_CtlError>
                  break;
 800bc7a:	e054      	b.n	800bd26 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bc7c:	7bbb      	ldrb	r3, [r7, #14]
 800bc7e:	f003 020f 	and.w	r2, r3, #15
 800bc82:	6879      	ldr	r1, [r7, #4]
 800bc84:	4613      	mov	r3, r2
 800bc86:	009b      	lsls	r3, r3, #2
 800bc88:	4413      	add	r3, r2
 800bc8a:	009b      	lsls	r3, r3, #2
 800bc8c:	440b      	add	r3, r1
 800bc8e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bc92:	881b      	ldrh	r3, [r3, #0]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d104      	bne.n	800bca2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bc98:	6839      	ldr	r1, [r7, #0]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 fb9d 	bl	800c3da <USBD_CtlError>
                  break;
 800bca0:	e041      	b.n	800bd26 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bca2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	da0b      	bge.n	800bcc2 <USBD_StdEPReq+0x2b2>
 800bcaa:	7bbb      	ldrb	r3, [r7, #14]
 800bcac:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bcb0:	4613      	mov	r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	4413      	add	r3, r2
 800bcb6:	009b      	lsls	r3, r3, #2
 800bcb8:	3310      	adds	r3, #16
 800bcba:	687a      	ldr	r2, [r7, #4]
 800bcbc:	4413      	add	r3, r2
 800bcbe:	3304      	adds	r3, #4
 800bcc0:	e00b      	b.n	800bcda <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bcc2:	7bbb      	ldrb	r3, [r7, #14]
 800bcc4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bcc8:	4613      	mov	r3, r2
 800bcca:	009b      	lsls	r3, r3, #2
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	4413      	add	r3, r2
 800bcd8:	3304      	adds	r3, #4
 800bcda:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bcdc:	7bbb      	ldrb	r3, [r7, #14]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d002      	beq.n	800bce8 <USBD_StdEPReq+0x2d8>
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	2b80      	cmp	r3, #128	@ 0x80
 800bce6:	d103      	bne.n	800bcf0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bce8:	68bb      	ldr	r3, [r7, #8]
 800bcea:	2200      	movs	r2, #0
 800bcec:	601a      	str	r2, [r3, #0]
 800bcee:	e00e      	b.n	800bd0e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bcf0:	7bbb      	ldrb	r3, [r7, #14]
 800bcf2:	4619      	mov	r1, r3
 800bcf4:	6878      	ldr	r0, [r7, #4]
 800bcf6:	f003 fa1b 	bl	800f130 <USBD_LL_IsStallEP>
 800bcfa:	4603      	mov	r3, r0
 800bcfc:	2b00      	cmp	r3, #0
 800bcfe:	d003      	beq.n	800bd08 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bd00:	68bb      	ldr	r3, [r7, #8]
 800bd02:	2201      	movs	r2, #1
 800bd04:	601a      	str	r2, [r3, #0]
 800bd06:	e002      	b.n	800bd0e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bd08:	68bb      	ldr	r3, [r7, #8]
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bd0e:	68bb      	ldr	r3, [r7, #8]
 800bd10:	2202      	movs	r2, #2
 800bd12:	4619      	mov	r1, r3
 800bd14:	6878      	ldr	r0, [r7, #4]
 800bd16:	f000 fbdd 	bl	800c4d4 <USBD_CtlSendData>
              break;
 800bd1a:	e004      	b.n	800bd26 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bd1c:	6839      	ldr	r1, [r7, #0]
 800bd1e:	6878      	ldr	r0, [r7, #4]
 800bd20:	f000 fb5b 	bl	800c3da <USBD_CtlError>
              break;
 800bd24:	bf00      	nop
          }
          break;
 800bd26:	e004      	b.n	800bd32 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bd28:	6839      	ldr	r1, [r7, #0]
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f000 fb55 	bl	800c3da <USBD_CtlError>
          break;
 800bd30:	bf00      	nop
      }
      break;
 800bd32:	e005      	b.n	800bd40 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bd34:	6839      	ldr	r1, [r7, #0]
 800bd36:	6878      	ldr	r0, [r7, #4]
 800bd38:	f000 fb4f 	bl	800c3da <USBD_CtlError>
      break;
 800bd3c:	e000      	b.n	800bd40 <USBD_StdEPReq+0x330>
      break;
 800bd3e:	bf00      	nop
  }

  return ret;
 800bd40:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd42:	4618      	mov	r0, r3
 800bd44:	3710      	adds	r7, #16
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
	...

0800bd4c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd4c:	b580      	push	{r7, lr}
 800bd4e:	b084      	sub	sp, #16
 800bd50:	af00      	add	r7, sp, #0
 800bd52:	6078      	str	r0, [r7, #4]
 800bd54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bd56:	2300      	movs	r3, #0
 800bd58:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bd5a:	2300      	movs	r3, #0
 800bd5c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bd5e:	2300      	movs	r3, #0
 800bd60:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bd62:	683b      	ldr	r3, [r7, #0]
 800bd64:	885b      	ldrh	r3, [r3, #2]
 800bd66:	0a1b      	lsrs	r3, r3, #8
 800bd68:	b29b      	uxth	r3, r3
 800bd6a:	3b01      	subs	r3, #1
 800bd6c:	2b06      	cmp	r3, #6
 800bd6e:	f200 8128 	bhi.w	800bfc2 <USBD_GetDescriptor+0x276>
 800bd72:	a201      	add	r2, pc, #4	@ (adr r2, 800bd78 <USBD_GetDescriptor+0x2c>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bd95 	.word	0x0800bd95
 800bd7c:	0800bdad 	.word	0x0800bdad
 800bd80:	0800bded 	.word	0x0800bded
 800bd84:	0800bfc3 	.word	0x0800bfc3
 800bd88:	0800bfc3 	.word	0x0800bfc3
 800bd8c:	0800bf63 	.word	0x0800bf63
 800bd90:	0800bf8f 	.word	0x0800bf8f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	687a      	ldr	r2, [r7, #4]
 800bd9e:	7c12      	ldrb	r2, [r2, #16]
 800bda0:	f107 0108 	add.w	r1, r7, #8
 800bda4:	4610      	mov	r0, r2
 800bda6:	4798      	blx	r3
 800bda8:	60f8      	str	r0, [r7, #12]
      break;
 800bdaa:	e112      	b.n	800bfd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	7c1b      	ldrb	r3, [r3, #16]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d10d      	bne.n	800bdd0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bdbc:	f107 0208 	add.w	r2, r7, #8
 800bdc0:	4610      	mov	r0, r2
 800bdc2:	4798      	blx	r3
 800bdc4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bdc6:	68fb      	ldr	r3, [r7, #12]
 800bdc8:	3301      	adds	r3, #1
 800bdca:	2202      	movs	r2, #2
 800bdcc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bdce:	e100      	b.n	800bfd2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bdd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdd8:	f107 0208 	add.w	r2, r7, #8
 800bddc:	4610      	mov	r0, r2
 800bdde:	4798      	blx	r3
 800bde0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	3301      	adds	r3, #1
 800bde6:	2202      	movs	r2, #2
 800bde8:	701a      	strb	r2, [r3, #0]
      break;
 800bdea:	e0f2      	b.n	800bfd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	885b      	ldrh	r3, [r3, #2]
 800bdf0:	b2db      	uxtb	r3, r3
 800bdf2:	2b05      	cmp	r3, #5
 800bdf4:	f200 80ac 	bhi.w	800bf50 <USBD_GetDescriptor+0x204>
 800bdf8:	a201      	add	r2, pc, #4	@ (adr r2, 800be00 <USBD_GetDescriptor+0xb4>)
 800bdfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdfe:	bf00      	nop
 800be00:	0800be19 	.word	0x0800be19
 800be04:	0800be4d 	.word	0x0800be4d
 800be08:	0800be81 	.word	0x0800be81
 800be0c:	0800beb5 	.word	0x0800beb5
 800be10:	0800bee9 	.word	0x0800bee9
 800be14:	0800bf1d 	.word	0x0800bf1d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be1e:	685b      	ldr	r3, [r3, #4]
 800be20:	2b00      	cmp	r3, #0
 800be22:	d00b      	beq.n	800be3c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800be24:	687b      	ldr	r3, [r7, #4]
 800be26:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be2a:	685b      	ldr	r3, [r3, #4]
 800be2c:	687a      	ldr	r2, [r7, #4]
 800be2e:	7c12      	ldrb	r2, [r2, #16]
 800be30:	f107 0108 	add.w	r1, r7, #8
 800be34:	4610      	mov	r0, r2
 800be36:	4798      	blx	r3
 800be38:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be3a:	e091      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be3c:	6839      	ldr	r1, [r7, #0]
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f000 facb 	bl	800c3da <USBD_CtlError>
            err++;
 800be44:	7afb      	ldrb	r3, [r7, #11]
 800be46:	3301      	adds	r3, #1
 800be48:	72fb      	strb	r3, [r7, #11]
          break;
 800be4a:	e089      	b.n	800bf60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be52:	689b      	ldr	r3, [r3, #8]
 800be54:	2b00      	cmp	r3, #0
 800be56:	d00b      	beq.n	800be70 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be5e:	689b      	ldr	r3, [r3, #8]
 800be60:	687a      	ldr	r2, [r7, #4]
 800be62:	7c12      	ldrb	r2, [r2, #16]
 800be64:	f107 0108 	add.w	r1, r7, #8
 800be68:	4610      	mov	r0, r2
 800be6a:	4798      	blx	r3
 800be6c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be6e:	e077      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be70:	6839      	ldr	r1, [r7, #0]
 800be72:	6878      	ldr	r0, [r7, #4]
 800be74:	f000 fab1 	bl	800c3da <USBD_CtlError>
            err++;
 800be78:	7afb      	ldrb	r3, [r7, #11]
 800be7a:	3301      	adds	r3, #1
 800be7c:	72fb      	strb	r3, [r7, #11]
          break;
 800be7e:	e06f      	b.n	800bf60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be86:	68db      	ldr	r3, [r3, #12]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d00b      	beq.n	800bea4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be92:	68db      	ldr	r3, [r3, #12]
 800be94:	687a      	ldr	r2, [r7, #4]
 800be96:	7c12      	ldrb	r2, [r2, #16]
 800be98:	f107 0108 	add.w	r1, r7, #8
 800be9c:	4610      	mov	r0, r2
 800be9e:	4798      	blx	r3
 800bea0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bea2:	e05d      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bea4:	6839      	ldr	r1, [r7, #0]
 800bea6:	6878      	ldr	r0, [r7, #4]
 800bea8:	f000 fa97 	bl	800c3da <USBD_CtlError>
            err++;
 800beac:	7afb      	ldrb	r3, [r7, #11]
 800beae:	3301      	adds	r3, #1
 800beb0:	72fb      	strb	r3, [r7, #11]
          break;
 800beb2:	e055      	b.n	800bf60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beba:	691b      	ldr	r3, [r3, #16]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d00b      	beq.n	800bed8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	687a      	ldr	r2, [r7, #4]
 800beca:	7c12      	ldrb	r2, [r2, #16]
 800becc:	f107 0108 	add.w	r1, r7, #8
 800bed0:	4610      	mov	r0, r2
 800bed2:	4798      	blx	r3
 800bed4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bed6:	e043      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6878      	ldr	r0, [r7, #4]
 800bedc:	f000 fa7d 	bl	800c3da <USBD_CtlError>
            err++;
 800bee0:	7afb      	ldrb	r3, [r7, #11]
 800bee2:	3301      	adds	r3, #1
 800bee4:	72fb      	strb	r3, [r7, #11]
          break;
 800bee6:	e03b      	b.n	800bf60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800beee:	695b      	ldr	r3, [r3, #20]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d00b      	beq.n	800bf0c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800befa:	695b      	ldr	r3, [r3, #20]
 800befc:	687a      	ldr	r2, [r7, #4]
 800befe:	7c12      	ldrb	r2, [r2, #16]
 800bf00:	f107 0108 	add.w	r1, r7, #8
 800bf04:	4610      	mov	r0, r2
 800bf06:	4798      	blx	r3
 800bf08:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf0a:	e029      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf0c:	6839      	ldr	r1, [r7, #0]
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f000 fa63 	bl	800c3da <USBD_CtlError>
            err++;
 800bf14:	7afb      	ldrb	r3, [r7, #11]
 800bf16:	3301      	adds	r3, #1
 800bf18:	72fb      	strb	r3, [r7, #11]
          break;
 800bf1a:	e021      	b.n	800bf60 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf22:	699b      	ldr	r3, [r3, #24]
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d00b      	beq.n	800bf40 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bf2e:	699b      	ldr	r3, [r3, #24]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	7c12      	ldrb	r2, [r2, #16]
 800bf34:	f107 0108 	add.w	r1, r7, #8
 800bf38:	4610      	mov	r0, r2
 800bf3a:	4798      	blx	r3
 800bf3c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bf3e:	e00f      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bf40:	6839      	ldr	r1, [r7, #0]
 800bf42:	6878      	ldr	r0, [r7, #4]
 800bf44:	f000 fa49 	bl	800c3da <USBD_CtlError>
            err++;
 800bf48:	7afb      	ldrb	r3, [r7, #11]
 800bf4a:	3301      	adds	r3, #1
 800bf4c:	72fb      	strb	r3, [r7, #11]
          break;
 800bf4e:	e007      	b.n	800bf60 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800bf50:	6839      	ldr	r1, [r7, #0]
 800bf52:	6878      	ldr	r0, [r7, #4]
 800bf54:	f000 fa41 	bl	800c3da <USBD_CtlError>
          err++;
 800bf58:	7afb      	ldrb	r3, [r7, #11]
 800bf5a:	3301      	adds	r3, #1
 800bf5c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800bf5e:	bf00      	nop
      }
      break;
 800bf60:	e037      	b.n	800bfd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	7c1b      	ldrb	r3, [r3, #16]
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d109      	bne.n	800bf7e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf70:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf72:	f107 0208 	add.w	r2, r7, #8
 800bf76:	4610      	mov	r0, r2
 800bf78:	4798      	blx	r3
 800bf7a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bf7c:	e029      	b.n	800bfd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bf7e:	6839      	ldr	r1, [r7, #0]
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f000 fa2a 	bl	800c3da <USBD_CtlError>
        err++;
 800bf86:	7afb      	ldrb	r3, [r7, #11]
 800bf88:	3301      	adds	r3, #1
 800bf8a:	72fb      	strb	r3, [r7, #11]
      break;
 800bf8c:	e021      	b.n	800bfd2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	7c1b      	ldrb	r3, [r3, #16]
 800bf92:	2b00      	cmp	r3, #0
 800bf94:	d10d      	bne.n	800bfb2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bf9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf9e:	f107 0208 	add.w	r2, r7, #8
 800bfa2:	4610      	mov	r0, r2
 800bfa4:	4798      	blx	r3
 800bfa6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	3301      	adds	r3, #1
 800bfac:	2207      	movs	r2, #7
 800bfae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bfb0:	e00f      	b.n	800bfd2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bfb2:	6839      	ldr	r1, [r7, #0]
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f000 fa10 	bl	800c3da <USBD_CtlError>
        err++;
 800bfba:	7afb      	ldrb	r3, [r7, #11]
 800bfbc:	3301      	adds	r3, #1
 800bfbe:	72fb      	strb	r3, [r7, #11]
      break;
 800bfc0:	e007      	b.n	800bfd2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800bfc2:	6839      	ldr	r1, [r7, #0]
 800bfc4:	6878      	ldr	r0, [r7, #4]
 800bfc6:	f000 fa08 	bl	800c3da <USBD_CtlError>
      err++;
 800bfca:	7afb      	ldrb	r3, [r7, #11]
 800bfcc:	3301      	adds	r3, #1
 800bfce:	72fb      	strb	r3, [r7, #11]
      break;
 800bfd0:	bf00      	nop
  }

  if (err != 0U)
 800bfd2:	7afb      	ldrb	r3, [r7, #11]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d11e      	bne.n	800c016 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bfd8:	683b      	ldr	r3, [r7, #0]
 800bfda:	88db      	ldrh	r3, [r3, #6]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d016      	beq.n	800c00e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bfe0:	893b      	ldrh	r3, [r7, #8]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d00e      	beq.n	800c004 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bfe6:	683b      	ldr	r3, [r7, #0]
 800bfe8:	88da      	ldrh	r2, [r3, #6]
 800bfea:	893b      	ldrh	r3, [r7, #8]
 800bfec:	4293      	cmp	r3, r2
 800bfee:	bf28      	it	cs
 800bff0:	4613      	movcs	r3, r2
 800bff2:	b29b      	uxth	r3, r3
 800bff4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bff6:	893b      	ldrh	r3, [r7, #8]
 800bff8:	461a      	mov	r2, r3
 800bffa:	68f9      	ldr	r1, [r7, #12]
 800bffc:	6878      	ldr	r0, [r7, #4]
 800bffe:	f000 fa69 	bl	800c4d4 <USBD_CtlSendData>
 800c002:	e009      	b.n	800c018 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c004:	6839      	ldr	r1, [r7, #0]
 800c006:	6878      	ldr	r0, [r7, #4]
 800c008:	f000 f9e7 	bl	800c3da <USBD_CtlError>
 800c00c:	e004      	b.n	800c018 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c00e:	6878      	ldr	r0, [r7, #4]
 800c010:	f000 faba 	bl	800c588 <USBD_CtlSendStatus>
 800c014:	e000      	b.n	800c018 <USBD_GetDescriptor+0x2cc>
    return;
 800c016:	bf00      	nop
  }
}
 800c018:	3710      	adds	r7, #16
 800c01a:	46bd      	mov	sp, r7
 800c01c:	bd80      	pop	{r7, pc}
 800c01e:	bf00      	nop

0800c020 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c020:	b580      	push	{r7, lr}
 800c022:	b084      	sub	sp, #16
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
 800c028:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	889b      	ldrh	r3, [r3, #4]
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d131      	bne.n	800c096 <USBD_SetAddress+0x76>
 800c032:	683b      	ldr	r3, [r7, #0]
 800c034:	88db      	ldrh	r3, [r3, #6]
 800c036:	2b00      	cmp	r3, #0
 800c038:	d12d      	bne.n	800c096 <USBD_SetAddress+0x76>
 800c03a:	683b      	ldr	r3, [r7, #0]
 800c03c:	885b      	ldrh	r3, [r3, #2]
 800c03e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c040:	d829      	bhi.n	800c096 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	885b      	ldrh	r3, [r3, #2]
 800c046:	b2db      	uxtb	r3, r3
 800c048:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c04c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c054:	b2db      	uxtb	r3, r3
 800c056:	2b03      	cmp	r3, #3
 800c058:	d104      	bne.n	800c064 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c05a:	6839      	ldr	r1, [r7, #0]
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f000 f9bc 	bl	800c3da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c062:	e01d      	b.n	800c0a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c064:	687b      	ldr	r3, [r7, #4]
 800c066:	7bfa      	ldrb	r2, [r7, #15]
 800c068:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c06c:	7bfb      	ldrb	r3, [r7, #15]
 800c06e:	4619      	mov	r1, r3
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f003 f889 	bl	800f188 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	f000 fa86 	bl	800c588 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d004      	beq.n	800c08c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c082:	687b      	ldr	r3, [r7, #4]
 800c084:	2202      	movs	r2, #2
 800c086:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c08a:	e009      	b.n	800c0a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	2201      	movs	r2, #1
 800c090:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c094:	e004      	b.n	800c0a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c096:	6839      	ldr	r1, [r7, #0]
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f99e 	bl	800c3da <USBD_CtlError>
  }
}
 800c09e:	bf00      	nop
 800c0a0:	bf00      	nop
 800c0a2:	3710      	adds	r7, #16
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	bd80      	pop	{r7, pc}

0800c0a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c0a8:	b580      	push	{r7, lr}
 800c0aa:	b084      	sub	sp, #16
 800c0ac:	af00      	add	r7, sp, #0
 800c0ae:	6078      	str	r0, [r7, #4]
 800c0b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c0b6:	683b      	ldr	r3, [r7, #0]
 800c0b8:	885b      	ldrh	r3, [r3, #2]
 800c0ba:	b2da      	uxtb	r2, r3
 800c0bc:	4b4e      	ldr	r3, [pc, #312]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c0be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c0c0:	4b4d      	ldr	r3, [pc, #308]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c0c2:	781b      	ldrb	r3, [r3, #0]
 800c0c4:	2b01      	cmp	r3, #1
 800c0c6:	d905      	bls.n	800c0d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c0c8:	6839      	ldr	r1, [r7, #0]
 800c0ca:	6878      	ldr	r0, [r7, #4]
 800c0cc:	f000 f985 	bl	800c3da <USBD_CtlError>
    return USBD_FAIL;
 800c0d0:	2303      	movs	r3, #3
 800c0d2:	e08c      	b.n	800c1ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0da:	b2db      	uxtb	r3, r3
 800c0dc:	2b02      	cmp	r3, #2
 800c0de:	d002      	beq.n	800c0e6 <USBD_SetConfig+0x3e>
 800c0e0:	2b03      	cmp	r3, #3
 800c0e2:	d029      	beq.n	800c138 <USBD_SetConfig+0x90>
 800c0e4:	e075      	b.n	800c1d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c0e6:	4b44      	ldr	r3, [pc, #272]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d020      	beq.n	800c130 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c0ee:	4b42      	ldr	r3, [pc, #264]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	461a      	mov	r2, r3
 800c0f4:	687b      	ldr	r3, [r7, #4]
 800c0f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0f8:	4b3f      	ldr	r3, [pc, #252]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c0fa:	781b      	ldrb	r3, [r3, #0]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	6878      	ldr	r0, [r7, #4]
 800c100:	f7fe ffe3 	bl	800b0ca <USBD_SetClassConfig>
 800c104:	4603      	mov	r3, r0
 800c106:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c108:	7bfb      	ldrb	r3, [r7, #15]
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d008      	beq.n	800c120 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c10e:	6839      	ldr	r1, [r7, #0]
 800c110:	6878      	ldr	r0, [r7, #4]
 800c112:	f000 f962 	bl	800c3da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	2202      	movs	r2, #2
 800c11a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c11e:	e065      	b.n	800c1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 fa31 	bl	800c588 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2203      	movs	r2, #3
 800c12a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c12e:	e05d      	b.n	800c1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 fa29 	bl	800c588 <USBD_CtlSendStatus>
      break;
 800c136:	e059      	b.n	800c1ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c138:	4b2f      	ldr	r3, [pc, #188]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c13a:	781b      	ldrb	r3, [r3, #0]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d112      	bne.n	800c166 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	2202      	movs	r2, #2
 800c144:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c148:	4b2b      	ldr	r3, [pc, #172]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c14a:	781b      	ldrb	r3, [r3, #0]
 800c14c:	461a      	mov	r2, r3
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c152:	4b29      	ldr	r3, [pc, #164]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	4619      	mov	r1, r3
 800c158:	6878      	ldr	r0, [r7, #4]
 800c15a:	f7fe ffd2 	bl	800b102 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c15e:	6878      	ldr	r0, [r7, #4]
 800c160:	f000 fa12 	bl	800c588 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c164:	e042      	b.n	800c1ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c166:	4b24      	ldr	r3, [pc, #144]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c168:	781b      	ldrb	r3, [r3, #0]
 800c16a:	461a      	mov	r2, r3
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	685b      	ldr	r3, [r3, #4]
 800c170:	429a      	cmp	r2, r3
 800c172:	d02a      	beq.n	800c1ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	685b      	ldr	r3, [r3, #4]
 800c178:	b2db      	uxtb	r3, r3
 800c17a:	4619      	mov	r1, r3
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f7fe ffc0 	bl	800b102 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c182:	4b1d      	ldr	r3, [pc, #116]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	461a      	mov	r2, r3
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c18c:	4b1a      	ldr	r3, [pc, #104]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c18e:	781b      	ldrb	r3, [r3, #0]
 800c190:	4619      	mov	r1, r3
 800c192:	6878      	ldr	r0, [r7, #4]
 800c194:	f7fe ff99 	bl	800b0ca <USBD_SetClassConfig>
 800c198:	4603      	mov	r3, r0
 800c19a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c19c:	7bfb      	ldrb	r3, [r7, #15]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d00f      	beq.n	800c1c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c1a2:	6839      	ldr	r1, [r7, #0]
 800c1a4:	6878      	ldr	r0, [r7, #4]
 800c1a6:	f000 f918 	bl	800c3da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c1aa:	687b      	ldr	r3, [r7, #4]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	b2db      	uxtb	r3, r3
 800c1b0:	4619      	mov	r1, r3
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f7fe ffa5 	bl	800b102 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2202      	movs	r2, #2
 800c1bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c1c0:	e014      	b.n	800c1ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c1c2:	6878      	ldr	r0, [r7, #4]
 800c1c4:	f000 f9e0 	bl	800c588 <USBD_CtlSendStatus>
      break;
 800c1c8:	e010      	b.n	800c1ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f000 f9dc 	bl	800c588 <USBD_CtlSendStatus>
      break;
 800c1d0:	e00c      	b.n	800c1ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c1d2:	6839      	ldr	r1, [r7, #0]
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f900 	bl	800c3da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c1da:	4b07      	ldr	r3, [pc, #28]	@ (800c1f8 <USBD_SetConfig+0x150>)
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	6878      	ldr	r0, [r7, #4]
 800c1e2:	f7fe ff8e 	bl	800b102 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c1e6:	2303      	movs	r3, #3
 800c1e8:	73fb      	strb	r3, [r7, #15]
      break;
 800c1ea:	bf00      	nop
  }

  return ret;
 800c1ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800c1ee:	4618      	mov	r0, r3
 800c1f0:	3710      	adds	r7, #16
 800c1f2:	46bd      	mov	sp, r7
 800c1f4:	bd80      	pop	{r7, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200003f4 	.word	0x200003f4

0800c1fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b082      	sub	sp, #8
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
 800c204:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c206:	683b      	ldr	r3, [r7, #0]
 800c208:	88db      	ldrh	r3, [r3, #6]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d004      	beq.n	800c218 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c20e:	6839      	ldr	r1, [r7, #0]
 800c210:	6878      	ldr	r0, [r7, #4]
 800c212:	f000 f8e2 	bl	800c3da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c216:	e023      	b.n	800c260 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c21e:	b2db      	uxtb	r3, r3
 800c220:	2b02      	cmp	r3, #2
 800c222:	dc02      	bgt.n	800c22a <USBD_GetConfig+0x2e>
 800c224:	2b00      	cmp	r3, #0
 800c226:	dc03      	bgt.n	800c230 <USBD_GetConfig+0x34>
 800c228:	e015      	b.n	800c256 <USBD_GetConfig+0x5a>
 800c22a:	2b03      	cmp	r3, #3
 800c22c:	d00b      	beq.n	800c246 <USBD_GetConfig+0x4a>
 800c22e:	e012      	b.n	800c256 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	2200      	movs	r2, #0
 800c234:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	3308      	adds	r3, #8
 800c23a:	2201      	movs	r2, #1
 800c23c:	4619      	mov	r1, r3
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f000 f948 	bl	800c4d4 <USBD_CtlSendData>
        break;
 800c244:	e00c      	b.n	800c260 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	3304      	adds	r3, #4
 800c24a:	2201      	movs	r2, #1
 800c24c:	4619      	mov	r1, r3
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 f940 	bl	800c4d4 <USBD_CtlSendData>
        break;
 800c254:	e004      	b.n	800c260 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c256:	6839      	ldr	r1, [r7, #0]
 800c258:	6878      	ldr	r0, [r7, #4]
 800c25a:	f000 f8be 	bl	800c3da <USBD_CtlError>
        break;
 800c25e:	bf00      	nop
}
 800c260:	bf00      	nop
 800c262:	3708      	adds	r7, #8
 800c264:	46bd      	mov	sp, r7
 800c266:	bd80      	pop	{r7, pc}

0800c268 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c268:	b580      	push	{r7, lr}
 800c26a:	b082      	sub	sp, #8
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c278:	b2db      	uxtb	r3, r3
 800c27a:	3b01      	subs	r3, #1
 800c27c:	2b02      	cmp	r3, #2
 800c27e:	d81e      	bhi.n	800c2be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c280:	683b      	ldr	r3, [r7, #0]
 800c282:	88db      	ldrh	r3, [r3, #6]
 800c284:	2b02      	cmp	r3, #2
 800c286:	d004      	beq.n	800c292 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c288:	6839      	ldr	r1, [r7, #0]
 800c28a:	6878      	ldr	r0, [r7, #4]
 800c28c:	f000 f8a5 	bl	800c3da <USBD_CtlError>
        break;
 800c290:	e01a      	b.n	800c2c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2201      	movs	r2, #1
 800c296:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d005      	beq.n	800c2ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	68db      	ldr	r3, [r3, #12]
 800c2a6:	f043 0202 	orr.w	r2, r3, #2
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	330c      	adds	r3, #12
 800c2b2:	2202      	movs	r2, #2
 800c2b4:	4619      	mov	r1, r3
 800c2b6:	6878      	ldr	r0, [r7, #4]
 800c2b8:	f000 f90c 	bl	800c4d4 <USBD_CtlSendData>
      break;
 800c2bc:	e004      	b.n	800c2c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c2be:	6839      	ldr	r1, [r7, #0]
 800c2c0:	6878      	ldr	r0, [r7, #4]
 800c2c2:	f000 f88a 	bl	800c3da <USBD_CtlError>
      break;
 800c2c6:	bf00      	nop
  }
}
 800c2c8:	bf00      	nop
 800c2ca:	3708      	adds	r7, #8
 800c2cc:	46bd      	mov	sp, r7
 800c2ce:	bd80      	pop	{r7, pc}

0800c2d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c2d0:	b580      	push	{r7, lr}
 800c2d2:	b082      	sub	sp, #8
 800c2d4:	af00      	add	r7, sp, #0
 800c2d6:	6078      	str	r0, [r7, #4]
 800c2d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c2da:	683b      	ldr	r3, [r7, #0]
 800c2dc:	885b      	ldrh	r3, [r3, #2]
 800c2de:	2b01      	cmp	r3, #1
 800c2e0:	d107      	bne.n	800c2f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	2201      	movs	r2, #1
 800c2e6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	f000 f94c 	bl	800c588 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c2f0:	e013      	b.n	800c31a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c2f2:	683b      	ldr	r3, [r7, #0]
 800c2f4:	885b      	ldrh	r3, [r3, #2]
 800c2f6:	2b02      	cmp	r3, #2
 800c2f8:	d10b      	bne.n	800c312 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c2fa:	683b      	ldr	r3, [r7, #0]
 800c2fc:	889b      	ldrh	r3, [r3, #4]
 800c2fe:	0a1b      	lsrs	r3, r3, #8
 800c300:	b29b      	uxth	r3, r3
 800c302:	b2da      	uxtb	r2, r3
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c30a:	6878      	ldr	r0, [r7, #4]
 800c30c:	f000 f93c 	bl	800c588 <USBD_CtlSendStatus>
}
 800c310:	e003      	b.n	800c31a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c312:	6839      	ldr	r1, [r7, #0]
 800c314:	6878      	ldr	r0, [r7, #4]
 800c316:	f000 f860 	bl	800c3da <USBD_CtlError>
}
 800c31a:	bf00      	nop
 800c31c:	3708      	adds	r7, #8
 800c31e:	46bd      	mov	sp, r7
 800c320:	bd80      	pop	{r7, pc}

0800c322 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c322:	b580      	push	{r7, lr}
 800c324:	b082      	sub	sp, #8
 800c326:	af00      	add	r7, sp, #0
 800c328:	6078      	str	r0, [r7, #4]
 800c32a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c332:	b2db      	uxtb	r3, r3
 800c334:	3b01      	subs	r3, #1
 800c336:	2b02      	cmp	r3, #2
 800c338:	d80b      	bhi.n	800c352 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c33a:	683b      	ldr	r3, [r7, #0]
 800c33c:	885b      	ldrh	r3, [r3, #2]
 800c33e:	2b01      	cmp	r3, #1
 800c340:	d10c      	bne.n	800c35c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2200      	movs	r2, #0
 800c346:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 f91c 	bl	800c588 <USBD_CtlSendStatus>
      }
      break;
 800c350:	e004      	b.n	800c35c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c352:	6839      	ldr	r1, [r7, #0]
 800c354:	6878      	ldr	r0, [r7, #4]
 800c356:	f000 f840 	bl	800c3da <USBD_CtlError>
      break;
 800c35a:	e000      	b.n	800c35e <USBD_ClrFeature+0x3c>
      break;
 800c35c:	bf00      	nop
  }
}
 800c35e:	bf00      	nop
 800c360:	3708      	adds	r7, #8
 800c362:	46bd      	mov	sp, r7
 800c364:	bd80      	pop	{r7, pc}

0800c366 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c366:	b580      	push	{r7, lr}
 800c368:	b084      	sub	sp, #16
 800c36a:	af00      	add	r7, sp, #0
 800c36c:	6078      	str	r0, [r7, #4]
 800c36e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c370:	683b      	ldr	r3, [r7, #0]
 800c372:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c374:	68fb      	ldr	r3, [r7, #12]
 800c376:	781a      	ldrb	r2, [r3, #0]
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c37c:	68fb      	ldr	r3, [r7, #12]
 800c37e:	3301      	adds	r3, #1
 800c380:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c382:	68fb      	ldr	r3, [r7, #12]
 800c384:	781a      	ldrb	r2, [r3, #0]
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c38a:	68fb      	ldr	r3, [r7, #12]
 800c38c:	3301      	adds	r3, #1
 800c38e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c390:	68f8      	ldr	r0, [r7, #12]
 800c392:	f7ff fa40 	bl	800b816 <SWAPBYTE>
 800c396:	4603      	mov	r3, r0
 800c398:	461a      	mov	r2, r3
 800c39a:	687b      	ldr	r3, [r7, #4]
 800c39c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c39e:	68fb      	ldr	r3, [r7, #12]
 800c3a0:	3301      	adds	r3, #1
 800c3a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3301      	adds	r3, #1
 800c3a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c3aa:	68f8      	ldr	r0, [r7, #12]
 800c3ac:	f7ff fa33 	bl	800b816 <SWAPBYTE>
 800c3b0:	4603      	mov	r3, r0
 800c3b2:	461a      	mov	r2, r3
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c3b8:	68fb      	ldr	r3, [r7, #12]
 800c3ba:	3301      	adds	r3, #1
 800c3bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	3301      	adds	r3, #1
 800c3c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c3c4:	68f8      	ldr	r0, [r7, #12]
 800c3c6:	f7ff fa26 	bl	800b816 <SWAPBYTE>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	461a      	mov	r2, r3
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	80da      	strh	r2, [r3, #6]
}
 800c3d2:	bf00      	nop
 800c3d4:	3710      	adds	r7, #16
 800c3d6:	46bd      	mov	sp, r7
 800c3d8:	bd80      	pop	{r7, pc}

0800c3da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c3da:	b580      	push	{r7, lr}
 800c3dc:	b082      	sub	sp, #8
 800c3de:	af00      	add	r7, sp, #0
 800c3e0:	6078      	str	r0, [r7, #4]
 800c3e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c3e4:	2180      	movs	r1, #128	@ 0x80
 800c3e6:	6878      	ldr	r0, [r7, #4]
 800c3e8:	f002 fe64 	bl	800f0b4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c3ec:	2100      	movs	r1, #0
 800c3ee:	6878      	ldr	r0, [r7, #4]
 800c3f0:	f002 fe60 	bl	800f0b4 <USBD_LL_StallEP>
}
 800c3f4:	bf00      	nop
 800c3f6:	3708      	adds	r7, #8
 800c3f8:	46bd      	mov	sp, r7
 800c3fa:	bd80      	pop	{r7, pc}

0800c3fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b086      	sub	sp, #24
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c408:	2300      	movs	r3, #0
 800c40a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d042      	beq.n	800c498 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c416:	6938      	ldr	r0, [r7, #16]
 800c418:	f000 f842 	bl	800c4a0 <USBD_GetLen>
 800c41c:	4603      	mov	r3, r0
 800c41e:	3301      	adds	r3, #1
 800c420:	005b      	lsls	r3, r3, #1
 800c422:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c426:	d808      	bhi.n	800c43a <USBD_GetString+0x3e>
 800c428:	6938      	ldr	r0, [r7, #16]
 800c42a:	f000 f839 	bl	800c4a0 <USBD_GetLen>
 800c42e:	4603      	mov	r3, r0
 800c430:	3301      	adds	r3, #1
 800c432:	b29b      	uxth	r3, r3
 800c434:	005b      	lsls	r3, r3, #1
 800c436:	b29a      	uxth	r2, r3
 800c438:	e001      	b.n	800c43e <USBD_GetString+0x42>
 800c43a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c442:	7dfb      	ldrb	r3, [r7, #23]
 800c444:	68ba      	ldr	r2, [r7, #8]
 800c446:	4413      	add	r3, r2
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7812      	ldrb	r2, [r2, #0]
 800c44c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c44e:	7dfb      	ldrb	r3, [r7, #23]
 800c450:	3301      	adds	r3, #1
 800c452:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c454:	7dfb      	ldrb	r3, [r7, #23]
 800c456:	68ba      	ldr	r2, [r7, #8]
 800c458:	4413      	add	r3, r2
 800c45a:	2203      	movs	r2, #3
 800c45c:	701a      	strb	r2, [r3, #0]
  idx++;
 800c45e:	7dfb      	ldrb	r3, [r7, #23]
 800c460:	3301      	adds	r3, #1
 800c462:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c464:	e013      	b.n	800c48e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c466:	7dfb      	ldrb	r3, [r7, #23]
 800c468:	68ba      	ldr	r2, [r7, #8]
 800c46a:	4413      	add	r3, r2
 800c46c:	693a      	ldr	r2, [r7, #16]
 800c46e:	7812      	ldrb	r2, [r2, #0]
 800c470:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c472:	693b      	ldr	r3, [r7, #16]
 800c474:	3301      	adds	r3, #1
 800c476:	613b      	str	r3, [r7, #16]
    idx++;
 800c478:	7dfb      	ldrb	r3, [r7, #23]
 800c47a:	3301      	adds	r3, #1
 800c47c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c47e:	7dfb      	ldrb	r3, [r7, #23]
 800c480:	68ba      	ldr	r2, [r7, #8]
 800c482:	4413      	add	r3, r2
 800c484:	2200      	movs	r2, #0
 800c486:	701a      	strb	r2, [r3, #0]
    idx++;
 800c488:	7dfb      	ldrb	r3, [r7, #23]
 800c48a:	3301      	adds	r3, #1
 800c48c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c48e:	693b      	ldr	r3, [r7, #16]
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	2b00      	cmp	r3, #0
 800c494:	d1e7      	bne.n	800c466 <USBD_GetString+0x6a>
 800c496:	e000      	b.n	800c49a <USBD_GetString+0x9e>
    return;
 800c498:	bf00      	nop
  }
}
 800c49a:	3718      	adds	r7, #24
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c4a8:	2300      	movs	r3, #0
 800c4aa:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c4b0:	e005      	b.n	800c4be <USBD_GetLen+0x1e>
  {
    len++;
 800c4b2:	7bfb      	ldrb	r3, [r7, #15]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3301      	adds	r3, #1
 800c4bc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c4be:	68bb      	ldr	r3, [r7, #8]
 800c4c0:	781b      	ldrb	r3, [r3, #0]
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d1f5      	bne.n	800c4b2 <USBD_GetLen+0x12>
  }

  return len;
 800c4c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3714      	adds	r7, #20
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4d2:	4770      	bx	lr

0800c4d4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c4d4:	b580      	push	{r7, lr}
 800c4d6:	b084      	sub	sp, #16
 800c4d8:	af00      	add	r7, sp, #0
 800c4da:	60f8      	str	r0, [r7, #12]
 800c4dc:	60b9      	str	r1, [r7, #8]
 800c4de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c4e0:	68fb      	ldr	r3, [r7, #12]
 800c4e2:	2202      	movs	r2, #2
 800c4e4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	687a      	ldr	r2, [r7, #4]
 800c4ec:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	687a      	ldr	r2, [r7, #4]
 800c4f2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	68ba      	ldr	r2, [r7, #8]
 800c4f8:	2100      	movs	r1, #0
 800c4fa:	68f8      	ldr	r0, [r7, #12]
 800c4fc:	f002 fe63 	bl	800f1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c500:	2300      	movs	r3, #0
}
 800c502:	4618      	mov	r0, r3
 800c504:	3710      	adds	r7, #16
 800c506:	46bd      	mov	sp, r7
 800c508:	bd80      	pop	{r7, pc}

0800c50a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c50a:	b580      	push	{r7, lr}
 800c50c:	b084      	sub	sp, #16
 800c50e:	af00      	add	r7, sp, #0
 800c510:	60f8      	str	r0, [r7, #12]
 800c512:	60b9      	str	r1, [r7, #8]
 800c514:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	68ba      	ldr	r2, [r7, #8]
 800c51a:	2100      	movs	r1, #0
 800c51c:	68f8      	ldr	r0, [r7, #12]
 800c51e:	f002 fe52 	bl	800f1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c522:	2300      	movs	r3, #0
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b084      	sub	sp, #16
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	60b9      	str	r1, [r7, #8]
 800c536:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	2203      	movs	r2, #3
 800c53c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c548:	68fb      	ldr	r3, [r7, #12]
 800c54a:	687a      	ldr	r2, [r7, #4]
 800c54c:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	68ba      	ldr	r2, [r7, #8]
 800c554:	2100      	movs	r1, #0
 800c556:	68f8      	ldr	r0, [r7, #12]
 800c558:	f002 fe56 	bl	800f208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c55c:	2300      	movs	r3, #0
}
 800c55e:	4618      	mov	r0, r3
 800c560:	3710      	adds	r7, #16
 800c562:	46bd      	mov	sp, r7
 800c564:	bd80      	pop	{r7, pc}

0800c566 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c566:	b580      	push	{r7, lr}
 800c568:	b084      	sub	sp, #16
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	60f8      	str	r0, [r7, #12]
 800c56e:	60b9      	str	r1, [r7, #8]
 800c570:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c572:	687b      	ldr	r3, [r7, #4]
 800c574:	68ba      	ldr	r2, [r7, #8]
 800c576:	2100      	movs	r1, #0
 800c578:	68f8      	ldr	r0, [r7, #12]
 800c57a:	f002 fe45 	bl	800f208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c57e:	2300      	movs	r3, #0
}
 800c580:	4618      	mov	r0, r3
 800c582:	3710      	adds	r7, #16
 800c584:	46bd      	mov	sp, r7
 800c586:	bd80      	pop	{r7, pc}

0800c588 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c588:	b580      	push	{r7, lr}
 800c58a:	b082      	sub	sp, #8
 800c58c:	af00      	add	r7, sp, #0
 800c58e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	2204      	movs	r2, #4
 800c594:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c598:	2300      	movs	r3, #0
 800c59a:	2200      	movs	r2, #0
 800c59c:	2100      	movs	r1, #0
 800c59e:	6878      	ldr	r0, [r7, #4]
 800c5a0:	f002 fe11 	bl	800f1c6 <USBD_LL_Transmit>

  return USBD_OK;
 800c5a4:	2300      	movs	r3, #0
}
 800c5a6:	4618      	mov	r0, r3
 800c5a8:	3708      	adds	r7, #8
 800c5aa:	46bd      	mov	sp, r7
 800c5ac:	bd80      	pop	{r7, pc}

0800c5ae <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c5ae:	b580      	push	{r7, lr}
 800c5b0:	b082      	sub	sp, #8
 800c5b2:	af00      	add	r7, sp, #0
 800c5b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2205      	movs	r2, #5
 800c5ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c5be:	2300      	movs	r3, #0
 800c5c0:	2200      	movs	r2, #0
 800c5c2:	2100      	movs	r1, #0
 800c5c4:	6878      	ldr	r0, [r7, #4]
 800c5c6:	f002 fe1f 	bl	800f208 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3708      	adds	r7, #8
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}

0800c5d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b084      	sub	sp, #16
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	4603      	mov	r3, r0
 800c5dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c5de:	79fb      	ldrb	r3, [r7, #7]
 800c5e0:	4a08      	ldr	r2, [pc, #32]	@ (800c604 <disk_status+0x30>)
 800c5e2:	009b      	lsls	r3, r3, #2
 800c5e4:	4413      	add	r3, r2
 800c5e6:	685b      	ldr	r3, [r3, #4]
 800c5e8:	685b      	ldr	r3, [r3, #4]
 800c5ea:	79fa      	ldrb	r2, [r7, #7]
 800c5ec:	4905      	ldr	r1, [pc, #20]	@ (800c604 <disk_status+0x30>)
 800c5ee:	440a      	add	r2, r1
 800c5f0:	7a12      	ldrb	r2, [r2, #8]
 800c5f2:	4610      	mov	r0, r2
 800c5f4:	4798      	blx	r3
 800c5f6:	4603      	mov	r3, r0
 800c5f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c5fa:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5fc:	4618      	mov	r0, r3
 800c5fe:	3710      	adds	r7, #16
 800c600:	46bd      	mov	sp, r7
 800c602:	bd80      	pop	{r7, pc}
 800c604:	20000420 	.word	0x20000420

0800c608 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c608:	b580      	push	{r7, lr}
 800c60a:	b084      	sub	sp, #16
 800c60c:	af00      	add	r7, sp, #0
 800c60e:	4603      	mov	r3, r0
 800c610:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c612:	2300      	movs	r3, #0
 800c614:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c616:	79fb      	ldrb	r3, [r7, #7]
 800c618:	4a0e      	ldr	r2, [pc, #56]	@ (800c654 <disk_initialize+0x4c>)
 800c61a:	5cd3      	ldrb	r3, [r2, r3]
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	d114      	bne.n	800c64a <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c620:	79fb      	ldrb	r3, [r7, #7]
 800c622:	4a0c      	ldr	r2, [pc, #48]	@ (800c654 <disk_initialize+0x4c>)
 800c624:	009b      	lsls	r3, r3, #2
 800c626:	4413      	add	r3, r2
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	79fa      	ldrb	r2, [r7, #7]
 800c62e:	4909      	ldr	r1, [pc, #36]	@ (800c654 <disk_initialize+0x4c>)
 800c630:	440a      	add	r2, r1
 800c632:	7a12      	ldrb	r2, [r2, #8]
 800c634:	4610      	mov	r0, r2
 800c636:	4798      	blx	r3
 800c638:	4603      	mov	r3, r0
 800c63a:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c63c:	7bfb      	ldrb	r3, [r7, #15]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d103      	bne.n	800c64a <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c642:	79fb      	ldrb	r3, [r7, #7]
 800c644:	4a03      	ldr	r2, [pc, #12]	@ (800c654 <disk_initialize+0x4c>)
 800c646:	2101      	movs	r1, #1
 800c648:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c64a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c64c:	4618      	mov	r0, r3
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}
 800c654:	20000420 	.word	0x20000420

0800c658 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c658:	b590      	push	{r4, r7, lr}
 800c65a:	b087      	sub	sp, #28
 800c65c:	af00      	add	r7, sp, #0
 800c65e:	60b9      	str	r1, [r7, #8]
 800c660:	607a      	str	r2, [r7, #4]
 800c662:	603b      	str	r3, [r7, #0]
 800c664:	4603      	mov	r3, r0
 800c666:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c668:	7bfb      	ldrb	r3, [r7, #15]
 800c66a:	4a0a      	ldr	r2, [pc, #40]	@ (800c694 <disk_read+0x3c>)
 800c66c:	009b      	lsls	r3, r3, #2
 800c66e:	4413      	add	r3, r2
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	689c      	ldr	r4, [r3, #8]
 800c674:	7bfb      	ldrb	r3, [r7, #15]
 800c676:	4a07      	ldr	r2, [pc, #28]	@ (800c694 <disk_read+0x3c>)
 800c678:	4413      	add	r3, r2
 800c67a:	7a18      	ldrb	r0, [r3, #8]
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	68b9      	ldr	r1, [r7, #8]
 800c682:	47a0      	blx	r4
 800c684:	4603      	mov	r3, r0
 800c686:	75fb      	strb	r3, [r7, #23]
  return res;
 800c688:	7dfb      	ldrb	r3, [r7, #23]
}
 800c68a:	4618      	mov	r0, r3
 800c68c:	371c      	adds	r7, #28
 800c68e:	46bd      	mov	sp, r7
 800c690:	bd90      	pop	{r4, r7, pc}
 800c692:	bf00      	nop
 800c694:	20000420 	.word	0x20000420

0800c698 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c698:	b590      	push	{r4, r7, lr}
 800c69a:	b087      	sub	sp, #28
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	60b9      	str	r1, [r7, #8]
 800c6a0:	607a      	str	r2, [r7, #4]
 800c6a2:	603b      	str	r3, [r7, #0]
 800c6a4:	4603      	mov	r3, r0
 800c6a6:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c6a8:	7bfb      	ldrb	r3, [r7, #15]
 800c6aa:	4a0a      	ldr	r2, [pc, #40]	@ (800c6d4 <disk_write+0x3c>)
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4413      	add	r3, r2
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	68dc      	ldr	r4, [r3, #12]
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	4a07      	ldr	r2, [pc, #28]	@ (800c6d4 <disk_write+0x3c>)
 800c6b8:	4413      	add	r3, r2
 800c6ba:	7a18      	ldrb	r0, [r3, #8]
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	687a      	ldr	r2, [r7, #4]
 800c6c0:	68b9      	ldr	r1, [r7, #8]
 800c6c2:	47a0      	blx	r4
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	75fb      	strb	r3, [r7, #23]
  return res;
 800c6c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	371c      	adds	r7, #28
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd90      	pop	{r4, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20000420 	.word	0x20000420

0800c6d8 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b084      	sub	sp, #16
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	4603      	mov	r3, r0
 800c6e0:	603a      	str	r2, [r7, #0]
 800c6e2:	71fb      	strb	r3, [r7, #7]
 800c6e4:	460b      	mov	r3, r1
 800c6e6:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c6e8:	79fb      	ldrb	r3, [r7, #7]
 800c6ea:	4a09      	ldr	r2, [pc, #36]	@ (800c710 <disk_ioctl+0x38>)
 800c6ec:	009b      	lsls	r3, r3, #2
 800c6ee:	4413      	add	r3, r2
 800c6f0:	685b      	ldr	r3, [r3, #4]
 800c6f2:	691b      	ldr	r3, [r3, #16]
 800c6f4:	79fa      	ldrb	r2, [r7, #7]
 800c6f6:	4906      	ldr	r1, [pc, #24]	@ (800c710 <disk_ioctl+0x38>)
 800c6f8:	440a      	add	r2, r1
 800c6fa:	7a10      	ldrb	r0, [r2, #8]
 800c6fc:	79b9      	ldrb	r1, [r7, #6]
 800c6fe:	683a      	ldr	r2, [r7, #0]
 800c700:	4798      	blx	r3
 800c702:	4603      	mov	r3, r0
 800c704:	73fb      	strb	r3, [r7, #15]
  return res;
 800c706:	7bfb      	ldrb	r3, [r7, #15]
}
 800c708:	4618      	mov	r0, r3
 800c70a:	3710      	adds	r7, #16
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}
 800c710:	20000420 	.word	0x20000420

0800c714 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c714:	b480      	push	{r7}
 800c716:	b085      	sub	sp, #20
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	3301      	adds	r3, #1
 800c720:	781b      	ldrb	r3, [r3, #0]
 800c722:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c724:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c728:	021b      	lsls	r3, r3, #8
 800c72a:	b21a      	sxth	r2, r3
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	781b      	ldrb	r3, [r3, #0]
 800c730:	b21b      	sxth	r3, r3
 800c732:	4313      	orrs	r3, r2
 800c734:	b21b      	sxth	r3, r3
 800c736:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c738:	89fb      	ldrh	r3, [r7, #14]
}
 800c73a:	4618      	mov	r0, r3
 800c73c:	3714      	adds	r7, #20
 800c73e:	46bd      	mov	sp, r7
 800c740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c744:	4770      	bx	lr

0800c746 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c746:	b480      	push	{r7}
 800c748:	b085      	sub	sp, #20
 800c74a:	af00      	add	r7, sp, #0
 800c74c:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3303      	adds	r3, #3
 800c752:	781b      	ldrb	r3, [r3, #0]
 800c754:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	021b      	lsls	r3, r3, #8
 800c75a:	687a      	ldr	r2, [r7, #4]
 800c75c:	3202      	adds	r2, #2
 800c75e:	7812      	ldrb	r2, [r2, #0]
 800c760:	4313      	orrs	r3, r2
 800c762:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c764:	68fb      	ldr	r3, [r7, #12]
 800c766:	021b      	lsls	r3, r3, #8
 800c768:	687a      	ldr	r2, [r7, #4]
 800c76a:	3201      	adds	r2, #1
 800c76c:	7812      	ldrb	r2, [r2, #0]
 800c76e:	4313      	orrs	r3, r2
 800c770:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c772:	68fb      	ldr	r3, [r7, #12]
 800c774:	021b      	lsls	r3, r3, #8
 800c776:	687a      	ldr	r2, [r7, #4]
 800c778:	7812      	ldrb	r2, [r2, #0]
 800c77a:	4313      	orrs	r3, r2
 800c77c:	60fb      	str	r3, [r7, #12]
	return rv;
 800c77e:	68fb      	ldr	r3, [r7, #12]
}
 800c780:	4618      	mov	r0, r3
 800c782:	3714      	adds	r7, #20
 800c784:	46bd      	mov	sp, r7
 800c786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78a:	4770      	bx	lr

0800c78c <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c78c:	b480      	push	{r7}
 800c78e:	b083      	sub	sp, #12
 800c790:	af00      	add	r7, sp, #0
 800c792:	6078      	str	r0, [r7, #4]
 800c794:	460b      	mov	r3, r1
 800c796:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	1c5a      	adds	r2, r3, #1
 800c79c:	607a      	str	r2, [r7, #4]
 800c79e:	887a      	ldrh	r2, [r7, #2]
 800c7a0:	b2d2      	uxtb	r2, r2
 800c7a2:	701a      	strb	r2, [r3, #0]
 800c7a4:	887b      	ldrh	r3, [r7, #2]
 800c7a6:	0a1b      	lsrs	r3, r3, #8
 800c7a8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	1c5a      	adds	r2, r3, #1
 800c7ae:	607a      	str	r2, [r7, #4]
 800c7b0:	887a      	ldrh	r2, [r7, #2]
 800c7b2:	b2d2      	uxtb	r2, r2
 800c7b4:	701a      	strb	r2, [r3, #0]
}
 800c7b6:	bf00      	nop
 800c7b8:	370c      	adds	r7, #12
 800c7ba:	46bd      	mov	sp, r7
 800c7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c0:	4770      	bx	lr

0800c7c2 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c7c2:	b480      	push	{r7}
 800c7c4:	b083      	sub	sp, #12
 800c7c6:	af00      	add	r7, sp, #0
 800c7c8:	6078      	str	r0, [r7, #4]
 800c7ca:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	1c5a      	adds	r2, r3, #1
 800c7d0:	607a      	str	r2, [r7, #4]
 800c7d2:	683a      	ldr	r2, [r7, #0]
 800c7d4:	b2d2      	uxtb	r2, r2
 800c7d6:	701a      	strb	r2, [r3, #0]
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	0a1b      	lsrs	r3, r3, #8
 800c7dc:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	1c5a      	adds	r2, r3, #1
 800c7e2:	607a      	str	r2, [r7, #4]
 800c7e4:	683a      	ldr	r2, [r7, #0]
 800c7e6:	b2d2      	uxtb	r2, r2
 800c7e8:	701a      	strb	r2, [r3, #0]
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	0a1b      	lsrs	r3, r3, #8
 800c7ee:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	1c5a      	adds	r2, r3, #1
 800c7f4:	607a      	str	r2, [r7, #4]
 800c7f6:	683a      	ldr	r2, [r7, #0]
 800c7f8:	b2d2      	uxtb	r2, r2
 800c7fa:	701a      	strb	r2, [r3, #0]
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	0a1b      	lsrs	r3, r3, #8
 800c800:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	1c5a      	adds	r2, r3, #1
 800c806:	607a      	str	r2, [r7, #4]
 800c808:	683a      	ldr	r2, [r7, #0]
 800c80a:	b2d2      	uxtb	r2, r2
 800c80c:	701a      	strb	r2, [r3, #0]
}
 800c80e:	bf00      	nop
 800c810:	370c      	adds	r7, #12
 800c812:	46bd      	mov	sp, r7
 800c814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c818:	4770      	bx	lr

0800c81a <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c81a:	b480      	push	{r7}
 800c81c:	b087      	sub	sp, #28
 800c81e:	af00      	add	r7, sp, #0
 800c820:	60f8      	str	r0, [r7, #12]
 800c822:	60b9      	str	r1, [r7, #8]
 800c824:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c826:	68fb      	ldr	r3, [r7, #12]
 800c828:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d00d      	beq.n	800c850 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c834:	693a      	ldr	r2, [r7, #16]
 800c836:	1c53      	adds	r3, r2, #1
 800c838:	613b      	str	r3, [r7, #16]
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	1c59      	adds	r1, r3, #1
 800c83e:	6179      	str	r1, [r7, #20]
 800c840:	7812      	ldrb	r2, [r2, #0]
 800c842:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	3b01      	subs	r3, #1
 800c848:	607b      	str	r3, [r7, #4]
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d1f1      	bne.n	800c834 <mem_cpy+0x1a>
	}
}
 800c850:	bf00      	nop
 800c852:	371c      	adds	r7, #28
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c85c:	b480      	push	{r7}
 800c85e:	b087      	sub	sp, #28
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c86c:	697b      	ldr	r3, [r7, #20]
 800c86e:	1c5a      	adds	r2, r3, #1
 800c870:	617a      	str	r2, [r7, #20]
 800c872:	68ba      	ldr	r2, [r7, #8]
 800c874:	b2d2      	uxtb	r2, r2
 800c876:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	3b01      	subs	r3, #1
 800c87c:	607b      	str	r3, [r7, #4]
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d1f3      	bne.n	800c86c <mem_set+0x10>
}
 800c884:	bf00      	nop
 800c886:	bf00      	nop
 800c888:	371c      	adds	r7, #28
 800c88a:	46bd      	mov	sp, r7
 800c88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c890:	4770      	bx	lr

0800c892 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c892:	b480      	push	{r7}
 800c894:	b089      	sub	sp, #36	@ 0x24
 800c896:	af00      	add	r7, sp, #0
 800c898:	60f8      	str	r0, [r7, #12]
 800c89a:	60b9      	str	r1, [r7, #8]
 800c89c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c89e:	68fb      	ldr	r3, [r7, #12]
 800c8a0:	61fb      	str	r3, [r7, #28]
 800c8a2:	68bb      	ldr	r3, [r7, #8]
 800c8a4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c8a6:	2300      	movs	r3, #0
 800c8a8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	1c5a      	adds	r2, r3, #1
 800c8ae:	61fa      	str	r2, [r7, #28]
 800c8b0:	781b      	ldrb	r3, [r3, #0]
 800c8b2:	4619      	mov	r1, r3
 800c8b4:	69bb      	ldr	r3, [r7, #24]
 800c8b6:	1c5a      	adds	r2, r3, #1
 800c8b8:	61ba      	str	r2, [r7, #24]
 800c8ba:	781b      	ldrb	r3, [r3, #0]
 800c8bc:	1acb      	subs	r3, r1, r3
 800c8be:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	3b01      	subs	r3, #1
 800c8c4:	607b      	str	r3, [r7, #4]
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2b00      	cmp	r3, #0
 800c8ca:	d002      	beq.n	800c8d2 <mem_cmp+0x40>
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	2b00      	cmp	r3, #0
 800c8d0:	d0eb      	beq.n	800c8aa <mem_cmp+0x18>

	return r;
 800c8d2:	697b      	ldr	r3, [r7, #20]
}
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	3724      	adds	r7, #36	@ 0x24
 800c8d8:	46bd      	mov	sp, r7
 800c8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8de:	4770      	bx	lr

0800c8e0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c8e0:	b480      	push	{r7}
 800c8e2:	b083      	sub	sp, #12
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]
 800c8e8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c8ea:	e002      	b.n	800c8f2 <chk_chr+0x12>
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	3301      	adds	r3, #1
 800c8f0:	607b      	str	r3, [r7, #4]
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	781b      	ldrb	r3, [r3, #0]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d005      	beq.n	800c906 <chk_chr+0x26>
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	781b      	ldrb	r3, [r3, #0]
 800c8fe:	461a      	mov	r2, r3
 800c900:	683b      	ldr	r3, [r7, #0]
 800c902:	4293      	cmp	r3, r2
 800c904:	d1f2      	bne.n	800c8ec <chk_chr+0xc>
	return *str;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	781b      	ldrb	r3, [r3, #0]
}
 800c90a:	4618      	mov	r0, r3
 800c90c:	370c      	adds	r7, #12
 800c90e:	46bd      	mov	sp, r7
 800c910:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c914:	4770      	bx	lr
	...

0800c918 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c918:	b480      	push	{r7}
 800c91a:	b085      	sub	sp, #20
 800c91c:	af00      	add	r7, sp, #0
 800c91e:	6078      	str	r0, [r7, #4]
 800c920:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c922:	2300      	movs	r3, #0
 800c924:	60bb      	str	r3, [r7, #8]
 800c926:	68bb      	ldr	r3, [r7, #8]
 800c928:	60fb      	str	r3, [r7, #12]
 800c92a:	e029      	b.n	800c980 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c92c:	4a27      	ldr	r2, [pc, #156]	@ (800c9cc <chk_lock+0xb4>)
 800c92e:	68fb      	ldr	r3, [r7, #12]
 800c930:	011b      	lsls	r3, r3, #4
 800c932:	4413      	add	r3, r2
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d01d      	beq.n	800c976 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c93a:	4a24      	ldr	r2, [pc, #144]	@ (800c9cc <chk_lock+0xb4>)
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	011b      	lsls	r3, r3, #4
 800c940:	4413      	add	r3, r2
 800c942:	681a      	ldr	r2, [r3, #0]
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	429a      	cmp	r2, r3
 800c94a:	d116      	bne.n	800c97a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c94c:	4a1f      	ldr	r2, [pc, #124]	@ (800c9cc <chk_lock+0xb4>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	011b      	lsls	r3, r3, #4
 800c952:	4413      	add	r3, r2
 800c954:	3304      	adds	r3, #4
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c95c:	429a      	cmp	r2, r3
 800c95e:	d10c      	bne.n	800c97a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c960:	4a1a      	ldr	r2, [pc, #104]	@ (800c9cc <chk_lock+0xb4>)
 800c962:	68fb      	ldr	r3, [r7, #12]
 800c964:	011b      	lsls	r3, r3, #4
 800c966:	4413      	add	r3, r2
 800c968:	3308      	adds	r3, #8
 800c96a:	681a      	ldr	r2, [r3, #0]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c970:	429a      	cmp	r2, r3
 800c972:	d102      	bne.n	800c97a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c974:	e007      	b.n	800c986 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c976:	2301      	movs	r3, #1
 800c978:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	3301      	adds	r3, #1
 800c97e:	60fb      	str	r3, [r7, #12]
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d9d2      	bls.n	800c92c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	2b02      	cmp	r3, #2
 800c98a:	d109      	bne.n	800c9a0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c98c:	68bb      	ldr	r3, [r7, #8]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d102      	bne.n	800c998 <chk_lock+0x80>
 800c992:	683b      	ldr	r3, [r7, #0]
 800c994:	2b02      	cmp	r3, #2
 800c996:	d101      	bne.n	800c99c <chk_lock+0x84>
 800c998:	2300      	movs	r3, #0
 800c99a:	e010      	b.n	800c9be <chk_lock+0xa6>
 800c99c:	2312      	movs	r3, #18
 800c99e:	e00e      	b.n	800c9be <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	d108      	bne.n	800c9b8 <chk_lock+0xa0>
 800c9a6:	4a09      	ldr	r2, [pc, #36]	@ (800c9cc <chk_lock+0xb4>)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	011b      	lsls	r3, r3, #4
 800c9ac:	4413      	add	r3, r2
 800c9ae:	330c      	adds	r3, #12
 800c9b0:	881b      	ldrh	r3, [r3, #0]
 800c9b2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c9b6:	d101      	bne.n	800c9bc <chk_lock+0xa4>
 800c9b8:	2310      	movs	r3, #16
 800c9ba:	e000      	b.n	800c9be <chk_lock+0xa6>
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3714      	adds	r7, #20
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9c8:	4770      	bx	lr
 800c9ca:	bf00      	nop
 800c9cc:	20000400 	.word	0x20000400

0800c9d0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c9d0:	b480      	push	{r7}
 800c9d2:	b083      	sub	sp, #12
 800c9d4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c9d6:	2300      	movs	r3, #0
 800c9d8:	607b      	str	r3, [r7, #4]
 800c9da:	e002      	b.n	800c9e2 <enq_lock+0x12>
 800c9dc:	687b      	ldr	r3, [r7, #4]
 800c9de:	3301      	adds	r3, #1
 800c9e0:	607b      	str	r3, [r7, #4]
 800c9e2:	687b      	ldr	r3, [r7, #4]
 800c9e4:	2b01      	cmp	r3, #1
 800c9e6:	d806      	bhi.n	800c9f6 <enq_lock+0x26>
 800c9e8:	4a09      	ldr	r2, [pc, #36]	@ (800ca10 <enq_lock+0x40>)
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	4413      	add	r3, r2
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d1f2      	bne.n	800c9dc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	bf14      	ite	ne
 800c9fc:	2301      	movne	r3, #1
 800c9fe:	2300      	moveq	r3, #0
 800ca00:	b2db      	uxtb	r3, r3
}
 800ca02:	4618      	mov	r0, r3
 800ca04:	370c      	adds	r7, #12
 800ca06:	46bd      	mov	sp, r7
 800ca08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca0c:	4770      	bx	lr
 800ca0e:	bf00      	nop
 800ca10:	20000400 	.word	0x20000400

0800ca14 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ca14:	b480      	push	{r7}
 800ca16:	b085      	sub	sp, #20
 800ca18:	af00      	add	r7, sp, #0
 800ca1a:	6078      	str	r0, [r7, #4]
 800ca1c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca1e:	2300      	movs	r3, #0
 800ca20:	60fb      	str	r3, [r7, #12]
 800ca22:	e01f      	b.n	800ca64 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ca24:	4a41      	ldr	r2, [pc, #260]	@ (800cb2c <inc_lock+0x118>)
 800ca26:	68fb      	ldr	r3, [r7, #12]
 800ca28:	011b      	lsls	r3, r3, #4
 800ca2a:	4413      	add	r3, r2
 800ca2c:	681a      	ldr	r2, [r3, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	429a      	cmp	r2, r3
 800ca34:	d113      	bne.n	800ca5e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ca36:	4a3d      	ldr	r2, [pc, #244]	@ (800cb2c <inc_lock+0x118>)
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	011b      	lsls	r3, r3, #4
 800ca3c:	4413      	add	r3, r2
 800ca3e:	3304      	adds	r3, #4
 800ca40:	681a      	ldr	r2, [r3, #0]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ca46:	429a      	cmp	r2, r3
 800ca48:	d109      	bne.n	800ca5e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ca4a:	4a38      	ldr	r2, [pc, #224]	@ (800cb2c <inc_lock+0x118>)
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	011b      	lsls	r3, r3, #4
 800ca50:	4413      	add	r3, r2
 800ca52:	3308      	adds	r3, #8
 800ca54:	681a      	ldr	r2, [r3, #0]
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ca5a:	429a      	cmp	r2, r3
 800ca5c:	d006      	beq.n	800ca6c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	3301      	adds	r3, #1
 800ca62:	60fb      	str	r3, [r7, #12]
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	2b01      	cmp	r3, #1
 800ca68:	d9dc      	bls.n	800ca24 <inc_lock+0x10>
 800ca6a:	e000      	b.n	800ca6e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ca6c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ca6e:	68fb      	ldr	r3, [r7, #12]
 800ca70:	2b02      	cmp	r3, #2
 800ca72:	d132      	bne.n	800cada <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ca74:	2300      	movs	r3, #0
 800ca76:	60fb      	str	r3, [r7, #12]
 800ca78:	e002      	b.n	800ca80 <inc_lock+0x6c>
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	3301      	adds	r3, #1
 800ca7e:	60fb      	str	r3, [r7, #12]
 800ca80:	68fb      	ldr	r3, [r7, #12]
 800ca82:	2b01      	cmp	r3, #1
 800ca84:	d806      	bhi.n	800ca94 <inc_lock+0x80>
 800ca86:	4a29      	ldr	r2, [pc, #164]	@ (800cb2c <inc_lock+0x118>)
 800ca88:	68fb      	ldr	r3, [r7, #12]
 800ca8a:	011b      	lsls	r3, r3, #4
 800ca8c:	4413      	add	r3, r2
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d1f2      	bne.n	800ca7a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	2b02      	cmp	r3, #2
 800ca98:	d101      	bne.n	800ca9e <inc_lock+0x8a>
 800ca9a:	2300      	movs	r3, #0
 800ca9c:	e040      	b.n	800cb20 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	4922      	ldr	r1, [pc, #136]	@ (800cb2c <inc_lock+0x118>)
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	011b      	lsls	r3, r3, #4
 800caa8:	440b      	add	r3, r1
 800caaa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	689a      	ldr	r2, [r3, #8]
 800cab0:	491e      	ldr	r1, [pc, #120]	@ (800cb2c <inc_lock+0x118>)
 800cab2:	68fb      	ldr	r3, [r7, #12]
 800cab4:	011b      	lsls	r3, r3, #4
 800cab6:	440b      	add	r3, r1
 800cab8:	3304      	adds	r3, #4
 800caba:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	695a      	ldr	r2, [r3, #20]
 800cac0:	491a      	ldr	r1, [pc, #104]	@ (800cb2c <inc_lock+0x118>)
 800cac2:	68fb      	ldr	r3, [r7, #12]
 800cac4:	011b      	lsls	r3, r3, #4
 800cac6:	440b      	add	r3, r1
 800cac8:	3308      	adds	r3, #8
 800caca:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cacc:	4a17      	ldr	r2, [pc, #92]	@ (800cb2c <inc_lock+0x118>)
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	011b      	lsls	r3, r3, #4
 800cad2:	4413      	add	r3, r2
 800cad4:	330c      	adds	r3, #12
 800cad6:	2200      	movs	r2, #0
 800cad8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d009      	beq.n	800caf4 <inc_lock+0xe0>
 800cae0:	4a12      	ldr	r2, [pc, #72]	@ (800cb2c <inc_lock+0x118>)
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	011b      	lsls	r3, r3, #4
 800cae6:	4413      	add	r3, r2
 800cae8:	330c      	adds	r3, #12
 800caea:	881b      	ldrh	r3, [r3, #0]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d001      	beq.n	800caf4 <inc_lock+0xe0>
 800caf0:	2300      	movs	r3, #0
 800caf2:	e015      	b.n	800cb20 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800caf4:	683b      	ldr	r3, [r7, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d108      	bne.n	800cb0c <inc_lock+0xf8>
 800cafa:	4a0c      	ldr	r2, [pc, #48]	@ (800cb2c <inc_lock+0x118>)
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	011b      	lsls	r3, r3, #4
 800cb00:	4413      	add	r3, r2
 800cb02:	330c      	adds	r3, #12
 800cb04:	881b      	ldrh	r3, [r3, #0]
 800cb06:	3301      	adds	r3, #1
 800cb08:	b29a      	uxth	r2, r3
 800cb0a:	e001      	b.n	800cb10 <inc_lock+0xfc>
 800cb0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cb10:	4906      	ldr	r1, [pc, #24]	@ (800cb2c <inc_lock+0x118>)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	011b      	lsls	r3, r3, #4
 800cb16:	440b      	add	r3, r1
 800cb18:	330c      	adds	r3, #12
 800cb1a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	3301      	adds	r3, #1
}
 800cb20:	4618      	mov	r0, r3
 800cb22:	3714      	adds	r7, #20
 800cb24:	46bd      	mov	sp, r7
 800cb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb2a:	4770      	bx	lr
 800cb2c:	20000400 	.word	0x20000400

0800cb30 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cb30:	b480      	push	{r7}
 800cb32:	b085      	sub	sp, #20
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	3b01      	subs	r3, #1
 800cb3c:	607b      	str	r3, [r7, #4]
 800cb3e:	687b      	ldr	r3, [r7, #4]
 800cb40:	2b01      	cmp	r3, #1
 800cb42:	d825      	bhi.n	800cb90 <dec_lock+0x60>
		n = Files[i].ctr;
 800cb44:	4a17      	ldr	r2, [pc, #92]	@ (800cba4 <dec_lock+0x74>)
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	011b      	lsls	r3, r3, #4
 800cb4a:	4413      	add	r3, r2
 800cb4c:	330c      	adds	r3, #12
 800cb4e:	881b      	ldrh	r3, [r3, #0]
 800cb50:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cb52:	89fb      	ldrh	r3, [r7, #14]
 800cb54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cb58:	d101      	bne.n	800cb5e <dec_lock+0x2e>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cb5e:	89fb      	ldrh	r3, [r7, #14]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d002      	beq.n	800cb6a <dec_lock+0x3a>
 800cb64:	89fb      	ldrh	r3, [r7, #14]
 800cb66:	3b01      	subs	r3, #1
 800cb68:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cb6a:	4a0e      	ldr	r2, [pc, #56]	@ (800cba4 <dec_lock+0x74>)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	011b      	lsls	r3, r3, #4
 800cb70:	4413      	add	r3, r2
 800cb72:	330c      	adds	r3, #12
 800cb74:	89fa      	ldrh	r2, [r7, #14]
 800cb76:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cb78:	89fb      	ldrh	r3, [r7, #14]
 800cb7a:	2b00      	cmp	r3, #0
 800cb7c:	d105      	bne.n	800cb8a <dec_lock+0x5a>
 800cb7e:	4a09      	ldr	r2, [pc, #36]	@ (800cba4 <dec_lock+0x74>)
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	011b      	lsls	r3, r3, #4
 800cb84:	4413      	add	r3, r2
 800cb86:	2200      	movs	r2, #0
 800cb88:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cb8a:	2300      	movs	r3, #0
 800cb8c:	737b      	strb	r3, [r7, #13]
 800cb8e:	e001      	b.n	800cb94 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cb90:	2302      	movs	r3, #2
 800cb92:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cb94:	7b7b      	ldrb	r3, [r7, #13]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr
 800cba2:	bf00      	nop
 800cba4:	20000400 	.word	0x20000400

0800cba8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cba8:	b480      	push	{r7}
 800cbaa:	b085      	sub	sp, #20
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	e010      	b.n	800cbd8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cbb6:	4a0d      	ldr	r2, [pc, #52]	@ (800cbec <clear_lock+0x44>)
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	011b      	lsls	r3, r3, #4
 800cbbc:	4413      	add	r3, r2
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d105      	bne.n	800cbd2 <clear_lock+0x2a>
 800cbc6:	4a09      	ldr	r2, [pc, #36]	@ (800cbec <clear_lock+0x44>)
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	011b      	lsls	r3, r3, #4
 800cbcc:	4413      	add	r3, r2
 800cbce:	2200      	movs	r2, #0
 800cbd0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	3301      	adds	r3, #1
 800cbd6:	60fb      	str	r3, [r7, #12]
 800cbd8:	68fb      	ldr	r3, [r7, #12]
 800cbda:	2b01      	cmp	r3, #1
 800cbdc:	d9eb      	bls.n	800cbb6 <clear_lock+0xe>
	}
}
 800cbde:	bf00      	nop
 800cbe0:	bf00      	nop
 800cbe2:	3714      	adds	r7, #20
 800cbe4:	46bd      	mov	sp, r7
 800cbe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbea:	4770      	bx	lr
 800cbec:	20000400 	.word	0x20000400

0800cbf0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cbf8:	2300      	movs	r3, #0
 800cbfa:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	78db      	ldrb	r3, [r3, #3]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d034      	beq.n	800cc6e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cc04:	687b      	ldr	r3, [r7, #4]
 800cc06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc08:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	7858      	ldrb	r0, [r3, #1]
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc14:	2301      	movs	r3, #1
 800cc16:	697a      	ldr	r2, [r7, #20]
 800cc18:	f7ff fd3e 	bl	800c698 <disk_write>
 800cc1c:	4603      	mov	r3, r0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	73fb      	strb	r3, [r7, #15]
 800cc26:	e022      	b.n	800cc6e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	2200      	movs	r2, #0
 800cc2c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	6a1b      	ldr	r3, [r3, #32]
 800cc32:	697a      	ldr	r2, [r7, #20]
 800cc34:	1ad2      	subs	r2, r2, r3
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	699b      	ldr	r3, [r3, #24]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d217      	bcs.n	800cc6e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	789b      	ldrb	r3, [r3, #2]
 800cc42:	613b      	str	r3, [r7, #16]
 800cc44:	e010      	b.n	800cc68 <sync_window+0x78>
					wsect += fs->fsize;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	699b      	ldr	r3, [r3, #24]
 800cc4a:	697a      	ldr	r2, [r7, #20]
 800cc4c:	4413      	add	r3, r2
 800cc4e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	7858      	ldrb	r0, [r3, #1]
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc5a:	2301      	movs	r3, #1
 800cc5c:	697a      	ldr	r2, [r7, #20]
 800cc5e:	f7ff fd1b 	bl	800c698 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cc62:	693b      	ldr	r3, [r7, #16]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	613b      	str	r3, [r7, #16]
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	2b01      	cmp	r3, #1
 800cc6c:	d8eb      	bhi.n	800cc46 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cc6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc70:	4618      	mov	r0, r3
 800cc72:	3718      	adds	r7, #24
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bd80      	pop	{r7, pc}

0800cc78 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cc78:	b580      	push	{r7, lr}
 800cc7a:	b084      	sub	sp, #16
 800cc7c:	af00      	add	r7, sp, #0
 800cc7e:	6078      	str	r0, [r7, #4]
 800cc80:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cc82:	2300      	movs	r3, #0
 800cc84:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc8a:	683a      	ldr	r2, [r7, #0]
 800cc8c:	429a      	cmp	r2, r3
 800cc8e:	d01b      	beq.n	800ccc8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f7ff ffad 	bl	800cbf0 <sync_window>
 800cc96:	4603      	mov	r3, r0
 800cc98:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cc9a:	7bfb      	ldrb	r3, [r7, #15]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d113      	bne.n	800ccc8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	7858      	ldrb	r0, [r3, #1]
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ccaa:	2301      	movs	r3, #1
 800ccac:	683a      	ldr	r2, [r7, #0]
 800ccae:	f7ff fcd3 	bl	800c658 <disk_read>
 800ccb2:	4603      	mov	r3, r0
 800ccb4:	2b00      	cmp	r3, #0
 800ccb6:	d004      	beq.n	800ccc2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800ccb8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ccbc:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800ccbe:	2301      	movs	r3, #1
 800ccc0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	683a      	ldr	r2, [r7, #0]
 800ccc6:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800ccc8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccca:	4618      	mov	r0, r3
 800cccc:	3710      	adds	r7, #16
 800ccce:	46bd      	mov	sp, r7
 800ccd0:	bd80      	pop	{r7, pc}
	...

0800ccd4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800ccd4:	b580      	push	{r7, lr}
 800ccd6:	b084      	sub	sp, #16
 800ccd8:	af00      	add	r7, sp, #0
 800ccda:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800ccdc:	6878      	ldr	r0, [r7, #4]
 800ccde:	f7ff ff87 	bl	800cbf0 <sync_window>
 800cce2:	4603      	mov	r3, r0
 800cce4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cce6:	7bfb      	ldrb	r3, [r7, #15]
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d158      	bne.n	800cd9e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	781b      	ldrb	r3, [r3, #0]
 800ccf0:	2b03      	cmp	r3, #3
 800ccf2:	d148      	bne.n	800cd86 <sync_fs+0xb2>
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	791b      	ldrb	r3, [r3, #4]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d144      	bne.n	800cd86 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	3330      	adds	r3, #48	@ 0x30
 800cd00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cd04:	2100      	movs	r1, #0
 800cd06:	4618      	mov	r0, r3
 800cd08:	f7ff fda8 	bl	800c85c <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	3330      	adds	r3, #48	@ 0x30
 800cd10:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cd14:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cd18:	4618      	mov	r0, r3
 800cd1a:	f7ff fd37 	bl	800c78c <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	3330      	adds	r3, #48	@ 0x30
 800cd22:	4921      	ldr	r1, [pc, #132]	@ (800cda8 <sync_fs+0xd4>)
 800cd24:	4618      	mov	r0, r3
 800cd26:	f7ff fd4c 	bl	800c7c2 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	3330      	adds	r3, #48	@ 0x30
 800cd2e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cd32:	491e      	ldr	r1, [pc, #120]	@ (800cdac <sync_fs+0xd8>)
 800cd34:	4618      	mov	r0, r3
 800cd36:	f7ff fd44 	bl	800c7c2 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	3330      	adds	r3, #48	@ 0x30
 800cd3e:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	691b      	ldr	r3, [r3, #16]
 800cd46:	4619      	mov	r1, r3
 800cd48:	4610      	mov	r0, r2
 800cd4a:	f7ff fd3a 	bl	800c7c2 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	3330      	adds	r3, #48	@ 0x30
 800cd52:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	68db      	ldr	r3, [r3, #12]
 800cd5a:	4619      	mov	r1, r3
 800cd5c:	4610      	mov	r0, r2
 800cd5e:	f7ff fd30 	bl	800c7c2 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	69db      	ldr	r3, [r3, #28]
 800cd66:	1c5a      	adds	r2, r3, #1
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	7858      	ldrb	r0, [r3, #1]
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	f7ff fc8c 	bl	800c698 <disk_write>
			fs->fsi_flag = 0;
 800cd80:	687b      	ldr	r3, [r7, #4]
 800cd82:	2200      	movs	r2, #0
 800cd84:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800cd86:	687b      	ldr	r3, [r7, #4]
 800cd88:	785b      	ldrb	r3, [r3, #1]
 800cd8a:	2200      	movs	r2, #0
 800cd8c:	2100      	movs	r1, #0
 800cd8e:	4618      	mov	r0, r3
 800cd90:	f7ff fca2 	bl	800c6d8 <disk_ioctl>
 800cd94:	4603      	mov	r3, r0
 800cd96:	2b00      	cmp	r3, #0
 800cd98:	d001      	beq.n	800cd9e <sync_fs+0xca>
 800cd9a:	2301      	movs	r3, #1
 800cd9c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800cd9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3710      	adds	r7, #16
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	41615252 	.word	0x41615252
 800cdac:	61417272 	.word	0x61417272

0800cdb0 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	b083      	sub	sp, #12
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	6078      	str	r0, [r7, #4]
 800cdb8:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cdba:	683b      	ldr	r3, [r7, #0]
 800cdbc:	3b02      	subs	r3, #2
 800cdbe:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cdc0:	687b      	ldr	r3, [r7, #4]
 800cdc2:	695b      	ldr	r3, [r3, #20]
 800cdc4:	3b02      	subs	r3, #2
 800cdc6:	683a      	ldr	r2, [r7, #0]
 800cdc8:	429a      	cmp	r2, r3
 800cdca:	d301      	bcc.n	800cdd0 <clust2sect+0x20>
 800cdcc:	2300      	movs	r3, #0
 800cdce:	e008      	b.n	800cde2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	895b      	ldrh	r3, [r3, #10]
 800cdd4:	461a      	mov	r2, r3
 800cdd6:	683b      	ldr	r3, [r7, #0]
 800cdd8:	fb03 f202 	mul.w	r2, r3, r2
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cde0:	4413      	add	r3, r2
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	370c      	adds	r7, #12
 800cde6:	46bd      	mov	sp, r7
 800cde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdec:	4770      	bx	lr

0800cdee <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cdee:	b580      	push	{r7, lr}
 800cdf0:	b086      	sub	sp, #24
 800cdf2:	af00      	add	r7, sp, #0
 800cdf4:	6078      	str	r0, [r7, #4]
 800cdf6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cdfe:	683b      	ldr	r3, [r7, #0]
 800ce00:	2b01      	cmp	r3, #1
 800ce02:	d904      	bls.n	800ce0e <get_fat+0x20>
 800ce04:	693b      	ldr	r3, [r7, #16]
 800ce06:	695b      	ldr	r3, [r3, #20]
 800ce08:	683a      	ldr	r2, [r7, #0]
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d302      	bcc.n	800ce14 <get_fat+0x26>
		val = 1;	/* Internal error */
 800ce0e:	2301      	movs	r3, #1
 800ce10:	617b      	str	r3, [r7, #20]
 800ce12:	e08e      	b.n	800cf32 <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800ce14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ce18:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	781b      	ldrb	r3, [r3, #0]
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	d061      	beq.n	800cee6 <get_fat+0xf8>
 800ce22:	2b03      	cmp	r3, #3
 800ce24:	dc7b      	bgt.n	800cf1e <get_fat+0x130>
 800ce26:	2b01      	cmp	r3, #1
 800ce28:	d002      	beq.n	800ce30 <get_fat+0x42>
 800ce2a:	2b02      	cmp	r3, #2
 800ce2c:	d041      	beq.n	800ceb2 <get_fat+0xc4>
 800ce2e:	e076      	b.n	800cf1e <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800ce30:	683b      	ldr	r3, [r7, #0]
 800ce32:	60fb      	str	r3, [r7, #12]
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	085b      	lsrs	r3, r3, #1
 800ce38:	68fa      	ldr	r2, [r7, #12]
 800ce3a:	4413      	add	r3, r2
 800ce3c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce3e:	693b      	ldr	r3, [r7, #16]
 800ce40:	6a1a      	ldr	r2, [r3, #32]
 800ce42:	68fb      	ldr	r3, [r7, #12]
 800ce44:	0a5b      	lsrs	r3, r3, #9
 800ce46:	4413      	add	r3, r2
 800ce48:	4619      	mov	r1, r3
 800ce4a:	6938      	ldr	r0, [r7, #16]
 800ce4c:	f7ff ff14 	bl	800cc78 <move_window>
 800ce50:	4603      	mov	r3, r0
 800ce52:	2b00      	cmp	r3, #0
 800ce54:	d166      	bne.n	800cf24 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	1c5a      	adds	r2, r3, #1
 800ce5a:	60fa      	str	r2, [r7, #12]
 800ce5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce60:	693a      	ldr	r2, [r7, #16]
 800ce62:	4413      	add	r3, r2
 800ce64:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce68:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce6a:	693b      	ldr	r3, [r7, #16]
 800ce6c:	6a1a      	ldr	r2, [r3, #32]
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	0a5b      	lsrs	r3, r3, #9
 800ce72:	4413      	add	r3, r2
 800ce74:	4619      	mov	r1, r3
 800ce76:	6938      	ldr	r0, [r7, #16]
 800ce78:	f7ff fefe 	bl	800cc78 <move_window>
 800ce7c:	4603      	mov	r3, r0
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d152      	bne.n	800cf28 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ce82:	68fb      	ldr	r3, [r7, #12]
 800ce84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce88:	693a      	ldr	r2, [r7, #16]
 800ce8a:	4413      	add	r3, r2
 800ce8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800ce90:	021b      	lsls	r3, r3, #8
 800ce92:	68ba      	ldr	r2, [r7, #8]
 800ce94:	4313      	orrs	r3, r2
 800ce96:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f003 0301 	and.w	r3, r3, #1
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d002      	beq.n	800cea8 <get_fat+0xba>
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	091b      	lsrs	r3, r3, #4
 800cea6:	e002      	b.n	800ceae <get_fat+0xc0>
 800cea8:	68bb      	ldr	r3, [r7, #8]
 800ceaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ceae:	617b      	str	r3, [r7, #20]
			break;
 800ceb0:	e03f      	b.n	800cf32 <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ceb2:	693b      	ldr	r3, [r7, #16]
 800ceb4:	6a1a      	ldr	r2, [r3, #32]
 800ceb6:	683b      	ldr	r3, [r7, #0]
 800ceb8:	0a1b      	lsrs	r3, r3, #8
 800ceba:	4413      	add	r3, r2
 800cebc:	4619      	mov	r1, r3
 800cebe:	6938      	ldr	r0, [r7, #16]
 800cec0:	f7ff feda 	bl	800cc78 <move_window>
 800cec4:	4603      	mov	r3, r0
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d130      	bne.n	800cf2c <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ceca:	693b      	ldr	r3, [r7, #16]
 800cecc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ced0:	683b      	ldr	r3, [r7, #0]
 800ced2:	005b      	lsls	r3, r3, #1
 800ced4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ced8:	4413      	add	r3, r2
 800ceda:	4618      	mov	r0, r3
 800cedc:	f7ff fc1a 	bl	800c714 <ld_word>
 800cee0:	4603      	mov	r3, r0
 800cee2:	617b      	str	r3, [r7, #20]
			break;
 800cee4:	e025      	b.n	800cf32 <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	6a1a      	ldr	r2, [r3, #32]
 800ceea:	683b      	ldr	r3, [r7, #0]
 800ceec:	09db      	lsrs	r3, r3, #7
 800ceee:	4413      	add	r3, r2
 800cef0:	4619      	mov	r1, r3
 800cef2:	6938      	ldr	r0, [r7, #16]
 800cef4:	f7ff fec0 	bl	800cc78 <move_window>
 800cef8:	4603      	mov	r3, r0
 800cefa:	2b00      	cmp	r3, #0
 800cefc:	d118      	bne.n	800cf30 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800cefe:	693b      	ldr	r3, [r7, #16]
 800cf00:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf04:	683b      	ldr	r3, [r7, #0]
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cf0c:	4413      	add	r3, r2
 800cf0e:	4618      	mov	r0, r3
 800cf10:	f7ff fc19 	bl	800c746 <ld_dword>
 800cf14:	4603      	mov	r3, r0
 800cf16:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800cf1a:	617b      	str	r3, [r7, #20]
			break;
 800cf1c:	e009      	b.n	800cf32 <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800cf1e:	2301      	movs	r3, #1
 800cf20:	617b      	str	r3, [r7, #20]
 800cf22:	e006      	b.n	800cf32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf24:	bf00      	nop
 800cf26:	e004      	b.n	800cf32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cf28:	bf00      	nop
 800cf2a:	e002      	b.n	800cf32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cf2c:	bf00      	nop
 800cf2e:	e000      	b.n	800cf32 <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800cf30:	bf00      	nop
		}
	}

	return val;
 800cf32:	697b      	ldr	r3, [r7, #20]
}
 800cf34:	4618      	mov	r0, r3
 800cf36:	3718      	adds	r7, #24
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800cf3c:	b590      	push	{r4, r7, lr}
 800cf3e:	b089      	sub	sp, #36	@ 0x24
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	60f8      	str	r0, [r7, #12]
 800cf44:	60b9      	str	r1, [r7, #8]
 800cf46:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800cf48:	2302      	movs	r3, #2
 800cf4a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	f240 80d9 	bls.w	800d106 <put_fat+0x1ca>
 800cf54:	68fb      	ldr	r3, [r7, #12]
 800cf56:	695b      	ldr	r3, [r3, #20]
 800cf58:	68ba      	ldr	r2, [r7, #8]
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	f080 80d3 	bcs.w	800d106 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800cf60:	68fb      	ldr	r3, [r7, #12]
 800cf62:	781b      	ldrb	r3, [r3, #0]
 800cf64:	2b03      	cmp	r3, #3
 800cf66:	f000 8096 	beq.w	800d096 <put_fat+0x15a>
 800cf6a:	2b03      	cmp	r3, #3
 800cf6c:	f300 80cb 	bgt.w	800d106 <put_fat+0x1ca>
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d002      	beq.n	800cf7a <put_fat+0x3e>
 800cf74:	2b02      	cmp	r3, #2
 800cf76:	d06e      	beq.n	800d056 <put_fat+0x11a>
 800cf78:	e0c5      	b.n	800d106 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	61bb      	str	r3, [r7, #24]
 800cf7e:	69bb      	ldr	r3, [r7, #24]
 800cf80:	085b      	lsrs	r3, r3, #1
 800cf82:	69ba      	ldr	r2, [r7, #24]
 800cf84:	4413      	add	r3, r2
 800cf86:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf88:	68fb      	ldr	r3, [r7, #12]
 800cf8a:	6a1a      	ldr	r2, [r3, #32]
 800cf8c:	69bb      	ldr	r3, [r7, #24]
 800cf8e:	0a5b      	lsrs	r3, r3, #9
 800cf90:	4413      	add	r3, r2
 800cf92:	4619      	mov	r1, r3
 800cf94:	68f8      	ldr	r0, [r7, #12]
 800cf96:	f7ff fe6f 	bl	800cc78 <move_window>
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf9e:	7ffb      	ldrb	r3, [r7, #31]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	f040 80a9 	bne.w	800d0f8 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cfa6:	68fb      	ldr	r3, [r7, #12]
 800cfa8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfac:	69bb      	ldr	r3, [r7, #24]
 800cfae:	1c59      	adds	r1, r3, #1
 800cfb0:	61b9      	str	r1, [r7, #24]
 800cfb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfb6:	4413      	add	r3, r2
 800cfb8:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cfba:	68bb      	ldr	r3, [r7, #8]
 800cfbc:	f003 0301 	and.w	r3, r3, #1
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00d      	beq.n	800cfe0 <put_fat+0xa4>
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	781b      	ldrb	r3, [r3, #0]
 800cfc8:	b25b      	sxtb	r3, r3
 800cfca:	f003 030f 	and.w	r3, r3, #15
 800cfce:	b25a      	sxtb	r2, r3
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	b25b      	sxtb	r3, r3
 800cfd4:	011b      	lsls	r3, r3, #4
 800cfd6:	b25b      	sxtb	r3, r3
 800cfd8:	4313      	orrs	r3, r2
 800cfda:	b25b      	sxtb	r3, r3
 800cfdc:	b2db      	uxtb	r3, r3
 800cfde:	e001      	b.n	800cfe4 <put_fat+0xa8>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	b2db      	uxtb	r3, r3
 800cfe4:	697a      	ldr	r2, [r7, #20]
 800cfe6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	2201      	movs	r2, #1
 800cfec:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cfee:	68fb      	ldr	r3, [r7, #12]
 800cff0:	6a1a      	ldr	r2, [r3, #32]
 800cff2:	69bb      	ldr	r3, [r7, #24]
 800cff4:	0a5b      	lsrs	r3, r3, #9
 800cff6:	4413      	add	r3, r2
 800cff8:	4619      	mov	r1, r3
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f7ff fe3c 	bl	800cc78 <move_window>
 800d000:	4603      	mov	r3, r0
 800d002:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d004:	7ffb      	ldrb	r3, [r7, #31]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d178      	bne.n	800d0fc <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d00a:	68fb      	ldr	r3, [r7, #12]
 800d00c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d010:	69bb      	ldr	r3, [r7, #24]
 800d012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d016:	4413      	add	r3, r2
 800d018:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	f003 0301 	and.w	r3, r3, #1
 800d020:	2b00      	cmp	r3, #0
 800d022:	d003      	beq.n	800d02c <put_fat+0xf0>
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	091b      	lsrs	r3, r3, #4
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	e00e      	b.n	800d04a <put_fat+0x10e>
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	781b      	ldrb	r3, [r3, #0]
 800d030:	b25b      	sxtb	r3, r3
 800d032:	f023 030f 	bic.w	r3, r3, #15
 800d036:	b25a      	sxtb	r2, r3
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	0a1b      	lsrs	r3, r3, #8
 800d03c:	b25b      	sxtb	r3, r3
 800d03e:	f003 030f 	and.w	r3, r3, #15
 800d042:	b25b      	sxtb	r3, r3
 800d044:	4313      	orrs	r3, r2
 800d046:	b25b      	sxtb	r3, r3
 800d048:	b2db      	uxtb	r3, r3
 800d04a:	697a      	ldr	r2, [r7, #20]
 800d04c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2201      	movs	r2, #1
 800d052:	70da      	strb	r2, [r3, #3]
			break;
 800d054:	e057      	b.n	800d106 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	6a1a      	ldr	r2, [r3, #32]
 800d05a:	68bb      	ldr	r3, [r7, #8]
 800d05c:	0a1b      	lsrs	r3, r3, #8
 800d05e:	4413      	add	r3, r2
 800d060:	4619      	mov	r1, r3
 800d062:	68f8      	ldr	r0, [r7, #12]
 800d064:	f7ff fe08 	bl	800cc78 <move_window>
 800d068:	4603      	mov	r3, r0
 800d06a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d06c:	7ffb      	ldrb	r3, [r7, #31]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d146      	bne.n	800d100 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d072:	68fb      	ldr	r3, [r7, #12]
 800d074:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d078:	68bb      	ldr	r3, [r7, #8]
 800d07a:	005b      	lsls	r3, r3, #1
 800d07c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d080:	4413      	add	r3, r2
 800d082:	687a      	ldr	r2, [r7, #4]
 800d084:	b292      	uxth	r2, r2
 800d086:	4611      	mov	r1, r2
 800d088:	4618      	mov	r0, r3
 800d08a:	f7ff fb7f 	bl	800c78c <st_word>
			fs->wflag = 1;
 800d08e:	68fb      	ldr	r3, [r7, #12]
 800d090:	2201      	movs	r2, #1
 800d092:	70da      	strb	r2, [r3, #3]
			break;
 800d094:	e037      	b.n	800d106 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	6a1a      	ldr	r2, [r3, #32]
 800d09a:	68bb      	ldr	r3, [r7, #8]
 800d09c:	09db      	lsrs	r3, r3, #7
 800d09e:	4413      	add	r3, r2
 800d0a0:	4619      	mov	r1, r3
 800d0a2:	68f8      	ldr	r0, [r7, #12]
 800d0a4:	f7ff fde8 	bl	800cc78 <move_window>
 800d0a8:	4603      	mov	r3, r0
 800d0aa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d0ac:	7ffb      	ldrb	r3, [r7, #31]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d128      	bne.n	800d104 <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0be:	68bb      	ldr	r3, [r7, #8]
 800d0c0:	009b      	lsls	r3, r3, #2
 800d0c2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d0c6:	4413      	add	r3, r2
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	f7ff fb3c 	bl	800c746 <ld_dword>
 800d0ce:	4603      	mov	r3, r0
 800d0d0:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d0d4:	4323      	orrs	r3, r4
 800d0d6:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d0d8:	68fb      	ldr	r3, [r7, #12]
 800d0da:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	009b      	lsls	r3, r3, #2
 800d0e2:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d0e6:	4413      	add	r3, r2
 800d0e8:	6879      	ldr	r1, [r7, #4]
 800d0ea:	4618      	mov	r0, r3
 800d0ec:	f7ff fb69 	bl	800c7c2 <st_dword>
			fs->wflag = 1;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	2201      	movs	r2, #1
 800d0f4:	70da      	strb	r2, [r3, #3]
			break;
 800d0f6:	e006      	b.n	800d106 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0f8:	bf00      	nop
 800d0fa:	e004      	b.n	800d106 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d0fc:	bf00      	nop
 800d0fe:	e002      	b.n	800d106 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d100:	bf00      	nop
 800d102:	e000      	b.n	800d106 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d104:	bf00      	nop
		}
	}
	return res;
 800d106:	7ffb      	ldrb	r3, [r7, #31]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3724      	adds	r7, #36	@ 0x24
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd90      	pop	{r4, r7, pc}

0800d110 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d110:	b580      	push	{r7, lr}
 800d112:	b088      	sub	sp, #32
 800d114:	af00      	add	r7, sp, #0
 800d116:	60f8      	str	r0, [r7, #12]
 800d118:	60b9      	str	r1, [r7, #8]
 800d11a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d11c:	2300      	movs	r3, #0
 800d11e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	681b      	ldr	r3, [r3, #0]
 800d124:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d126:	68bb      	ldr	r3, [r7, #8]
 800d128:	2b01      	cmp	r3, #1
 800d12a:	d904      	bls.n	800d136 <remove_chain+0x26>
 800d12c:	69bb      	ldr	r3, [r7, #24]
 800d12e:	695b      	ldr	r3, [r3, #20]
 800d130:	68ba      	ldr	r2, [r7, #8]
 800d132:	429a      	cmp	r2, r3
 800d134:	d301      	bcc.n	800d13a <remove_chain+0x2a>
 800d136:	2302      	movs	r3, #2
 800d138:	e04b      	b.n	800d1d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d00c      	beq.n	800d15a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d140:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d144:	6879      	ldr	r1, [r7, #4]
 800d146:	69b8      	ldr	r0, [r7, #24]
 800d148:	f7ff fef8 	bl	800cf3c <put_fat>
 800d14c:	4603      	mov	r3, r0
 800d14e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d150:	7ffb      	ldrb	r3, [r7, #31]
 800d152:	2b00      	cmp	r3, #0
 800d154:	d001      	beq.n	800d15a <remove_chain+0x4a>
 800d156:	7ffb      	ldrb	r3, [r7, #31]
 800d158:	e03b      	b.n	800d1d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d15a:	68b9      	ldr	r1, [r7, #8]
 800d15c:	68f8      	ldr	r0, [r7, #12]
 800d15e:	f7ff fe46 	bl	800cdee <get_fat>
 800d162:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d164:	697b      	ldr	r3, [r7, #20]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d031      	beq.n	800d1ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d16a:	697b      	ldr	r3, [r7, #20]
 800d16c:	2b01      	cmp	r3, #1
 800d16e:	d101      	bne.n	800d174 <remove_chain+0x64>
 800d170:	2302      	movs	r3, #2
 800d172:	e02e      	b.n	800d1d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d174:	697b      	ldr	r3, [r7, #20]
 800d176:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d17a:	d101      	bne.n	800d180 <remove_chain+0x70>
 800d17c:	2301      	movs	r3, #1
 800d17e:	e028      	b.n	800d1d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d180:	2200      	movs	r2, #0
 800d182:	68b9      	ldr	r1, [r7, #8]
 800d184:	69b8      	ldr	r0, [r7, #24]
 800d186:	f7ff fed9 	bl	800cf3c <put_fat>
 800d18a:	4603      	mov	r3, r0
 800d18c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d18e:	7ffb      	ldrb	r3, [r7, #31]
 800d190:	2b00      	cmp	r3, #0
 800d192:	d001      	beq.n	800d198 <remove_chain+0x88>
 800d194:	7ffb      	ldrb	r3, [r7, #31]
 800d196:	e01c      	b.n	800d1d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d198:	69bb      	ldr	r3, [r7, #24]
 800d19a:	691a      	ldr	r2, [r3, #16]
 800d19c:	69bb      	ldr	r3, [r7, #24]
 800d19e:	695b      	ldr	r3, [r3, #20]
 800d1a0:	3b02      	subs	r3, #2
 800d1a2:	429a      	cmp	r2, r3
 800d1a4:	d20b      	bcs.n	800d1be <remove_chain+0xae>
			fs->free_clst++;
 800d1a6:	69bb      	ldr	r3, [r7, #24]
 800d1a8:	691b      	ldr	r3, [r3, #16]
 800d1aa:	1c5a      	adds	r2, r3, #1
 800d1ac:	69bb      	ldr	r3, [r7, #24]
 800d1ae:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d1b0:	69bb      	ldr	r3, [r7, #24]
 800d1b2:	791b      	ldrb	r3, [r3, #4]
 800d1b4:	f043 0301 	orr.w	r3, r3, #1
 800d1b8:	b2da      	uxtb	r2, r3
 800d1ba:	69bb      	ldr	r3, [r7, #24]
 800d1bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d1c2:	69bb      	ldr	r3, [r7, #24]
 800d1c4:	695b      	ldr	r3, [r3, #20]
 800d1c6:	68ba      	ldr	r2, [r7, #8]
 800d1c8:	429a      	cmp	r2, r3
 800d1ca:	d3c6      	bcc.n	800d15a <remove_chain+0x4a>
 800d1cc:	e000      	b.n	800d1d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d1ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d1d0:	2300      	movs	r3, #0
}
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	3720      	adds	r7, #32
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}

0800d1da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d1da:	b580      	push	{r7, lr}
 800d1dc:	b088      	sub	sp, #32
 800d1de:	af00      	add	r7, sp, #0
 800d1e0:	6078      	str	r0, [r7, #4]
 800d1e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	681b      	ldr	r3, [r3, #0]
 800d1e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d1ea:	683b      	ldr	r3, [r7, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10d      	bne.n	800d20c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	68db      	ldr	r3, [r3, #12]
 800d1f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d1f6:	69bb      	ldr	r3, [r7, #24]
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d004      	beq.n	800d206 <create_chain+0x2c>
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	69ba      	ldr	r2, [r7, #24]
 800d202:	429a      	cmp	r2, r3
 800d204:	d31b      	bcc.n	800d23e <create_chain+0x64>
 800d206:	2301      	movs	r3, #1
 800d208:	61bb      	str	r3, [r7, #24]
 800d20a:	e018      	b.n	800d23e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d20c:	6839      	ldr	r1, [r7, #0]
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f7ff fded 	bl	800cdee <get_fat>
 800d214:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d216:	68fb      	ldr	r3, [r7, #12]
 800d218:	2b01      	cmp	r3, #1
 800d21a:	d801      	bhi.n	800d220 <create_chain+0x46>
 800d21c:	2301      	movs	r3, #1
 800d21e:	e070      	b.n	800d302 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d226:	d101      	bne.n	800d22c <create_chain+0x52>
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	e06a      	b.n	800d302 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d22c:	693b      	ldr	r3, [r7, #16]
 800d22e:	695b      	ldr	r3, [r3, #20]
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	429a      	cmp	r2, r3
 800d234:	d201      	bcs.n	800d23a <create_chain+0x60>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	e063      	b.n	800d302 <create_chain+0x128>
		scl = clst;
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d23e:	69bb      	ldr	r3, [r7, #24]
 800d240:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d242:	69fb      	ldr	r3, [r7, #28]
 800d244:	3301      	adds	r3, #1
 800d246:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d248:	693b      	ldr	r3, [r7, #16]
 800d24a:	695b      	ldr	r3, [r3, #20]
 800d24c:	69fa      	ldr	r2, [r7, #28]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d307      	bcc.n	800d262 <create_chain+0x88>
				ncl = 2;
 800d252:	2302      	movs	r3, #2
 800d254:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d256:	69fa      	ldr	r2, [r7, #28]
 800d258:	69bb      	ldr	r3, [r7, #24]
 800d25a:	429a      	cmp	r2, r3
 800d25c:	d901      	bls.n	800d262 <create_chain+0x88>
 800d25e:	2300      	movs	r3, #0
 800d260:	e04f      	b.n	800d302 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d262:	69f9      	ldr	r1, [r7, #28]
 800d264:	6878      	ldr	r0, [r7, #4]
 800d266:	f7ff fdc2 	bl	800cdee <get_fat>
 800d26a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00e      	beq.n	800d290 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2b01      	cmp	r3, #1
 800d276:	d003      	beq.n	800d280 <create_chain+0xa6>
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d27e:	d101      	bne.n	800d284 <create_chain+0xaa>
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	e03e      	b.n	800d302 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d284:	69fa      	ldr	r2, [r7, #28]
 800d286:	69bb      	ldr	r3, [r7, #24]
 800d288:	429a      	cmp	r2, r3
 800d28a:	d1da      	bne.n	800d242 <create_chain+0x68>
 800d28c:	2300      	movs	r3, #0
 800d28e:	e038      	b.n	800d302 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d290:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d292:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d296:	69f9      	ldr	r1, [r7, #28]
 800d298:	6938      	ldr	r0, [r7, #16]
 800d29a:	f7ff fe4f 	bl	800cf3c <put_fat>
 800d29e:	4603      	mov	r3, r0
 800d2a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d2a2:	7dfb      	ldrb	r3, [r7, #23]
 800d2a4:	2b00      	cmp	r3, #0
 800d2a6:	d109      	bne.n	800d2bc <create_chain+0xe2>
 800d2a8:	683b      	ldr	r3, [r7, #0]
 800d2aa:	2b00      	cmp	r3, #0
 800d2ac:	d006      	beq.n	800d2bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d2ae:	69fa      	ldr	r2, [r7, #28]
 800d2b0:	6839      	ldr	r1, [r7, #0]
 800d2b2:	6938      	ldr	r0, [r7, #16]
 800d2b4:	f7ff fe42 	bl	800cf3c <put_fat>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d2bc:	7dfb      	ldrb	r3, [r7, #23]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d116      	bne.n	800d2f0 <create_chain+0x116>
		fs->last_clst = ncl;
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	69fa      	ldr	r2, [r7, #28]
 800d2c6:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d2c8:	693b      	ldr	r3, [r7, #16]
 800d2ca:	691a      	ldr	r2, [r3, #16]
 800d2cc:	693b      	ldr	r3, [r7, #16]
 800d2ce:	695b      	ldr	r3, [r3, #20]
 800d2d0:	3b02      	subs	r3, #2
 800d2d2:	429a      	cmp	r2, r3
 800d2d4:	d804      	bhi.n	800d2e0 <create_chain+0x106>
 800d2d6:	693b      	ldr	r3, [r7, #16]
 800d2d8:	691b      	ldr	r3, [r3, #16]
 800d2da:	1e5a      	subs	r2, r3, #1
 800d2dc:	693b      	ldr	r3, [r7, #16]
 800d2de:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d2e0:	693b      	ldr	r3, [r7, #16]
 800d2e2:	791b      	ldrb	r3, [r3, #4]
 800d2e4:	f043 0301 	orr.w	r3, r3, #1
 800d2e8:	b2da      	uxtb	r2, r3
 800d2ea:	693b      	ldr	r3, [r7, #16]
 800d2ec:	711a      	strb	r2, [r3, #4]
 800d2ee:	e007      	b.n	800d300 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d2f0:	7dfb      	ldrb	r3, [r7, #23]
 800d2f2:	2b01      	cmp	r3, #1
 800d2f4:	d102      	bne.n	800d2fc <create_chain+0x122>
 800d2f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d2fa:	e000      	b.n	800d2fe <create_chain+0x124>
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d300:	69fb      	ldr	r3, [r7, #28]
}
 800d302:	4618      	mov	r0, r3
 800d304:	3720      	adds	r7, #32
 800d306:	46bd      	mov	sp, r7
 800d308:	bd80      	pop	{r7, pc}

0800d30a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d30a:	b480      	push	{r7}
 800d30c:	b087      	sub	sp, #28
 800d30e:	af00      	add	r7, sp, #0
 800d310:	6078      	str	r0, [r7, #4]
 800d312:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d31e:	3304      	adds	r3, #4
 800d320:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d322:	683b      	ldr	r3, [r7, #0]
 800d324:	0a5b      	lsrs	r3, r3, #9
 800d326:	68fa      	ldr	r2, [r7, #12]
 800d328:	8952      	ldrh	r2, [r2, #10]
 800d32a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d32e:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	1d1a      	adds	r2, r3, #4
 800d334:	613a      	str	r2, [r7, #16]
 800d336:	681b      	ldr	r3, [r3, #0]
 800d338:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d33a:	68bb      	ldr	r3, [r7, #8]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d101      	bne.n	800d344 <clmt_clust+0x3a>
 800d340:	2300      	movs	r3, #0
 800d342:	e010      	b.n	800d366 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d344:	697a      	ldr	r2, [r7, #20]
 800d346:	68bb      	ldr	r3, [r7, #8]
 800d348:	429a      	cmp	r2, r3
 800d34a:	d307      	bcc.n	800d35c <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d34c:	697a      	ldr	r2, [r7, #20]
 800d34e:	68bb      	ldr	r3, [r7, #8]
 800d350:	1ad3      	subs	r3, r2, r3
 800d352:	617b      	str	r3, [r7, #20]
 800d354:	693b      	ldr	r3, [r7, #16]
 800d356:	3304      	adds	r3, #4
 800d358:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d35a:	e7e9      	b.n	800d330 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d35c:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d35e:	693b      	ldr	r3, [r7, #16]
 800d360:	681a      	ldr	r2, [r3, #0]
 800d362:	697b      	ldr	r3, [r7, #20]
 800d364:	4413      	add	r3, r2
}
 800d366:	4618      	mov	r0, r3
 800d368:	371c      	adds	r7, #28
 800d36a:	46bd      	mov	sp, r7
 800d36c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d370:	4770      	bx	lr

0800d372 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d372:	b580      	push	{r7, lr}
 800d374:	b086      	sub	sp, #24
 800d376:	af00      	add	r7, sp, #0
 800d378:	6078      	str	r0, [r7, #4]
 800d37a:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d382:	683b      	ldr	r3, [r7, #0]
 800d384:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d388:	d204      	bcs.n	800d394 <dir_sdi+0x22>
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	f003 031f 	and.w	r3, r3, #31
 800d390:	2b00      	cmp	r3, #0
 800d392:	d001      	beq.n	800d398 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d394:	2302      	movs	r3, #2
 800d396:	e063      	b.n	800d460 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	683a      	ldr	r2, [r7, #0]
 800d39c:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	689b      	ldr	r3, [r3, #8]
 800d3a2:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d3a4:	697b      	ldr	r3, [r7, #20]
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	d106      	bne.n	800d3b8 <dir_sdi+0x46>
 800d3aa:	693b      	ldr	r3, [r7, #16]
 800d3ac:	781b      	ldrb	r3, [r3, #0]
 800d3ae:	2b02      	cmp	r3, #2
 800d3b0:	d902      	bls.n	800d3b8 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d3b2:	693b      	ldr	r3, [r7, #16]
 800d3b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3b6:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d3b8:	697b      	ldr	r3, [r7, #20]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d10c      	bne.n	800d3d8 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d3be:	683b      	ldr	r3, [r7, #0]
 800d3c0:	095b      	lsrs	r3, r3, #5
 800d3c2:	693a      	ldr	r2, [r7, #16]
 800d3c4:	8912      	ldrh	r2, [r2, #8]
 800d3c6:	4293      	cmp	r3, r2
 800d3c8:	d301      	bcc.n	800d3ce <dir_sdi+0x5c>
 800d3ca:	2302      	movs	r3, #2
 800d3cc:	e048      	b.n	800d460 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d3ce:	693b      	ldr	r3, [r7, #16]
 800d3d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	61da      	str	r2, [r3, #28]
 800d3d6:	e029      	b.n	800d42c <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d3d8:	693b      	ldr	r3, [r7, #16]
 800d3da:	895b      	ldrh	r3, [r3, #10]
 800d3dc:	025b      	lsls	r3, r3, #9
 800d3de:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d3e0:	e019      	b.n	800d416 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	6979      	ldr	r1, [r7, #20]
 800d3e6:	4618      	mov	r0, r3
 800d3e8:	f7ff fd01 	bl	800cdee <get_fat>
 800d3ec:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d3ee:	697b      	ldr	r3, [r7, #20]
 800d3f0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d3f4:	d101      	bne.n	800d3fa <dir_sdi+0x88>
 800d3f6:	2301      	movs	r3, #1
 800d3f8:	e032      	b.n	800d460 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d3fa:	697b      	ldr	r3, [r7, #20]
 800d3fc:	2b01      	cmp	r3, #1
 800d3fe:	d904      	bls.n	800d40a <dir_sdi+0x98>
 800d400:	693b      	ldr	r3, [r7, #16]
 800d402:	695b      	ldr	r3, [r3, #20]
 800d404:	697a      	ldr	r2, [r7, #20]
 800d406:	429a      	cmp	r2, r3
 800d408:	d301      	bcc.n	800d40e <dir_sdi+0x9c>
 800d40a:	2302      	movs	r3, #2
 800d40c:	e028      	b.n	800d460 <dir_sdi+0xee>
			ofs -= csz;
 800d40e:	683a      	ldr	r2, [r7, #0]
 800d410:	68fb      	ldr	r3, [r7, #12]
 800d412:	1ad3      	subs	r3, r2, r3
 800d414:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d416:	683a      	ldr	r2, [r7, #0]
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	429a      	cmp	r2, r3
 800d41c:	d2e1      	bcs.n	800d3e2 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d41e:	6979      	ldr	r1, [r7, #20]
 800d420:	6938      	ldr	r0, [r7, #16]
 800d422:	f7ff fcc5 	bl	800cdb0 <clust2sect>
 800d426:	4602      	mov	r2, r0
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	697a      	ldr	r2, [r7, #20]
 800d430:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	69db      	ldr	r3, [r3, #28]
 800d436:	2b00      	cmp	r3, #0
 800d438:	d101      	bne.n	800d43e <dir_sdi+0xcc>
 800d43a:	2302      	movs	r3, #2
 800d43c:	e010      	b.n	800d460 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	69da      	ldr	r2, [r3, #28]
 800d442:	683b      	ldr	r3, [r7, #0]
 800d444:	0a5b      	lsrs	r3, r3, #9
 800d446:	441a      	add	r2, r3
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d44c:	693b      	ldr	r3, [r7, #16]
 800d44e:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d452:	683b      	ldr	r3, [r7, #0]
 800d454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d458:	441a      	add	r2, r3
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d45e:	2300      	movs	r3, #0
}
 800d460:	4618      	mov	r0, r3
 800d462:	3718      	adds	r7, #24
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b086      	sub	sp, #24
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
 800d470:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	681b      	ldr	r3, [r3, #0]
 800d476:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	3320      	adds	r3, #32
 800d47e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	69db      	ldr	r3, [r3, #28]
 800d484:	2b00      	cmp	r3, #0
 800d486:	d003      	beq.n	800d490 <dir_next+0x28>
 800d488:	68bb      	ldr	r3, [r7, #8]
 800d48a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d48e:	d301      	bcc.n	800d494 <dir_next+0x2c>
 800d490:	2304      	movs	r3, #4
 800d492:	e0aa      	b.n	800d5ea <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d494:	68bb      	ldr	r3, [r7, #8]
 800d496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	f040 8098 	bne.w	800d5d0 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	69db      	ldr	r3, [r3, #28]
 800d4a4:	1c5a      	adds	r2, r3, #1
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	699b      	ldr	r3, [r3, #24]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d10b      	bne.n	800d4ca <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	095b      	lsrs	r3, r3, #5
 800d4b6:	68fa      	ldr	r2, [r7, #12]
 800d4b8:	8912      	ldrh	r2, [r2, #8]
 800d4ba:	4293      	cmp	r3, r2
 800d4bc:	f0c0 8088 	bcc.w	800d5d0 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	61da      	str	r2, [r3, #28]
 800d4c6:	2304      	movs	r3, #4
 800d4c8:	e08f      	b.n	800d5ea <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	0a5b      	lsrs	r3, r3, #9
 800d4ce:	68fa      	ldr	r2, [r7, #12]
 800d4d0:	8952      	ldrh	r2, [r2, #10]
 800d4d2:	3a01      	subs	r2, #1
 800d4d4:	4013      	ands	r3, r2
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	d17a      	bne.n	800d5d0 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d4da:	687a      	ldr	r2, [r7, #4]
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	699b      	ldr	r3, [r3, #24]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	4610      	mov	r0, r2
 800d4e4:	f7ff fc83 	bl	800cdee <get_fat>
 800d4e8:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d4ea:	697b      	ldr	r3, [r7, #20]
 800d4ec:	2b01      	cmp	r3, #1
 800d4ee:	d801      	bhi.n	800d4f4 <dir_next+0x8c>
 800d4f0:	2302      	movs	r3, #2
 800d4f2:	e07a      	b.n	800d5ea <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d4f4:	697b      	ldr	r3, [r7, #20]
 800d4f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d4fa:	d101      	bne.n	800d500 <dir_next+0x98>
 800d4fc:	2301      	movs	r3, #1
 800d4fe:	e074      	b.n	800d5ea <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d500:	68fb      	ldr	r3, [r7, #12]
 800d502:	695b      	ldr	r3, [r3, #20]
 800d504:	697a      	ldr	r2, [r7, #20]
 800d506:	429a      	cmp	r2, r3
 800d508:	d358      	bcc.n	800d5bc <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d50a:	683b      	ldr	r3, [r7, #0]
 800d50c:	2b00      	cmp	r3, #0
 800d50e:	d104      	bne.n	800d51a <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	2200      	movs	r2, #0
 800d514:	61da      	str	r2, [r3, #28]
 800d516:	2304      	movs	r3, #4
 800d518:	e067      	b.n	800d5ea <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d51a:	687a      	ldr	r2, [r7, #4]
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	699b      	ldr	r3, [r3, #24]
 800d520:	4619      	mov	r1, r3
 800d522:	4610      	mov	r0, r2
 800d524:	f7ff fe59 	bl	800d1da <create_chain>
 800d528:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d52a:	697b      	ldr	r3, [r7, #20]
 800d52c:	2b00      	cmp	r3, #0
 800d52e:	d101      	bne.n	800d534 <dir_next+0xcc>
 800d530:	2307      	movs	r3, #7
 800d532:	e05a      	b.n	800d5ea <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d534:	697b      	ldr	r3, [r7, #20]
 800d536:	2b01      	cmp	r3, #1
 800d538:	d101      	bne.n	800d53e <dir_next+0xd6>
 800d53a:	2302      	movs	r3, #2
 800d53c:	e055      	b.n	800d5ea <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d53e:	697b      	ldr	r3, [r7, #20]
 800d540:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d544:	d101      	bne.n	800d54a <dir_next+0xe2>
 800d546:	2301      	movs	r3, #1
 800d548:	e04f      	b.n	800d5ea <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d54a:	68f8      	ldr	r0, [r7, #12]
 800d54c:	f7ff fb50 	bl	800cbf0 <sync_window>
 800d550:	4603      	mov	r3, r0
 800d552:	2b00      	cmp	r3, #0
 800d554:	d001      	beq.n	800d55a <dir_next+0xf2>
 800d556:	2301      	movs	r3, #1
 800d558:	e047      	b.n	800d5ea <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	3330      	adds	r3, #48	@ 0x30
 800d55e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d562:	2100      	movs	r1, #0
 800d564:	4618      	mov	r0, r3
 800d566:	f7ff f979 	bl	800c85c <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d56a:	2300      	movs	r3, #0
 800d56c:	613b      	str	r3, [r7, #16]
 800d56e:	6979      	ldr	r1, [r7, #20]
 800d570:	68f8      	ldr	r0, [r7, #12]
 800d572:	f7ff fc1d 	bl	800cdb0 <clust2sect>
 800d576:	4602      	mov	r2, r0
 800d578:	68fb      	ldr	r3, [r7, #12]
 800d57a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d57c:	e012      	b.n	800d5a4 <dir_next+0x13c>
						fs->wflag = 1;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2201      	movs	r2, #1
 800d582:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d584:	68f8      	ldr	r0, [r7, #12]
 800d586:	f7ff fb33 	bl	800cbf0 <sync_window>
 800d58a:	4603      	mov	r3, r0
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d001      	beq.n	800d594 <dir_next+0x12c>
 800d590:	2301      	movs	r3, #1
 800d592:	e02a      	b.n	800d5ea <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d594:	693b      	ldr	r3, [r7, #16]
 800d596:	3301      	adds	r3, #1
 800d598:	613b      	str	r3, [r7, #16]
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d59e:	1c5a      	adds	r2, r3, #1
 800d5a0:	68fb      	ldr	r3, [r7, #12]
 800d5a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d5a4:	68fb      	ldr	r3, [r7, #12]
 800d5a6:	895b      	ldrh	r3, [r3, #10]
 800d5a8:	461a      	mov	r2, r3
 800d5aa:	693b      	ldr	r3, [r7, #16]
 800d5ac:	4293      	cmp	r3, r2
 800d5ae:	d3e6      	bcc.n	800d57e <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d5b0:	68fb      	ldr	r3, [r7, #12]
 800d5b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d5b4:	693b      	ldr	r3, [r7, #16]
 800d5b6:	1ad2      	subs	r2, r2, r3
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	697a      	ldr	r2, [r7, #20]
 800d5c0:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d5c2:	6979      	ldr	r1, [r7, #20]
 800d5c4:	68f8      	ldr	r0, [r7, #12]
 800d5c6:	f7ff fbf3 	bl	800cdb0 <clust2sect>
 800d5ca:	4602      	mov	r2, r0
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	68ba      	ldr	r2, [r7, #8]
 800d5d4:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5e2:	441a      	add	r2, r3
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d5e8:	2300      	movs	r3, #0
}
 800d5ea:	4618      	mov	r0, r3
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b086      	sub	sp, #24
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
 800d5fa:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d602:	2100      	movs	r1, #0
 800d604:	6878      	ldr	r0, [r7, #4]
 800d606:	f7ff feb4 	bl	800d372 <dir_sdi>
 800d60a:	4603      	mov	r3, r0
 800d60c:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d60e:	7dfb      	ldrb	r3, [r7, #23]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d12b      	bne.n	800d66c <dir_alloc+0x7a>
		n = 0;
 800d614:	2300      	movs	r3, #0
 800d616:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	69db      	ldr	r3, [r3, #28]
 800d61c:	4619      	mov	r1, r3
 800d61e:	68f8      	ldr	r0, [r7, #12]
 800d620:	f7ff fb2a 	bl	800cc78 <move_window>
 800d624:	4603      	mov	r3, r0
 800d626:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d628:	7dfb      	ldrb	r3, [r7, #23]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d11d      	bne.n	800d66a <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	6a1b      	ldr	r3, [r3, #32]
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	2be5      	cmp	r3, #229	@ 0xe5
 800d636:	d004      	beq.n	800d642 <dir_alloc+0x50>
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	6a1b      	ldr	r3, [r3, #32]
 800d63c:	781b      	ldrb	r3, [r3, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d107      	bne.n	800d652 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d642:	693b      	ldr	r3, [r7, #16]
 800d644:	3301      	adds	r3, #1
 800d646:	613b      	str	r3, [r7, #16]
 800d648:	693a      	ldr	r2, [r7, #16]
 800d64a:	683b      	ldr	r3, [r7, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d102      	bne.n	800d656 <dir_alloc+0x64>
 800d650:	e00c      	b.n	800d66c <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d652:	2300      	movs	r3, #0
 800d654:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d656:	2101      	movs	r1, #1
 800d658:	6878      	ldr	r0, [r7, #4]
 800d65a:	f7ff ff05 	bl	800d468 <dir_next>
 800d65e:	4603      	mov	r3, r0
 800d660:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d0d7      	beq.n	800d618 <dir_alloc+0x26>
 800d668:	e000      	b.n	800d66c <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d66a:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d66c:	7dfb      	ldrb	r3, [r7, #23]
 800d66e:	2b04      	cmp	r3, #4
 800d670:	d101      	bne.n	800d676 <dir_alloc+0x84>
 800d672:	2307      	movs	r3, #7
 800d674:	75fb      	strb	r3, [r7, #23]
	return res;
 800d676:	7dfb      	ldrb	r3, [r7, #23]
}
 800d678:	4618      	mov	r0, r3
 800d67a:	3718      	adds	r7, #24
 800d67c:	46bd      	mov	sp, r7
 800d67e:	bd80      	pop	{r7, pc}

0800d680 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d680:	b580      	push	{r7, lr}
 800d682:	b084      	sub	sp, #16
 800d684:	af00      	add	r7, sp, #0
 800d686:	6078      	str	r0, [r7, #4]
 800d688:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d68a:	683b      	ldr	r3, [r7, #0]
 800d68c:	331a      	adds	r3, #26
 800d68e:	4618      	mov	r0, r3
 800d690:	f7ff f840 	bl	800c714 <ld_word>
 800d694:	4603      	mov	r3, r0
 800d696:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	781b      	ldrb	r3, [r3, #0]
 800d69c:	2b03      	cmp	r3, #3
 800d69e:	d109      	bne.n	800d6b4 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	3314      	adds	r3, #20
 800d6a4:	4618      	mov	r0, r3
 800d6a6:	f7ff f835 	bl	800c714 <ld_word>
 800d6aa:	4603      	mov	r3, r0
 800d6ac:	041b      	lsls	r3, r3, #16
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d6b4:	68fb      	ldr	r3, [r7, #12]
}
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	3710      	adds	r7, #16
 800d6ba:	46bd      	mov	sp, r7
 800d6bc:	bd80      	pop	{r7, pc}

0800d6be <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d6be:	b580      	push	{r7, lr}
 800d6c0:	b084      	sub	sp, #16
 800d6c2:	af00      	add	r7, sp, #0
 800d6c4:	60f8      	str	r0, [r7, #12]
 800d6c6:	60b9      	str	r1, [r7, #8]
 800d6c8:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d6ca:	68bb      	ldr	r3, [r7, #8]
 800d6cc:	331a      	adds	r3, #26
 800d6ce:	687a      	ldr	r2, [r7, #4]
 800d6d0:	b292      	uxth	r2, r2
 800d6d2:	4611      	mov	r1, r2
 800d6d4:	4618      	mov	r0, r3
 800d6d6:	f7ff f859 	bl	800c78c <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	2b03      	cmp	r3, #3
 800d6e0:	d109      	bne.n	800d6f6 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d6e2:	68bb      	ldr	r3, [r7, #8]
 800d6e4:	f103 0214 	add.w	r2, r3, #20
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	0c1b      	lsrs	r3, r3, #16
 800d6ec:	b29b      	uxth	r3, r3
 800d6ee:	4619      	mov	r1, r3
 800d6f0:	4610      	mov	r0, r2
 800d6f2:	f7ff f84b 	bl	800c78c <st_word>
	}
}
 800d6f6:	bf00      	nop
 800d6f8:	3710      	adds	r7, #16
 800d6fa:	46bd      	mov	sp, r7
 800d6fc:	bd80      	pop	{r7, pc}

0800d6fe <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d6fe:	b580      	push	{r7, lr}
 800d700:	b086      	sub	sp, #24
 800d702:	af00      	add	r7, sp, #0
 800d704:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d70c:	2100      	movs	r1, #0
 800d70e:	6878      	ldr	r0, [r7, #4]
 800d710:	f7ff fe2f 	bl	800d372 <dir_sdi>
 800d714:	4603      	mov	r3, r0
 800d716:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d718:	7dfb      	ldrb	r3, [r7, #23]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d001      	beq.n	800d722 <dir_find+0x24>
 800d71e:	7dfb      	ldrb	r3, [r7, #23]
 800d720:	e03e      	b.n	800d7a0 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	69db      	ldr	r3, [r3, #28]
 800d726:	4619      	mov	r1, r3
 800d728:	6938      	ldr	r0, [r7, #16]
 800d72a:	f7ff faa5 	bl	800cc78 <move_window>
 800d72e:	4603      	mov	r3, r0
 800d730:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d732:	7dfb      	ldrb	r3, [r7, #23]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d12f      	bne.n	800d798 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	6a1b      	ldr	r3, [r3, #32]
 800d73c:	781b      	ldrb	r3, [r3, #0]
 800d73e:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d740:	7bfb      	ldrb	r3, [r7, #15]
 800d742:	2b00      	cmp	r3, #0
 800d744:	d102      	bne.n	800d74c <dir_find+0x4e>
 800d746:	2304      	movs	r3, #4
 800d748:	75fb      	strb	r3, [r7, #23]
 800d74a:	e028      	b.n	800d79e <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6a1b      	ldr	r3, [r3, #32]
 800d750:	330b      	adds	r3, #11
 800d752:	781b      	ldrb	r3, [r3, #0]
 800d754:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	687b      	ldr	r3, [r7, #4]
 800d75c:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	6a1b      	ldr	r3, [r3, #32]
 800d762:	330b      	adds	r3, #11
 800d764:	781b      	ldrb	r3, [r3, #0]
 800d766:	f003 0308 	and.w	r3, r3, #8
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d10a      	bne.n	800d784 <dir_find+0x86>
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6a18      	ldr	r0, [r3, #32]
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	3324      	adds	r3, #36	@ 0x24
 800d776:	220b      	movs	r2, #11
 800d778:	4619      	mov	r1, r3
 800d77a:	f7ff f88a 	bl	800c892 <mem_cmp>
 800d77e:	4603      	mov	r3, r0
 800d780:	2b00      	cmp	r3, #0
 800d782:	d00b      	beq.n	800d79c <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d784:	2100      	movs	r1, #0
 800d786:	6878      	ldr	r0, [r7, #4]
 800d788:	f7ff fe6e 	bl	800d468 <dir_next>
 800d78c:	4603      	mov	r3, r0
 800d78e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d790:	7dfb      	ldrb	r3, [r7, #23]
 800d792:	2b00      	cmp	r3, #0
 800d794:	d0c5      	beq.n	800d722 <dir_find+0x24>
 800d796:	e002      	b.n	800d79e <dir_find+0xa0>
		if (res != FR_OK) break;
 800d798:	bf00      	nop
 800d79a:	e000      	b.n	800d79e <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d79c:	bf00      	nop

	return res;
 800d79e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d7a0:	4618      	mov	r0, r3
 800d7a2:	3718      	adds	r7, #24
 800d7a4:	46bd      	mov	sp, r7
 800d7a6:	bd80      	pop	{r7, pc}

0800d7a8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d7a8:	b580      	push	{r7, lr}
 800d7aa:	b084      	sub	sp, #16
 800d7ac:	af00      	add	r7, sp, #0
 800d7ae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d7b0:	687b      	ldr	r3, [r7, #4]
 800d7b2:	681b      	ldr	r3, [r3, #0]
 800d7b4:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d7b6:	2101      	movs	r1, #1
 800d7b8:	6878      	ldr	r0, [r7, #4]
 800d7ba:	f7ff ff1a 	bl	800d5f2 <dir_alloc>
 800d7be:	4603      	mov	r3, r0
 800d7c0:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d7c2:	7bfb      	ldrb	r3, [r7, #15]
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d11c      	bne.n	800d802 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	69db      	ldr	r3, [r3, #28]
 800d7cc:	4619      	mov	r1, r3
 800d7ce:	68b8      	ldr	r0, [r7, #8]
 800d7d0:	f7ff fa52 	bl	800cc78 <move_window>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d111      	bne.n	800d802 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	6a1b      	ldr	r3, [r3, #32]
 800d7e2:	2220      	movs	r2, #32
 800d7e4:	2100      	movs	r1, #0
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff f838 	bl	800c85c <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	6a18      	ldr	r0, [r3, #32]
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	3324      	adds	r3, #36	@ 0x24
 800d7f4:	220b      	movs	r2, #11
 800d7f6:	4619      	mov	r1, r3
 800d7f8:	f7ff f80f 	bl	800c81a <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d7fc:	68bb      	ldr	r3, [r7, #8]
 800d7fe:	2201      	movs	r2, #1
 800d800:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d802:	7bfb      	ldrb	r3, [r7, #15]
}
 800d804:	4618      	mov	r0, r3
 800d806:	3710      	adds	r7, #16
 800d808:	46bd      	mov	sp, r7
 800d80a:	bd80      	pop	{r7, pc}

0800d80c <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d80c:	b580      	push	{r7, lr}
 800d80e:	b088      	sub	sp, #32
 800d810:	af00      	add	r7, sp, #0
 800d812:	6078      	str	r0, [r7, #4]
 800d814:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	60fb      	str	r3, [r7, #12]
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	3324      	adds	r3, #36	@ 0x24
 800d820:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d822:	220b      	movs	r2, #11
 800d824:	2120      	movs	r1, #32
 800d826:	68b8      	ldr	r0, [r7, #8]
 800d828:	f7ff f818 	bl	800c85c <mem_set>
	si = i = 0; ni = 8;
 800d82c:	2300      	movs	r3, #0
 800d82e:	613b      	str	r3, [r7, #16]
 800d830:	693b      	ldr	r3, [r7, #16]
 800d832:	61fb      	str	r3, [r7, #28]
 800d834:	2308      	movs	r3, #8
 800d836:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d838:	69fb      	ldr	r3, [r7, #28]
 800d83a:	1c5a      	adds	r2, r3, #1
 800d83c:	61fa      	str	r2, [r7, #28]
 800d83e:	68fa      	ldr	r2, [r7, #12]
 800d840:	4413      	add	r3, r2
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d846:	7efb      	ldrb	r3, [r7, #27]
 800d848:	2b20      	cmp	r3, #32
 800d84a:	d94e      	bls.n	800d8ea <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d84c:	7efb      	ldrb	r3, [r7, #27]
 800d84e:	2b2f      	cmp	r3, #47	@ 0x2f
 800d850:	d006      	beq.n	800d860 <create_name+0x54>
 800d852:	7efb      	ldrb	r3, [r7, #27]
 800d854:	2b5c      	cmp	r3, #92	@ 0x5c
 800d856:	d110      	bne.n	800d87a <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d858:	e002      	b.n	800d860 <create_name+0x54>
 800d85a:	69fb      	ldr	r3, [r7, #28]
 800d85c:	3301      	adds	r3, #1
 800d85e:	61fb      	str	r3, [r7, #28]
 800d860:	68fa      	ldr	r2, [r7, #12]
 800d862:	69fb      	ldr	r3, [r7, #28]
 800d864:	4413      	add	r3, r2
 800d866:	781b      	ldrb	r3, [r3, #0]
 800d868:	2b2f      	cmp	r3, #47	@ 0x2f
 800d86a:	d0f6      	beq.n	800d85a <create_name+0x4e>
 800d86c:	68fa      	ldr	r2, [r7, #12]
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	4413      	add	r3, r2
 800d872:	781b      	ldrb	r3, [r3, #0]
 800d874:	2b5c      	cmp	r3, #92	@ 0x5c
 800d876:	d0f0      	beq.n	800d85a <create_name+0x4e>
			break;
 800d878:	e038      	b.n	800d8ec <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d87a:	7efb      	ldrb	r3, [r7, #27]
 800d87c:	2b2e      	cmp	r3, #46	@ 0x2e
 800d87e:	d003      	beq.n	800d888 <create_name+0x7c>
 800d880:	693a      	ldr	r2, [r7, #16]
 800d882:	697b      	ldr	r3, [r7, #20]
 800d884:	429a      	cmp	r2, r3
 800d886:	d30c      	bcc.n	800d8a2 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d888:	697b      	ldr	r3, [r7, #20]
 800d88a:	2b0b      	cmp	r3, #11
 800d88c:	d002      	beq.n	800d894 <create_name+0x88>
 800d88e:	7efb      	ldrb	r3, [r7, #27]
 800d890:	2b2e      	cmp	r3, #46	@ 0x2e
 800d892:	d001      	beq.n	800d898 <create_name+0x8c>
 800d894:	2306      	movs	r3, #6
 800d896:	e044      	b.n	800d922 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d898:	2308      	movs	r3, #8
 800d89a:	613b      	str	r3, [r7, #16]
 800d89c:	230b      	movs	r3, #11
 800d89e:	617b      	str	r3, [r7, #20]
			continue;
 800d8a0:	e022      	b.n	800d8e8 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d8a2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	da04      	bge.n	800d8b4 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d8aa:	7efb      	ldrb	r3, [r7, #27]
 800d8ac:	3b80      	subs	r3, #128	@ 0x80
 800d8ae:	4a1f      	ldr	r2, [pc, #124]	@ (800d92c <create_name+0x120>)
 800d8b0:	5cd3      	ldrb	r3, [r2, r3]
 800d8b2:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d8b4:	7efb      	ldrb	r3, [r7, #27]
 800d8b6:	4619      	mov	r1, r3
 800d8b8:	481d      	ldr	r0, [pc, #116]	@ (800d930 <create_name+0x124>)
 800d8ba:	f7ff f811 	bl	800c8e0 <chk_chr>
 800d8be:	4603      	mov	r3, r0
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d001      	beq.n	800d8c8 <create_name+0xbc>
 800d8c4:	2306      	movs	r3, #6
 800d8c6:	e02c      	b.n	800d922 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d8c8:	7efb      	ldrb	r3, [r7, #27]
 800d8ca:	2b60      	cmp	r3, #96	@ 0x60
 800d8cc:	d905      	bls.n	800d8da <create_name+0xce>
 800d8ce:	7efb      	ldrb	r3, [r7, #27]
 800d8d0:	2b7a      	cmp	r3, #122	@ 0x7a
 800d8d2:	d802      	bhi.n	800d8da <create_name+0xce>
 800d8d4:	7efb      	ldrb	r3, [r7, #27]
 800d8d6:	3b20      	subs	r3, #32
 800d8d8:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	1c5a      	adds	r2, r3, #1
 800d8de:	613a      	str	r2, [r7, #16]
 800d8e0:	68ba      	ldr	r2, [r7, #8]
 800d8e2:	4413      	add	r3, r2
 800d8e4:	7efa      	ldrb	r2, [r7, #27]
 800d8e6:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d8e8:	e7a6      	b.n	800d838 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d8ea:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	69fb      	ldr	r3, [r7, #28]
 800d8f0:	441a      	add	r2, r3
 800d8f2:	683b      	ldr	r3, [r7, #0]
 800d8f4:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d8f6:	693b      	ldr	r3, [r7, #16]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d101      	bne.n	800d900 <create_name+0xf4>
 800d8fc:	2306      	movs	r3, #6
 800d8fe:	e010      	b.n	800d922 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	781b      	ldrb	r3, [r3, #0]
 800d904:	2be5      	cmp	r3, #229	@ 0xe5
 800d906:	d102      	bne.n	800d90e <create_name+0x102>
 800d908:	68bb      	ldr	r3, [r7, #8]
 800d90a:	2205      	movs	r2, #5
 800d90c:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d90e:	7efb      	ldrb	r3, [r7, #27]
 800d910:	2b20      	cmp	r3, #32
 800d912:	d801      	bhi.n	800d918 <create_name+0x10c>
 800d914:	2204      	movs	r2, #4
 800d916:	e000      	b.n	800d91a <create_name+0x10e>
 800d918:	2200      	movs	r2, #0
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	330b      	adds	r3, #11
 800d91e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d920:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d922:	4618      	mov	r0, r3
 800d924:	3720      	adds	r7, #32
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}
 800d92a:	bf00      	nop
 800d92c:	08017998 	.word	0x08017998
 800d930:	0801005c 	.word	0x0801005c

0800d934 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d934:	b580      	push	{r7, lr}
 800d936:	b086      	sub	sp, #24
 800d938:	af00      	add	r7, sp, #0
 800d93a:	6078      	str	r0, [r7, #4]
 800d93c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d942:	693b      	ldr	r3, [r7, #16]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d948:	e002      	b.n	800d950 <follow_path+0x1c>
 800d94a:	683b      	ldr	r3, [r7, #0]
 800d94c:	3301      	adds	r3, #1
 800d94e:	603b      	str	r3, [r7, #0]
 800d950:	683b      	ldr	r3, [r7, #0]
 800d952:	781b      	ldrb	r3, [r3, #0]
 800d954:	2b2f      	cmp	r3, #47	@ 0x2f
 800d956:	d0f8      	beq.n	800d94a <follow_path+0x16>
 800d958:	683b      	ldr	r3, [r7, #0]
 800d95a:	781b      	ldrb	r3, [r3, #0]
 800d95c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d95e:	d0f4      	beq.n	800d94a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d960:	693b      	ldr	r3, [r7, #16]
 800d962:	2200      	movs	r2, #0
 800d964:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d966:	683b      	ldr	r3, [r7, #0]
 800d968:	781b      	ldrb	r3, [r3, #0]
 800d96a:	2b1f      	cmp	r3, #31
 800d96c:	d80a      	bhi.n	800d984 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d96e:	687b      	ldr	r3, [r7, #4]
 800d970:	2280      	movs	r2, #128	@ 0x80
 800d972:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d976:	2100      	movs	r1, #0
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f7ff fcfa 	bl	800d372 <dir_sdi>
 800d97e:	4603      	mov	r3, r0
 800d980:	75fb      	strb	r3, [r7, #23]
 800d982:	e043      	b.n	800da0c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d984:	463b      	mov	r3, r7
 800d986:	4619      	mov	r1, r3
 800d988:	6878      	ldr	r0, [r7, #4]
 800d98a:	f7ff ff3f 	bl	800d80c <create_name>
 800d98e:	4603      	mov	r3, r0
 800d990:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d992:	7dfb      	ldrb	r3, [r7, #23]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d134      	bne.n	800da02 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d998:	6878      	ldr	r0, [r7, #4]
 800d99a:	f7ff feb0 	bl	800d6fe <dir_find>
 800d99e:	4603      	mov	r3, r0
 800d9a0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d9a8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d9aa:	7dfb      	ldrb	r3, [r7, #23]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d00a      	beq.n	800d9c6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d9b0:	7dfb      	ldrb	r3, [r7, #23]
 800d9b2:	2b04      	cmp	r3, #4
 800d9b4:	d127      	bne.n	800da06 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d9b6:	7afb      	ldrb	r3, [r7, #11]
 800d9b8:	f003 0304 	and.w	r3, r3, #4
 800d9bc:	2b00      	cmp	r3, #0
 800d9be:	d122      	bne.n	800da06 <follow_path+0xd2>
 800d9c0:	2305      	movs	r3, #5
 800d9c2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d9c4:	e01f      	b.n	800da06 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d9c6:	7afb      	ldrb	r3, [r7, #11]
 800d9c8:	f003 0304 	and.w	r3, r3, #4
 800d9cc:	2b00      	cmp	r3, #0
 800d9ce:	d11c      	bne.n	800da0a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d9d0:	693b      	ldr	r3, [r7, #16]
 800d9d2:	799b      	ldrb	r3, [r3, #6]
 800d9d4:	f003 0310 	and.w	r3, r3, #16
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d102      	bne.n	800d9e2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d9dc:	2305      	movs	r3, #5
 800d9de:	75fb      	strb	r3, [r7, #23]
 800d9e0:	e014      	b.n	800da0c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	695b      	ldr	r3, [r3, #20]
 800d9ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9f0:	4413      	add	r3, r2
 800d9f2:	4619      	mov	r1, r3
 800d9f4:	68f8      	ldr	r0, [r7, #12]
 800d9f6:	f7ff fe43 	bl	800d680 <ld_clust>
 800d9fa:	4602      	mov	r2, r0
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800da00:	e7c0      	b.n	800d984 <follow_path+0x50>
			if (res != FR_OK) break;
 800da02:	bf00      	nop
 800da04:	e002      	b.n	800da0c <follow_path+0xd8>
				break;
 800da06:	bf00      	nop
 800da08:	e000      	b.n	800da0c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800da0a:	bf00      	nop
			}
		}
	}

	return res;
 800da0c:	7dfb      	ldrb	r3, [r7, #23]
}
 800da0e:	4618      	mov	r0, r3
 800da10:	3718      	adds	r7, #24
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}

0800da16 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800da16:	b480      	push	{r7}
 800da18:	b087      	sub	sp, #28
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800da1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800da22:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d031      	beq.n	800da90 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	681b      	ldr	r3, [r3, #0]
 800da30:	617b      	str	r3, [r7, #20]
 800da32:	e002      	b.n	800da3a <get_ldnumber+0x24>
 800da34:	697b      	ldr	r3, [r7, #20]
 800da36:	3301      	adds	r3, #1
 800da38:	617b      	str	r3, [r7, #20]
 800da3a:	697b      	ldr	r3, [r7, #20]
 800da3c:	781b      	ldrb	r3, [r3, #0]
 800da3e:	2b20      	cmp	r3, #32
 800da40:	d903      	bls.n	800da4a <get_ldnumber+0x34>
 800da42:	697b      	ldr	r3, [r7, #20]
 800da44:	781b      	ldrb	r3, [r3, #0]
 800da46:	2b3a      	cmp	r3, #58	@ 0x3a
 800da48:	d1f4      	bne.n	800da34 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800da4a:	697b      	ldr	r3, [r7, #20]
 800da4c:	781b      	ldrb	r3, [r3, #0]
 800da4e:	2b3a      	cmp	r3, #58	@ 0x3a
 800da50:	d11c      	bne.n	800da8c <get_ldnumber+0x76>
			tp = *path;
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	1c5a      	adds	r2, r3, #1
 800da5c:	60fa      	str	r2, [r7, #12]
 800da5e:	781b      	ldrb	r3, [r3, #0]
 800da60:	3b30      	subs	r3, #48	@ 0x30
 800da62:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800da64:	68bb      	ldr	r3, [r7, #8]
 800da66:	2b09      	cmp	r3, #9
 800da68:	d80e      	bhi.n	800da88 <get_ldnumber+0x72>
 800da6a:	68fa      	ldr	r2, [r7, #12]
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	429a      	cmp	r2, r3
 800da70:	d10a      	bne.n	800da88 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d107      	bne.n	800da88 <get_ldnumber+0x72>
					vol = (int)i;
 800da78:	68bb      	ldr	r3, [r7, #8]
 800da7a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	3301      	adds	r3, #1
 800da80:	617b      	str	r3, [r7, #20]
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	697a      	ldr	r2, [r7, #20]
 800da86:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800da88:	693b      	ldr	r3, [r7, #16]
 800da8a:	e002      	b.n	800da92 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800da8c:	2300      	movs	r3, #0
 800da8e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800da90:	693b      	ldr	r3, [r7, #16]
}
 800da92:	4618      	mov	r0, r3
 800da94:	371c      	adds	r7, #28
 800da96:	46bd      	mov	sp, r7
 800da98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da9c:	4770      	bx	lr
	...

0800daa0 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b082      	sub	sp, #8
 800daa4:	af00      	add	r7, sp, #0
 800daa6:	6078      	str	r0, [r7, #4]
 800daa8:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	2200      	movs	r2, #0
 800daae:	70da      	strb	r2, [r3, #3]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800dab6:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800dab8:	6839      	ldr	r1, [r7, #0]
 800daba:	6878      	ldr	r0, [r7, #4]
 800dabc:	f7ff f8dc 	bl	800cc78 <move_window>
 800dac0:	4603      	mov	r3, r0
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d001      	beq.n	800daca <check_fs+0x2a>
 800dac6:	2304      	movs	r3, #4
 800dac8:	e038      	b.n	800db3c <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	3330      	adds	r3, #48	@ 0x30
 800dace:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800dad2:	4618      	mov	r0, r3
 800dad4:	f7fe fe1e 	bl	800c714 <ld_word>
 800dad8:	4603      	mov	r3, r0
 800dada:	461a      	mov	r2, r3
 800dadc:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800dae0:	429a      	cmp	r2, r3
 800dae2:	d001      	beq.n	800dae8 <check_fs+0x48>
 800dae4:	2303      	movs	r3, #3
 800dae6:	e029      	b.n	800db3c <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800daee:	2be9      	cmp	r3, #233	@ 0xe9
 800daf0:	d009      	beq.n	800db06 <check_fs+0x66>
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800daf8:	2beb      	cmp	r3, #235	@ 0xeb
 800dafa:	d11e      	bne.n	800db3a <check_fs+0x9a>
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800db02:	2b90      	cmp	r3, #144	@ 0x90
 800db04:	d119      	bne.n	800db3a <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800db06:	687b      	ldr	r3, [r7, #4]
 800db08:	3330      	adds	r3, #48	@ 0x30
 800db0a:	3336      	adds	r3, #54	@ 0x36
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fe fe1a 	bl	800c746 <ld_dword>
 800db12:	4603      	mov	r3, r0
 800db14:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800db18:	4a0a      	ldr	r2, [pc, #40]	@ (800db44 <check_fs+0xa4>)
 800db1a:	4293      	cmp	r3, r2
 800db1c:	d101      	bne.n	800db22 <check_fs+0x82>
 800db1e:	2300      	movs	r3, #0
 800db20:	e00c      	b.n	800db3c <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	3330      	adds	r3, #48	@ 0x30
 800db26:	3352      	adds	r3, #82	@ 0x52
 800db28:	4618      	mov	r0, r3
 800db2a:	f7fe fe0c 	bl	800c746 <ld_dword>
 800db2e:	4603      	mov	r3, r0
 800db30:	4a05      	ldr	r2, [pc, #20]	@ (800db48 <check_fs+0xa8>)
 800db32:	4293      	cmp	r3, r2
 800db34:	d101      	bne.n	800db3a <check_fs+0x9a>
 800db36:	2300      	movs	r3, #0
 800db38:	e000      	b.n	800db3c <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800db3a:	2302      	movs	r3, #2
}
 800db3c:	4618      	mov	r0, r3
 800db3e:	3708      	adds	r7, #8
 800db40:	46bd      	mov	sp, r7
 800db42:	bd80      	pop	{r7, pc}
 800db44:	00544146 	.word	0x00544146
 800db48:	33544146 	.word	0x33544146

0800db4c <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b096      	sub	sp, #88	@ 0x58
 800db50:	af00      	add	r7, sp, #0
 800db52:	60f8      	str	r0, [r7, #12]
 800db54:	60b9      	str	r1, [r7, #8]
 800db56:	4613      	mov	r3, r2
 800db58:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800db5a:	68bb      	ldr	r3, [r7, #8]
 800db5c:	2200      	movs	r2, #0
 800db5e:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800db60:	68f8      	ldr	r0, [r7, #12]
 800db62:	f7ff ff58 	bl	800da16 <get_ldnumber>
 800db66:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800db68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	da01      	bge.n	800db72 <find_volume+0x26>
 800db6e:	230b      	movs	r3, #11
 800db70:	e22d      	b.n	800dfce <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800db72:	4aa1      	ldr	r2, [pc, #644]	@ (800ddf8 <find_volume+0x2ac>)
 800db74:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800db7a:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800db7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db7e:	2b00      	cmp	r3, #0
 800db80:	d101      	bne.n	800db86 <find_volume+0x3a>
 800db82:	230c      	movs	r3, #12
 800db84:	e223      	b.n	800dfce <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800db86:	68bb      	ldr	r3, [r7, #8]
 800db88:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800db8a:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800db8c:	79fb      	ldrb	r3, [r7, #7]
 800db8e:	f023 0301 	bic.w	r3, r3, #1
 800db92:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800db94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db96:	781b      	ldrb	r3, [r3, #0]
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d01a      	beq.n	800dbd2 <find_volume+0x86>
		stat = disk_status(fs->drv);
 800db9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db9e:	785b      	ldrb	r3, [r3, #1]
 800dba0:	4618      	mov	r0, r3
 800dba2:	f7fe fd17 	bl	800c5d4 <disk_status>
 800dba6:	4603      	mov	r3, r0
 800dba8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dbac:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbb0:	f003 0301 	and.w	r3, r3, #1
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	d10c      	bne.n	800dbd2 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dbb8:	79fb      	ldrb	r3, [r7, #7]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	d007      	beq.n	800dbce <find_volume+0x82>
 800dbbe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbc2:	f003 0304 	and.w	r3, r3, #4
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d001      	beq.n	800dbce <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dbca:	230a      	movs	r3, #10
 800dbcc:	e1ff      	b.n	800dfce <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dbce:	2300      	movs	r3, #0
 800dbd0:	e1fd      	b.n	800dfce <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dbd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dbd8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dbda:	b2da      	uxtb	r2, r3
 800dbdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbde:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dbe0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dbe2:	785b      	ldrb	r3, [r3, #1]
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	f7fe fd0f 	bl	800c608 <disk_initialize>
 800dbea:	4603      	mov	r3, r0
 800dbec:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dbf0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dbf4:	f003 0301 	and.w	r3, r3, #1
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d001      	beq.n	800dc00 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dbfc:	2303      	movs	r3, #3
 800dbfe:	e1e6      	b.n	800dfce <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dc00:	79fb      	ldrb	r3, [r7, #7]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d007      	beq.n	800dc16 <find_volume+0xca>
 800dc06:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dc0a:	f003 0304 	and.w	r3, r3, #4
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d001      	beq.n	800dc16 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800dc12:	230a      	movs	r3, #10
 800dc14:	e1db      	b.n	800dfce <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800dc16:	2300      	movs	r3, #0
 800dc18:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800dc1a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dc1c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dc1e:	f7ff ff3f 	bl	800daa0 <check_fs>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800dc28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d149      	bne.n	800dcc4 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc30:	2300      	movs	r3, #0
 800dc32:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc34:	e01e      	b.n	800dc74 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800dc36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc38:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dc3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc3e:	011b      	lsls	r3, r3, #4
 800dc40:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800dc44:	4413      	add	r3, r2
 800dc46:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800dc48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc4a:	3304      	adds	r3, #4
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d006      	beq.n	800dc60 <find_volume+0x114>
 800dc52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dc54:	3308      	adds	r3, #8
 800dc56:	4618      	mov	r0, r3
 800dc58:	f7fe fd75 	bl	800c746 <ld_dword>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	e000      	b.n	800dc62 <find_volume+0x116>
 800dc60:	2200      	movs	r2, #0
 800dc62:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	3358      	adds	r3, #88	@ 0x58
 800dc68:	443b      	add	r3, r7
 800dc6a:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800dc6e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc70:	3301      	adds	r3, #1
 800dc72:	643b      	str	r3, [r7, #64]	@ 0x40
 800dc74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc76:	2b03      	cmp	r3, #3
 800dc78:	d9dd      	bls.n	800dc36 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dc7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d002      	beq.n	800dc8a <find_volume+0x13e>
 800dc84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc86:	3b01      	subs	r3, #1
 800dc88:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dc8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dc8c:	009b      	lsls	r3, r3, #2
 800dc8e:	3358      	adds	r3, #88	@ 0x58
 800dc90:	443b      	add	r3, r7
 800dc92:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dc96:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dc98:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dc9a:	2b00      	cmp	r3, #0
 800dc9c:	d005      	beq.n	800dcaa <find_volume+0x15e>
 800dc9e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dca0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dca2:	f7ff fefd 	bl	800daa0 <check_fs>
 800dca6:	4603      	mov	r3, r0
 800dca8:	e000      	b.n	800dcac <find_volume+0x160>
 800dcaa:	2303      	movs	r3, #3
 800dcac:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dcb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcb4:	2b01      	cmp	r3, #1
 800dcb6:	d905      	bls.n	800dcc4 <find_volume+0x178>
 800dcb8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcba:	3301      	adds	r3, #1
 800dcbc:	643b      	str	r3, [r7, #64]	@ 0x40
 800dcbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dcc0:	2b03      	cmp	r3, #3
 800dcc2:	d9e2      	bls.n	800dc8a <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dcc4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcc8:	2b04      	cmp	r3, #4
 800dcca:	d101      	bne.n	800dcd0 <find_volume+0x184>
 800dccc:	2301      	movs	r3, #1
 800dcce:	e17e      	b.n	800dfce <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dcd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dcd4:	2b01      	cmp	r3, #1
 800dcd6:	d901      	bls.n	800dcdc <find_volume+0x190>
 800dcd8:	230d      	movs	r3, #13
 800dcda:	e178      	b.n	800dfce <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dcdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcde:	3330      	adds	r3, #48	@ 0x30
 800dce0:	330b      	adds	r3, #11
 800dce2:	4618      	mov	r0, r3
 800dce4:	f7fe fd16 	bl	800c714 <ld_word>
 800dce8:	4603      	mov	r3, r0
 800dcea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dcee:	d001      	beq.n	800dcf4 <find_volume+0x1a8>
 800dcf0:	230d      	movs	r3, #13
 800dcf2:	e16c      	b.n	800dfce <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dcf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcf6:	3330      	adds	r3, #48	@ 0x30
 800dcf8:	3316      	adds	r3, #22
 800dcfa:	4618      	mov	r0, r3
 800dcfc:	f7fe fd0a 	bl	800c714 <ld_word>
 800dd00:	4603      	mov	r3, r0
 800dd02:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dd04:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d106      	bne.n	800dd18 <find_volume+0x1cc>
 800dd0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd0c:	3330      	adds	r3, #48	@ 0x30
 800dd0e:	3324      	adds	r3, #36	@ 0x24
 800dd10:	4618      	mov	r0, r3
 800dd12:	f7fe fd18 	bl	800c746 <ld_dword>
 800dd16:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dd18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dd1c:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dd1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd20:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800dd24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd26:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dd28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd2a:	789b      	ldrb	r3, [r3, #2]
 800dd2c:	2b01      	cmp	r3, #1
 800dd2e:	d005      	beq.n	800dd3c <find_volume+0x1f0>
 800dd30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd32:	789b      	ldrb	r3, [r3, #2]
 800dd34:	2b02      	cmp	r3, #2
 800dd36:	d001      	beq.n	800dd3c <find_volume+0x1f0>
 800dd38:	230d      	movs	r3, #13
 800dd3a:	e148      	b.n	800dfce <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dd3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd3e:	789b      	ldrb	r3, [r3, #2]
 800dd40:	461a      	mov	r2, r3
 800dd42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd44:	fb02 f303 	mul.w	r3, r2, r3
 800dd48:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dd4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dd50:	461a      	mov	r2, r3
 800dd52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd54:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dd56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd58:	895b      	ldrh	r3, [r3, #10]
 800dd5a:	2b00      	cmp	r3, #0
 800dd5c:	d008      	beq.n	800dd70 <find_volume+0x224>
 800dd5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd60:	895b      	ldrh	r3, [r3, #10]
 800dd62:	461a      	mov	r2, r3
 800dd64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd66:	895b      	ldrh	r3, [r3, #10]
 800dd68:	3b01      	subs	r3, #1
 800dd6a:	4013      	ands	r3, r2
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d001      	beq.n	800dd74 <find_volume+0x228>
 800dd70:	230d      	movs	r3, #13
 800dd72:	e12c      	b.n	800dfce <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dd74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd76:	3330      	adds	r3, #48	@ 0x30
 800dd78:	3311      	adds	r3, #17
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	f7fe fcca 	bl	800c714 <ld_word>
 800dd80:	4603      	mov	r3, r0
 800dd82:	461a      	mov	r2, r3
 800dd84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd86:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dd88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd8a:	891b      	ldrh	r3, [r3, #8]
 800dd8c:	f003 030f 	and.w	r3, r3, #15
 800dd90:	b29b      	uxth	r3, r3
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d001      	beq.n	800dd9a <find_volume+0x24e>
 800dd96:	230d      	movs	r3, #13
 800dd98:	e119      	b.n	800dfce <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dd9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd9c:	3330      	adds	r3, #48	@ 0x30
 800dd9e:	3313      	adds	r3, #19
 800dda0:	4618      	mov	r0, r3
 800dda2:	f7fe fcb7 	bl	800c714 <ld_word>
 800dda6:	4603      	mov	r3, r0
 800dda8:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800ddaa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d106      	bne.n	800ddbe <find_volume+0x272>
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb2:	3330      	adds	r3, #48	@ 0x30
 800ddb4:	3320      	adds	r3, #32
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe fcc5 	bl	800c746 <ld_dword>
 800ddbc:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	3330      	adds	r3, #48	@ 0x30
 800ddc2:	330e      	adds	r3, #14
 800ddc4:	4618      	mov	r0, r3
 800ddc6:	f7fe fca5 	bl	800c714 <ld_word>
 800ddca:	4603      	mov	r3, r0
 800ddcc:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800ddce:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <find_volume+0x28c>
 800ddd4:	230d      	movs	r3, #13
 800ddd6:	e0fa      	b.n	800dfce <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800ddd8:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800ddda:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dddc:	4413      	add	r3, r2
 800ddde:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dde0:	8912      	ldrh	r2, [r2, #8]
 800dde2:	0912      	lsrs	r2, r2, #4
 800dde4:	b292      	uxth	r2, r2
 800dde6:	4413      	add	r3, r2
 800dde8:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800ddea:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ddee:	429a      	cmp	r2, r3
 800ddf0:	d204      	bcs.n	800ddfc <find_volume+0x2b0>
 800ddf2:	230d      	movs	r3, #13
 800ddf4:	e0eb      	b.n	800dfce <find_volume+0x482>
 800ddf6:	bf00      	nop
 800ddf8:	200003f8 	.word	0x200003f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800ddfc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ddfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de00:	1ad3      	subs	r3, r2, r3
 800de02:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800de04:	8952      	ldrh	r2, [r2, #10]
 800de06:	fbb3 f3f2 	udiv	r3, r3, r2
 800de0a:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800de0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d101      	bne.n	800de16 <find_volume+0x2ca>
 800de12:	230d      	movs	r3, #13
 800de14:	e0db      	b.n	800dfce <find_volume+0x482>
		fmt = FS_FAT32;
 800de16:	2303      	movs	r3, #3
 800de18:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800de1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de1e:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800de22:	4293      	cmp	r3, r2
 800de24:	d802      	bhi.n	800de2c <find_volume+0x2e0>
 800de26:	2302      	movs	r3, #2
 800de28:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800de2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de2e:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800de32:	4293      	cmp	r3, r2
 800de34:	d802      	bhi.n	800de3c <find_volume+0x2f0>
 800de36:	2301      	movs	r3, #1
 800de38:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800de3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800de3e:	1c9a      	adds	r2, r3, #2
 800de40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de42:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800de44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de46:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de48:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800de4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800de4c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de4e:	441a      	add	r2, r3
 800de50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de52:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800de54:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800de56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de58:	441a      	add	r2, r3
 800de5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de5c:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800de5e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de62:	2b03      	cmp	r3, #3
 800de64:	d11e      	bne.n	800dea4 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800de66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de68:	3330      	adds	r3, #48	@ 0x30
 800de6a:	332a      	adds	r3, #42	@ 0x2a
 800de6c:	4618      	mov	r0, r3
 800de6e:	f7fe fc51 	bl	800c714 <ld_word>
 800de72:	4603      	mov	r3, r0
 800de74:	2b00      	cmp	r3, #0
 800de76:	d001      	beq.n	800de7c <find_volume+0x330>
 800de78:	230d      	movs	r3, #13
 800de7a:	e0a8      	b.n	800dfce <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800de7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de7e:	891b      	ldrh	r3, [r3, #8]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <find_volume+0x33c>
 800de84:	230d      	movs	r3, #13
 800de86:	e0a2      	b.n	800dfce <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800de88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de8a:	3330      	adds	r3, #48	@ 0x30
 800de8c:	332c      	adds	r3, #44	@ 0x2c
 800de8e:	4618      	mov	r0, r3
 800de90:	f7fe fc59 	bl	800c746 <ld_dword>
 800de94:	4602      	mov	r2, r0
 800de96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de98:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800de9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de9c:	695b      	ldr	r3, [r3, #20]
 800de9e:	009b      	lsls	r3, r3, #2
 800dea0:	647b      	str	r3, [r7, #68]	@ 0x44
 800dea2:	e01f      	b.n	800dee4 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800dea4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dea6:	891b      	ldrh	r3, [r3, #8]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <find_volume+0x364>
 800deac:	230d      	movs	r3, #13
 800deae:	e08e      	b.n	800dfce <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800deb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deb2:	6a1a      	ldr	r2, [r3, #32]
 800deb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800deb6:	441a      	add	r2, r3
 800deb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deba:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800debc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dec0:	2b02      	cmp	r3, #2
 800dec2:	d103      	bne.n	800decc <find_volume+0x380>
 800dec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec6:	695b      	ldr	r3, [r3, #20]
 800dec8:	005b      	lsls	r3, r3, #1
 800deca:	e00a      	b.n	800dee2 <find_volume+0x396>
 800decc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dece:	695a      	ldr	r2, [r3, #20]
 800ded0:	4613      	mov	r3, r2
 800ded2:	005b      	lsls	r3, r3, #1
 800ded4:	4413      	add	r3, r2
 800ded6:	085a      	lsrs	r2, r3, #1
 800ded8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deda:	695b      	ldr	r3, [r3, #20]
 800dedc:	f003 0301 	and.w	r3, r3, #1
 800dee0:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800dee2:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800dee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dee6:	699a      	ldr	r2, [r3, #24]
 800dee8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800deea:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800deee:	0a5b      	lsrs	r3, r3, #9
 800def0:	429a      	cmp	r2, r3
 800def2:	d201      	bcs.n	800def8 <find_volume+0x3ac>
 800def4:	230d      	movs	r3, #13
 800def6:	e06a      	b.n	800dfce <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800def8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800defa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800defe:	611a      	str	r2, [r3, #16]
 800df00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df02:	691a      	ldr	r2, [r3, #16]
 800df04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df06:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800df08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df0a:	2280      	movs	r2, #128	@ 0x80
 800df0c:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800df0e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800df12:	2b03      	cmp	r3, #3
 800df14:	d149      	bne.n	800dfaa <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800df16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df18:	3330      	adds	r3, #48	@ 0x30
 800df1a:	3330      	adds	r3, #48	@ 0x30
 800df1c:	4618      	mov	r0, r3
 800df1e:	f7fe fbf9 	bl	800c714 <ld_word>
 800df22:	4603      	mov	r3, r0
 800df24:	2b01      	cmp	r3, #1
 800df26:	d140      	bne.n	800dfaa <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800df28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800df2a:	3301      	adds	r3, #1
 800df2c:	4619      	mov	r1, r3
 800df2e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800df30:	f7fe fea2 	bl	800cc78 <move_window>
 800df34:	4603      	mov	r3, r0
 800df36:	2b00      	cmp	r3, #0
 800df38:	d137      	bne.n	800dfaa <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800df3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df3c:	2200      	movs	r2, #0
 800df3e:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800df40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df42:	3330      	adds	r3, #48	@ 0x30
 800df44:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800df48:	4618      	mov	r0, r3
 800df4a:	f7fe fbe3 	bl	800c714 <ld_word>
 800df4e:	4603      	mov	r3, r0
 800df50:	461a      	mov	r2, r3
 800df52:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800df56:	429a      	cmp	r2, r3
 800df58:	d127      	bne.n	800dfaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800df5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df5c:	3330      	adds	r3, #48	@ 0x30
 800df5e:	4618      	mov	r0, r3
 800df60:	f7fe fbf1 	bl	800c746 <ld_dword>
 800df64:	4603      	mov	r3, r0
 800df66:	4a1c      	ldr	r2, [pc, #112]	@ (800dfd8 <find_volume+0x48c>)
 800df68:	4293      	cmp	r3, r2
 800df6a:	d11e      	bne.n	800dfaa <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800df6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df6e:	3330      	adds	r3, #48	@ 0x30
 800df70:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800df74:	4618      	mov	r0, r3
 800df76:	f7fe fbe6 	bl	800c746 <ld_dword>
 800df7a:	4603      	mov	r3, r0
 800df7c:	4a17      	ldr	r2, [pc, #92]	@ (800dfdc <find_volume+0x490>)
 800df7e:	4293      	cmp	r3, r2
 800df80:	d113      	bne.n	800dfaa <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800df82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df84:	3330      	adds	r3, #48	@ 0x30
 800df86:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800df8a:	4618      	mov	r0, r3
 800df8c:	f7fe fbdb 	bl	800c746 <ld_dword>
 800df90:	4602      	mov	r2, r0
 800df92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df94:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800df96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df98:	3330      	adds	r3, #48	@ 0x30
 800df9a:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800df9e:	4618      	mov	r0, r3
 800dfa0:	f7fe fbd1 	bl	800c746 <ld_dword>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfa8:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800dfaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfac:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800dfb0:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800dfb2:	4b0b      	ldr	r3, [pc, #44]	@ (800dfe0 <find_volume+0x494>)
 800dfb4:	881b      	ldrh	r3, [r3, #0]
 800dfb6:	3301      	adds	r3, #1
 800dfb8:	b29a      	uxth	r2, r3
 800dfba:	4b09      	ldr	r3, [pc, #36]	@ (800dfe0 <find_volume+0x494>)
 800dfbc:	801a      	strh	r2, [r3, #0]
 800dfbe:	4b08      	ldr	r3, [pc, #32]	@ (800dfe0 <find_volume+0x494>)
 800dfc0:	881a      	ldrh	r2, [r3, #0]
 800dfc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfc4:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800dfc6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dfc8:	f7fe fdee 	bl	800cba8 <clear_lock>
#endif
	return FR_OK;
 800dfcc:	2300      	movs	r3, #0
}
 800dfce:	4618      	mov	r0, r3
 800dfd0:	3758      	adds	r7, #88	@ 0x58
 800dfd2:	46bd      	mov	sp, r7
 800dfd4:	bd80      	pop	{r7, pc}
 800dfd6:	bf00      	nop
 800dfd8:	41615252 	.word	0x41615252
 800dfdc:	61417272 	.word	0x61417272
 800dfe0:	200003fc 	.word	0x200003fc

0800dfe4 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b084      	sub	sp, #16
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	6078      	str	r0, [r7, #4]
 800dfec:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800dfee:	2309      	movs	r3, #9
 800dff0:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800dff2:	687b      	ldr	r3, [r7, #4]
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d01c      	beq.n	800e032 <validate+0x4e>
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d018      	beq.n	800e032 <validate+0x4e>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	781b      	ldrb	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d013      	beq.n	800e032 <validate+0x4e>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	889a      	ldrh	r2, [r3, #4]
 800e00e:	687b      	ldr	r3, [r7, #4]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	88db      	ldrh	r3, [r3, #6]
 800e014:	429a      	cmp	r2, r3
 800e016:	d10c      	bne.n	800e032 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	785b      	ldrb	r3, [r3, #1]
 800e01e:	4618      	mov	r0, r3
 800e020:	f7fe fad8 	bl	800c5d4 <disk_status>
 800e024:	4603      	mov	r3, r0
 800e026:	f003 0301 	and.w	r3, r3, #1
 800e02a:	2b00      	cmp	r3, #0
 800e02c:	d101      	bne.n	800e032 <validate+0x4e>
			res = FR_OK;
 800e02e:	2300      	movs	r3, #0
 800e030:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e032:	7bfb      	ldrb	r3, [r7, #15]
 800e034:	2b00      	cmp	r3, #0
 800e036:	d102      	bne.n	800e03e <validate+0x5a>
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	681b      	ldr	r3, [r3, #0]
 800e03c:	e000      	b.n	800e040 <validate+0x5c>
 800e03e:	2300      	movs	r3, #0
 800e040:	683a      	ldr	r2, [r7, #0]
 800e042:	6013      	str	r3, [r2, #0]
	return res;
 800e044:	7bfb      	ldrb	r3, [r7, #15]
}
 800e046:	4618      	mov	r0, r3
 800e048:	3710      	adds	r7, #16
 800e04a:	46bd      	mov	sp, r7
 800e04c:	bd80      	pop	{r7, pc}
	...

0800e050 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e050:	b580      	push	{r7, lr}
 800e052:	b088      	sub	sp, #32
 800e054:	af00      	add	r7, sp, #0
 800e056:	60f8      	str	r0, [r7, #12]
 800e058:	60b9      	str	r1, [r7, #8]
 800e05a:	4613      	mov	r3, r2
 800e05c:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e062:	f107 0310 	add.w	r3, r7, #16
 800e066:	4618      	mov	r0, r3
 800e068:	f7ff fcd5 	bl	800da16 <get_ldnumber>
 800e06c:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e06e:	69fb      	ldr	r3, [r7, #28]
 800e070:	2b00      	cmp	r3, #0
 800e072:	da01      	bge.n	800e078 <f_mount+0x28>
 800e074:	230b      	movs	r3, #11
 800e076:	e02b      	b.n	800e0d0 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e078:	4a17      	ldr	r2, [pc, #92]	@ (800e0d8 <f_mount+0x88>)
 800e07a:	69fb      	ldr	r3, [r7, #28]
 800e07c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e080:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e082:	69bb      	ldr	r3, [r7, #24]
 800e084:	2b00      	cmp	r3, #0
 800e086:	d005      	beq.n	800e094 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e088:	69b8      	ldr	r0, [r7, #24]
 800e08a:	f7fe fd8d 	bl	800cba8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e08e:	69bb      	ldr	r3, [r7, #24]
 800e090:	2200      	movs	r2, #0
 800e092:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e094:	68fb      	ldr	r3, [r7, #12]
 800e096:	2b00      	cmp	r3, #0
 800e098:	d002      	beq.n	800e0a0 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	2200      	movs	r2, #0
 800e09e:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e0a0:	68fa      	ldr	r2, [r7, #12]
 800e0a2:	490d      	ldr	r1, [pc, #52]	@ (800e0d8 <f_mount+0x88>)
 800e0a4:	69fb      	ldr	r3, [r7, #28]
 800e0a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d002      	beq.n	800e0b6 <f_mount+0x66>
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d001      	beq.n	800e0ba <f_mount+0x6a>
 800e0b6:	2300      	movs	r3, #0
 800e0b8:	e00a      	b.n	800e0d0 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e0ba:	f107 010c 	add.w	r1, r7, #12
 800e0be:	f107 0308 	add.w	r3, r7, #8
 800e0c2:	2200      	movs	r2, #0
 800e0c4:	4618      	mov	r0, r3
 800e0c6:	f7ff fd41 	bl	800db4c <find_volume>
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e0ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800e0d0:	4618      	mov	r0, r3
 800e0d2:	3720      	adds	r7, #32
 800e0d4:	46bd      	mov	sp, r7
 800e0d6:	bd80      	pop	{r7, pc}
 800e0d8:	200003f8 	.word	0x200003f8

0800e0dc <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e0dc:	b580      	push	{r7, lr}
 800e0de:	b098      	sub	sp, #96	@ 0x60
 800e0e0:	af00      	add	r7, sp, #0
 800e0e2:	60f8      	str	r0, [r7, #12]
 800e0e4:	60b9      	str	r1, [r7, #8]
 800e0e6:	4613      	mov	r3, r2
 800e0e8:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	2b00      	cmp	r3, #0
 800e0ee:	d101      	bne.n	800e0f4 <f_open+0x18>
 800e0f0:	2309      	movs	r3, #9
 800e0f2:	e1a9      	b.n	800e448 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e0f4:	79fb      	ldrb	r3, [r7, #7]
 800e0f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e0fa:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e0fc:	79fa      	ldrb	r2, [r7, #7]
 800e0fe:	f107 0110 	add.w	r1, r7, #16
 800e102:	f107 0308 	add.w	r3, r7, #8
 800e106:	4618      	mov	r0, r3
 800e108:	f7ff fd20 	bl	800db4c <find_volume>
 800e10c:	4603      	mov	r3, r0
 800e10e:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e112:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e116:	2b00      	cmp	r3, #0
 800e118:	f040 818d 	bne.w	800e436 <f_open+0x35a>
		dj.obj.fs = fs;
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e120:	68ba      	ldr	r2, [r7, #8]
 800e122:	f107 0314 	add.w	r3, r7, #20
 800e126:	4611      	mov	r1, r2
 800e128:	4618      	mov	r0, r3
 800e12a:	f7ff fc03 	bl	800d934 <follow_path>
 800e12e:	4603      	mov	r3, r0
 800e130:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e134:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d118      	bne.n	800e16e <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e13c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e140:	b25b      	sxtb	r3, r3
 800e142:	2b00      	cmp	r3, #0
 800e144:	da03      	bge.n	800e14e <f_open+0x72>
				res = FR_INVALID_NAME;
 800e146:	2306      	movs	r3, #6
 800e148:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e14c:	e00f      	b.n	800e16e <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e14e:	79fb      	ldrb	r3, [r7, #7]
 800e150:	2b01      	cmp	r3, #1
 800e152:	bf8c      	ite	hi
 800e154:	2301      	movhi	r3, #1
 800e156:	2300      	movls	r3, #0
 800e158:	b2db      	uxtb	r3, r3
 800e15a:	461a      	mov	r2, r3
 800e15c:	f107 0314 	add.w	r3, r7, #20
 800e160:	4611      	mov	r1, r2
 800e162:	4618      	mov	r0, r3
 800e164:	f7fe fbd8 	bl	800c918 <chk_lock>
 800e168:	4603      	mov	r3, r0
 800e16a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e16e:	79fb      	ldrb	r3, [r7, #7]
 800e170:	f003 031c 	and.w	r3, r3, #28
 800e174:	2b00      	cmp	r3, #0
 800e176:	d07f      	beq.n	800e278 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e178:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d017      	beq.n	800e1b0 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e180:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e184:	2b04      	cmp	r3, #4
 800e186:	d10e      	bne.n	800e1a6 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e188:	f7fe fc22 	bl	800c9d0 <enq_lock>
 800e18c:	4603      	mov	r3, r0
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d006      	beq.n	800e1a0 <f_open+0xc4>
 800e192:	f107 0314 	add.w	r3, r7, #20
 800e196:	4618      	mov	r0, r3
 800e198:	f7ff fb06 	bl	800d7a8 <dir_register>
 800e19c:	4603      	mov	r3, r0
 800e19e:	e000      	b.n	800e1a2 <f_open+0xc6>
 800e1a0:	2312      	movs	r3, #18
 800e1a2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e1a6:	79fb      	ldrb	r3, [r7, #7]
 800e1a8:	f043 0308 	orr.w	r3, r3, #8
 800e1ac:	71fb      	strb	r3, [r7, #7]
 800e1ae:	e010      	b.n	800e1d2 <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e1b0:	7ebb      	ldrb	r3, [r7, #26]
 800e1b2:	f003 0311 	and.w	r3, r3, #17
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d003      	beq.n	800e1c2 <f_open+0xe6>
					res = FR_DENIED;
 800e1ba:	2307      	movs	r3, #7
 800e1bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e1c0:	e007      	b.n	800e1d2 <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e1c2:	79fb      	ldrb	r3, [r7, #7]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d002      	beq.n	800e1d2 <f_open+0xf6>
 800e1cc:	2308      	movs	r3, #8
 800e1ce:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e1d2:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d168      	bne.n	800e2ac <f_open+0x1d0>
 800e1da:	79fb      	ldrb	r3, [r7, #7]
 800e1dc:	f003 0308 	and.w	r3, r3, #8
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d063      	beq.n	800e2ac <f_open+0x1d0>
				dw = GET_FATTIME();
 800e1e4:	f7fc f9c6 	bl	800a574 <get_fattime>
 800e1e8:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e1ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1ec:	330e      	adds	r3, #14
 800e1ee:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f7fe fae6 	bl	800c7c2 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e1f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e1f8:	3316      	adds	r3, #22
 800e1fa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e1fc:	4618      	mov	r0, r3
 800e1fe:	f7fe fae0 	bl	800c7c2 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e202:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e204:	330b      	adds	r3, #11
 800e206:	2220      	movs	r2, #32
 800e208:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e20a:	693b      	ldr	r3, [r7, #16]
 800e20c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e20e:	4611      	mov	r1, r2
 800e210:	4618      	mov	r0, r3
 800e212:	f7ff fa35 	bl	800d680 <ld_clust>
 800e216:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e21c:	2200      	movs	r2, #0
 800e21e:	4618      	mov	r0, r3
 800e220:	f7ff fa4d 	bl	800d6be <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e224:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e226:	331c      	adds	r3, #28
 800e228:	2100      	movs	r1, #0
 800e22a:	4618      	mov	r0, r3
 800e22c:	f7fe fac9 	bl	800c7c2 <st_dword>
					fs->wflag = 1;
 800e230:	693b      	ldr	r3, [r7, #16]
 800e232:	2201      	movs	r2, #1
 800e234:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e236:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d037      	beq.n	800e2ac <f_open+0x1d0>
						dw = fs->winsect;
 800e23c:	693b      	ldr	r3, [r7, #16]
 800e23e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e240:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e242:	f107 0314 	add.w	r3, r7, #20
 800e246:	2200      	movs	r2, #0
 800e248:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fe ff60 	bl	800d110 <remove_chain>
 800e250:	4603      	mov	r3, r0
 800e252:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e256:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d126      	bne.n	800e2ac <f_open+0x1d0>
							res = move_window(fs, dw);
 800e25e:	693b      	ldr	r3, [r7, #16]
 800e260:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e262:	4618      	mov	r0, r3
 800e264:	f7fe fd08 	bl	800cc78 <move_window>
 800e268:	4603      	mov	r3, r0
 800e26a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e26e:	693b      	ldr	r3, [r7, #16]
 800e270:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e272:	3a01      	subs	r2, #1
 800e274:	60da      	str	r2, [r3, #12]
 800e276:	e019      	b.n	800e2ac <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e278:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d115      	bne.n	800e2ac <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e280:	7ebb      	ldrb	r3, [r7, #26]
 800e282:	f003 0310 	and.w	r3, r3, #16
 800e286:	2b00      	cmp	r3, #0
 800e288:	d003      	beq.n	800e292 <f_open+0x1b6>
					res = FR_NO_FILE;
 800e28a:	2304      	movs	r3, #4
 800e28c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e290:	e00c      	b.n	800e2ac <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	f003 0302 	and.w	r3, r3, #2
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d007      	beq.n	800e2ac <f_open+0x1d0>
 800e29c:	7ebb      	ldrb	r3, [r7, #26]
 800e29e:	f003 0301 	and.w	r3, r3, #1
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d002      	beq.n	800e2ac <f_open+0x1d0>
						res = FR_DENIED;
 800e2a6:	2307      	movs	r3, #7
 800e2a8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e2ac:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d126      	bne.n	800e302 <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e2b4:	79fb      	ldrb	r3, [r7, #7]
 800e2b6:	f003 0308 	and.w	r3, r3, #8
 800e2ba:	2b00      	cmp	r3, #0
 800e2bc:	d003      	beq.n	800e2c6 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e2be:	79fb      	ldrb	r3, [r7, #7]
 800e2c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e2c4:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e2ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e2d4:	79fb      	ldrb	r3, [r7, #7]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	bf8c      	ite	hi
 800e2da:	2301      	movhi	r3, #1
 800e2dc:	2300      	movls	r3, #0
 800e2de:	b2db      	uxtb	r3, r3
 800e2e0:	461a      	mov	r2, r3
 800e2e2:	f107 0314 	add.w	r3, r7, #20
 800e2e6:	4611      	mov	r1, r2
 800e2e8:	4618      	mov	r0, r3
 800e2ea:	f7fe fb93 	bl	800ca14 <inc_lock>
 800e2ee:	4602      	mov	r2, r0
 800e2f0:	68fb      	ldr	r3, [r7, #12]
 800e2f2:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	691b      	ldr	r3, [r3, #16]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d102      	bne.n	800e302 <f_open+0x226>
 800e2fc:	2302      	movs	r3, #2
 800e2fe:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e302:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e306:	2b00      	cmp	r3, #0
 800e308:	f040 8095 	bne.w	800e436 <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e30c:	693b      	ldr	r3, [r7, #16]
 800e30e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e310:	4611      	mov	r1, r2
 800e312:	4618      	mov	r0, r3
 800e314:	f7ff f9b4 	bl	800d680 <ld_clust>
 800e318:	4602      	mov	r2, r0
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e31e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e320:	331c      	adds	r3, #28
 800e322:	4618      	mov	r0, r3
 800e324:	f7fe fa0f 	bl	800c746 <ld_dword>
 800e328:	4602      	mov	r2, r0
 800e32a:	68fb      	ldr	r3, [r7, #12]
 800e32c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e32e:	68fb      	ldr	r3, [r7, #12]
 800e330:	2200      	movs	r2, #0
 800e332:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e334:	693a      	ldr	r2, [r7, #16]
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e33a:	693b      	ldr	r3, [r7, #16]
 800e33c:	88da      	ldrh	r2, [r3, #6]
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	79fa      	ldrb	r2, [r7, #7]
 800e346:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	2200      	movs	r2, #0
 800e34c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e34e:	68fb      	ldr	r3, [r7, #12]
 800e350:	2200      	movs	r2, #0
 800e352:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	3330      	adds	r3, #48	@ 0x30
 800e35e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e362:	2100      	movs	r1, #0
 800e364:	4618      	mov	r0, r3
 800e366:	f7fe fa79 	bl	800c85c <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e36a:	79fb      	ldrb	r3, [r7, #7]
 800e36c:	f003 0320 	and.w	r3, r3, #32
 800e370:	2b00      	cmp	r3, #0
 800e372:	d060      	beq.n	800e436 <f_open+0x35a>
 800e374:	68fb      	ldr	r3, [r7, #12]
 800e376:	68db      	ldr	r3, [r3, #12]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d05c      	beq.n	800e436 <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e37c:	68fb      	ldr	r3, [r7, #12]
 800e37e:	68da      	ldr	r2, [r3, #12]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e384:	693b      	ldr	r3, [r7, #16]
 800e386:	895b      	ldrh	r3, [r3, #10]
 800e388:	025b      	lsls	r3, r3, #9
 800e38a:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	689b      	ldr	r3, [r3, #8]
 800e390:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e392:	68fb      	ldr	r3, [r7, #12]
 800e394:	68db      	ldr	r3, [r3, #12]
 800e396:	657b      	str	r3, [r7, #84]	@ 0x54
 800e398:	e016      	b.n	800e3c8 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e39a:	68fb      	ldr	r3, [r7, #12]
 800e39c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e39e:	4618      	mov	r0, r3
 800e3a0:	f7fe fd25 	bl	800cdee <get_fat>
 800e3a4:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e3a6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3a8:	2b01      	cmp	r3, #1
 800e3aa:	d802      	bhi.n	800e3b2 <f_open+0x2d6>
 800e3ac:	2302      	movs	r3, #2
 800e3ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e3b2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e3b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e3b8:	d102      	bne.n	800e3c0 <f_open+0x2e4>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e3c0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3c2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3c4:	1ad3      	subs	r3, r2, r3
 800e3c6:	657b      	str	r3, [r7, #84]	@ 0x54
 800e3c8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3cc:	2b00      	cmp	r3, #0
 800e3ce:	d103      	bne.n	800e3d8 <f_open+0x2fc>
 800e3d0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e3d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e3d4:	429a      	cmp	r2, r3
 800e3d6:	d8e0      	bhi.n	800e39a <f_open+0x2be>
				}
				fp->clust = clst;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e3dc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e3de:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d127      	bne.n	800e436 <f_open+0x35a>
 800e3e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e3e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d022      	beq.n	800e436 <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e3f0:	693b      	ldr	r3, [r7, #16]
 800e3f2:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e3f4:	4618      	mov	r0, r3
 800e3f6:	f7fe fcdb 	bl	800cdb0 <clust2sect>
 800e3fa:	6478      	str	r0, [r7, #68]	@ 0x44
 800e3fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d103      	bne.n	800e40a <f_open+0x32e>
						res = FR_INT_ERR;
 800e402:	2302      	movs	r3, #2
 800e404:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e408:	e015      	b.n	800e436 <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e40a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e40c:	0a5a      	lsrs	r2, r3, #9
 800e40e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e410:	441a      	add	r2, r3
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e416:	693b      	ldr	r3, [r7, #16]
 800e418:	7858      	ldrb	r0, [r3, #1]
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	6a1a      	ldr	r2, [r3, #32]
 800e424:	2301      	movs	r3, #1
 800e426:	f7fe f917 	bl	800c658 <disk_read>
 800e42a:	4603      	mov	r3, r0
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d002      	beq.n	800e436 <f_open+0x35a>
 800e430:	2301      	movs	r3, #1
 800e432:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e436:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e43a:	2b00      	cmp	r3, #0
 800e43c:	d002      	beq.n	800e444 <f_open+0x368>
 800e43e:	68fb      	ldr	r3, [r7, #12]
 800e440:	2200      	movs	r2, #0
 800e442:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e444:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e448:	4618      	mov	r0, r3
 800e44a:	3760      	adds	r7, #96	@ 0x60
 800e44c:	46bd      	mov	sp, r7
 800e44e:	bd80      	pop	{r7, pc}

0800e450 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e450:	b580      	push	{r7, lr}
 800e452:	b08e      	sub	sp, #56	@ 0x38
 800e454:	af00      	add	r7, sp, #0
 800e456:	60f8      	str	r0, [r7, #12]
 800e458:	60b9      	str	r1, [r7, #8]
 800e45a:	607a      	str	r2, [r7, #4]
 800e45c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e45e:	68bb      	ldr	r3, [r7, #8]
 800e460:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	2200      	movs	r2, #0
 800e466:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	f107 0214 	add.w	r2, r7, #20
 800e46e:	4611      	mov	r1, r2
 800e470:	4618      	mov	r0, r3
 800e472:	f7ff fdb7 	bl	800dfe4 <validate>
 800e476:	4603      	mov	r3, r0
 800e478:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e47c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e480:	2b00      	cmp	r3, #0
 800e482:	d107      	bne.n	800e494 <f_read+0x44>
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	7d5b      	ldrb	r3, [r3, #21]
 800e488:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e48c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e490:	2b00      	cmp	r3, #0
 800e492:	d002      	beq.n	800e49a <f_read+0x4a>
 800e494:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e498:	e115      	b.n	800e6c6 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	7d1b      	ldrb	r3, [r3, #20]
 800e49e:	f003 0301 	and.w	r3, r3, #1
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d101      	bne.n	800e4aa <f_read+0x5a>
 800e4a6:	2307      	movs	r3, #7
 800e4a8:	e10d      	b.n	800e6c6 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	68da      	ldr	r2, [r3, #12]
 800e4ae:	68fb      	ldr	r3, [r7, #12]
 800e4b0:	699b      	ldr	r3, [r3, #24]
 800e4b2:	1ad3      	subs	r3, r2, r3
 800e4b4:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e4b6:	687a      	ldr	r2, [r7, #4]
 800e4b8:	6a3b      	ldr	r3, [r7, #32]
 800e4ba:	429a      	cmp	r2, r3
 800e4bc:	f240 80fe 	bls.w	800e6bc <f_read+0x26c>
 800e4c0:	6a3b      	ldr	r3, [r7, #32]
 800e4c2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e4c4:	e0fa      	b.n	800e6bc <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e4c6:	68fb      	ldr	r3, [r7, #12]
 800e4c8:	699b      	ldr	r3, [r3, #24]
 800e4ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	f040 80c6 	bne.w	800e660 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	0a5b      	lsrs	r3, r3, #9
 800e4da:	697a      	ldr	r2, [r7, #20]
 800e4dc:	8952      	ldrh	r2, [r2, #10]
 800e4de:	3a01      	subs	r2, #1
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	2b00      	cmp	r3, #0
 800e4e8:	d12f      	bne.n	800e54a <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	699b      	ldr	r3, [r3, #24]
 800e4ee:	2b00      	cmp	r3, #0
 800e4f0:	d103      	bne.n	800e4fa <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800e4f8:	e013      	b.n	800e522 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e4fa:	68fb      	ldr	r3, [r7, #12]
 800e4fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d007      	beq.n	800e512 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	699b      	ldr	r3, [r3, #24]
 800e506:	4619      	mov	r1, r3
 800e508:	68f8      	ldr	r0, [r7, #12]
 800e50a:	f7fe fefe 	bl	800d30a <clmt_clust>
 800e50e:	6338      	str	r0, [r7, #48]	@ 0x30
 800e510:	e007      	b.n	800e522 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e512:	68fa      	ldr	r2, [r7, #12]
 800e514:	68fb      	ldr	r3, [r7, #12]
 800e516:	69db      	ldr	r3, [r3, #28]
 800e518:	4619      	mov	r1, r3
 800e51a:	4610      	mov	r0, r2
 800e51c:	f7fe fc67 	bl	800cdee <get_fat>
 800e520:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e522:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e524:	2b01      	cmp	r3, #1
 800e526:	d804      	bhi.n	800e532 <f_read+0xe2>
 800e528:	68fb      	ldr	r3, [r7, #12]
 800e52a:	2202      	movs	r2, #2
 800e52c:	755a      	strb	r2, [r3, #21]
 800e52e:	2302      	movs	r3, #2
 800e530:	e0c9      	b.n	800e6c6 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e534:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e538:	d104      	bne.n	800e544 <f_read+0xf4>
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2201      	movs	r2, #1
 800e53e:	755a      	strb	r2, [r3, #21]
 800e540:	2301      	movs	r3, #1
 800e542:	e0c0      	b.n	800e6c6 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e544:	68fb      	ldr	r3, [r7, #12]
 800e546:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e548:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e54a:	697a      	ldr	r2, [r7, #20]
 800e54c:	68fb      	ldr	r3, [r7, #12]
 800e54e:	69db      	ldr	r3, [r3, #28]
 800e550:	4619      	mov	r1, r3
 800e552:	4610      	mov	r0, r2
 800e554:	f7fe fc2c 	bl	800cdb0 <clust2sect>
 800e558:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	d104      	bne.n	800e56a <f_read+0x11a>
 800e560:	68fb      	ldr	r3, [r7, #12]
 800e562:	2202      	movs	r2, #2
 800e564:	755a      	strb	r2, [r3, #21]
 800e566:	2302      	movs	r3, #2
 800e568:	e0ad      	b.n	800e6c6 <f_read+0x276>
			sect += csect;
 800e56a:	69ba      	ldr	r2, [r7, #24]
 800e56c:	69fb      	ldr	r3, [r7, #28]
 800e56e:	4413      	add	r3, r2
 800e570:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	0a5b      	lsrs	r3, r3, #9
 800e576:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	d039      	beq.n	800e5f2 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e57e:	69fa      	ldr	r2, [r7, #28]
 800e580:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e582:	4413      	add	r3, r2
 800e584:	697a      	ldr	r2, [r7, #20]
 800e586:	8952      	ldrh	r2, [r2, #10]
 800e588:	4293      	cmp	r3, r2
 800e58a:	d905      	bls.n	800e598 <f_read+0x148>
					cc = fs->csize - csect;
 800e58c:	697b      	ldr	r3, [r7, #20]
 800e58e:	895b      	ldrh	r3, [r3, #10]
 800e590:	461a      	mov	r2, r3
 800e592:	69fb      	ldr	r3, [r7, #28]
 800e594:	1ad3      	subs	r3, r2, r3
 800e596:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e598:	697b      	ldr	r3, [r7, #20]
 800e59a:	7858      	ldrb	r0, [r3, #1]
 800e59c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e59e:	69ba      	ldr	r2, [r7, #24]
 800e5a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e5a2:	f7fe f859 	bl	800c658 <disk_read>
 800e5a6:	4603      	mov	r3, r0
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d004      	beq.n	800e5b6 <f_read+0x166>
 800e5ac:	68fb      	ldr	r3, [r7, #12]
 800e5ae:	2201      	movs	r2, #1
 800e5b0:	755a      	strb	r2, [r3, #21]
 800e5b2:	2301      	movs	r3, #1
 800e5b4:	e087      	b.n	800e6c6 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e5b6:	68fb      	ldr	r3, [r7, #12]
 800e5b8:	7d1b      	ldrb	r3, [r3, #20]
 800e5ba:	b25b      	sxtb	r3, r3
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	da14      	bge.n	800e5ea <f_read+0x19a>
 800e5c0:	68fb      	ldr	r3, [r7, #12]
 800e5c2:	6a1a      	ldr	r2, [r3, #32]
 800e5c4:	69bb      	ldr	r3, [r7, #24]
 800e5c6:	1ad3      	subs	r3, r2, r3
 800e5c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e5ca:	429a      	cmp	r2, r3
 800e5cc:	d90d      	bls.n	800e5ea <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	6a1a      	ldr	r2, [r3, #32]
 800e5d2:	69bb      	ldr	r3, [r7, #24]
 800e5d4:	1ad3      	subs	r3, r2, r3
 800e5d6:	025b      	lsls	r3, r3, #9
 800e5d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5da:	18d0      	adds	r0, r2, r3
 800e5dc:	68fb      	ldr	r3, [r7, #12]
 800e5de:	3330      	adds	r3, #48	@ 0x30
 800e5e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e5e4:	4619      	mov	r1, r3
 800e5e6:	f7fe f918 	bl	800c81a <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e5ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5ec:	025b      	lsls	r3, r3, #9
 800e5ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e5f0:	e050      	b.n	800e694 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e5f2:	68fb      	ldr	r3, [r7, #12]
 800e5f4:	6a1b      	ldr	r3, [r3, #32]
 800e5f6:	69ba      	ldr	r2, [r7, #24]
 800e5f8:	429a      	cmp	r2, r3
 800e5fa:	d02e      	beq.n	800e65a <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e5fc:	68fb      	ldr	r3, [r7, #12]
 800e5fe:	7d1b      	ldrb	r3, [r3, #20]
 800e600:	b25b      	sxtb	r3, r3
 800e602:	2b00      	cmp	r3, #0
 800e604:	da18      	bge.n	800e638 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e606:	697b      	ldr	r3, [r7, #20]
 800e608:	7858      	ldrb	r0, [r3, #1]
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	6a1a      	ldr	r2, [r3, #32]
 800e614:	2301      	movs	r3, #1
 800e616:	f7fe f83f 	bl	800c698 <disk_write>
 800e61a:	4603      	mov	r3, r0
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d004      	beq.n	800e62a <f_read+0x1da>
 800e620:	68fb      	ldr	r3, [r7, #12]
 800e622:	2201      	movs	r2, #1
 800e624:	755a      	strb	r2, [r3, #21]
 800e626:	2301      	movs	r3, #1
 800e628:	e04d      	b.n	800e6c6 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e62a:	68fb      	ldr	r3, [r7, #12]
 800e62c:	7d1b      	ldrb	r3, [r3, #20]
 800e62e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e632:	b2da      	uxtb	r2, r3
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e638:	697b      	ldr	r3, [r7, #20]
 800e63a:	7858      	ldrb	r0, [r3, #1]
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e642:	2301      	movs	r3, #1
 800e644:	69ba      	ldr	r2, [r7, #24]
 800e646:	f7fe f807 	bl	800c658 <disk_read>
 800e64a:	4603      	mov	r3, r0
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d004      	beq.n	800e65a <f_read+0x20a>
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	2201      	movs	r2, #1
 800e654:	755a      	strb	r2, [r3, #21]
 800e656:	2301      	movs	r3, #1
 800e658:	e035      	b.n	800e6c6 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e65a:	68fb      	ldr	r3, [r7, #12]
 800e65c:	69ba      	ldr	r2, [r7, #24]
 800e65e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e660:	68fb      	ldr	r3, [r7, #12]
 800e662:	699b      	ldr	r3, [r3, #24]
 800e664:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e668:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e66c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	429a      	cmp	r2, r3
 800e674:	d901      	bls.n	800e67a <f_read+0x22a>
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e680:	68fb      	ldr	r3, [r7, #12]
 800e682:	699b      	ldr	r3, [r3, #24]
 800e684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e688:	4413      	add	r3, r2
 800e68a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e68c:	4619      	mov	r1, r3
 800e68e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e690:	f7fe f8c3 	bl	800c81a <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e698:	4413      	add	r3, r2
 800e69a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e69c:	68fb      	ldr	r3, [r7, #12]
 800e69e:	699a      	ldr	r2, [r3, #24]
 800e6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6a2:	441a      	add	r2, r3
 800e6a4:	68fb      	ldr	r3, [r7, #12]
 800e6a6:	619a      	str	r2, [r3, #24]
 800e6a8:	683b      	ldr	r3, [r7, #0]
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6ae:	441a      	add	r2, r3
 800e6b0:	683b      	ldr	r3, [r7, #0]
 800e6b2:	601a      	str	r2, [r3, #0]
 800e6b4:	687a      	ldr	r2, [r7, #4]
 800e6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e6b8:	1ad3      	subs	r3, r2, r3
 800e6ba:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e6bc:	687b      	ldr	r3, [r7, #4]
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	f47f af01 	bne.w	800e4c6 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e6c4:	2300      	movs	r3, #0
}
 800e6c6:	4618      	mov	r0, r3
 800e6c8:	3738      	adds	r7, #56	@ 0x38
 800e6ca:	46bd      	mov	sp, r7
 800e6cc:	bd80      	pop	{r7, pc}

0800e6ce <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e6ce:	b580      	push	{r7, lr}
 800e6d0:	b086      	sub	sp, #24
 800e6d2:	af00      	add	r7, sp, #0
 800e6d4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	f107 0208 	add.w	r2, r7, #8
 800e6dc:	4611      	mov	r1, r2
 800e6de:	4618      	mov	r0, r3
 800e6e0:	f7ff fc80 	bl	800dfe4 <validate>
 800e6e4:	4603      	mov	r3, r0
 800e6e6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d168      	bne.n	800e7c0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e6ee:	687b      	ldr	r3, [r7, #4]
 800e6f0:	7d1b      	ldrb	r3, [r3, #20]
 800e6f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d062      	beq.n	800e7c0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e6fa:	687b      	ldr	r3, [r7, #4]
 800e6fc:	7d1b      	ldrb	r3, [r3, #20]
 800e6fe:	b25b      	sxtb	r3, r3
 800e700:	2b00      	cmp	r3, #0
 800e702:	da15      	bge.n	800e730 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	7858      	ldrb	r0, [r3, #1]
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e70e:	687b      	ldr	r3, [r7, #4]
 800e710:	6a1a      	ldr	r2, [r3, #32]
 800e712:	2301      	movs	r3, #1
 800e714:	f7fd ffc0 	bl	800c698 <disk_write>
 800e718:	4603      	mov	r3, r0
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	d001      	beq.n	800e722 <f_sync+0x54>
 800e71e:	2301      	movs	r3, #1
 800e720:	e04f      	b.n	800e7c2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	7d1b      	ldrb	r3, [r3, #20]
 800e726:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e72a:	b2da      	uxtb	r2, r3
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e730:	f7fb ff20 	bl	800a574 <get_fattime>
 800e734:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e736:	68ba      	ldr	r2, [r7, #8]
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e73c:	4619      	mov	r1, r3
 800e73e:	4610      	mov	r0, r2
 800e740:	f7fe fa9a 	bl	800cc78 <move_window>
 800e744:	4603      	mov	r3, r0
 800e746:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e748:	7dfb      	ldrb	r3, [r7, #23]
 800e74a:	2b00      	cmp	r3, #0
 800e74c:	d138      	bne.n	800e7c0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e752:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e754:	68fb      	ldr	r3, [r7, #12]
 800e756:	330b      	adds	r3, #11
 800e758:	781a      	ldrb	r2, [r3, #0]
 800e75a:	68fb      	ldr	r3, [r7, #12]
 800e75c:	330b      	adds	r3, #11
 800e75e:	f042 0220 	orr.w	r2, r2, #32
 800e762:	b2d2      	uxtb	r2, r2
 800e764:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	6818      	ldr	r0, [r3, #0]
 800e76a:	687b      	ldr	r3, [r7, #4]
 800e76c:	689b      	ldr	r3, [r3, #8]
 800e76e:	461a      	mov	r2, r3
 800e770:	68f9      	ldr	r1, [r7, #12]
 800e772:	f7fe ffa4 	bl	800d6be <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e776:	68fb      	ldr	r3, [r7, #12]
 800e778:	f103 021c 	add.w	r2, r3, #28
 800e77c:	687b      	ldr	r3, [r7, #4]
 800e77e:	68db      	ldr	r3, [r3, #12]
 800e780:	4619      	mov	r1, r3
 800e782:	4610      	mov	r0, r2
 800e784:	f7fe f81d 	bl	800c7c2 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	3316      	adds	r3, #22
 800e78c:	6939      	ldr	r1, [r7, #16]
 800e78e:	4618      	mov	r0, r3
 800e790:	f7fe f817 	bl	800c7c2 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	3312      	adds	r3, #18
 800e798:	2100      	movs	r1, #0
 800e79a:	4618      	mov	r0, r3
 800e79c:	f7fd fff6 	bl	800c78c <st_word>
					fs->wflag = 1;
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	2201      	movs	r2, #1
 800e7a4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e7a6:	68bb      	ldr	r3, [r7, #8]
 800e7a8:	4618      	mov	r0, r3
 800e7aa:	f7fe fa93 	bl	800ccd4 <sync_fs>
 800e7ae:	4603      	mov	r3, r0
 800e7b0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7d1b      	ldrb	r3, [r3, #20]
 800e7b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e7ba:	b2da      	uxtb	r2, r3
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e7c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3718      	adds	r7, #24
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}

0800e7ca <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e7ca:	b580      	push	{r7, lr}
 800e7cc:	b084      	sub	sp, #16
 800e7ce:	af00      	add	r7, sp, #0
 800e7d0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e7d2:	6878      	ldr	r0, [r7, #4]
 800e7d4:	f7ff ff7b 	bl	800e6ce <f_sync>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e7dc:	7bfb      	ldrb	r3, [r7, #15]
 800e7de:	2b00      	cmp	r3, #0
 800e7e0:	d118      	bne.n	800e814 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	f107 0208 	add.w	r2, r7, #8
 800e7e8:	4611      	mov	r1, r2
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7ff fbfa 	bl	800dfe4 <validate>
 800e7f0:	4603      	mov	r3, r0
 800e7f2:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e7f4:	7bfb      	ldrb	r3, [r7, #15]
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d10c      	bne.n	800e814 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e7fa:	687b      	ldr	r3, [r7, #4]
 800e7fc:	691b      	ldr	r3, [r3, #16]
 800e7fe:	4618      	mov	r0, r3
 800e800:	f7fe f996 	bl	800cb30 <dec_lock>
 800e804:	4603      	mov	r3, r0
 800e806:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e808:	7bfb      	ldrb	r3, [r7, #15]
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d102      	bne.n	800e814 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e80e:	687b      	ldr	r3, [r7, #4]
 800e810:	2200      	movs	r2, #0
 800e812:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e814:	7bfb      	ldrb	r3, [r7, #15]
}
 800e816:	4618      	mov	r0, r3
 800e818:	3710      	adds	r7, #16
 800e81a:	46bd      	mov	sp, r7
 800e81c:	bd80      	pop	{r7, pc}
	...

0800e820 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e820:	b480      	push	{r7}
 800e822:	b087      	sub	sp, #28
 800e824:	af00      	add	r7, sp, #0
 800e826:	60f8      	str	r0, [r7, #12]
 800e828:	60b9      	str	r1, [r7, #8]
 800e82a:	4613      	mov	r3, r2
 800e82c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e82e:	2301      	movs	r3, #1
 800e830:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e832:	2300      	movs	r3, #0
 800e834:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e836:	4b1f      	ldr	r3, [pc, #124]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e838:	7a5b      	ldrb	r3, [r3, #9]
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	2b00      	cmp	r3, #0
 800e83e:	d131      	bne.n	800e8a4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e840:	4b1c      	ldr	r3, [pc, #112]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e842:	7a5b      	ldrb	r3, [r3, #9]
 800e844:	b2db      	uxtb	r3, r3
 800e846:	461a      	mov	r2, r3
 800e848:	4b1a      	ldr	r3, [pc, #104]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e84a:	2100      	movs	r1, #0
 800e84c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e84e:	4b19      	ldr	r3, [pc, #100]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e850:	7a5b      	ldrb	r3, [r3, #9]
 800e852:	b2db      	uxtb	r3, r3
 800e854:	4a17      	ldr	r2, [pc, #92]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e856:	009b      	lsls	r3, r3, #2
 800e858:	4413      	add	r3, r2
 800e85a:	68fa      	ldr	r2, [r7, #12]
 800e85c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e85e:	4b15      	ldr	r3, [pc, #84]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e860:	7a5b      	ldrb	r3, [r3, #9]
 800e862:	b2db      	uxtb	r3, r3
 800e864:	461a      	mov	r2, r3
 800e866:	4b13      	ldr	r3, [pc, #76]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e868:	4413      	add	r3, r2
 800e86a:	79fa      	ldrb	r2, [r7, #7]
 800e86c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e86e:	4b11      	ldr	r3, [pc, #68]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e870:	7a5b      	ldrb	r3, [r3, #9]
 800e872:	b2db      	uxtb	r3, r3
 800e874:	1c5a      	adds	r2, r3, #1
 800e876:	b2d1      	uxtb	r1, r2
 800e878:	4a0e      	ldr	r2, [pc, #56]	@ (800e8b4 <FATFS_LinkDriverEx+0x94>)
 800e87a:	7251      	strb	r1, [r2, #9]
 800e87c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e87e:	7dbb      	ldrb	r3, [r7, #22]
 800e880:	3330      	adds	r3, #48	@ 0x30
 800e882:	b2da      	uxtb	r2, r3
 800e884:	68bb      	ldr	r3, [r7, #8]
 800e886:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e888:	68bb      	ldr	r3, [r7, #8]
 800e88a:	3301      	adds	r3, #1
 800e88c:	223a      	movs	r2, #58	@ 0x3a
 800e88e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	3302      	adds	r3, #2
 800e894:	222f      	movs	r2, #47	@ 0x2f
 800e896:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	3303      	adds	r3, #3
 800e89c:	2200      	movs	r2, #0
 800e89e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e8a4:	7dfb      	ldrb	r3, [r7, #23]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	371c      	adds	r7, #28
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr
 800e8b2:	bf00      	nop
 800e8b4:	20000420 	.word	0x20000420

0800e8b8 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b082      	sub	sp, #8
 800e8bc:	af00      	add	r7, sp, #0
 800e8be:	6078      	str	r0, [r7, #4]
 800e8c0:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e8c2:	2200      	movs	r2, #0
 800e8c4:	6839      	ldr	r1, [r7, #0]
 800e8c6:	6878      	ldr	r0, [r7, #4]
 800e8c8:	f7ff ffaa 	bl	800e820 <FATFS_LinkDriverEx>
 800e8cc:	4603      	mov	r3, r0
}
 800e8ce:	4618      	mov	r0, r3
 800e8d0:	3708      	adds	r7, #8
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
	...

0800e8d8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e8d8:	b580      	push	{r7, lr}
 800e8da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e8dc:	2200      	movs	r2, #0
 800e8de:	4912      	ldr	r1, [pc, #72]	@ (800e928 <MX_USB_DEVICE_Init+0x50>)
 800e8e0:	4812      	ldr	r0, [pc, #72]	@ (800e92c <MX_USB_DEVICE_Init+0x54>)
 800e8e2:	f7fc fb75 	bl	800afd0 <USBD_Init>
 800e8e6:	4603      	mov	r3, r0
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	d001      	beq.n	800e8f0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e8ec:	f7f2 ff6a 	bl	80017c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e8f0:	490f      	ldr	r1, [pc, #60]	@ (800e930 <MX_USB_DEVICE_Init+0x58>)
 800e8f2:	480e      	ldr	r0, [pc, #56]	@ (800e92c <MX_USB_DEVICE_Init+0x54>)
 800e8f4:	f7fc fb9c 	bl	800b030 <USBD_RegisterClass>
 800e8f8:	4603      	mov	r3, r0
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d001      	beq.n	800e902 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e8fe:	f7f2 ff61 	bl	80017c4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e902:	490c      	ldr	r1, [pc, #48]	@ (800e934 <MX_USB_DEVICE_Init+0x5c>)
 800e904:	4809      	ldr	r0, [pc, #36]	@ (800e92c <MX_USB_DEVICE_Init+0x54>)
 800e906:	f7fc fa93 	bl	800ae30 <USBD_CDC_RegisterInterface>
 800e90a:	4603      	mov	r3, r0
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d001      	beq.n	800e914 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e910:	f7f2 ff58 	bl	80017c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e914:	4805      	ldr	r0, [pc, #20]	@ (800e92c <MX_USB_DEVICE_Init+0x54>)
 800e916:	f7fc fbc1 	bl	800b09c <USBD_Start>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e920:	f7f2 ff50 	bl	80017c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e924:	bf00      	nop
 800e926:	bd80      	pop	{r7, pc}
 800e928:	200000e4 	.word	0x200000e4
 800e92c:	2000042c 	.word	0x2000042c
 800e930:	20000050 	.word	0x20000050
 800e934:	200000d0 	.word	0x200000d0

0800e938 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e938:	b580      	push	{r7, lr}
 800e93a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e93c:	2200      	movs	r2, #0
 800e93e:	4905      	ldr	r1, [pc, #20]	@ (800e954 <CDC_Init_FS+0x1c>)
 800e940:	4805      	ldr	r0, [pc, #20]	@ (800e958 <CDC_Init_FS+0x20>)
 800e942:	f7fc fa8f 	bl	800ae64 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e946:	4905      	ldr	r1, [pc, #20]	@ (800e95c <CDC_Init_FS+0x24>)
 800e948:	4803      	ldr	r0, [pc, #12]	@ (800e958 <CDC_Init_FS+0x20>)
 800e94a:	f7fc faad 	bl	800aea8 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e94e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e950:	4618      	mov	r0, r3
 800e952:	bd80      	pop	{r7, pc}
 800e954:	20000b08 	.word	0x20000b08
 800e958:	2000042c 	.word	0x2000042c
 800e95c:	20000708 	.word	0x20000708

0800e960 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e960:	b480      	push	{r7}
 800e962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e964:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e966:	4618      	mov	r0, r3
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e970:	b480      	push	{r7}
 800e972:	b083      	sub	sp, #12
 800e974:	af00      	add	r7, sp, #0
 800e976:	4603      	mov	r3, r0
 800e978:	6039      	str	r1, [r7, #0]
 800e97a:	71fb      	strb	r3, [r7, #7]
 800e97c:	4613      	mov	r3, r2
 800e97e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e980:	79fb      	ldrb	r3, [r7, #7]
 800e982:	2b23      	cmp	r3, #35	@ 0x23
 800e984:	d84a      	bhi.n	800ea1c <CDC_Control_FS+0xac>
 800e986:	a201      	add	r2, pc, #4	@ (adr r2, 800e98c <CDC_Control_FS+0x1c>)
 800e988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e98c:	0800ea1d 	.word	0x0800ea1d
 800e990:	0800ea1d 	.word	0x0800ea1d
 800e994:	0800ea1d 	.word	0x0800ea1d
 800e998:	0800ea1d 	.word	0x0800ea1d
 800e99c:	0800ea1d 	.word	0x0800ea1d
 800e9a0:	0800ea1d 	.word	0x0800ea1d
 800e9a4:	0800ea1d 	.word	0x0800ea1d
 800e9a8:	0800ea1d 	.word	0x0800ea1d
 800e9ac:	0800ea1d 	.word	0x0800ea1d
 800e9b0:	0800ea1d 	.word	0x0800ea1d
 800e9b4:	0800ea1d 	.word	0x0800ea1d
 800e9b8:	0800ea1d 	.word	0x0800ea1d
 800e9bc:	0800ea1d 	.word	0x0800ea1d
 800e9c0:	0800ea1d 	.word	0x0800ea1d
 800e9c4:	0800ea1d 	.word	0x0800ea1d
 800e9c8:	0800ea1d 	.word	0x0800ea1d
 800e9cc:	0800ea1d 	.word	0x0800ea1d
 800e9d0:	0800ea1d 	.word	0x0800ea1d
 800e9d4:	0800ea1d 	.word	0x0800ea1d
 800e9d8:	0800ea1d 	.word	0x0800ea1d
 800e9dc:	0800ea1d 	.word	0x0800ea1d
 800e9e0:	0800ea1d 	.word	0x0800ea1d
 800e9e4:	0800ea1d 	.word	0x0800ea1d
 800e9e8:	0800ea1d 	.word	0x0800ea1d
 800e9ec:	0800ea1d 	.word	0x0800ea1d
 800e9f0:	0800ea1d 	.word	0x0800ea1d
 800e9f4:	0800ea1d 	.word	0x0800ea1d
 800e9f8:	0800ea1d 	.word	0x0800ea1d
 800e9fc:	0800ea1d 	.word	0x0800ea1d
 800ea00:	0800ea1d 	.word	0x0800ea1d
 800ea04:	0800ea1d 	.word	0x0800ea1d
 800ea08:	0800ea1d 	.word	0x0800ea1d
 800ea0c:	0800ea1d 	.word	0x0800ea1d
 800ea10:	0800ea1d 	.word	0x0800ea1d
 800ea14:	0800ea1d 	.word	0x0800ea1d
 800ea18:	0800ea1d 	.word	0x0800ea1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ea1c:	bf00      	nop
  }

  return (USBD_OK);
 800ea1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ea20:	4618      	mov	r0, r3
 800ea22:	370c      	adds	r7, #12
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr

0800ea2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ea2c:	b580      	push	{r7, lr}
 800ea2e:	b082      	sub	sp, #8
 800ea30:	af00      	add	r7, sp, #0
 800ea32:	6078      	str	r0, [r7, #4]
 800ea34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ea36:	6879      	ldr	r1, [r7, #4]
 800ea38:	4805      	ldr	r0, [pc, #20]	@ (800ea50 <CDC_Receive_FS+0x24>)
 800ea3a:	f7fc fa35 	bl	800aea8 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ea3e:	4804      	ldr	r0, [pc, #16]	@ (800ea50 <CDC_Receive_FS+0x24>)
 800ea40:	f7fc fa90 	bl	800af64 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ea44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	2000042c 	.word	0x2000042c

0800ea54 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ea54:	b580      	push	{r7, lr}
 800ea56:	b084      	sub	sp, #16
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	6078      	str	r0, [r7, #4]
 800ea5c:	460b      	mov	r3, r1
 800ea5e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ea60:	2300      	movs	r3, #0
 800ea62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ea64:	4b0d      	ldr	r3, [pc, #52]	@ (800ea9c <CDC_Transmit_FS+0x48>)
 800ea66:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ea6a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ea6c:	68bb      	ldr	r3, [r7, #8]
 800ea6e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	d001      	beq.n	800ea7a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ea76:	2301      	movs	r3, #1
 800ea78:	e00b      	b.n	800ea92 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ea7a:	887b      	ldrh	r3, [r7, #2]
 800ea7c:	461a      	mov	r2, r3
 800ea7e:	6879      	ldr	r1, [r7, #4]
 800ea80:	4806      	ldr	r0, [pc, #24]	@ (800ea9c <CDC_Transmit_FS+0x48>)
 800ea82:	f7fc f9ef 	bl	800ae64 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ea86:	4805      	ldr	r0, [pc, #20]	@ (800ea9c <CDC_Transmit_FS+0x48>)
 800ea88:	f7fc fa2c 	bl	800aee4 <USBD_CDC_TransmitPacket>
 800ea8c:	4603      	mov	r3, r0
 800ea8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ea90:	7bfb      	ldrb	r3, [r7, #15]
}
 800ea92:	4618      	mov	r0, r3
 800ea94:	3710      	adds	r7, #16
 800ea96:	46bd      	mov	sp, r7
 800ea98:	bd80      	pop	{r7, pc}
 800ea9a:	bf00      	nop
 800ea9c:	2000042c 	.word	0x2000042c

0800eaa0 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b087      	sub	sp, #28
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	60f8      	str	r0, [r7, #12]
 800eaa8:	60b9      	str	r1, [r7, #8]
 800eaaa:	4613      	mov	r3, r2
 800eaac:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eaae:	2300      	movs	r3, #0
 800eab0:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eab2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eab6:	4618      	mov	r0, r3
 800eab8:	371c      	adds	r7, #28
 800eaba:	46bd      	mov	sp, r7
 800eabc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac0:	4770      	bx	lr
	...

0800eac4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eac4:	b480      	push	{r7}
 800eac6:	b083      	sub	sp, #12
 800eac8:	af00      	add	r7, sp, #0
 800eaca:	4603      	mov	r3, r0
 800eacc:	6039      	str	r1, [r7, #0]
 800eace:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ead0:	683b      	ldr	r3, [r7, #0]
 800ead2:	2212      	movs	r2, #18
 800ead4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ead6:	4b03      	ldr	r3, [pc, #12]	@ (800eae4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ead8:	4618      	mov	r0, r3
 800eada:	370c      	adds	r7, #12
 800eadc:	46bd      	mov	sp, r7
 800eade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae2:	4770      	bx	lr
 800eae4:	20000100 	.word	0x20000100

0800eae8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eae8:	b480      	push	{r7}
 800eaea:	b083      	sub	sp, #12
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	4603      	mov	r3, r0
 800eaf0:	6039      	str	r1, [r7, #0]
 800eaf2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eaf4:	683b      	ldr	r3, [r7, #0]
 800eaf6:	2204      	movs	r2, #4
 800eaf8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eafa:	4b03      	ldr	r3, [pc, #12]	@ (800eb08 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	370c      	adds	r7, #12
 800eb00:	46bd      	mov	sp, r7
 800eb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb06:	4770      	bx	lr
 800eb08:	20000114 	.word	0x20000114

0800eb0c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb0c:	b580      	push	{r7, lr}
 800eb0e:	b082      	sub	sp, #8
 800eb10:	af00      	add	r7, sp, #0
 800eb12:	4603      	mov	r3, r0
 800eb14:	6039      	str	r1, [r7, #0]
 800eb16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb18:	79fb      	ldrb	r3, [r7, #7]
 800eb1a:	2b00      	cmp	r3, #0
 800eb1c:	d105      	bne.n	800eb2a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb1e:	683a      	ldr	r2, [r7, #0]
 800eb20:	4907      	ldr	r1, [pc, #28]	@ (800eb40 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb22:	4808      	ldr	r0, [pc, #32]	@ (800eb44 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb24:	f7fd fc6a 	bl	800c3fc <USBD_GetString>
 800eb28:	e004      	b.n	800eb34 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800eb2a:	683a      	ldr	r2, [r7, #0]
 800eb2c:	4904      	ldr	r1, [pc, #16]	@ (800eb40 <USBD_FS_ProductStrDescriptor+0x34>)
 800eb2e:	4805      	ldr	r0, [pc, #20]	@ (800eb44 <USBD_FS_ProductStrDescriptor+0x38>)
 800eb30:	f7fd fc64 	bl	800c3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb34:	4b02      	ldr	r3, [pc, #8]	@ (800eb40 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3708      	adds	r7, #8
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	20000f08 	.word	0x20000f08
 800eb44:	080100a0 	.word	0x080100a0

0800eb48 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb48:	b580      	push	{r7, lr}
 800eb4a:	b082      	sub	sp, #8
 800eb4c:	af00      	add	r7, sp, #0
 800eb4e:	4603      	mov	r3, r0
 800eb50:	6039      	str	r1, [r7, #0]
 800eb52:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800eb54:	683a      	ldr	r2, [r7, #0]
 800eb56:	4904      	ldr	r1, [pc, #16]	@ (800eb68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800eb58:	4804      	ldr	r0, [pc, #16]	@ (800eb6c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800eb5a:	f7fd fc4f 	bl	800c3fc <USBD_GetString>
  return USBD_StrDesc;
 800eb5e:	4b02      	ldr	r3, [pc, #8]	@ (800eb68 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800eb60:	4618      	mov	r0, r3
 800eb62:	3708      	adds	r7, #8
 800eb64:	46bd      	mov	sp, r7
 800eb66:	bd80      	pop	{r7, pc}
 800eb68:	20000f08 	.word	0x20000f08
 800eb6c:	080100b8 	.word	0x080100b8

0800eb70 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb70:	b580      	push	{r7, lr}
 800eb72:	b082      	sub	sp, #8
 800eb74:	af00      	add	r7, sp, #0
 800eb76:	4603      	mov	r3, r0
 800eb78:	6039      	str	r1, [r7, #0]
 800eb7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eb7c:	683b      	ldr	r3, [r7, #0]
 800eb7e:	221a      	movs	r2, #26
 800eb80:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eb82:	f000 f843 	bl	800ec0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eb86:	4b02      	ldr	r3, [pc, #8]	@ (800eb90 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}
 800eb90:	20000118 	.word	0x20000118

0800eb94 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eb94:	b580      	push	{r7, lr}
 800eb96:	b082      	sub	sp, #8
 800eb98:	af00      	add	r7, sp, #0
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	6039      	str	r1, [r7, #0]
 800eb9e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eba0:	79fb      	ldrb	r3, [r7, #7]
 800eba2:	2b00      	cmp	r3, #0
 800eba4:	d105      	bne.n	800ebb2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eba6:	683a      	ldr	r2, [r7, #0]
 800eba8:	4907      	ldr	r1, [pc, #28]	@ (800ebc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebaa:	4808      	ldr	r0, [pc, #32]	@ (800ebcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebac:	f7fd fc26 	bl	800c3fc <USBD_GetString>
 800ebb0:	e004      	b.n	800ebbc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ebb2:	683a      	ldr	r2, [r7, #0]
 800ebb4:	4904      	ldr	r1, [pc, #16]	@ (800ebc8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ebb6:	4805      	ldr	r0, [pc, #20]	@ (800ebcc <USBD_FS_ConfigStrDescriptor+0x38>)
 800ebb8:	f7fd fc20 	bl	800c3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebbc:	4b02      	ldr	r3, [pc, #8]	@ (800ebc8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ebbe:	4618      	mov	r0, r3
 800ebc0:	3708      	adds	r7, #8
 800ebc2:	46bd      	mov	sp, r7
 800ebc4:	bd80      	pop	{r7, pc}
 800ebc6:	bf00      	nop
 800ebc8:	20000f08 	.word	0x20000f08
 800ebcc:	080100cc 	.word	0x080100cc

0800ebd0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ebd0:	b580      	push	{r7, lr}
 800ebd2:	b082      	sub	sp, #8
 800ebd4:	af00      	add	r7, sp, #0
 800ebd6:	4603      	mov	r3, r0
 800ebd8:	6039      	str	r1, [r7, #0]
 800ebda:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ebdc:	79fb      	ldrb	r3, [r7, #7]
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d105      	bne.n	800ebee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebe2:	683a      	ldr	r2, [r7, #0]
 800ebe4:	4907      	ldr	r1, [pc, #28]	@ (800ec04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebe6:	4808      	ldr	r0, [pc, #32]	@ (800ec08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebe8:	f7fd fc08 	bl	800c3fc <USBD_GetString>
 800ebec:	e004      	b.n	800ebf8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ebee:	683a      	ldr	r2, [r7, #0]
 800ebf0:	4904      	ldr	r1, [pc, #16]	@ (800ec04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ebf2:	4805      	ldr	r0, [pc, #20]	@ (800ec08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ebf4:	f7fd fc02 	bl	800c3fc <USBD_GetString>
  }
  return USBD_StrDesc;
 800ebf8:	4b02      	ldr	r3, [pc, #8]	@ (800ec04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ebfa:	4618      	mov	r0, r3
 800ebfc:	3708      	adds	r7, #8
 800ebfe:	46bd      	mov	sp, r7
 800ec00:	bd80      	pop	{r7, pc}
 800ec02:	bf00      	nop
 800ec04:	20000f08 	.word	0x20000f08
 800ec08:	080100d8 	.word	0x080100d8

0800ec0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b084      	sub	sp, #16
 800ec10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ec12:	4b0f      	ldr	r3, [pc, #60]	@ (800ec50 <Get_SerialNum+0x44>)
 800ec14:	681b      	ldr	r3, [r3, #0]
 800ec16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ec18:	4b0e      	ldr	r3, [pc, #56]	@ (800ec54 <Get_SerialNum+0x48>)
 800ec1a:	681b      	ldr	r3, [r3, #0]
 800ec1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ec1e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec58 <Get_SerialNum+0x4c>)
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ec24:	68fa      	ldr	r2, [r7, #12]
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	4413      	add	r3, r2
 800ec2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ec2c:	68fb      	ldr	r3, [r7, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d009      	beq.n	800ec46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ec32:	2208      	movs	r2, #8
 800ec34:	4909      	ldr	r1, [pc, #36]	@ (800ec5c <Get_SerialNum+0x50>)
 800ec36:	68f8      	ldr	r0, [r7, #12]
 800ec38:	f000 f814 	bl	800ec64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ec3c:	2204      	movs	r2, #4
 800ec3e:	4908      	ldr	r1, [pc, #32]	@ (800ec60 <Get_SerialNum+0x54>)
 800ec40:	68b8      	ldr	r0, [r7, #8]
 800ec42:	f000 f80f 	bl	800ec64 <IntToUnicode>
  }
}
 800ec46:	bf00      	nop
 800ec48:	3710      	adds	r7, #16
 800ec4a:	46bd      	mov	sp, r7
 800ec4c:	bd80      	pop	{r7, pc}
 800ec4e:	bf00      	nop
 800ec50:	1fff7a10 	.word	0x1fff7a10
 800ec54:	1fff7a14 	.word	0x1fff7a14
 800ec58:	1fff7a18 	.word	0x1fff7a18
 800ec5c:	2000011a 	.word	0x2000011a
 800ec60:	2000012a 	.word	0x2000012a

0800ec64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800ec64:	b480      	push	{r7}
 800ec66:	b087      	sub	sp, #28
 800ec68:	af00      	add	r7, sp, #0
 800ec6a:	60f8      	str	r0, [r7, #12]
 800ec6c:	60b9      	str	r1, [r7, #8]
 800ec6e:	4613      	mov	r3, r2
 800ec70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800ec72:	2300      	movs	r3, #0
 800ec74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800ec76:	2300      	movs	r3, #0
 800ec78:	75fb      	strb	r3, [r7, #23]
 800ec7a:	e027      	b.n	800eccc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	0f1b      	lsrs	r3, r3, #28
 800ec80:	2b09      	cmp	r3, #9
 800ec82:	d80b      	bhi.n	800ec9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ec84:	68fb      	ldr	r3, [r7, #12]
 800ec86:	0f1b      	lsrs	r3, r3, #28
 800ec88:	b2da      	uxtb	r2, r3
 800ec8a:	7dfb      	ldrb	r3, [r7, #23]
 800ec8c:	005b      	lsls	r3, r3, #1
 800ec8e:	4619      	mov	r1, r3
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	440b      	add	r3, r1
 800ec94:	3230      	adds	r2, #48	@ 0x30
 800ec96:	b2d2      	uxtb	r2, r2
 800ec98:	701a      	strb	r2, [r3, #0]
 800ec9a:	e00a      	b.n	800ecb2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
 800ec9e:	0f1b      	lsrs	r3, r3, #28
 800eca0:	b2da      	uxtb	r2, r3
 800eca2:	7dfb      	ldrb	r3, [r7, #23]
 800eca4:	005b      	lsls	r3, r3, #1
 800eca6:	4619      	mov	r1, r3
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	440b      	add	r3, r1
 800ecac:	3237      	adds	r2, #55	@ 0x37
 800ecae:	b2d2      	uxtb	r2, r2
 800ecb0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	011b      	lsls	r3, r3, #4
 800ecb6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ecb8:	7dfb      	ldrb	r3, [r7, #23]
 800ecba:	005b      	lsls	r3, r3, #1
 800ecbc:	3301      	adds	r3, #1
 800ecbe:	68ba      	ldr	r2, [r7, #8]
 800ecc0:	4413      	add	r3, r2
 800ecc2:	2200      	movs	r2, #0
 800ecc4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ecc6:	7dfb      	ldrb	r3, [r7, #23]
 800ecc8:	3301      	adds	r3, #1
 800ecca:	75fb      	strb	r3, [r7, #23]
 800eccc:	7dfa      	ldrb	r2, [r7, #23]
 800ecce:	79fb      	ldrb	r3, [r7, #7]
 800ecd0:	429a      	cmp	r2, r3
 800ecd2:	d3d3      	bcc.n	800ec7c <IntToUnicode+0x18>
  }
}
 800ecd4:	bf00      	nop
 800ecd6:	bf00      	nop
 800ecd8:	371c      	adds	r7, #28
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
	...

0800ece4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b08a      	sub	sp, #40	@ 0x28
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ecec:	f107 0314 	add.w	r3, r7, #20
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	601a      	str	r2, [r3, #0]
 800ecf4:	605a      	str	r2, [r3, #4]
 800ecf6:	609a      	str	r2, [r3, #8]
 800ecf8:	60da      	str	r2, [r3, #12]
 800ecfa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed04:	d13a      	bne.n	800ed7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed06:	2300      	movs	r3, #0
 800ed08:	613b      	str	r3, [r7, #16]
 800ed0a:	4b1e      	ldr	r3, [pc, #120]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed0e:	4a1d      	ldr	r2, [pc, #116]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed10:	f043 0301 	orr.w	r3, r3, #1
 800ed14:	6313      	str	r3, [r2, #48]	@ 0x30
 800ed16:	4b1b      	ldr	r3, [pc, #108]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ed1a:	f003 0301 	and.w	r3, r3, #1
 800ed1e:	613b      	str	r3, [r7, #16]
 800ed20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ed22:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ed26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed28:	2302      	movs	r3, #2
 800ed2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed30:	2303      	movs	r3, #3
 800ed32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ed34:	230a      	movs	r3, #10
 800ed36:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed38:	f107 0314 	add.w	r3, r7, #20
 800ed3c:	4619      	mov	r1, r3
 800ed3e:	4812      	ldr	r0, [pc, #72]	@ (800ed88 <HAL_PCD_MspInit+0xa4>)
 800ed40:	f7f6 f89a 	bl	8004e78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ed44:	4b0f      	ldr	r3, [pc, #60]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ed48:	4a0e      	ldr	r2, [pc, #56]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed4e:	6353      	str	r3, [r2, #52]	@ 0x34
 800ed50:	2300      	movs	r3, #0
 800ed52:	60fb      	str	r3, [r7, #12]
 800ed54:	4b0b      	ldr	r3, [pc, #44]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed58:	4a0a      	ldr	r2, [pc, #40]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed5a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ed5e:	6453      	str	r3, [r2, #68]	@ 0x44
 800ed60:	4b08      	ldr	r3, [pc, #32]	@ (800ed84 <HAL_PCD_MspInit+0xa0>)
 800ed62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ed64:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ed68:	60fb      	str	r3, [r7, #12]
 800ed6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ed6c:	2200      	movs	r2, #0
 800ed6e:	2100      	movs	r1, #0
 800ed70:	2043      	movs	r0, #67	@ 0x43
 800ed72:	f7f5 fcb8 	bl	80046e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ed76:	2043      	movs	r0, #67	@ 0x43
 800ed78:	f7f5 fcd1 	bl	800471e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800ed7c:	bf00      	nop
 800ed7e:	3728      	adds	r7, #40	@ 0x28
 800ed80:	46bd      	mov	sp, r7
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	40023800 	.word	0x40023800
 800ed88:	40020000 	.word	0x40020000

0800ed8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed8c:	b580      	push	{r7, lr}
 800ed8e:	b082      	sub	sp, #8
 800ed90:	af00      	add	r7, sp, #0
 800ed92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ed94:	687b      	ldr	r3, [r7, #4]
 800ed96:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800eda0:	4619      	mov	r1, r3
 800eda2:	4610      	mov	r0, r2
 800eda4:	f7fc f9c7 	bl	800b136 <USBD_LL_SetupStage>
}
 800eda8:	bf00      	nop
 800edaa:	3708      	adds	r7, #8
 800edac:	46bd      	mov	sp, r7
 800edae:	bd80      	pop	{r7, pc}

0800edb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800edb0:	b580      	push	{r7, lr}
 800edb2:	b082      	sub	sp, #8
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	6078      	str	r0, [r7, #4]
 800edb8:	460b      	mov	r3, r1
 800edba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800edc2:	78fa      	ldrb	r2, [r7, #3]
 800edc4:	6879      	ldr	r1, [r7, #4]
 800edc6:	4613      	mov	r3, r2
 800edc8:	00db      	lsls	r3, r3, #3
 800edca:	4413      	add	r3, r2
 800edcc:	009b      	lsls	r3, r3, #2
 800edce:	440b      	add	r3, r1
 800edd0:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800edd4:	681a      	ldr	r2, [r3, #0]
 800edd6:	78fb      	ldrb	r3, [r7, #3]
 800edd8:	4619      	mov	r1, r3
 800edda:	f7fc fa01 	bl	800b1e0 <USBD_LL_DataOutStage>
}
 800edde:	bf00      	nop
 800ede0:	3708      	adds	r7, #8
 800ede2:	46bd      	mov	sp, r7
 800ede4:	bd80      	pop	{r7, pc}

0800ede6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede6:	b580      	push	{r7, lr}
 800ede8:	b082      	sub	sp, #8
 800edea:	af00      	add	r7, sp, #0
 800edec:	6078      	str	r0, [r7, #4]
 800edee:	460b      	mov	r3, r1
 800edf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800edf2:	687b      	ldr	r3, [r7, #4]
 800edf4:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800edf8:	78fa      	ldrb	r2, [r7, #3]
 800edfa:	6879      	ldr	r1, [r7, #4]
 800edfc:	4613      	mov	r3, r2
 800edfe:	00db      	lsls	r3, r3, #3
 800ee00:	4413      	add	r3, r2
 800ee02:	009b      	lsls	r3, r3, #2
 800ee04:	440b      	add	r3, r1
 800ee06:	3320      	adds	r3, #32
 800ee08:	681a      	ldr	r2, [r3, #0]
 800ee0a:	78fb      	ldrb	r3, [r7, #3]
 800ee0c:	4619      	mov	r1, r3
 800ee0e:	f7fc fa9a 	bl	800b346 <USBD_LL_DataInStage>
}
 800ee12:	bf00      	nop
 800ee14:	3708      	adds	r7, #8
 800ee16:	46bd      	mov	sp, r7
 800ee18:	bd80      	pop	{r7, pc}

0800ee1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee1a:	b580      	push	{r7, lr}
 800ee1c:	b082      	sub	sp, #8
 800ee1e:	af00      	add	r7, sp, #0
 800ee20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee28:	4618      	mov	r0, r3
 800ee2a:	f7fc fbd4 	bl	800b5d6 <USBD_LL_SOF>
}
 800ee2e:	bf00      	nop
 800ee30:	3708      	adds	r7, #8
 800ee32:	46bd      	mov	sp, r7
 800ee34:	bd80      	pop	{r7, pc}

0800ee36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee36:	b580      	push	{r7, lr}
 800ee38:	b084      	sub	sp, #16
 800ee3a:	af00      	add	r7, sp, #0
 800ee3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ee3e:	2301      	movs	r3, #1
 800ee40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ee42:	687b      	ldr	r3, [r7, #4]
 800ee44:	79db      	ldrb	r3, [r3, #7]
 800ee46:	2b02      	cmp	r3, #2
 800ee48:	d001      	beq.n	800ee4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ee4a:	f7f2 fcbb 	bl	80017c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee54:	7bfa      	ldrb	r2, [r7, #15]
 800ee56:	4611      	mov	r1, r2
 800ee58:	4618      	mov	r0, r3
 800ee5a:	f7fc fb78 	bl	800b54e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ee5e:	687b      	ldr	r3, [r7, #4]
 800ee60:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee64:	4618      	mov	r0, r3
 800ee66:	f7fc fb20 	bl	800b4aa <USBD_LL_Reset>
}
 800ee6a:	bf00      	nop
 800ee6c:	3710      	adds	r7, #16
 800ee6e:	46bd      	mov	sp, r7
 800ee70:	bd80      	pop	{r7, pc}
	...

0800ee74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b082      	sub	sp, #8
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fc fb73 	bl	800b56e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	681b      	ldr	r3, [r3, #0]
 800ee8c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800ee90:	681b      	ldr	r3, [r3, #0]
 800ee92:	687a      	ldr	r2, [r7, #4]
 800ee94:	6812      	ldr	r2, [r2, #0]
 800ee96:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800ee9a:	f043 0301 	orr.w	r3, r3, #1
 800ee9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	7adb      	ldrb	r3, [r3, #11]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d005      	beq.n	800eeb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800eea8:	4b04      	ldr	r3, [pc, #16]	@ (800eebc <HAL_PCD_SuspendCallback+0x48>)
 800eeaa:	691b      	ldr	r3, [r3, #16]
 800eeac:	4a03      	ldr	r2, [pc, #12]	@ (800eebc <HAL_PCD_SuspendCallback+0x48>)
 800eeae:	f043 0306 	orr.w	r3, r3, #6
 800eeb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eeb4:	bf00      	nop
 800eeb6:	3708      	adds	r7, #8
 800eeb8:	46bd      	mov	sp, r7
 800eeba:	bd80      	pop	{r7, pc}
 800eebc:	e000ed00 	.word	0xe000ed00

0800eec0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eec0:	b580      	push	{r7, lr}
 800eec2:	b082      	sub	sp, #8
 800eec4:	af00      	add	r7, sp, #0
 800eec6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800eec8:	687b      	ldr	r3, [r7, #4]
 800eeca:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eece:	4618      	mov	r0, r3
 800eed0:	f7fc fb69 	bl	800b5a6 <USBD_LL_Resume>
}
 800eed4:	bf00      	nop
 800eed6:	3708      	adds	r7, #8
 800eed8:	46bd      	mov	sp, r7
 800eeda:	bd80      	pop	{r7, pc}

0800eedc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800eedc:	b580      	push	{r7, lr}
 800eede:	b082      	sub	sp, #8
 800eee0:	af00      	add	r7, sp, #0
 800eee2:	6078      	str	r0, [r7, #4]
 800eee4:	460b      	mov	r3, r1
 800eee6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800eeee:	78fa      	ldrb	r2, [r7, #3]
 800eef0:	4611      	mov	r1, r2
 800eef2:	4618      	mov	r0, r3
 800eef4:	f7fc fbc1 	bl	800b67a <USBD_LL_IsoOUTIncomplete>
}
 800eef8:	bf00      	nop
 800eefa:	3708      	adds	r7, #8
 800eefc:	46bd      	mov	sp, r7
 800eefe:	bd80      	pop	{r7, pc}

0800ef00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	b082      	sub	sp, #8
 800ef04:	af00      	add	r7, sp, #0
 800ef06:	6078      	str	r0, [r7, #4]
 800ef08:	460b      	mov	r3, r1
 800ef0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ef0c:	687b      	ldr	r3, [r7, #4]
 800ef0e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef12:	78fa      	ldrb	r2, [r7, #3]
 800ef14:	4611      	mov	r1, r2
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fc fb7d 	bl	800b616 <USBD_LL_IsoINIncomplete>
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fc fbd3 	bl	800b6de <USBD_LL_DevConnected>
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f7fc fbd0 	bl	800b6f4 <USBD_LL_DevDisconnected>
}
 800ef54:	bf00      	nop
 800ef56:	3708      	adds	r7, #8
 800ef58:	46bd      	mov	sp, r7
 800ef5a:	bd80      	pop	{r7, pc}

0800ef5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	781b      	ldrb	r3, [r3, #0]
 800ef68:	2b00      	cmp	r3, #0
 800ef6a:	d13c      	bne.n	800efe6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ef6c:	4a20      	ldr	r2, [pc, #128]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	4a1e      	ldr	r2, [pc, #120]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef78:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800ef7c:	4b1c      	ldr	r3, [pc, #112]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef7e:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ef82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800ef84:	4b1a      	ldr	r3, [pc, #104]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef86:	2204      	movs	r2, #4
 800ef88:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800ef8a:	4b19      	ldr	r3, [pc, #100]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef8c:	2202      	movs	r2, #2
 800ef8e:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800ef90:	4b17      	ldr	r3, [pc, #92]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef92:	2200      	movs	r2, #0
 800ef94:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800ef96:	4b16      	ldr	r3, [pc, #88]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef98:	2202      	movs	r2, #2
 800ef9a:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800ef9c:	4b14      	ldr	r3, [pc, #80]	@ (800eff0 <USBD_LL_Init+0x94>)
 800ef9e:	2200      	movs	r2, #0
 800efa0:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800efa2:	4b13      	ldr	r3, [pc, #76]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efa4:	2200      	movs	r2, #0
 800efa6:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800efa8:	4b11      	ldr	r3, [pc, #68]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efaa:	2200      	movs	r2, #0
 800efac:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800efae:	4b10      	ldr	r3, [pc, #64]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efb0:	2200      	movs	r2, #0
 800efb2:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800efb4:	4b0e      	ldr	r3, [pc, #56]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efb6:	2200      	movs	r2, #0
 800efb8:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800efba:	480d      	ldr	r0, [pc, #52]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efbc:	f7f6 f912 	bl	80051e4 <HAL_PCD_Init>
 800efc0:	4603      	mov	r3, r0
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d001      	beq.n	800efca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800efc6:	f7f2 fbfd 	bl	80017c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800efca:	2180      	movs	r1, #128	@ 0x80
 800efcc:	4808      	ldr	r0, [pc, #32]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efce:	f7f7 fb3e 	bl	800664e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800efd2:	2240      	movs	r2, #64	@ 0x40
 800efd4:	2100      	movs	r1, #0
 800efd6:	4806      	ldr	r0, [pc, #24]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efd8:	f7f7 faf2 	bl	80065c0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800efdc:	2280      	movs	r2, #128	@ 0x80
 800efde:	2101      	movs	r1, #1
 800efe0:	4803      	ldr	r0, [pc, #12]	@ (800eff0 <USBD_LL_Init+0x94>)
 800efe2:	f7f7 faed 	bl	80065c0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800efe6:	2300      	movs	r3, #0
}
 800efe8:	4618      	mov	r0, r3
 800efea:	3708      	adds	r7, #8
 800efec:	46bd      	mov	sp, r7
 800efee:	bd80      	pop	{r7, pc}
 800eff0:	20001108 	.word	0x20001108

0800eff4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b084      	sub	sp, #16
 800eff8:	af00      	add	r7, sp, #0
 800effa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800effc:	2300      	movs	r3, #0
 800effe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f000:	2300      	movs	r3, #0
 800f002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f00a:	4618      	mov	r0, r3
 800f00c:	f7f6 f9f9 	bl	8005402 <HAL_PCD_Start>
 800f010:	4603      	mov	r3, r0
 800f012:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f014:	7bfb      	ldrb	r3, [r7, #15]
 800f016:	4618      	mov	r0, r3
 800f018:	f000 f942 	bl	800f2a0 <USBD_Get_USB_Status>
 800f01c:	4603      	mov	r3, r0
 800f01e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f020:	7bbb      	ldrb	r3, [r7, #14]
}
 800f022:	4618      	mov	r0, r3
 800f024:	3710      	adds	r7, #16
 800f026:	46bd      	mov	sp, r7
 800f028:	bd80      	pop	{r7, pc}

0800f02a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f02a:	b580      	push	{r7, lr}
 800f02c:	b084      	sub	sp, #16
 800f02e:	af00      	add	r7, sp, #0
 800f030:	6078      	str	r0, [r7, #4]
 800f032:	4608      	mov	r0, r1
 800f034:	4611      	mov	r1, r2
 800f036:	461a      	mov	r2, r3
 800f038:	4603      	mov	r3, r0
 800f03a:	70fb      	strb	r3, [r7, #3]
 800f03c:	460b      	mov	r3, r1
 800f03e:	70bb      	strb	r3, [r7, #2]
 800f040:	4613      	mov	r3, r2
 800f042:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f044:	2300      	movs	r3, #0
 800f046:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f048:	2300      	movs	r3, #0
 800f04a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f052:	78bb      	ldrb	r3, [r7, #2]
 800f054:	883a      	ldrh	r2, [r7, #0]
 800f056:	78f9      	ldrb	r1, [r7, #3]
 800f058:	f7f6 fecd 	bl	8005df6 <HAL_PCD_EP_Open>
 800f05c:	4603      	mov	r3, r0
 800f05e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	4618      	mov	r0, r3
 800f064:	f000 f91c 	bl	800f2a0 <USBD_Get_USB_Status>
 800f068:	4603      	mov	r3, r0
 800f06a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f06c:	7bbb      	ldrb	r3, [r7, #14]
}
 800f06e:	4618      	mov	r0, r3
 800f070:	3710      	adds	r7, #16
 800f072:	46bd      	mov	sp, r7
 800f074:	bd80      	pop	{r7, pc}

0800f076 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f076:	b580      	push	{r7, lr}
 800f078:	b084      	sub	sp, #16
 800f07a:	af00      	add	r7, sp, #0
 800f07c:	6078      	str	r0, [r7, #4]
 800f07e:	460b      	mov	r3, r1
 800f080:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f082:	2300      	movs	r3, #0
 800f084:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f086:	2300      	movs	r3, #0
 800f088:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f08a:	687b      	ldr	r3, [r7, #4]
 800f08c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f090:	78fa      	ldrb	r2, [r7, #3]
 800f092:	4611      	mov	r1, r2
 800f094:	4618      	mov	r0, r3
 800f096:	f7f6 ff18 	bl	8005eca <HAL_PCD_EP_Close>
 800f09a:	4603      	mov	r3, r0
 800f09c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f09e:	7bfb      	ldrb	r3, [r7, #15]
 800f0a0:	4618      	mov	r0, r3
 800f0a2:	f000 f8fd 	bl	800f2a0 <USBD_Get_USB_Status>
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0aa:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ac:	4618      	mov	r0, r3
 800f0ae:	3710      	adds	r7, #16
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b084      	sub	sp, #16
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	460b      	mov	r3, r1
 800f0be:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c4:	2300      	movs	r3, #0
 800f0c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f0c8:	687b      	ldr	r3, [r7, #4]
 800f0ca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ce:	78fa      	ldrb	r2, [r7, #3]
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7f6 ffd0 	bl	8006078 <HAL_PCD_EP_SetStall>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0dc:	7bfb      	ldrb	r3, [r7, #15]
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f000 f8de 	bl	800f2a0 <USBD_Get_USB_Status>
 800f0e4:	4603      	mov	r3, r0
 800f0e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0ea:	4618      	mov	r0, r3
 800f0ec:	3710      	adds	r7, #16
 800f0ee:	46bd      	mov	sp, r7
 800f0f0:	bd80      	pop	{r7, pc}

0800f0f2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f0f2:	b580      	push	{r7, lr}
 800f0f4:	b084      	sub	sp, #16
 800f0f6:	af00      	add	r7, sp, #0
 800f0f8:	6078      	str	r0, [r7, #4]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fe:	2300      	movs	r3, #0
 800f100:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f10c:	78fa      	ldrb	r2, [r7, #3]
 800f10e:	4611      	mov	r1, r2
 800f110:	4618      	mov	r0, r3
 800f112:	f7f7 f814 	bl	800613e <HAL_PCD_EP_ClrStall>
 800f116:	4603      	mov	r3, r0
 800f118:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f11a:	7bfb      	ldrb	r3, [r7, #15]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f8bf 	bl	800f2a0 <USBD_Get_USB_Status>
 800f122:	4603      	mov	r3, r0
 800f124:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f126:	7bbb      	ldrb	r3, [r7, #14]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3710      	adds	r7, #16
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f130:	b480      	push	{r7}
 800f132:	b085      	sub	sp, #20
 800f134:	af00      	add	r7, sp, #0
 800f136:	6078      	str	r0, [r7, #4]
 800f138:	460b      	mov	r3, r1
 800f13a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f142:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f144:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f148:	2b00      	cmp	r3, #0
 800f14a:	da0b      	bge.n	800f164 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f14c:	78fb      	ldrb	r3, [r7, #3]
 800f14e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f152:	68f9      	ldr	r1, [r7, #12]
 800f154:	4613      	mov	r3, r2
 800f156:	00db      	lsls	r3, r3, #3
 800f158:	4413      	add	r3, r2
 800f15a:	009b      	lsls	r3, r3, #2
 800f15c:	440b      	add	r3, r1
 800f15e:	3316      	adds	r3, #22
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	e00b      	b.n	800f17c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f164:	78fb      	ldrb	r3, [r7, #3]
 800f166:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f16a:	68f9      	ldr	r1, [r7, #12]
 800f16c:	4613      	mov	r3, r2
 800f16e:	00db      	lsls	r3, r3, #3
 800f170:	4413      	add	r3, r2
 800f172:	009b      	lsls	r3, r3, #2
 800f174:	440b      	add	r3, r1
 800f176:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f17a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3714      	adds	r7, #20
 800f180:	46bd      	mov	sp, r7
 800f182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f186:	4770      	bx	lr

0800f188 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b084      	sub	sp, #16
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
 800f190:	460b      	mov	r3, r1
 800f192:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f194:	2300      	movs	r3, #0
 800f196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f1a2:	78fa      	ldrb	r2, [r7, #3]
 800f1a4:	4611      	mov	r1, r2
 800f1a6:	4618      	mov	r0, r3
 800f1a8:	f7f6 fe01 	bl	8005dae <HAL_PCD_SetAddress>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1b0:	7bfb      	ldrb	r3, [r7, #15]
 800f1b2:	4618      	mov	r0, r3
 800f1b4:	f000 f874 	bl	800f2a0 <USBD_Get_USB_Status>
 800f1b8:	4603      	mov	r3, r0
 800f1ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}

0800f1c6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f1c6:	b580      	push	{r7, lr}
 800f1c8:	b086      	sub	sp, #24
 800f1ca:	af00      	add	r7, sp, #0
 800f1cc:	60f8      	str	r0, [r7, #12]
 800f1ce:	607a      	str	r2, [r7, #4]
 800f1d0:	603b      	str	r3, [r7, #0]
 800f1d2:	460b      	mov	r3, r1
 800f1d4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d6:	2300      	movs	r3, #0
 800f1d8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1da:	2300      	movs	r3, #0
 800f1dc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f1de:	68fb      	ldr	r3, [r7, #12]
 800f1e0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f1e4:	7af9      	ldrb	r1, [r7, #11]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	687a      	ldr	r2, [r7, #4]
 800f1ea:	f7f6 ff0b 	bl	8006004 <HAL_PCD_EP_Transmit>
 800f1ee:	4603      	mov	r3, r0
 800f1f0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1f2:	7dfb      	ldrb	r3, [r7, #23]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f000 f853 	bl	800f2a0 <USBD_Get_USB_Status>
 800f1fa:	4603      	mov	r3, r0
 800f1fc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f1fe:	7dbb      	ldrb	r3, [r7, #22]
}
 800f200:	4618      	mov	r0, r3
 800f202:	3718      	adds	r7, #24
 800f204:	46bd      	mov	sp, r7
 800f206:	bd80      	pop	{r7, pc}

0800f208 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f208:	b580      	push	{r7, lr}
 800f20a:	b086      	sub	sp, #24
 800f20c:	af00      	add	r7, sp, #0
 800f20e:	60f8      	str	r0, [r7, #12]
 800f210:	607a      	str	r2, [r7, #4]
 800f212:	603b      	str	r3, [r7, #0]
 800f214:	460b      	mov	r3, r1
 800f216:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f218:	2300      	movs	r3, #0
 800f21a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f21c:	2300      	movs	r3, #0
 800f21e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f220:	68fb      	ldr	r3, [r7, #12]
 800f222:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f226:	7af9      	ldrb	r1, [r7, #11]
 800f228:	683b      	ldr	r3, [r7, #0]
 800f22a:	687a      	ldr	r2, [r7, #4]
 800f22c:	f7f6 fe97 	bl	8005f5e <HAL_PCD_EP_Receive>
 800f230:	4603      	mov	r3, r0
 800f232:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f234:	7dfb      	ldrb	r3, [r7, #23]
 800f236:	4618      	mov	r0, r3
 800f238:	f000 f832 	bl	800f2a0 <USBD_Get_USB_Status>
 800f23c:	4603      	mov	r3, r0
 800f23e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f240:	7dbb      	ldrb	r3, [r7, #22]
}
 800f242:	4618      	mov	r0, r3
 800f244:	3718      	adds	r7, #24
 800f246:	46bd      	mov	sp, r7
 800f248:	bd80      	pop	{r7, pc}

0800f24a <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f24a:	b580      	push	{r7, lr}
 800f24c:	b082      	sub	sp, #8
 800f24e:	af00      	add	r7, sp, #0
 800f250:	6078      	str	r0, [r7, #4]
 800f252:	460b      	mov	r3, r1
 800f254:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f25c:	78fa      	ldrb	r2, [r7, #3]
 800f25e:	4611      	mov	r1, r2
 800f260:	4618      	mov	r0, r3
 800f262:	f7f6 feb7 	bl	8005fd4 <HAL_PCD_EP_GetRxCount>
 800f266:	4603      	mov	r3, r0
}
 800f268:	4618      	mov	r0, r3
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}

0800f270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f270:	b480      	push	{r7}
 800f272:	b083      	sub	sp, #12
 800f274:	af00      	add	r7, sp, #0
 800f276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f278:	4b03      	ldr	r3, [pc, #12]	@ (800f288 <USBD_static_malloc+0x18>)
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	370c      	adds	r7, #12
 800f27e:	46bd      	mov	sp, r7
 800f280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f284:	4770      	bx	lr
 800f286:	bf00      	nop
 800f288:	200015ec 	.word	0x200015ec

0800f28c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f28c:	b480      	push	{r7}
 800f28e:	b083      	sub	sp, #12
 800f290:	af00      	add	r7, sp, #0
 800f292:	6078      	str	r0, [r7, #4]

}
 800f294:	bf00      	nop
 800f296:	370c      	adds	r7, #12
 800f298:	46bd      	mov	sp, r7
 800f29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f29e:	4770      	bx	lr

0800f2a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2a0:	b480      	push	{r7}
 800f2a2:	b085      	sub	sp, #20
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	4603      	mov	r3, r0
 800f2a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f2aa:	2300      	movs	r3, #0
 800f2ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2ae:	79fb      	ldrb	r3, [r7, #7]
 800f2b0:	2b03      	cmp	r3, #3
 800f2b2:	d817      	bhi.n	800f2e4 <USBD_Get_USB_Status+0x44>
 800f2b4:	a201      	add	r2, pc, #4	@ (adr r2, 800f2bc <USBD_Get_USB_Status+0x1c>)
 800f2b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2ba:	bf00      	nop
 800f2bc:	0800f2cd 	.word	0x0800f2cd
 800f2c0:	0800f2d3 	.word	0x0800f2d3
 800f2c4:	0800f2d9 	.word	0x0800f2d9
 800f2c8:	0800f2df 	.word	0x0800f2df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f2cc:	2300      	movs	r3, #0
 800f2ce:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d0:	e00b      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f2d2:	2303      	movs	r3, #3
 800f2d4:	73fb      	strb	r3, [r7, #15]
    break;
 800f2d6:	e008      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f2d8:	2301      	movs	r3, #1
 800f2da:	73fb      	strb	r3, [r7, #15]
    break;
 800f2dc:	e005      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f2de:	2303      	movs	r3, #3
 800f2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e2:	e002      	b.n	800f2ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f2e4:	2303      	movs	r3, #3
 800f2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800f2e8:	bf00      	nop
  }
  return usb_status;
 800f2ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800f2ec:	4618      	mov	r0, r3
 800f2ee:	3714      	adds	r7, #20
 800f2f0:	46bd      	mov	sp, r7
 800f2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f6:	4770      	bx	lr

0800f2f8 <_ZdlPvj>:
 800f2f8:	f000 b811 	b.w	800f31e <_ZdlPv>

0800f2fc <_Znwj>:
 800f2fc:	2801      	cmp	r0, #1
 800f2fe:	bf38      	it	cc
 800f300:	2001      	movcc	r0, #1
 800f302:	b510      	push	{r4, lr}
 800f304:	4604      	mov	r4, r0
 800f306:	4620      	mov	r0, r4
 800f308:	f000 f836 	bl	800f378 <malloc>
 800f30c:	b100      	cbz	r0, 800f310 <_Znwj+0x14>
 800f30e:	bd10      	pop	{r4, pc}
 800f310:	f000 f808 	bl	800f324 <_ZSt15get_new_handlerv>
 800f314:	b908      	cbnz	r0, 800f31a <_Znwj+0x1e>
 800f316:	f000 f80d 	bl	800f334 <abort>
 800f31a:	4780      	blx	r0
 800f31c:	e7f3      	b.n	800f306 <_Znwj+0xa>

0800f31e <_ZdlPv>:
 800f31e:	f000 b833 	b.w	800f388 <free>
	...

0800f324 <_ZSt15get_new_handlerv>:
 800f324:	4b02      	ldr	r3, [pc, #8]	@ (800f330 <_ZSt15get_new_handlerv+0xc>)
 800f326:	6818      	ldr	r0, [r3, #0]
 800f328:	f3bf 8f5b 	dmb	ish
 800f32c:	4770      	bx	lr
 800f32e:	bf00      	nop
 800f330:	2000180c 	.word	0x2000180c

0800f334 <abort>:
 800f334:	b508      	push	{r3, lr}
 800f336:	2006      	movs	r0, #6
 800f338:	f000 f9b0 	bl	800f69c <raise>
 800f33c:	2001      	movs	r0, #1
 800f33e:	f7f2 febd 	bl	80020bc <_exit>

0800f342 <__itoa>:
 800f342:	1e93      	subs	r3, r2, #2
 800f344:	2b22      	cmp	r3, #34	@ 0x22
 800f346:	b510      	push	{r4, lr}
 800f348:	460c      	mov	r4, r1
 800f34a:	d904      	bls.n	800f356 <__itoa+0x14>
 800f34c:	2300      	movs	r3, #0
 800f34e:	700b      	strb	r3, [r1, #0]
 800f350:	461c      	mov	r4, r3
 800f352:	4620      	mov	r0, r4
 800f354:	bd10      	pop	{r4, pc}
 800f356:	2a0a      	cmp	r2, #10
 800f358:	d109      	bne.n	800f36e <__itoa+0x2c>
 800f35a:	2800      	cmp	r0, #0
 800f35c:	da07      	bge.n	800f36e <__itoa+0x2c>
 800f35e:	232d      	movs	r3, #45	@ 0x2d
 800f360:	700b      	strb	r3, [r1, #0]
 800f362:	4240      	negs	r0, r0
 800f364:	2101      	movs	r1, #1
 800f366:	4421      	add	r1, r4
 800f368:	f000 f8c4 	bl	800f4f4 <__utoa>
 800f36c:	e7f1      	b.n	800f352 <__itoa+0x10>
 800f36e:	2100      	movs	r1, #0
 800f370:	e7f9      	b.n	800f366 <__itoa+0x24>

0800f372 <itoa>:
 800f372:	f7ff bfe6 	b.w	800f342 <__itoa>
	...

0800f378 <malloc>:
 800f378:	4b02      	ldr	r3, [pc, #8]	@ (800f384 <malloc+0xc>)
 800f37a:	4601      	mov	r1, r0
 800f37c:	6818      	ldr	r0, [r3, #0]
 800f37e:	f000 b82d 	b.w	800f3dc <_malloc_r>
 800f382:	bf00      	nop
 800f384:	20000134 	.word	0x20000134

0800f388 <free>:
 800f388:	4b02      	ldr	r3, [pc, #8]	@ (800f394 <free+0xc>)
 800f38a:	4601      	mov	r1, r0
 800f38c:	6818      	ldr	r0, [r3, #0]
 800f38e:	f000 b9eb 	b.w	800f768 <_free_r>
 800f392:	bf00      	nop
 800f394:	20000134 	.word	0x20000134

0800f398 <sbrk_aligned>:
 800f398:	b570      	push	{r4, r5, r6, lr}
 800f39a:	4e0f      	ldr	r6, [pc, #60]	@ (800f3d8 <sbrk_aligned+0x40>)
 800f39c:	460c      	mov	r4, r1
 800f39e:	6831      	ldr	r1, [r6, #0]
 800f3a0:	4605      	mov	r5, r0
 800f3a2:	b911      	cbnz	r1, 800f3aa <sbrk_aligned+0x12>
 800f3a4:	f000 f996 	bl	800f6d4 <_sbrk_r>
 800f3a8:	6030      	str	r0, [r6, #0]
 800f3aa:	4621      	mov	r1, r4
 800f3ac:	4628      	mov	r0, r5
 800f3ae:	f000 f991 	bl	800f6d4 <_sbrk_r>
 800f3b2:	1c43      	adds	r3, r0, #1
 800f3b4:	d103      	bne.n	800f3be <sbrk_aligned+0x26>
 800f3b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f3ba:	4620      	mov	r0, r4
 800f3bc:	bd70      	pop	{r4, r5, r6, pc}
 800f3be:	1cc4      	adds	r4, r0, #3
 800f3c0:	f024 0403 	bic.w	r4, r4, #3
 800f3c4:	42a0      	cmp	r0, r4
 800f3c6:	d0f8      	beq.n	800f3ba <sbrk_aligned+0x22>
 800f3c8:	1a21      	subs	r1, r4, r0
 800f3ca:	4628      	mov	r0, r5
 800f3cc:	f000 f982 	bl	800f6d4 <_sbrk_r>
 800f3d0:	3001      	adds	r0, #1
 800f3d2:	d1f2      	bne.n	800f3ba <sbrk_aligned+0x22>
 800f3d4:	e7ef      	b.n	800f3b6 <sbrk_aligned+0x1e>
 800f3d6:	bf00      	nop
 800f3d8:	20001810 	.word	0x20001810

0800f3dc <_malloc_r>:
 800f3dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3e0:	1ccd      	adds	r5, r1, #3
 800f3e2:	f025 0503 	bic.w	r5, r5, #3
 800f3e6:	3508      	adds	r5, #8
 800f3e8:	2d0c      	cmp	r5, #12
 800f3ea:	bf38      	it	cc
 800f3ec:	250c      	movcc	r5, #12
 800f3ee:	2d00      	cmp	r5, #0
 800f3f0:	4606      	mov	r6, r0
 800f3f2:	db01      	blt.n	800f3f8 <_malloc_r+0x1c>
 800f3f4:	42a9      	cmp	r1, r5
 800f3f6:	d904      	bls.n	800f402 <_malloc_r+0x26>
 800f3f8:	230c      	movs	r3, #12
 800f3fa:	6033      	str	r3, [r6, #0]
 800f3fc:	2000      	movs	r0, #0
 800f3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f402:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f4d8 <_malloc_r+0xfc>
 800f406:	f000 f869 	bl	800f4dc <__malloc_lock>
 800f40a:	f8d8 3000 	ldr.w	r3, [r8]
 800f40e:	461c      	mov	r4, r3
 800f410:	bb44      	cbnz	r4, 800f464 <_malloc_r+0x88>
 800f412:	4629      	mov	r1, r5
 800f414:	4630      	mov	r0, r6
 800f416:	f7ff ffbf 	bl	800f398 <sbrk_aligned>
 800f41a:	1c43      	adds	r3, r0, #1
 800f41c:	4604      	mov	r4, r0
 800f41e:	d158      	bne.n	800f4d2 <_malloc_r+0xf6>
 800f420:	f8d8 4000 	ldr.w	r4, [r8]
 800f424:	4627      	mov	r7, r4
 800f426:	2f00      	cmp	r7, #0
 800f428:	d143      	bne.n	800f4b2 <_malloc_r+0xd6>
 800f42a:	2c00      	cmp	r4, #0
 800f42c:	d04b      	beq.n	800f4c6 <_malloc_r+0xea>
 800f42e:	6823      	ldr	r3, [r4, #0]
 800f430:	4639      	mov	r1, r7
 800f432:	4630      	mov	r0, r6
 800f434:	eb04 0903 	add.w	r9, r4, r3
 800f438:	f000 f94c 	bl	800f6d4 <_sbrk_r>
 800f43c:	4581      	cmp	r9, r0
 800f43e:	d142      	bne.n	800f4c6 <_malloc_r+0xea>
 800f440:	6821      	ldr	r1, [r4, #0]
 800f442:	1a6d      	subs	r5, r5, r1
 800f444:	4629      	mov	r1, r5
 800f446:	4630      	mov	r0, r6
 800f448:	f7ff ffa6 	bl	800f398 <sbrk_aligned>
 800f44c:	3001      	adds	r0, #1
 800f44e:	d03a      	beq.n	800f4c6 <_malloc_r+0xea>
 800f450:	6823      	ldr	r3, [r4, #0]
 800f452:	442b      	add	r3, r5
 800f454:	6023      	str	r3, [r4, #0]
 800f456:	f8d8 3000 	ldr.w	r3, [r8]
 800f45a:	685a      	ldr	r2, [r3, #4]
 800f45c:	bb62      	cbnz	r2, 800f4b8 <_malloc_r+0xdc>
 800f45e:	f8c8 7000 	str.w	r7, [r8]
 800f462:	e00f      	b.n	800f484 <_malloc_r+0xa8>
 800f464:	6822      	ldr	r2, [r4, #0]
 800f466:	1b52      	subs	r2, r2, r5
 800f468:	d420      	bmi.n	800f4ac <_malloc_r+0xd0>
 800f46a:	2a0b      	cmp	r2, #11
 800f46c:	d917      	bls.n	800f49e <_malloc_r+0xc2>
 800f46e:	1961      	adds	r1, r4, r5
 800f470:	42a3      	cmp	r3, r4
 800f472:	6025      	str	r5, [r4, #0]
 800f474:	bf18      	it	ne
 800f476:	6059      	strne	r1, [r3, #4]
 800f478:	6863      	ldr	r3, [r4, #4]
 800f47a:	bf08      	it	eq
 800f47c:	f8c8 1000 	streq.w	r1, [r8]
 800f480:	5162      	str	r2, [r4, r5]
 800f482:	604b      	str	r3, [r1, #4]
 800f484:	4630      	mov	r0, r6
 800f486:	f000 f82f 	bl	800f4e8 <__malloc_unlock>
 800f48a:	f104 000b 	add.w	r0, r4, #11
 800f48e:	1d23      	adds	r3, r4, #4
 800f490:	f020 0007 	bic.w	r0, r0, #7
 800f494:	1ac2      	subs	r2, r0, r3
 800f496:	bf1c      	itt	ne
 800f498:	1a1b      	subne	r3, r3, r0
 800f49a:	50a3      	strne	r3, [r4, r2]
 800f49c:	e7af      	b.n	800f3fe <_malloc_r+0x22>
 800f49e:	6862      	ldr	r2, [r4, #4]
 800f4a0:	42a3      	cmp	r3, r4
 800f4a2:	bf0c      	ite	eq
 800f4a4:	f8c8 2000 	streq.w	r2, [r8]
 800f4a8:	605a      	strne	r2, [r3, #4]
 800f4aa:	e7eb      	b.n	800f484 <_malloc_r+0xa8>
 800f4ac:	4623      	mov	r3, r4
 800f4ae:	6864      	ldr	r4, [r4, #4]
 800f4b0:	e7ae      	b.n	800f410 <_malloc_r+0x34>
 800f4b2:	463c      	mov	r4, r7
 800f4b4:	687f      	ldr	r7, [r7, #4]
 800f4b6:	e7b6      	b.n	800f426 <_malloc_r+0x4a>
 800f4b8:	461a      	mov	r2, r3
 800f4ba:	685b      	ldr	r3, [r3, #4]
 800f4bc:	42a3      	cmp	r3, r4
 800f4be:	d1fb      	bne.n	800f4b8 <_malloc_r+0xdc>
 800f4c0:	2300      	movs	r3, #0
 800f4c2:	6053      	str	r3, [r2, #4]
 800f4c4:	e7de      	b.n	800f484 <_malloc_r+0xa8>
 800f4c6:	230c      	movs	r3, #12
 800f4c8:	6033      	str	r3, [r6, #0]
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	f000 f80c 	bl	800f4e8 <__malloc_unlock>
 800f4d0:	e794      	b.n	800f3fc <_malloc_r+0x20>
 800f4d2:	6005      	str	r5, [r0, #0]
 800f4d4:	e7d6      	b.n	800f484 <_malloc_r+0xa8>
 800f4d6:	bf00      	nop
 800f4d8:	20001814 	.word	0x20001814

0800f4dc <__malloc_lock>:
 800f4dc:	4801      	ldr	r0, [pc, #4]	@ (800f4e4 <__malloc_lock+0x8>)
 800f4de:	f000 b933 	b.w	800f748 <__retarget_lock_acquire_recursive>
 800f4e2:	bf00      	nop
 800f4e4:	20001954 	.word	0x20001954

0800f4e8 <__malloc_unlock>:
 800f4e8:	4801      	ldr	r0, [pc, #4]	@ (800f4f0 <__malloc_unlock+0x8>)
 800f4ea:	f000 b92e 	b.w	800f74a <__retarget_lock_release_recursive>
 800f4ee:	bf00      	nop
 800f4f0:	20001954 	.word	0x20001954

0800f4f4 <__utoa>:
 800f4f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4f6:	4c1f      	ldr	r4, [pc, #124]	@ (800f574 <__utoa+0x80>)
 800f4f8:	b08b      	sub	sp, #44	@ 0x2c
 800f4fa:	4605      	mov	r5, r0
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	466e      	mov	r6, sp
 800f500:	f104 0c20 	add.w	ip, r4, #32
 800f504:	6820      	ldr	r0, [r4, #0]
 800f506:	6861      	ldr	r1, [r4, #4]
 800f508:	4637      	mov	r7, r6
 800f50a:	c703      	stmia	r7!, {r0, r1}
 800f50c:	3408      	adds	r4, #8
 800f50e:	4564      	cmp	r4, ip
 800f510:	463e      	mov	r6, r7
 800f512:	d1f7      	bne.n	800f504 <__utoa+0x10>
 800f514:	7921      	ldrb	r1, [r4, #4]
 800f516:	7139      	strb	r1, [r7, #4]
 800f518:	1e91      	subs	r1, r2, #2
 800f51a:	6820      	ldr	r0, [r4, #0]
 800f51c:	6038      	str	r0, [r7, #0]
 800f51e:	2922      	cmp	r1, #34	@ 0x22
 800f520:	f04f 0100 	mov.w	r1, #0
 800f524:	d904      	bls.n	800f530 <__utoa+0x3c>
 800f526:	7019      	strb	r1, [r3, #0]
 800f528:	460b      	mov	r3, r1
 800f52a:	4618      	mov	r0, r3
 800f52c:	b00b      	add	sp, #44	@ 0x2c
 800f52e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f530:	1e58      	subs	r0, r3, #1
 800f532:	4684      	mov	ip, r0
 800f534:	fbb5 f7f2 	udiv	r7, r5, r2
 800f538:	fb02 5617 	mls	r6, r2, r7, r5
 800f53c:	3628      	adds	r6, #40	@ 0x28
 800f53e:	446e      	add	r6, sp
 800f540:	460c      	mov	r4, r1
 800f542:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f546:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f54a:	462e      	mov	r6, r5
 800f54c:	42b2      	cmp	r2, r6
 800f54e:	f101 0101 	add.w	r1, r1, #1
 800f552:	463d      	mov	r5, r7
 800f554:	d9ee      	bls.n	800f534 <__utoa+0x40>
 800f556:	2200      	movs	r2, #0
 800f558:	545a      	strb	r2, [r3, r1]
 800f55a:	1919      	adds	r1, r3, r4
 800f55c:	1aa5      	subs	r5, r4, r2
 800f55e:	42aa      	cmp	r2, r5
 800f560:	dae3      	bge.n	800f52a <__utoa+0x36>
 800f562:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f566:	780e      	ldrb	r6, [r1, #0]
 800f568:	7006      	strb	r6, [r0, #0]
 800f56a:	3201      	adds	r2, #1
 800f56c:	f801 5901 	strb.w	r5, [r1], #-1
 800f570:	e7f4      	b.n	800f55c <__utoa+0x68>
 800f572:	bf00      	nop
 800f574:	08017a18 	.word	0x08017a18

0800f578 <_vsniprintf_r>:
 800f578:	b530      	push	{r4, r5, lr}
 800f57a:	4614      	mov	r4, r2
 800f57c:	2c00      	cmp	r4, #0
 800f57e:	b09b      	sub	sp, #108	@ 0x6c
 800f580:	4605      	mov	r5, r0
 800f582:	461a      	mov	r2, r3
 800f584:	da05      	bge.n	800f592 <_vsniprintf_r+0x1a>
 800f586:	238b      	movs	r3, #139	@ 0x8b
 800f588:	6003      	str	r3, [r0, #0]
 800f58a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f58e:	b01b      	add	sp, #108	@ 0x6c
 800f590:	bd30      	pop	{r4, r5, pc}
 800f592:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f596:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f59a:	f04f 0300 	mov.w	r3, #0
 800f59e:	9319      	str	r3, [sp, #100]	@ 0x64
 800f5a0:	bf14      	ite	ne
 800f5a2:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f5a6:	4623      	moveq	r3, r4
 800f5a8:	9302      	str	r3, [sp, #8]
 800f5aa:	9305      	str	r3, [sp, #20]
 800f5ac:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f5b0:	9100      	str	r1, [sp, #0]
 800f5b2:	9104      	str	r1, [sp, #16]
 800f5b4:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f5b8:	4669      	mov	r1, sp
 800f5ba:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f5bc:	f000 f97a 	bl	800f8b4 <_svfiprintf_r>
 800f5c0:	1c43      	adds	r3, r0, #1
 800f5c2:	bfbc      	itt	lt
 800f5c4:	238b      	movlt	r3, #139	@ 0x8b
 800f5c6:	602b      	strlt	r3, [r5, #0]
 800f5c8:	2c00      	cmp	r4, #0
 800f5ca:	d0e0      	beq.n	800f58e <_vsniprintf_r+0x16>
 800f5cc:	9b00      	ldr	r3, [sp, #0]
 800f5ce:	2200      	movs	r2, #0
 800f5d0:	701a      	strb	r2, [r3, #0]
 800f5d2:	e7dc      	b.n	800f58e <_vsniprintf_r+0x16>

0800f5d4 <vsniprintf>:
 800f5d4:	b507      	push	{r0, r1, r2, lr}
 800f5d6:	9300      	str	r3, [sp, #0]
 800f5d8:	4613      	mov	r3, r2
 800f5da:	460a      	mov	r2, r1
 800f5dc:	4601      	mov	r1, r0
 800f5de:	4803      	ldr	r0, [pc, #12]	@ (800f5ec <vsniprintf+0x18>)
 800f5e0:	6800      	ldr	r0, [r0, #0]
 800f5e2:	f7ff ffc9 	bl	800f578 <_vsniprintf_r>
 800f5e6:	b003      	add	sp, #12
 800f5e8:	f85d fb04 	ldr.w	pc, [sp], #4
 800f5ec:	20000134 	.word	0x20000134

0800f5f0 <memset>:
 800f5f0:	4402      	add	r2, r0
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	4293      	cmp	r3, r2
 800f5f6:	d100      	bne.n	800f5fa <memset+0xa>
 800f5f8:	4770      	bx	lr
 800f5fa:	f803 1b01 	strb.w	r1, [r3], #1
 800f5fe:	e7f9      	b.n	800f5f4 <memset+0x4>

0800f600 <strncat>:
 800f600:	b530      	push	{r4, r5, lr}
 800f602:	4604      	mov	r4, r0
 800f604:	7825      	ldrb	r5, [r4, #0]
 800f606:	4623      	mov	r3, r4
 800f608:	3401      	adds	r4, #1
 800f60a:	2d00      	cmp	r5, #0
 800f60c:	d1fa      	bne.n	800f604 <strncat+0x4>
 800f60e:	3a01      	subs	r2, #1
 800f610:	d304      	bcc.n	800f61c <strncat+0x1c>
 800f612:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f616:	f803 4b01 	strb.w	r4, [r3], #1
 800f61a:	b904      	cbnz	r4, 800f61e <strncat+0x1e>
 800f61c:	bd30      	pop	{r4, r5, pc}
 800f61e:	2a00      	cmp	r2, #0
 800f620:	d1f5      	bne.n	800f60e <strncat+0xe>
 800f622:	701a      	strb	r2, [r3, #0]
 800f624:	e7f3      	b.n	800f60e <strncat+0xe>

0800f626 <strncpy>:
 800f626:	b510      	push	{r4, lr}
 800f628:	3901      	subs	r1, #1
 800f62a:	4603      	mov	r3, r0
 800f62c:	b132      	cbz	r2, 800f63c <strncpy+0x16>
 800f62e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f632:	f803 4b01 	strb.w	r4, [r3], #1
 800f636:	3a01      	subs	r2, #1
 800f638:	2c00      	cmp	r4, #0
 800f63a:	d1f7      	bne.n	800f62c <strncpy+0x6>
 800f63c:	441a      	add	r2, r3
 800f63e:	2100      	movs	r1, #0
 800f640:	4293      	cmp	r3, r2
 800f642:	d100      	bne.n	800f646 <strncpy+0x20>
 800f644:	bd10      	pop	{r4, pc}
 800f646:	f803 1b01 	strb.w	r1, [r3], #1
 800f64a:	e7f9      	b.n	800f640 <strncpy+0x1a>

0800f64c <_raise_r>:
 800f64c:	291f      	cmp	r1, #31
 800f64e:	b538      	push	{r3, r4, r5, lr}
 800f650:	4605      	mov	r5, r0
 800f652:	460c      	mov	r4, r1
 800f654:	d904      	bls.n	800f660 <_raise_r+0x14>
 800f656:	2316      	movs	r3, #22
 800f658:	6003      	str	r3, [r0, #0]
 800f65a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f65e:	bd38      	pop	{r3, r4, r5, pc}
 800f660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f662:	b112      	cbz	r2, 800f66a <_raise_r+0x1e>
 800f664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f668:	b94b      	cbnz	r3, 800f67e <_raise_r+0x32>
 800f66a:	4628      	mov	r0, r5
 800f66c:	f000 f830 	bl	800f6d0 <_getpid_r>
 800f670:	4622      	mov	r2, r4
 800f672:	4601      	mov	r1, r0
 800f674:	4628      	mov	r0, r5
 800f676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f67a:	f000 b817 	b.w	800f6ac <_kill_r>
 800f67e:	2b01      	cmp	r3, #1
 800f680:	d00a      	beq.n	800f698 <_raise_r+0x4c>
 800f682:	1c59      	adds	r1, r3, #1
 800f684:	d103      	bne.n	800f68e <_raise_r+0x42>
 800f686:	2316      	movs	r3, #22
 800f688:	6003      	str	r3, [r0, #0]
 800f68a:	2001      	movs	r0, #1
 800f68c:	e7e7      	b.n	800f65e <_raise_r+0x12>
 800f68e:	2100      	movs	r1, #0
 800f690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f694:	4620      	mov	r0, r4
 800f696:	4798      	blx	r3
 800f698:	2000      	movs	r0, #0
 800f69a:	e7e0      	b.n	800f65e <_raise_r+0x12>

0800f69c <raise>:
 800f69c:	4b02      	ldr	r3, [pc, #8]	@ (800f6a8 <raise+0xc>)
 800f69e:	4601      	mov	r1, r0
 800f6a0:	6818      	ldr	r0, [r3, #0]
 800f6a2:	f7ff bfd3 	b.w	800f64c <_raise_r>
 800f6a6:	bf00      	nop
 800f6a8:	20000134 	.word	0x20000134

0800f6ac <_kill_r>:
 800f6ac:	b538      	push	{r3, r4, r5, lr}
 800f6ae:	4d07      	ldr	r5, [pc, #28]	@ (800f6cc <_kill_r+0x20>)
 800f6b0:	2300      	movs	r3, #0
 800f6b2:	4604      	mov	r4, r0
 800f6b4:	4608      	mov	r0, r1
 800f6b6:	4611      	mov	r1, r2
 800f6b8:	602b      	str	r3, [r5, #0]
 800f6ba:	f7f2 fcef 	bl	800209c <_kill>
 800f6be:	1c43      	adds	r3, r0, #1
 800f6c0:	d102      	bne.n	800f6c8 <_kill_r+0x1c>
 800f6c2:	682b      	ldr	r3, [r5, #0]
 800f6c4:	b103      	cbz	r3, 800f6c8 <_kill_r+0x1c>
 800f6c6:	6023      	str	r3, [r4, #0]
 800f6c8:	bd38      	pop	{r3, r4, r5, pc}
 800f6ca:	bf00      	nop
 800f6cc:	20001950 	.word	0x20001950

0800f6d0 <_getpid_r>:
 800f6d0:	f7f2 bcdc 	b.w	800208c <_getpid>

0800f6d4 <_sbrk_r>:
 800f6d4:	b538      	push	{r3, r4, r5, lr}
 800f6d6:	4d06      	ldr	r5, [pc, #24]	@ (800f6f0 <_sbrk_r+0x1c>)
 800f6d8:	2300      	movs	r3, #0
 800f6da:	4604      	mov	r4, r0
 800f6dc:	4608      	mov	r0, r1
 800f6de:	602b      	str	r3, [r5, #0]
 800f6e0:	f7f2 fcf8 	bl	80020d4 <_sbrk>
 800f6e4:	1c43      	adds	r3, r0, #1
 800f6e6:	d102      	bne.n	800f6ee <_sbrk_r+0x1a>
 800f6e8:	682b      	ldr	r3, [r5, #0]
 800f6ea:	b103      	cbz	r3, 800f6ee <_sbrk_r+0x1a>
 800f6ec:	6023      	str	r3, [r4, #0]
 800f6ee:	bd38      	pop	{r3, r4, r5, pc}
 800f6f0:	20001950 	.word	0x20001950

0800f6f4 <__errno>:
 800f6f4:	4b01      	ldr	r3, [pc, #4]	@ (800f6fc <__errno+0x8>)
 800f6f6:	6818      	ldr	r0, [r3, #0]
 800f6f8:	4770      	bx	lr
 800f6fa:	bf00      	nop
 800f6fc:	20000134 	.word	0x20000134

0800f700 <__libc_init_array>:
 800f700:	b570      	push	{r4, r5, r6, lr}
 800f702:	4d0d      	ldr	r5, [pc, #52]	@ (800f738 <__libc_init_array+0x38>)
 800f704:	4c0d      	ldr	r4, [pc, #52]	@ (800f73c <__libc_init_array+0x3c>)
 800f706:	1b64      	subs	r4, r4, r5
 800f708:	10a4      	asrs	r4, r4, #2
 800f70a:	2600      	movs	r6, #0
 800f70c:	42a6      	cmp	r6, r4
 800f70e:	d109      	bne.n	800f724 <__libc_init_array+0x24>
 800f710:	4d0b      	ldr	r5, [pc, #44]	@ (800f740 <__libc_init_array+0x40>)
 800f712:	4c0c      	ldr	r4, [pc, #48]	@ (800f744 <__libc_init_array+0x44>)
 800f714:	f000 fba6 	bl	800fe64 <_init>
 800f718:	1b64      	subs	r4, r4, r5
 800f71a:	10a4      	asrs	r4, r4, #2
 800f71c:	2600      	movs	r6, #0
 800f71e:	42a6      	cmp	r6, r4
 800f720:	d105      	bne.n	800f72e <__libc_init_array+0x2e>
 800f722:	bd70      	pop	{r4, r5, r6, pc}
 800f724:	f855 3b04 	ldr.w	r3, [r5], #4
 800f728:	4798      	blx	r3
 800f72a:	3601      	adds	r6, #1
 800f72c:	e7ee      	b.n	800f70c <__libc_init_array+0xc>
 800f72e:	f855 3b04 	ldr.w	r3, [r5], #4
 800f732:	4798      	blx	r3
 800f734:	3601      	adds	r6, #1
 800f736:	e7f2      	b.n	800f71e <__libc_init_array+0x1e>
 800f738:	08017a78 	.word	0x08017a78
 800f73c:	08017a78 	.word	0x08017a78
 800f740:	08017a78 	.word	0x08017a78
 800f744:	08017a84 	.word	0x08017a84

0800f748 <__retarget_lock_acquire_recursive>:
 800f748:	4770      	bx	lr

0800f74a <__retarget_lock_release_recursive>:
 800f74a:	4770      	bx	lr

0800f74c <memcpy>:
 800f74c:	440a      	add	r2, r1
 800f74e:	4291      	cmp	r1, r2
 800f750:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f754:	d100      	bne.n	800f758 <memcpy+0xc>
 800f756:	4770      	bx	lr
 800f758:	b510      	push	{r4, lr}
 800f75a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f75e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f762:	4291      	cmp	r1, r2
 800f764:	d1f9      	bne.n	800f75a <memcpy+0xe>
 800f766:	bd10      	pop	{r4, pc}

0800f768 <_free_r>:
 800f768:	b538      	push	{r3, r4, r5, lr}
 800f76a:	4605      	mov	r5, r0
 800f76c:	2900      	cmp	r1, #0
 800f76e:	d041      	beq.n	800f7f4 <_free_r+0x8c>
 800f770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f774:	1f0c      	subs	r4, r1, #4
 800f776:	2b00      	cmp	r3, #0
 800f778:	bfb8      	it	lt
 800f77a:	18e4      	addlt	r4, r4, r3
 800f77c:	f7ff feae 	bl	800f4dc <__malloc_lock>
 800f780:	4a1d      	ldr	r2, [pc, #116]	@ (800f7f8 <_free_r+0x90>)
 800f782:	6813      	ldr	r3, [r2, #0]
 800f784:	b933      	cbnz	r3, 800f794 <_free_r+0x2c>
 800f786:	6063      	str	r3, [r4, #4]
 800f788:	6014      	str	r4, [r2, #0]
 800f78a:	4628      	mov	r0, r5
 800f78c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f790:	f7ff beaa 	b.w	800f4e8 <__malloc_unlock>
 800f794:	42a3      	cmp	r3, r4
 800f796:	d908      	bls.n	800f7aa <_free_r+0x42>
 800f798:	6820      	ldr	r0, [r4, #0]
 800f79a:	1821      	adds	r1, r4, r0
 800f79c:	428b      	cmp	r3, r1
 800f79e:	bf01      	itttt	eq
 800f7a0:	6819      	ldreq	r1, [r3, #0]
 800f7a2:	685b      	ldreq	r3, [r3, #4]
 800f7a4:	1809      	addeq	r1, r1, r0
 800f7a6:	6021      	streq	r1, [r4, #0]
 800f7a8:	e7ed      	b.n	800f786 <_free_r+0x1e>
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	685b      	ldr	r3, [r3, #4]
 800f7ae:	b10b      	cbz	r3, 800f7b4 <_free_r+0x4c>
 800f7b0:	42a3      	cmp	r3, r4
 800f7b2:	d9fa      	bls.n	800f7aa <_free_r+0x42>
 800f7b4:	6811      	ldr	r1, [r2, #0]
 800f7b6:	1850      	adds	r0, r2, r1
 800f7b8:	42a0      	cmp	r0, r4
 800f7ba:	d10b      	bne.n	800f7d4 <_free_r+0x6c>
 800f7bc:	6820      	ldr	r0, [r4, #0]
 800f7be:	4401      	add	r1, r0
 800f7c0:	1850      	adds	r0, r2, r1
 800f7c2:	4283      	cmp	r3, r0
 800f7c4:	6011      	str	r1, [r2, #0]
 800f7c6:	d1e0      	bne.n	800f78a <_free_r+0x22>
 800f7c8:	6818      	ldr	r0, [r3, #0]
 800f7ca:	685b      	ldr	r3, [r3, #4]
 800f7cc:	6053      	str	r3, [r2, #4]
 800f7ce:	4408      	add	r0, r1
 800f7d0:	6010      	str	r0, [r2, #0]
 800f7d2:	e7da      	b.n	800f78a <_free_r+0x22>
 800f7d4:	d902      	bls.n	800f7dc <_free_r+0x74>
 800f7d6:	230c      	movs	r3, #12
 800f7d8:	602b      	str	r3, [r5, #0]
 800f7da:	e7d6      	b.n	800f78a <_free_r+0x22>
 800f7dc:	6820      	ldr	r0, [r4, #0]
 800f7de:	1821      	adds	r1, r4, r0
 800f7e0:	428b      	cmp	r3, r1
 800f7e2:	bf04      	itt	eq
 800f7e4:	6819      	ldreq	r1, [r3, #0]
 800f7e6:	685b      	ldreq	r3, [r3, #4]
 800f7e8:	6063      	str	r3, [r4, #4]
 800f7ea:	bf04      	itt	eq
 800f7ec:	1809      	addeq	r1, r1, r0
 800f7ee:	6021      	streq	r1, [r4, #0]
 800f7f0:	6054      	str	r4, [r2, #4]
 800f7f2:	e7ca      	b.n	800f78a <_free_r+0x22>
 800f7f4:	bd38      	pop	{r3, r4, r5, pc}
 800f7f6:	bf00      	nop
 800f7f8:	20001814 	.word	0x20001814

0800f7fc <__ssputs_r>:
 800f7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f800:	688e      	ldr	r6, [r1, #8]
 800f802:	461f      	mov	r7, r3
 800f804:	42be      	cmp	r6, r7
 800f806:	680b      	ldr	r3, [r1, #0]
 800f808:	4682      	mov	sl, r0
 800f80a:	460c      	mov	r4, r1
 800f80c:	4690      	mov	r8, r2
 800f80e:	d82d      	bhi.n	800f86c <__ssputs_r+0x70>
 800f810:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f814:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f818:	d026      	beq.n	800f868 <__ssputs_r+0x6c>
 800f81a:	6965      	ldr	r5, [r4, #20]
 800f81c:	6909      	ldr	r1, [r1, #16]
 800f81e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f822:	eba3 0901 	sub.w	r9, r3, r1
 800f826:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f82a:	1c7b      	adds	r3, r7, #1
 800f82c:	444b      	add	r3, r9
 800f82e:	106d      	asrs	r5, r5, #1
 800f830:	429d      	cmp	r5, r3
 800f832:	bf38      	it	cc
 800f834:	461d      	movcc	r5, r3
 800f836:	0553      	lsls	r3, r2, #21
 800f838:	d527      	bpl.n	800f88a <__ssputs_r+0x8e>
 800f83a:	4629      	mov	r1, r5
 800f83c:	f7ff fdce 	bl	800f3dc <_malloc_r>
 800f840:	4606      	mov	r6, r0
 800f842:	b360      	cbz	r0, 800f89e <__ssputs_r+0xa2>
 800f844:	6921      	ldr	r1, [r4, #16]
 800f846:	464a      	mov	r2, r9
 800f848:	f7ff ff80 	bl	800f74c <memcpy>
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f852:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f856:	81a3      	strh	r3, [r4, #12]
 800f858:	6126      	str	r6, [r4, #16]
 800f85a:	6165      	str	r5, [r4, #20]
 800f85c:	444e      	add	r6, r9
 800f85e:	eba5 0509 	sub.w	r5, r5, r9
 800f862:	6026      	str	r6, [r4, #0]
 800f864:	60a5      	str	r5, [r4, #8]
 800f866:	463e      	mov	r6, r7
 800f868:	42be      	cmp	r6, r7
 800f86a:	d900      	bls.n	800f86e <__ssputs_r+0x72>
 800f86c:	463e      	mov	r6, r7
 800f86e:	6820      	ldr	r0, [r4, #0]
 800f870:	4632      	mov	r2, r6
 800f872:	4641      	mov	r1, r8
 800f874:	f000 faa6 	bl	800fdc4 <memmove>
 800f878:	68a3      	ldr	r3, [r4, #8]
 800f87a:	1b9b      	subs	r3, r3, r6
 800f87c:	60a3      	str	r3, [r4, #8]
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	4433      	add	r3, r6
 800f882:	6023      	str	r3, [r4, #0]
 800f884:	2000      	movs	r0, #0
 800f886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f88a:	462a      	mov	r2, r5
 800f88c:	f000 fab4 	bl	800fdf8 <_realloc_r>
 800f890:	4606      	mov	r6, r0
 800f892:	2800      	cmp	r0, #0
 800f894:	d1e0      	bne.n	800f858 <__ssputs_r+0x5c>
 800f896:	6921      	ldr	r1, [r4, #16]
 800f898:	4650      	mov	r0, sl
 800f89a:	f7ff ff65 	bl	800f768 <_free_r>
 800f89e:	230c      	movs	r3, #12
 800f8a0:	f8ca 3000 	str.w	r3, [sl]
 800f8a4:	89a3      	ldrh	r3, [r4, #12]
 800f8a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f8aa:	81a3      	strh	r3, [r4, #12]
 800f8ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8b0:	e7e9      	b.n	800f886 <__ssputs_r+0x8a>
	...

0800f8b4 <_svfiprintf_r>:
 800f8b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8b8:	4698      	mov	r8, r3
 800f8ba:	898b      	ldrh	r3, [r1, #12]
 800f8bc:	061b      	lsls	r3, r3, #24
 800f8be:	b09d      	sub	sp, #116	@ 0x74
 800f8c0:	4607      	mov	r7, r0
 800f8c2:	460d      	mov	r5, r1
 800f8c4:	4614      	mov	r4, r2
 800f8c6:	d510      	bpl.n	800f8ea <_svfiprintf_r+0x36>
 800f8c8:	690b      	ldr	r3, [r1, #16]
 800f8ca:	b973      	cbnz	r3, 800f8ea <_svfiprintf_r+0x36>
 800f8cc:	2140      	movs	r1, #64	@ 0x40
 800f8ce:	f7ff fd85 	bl	800f3dc <_malloc_r>
 800f8d2:	6028      	str	r0, [r5, #0]
 800f8d4:	6128      	str	r0, [r5, #16]
 800f8d6:	b930      	cbnz	r0, 800f8e6 <_svfiprintf_r+0x32>
 800f8d8:	230c      	movs	r3, #12
 800f8da:	603b      	str	r3, [r7, #0]
 800f8dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f8e0:	b01d      	add	sp, #116	@ 0x74
 800f8e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8e6:	2340      	movs	r3, #64	@ 0x40
 800f8e8:	616b      	str	r3, [r5, #20]
 800f8ea:	2300      	movs	r3, #0
 800f8ec:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8ee:	2320      	movs	r3, #32
 800f8f0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f8f4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f8f8:	2330      	movs	r3, #48	@ 0x30
 800f8fa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fa98 <_svfiprintf_r+0x1e4>
 800f8fe:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f902:	f04f 0901 	mov.w	r9, #1
 800f906:	4623      	mov	r3, r4
 800f908:	469a      	mov	sl, r3
 800f90a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f90e:	b10a      	cbz	r2, 800f914 <_svfiprintf_r+0x60>
 800f910:	2a25      	cmp	r2, #37	@ 0x25
 800f912:	d1f9      	bne.n	800f908 <_svfiprintf_r+0x54>
 800f914:	ebba 0b04 	subs.w	fp, sl, r4
 800f918:	d00b      	beq.n	800f932 <_svfiprintf_r+0x7e>
 800f91a:	465b      	mov	r3, fp
 800f91c:	4622      	mov	r2, r4
 800f91e:	4629      	mov	r1, r5
 800f920:	4638      	mov	r0, r7
 800f922:	f7ff ff6b 	bl	800f7fc <__ssputs_r>
 800f926:	3001      	adds	r0, #1
 800f928:	f000 80a7 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f92c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f92e:	445a      	add	r2, fp
 800f930:	9209      	str	r2, [sp, #36]	@ 0x24
 800f932:	f89a 3000 	ldrb.w	r3, [sl]
 800f936:	2b00      	cmp	r3, #0
 800f938:	f000 809f 	beq.w	800fa7a <_svfiprintf_r+0x1c6>
 800f93c:	2300      	movs	r3, #0
 800f93e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f942:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f946:	f10a 0a01 	add.w	sl, sl, #1
 800f94a:	9304      	str	r3, [sp, #16]
 800f94c:	9307      	str	r3, [sp, #28]
 800f94e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f952:	931a      	str	r3, [sp, #104]	@ 0x68
 800f954:	4654      	mov	r4, sl
 800f956:	2205      	movs	r2, #5
 800f958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f95c:	484e      	ldr	r0, [pc, #312]	@ (800fa98 <_svfiprintf_r+0x1e4>)
 800f95e:	f7f0 fc47 	bl	80001f0 <memchr>
 800f962:	9a04      	ldr	r2, [sp, #16]
 800f964:	b9d8      	cbnz	r0, 800f99e <_svfiprintf_r+0xea>
 800f966:	06d0      	lsls	r0, r2, #27
 800f968:	bf44      	itt	mi
 800f96a:	2320      	movmi	r3, #32
 800f96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f970:	0711      	lsls	r1, r2, #28
 800f972:	bf44      	itt	mi
 800f974:	232b      	movmi	r3, #43	@ 0x2b
 800f976:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f97a:	f89a 3000 	ldrb.w	r3, [sl]
 800f97e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f980:	d015      	beq.n	800f9ae <_svfiprintf_r+0xfa>
 800f982:	9a07      	ldr	r2, [sp, #28]
 800f984:	4654      	mov	r4, sl
 800f986:	2000      	movs	r0, #0
 800f988:	f04f 0c0a 	mov.w	ip, #10
 800f98c:	4621      	mov	r1, r4
 800f98e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f992:	3b30      	subs	r3, #48	@ 0x30
 800f994:	2b09      	cmp	r3, #9
 800f996:	d94b      	bls.n	800fa30 <_svfiprintf_r+0x17c>
 800f998:	b1b0      	cbz	r0, 800f9c8 <_svfiprintf_r+0x114>
 800f99a:	9207      	str	r2, [sp, #28]
 800f99c:	e014      	b.n	800f9c8 <_svfiprintf_r+0x114>
 800f99e:	eba0 0308 	sub.w	r3, r0, r8
 800f9a2:	fa09 f303 	lsl.w	r3, r9, r3
 800f9a6:	4313      	orrs	r3, r2
 800f9a8:	9304      	str	r3, [sp, #16]
 800f9aa:	46a2      	mov	sl, r4
 800f9ac:	e7d2      	b.n	800f954 <_svfiprintf_r+0xa0>
 800f9ae:	9b03      	ldr	r3, [sp, #12]
 800f9b0:	1d19      	adds	r1, r3, #4
 800f9b2:	681b      	ldr	r3, [r3, #0]
 800f9b4:	9103      	str	r1, [sp, #12]
 800f9b6:	2b00      	cmp	r3, #0
 800f9b8:	bfbb      	ittet	lt
 800f9ba:	425b      	neglt	r3, r3
 800f9bc:	f042 0202 	orrlt.w	r2, r2, #2
 800f9c0:	9307      	strge	r3, [sp, #28]
 800f9c2:	9307      	strlt	r3, [sp, #28]
 800f9c4:	bfb8      	it	lt
 800f9c6:	9204      	strlt	r2, [sp, #16]
 800f9c8:	7823      	ldrb	r3, [r4, #0]
 800f9ca:	2b2e      	cmp	r3, #46	@ 0x2e
 800f9cc:	d10a      	bne.n	800f9e4 <_svfiprintf_r+0x130>
 800f9ce:	7863      	ldrb	r3, [r4, #1]
 800f9d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f9d2:	d132      	bne.n	800fa3a <_svfiprintf_r+0x186>
 800f9d4:	9b03      	ldr	r3, [sp, #12]
 800f9d6:	1d1a      	adds	r2, r3, #4
 800f9d8:	681b      	ldr	r3, [r3, #0]
 800f9da:	9203      	str	r2, [sp, #12]
 800f9dc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f9e0:	3402      	adds	r4, #2
 800f9e2:	9305      	str	r3, [sp, #20]
 800f9e4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800faa8 <_svfiprintf_r+0x1f4>
 800f9e8:	7821      	ldrb	r1, [r4, #0]
 800f9ea:	2203      	movs	r2, #3
 800f9ec:	4650      	mov	r0, sl
 800f9ee:	f7f0 fbff 	bl	80001f0 <memchr>
 800f9f2:	b138      	cbz	r0, 800fa04 <_svfiprintf_r+0x150>
 800f9f4:	9b04      	ldr	r3, [sp, #16]
 800f9f6:	eba0 000a 	sub.w	r0, r0, sl
 800f9fa:	2240      	movs	r2, #64	@ 0x40
 800f9fc:	4082      	lsls	r2, r0
 800f9fe:	4313      	orrs	r3, r2
 800fa00:	3401      	adds	r4, #1
 800fa02:	9304      	str	r3, [sp, #16]
 800fa04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa08:	4824      	ldr	r0, [pc, #144]	@ (800fa9c <_svfiprintf_r+0x1e8>)
 800fa0a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fa0e:	2206      	movs	r2, #6
 800fa10:	f7f0 fbee 	bl	80001f0 <memchr>
 800fa14:	2800      	cmp	r0, #0
 800fa16:	d036      	beq.n	800fa86 <_svfiprintf_r+0x1d2>
 800fa18:	4b21      	ldr	r3, [pc, #132]	@ (800faa0 <_svfiprintf_r+0x1ec>)
 800fa1a:	bb1b      	cbnz	r3, 800fa64 <_svfiprintf_r+0x1b0>
 800fa1c:	9b03      	ldr	r3, [sp, #12]
 800fa1e:	3307      	adds	r3, #7
 800fa20:	f023 0307 	bic.w	r3, r3, #7
 800fa24:	3308      	adds	r3, #8
 800fa26:	9303      	str	r3, [sp, #12]
 800fa28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa2a:	4433      	add	r3, r6
 800fa2c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fa2e:	e76a      	b.n	800f906 <_svfiprintf_r+0x52>
 800fa30:	fb0c 3202 	mla	r2, ip, r2, r3
 800fa34:	460c      	mov	r4, r1
 800fa36:	2001      	movs	r0, #1
 800fa38:	e7a8      	b.n	800f98c <_svfiprintf_r+0xd8>
 800fa3a:	2300      	movs	r3, #0
 800fa3c:	3401      	adds	r4, #1
 800fa3e:	9305      	str	r3, [sp, #20]
 800fa40:	4619      	mov	r1, r3
 800fa42:	f04f 0c0a 	mov.w	ip, #10
 800fa46:	4620      	mov	r0, r4
 800fa48:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fa4c:	3a30      	subs	r2, #48	@ 0x30
 800fa4e:	2a09      	cmp	r2, #9
 800fa50:	d903      	bls.n	800fa5a <_svfiprintf_r+0x1a6>
 800fa52:	2b00      	cmp	r3, #0
 800fa54:	d0c6      	beq.n	800f9e4 <_svfiprintf_r+0x130>
 800fa56:	9105      	str	r1, [sp, #20]
 800fa58:	e7c4      	b.n	800f9e4 <_svfiprintf_r+0x130>
 800fa5a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fa5e:	4604      	mov	r4, r0
 800fa60:	2301      	movs	r3, #1
 800fa62:	e7f0      	b.n	800fa46 <_svfiprintf_r+0x192>
 800fa64:	ab03      	add	r3, sp, #12
 800fa66:	9300      	str	r3, [sp, #0]
 800fa68:	462a      	mov	r2, r5
 800fa6a:	4b0e      	ldr	r3, [pc, #56]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa6c:	a904      	add	r1, sp, #16
 800fa6e:	4638      	mov	r0, r7
 800fa70:	f3af 8000 	nop.w
 800fa74:	1c42      	adds	r2, r0, #1
 800fa76:	4606      	mov	r6, r0
 800fa78:	d1d6      	bne.n	800fa28 <_svfiprintf_r+0x174>
 800fa7a:	89ab      	ldrh	r3, [r5, #12]
 800fa7c:	065b      	lsls	r3, r3, #25
 800fa7e:	f53f af2d 	bmi.w	800f8dc <_svfiprintf_r+0x28>
 800fa82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fa84:	e72c      	b.n	800f8e0 <_svfiprintf_r+0x2c>
 800fa86:	ab03      	add	r3, sp, #12
 800fa88:	9300      	str	r3, [sp, #0]
 800fa8a:	462a      	mov	r2, r5
 800fa8c:	4b05      	ldr	r3, [pc, #20]	@ (800faa4 <_svfiprintf_r+0x1f0>)
 800fa8e:	a904      	add	r1, sp, #16
 800fa90:	4638      	mov	r0, r7
 800fa92:	f000 f879 	bl	800fb88 <_printf_i>
 800fa96:	e7ed      	b.n	800fa74 <_svfiprintf_r+0x1c0>
 800fa98:	08017a3d 	.word	0x08017a3d
 800fa9c:	08017a47 	.word	0x08017a47
 800faa0:	00000000 	.word	0x00000000
 800faa4:	0800f7fd 	.word	0x0800f7fd
 800faa8:	08017a43 	.word	0x08017a43

0800faac <_printf_common>:
 800faac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fab0:	4616      	mov	r6, r2
 800fab2:	4698      	mov	r8, r3
 800fab4:	688a      	ldr	r2, [r1, #8]
 800fab6:	690b      	ldr	r3, [r1, #16]
 800fab8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800fabc:	4293      	cmp	r3, r2
 800fabe:	bfb8      	it	lt
 800fac0:	4613      	movlt	r3, r2
 800fac2:	6033      	str	r3, [r6, #0]
 800fac4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fac8:	4607      	mov	r7, r0
 800faca:	460c      	mov	r4, r1
 800facc:	b10a      	cbz	r2, 800fad2 <_printf_common+0x26>
 800face:	3301      	adds	r3, #1
 800fad0:	6033      	str	r3, [r6, #0]
 800fad2:	6823      	ldr	r3, [r4, #0]
 800fad4:	0699      	lsls	r1, r3, #26
 800fad6:	bf42      	ittt	mi
 800fad8:	6833      	ldrmi	r3, [r6, #0]
 800fada:	3302      	addmi	r3, #2
 800fadc:	6033      	strmi	r3, [r6, #0]
 800fade:	6825      	ldr	r5, [r4, #0]
 800fae0:	f015 0506 	ands.w	r5, r5, #6
 800fae4:	d106      	bne.n	800faf4 <_printf_common+0x48>
 800fae6:	f104 0a19 	add.w	sl, r4, #25
 800faea:	68e3      	ldr	r3, [r4, #12]
 800faec:	6832      	ldr	r2, [r6, #0]
 800faee:	1a9b      	subs	r3, r3, r2
 800faf0:	42ab      	cmp	r3, r5
 800faf2:	dc26      	bgt.n	800fb42 <_printf_common+0x96>
 800faf4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800faf8:	6822      	ldr	r2, [r4, #0]
 800fafa:	3b00      	subs	r3, #0
 800fafc:	bf18      	it	ne
 800fafe:	2301      	movne	r3, #1
 800fb00:	0692      	lsls	r2, r2, #26
 800fb02:	d42b      	bmi.n	800fb5c <_printf_common+0xb0>
 800fb04:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fb08:	4641      	mov	r1, r8
 800fb0a:	4638      	mov	r0, r7
 800fb0c:	47c8      	blx	r9
 800fb0e:	3001      	adds	r0, #1
 800fb10:	d01e      	beq.n	800fb50 <_printf_common+0xa4>
 800fb12:	6823      	ldr	r3, [r4, #0]
 800fb14:	6922      	ldr	r2, [r4, #16]
 800fb16:	f003 0306 	and.w	r3, r3, #6
 800fb1a:	2b04      	cmp	r3, #4
 800fb1c:	bf02      	ittt	eq
 800fb1e:	68e5      	ldreq	r5, [r4, #12]
 800fb20:	6833      	ldreq	r3, [r6, #0]
 800fb22:	1aed      	subeq	r5, r5, r3
 800fb24:	68a3      	ldr	r3, [r4, #8]
 800fb26:	bf0c      	ite	eq
 800fb28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fb2c:	2500      	movne	r5, #0
 800fb2e:	4293      	cmp	r3, r2
 800fb30:	bfc4      	itt	gt
 800fb32:	1a9b      	subgt	r3, r3, r2
 800fb34:	18ed      	addgt	r5, r5, r3
 800fb36:	2600      	movs	r6, #0
 800fb38:	341a      	adds	r4, #26
 800fb3a:	42b5      	cmp	r5, r6
 800fb3c:	d11a      	bne.n	800fb74 <_printf_common+0xc8>
 800fb3e:	2000      	movs	r0, #0
 800fb40:	e008      	b.n	800fb54 <_printf_common+0xa8>
 800fb42:	2301      	movs	r3, #1
 800fb44:	4652      	mov	r2, sl
 800fb46:	4641      	mov	r1, r8
 800fb48:	4638      	mov	r0, r7
 800fb4a:	47c8      	blx	r9
 800fb4c:	3001      	adds	r0, #1
 800fb4e:	d103      	bne.n	800fb58 <_printf_common+0xac>
 800fb50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb58:	3501      	adds	r5, #1
 800fb5a:	e7c6      	b.n	800faea <_printf_common+0x3e>
 800fb5c:	18e1      	adds	r1, r4, r3
 800fb5e:	1c5a      	adds	r2, r3, #1
 800fb60:	2030      	movs	r0, #48	@ 0x30
 800fb62:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fb66:	4422      	add	r2, r4
 800fb68:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fb6c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fb70:	3302      	adds	r3, #2
 800fb72:	e7c7      	b.n	800fb04 <_printf_common+0x58>
 800fb74:	2301      	movs	r3, #1
 800fb76:	4622      	mov	r2, r4
 800fb78:	4641      	mov	r1, r8
 800fb7a:	4638      	mov	r0, r7
 800fb7c:	47c8      	blx	r9
 800fb7e:	3001      	adds	r0, #1
 800fb80:	d0e6      	beq.n	800fb50 <_printf_common+0xa4>
 800fb82:	3601      	adds	r6, #1
 800fb84:	e7d9      	b.n	800fb3a <_printf_common+0x8e>
	...

0800fb88 <_printf_i>:
 800fb88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fb8c:	7e0f      	ldrb	r7, [r1, #24]
 800fb8e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fb90:	2f78      	cmp	r7, #120	@ 0x78
 800fb92:	4691      	mov	r9, r2
 800fb94:	4680      	mov	r8, r0
 800fb96:	460c      	mov	r4, r1
 800fb98:	469a      	mov	sl, r3
 800fb9a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fb9e:	d807      	bhi.n	800fbb0 <_printf_i+0x28>
 800fba0:	2f62      	cmp	r7, #98	@ 0x62
 800fba2:	d80a      	bhi.n	800fbba <_printf_i+0x32>
 800fba4:	2f00      	cmp	r7, #0
 800fba6:	f000 80d1 	beq.w	800fd4c <_printf_i+0x1c4>
 800fbaa:	2f58      	cmp	r7, #88	@ 0x58
 800fbac:	f000 80b8 	beq.w	800fd20 <_printf_i+0x198>
 800fbb0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fbb4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fbb8:	e03a      	b.n	800fc30 <_printf_i+0xa8>
 800fbba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fbbe:	2b15      	cmp	r3, #21
 800fbc0:	d8f6      	bhi.n	800fbb0 <_printf_i+0x28>
 800fbc2:	a101      	add	r1, pc, #4	@ (adr r1, 800fbc8 <_printf_i+0x40>)
 800fbc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800fbc8:	0800fc21 	.word	0x0800fc21
 800fbcc:	0800fc35 	.word	0x0800fc35
 800fbd0:	0800fbb1 	.word	0x0800fbb1
 800fbd4:	0800fbb1 	.word	0x0800fbb1
 800fbd8:	0800fbb1 	.word	0x0800fbb1
 800fbdc:	0800fbb1 	.word	0x0800fbb1
 800fbe0:	0800fc35 	.word	0x0800fc35
 800fbe4:	0800fbb1 	.word	0x0800fbb1
 800fbe8:	0800fbb1 	.word	0x0800fbb1
 800fbec:	0800fbb1 	.word	0x0800fbb1
 800fbf0:	0800fbb1 	.word	0x0800fbb1
 800fbf4:	0800fd33 	.word	0x0800fd33
 800fbf8:	0800fc5f 	.word	0x0800fc5f
 800fbfc:	0800fced 	.word	0x0800fced
 800fc00:	0800fbb1 	.word	0x0800fbb1
 800fc04:	0800fbb1 	.word	0x0800fbb1
 800fc08:	0800fd55 	.word	0x0800fd55
 800fc0c:	0800fbb1 	.word	0x0800fbb1
 800fc10:	0800fc5f 	.word	0x0800fc5f
 800fc14:	0800fbb1 	.word	0x0800fbb1
 800fc18:	0800fbb1 	.word	0x0800fbb1
 800fc1c:	0800fcf5 	.word	0x0800fcf5
 800fc20:	6833      	ldr	r3, [r6, #0]
 800fc22:	1d1a      	adds	r2, r3, #4
 800fc24:	681b      	ldr	r3, [r3, #0]
 800fc26:	6032      	str	r2, [r6, #0]
 800fc28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fc2c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fc30:	2301      	movs	r3, #1
 800fc32:	e09c      	b.n	800fd6e <_printf_i+0x1e6>
 800fc34:	6833      	ldr	r3, [r6, #0]
 800fc36:	6820      	ldr	r0, [r4, #0]
 800fc38:	1d19      	adds	r1, r3, #4
 800fc3a:	6031      	str	r1, [r6, #0]
 800fc3c:	0606      	lsls	r6, r0, #24
 800fc3e:	d501      	bpl.n	800fc44 <_printf_i+0xbc>
 800fc40:	681d      	ldr	r5, [r3, #0]
 800fc42:	e003      	b.n	800fc4c <_printf_i+0xc4>
 800fc44:	0645      	lsls	r5, r0, #25
 800fc46:	d5fb      	bpl.n	800fc40 <_printf_i+0xb8>
 800fc48:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fc4c:	2d00      	cmp	r5, #0
 800fc4e:	da03      	bge.n	800fc58 <_printf_i+0xd0>
 800fc50:	232d      	movs	r3, #45	@ 0x2d
 800fc52:	426d      	negs	r5, r5
 800fc54:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc58:	4858      	ldr	r0, [pc, #352]	@ (800fdbc <_printf_i+0x234>)
 800fc5a:	230a      	movs	r3, #10
 800fc5c:	e011      	b.n	800fc82 <_printf_i+0xfa>
 800fc5e:	6821      	ldr	r1, [r4, #0]
 800fc60:	6833      	ldr	r3, [r6, #0]
 800fc62:	0608      	lsls	r0, r1, #24
 800fc64:	f853 5b04 	ldr.w	r5, [r3], #4
 800fc68:	d402      	bmi.n	800fc70 <_printf_i+0xe8>
 800fc6a:	0649      	lsls	r1, r1, #25
 800fc6c:	bf48      	it	mi
 800fc6e:	b2ad      	uxthmi	r5, r5
 800fc70:	2f6f      	cmp	r7, #111	@ 0x6f
 800fc72:	4852      	ldr	r0, [pc, #328]	@ (800fdbc <_printf_i+0x234>)
 800fc74:	6033      	str	r3, [r6, #0]
 800fc76:	bf14      	ite	ne
 800fc78:	230a      	movne	r3, #10
 800fc7a:	2308      	moveq	r3, #8
 800fc7c:	2100      	movs	r1, #0
 800fc7e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fc82:	6866      	ldr	r6, [r4, #4]
 800fc84:	60a6      	str	r6, [r4, #8]
 800fc86:	2e00      	cmp	r6, #0
 800fc88:	db05      	blt.n	800fc96 <_printf_i+0x10e>
 800fc8a:	6821      	ldr	r1, [r4, #0]
 800fc8c:	432e      	orrs	r6, r5
 800fc8e:	f021 0104 	bic.w	r1, r1, #4
 800fc92:	6021      	str	r1, [r4, #0]
 800fc94:	d04b      	beq.n	800fd2e <_printf_i+0x1a6>
 800fc96:	4616      	mov	r6, r2
 800fc98:	fbb5 f1f3 	udiv	r1, r5, r3
 800fc9c:	fb03 5711 	mls	r7, r3, r1, r5
 800fca0:	5dc7      	ldrb	r7, [r0, r7]
 800fca2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fca6:	462f      	mov	r7, r5
 800fca8:	42bb      	cmp	r3, r7
 800fcaa:	460d      	mov	r5, r1
 800fcac:	d9f4      	bls.n	800fc98 <_printf_i+0x110>
 800fcae:	2b08      	cmp	r3, #8
 800fcb0:	d10b      	bne.n	800fcca <_printf_i+0x142>
 800fcb2:	6823      	ldr	r3, [r4, #0]
 800fcb4:	07df      	lsls	r7, r3, #31
 800fcb6:	d508      	bpl.n	800fcca <_printf_i+0x142>
 800fcb8:	6923      	ldr	r3, [r4, #16]
 800fcba:	6861      	ldr	r1, [r4, #4]
 800fcbc:	4299      	cmp	r1, r3
 800fcbe:	bfde      	ittt	le
 800fcc0:	2330      	movle	r3, #48	@ 0x30
 800fcc2:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fcc6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fcca:	1b92      	subs	r2, r2, r6
 800fccc:	6122      	str	r2, [r4, #16]
 800fcce:	f8cd a000 	str.w	sl, [sp]
 800fcd2:	464b      	mov	r3, r9
 800fcd4:	aa03      	add	r2, sp, #12
 800fcd6:	4621      	mov	r1, r4
 800fcd8:	4640      	mov	r0, r8
 800fcda:	f7ff fee7 	bl	800faac <_printf_common>
 800fcde:	3001      	adds	r0, #1
 800fce0:	d14a      	bne.n	800fd78 <_printf_i+0x1f0>
 800fce2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fce6:	b004      	add	sp, #16
 800fce8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fcec:	6823      	ldr	r3, [r4, #0]
 800fcee:	f043 0320 	orr.w	r3, r3, #32
 800fcf2:	6023      	str	r3, [r4, #0]
 800fcf4:	4832      	ldr	r0, [pc, #200]	@ (800fdc0 <_printf_i+0x238>)
 800fcf6:	2778      	movs	r7, #120	@ 0x78
 800fcf8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fcfc:	6823      	ldr	r3, [r4, #0]
 800fcfe:	6831      	ldr	r1, [r6, #0]
 800fd00:	061f      	lsls	r7, r3, #24
 800fd02:	f851 5b04 	ldr.w	r5, [r1], #4
 800fd06:	d402      	bmi.n	800fd0e <_printf_i+0x186>
 800fd08:	065f      	lsls	r7, r3, #25
 800fd0a:	bf48      	it	mi
 800fd0c:	b2ad      	uxthmi	r5, r5
 800fd0e:	6031      	str	r1, [r6, #0]
 800fd10:	07d9      	lsls	r1, r3, #31
 800fd12:	bf44      	itt	mi
 800fd14:	f043 0320 	orrmi.w	r3, r3, #32
 800fd18:	6023      	strmi	r3, [r4, #0]
 800fd1a:	b11d      	cbz	r5, 800fd24 <_printf_i+0x19c>
 800fd1c:	2310      	movs	r3, #16
 800fd1e:	e7ad      	b.n	800fc7c <_printf_i+0xf4>
 800fd20:	4826      	ldr	r0, [pc, #152]	@ (800fdbc <_printf_i+0x234>)
 800fd22:	e7e9      	b.n	800fcf8 <_printf_i+0x170>
 800fd24:	6823      	ldr	r3, [r4, #0]
 800fd26:	f023 0320 	bic.w	r3, r3, #32
 800fd2a:	6023      	str	r3, [r4, #0]
 800fd2c:	e7f6      	b.n	800fd1c <_printf_i+0x194>
 800fd2e:	4616      	mov	r6, r2
 800fd30:	e7bd      	b.n	800fcae <_printf_i+0x126>
 800fd32:	6833      	ldr	r3, [r6, #0]
 800fd34:	6825      	ldr	r5, [r4, #0]
 800fd36:	6961      	ldr	r1, [r4, #20]
 800fd38:	1d18      	adds	r0, r3, #4
 800fd3a:	6030      	str	r0, [r6, #0]
 800fd3c:	062e      	lsls	r6, r5, #24
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	d501      	bpl.n	800fd46 <_printf_i+0x1be>
 800fd42:	6019      	str	r1, [r3, #0]
 800fd44:	e002      	b.n	800fd4c <_printf_i+0x1c4>
 800fd46:	0668      	lsls	r0, r5, #25
 800fd48:	d5fb      	bpl.n	800fd42 <_printf_i+0x1ba>
 800fd4a:	8019      	strh	r1, [r3, #0]
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	6123      	str	r3, [r4, #16]
 800fd50:	4616      	mov	r6, r2
 800fd52:	e7bc      	b.n	800fcce <_printf_i+0x146>
 800fd54:	6833      	ldr	r3, [r6, #0]
 800fd56:	1d1a      	adds	r2, r3, #4
 800fd58:	6032      	str	r2, [r6, #0]
 800fd5a:	681e      	ldr	r6, [r3, #0]
 800fd5c:	6862      	ldr	r2, [r4, #4]
 800fd5e:	2100      	movs	r1, #0
 800fd60:	4630      	mov	r0, r6
 800fd62:	f7f0 fa45 	bl	80001f0 <memchr>
 800fd66:	b108      	cbz	r0, 800fd6c <_printf_i+0x1e4>
 800fd68:	1b80      	subs	r0, r0, r6
 800fd6a:	6060      	str	r0, [r4, #4]
 800fd6c:	6863      	ldr	r3, [r4, #4]
 800fd6e:	6123      	str	r3, [r4, #16]
 800fd70:	2300      	movs	r3, #0
 800fd72:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fd76:	e7aa      	b.n	800fcce <_printf_i+0x146>
 800fd78:	6923      	ldr	r3, [r4, #16]
 800fd7a:	4632      	mov	r2, r6
 800fd7c:	4649      	mov	r1, r9
 800fd7e:	4640      	mov	r0, r8
 800fd80:	47d0      	blx	sl
 800fd82:	3001      	adds	r0, #1
 800fd84:	d0ad      	beq.n	800fce2 <_printf_i+0x15a>
 800fd86:	6823      	ldr	r3, [r4, #0]
 800fd88:	079b      	lsls	r3, r3, #30
 800fd8a:	d413      	bmi.n	800fdb4 <_printf_i+0x22c>
 800fd8c:	68e0      	ldr	r0, [r4, #12]
 800fd8e:	9b03      	ldr	r3, [sp, #12]
 800fd90:	4298      	cmp	r0, r3
 800fd92:	bfb8      	it	lt
 800fd94:	4618      	movlt	r0, r3
 800fd96:	e7a6      	b.n	800fce6 <_printf_i+0x15e>
 800fd98:	2301      	movs	r3, #1
 800fd9a:	4632      	mov	r2, r6
 800fd9c:	4649      	mov	r1, r9
 800fd9e:	4640      	mov	r0, r8
 800fda0:	47d0      	blx	sl
 800fda2:	3001      	adds	r0, #1
 800fda4:	d09d      	beq.n	800fce2 <_printf_i+0x15a>
 800fda6:	3501      	adds	r5, #1
 800fda8:	68e3      	ldr	r3, [r4, #12]
 800fdaa:	9903      	ldr	r1, [sp, #12]
 800fdac:	1a5b      	subs	r3, r3, r1
 800fdae:	42ab      	cmp	r3, r5
 800fdb0:	dcf2      	bgt.n	800fd98 <_printf_i+0x210>
 800fdb2:	e7eb      	b.n	800fd8c <_printf_i+0x204>
 800fdb4:	2500      	movs	r5, #0
 800fdb6:	f104 0619 	add.w	r6, r4, #25
 800fdba:	e7f5      	b.n	800fda8 <_printf_i+0x220>
 800fdbc:	08017a4e 	.word	0x08017a4e
 800fdc0:	08017a5f 	.word	0x08017a5f

0800fdc4 <memmove>:
 800fdc4:	4288      	cmp	r0, r1
 800fdc6:	b510      	push	{r4, lr}
 800fdc8:	eb01 0402 	add.w	r4, r1, r2
 800fdcc:	d902      	bls.n	800fdd4 <memmove+0x10>
 800fdce:	4284      	cmp	r4, r0
 800fdd0:	4623      	mov	r3, r4
 800fdd2:	d807      	bhi.n	800fde4 <memmove+0x20>
 800fdd4:	1e43      	subs	r3, r0, #1
 800fdd6:	42a1      	cmp	r1, r4
 800fdd8:	d008      	beq.n	800fdec <memmove+0x28>
 800fdda:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fdde:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fde2:	e7f8      	b.n	800fdd6 <memmove+0x12>
 800fde4:	4402      	add	r2, r0
 800fde6:	4601      	mov	r1, r0
 800fde8:	428a      	cmp	r2, r1
 800fdea:	d100      	bne.n	800fdee <memmove+0x2a>
 800fdec:	bd10      	pop	{r4, pc}
 800fdee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fdf2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fdf6:	e7f7      	b.n	800fde8 <memmove+0x24>

0800fdf8 <_realloc_r>:
 800fdf8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fdfc:	4607      	mov	r7, r0
 800fdfe:	4614      	mov	r4, r2
 800fe00:	460d      	mov	r5, r1
 800fe02:	b921      	cbnz	r1, 800fe0e <_realloc_r+0x16>
 800fe04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fe08:	4611      	mov	r1, r2
 800fe0a:	f7ff bae7 	b.w	800f3dc <_malloc_r>
 800fe0e:	b92a      	cbnz	r2, 800fe1c <_realloc_r+0x24>
 800fe10:	f7ff fcaa 	bl	800f768 <_free_r>
 800fe14:	4625      	mov	r5, r4
 800fe16:	4628      	mov	r0, r5
 800fe18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fe1c:	f000 f81a 	bl	800fe54 <_malloc_usable_size_r>
 800fe20:	4284      	cmp	r4, r0
 800fe22:	4606      	mov	r6, r0
 800fe24:	d802      	bhi.n	800fe2c <_realloc_r+0x34>
 800fe26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fe2a:	d8f4      	bhi.n	800fe16 <_realloc_r+0x1e>
 800fe2c:	4621      	mov	r1, r4
 800fe2e:	4638      	mov	r0, r7
 800fe30:	f7ff fad4 	bl	800f3dc <_malloc_r>
 800fe34:	4680      	mov	r8, r0
 800fe36:	b908      	cbnz	r0, 800fe3c <_realloc_r+0x44>
 800fe38:	4645      	mov	r5, r8
 800fe3a:	e7ec      	b.n	800fe16 <_realloc_r+0x1e>
 800fe3c:	42b4      	cmp	r4, r6
 800fe3e:	4622      	mov	r2, r4
 800fe40:	4629      	mov	r1, r5
 800fe42:	bf28      	it	cs
 800fe44:	4632      	movcs	r2, r6
 800fe46:	f7ff fc81 	bl	800f74c <memcpy>
 800fe4a:	4629      	mov	r1, r5
 800fe4c:	4638      	mov	r0, r7
 800fe4e:	f7ff fc8b 	bl	800f768 <_free_r>
 800fe52:	e7f1      	b.n	800fe38 <_realloc_r+0x40>

0800fe54 <_malloc_usable_size_r>:
 800fe54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe58:	1f18      	subs	r0, r3, #4
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	bfbc      	itt	lt
 800fe5e:	580b      	ldrlt	r3, [r1, r0]
 800fe60:	18c0      	addlt	r0, r0, r3
 800fe62:	4770      	bx	lr

0800fe64 <_init>:
 800fe64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe66:	bf00      	nop
 800fe68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe6a:	bc08      	pop	{r3}
 800fe6c:	469e      	mov	lr, r3
 800fe6e:	4770      	bx	lr

0800fe70 <_fini>:
 800fe70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fe72:	bf00      	nop
 800fe74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fe76:	bc08      	pop	{r3}
 800fe78:	469e      	mov	lr, r3
 800fe7a:	4770      	bx	lr
