
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f1b0  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ca0  0800f350  0800f350  00010350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08016ff0  08016ff0  0001918c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08016ff0  08016ff0  00017ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08016ff8  08016ff8  0001918c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08016ff8  08016ff8  00017ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017004  08017004  00018004  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000018c  20000000  08017008  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017fc  2000018c  08017194  0001918c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001988  08017194  00019988  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001918c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024e4b  00000000  00000000  000191bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006178  00000000  00000000  0003e007  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001dc0  00000000  00000000  00044180  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001698  00000000  00000000  00045f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000209dc  00000000  00000000  000475d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025f91  00000000  00000000  00067fb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009b050  00000000  00000000  0008df45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128f95  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000081d0  00000000  00000000  00128fd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001311a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800f338 	.word	0x0800f338

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800f338 	.word	0x0800f338

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_DMA_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f004 fafd 	bl	8004bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f004 fb16 	bl	8004c36 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	203b      	movs	r0, #59	@ 0x3b
 8000610:	f004 faf5 	bl	8004bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000614:	203b      	movs	r0, #59	@ 0x3b
 8000616:	f004 fb0e 	bl	8004c36 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SELECT+0x18>)
 8000632:	f005 f831 	bl	8005698 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f004 f9e2 	bl	8004a00 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <DESELECT+0x18>)
 800064e:	f005 f823 	bl	8005698 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f004 f9d4 	bl	8004a00 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SPI_TxByte+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1f8      	bne.n	800066c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SPI_TxByte+0x30>)
 8000682:	f006 ff46 	bl	8007512 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000220 	.word	0x20000220

08000694 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d1f8      	bne.n	80006a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006b8:	f006 ff2b 	bl	8007512 <HAL_SPI_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000220 	.word	0x20000220

080006c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80006ce:	23ff      	movs	r3, #255	@ 0xff
 80006d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <SPI_RxByte+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006e2:	1dba      	adds	r2, r7, #6
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <SPI_RxByte+0x34>)
 80006ee:	f007 f96d 	bl	80079cc <HAL_SPI_TransmitReceive>

	return data;
 80006f2:	79bb      	ldrb	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000220 	.word	0x20000220

08000700 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000708:	f7ff ffde 	bl	80006c8 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <SD_ReadyWait+0x30>)
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800072a:	f7ff ffcd 	bl	80006c8 <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d003      	beq.n	8000740 <SD_ReadyWait+0x24>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SD_ReadyWait+0x30>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_ReadyWait+0xe>

	return res;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001aa 	.word	0x200001aa

08000750 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000756:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800075a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800075c:	f7ff ff72 	bl	8000644 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	e005      	b.n	8000772 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	f7ff ff7a 	bl	8000660 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddf6      	ble.n	8000766 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000778:	f7ff ff56 	bl	8000628 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000790:	2395      	movs	r3, #149	@ 0x95
 8000792:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000794:	463b      	mov	r3, r7
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff7b 	bl	8000694 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800079e:	e002      	b.n	80007a6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007a6:	f7ff ff8f 	bl	80006c8 <SPI_RxByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <SD_PowerOn+0x66>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80007b6:	f7ff ff45 	bl	8000644 <DESELECT>
	SPI_TxByte(0XFF);
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	f7ff ff50 	bl	8000660 <SPI_TxByte>

	PowerFlag = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SD_PowerOn+0x80>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001ad 	.word	0x200001ad

080007d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <SD_PowerOff+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200001ad 	.word	0x200001ad

080007ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <SD_CheckPower+0x14>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200001ad 	.word	0x200001ad

08000804 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <SD_RxDataBlock+0x58>)
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000814:	f7ff ff58 	bl	80006c8 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d103      	bne.n	800082a <SD_RxDataBlock+0x26>
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SD_RxDataBlock+0x58>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bfe      	cmp	r3, #254	@ 0xfe
 800082e:	d001      	beq.n	8000834 <SD_RxDataBlock+0x30>
 8000830:	2300      	movs	r3, #0
 8000832:	e00f      	b.n	8000854 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff60 	bl	8000700 <SPI_RxBytePtr>
	} while(len--);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f4      	bne.n	8000834 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800084a:	f7ff ff3d 	bl	80006c8 <SPI_RxByte>
	SPI_RxByte();
 800084e:	f7ff ff3b 	bl	80006c8 <SPI_RxByte>

	return TRUE;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a8 	.word	0x200001a8

08000860 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000870:	f7ff ff54 	bl	800071c <SD_ReadyWait>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d001      	beq.n	800087e <SD_TxDataBlock+0x1e>
 800087a:	2300      	movs	r3, #0
 800087c:	e02f      	b.n	80008de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feed 	bl	8000660 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2bfd      	cmp	r3, #253	@ 0xfd
 800088a:	d020      	beq.n	80008ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff feff 	bl	8000694 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000896:	f7ff ff17 	bl	80006c8 <SPI_RxByte>
		SPI_RxByte();
 800089a:	f7ff ff15 	bl	80006c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800089e:	e00b      	b.n	80008b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008a0:	f7ff ff12 	bl	80006c8 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d006      	beq.n	80008c0 <SD_TxDataBlock+0x60>
			i++;
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d9f0      	bls.n	80008a0 <SD_TxDataBlock+0x40>
 80008be:	e000      	b.n	80008c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80008c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80008c2:	bf00      	nop
 80008c4:	f7ff ff00 	bl	80006c8 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d101      	bne.n	80008dc <SD_TxDataBlock+0x7c>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <SD_TxDataBlock+0x7e>

	return FALSE;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	6039      	str	r1, [r7, #0]
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f2:	f7ff ff13 	bl	800071c <SD_ReadyWait>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d001      	beq.n	8000900 <SD_SendCmd+0x1a>
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	e042      	b.n	8000986 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feac 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea6 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fea0 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b40      	cmp	r3, #64	@ 0x40
 800093a:	d102      	bne.n	8000942 <SD_SendCmd+0x5c>
 800093c:	2395      	movs	r3, #149	@ 0x95
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e007      	b.n	8000952 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d102      	bne.n	800094e <SD_SendCmd+0x68>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <SD_SendCmd+0x6c>
	else crc = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe83 	bl	8000660 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b4c      	cmp	r3, #76	@ 0x4c
 800095e:	d101      	bne.n	8000964 <SD_SendCmd+0x7e>
 8000960:	f7ff feb2 	bl	80006c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000968:	f7ff feae 	bl	80006c8 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000970:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da05      	bge.n	8000984 <SD_SendCmd+0x9e>
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	3b01      	subs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f1      	bne.n	8000968 <SD_SendCmd+0x82>

	return res;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d1      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0c6      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80009ba:	f7ff fec9 	bl	8000750 <SD_PowerOn>

	/* slave select */
	SELECT();
 80009be:	f7ff fe33 	bl	8000628 <SELECT>

	/* check disk type */
	type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8c 	bl	80008e6 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a1 	bne.w	8000b18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80009d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff7f 	bl	80008e6 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d155      	bne.n	8000a9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe67 	bl	80006c8 <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d17e      	bne.n	8000b18 <SD_disk_initialize+0x188>
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000a1e:	d17b      	bne.n	8000b18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	@ 0x77
 8000a24:	f7ff ff5f 	bl	80008e6 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d807      	bhi.n	8000a3e <SD_disk_initialize+0xae>
 8000a2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff57 	bl	80008e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a3e:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ec      	bne.n	8000a20 <SD_disk_initialize+0x90>
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f7ff ff46 	bl	80008e6 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d15b      	bne.n	8000b18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	f7ff fe2e 	bl	80006c8 <SPI_RxByte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f104 0310 	add.w	r3, r4, #16
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d9ef      	bls.n	8000a66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x104>
 8000a90:	230c      	movs	r3, #12
 8000a92:	e000      	b.n	8000a96 <SD_disk_initialize+0x106>
 8000a94:	2304      	movs	r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
 8000a98:	e03e      	b.n	8000b18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2077      	movs	r0, #119	@ 0x77
 8000a9e:	f7ff ff22 	bl	80008e6 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d808      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2069      	movs	r0, #105	@ 0x69
 8000aac:	f7ff ff1b 	bl	80008e6 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d801      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e000      	b.n	8000abc <SD_disk_initialize+0x12c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d10e      	bne.n	8000ae2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2077      	movs	r0, #119	@ 0x77
 8000ac8:	f7ff ff0d 	bl	80008e6 <SD_SendCmd>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d80e      	bhi.n	8000af0 <SD_disk_initialize+0x160>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2069      	movs	r0, #105	@ 0x69
 8000ad6:	f7ff ff06 	bl	80008e6 <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <SD_disk_initialize+0x160>
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2041      	movs	r0, #65	@ 0x41
 8000ae6:	f7ff fefe 	bl	80008e6 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e2      	bne.n	8000abe <SD_disk_initialize+0x12e>
 8000af8:	e000      	b.n	8000afc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000afa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <SD_disk_initialize+0x184>
 8000b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b08:	2050      	movs	r0, #80	@ 0x50
 8000b0a:	f7ff feec 	bl	80008e6 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SD_disk_initialize+0x1c8>)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b1e:	f7ff fd91 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000b22:	f7ff fdd1 	bl	80006c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b3e:	f7ff fe49 	bl	80007d4 <SD_PowerOff>
	}

	return Stat;
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001a8 	.word	0x200001a8
 8000b58:	200001ac 	.word	0x200001ac

08000b5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_status+0x14>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <SD_disk_status+0x1a>
	return Stat;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SD_disk_status+0x28>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x1c>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <SD_disk_read+0x20>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e051      	b.n	8000c4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SD_disk_read+0xcc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_read+0x32>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e048      	b.n	8000c4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <SD_disk_read+0xd0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <SD_disk_read+0x44>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bcc:	f7ff fd2c 	bl	8000628 <SELECT>

	if (count == 1)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f7ff fe84 	bl	80008e6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <SD_disk_read+0xb0>
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fe0b 	bl	8000804 <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <SD_disk_read+0xb0>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e01e      	b.n	8000c38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2052      	movs	r0, #82	@ 0x52
 8000bfe:	f7ff fe72 	bl	80008e6 <SD_SendCmd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdf9 	bl	8000804 <SD_RxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <SD_disk_read+0xa6>
				buff += 512;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ed      	bne.n	8000c08 <SD_disk_read+0x80>
 8000c2c:	e000      	b.n	8000c30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	204c      	movs	r0, #76	@ 0x4c
 8000c34:	f7ff fe57 	bl	80008e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c38:	f7ff fd04 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000c3c:	f7ff fd44 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	200001ac 	.word	0x200001ac

08000c5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <SD_disk_write+0x1c>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <SD_disk_write+0x20>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e06b      	b.n	8000d54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <SD_disk_write+0x100>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SD_disk_write+0x32>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e062      	b.n	8000d54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <SD_disk_write+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SD_disk_write+0x44>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e059      	b.n	8000d54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SD_disk_write+0x104>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <SD_disk_write+0x56>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cb2:	f7ff fcb9 	bl	8000628 <SELECT>

	if (count == 1)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d110      	bne.n	8000cde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2058      	movs	r0, #88	@ 0x58
 8000cc0:	f7ff fe11 	bl	80008e6 <SD_SendCmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13a      	bne.n	8000d40 <SD_disk_write+0xe4>
 8000cca:	21fe      	movs	r1, #254	@ 0xfe
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fdc7 	bl	8000860 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d033      	beq.n	8000d40 <SD_disk_write+0xe4>
			count = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e030      	b.n	8000d40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <SD_disk_write+0x104>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2077      	movs	r0, #119	@ 0x77
 8000cee:	f7ff fdfa 	bl	80008e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	2057      	movs	r0, #87	@ 0x57
 8000cf6:	f7ff fdf6 	bl	80008e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2059      	movs	r0, #89	@ 0x59
 8000cfe:	f7ff fdf2 	bl	80008e6 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d08:	21fc      	movs	r1, #252	@ 0xfc
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fda8 	bl	8000860 <SD_TxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <SD_disk_write+0xd0>
				buff += 512;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_disk_write+0xac>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d2e:	21fd      	movs	r1, #253	@ 0xfd
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd95 	bl	8000860 <SD_TxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d40:	f7ff fc80 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000d44:	f7ff fcc0 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001ac 	.word	0x200001ac

08000d64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	603a      	str	r2, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_disk_ioctl+0x1e>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e113      	b.n	8000faa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d124      	bne.n	8000dd8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d012      	beq.n	8000dbc <SD_disk_ioctl+0x58>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dc1a      	bgt.n	8000dd0 <SD_disk_ioctl+0x6c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <SD_disk_ioctl+0x40>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d006      	beq.n	8000db0 <SD_disk_ioctl+0x4c>
 8000da2:	e015      	b.n	8000dd0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000da4:	f7ff fd16 	bl	80007d4 <SD_PowerOff>
			res = RES_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e0fa      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000db0:	f7ff fcce 	bl	8000750 <SD_PowerOn>
			res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e0f4      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1c5c      	adds	r4, r3, #1
 8000dc0:	f7ff fd14 	bl	80007ec <SD_CheckPower>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e0ea      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	e0e6      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dd8:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <SD_disk_ioctl+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x86>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0df      	b.n	8000faa <SD_disk_ioctl+0x246>

		SELECT();
 8000dea:	f7ff fc1d 	bl	8000628 <SELECT>

		switch (ctrl)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	f200 80c9 	bhi.w	8000f88 <SD_disk_ioctl+0x224>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <SD_disk_ioctl+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f89 	.word	0x08000f89
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f05 	.word	0x08000f05
 8000e2c:	08000f29 	.word	0x08000f29
 8000e30:	08000f4d 	.word	0x08000f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e34:	2100      	movs	r1, #0
 8000e36:	2049      	movs	r0, #73	@ 0x49
 8000e38:	f7ff fd55 	bl	80008e6 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80a6 	bne.w	8000f90 <SD_disk_ioctl+0x22c>
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcda 	bl	8000804 <SD_RxDataBlock>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10d      	bne.n	8000e7e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e62:	7d7b      	ldrb	r3, [r7, #21]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02d      	b.n	8000eda <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7e:	7c7b      	ldrb	r3, [r7, #17]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0306 	and.w	r3, r3, #6
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7cbb      	ldrb	r3, [r7, #18]
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ecc:	8bfa      	ldrh	r2, [r7, #30]
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	3b09      	subs	r3, #9
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ee0:	e056      	b.n	8000f90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ef0:	e055      	b.n	8000f9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ef2:	f7ff fc13 	bl	800071c <SD_ReadyWait>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2bff      	cmp	r3, #255	@ 0xff
 8000efa:	d14b      	bne.n	8000f94 <SD_disk_ioctl+0x230>
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f02:	e047      	b.n	8000f94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f04:	2100      	movs	r1, #0
 8000f06:	2049      	movs	r0, #73	@ 0x49
 8000f08:	f7ff fced 	bl	80008e6 <SD_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d142      	bne.n	8000f98 <SD_disk_ioctl+0x234>
 8000f12:	2110      	movs	r1, #16
 8000f14:	6a38      	ldr	r0, [r7, #32]
 8000f16:	f7ff fc75 	bl	8000804 <SD_RxDataBlock>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d03b      	beq.n	8000f98 <SD_disk_ioctl+0x234>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f26:	e037      	b.n	8000f98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204a      	movs	r0, #74	@ 0x4a
 8000f2c:	f7ff fcdb 	bl	80008e6 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d132      	bne.n	8000f9c <SD_disk_ioctl+0x238>
 8000f36:	2110      	movs	r1, #16
 8000f38:	6a38      	ldr	r0, [r7, #32]
 8000f3a:	f7ff fc63 	bl	8000804 <SD_RxDataBlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02b      	beq.n	8000f9c <SD_disk_ioctl+0x238>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f4a:	e027      	b.n	8000f9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207a      	movs	r0, #122	@ 0x7a
 8000f50:	f7ff fcc9 	bl	80008e6 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f60:	e00b      	b.n	8000f7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f62:	6a3c      	ldr	r4, [r7, #32]
 8000f64:	1c63      	adds	r3, r4, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	f7ff fbae 	bl	80006c8 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f8e:	e006      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f9c:	bf00      	nop
		}

		DESELECT();
 8000f9e:	f7ff fb51 	bl	8000644 <DESELECT>
		SPI_RxByte();
 8000fa2:	f7ff fb91 	bl	80006c8 <SPI_RxByte>
	}

	return res;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x190>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <MX_GPIO_Init+0x190>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001044:	4841      	ldr	r0, [pc, #260]	@ (800114c <MX_GPIO_Init+0x194>)
 8001046:	f004 fb27 	bl	8005698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4840      	ldr	r0, [pc, #256]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001050:	f004 fb22 	bl	8005698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	213b      	movs	r1, #59	@ 0x3b
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x19c>)
 800105a:	f004 fb1d 	bl	8005698 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x194>)
 8001078:	f004 f98a 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 800107c:	2306      	movs	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4830      	ldr	r0, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001090:	f004 f97e 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <MX_GPIO_Init+0x198>)
 80010ac:	f004 f970 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 80010b0:	233b      	movs	r3, #59	@ 0x3b
 80010b2:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010c8:	f004 f962 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010e4:	f004 f954 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001100:	f004 f946 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_GPIO_Init+0x198>)
 800111c:	f004 f938 	bl	8005390 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f003 fd6a 	bl	8004bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f003 fd83 	bl	8004c36 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f003 fd62 	bl	8004bfe <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f003 fd7b 	bl	8004c36 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

volatile static int buttonpressed = 0;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == button1INT_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x1a>
		buttonpressed = 1;
 800116a:	4b12      	ldr	r3, [pc, #72]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
	} else if (GPIO_Pin == button4INT_Pin) {
		buttonpressed = 4;
	} else {
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
	}
}
 8001170:	e01c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button2INT_Pin) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001178:	d103      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2a>
		buttonpressed = 2;
 800117a:	4b0e      	ldr	r3, [pc, #56]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800117c:	2202      	movs	r2, #2
 800117e:	601a      	str	r2, [r3, #0]
}
 8001180:	e014      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button3INT_Pin ) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001188:	d103      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x3a>
		buttonpressed = 3;
 800118a:	4b0a      	ldr	r3, [pc, #40]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800118c:	2203      	movs	r2, #3
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
	} else if (GPIO_Pin == button4INT_Pin) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001198:	d103      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x4a>
		buttonpressed = 4;
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800119c:	2204      	movs	r2, #4
 800119e:	601a      	str	r2, [r3, #0]
}
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
		USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4804      	ldr	r0, [pc, #16]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x60>)
 80011a8:	f001 f918 	bl	80023dc <USB_Println>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200001b0 	.word	0x200001b0
 80011b8:	0800f350 	.word	0x0800f350

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b5b0      	push	{r4, r5, r7, lr}
 80011be:	f5ad 6dee 	sub.w	sp, sp, #1904	@ 0x770
 80011c2:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c4:	f003 fbaa 	bl	800491c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c8:	f000 fab8 	bl	800173c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011cc:	f7ff fef4 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011d0:	f7ff f9f4 	bl	80005bc <MX_DMA_Init>
  MX_SPI1_Init();
 80011d4:	f000 fdac 	bl	8001d30 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011d8:	f00c fde8 	bl	800ddac <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011dc:	f000 fde0 	bl	8001da0 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011e0:	f000 fff8 	bl	80021d4 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011e4:	f009 fc40 	bl	800aa68 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011e8:	2064      	movs	r0, #100	@ 0x64
 80011ea:	f003 fc09 	bl	8004a00 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011ee:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011f2:	2201      	movs	r2, #1
 80011f4:	49b2      	ldr	r1, [pc, #712]	@ (80014c0 <main+0x304>)
 80011f6:	4618      	mov	r0, r3
 80011f8:	f00c fb4e 	bl	800d898 <f_mount>
 80011fc:	4603      	mov	r3, r0
 80011fe:	f887 375f 	strb.w	r3, [r7, #1887]	@ 0x75f

  initializeMCP2515();
 8001202:	f000 fb0d 	bl	8001820 <initializeMCP2515>
  //setFilters();
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 8001206:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800120a:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 800120e:	4aad      	ldr	r2, [pc, #692]	@ (80014c4 <main+0x308>)
 8001210:	461c      	mov	r4, r3
 8001212:	4615      	mov	r5, r2
 8001214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001216:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001218:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800121a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800121c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001220:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10200};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001224:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001228:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 800122c:	2100      	movs	r1, #0
 800122e:	48a6      	ldr	r0, [pc, #664]	@ (80014c8 <main+0x30c>)
 8001230:	f000 fbbe 	bl	80019b0 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001234:	2300      	movs	r3, #0
 8001236:	9303      	str	r3, [sp, #12]
 8001238:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800123c:	9302      	str	r3, [sp, #8]
 800123e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	2200      	movs	r2, #0
 800124c:	2100      	movs	r1, #0
 800124e:	489e      	ldr	r0, [pc, #632]	@ (80014c8 <main+0x30c>)
 8001250:	f000 fb32 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001254:	2301      	movs	r3, #1
 8001256:	9303      	str	r3, [sp, #12]
 8001258:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800125c:	9302      	str	r3, [sp, #8]
 800125e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001262:	9301      	str	r3, [sp, #4]
 8001264:	2300      	movs	r3, #0
 8001266:	9300      	str	r3, [sp, #0]
 8001268:	2300      	movs	r3, #0
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	4896      	ldr	r0, [pc, #600]	@ (80014c8 <main+0x30c>)
 8001270:	f000 fb22 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001274:	230e      	movs	r3, #14
 8001276:	9303      	str	r3, [sp, #12]
 8001278:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800127c:	9302      	str	r3, [sp, #8]
 800127e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	2300      	movs	r3, #0
 8001286:	9300      	str	r3, [sp, #0]
 8001288:	2300      	movs	r3, #0
 800128a:	2200      	movs	r2, #0
 800128c:	2100      	movs	r1, #0
 800128e:	488e      	ldr	r0, [pc, #568]	@ (80014c8 <main+0x30c>)
 8001290:	f000 fb12 	bl	80018b8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001294:	230f      	movs	r3, #15
 8001296:	9303      	str	r3, [sp, #12]
 8001298:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800129c:	9302      	str	r3, [sp, #8]
 800129e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	2300      	movs	r3, #0
 80012a6:	9300      	str	r3, [sp, #0]
 80012a8:	2300      	movs	r3, #0
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	4886      	ldr	r0, [pc, #536]	@ (80014c8 <main+0x30c>)
 80012b0:	f000 fb02 	bl	80018b8 <setColor>

  resetScreen();
 80012b4:	f001 fdb2 	bl	8002e1c <resetScreen>
  initializeScreen();
 80012b8:	f001 fdce 	bl	8002e58 <initializeScreen>
  if (fresult != FR_OK) {
 80012bc:	f897 375f 	ldrb.w	r3, [r7, #1887]	@ 0x75f
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <main+0x116>
	  USB_Println("There was an error: %d\n", fresult);
 80012c4:	f897 375f 	ldrb.w	r3, [r7, #1887]	@ 0x75f
 80012c8:	4619      	mov	r1, r3
 80012ca:	4880      	ldr	r0, [pc, #512]	@ (80014cc <main+0x310>)
 80012cc:	f001 f886 	bl	80023dc <USB_Println>
 80012d0:	e004      	b.n	80012dc <main+0x120>
  } else {
	  USB_Println("the sdcard is mounted\n");
 80012d2:	487f      	ldr	r0, [pc, #508]	@ (80014d0 <main+0x314>)
 80012d4:	f001 f882 	bl	80023dc <USB_Println>
	  dosplashscene();
 80012d8:	f002 fb70 	bl	80039bc <dosplashscene>
  }
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012dc:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012e0:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80012e4:	2100      	movs	r1, #0
 80012e6:	4878      	ldr	r0, [pc, #480]	@ (80014c8 <main+0x30c>)
 80012e8:	f000 fcba 	bl	8001c60 <startUp>
  HAL_Delay(200);
 80012ec:	20c8      	movs	r0, #200	@ 0xc8
 80012ee:	f003 fb87 	bl	8004a00 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012f2:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80012f6:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 80012fa:	4a76      	ldr	r2, [pc, #472]	@ (80014d4 <main+0x318>)
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	3304      	adds	r3, #4
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 800130a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800130e:	f5a3 63df 	sub.w	r3, r3, #1784	@ 0x6f8
 8001312:	4a70      	ldr	r2, [pc, #448]	@ (80014d4 <main+0x318>)
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	3304      	adds	r3, #4
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]
 800131c:	605a      	str	r2, [r3, #4]
 800131e:	609a      	str	r2, [r3, #8]
 8001320:	60da      	str	r2, [r3, #12]
  char result3[20] = "8";//gear
 8001322:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001326:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 800132a:	2238      	movs	r2, #56	@ 0x38
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	3304      	adds	r3, #4
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 800133a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800133e:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 8001342:	4a64      	ldr	r2, [pc, #400]	@ (80014d4 <main+0x318>)
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	3304      	adds	r3, #4
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  char result5[20] = "null"; //speed
 8001352:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001356:	f2a3 7334 	subw	r3, r3, #1844	@ 0x734
 800135a:	4a5e      	ldr	r2, [pc, #376]	@ (80014d4 <main+0x318>)
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	3304      	adds	r3, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 800136a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800136e:	4618      	mov	r0, r3
 8001370:	f002 fa66 	bl	8003840 <settempdata>
  setgeardata(result3);
 8001374:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fa8d 	bl	8003898 <setgeardata>
  setrpmdata(result);
 800137e:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fa30 	bl	80037e8 <setrpmdata>
  setbattdata(result4);
 8001388:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800138c:	4618      	mov	r0, r3
 800138e:	f002 faad 	bl	80038ec <setbattdata>
  setspeeddata(result5);
 8001392:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001396:	4618      	mov	r0, r3
 8001398:	f002 fad4 	bl	8003944 <setspeeddata>
  domainscreen();
 800139c:	f002 fafe 	bl	800399c <domainscreen>

  struct can_frame frame;
  uint8_t gear = 8;
 80013a0:	2308      	movs	r3, #8
 80013a2:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
  uint8_t isNeutral = 0;
 80013a6:	2300      	movs	r3, #0
 80013a8:	f887 375d 	strb.w	r3, [r7, #1885]	@ 0x75d
  while (1)
  {

	  if (buttonpressed == 3) {
 80013ac:	4b4a      	ldr	r3, [pc, #296]	@ (80014d8 <main+0x31c>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2b03      	cmp	r3, #3
 80013b2:	d114      	bne.n	80013de <main+0x222>
		  frame.can_id = 601;
 80013b4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013b8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013bc:	f240 2259 	movw	r2, #601	@ 0x259
 80013c0:	601a      	str	r2, [r3, #0]
		  sendMessage(&frame);
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fa3c 	bl	8001844 <sendMessage>
		  HAL_Delay(10);
 80013cc:	200a      	movs	r0, #10
 80013ce:	f003 fb17 	bl	8004a00 <HAL_Delay>
		  USB_Println("button3 job in while loop done\n");
 80013d2:	4842      	ldr	r0, [pc, #264]	@ (80014dc <main+0x320>)
 80013d4:	f001 f802 	bl	80023dc <USB_Println>
		  buttonpressed = 0;
 80013d8:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <main+0x31c>)
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
	  }

	  //for (int i = 0; i < 10; i++) {
		  int canresult = readMessage(&frame);
 80013de:	f107 0318 	add.w	r3, r7, #24
 80013e2:	4618      	mov	r0, r3
 80013e4:	f000 fa3e 	bl	8001864 <readMessage>
 80013e8:	f8c7 0758 	str.w	r0, [r7, #1880]	@ 0x758
		  if (canresult == 0) {
 80013ec:	f8d7 3758 	ldr.w	r3, [r7, #1880]	@ 0x758
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1db      	bne.n	80013ac <main+0x1f0>
			  if (frame.can_id == (1520 + 0)) {
 80013f4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80013f8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 8001402:	d12d      	bne.n	8001460 <main+0x2a4>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001404:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001408:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800140c:	7b9b      	ldrb	r3, [r3, #14]
 800140e:	021b      	lsls	r3, r3, #8
 8001410:	b29b      	uxth	r3, r3
 8001412:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8001416:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 800141a:	7bd2      	ldrb	r2, [r2, #15]
 800141c:	4413      	add	r3, r2
 800141e:	f8a7 3756 	strh.w	r3, [r7, #1878]	@ 0x756
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 8001422:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 8001426:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 800142a:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 800142e:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 8001432:	9201      	str	r2, [sp, #4]
 8001434:	9300      	str	r3, [sp, #0]
 8001436:	4603      	mov	r3, r0
 8001438:	460a      	mov	r2, r1
 800143a:	2100      	movs	r1, #0
 800143c:	4822      	ldr	r0, [pc, #136]	@ (80014c8 <main+0x30c>)
 800143e:	f000 fb47 	bl	8001ad0 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 8001442:	f8b7 3756 	ldrh.w	r3, [r7, #1878]	@ 0x756
 8001446:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 800144a:	220a      	movs	r2, #10
 800144c:	4618      	mov	r0, r3
 800144e:	f00d f9fa 	bl	800e846 <itoa>
				  setrpmdata(result);
 8001452:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001456:	4618      	mov	r0, r3
 8001458:	f002 f9c6 	bl	80037e8 <setrpmdata>
				  domainscreen();
 800145c:	f002 fa9e 	bl	800399c <domainscreen>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001460:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001464:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 800146e:	4293      	cmp	r3, r2
 8001470:	d15b      	bne.n	800152a <main+0x36e>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001472:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001476:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 800147a:	7b9b      	ldrb	r3, [r3, #14]
 800147c:	021b      	lsls	r3, r3, #8
 800147e:	b29b      	uxth	r3, r3
 8001480:	f507 62ec 	add.w	r2, r7, #1888	@ 0x760
 8001484:	f5a2 62e9 	sub.w	r2, r2, #1864	@ 0x748
 8001488:	7bd2      	ldrb	r2, [r2, #15]
 800148a:	4413      	add	r3, r2
 800148c:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  if (temp > 2150) {
 8001490:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001494:	f640 0266 	movw	r2, #2150	@ 0x866
 8001498:	4293      	cmp	r3, r2
 800149a:	d921      	bls.n	80014e0 <main+0x324>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800149c:	230f      	movs	r3, #15
 800149e:	9303      	str	r3, [sp, #12]
 80014a0:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014a4:	9302      	str	r3, [sp, #8]
 80014a6:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80014aa:	9301      	str	r3, [sp, #4]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	23ff      	movs	r3, #255	@ 0xff
 80014b2:	2200      	movs	r2, #0
 80014b4:	2100      	movs	r1, #0
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <main+0x30c>)
 80014b8:	f000 f9fe 	bl	80018b8 <setColor>
 80014bc:	e020      	b.n	8001500 <main+0x344>
 80014be:	bf00      	nop
 80014c0:	0800f370 	.word	0x0800f370
 80014c4:	0800f3d0 	.word	0x0800f3d0
 80014c8:	200002e0 	.word	0x200002e0
 80014cc:	0800f374 	.word	0x0800f374
 80014d0:	0800f38c 	.word	0x0800f38c
 80014d4:	6c6c756e 	.word	0x6c6c756e
 80014d8:	200001b0 	.word	0x200001b0
 80014dc:	0800f3a4 	.word	0x0800f3a4
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80014e0:	230f      	movs	r3, #15
 80014e2:	9303      	str	r3, [sp, #12]
 80014e4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80014e8:	9302      	str	r3, [sp, #8]
 80014ea:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80014ee:	9301      	str	r3, [sp, #4]
 80014f0:	2300      	movs	r3, #0
 80014f2:	9300      	str	r3, [sp, #0]
 80014f4:	2300      	movs	r3, #0
 80014f6:	2200      	movs	r2, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	488b      	ldr	r0, [pc, #556]	@ (8001728 <main+0x56c>)
 80014fc:	f000 f9dc 	bl	80018b8 <setColor>
				  }
				  temp /= 10;
 8001500:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001504:	4a89      	ldr	r2, [pc, #548]	@ (800172c <main+0x570>)
 8001506:	fba2 2303 	umull	r2, r3, r2, r3
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(temp, result2, 10);
 8001510:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 8001514:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8001518:	220a      	movs	r2, #10
 800151a:	4618      	mov	r0, r3
 800151c:	f00d f993 	bl	800e846 <itoa>
				  settempdata(result2);
 8001520:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001524:	4618      	mov	r0, r3
 8001526:	f002 f98b 	bl	8003840 <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 800152a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800152e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f240 6211 	movw	r2, #1553	@ 0x611
 8001538:	4293      	cmp	r3, r2
 800153a:	d117      	bne.n	800156c <main+0x3b0>
				  gear = ((uint8_t)frame.data[6]);
 800153c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001540:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001544:	7b9b      	ldrb	r3, [r3, #14]
 8001546:	f887 375e 	strb.w	r3, [r7, #1886]	@ 0x75e
				  if (gear != 0) {
 800154a:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <main+0x3b0>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 8001552:	f897 375e 	ldrb.w	r3, [r7, #1886]	@ 0x75e
 8001556:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 800155a:	220a      	movs	r2, #10
 800155c:	4618      	mov	r0, r3
 800155e:	f00d f972 	bl	800e846 <itoa>
					  setgeardata(result3);
 8001562:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001566:	4618      	mov	r0, r3
 8001568:	f002 f996 	bl	8003898 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 800156c:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001570:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800157a:	4293      	cmp	r3, r2
 800157c:	d155      	bne.n	800162a <main+0x46e>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 800157e:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 8001582:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001586:	7adb      	ldrb	r3, [r3, #11]
 8001588:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  uint8_t batIntPart = battvalue / 10;
 800158c:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 8001590:	4a66      	ldr	r2, [pc, #408]	@ (800172c <main+0x570>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	08db      	lsrs	r3, r3, #3
 8001598:	f887 374e 	strb.w	r3, [r7, #1870]	@ 0x74e
				  uint8_t batDecimalPart = battvalue % 10;
 800159c:	f897 274f 	ldrb.w	r2, [r7, #1871]	@ 0x74f
 80015a0:	4b62      	ldr	r3, [pc, #392]	@ (800172c <main+0x570>)
 80015a2:	fba3 1302 	umull	r1, r3, r3, r2
 80015a6:	08d9      	lsrs	r1, r3, #3
 80015a8:	460b      	mov	r3, r1
 80015aa:	009b      	lsls	r3, r3, #2
 80015ac:	440b      	add	r3, r1
 80015ae:	005b      	lsls	r3, r3, #1
 80015b0:	1ad3      	subs	r3, r2, r3
 80015b2:	f887 374d 	strb.w	r3, [r7, #1869]	@ 0x74d
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 80015b6:	f897 374e 	ldrb.w	r3, [r7, #1870]	@ 0x74e
 80015ba:	f107 010c 	add.w	r1, r7, #12
 80015be:	220a      	movs	r2, #10
 80015c0:	4618      	mov	r0, r3
 80015c2:	f00d f940 	bl	800e846 <itoa>
				  itoa(batDecimalPart, batdec, 10);
 80015c6:	f897 374d 	ldrb.w	r3, [r7, #1869]	@ 0x74d
 80015ca:	4639      	mov	r1, r7
 80015cc:	220a      	movs	r2, #10
 80015ce:	4618      	mov	r0, r3
 80015d0:	f00d f939 	bl	800e846 <itoa>
				  strncpy(result4, "", 20);
 80015d4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015d8:	2214      	movs	r2, #20
 80015da:	4955      	ldr	r1, [pc, #340]	@ (8001730 <main+0x574>)
 80015dc:	4618      	mov	r0, r3
 80015de:	f00d fa8c 	bl	800eafa <strncpy>
				  strncat(result4, batint, 5);
 80015e2:	f107 010c 	add.w	r1, r7, #12
 80015e6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ea:	2205      	movs	r2, #5
 80015ec:	4618      	mov	r0, r3
 80015ee:	f00d fa71 	bl	800ead4 <strncat>
				  strncat(result4, ".", 5);
 80015f2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7fe fdf2 	bl	80001e0 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001604:	4413      	add	r3, r2
 8001606:	494b      	ldr	r1, [pc, #300]	@ (8001734 <main+0x578>)
 8001608:	461a      	mov	r2, r3
 800160a:	460b      	mov	r3, r1
 800160c:	881b      	ldrh	r3, [r3, #0]
 800160e:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 8001610:	4639      	mov	r1, r7
 8001612:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001616:	2201      	movs	r2, #1
 8001618:	4618      	mov	r0, r3
 800161a:	f00d fa5b 	bl	800ead4 <strncat>
				  setbattdata(result4);
 800161e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001622:	4618      	mov	r0, r3
 8001624:	f002 f962 	bl	80038ec <setbattdata>
 8001628:	e6c0      	b.n	80013ac <main+0x1f0>
			  } else if (frame.can_id == 504) {
 800162a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800162e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 8001638:	d144      	bne.n	80016c4 <main+0x508>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 800163a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800163e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001642:	7b9b      	ldrb	r3, [r3, #14]
 8001644:	b21b      	sxth	r3, r3
 8001646:	021b      	lsls	r3, r3, #8
 8001648:	b21a      	sxth	r2, r3
 800164a:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 800164e:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 8001652:	7bdb      	ldrb	r3, [r3, #15]
 8001654:	b21b      	sxth	r3, r3
 8001656:	4313      	orrs	r3, r2
 8001658:	b21b      	sxth	r3, r3
 800165a:	f8a7 3750 	strh.w	r3, [r7, #1872]	@ 0x750
				  if (neutrallight < 1024) {
 800165e:	f8b7 3750 	ldrh.w	r3, [r7, #1872]	@ 0x750
 8001662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001666:	d21c      	bcs.n	80016a2 <main+0x4e6>
					  //isNeutral = 1;
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 8001668:	2300      	movs	r3, #0
 800166a:	9303      	str	r3, [sp, #12]
 800166c:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001670:	9302      	str	r3, [sp, #8]
 8001672:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001676:	9301      	str	r3, [sp, #4]
 8001678:	2300      	movs	r3, #0
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	23ff      	movs	r3, #255	@ 0xff
 800167e:	2280      	movs	r2, #128	@ 0x80
 8001680:	2100      	movs	r1, #0
 8001682:	4829      	ldr	r0, [pc, #164]	@ (8001728 <main+0x56c>)
 8001684:	f000 f918 	bl	80018b8 <setColor>
					  strncpy(result3, "7", 10);
 8001688:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800168c:	220a      	movs	r2, #10
 800168e:	492a      	ldr	r1, [pc, #168]	@ (8001738 <main+0x57c>)
 8001690:	4618      	mov	r0, r3
 8001692:	f00d fa32 	bl	800eafa <strncpy>
					  setgeardata(result3);
 8001696:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800169a:	4618      	mov	r0, r3
 800169c:	f002 f8fc 	bl	8003898 <setgeardata>
 80016a0:	e684      	b.n	80013ac <main+0x1f0>
				  } else {
					  //isNeutral = 0;
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 80016a2:	2300      	movs	r3, #0
 80016a4:	9303      	str	r3, [sp, #12]
 80016a6:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80016aa:	9302      	str	r3, [sp, #8]
 80016ac:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80016b0:	9301      	str	r3, [sp, #4]
 80016b2:	2300      	movs	r3, #0
 80016b4:	9300      	str	r3, [sp, #0]
 80016b6:	2300      	movs	r3, #0
 80016b8:	2200      	movs	r2, #0
 80016ba:	2100      	movs	r1, #0
 80016bc:	481a      	ldr	r0, [pc, #104]	@ (8001728 <main+0x56c>)
 80016be:	f000 f8fb 	bl	80018b8 <setColor>
 80016c2:	e673      	b.n	80013ac <main+0x1f0>
					  //strncpy(result3, "8", 10);
					  //setgeardata(result3);
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520 + 42) {
 80016c4:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016c8:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f240 621a 	movw	r2, #1562	@ 0x61a
 80016d2:	4293      	cmp	r3, r2
 80016d4:	f47f ae6a 	bne.w	80013ac <main+0x1f0>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 80016d8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016dc:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016e0:	7a1b      	ldrb	r3, [r3, #8]
 80016e2:	b21b      	sxth	r3, r3
 80016e4:	021b      	lsls	r3, r3, #8
 80016e6:	b21a      	sxth	r2, r3
 80016e8:	f507 63ec 	add.w	r3, r7, #1888	@ 0x760
 80016ec:	f5a3 63e9 	sub.w	r3, r3, #1864	@ 0x748
 80016f0:	7a5b      	ldrb	r3, [r3, #9]
 80016f2:	b21b      	sxth	r3, r3
 80016f4:	4313      	orrs	r3, r2
 80016f6:	b21b      	sxth	r3, r3
 80016f8:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  speed /= 10;
 80016fc:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <main+0x570>)
 8001702:	fba2 2303 	umull	r2, r3, r2, r3
 8001706:	08db      	lsrs	r3, r3, #3
 8001708:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  itoa(speed, (char*) result5, 10);
 800170c:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001710:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001714:	220a      	movs	r2, #10
 8001716:	4618      	mov	r0, r3
 8001718:	f00d f895 	bl	800e846 <itoa>
				  setspeeddata(result5);
 800171c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001720:	4618      	mov	r0, r3
 8001722:	f002 f90f 	bl	8003944 <setspeeddata>
  {
 8001726:	e641      	b.n	80013ac <main+0x1f0>
 8001728:	200002e0 	.word	0x200002e0
 800172c:	cccccccd 	.word	0xcccccccd
 8001730:	0800f3c4 	.word	0x0800f3c4
 8001734:	0800f3c8 	.word	0x0800f3c8
 8001738:	0800f3cc 	.word	0x0800f3cc

0800173c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b094      	sub	sp, #80	@ 0x50
 8001740:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001742:	f107 0320 	add.w	r3, r7, #32
 8001746:	2230      	movs	r2, #48	@ 0x30
 8001748:	2100      	movs	r1, #0
 800174a:	4618      	mov	r0, r3
 800174c:	f00d f9ba 	bl	800eac4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001750:	f107 030c 	add.w	r3, r7, #12
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
 8001764:	4b29      	ldr	r3, [pc, #164]	@ (800180c <SystemClock_Config+0xd0>)
 8001766:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001768:	4a28      	ldr	r2, [pc, #160]	@ (800180c <SystemClock_Config+0xd0>)
 800176a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800176e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001770:	4b26      	ldr	r3, [pc, #152]	@ (800180c <SystemClock_Config+0xd0>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001774:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800177c:	2300      	movs	r3, #0
 800177e:	607b      	str	r3, [r7, #4]
 8001780:	4b23      	ldr	r3, [pc, #140]	@ (8001810 <SystemClock_Config+0xd4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001788:	4a21      	ldr	r2, [pc, #132]	@ (8001810 <SystemClock_Config+0xd4>)
 800178a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800178e:	6013      	str	r3, [r2, #0]
 8001790:	4b1f      	ldr	r3, [pc, #124]	@ (8001810 <SystemClock_Config+0xd4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800179c:	2301      	movs	r3, #1
 800179e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017a0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017a4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017a6:	2302      	movs	r3, #2
 80017a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80017ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017b0:	2319      	movs	r3, #25
 80017b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80017b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017ba:	2304      	movs	r3, #4
 80017bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80017be:	2307      	movs	r3, #7
 80017c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017c2:	f107 0320 	add.w	r3, r7, #32
 80017c6:	4618      	mov	r0, r3
 80017c8:	f005 f9ea 	bl	8006ba0 <HAL_RCC_OscConfig>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d001      	beq.n	80017d6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80017d2:	f000 f81f 	bl	8001814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017d6:	230f      	movs	r3, #15
 80017d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80017da:	2302      	movs	r3, #2
 80017dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017e8:	2300      	movs	r3, #0
 80017ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017ec:	f107 030c 	add.w	r3, r7, #12
 80017f0:	2102      	movs	r1, #2
 80017f2:	4618      	mov	r0, r3
 80017f4:	f005 fc4c 	bl	8007090 <HAL_RCC_ClockConfig>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017fe:	f000 f809 	bl	8001814 <Error_Handler>
  }
}
 8001802:	bf00      	nop
 8001804:	3750      	adds	r7, #80	@ 0x50
 8001806:	46bd      	mov	sp, r7
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40007000 	.word	0x40007000

08001814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001818:	b672      	cpsid	i
}
 800181a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800181c:	bf00      	nop
 800181e:	e7fd      	b.n	800181c <Error_Handler+0x8>

08001820 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 8001820:	b580      	push	{r7, lr}
 8001822:	af00      	add	r7, sp, #0
	myMCP.reset();
 8001824:	4806      	ldr	r0, [pc, #24]	@ (8001840 <initializeMCP2515+0x20>)
 8001826:	f002 fa71 	bl	8003d0c <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 800182a:	2202      	movs	r2, #2
 800182c:	210e      	movs	r1, #14
 800182e:	4804      	ldr	r0, [pc, #16]	@ (8001840 <initializeMCP2515+0x20>)
 8001830:	f002 fc3e 	bl	80040b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8001834:	4802      	ldr	r0, [pc, #8]	@ (8001840 <initializeMCP2515+0x20>)
 8001836:	f002 fbef 	bl	8004018 <_ZN7MCP251513setNormalModeEv>
}
 800183a:	bf00      	nop
 800183c:	bd80      	pop	{r7, pc}
 800183e:	bf00      	nop
 8001840:	200001b4 	.word	0x200001b4

08001844 <sendMessage>:

int sendMessage(struct can_frame *frame) {
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
	return myMCP.sendMessage(frame);
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	4804      	ldr	r0, [pc, #16]	@ (8001860 <sendMessage+0x1c>)
 8001850:	f002 ff56 	bl	8004700 <_ZN7MCP251511sendMessageEPK9can_frame>
 8001854:	4603      	mov	r3, r0
}
 8001856:	4618      	mov	r0, r3
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	200001b4 	.word	0x200001b4

08001864 <readMessage>:

int readMessage(struct can_frame *frame) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b082      	sub	sp, #8
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 800186c:	6879      	ldr	r1, [r7, #4]
 800186e:	4804      	ldr	r0, [pc, #16]	@ (8001880 <readMessage+0x1c>)
 8001870:	f002 fffe 	bl	8004870 <_ZN7MCP251511readMessageEP9can_frame>
 8001874:	4603      	mov	r3, r0
}
 8001876:	4618      	mov	r0, r3
 8001878:	3708      	adds	r7, #8
 800187a:	46bd      	mov	sp, r7
 800187c:	bd80      	pop	{r7, pc}
 800187e:	bf00      	nop
 8001880:	200001b4 	.word	0x200001b4

08001884 <_Z41__static_initialization_and_destruction_0v>:
//	myMCP.setFilter(MCP2515::RXF2, false, 1520 + 3);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF3, false, 1520 + 2);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF4, false, 504);  // uses MASK1
//	myMCP.setFilter(MCP2515::RXF5, false, 1520 + 42);  // uses MASK1

}
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800188a:	2310      	movs	r3, #16
 800188c:	9300      	str	r3, [sp, #0]
 800188e:	4b04      	ldr	r3, [pc, #16]	@ (80018a0 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001890:	220a      	movs	r2, #10
 8001892:	4904      	ldr	r1, [pc, #16]	@ (80018a4 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001894:	4804      	ldr	r0, [pc, #16]	@ (80018a8 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8001896:	f002 f9da 	bl	8003c4e <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800189a:	bf00      	nop
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40020000 	.word	0x40020000
 80018a4:	20000220 	.word	0x20000220
 80018a8:	200001b4 	.word	0x200001b4

080018ac <_GLOBAL__sub_I_myMCP>:
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	f7ff ffe8 	bl	8001884 <_Z41__static_initialization_and_destruction_0v>
 80018b4:	bd80      	pop	{r7, pc}
	...

080018b8 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	460b      	mov	r3, r1
 80018c8:	71fb      	strb	r3, [r7, #7]
 80018ca:	4613      	mov	r3, r2
 80018cc:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 80018ce:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80018d0:	4613      	mov	r3, r2
 80018d2:	005b      	lsls	r3, r3, #1
 80018d4:	4413      	add	r3, r2
 80018d6:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018dc:	4413      	add	r3, r2
 80018de:	79fa      	ldrb	r2, [r7, #7]
 80018e0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	3301      	adds	r3, #1
 80018e6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018e8:	4413      	add	r3, r2
 80018ea:	79ba      	ldrb	r2, [r7, #6]
 80018ec:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80018ee:	693b      	ldr	r3, [r7, #16]
 80018f0:	3302      	adds	r3, #2
 80018f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018f4:	4413      	add	r3, r2
 80018f6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80018fa:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	61fb      	str	r3, [r7, #28]
 8001900:	e02a      	b.n	8001958 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8001902:	2300      	movs	r3, #0
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	e021      	b.n	800194c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8001908:	69fb      	ldr	r3, [r7, #28]
 800190a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	461a      	mov	r2, r3
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800191c:	2b00      	cmp	r3, #0
 800191e:	d009      	beq.n	8001934 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	00da      	lsls	r2, r3, #3
 8001924:	69bb      	ldr	r3, [r7, #24]
 8001926:	4413      	add	r3, r2
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800192c:	4413      	add	r3, r2
 800192e:	2246      	movs	r2, #70	@ 0x46
 8001930:	801a      	strh	r2, [r3, #0]
 8001932:	e008      	b.n	8001946 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	00da      	lsls	r2, r3, #3
 8001938:	69bb      	ldr	r3, [r7, #24]
 800193a:	4413      	add	r3, r2
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001940:	4413      	add	r3, r2
 8001942:	2223      	movs	r2, #35	@ 0x23
 8001944:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	3301      	adds	r3, #1
 800194a:	61bb      	str	r3, [r7, #24]
 800194c:	69bb      	ldr	r3, [r7, #24]
 800194e:	2b07      	cmp	r3, #7
 8001950:	ddda      	ble.n	8001908 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3301      	adds	r3, #1
 8001956:	61fb      	str	r3, [r7, #28]
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3302      	adds	r3, #2
 800195c:	69fa      	ldr	r2, [r7, #28]
 800195e:	429a      	cmp	r2, r3
 8001960:	ddcf      	ble.n	8001902 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001962:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	e008      	b.n	800197c <setColor+0xc4>
    	ledbytes[i] = 0;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001970:	4413      	add	r3, r2
 8001972:	2200      	movs	r2, #0
 8001974:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	3301      	adds	r3, #1
 800197a:	617b      	str	r3, [r7, #20]
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	f240 2215 	movw	r2, #533	@ 0x215
 8001982:	4293      	cmp	r3, r2
 8001984:	ddf1      	ble.n	800196a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001986:	f240 2316 	movw	r3, #534	@ 0x216
 800198a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800198c:	68b9      	ldr	r1, [r7, #8]
 800198e:	68f8      	ldr	r0, [r7, #12]
 8001990:	f006 fcf8 	bl	8008384 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001994:	bf00      	nop
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <setColor+0xf4>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d0fb      	beq.n	8001996 <setColor+0xde>
    datasentflag = 0;
 800199e:	4b03      	ldr	r3, [pc, #12]	@ (80019ac <setColor+0xf4>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
}
 80019a4:	bf00      	nop
 80019a6:	3720      	adds	r7, #32
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bd80      	pop	{r7, pc}
 80019ac:	200001c4 	.word	0x200001c4

080019b0 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b088      	sub	sp, #32
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 80019be:	2300      	movs	r3, #0
 80019c0:	61fb      	str	r3, [r7, #28]
 80019c2:	e013      	b.n	80019ec <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	687a      	ldr	r2, [r7, #4]
 80019c8:	4413      	add	r3, r2
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3301      	adds	r3, #1
 80019d2:	687a      	ldr	r2, [r7, #4]
 80019d4:	4413      	add	r3, r2
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	3302      	adds	r3, #2
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	22ff      	movs	r2, #255	@ 0xff
 80019e4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 80019e6:	69fb      	ldr	r3, [r7, #28]
 80019e8:	3303      	adds	r3, #3
 80019ea:	61fb      	str	r3, [r7, #28]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	2b2f      	cmp	r3, #47	@ 0x2f
 80019f0:	dde8      	ble.n	80019c4 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 80019f2:	2300      	movs	r3, #0
 80019f4:	61bb      	str	r3, [r7, #24]
 80019f6:	e02a      	b.n	8001a4e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	e021      	b.n	8001a42 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019fe:	69bb      	ldr	r3, [r7, #24]
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	4413      	add	r3, r2
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	461a      	mov	r2, r3
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d009      	beq.n	8001a2a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	00da      	lsls	r2, r3, #3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	4413      	add	r3, r2
 8001a24:	2246      	movs	r2, #70	@ 0x46
 8001a26:	801a      	strh	r2, [r3, #0]
 8001a28:	e008      	b.n	8001a3c <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	00da      	lsls	r2, r3, #3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	4413      	add	r3, r2
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	683a      	ldr	r2, [r7, #0]
 8001a36:	4413      	add	r3, r2
 8001a38:	2223      	movs	r2, #35	@ 0x23
 8001a3a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	3301      	adds	r3, #1
 8001a40:	617b      	str	r3, [r7, #20]
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	2b07      	cmp	r3, #7
 8001a46:	ddda      	ble.n	80019fe <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	61bb      	str	r3, [r7, #24]
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b2f      	cmp	r3, #47	@ 0x2f
 8001a52:	ddd1      	ble.n	80019f8 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a54:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001a58:	613b      	str	r3, [r7, #16]
 8001a5a:	e008      	b.n	8001a6e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	005b      	lsls	r3, r3, #1
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	4413      	add	r3, r2
 8001a64:	2200      	movs	r2, #0
 8001a66:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	693b      	ldr	r3, [r7, #16]
 8001a70:	f240 2215 	movw	r2, #533	@ 0x215
 8001a74:	4293      	cmp	r3, r2
 8001a76:	ddf1      	ble.n	8001a5c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a78:	f240 2316 	movw	r3, #534	@ 0x216
 8001a7c:	683a      	ldr	r2, [r7, #0]
 8001a7e:	68b9      	ldr	r1, [r7, #8]
 8001a80:	68f8      	ldr	r0, [r7, #12]
 8001a82:	f006 fc7f 	bl	8008384 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a86:	bf00      	nop
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <shiftLightsInit+0xf4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d0fb      	beq.n	8001a88 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a90:	4b04      	ldr	r3, [pc, #16]	@ (8001aa4 <shiftLightsInit+0xf4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
}
 8001a9a:	bf00      	nop
 8001a9c:	3720      	adds	r7, #32
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	200001c4 	.word	0x200001c4

08001aa8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b082      	sub	sp, #8
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	4805      	ldr	r0, [pc, #20]	@ (8001ac8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001ab4:	f006 fe16 	bl	80086e4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001ab8:	4b04      	ldr	r3, [pc, #16]	@ (8001acc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001aba:	2201      	movs	r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	3708      	adds	r7, #8
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	200002e0 	.word	0x200002e0
 8001acc:	200001c4 	.word	0x200001c4

08001ad0 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	@ 0x28
 8001ad4:	af04      	add	r7, sp, #16
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001ade:	6a3b      	ldr	r3, [r7, #32]
 8001ae0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	dd06      	ble.n	8001af6 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	687a      	ldr	r2, [r7, #4]
 8001aec:	68b9      	ldr	r1, [r7, #8]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f000 f8b6 	bl	8001c60 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001af4:	e02a      	b.n	8001b4c <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001af6:	2302      	movs	r3, #2
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	e024      	b.n	8001b46 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001b02:	3b02      	subs	r3, #2
 8001b04:	009b      	lsls	r3, r3, #2
 8001b06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b08:	4413      	add	r3, r2
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	6a3a      	ldr	r2, [r7, #32]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	db08      	blt.n	8001b24 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	9300      	str	r3, [sp, #0]
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	68b9      	ldr	r1, [r7, #8]
 8001b1c:	68f8      	ldr	r0, [r7, #12]
 8001b1e:	f000 f819 	bl	8001b54 <lightOn>
 8001b22:	e00d      	b.n	8001b40 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	9303      	str	r3, [sp, #12]
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	9302      	str	r3, [sp, #8]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	9301      	str	r3, [sp, #4]
 8001b30:	2300      	movs	r3, #0
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2300      	movs	r3, #0
 8001b36:	2200      	movs	r2, #0
 8001b38:	68b9      	ldr	r1, [r7, #8]
 8001b3a:	68f8      	ldr	r0, [r7, #12]
 8001b3c:	f7ff febc 	bl	80018b8 <setColor>
	for (int i = 2; i < 14; i++) {
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	3301      	adds	r3, #1
 8001b44:	617b      	str	r3, [r7, #20]
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	2b0d      	cmp	r3, #13
 8001b4a:	ddd7      	ble.n	8001afc <UpdateShiftLights+0x2c>
}
 8001b4c:	bf00      	nop
 8001b4e:	3718      	adds	r7, #24
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b088      	sub	sp, #32
 8001b58:	af04      	add	r7, sp, #16
 8001b5a:	60f8      	str	r0, [r7, #12]
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b62:	69bb      	ldr	r3, [r7, #24]
 8001b64:	2b0d      	cmp	r3, #13
 8001b66:	d140      	bne.n	8001bea <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	68b9      	ldr	r1, [r7, #8]
 8001b6e:	68f8      	ldr	r0, [r7, #12]
 8001b70:	f7ff ff1e 	bl	80019b0 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b74:	2300      	movs	r3, #0
 8001b76:	9303      	str	r3, [sp, #12]
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	9302      	str	r3, [sp, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	9301      	str	r3, [sp, #4]
 8001b80:	2300      	movs	r3, #0
 8001b82:	9300      	str	r3, [sp, #0]
 8001b84:	2300      	movs	r3, #0
 8001b86:	2200      	movs	r2, #0
 8001b88:	2100      	movs	r1, #0
 8001b8a:	4834      	ldr	r0, [pc, #208]	@ (8001c5c <lightOn+0x108>)
 8001b8c:	f7ff fe94 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b90:	2301      	movs	r3, #1
 8001b92:	9303      	str	r3, [sp, #12]
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	9302      	str	r3, [sp, #8]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	9301      	str	r3, [sp, #4]
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	9300      	str	r3, [sp, #0]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	482d      	ldr	r0, [pc, #180]	@ (8001c5c <lightOn+0x108>)
 8001ba8:	f7ff fe86 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001bac:	230e      	movs	r3, #14
 8001bae:	9303      	str	r3, [sp, #12]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	2300      	movs	r3, #0
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	2100      	movs	r1, #0
 8001bc2:	4826      	ldr	r0, [pc, #152]	@ (8001c5c <lightOn+0x108>)
 8001bc4:	f7ff fe78 	bl	80018b8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001bc8:	230f      	movs	r3, #15
 8001bca:	9303      	str	r3, [sp, #12]
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	9302      	str	r3, [sp, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	9301      	str	r3, [sp, #4]
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	9300      	str	r3, [sp, #0]
 8001bd8:	2300      	movs	r3, #0
 8001bda:	2200      	movs	r2, #0
 8001bdc:	2100      	movs	r1, #0
 8001bde:	481f      	ldr	r0, [pc, #124]	@ (8001c5c <lightOn+0x108>)
 8001be0:	f7ff fe6a 	bl	80018b8 <setColor>
		HAL_Delay(5);
 8001be4:	2005      	movs	r0, #5
 8001be6:	f002 ff0b 	bl	8004a00 <HAL_Delay>
	}
	if (index < 6) {
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	2b05      	cmp	r3, #5
 8001bee:	dc0e      	bgt.n	8001c0e <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001bf0:	69bb      	ldr	r3, [r7, #24]
 8001bf2:	9303      	str	r3, [sp, #12]
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	9302      	str	r3, [sp, #8]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	9301      	str	r3, [sp, #4]
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	9300      	str	r3, [sp, #0]
 8001c00:	2300      	movs	r3, #0
 8001c02:	22ff      	movs	r2, #255	@ 0xff
 8001c04:	68b9      	ldr	r1, [r7, #8]
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fe56 	bl	80018b8 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001c0c:	e022      	b.n	8001c54 <lightOn+0x100>
	} else if (index < 10) {
 8001c0e:	69bb      	ldr	r3, [r7, #24]
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	dc0e      	bgt.n	8001c32 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001c14:	69bb      	ldr	r3, [r7, #24]
 8001c16:	9303      	str	r3, [sp, #12]
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	9302      	str	r3, [sp, #8]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	23ff      	movs	r3, #255	@ 0xff
 8001c26:	2200      	movs	r2, #0
 8001c28:	68b9      	ldr	r1, [r7, #8]
 8001c2a:	68f8      	ldr	r0, [r7, #12]
 8001c2c:	f7ff fe44 	bl	80018b8 <setColor>
}
 8001c30:	e010      	b.n	8001c54 <lightOn+0x100>
	} else if (index < 14){
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	2b0d      	cmp	r3, #13
 8001c36:	dc0d      	bgt.n	8001c54 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	9303      	str	r3, [sp, #12]
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	9302      	str	r3, [sp, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	9301      	str	r3, [sp, #4]
 8001c44:	23ff      	movs	r3, #255	@ 0xff
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	2300      	movs	r3, #0
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	68b9      	ldr	r1, [r7, #8]
 8001c4e:	68f8      	ldr	r0, [r7, #12]
 8001c50:	f7ff fe32 	bl	80018b8 <setColor>
}
 8001c54:	bf00      	nop
 8001c56:	3710      	adds	r7, #16
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	bd80      	pop	{r7, pc}
 8001c5c:	200002e0 	.word	0x200002e0

08001c60 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b08c      	sub	sp, #48	@ 0x30
 8001c64:	af04      	add	r7, sp, #16
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c6e:	2307      	movs	r3, #7
 8001c70:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	61fb      	str	r3, [r7, #28]
 8001c76:	e026      	b.n	8001cc6 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c78:	697a      	ldr	r2, [r7, #20]
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	1ad3      	subs	r3, r2, r3
 8001c7e:	9303      	str	r3, [sp, #12]
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	9302      	str	r3, [sp, #8]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	9301      	str	r3, [sp, #4]
 8001c88:	2300      	movs	r3, #0
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	23ff      	movs	r3, #255	@ 0xff
 8001c8e:	2200      	movs	r2, #0
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f7ff fe10 	bl	80018b8 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c98:	697a      	ldr	r2, [r7, #20]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	4413      	add	r3, r2
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	9303      	str	r3, [sp, #12]
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	9302      	str	r3, [sp, #8]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	9301      	str	r3, [sp, #4]
 8001caa:	2300      	movs	r3, #0
 8001cac:	9300      	str	r3, [sp, #0]
 8001cae:	23ff      	movs	r3, #255	@ 0xff
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	68b9      	ldr	r1, [r7, #8]
 8001cb4:	68f8      	ldr	r0, [r7, #12]
 8001cb6:	f7ff fdff 	bl	80018b8 <setColor>
		HAL_Delay(20);
 8001cba:	2014      	movs	r0, #20
 8001cbc:	f002 fea0 	bl	8004a00 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cc0:	69fb      	ldr	r3, [r7, #28]
 8001cc2:	3301      	adds	r3, #1
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	2b05      	cmp	r3, #5
 8001cca:	ddd5      	ble.n	8001c78 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61bb      	str	r3, [r7, #24]
 8001cd0:	e026      	b.n	8001d20 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	9303      	str	r3, [sp, #12]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	9302      	str	r3, [sp, #8]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	9301      	str	r3, [sp, #4]
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	2200      	movs	r2, #0
 8001cea:	68b9      	ldr	r1, [r7, #8]
 8001cec:	68f8      	ldr	r0, [r7, #12]
 8001cee:	f7ff fde3 	bl	80018b8 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001cf2:	697a      	ldr	r2, [r7, #20]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	9303      	str	r3, [sp, #12]
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	9302      	str	r3, [sp, #8]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	9301      	str	r3, [sp, #4]
 8001d04:	2300      	movs	r3, #0
 8001d06:	9300      	str	r3, [sp, #0]
 8001d08:	2300      	movs	r3, #0
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	68b9      	ldr	r1, [r7, #8]
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f7ff fdd2 	bl	80018b8 <setColor>
		HAL_Delay(20);
 8001d14:	2014      	movs	r0, #20
 8001d16:	f002 fe73 	bl	8004a00 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	61bb      	str	r3, [r7, #24]
 8001d20:	69bb      	ldr	r3, [r7, #24]
 8001d22:	2b05      	cmp	r3, #5
 8001d24:	ddd5      	ble.n	8001cd2 <startUp+0x72>
	}
}
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop
 8001d2a:	3720      	adds	r7, #32
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001d34:	4b18      	ldr	r3, [pc, #96]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d36:	4a19      	ldr	r2, [pc, #100]	@ (8001d9c <MX_SPI1_Init+0x6c>)
 8001d38:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d3a:	4b17      	ldr	r3, [pc, #92]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d3c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d40:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d42:	4b15      	ldr	r3, [pc, #84]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d44:	2200      	movs	r2, #0
 8001d46:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d4a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d4e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d5c:	4b0e      	ldr	r3, [pc, #56]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d5e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d62:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d64:	4b0c      	ldr	r3, [pc, #48]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d6a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d76:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d7c:	4b06      	ldr	r3, [pc, #24]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d7e:	220a      	movs	r2, #10
 8001d80:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d82:	4805      	ldr	r0, [pc, #20]	@ (8001d98 <MX_SPI1_Init+0x68>)
 8001d84:	f005 fb3c 	bl	8007400 <HAL_SPI_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d8e:	f7ff fd41 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200001c8 	.word	0x200001c8
 8001d9c:	40013000 	.word	0x40013000

08001da0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001da6:	4a18      	ldr	r2, [pc, #96]	@ (8001e08 <MX_SPI2_Init+0x68>)
 8001da8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001db0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001db2:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001db8:	4b12      	ldr	r3, [pc, #72]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dba:	2200      	movs	r2, #0
 8001dbc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001dbe:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001dc4:	4b0f      	ldr	r3, [pc, #60]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001dca:	4b0e      	ldr	r3, [pc, #56]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001dd0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001dd2:	4b0c      	ldr	r3, [pc, #48]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001dd8:	4b0a      	ldr	r3, [pc, #40]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dda:	2200      	movs	r2, #0
 8001ddc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001de4:	4b07      	ldr	r3, [pc, #28]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001dea:	4b06      	ldr	r3, [pc, #24]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001dec:	220a      	movs	r2, #10
 8001dee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001df0:	4804      	ldr	r0, [pc, #16]	@ (8001e04 <MX_SPI2_Init+0x64>)
 8001df2:	f005 fb05 	bl	8007400 <HAL_SPI_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001dfc:	f7ff fd0a 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001e00:	bf00      	nop
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	20000220 	.word	0x20000220
 8001e08:	40003800 	.word	0x40003800

08001e0c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b08c      	sub	sp, #48	@ 0x30
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e14:	f107 031c 	add.w	r3, r7, #28
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a4a      	ldr	r2, [pc, #296]	@ (8001f54 <HAL_SPI_MspInit+0x148>)
 8001e2a:	4293      	cmp	r3, r2
 8001e2c:	d15c      	bne.n	8001ee8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	61bb      	str	r3, [r7, #24]
 8001e32:	4b49      	ldr	r3, [pc, #292]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	4a48      	ldr	r2, [pc, #288]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e38:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3e:	4b46      	ldr	r3, [pc, #280]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e46:	61bb      	str	r3, [r7, #24]
 8001e48:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	4b42      	ldr	r3, [pc, #264]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e52:	4a41      	ldr	r2, [pc, #260]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e54:	f043 0301 	orr.w	r3, r3, #1
 8001e58:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	617b      	str	r3, [r7, #20]
 8001e64:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e66:	23a0      	movs	r3, #160	@ 0xa0
 8001e68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e72:	2303      	movs	r3, #3
 8001e74:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e76:	2305      	movs	r3, #5
 8001e78:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e7a:	f107 031c 	add.w	r3, r7, #28
 8001e7e:	4619      	mov	r1, r3
 8001e80:	4836      	ldr	r0, [pc, #216]	@ (8001f5c <HAL_SPI_MspInit+0x150>)
 8001e82:	f003 fa85 	bl	8005390 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e86:	4b36      	ldr	r3, [pc, #216]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e88:	4a36      	ldr	r2, [pc, #216]	@ (8001f64 <HAL_SPI_MspInit+0x158>)
 8001e8a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e8c:	4b34      	ldr	r3, [pc, #208]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e8e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e92:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e94:	4b32      	ldr	r3, [pc, #200]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e96:	2240      	movs	r2, #64	@ 0x40
 8001e98:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e9a:	4b31      	ldr	r3, [pc, #196]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ea0:	4b2f      	ldr	r3, [pc, #188]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ea2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001ea6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ea8:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001eae:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001eb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eb6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001eb8:	4b29      	ldr	r3, [pc, #164]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ebe:	4b28      	ldr	r3, [pc, #160]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ec4:	4b26      	ldr	r3, [pc, #152]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001eca:	4825      	ldr	r0, [pc, #148]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ecc:	f002 fece 	bl	8004c6c <HAL_DMA_Init>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001ed6:	f7ff fc9d 	bl	8001814 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	4a20      	ldr	r2, [pc, #128]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ede:	649a      	str	r2, [r3, #72]	@ 0x48
 8001ee0:	4a1f      	ldr	r2, [pc, #124]	@ (8001f60 <HAL_SPI_MspInit+0x154>)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001ee6:	e031      	b.n	8001f4c <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a1e      	ldr	r2, [pc, #120]	@ (8001f68 <HAL_SPI_MspInit+0x15c>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d12c      	bne.n	8001f4c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	613b      	str	r3, [r7, #16]
 8001ef6:	4b18      	ldr	r3, [pc, #96]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	4a17      	ldr	r2, [pc, #92]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001efc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f02:	4b15      	ldr	r3, [pc, #84]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f0a:	613b      	str	r3, [r7, #16]
 8001f0c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60fb      	str	r3, [r7, #12]
 8001f12:	4b11      	ldr	r3, [pc, #68]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f16:	4a10      	ldr	r2, [pc, #64]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f18:	f043 0302 	orr.w	r3, r3, #2
 8001f1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f58 <HAL_SPI_MspInit+0x14c>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	60fb      	str	r3, [r7, #12]
 8001f28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001f2a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f30:	2302      	movs	r3, #2
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001f3c:	2305      	movs	r3, #5
 8001f3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f40:	f107 031c 	add.w	r3, r7, #28
 8001f44:	4619      	mov	r1, r3
 8001f46:	4809      	ldr	r0, [pc, #36]	@ (8001f6c <HAL_SPI_MspInit+0x160>)
 8001f48:	f003 fa22 	bl	8005390 <HAL_GPIO_Init>
}
 8001f4c:	bf00      	nop
 8001f4e:	3730      	adds	r7, #48	@ 0x30
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40013000 	.word	0x40013000
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	20000278 	.word	0x20000278
 8001f64:	40026458 	.word	0x40026458
 8001f68:	40003800 	.word	0x40003800
 8001f6c:	40020400 	.word	0x40020400

08001f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f76:	2300      	movs	r3, #0
 8001f78:	607b      	str	r3, [r7, #4]
 8001f7a:	4b10      	ldr	r3, [pc, #64]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f86:	4b0d      	ldr	r3, [pc, #52]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f8e:	607b      	str	r3, [r7, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f92:	2300      	movs	r3, #0
 8001f94:	603b      	str	r3, [r7, #0]
 8001f96:	4b09      	ldr	r3, [pc, #36]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f9a:	4a08      	ldr	r2, [pc, #32]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fa2:	4b06      	ldr	r3, [pc, #24]	@ (8001fbc <HAL_MspInit+0x4c>)
 8001fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001faa:	603b      	str	r3, [r7, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40023800 	.word	0x40023800

08001fc0 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fc6:	881b      	ldrh	r3, [r3, #0]
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d006      	beq.n	8001fdc <SDTimer_Handler+0x1c>
    Timer1--;
 8001fce:	4b0c      	ldr	r3, [pc, #48]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fd0:	881b      	ldrh	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	3b01      	subs	r3, #1
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b09      	ldr	r3, [pc, #36]	@ (8002000 <SDTimer_Handler+0x40>)
 8001fda:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001fdc:	4b09      	ldr	r3, [pc, #36]	@ (8002004 <SDTimer_Handler+0x44>)
 8001fde:	881b      	ldrh	r3, [r3, #0]
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <SDTimer_Handler+0x34>
    Timer2--;
 8001fe6:	4b07      	ldr	r3, [pc, #28]	@ (8002004 <SDTimer_Handler+0x44>)
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <SDTimer_Handler+0x44>)
 8001ff2:	801a      	strh	r2, [r3, #0]
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop
 8002000:	200001a8 	.word	0x200001a8
 8002004:	200001aa 	.word	0x200001aa

08002008 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <NMI_Handler+0x4>

08002010 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <HardFault_Handler+0x4>

08002018 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800201c:	bf00      	nop
 800201e:	e7fd      	b.n	800201c <MemManage_Handler+0x4>

08002020 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002024:	bf00      	nop
 8002026:	e7fd      	b.n	8002024 <BusFault_Handler+0x4>

08002028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800202c:	bf00      	nop
 800202e:	e7fd      	b.n	800202c <UsageFault_Handler+0x4>

08002030 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002034:	bf00      	nop
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr

0800203e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800203e:	b480      	push	{r7}
 8002040:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002042:	bf00      	nop
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002058:	4770      	bx	lr
	...

0800205c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002060:	4b0a      	ldr	r3, [pc, #40]	@ (800208c <SysTick_Handler+0x30>)
 8002062:	781b      	ldrb	r3, [r3, #0]
 8002064:	b2db      	uxtb	r3, r3
 8002066:	3301      	adds	r3, #1
 8002068:	b2da      	uxtb	r2, r3
 800206a:	4b08      	ldr	r3, [pc, #32]	@ (800208c <SysTick_Handler+0x30>)
 800206c:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 800206e:	4b07      	ldr	r3, [pc, #28]	@ (800208c <SysTick_Handler+0x30>)
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b09      	cmp	r3, #9
 8002076:	d904      	bls.n	8002082 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8002078:	4b04      	ldr	r3, [pc, #16]	@ (800208c <SysTick_Handler+0x30>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 800207e:	f7ff ff9f 	bl	8001fc0 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002082:	f002 fc9d 	bl	80049c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	200002d8 	.word	0x200002d8

08002090 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002094:	4802      	ldr	r0, [pc, #8]	@ (80020a0 <DMA1_Stream0_IRQHandler+0x10>)
 8002096:	f002 ff11 	bl	8004ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20000328 	.word	0x20000328

080020a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 80020a8:	f44f 7080 	mov.w	r0, #256	@ 0x100
 80020ac:	f003 fb0e 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 80020b0:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80020b4:	f003 fb0a 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80020b8:	bf00      	nop
 80020ba:	bd80      	pop	{r7, pc}

080020bc <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 80020c0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80020c4:	f003 fb02 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 80020c8:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80020cc:	f003 fafe 	bl	80056cc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}

080020d4 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80020d8:	4802      	ldr	r0, [pc, #8]	@ (80020e4 <DMA2_Stream3_IRQHandler+0x10>)
 80020da:	f002 feef 	bl	8004ebc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80020de:	bf00      	nop
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	20000278 	.word	0x20000278

080020e8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80020ec:	4802      	ldr	r0, [pc, #8]	@ (80020f8 <OTG_FS_IRQHandler+0x10>)
 80020ee:	f003 fc49 	bl	8005984 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80020f2:	bf00      	nop
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	bf00      	nop
 80020f8:	20001138 	.word	0x20001138

080020fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
  return 1;
 8002100:	2301      	movs	r3, #1
}
 8002102:	4618      	mov	r0, r3
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr

0800210c <_kill>:

int _kill(int pid, int sig)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002116:	f00c fd57 	bl	800ebc8 <__errno>
 800211a:	4603      	mov	r3, r0
 800211c:	2216      	movs	r2, #22
 800211e:	601a      	str	r2, [r3, #0]
  return -1;
 8002120:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002124:	4618      	mov	r0, r3
 8002126:	3708      	adds	r7, #8
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}

0800212c <_exit>:

void _exit (int status)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b082      	sub	sp, #8
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002134:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ffe7 	bl	800210c <_kill>
  while (1) {}    /* Make sure we hang here */
 800213e:	bf00      	nop
 8002140:	e7fd      	b.n	800213e <_exit+0x12>
	...

08002144 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b086      	sub	sp, #24
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800214c:	4a14      	ldr	r2, [pc, #80]	@ (80021a0 <_sbrk+0x5c>)
 800214e:	4b15      	ldr	r3, [pc, #84]	@ (80021a4 <_sbrk+0x60>)
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002158:	4b13      	ldr	r3, [pc, #76]	@ (80021a8 <_sbrk+0x64>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d102      	bne.n	8002166 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002160:	4b11      	ldr	r3, [pc, #68]	@ (80021a8 <_sbrk+0x64>)
 8002162:	4a12      	ldr	r2, [pc, #72]	@ (80021ac <_sbrk+0x68>)
 8002164:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002166:	4b10      	ldr	r3, [pc, #64]	@ (80021a8 <_sbrk+0x64>)
 8002168:	681a      	ldr	r2, [r3, #0]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4413      	add	r3, r2
 800216e:	693a      	ldr	r2, [r7, #16]
 8002170:	429a      	cmp	r2, r3
 8002172:	d207      	bcs.n	8002184 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002174:	f00c fd28 	bl	800ebc8 <__errno>
 8002178:	4603      	mov	r3, r0
 800217a:	220c      	movs	r2, #12
 800217c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800217e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002182:	e009      	b.n	8002198 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002184:	4b08      	ldr	r3, [pc, #32]	@ (80021a8 <_sbrk+0x64>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800218a:	4b07      	ldr	r3, [pc, #28]	@ (80021a8 <_sbrk+0x64>)
 800218c:	681a      	ldr	r2, [r3, #0]
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4413      	add	r3, r2
 8002192:	4a05      	ldr	r2, [pc, #20]	@ (80021a8 <_sbrk+0x64>)
 8002194:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002196:	68fb      	ldr	r3, [r7, #12]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3718      	adds	r7, #24
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	20010000 	.word	0x20010000
 80021a4:	00000400 	.word	0x00000400
 80021a8:	200002dc 	.word	0x200002dc
 80021ac:	20001988 	.word	0x20001988

080021b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80021b4:	4b06      	ldr	r3, [pc, #24]	@ (80021d0 <SystemInit+0x20>)
 80021b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ba:	4a05      	ldr	r2, [pc, #20]	@ (80021d0 <SystemInit+0x20>)
 80021bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021c4:	bf00      	nop
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop
 80021d0:	e000ed00 	.word	0xe000ed00

080021d4 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08e      	sub	sp, #56	@ 0x38
 80021d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021da:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021e8:	f107 0320 	add.w	r3, r7, #32
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
 80021f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
 8002200:	615a      	str	r2, [r3, #20]
 8002202:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002204:	4b2c      	ldr	r3, [pc, #176]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <MX_TIM4_Init+0xe8>)
 8002208:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800220a:	4b2b      	ldr	r3, [pc, #172]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800220c:	2200      	movs	r2, #0
 800220e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002210:	4b29      	ldr	r3, [pc, #164]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002212:	2200      	movs	r2, #0
 8002214:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8002216:	4b28      	ldr	r3, [pc, #160]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002218:	2269      	movs	r2, #105	@ 0x69
 800221a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800221c:	4b26      	ldr	r3, [pc, #152]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800221e:	2200      	movs	r2, #0
 8002220:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002222:	4b25      	ldr	r3, [pc, #148]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002224:	2200      	movs	r2, #0
 8002226:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002228:	4823      	ldr	r0, [pc, #140]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800222a:	f006 f803 	bl	8008234 <HAL_TIM_Base_Init>
 800222e:	4603      	mov	r3, r0
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 8002234:	f7ff faee 	bl	8001814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002238:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800223c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800223e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002242:	4619      	mov	r1, r3
 8002244:	481c      	ldr	r0, [pc, #112]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002246:	f006 fbd5 	bl	80089f4 <HAL_TIM_ConfigClockSource>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002250:	f7ff fae0 	bl	8001814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8002254:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002256:	f006 f83c 	bl	80082d2 <HAL_TIM_PWM_Init>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d001      	beq.n	8002264 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002260:	f7ff fad8 	bl	8001814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002268:	2300      	movs	r3, #0
 800226a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800226c:	f107 0320 	add.w	r3, r7, #32
 8002270:	4619      	mov	r1, r3
 8002272:	4811      	ldr	r0, [pc, #68]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 8002274:	f007 f842 	bl	80092fc <HAL_TIMEx_MasterConfigSynchronization>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d001      	beq.n	8002282 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 800227e:	f7ff fac9 	bl	8001814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002282:	2360      	movs	r3, #96	@ 0x60
 8002284:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002286:	2300      	movs	r3, #0
 8002288:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800228a:	2300      	movs	r3, #0
 800228c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800228e:	2300      	movs	r3, #0
 8002290:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002292:	1d3b      	adds	r3, r7, #4
 8002294:	2200      	movs	r2, #0
 8002296:	4619      	mov	r1, r3
 8002298:	4807      	ldr	r0, [pc, #28]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 800229a:	f006 fae9 	bl	8008870 <HAL_TIM_PWM_ConfigChannel>
 800229e:	4603      	mov	r3, r0
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d001      	beq.n	80022a8 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 80022a4:	f7ff fab6 	bl	8001814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80022a8:	4803      	ldr	r0, [pc, #12]	@ (80022b8 <MX_TIM4_Init+0xe4>)
 80022aa:	f000 f85d 	bl	8002368 <HAL_TIM_MspPostInit>

}
 80022ae:	bf00      	nop
 80022b0:	3738      	adds	r7, #56	@ 0x38
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	200002e0 	.word	0x200002e0
 80022bc:	40000800 	.word	0x40000800

080022c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a22      	ldr	r2, [pc, #136]	@ (8002358 <HAL_TIM_Base_MspInit+0x98>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d13d      	bne.n	800234e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b21      	ldr	r3, [pc, #132]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022da:	4a20      	ldr	r2, [pc, #128]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022dc:	f043 0304 	orr.w	r3, r3, #4
 80022e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80022e2:	4b1e      	ldr	r3, [pc, #120]	@ (800235c <HAL_TIM_Base_MspInit+0x9c>)
 80022e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80022ee:	4b1c      	ldr	r3, [pc, #112]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022f0:	4a1c      	ldr	r2, [pc, #112]	@ (8002364 <HAL_TIM_Base_MspInit+0xa4>)
 80022f2:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80022f4:	4b1a      	ldr	r3, [pc, #104]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022f6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80022fa:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022fc:	4b18      	ldr	r3, [pc, #96]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 80022fe:	2240      	movs	r2, #64	@ 0x40
 8002300:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002302:	4b17      	ldr	r3, [pc, #92]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002304:	2200      	movs	r2, #0
 8002306:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8002308:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800230a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800230e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002310:	4b13      	ldr	r3, [pc, #76]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002312:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002316:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002318:	4b11      	ldr	r3, [pc, #68]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800231a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800231e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8002320:	4b0f      	ldr	r3, [pc, #60]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002322:	2200      	movs	r2, #0
 8002324:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8002326:	4b0e      	ldr	r3, [pc, #56]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002328:	2200      	movs	r2, #0
 800232a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800232c:	4b0c      	ldr	r3, [pc, #48]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800232e:	2200      	movs	r2, #0
 8002330:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 8002332:	480b      	ldr	r0, [pc, #44]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002334:	f002 fc9a 	bl	8004c6c <HAL_DMA_Init>
 8002338:	4603      	mov	r3, r0
 800233a:	2b00      	cmp	r3, #0
 800233c:	d001      	beq.n	8002342 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800233e:	f7ff fa69 	bl	8001814 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a06      	ldr	r2, [pc, #24]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24
 8002348:	4a05      	ldr	r2, [pc, #20]	@ (8002360 <HAL_TIM_Base_MspInit+0xa0>)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 800234e:	bf00      	nop
 8002350:	3710      	adds	r7, #16
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40000800 	.word	0x40000800
 800235c:	40023800 	.word	0x40023800
 8002360:	20000328 	.word	0x20000328
 8002364:	40026010 	.word	0x40026010

08002368 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b088      	sub	sp, #32
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002370:	f107 030c 	add.w	r3, r7, #12
 8002374:	2200      	movs	r2, #0
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	605a      	str	r2, [r3, #4]
 800237a:	609a      	str	r2, [r3, #8]
 800237c:	60da      	str	r2, [r3, #12]
 800237e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	4a12      	ldr	r2, [pc, #72]	@ (80023d0 <HAL_TIM_MspPostInit+0x68>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d11d      	bne.n	80023c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b11      	ldr	r3, [pc, #68]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002392:	4a10      	ldr	r2, [pc, #64]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 8002394:	f043 0302 	orr.w	r3, r3, #2
 8002398:	6313      	str	r3, [r2, #48]	@ 0x30
 800239a:	4b0e      	ldr	r3, [pc, #56]	@ (80023d4 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80023a6:	2340      	movs	r3, #64	@ 0x40
 80023a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023aa:	2302      	movs	r3, #2
 80023ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b2:	2300      	movs	r3, #0
 80023b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023b6:	2302      	movs	r3, #2
 80023b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023ba:	f107 030c 	add.w	r3, r7, #12
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	@ (80023d8 <HAL_TIM_MspPostInit+0x70>)
 80023c2:	f002 ffe5 	bl	8005390 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80023c6:	bf00      	nop
 80023c8:	3720      	adds	r7, #32
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	40000800 	.word	0x40000800
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40020400 	.word	0x40020400

080023dc <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 80023dc:	b40f      	push	{r0, r1, r2, r3}
 80023de:	b580      	push	{r7, lr}
 80023e0:	b0a2      	sub	sp, #136	@ 0x88
 80023e2:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 80023e4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80023e8:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80023ea:	f107 0008 	add.w	r0, r7, #8
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80023f4:	2180      	movs	r1, #128	@ 0x80
 80023f6:	f00c fb57 	bl	800eaa8 <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80023fa:	f107 0308 	add.w	r3, r7, #8
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fd feee 	bl	80001e0 <strlen>
 8002404:	4603      	mov	r3, r0
 8002406:	b29a      	uxth	r2, r3
 8002408:	f107 0308 	add.w	r3, r7, #8
 800240c:	4611      	mov	r1, r2
 800240e:	4618      	mov	r0, r3
 8002410:	f00b fd8a 	bl	800df28 <CDC_Transmit_FS>
}
 8002414:	bf00      	nop
 8002416:	3788      	adds	r7, #136	@ 0x88
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800241e:	b004      	add	sp, #16
 8002420:	4770      	bx	lr
	...

08002424 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	60f8      	str	r0, [r7, #12]
 800242c:	60b9      	str	r1, [r7, #8]
 800242e:	4613      	mov	r3, r2
 8002430:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 8002432:	4b06      	ldr	r3, [pc, #24]	@ (800244c <transmitdma+0x28>)
 8002434:	2200      	movs	r2, #0
 8002436:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8002438:	88fb      	ldrh	r3, [r7, #6]
 800243a:	461a      	mov	r2, r3
 800243c:	68b9      	ldr	r1, [r7, #8]
 800243e:	68f8      	ldr	r0, [r7, #12]
 8002440:	f005 fc6e 	bl	8007d20 <HAL_SPI_Transmit_DMA>
}
 8002444:	bf00      	nop
 8002446:	3710      	adds	r7, #16
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	20000388 	.word	0x20000388

08002450 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002450:	b480      	push	{r7}
 8002452:	b083      	sub	sp, #12
 8002454:	af00      	add	r7, sp, #0
 8002456:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a05      	ldr	r2, [pc, #20]	@ (8002474 <HAL_SPI_TxCpltCallback+0x24>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d102      	bne.n	8002468 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8002462:	4b05      	ldr	r3, [pc, #20]	@ (8002478 <HAL_SPI_TxCpltCallback+0x28>)
 8002464:	2201      	movs	r2, #1
 8002466:	701a      	strb	r2, [r3, #0]
	}
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	40013000 	.word	0x40013000
 8002478:	20000388 	.word	0x20000388

0800247c <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	60b9      	str	r1, [r7, #8]
 8002486:	4613      	mov	r3, r2
 8002488:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	461a      	mov	r2, r3
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f805 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	4613      	mov	r3, r2
 80024ac:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2201      	movs	r2, #1
 80024be:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2200      	movs	r2, #0
 80024c4:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e014      	b.n	80024f6 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	68ba      	ldr	r2, [r7, #8]
 80024d2:	4413      	add	r3, r2
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4618      	mov	r0, r3
 80024d8:	f000 f9da 	bl	8002890 <_ZN13DisplayObject11getpriorityEv>
 80024dc:	4603      	mov	r3, r0
 80024de:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	799b      	ldrb	r3, [r3, #6]
 80024e4:	7cfa      	ldrb	r2, [r7, #19]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d902      	bls.n	80024f0 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	7cfa      	ldrb	r2, [r7, #19]
 80024ee:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	3301      	adds	r3, #1
 80024f4:	617b      	str	r3, [r7, #20]
 80024f6:	79fb      	ldrb	r3, [r7, #7]
 80024f8:	697a      	ldr	r2, [r7, #20]
 80024fa:	429a      	cmp	r2, r3
 80024fc:	dbe6      	blt.n	80024cc <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024fe:	bf00      	nop
 8002500:	bf00      	nop
 8002502:	3718      	adds	r7, #24
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800250e:	b089      	sub	sp, #36	@ 0x24
 8002510:	af00      	add	r7, sp, #0
 8002512:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002516:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800251a:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 800251c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002520:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	795b      	ldrb	r3, [r3, #5]
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 813e 	beq.w	80027aa <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 800252e:	f240 133f 	movw	r3, #319	@ 0x13f
 8002532:	f240 12df 	movw	r2, #479	@ 0x1df
 8002536:	2100      	movs	r1, #0
 8002538:	2000      	movs	r0, #0
 800253a:	f000 fd46 	bl	8002fca <modifySpace>
		startCommand(WRITE_COMMAND);
 800253e:	202c      	movs	r0, #44	@ 0x2c
 8002540:	f000 fc50 	bl	8002de4 <startCommand>
		dataOrRegister(1);
 8002544:	2001      	movs	r0, #1
 8002546:	f000 fc0b 	bl	8002d60 <dataOrRegister>
		uint8_t anychanges = 0;
 800254a:	2300      	movs	r3, #0
 800254c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002550:	f102 021f 	add.w	r2, r2, #31
 8002554:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002556:	2300      	movs	r3, #0
 8002558:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800255c:	f102 0218 	add.w	r2, r2, #24
 8002560:	6013      	str	r3, [r2, #0]
 8002562:	e028      	b.n	80025b6 <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 8002564:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002568:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002574:	f103 0318 	add.w	r3, r3, #24
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	4413      	add	r3, r2
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f000 f9a0 	bl	80028c6 <_ZN13DisplayObject13getChangeFlagEv>
 8002586:	4603      	mov	r3, r0
 8002588:	461a      	mov	r2, r3
 800258a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800258e:	f103 031f 	add.w	r3, r3, #31
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	4413      	add	r3, r2
 8002596:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800259a:	f102 021f 	add.w	r2, r2, #31
 800259e:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80025a0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025a4:	f103 0318 	add.w	r3, r3, #24
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	3301      	adds	r3, #1
 80025ac:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025b0:	f102 0218 	add.w	r2, r2, #24
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025ba:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	791b      	ldrb	r3, [r3, #4]
 80025c2:	461a      	mov	r2, r3
 80025c4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025c8:	f103 0318 	add.w	r3, r3, #24
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4293      	cmp	r3, r2
 80025d0:	dbc8      	blt.n	8002564 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 80025d2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025d6:	f103 031f 	add.w	r3, r3, #31
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 80ec 	beq.w	80027ba <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80025e2:	2300      	movs	r3, #0
 80025e4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025e8:	f102 0214 	add.w	r2, r2, #20
 80025ec:	6013      	str	r3, [r2, #0]
 80025ee:	e0d2      	b.n	8002796 <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80025f0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025f4:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80025f8:	4618      	mov	r0, r3
 80025fa:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025fe:	461a      	mov	r2, r3
 8002600:	2100      	movs	r1, #0
 8002602:	f00c fa5f 	bl	800eac4 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 8002606:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800260a:	f103 0314 	add.w	r3, r3, #20
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	4413      	add	r3, r2
 8002616:	011b      	lsls	r3, r3, #4
 8002618:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800261c:	f102 0208 	add.w	r2, r2, #8
 8002620:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 8002622:	2300      	movs	r3, #0
 8002624:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002628:	f102 0210 	add.w	r2, r2, #16
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e084      	b.n	800273a <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 8002630:	2300      	movs	r3, #0
 8002632:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002636:	f102 020c 	add.w	r2, r2, #12
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	e064      	b.n	8002708 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 800263e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002642:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264e:	f103 030c 	add.w	r3, r3, #12
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	4413      	add	r3, r2
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f000 f918 	bl	8002890 <_ZN13DisplayObject11getpriorityEv>
 8002660:	4603      	mov	r3, r0
 8002662:	461a      	mov	r2, r3
 8002664:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002668:	f103 0310 	add.w	r3, r3, #16
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4293      	cmp	r3, r2
 8002670:	bf0c      	ite	eq
 8002672:	2301      	moveq	r3, #1
 8002674:	2300      	movne	r3, #0
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b00      	cmp	r3, #0
 800267a:	d03a      	beq.n	80026f2 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 800267c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002680:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	681a      	ldr	r2, [r3, #0]
 8002688:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800268c:	f103 030c 	add.w	r3, r3, #12
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	4413      	add	r3, r2
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800269c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026a8:	f103 030c 	add.w	r3, r3, #12
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	4413      	add	r3, r2
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	3308      	adds	r3, #8
 80026b8:	681c      	ldr	r4, [r3, #0]
 80026ba:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026be:	f103 0308 	add.w	r3, r3, #8
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	b29b      	uxth	r3, r3
 80026c6:	f107 0120 	add.w	r1, r7, #32
 80026ca:	3918      	subs	r1, #24
 80026cc:	2250      	movs	r2, #80	@ 0x50
 80026ce:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 80026d0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026d4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026e0:	f103 030c 	add.w	r3, r3, #12
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	4413      	add	r3, r2
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4618      	mov	r0, r3
 80026ee:	f000 f87f 	bl	80027f0 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 80026f2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f6:	f103 030c 	add.w	r3, r3, #12
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002702:	f102 020c 	add.w	r2, r2, #12
 8002706:	6013      	str	r3, [r2, #0]
 8002708:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800270c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	791b      	ldrb	r3, [r3, #4]
 8002714:	461a      	mov	r2, r3
 8002716:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800271a:	f103 030c 	add.w	r3, r3, #12
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4293      	cmp	r3, r2
 8002722:	db8c      	blt.n	800263e <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 8002724:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002728:	f103 0310 	add.w	r3, r3, #16
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002734:	f102 0210 	add.w	r2, r2, #16
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800273e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	799b      	ldrb	r3, [r3, #6]
 8002746:	461a      	mov	r2, r3
 8002748:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800274c:	f103 0310 	add.w	r3, r3, #16
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4293      	cmp	r3, r2
 8002754:	f77f af6c 	ble.w	8002630 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002758:	f107 0320 	add.w	r3, r7, #32
 800275c:	3b18      	subs	r3, #24
 800275e:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002762:	4619      	mov	r1, r3
 8002764:	4818      	ldr	r0, [pc, #96]	@ (80027c8 <_ZN5Scene9drawSceneEv+0x2c0>)
 8002766:	f7ff fe5d 	bl	8002424 <transmitdma>
			while(!spidatasentflag) {}
 800276a:	bf00      	nop
 800276c:	4b17      	ldr	r3, [pc, #92]	@ (80027cc <_ZN5Scene9drawSceneEv+0x2c4>)
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	b2db      	uxtb	r3, r3
 8002772:	2b00      	cmp	r3, #0
 8002774:	bf0c      	ite	eq
 8002776:	2301      	moveq	r3, #1
 8002778:	2300      	movne	r3, #0
 800277a:	b2db      	uxtb	r3, r3
 800277c:	2b00      	cmp	r3, #0
 800277e:	d1f5      	bne.n	800276c <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002780:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002784:	f103 0314 	add.w	r3, r3, #20
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	3301      	adds	r3, #1
 800278c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002790:	f102 0214 	add.w	r2, r2, #20
 8002794:	6013      	str	r3, [r2, #0]
 8002796:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800279a:	f103 0314 	add.w	r3, r3, #20
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b05      	cmp	r3, #5
 80027a2:	f77f af25 	ble.w	80025f0 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 80027a6:	f000 fb33 	bl	8002e10 <endCommand>
	}
	this->changed = 0;
 80027aa:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80027ae:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2200      	movs	r2, #0
 80027b6:	715a      	strb	r2, [r3, #5]
 80027b8:	e000      	b.n	80027bc <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 80027ba:	bf00      	nop
}
 80027bc:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80027c0:	3724      	adds	r7, #36	@ 0x24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd90      	pop	{r4, r7, pc}
 80027c6:	bf00      	nop
 80027c8:	200001c8 	.word	0x200001c8
 80027cc:	20000388 	.word	0x20000388

080027d0 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 80027d0:	b480      	push	{r7}
 80027d2:	b083      	sub	sp, #12
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	4a04      	ldr	r2, [pc, #16]	@ (80027ec <_ZN13DisplayObjectD1Ev+0x1c>)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4618      	mov	r0, r3
 80027e2:	370c      	adds	r7, #12
 80027e4:	46bd      	mov	sp, r7
 80027e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ea:	4770      	bx	lr
 80027ec:	0800f548 	.word	0x0800f548

080027f0 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	715a      	strb	r2, [r3, #5]
}
 80027fe:	bf00      	nop
 8002800:	370c      	adds	r7, #12
 8002802:	46bd      	mov	sp, r7
 8002804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002808:	4770      	bx	lr

0800280a <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2201      	movs	r2, #1
 8002816:	715a      	strb	r2, [r3, #5]
}
 8002818:	bf00      	nop
 800281a:	370c      	adds	r7, #12
 800281c:	46bd      	mov	sp, r7
 800281e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002822:	4770      	bx	lr

08002824 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 8002824:	b480      	push	{r7}
 8002826:	b083      	sub	sp, #12
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	return this->xpos;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	88db      	ldrh	r3, [r3, #6]
}
 8002830:	4618      	mov	r0, r3
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 800283c:	b480      	push	{r7}
 800283e:	b083      	sub	sp, #12
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	460b      	mov	r3, r1
 8002846:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	887a      	ldrh	r2, [r7, #2]
 800284c:	80da      	strh	r2, [r3, #6]
}
 800284e:	bf00      	nop
 8002850:	370c      	adds	r7, #12
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr

0800285a <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 800285a:	b480      	push	{r7}
 800285c:	b083      	sub	sp, #12
 800285e:	af00      	add	r7, sp, #0
 8002860:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	891b      	ldrh	r3, [r3, #8]
}
 8002866:	4618      	mov	r0, r3
 8002868:	370c      	adds	r7, #12
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002872:	b480      	push	{r7}
 8002874:	b083      	sub	sp, #12
 8002876:	af00      	add	r7, sp, #0
 8002878:	6078      	str	r0, [r7, #4]
 800287a:	460b      	mov	r3, r1
 800287c:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	887a      	ldrh	r2, [r7, #2]
 8002882:	811a      	strh	r2, [r3, #8]
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	791b      	ldrb	r3, [r3, #4]
}
 800289c:	4618      	mov	r0, r3
 800289e:	370c      	adds	r7, #12
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	711a      	strb	r2, [r3, #4]
}
 80028ba:	bf00      	nop
 80028bc:	370c      	adds	r7, #12
 80028be:	46bd      	mov	sp, r7
 80028c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c4:	4770      	bx	lr

080028c6 <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
	return this->changed;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	795b      	ldrb	r3, [r3, #5]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr
	...

080028e0 <_ZN13DisplayObjectC1Ev>:

#include <stdint.h>
#include "rpiDisplayShapes.h"
#include "fatfs.h"

class DisplayObject {
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
 80028e8:	4a04      	ldr	r2, [pc, #16]	@ (80028fc <_ZN13DisplayObjectC1Ev+0x1c>)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	601a      	str	r2, [r3, #0]
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4618      	mov	r0, r3
 80028f2:	370c      	adds	r7, #12
 80028f4:	46bd      	mov	sp, r7
 80028f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fa:	4770      	bx	lr
 80028fc:	0800f548 	.word	0x0800f548

08002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	4608      	mov	r0, r1
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	4603      	mov	r3, r0
 8002910:	817b      	strh	r3, [r7, #10]
 8002912:	460b      	mov	r3, r1
 8002914:	813b      	strh	r3, [r7, #8]
 8002916:	4613      	mov	r3, r2
 8002918:	80fb      	strh	r3, [r7, #6]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4618      	mov	r0, r3
 800291e:	f7ff ffdf 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002922:	4a15      	ldr	r2, [pc, #84]	@ (8002978 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	6a3a      	ldr	r2, [r7, #32]
 800292c:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	897a      	ldrh	r2, [r7, #10]
 8002932:	4611      	mov	r1, r2
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff ff81 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	893a      	ldrh	r2, [r7, #8]
 800293e:	4611      	mov	r1, r2
 8002940:	4618      	mov	r0, r3
 8002942:	f7ff ff96 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	88fa      	ldrh	r2, [r7, #6]
 800294a:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	7f3a      	ldrb	r2, [r7, #28]
 8002950:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 800295e:	4611      	mov	r1, r2
 8002960:	4618      	mov	r0, r3
 8002962:	f7ff ffa1 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	4618      	mov	r0, r3
 800296a:	f7ff ff4e 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	4618      	mov	r0, r3
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	0800f534 	.word	0x0800f534

0800297c <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800297c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002980:	b08a      	sub	sp, #40	@ 0x28
 8002982:	af06      	add	r7, sp, #24
 8002984:	60f8      	str	r0, [r7, #12]
 8002986:	60b9      	str	r1, [r7, #8]
 8002988:	4611      	mov	r1, r2
 800298a:	461a      	mov	r2, r3
 800298c:	460b      	mov	r3, r1
 800298e:	80fb      	strh	r3, [r7, #6]
 8002990:	4613      	mov	r3, r2
 8002992:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68dc      	ldr	r4, [r3, #12]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	691d      	ldr	r5, [r3, #16]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	895e      	ldrh	r6, [r3, #10]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f7ff ff3e 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 80029a8:	4603      	mov	r3, r0
 80029aa:	4698      	mov	r8, r3
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff ff53 	bl	800285a <_ZN13DisplayObject7getyposEv>
 80029b4:	4603      	mov	r3, r0
 80029b6:	4619      	mov	r1, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	7d1b      	ldrb	r3, [r3, #20]
 80029bc:	88ba      	ldrh	r2, [r7, #4]
 80029be:	9204      	str	r2, [sp, #16]
 80029c0:	88fa      	ldrh	r2, [r7, #6]
 80029c2:	9203      	str	r2, [sp, #12]
 80029c4:	68ba      	ldr	r2, [r7, #8]
 80029c6:	9202      	str	r2, [sp, #8]
 80029c8:	9301      	str	r3, [sp, #4]
 80029ca:	9100      	str	r1, [sp, #0]
 80029cc:	4643      	mov	r3, r8
 80029ce:	4632      	mov	r2, r6
 80029d0:	4629      	mov	r1, r5
 80029d2:	4620      	mov	r0, r4
 80029d4:	f000 fdd6 	bl	8003584 <drawStringIntoFramebuffer>
 80029d8:	4603      	mov	r3, r0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3710      	adds	r7, #16
 80029de:	46bd      	mov	sp, r7
 80029e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	4611      	mov	r1, r2
 80029f0:	461a      	mov	r2, r3
 80029f2:	460b      	mov	r3, r1
 80029f4:	71fb      	strb	r3, [r7, #7]
 80029f6:	4613      	mov	r3, r2
 80029f8:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	68ba      	ldr	r2, [r7, #8]
 80029fe:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	79fa      	ldrb	r2, [r7, #7]
 8002a04:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	88ba      	ldrh	r2, [r7, #4]
 8002a0a:	815a      	strh	r2, [r3, #10]
	this->font = font;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	69ba      	ldr	r2, [r7, #24]
 8002a10:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	8bba      	ldrh	r2, [r7, #28]
 8002a16:	4611      	mov	r1, r2
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f7ff ff0f 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	8c3a      	ldrh	r2, [r7, #32]
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f7ff ff24 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a30:	4611      	mov	r1, r2
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff ff38 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f7ff fee5 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002a40:	bf00      	nop
 8002a42:	3710      	adds	r7, #16
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	60f8      	str	r0, [r7, #12]
 8002a50:	4608      	mov	r0, r1
 8002a52:	4611      	mov	r1, r2
 8002a54:	461a      	mov	r2, r3
 8002a56:	4603      	mov	r3, r0
 8002a58:	817b      	strh	r3, [r7, #10]
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	813b      	strh	r3, [r7, #8]
 8002a5e:	4613      	mov	r3, r2
 8002a60:	80fb      	strh	r3, [r7, #6]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff3b 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002a6a:	4a16      	ldr	r2, [pc, #88]	@ (8002ac4 <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	897a      	ldrh	r2, [r7, #10]
 8002a74:	4611      	mov	r1, r2
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7ff fee0 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	893a      	ldrh	r2, [r7, #8]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fef5 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8b3a      	ldrh	r2, [r7, #24]
 8002a92:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	8bba      	ldrh	r2, [r7, #28]
 8002a98:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002aa0:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f7ff fefc 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fea9 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	4618      	mov	r0, r3
 8002abc:	3710      	adds	r7, #16
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}
 8002ac2:	bf00      	nop
 8002ac4:	0800f520 	.word	0x0800f520

08002ac8 <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	b08b      	sub	sp, #44	@ 0x2c
 8002acc:	af06      	add	r7, sp, #24
 8002ace:	60f8      	str	r0, [r7, #12]
 8002ad0:	60b9      	str	r1, [r7, #8]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	80fb      	strh	r3, [r7, #6]
 8002ada:	4613      	mov	r3, r2
 8002adc:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fe9f 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	461d      	mov	r5, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff feb4 	bl	800285a <_ZN13DisplayObject7getyposEv>
 8002af2:	4603      	mov	r3, r0
 8002af4:	461e      	mov	r6, r3
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8998      	ldrh	r0, [r3, #12]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	89dc      	ldrh	r4, [r3, #14]
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	895b      	ldrh	r3, [r3, #10]
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	7c12      	ldrb	r2, [r2, #16]
 8002b06:	88b9      	ldrh	r1, [r7, #4]
 8002b08:	9104      	str	r1, [sp, #16]
 8002b0a:	88f9      	ldrh	r1, [r7, #6]
 8002b0c:	9103      	str	r1, [sp, #12]
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	9102      	str	r1, [sp, #8]
 8002b12:	9201      	str	r2, [sp, #4]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	4623      	mov	r3, r4
 8002b18:	4602      	mov	r2, r0
 8002b1a:	4631      	mov	r1, r6
 8002b1c:	4628      	mov	r0, r5
 8002b1e:	f000 fb30 	bl	8003182 <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002b22:	2300      	movs	r3, #0
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002b2c <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b088      	sub	sp, #32
 8002b30:	af04      	add	r7, sp, #16
 8002b32:	60f8      	str	r0, [r7, #12]
 8002b34:	60b9      	str	r1, [r7, #8]
 8002b36:	4611      	mov	r1, r2
 8002b38:	461a      	mov	r2, r3
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	80fb      	strh	r3, [r7, #6]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	80bb      	strh	r3, [r7, #4]
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7ff fecb 	bl	80028e0 <_ZN13DisplayObjectC1Ev>
 8002b4a:	4a0c      	ldr	r2, [pc, #48]	@ (8002b7c <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002b50:	88b9      	ldrh	r1, [r7, #4]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002b58:	9303      	str	r3, [sp, #12]
 8002b5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b5e:	9302      	str	r3, [sp, #8]
 8002b60:	8bbb      	ldrh	r3, [r7, #28]
 8002b62:	9301      	str	r3, [sp, #4]
 8002b64:	8b3b      	ldrh	r3, [r7, #24]
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	460b      	mov	r3, r1
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 f844 	bl	8002bfa <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	4618      	mov	r0, r3
 8002b76:	3710      	adds	r7, #16
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	0800f50c 	.word	0x0800f50c

08002b80 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b82:	f5ad 7d15 	sub.w	sp, sp, #596	@ 0x254
 8002b86:	af90      	add	r7, sp, #576	@ 0x240
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	60b9      	str	r1, [r7, #8]
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	460b      	mov	r3, r1
 8002b92:	80fb      	strh	r3, [r7, #6]
 8002b94:	4613      	mov	r3, r2
 8002b96:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->imagefile, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	895d      	ldrh	r5, [r3, #10]
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	899e      	ldrh	r6, [r3, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7ff fe3e 	bl	8002824 <_ZN13DisplayObject7getxposEv>
 8002ba8:	4603      	mov	r3, r0
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f7ff fe53 	bl	800285a <_ZN13DisplayObject7getyposEv>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	7b9b      	ldrb	r3, [r3, #14]
 8002bbc:	68fc      	ldr	r4, [r7, #12]
 8002bbe:	88ba      	ldrh	r2, [r7, #4]
 8002bc0:	928f      	str	r2, [sp, #572]	@ 0x23c
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	928e      	str	r2, [sp, #568]	@ 0x238
 8002bc6:	68ba      	ldr	r2, [r7, #8]
 8002bc8:	928d      	str	r2, [sp, #564]	@ 0x234
 8002bca:	938c      	str	r3, [sp, #560]	@ 0x230
 8002bcc:	918b      	str	r1, [sp, #556]	@ 0x22c
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	938a      	str	r3, [sp, #552]	@ 0x228
 8002bd2:	9689      	str	r6, [sp, #548]	@ 0x224
 8002bd4:	9588      	str	r5, [sp, #544]	@ 0x220
 8002bd6:	4668      	mov	r0, sp
 8002bd8:	f104 0324 	add.w	r3, r4, #36	@ 0x24
 8002bdc:	f44f 7208 	mov.w	r2, #544	@ 0x220
 8002be0:	4619      	mov	r1, r3
 8002be2:	f00c f81d 	bl	800ec20 <memcpy>
 8002be6:	f104 0314 	add.w	r3, r4, #20
 8002bea:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002bec:	f000 fd55 	bl	800369a <drawImageIntoFramebuffer>
	return 0;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bfa <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	4611      	mov	r1, r2
 8002c06:	461a      	mov	r2, r3
 8002c08:	460b      	mov	r3, r1
 8002c0a:	80fb      	strh	r3, [r7, #6]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	8b3a      	ldrh	r2, [r7, #24]
 8002c14:	4611      	mov	r1, r2
 8002c16:	4618      	mov	r0, r3
 8002c18:	f7ff fe10 	bl	800283c <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	8bba      	ldrh	r2, [r7, #28]
 8002c20:	4611      	mov	r1, r2
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff fe25 	bl	8002872 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	68ba      	ldr	r2, [r7, #8]
 8002c2c:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	88fa      	ldrh	r2, [r7, #6]
 8002c32:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	88ba      	ldrh	r2, [r7, #4]
 8002c38:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002c40:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7ff fe2c 	bl	80028a8 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4618      	mov	r0, r3
 8002c54:	f7ff fdd9 	bl	800280a <_ZN13DisplayObject12redrawObjectEv>
}
 8002c58:	bf00      	nop
 8002c5a:	3710      	adds	r7, #16
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	4a05      	ldr	r2, [pc, #20]	@ (8002c80 <_ZN11ImageObjectD1Ev+0x20>)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	601a      	str	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff fdad 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3708      	adds	r7, #8
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	0800f50c 	.word	0x0800f50c

08002c84 <_ZN11ImageObjectD0Ev>:
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b082      	sub	sp, #8
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f7ff ffe7 	bl	8002c60 <_ZN11ImageObjectD1Ev>
 8002c92:	f44f 7111 	mov.w	r1, #580	@ 0x244
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f00b fd98 	bl	800e7cc <_ZdlPvj>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3708      	adds	r7, #8
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
	...

08002ca8 <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	4a05      	ldr	r2, [pc, #20]	@ (8002cc8 <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fd89 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3708      	adds	r7, #8
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	0800f520 	.word	0x0800f520

08002ccc <_ZN17OutlineRectObjectD0Ev>:
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b082      	sub	sp, #8
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f7ff ffe7 	bl	8002ca8 <_ZN17OutlineRectObjectD1Ev>
 8002cda:	2114      	movs	r1, #20
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f00b fd75 	bl	800e7cc <_ZdlPvj>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3708      	adds	r7, #8
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}

08002cec <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	4a05      	ldr	r2, [pc, #20]	@ (8002d0c <_ZN12StringObjectD1Ev+0x20>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	601a      	str	r2, [r3, #0]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff fd67 	bl	80027d0 <_ZN13DisplayObjectD1Ev>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4618      	mov	r0, r3
 8002d06:	3708      	adds	r7, #8
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	0800f534 	.word	0x0800f534

08002d10 <_ZN12StringObjectD0Ev>:
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f7ff ffe7 	bl	8002cec <_ZN12StringObjectD1Ev>
 8002d1e:	2118      	movs	r1, #24
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f00b fd53 	bl	800e7cc <_ZdlPvj>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	3708      	adds	r7, #8
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002d34:	2200      	movs	r2, #0
 8002d36:	2108      	movs	r1, #8
 8002d38:	4802      	ldr	r0, [pc, #8]	@ (8002d44 <startTransaction+0x14>)
 8002d3a:	f002 fcad 	bl	8005698 <HAL_GPIO_WritePin>
}
 8002d3e:	bf00      	nop
 8002d40:	bd80      	pop	{r7, pc}
 8002d42:	bf00      	nop
 8002d44:	40020400 	.word	0x40020400

08002d48 <endTransaction>:

void endTransaction() {
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	2108      	movs	r1, #8
 8002d50:	4802      	ldr	r0, [pc, #8]	@ (8002d5c <endTransaction+0x14>)
 8002d52:	f002 fca1 	bl	8005698 <HAL_GPIO_WritePin>
}
 8002d56:	bf00      	nop
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	bf00      	nop
 8002d5c:	40020400 	.word	0x40020400

08002d60 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b082      	sub	sp, #8
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	4603      	mov	r3, r0
 8002d68:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002d6a:	79fb      	ldrb	r3, [r7, #7]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d005      	beq.n	8002d7c <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d70:	2201      	movs	r2, #1
 8002d72:	2110      	movs	r1, #16
 8002d74:	4806      	ldr	r0, [pc, #24]	@ (8002d90 <dataOrRegister+0x30>)
 8002d76:	f002 fc8f 	bl	8005698 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d7a:	e004      	b.n	8002d86 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	2110      	movs	r1, #16
 8002d80:	4803      	ldr	r0, [pc, #12]	@ (8002d90 <dataOrRegister+0x30>)
 8002d82:	f002 fc89 	bl	8005698 <HAL_GPIO_WritePin>
}
 8002d86:	bf00      	nop
 8002d88:	3708      	adds	r7, #8
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	40020400 	.word	0x40020400

08002d94 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b084      	sub	sp, #16
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	60b9      	str	r1, [r7, #8]
 8002d9e:	607a      	str	r2, [r7, #4]
 8002da0:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002da2:	f7ff ffc5 	bl	8002d30 <startTransaction>

	dataOrRegister(0);
 8002da6:	2000      	movs	r0, #0
 8002da8:	f7ff ffda 	bl	8002d60 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002dac:	f107 010e 	add.w	r1, r7, #14
 8002db0:	230a      	movs	r3, #10
 8002db2:	2201      	movs	r2, #1
 8002db4:	480a      	ldr	r0, [pc, #40]	@ (8002de0 <commandAndData+0x4c>)
 8002db6:	f004 fbac 	bl	8007512 <HAL_SPI_Transmit>

	if (size) {
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d009      	beq.n	8002dd4 <commandAndData+0x40>
		dataOrRegister(1);
 8002dc0:	2001      	movs	r0, #1
 8002dc2:	f7ff ffcd 	bl	8002d60 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	230a      	movs	r3, #10
 8002dcc:	68b9      	ldr	r1, [r7, #8]
 8002dce:	4804      	ldr	r0, [pc, #16]	@ (8002de0 <commandAndData+0x4c>)
 8002dd0:	f004 fb9f 	bl	8007512 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002dd4:	f7ff ffb8 	bl	8002d48 <endTransaction>
}
 8002dd8:	bf00      	nop
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}
 8002de0:	200001c8 	.word	0x200001c8

08002de4 <startCommand>:

void startCommand(uint16_t command) {
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b082      	sub	sp, #8
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002dee:	f7ff ff9f 	bl	8002d30 <startTransaction>
	dataOrRegister(0);
 8002df2:	2000      	movs	r0, #0
 8002df4:	f7ff ffb4 	bl	8002d60 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002df8:	1db9      	adds	r1, r7, #6
 8002dfa:	230a      	movs	r3, #10
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	4803      	ldr	r0, [pc, #12]	@ (8002e0c <startCommand+0x28>)
 8002e00:	f004 fb87 	bl	8007512 <HAL_SPI_Transmit>
}
 8002e04:	bf00      	nop
 8002e06:	3708      	adds	r7, #8
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}
 8002e0c:	200001c8 	.word	0x200001c8

08002e10 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
	endTransaction();
 8002e14:	f7ff ff98 	bl	8002d48 <endTransaction>
}
 8002e18:	bf00      	nop
 8002e1a:	bd80      	pop	{r7, pc}

08002e1c <resetScreen>:

void resetScreen() {
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002e20:	2201      	movs	r2, #1
 8002e22:	2120      	movs	r1, #32
 8002e24:	480b      	ldr	r0, [pc, #44]	@ (8002e54 <resetScreen+0x38>)
 8002e26:	f002 fc37 	bl	8005698 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e2a:	2014      	movs	r0, #20
 8002e2c:	f001 fde8 	bl	8004a00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002e30:	2200      	movs	r2, #0
 8002e32:	2120      	movs	r1, #32
 8002e34:	4807      	ldr	r0, [pc, #28]	@ (8002e54 <resetScreen+0x38>)
 8002e36:	f002 fc2f 	bl	8005698 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002e3a:	2014      	movs	r0, #20
 8002e3c:	f001 fde0 	bl	8004a00 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002e40:	2201      	movs	r2, #1
 8002e42:	2120      	movs	r1, #32
 8002e44:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <resetScreen+0x38>)
 8002e46:	f002 fc27 	bl	8005698 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002e4a:	2064      	movs	r0, #100	@ 0x64
 8002e4c:	f001 fdd8 	bl	8004a00 <HAL_Delay>
}
 8002e50:	bf00      	nop
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	40020400 	.word	0x40020400

08002e58 <initializeScreen>:

void initializeScreen() {
 8002e58:	b5b0      	push	{r4, r5, r7, lr}
 8002e5a:	b09c      	sub	sp, #112	@ 0x70
 8002e5c:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002e5e:	2200      	movs	r2, #0
 8002e60:	2100      	movs	r1, #0
 8002e62:	2001      	movs	r0, #1
 8002e64:	f7ff ff96 	bl	8002d94 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002e68:	2200      	movs	r2, #0
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	2011      	movs	r0, #17
 8002e6e:	f7ff ff91 	bl	8002d94 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e72:	2355      	movs	r3, #85	@ 0x55
 8002e74:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e78:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	4619      	mov	r1, r3
 8002e80:	203a      	movs	r0, #58	@ 0x3a
 8002e82:	f7ff ff87 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e86:	4b47      	ldr	r3, [pc, #284]	@ (8002fa4 <initializeScreen+0x14c>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e8c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e90:	2204      	movs	r2, #4
 8002e92:	4619      	mov	r1, r3
 8002e94:	20c0      	movs	r0, #192	@ 0xc0
 8002e96:	f7ff ff7d 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e9a:	2345      	movs	r3, #69	@ 0x45
 8002e9c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002ea6:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002eaa:	2204      	movs	r2, #4
 8002eac:	4619      	mov	r1, r3
 8002eae:	20c1      	movs	r0, #193	@ 0xc1
 8002eb0:	f7ff ff70 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002eb4:	2333      	movs	r3, #51	@ 0x33
 8002eb6:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002eba:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4619      	mov	r1, r3
 8002ec2:	20c2      	movs	r0, #194	@ 0xc2
 8002ec4:	f7ff ff66 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002ec8:	2300      	movs	r3, #0
 8002eca:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002ece:	2328      	movs	r3, #40	@ 0x28
 8002ed0:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002ed4:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002ed8:	2204      	movs	r2, #4
 8002eda:	4619      	mov	r1, r3
 8002edc:	20c5      	movs	r0, #197	@ 0xc5
 8002ede:	f7ff ff59 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002ee2:	4b31      	ldr	r3, [pc, #196]	@ (8002fa8 <initializeScreen+0x150>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002ee8:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002eec:	2204      	movs	r2, #4
 8002eee:	4619      	mov	r1, r3
 8002ef0:	20b1      	movs	r0, #177	@ 0xb1
 8002ef2:	f7ff ff4f 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002efc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002f00:	2202      	movs	r2, #2
 8002f02:	4619      	mov	r1, r3
 8002f04:	20b4      	movs	r0, #180	@ 0xb4
 8002f06:	f7ff ff45 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002f0a:	4a28      	ldr	r2, [pc, #160]	@ (8002fac <initializeScreen+0x154>)
 8002f0c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f10:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002f14:	6018      	str	r0, [r3, #0]
 8002f16:	3304      	adds	r3, #4
 8002f18:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002f1a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002f1e:	2206      	movs	r2, #6
 8002f20:	4619      	mov	r1, r3
 8002f22:	20b6      	movs	r0, #182	@ 0xb6
 8002f24:	f7ff ff36 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002f28:	4b21      	ldr	r3, [pc, #132]	@ (8002fb0 <initializeScreen+0x158>)
 8002f2a:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002f2e:	461d      	mov	r5, r3
 8002f30:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f32:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f34:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f38:	c407      	stmia	r4!, {r0, r1, r2}
 8002f3a:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002f3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002f40:	221e      	movs	r2, #30
 8002f42:	4619      	mov	r1, r3
 8002f44:	20e0      	movs	r0, #224	@ 0xe0
 8002f46:	f7ff ff25 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <initializeScreen+0x15c>)
 8002f4c:	f107 040c 	add.w	r4, r7, #12
 8002f50:	461d      	mov	r5, r3
 8002f52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002f54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002f56:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002f5a:	c407      	stmia	r4!, {r0, r1, r2}
 8002f5c:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002f5e:	f107 030c 	add.w	r3, r7, #12
 8002f62:	221e      	movs	r2, #30
 8002f64:	4619      	mov	r1, r3
 8002f66:	20e1      	movs	r0, #225	@ 0xe1
 8002f68:	f7ff ff14 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	813b      	strh	r3, [r7, #8]
 8002f70:	2322      	movs	r3, #34	@ 0x22
 8002f72:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f74:	f107 0308 	add.w	r3, r7, #8
 8002f78:	2204      	movs	r2, #4
 8002f7a:	4619      	mov	r1, r3
 8002f7c:	20b6      	movs	r0, #182	@ 0xb6
 8002f7e:	f7ff ff09 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f82:	2308      	movs	r3, #8
 8002f84:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2202      	movs	r2, #2
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	2036      	movs	r0, #54	@ 0x36
 8002f8e:	f7ff ff01 	bl	8002d94 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f92:	2000      	movs	r0, #0
 8002f94:	f000 f85a 	bl	800304c <clearScreenfast>
	displayOn();
 8002f98:	f000 f80e 	bl	8002fb8 <displayOn>
}
 8002f9c:	bf00      	nop
 8002f9e:	3770      	adds	r7, #112	@ 0x70
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bdb0      	pop	{r4, r5, r7, pc}
 8002fa4:	0800f400 	.word	0x0800f400
 8002fa8:	0800f404 	.word	0x0800f404
 8002fac:	0800f408 	.word	0x0800f408
 8002fb0:	0800f410 	.word	0x0800f410
 8002fb4:	0800f430 	.word	0x0800f430

08002fb8 <displayOn>:

void displayOn() {
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	2100      	movs	r1, #0
 8002fc0:	2029      	movs	r0, #41	@ 0x29
 8002fc2:	f7ff fee7 	bl	8002d94 <commandAndData>
}
 8002fc6:	bf00      	nop
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002fca:	b590      	push	{r4, r7, lr}
 8002fcc:	b087      	sub	sp, #28
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	4604      	mov	r4, r0
 8002fd2:	4608      	mov	r0, r1
 8002fd4:	4611      	mov	r1, r2
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	4623      	mov	r3, r4
 8002fda:	80fb      	strh	r3, [r7, #6]
 8002fdc:	4603      	mov	r3, r0
 8002fde:	80bb      	strh	r3, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	807b      	strh	r3, [r7, #2]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002fe8:	88bb      	ldrh	r3, [r7, #4]
 8002fea:	0a1b      	lsrs	r3, r3, #8
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	823b      	strh	r3, [r7, #16]
 8002ff0:	88bb      	ldrh	r3, [r7, #4]
 8002ff2:	b2db      	uxtb	r3, r3
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	827b      	strh	r3, [r7, #18]
 8002ff8:	883b      	ldrh	r3, [r7, #0]
 8002ffa:	0a1b      	lsrs	r3, r3, #8
 8002ffc:	b29b      	uxth	r3, r3
 8002ffe:	82bb      	strh	r3, [r7, #20]
 8003000:	883b      	ldrh	r3, [r7, #0]
 8003002:	b2db      	uxtb	r3, r3
 8003004:	b29b      	uxth	r3, r3
 8003006:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8003008:	f107 0310 	add.w	r3, r7, #16
 800300c:	2208      	movs	r2, #8
 800300e:	4619      	mov	r1, r3
 8003010:	202a      	movs	r0, #42	@ 0x2a
 8003012:	f7ff febf 	bl	8002d94 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8003016:	88fb      	ldrh	r3, [r7, #6]
 8003018:	0a1b      	lsrs	r3, r3, #8
 800301a:	b29b      	uxth	r3, r3
 800301c:	813b      	strh	r3, [r7, #8]
 800301e:	88fb      	ldrh	r3, [r7, #6]
 8003020:	b2db      	uxtb	r3, r3
 8003022:	b29b      	uxth	r3, r3
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	887b      	ldrh	r3, [r7, #2]
 8003028:	0a1b      	lsrs	r3, r3, #8
 800302a:	b29b      	uxth	r3, r3
 800302c:	81bb      	strh	r3, [r7, #12]
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	b2db      	uxtb	r3, r3
 8003032:	b29b      	uxth	r3, r3
 8003034:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8003036:	f107 0308 	add.w	r3, r7, #8
 800303a:	2208      	movs	r2, #8
 800303c:	4619      	mov	r1, r3
 800303e:	202b      	movs	r0, #43	@ 0x2b
 8003040:	f7ff fea8 	bl	8002d94 <commandAndData>
	}
}
 8003044:	bf00      	nop
 8003046:	371c      	adds	r7, #28
 8003048:	46bd      	mov	sp, r7
 800304a:	bd90      	pop	{r4, r7, pc}

0800304c <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 800304c:	b580      	push	{r7, lr}
 800304e:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	4602      	mov	r2, r0
 8003058:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 800305c:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8003060:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003068:	f102 020c 	add.w	r2, r2, #12
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e01a      	b.n	80030a6 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8003070:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003074:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8003078:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800307c:	f102 020c 	add.w	r2, r2, #12
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003086:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 800308a:	8809      	ldrh	r1, [r1, #0]
 800308c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003090:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003094:	f103 030c 	add.w	r3, r3, #12
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	3301      	adds	r3, #1
 800309c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030a0:	f102 020c 	add.w	r2, r2, #12
 80030a4:	6013      	str	r3, [r2, #0]
 80030a6:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030aa:	f103 030c 	add.w	r3, r3, #12
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80030b4:	dbdc      	blt.n	8003070 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80030b6:	f240 133f 	movw	r3, #319	@ 0x13f
 80030ba:	f240 12df 	movw	r2, #479	@ 0x1df
 80030be:	2100      	movs	r1, #0
 80030c0:	2000      	movs	r0, #0
 80030c2:	f7ff ff82 	bl	8002fca <modifySpace>
	startCommand(0x2C);
 80030c6:	202c      	movs	r0, #44	@ 0x2c
 80030c8:	f7ff fe8c 	bl	8002de4 <startCommand>
	dataOrRegister(1);
 80030cc:	2001      	movs	r0, #1
 80030ce:	f7ff fe47 	bl	8002d60 <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030d2:	2300      	movs	r3, #0
 80030d4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80030d8:	f102 0208 	add.w	r2, r2, #8
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e019      	b.n	8003114 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 80030e0:	f107 0310 	add.w	r3, r7, #16
 80030e4:	3b08      	subs	r3, #8
 80030e6:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80030ea:	4619      	mov	r1, r3
 80030ec:	4811      	ldr	r0, [pc, #68]	@ (8003134 <clearScreenfast+0xe8>)
 80030ee:	f7ff f999 	bl	8002424 <transmitdma>
		while (!spidatasentflag) {}
 80030f2:	bf00      	nop
 80030f4:	4b10      	ldr	r3, [pc, #64]	@ (8003138 <clearScreenfast+0xec>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d0fa      	beq.n	80030f4 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80030fe:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003102:	f103 0308 	add.w	r3, r3, #8
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800310e:	f102 0208 	add.w	r2, r2, #8
 8003112:	6013      	str	r3, [r2, #0]
 8003114:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003118:	f103 0308 	add.w	r3, r3, #8
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2b05      	cmp	r3, #5
 8003120:	ddde      	ble.n	80030e0 <clearScreenfast+0x94>
	}
	endCommand();
 8003122:	f7ff fe75 	bl	8002e10 <endCommand>
}
 8003126:	bf00      	nop
 8003128:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 800312c:	3710      	adds	r7, #16
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	200001c8 	.word	0x200001c8
 8003138:	20000388 	.word	0x20000388

0800313c <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	460b      	mov	r3, r1
 800314c:	80fb      	strh	r3, [r7, #6]
 800314e:	4613      	mov	r3, r2
 8003150:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	881a      	ldrh	r2, [r3, #0]
 8003156:	88fb      	ldrh	r3, [r7, #6]
 8003158:	085b      	lsrs	r3, r3, #1
 800315a:	b29b      	uxth	r3, r3
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	b29a      	uxth	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	881a      	ldrh	r2, [r3, #0]
 8003168:	88bb      	ldrh	r3, [r7, #4]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	b29a      	uxth	r2, r3
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	801a      	strh	r2, [r3, #0]
}
 8003176:	bf00      	nop
 8003178:	3714      	adds	r7, #20
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003182:	b590      	push	{r4, r7, lr}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	4604      	mov	r4, r0
 800318a:	4608      	mov	r0, r1
 800318c:	4611      	mov	r1, r2
 800318e:	461a      	mov	r2, r3
 8003190:	4623      	mov	r3, r4
 8003192:	80fb      	strh	r3, [r7, #6]
 8003194:	4603      	mov	r3, r0
 8003196:	80bb      	strh	r3, [r7, #4]
 8003198:	460b      	mov	r3, r1
 800319a:	807b      	strh	r3, [r7, #2]
 800319c:	4613      	mov	r3, r2
 800319e:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 80031a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80031a4:	f003 0302 	and.w	r3, r3, #2
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d005      	beq.n	80031b8 <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 80031ac:	883b      	ldrh	r3, [r7, #0]
 80031ae:	887a      	ldrh	r2, [r7, #2]
 80031b0:	1d39      	adds	r1, r7, #4
 80031b2:	1db8      	adds	r0, r7, #6
 80031b4:	f7ff ffc2 	bl	800313c <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 80031b8:	88fb      	ldrh	r3, [r7, #6]
 80031ba:	60fb      	str	r3, [r7, #12]
 80031bc:	e09c      	b.n	80032f8 <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 80031be:	88bb      	ldrh	r3, [r7, #4]
 80031c0:	60bb      	str	r3, [r7, #8]
 80031c2:	e08e      	b.n	80032e2 <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 80031c4:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	429a      	cmp	r2, r3
 80031ca:	bfac      	ite	ge
 80031cc:	2301      	movge	r3, #1
 80031ce:	2300      	movlt	r3, #0
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 80031d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80031d6:	440b      	add	r3, r1
 80031d8:	68f9      	ldr	r1, [r7, #12]
 80031da:	4299      	cmp	r1, r3
 80031dc:	bfb4      	ite	lt
 80031de:	2301      	movlt	r3, #1
 80031e0:	2300      	movge	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	4013      	ands	r3, r2
 80031e6:	b2db      	uxtb	r3, r3
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d077      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	461a      	mov	r2, r3
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	4293      	cmp	r3, r2
 80031f4:	bf0c      	ite	eq
 80031f6:	2301      	moveq	r3, #1
 80031f8:	2300      	movne	r3, #0
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	88fb      	ldrh	r3, [r7, #6]
 80031fe:	4619      	mov	r1, r3
 8003200:	887b      	ldrh	r3, [r7, #2]
 8003202:	440b      	add	r3, r1
 8003204:	3b01      	subs	r3, #1
 8003206:	68f9      	ldr	r1, [r7, #12]
 8003208:	4299      	cmp	r1, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	4313      	orrs	r3, r2
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d024      	beq.n	8003264 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 800321a:	88bb      	ldrh	r3, [r7, #4]
 800321c:	461a      	mov	r2, r3
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	4293      	cmp	r3, r2
 8003222:	bfac      	ite	ge
 8003224:	2301      	movge	r3, #1
 8003226:	2300      	movlt	r3, #0
 8003228:	b2da      	uxtb	r2, r3
 800322a:	88bb      	ldrh	r3, [r7, #4]
 800322c:	4619      	mov	r1, r3
 800322e:	883b      	ldrh	r3, [r7, #0]
 8003230:	440b      	add	r3, r1
 8003232:	68b9      	ldr	r1, [r7, #8]
 8003234:	4299      	cmp	r1, r3
 8003236:	bfb4      	ite	lt
 8003238:	2301      	movlt	r3, #1
 800323a:	2300      	movge	r3, #0
 800323c:	b2db      	uxtb	r3, r3
 800323e:	4013      	ands	r3, r2
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d00e      	beq.n	8003264 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 8003246:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	1ad2      	subs	r2, r2, r3
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	019b      	lsls	r3, r3, #6
 8003254:	461a      	mov	r2, r3
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	4413      	add	r3, r2
 800325a:	005b      	lsls	r3, r3, #1
 800325c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800325e:	4413      	add	r3, r2
 8003260:	8c3a      	ldrh	r2, [r7, #32]
 8003262:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 8003264:	88bb      	ldrh	r3, [r7, #4]
 8003266:	461a      	mov	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	4293      	cmp	r3, r2
 800326c:	bf0c      	ite	eq
 800326e:	2301      	moveq	r3, #1
 8003270:	2300      	movne	r3, #0
 8003272:	b2da      	uxtb	r2, r3
 8003274:	88bb      	ldrh	r3, [r7, #4]
 8003276:	4619      	mov	r1, r3
 8003278:	883b      	ldrh	r3, [r7, #0]
 800327a:	440b      	add	r3, r1
 800327c:	3b01      	subs	r3, #1
 800327e:	68b9      	ldr	r1, [r7, #8]
 8003280:	4299      	cmp	r1, r3
 8003282:	bf0c      	ite	eq
 8003284:	2301      	moveq	r3, #1
 8003286:	2300      	movne	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	4313      	orrs	r3, r2
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d024      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 8003292:	88fb      	ldrh	r3, [r7, #6]
 8003294:	461a      	mov	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	4293      	cmp	r3, r2
 800329a:	bfac      	ite	ge
 800329c:	2301      	movge	r3, #1
 800329e:	2300      	movlt	r3, #0
 80032a0:	b2da      	uxtb	r2, r3
 80032a2:	88fb      	ldrh	r3, [r7, #6]
 80032a4:	4619      	mov	r1, r3
 80032a6:	887b      	ldrh	r3, [r7, #2]
 80032a8:	440b      	add	r3, r1
 80032aa:	68f9      	ldr	r1, [r7, #12]
 80032ac:	4299      	cmp	r1, r3
 80032ae:	bfb4      	ite	lt
 80032b0:	2301      	movlt	r3, #1
 80032b2:	2300      	movge	r3, #0
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	4013      	ands	r3, r2
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00e      	beq.n	80032dc <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80032be:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80032c0:	68fa      	ldr	r2, [r7, #12]
 80032c2:	1ad2      	subs	r2, r2, r3
 80032c4:	4613      	mov	r3, r2
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	4413      	add	r3, r2
 80032ca:	019b      	lsls	r3, r3, #6
 80032cc:	461a      	mov	r2, r3
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4413      	add	r3, r2
 80032d2:	005b      	lsls	r3, r3, #1
 80032d4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032d6:	4413      	add	r3, r2
 80032d8:	8c3a      	ldrh	r2, [r7, #32]
 80032da:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	3301      	adds	r3, #1
 80032e0:	60bb      	str	r3, [r7, #8]
 80032e2:	88bb      	ldrh	r3, [r7, #4]
 80032e4:	461a      	mov	r2, r3
 80032e6:	883b      	ldrh	r3, [r7, #0]
 80032e8:	4413      	add	r3, r2
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	f6ff af69 	blt.w	80031c4 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	3301      	adds	r3, #1
 80032f6:	60fb      	str	r3, [r7, #12]
 80032f8:	88fb      	ldrh	r3, [r7, #6]
 80032fa:	461a      	mov	r2, r3
 80032fc:	887b      	ldrh	r3, [r7, #2]
 80032fe:	4413      	add	r3, r2
 8003300:	68fa      	ldr	r2, [r7, #12]
 8003302:	429a      	cmp	r2, r3
 8003304:	f6ff af5b 	blt.w	80031be <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3714      	adds	r7, #20
 800330e:	46bd      	mov	sp, r7
 8003310:	bd90      	pop	{r4, r7, pc}

08003312 <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8003312:	b480      	push	{r7}
 8003314:	b089      	sub	sp, #36	@ 0x24
 8003316:	af00      	add	r7, sp, #0
 8003318:	60f8      	str	r0, [r7, #12]
 800331a:	60b9      	str	r1, [r7, #8]
 800331c:	607a      	str	r2, [r7, #4]
 800331e:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003328:	e015      	b.n	8003356 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685a      	ldr	r2, [r3, #4]
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	4619      	mov	r1, r3
 8003334:	460b      	mov	r3, r1
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003340:	4413      	add	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	791b      	ldrb	r3, [r3, #4]
 8003348:	461a      	mov	r2, r3
 800334a:	8b7b      	ldrh	r3, [r7, #26]
 800334c:	4413      	add	r3, r2
 800334e:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1e5      	bne.n	800332a <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	881a      	ldrh	r2, [r3, #0]
 8003362:	8b7b      	ldrh	r3, [r7, #26]
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	b29b      	uxth	r3, r3
 8003368:	1ad3      	subs	r3, r2, r3
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003370:	bf00      	nop
 8003372:	3724      	adds	r7, #36	@ 0x24
 8003374:	46bd      	mov	sp, r7
 8003376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337a:	4770      	bx	lr

0800337c <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	@ 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	60f8      	str	r0, [r7, #12]
 8003384:	60b9      	str	r1, [r7, #8]
 8003386:	607a      	str	r2, [r7, #4]
 8003388:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800338e:	2300      	movs	r3, #0
 8003390:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003392:	e015      	b.n	80033c0 <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	685a      	ldr	r2, [r3, #4]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	460b      	mov	r3, r1
 80033a0:	009b      	lsls	r3, r3, #2
 80033a2:	440b      	add	r3, r1
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033aa:	4413      	add	r3, r2
 80033ac:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	791b      	ldrb	r3, [r3, #4]
 80033b2:	461a      	mov	r2, r3
 80033b4:	8b7b      	ldrh	r3, [r7, #26]
 80033b6:	4413      	add	r3, r2
 80033b8:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d1e5      	bne.n	8003394 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	8b7b      	ldrh	r3, [r7, #26]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	b29a      	uxth	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80033d6:	bf00      	nop
 80033d8:	3724      	adds	r7, #36	@ 0x24
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 80033e2:	b480      	push	{r7}
 80033e4:	b085      	sub	sp, #20
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	4603      	mov	r3, r0
 80033ea:	6039      	str	r1, [r7, #0]
 80033ec:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	6859      	ldr	r1, [r3, #4]
 80033f2:	79fa      	ldrb	r2, [r7, #7]
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	005b      	lsls	r3, r3, #1
 80033fc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003400:	440b      	add	r3, r1
 8003402:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	791b      	ldrb	r3, [r3, #4]
}
 8003408:	4618      	mov	r0, r3
 800340a:	3714      	adds	r7, #20
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003414:	b480      	push	{r7}
 8003416:	b08d      	sub	sp, #52	@ 0x34
 8003418:	af00      	add	r7, sp, #0
 800341a:	60b9      	str	r1, [r7, #8]
 800341c:	4611      	mov	r1, r2
 800341e:	461a      	mov	r2, r3
 8003420:	4603      	mov	r3, r0
 8003422:	73fb      	strb	r3, [r7, #15]
 8003424:	460b      	mov	r3, r1
 8003426:	81bb      	strh	r3, [r7, #12]
 8003428:	4613      	mov	r3, r2
 800342a:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	6859      	ldr	r1, [r3, #4]
 8003430:	7bfa      	ldrb	r2, [r7, #15]
 8003432:	4613      	mov	r3, r2
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	4413      	add	r3, r2
 8003438:	005b      	lsls	r3, r3, #1
 800343a:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800343e:	440b      	add	r3, r1
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003444:	789b      	ldrb	r3, [r3, #2]
 8003446:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800344a:	78db      	ldrb	r3, [r3, #3]
 800344c:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 800344e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003450:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8003454:	77fb      	strb	r3, [r7, #31]
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800345c:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 800345e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003460:	791b      	ldrb	r3, [r3, #4]
 8003462:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	881b      	ldrh	r3, [r3, #0]
 800346e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8003470:	2300      	movs	r3, #0
 8003472:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003476:	2300      	movs	r3, #0
 8003478:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 800347c:	2300      	movs	r3, #0
 800347e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003480:	e071      	b.n	8003566 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 8003482:	2300      	movs	r3, #0
 8003484:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003486:	e062      	b.n	800354e <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003488:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800348c:	1c5a      	adds	r2, r3, #1
 800348e:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	2b00      	cmp	r3, #0
 8003498:	d108      	bne.n	80034ac <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 800349a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 80034a0:	461a      	mov	r2, r3
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	4413      	add	r3, r2
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 80034ac:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	da41      	bge.n	8003538 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 80034b4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80034b8:	b29a      	uxth	r2, r3
 80034ba:	88fb      	ldrh	r3, [r7, #6]
 80034bc:	4413      	add	r3, r2
 80034be:	b29a      	uxth	r2, r3
 80034c0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80034cc:	1ad3      	subs	r3, r2, r3
 80034ce:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 80034d0:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80034d2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	b29a      	uxth	r2, r3
 80034d8:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 80034e2:	8afa      	ldrh	r2, [r7, #22]
 80034e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034e8:	429a      	cmp	r2, r3
 80034ea:	bf2c      	ite	cs
 80034ec:	2301      	movcs	r3, #1
 80034ee:	2300      	movcc	r3, #0
 80034f0:	b2da      	uxtb	r2, r3
 80034f2:	8af9      	ldrh	r1, [r7, #22]
 80034f4:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80034f8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80034fc:	4403      	add	r3, r0
 80034fe:	4299      	cmp	r1, r3
 8003500:	bfb4      	ite	lt
 8003502:	2301      	movlt	r3, #1
 8003504:	2300      	movge	r3, #0
 8003506:	b2db      	uxtb	r3, r3
 8003508:	4013      	ands	r3, r2
 800350a:	b2db      	uxtb	r3, r3
 800350c:	2b00      	cmp	r3, #0
 800350e:	d013      	beq.n	8003538 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 8003510:	8abb      	ldrh	r3, [r7, #20]
 8003512:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8003516:	d20f      	bcs.n	8003538 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 8003518:	8afa      	ldrh	r2, [r7, #22]
 800351a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800351e:	1ad2      	subs	r2, r2, r3
 8003520:	4613      	mov	r3, r2
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	019b      	lsls	r3, r3, #6
 8003528:	461a      	mov	r2, r3
 800352a:	8abb      	ldrh	r3, [r7, #20]
 800352c:	4413      	add	r3, r2
 800352e:	005b      	lsls	r3, r3, #1
 8003530:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003532:	4413      	add	r3, r2
 8003534:	89ba      	ldrh	r2, [r7, #12]
 8003536:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 8003538:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800353c:	005b      	lsls	r3, r3, #1
 800353e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 8003542:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003546:	b29b      	uxth	r3, r3
 8003548:	3301      	adds	r3, #1
 800354a:	b29b      	uxth	r3, r3
 800354c:	853b      	strh	r3, [r7, #40]	@ 0x28
 800354e:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8003552:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003556:	429a      	cmp	r2, r3
 8003558:	db96      	blt.n	8003488 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 800355a:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800355e:	b29b      	uxth	r3, r3
 8003560:	3301      	adds	r3, #1
 8003562:	b29b      	uxth	r3, r3
 8003564:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003566:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 800356a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800356e:	429a      	cmp	r2, r3
 8003570:	db87      	blt.n	8003482 <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 8003572:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003576:	b29b      	uxth	r3, r3
}
 8003578:	4618      	mov	r0, r3
 800357a:	3734      	adds	r7, #52	@ 0x34
 800357c:	46bd      	mov	sp, r7
 800357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003582:	4770      	bx	lr

08003584 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003584:	b590      	push	{r4, r7, lr}
 8003586:	b08d      	sub	sp, #52	@ 0x34
 8003588:	af06      	add	r7, sp, #24
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	4611      	mov	r1, r2
 8003590:	461a      	mov	r2, r3
 8003592:	460b      	mov	r3, r1
 8003594:	80fb      	strh	r3, [r7, #6]
 8003596:	4613      	mov	r3, r2
 8003598:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 800359a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800359e:	f003 0302 	and.w	r3, r3, #2
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d007      	beq.n	80035b6 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 80035a6:	1d38      	adds	r0, r7, #4
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	68fa      	ldr	r2, [r7, #12]
 80035ac:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80035b0:	f7ff feaf 	bl	8003312 <getStringCenter>
 80035b4:	e00c      	b.n	80035d0 <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 80035b6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80035ba:	f003 0301 	and.w	r3, r3, #1
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d006      	beq.n	80035d0 <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 80035c2:	1d38      	adds	r0, r7, #4
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80035cc:	f7ff fed6 	bl	800337c <getStringLeft>
	}
	uint16_t xAdvance = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 80035d8:	bf00      	nop
 80035da:	8abb      	ldrh	r3, [r7, #20]
 80035dc:	3301      	adds	r3, #1
 80035de:	82bb      	strh	r3, [r7, #20]
 80035e0:	8abb      	ldrh	r3, [r7, #20]
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	4413      	add	r3, r2
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f6      	bne.n	80035da <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 80035ec:	8abb      	ldrh	r3, [r7, #20]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	e047      	b.n	8003684 <drawStringIntoFramebuffer+0x100>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 80035f4:	88bb      	ldrh	r3, [r7, #4]
 80035f6:	461a      	mov	r2, r3
 80035f8:	8afb      	ldrh	r3, [r7, #22]
 80035fa:	441a      	add	r2, r3
 80035fc:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 80035fe:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003600:	440b      	add	r3, r1
 8003602:	429a      	cmp	r2, r3
 8003604:	dc42      	bgt.n	800368c <drawStringIntoFramebuffer+0x108>
			//xAdvance += getCharXadv(buffer[i], font);
			break;
		}
		if ((stringxpos + xAdvance + getCharXadv(buffer[i], font)) < xstart) {
 8003606:	88bb      	ldrh	r3, [r7, #4]
 8003608:	461a      	mov	r2, r3
 800360a:	8afb      	ldrh	r3, [r7, #22]
 800360c:	18d4      	adds	r4, r2, r3
 800360e:	693b      	ldr	r3, [r7, #16]
 8003610:	68fa      	ldr	r2, [r7, #12]
 8003612:	4413      	add	r3, r2
 8003614:	781b      	ldrb	r3, [r3, #0]
 8003616:	68b9      	ldr	r1, [r7, #8]
 8003618:	4618      	mov	r0, r3
 800361a:	f7ff fee2 	bl	80033e2 <getCharXadv>
 800361e:	4603      	mov	r3, r0
 8003620:	18e2      	adds	r2, r4, r3
 8003622:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8003624:	429a      	cmp	r2, r3
 8003626:	da0d      	bge.n	8003644 <drawStringIntoFramebuffer+0xc0>
			xAdvance += getCharXadv(buffer[i], font);
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	68fa      	ldr	r2, [r7, #12]
 800362c:	4413      	add	r3, r2
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	68b9      	ldr	r1, [r7, #8]
 8003632:	4618      	mov	r0, r3
 8003634:	f7ff fed5 	bl	80033e2 <getCharXadv>
 8003638:	4603      	mov	r3, r0
 800363a:	461a      	mov	r2, r3
 800363c:	8afb      	ldrh	r3, [r7, #22]
 800363e:	4413      	add	r3, r2
 8003640:	82fb      	strh	r3, [r7, #22]
			continue;
 8003642:	e01c      	b.n	800367e <drawStringIntoFramebuffer+0xfa>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4413      	add	r3, r2
 800364a:	7818      	ldrb	r0, [r3, #0]
 800364c:	88ba      	ldrh	r2, [r7, #4]
 800364e:	8afb      	ldrh	r3, [r7, #22]
 8003650:	4413      	add	r3, r2
 8003652:	b29c      	uxth	r4, r3
 8003654:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003656:	88f9      	ldrh	r1, [r7, #6]
 8003658:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800365a:	9204      	str	r2, [sp, #16]
 800365c:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800365e:	9203      	str	r2, [sp, #12]
 8003660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003662:	9202      	str	r2, [sp, #8]
 8003664:	2200      	movs	r2, #0
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	4623      	mov	r3, r4
 800366c:	460a      	mov	r2, r1
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	f7ff fed0 	bl	8003414 <drawCharIntoFramebuffer>
 8003674:	4603      	mov	r3, r0
 8003676:	461a      	mov	r2, r3
 8003678:	8afb      	ldrh	r3, [r7, #22]
 800367a:	4413      	add	r3, r2
 800367c:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3b01      	subs	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b00      	cmp	r3, #0
 8003688:	dab4      	bge.n	80035f4 <drawStringIntoFramebuffer+0x70>
 800368a:	e000      	b.n	800368e <drawStringIntoFramebuffer+0x10a>
			break;
 800368c:	bf00      	nop
	}
	return font->yAdvance;
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	7b1b      	ldrb	r3, [r3, #12]
}
 8003692:	4618      	mov	r0, r3
 8003694:	371c      	adds	r7, #28
 8003696:	46bd      	mov	sp, r7
 8003698:	bd90      	pop	{r4, r7, pc}

0800369a <drawImageIntoFramebuffer>:
		USB_Println("failure to open %s\n", image);
	}
}

void drawImageIntoFramebuffer(FIL newfile, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800369a:	b084      	sub	sp, #16
 800369c:	b580      	push	{r7, lr}
 800369e:	f5ad 6d01 	sub.w	sp, sp, #2064	@ 0x810
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	f607 0c18 	addw	ip, r7, #2072	@ 0x818
 80036a8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	if (positioning & CENTER_OBJECT) {
 80036ac:	f897 3a58 	ldrb.w	r3, [r7, #2648]	@ 0xa58
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d009      	beq.n	80036cc <drawImageIntoFramebuffer+0x32>
		 getRectCenter(&x, &y, length, height);
 80036b8:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	@ 0xa4c
 80036bc:	f8b7 2a48 	ldrh.w	r2, [r7, #2632]	@ 0xa48
 80036c0:	f607 2154 	addw	r1, r7, #2644	@ 0xa54
 80036c4:	f507 6025 	add.w	r0, r7, #2640	@ 0xa50
 80036c8:	f7ff fd38 	bl	800313c <getRectCenter>
	}
	uint16_t readbuffer[1024];
	unsigned int br = 0;
 80036cc:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 80036d0:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 80036d4:	2200      	movs	r2, #0
 80036d6:	601a      	str	r2, [r3, #0]
	f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 80036d8:	463b      	mov	r3, r7
 80036da:	1d39      	adds	r1, r7, #4
 80036dc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80036e0:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 80036e4:	f00a f91e 	bl	800d924 <f_read>
	int i = 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
	for (int xx = xstart; xx < xstart + framewidth; xx++) {
 80036ee:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 80036f2:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80036f6:	e062      	b.n	80037be <drawImageIntoFramebuffer+0x124>
		if ((xx >= x) && (xx < (x + length))) {
 80036f8:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	@ 0xa50
 80036fc:	461a      	mov	r2, r3
 80036fe:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 8003702:	4293      	cmp	r3, r2
 8003704:	db56      	blt.n	80037b4 <drawImageIntoFramebuffer+0x11a>
 8003706:	f8b7 3a50 	ldrh.w	r3, [r7, #2640]	@ 0xa50
 800370a:	461a      	mov	r2, r3
 800370c:	f8b7 3a48 	ldrh.w	r3, [r7, #2632]	@ 0xa48
 8003710:	4413      	add	r3, r2
 8003712:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 8003716:	429a      	cmp	r2, r3
 8003718:	da4c      	bge.n	80037b4 <drawImageIntoFramebuffer+0x11a>
			for (int yy = 0; yy < SCREEN_HEIGHT; yy++) {
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 8003720:	e043      	b.n	80037aa <drawImageIntoFramebuffer+0x110>
				if ((yy >= y) && (yy < (y + height))) {
 8003722:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	@ 0xa54
 8003726:	461a      	mov	r2, r3
 8003728:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 800372c:	4293      	cmp	r3, r2
 800372e:	db37      	blt.n	80037a0 <drawImageIntoFramebuffer+0x106>
 8003730:	f8b7 3a54 	ldrh.w	r3, [r7, #2644]	@ 0xa54
 8003734:	461a      	mov	r2, r3
 8003736:	f8b7 3a4c 	ldrh.w	r3, [r7, #2636]	@ 0xa4c
 800373a:	4413      	add	r3, r2
 800373c:	f8d7 2804 	ldr.w	r2, [r7, #2052]	@ 0x804
 8003740:	429a      	cmp	r2, r3
 8003742:	da2d      	bge.n	80037a0 <drawImageIntoFramebuffer+0x106>
					framebuffer[(xx - xstart) * SCREEN_HEIGHT + yy] = readbuffer[i++];
 8003744:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8003748:	1c53      	adds	r3, r2, #1
 800374a:	f8c7 380c 	str.w	r3, [r7, #2060]	@ 0x80c
 800374e:	f8b7 3a64 	ldrh.w	r3, [r7, #2660]	@ 0xa64
 8003752:	f8d7 1808 	ldr.w	r1, [r7, #2056]	@ 0x808
 8003756:	1ac9      	subs	r1, r1, r3
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	019b      	lsls	r3, r3, #6
 8003760:	4619      	mov	r1, r3
 8003762:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 8003766:	440b      	add	r3, r1
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	f8d7 1a5c 	ldr.w	r1, [r7, #2652]	@ 0xa5c
 800376e:	440b      	add	r3, r1
 8003770:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003774:	f6a1 010c 	subw	r1, r1, #2060	@ 0x80c
 8003778:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 800377c:	801a      	strh	r2, [r3, #0]
					if (i > br) {
 800377e:	f8d7 280c 	ldr.w	r2, [r7, #2060]	@ 0x80c
 8003782:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003786:	f5a3 6301 	sub.w	r3, r3, #2064	@ 0x810
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	429a      	cmp	r2, r3
 800378e:	d907      	bls.n	80037a0 <drawImageIntoFramebuffer+0x106>
						f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003790:	463b      	mov	r3, r7
 8003792:	1d39      	adds	r1, r7, #4
 8003794:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003798:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 800379c:	f00a f8c2 	bl	800d924 <f_read>
			for (int yy = 0; yy < SCREEN_HEIGHT; yy++) {
 80037a0:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80037a4:	3301      	adds	r3, #1
 80037a6:	f8c7 3804 	str.w	r3, [r7, #2052]	@ 0x804
 80037aa:	f8d7 3804 	ldr.w	r3, [r7, #2052]	@ 0x804
 80037ae:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80037b2:	dbb6      	blt.n	8003722 <drawImageIntoFramebuffer+0x88>
	for (int xx = xstart; xx < xstart + framewidth; xx++) {
 80037b4:	f8d7 3808 	ldr.w	r3, [r7, #2056]	@ 0x808
 80037b8:	3301      	adds	r3, #1
 80037ba:	f8c7 3808 	str.w	r3, [r7, #2056]	@ 0x808
 80037be:	f8b7 2a64 	ldrh.w	r2, [r7, #2660]	@ 0xa64
 80037c2:	f8b7 3a60 	ldrh.w	r3, [r7, #2656]	@ 0xa60
 80037c6:	4413      	add	r3, r2
 80037c8:	f8d7 2808 	ldr.w	r2, [r7, #2056]	@ 0x808
 80037cc:	429a      	cmp	r2, r3
 80037ce:	db93      	blt.n	80036f8 <drawImageIntoFramebuffer+0x5e>
					}
				}
			}
		}
	}
	f_close(&newfile);
 80037d0:	f607 0018 	addw	r0, r7, #2072	@ 0x818
 80037d4:	f00a fa63 	bl	800dc9e <f_close>
}
 80037d8:	bf00      	nop
 80037da:	f507 6701 	add.w	r7, r7, #2064	@ 0x810
 80037de:	46bd      	mov	sp, r7
 80037e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80037e4:	b004      	add	sp, #16
 80037e6:	4770      	bx	lr

080037e8 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af04      	add	r7, sp, #16
 80037ee:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 80037f0:	220a      	movs	r2, #10
 80037f2:	490f      	ldr	r1, [pc, #60]	@ (8003830 <setrpmdata+0x48>)
 80037f4:	480f      	ldr	r0, [pc, #60]	@ (8003834 <setrpmdata+0x4c>)
 80037f6:	f00b f980 	bl	800eafa <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80037fa:	220a      	movs	r2, #10
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	480d      	ldr	r0, [pc, #52]	@ (8003834 <setrpmdata+0x4c>)
 8003800:	f00b f968 	bl	800ead4 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 8003804:	4b0c      	ldr	r3, [pc, #48]	@ (8003838 <setrpmdata+0x50>)
 8003806:	6818      	ldr	r0, [r3, #0]
 8003808:	2301      	movs	r3, #1
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003810:	9302      	str	r3, [sp, #8]
 8003812:	23c8      	movs	r3, #200	@ 0xc8
 8003814:	9301      	str	r3, [sp, #4]
 8003816:	4b09      	ldr	r3, [pc, #36]	@ (800383c <setrpmdata+0x54>)
 8003818:	9300      	str	r3, [sp, #0]
 800381a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800381e:	2200      	movs	r2, #0
 8003820:	4904      	ldr	r1, [pc, #16]	@ (8003834 <setrpmdata+0x4c>)
 8003822:	f7ff f8df 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003826:	bf00      	nop
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	0800f49c 	.word	0x0800f49c
 8003834:	2000038c 	.word	0x2000038c
 8003838:	200003dc 	.word	0x200003dc
 800383c:	080127a4 	.word	0x080127a4

08003840 <settempdata>:

void settempdata(char *tempvalue) {
 8003840:	b580      	push	{r7, lr}
 8003842:	b086      	sub	sp, #24
 8003844:	af04      	add	r7, sp, #16
 8003846:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003848:	220a      	movs	r2, #10
 800384a:	490f      	ldr	r1, [pc, #60]	@ (8003888 <settempdata+0x48>)
 800384c:	480f      	ldr	r0, [pc, #60]	@ (800388c <settempdata+0x4c>)
 800384e:	f00b f954 	bl	800eafa <strncpy>
	strncat(tempresult, tempvalue, 10);
 8003852:	220a      	movs	r2, #10
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	480d      	ldr	r0, [pc, #52]	@ (800388c <settempdata+0x4c>)
 8003858:	f00b f93c 	bl	800ead4 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 800385c:	4b0c      	ldr	r3, [pc, #48]	@ (8003890 <settempdata+0x50>)
 800385e:	6858      	ldr	r0, [r3, #4]
 8003860:	2303      	movs	r3, #3
 8003862:	9303      	str	r3, [sp, #12]
 8003864:	2364      	movs	r3, #100	@ 0x64
 8003866:	9302      	str	r3, [sp, #8]
 8003868:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800386c:	9301      	str	r3, [sp, #4]
 800386e:	4b09      	ldr	r3, [pc, #36]	@ (8003894 <settempdata+0x54>)
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003876:	2202      	movs	r2, #2
 8003878:	4904      	ldr	r1, [pc, #16]	@ (800388c <settempdata+0x4c>)
 800387a:	f7ff f8b3 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	0800f49c 	.word	0x0800f49c
 800388c:	200003a0 	.word	0x200003a0
 8003890:	200003dc 	.word	0x200003dc
 8003894:	0801094c 	.word	0x0801094c

08003898 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003898:	b580      	push	{r7, lr}
 800389a:	b086      	sub	sp, #24
 800389c:	af04      	add	r7, sp, #16
 800389e:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 80038a0:	220a      	movs	r2, #10
 80038a2:	490e      	ldr	r1, [pc, #56]	@ (80038dc <setgeardata+0x44>)
 80038a4:	480e      	ldr	r0, [pc, #56]	@ (80038e0 <setgeardata+0x48>)
 80038a6:	f00b f928 	bl	800eafa <strncpy>
	strncat(gearresult, gearvalue, 10);
 80038aa:	220a      	movs	r2, #10
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	480c      	ldr	r0, [pc, #48]	@ (80038e0 <setgeardata+0x48>)
 80038b0:	f00b f910 	bl	800ead4 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 80038b4:	4b0b      	ldr	r3, [pc, #44]	@ (80038e4 <setgeardata+0x4c>)
 80038b6:	68d8      	ldr	r0, [r3, #12]
 80038b8:	2302      	movs	r3, #2
 80038ba:	9303      	str	r3, [sp, #12]
 80038bc:	23f0      	movs	r3, #240	@ 0xf0
 80038be:	9302      	str	r3, [sp, #8]
 80038c0:	2364      	movs	r3, #100	@ 0x64
 80038c2:	9301      	str	r3, [sp, #4]
 80038c4:	4b08      	ldr	r3, [pc, #32]	@ (80038e8 <setgeardata+0x50>)
 80038c6:	9300      	str	r3, [sp, #0]
 80038c8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038cc:	2202      	movs	r2, #2
 80038ce:	4904      	ldr	r1, [pc, #16]	@ (80038e0 <setgeardata+0x48>)
 80038d0:	f7ff f888 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80038d4:	bf00      	nop
 80038d6:	3708      	adds	r7, #8
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	0800f49c 	.word	0x0800f49c
 80038e0:	20000008 	.word	0x20000008
 80038e4:	200003dc 	.word	0x200003dc
 80038e8:	08016bb0 	.word	0x08016bb0

080038ec <setbattdata>:

void setbattdata(char *battvalue) {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b086      	sub	sp, #24
 80038f0:	af04      	add	r7, sp, #16
 80038f2:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80038f4:	220a      	movs	r2, #10
 80038f6:	490f      	ldr	r1, [pc, #60]	@ (8003934 <setbattdata+0x48>)
 80038f8:	480f      	ldr	r0, [pc, #60]	@ (8003938 <setbattdata+0x4c>)
 80038fa:	f00b f8fe 	bl	800eafa <strncpy>
	strncat(battresult, battvalue, 10);
 80038fe:	220a      	movs	r2, #10
 8003900:	6879      	ldr	r1, [r7, #4]
 8003902:	480d      	ldr	r0, [pc, #52]	@ (8003938 <setbattdata+0x4c>)
 8003904:	f00b f8e6 	bl	800ead4 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 8003908:	4b0c      	ldr	r3, [pc, #48]	@ (800393c <setbattdata+0x50>)
 800390a:	6898      	ldr	r0, [r3, #8]
 800390c:	2306      	movs	r3, #6
 800390e:	9303      	str	r3, [sp, #12]
 8003910:	233c      	movs	r3, #60	@ 0x3c
 8003912:	9302      	str	r3, [sp, #8]
 8003914:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003918:	9301      	str	r3, [sp, #4]
 800391a:	4b09      	ldr	r3, [pc, #36]	@ (8003940 <setbattdata+0x54>)
 800391c:	9300      	str	r3, [sp, #0]
 800391e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003922:	2202      	movs	r2, #2
 8003924:	4904      	ldr	r1, [pc, #16]	@ (8003938 <setbattdata+0x4c>)
 8003926:	f7ff f85d 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800392a:	bf00      	nop
 800392c:	3708      	adds	r7, #8
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	0800f49c 	.word	0x0800f49c
 8003938:	200003c8 	.word	0x200003c8
 800393c:	200003dc 	.word	0x200003dc
 8003940:	0801094c 	.word	0x0801094c

08003944 <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003944:	b580      	push	{r7, lr}
 8003946:	b086      	sub	sp, #24
 8003948:	af04      	add	r7, sp, #16
 800394a:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 800394c:	220a      	movs	r2, #10
 800394e:	490f      	ldr	r1, [pc, #60]	@ (800398c <setspeeddata+0x48>)
 8003950:	480f      	ldr	r0, [pc, #60]	@ (8003990 <setspeeddata+0x4c>)
 8003952:	f00b f8d2 	bl	800eafa <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003956:	220a      	movs	r2, #10
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	480d      	ldr	r0, [pc, #52]	@ (8003990 <setspeeddata+0x4c>)
 800395c:	f00b f8ba 	bl	800ead4 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 375, 185, 7);
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <setspeeddata+0x50>)
 8003962:	6998      	ldr	r0, [r3, #24]
 8003964:	2307      	movs	r3, #7
 8003966:	9303      	str	r3, [sp, #12]
 8003968:	23b9      	movs	r3, #185	@ 0xb9
 800396a:	9302      	str	r3, [sp, #8]
 800396c:	f240 1377 	movw	r3, #375	@ 0x177
 8003970:	9301      	str	r3, [sp, #4]
 8003972:	4b09      	ldr	r3, [pc, #36]	@ (8003998 <setspeeddata+0x54>)
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800397a:	2201      	movs	r2, #1
 800397c:	4904      	ldr	r1, [pc, #16]	@ (8003990 <setspeeddata+0x4c>)
 800397e:	f7ff f831 	bl	80029e4 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003982:	bf00      	nop
 8003984:	3708      	adds	r7, #8
 8003986:	46bd      	mov	sp, r7
 8003988:	bd80      	pop	{r7, pc}
 800398a:	bf00      	nop
 800398c:	0800f49c 	.word	0x0800f49c
 8003990:	200003b4 	.word	0x200003b4
 8003994:	200003dc 	.word	0x200003dc
 8003998:	0801094c 	.word	0x0801094c

0800399c <domainscreen>:

void domainscreen() {
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 80039a0:	4804      	ldr	r0, [pc, #16]	@ (80039b4 <domainscreen+0x18>)
 80039a2:	f7fe fdb1 	bl	8002508 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 10);
 80039a6:	220a      	movs	r2, #10
 80039a8:	4903      	ldr	r1, [pc, #12]	@ (80039b8 <domainscreen+0x1c>)
 80039aa:	4802      	ldr	r0, [pc, #8]	@ (80039b4 <domainscreen+0x18>)
 80039ac:	f7fe fd78 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80039b0:	bf00      	nop
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	20000404 	.word	0x20000404
 80039b8:	200003dc 	.word	0x200003dc

080039bc <dosplashscene>:

void dosplashscene() {
 80039bc:	b580      	push	{r7, lr}
 80039be:	af00      	add	r7, sp, #0
	splashScene.drawScene();
 80039c0:	4804      	ldr	r0, [pc, #16]	@ (80039d4 <dosplashscene+0x18>)
 80039c2:	f7fe fda1 	bl	8002508 <_ZN5Scene9drawSceneEv>
	splashScene.setScene(splashobjects, 1);
 80039c6:	2201      	movs	r2, #1
 80039c8:	4903      	ldr	r1, [pc, #12]	@ (80039d8 <dosplashscene+0x1c>)
 80039ca:	4802      	ldr	r0, [pc, #8]	@ (80039d4 <dosplashscene+0x18>)
 80039cc:	f7fe fd68 	bl	80024a0 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80039d0:	bf00      	nop
 80039d2:	bd80      	pop	{r7, pc}
 80039d4:	20000410 	.word	0x20000410
 80039d8:	2000040c 	.word	0x2000040c

080039dc <_Z41__static_initialization_and_destruction_0v>:
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b085      	sub	sp, #20
 80039e0:	af04      	add	r7, sp, #16
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 80039e2:	2018      	movs	r0, #24
 80039e4:	f00a fef4 	bl	800e7d0 <_Znwj>
 80039e8:	4603      	mov	r3, r0
 80039ea:	461c      	mov	r4, r3
 80039ec:	2301      	movs	r3, #1
 80039ee:	9303      	str	r3, [sp, #12]
 80039f0:	4b82      	ldr	r3, [pc, #520]	@ (8003bfc <_Z41__static_initialization_and_destruction_0v+0x220>)
 80039f2:	9302      	str	r3, [sp, #8]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9301      	str	r3, [sp, #4]
 80039f8:	4b81      	ldr	r3, [pc, #516]	@ (8003c00 <_Z41__static_initialization_and_destruction_0v+0x224>)
 80039fa:	9300      	str	r3, [sp, #0]
 80039fc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003a04:	21c8      	movs	r1, #200	@ 0xc8
 8003a06:	4620      	mov	r0, r4
 8003a08:	f7fe ff7a 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a0c:	4b7d      	ldr	r3, [pc, #500]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a0e:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003a10:	2018      	movs	r0, #24
 8003a12:	f00a fedd 	bl	800e7d0 <_Znwj>
 8003a16:	4603      	mov	r3, r0
 8003a18:	461c      	mov	r4, r3
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	9303      	str	r3, [sp, #12]
 8003a1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003c08 <_Z41__static_initialization_and_destruction_0v+0x22c>)
 8003a20:	9302      	str	r3, [sp, #8]
 8003a22:	2302      	movs	r3, #2
 8003a24:	9301      	str	r3, [sp, #4]
 8003a26:	4b79      	ldr	r3, [pc, #484]	@ (8003c0c <_Z41__static_initialization_and_destruction_0v+0x230>)
 8003a28:	9300      	str	r3, [sp, #0]
 8003a2a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a2e:	2264      	movs	r2, #100	@ 0x64
 8003a30:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003a34:	4620      	mov	r0, r4
 8003a36:	f7fe ff63 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a3a:	4b72      	ldr	r3, [pc, #456]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a3c:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003a3e:	2018      	movs	r0, #24
 8003a40:	f00a fec6 	bl	800e7d0 <_Znwj>
 8003a44:	4603      	mov	r3, r0
 8003a46:	461c      	mov	r4, r3
 8003a48:	2306      	movs	r3, #6
 8003a4a:	9303      	str	r3, [sp, #12]
 8003a4c:	4b70      	ldr	r3, [pc, #448]	@ (8003c10 <_Z41__static_initialization_and_destruction_0v+0x234>)
 8003a4e:	9302      	str	r3, [sp, #8]
 8003a50:	2302      	movs	r3, #2
 8003a52:	9301      	str	r3, [sp, #4]
 8003a54:	4b6d      	ldr	r3, [pc, #436]	@ (8003c0c <_Z41__static_initialization_and_destruction_0v+0x230>)
 8003a56:	9300      	str	r3, [sp, #0]
 8003a58:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a5c:	223c      	movs	r2, #60	@ 0x3c
 8003a5e:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003a62:	4620      	mov	r0, r4
 8003a64:	f7fe ff4c 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a68:	4b66      	ldr	r3, [pc, #408]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a6a:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003a6c:	2018      	movs	r0, #24
 8003a6e:	f00a feaf 	bl	800e7d0 <_Znwj>
 8003a72:	4603      	mov	r3, r0
 8003a74:	461c      	mov	r4, r3
 8003a76:	2302      	movs	r3, #2
 8003a78:	9303      	str	r3, [sp, #12]
 8003a7a:	4b66      	ldr	r3, [pc, #408]	@ (8003c14 <_Z41__static_initialization_and_destruction_0v+0x238>)
 8003a7c:	9302      	str	r3, [sp, #8]
 8003a7e:	2302      	movs	r3, #2
 8003a80:	9301      	str	r3, [sp, #4]
 8003a82:	4b65      	ldr	r3, [pc, #404]	@ (8003c18 <_Z41__static_initialization_and_destruction_0v+0x23c>)
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a8a:	22f0      	movs	r2, #240	@ 0xf0
 8003a8c:	2164      	movs	r1, #100	@ 0x64
 8003a8e:	4620      	mov	r0, r4
 8003a90:	f7fe ff36 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003a94:	4b5b      	ldr	r3, [pc, #364]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003a96:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003a98:	2018      	movs	r0, #24
 8003a9a:	f00a fe99 	bl	800e7d0 <_Znwj>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	461c      	mov	r4, r3
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	9303      	str	r3, [sp, #12]
 8003aa6:	4b5d      	ldr	r3, [pc, #372]	@ (8003c1c <_Z41__static_initialization_and_destruction_0v+0x240>)
 8003aa8:	9302      	str	r3, [sp, #8]
 8003aaa:	2302      	movs	r3, #2
 8003aac:	9301      	str	r3, [sp, #4]
 8003aae:	4b5c      	ldr	r3, [pc, #368]	@ (8003c20 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003ab0:	9300      	str	r3, [sp, #0]
 8003ab2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ab6:	2282      	movs	r2, #130	@ 0x82
 8003ab8:	f240 118b 	movw	r1, #395	@ 0x18b
 8003abc:	4620      	mov	r0, r4
 8003abe:	f7fe ff1f 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ac2:	4b50      	ldr	r3, [pc, #320]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003ac4:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003ac6:	2018      	movs	r0, #24
 8003ac8:	f00a fe82 	bl	800e7d0 <_Znwj>
 8003acc:	4603      	mov	r3, r0
 8003ace:	461c      	mov	r4, r3
 8003ad0:	2305      	movs	r3, #5
 8003ad2:	9303      	str	r3, [sp, #12]
 8003ad4:	4b53      	ldr	r3, [pc, #332]	@ (8003c24 <_Z41__static_initialization_and_destruction_0v+0x248>)
 8003ad6:	9302      	str	r3, [sp, #8]
 8003ad8:	2302      	movs	r3, #2
 8003ada:	9301      	str	r3, [sp, #4]
 8003adc:	4b50      	ldr	r3, [pc, #320]	@ (8003c20 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003ade:	9300      	str	r3, [sp, #0]
 8003ae0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ae4:	225a      	movs	r2, #90	@ 0x5a
 8003ae6:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003aea:	4620      	mov	r0, r4
 8003aec:	f7fe ff08 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003af0:	4b44      	ldr	r3, [pc, #272]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003af2:	615c      	str	r4, [r3, #20]
		new StringObject(375, 185, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003af4:	2018      	movs	r0, #24
 8003af6:	f00a fe6b 	bl	800e7d0 <_Znwj>
 8003afa:	4603      	mov	r3, r0
 8003afc:	461c      	mov	r4, r3
 8003afe:	2307      	movs	r3, #7
 8003b00:	9303      	str	r3, [sp, #12]
 8003b02:	4b49      	ldr	r3, [pc, #292]	@ (8003c28 <_Z41__static_initialization_and_destruction_0v+0x24c>)
 8003b04:	9302      	str	r3, [sp, #8]
 8003b06:	2301      	movs	r3, #1
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	4b40      	ldr	r3, [pc, #256]	@ (8003c0c <_Z41__static_initialization_and_destruction_0v+0x230>)
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b12:	22b9      	movs	r2, #185	@ 0xb9
 8003b14:	f240 1177 	movw	r1, #375	@ 0x177
 8003b18:	4620      	mov	r0, r4
 8003b1a:	f7fe fef1 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b1e:	4b39      	ldr	r3, [pc, #228]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b20:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003b22:	2018      	movs	r0, #24
 8003b24:	f00a fe54 	bl	800e7d0 <_Znwj>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	461c      	mov	r4, r3
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	9303      	str	r3, [sp, #12]
 8003b30:	4b3e      	ldr	r3, [pc, #248]	@ (8003c2c <_Z41__static_initialization_and_destruction_0v+0x250>)
 8003b32:	9302      	str	r3, [sp, #8]
 8003b34:	2301      	movs	r3, #1
 8003b36:	9301      	str	r3, [sp, #4]
 8003b38:	4b39      	ldr	r3, [pc, #228]	@ (8003c20 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003b3a:	9300      	str	r3, [sp, #0]
 8003b3c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b40:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003b44:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003b48:	4620      	mov	r0, r4
 8003b4a:	f7fe fed9 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b4e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b50:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003b52:	2014      	movs	r0, #20
 8003b54:	f00a fe3c 	bl	800e7d0 <_Znwj>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	2309      	movs	r3, #9
 8003b5e:	9303      	str	r3, [sp, #12]
 8003b60:	2300      	movs	r3, #0
 8003b62:	9302      	str	r3, [sp, #8]
 8003b64:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b68:	9301      	str	r3, [sp, #4]
 8003b6a:	2337      	movs	r3, #55	@ 0x37
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003b72:	22fa      	movs	r2, #250	@ 0xfa
 8003b74:	21be      	movs	r1, #190	@ 0xbe
 8003b76:	4620      	mov	r0, r4
 8003b78:	f7fe ff66 	bl	8002a48 <_ZN17OutlineRectObjectC1Ettttthh>
};
 8003b7c:	4b21      	ldr	r3, [pc, #132]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003b7e:	621c      	str	r4, [r3, #32]
		new StringObject(405, 210, 0xFFFF, ICONFONT, CENTER_OBJECT, speedicon, 10)
 8003b80:	2018      	movs	r0, #24
 8003b82:	f00a fe25 	bl	800e7d0 <_Znwj>
 8003b86:	4603      	mov	r3, r0
 8003b88:	461c      	mov	r4, r3
 8003b8a:	230a      	movs	r3, #10
 8003b8c:	9303      	str	r3, [sp, #12]
 8003b8e:	4b28      	ldr	r3, [pc, #160]	@ (8003c30 <_Z41__static_initialization_and_destruction_0v+0x254>)
 8003b90:	9302      	str	r3, [sp, #8]
 8003b92:	2302      	movs	r3, #2
 8003b94:	9301      	str	r3, [sp, #4]
 8003b96:	4b22      	ldr	r3, [pc, #136]	@ (8003c20 <_Z41__static_initialization_and_destruction_0v+0x244>)
 8003b98:	9300      	str	r3, [sp, #0]
 8003b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b9e:	22d2      	movs	r2, #210	@ 0xd2
 8003ba0:	f240 1195 	movw	r1, #405	@ 0x195
 8003ba4:	4620      	mov	r0, r4
 8003ba6:	f7fe feab 	bl	8002900 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003baa:	4b16      	ldr	r3, [pc, #88]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003bac:	625c      	str	r4, [r3, #36]	@ 0x24
Scene myScene2(otherobjects, 6);
 8003bae:	2206      	movs	r2, #6
 8003bb0:	4914      	ldr	r1, [pc, #80]	@ (8003c04 <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003bb2:	4820      	ldr	r0, [pc, #128]	@ (8003c34 <_Z41__static_initialization_and_destruction_0v+0x258>)
 8003bb4:	f7fe fc62 	bl	800247c <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003bb8:	f44f 7011 	mov.w	r0, #580	@ 0x244
 8003bbc:	f00a fe08 	bl	800e7d0 <_Znwj>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	461c      	mov	r4, r3
 8003bc4:	4b1c      	ldr	r3, [pc, #112]	@ (8003c38 <_Z41__static_initialization_and_destruction_0v+0x25c>)
 8003bc6:	6819      	ldr	r1, [r3, #0]
 8003bc8:	2302      	movs	r3, #2
 8003bca:	9303      	str	r3, [sp, #12]
 8003bcc:	2302      	movs	r3, #2
 8003bce:	9302      	str	r3, [sp, #8]
 8003bd0:	23a0      	movs	r3, #160	@ 0xa0
 8003bd2:	9301      	str	r3, [sp, #4]
 8003bd4:	23f0      	movs	r3, #240	@ 0xf0
 8003bd6:	9300      	str	r3, [sp, #0]
 8003bd8:	23d7      	movs	r3, #215	@ 0xd7
 8003bda:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003bde:	4620      	mov	r0, r4
 8003be0:	f7fe ffa4 	bl	8002b2c <_ZN11ImageObjectC1EPctttthh>
};
 8003be4:	4b15      	ldr	r3, [pc, #84]	@ (8003c3c <_Z41__static_initialization_and_destruction_0v+0x260>)
 8003be6:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003be8:	2201      	movs	r2, #1
 8003bea:	4914      	ldr	r1, [pc, #80]	@ (8003c3c <_Z41__static_initialization_and_destruction_0v+0x260>)
 8003bec:	4814      	ldr	r0, [pc, #80]	@ (8003c40 <_Z41__static_initialization_and_destruction_0v+0x264>)
 8003bee:	f7fe fc45 	bl	800247c <_ZN5SceneC1EPP13DisplayObjecth>
}
 8003bf2:	bf00      	nop
 8003bf4:	3704      	adds	r7, #4
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd90      	pop	{r4, r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	2000038c 	.word	0x2000038c
 8003c00:	080127a4 	.word	0x080127a4
 8003c04:	200003dc 	.word	0x200003dc
 8003c08:	200003a0 	.word	0x200003a0
 8003c0c:	0801094c 	.word	0x0801094c
 8003c10:	200003c8 	.word	0x200003c8
 8003c14:	20000008 	.word	0x20000008
 8003c18:	08016bb0 	.word	0x08016bb0
 8003c1c:	2000001c 	.word	0x2000001c
 8003c20:	08016f6c 	.word	0x08016f6c
 8003c24:	20000020 	.word	0x20000020
 8003c28:	200003b4 	.word	0x200003b4
 8003c2c:	20000024 	.word	0x20000024
 8003c30:	20000028 	.word	0x20000028
 8003c34:	20000404 	.word	0x20000404
 8003c38:	2000002c 	.word	0x2000002c
 8003c3c:	2000040c 	.word	0x2000040c
 8003c40:	20000410 	.word	0x20000410

08003c44 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003c44:	b580      	push	{r7, lr}
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	f7ff fec8 	bl	80039dc <_Z41__static_initialization_and_destruction_0v>
 8003c4c:	bd80      	pop	{r7, pc}

08003c4e <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003c4e:	b580      	push	{r7, lr}
 8003c50:	b084      	sub	sp, #16
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	683a      	ldr	r2, [r7, #0]
 8003c60:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	7e3a      	ldrb	r2, [r7, #24]
 8003c66:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	68ba      	ldr	r2, [r7, #8]
 8003c6c:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	605a      	str	r2, [r3, #4]
    endSPI();
 8003c74:	68f8      	ldr	r0, [r7, #12]
 8003c76:	f000 f839 	bl	8003cec <_ZN7MCP25156endSPIEv>
}
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3710      	adds	r7, #16
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6818      	ldr	r0, [r3, #0]
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	1cf9      	adds	r1, r7, #3
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f003 fc39 	bl	8007512 <HAL_SPI_Transmit>
}
 8003ca0:	bf00      	nop
 8003ca2:	3708      	adds	r7, #8
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}

08003ca8 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6818      	ldr	r0, [r3, #0]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	f107 010f 	add.w	r1, r7, #15
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f003 fd6c 	bl	800779a <HAL_SPI_Receive>
	return retVal;
 8003cc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}

08003ccc <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6898      	ldr	r0, [r3, #8]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	7b1b      	ldrb	r3, [r3, #12]
 8003cdc:	2200      	movs	r2, #0
 8003cde:	4619      	mov	r1, r3
 8003ce0:	f001 fcda 	bl	8005698 <HAL_GPIO_WritePin>
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b082      	sub	sp, #8
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6898      	ldr	r0, [r3, #8]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	7b1b      	ldrb	r3, [r3, #12]
 8003cfc:	2201      	movs	r2, #1
 8003cfe:	4619      	mov	r1, r3
 8003d00:	f001 fcca 	bl	8005698 <HAL_GPIO_WritePin>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b08c      	sub	sp, #48	@ 0x30
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
	startSPI();
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f7ff ffd9 	bl	8003ccc <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003d1a:	21c0      	movs	r1, #192	@ 0xc0
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7ff ffb1 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff ffe2 	bl	8003cec <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003d28:	f107 0314 	add.w	r3, r7, #20
 8003d2c:	220e      	movs	r2, #14
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f00a fec7 	bl	800eac4 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003d36:	f107 0214 	add.w	r2, r7, #20
 8003d3a:	230e      	movs	r3, #14
 8003d3c:	2130      	movs	r1, #48	@ 0x30
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 f8ec 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003d44:	f107 0214 	add.w	r2, r7, #20
 8003d48:	230e      	movs	r3, #14
 8003d4a:	2140      	movs	r1, #64	@ 0x40
 8003d4c:	6878      	ldr	r0, [r7, #4]
 8003d4e:	f000 f8e5 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003d52:	f107 0214 	add.w	r2, r7, #20
 8003d56:	230e      	movs	r3, #14
 8003d58:	2150      	movs	r1, #80	@ 0x50
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	f000 f8de 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003d60:	2200      	movs	r2, #0
 8003d62:	2160      	movs	r1, #96	@ 0x60
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f000 f8b9 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	2170      	movs	r1, #112	@ 0x70
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f8b4 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003d74:	22a3      	movs	r2, #163	@ 0xa3
 8003d76:	212b      	movs	r1, #43	@ 0x2b
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f8af 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003d7e:	2304      	movs	r3, #4
 8003d80:	2267      	movs	r2, #103	@ 0x67
 8003d82:	2160      	movs	r1, #96	@ 0x60
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f000 f8f8 	bl	8003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	2267      	movs	r2, #103	@ 0x67
 8003d8e:	2170      	movs	r1, #112	@ 0x70
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f8f2 	bl	8003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003d96:	4a29      	ldr	r2, [pc, #164]	@ (8003e3c <_ZN7MCP25155resetEv+0x130>)
 8003d98:	f107 030c 	add.w	r3, r7, #12
 8003d9c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003da0:	6018      	str	r0, [r3, #0]
 8003da2:	3304      	adds	r3, #4
 8003da4:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003da6:	2300      	movs	r3, #0
 8003da8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003daa:	e01e      	b.n	8003dea <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dae:	2b01      	cmp	r3, #1
 8003db0:	bf0c      	ite	eq
 8003db2:	2301      	moveq	r3, #1
 8003db4:	2300      	movne	r3, #0
 8003db6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003dba:	f107 020c 	add.w	r2, r7, #12
 8003dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dc0:	4413      	add	r3, r2
 8003dc2:	7819      	ldrb	r1, [r3, #0]
 8003dc4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003dc8:	2300      	movs	r3, #0
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 fbce 	bl	800456c <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003dd0:	4603      	mov	r3, r0
 8003dd2:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003dd6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d002      	beq.n	8003de4 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003dde:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003de2:	e027      	b.n	8003e34 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003de6:	3301      	adds	r3, #1
 8003de8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003dec:	2b05      	cmp	r3, #5
 8003dee:	dddd      	ble.n	8003dac <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003df0:	2300      	movs	r3, #0
 8003df2:	723b      	strb	r3, [r7, #8]
 8003df4:	2301      	movs	r3, #1
 8003df6:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003dfc:	e016      	b.n	8003e2c <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003dfe:	f107 0208 	add.w	r2, r7, #8
 8003e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e04:	4413      	add	r3, r2
 8003e06:	7819      	ldrb	r1, [r3, #0]
 8003e08:	2300      	movs	r3, #0
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f000 fb79 	bl	8004504 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003e18:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d002      	beq.n	8003e26 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003e20:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e24:	e006      	b.n	8003e34 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003e26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e28:	3301      	adds	r3, #1
 8003e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	dde5      	ble.n	8003dfe <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3730      	adds	r7, #48	@ 0x30
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	0800f4a0 	.word	0x0800f4a0

08003e40 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b084      	sub	sp, #16
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	460b      	mov	r3, r1
 8003e4a:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff ff3d 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003e52:	2103      	movs	r1, #3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f7ff ff15 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003e5a:	78fb      	ldrb	r3, [r7, #3]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	6878      	ldr	r0, [r7, #4]
 8003e60:	f7ff ff10 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f7ff ff1f 	bl	8003ca8 <_ZN7MCP25156SPI_RxEv>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f7ff ff3c 	bl	8003cec <_ZN7MCP25156endSPIEv>

    return ret;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003e7e:	b590      	push	{r4, r7, lr}
 8003e80:	b087      	sub	sp, #28
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	60f8      	str	r0, [r7, #12]
 8003e86:	607a      	str	r2, [r7, #4]
 8003e88:	461a      	mov	r2, r3
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	72fb      	strb	r3, [r7, #11]
 8003e8e:	4613      	mov	r3, r2
 8003e90:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003e92:	68f8      	ldr	r0, [r7, #12]
 8003e94:	f7ff ff1a 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003e98:	2103      	movs	r1, #3
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f7ff fef2 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003ea0:	7afb      	ldrb	r3, [r7, #11]
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f7ff feed 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003eaa:	2300      	movs	r3, #0
 8003eac:	75fb      	strb	r3, [r7, #23]
 8003eae:	e00a      	b.n	8003ec6 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003eb0:	7dfb      	ldrb	r3, [r7, #23]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	18d4      	adds	r4, r2, r3
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f7ff fef6 	bl	8003ca8 <_ZN7MCP25156SPI_RxEv>
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003ec0:	7dfb      	ldrb	r3, [r7, #23]
 8003ec2:	3301      	adds	r3, #1
 8003ec4:	75fb      	strb	r3, [r7, #23]
 8003ec6:	7dfa      	ldrb	r2, [r7, #23]
 8003ec8:	7abb      	ldrb	r3, [r7, #10]
 8003eca:	429a      	cmp	r2, r3
 8003ecc:	d3f0      	bcc.n	8003eb0 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f7ff ff0c 	bl	8003cec <_ZN7MCP25156endSPIEv>
}
 8003ed4:	bf00      	nop
 8003ed6:	371c      	adds	r7, #28
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd90      	pop	{r4, r7, pc}

08003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
 8003ee8:	4613      	mov	r3, r2
 8003eea:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff feed 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003ef2:	2102      	movs	r1, #2
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fec5 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003efa:	78fb      	ldrb	r3, [r7, #3]
 8003efc:	4619      	mov	r1, r3
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f7ff fec0 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003f04:	78bb      	ldrb	r3, [r7, #2]
 8003f06:	4619      	mov	r1, r3
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f7ff febb 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f7ff feec 	bl	8003cec <_ZN7MCP25156endSPIEv>
}
 8003f14:	bf00      	nop
 8003f16:	3708      	adds	r7, #8
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	bd80      	pop	{r7, pc}

08003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b086      	sub	sp, #24
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	60f8      	str	r0, [r7, #12]
 8003f24:	607a      	str	r2, [r7, #4]
 8003f26:	461a      	mov	r2, r3
 8003f28:	460b      	mov	r3, r1
 8003f2a:	72fb      	strb	r3, [r7, #11]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003f30:	68f8      	ldr	r0, [r7, #12]
 8003f32:	f7ff fecb 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003f36:	2102      	movs	r1, #2
 8003f38:	68f8      	ldr	r0, [r7, #12]
 8003f3a:	f7ff fea3 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f3e:	7afb      	ldrb	r3, [r7, #11]
 8003f40:	4619      	mov	r1, r3
 8003f42:	68f8      	ldr	r0, [r7, #12]
 8003f44:	f7ff fe9e 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003f48:	2300      	movs	r3, #0
 8003f4a:	75fb      	strb	r3, [r7, #23]
 8003f4c:	e00a      	b.n	8003f64 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003f4e:	7dfb      	ldrb	r3, [r7, #23]
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	4413      	add	r3, r2
 8003f54:	781b      	ldrb	r3, [r3, #0]
 8003f56:	4619      	mov	r1, r3
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f7ff fe93 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003f5e:	7dfb      	ldrb	r3, [r7, #23]
 8003f60:	3301      	adds	r3, #1
 8003f62:	75fb      	strb	r3, [r7, #23]
 8003f64:	7dfa      	ldrb	r2, [r7, #23]
 8003f66:	7abb      	ldrb	r3, [r7, #10]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d3f0      	bcc.n	8003f4e <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f7ff febd 	bl	8003cec <_ZN7MCP25156endSPIEv>
}
 8003f72:	bf00      	nop
 8003f74:	3718      	adds	r7, #24
 8003f76:	46bd      	mov	sp, r7
 8003f78:	bd80      	pop	{r7, pc}

08003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003f7a:	b580      	push	{r7, lr}
 8003f7c:	b082      	sub	sp, #8
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
 8003f82:	4608      	mov	r0, r1
 8003f84:	4611      	mov	r1, r2
 8003f86:	461a      	mov	r2, r3
 8003f88:	4603      	mov	r3, r0
 8003f8a:	70fb      	strb	r3, [r7, #3]
 8003f8c:	460b      	mov	r3, r1
 8003f8e:	70bb      	strb	r3, [r7, #2]
 8003f90:	4613      	mov	r3, r2
 8003f92:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003f94:	6878      	ldr	r0, [r7, #4]
 8003f96:	f7ff fe99 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003f9a:	2105      	movs	r1, #5
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fe71 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	4619      	mov	r1, r3
 8003fa6:	6878      	ldr	r0, [r7, #4]
 8003fa8:	f7ff fe6c 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003fac:	78bb      	ldrb	r3, [r7, #2]
 8003fae:	4619      	mov	r1, r3
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f7ff fe67 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003fb6:	787b      	ldrb	r3, [r7, #1]
 8003fb8:	4619      	mov	r1, r3
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f7ff fe62 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003fc0:	6878      	ldr	r0, [r7, #4]
 8003fc2:	f7ff fe93 	bl	8003cec <_ZN7MCP25156endSPIEv>
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]
    startSPI();
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f7ff fe78 	bl	8003ccc <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003fdc:	21a0      	movs	r1, #160	@ 0xa0
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	f7ff fe50 	bl	8003c84 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003fe4:	6878      	ldr	r0, [r7, #4]
 8003fe6:	f7ff fe5f 	bl	8003ca8 <_ZN7MCP25156SPI_RxEv>
 8003fea:	4603      	mov	r3, r0
 8003fec:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003fee:	6878      	ldr	r0, [r7, #4]
 8003ff0:	f7ff fe7c 	bl	8003cec <_ZN7MCP25156endSPIEv>

    return i;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b082      	sub	sp, #8
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8004006:	2180      	movs	r1, #128	@ 0x80
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f812 	bl	8004032 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 800400e:	4603      	mov	r3, r0
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}

08004018 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8004020:	2100      	movs	r1, #0
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f000 f805 	bl	8004032 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8004028:	4603      	mov	r3, r0
}
 800402a:	4618      	mov	r0, r3
 800402c:	3708      	adds	r7, #8
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}

08004032 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8004032:	b580      	push	{r7, lr}
 8004034:	b086      	sub	sp, #24
 8004036:	af00      	add	r7, sp, #0
 8004038:	6078      	str	r0, [r7, #4]
 800403a:	460b      	mov	r3, r1
 800403c:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 800403e:	78fb      	ldrb	r3, [r7, #3]
 8004040:	22e0      	movs	r2, #224	@ 0xe0
 8004042:	210f      	movs	r1, #15
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff98 	bl	8003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 800404a:	f000 fccd 	bl	80049e8 <HAL_GetTick>
 800404e:	4603      	mov	r3, r0
 8004050:	330a      	adds	r3, #10
 8004052:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8004054:	2300      	movs	r3, #0
 8004056:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8004058:	e013      	b.n	8004082 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 800405a:	210e      	movs	r1, #14
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff feef 	bl	8003e40 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004062:	4603      	mov	r3, r0
 8004064:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8004066:	7bfb      	ldrb	r3, [r7, #15]
 8004068:	f023 031f 	bic.w	r3, r3, #31
 800406c:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 800406e:	7bfa      	ldrb	r2, [r7, #15]
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	429a      	cmp	r2, r3
 8004074:	bf0c      	ite	eq
 8004076:	2301      	moveq	r3, #1
 8004078:	2300      	movne	r3, #0
 800407a:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 800407c:	7dfb      	ldrb	r3, [r7, #23]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10b      	bne.n	800409a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8004082:	f000 fcb1 	bl	80049e8 <HAL_GetTick>
 8004086:	4602      	mov	r2, r0
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	4293      	cmp	r3, r2
 800408c:	bf8c      	ite	hi
 800408e:	2301      	movhi	r3, #1
 8004090:	2300      	movls	r3, #0
 8004092:	b2db      	uxtb	r3, r3
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e0      	bne.n	800405a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8004098:	e000      	b.n	800409c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 800409a:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 800409c:	7dfb      	ldrb	r3, [r7, #23]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d001      	beq.n	80040a6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 80040a2:	2300      	movs	r3, #0
 80040a4:	e000      	b.n	80040a8 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 80040a6:	2301      	movs	r3, #1

}
 80040a8:	4618      	mov	r0, r3
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}

080040b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b084      	sub	sp, #16
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	460b      	mov	r3, r1
 80040ba:	70fb      	strb	r3, [r7, #3]
 80040bc:	4613      	mov	r3, r2
 80040be:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f7ff ff9c 	bl	8003ffe <_ZN7MCP251513setConfigModeEv>
 80040c6:	4603      	mov	r3, r0
 80040c8:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 80040ca:	7afb      	ldrb	r3, [r7, #11]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d001      	beq.n	80040d4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 80040d0:	7afb      	ldrb	r3, [r7, #11]
 80040d2:	e1b5      	b.n	8004440 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 80040d4:	2301      	movs	r3, #1
 80040d6:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 80040d8:	78bb      	ldrb	r3, [r7, #2]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d009      	beq.n	80040f2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 80040de:	2b02      	cmp	r3, #2
 80040e0:	f300 8193 	bgt.w	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 811f 	beq.w	8004328 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	f000 808e 	beq.w	800420c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 80040f0:	e18b      	b.n	800440a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 80040f2:	78fb      	ldrb	r3, [r7, #3]
 80040f4:	2b0f      	cmp	r3, #15
 80040f6:	f200 8085 	bhi.w	8004204 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 80040fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004100 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 80040fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004100:	08004141 	.word	0x08004141
 8004104:	0800414f 	.word	0x0800414f
 8004108:	0800415d 	.word	0x0800415d
 800410c:	0800416b 	.word	0x0800416b
 8004110:	08004179 	.word	0x08004179
 8004114:	08004187 	.word	0x08004187
 8004118:	08004195 	.word	0x08004195
 800411c:	080041a3 	.word	0x080041a3
 8004120:	08004205 	.word	0x08004205
 8004124:	08004205 	.word	0x08004205
 8004128:	080041b1 	.word	0x080041b1
 800412c:	080041bf 	.word	0x080041bf
 8004130:	080041cd 	.word	0x080041cd
 8004134:	080041db 	.word	0x080041db
 8004138:	080041e9 	.word	0x080041e9
 800413c:	080041f7 	.word	0x080041f7
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8004140:	231f      	movs	r3, #31
 8004142:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8004144:	23bf      	movs	r3, #191	@ 0xbf
 8004146:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8004148:	2387      	movs	r3, #135	@ 0x87
 800414a:	733b      	strb	r3, [r7, #12]
            break;
 800414c:	e05d      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 800414e:	230f      	movs	r3, #15
 8004150:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8004152:	23bf      	movs	r3, #191	@ 0xbf
 8004154:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8004156:	2387      	movs	r3, #135	@ 0x87
 8004158:	733b      	strb	r3, [r7, #12]
            break;
 800415a:	e056      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 800415c:	2307      	movs	r3, #7
 800415e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8004160:	23bf      	movs	r3, #191	@ 0xbf
 8004162:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8004164:	2387      	movs	r3, #135	@ 0x87
 8004166:	733b      	strb	r3, [r7, #12]
            break;
 8004168:	e04f      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 800416a:	2307      	movs	r3, #7
 800416c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 800416e:	23a4      	movs	r3, #164	@ 0xa4
 8004170:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8004172:	2384      	movs	r3, #132	@ 0x84
 8004174:	733b      	strb	r3, [r7, #12]
            break;
 8004176:	e048      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8004178:	2347      	movs	r3, #71	@ 0x47
 800417a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 800417c:	23e2      	movs	r3, #226	@ 0xe2
 800417e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8004180:	2385      	movs	r3, #133	@ 0x85
 8004182:	733b      	strb	r3, [r7, #12]
            break;
 8004184:	e041      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8004186:	2303      	movs	r3, #3
 8004188:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 800418a:	23bf      	movs	r3, #191	@ 0xbf
 800418c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 800418e:	2387      	movs	r3, #135	@ 0x87
 8004190:	733b      	strb	r3, [r7, #12]
            break;
 8004192:	e03a      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8004194:	2303      	movs	r3, #3
 8004196:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8004198:	23b4      	movs	r3, #180	@ 0xb4
 800419a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 800419c:	2386      	movs	r3, #134	@ 0x86
 800419e:	733b      	strb	r3, [r7, #12]
            break;
 80041a0:	e033      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 80041a2:	2301      	movs	r3, #1
 80041a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 80041a6:	23bf      	movs	r3, #191	@ 0xbf
 80041a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 80041aa:	2387      	movs	r3, #135	@ 0x87
 80041ac:	733b      	strb	r3, [r7, #12]
            break;
 80041ae:	e02c      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 80041b0:	2301      	movs	r3, #1
 80041b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 80041b4:	23b4      	movs	r3, #180	@ 0xb4
 80041b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 80041b8:	2386      	movs	r3, #134	@ 0x86
 80041ba:	733b      	strb	r3, [r7, #12]
            break;
 80041bc:	e025      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 80041be:	2301      	movs	r3, #1
 80041c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 80041c2:	23b1      	movs	r3, #177	@ 0xb1
 80041c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 80041c6:	2385      	movs	r3, #133	@ 0x85
 80041c8:	733b      	strb	r3, [r7, #12]
            break;
 80041ca:	e01e      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 80041cc:	2300      	movs	r3, #0
 80041ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 80041d0:	23b4      	movs	r3, #180	@ 0xb4
 80041d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 80041d4:	2386      	movs	r3, #134	@ 0x86
 80041d6:	733b      	strb	r3, [r7, #12]
            break;
 80041d8:	e017      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 80041da:	2300      	movs	r3, #0
 80041dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 80041de:	23b1      	movs	r3, #177	@ 0xb1
 80041e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 80041e2:	2385      	movs	r3, #133	@ 0x85
 80041e4:	733b      	strb	r3, [r7, #12]
            break;
 80041e6:	e010      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 80041e8:	2300      	movs	r3, #0
 80041ea:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 80041ec:	2390      	movs	r3, #144	@ 0x90
 80041ee:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 80041f0:	2382      	movs	r3, #130	@ 0x82
 80041f2:	733b      	strb	r3, [r7, #12]
            break;
 80041f4:	e009      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 80041f6:	2300      	movs	r3, #0
 80041f8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 80041fa:	2380      	movs	r3, #128	@ 0x80
 80041fc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 80041fe:	2380      	movs	r3, #128	@ 0x80
 8004200:	733b      	strb	r3, [r7, #12]
            break;
 8004202:	e002      	b.n	800420a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8004204:	2300      	movs	r3, #0
 8004206:	73fb      	strb	r3, [r7, #15]
            break;
 8004208:	bf00      	nop
        }
        break;
 800420a:	e101      	b.n	8004410 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 800420c:	78fb      	ldrb	r3, [r7, #3]
 800420e:	2b0f      	cmp	r3, #15
 8004210:	f200 8086 	bhi.w	8004320 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8004214:	a201      	add	r2, pc, #4	@ (adr r2, 800421c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800425d 	.word	0x0800425d
 8004220:	0800426b 	.word	0x0800426b
 8004224:	08004279 	.word	0x08004279
 8004228:	08004321 	.word	0x08004321
 800422c:	08004287 	.word	0x08004287
 8004230:	08004295 	.word	0x08004295
 8004234:	080042a3 	.word	0x080042a3
 8004238:	080042b1 	.word	0x080042b1
 800423c:	080042bf 	.word	0x080042bf
 8004240:	08004321 	.word	0x08004321
 8004244:	080042cd 	.word	0x080042cd
 8004248:	080042db 	.word	0x080042db
 800424c:	080042e9 	.word	0x080042e9
 8004250:	080042f7 	.word	0x080042f7
 8004254:	08004305 	.word	0x08004305
 8004258:	08004313 	.word	0x08004313
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 800425c:	233f      	movs	r3, #63	@ 0x3f
 800425e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8004260:	23ff      	movs	r3, #255	@ 0xff
 8004262:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8004264:	2387      	movs	r3, #135	@ 0x87
 8004266:	733b      	strb	r3, [r7, #12]
            break;
 8004268:	e05d      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 800426a:	231f      	movs	r3, #31
 800426c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 800426e:	23ff      	movs	r3, #255	@ 0xff
 8004270:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8004272:	2387      	movs	r3, #135	@ 0x87
 8004274:	733b      	strb	r3, [r7, #12]
            break;
 8004276:	e056      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8004278:	230f      	movs	r3, #15
 800427a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 800427c:	23ff      	movs	r3, #255	@ 0xff
 800427e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8004280:	2387      	movs	r3, #135	@ 0x87
 8004282:	733b      	strb	r3, [r7, #12]
            break;
 8004284:	e04f      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8004286:	234e      	movs	r3, #78	@ 0x4e
 8004288:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 800428a:	23f1      	movs	r3, #241	@ 0xf1
 800428c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 800428e:	2385      	movs	r3, #133	@ 0x85
 8004290:	733b      	strb	r3, [r7, #12]
            break;
 8004292:	e048      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004294:	2307      	movs	r3, #7
 8004296:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8004298:	23ff      	movs	r3, #255	@ 0xff
 800429a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 800429c:	2387      	movs	r3, #135	@ 0x87
 800429e:	733b      	strb	r3, [r7, #12]
            break;
 80042a0:	e041      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 80042a2:	2307      	movs	r3, #7
 80042a4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 80042a6:	23fa      	movs	r3, #250	@ 0xfa
 80042a8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 80042aa:	2387      	movs	r3, #135	@ 0x87
 80042ac:	733b      	strb	r3, [r7, #12]
            break;
 80042ae:	e03a      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 80042b0:	2303      	movs	r3, #3
 80042b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 80042b4:	23ff      	movs	r3, #255	@ 0xff
 80042b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 80042b8:	2387      	movs	r3, #135	@ 0x87
 80042ba:	733b      	strb	r3, [r7, #12]
            break;
 80042bc:	e033      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 80042be:	2303      	movs	r3, #3
 80042c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 80042c2:	23be      	movs	r3, #190	@ 0xbe
 80042c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 80042c6:	2307      	movs	r3, #7
 80042c8:	733b      	strb	r3, [r7, #12]
            break;
 80042ca:	e02c      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 80042cc:	2303      	movs	r3, #3
 80042ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 80042d0:	23fa      	movs	r3, #250	@ 0xfa
 80042d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 80042d4:	2387      	movs	r3, #135	@ 0x87
 80042d6:	733b      	strb	r3, [r7, #12]
            break;
 80042d8:	e025      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 80042da:	2303      	movs	r3, #3
 80042dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 80042de:	23f0      	movs	r3, #240	@ 0xf0
 80042e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 80042e2:	2386      	movs	r3, #134	@ 0x86
 80042e4:	733b      	strb	r3, [r7, #12]
            break;
 80042e6:	e01e      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 80042e8:	2301      	movs	r3, #1
 80042ea:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 80042ec:	23fa      	movs	r3, #250	@ 0xfa
 80042ee:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 80042f0:	2387      	movs	r3, #135	@ 0x87
 80042f2:	733b      	strb	r3, [r7, #12]
            break;
 80042f4:	e017      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 80042f6:	2341      	movs	r3, #65	@ 0x41
 80042f8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 80042fa:	23f1      	movs	r3, #241	@ 0xf1
 80042fc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 80042fe:	2385      	movs	r3, #133	@ 0x85
 8004300:	733b      	strb	r3, [r7, #12]
            break;
 8004302:	e010      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8004304:	2300      	movs	r3, #0
 8004306:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8004308:	23f0      	movs	r3, #240	@ 0xf0
 800430a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 800430c:	2386      	movs	r3, #134	@ 0x86
 800430e:	733b      	strb	r3, [r7, #12]
            break;
 8004310:	e009      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8004312:	2300      	movs	r3, #0
 8004314:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8004316:	23d0      	movs	r3, #208	@ 0xd0
 8004318:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 800431a:	2382      	movs	r3, #130	@ 0x82
 800431c:	733b      	strb	r3, [r7, #12]
            break;
 800431e:	e002      	b.n	8004326 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8004320:	2300      	movs	r3, #0
 8004322:	73fb      	strb	r3, [r7, #15]
            break;
 8004324:	bf00      	nop
        }
        break;
 8004326:	e073      	b.n	8004410 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8004328:	78fb      	ldrb	r3, [r7, #3]
 800432a:	3b04      	subs	r3, #4
 800432c:	2b0b      	cmp	r3, #11
 800432e:	d868      	bhi.n	8004402 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8004330:	a201      	add	r2, pc, #4	@ (adr r2, 8004338 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	08004369 	.word	0x08004369
 800433c:	08004377 	.word	0x08004377
 8004340:	08004385 	.word	0x08004385
 8004344:	08004393 	.word	0x08004393
 8004348:	080043a1 	.word	0x080043a1
 800434c:	08004403 	.word	0x08004403
 8004350:	080043af 	.word	0x080043af
 8004354:	080043bd 	.word	0x080043bd
 8004358:	080043cb 	.word	0x080043cb
 800435c:	080043d9 	.word	0x080043d9
 8004360:	080043e7 	.word	0x080043e7
 8004364:	080043f5 	.word	0x080043f5
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8004368:	230b      	movs	r3, #11
 800436a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 800436c:	23ff      	movs	r3, #255	@ 0xff
 800436e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8004370:	2387      	movs	r3, #135	@ 0x87
 8004372:	733b      	strb	r3, [r7, #12]
	    break;
 8004374:	e048      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8004376:	2309      	movs	r3, #9
 8004378:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 800437a:	23ff      	movs	r3, #255	@ 0xff
 800437c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 800437e:	2387      	movs	r3, #135	@ 0x87
 8004380:	733b      	strb	r3, [r7, #12]
            break;
 8004382:	e041      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8004384:	2309      	movs	r3, #9
 8004386:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8004388:	23fa      	movs	r3, #250	@ 0xfa
 800438a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 800438c:	2387      	movs	r3, #135	@ 0x87
 800438e:	733b      	strb	r3, [r7, #12]
            break;
 8004390:	e03a      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8004392:	2304      	movs	r3, #4
 8004394:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8004396:	23ff      	movs	r3, #255	@ 0xff
 8004398:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800439a:	2387      	movs	r3, #135	@ 0x87
 800439c:	733b      	strb	r3, [r7, #12]
            break;
 800439e:	e033      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 80043a0:	2304      	movs	r3, #4
 80043a2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 80043a4:	23fe      	movs	r3, #254	@ 0xfe
 80043a6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 80043a8:	2387      	movs	r3, #135	@ 0x87
 80043aa:	733b      	strb	r3, [r7, #12]
	    break;
 80043ac:	e02c      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 80043ae:	2304      	movs	r3, #4
 80043b0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 80043b2:	23fa      	movs	r3, #250	@ 0xfa
 80043b4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 80043b6:	2387      	movs	r3, #135	@ 0x87
 80043b8:	733b      	strb	r3, [r7, #12]
            break;
 80043ba:	e025      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 80043bc:	2303      	movs	r3, #3
 80043be:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 80043c0:	23fa      	movs	r3, #250	@ 0xfa
 80043c2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 80043c4:	2387      	movs	r3, #135	@ 0x87
 80043c6:	733b      	strb	r3, [r7, #12]
            break;
 80043c8:	e01e      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 80043ce:	23ff      	movs	r3, #255	@ 0xff
 80043d0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 80043d2:	2387      	movs	r3, #135	@ 0x87
 80043d4:	733b      	strb	r3, [r7, #12]
            break;
 80043d6:	e017      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 80043d8:	2341      	movs	r3, #65	@ 0x41
 80043da:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 80043dc:	23fb      	movs	r3, #251	@ 0xfb
 80043de:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 80043e0:	2386      	movs	r3, #134	@ 0x86
 80043e2:	733b      	strb	r3, [r7, #12]
            break;
 80043e4:	e010      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 80043e6:	2300      	movs	r3, #0
 80043e8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 80043ea:	23fa      	movs	r3, #250	@ 0xfa
 80043ec:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 80043ee:	2387      	movs	r3, #135	@ 0x87
 80043f0:	733b      	strb	r3, [r7, #12]
            break;
 80043f2:	e009      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 80043f4:	2300      	movs	r3, #0
 80043f6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 80043f8:	23d9      	movs	r3, #217	@ 0xd9
 80043fa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 80043fc:	2382      	movs	r3, #130	@ 0x82
 80043fe:	733b      	strb	r3, [r7, #12]
            break;
 8004400:	e002      	b.n	8004408 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004402:	2300      	movs	r3, #0
 8004404:	73fb      	strb	r3, [r7, #15]
            break;
 8004406:	bf00      	nop
        }
        break;
 8004408:	e002      	b.n	8004410 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	73fb      	strb	r3, [r7, #15]
        break;
 800440e:	bf00      	nop
    }

    if (set) {
 8004410:	7bfb      	ldrb	r3, [r7, #15]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d013      	beq.n	800443e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8004416:	7bbb      	ldrb	r3, [r7, #14]
 8004418:	461a      	mov	r2, r3
 800441a:	212a      	movs	r1, #42	@ 0x2a
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f7ff fd5d 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8004422:	7b7b      	ldrb	r3, [r7, #13]
 8004424:	461a      	mov	r2, r3
 8004426:	2129      	movs	r1, #41	@ 0x29
 8004428:	6878      	ldr	r0, [r7, #4]
 800442a:	f7ff fd57 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 800442e:	7b3b      	ldrb	r3, [r7, #12]
 8004430:	461a      	mov	r2, r3
 8004432:	2128      	movs	r1, #40	@ 0x28
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f7ff fd51 	bl	8003edc <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 800443e:	2301      	movs	r3, #1
    }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8004448:	b480      	push	{r7}
 800444a:	b087      	sub	sp, #28
 800444c:	af00      	add	r7, sp, #0
 800444e:	60f8      	str	r0, [r7, #12]
 8004450:	60b9      	str	r1, [r7, #8]
 8004452:	603b      	str	r3, [r7, #0]
 8004454:	4613      	mov	r3, r2
 8004456:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 800445c:	79fb      	ldrb	r3, [r7, #7]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d035      	beq.n	80044ce <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	3303      	adds	r3, #3
 8004466:	8afa      	ldrh	r2, [r7, #22]
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 800446c:	8afb      	ldrh	r3, [r7, #22]
 800446e:	0a1b      	lsrs	r3, r3, #8
 8004470:	b29a      	uxth	r2, r3
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	3302      	adds	r3, #2
 8004476:	b2d2      	uxtb	r2, r2
 8004478:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	0c1b      	lsrs	r3, r3, #16
 800447e:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004480:	8afb      	ldrh	r3, [r7, #22]
 8004482:	b2da      	uxtb	r2, r3
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	3301      	adds	r3, #1
 8004488:	f002 0203 	and.w	r2, r2, #3
 800448c:	b2d2      	uxtb	r2, r2
 800448e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004490:	68bb      	ldr	r3, [r7, #8]
 8004492:	3301      	adds	r3, #1
 8004494:	7819      	ldrb	r1, [r3, #0]
 8004496:	8afb      	ldrh	r3, [r7, #22]
 8004498:	b2db      	uxtb	r3, r3
 800449a:	00db      	lsls	r3, r3, #3
 800449c:	b2db      	uxtb	r3, r3
 800449e:	f023 031f 	bic.w	r3, r3, #31
 80044a2:	b2da      	uxtb	r2, r3
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	3301      	adds	r3, #1
 80044a8:	440a      	add	r2, r1
 80044aa:	b2d2      	uxtb	r2, r2
 80044ac:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 80044ae:	68bb      	ldr	r3, [r7, #8]
 80044b0:	3301      	adds	r3, #1
 80044b2:	781a      	ldrb	r2, [r3, #0]
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	3301      	adds	r3, #1
 80044b8:	f042 0208 	orr.w	r2, r2, #8
 80044bc:	b2d2      	uxtb	r2, r2
 80044be:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 80044c0:	8afb      	ldrh	r3, [r7, #22]
 80044c2:	095b      	lsrs	r3, r3, #5
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	b2da      	uxtb	r2, r3
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 80044cc:	e014      	b.n	80044f8 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 80044ce:	8afb      	ldrh	r3, [r7, #22]
 80044d0:	08db      	lsrs	r3, r3, #3
 80044d2:	b29b      	uxth	r3, r3
 80044d4:	b2da      	uxtb	r2, r3
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 80044da:	8afb      	ldrh	r3, [r7, #22]
 80044dc:	b2da      	uxtb	r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	3301      	adds	r3, #1
 80044e2:	0152      	lsls	r2, r2, #5
 80044e4:	b2d2      	uxtb	r2, r2
 80044e6:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 80044e8:	68bb      	ldr	r3, [r7, #8]
 80044ea:	3303      	adds	r3, #3
 80044ec:	2200      	movs	r2, #0
 80044ee:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	3302      	adds	r3, #2
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
}
 80044f8:	bf00      	nop
 80044fa:	371c      	adds	r7, #28
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b086      	sub	sp, #24
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	607b      	str	r3, [r7, #4]
 800450e:	460b      	mov	r3, r1
 8004510:	72fb      	strb	r3, [r7, #11]
 8004512:	4613      	mov	r3, r2
 8004514:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8004516:	68f8      	ldr	r0, [r7, #12]
 8004518:	f7ff fd71 	bl	8003ffe <_ZN7MCP251513setConfigModeEv>
 800451c:	4603      	mov	r3, r0
 800451e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004520:	7dbb      	ldrb	r3, [r7, #22]
 8004522:	2b00      	cmp	r3, #0
 8004524:	d001      	beq.n	800452a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8004526:	7dbb      	ldrb	r3, [r7, #22]
 8004528:	e01c      	b.n	8004564 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800452a:	7aba      	ldrb	r2, [r7, #10]
 800452c:	f107 0110 	add.w	r1, r7, #16
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff ff88 	bl	8004448 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 8004538:	7afb      	ldrb	r3, [r7, #11]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d002      	beq.n	8004544 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 800453e:	2b01      	cmp	r3, #1
 8004540:	d003      	beq.n	800454a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 8004542:	e005      	b.n	8004550 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8004544:	2320      	movs	r3, #32
 8004546:	75fb      	strb	r3, [r7, #23]
 8004548:	e004      	b.n	8004554 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 800454a:	2324      	movs	r3, #36	@ 0x24
 800454c:	75fb      	strb	r3, [r7, #23]
 800454e:	e001      	b.n	8004554 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8004550:	2301      	movs	r3, #1
 8004552:	e007      	b.n	8004564 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 8004554:	f107 0210 	add.w	r2, r7, #16
 8004558:	7df9      	ldrb	r1, [r7, #23]
 800455a:	2304      	movs	r3, #4
 800455c:	68f8      	ldr	r0, [r7, #12]
 800455e:	f7ff fcdd 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	607b      	str	r3, [r7, #4]
 8004576:	460b      	mov	r3, r1
 8004578:	72fb      	strb	r3, [r7, #11]
 800457a:	4613      	mov	r3, r2
 800457c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800457e:	68f8      	ldr	r0, [r7, #12]
 8004580:	f7ff fd3d 	bl	8003ffe <_ZN7MCP251513setConfigModeEv>
 8004584:	4603      	mov	r3, r0
 8004586:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004588:	7dbb      	ldrb	r3, [r7, #22]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d001      	beq.n	8004592 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800458e:	7dbb      	ldrb	r3, [r7, #22]
 8004590:	e035      	b.n	80045fe <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004592:	7afb      	ldrb	r3, [r7, #11]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d821      	bhi.n	80045dc <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004598:	a201      	add	r2, pc, #4	@ (adr r2, 80045a0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045b9 	.word	0x080045b9
 80045a4:	080045bf 	.word	0x080045bf
 80045a8:	080045c5 	.word	0x080045c5
 80045ac:	080045cb 	.word	0x080045cb
 80045b0:	080045d1 	.word	0x080045d1
 80045b4:	080045d7 	.word	0x080045d7
        case RXF0: reg = MCP_RXF0SIDH; break;
 80045b8:	2300      	movs	r3, #0
 80045ba:	75fb      	strb	r3, [r7, #23]
 80045bc:	e010      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80045be:	2304      	movs	r3, #4
 80045c0:	75fb      	strb	r3, [r7, #23]
 80045c2:	e00d      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80045c4:	2308      	movs	r3, #8
 80045c6:	75fb      	strb	r3, [r7, #23]
 80045c8:	e00a      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80045ca:	2310      	movs	r3, #16
 80045cc:	75fb      	strb	r3, [r7, #23]
 80045ce:	e007      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80045d0:	2314      	movs	r3, #20
 80045d2:	75fb      	strb	r3, [r7, #23]
 80045d4:	e004      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80045d6:	2318      	movs	r3, #24
 80045d8:	75fb      	strb	r3, [r7, #23]
 80045da:	e001      	b.n	80045e0 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 80045dc:	2301      	movs	r3, #1
 80045de:	e00e      	b.n	80045fe <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80045e0:	7aba      	ldrb	r2, [r7, #10]
 80045e2:	f107 0110 	add.w	r1, r7, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f7ff ff2d 	bl	8004448 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 80045ee:	f107 0210 	add.w	r2, r7, #16
 80045f2:	7df9      	ldrb	r1, [r7, #23]
 80045f4:	2304      	movs	r3, #4
 80045f6:	68f8      	ldr	r0, [r7, #12]
 80045f8:	f7ff fc90 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3718      	adds	r7, #24
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
 8004606:	bf00      	nop

08004608 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const TXBn txbn, const struct can_frame *frame)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	b08c      	sub	sp, #48	@ 0x30
 800460c:	af00      	add	r7, sp, #0
 800460e:	60f8      	str	r0, [r7, #12]
 8004610:	460b      	mov	r3, r1
 8004612:	607a      	str	r2, [r7, #4]
 8004614:	72fb      	strb	r3, [r7, #11]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	791b      	ldrb	r3, [r3, #4]
 800461a:	2b08      	cmp	r3, #8
 800461c:	d901      	bls.n	8004622 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x1a>
        return ERROR_FAILTX;
 800461e:	2304      	movs	r3, #4
 8004620:	e067      	b.n	80046f2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }

    const struct TXBn_REGS *txbuf = &TXB[txbn];
 8004622:	7afa      	ldrb	r2, [r7, #11]
 8004624:	4613      	mov	r3, r2
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	4413      	add	r3, r2
 800462a:	4a34      	ldr	r2, [pc, #208]	@ (80046fc <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xf4>)
 800462c:	4413      	add	r3, r2
 800462e:	62fb      	str	r3, [r7, #44]	@ 0x2c

    uint8_t data[13];

    bool ext = (frame->can_id & CAN_EFF_FLAG);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	0fdb      	lsrs	r3, r3, #31
 8004636:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    bool rtr = (frame->can_id & CAN_RTR_FLAG);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004642:	2b00      	cmp	r3, #0
 8004644:	bf14      	ite	ne
 8004646:	2301      	movne	r3, #1
 8004648:	2300      	moveq	r3, #0
 800464a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint32_t id = (frame->can_id & (ext ? CAN_EFF_MASK : CAN_SFF_MASK));
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8004656:	2a00      	cmp	r2, #0
 8004658:	d002      	beq.n	8004660 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x58>
 800465a:	f06f 4260 	mvn.w	r2, #3758096384	@ 0xe0000000
 800465e:	e001      	b.n	8004664 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x5c>
 8004660:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8004664:	4013      	ands	r3, r2
 8004666:	627b      	str	r3, [r7, #36]	@ 0x24

    prepareId(data, ext, id);
 8004668:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 800466c:	f107 0114 	add.w	r1, r7, #20
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	68f8      	ldr	r0, [r7, #12]
 8004674:	f7ff fee8 	bl	8004448 <_ZN7MCP25159prepareIdEPhbm>

    data[MCP_DLC] = rtr ? (frame->can_dlc | RTR_MASK) : frame->can_dlc;
 8004678:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x84>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	791b      	ldrb	r3, [r3, #4]
 8004684:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004688:	b2db      	uxtb	r3, r3
 800468a:	e001      	b.n	8004690 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0x88>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	791b      	ldrb	r3, [r3, #4]
 8004690:	763b      	strb	r3, [r7, #24]

    memcpy(&data[MCP_DATA], frame->data, frame->can_dlc);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f103 0108 	add.w	r1, r3, #8
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	791b      	ldrb	r3, [r3, #4]
 800469c:	461a      	mov	r2, r3
 800469e:	f107 0314 	add.w	r3, r7, #20
 80046a2:	3305      	adds	r3, #5
 80046a4:	4618      	mov	r0, r3
 80046a6:	f00a fabb 	bl	800ec20 <memcpy>

    setRegisters(txbuf->SIDH, data, 5 + frame->can_dlc);
 80046aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046ac:	7859      	ldrb	r1, [r3, #1]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	791b      	ldrb	r3, [r3, #4]
 80046b2:	3305      	adds	r3, #5
 80046b4:	b2db      	uxtb	r3, r3
 80046b6:	f107 0214 	add.w	r2, r7, #20
 80046ba:	68f8      	ldr	r0, [r7, #12]
 80046bc:	f7ff fc2e 	bl	8003f1c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    modifyRegister(txbuf->CTRL, TXB_TXREQ, TXB_TXREQ);
 80046c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046c2:	7819      	ldrb	r1, [r3, #0]
 80046c4:	2308      	movs	r3, #8
 80046c6:	2208      	movs	r2, #8
 80046c8:	68f8      	ldr	r0, [r7, #12]
 80046ca:	f7ff fc56 	bl	8003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    uint8_t ctrl = readRegister(txbuf->CTRL);
 80046ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	4619      	mov	r1, r3
 80046d4:	68f8      	ldr	r0, [r7, #12]
 80046d6:	f7ff fbb3 	bl	8003e40 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80046da:	4603      	mov	r3, r0
 80046dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    if ((ctrl & (TXB_ABTF | TXB_MLOA | TXB_TXERR)) != 0) {
 80046e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046e4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d001      	beq.n	80046f0 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xe8>
        return ERROR_FAILTX;
 80046ec:	2304      	movs	r3, #4
 80046ee:	e000      	b.n	80046f2 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame+0xea>
    }
    return ERROR_OK;
 80046f0:	2300      	movs	r3, #0
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	3730      	adds	r7, #48	@ 0x30
 80046f6:	46bd      	mov	sp, r7
 80046f8:	bd80      	pop	{r7, pc}
 80046fa:	bf00      	nop
 80046fc:	08016f7c 	.word	0x08016f7c

08004700 <_ZN7MCP251511sendMessageEPK9can_frame>:

MCP2515::ERROR MCP2515::sendMessage(const struct can_frame *frame)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b086      	sub	sp, #24
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
    if (frame->can_dlc > CAN_MAX_DLEN) {
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	791b      	ldrb	r3, [r3, #4]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d901      	bls.n	8004716 <_ZN7MCP251511sendMessageEPK9can_frame+0x16>
        return ERROR_FAILTX;
 8004712:	2304      	movs	r3, #4
 8004714:	e037      	b.n	8004786 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    }

    TXBn txBuffers[N_TXBUFFERS] = {TXB0, TXB1, TXB2};
 8004716:	4a1e      	ldr	r2, [pc, #120]	@ (8004790 <_ZN7MCP251511sendMessageEPK9can_frame+0x90>)
 8004718:	f107 030c 	add.w	r3, r7, #12
 800471c:	6812      	ldr	r2, [r2, #0]
 800471e:	4611      	mov	r1, r2
 8004720:	8019      	strh	r1, [r3, #0]
 8004722:	3302      	adds	r3, #2
 8004724:	0c12      	lsrs	r2, r2, #16
 8004726:	701a      	strb	r2, [r3, #0]

    for (int i=0; i<N_TXBUFFERS; i++) {
 8004728:	2300      	movs	r3, #0
 800472a:	617b      	str	r3, [r7, #20]
 800472c:	e027      	b.n	800477e <_ZN7MCP251511sendMessageEPK9can_frame+0x7e>
        const struct TXBn_REGS *txbuf = &TXB[txBuffers[i]];
 800472e:	f107 020c 	add.w	r2, r7, #12
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	4413      	add	r3, r2
 8004736:	781b      	ldrb	r3, [r3, #0]
 8004738:	461a      	mov	r2, r3
 800473a:	4613      	mov	r3, r2
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	4a14      	ldr	r2, [pc, #80]	@ (8004794 <_ZN7MCP251511sendMessageEPK9can_frame+0x94>)
 8004742:	4413      	add	r3, r2
 8004744:	613b      	str	r3, [r7, #16]
        uint8_t ctrlval = readRegister(txbuf->CTRL);
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	781b      	ldrb	r3, [r3, #0]
 800474a:	4619      	mov	r1, r3
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff fb77 	bl	8003e40 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004752:	4603      	mov	r3, r0
 8004754:	73fb      	strb	r3, [r7, #15]
        if ( (ctrlval & TXB_TXREQ) == 0 ) {
 8004756:	7bfb      	ldrb	r3, [r7, #15]
 8004758:	f003 0308 	and.w	r3, r3, #8
 800475c:	2b00      	cmp	r3, #0
 800475e:	d10b      	bne.n	8004778 <_ZN7MCP251511sendMessageEPK9can_frame+0x78>
            return sendMessage(txBuffers[i], frame);
 8004760:	f107 020c 	add.w	r2, r7, #12
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	4413      	add	r3, r2
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	4619      	mov	r1, r3
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ff4a 	bl	8004608 <_ZN7MCP251511sendMessageENS_4TXBnEPK9can_frame>
 8004774:	4603      	mov	r3, r0
 8004776:	e006      	b.n	8004786 <_ZN7MCP251511sendMessageEPK9can_frame+0x86>
    for (int i=0; i<N_TXBUFFERS; i++) {
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	3301      	adds	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2b02      	cmp	r3, #2
 8004782:	ddd4      	ble.n	800472e <_ZN7MCP251511sendMessageEPK9can_frame+0x2e>
        }
    }

    return ERROR_ALLTXBUSY;
 8004784:	2302      	movs	r3, #2
}
 8004786:	4618      	mov	r0, r3
 8004788:	3718      	adds	r7, #24
 800478a:	46bd      	mov	sp, r7
 800478c:	bd80      	pop	{r7, pc}
 800478e:	bf00      	nop
 8004790:	0800f4a8 	.word	0x0800f4a8
 8004794:	08016f7c 	.word	0x08016f7c

08004798 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b088      	sub	sp, #32
 800479c:	af00      	add	r7, sp, #0
 800479e:	60f8      	str	r0, [r7, #12]
 80047a0:	460b      	mov	r3, r1
 80047a2:	607a      	str	r2, [r7, #4]
 80047a4:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80047a6:	7afb      	ldrb	r3, [r7, #11]
 80047a8:	009b      	lsls	r3, r3, #2
 80047aa:	4a30      	ldr	r2, [pc, #192]	@ (800486c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80047ac:	4413      	add	r3, r2
 80047ae:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80047b0:	69bb      	ldr	r3, [r7, #24]
 80047b2:	7859      	ldrb	r1, [r3, #1]
 80047b4:	f107 0210 	add.w	r2, r7, #16
 80047b8:	2305      	movs	r3, #5
 80047ba:	68f8      	ldr	r0, [r7, #12]
 80047bc:	f7ff fb5f 	bl	8003e7e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80047c0:	7c3b      	ldrb	r3, [r7, #16]
 80047c2:	00db      	lsls	r3, r3, #3
 80047c4:	7c7a      	ldrb	r2, [r7, #17]
 80047c6:	0952      	lsrs	r2, r2, #5
 80047c8:	b2d2      	uxtb	r2, r2
 80047ca:	4413      	add	r3, r2
 80047cc:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80047ce:	7c7b      	ldrb	r3, [r7, #17]
 80047d0:	f003 0308 	and.w	r3, r3, #8
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d014      	beq.n	8004802 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	009a      	lsls	r2, r3, #2
 80047dc:	7c7b      	ldrb	r3, [r7, #17]
 80047de:	f003 0303 	and.w	r3, r3, #3
 80047e2:	4413      	add	r3, r2
 80047e4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	021b      	lsls	r3, r3, #8
 80047ea:	7cba      	ldrb	r2, [r7, #18]
 80047ec:	4413      	add	r3, r2
 80047ee:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	021b      	lsls	r3, r3, #8
 80047f4:	7cfa      	ldrb	r2, [r7, #19]
 80047f6:	4413      	add	r3, r2
 80047f8:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004800:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8004802:	7d3b      	ldrb	r3, [r7, #20]
 8004804:	f003 030f 	and.w	r3, r3, #15
 8004808:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b08      	cmp	r3, #8
 800480e:	d901      	bls.n	8004814 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8004810:	2301      	movs	r3, #1
 8004812:	e027      	b.n	8004864 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	4619      	mov	r1, r3
 800481a:	68f8      	ldr	r0, [r7, #12]
 800481c:	f7ff fb10 	bl	8003e40 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004820:	4603      	mov	r3, r0
 8004822:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004824:	7dbb      	ldrb	r3, [r7, #22]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b00      	cmp	r3, #0
 800482c:	d003      	beq.n	8004836 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800482e:	69fb      	ldr	r3, [r7, #28]
 8004830:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004834:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	7dfa      	ldrb	r2, [r7, #23]
 8004840:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	7899      	ldrb	r1, [r3, #2]
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f103 0208 	add.w	r2, r3, #8
 800484c:	7dfb      	ldrb	r3, [r7, #23]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff fb15 	bl	8003e7e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004854:	69bb      	ldr	r3, [r7, #24]
 8004856:	78da      	ldrb	r2, [r3, #3]
 8004858:	2300      	movs	r3, #0
 800485a:	212c      	movs	r1, #44	@ 0x2c
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	f7ff fb8c 	bl	8003f7a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004862:	2300      	movs	r3, #0
}
 8004864:	4618      	mov	r0, r3
 8004866:	3720      	adds	r7, #32
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	08016f88 	.word	0x08016f88

08004870 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
 8004878:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f7ff fba7 	bl	8003fce <_ZN7MCP25159getStatusEv>
 8004880:	4603      	mov	r3, r0
 8004882:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004884:	7bbb      	ldrb	r3, [r7, #14]
 8004886:	f003 0301 	and.w	r3, r3, #1
 800488a:	2b00      	cmp	r3, #0
 800488c:	d007      	beq.n	800489e <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800488e:	683a      	ldr	r2, [r7, #0]
 8004890:	2100      	movs	r1, #0
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f7ff ff80 	bl	8004798 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004898:	4603      	mov	r3, r0
 800489a:	73fb      	strb	r3, [r7, #15]
 800489c:	e00e      	b.n	80048bc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800489e:	7bbb      	ldrb	r3, [r7, #14]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80048a8:	683a      	ldr	r2, [r7, #0]
 80048aa:	2101      	movs	r1, #1
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7ff ff73 	bl	8004798 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80048b2:	4603      	mov	r3, r0
 80048b4:	73fb      	strb	r3, [r7, #15]
 80048b6:	e001      	b.n	80048bc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80048b8:	2305      	movs	r3, #5
 80048ba:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80048bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}
	...

080048c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80048c8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004900 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80048cc:	f7fd fc70 	bl	80021b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80048d0:	480c      	ldr	r0, [pc, #48]	@ (8004904 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80048d2:	490d      	ldr	r1, [pc, #52]	@ (8004908 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80048d4:	4a0d      	ldr	r2, [pc, #52]	@ (800490c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80048d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80048d8:	e002      	b.n	80048e0 <LoopCopyDataInit>

080048da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80048da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80048dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80048de:	3304      	adds	r3, #4

080048e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80048e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80048e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80048e4:	d3f9      	bcc.n	80048da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80048e6:	4a0a      	ldr	r2, [pc, #40]	@ (8004910 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80048e8:	4c0a      	ldr	r4, [pc, #40]	@ (8004914 <LoopFillZerobss+0x22>)
  movs r3, #0
 80048ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80048ec:	e001      	b.n	80048f2 <LoopFillZerobss>

080048ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80048ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80048f0:	3204      	adds	r2, #4

080048f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80048f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80048f4:	d3fb      	bcc.n	80048ee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80048f6:	f00a f96d 	bl	800ebd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048fa:	f7fc fc5f 	bl	80011bc <main>
  bx  lr    
 80048fe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004900:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004904:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004908:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 800490c:	08017008 	.word	0x08017008
  ldr r2, =_sbss
 8004910:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8004914:	20001988 	.word	0x20001988

08004918 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004918:	e7fe      	b.n	8004918 <ADC_IRQHandler>
	...

0800491c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004920:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <HAL_Init+0x40>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a0d      	ldr	r2, [pc, #52]	@ (800495c <HAL_Init+0x40>)
 8004926:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800492a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800492c:	4b0b      	ldr	r3, [pc, #44]	@ (800495c <HAL_Init+0x40>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a0a      	ldr	r2, [pc, #40]	@ (800495c <HAL_Init+0x40>)
 8004932:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004936:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004938:	4b08      	ldr	r3, [pc, #32]	@ (800495c <HAL_Init+0x40>)
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	4a07      	ldr	r2, [pc, #28]	@ (800495c <HAL_Init+0x40>)
 800493e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004942:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004944:	2003      	movs	r0, #3
 8004946:	f000 f94f 	bl	8004be8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800494a:	200f      	movs	r0, #15
 800494c:	f000 f808 	bl	8004960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004950:	f7fd fb0e 	bl	8001f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004954:	2300      	movs	r3, #0
}
 8004956:	4618      	mov	r0, r3
 8004958:	bd80      	pop	{r7, pc}
 800495a:	bf00      	nop
 800495c:	40023c00 	.word	0x40023c00

08004960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b082      	sub	sp, #8
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004968:	4b12      	ldr	r3, [pc, #72]	@ (80049b4 <HAL_InitTick+0x54>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	4b12      	ldr	r3, [pc, #72]	@ (80049b8 <HAL_InitTick+0x58>)
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	4619      	mov	r1, r3
 8004972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004976:	fbb3 f3f1 	udiv	r3, r3, r1
 800497a:	fbb2 f3f3 	udiv	r3, r2, r3
 800497e:	4618      	mov	r0, r3
 8004980:	f000 f967 	bl	8004c52 <HAL_SYSTICK_Config>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e00e      	b.n	80049ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b0f      	cmp	r3, #15
 8004992:	d80a      	bhi.n	80049aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004994:	2200      	movs	r2, #0
 8004996:	6879      	ldr	r1, [r7, #4]
 8004998:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800499c:	f000 f92f 	bl	8004bfe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049a0:	4a06      	ldr	r2, [pc, #24]	@ (80049bc <HAL_InitTick+0x5c>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049a6:	2300      	movs	r3, #0
 80049a8:	e000      	b.n	80049ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049aa:	2301      	movs	r3, #1
}
 80049ac:	4618      	mov	r0, r3
 80049ae:	3708      	adds	r7, #8
 80049b0:	46bd      	mov	sp, r7
 80049b2:	bd80      	pop	{r7, pc}
 80049b4:	20000004 	.word	0x20000004
 80049b8:	20000034 	.word	0x20000034
 80049bc:	20000030 	.word	0x20000030

080049c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80049c0:	b480      	push	{r7}
 80049c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80049c4:	4b06      	ldr	r3, [pc, #24]	@ (80049e0 <HAL_IncTick+0x20>)
 80049c6:	781b      	ldrb	r3, [r3, #0]
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b06      	ldr	r3, [pc, #24]	@ (80049e4 <HAL_IncTick+0x24>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4413      	add	r3, r2
 80049d0:	4a04      	ldr	r2, [pc, #16]	@ (80049e4 <HAL_IncTick+0x24>)
 80049d2:	6013      	str	r3, [r2, #0]
}
 80049d4:	bf00      	nop
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000034 	.word	0x20000034
 80049e4:	20000418 	.word	0x20000418

080049e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
  return uwTick;
 80049ec:	4b03      	ldr	r3, [pc, #12]	@ (80049fc <HAL_GetTick+0x14>)
 80049ee:	681b      	ldr	r3, [r3, #0]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr
 80049fa:	bf00      	nop
 80049fc:	20000418 	.word	0x20000418

08004a00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b084      	sub	sp, #16
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a08:	f7ff ffee 	bl	80049e8 <HAL_GetTick>
 8004a0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004a18:	d005      	beq.n	8004a26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a1a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a44 <HAL_Delay+0x44>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	461a      	mov	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a26:	bf00      	nop
 8004a28:	f7ff ffde 	bl	80049e8 <HAL_GetTick>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	68bb      	ldr	r3, [r7, #8]
 8004a30:	1ad3      	subs	r3, r2, r3
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d8f7      	bhi.n	8004a28 <HAL_Delay+0x28>
  {
  }
}
 8004a38:	bf00      	nop
 8004a3a:	bf00      	nop
 8004a3c:	3710      	adds	r7, #16
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000034 	.word	0x20000034

08004a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	b085      	sub	sp, #20
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	f003 0307 	and.w	r3, r3, #7
 8004a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <__NVIC_SetPriorityGrouping+0x44>)
 8004a5a:	68db      	ldr	r3, [r3, #12]
 8004a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004a64:	4013      	ands	r3, r2
 8004a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004a70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004a74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004a7a:	4a04      	ldr	r2, [pc, #16]	@ (8004a8c <__NVIC_SetPriorityGrouping+0x44>)
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	60d3      	str	r3, [r2, #12]
}
 8004a80:	bf00      	nop
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr
 8004a8c:	e000ed00 	.word	0xe000ed00

08004a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004a94:	4b04      	ldr	r3, [pc, #16]	@ (8004aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	0a1b      	lsrs	r3, r3, #8
 8004a9a:	f003 0307 	and.w	r3, r3, #7
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr
 8004aa8:	e000ed00 	.word	0xe000ed00

08004aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	db0b      	blt.n	8004ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004abe:	79fb      	ldrb	r3, [r7, #7]
 8004ac0:	f003 021f 	and.w	r2, r3, #31
 8004ac4:	4907      	ldr	r1, [pc, #28]	@ (8004ae4 <__NVIC_EnableIRQ+0x38>)
 8004ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004aca:	095b      	lsrs	r3, r3, #5
 8004acc:	2001      	movs	r0, #1
 8004ace:	fa00 f202 	lsl.w	r2, r0, r2
 8004ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004ad6:	bf00      	nop
 8004ad8:	370c      	adds	r7, #12
 8004ada:	46bd      	mov	sp, r7
 8004adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae0:	4770      	bx	lr
 8004ae2:	bf00      	nop
 8004ae4:	e000e100 	.word	0xe000e100

08004ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	4603      	mov	r3, r0
 8004af0:	6039      	str	r1, [r7, #0]
 8004af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	db0a      	blt.n	8004b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	b2da      	uxtb	r2, r3
 8004b00:	490c      	ldr	r1, [pc, #48]	@ (8004b34 <__NVIC_SetPriority+0x4c>)
 8004b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b06:	0112      	lsls	r2, r2, #4
 8004b08:	b2d2      	uxtb	r2, r2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004b10:	e00a      	b.n	8004b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4908      	ldr	r1, [pc, #32]	@ (8004b38 <__NVIC_SetPriority+0x50>)
 8004b18:	79fb      	ldrb	r3, [r7, #7]
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	3b04      	subs	r3, #4
 8004b20:	0112      	lsls	r2, r2, #4
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	440b      	add	r3, r1
 8004b26:	761a      	strb	r2, [r3, #24]
}
 8004b28:	bf00      	nop
 8004b2a:	370c      	adds	r7, #12
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	e000e100 	.word	0xe000e100
 8004b38:	e000ed00 	.word	0xe000ed00

08004b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b089      	sub	sp, #36	@ 0x24
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 0307 	and.w	r3, r3, #7
 8004b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004b50:	69fb      	ldr	r3, [r7, #28]
 8004b52:	f1c3 0307 	rsb	r3, r3, #7
 8004b56:	2b04      	cmp	r3, #4
 8004b58:	bf28      	it	cs
 8004b5a:	2304      	movcs	r3, #4
 8004b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	3304      	adds	r3, #4
 8004b62:	2b06      	cmp	r3, #6
 8004b64:	d902      	bls.n	8004b6c <NVIC_EncodePriority+0x30>
 8004b66:	69fb      	ldr	r3, [r7, #28]
 8004b68:	3b03      	subs	r3, #3
 8004b6a:	e000      	b.n	8004b6e <NVIC_EncodePriority+0x32>
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7a:	43da      	mvns	r2, r3
 8004b7c:	68bb      	ldr	r3, [r7, #8]
 8004b7e:	401a      	ands	r2, r3
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004b84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	43d9      	mvns	r1, r3
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004b94:	4313      	orrs	r3, r2
         );
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3724      	adds	r7, #36	@ 0x24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr
	...

08004ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	3b01      	subs	r3, #1
 8004bb0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004bb4:	d301      	bcc.n	8004bba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00f      	b.n	8004bda <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004bba:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <SysTick_Config+0x40>)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	3b01      	subs	r3, #1
 8004bc0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004bc2:	210f      	movs	r1, #15
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bc8:	f7ff ff8e 	bl	8004ae8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004bcc:	4b05      	ldr	r3, [pc, #20]	@ (8004be4 <SysTick_Config+0x40>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004bd2:	4b04      	ldr	r3, [pc, #16]	@ (8004be4 <SysTick_Config+0x40>)
 8004bd4:	2207      	movs	r2, #7
 8004bd6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004bd8:	2300      	movs	r3, #0
}
 8004bda:	4618      	mov	r0, r3
 8004bdc:	3708      	adds	r7, #8
 8004bde:	46bd      	mov	sp, r7
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	e000e010 	.word	0xe000e010

08004be8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff ff29 	bl	8004a48 <__NVIC_SetPriorityGrouping>
}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	4603      	mov	r3, r0
 8004c06:	60b9      	str	r1, [r7, #8]
 8004c08:	607a      	str	r2, [r7, #4]
 8004c0a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004c10:	f7ff ff3e 	bl	8004a90 <__NVIC_GetPriorityGrouping>
 8004c14:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	68b9      	ldr	r1, [r7, #8]
 8004c1a:	6978      	ldr	r0, [r7, #20]
 8004c1c:	f7ff ff8e 	bl	8004b3c <NVIC_EncodePriority>
 8004c20:	4602      	mov	r2, r0
 8004c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004c26:	4611      	mov	r1, r2
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7ff ff5d 	bl	8004ae8 <__NVIC_SetPriority>
}
 8004c2e:	bf00      	nop
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}

08004c36 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c36:	b580      	push	{r7, lr}
 8004c38:	b082      	sub	sp, #8
 8004c3a:	af00      	add	r7, sp, #0
 8004c3c:	4603      	mov	r3, r0
 8004c3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004c40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7ff ff31 	bl	8004aac <__NVIC_EnableIRQ>
}
 8004c4a:	bf00      	nop
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b082      	sub	sp, #8
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004c5a:	6878      	ldr	r0, [r7, #4]
 8004c5c:	f7ff ffa2 	bl	8004ba4 <SysTick_Config>
 8004c60:	4603      	mov	r3, r0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}
	...

08004c6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b086      	sub	sp, #24
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004c78:	f7ff feb6 	bl	80049e8 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d101      	bne.n	8004c88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e099      	b.n	8004dbc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2202      	movs	r2, #2
 8004c8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0201 	bic.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004ca8:	e00f      	b.n	8004cca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004caa:	f7ff fe9d 	bl	80049e8 <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b05      	cmp	r3, #5
 8004cb6:	d908      	bls.n	8004cca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2220      	movs	r2, #32
 8004cbc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2203      	movs	r2, #3
 8004cc2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e078      	b.n	8004dbc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e8      	bne.n	8004caa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004ce0:	697a      	ldr	r2, [r7, #20]
 8004ce2:	4b38      	ldr	r3, [pc, #224]	@ (8004dc4 <HAL_DMA_Init+0x158>)
 8004ce4:	4013      	ands	r3, r2
 8004ce6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	685a      	ldr	r2, [r3, #4]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004cf6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	699b      	ldr	r3, [r3, #24]
 8004d08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6a1b      	ldr	r3, [r3, #32]
 8004d14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d16:	697a      	ldr	r2, [r7, #20]
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d20:	2b04      	cmp	r3, #4
 8004d22:	d107      	bne.n	8004d34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	697a      	ldr	r2, [r7, #20]
 8004d30:	4313      	orrs	r3, r2
 8004d32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	697a      	ldr	r2, [r7, #20]
 8004d3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004d44:	697b      	ldr	r3, [r7, #20]
 8004d46:	f023 0307 	bic.w	r3, r3, #7
 8004d4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	4313      	orrs	r3, r2
 8004d54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d5a:	2b04      	cmp	r3, #4
 8004d5c:	d117      	bne.n	8004d8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d62:	697a      	ldr	r2, [r7, #20]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f000 fa91 	bl	8005298 <DMA_CheckFifoParam>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d008      	beq.n	8004d8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2240      	movs	r2, #64	@ 0x40
 8004d80:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	2201      	movs	r2, #1
 8004d86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e016      	b.n	8004dbc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 fa48 	bl	800522c <DMA_CalcBaseAndBitshift>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004da4:	223f      	movs	r2, #63	@ 0x3f
 8004da6:	409a      	lsls	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004dba:	2300      	movs	r3, #0
}
 8004dbc:	4618      	mov	r0, r3
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}
 8004dc4:	f010803f 	.word	0xf010803f

08004dc8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	60f8      	str	r0, [r7, #12]
 8004dd0:	60b9      	str	r1, [r7, #8]
 8004dd2:	607a      	str	r2, [r7, #4]
 8004dd4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dde:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004de6:	2b01      	cmp	r3, #1
 8004de8:	d101      	bne.n	8004dee <HAL_DMA_Start_IT+0x26>
 8004dea:	2302      	movs	r3, #2
 8004dec:	e040      	b.n	8004e70 <HAL_DMA_Start_IT+0xa8>
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	2201      	movs	r2, #1
 8004df2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d12f      	bne.n	8004e62 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2202      	movs	r2, #2
 8004e06:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	687a      	ldr	r2, [r7, #4]
 8004e14:	68b9      	ldr	r1, [r7, #8]
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f000 f9da 	bl	80051d0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e20:	223f      	movs	r2, #63	@ 0x3f
 8004e22:	409a      	lsls	r2, r3
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f042 0216 	orr.w	r2, r2, #22
 8004e36:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f042 0208 	orr.w	r2, r2, #8
 8004e4e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	681a      	ldr	r2, [r3, #0]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 0201 	orr.w	r2, r2, #1
 8004e5e:	601a      	str	r2, [r3, #0]
 8004e60:	e005      	b.n	8004e6e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004e6a:	2302      	movs	r3, #2
 8004e6c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004e6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3718      	adds	r7, #24
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004e78:	b480      	push	{r7}
 8004e7a:	b083      	sub	sp, #12
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004e86:	b2db      	uxtb	r3, r3
 8004e88:	2b02      	cmp	r3, #2
 8004e8a:	d004      	beq.n	8004e96 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2280      	movs	r2, #128	@ 0x80
 8004e90:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e00c      	b.n	8004eb0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2205      	movs	r2, #5
 8004e9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0201 	bic.w	r2, r2, #1
 8004eac:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004eae:	2300      	movs	r3, #0
}
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b086      	sub	sp, #24
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004ec8:	4b8e      	ldr	r3, [pc, #568]	@ (8005104 <HAL_DMA_IRQHandler+0x248>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a8e      	ldr	r2, [pc, #568]	@ (8005108 <HAL_DMA_IRQHandler+0x24c>)
 8004ece:	fba2 2303 	umull	r2, r3, r2, r3
 8004ed2:	0a9b      	lsrs	r3, r3, #10
 8004ed4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004eda:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004edc:	693b      	ldr	r3, [r7, #16]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004ee6:	2208      	movs	r2, #8
 8004ee8:	409a      	lsls	r2, r3
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	4013      	ands	r3, r2
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d01a      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f003 0304 	and.w	r3, r3, #4
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f022 0204 	bic.w	r2, r2, #4
 8004f0e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f14:	2208      	movs	r2, #8
 8004f16:	409a      	lsls	r2, r3
 8004f18:	693b      	ldr	r3, [r7, #16]
 8004f1a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f2c:	2201      	movs	r2, #1
 8004f2e:	409a      	lsls	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	4013      	ands	r3, r2
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d012      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	695b      	ldr	r3, [r3, #20]
 8004f3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d00b      	beq.n	8004f5e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f56:	f043 0202 	orr.w	r2, r3, #2
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f62:	2204      	movs	r2, #4
 8004f64:	409a      	lsls	r2, r3
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d012      	beq.n	8004f94 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 0302 	and.w	r3, r3, #2
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d00b      	beq.n	8004f94 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f80:	2204      	movs	r2, #4
 8004f82:	409a      	lsls	r2, r3
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f8c:	f043 0204 	orr.w	r2, r3, #4
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f98:	2210      	movs	r2, #16
 8004f9a:	409a      	lsls	r2, r3
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d043      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d03c      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004fb6:	2210      	movs	r2, #16
 8004fb8:	409a      	lsls	r2, r3
 8004fba:	693b      	ldr	r3, [r7, #16]
 8004fbc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d018      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d108      	bne.n	8004fec <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d024      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	4798      	blx	r3
 8004fea:	e01f      	b.n	800502c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d01b      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
 8004ffc:	e016      	b.n	800502c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d107      	bne.n	800501c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0208 	bic.w	r2, r2, #8
 800501a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005030:	2220      	movs	r2, #32
 8005032:	409a      	lsls	r2, r3
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	4013      	ands	r3, r2
 8005038:	2b00      	cmp	r3, #0
 800503a:	f000 808f 	beq.w	800515c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 0310 	and.w	r3, r3, #16
 8005048:	2b00      	cmp	r3, #0
 800504a:	f000 8087 	beq.w	800515c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005052:	2220      	movs	r2, #32
 8005054:	409a      	lsls	r2, r3
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b05      	cmp	r3, #5
 8005064:	d136      	bne.n	80050d4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f022 0216 	bic.w	r2, r2, #22
 8005074:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	695a      	ldr	r2, [r3, #20]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005084:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800508a:	2b00      	cmp	r3, #0
 800508c:	d103      	bne.n	8005096 <HAL_DMA_IRQHandler+0x1da>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005092:	2b00      	cmp	r3, #0
 8005094:	d007      	beq.n	80050a6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f022 0208 	bic.w	r2, r2, #8
 80050a4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80050aa:	223f      	movs	r2, #63	@ 0x3f
 80050ac:	409a      	lsls	r2, r3
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2201      	movs	r2, #1
 80050b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d07e      	beq.n	80051c8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	4798      	blx	r3
        }
        return;
 80050d2:	e079      	b.n	80051c8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d01d      	beq.n	800511e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10d      	bne.n	800510c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d031      	beq.n	800515c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	4798      	blx	r3
 8005100:	e02c      	b.n	800515c <HAL_DMA_IRQHandler+0x2a0>
 8005102:	bf00      	nop
 8005104:	20000004 	.word	0x20000004
 8005108:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005110:	2b00      	cmp	r3, #0
 8005112:	d023      	beq.n	800515c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005118:	6878      	ldr	r0, [r7, #4]
 800511a:	4798      	blx	r3
 800511c:	e01e      	b.n	800515c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005128:	2b00      	cmp	r3, #0
 800512a:	d10f      	bne.n	800514c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	681a      	ldr	r2, [r3, #0]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f022 0210 	bic.w	r2, r2, #16
 800513a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2200      	movs	r2, #0
 8005148:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d003      	beq.n	800515c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005160:	2b00      	cmp	r3, #0
 8005162:	d032      	beq.n	80051ca <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005168:	f003 0301 	and.w	r3, r3, #1
 800516c:	2b00      	cmp	r3, #0
 800516e:	d022      	beq.n	80051b6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2205      	movs	r2, #5
 8005174:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	f022 0201 	bic.w	r2, r2, #1
 8005186:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	3301      	adds	r3, #1
 800518c:	60bb      	str	r3, [r7, #8]
 800518e:	697a      	ldr	r2, [r7, #20]
 8005190:	429a      	cmp	r2, r3
 8005192:	d307      	bcc.n	80051a4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f003 0301 	and.w	r3, r3, #1
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f2      	bne.n	8005188 <HAL_DMA_IRQHandler+0x2cc>
 80051a2:	e000      	b.n	80051a6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80051a4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	4798      	blx	r3
 80051c6:	e000      	b.n	80051ca <HAL_DMA_IRQHandler+0x30e>
        return;
 80051c8:	bf00      	nop
    }
  }
}
 80051ca:	3718      	adds	r7, #24
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}

080051d0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80051d0:	b480      	push	{r7}
 80051d2:	b085      	sub	sp, #20
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	60f8      	str	r0, [r7, #12]
 80051d8:	60b9      	str	r1, [r7, #8]
 80051da:	607a      	str	r2, [r7, #4]
 80051dc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	681a      	ldr	r2, [r3, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80051ec:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	683a      	ldr	r2, [r7, #0]
 80051f4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	689b      	ldr	r3, [r3, #8]
 80051fa:	2b40      	cmp	r3, #64	@ 0x40
 80051fc:	d108      	bne.n	8005210 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68ba      	ldr	r2, [r7, #8]
 800520c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800520e:	e007      	b.n	8005220 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	60da      	str	r2, [r3, #12]
}
 8005220:	bf00      	nop
 8005222:	3714      	adds	r7, #20
 8005224:	46bd      	mov	sp, r7
 8005226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522a:	4770      	bx	lr

0800522c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	3b10      	subs	r3, #16
 800523c:	4a14      	ldr	r2, [pc, #80]	@ (8005290 <DMA_CalcBaseAndBitshift+0x64>)
 800523e:	fba2 2303 	umull	r2, r3, r2, r3
 8005242:	091b      	lsrs	r3, r3, #4
 8005244:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005246:	4a13      	ldr	r2, [pc, #76]	@ (8005294 <DMA_CalcBaseAndBitshift+0x68>)
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	4413      	add	r3, r2
 800524c:	781b      	ldrb	r3, [r3, #0]
 800524e:	461a      	mov	r2, r3
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2b03      	cmp	r3, #3
 8005258:	d909      	bls.n	800526e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005262:	f023 0303 	bic.w	r3, r3, #3
 8005266:	1d1a      	adds	r2, r3, #4
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	659a      	str	r2, [r3, #88]	@ 0x58
 800526c:	e007      	b.n	800527e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005276:	f023 0303 	bic.w	r3, r3, #3
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8005282:	4618      	mov	r0, r3
 8005284:	3714      	adds	r7, #20
 8005286:	46bd      	mov	sp, r7
 8005288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528c:	4770      	bx	lr
 800528e:	bf00      	nop
 8005290:	aaaaaaab 	.word	0xaaaaaaab
 8005294:	08016f90 	.word	0x08016f90

08005298 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005298:	b480      	push	{r7}
 800529a:	b085      	sub	sp, #20
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	699b      	ldr	r3, [r3, #24]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d11f      	bne.n	80052f2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80052b2:	68bb      	ldr	r3, [r7, #8]
 80052b4:	2b03      	cmp	r3, #3
 80052b6:	d856      	bhi.n	8005366 <DMA_CheckFifoParam+0xce>
 80052b8:	a201      	add	r2, pc, #4	@ (adr r2, 80052c0 <DMA_CheckFifoParam+0x28>)
 80052ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052be:	bf00      	nop
 80052c0:	080052d1 	.word	0x080052d1
 80052c4:	080052e3 	.word	0x080052e3
 80052c8:	080052d1 	.word	0x080052d1
 80052cc:	08005367 	.word	0x08005367
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d046      	beq.n	800536a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052e0:	e043      	b.n	800536a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052e6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80052ea:	d140      	bne.n	800536e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80052f0:	e03d      	b.n	800536e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	699b      	ldr	r3, [r3, #24]
 80052f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80052fa:	d121      	bne.n	8005340 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d837      	bhi.n	8005372 <DMA_CheckFifoParam+0xda>
 8005302:	a201      	add	r2, pc, #4	@ (adr r2, 8005308 <DMA_CheckFifoParam+0x70>)
 8005304:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005308:	08005319 	.word	0x08005319
 800530c:	0800531f 	.word	0x0800531f
 8005310:	08005319 	.word	0x08005319
 8005314:	08005331 	.word	0x08005331
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005318:	2301      	movs	r3, #1
 800531a:	73fb      	strb	r3, [r7, #15]
      break;
 800531c:	e030      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005322:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005326:	2b00      	cmp	r3, #0
 8005328:	d025      	beq.n	8005376 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800532a:	2301      	movs	r3, #1
 800532c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800532e:	e022      	b.n	8005376 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005334:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005338:	d11f      	bne.n	800537a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800533a:	2301      	movs	r3, #1
 800533c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800533e:	e01c      	b.n	800537a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	2b02      	cmp	r3, #2
 8005344:	d903      	bls.n	800534e <DMA_CheckFifoParam+0xb6>
 8005346:	68bb      	ldr	r3, [r7, #8]
 8005348:	2b03      	cmp	r3, #3
 800534a:	d003      	beq.n	8005354 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800534c:	e018      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	73fb      	strb	r3, [r7, #15]
      break;
 8005352:	e015      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005358:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d00e      	beq.n	800537e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	73fb      	strb	r3, [r7, #15]
      break;
 8005364:	e00b      	b.n	800537e <DMA_CheckFifoParam+0xe6>
      break;
 8005366:	bf00      	nop
 8005368:	e00a      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800536a:	bf00      	nop
 800536c:	e008      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800536e:	bf00      	nop
 8005370:	e006      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 8005372:	bf00      	nop
 8005374:	e004      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 8005376:	bf00      	nop
 8005378:	e002      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;   
 800537a:	bf00      	nop
 800537c:	e000      	b.n	8005380 <DMA_CheckFifoParam+0xe8>
      break;
 800537e:	bf00      	nop
    }
  } 
  
  return status; 
 8005380:	7bfb      	ldrb	r3, [r7, #15]
}
 8005382:	4618      	mov	r0, r3
 8005384:	3714      	adds	r7, #20
 8005386:	46bd      	mov	sp, r7
 8005388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538c:	4770      	bx	lr
 800538e:	bf00      	nop

08005390 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	@ 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800539a:	2300      	movs	r3, #0
 800539c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800539e:	2300      	movs	r3, #0
 80053a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053a6:	2300      	movs	r3, #0
 80053a8:	61fb      	str	r3, [r7, #28]
 80053aa:	e159      	b.n	8005660 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80053ac:	2201      	movs	r2, #1
 80053ae:	69fb      	ldr	r3, [r7, #28]
 80053b0:	fa02 f303 	lsl.w	r3, r2, r3
 80053b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4013      	ands	r3, r2
 80053be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	697b      	ldr	r3, [r7, #20]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	f040 8148 	bne.w	800565a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	f003 0303 	and.w	r3, r3, #3
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d005      	beq.n	80053e2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d130      	bne.n	8005444 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	005b      	lsls	r3, r3, #1
 80053ec:	2203      	movs	r2, #3
 80053ee:	fa02 f303 	lsl.w	r3, r2, r3
 80053f2:	43db      	mvns	r3, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	4013      	ands	r3, r2
 80053f8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	69fb      	ldr	r3, [r7, #28]
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	fa02 f303 	lsl.w	r3, r2, r3
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	4313      	orrs	r3, r2
 800540a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	69ba      	ldr	r2, [r7, #24]
 8005410:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005418:	2201      	movs	r2, #1
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	fa02 f303 	lsl.w	r3, r2, r3
 8005420:	43db      	mvns	r3, r3
 8005422:	69ba      	ldr	r2, [r7, #24]
 8005424:	4013      	ands	r3, r2
 8005426:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	091b      	lsrs	r3, r3, #4
 800542e:	f003 0201 	and.w	r2, r3, #1
 8005432:	69fb      	ldr	r3, [r7, #28]
 8005434:	fa02 f303 	lsl.w	r3, r2, r3
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	4313      	orrs	r3, r2
 800543c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	69ba      	ldr	r2, [r7, #24]
 8005442:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	2b03      	cmp	r3, #3
 800544e:	d017      	beq.n	8005480 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005456:	69fb      	ldr	r3, [r7, #28]
 8005458:	005b      	lsls	r3, r3, #1
 800545a:	2203      	movs	r2, #3
 800545c:	fa02 f303 	lsl.w	r3, r2, r3
 8005460:	43db      	mvns	r3, r3
 8005462:	69ba      	ldr	r2, [r7, #24]
 8005464:	4013      	ands	r3, r2
 8005466:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	69fb      	ldr	r3, [r7, #28]
 800546e:	005b      	lsls	r3, r3, #1
 8005470:	fa02 f303 	lsl.w	r3, r2, r3
 8005474:	69ba      	ldr	r2, [r7, #24]
 8005476:	4313      	orrs	r3, r2
 8005478:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	f003 0303 	and.w	r3, r3, #3
 8005488:	2b02      	cmp	r3, #2
 800548a:	d123      	bne.n	80054d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	08da      	lsrs	r2, r3, #3
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	3208      	adds	r2, #8
 8005494:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005498:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800549a:	69fb      	ldr	r3, [r7, #28]
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	009b      	lsls	r3, r3, #2
 80054a2:	220f      	movs	r2, #15
 80054a4:	fa02 f303 	lsl.w	r3, r2, r3
 80054a8:	43db      	mvns	r3, r3
 80054aa:	69ba      	ldr	r2, [r7, #24]
 80054ac:	4013      	ands	r3, r2
 80054ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	f003 0307 	and.w	r3, r3, #7
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	fa02 f303 	lsl.w	r3, r2, r3
 80054c0:	69ba      	ldr	r2, [r7, #24]
 80054c2:	4313      	orrs	r3, r2
 80054c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	08da      	lsrs	r2, r3, #3
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	3208      	adds	r2, #8
 80054ce:	69b9      	ldr	r1, [r7, #24]
 80054d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	005b      	lsls	r3, r3, #1
 80054de:	2203      	movs	r2, #3
 80054e0:	fa02 f303 	lsl.w	r3, r2, r3
 80054e4:	43db      	mvns	r3, r3
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	4013      	ands	r3, r2
 80054ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	685b      	ldr	r3, [r3, #4]
 80054f0:	f003 0203 	and.w	r2, r3, #3
 80054f4:	69fb      	ldr	r3, [r7, #28]
 80054f6:	005b      	lsls	r3, r3, #1
 80054f8:	fa02 f303 	lsl.w	r3, r2, r3
 80054fc:	69ba      	ldr	r2, [r7, #24]
 80054fe:	4313      	orrs	r3, r2
 8005500:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69ba      	ldr	r2, [r7, #24]
 8005506:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	685b      	ldr	r3, [r3, #4]
 800550c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005510:	2b00      	cmp	r3, #0
 8005512:	f000 80a2 	beq.w	800565a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005516:	2300      	movs	r3, #0
 8005518:	60fb      	str	r3, [r7, #12]
 800551a:	4b57      	ldr	r3, [pc, #348]	@ (8005678 <HAL_GPIO_Init+0x2e8>)
 800551c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800551e:	4a56      	ldr	r2, [pc, #344]	@ (8005678 <HAL_GPIO_Init+0x2e8>)
 8005520:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005524:	6453      	str	r3, [r2, #68]	@ 0x44
 8005526:	4b54      	ldr	r3, [pc, #336]	@ (8005678 <HAL_GPIO_Init+0x2e8>)
 8005528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800552a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800552e:	60fb      	str	r3, [r7, #12]
 8005530:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005532:	4a52      	ldr	r2, [pc, #328]	@ (800567c <HAL_GPIO_Init+0x2ec>)
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	089b      	lsrs	r3, r3, #2
 8005538:	3302      	adds	r3, #2
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	f003 0303 	and.w	r3, r3, #3
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	220f      	movs	r2, #15
 800554a:	fa02 f303 	lsl.w	r3, r2, r3
 800554e:	43db      	mvns	r3, r3
 8005550:	69ba      	ldr	r2, [r7, #24]
 8005552:	4013      	ands	r3, r2
 8005554:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	4a49      	ldr	r2, [pc, #292]	@ (8005680 <HAL_GPIO_Init+0x2f0>)
 800555a:	4293      	cmp	r3, r2
 800555c:	d019      	beq.n	8005592 <HAL_GPIO_Init+0x202>
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	4a48      	ldr	r2, [pc, #288]	@ (8005684 <HAL_GPIO_Init+0x2f4>)
 8005562:	4293      	cmp	r3, r2
 8005564:	d013      	beq.n	800558e <HAL_GPIO_Init+0x1fe>
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	4a47      	ldr	r2, [pc, #284]	@ (8005688 <HAL_GPIO_Init+0x2f8>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d00d      	beq.n	800558a <HAL_GPIO_Init+0x1fa>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	4a46      	ldr	r2, [pc, #280]	@ (800568c <HAL_GPIO_Init+0x2fc>)
 8005572:	4293      	cmp	r3, r2
 8005574:	d007      	beq.n	8005586 <HAL_GPIO_Init+0x1f6>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	4a45      	ldr	r2, [pc, #276]	@ (8005690 <HAL_GPIO_Init+0x300>)
 800557a:	4293      	cmp	r3, r2
 800557c:	d101      	bne.n	8005582 <HAL_GPIO_Init+0x1f2>
 800557e:	2304      	movs	r3, #4
 8005580:	e008      	b.n	8005594 <HAL_GPIO_Init+0x204>
 8005582:	2307      	movs	r3, #7
 8005584:	e006      	b.n	8005594 <HAL_GPIO_Init+0x204>
 8005586:	2303      	movs	r3, #3
 8005588:	e004      	b.n	8005594 <HAL_GPIO_Init+0x204>
 800558a:	2302      	movs	r3, #2
 800558c:	e002      	b.n	8005594 <HAL_GPIO_Init+0x204>
 800558e:	2301      	movs	r3, #1
 8005590:	e000      	b.n	8005594 <HAL_GPIO_Init+0x204>
 8005592:	2300      	movs	r3, #0
 8005594:	69fa      	ldr	r2, [r7, #28]
 8005596:	f002 0203 	and.w	r2, r2, #3
 800559a:	0092      	lsls	r2, r2, #2
 800559c:	4093      	lsls	r3, r2
 800559e:	69ba      	ldr	r2, [r7, #24]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80055a4:	4935      	ldr	r1, [pc, #212]	@ (800567c <HAL_GPIO_Init+0x2ec>)
 80055a6:	69fb      	ldr	r3, [r7, #28]
 80055a8:	089b      	lsrs	r3, r3, #2
 80055aa:	3302      	adds	r3, #2
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80055b2:	4b38      	ldr	r3, [pc, #224]	@ (8005694 <HAL_GPIO_Init+0x304>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	43db      	mvns	r3, r3
 80055bc:	69ba      	ldr	r2, [r7, #24]
 80055be:	4013      	ands	r3, r2
 80055c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80055ce:	69ba      	ldr	r2, [r7, #24]
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	4313      	orrs	r3, r2
 80055d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80055d6:	4a2f      	ldr	r2, [pc, #188]	@ (8005694 <HAL_GPIO_Init+0x304>)
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80055dc:	4b2d      	ldr	r3, [pc, #180]	@ (8005694 <HAL_GPIO_Init+0x304>)
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	43db      	mvns	r3, r3
 80055e6:	69ba      	ldr	r2, [r7, #24]
 80055e8:	4013      	ands	r3, r2
 80055ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d003      	beq.n	8005600 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80055f8:	69ba      	ldr	r2, [r7, #24]
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005600:	4a24      	ldr	r2, [pc, #144]	@ (8005694 <HAL_GPIO_Init+0x304>)
 8005602:	69bb      	ldr	r3, [r7, #24]
 8005604:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005606:	4b23      	ldr	r3, [pc, #140]	@ (8005694 <HAL_GPIO_Init+0x304>)
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	43db      	mvns	r3, r3
 8005610:	69ba      	ldr	r2, [r7, #24]
 8005612:	4013      	ands	r3, r2
 8005614:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005622:	69ba      	ldr	r2, [r7, #24]
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	4313      	orrs	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800562a:	4a1a      	ldr	r2, [pc, #104]	@ (8005694 <HAL_GPIO_Init+0x304>)
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005630:	4b18      	ldr	r3, [pc, #96]	@ (8005694 <HAL_GPIO_Init+0x304>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	43db      	mvns	r3, r3
 800563a:	69ba      	ldr	r2, [r7, #24]
 800563c:	4013      	ands	r3, r2
 800563e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	685b      	ldr	r3, [r3, #4]
 8005644:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d003      	beq.n	8005654 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800564c:	69ba      	ldr	r2, [r7, #24]
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005654:	4a0f      	ldr	r2, [pc, #60]	@ (8005694 <HAL_GPIO_Init+0x304>)
 8005656:	69bb      	ldr	r3, [r7, #24]
 8005658:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800565a:	69fb      	ldr	r3, [r7, #28]
 800565c:	3301      	adds	r3, #1
 800565e:	61fb      	str	r3, [r7, #28]
 8005660:	69fb      	ldr	r3, [r7, #28]
 8005662:	2b0f      	cmp	r3, #15
 8005664:	f67f aea2 	bls.w	80053ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005668:	bf00      	nop
 800566a:	bf00      	nop
 800566c:	3724      	adds	r7, #36	@ 0x24
 800566e:	46bd      	mov	sp, r7
 8005670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005674:	4770      	bx	lr
 8005676:	bf00      	nop
 8005678:	40023800 	.word	0x40023800
 800567c:	40013800 	.word	0x40013800
 8005680:	40020000 	.word	0x40020000
 8005684:	40020400 	.word	0x40020400
 8005688:	40020800 	.word	0x40020800
 800568c:	40020c00 	.word	0x40020c00
 8005690:	40021000 	.word	0x40021000
 8005694:	40013c00 	.word	0x40013c00

08005698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	460b      	mov	r3, r1
 80056a2:	807b      	strh	r3, [r7, #2]
 80056a4:	4613      	mov	r3, r2
 80056a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056a8:	787b      	ldrb	r3, [r7, #1]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d003      	beq.n	80056b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80056ae:	887a      	ldrh	r2, [r7, #2]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80056b4:	e003      	b.n	80056be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80056b6:	887b      	ldrh	r3, [r7, #2]
 80056b8:	041a      	lsls	r2, r3, #16
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	619a      	str	r2, [r3, #24]
}
 80056be:	bf00      	nop
 80056c0:	370c      	adds	r7, #12
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr
	...

080056cc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b082      	sub	sp, #8
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80056d6:	4b08      	ldr	r3, [pc, #32]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056d8:	695a      	ldr	r2, [r3, #20]
 80056da:	88fb      	ldrh	r3, [r7, #6]
 80056dc:	4013      	ands	r3, r2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d006      	beq.n	80056f0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80056e2:	4a05      	ldr	r2, [pc, #20]	@ (80056f8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80056e4:	88fb      	ldrh	r3, [r7, #6]
 80056e6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80056e8:	88fb      	ldrh	r3, [r7, #6]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fb fd34 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 80056f0:	bf00      	nop
 80056f2:	3708      	adds	r7, #8
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}
 80056f8:	40013c00 	.word	0x40013c00

080056fc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b086      	sub	sp, #24
 8005700:	af02      	add	r7, sp, #8
 8005702:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d101      	bne.n	800570e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	e101      	b.n	8005912 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b00      	cmp	r3, #0
 800571e:	d106      	bne.n	800572e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005728:	6878      	ldr	r0, [r7, #4]
 800572a:	f008 fd45 	bl	800e1b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2203      	movs	r2, #3
 8005732:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800573c:	d102      	bne.n	8005744 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4618      	mov	r0, r3
 800574a:	f003 ff5c 	bl	8009606 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6818      	ldr	r0, [r3, #0]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	7c1a      	ldrb	r2, [r3, #16]
 8005756:	f88d 2000 	strb.w	r2, [sp]
 800575a:	3304      	adds	r3, #4
 800575c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800575e:	f003 fe3b 	bl	80093d8 <USB_CoreInit>
 8005762:	4603      	mov	r3, r0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d005      	beq.n	8005774 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	e0ce      	b.n	8005912 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2100      	movs	r1, #0
 800577a:	4618      	mov	r0, r3
 800577c:	f003 ff54 	bl	8009628 <USB_SetCurrentMode>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d005      	beq.n	8005792 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	2202      	movs	r2, #2
 800578a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800578e:	2301      	movs	r3, #1
 8005790:	e0bf      	b.n	8005912 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005792:	2300      	movs	r3, #0
 8005794:	73fb      	strb	r3, [r7, #15]
 8005796:	e04a      	b.n	800582e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005798:	7bfa      	ldrb	r2, [r7, #15]
 800579a:	6879      	ldr	r1, [r7, #4]
 800579c:	4613      	mov	r3, r2
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	4413      	add	r3, r2
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	440b      	add	r3, r1
 80057a6:	3315      	adds	r3, #21
 80057a8:	2201      	movs	r2, #1
 80057aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	6879      	ldr	r1, [r7, #4]
 80057b0:	4613      	mov	r3, r2
 80057b2:	00db      	lsls	r3, r3, #3
 80057b4:	4413      	add	r3, r2
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	440b      	add	r3, r1
 80057ba:	3314      	adds	r3, #20
 80057bc:	7bfa      	ldrb	r2, [r7, #15]
 80057be:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80057c0:	7bfa      	ldrb	r2, [r7, #15]
 80057c2:	7bfb      	ldrb	r3, [r7, #15]
 80057c4:	b298      	uxth	r0, r3
 80057c6:	6879      	ldr	r1, [r7, #4]
 80057c8:	4613      	mov	r3, r2
 80057ca:	00db      	lsls	r3, r3, #3
 80057cc:	4413      	add	r3, r2
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	440b      	add	r3, r1
 80057d2:	332e      	adds	r3, #46	@ 0x2e
 80057d4:	4602      	mov	r2, r0
 80057d6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80057d8:	7bfa      	ldrb	r2, [r7, #15]
 80057da:	6879      	ldr	r1, [r7, #4]
 80057dc:	4613      	mov	r3, r2
 80057de:	00db      	lsls	r3, r3, #3
 80057e0:	4413      	add	r3, r2
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	440b      	add	r3, r1
 80057e6:	3318      	adds	r3, #24
 80057e8:	2200      	movs	r2, #0
 80057ea:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80057ec:	7bfa      	ldrb	r2, [r7, #15]
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	4613      	mov	r3, r2
 80057f2:	00db      	lsls	r3, r3, #3
 80057f4:	4413      	add	r3, r2
 80057f6:	009b      	lsls	r3, r3, #2
 80057f8:	440b      	add	r3, r1
 80057fa:	331c      	adds	r3, #28
 80057fc:	2200      	movs	r2, #0
 80057fe:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005800:	7bfa      	ldrb	r2, [r7, #15]
 8005802:	6879      	ldr	r1, [r7, #4]
 8005804:	4613      	mov	r3, r2
 8005806:	00db      	lsls	r3, r3, #3
 8005808:	4413      	add	r3, r2
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	440b      	add	r3, r1
 800580e:	3320      	adds	r3, #32
 8005810:	2200      	movs	r2, #0
 8005812:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005814:	7bfa      	ldrb	r2, [r7, #15]
 8005816:	6879      	ldr	r1, [r7, #4]
 8005818:	4613      	mov	r3, r2
 800581a:	00db      	lsls	r3, r3, #3
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	440b      	add	r3, r1
 8005822:	3324      	adds	r3, #36	@ 0x24
 8005824:	2200      	movs	r2, #0
 8005826:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005828:	7bfb      	ldrb	r3, [r7, #15]
 800582a:	3301      	adds	r3, #1
 800582c:	73fb      	strb	r3, [r7, #15]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	791b      	ldrb	r3, [r3, #4]
 8005832:	7bfa      	ldrb	r2, [r7, #15]
 8005834:	429a      	cmp	r2, r3
 8005836:	d3af      	bcc.n	8005798 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005838:	2300      	movs	r3, #0
 800583a:	73fb      	strb	r3, [r7, #15]
 800583c:	e044      	b.n	80058c8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800583e:	7bfa      	ldrb	r2, [r7, #15]
 8005840:	6879      	ldr	r1, [r7, #4]
 8005842:	4613      	mov	r3, r2
 8005844:	00db      	lsls	r3, r3, #3
 8005846:	4413      	add	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	440b      	add	r3, r1
 800584c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005850:	2200      	movs	r2, #0
 8005852:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005854:	7bfa      	ldrb	r2, [r7, #15]
 8005856:	6879      	ldr	r1, [r7, #4]
 8005858:	4613      	mov	r3, r2
 800585a:	00db      	lsls	r3, r3, #3
 800585c:	4413      	add	r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005866:	7bfa      	ldrb	r2, [r7, #15]
 8005868:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800586a:	7bfa      	ldrb	r2, [r7, #15]
 800586c:	6879      	ldr	r1, [r7, #4]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	440b      	add	r3, r1
 8005878:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800587c:	2200      	movs	r2, #0
 800587e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005880:	7bfa      	ldrb	r2, [r7, #15]
 8005882:	6879      	ldr	r1, [r7, #4]
 8005884:	4613      	mov	r3, r2
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	009b      	lsls	r3, r3, #2
 800588c:	440b      	add	r3, r1
 800588e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005892:	2200      	movs	r2, #0
 8005894:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005896:	7bfa      	ldrb	r2, [r7, #15]
 8005898:	6879      	ldr	r1, [r7, #4]
 800589a:	4613      	mov	r3, r2
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	4413      	add	r3, r2
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	440b      	add	r3, r1
 80058a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80058a8:	2200      	movs	r2, #0
 80058aa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80058ac:	7bfa      	ldrb	r2, [r7, #15]
 80058ae:	6879      	ldr	r1, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80058be:	2200      	movs	r2, #0
 80058c0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058c2:	7bfb      	ldrb	r3, [r7, #15]
 80058c4:	3301      	adds	r3, #1
 80058c6:	73fb      	strb	r3, [r7, #15]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	791b      	ldrb	r3, [r3, #4]
 80058cc:	7bfa      	ldrb	r2, [r7, #15]
 80058ce:	429a      	cmp	r2, r3
 80058d0:	d3b5      	bcc.n	800583e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6818      	ldr	r0, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	7c1a      	ldrb	r2, [r3, #16]
 80058da:	f88d 2000 	strb.w	r2, [sp]
 80058de:	3304      	adds	r3, #4
 80058e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80058e2:	f003 feed 	bl	80096c0 <USB_DevInit>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d005      	beq.n	80058f8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	e00c      	b.n	8005912 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2200      	movs	r2, #0
 80058fc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	2201      	movs	r2, #1
 8005902:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	4618      	mov	r0, r3
 800590c:	f004 ff37 	bl	800a77e <USB_DevDisconnect>

  return HAL_OK;
 8005910:	2300      	movs	r3, #0
}
 8005912:	4618      	mov	r0, r3
 8005914:	3710      	adds	r7, #16
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_PCD_Start+0x1c>
 8005932:	2302      	movs	r3, #2
 8005934:	e022      	b.n	800597c <HAL_PCD_Start+0x62>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68db      	ldr	r3, [r3, #12]
 8005942:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d009      	beq.n	800595e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800594e:	2b01      	cmp	r3, #1
 8005950:	d105      	bne.n	800595e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005956:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4618      	mov	r0, r3
 8005964:	f003 fe3e 	bl	80095e4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	4618      	mov	r0, r3
 800596e:	f004 fee5 	bl	800a73c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2200      	movs	r2, #0
 8005976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3710      	adds	r7, #16
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}

08005984 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005984:	b590      	push	{r4, r7, lr}
 8005986:	b08d      	sub	sp, #52	@ 0x34
 8005988:	af00      	add	r7, sp, #0
 800598a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005992:	6a3b      	ldr	r3, [r7, #32]
 8005994:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4618      	mov	r0, r3
 800599c:	f004 ffa3 	bl	800a8e6 <USB_GetMode>
 80059a0:	4603      	mov	r3, r0
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	f040 848c 	bne.w	80062c0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f004 ff07 	bl	800a7c0 <USB_ReadInterrupts>
 80059b2:	4603      	mov	r3, r0
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 8482 	beq.w	80062be <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80059ba:	69fb      	ldr	r3, [r7, #28]
 80059bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	0a1b      	lsrs	r3, r3, #8
 80059c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	4618      	mov	r0, r3
 80059d4:	f004 fef4 	bl	800a7c0 <USB_ReadInterrupts>
 80059d8:	4603      	mov	r3, r0
 80059da:	f003 0302 	and.w	r3, r3, #2
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d107      	bne.n	80059f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	695a      	ldr	r2, [r3, #20]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f002 0202 	and.w	r2, r2, #2
 80059f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f004 fee2 	bl	800a7c0 <USB_ReadInterrupts>
 80059fc:	4603      	mov	r3, r0
 80059fe:	f003 0310 	and.w	r3, r3, #16
 8005a02:	2b10      	cmp	r3, #16
 8005a04:	d161      	bne.n	8005aca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f022 0210 	bic.w	r2, r2, #16
 8005a14:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	6a1b      	ldr	r3, [r3, #32]
 8005a1a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005a1c:	69bb      	ldr	r3, [r7, #24]
 8005a1e:	f003 020f 	and.w	r2, r3, #15
 8005a22:	4613      	mov	r3, r2
 8005a24:	00db      	lsls	r3, r3, #3
 8005a26:	4413      	add	r3, r2
 8005a28:	009b      	lsls	r3, r3, #2
 8005a2a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a2e:	687a      	ldr	r2, [r7, #4]
 8005a30:	4413      	add	r3, r2
 8005a32:	3304      	adds	r3, #4
 8005a34:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a3c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005a40:	d124      	bne.n	8005a8c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005a42:	69ba      	ldr	r2, [r7, #24]
 8005a44:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005a48:	4013      	ands	r3, r2
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d035      	beq.n	8005aba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	091b      	lsrs	r3, r3, #4
 8005a56:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005a58:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	6a38      	ldr	r0, [r7, #32]
 8005a62:	f004 fd19 	bl	800a498 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	69bb      	ldr	r3, [r7, #24]
 8005a6c:	091b      	lsrs	r3, r3, #4
 8005a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a72:	441a      	add	r2, r3
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	695a      	ldr	r2, [r3, #20]
 8005a7c:	69bb      	ldr	r3, [r7, #24]
 8005a7e:	091b      	lsrs	r3, r3, #4
 8005a80:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005a84:	441a      	add	r2, r3
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	615a      	str	r2, [r3, #20]
 8005a8a:	e016      	b.n	8005aba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8005a8c:	69bb      	ldr	r3, [r7, #24]
 8005a8e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005a92:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005a96:	d110      	bne.n	8005aba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005a9e:	2208      	movs	r2, #8
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	6a38      	ldr	r0, [r7, #32]
 8005aa4:	f004 fcf8 	bl	800a498 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	695a      	ldr	r2, [r3, #20]
 8005aac:	69bb      	ldr	r3, [r7, #24]
 8005aae:	091b      	lsrs	r3, r3, #4
 8005ab0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ab4:	441a      	add	r2, r3
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	699a      	ldr	r2, [r3, #24]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f042 0210 	orr.w	r2, r2, #16
 8005ac8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4618      	mov	r0, r3
 8005ad0:	f004 fe76 	bl	800a7c0 <USB_ReadInterrupts>
 8005ad4:	4603      	mov	r3, r0
 8005ad6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005ada:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005ade:	f040 80a7 	bne.w	8005c30 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	4618      	mov	r0, r3
 8005aec:	f004 fe7b 	bl	800a7e6 <USB_ReadDevAllOutEpInterrupt>
 8005af0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005af2:	e099      	b.n	8005c28 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	f000 808e 	beq.w	8005c1c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b06:	b2d2      	uxtb	r2, r2
 8005b08:	4611      	mov	r1, r2
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	f004 fe9f 	bl	800a84e <USB_ReadDevOutEPInterrupt>
 8005b10:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005b12:	693b      	ldr	r3, [r7, #16]
 8005b14:	f003 0301 	and.w	r3, r3, #1
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d00c      	beq.n	8005b36 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	015a      	lsls	r2, r3, #5
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b28:	461a      	mov	r2, r3
 8005b2a:	2301      	movs	r3, #1
 8005b2c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005b2e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 fea3 	bl	800687c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005b36:	693b      	ldr	r3, [r7, #16]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00c      	beq.n	8005b5a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b42:	015a      	lsls	r2, r3, #5
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	4413      	add	r3, r2
 8005b48:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	2308      	movs	r3, #8
 8005b50:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005b52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005b54:	6878      	ldr	r0, [r7, #4]
 8005b56:	f000 ff79 	bl	8006a4c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f003 0310 	and.w	r3, r3, #16
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d008      	beq.n	8005b76 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005b64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b66:	015a      	lsls	r2, r3, #5
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b70:	461a      	mov	r2, r3
 8005b72:	2310      	movs	r3, #16
 8005b74:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005b76:	693b      	ldr	r3, [r7, #16]
 8005b78:	f003 0302 	and.w	r3, r3, #2
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d030      	beq.n	8005be2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	695b      	ldr	r3, [r3, #20]
 8005b84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b88:	2b80      	cmp	r3, #128	@ 0x80
 8005b8a:	d109      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b92:	685b      	ldr	r3, [r3, #4]
 8005b94:	69fa      	ldr	r2, [r7, #28]
 8005b96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005b9a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005b9e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005ba0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba2:	4613      	mov	r3, r2
 8005ba4:	00db      	lsls	r3, r3, #3
 8005ba6:	4413      	add	r3, r2
 8005ba8:	009b      	lsls	r3, r3, #2
 8005baa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	3304      	adds	r3, #4
 8005bb4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005bb6:	697b      	ldr	r3, [r7, #20]
 8005bb8:	78db      	ldrb	r3, [r3, #3]
 8005bba:	2b01      	cmp	r3, #1
 8005bbc:	d108      	bne.n	8005bd0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	b2db      	uxtb	r3, r3
 8005bc8:	4619      	mov	r1, r3
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f008 fbf0 	bl	800e3b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	015a      	lsls	r2, r3, #5
 8005bd4:	69fb      	ldr	r3, [r7, #28]
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bdc:	461a      	mov	r2, r3
 8005bde:	2302      	movs	r3, #2
 8005be0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	f003 0320 	and.w	r3, r3, #32
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d008      	beq.n	8005bfe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bee:	015a      	lsls	r2, r3, #5
 8005bf0:	69fb      	ldr	r3, [r7, #28]
 8005bf2:	4413      	add	r3, r2
 8005bf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bf8:	461a      	mov	r2, r3
 8005bfa:	2320      	movs	r3, #32
 8005bfc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d009      	beq.n	8005c1c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005c08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0a:	015a      	lsls	r2, r3, #5
 8005c0c:	69fb      	ldr	r3, [r7, #28]
 8005c0e:	4413      	add	r3, r2
 8005c10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c14:	461a      	mov	r2, r3
 8005c16:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005c1a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	3301      	adds	r3, #1
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005c22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c24:	085b      	lsrs	r3, r3, #1
 8005c26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005c28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	f47f af62 	bne.w	8005af4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4618      	mov	r0, r3
 8005c36:	f004 fdc3 	bl	800a7c0 <USB_ReadInterrupts>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005c44:	f040 80db 	bne.w	8005dfe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f004 fde4 	bl	800a81a <USB_ReadDevAllInEpInterrupt>
 8005c52:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005c54:	2300      	movs	r3, #0
 8005c56:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005c58:	e0cd      	b.n	8005df6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005c5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5c:	f003 0301 	and.w	r3, r3, #1
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f000 80c2 	beq.w	8005dea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c6c:	b2d2      	uxtb	r2, r2
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f004 fe0a 	bl	800a88a <USB_ReadDevInEPInterrupt>
 8005c76:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005c78:	693b      	ldr	r3, [r7, #16]
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d057      	beq.n	8005d32 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c84:	f003 030f 	and.w	r3, r3, #15
 8005c88:	2201      	movs	r2, #1
 8005c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c8e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005c90:	69fb      	ldr	r3, [r7, #28]
 8005c92:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c96:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	43db      	mvns	r3, r3
 8005c9c:	69f9      	ldr	r1, [r7, #28]
 8005c9e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ca2:	4013      	ands	r3, r2
 8005ca4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	799b      	ldrb	r3, [r3, #6]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d132      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005cc0:	6879      	ldr	r1, [r7, #4]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	4613      	mov	r3, r2
 8005cc6:	00db      	lsls	r3, r3, #3
 8005cc8:	4413      	add	r3, r2
 8005cca:	009b      	lsls	r3, r3, #2
 8005ccc:	440b      	add	r3, r1
 8005cce:	3320      	adds	r3, #32
 8005cd0:	6819      	ldr	r1, [r3, #0]
 8005cd2:	6878      	ldr	r0, [r7, #4]
 8005cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	4403      	add	r3, r0
 8005ce0:	331c      	adds	r3, #28
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	4419      	add	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cea:	4613      	mov	r3, r2
 8005cec:	00db      	lsls	r3, r3, #3
 8005cee:	4413      	add	r3, r2
 8005cf0:	009b      	lsls	r3, r3, #2
 8005cf2:	4403      	add	r3, r0
 8005cf4:	3320      	adds	r3, #32
 8005cf6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d113      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x3a2>
 8005cfe:	6879      	ldr	r1, [r7, #4]
 8005d00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	440b      	add	r3, r1
 8005d0c:	3324      	adds	r3, #36	@ 0x24
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d108      	bne.n	8005d26 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6818      	ldr	r0, [r3, #0]
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d1e:	461a      	mov	r2, r3
 8005d20:	2101      	movs	r1, #1
 8005d22:	f004 fe11 	bl	800a948 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005d26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f008 fac4 	bl	800e2ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f003 0308 	and.w	r3, r3, #8
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d008      	beq.n	8005d4e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d3e:	015a      	lsls	r2, r3, #5
 8005d40:	69fb      	ldr	r3, [r7, #28]
 8005d42:	4413      	add	r3, r2
 8005d44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d48:	461a      	mov	r2, r3
 8005d4a:	2308      	movs	r3, #8
 8005d4c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	f003 0310 	and.w	r3, r3, #16
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d008      	beq.n	8005d6a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005d58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d5a:	015a      	lsls	r2, r3, #5
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	4413      	add	r3, r2
 8005d60:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d64:	461a      	mov	r2, r3
 8005d66:	2310      	movs	r3, #16
 8005d68:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005d6a:	693b      	ldr	r3, [r7, #16]
 8005d6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d008      	beq.n	8005d86 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005d74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d76:	015a      	lsls	r2, r3, #5
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d80:	461a      	mov	r2, r3
 8005d82:	2340      	movs	r3, #64	@ 0x40
 8005d84:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	f003 0302 	and.w	r3, r3, #2
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d023      	beq.n	8005dd8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005d90:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005d92:	6a38      	ldr	r0, [r7, #32]
 8005d94:	f003 fdf8 	bl	8009988 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005d98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	00db      	lsls	r3, r3, #3
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	3310      	adds	r3, #16
 8005da4:	687a      	ldr	r2, [r7, #4]
 8005da6:	4413      	add	r3, r2
 8005da8:	3304      	adds	r3, #4
 8005daa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005dac:	697b      	ldr	r3, [r7, #20]
 8005dae:	78db      	ldrb	r3, [r3, #3]
 8005db0:	2b01      	cmp	r3, #1
 8005db2:	d108      	bne.n	8005dc6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005db4:	697b      	ldr	r3, [r7, #20]
 8005db6:	2200      	movs	r2, #0
 8005db8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	4619      	mov	r1, r3
 8005dc0:	6878      	ldr	r0, [r7, #4]
 8005dc2:	f008 fb07 	bl	800e3d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc8:	015a      	lsls	r2, r3, #5
 8005dca:	69fb      	ldr	r3, [r7, #28]
 8005dcc:	4413      	add	r3, r2
 8005dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd2:	461a      	mov	r2, r3
 8005dd4:	2302      	movs	r3, #2
 8005dd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005de2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fcbd 	bl	8006764 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005dea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dec:	3301      	adds	r3, #1
 8005dee:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005df0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df2:	085b      	lsrs	r3, r3, #1
 8005df4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005df6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	f47f af2e 	bne.w	8005c5a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4618      	mov	r0, r3
 8005e04:	f004 fcdc 	bl	800a7c0 <USB_ReadInterrupts>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005e0e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005e12:	d122      	bne.n	8005e5a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005e14:	69fb      	ldr	r3, [r7, #28]
 8005e16:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e1a:	685b      	ldr	r3, [r3, #4]
 8005e1c:	69fa      	ldr	r2, [r7, #28]
 8005e1e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e22:	f023 0301 	bic.w	r3, r3, #1
 8005e26:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005e2e:	2b01      	cmp	r3, #1
 8005e30:	d108      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005e3a:	2100      	movs	r1, #0
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fea3 	bl	8006b88 <HAL_PCDEx_LPM_Callback>
 8005e42:	e002      	b.n	8005e4a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005e44:	6878      	ldr	r0, [r7, #4]
 8005e46:	f008 faa5 	bl	800e394 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	695a      	ldr	r2, [r3, #20]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005e58:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f004 fcae 	bl	800a7c0 <USB_ReadInterrupts>
 8005e64:	4603      	mov	r3, r0
 8005e66:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e6e:	d112      	bne.n	8005e96 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005e70:	69fb      	ldr	r3, [r7, #28]
 8005e72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f003 0301 	and.w	r3, r3, #1
 8005e7c:	2b01      	cmp	r3, #1
 8005e7e:	d102      	bne.n	8005e86 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005e80:	6878      	ldr	r0, [r7, #4]
 8005e82:	f008 fa61 	bl	800e348 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	695a      	ldr	r2, [r3, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005e94:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f004 fc90 	bl	800a7c0 <USB_ReadInterrupts>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005eaa:	f040 80b7 	bne.w	800601c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	69fa      	ldr	r2, [r7, #28]
 8005eb8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ebc:	f023 0301 	bic.w	r3, r3, #1
 8005ec0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	2110      	movs	r1, #16
 8005ec8:	4618      	mov	r0, r3
 8005eca:	f003 fd5d 	bl	8009988 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ece:	2300      	movs	r3, #0
 8005ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ed2:	e046      	b.n	8005f62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ed4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ed6:	015a      	lsls	r2, r3, #5
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	4413      	add	r3, r2
 8005edc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005ee6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005ee8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eea:	015a      	lsls	r2, r3, #5
 8005eec:	69fb      	ldr	r3, [r7, #28]
 8005eee:	4413      	add	r3, r2
 8005ef0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ef8:	0151      	lsls	r1, r2, #5
 8005efa:	69fa      	ldr	r2, [r7, #28]
 8005efc:	440a      	add	r2, r1
 8005efe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005f02:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005f08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0a:	015a      	lsls	r2, r3, #5
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	4413      	add	r3, r2
 8005f10:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f14:	461a      	mov	r2, r3
 8005f16:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005f1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005f1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	69fb      	ldr	r3, [r7, #28]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f2c:	0151      	lsls	r1, r2, #5
 8005f2e:	69fa      	ldr	r2, [r7, #28]
 8005f30:	440a      	add	r2, r1
 8005f32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f36:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005f3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f3e:	015a      	lsls	r2, r3, #5
 8005f40:	69fb      	ldr	r3, [r7, #28]
 8005f42:	4413      	add	r3, r2
 8005f44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005f4c:	0151      	lsls	r1, r2, #5
 8005f4e:	69fa      	ldr	r2, [r7, #28]
 8005f50:	440a      	add	r2, r1
 8005f52:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f56:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005f5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f5e:	3301      	adds	r3, #1
 8005f60:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	791b      	ldrb	r3, [r3, #4]
 8005f66:	461a      	mov	r2, r3
 8005f68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d3b2      	bcc.n	8005ed4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f74:	69db      	ldr	r3, [r3, #28]
 8005f76:	69fa      	ldr	r2, [r7, #28]
 8005f78:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f7c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005f80:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	7bdb      	ldrb	r3, [r3, #15]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d016      	beq.n	8005fb8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005f8a:	69fb      	ldr	r3, [r7, #28]
 8005f8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005f90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f94:	69fa      	ldr	r2, [r7, #28]
 8005f96:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005f9a:	f043 030b 	orr.w	r3, r3, #11
 8005f9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005fa2:	69fb      	ldr	r3, [r7, #28]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005faa:	69fa      	ldr	r2, [r7, #28]
 8005fac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fb0:	f043 030b 	orr.w	r3, r3, #11
 8005fb4:	6453      	str	r3, [r2, #68]	@ 0x44
 8005fb6:	e015      	b.n	8005fe4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fbe:	695b      	ldr	r3, [r3, #20]
 8005fc0:	69fa      	ldr	r2, [r7, #28]
 8005fc2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fc6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005fca:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005fce:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005fd0:	69fb      	ldr	r3, [r7, #28]
 8005fd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fd6:	691b      	ldr	r3, [r3, #16]
 8005fd8:	69fa      	ldr	r2, [r7, #28]
 8005fda:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005fde:	f043 030b 	orr.w	r3, r3, #11
 8005fe2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	69fa      	ldr	r2, [r7, #28]
 8005fee:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ff2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ff6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6818      	ldr	r0, [r3, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006006:	461a      	mov	r2, r3
 8006008:	f004 fc9e 	bl	800a948 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	695a      	ldr	r2, [r3, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800601a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f004 fbcd 	bl	800a7c0 <USB_ReadInterrupts>
 8006026:	4603      	mov	r3, r0
 8006028:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800602c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006030:	d123      	bne.n	800607a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4618      	mov	r0, r3
 8006038:	f004 fc63 	bl	800a902 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4618      	mov	r0, r3
 8006042:	f003 fd1a 	bl	8009a7a <USB_GetDevSpeed>
 8006046:	4603      	mov	r3, r0
 8006048:	461a      	mov	r2, r3
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681c      	ldr	r4, [r3, #0]
 8006052:	f001 f9c9 	bl	80073e8 <HAL_RCC_GetHCLKFreq>
 8006056:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800605c:	461a      	mov	r2, r3
 800605e:	4620      	mov	r0, r4
 8006060:	f003 fa1e 	bl	80094a0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f008 f950 	bl	800e30a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	695a      	ldr	r2, [r3, #20]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8006078:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	4618      	mov	r0, r3
 8006080:	f004 fb9e 	bl	800a7c0 <USB_ReadInterrupts>
 8006084:	4603      	mov	r3, r0
 8006086:	f003 0308 	and.w	r3, r3, #8
 800608a:	2b08      	cmp	r3, #8
 800608c:	d10a      	bne.n	80060a4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f008 f92d 	bl	800e2ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	695a      	ldr	r2, [r3, #20]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f002 0208 	and.w	r2, r2, #8
 80060a2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f004 fb89 	bl	800a7c0 <USB_ReadInterrupts>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060b4:	2b80      	cmp	r3, #128	@ 0x80
 80060b6:	d123      	bne.n	8006100 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80060c0:	6a3b      	ldr	r3, [r7, #32]
 80060c2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060c4:	2301      	movs	r3, #1
 80060c6:	627b      	str	r3, [r7, #36]	@ 0x24
 80060c8:	e014      	b.n	80060f4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80060ca:	6879      	ldr	r1, [r7, #4]
 80060cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060ce:	4613      	mov	r3, r2
 80060d0:	00db      	lsls	r3, r3, #3
 80060d2:	4413      	add	r3, r2
 80060d4:	009b      	lsls	r3, r3, #2
 80060d6:	440b      	add	r3, r1
 80060d8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	2b01      	cmp	r3, #1
 80060e0:	d105      	bne.n	80060ee <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80060e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb0a 	bl	8006702 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80060ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060f0:	3301      	adds	r3, #1
 80060f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	791b      	ldrb	r3, [r3, #4]
 80060f8:	461a      	mov	r2, r3
 80060fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d3e4      	bcc.n	80060ca <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4618      	mov	r0, r3
 8006106:	f004 fb5b 	bl	800a7c0 <USB_ReadInterrupts>
 800610a:	4603      	mov	r3, r0
 800610c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006110:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006114:	d13c      	bne.n	8006190 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006116:	2301      	movs	r3, #1
 8006118:	627b      	str	r3, [r7, #36]	@ 0x24
 800611a:	e02b      	b.n	8006174 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800611c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800611e:	015a      	lsls	r2, r3, #5
 8006120:	69fb      	ldr	r3, [r7, #28]
 8006122:	4413      	add	r3, r2
 8006124:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800612c:	6879      	ldr	r1, [r7, #4]
 800612e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006130:	4613      	mov	r3, r2
 8006132:	00db      	lsls	r3, r3, #3
 8006134:	4413      	add	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	440b      	add	r3, r1
 800613a:	3318      	adds	r3, #24
 800613c:	781b      	ldrb	r3, [r3, #0]
 800613e:	2b01      	cmp	r3, #1
 8006140:	d115      	bne.n	800616e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006142:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006144:	2b00      	cmp	r3, #0
 8006146:	da12      	bge.n	800616e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006148:	6879      	ldr	r1, [r7, #4]
 800614a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800614c:	4613      	mov	r3, r2
 800614e:	00db      	lsls	r3, r3, #3
 8006150:	4413      	add	r3, r2
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	440b      	add	r3, r1
 8006156:	3317      	adds	r3, #23
 8006158:	2201      	movs	r2, #1
 800615a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800615c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615e:	b2db      	uxtb	r3, r3
 8006160:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006164:	b2db      	uxtb	r3, r3
 8006166:	4619      	mov	r1, r3
 8006168:	6878      	ldr	r0, [r7, #4]
 800616a:	f000 faca 	bl	8006702 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800616e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006170:	3301      	adds	r3, #1
 8006172:	627b      	str	r3, [r7, #36]	@ 0x24
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	791b      	ldrb	r3, [r3, #4]
 8006178:	461a      	mov	r2, r3
 800617a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800617c:	4293      	cmp	r3, r2
 800617e:	d3cd      	bcc.n	800611c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	695a      	ldr	r2, [r3, #20]
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800618e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4618      	mov	r0, r3
 8006196:	f004 fb13 	bl	800a7c0 <USB_ReadInterrupts>
 800619a:	4603      	mov	r3, r0
 800619c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80061a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80061a4:	d156      	bne.n	8006254 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80061a6:	2301      	movs	r3, #1
 80061a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80061aa:	e045      	b.n	8006238 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	015a      	lsls	r2, r3, #5
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061bc:	6879      	ldr	r1, [r7, #4]
 80061be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061c0:	4613      	mov	r3, r2
 80061c2:	00db      	lsls	r3, r3, #3
 80061c4:	4413      	add	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	440b      	add	r3, r1
 80061ca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80061ce:	781b      	ldrb	r3, [r3, #0]
 80061d0:	2b01      	cmp	r3, #1
 80061d2:	d12e      	bne.n	8006232 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061d4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	da2b      	bge.n	8006232 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80061e6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d121      	bne.n	8006232 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80061ee:	6879      	ldr	r1, [r7, #4]
 80061f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8006200:	2201      	movs	r2, #1
 8006202:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006204:	6a3b      	ldr	r3, [r7, #32]
 8006206:	699b      	ldr	r3, [r3, #24]
 8006208:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800620c:	6a3b      	ldr	r3, [r7, #32]
 800620e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006210:	6a3b      	ldr	r3, [r7, #32]
 8006212:	695b      	ldr	r3, [r3, #20]
 8006214:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006218:	2b00      	cmp	r3, #0
 800621a:	d10a      	bne.n	8006232 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800621c:	69fb      	ldr	r3, [r7, #28]
 800621e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	69fa      	ldr	r2, [r7, #28]
 8006226:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800622a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800622e:	6053      	str	r3, [r2, #4]
            break;
 8006230:	e008      	b.n	8006244 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006234:	3301      	adds	r3, #1
 8006236:	627b      	str	r3, [r7, #36]	@ 0x24
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	791b      	ldrb	r3, [r3, #4]
 800623c:	461a      	mov	r2, r3
 800623e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006240:	4293      	cmp	r3, r2
 8006242:	d3b3      	bcc.n	80061ac <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	695a      	ldr	r2, [r3, #20]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006252:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f004 fab1 	bl	800a7c0 <USB_ReadInterrupts>
 800625e:	4603      	mov	r3, r0
 8006260:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006264:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006268:	d10a      	bne.n	8006280 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f008 f8c4 	bl	800e3f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	695a      	ldr	r2, [r3, #20]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800627e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	4618      	mov	r0, r3
 8006286:	f004 fa9b 	bl	800a7c0 <USB_ReadInterrupts>
 800628a:	4603      	mov	r3, r0
 800628c:	f003 0304 	and.w	r3, r3, #4
 8006290:	2b04      	cmp	r3, #4
 8006292:	d115      	bne.n	80062c0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	f003 0304 	and.w	r3, r3, #4
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d002      	beq.n	80062ac <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f008 f8b4 	bl	800e414 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6859      	ldr	r1, [r3, #4]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	69ba      	ldr	r2, [r7, #24]
 80062b8:	430a      	orrs	r2, r1
 80062ba:	605a      	str	r2, [r3, #4]
 80062bc:	e000      	b.n	80062c0 <HAL_PCD_IRQHandler+0x93c>
      return;
 80062be:	bf00      	nop
    }
  }
}
 80062c0:	3734      	adds	r7, #52	@ 0x34
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd90      	pop	{r4, r7, pc}

080062c6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80062c6:	b580      	push	{r7, lr}
 80062c8:	b082      	sub	sp, #8
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	6078      	str	r0, [r7, #4]
 80062ce:	460b      	mov	r3, r1
 80062d0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80062d8:	2b01      	cmp	r3, #1
 80062da:	d101      	bne.n	80062e0 <HAL_PCD_SetAddress+0x1a>
 80062dc:	2302      	movs	r3, #2
 80062de:	e012      	b.n	8006306 <HAL_PCD_SetAddress+0x40>
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2201      	movs	r2, #1
 80062e4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	78fa      	ldrb	r2, [r7, #3]
 80062ec:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	4611      	mov	r1, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	f004 f9fa 	bl	800a6f0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006304:	2300      	movs	r3, #0
}
 8006306:	4618      	mov	r0, r3
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800630e:	b580      	push	{r7, lr}
 8006310:	b084      	sub	sp, #16
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
 8006316:	4608      	mov	r0, r1
 8006318:	4611      	mov	r1, r2
 800631a:	461a      	mov	r2, r3
 800631c:	4603      	mov	r3, r0
 800631e:	70fb      	strb	r3, [r7, #3]
 8006320:	460b      	mov	r3, r1
 8006322:	803b      	strh	r3, [r7, #0]
 8006324:	4613      	mov	r3, r2
 8006326:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006328:	2300      	movs	r3, #0
 800632a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800632c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006330:	2b00      	cmp	r3, #0
 8006332:	da0f      	bge.n	8006354 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006334:	78fb      	ldrb	r3, [r7, #3]
 8006336:	f003 020f 	and.w	r2, r3, #15
 800633a:	4613      	mov	r3, r2
 800633c:	00db      	lsls	r3, r3, #3
 800633e:	4413      	add	r3, r2
 8006340:	009b      	lsls	r3, r3, #2
 8006342:	3310      	adds	r3, #16
 8006344:	687a      	ldr	r2, [r7, #4]
 8006346:	4413      	add	r3, r2
 8006348:	3304      	adds	r3, #4
 800634a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2201      	movs	r2, #1
 8006350:	705a      	strb	r2, [r3, #1]
 8006352:	e00f      	b.n	8006374 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006354:	78fb      	ldrb	r3, [r7, #3]
 8006356:	f003 020f 	and.w	r2, r3, #15
 800635a:	4613      	mov	r3, r2
 800635c:	00db      	lsls	r3, r3, #3
 800635e:	4413      	add	r3, r2
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	4413      	add	r3, r2
 800636a:	3304      	adds	r3, #4
 800636c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006374:	78fb      	ldrb	r3, [r7, #3]
 8006376:	f003 030f 	and.w	r3, r3, #15
 800637a:	b2da      	uxtb	r2, r3
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006380:	883b      	ldrh	r3, [r7, #0]
 8006382:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	78ba      	ldrb	r2, [r7, #2]
 800638e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	785b      	ldrb	r3, [r3, #1]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d004      	beq.n	80063a2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	461a      	mov	r2, r3
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80063a2:	78bb      	ldrb	r3, [r7, #2]
 80063a4:	2b02      	cmp	r3, #2
 80063a6:	d102      	bne.n	80063ae <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2200      	movs	r2, #0
 80063ac:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80063b4:	2b01      	cmp	r3, #1
 80063b6:	d101      	bne.n	80063bc <HAL_PCD_EP_Open+0xae>
 80063b8:	2302      	movs	r3, #2
 80063ba:	e00e      	b.n	80063da <HAL_PCD_EP_Open+0xcc>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68f9      	ldr	r1, [r7, #12]
 80063ca:	4618      	mov	r0, r3
 80063cc:	f003 fb7a 	bl	8009ac4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80063d8:	7afb      	ldrb	r3, [r7, #11]
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3710      	adds	r7, #16
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b084      	sub	sp, #16
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
 80063ea:	460b      	mov	r3, r1
 80063ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80063ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	da0f      	bge.n	8006416 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063f6:	78fb      	ldrb	r3, [r7, #3]
 80063f8:	f003 020f 	and.w	r2, r3, #15
 80063fc:	4613      	mov	r3, r2
 80063fe:	00db      	lsls	r3, r3, #3
 8006400:	4413      	add	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	3310      	adds	r3, #16
 8006406:	687a      	ldr	r2, [r7, #4]
 8006408:	4413      	add	r3, r2
 800640a:	3304      	adds	r3, #4
 800640c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	705a      	strb	r2, [r3, #1]
 8006414:	e00f      	b.n	8006436 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006416:	78fb      	ldrb	r3, [r7, #3]
 8006418:	f003 020f 	and.w	r2, r3, #15
 800641c:	4613      	mov	r3, r2
 800641e:	00db      	lsls	r3, r3, #3
 8006420:	4413      	add	r3, r2
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006428:	687a      	ldr	r2, [r7, #4]
 800642a:	4413      	add	r3, r2
 800642c:	3304      	adds	r3, #4
 800642e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	2200      	movs	r2, #0
 8006434:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006436:	78fb      	ldrb	r3, [r7, #3]
 8006438:	f003 030f 	and.w	r3, r3, #15
 800643c:	b2da      	uxtb	r2, r3
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006448:	2b01      	cmp	r3, #1
 800644a:	d101      	bne.n	8006450 <HAL_PCD_EP_Close+0x6e>
 800644c:	2302      	movs	r3, #2
 800644e:	e00e      	b.n	800646e <HAL_PCD_EP_Close+0x8c>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	68f9      	ldr	r1, [r7, #12]
 800645e:	4618      	mov	r0, r3
 8006460:	f003 fbb8 	bl	8009bd4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2200      	movs	r2, #0
 8006468:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800646c:	2300      	movs	r3, #0
}
 800646e:	4618      	mov	r0, r3
 8006470:	3710      	adds	r7, #16
 8006472:	46bd      	mov	sp, r7
 8006474:	bd80      	pop	{r7, pc}

08006476 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006476:	b580      	push	{r7, lr}
 8006478:	b086      	sub	sp, #24
 800647a:	af00      	add	r7, sp, #0
 800647c:	60f8      	str	r0, [r7, #12]
 800647e:	607a      	str	r2, [r7, #4]
 8006480:	603b      	str	r3, [r7, #0]
 8006482:	460b      	mov	r3, r1
 8006484:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	f003 020f 	and.w	r2, r3, #15
 800648c:	4613      	mov	r3, r2
 800648e:	00db      	lsls	r3, r3, #3
 8006490:	4413      	add	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006498:	68fa      	ldr	r2, [r7, #12]
 800649a:	4413      	add	r3, r2
 800649c:	3304      	adds	r3, #4
 800649e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80064a0:	697b      	ldr	r3, [r7, #20]
 80064a2:	687a      	ldr	r2, [r7, #4]
 80064a4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80064a6:	697b      	ldr	r3, [r7, #20]
 80064a8:	683a      	ldr	r2, [r7, #0]
 80064aa:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80064ac:	697b      	ldr	r3, [r7, #20]
 80064ae:	2200      	movs	r2, #0
 80064b0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80064b2:	697b      	ldr	r3, [r7, #20]
 80064b4:	2200      	movs	r2, #0
 80064b6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064b8:	7afb      	ldrb	r3, [r7, #11]
 80064ba:	f003 030f 	and.w	r3, r3, #15
 80064be:	b2da      	uxtb	r2, r3
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	799b      	ldrb	r3, [r3, #6]
 80064c8:	2b01      	cmp	r3, #1
 80064ca:	d102      	bne.n	80064d2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80064cc:	687a      	ldr	r2, [r7, #4]
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	6818      	ldr	r0, [r3, #0]
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	799b      	ldrb	r3, [r3, #6]
 80064da:	461a      	mov	r2, r3
 80064dc:	6979      	ldr	r1, [r7, #20]
 80064de:	f003 fc55 	bl	8009d8c <USB_EPStartXfer>

  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	4618      	mov	r0, r3
 80064e6:	3718      	adds	r7, #24
 80064e8:	46bd      	mov	sp, r7
 80064ea:	bd80      	pop	{r7, pc}

080064ec <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80064f8:	78fb      	ldrb	r3, [r7, #3]
 80064fa:	f003 020f 	and.w	r2, r3, #15
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	4613      	mov	r3, r2
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	4413      	add	r3, r2
 8006506:	009b      	lsls	r3, r3, #2
 8006508:	440b      	add	r3, r1
 800650a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 800650e:	681b      	ldr	r3, [r3, #0]
}
 8006510:	4618      	mov	r0, r3
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b086      	sub	sp, #24
 8006520:	af00      	add	r7, sp, #0
 8006522:	60f8      	str	r0, [r7, #12]
 8006524:	607a      	str	r2, [r7, #4]
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	460b      	mov	r3, r1
 800652a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800652c:	7afb      	ldrb	r3, [r7, #11]
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	4613      	mov	r3, r2
 8006534:	00db      	lsls	r3, r3, #3
 8006536:	4413      	add	r3, r2
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	3310      	adds	r3, #16
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	4413      	add	r3, r2
 8006540:	3304      	adds	r3, #4
 8006542:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	687a      	ldr	r2, [r7, #4]
 8006548:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	683a      	ldr	r2, [r7, #0]
 800654e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	2200      	movs	r2, #0
 8006554:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006556:	697b      	ldr	r3, [r7, #20]
 8006558:	2201      	movs	r2, #1
 800655a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800655c:	7afb      	ldrb	r3, [r7, #11]
 800655e:	f003 030f 	and.w	r3, r3, #15
 8006562:	b2da      	uxtb	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	799b      	ldrb	r3, [r3, #6]
 800656c:	2b01      	cmp	r3, #1
 800656e:	d102      	bne.n	8006576 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	697b      	ldr	r3, [r7, #20]
 8006574:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	6818      	ldr	r0, [r3, #0]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	799b      	ldrb	r3, [r3, #6]
 800657e:	461a      	mov	r2, r3
 8006580:	6979      	ldr	r1, [r7, #20]
 8006582:	f003 fc03 	bl	8009d8c <USB_EPStartXfer>

  return HAL_OK;
 8006586:	2300      	movs	r3, #0
}
 8006588:	4618      	mov	r0, r3
 800658a:	3718      	adds	r7, #24
 800658c:	46bd      	mov	sp, r7
 800658e:	bd80      	pop	{r7, pc}

08006590 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b084      	sub	sp, #16
 8006594:	af00      	add	r7, sp, #0
 8006596:	6078      	str	r0, [r7, #4]
 8006598:	460b      	mov	r3, r1
 800659a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800659c:	78fb      	ldrb	r3, [r7, #3]
 800659e:	f003 030f 	and.w	r3, r3, #15
 80065a2:	687a      	ldr	r2, [r7, #4]
 80065a4:	7912      	ldrb	r2, [r2, #4]
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d901      	bls.n	80065ae <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80065aa:	2301      	movs	r3, #1
 80065ac:	e04f      	b.n	800664e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80065ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	da0f      	bge.n	80065d6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065b6:	78fb      	ldrb	r3, [r7, #3]
 80065b8:	f003 020f 	and.w	r2, r3, #15
 80065bc:	4613      	mov	r3, r2
 80065be:	00db      	lsls	r3, r3, #3
 80065c0:	4413      	add	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	3310      	adds	r3, #16
 80065c6:	687a      	ldr	r2, [r7, #4]
 80065c8:	4413      	add	r3, r2
 80065ca:	3304      	adds	r3, #4
 80065cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2201      	movs	r2, #1
 80065d2:	705a      	strb	r2, [r3, #1]
 80065d4:	e00d      	b.n	80065f2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80065d6:	78fa      	ldrb	r2, [r7, #3]
 80065d8:	4613      	mov	r3, r2
 80065da:	00db      	lsls	r3, r3, #3
 80065dc:	4413      	add	r3, r2
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80065e4:	687a      	ldr	r2, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	3304      	adds	r3, #4
 80065ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2200      	movs	r2, #0
 80065f0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2201      	movs	r2, #1
 80065f6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065f8:	78fb      	ldrb	r3, [r7, #3]
 80065fa:	f003 030f 	and.w	r3, r3, #15
 80065fe:	b2da      	uxtb	r2, r3
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800660a:	2b01      	cmp	r3, #1
 800660c:	d101      	bne.n	8006612 <HAL_PCD_EP_SetStall+0x82>
 800660e:	2302      	movs	r3, #2
 8006610:	e01d      	b.n	800664e <HAL_PCD_EP_SetStall+0xbe>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2201      	movs	r2, #1
 8006616:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	68f9      	ldr	r1, [r7, #12]
 8006620:	4618      	mov	r0, r3
 8006622:	f003 ff91 	bl	800a548 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006626:	78fb      	ldrb	r3, [r7, #3]
 8006628:	f003 030f 	and.w	r3, r3, #15
 800662c:	2b00      	cmp	r3, #0
 800662e:	d109      	bne.n	8006644 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6818      	ldr	r0, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	7999      	ldrb	r1, [r3, #6]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800663e:	461a      	mov	r2, r3
 8006640:	f004 f982 	bl	800a948 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800664c:	2300      	movs	r3, #0
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}

08006656 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006656:	b580      	push	{r7, lr}
 8006658:	b084      	sub	sp, #16
 800665a:	af00      	add	r7, sp, #0
 800665c:	6078      	str	r0, [r7, #4]
 800665e:	460b      	mov	r3, r1
 8006660:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006662:	78fb      	ldrb	r3, [r7, #3]
 8006664:	f003 030f 	and.w	r3, r3, #15
 8006668:	687a      	ldr	r2, [r7, #4]
 800666a:	7912      	ldrb	r2, [r2, #4]
 800666c:	4293      	cmp	r3, r2
 800666e:	d901      	bls.n	8006674 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006670:	2301      	movs	r3, #1
 8006672:	e042      	b.n	80066fa <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006674:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006678:	2b00      	cmp	r3, #0
 800667a:	da0f      	bge.n	800669c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800667c:	78fb      	ldrb	r3, [r7, #3]
 800667e:	f003 020f 	and.w	r2, r3, #15
 8006682:	4613      	mov	r3, r2
 8006684:	00db      	lsls	r3, r3, #3
 8006686:	4413      	add	r3, r2
 8006688:	009b      	lsls	r3, r3, #2
 800668a:	3310      	adds	r3, #16
 800668c:	687a      	ldr	r2, [r7, #4]
 800668e:	4413      	add	r3, r2
 8006690:	3304      	adds	r3, #4
 8006692:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	705a      	strb	r2, [r3, #1]
 800669a:	e00f      	b.n	80066bc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800669c:	78fb      	ldrb	r3, [r7, #3]
 800669e:	f003 020f 	and.w	r2, r3, #15
 80066a2:	4613      	mov	r3, r2
 80066a4:	00db      	lsls	r3, r3, #3
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80066ae:	687a      	ldr	r2, [r7, #4]
 80066b0:	4413      	add	r3, r2
 80066b2:	3304      	adds	r3, #4
 80066b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	2200      	movs	r2, #0
 80066ba:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80066c2:	78fb      	ldrb	r3, [r7, #3]
 80066c4:	f003 030f 	and.w	r3, r3, #15
 80066c8:	b2da      	uxtb	r2, r3
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d101      	bne.n	80066dc <HAL_PCD_EP_ClrStall+0x86>
 80066d8:	2302      	movs	r3, #2
 80066da:	e00e      	b.n	80066fa <HAL_PCD_EP_ClrStall+0xa4>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2201      	movs	r2, #1
 80066e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68f9      	ldr	r1, [r7, #12]
 80066ea:	4618      	mov	r0, r3
 80066ec:	f003 ff9a 	bl	800a624 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80066f8:	2300      	movs	r3, #0
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3710      	adds	r7, #16
 80066fe:	46bd      	mov	sp, r7
 8006700:	bd80      	pop	{r7, pc}

08006702 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006702:	b580      	push	{r7, lr}
 8006704:	b084      	sub	sp, #16
 8006706:	af00      	add	r7, sp, #0
 8006708:	6078      	str	r0, [r7, #4]
 800670a:	460b      	mov	r3, r1
 800670c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800670e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006712:	2b00      	cmp	r3, #0
 8006714:	da0c      	bge.n	8006730 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006716:	78fb      	ldrb	r3, [r7, #3]
 8006718:	f003 020f 	and.w	r2, r3, #15
 800671c:	4613      	mov	r3, r2
 800671e:	00db      	lsls	r3, r3, #3
 8006720:	4413      	add	r3, r2
 8006722:	009b      	lsls	r3, r3, #2
 8006724:	3310      	adds	r3, #16
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	3304      	adds	r3, #4
 800672c:	60fb      	str	r3, [r7, #12]
 800672e:	e00c      	b.n	800674a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	f003 020f 	and.w	r2, r3, #15
 8006736:	4613      	mov	r3, r2
 8006738:	00db      	lsls	r3, r3, #3
 800673a:	4413      	add	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006742:	687a      	ldr	r2, [r7, #4]
 8006744:	4413      	add	r3, r2
 8006746:	3304      	adds	r3, #4
 8006748:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	68f9      	ldr	r1, [r7, #12]
 8006750:	4618      	mov	r0, r3
 8006752:	f003 fdb9 	bl	800a2c8 <USB_EPStopXfer>
 8006756:	4603      	mov	r3, r0
 8006758:	72fb      	strb	r3, [r7, #11]

  return ret;
 800675a:	7afb      	ldrb	r3, [r7, #11]
}
 800675c:	4618      	mov	r0, r3
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}

08006764 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	@ 0x28
 8006768:	af02      	add	r7, sp, #8
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006778:	683a      	ldr	r2, [r7, #0]
 800677a:	4613      	mov	r3, r2
 800677c:	00db      	lsls	r3, r3, #3
 800677e:	4413      	add	r3, r2
 8006780:	009b      	lsls	r3, r3, #2
 8006782:	3310      	adds	r3, #16
 8006784:	687a      	ldr	r2, [r7, #4]
 8006786:	4413      	add	r3, r2
 8006788:	3304      	adds	r3, #4
 800678a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	695a      	ldr	r2, [r3, #20]
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	691b      	ldr	r3, [r3, #16]
 8006794:	429a      	cmp	r2, r3
 8006796:	d901      	bls.n	800679c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006798:	2301      	movs	r3, #1
 800679a:	e06b      	b.n	8006874 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	691a      	ldr	r2, [r3, #16]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	69fa      	ldr	r2, [r7, #28]
 80067ae:	429a      	cmp	r2, r3
 80067b0:	d902      	bls.n	80067b8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	689b      	ldr	r3, [r3, #8]
 80067b6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80067b8:	69fb      	ldr	r3, [r7, #28]
 80067ba:	3303      	adds	r3, #3
 80067bc:	089b      	lsrs	r3, r3, #2
 80067be:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80067c0:	e02a      	b.n	8006818 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	691a      	ldr	r2, [r3, #16]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	695b      	ldr	r3, [r3, #20]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	689b      	ldr	r3, [r3, #8]
 80067d2:	69fa      	ldr	r2, [r7, #28]
 80067d4:	429a      	cmp	r2, r3
 80067d6:	d902      	bls.n	80067de <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80067de:	69fb      	ldr	r3, [r7, #28]
 80067e0:	3303      	adds	r3, #3
 80067e2:	089b      	lsrs	r3, r3, #2
 80067e4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067e6:	68fb      	ldr	r3, [r7, #12]
 80067e8:	68d9      	ldr	r1, [r3, #12]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	b2da      	uxtb	r2, r3
 80067ee:	69fb      	ldr	r3, [r7, #28]
 80067f0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80067f6:	9300      	str	r3, [sp, #0]
 80067f8:	4603      	mov	r3, r0
 80067fa:	6978      	ldr	r0, [r7, #20]
 80067fc:	f003 fe0e 	bl	800a41c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	68da      	ldr	r2, [r3, #12]
 8006804:	69fb      	ldr	r3, [r7, #28]
 8006806:	441a      	add	r2, r3
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	695a      	ldr	r2, [r3, #20]
 8006810:	69fb      	ldr	r3, [r7, #28]
 8006812:	441a      	add	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006824:	699b      	ldr	r3, [r3, #24]
 8006826:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	429a      	cmp	r2, r3
 800682c:	d809      	bhi.n	8006842 <PCD_WriteEmptyTxFifo+0xde>
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	695a      	ldr	r2, [r3, #20]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006836:	429a      	cmp	r2, r3
 8006838:	d203      	bcs.n	8006842 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	691b      	ldr	r3, [r3, #16]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1bf      	bne.n	80067c2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	691a      	ldr	r2, [r3, #16]
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	429a      	cmp	r2, r3
 800684c:	d811      	bhi.n	8006872 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	f003 030f 	and.w	r3, r3, #15
 8006854:	2201      	movs	r2, #1
 8006856:	fa02 f303 	lsl.w	r3, r2, r3
 800685a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006862:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	43db      	mvns	r3, r3
 8006868:	6939      	ldr	r1, [r7, #16]
 800686a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800686e:	4013      	ands	r3, r2
 8006870:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3720      	adds	r7, #32
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800688c:	69fb      	ldr	r3, [r7, #28]
 800688e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006890:	69fb      	ldr	r3, [r7, #28]
 8006892:	333c      	adds	r3, #60	@ 0x3c
 8006894:	3304      	adds	r3, #4
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	015a      	lsls	r2, r3, #5
 800689e:	69bb      	ldr	r3, [r7, #24]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	799b      	ldrb	r3, [r3, #6]
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d17b      	bne.n	80069aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f003 0308 	and.w	r3, r3, #8
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d015      	beq.n	80068e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	4a61      	ldr	r2, [pc, #388]	@ (8006a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	f240 80b9 	bls.w	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80b3 	beq.w	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	015a      	lsls	r2, r3, #5
 80068d6:	69bb      	ldr	r3, [r7, #24]
 80068d8:	4413      	add	r3, r2
 80068da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068de:	461a      	mov	r2, r3
 80068e0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068e4:	6093      	str	r3, [r2, #8]
 80068e6:	e0a7      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d009      	beq.n	8006906 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	015a      	lsls	r2, r3, #5
 80068f6:	69bb      	ldr	r3, [r7, #24]
 80068f8:	4413      	add	r3, r2
 80068fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068fe:	461a      	mov	r2, r3
 8006900:	2320      	movs	r3, #32
 8006902:	6093      	str	r3, [r2, #8]
 8006904:	e098      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006906:	693b      	ldr	r3, [r7, #16]
 8006908:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800690c:	2b00      	cmp	r3, #0
 800690e:	f040 8093 	bne.w	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	4a4b      	ldr	r2, [pc, #300]	@ (8006a44 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d90f      	bls.n	800693a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800691a:	693b      	ldr	r3, [r7, #16]
 800691c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006920:	2b00      	cmp	r3, #0
 8006922:	d00a      	beq.n	800693a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	015a      	lsls	r2, r3, #5
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	4413      	add	r3, r2
 800692c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006930:	461a      	mov	r2, r3
 8006932:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006936:	6093      	str	r3, [r2, #8]
 8006938:	e07e      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800693a:	683a      	ldr	r2, [r7, #0]
 800693c:	4613      	mov	r3, r2
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006948:	687a      	ldr	r2, [r7, #4]
 800694a:	4413      	add	r3, r2
 800694c:	3304      	adds	r3, #4
 800694e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a1a      	ldr	r2, [r3, #32]
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	0159      	lsls	r1, r3, #5
 8006958:	69bb      	ldr	r3, [r7, #24]
 800695a:	440b      	add	r3, r1
 800695c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006960:	691b      	ldr	r3, [r3, #16]
 8006962:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006966:	1ad2      	subs	r2, r2, r3
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d114      	bne.n	800699c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	691b      	ldr	r3, [r3, #16]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d109      	bne.n	800698e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6818      	ldr	r0, [r3, #0]
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006984:	461a      	mov	r2, r3
 8006986:	2101      	movs	r1, #1
 8006988:	f003 ffde 	bl	800a948 <USB_EP0_OutStart>
 800698c:	e006      	b.n	800699c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	68da      	ldr	r2, [r3, #12]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	441a      	add	r2, r3
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	b2db      	uxtb	r3, r3
 80069a0:	4619      	mov	r1, r3
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f007 fc6e 	bl	800e284 <HAL_PCD_DataOutStageCallback>
 80069a8:	e046      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	4a26      	ldr	r2, [pc, #152]	@ (8006a48 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80069ae:	4293      	cmp	r3, r2
 80069b0:	d124      	bne.n	80069fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80069b2:	693b      	ldr	r3, [r7, #16]
 80069b4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00a      	beq.n	80069d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	69bb      	ldr	r3, [r7, #24]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069c8:	461a      	mov	r2, r3
 80069ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069ce:	6093      	str	r3, [r2, #8]
 80069d0:	e032      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f003 0320 	and.w	r3, r3, #32
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d008      	beq.n	80069ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	015a      	lsls	r2, r3, #5
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	4413      	add	r3, r2
 80069e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80069e8:	461a      	mov	r2, r3
 80069ea:	2320      	movs	r3, #32
 80069ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f007 fc45 	bl	800e284 <HAL_PCD_DataOutStageCallback>
 80069fa:	e01d      	b.n	8006a38 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d114      	bne.n	8006a2c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006a02:	6879      	ldr	r1, [r7, #4]
 8006a04:	683a      	ldr	r2, [r7, #0]
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	440b      	add	r3, r1
 8006a10:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d108      	bne.n	8006a2c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6818      	ldr	r0, [r3, #0]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006a24:	461a      	mov	r2, r3
 8006a26:	2100      	movs	r1, #0
 8006a28:	f003 ff8e 	bl	800a948 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006a2c:	683b      	ldr	r3, [r7, #0]
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	4619      	mov	r1, r3
 8006a32:	6878      	ldr	r0, [r7, #4]
 8006a34:	f007 fc26 	bl	800e284 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3720      	adds	r7, #32
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	bd80      	pop	{r7, pc}
 8006a42:	bf00      	nop
 8006a44:	4f54300a 	.word	0x4f54300a
 8006a48:	4f54310a 	.word	0x4f54310a

08006a4c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b086      	sub	sp, #24
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	333c      	adds	r3, #60	@ 0x3c
 8006a64:	3304      	adds	r3, #4
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a76:	689b      	ldr	r3, [r3, #8]
 8006a78:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	4a15      	ldr	r2, [pc, #84]	@ (8006ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006a7e:	4293      	cmp	r3, r2
 8006a80:	d90e      	bls.n	8006aa0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d009      	beq.n	8006aa0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	015a      	lsls	r2, r3, #5
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	4413      	add	r3, r2
 8006a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006a98:	461a      	mov	r2, r3
 8006a9a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a9e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f007 fbdd 	bl	800e260 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8006ad4 <PCD_EP_OutSetupPacket_int+0x88>)
 8006aaa:	4293      	cmp	r3, r2
 8006aac:	d90c      	bls.n	8006ac8 <PCD_EP_OutSetupPacket_int+0x7c>
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	799b      	ldrb	r3, [r3, #6]
 8006ab2:	2b01      	cmp	r3, #1
 8006ab4:	d108      	bne.n	8006ac8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6818      	ldr	r0, [r3, #0]
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	2101      	movs	r1, #1
 8006ac4:	f003 ff40 	bl	800a948 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006ac8:	2300      	movs	r3, #0
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	4f54300a 	.word	0x4f54300a

08006ad8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b085      	sub	sp, #20
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
 8006ae4:	4613      	mov	r3, r2
 8006ae6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006af0:	78fb      	ldrb	r3, [r7, #3]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d107      	bne.n	8006b06 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006af6:	883b      	ldrh	r3, [r7, #0]
 8006af8:	0419      	lsls	r1, r3, #16
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68ba      	ldr	r2, [r7, #8]
 8006b00:	430a      	orrs	r2, r1
 8006b02:	629a      	str	r2, [r3, #40]	@ 0x28
 8006b04:	e028      	b.n	8006b58 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	68ba      	ldr	r2, [r7, #8]
 8006b10:	4413      	add	r3, r2
 8006b12:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b14:	2300      	movs	r3, #0
 8006b16:	73fb      	strb	r3, [r7, #15]
 8006b18:	e00d      	b.n	8006b36 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681a      	ldr	r2, [r3, #0]
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	3340      	adds	r3, #64	@ 0x40
 8006b22:	009b      	lsls	r3, r3, #2
 8006b24:	4413      	add	r3, r2
 8006b26:	685b      	ldr	r3, [r3, #4]
 8006b28:	0c1b      	lsrs	r3, r3, #16
 8006b2a:	68ba      	ldr	r2, [r7, #8]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	3301      	adds	r3, #1
 8006b34:	73fb      	strb	r3, [r7, #15]
 8006b36:	7bfa      	ldrb	r2, [r7, #15]
 8006b38:	78fb      	ldrb	r3, [r7, #3]
 8006b3a:	3b01      	subs	r3, #1
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d3ec      	bcc.n	8006b1a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006b40:	883b      	ldrh	r3, [r7, #0]
 8006b42:	0418      	lsls	r0, r3, #16
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	6819      	ldr	r1, [r3, #0]
 8006b48:	78fb      	ldrb	r3, [r7, #3]
 8006b4a:	3b01      	subs	r3, #1
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	4302      	orrs	r2, r0
 8006b50:	3340      	adds	r3, #64	@ 0x40
 8006b52:	009b      	lsls	r3, r3, #2
 8006b54:	440b      	add	r3, r1
 8006b56:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006b58:	2300      	movs	r3, #0
}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	3714      	adds	r7, #20
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr

08006b66 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006b66:	b480      	push	{r7}
 8006b68:	b083      	sub	sp, #12
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	460b      	mov	r3, r1
 8006b70:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	887a      	ldrh	r2, [r7, #2]
 8006b78:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	370c      	adds	r7, #12
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr

08006b88 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
 8006b8e:	6078      	str	r0, [r7, #4]
 8006b90:	460b      	mov	r3, r1
 8006b92:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b086      	sub	sp, #24
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e267      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d075      	beq.n	8006caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bbe:	4b88      	ldr	r3, [pc, #544]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	f003 030c 	and.w	r3, r3, #12
 8006bc6:	2b04      	cmp	r3, #4
 8006bc8:	d00c      	beq.n	8006be4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bca:	4b85      	ldr	r3, [pc, #532]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bcc:	689b      	ldr	r3, [r3, #8]
 8006bce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006bd2:	2b08      	cmp	r3, #8
 8006bd4:	d112      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006bd6:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bde:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006be2:	d10b      	bne.n	8006bfc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006be4:	4b7e      	ldr	r3, [pc, #504]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d05b      	beq.n	8006ca8 <HAL_RCC_OscConfig+0x108>
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d157      	bne.n	8006ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e242      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c04:	d106      	bne.n	8006c14 <HAL_RCC_OscConfig+0x74>
 8006c06:	4b76      	ldr	r3, [pc, #472]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a75      	ldr	r2, [pc, #468]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c10:	6013      	str	r3, [r2, #0]
 8006c12:	e01d      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	685b      	ldr	r3, [r3, #4]
 8006c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006c1c:	d10c      	bne.n	8006c38 <HAL_RCC_OscConfig+0x98>
 8006c1e:	4b70      	ldr	r3, [pc, #448]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	4a6f      	ldr	r2, [pc, #444]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	4b6d      	ldr	r3, [pc, #436]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	4a6c      	ldr	r2, [pc, #432]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006c34:	6013      	str	r3, [r2, #0]
 8006c36:	e00b      	b.n	8006c50 <HAL_RCC_OscConfig+0xb0>
 8006c38:	4b69      	ldr	r3, [pc, #420]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a68      	ldr	r2, [pc, #416]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4b66      	ldr	r3, [pc, #408]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4a65      	ldr	r2, [pc, #404]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d013      	beq.n	8006c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c58:	f7fd fec6 	bl	80049e8 <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c60:	f7fd fec2 	bl	80049e8 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b64      	cmp	r3, #100	@ 0x64
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e207      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c72:	4b5b      	ldr	r3, [pc, #364]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d0f0      	beq.n	8006c60 <HAL_RCC_OscConfig+0xc0>
 8006c7e:	e014      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c80:	f7fd feb2 	bl	80049e8 <HAL_GetTick>
 8006c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c86:	e008      	b.n	8006c9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006c88:	f7fd feae 	bl	80049e8 <HAL_GetTick>
 8006c8c:	4602      	mov	r2, r0
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	1ad3      	subs	r3, r2, r3
 8006c92:	2b64      	cmp	r3, #100	@ 0x64
 8006c94:	d901      	bls.n	8006c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e1f3      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006c9a:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d1f0      	bne.n	8006c88 <HAL_RCC_OscConfig+0xe8>
 8006ca6:	e000      	b.n	8006caa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	f003 0302 	and.w	r3, r3, #2
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d063      	beq.n	8006d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cb6:	4b4a      	ldr	r3, [pc, #296]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f003 030c 	and.w	r3, r3, #12
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00b      	beq.n	8006cda <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cc2:	4b47      	ldr	r3, [pc, #284]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cc4:	689b      	ldr	r3, [r3, #8]
 8006cc6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006cca:	2b08      	cmp	r3, #8
 8006ccc:	d11c      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006cce:	4b44      	ldr	r3, [pc, #272]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d116      	bne.n	8006d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006cda:	4b41      	ldr	r3, [pc, #260]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0302 	and.w	r3, r3, #2
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d005      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	68db      	ldr	r3, [r3, #12]
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d001      	beq.n	8006cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006cee:	2301      	movs	r3, #1
 8006cf0:	e1c7      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006cf2:	4b3b      	ldr	r3, [pc, #236]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	691b      	ldr	r3, [r3, #16]
 8006cfe:	00db      	lsls	r3, r3, #3
 8006d00:	4937      	ldr	r1, [pc, #220]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006d06:	e03a      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006d10:	4b34      	ldr	r3, [pc, #208]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d12:	2201      	movs	r2, #1
 8006d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d16:	f7fd fe67 	bl	80049e8 <HAL_GetTick>
 8006d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d1c:	e008      	b.n	8006d30 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d1e:	f7fd fe63 	bl	80049e8 <HAL_GetTick>
 8006d22:	4602      	mov	r2, r0
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	1ad3      	subs	r3, r2, r3
 8006d28:	2b02      	cmp	r3, #2
 8006d2a:	d901      	bls.n	8006d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006d2c:	2303      	movs	r3, #3
 8006d2e:	e1a8      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d30:	4b2b      	ldr	r3, [pc, #172]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	f003 0302 	and.w	r3, r3, #2
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d0f0      	beq.n	8006d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006d3c:	4b28      	ldr	r3, [pc, #160]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	00db      	lsls	r3, r3, #3
 8006d4a:	4925      	ldr	r1, [pc, #148]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	600b      	str	r3, [r1, #0]
 8006d50:	e015      	b.n	8006d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006d52:	4b24      	ldr	r3, [pc, #144]	@ (8006de4 <HAL_RCC_OscConfig+0x244>)
 8006d54:	2200      	movs	r2, #0
 8006d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006d58:	f7fd fe46 	bl	80049e8 <HAL_GetTick>
 8006d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d5e:	e008      	b.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006d60:	f7fd fe42 	bl	80049e8 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	693b      	ldr	r3, [r7, #16]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d901      	bls.n	8006d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006d6e:	2303      	movs	r3, #3
 8006d70:	e187      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006d72:	4b1b      	ldr	r3, [pc, #108]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f003 0302 	and.w	r3, r3, #2
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d1f0      	bne.n	8006d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d036      	beq.n	8006df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	695b      	ldr	r3, [r3, #20]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d016      	beq.n	8006dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006d92:	4b15      	ldr	r3, [pc, #84]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006d94:	2201      	movs	r2, #1
 8006d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d98:	f7fd fe26 	bl	80049e8 <HAL_GetTick>
 8006d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006d9e:	e008      	b.n	8006db2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006da0:	f7fd fe22 	bl	80049e8 <HAL_GetTick>
 8006da4:	4602      	mov	r2, r0
 8006da6:	693b      	ldr	r3, [r7, #16]
 8006da8:	1ad3      	subs	r3, r2, r3
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d901      	bls.n	8006db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e167      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006db2:	4b0b      	ldr	r3, [pc, #44]	@ (8006de0 <HAL_RCC_OscConfig+0x240>)
 8006db4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006db6:	f003 0302 	and.w	r3, r3, #2
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d0f0      	beq.n	8006da0 <HAL_RCC_OscConfig+0x200>
 8006dbe:	e01b      	b.n	8006df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006dc0:	4b09      	ldr	r3, [pc, #36]	@ (8006de8 <HAL_RCC_OscConfig+0x248>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dc6:	f7fd fe0f 	bl	80049e8 <HAL_GetTick>
 8006dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dcc:	e00e      	b.n	8006dec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006dce:	f7fd fe0b 	bl	80049e8 <HAL_GetTick>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	693b      	ldr	r3, [r7, #16]
 8006dd6:	1ad3      	subs	r3, r2, r3
 8006dd8:	2b02      	cmp	r3, #2
 8006dda:	d907      	bls.n	8006dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006ddc:	2303      	movs	r3, #3
 8006dde:	e150      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8006de0:	40023800 	.word	0x40023800
 8006de4:	42470000 	.word	0x42470000
 8006de8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006dec:	4b88      	ldr	r3, [pc, #544]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006dee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d1ea      	bne.n	8006dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f000 8097 	beq.w	8006f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006e06:	2300      	movs	r3, #0
 8006e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e0a:	4b81      	ldr	r3, [pc, #516]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d10f      	bne.n	8006e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e16:	2300      	movs	r3, #0
 8006e18:	60bb      	str	r3, [r7, #8]
 8006e1a:	4b7d      	ldr	r3, [pc, #500]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e1e:	4a7c      	ldr	r2, [pc, #496]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006e24:	6413      	str	r3, [r2, #64]	@ 0x40
 8006e26:	4b7a      	ldr	r3, [pc, #488]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006e2e:	60bb      	str	r3, [r7, #8]
 8006e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006e32:	2301      	movs	r3, #1
 8006e34:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e36:	4b77      	ldr	r3, [pc, #476]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d118      	bne.n	8006e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006e42:	4b74      	ldr	r3, [pc, #464]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a73      	ldr	r2, [pc, #460]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006e4e:	f7fd fdcb 	bl	80049e8 <HAL_GetTick>
 8006e52:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e54:	e008      	b.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006e56:	f7fd fdc7 	bl	80049e8 <HAL_GetTick>
 8006e5a:	4602      	mov	r2, r0
 8006e5c:	693b      	ldr	r3, [r7, #16]
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	d901      	bls.n	8006e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006e64:	2303      	movs	r3, #3
 8006e66:	e10c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e68:	4b6a      	ldr	r3, [pc, #424]	@ (8007014 <HAL_RCC_OscConfig+0x474>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d0f0      	beq.n	8006e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	689b      	ldr	r3, [r3, #8]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d106      	bne.n	8006e8a <HAL_RCC_OscConfig+0x2ea>
 8006e7c:	4b64      	ldr	r3, [pc, #400]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e80:	4a63      	ldr	r2, [pc, #396]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e82:	f043 0301 	orr.w	r3, r3, #1
 8006e86:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e88:	e01c      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	689b      	ldr	r3, [r3, #8]
 8006e8e:	2b05      	cmp	r3, #5
 8006e90:	d10c      	bne.n	8006eac <HAL_RCC_OscConfig+0x30c>
 8006e92:	4b5f      	ldr	r3, [pc, #380]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006e96:	4a5e      	ldr	r2, [pc, #376]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006e98:	f043 0304 	orr.w	r3, r3, #4
 8006e9c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006e9e:	4b5c      	ldr	r3, [pc, #368]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ea2:	4a5b      	ldr	r2, [pc, #364]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ea4:	f043 0301 	orr.w	r3, r3, #1
 8006ea8:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eaa:	e00b      	b.n	8006ec4 <HAL_RCC_OscConfig+0x324>
 8006eac:	4b58      	ldr	r3, [pc, #352]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eb0:	4a57      	ldr	r2, [pc, #348]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eb2:	f023 0301 	bic.w	r3, r3, #1
 8006eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006eb8:	4b55      	ldr	r3, [pc, #340]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ebc:	4a54      	ldr	r2, [pc, #336]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ebe:	f023 0304 	bic.w	r3, r3, #4
 8006ec2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	689b      	ldr	r3, [r3, #8]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d015      	beq.n	8006ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ecc:	f7fd fd8c 	bl	80049e8 <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ed2:	e00a      	b.n	8006eea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006ed4:	f7fd fd88 	bl	80049e8 <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	d901      	bls.n	8006eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e0cb      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006eea:	4b49      	ldr	r3, [pc, #292]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006eec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006eee:	f003 0302 	and.w	r3, r3, #2
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d0ee      	beq.n	8006ed4 <HAL_RCC_OscConfig+0x334>
 8006ef6:	e014      	b.n	8006f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ef8:	f7fd fd76 	bl	80049e8 <HAL_GetTick>
 8006efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006efe:	e00a      	b.n	8006f16 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006f00:	f7fd fd72 	bl	80049e8 <HAL_GetTick>
 8006f04:	4602      	mov	r2, r0
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	1ad3      	subs	r3, r2, r3
 8006f0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006f0e:	4293      	cmp	r3, r2
 8006f10:	d901      	bls.n	8006f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e0b5      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006f16:	4b3e      	ldr	r3, [pc, #248]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f1a:	f003 0302 	and.w	r3, r3, #2
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d1ee      	bne.n	8006f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b01      	cmp	r3, #1
 8006f26:	d105      	bne.n	8006f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006f28:	4b39      	ldr	r3, [pc, #228]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f2c:	4a38      	ldr	r2, [pc, #224]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f2e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006f32:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	699b      	ldr	r3, [r3, #24]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	f000 80a1 	beq.w	8007080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006f3e:	4b34      	ldr	r3, [pc, #208]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f40:	689b      	ldr	r3, [r3, #8]
 8006f42:	f003 030c 	and.w	r3, r3, #12
 8006f46:	2b08      	cmp	r3, #8
 8006f48:	d05c      	beq.n	8007004 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	699b      	ldr	r3, [r3, #24]
 8006f4e:	2b02      	cmp	r3, #2
 8006f50:	d141      	bne.n	8006fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006f52:	4b31      	ldr	r3, [pc, #196]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006f54:	2200      	movs	r2, #0
 8006f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006f58:	f7fd fd46 	bl	80049e8 <HAL_GetTick>
 8006f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f5e:	e008      	b.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f60:	f7fd fd42 	bl	80049e8 <HAL_GetTick>
 8006f64:	4602      	mov	r2, r0
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	1ad3      	subs	r3, r2, r3
 8006f6a:	2b02      	cmp	r3, #2
 8006f6c:	d901      	bls.n	8006f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006f6e:	2303      	movs	r3, #3
 8006f70:	e087      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006f72:	4b27      	ldr	r3, [pc, #156]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d1f0      	bne.n	8006f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	69da      	ldr	r2, [r3, #28]
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	6a1b      	ldr	r3, [r3, #32]
 8006f86:	431a      	orrs	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f8c:	019b      	lsls	r3, r3, #6
 8006f8e:	431a      	orrs	r2, r3
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f94:	085b      	lsrs	r3, r3, #1
 8006f96:	3b01      	subs	r3, #1
 8006f98:	041b      	lsls	r3, r3, #16
 8006f9a:	431a      	orrs	r2, r3
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fa0:	061b      	lsls	r3, r3, #24
 8006fa2:	491b      	ldr	r1, [pc, #108]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fa4:	4313      	orrs	r3, r2
 8006fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006fa8:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006faa:	2201      	movs	r2, #1
 8006fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fae:	f7fd fd1b 	bl	80049e8 <HAL_GetTick>
 8006fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fb4:	e008      	b.n	8006fc8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fb6:	f7fd fd17 	bl	80049e8 <HAL_GetTick>
 8006fba:	4602      	mov	r2, r0
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	1ad3      	subs	r3, r2, r3
 8006fc0:	2b02      	cmp	r3, #2
 8006fc2:	d901      	bls.n	8006fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006fc4:	2303      	movs	r3, #3
 8006fc6:	e05c      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006fc8:	4b11      	ldr	r3, [pc, #68]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0f0      	beq.n	8006fb6 <HAL_RCC_OscConfig+0x416>
 8006fd4:	e054      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fd6:	4b10      	ldr	r3, [pc, #64]	@ (8007018 <HAL_RCC_OscConfig+0x478>)
 8006fd8:	2200      	movs	r2, #0
 8006fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006fdc:	f7fd fd04 	bl	80049e8 <HAL_GetTick>
 8006fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006fe2:	e008      	b.n	8006ff6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe4:	f7fd fd00 	bl	80049e8 <HAL_GetTick>
 8006fe8:	4602      	mov	r2, r0
 8006fea:	693b      	ldr	r3, [r7, #16]
 8006fec:	1ad3      	subs	r3, r2, r3
 8006fee:	2b02      	cmp	r3, #2
 8006ff0:	d901      	bls.n	8006ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ff2:	2303      	movs	r3, #3
 8006ff4:	e045      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ff6:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <HAL_RCC_OscConfig+0x470>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d1f0      	bne.n	8006fe4 <HAL_RCC_OscConfig+0x444>
 8007002:	e03d      	b.n	8007080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	2b01      	cmp	r3, #1
 800700a:	d107      	bne.n	800701c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e038      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
 8007010:	40023800 	.word	0x40023800
 8007014:	40007000 	.word	0x40007000
 8007018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800701c:	4b1b      	ldr	r3, [pc, #108]	@ (800708c <HAL_RCC_OscConfig+0x4ec>)
 800701e:	685b      	ldr	r3, [r3, #4]
 8007020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	699b      	ldr	r3, [r3, #24]
 8007026:	2b01      	cmp	r3, #1
 8007028:	d028      	beq.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007034:	429a      	cmp	r2, r3
 8007036:	d121      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007042:	429a      	cmp	r2, r3
 8007044:	d11a      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800704c:	4013      	ands	r3, r2
 800704e:	687a      	ldr	r2, [r7, #4]
 8007050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007054:	4293      	cmp	r3, r2
 8007056:	d111      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007062:	085b      	lsrs	r3, r3, #1
 8007064:	3b01      	subs	r3, #1
 8007066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007068:	429a      	cmp	r2, r3
 800706a:	d107      	bne.n	800707c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007078:	429a      	cmp	r2, r3
 800707a:	d001      	beq.n	8007080 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800707c:	2301      	movs	r3, #1
 800707e:	e000      	b.n	8007082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007080:	2300      	movs	r3, #0
}
 8007082:	4618      	mov	r0, r3
 8007084:	3718      	adds	r7, #24
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	40023800 	.word	0x40023800

08007090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d101      	bne.n	80070a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80070a0:	2301      	movs	r3, #1
 80070a2:	e0cc      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80070a4:	4b68      	ldr	r3, [pc, #416]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0307 	and.w	r3, r3, #7
 80070ac:	683a      	ldr	r2, [r7, #0]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d90c      	bls.n	80070cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80070b2:	4b65      	ldr	r3, [pc, #404]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070b4:	683a      	ldr	r2, [r7, #0]
 80070b6:	b2d2      	uxtb	r2, r2
 80070b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070ba:	4b63      	ldr	r3, [pc, #396]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0307 	and.w	r3, r3, #7
 80070c2:	683a      	ldr	r2, [r7, #0]
 80070c4:	429a      	cmp	r2, r3
 80070c6:	d001      	beq.n	80070cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80070c8:	2301      	movs	r3, #1
 80070ca:	e0b8      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0302 	and.w	r3, r3, #2
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d020      	beq.n	800711a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	f003 0304 	and.w	r3, r3, #4
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80070e4:	4b59      	ldr	r3, [pc, #356]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	4a58      	ldr	r2, [pc, #352]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070ea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80070ee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f003 0308 	and.w	r3, r3, #8
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d005      	beq.n	8007108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80070fc:	4b53      	ldr	r3, [pc, #332]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	4a52      	ldr	r2, [pc, #328]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007102:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007108:	4b50      	ldr	r3, [pc, #320]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800710a:	689b      	ldr	r3, [r3, #8]
 800710c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	689b      	ldr	r3, [r3, #8]
 8007114:	494d      	ldr	r1, [pc, #308]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007116:	4313      	orrs	r3, r2
 8007118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d044      	beq.n	80071b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	2b01      	cmp	r3, #1
 800712c:	d107      	bne.n	800713e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800712e:	4b47      	ldr	r3, [pc, #284]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007136:	2b00      	cmp	r3, #0
 8007138:	d119      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e07f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	2b02      	cmp	r3, #2
 8007144:	d003      	beq.n	800714e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800714a:	2b03      	cmp	r3, #3
 800714c:	d107      	bne.n	800715e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800714e:	4b3f      	ldr	r3, [pc, #252]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007156:	2b00      	cmp	r3, #0
 8007158:	d109      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800715a:	2301      	movs	r3, #1
 800715c:	e06f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800715e:	4b3b      	ldr	r3, [pc, #236]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f003 0302 	and.w	r3, r3, #2
 8007166:	2b00      	cmp	r3, #0
 8007168:	d101      	bne.n	800716e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e067      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800716e:	4b37      	ldr	r3, [pc, #220]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007170:	689b      	ldr	r3, [r3, #8]
 8007172:	f023 0203 	bic.w	r2, r3, #3
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	685b      	ldr	r3, [r3, #4]
 800717a:	4934      	ldr	r1, [pc, #208]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800717c:	4313      	orrs	r3, r2
 800717e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007180:	f7fd fc32 	bl	80049e8 <HAL_GetTick>
 8007184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007186:	e00a      	b.n	800719e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007188:	f7fd fc2e 	bl	80049e8 <HAL_GetTick>
 800718c:	4602      	mov	r2, r0
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	1ad3      	subs	r3, r2, r3
 8007192:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007196:	4293      	cmp	r3, r2
 8007198:	d901      	bls.n	800719e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800719a:	2303      	movs	r3, #3
 800719c:	e04f      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800719e:	4b2b      	ldr	r3, [pc, #172]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 020c 	and.w	r2, r3, #12
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	685b      	ldr	r3, [r3, #4]
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	429a      	cmp	r2, r3
 80071ae:	d1eb      	bne.n	8007188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80071b0:	4b25      	ldr	r3, [pc, #148]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f003 0307 	and.w	r3, r3, #7
 80071b8:	683a      	ldr	r2, [r7, #0]
 80071ba:	429a      	cmp	r2, r3
 80071bc:	d20c      	bcs.n	80071d8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071be:	4b22      	ldr	r3, [pc, #136]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	b2d2      	uxtb	r2, r2
 80071c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80071c6:	4b20      	ldr	r3, [pc, #128]	@ (8007248 <HAL_RCC_ClockConfig+0x1b8>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0307 	and.w	r3, r3, #7
 80071ce:	683a      	ldr	r2, [r7, #0]
 80071d0:	429a      	cmp	r2, r3
 80071d2:	d001      	beq.n	80071d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80071d4:	2301      	movs	r3, #1
 80071d6:	e032      	b.n	800723e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f003 0304 	and.w	r3, r3, #4
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d008      	beq.n	80071f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071e4:	4b19      	ldr	r3, [pc, #100]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071e6:	689b      	ldr	r3, [r3, #8]
 80071e8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	4916      	ldr	r1, [pc, #88]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 80071f2:	4313      	orrs	r3, r2
 80071f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	f003 0308 	and.w	r3, r3, #8
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d009      	beq.n	8007216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007202:	4b12      	ldr	r3, [pc, #72]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007204:	689b      	ldr	r3, [r3, #8]
 8007206:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	691b      	ldr	r3, [r3, #16]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	490e      	ldr	r1, [pc, #56]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 8007212:	4313      	orrs	r3, r2
 8007214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007216:	f000 f821 	bl	800725c <HAL_RCC_GetSysClockFreq>
 800721a:	4602      	mov	r2, r0
 800721c:	4b0b      	ldr	r3, [pc, #44]	@ (800724c <HAL_RCC_ClockConfig+0x1bc>)
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	091b      	lsrs	r3, r3, #4
 8007222:	f003 030f 	and.w	r3, r3, #15
 8007226:	490a      	ldr	r1, [pc, #40]	@ (8007250 <HAL_RCC_ClockConfig+0x1c0>)
 8007228:	5ccb      	ldrb	r3, [r1, r3]
 800722a:	fa22 f303 	lsr.w	r3, r2, r3
 800722e:	4a09      	ldr	r2, [pc, #36]	@ (8007254 <HAL_RCC_ClockConfig+0x1c4>)
 8007230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007232:	4b09      	ldr	r3, [pc, #36]	@ (8007258 <HAL_RCC_ClockConfig+0x1c8>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	4618      	mov	r0, r3
 8007238:	f7fd fb92 	bl	8004960 <HAL_InitTick>

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3710      	adds	r7, #16
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	40023c00 	.word	0x40023c00
 800724c:	40023800 	.word	0x40023800
 8007250:	0800f4f4 	.word	0x0800f4f4
 8007254:	20000004 	.word	0x20000004
 8007258:	20000030 	.word	0x20000030

0800725c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800725c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007260:	b090      	sub	sp, #64	@ 0x40
 8007262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007264:	2300      	movs	r3, #0
 8007266:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800726c:	2300      	movs	r3, #0
 800726e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007270:	2300      	movs	r3, #0
 8007272:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007274:	4b59      	ldr	r3, [pc, #356]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	f003 030c 	and.w	r3, r3, #12
 800727c:	2b08      	cmp	r3, #8
 800727e:	d00d      	beq.n	800729c <HAL_RCC_GetSysClockFreq+0x40>
 8007280:	2b08      	cmp	r3, #8
 8007282:	f200 80a1 	bhi.w	80073c8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_RCC_GetSysClockFreq+0x34>
 800728a:	2b04      	cmp	r3, #4
 800728c:	d003      	beq.n	8007296 <HAL_RCC_GetSysClockFreq+0x3a>
 800728e:	e09b      	b.n	80073c8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007290:	4b53      	ldr	r3, [pc, #332]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007292:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007294:	e09b      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007296:	4b53      	ldr	r3, [pc, #332]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007298:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800729a:	e098      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800729c:	4b4f      	ldr	r3, [pc, #316]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 800729e:	685b      	ldr	r3, [r3, #4]
 80072a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80072a4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80072a6:	4b4d      	ldr	r3, [pc, #308]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80072a8:	685b      	ldr	r3, [r3, #4]
 80072aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d028      	beq.n	8007304 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80072b2:	4b4a      	ldr	r3, [pc, #296]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	099b      	lsrs	r3, r3, #6
 80072b8:	2200      	movs	r2, #0
 80072ba:	623b      	str	r3, [r7, #32]
 80072bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80072be:	6a3b      	ldr	r3, [r7, #32]
 80072c0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80072c4:	2100      	movs	r1, #0
 80072c6:	4b47      	ldr	r3, [pc, #284]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072c8:	fb03 f201 	mul.w	r2, r3, r1
 80072cc:	2300      	movs	r3, #0
 80072ce:	fb00 f303 	mul.w	r3, r0, r3
 80072d2:	4413      	add	r3, r2
 80072d4:	4a43      	ldr	r2, [pc, #268]	@ (80073e4 <HAL_RCC_GetSysClockFreq+0x188>)
 80072d6:	fba0 1202 	umull	r1, r2, r0, r2
 80072da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80072dc:	460a      	mov	r2, r1
 80072de:	62ba      	str	r2, [r7, #40]	@ 0x28
 80072e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072e2:	4413      	add	r3, r2
 80072e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80072e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80072e8:	2200      	movs	r2, #0
 80072ea:	61bb      	str	r3, [r7, #24]
 80072ec:	61fa      	str	r2, [r7, #28]
 80072ee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80072f2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80072f6:	f7f8 ffcb 	bl	8000290 <__aeabi_uldivmod>
 80072fa:	4602      	mov	r2, r0
 80072fc:	460b      	mov	r3, r1
 80072fe:	4613      	mov	r3, r2
 8007300:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007302:	e053      	b.n	80073ac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007304:	4b35      	ldr	r3, [pc, #212]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 8007306:	685b      	ldr	r3, [r3, #4]
 8007308:	099b      	lsrs	r3, r3, #6
 800730a:	2200      	movs	r2, #0
 800730c:	613b      	str	r3, [r7, #16]
 800730e:	617a      	str	r2, [r7, #20]
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007316:	f04f 0b00 	mov.w	fp, #0
 800731a:	4652      	mov	r2, sl
 800731c:	465b      	mov	r3, fp
 800731e:	f04f 0000 	mov.w	r0, #0
 8007322:	f04f 0100 	mov.w	r1, #0
 8007326:	0159      	lsls	r1, r3, #5
 8007328:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800732c:	0150      	lsls	r0, r2, #5
 800732e:	4602      	mov	r2, r0
 8007330:	460b      	mov	r3, r1
 8007332:	ebb2 080a 	subs.w	r8, r2, sl
 8007336:	eb63 090b 	sbc.w	r9, r3, fp
 800733a:	f04f 0200 	mov.w	r2, #0
 800733e:	f04f 0300 	mov.w	r3, #0
 8007342:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007346:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800734a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800734e:	ebb2 0408 	subs.w	r4, r2, r8
 8007352:	eb63 0509 	sbc.w	r5, r3, r9
 8007356:	f04f 0200 	mov.w	r2, #0
 800735a:	f04f 0300 	mov.w	r3, #0
 800735e:	00eb      	lsls	r3, r5, #3
 8007360:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007364:	00e2      	lsls	r2, r4, #3
 8007366:	4614      	mov	r4, r2
 8007368:	461d      	mov	r5, r3
 800736a:	eb14 030a 	adds.w	r3, r4, sl
 800736e:	603b      	str	r3, [r7, #0]
 8007370:	eb45 030b 	adc.w	r3, r5, fp
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	f04f 0200 	mov.w	r2, #0
 800737a:	f04f 0300 	mov.w	r3, #0
 800737e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007382:	4629      	mov	r1, r5
 8007384:	028b      	lsls	r3, r1, #10
 8007386:	4621      	mov	r1, r4
 8007388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800738c:	4621      	mov	r1, r4
 800738e:	028a      	lsls	r2, r1, #10
 8007390:	4610      	mov	r0, r2
 8007392:	4619      	mov	r1, r3
 8007394:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007396:	2200      	movs	r2, #0
 8007398:	60bb      	str	r3, [r7, #8]
 800739a:	60fa      	str	r2, [r7, #12]
 800739c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073a0:	f7f8 ff76 	bl	8000290 <__aeabi_uldivmod>
 80073a4:	4602      	mov	r2, r0
 80073a6:	460b      	mov	r3, r1
 80073a8:	4613      	mov	r3, r2
 80073aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80073ac:	4b0b      	ldr	r3, [pc, #44]	@ (80073dc <HAL_RCC_GetSysClockFreq+0x180>)
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	0c1b      	lsrs	r3, r3, #16
 80073b2:	f003 0303 	and.w	r3, r3, #3
 80073b6:	3301      	adds	r3, #1
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80073bc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80073c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80073c4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073c6:	e002      	b.n	80073ce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80073c8:	4b05      	ldr	r3, [pc, #20]	@ (80073e0 <HAL_RCC_GetSysClockFreq+0x184>)
 80073ca:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80073cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80073ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3740      	adds	r7, #64	@ 0x40
 80073d4:	46bd      	mov	sp, r7
 80073d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80073da:	bf00      	nop
 80073dc:	40023800 	.word	0x40023800
 80073e0:	00f42400 	.word	0x00f42400
 80073e4:	017d7840 	.word	0x017d7840

080073e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80073e8:	b480      	push	{r7}
 80073ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80073ec:	4b03      	ldr	r3, [pc, #12]	@ (80073fc <HAL_RCC_GetHCLKFreq+0x14>)
 80073ee:	681b      	ldr	r3, [r3, #0]
}
 80073f0:	4618      	mov	r0, r3
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	20000004 	.word	0x20000004

08007400 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b082      	sub	sp, #8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d101      	bne.n	8007412 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800740e:	2301      	movs	r3, #1
 8007410:	e07b      	b.n	800750a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007416:	2b00      	cmp	r3, #0
 8007418:	d108      	bne.n	800742c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007422:	d009      	beq.n	8007438 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	61da      	str	r2, [r3, #28]
 800742a:	e005      	b.n	8007438 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2200      	movs	r2, #0
 8007436:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7fa fcda 	bl	8001e0c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2202      	movs	r2, #2
 800745c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800746e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	685b      	ldr	r3, [r3, #4]
 8007474:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800748a:	431a      	orrs	r2, r3
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	691b      	ldr	r3, [r3, #16]
 8007490:	f003 0302 	and.w	r3, r3, #2
 8007494:	431a      	orrs	r2, r3
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	695b      	ldr	r3, [r3, #20]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	431a      	orrs	r2, r3
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074a8:	431a      	orrs	r2, r3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	69db      	ldr	r3, [r3, #28]
 80074ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074b2:	431a      	orrs	r2, r3
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6a1b      	ldr	r3, [r3, #32]
 80074b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074bc:	ea42 0103 	orr.w	r1, r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	430a      	orrs	r2, r1
 80074ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	699b      	ldr	r3, [r3, #24]
 80074d4:	0c1b      	lsrs	r3, r3, #16
 80074d6:	f003 0104 	and.w	r1, r3, #4
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074de:	f003 0210 	and.w	r2, r3, #16
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	69da      	ldr	r2, [r3, #28]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80074f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	2201      	movs	r2, #1
 8007504:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007508:	2300      	movs	r3, #0
}
 800750a:	4618      	mov	r0, r3
 800750c:	3708      	adds	r7, #8
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}

08007512 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007512:	b580      	push	{r7, lr}
 8007514:	b088      	sub	sp, #32
 8007516:	af00      	add	r7, sp, #0
 8007518:	60f8      	str	r0, [r7, #12]
 800751a:	60b9      	str	r1, [r7, #8]
 800751c:	603b      	str	r3, [r7, #0]
 800751e:	4613      	mov	r3, r2
 8007520:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007522:	f7fd fa61 	bl	80049e8 <HAL_GetTick>
 8007526:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007528:	88fb      	ldrh	r3, [r7, #6]
 800752a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007532:	b2db      	uxtb	r3, r3
 8007534:	2b01      	cmp	r3, #1
 8007536:	d001      	beq.n	800753c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007538:	2302      	movs	r3, #2
 800753a:	e12a      	b.n	8007792 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d002      	beq.n	8007548 <HAL_SPI_Transmit+0x36>
 8007542:	88fb      	ldrh	r3, [r7, #6]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d101      	bne.n	800754c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007548:	2301      	movs	r3, #1
 800754a:	e122      	b.n	8007792 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007552:	2b01      	cmp	r3, #1
 8007554:	d101      	bne.n	800755a <HAL_SPI_Transmit+0x48>
 8007556:	2302      	movs	r3, #2
 8007558:	e11b      	b.n	8007792 <HAL_SPI_Transmit+0x280>
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	2203      	movs	r2, #3
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	2200      	movs	r2, #0
 800756e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	68ba      	ldr	r2, [r7, #8]
 8007574:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	88fa      	ldrh	r2, [r7, #6]
 800757a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	88fa      	ldrh	r2, [r7, #6]
 8007580:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2200      	movs	r2, #0
 8007586:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2200      	movs	r2, #0
 800758c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2200      	movs	r2, #0
 800759e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075a8:	d10f      	bne.n	80075ca <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80075b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80075c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80075d4:	2b40      	cmp	r3, #64	@ 0x40
 80075d6:	d007      	beq.n	80075e8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80075e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	68db      	ldr	r3, [r3, #12]
 80075ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80075f0:	d152      	bne.n	8007698 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	685b      	ldr	r3, [r3, #4]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d002      	beq.n	8007600 <HAL_SPI_Transmit+0xee>
 80075fa:	8b7b      	ldrh	r3, [r7, #26]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d145      	bne.n	800768c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007604:	881a      	ldrh	r2, [r3, #0]
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007610:	1c9a      	adds	r2, r3, #2
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800761a:	b29b      	uxth	r3, r3
 800761c:	3b01      	subs	r3, #1
 800761e:	b29a      	uxth	r2, r3
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007624:	e032      	b.n	800768c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	689b      	ldr	r3, [r3, #8]
 800762c:	f003 0302 	and.w	r3, r3, #2
 8007630:	2b02      	cmp	r3, #2
 8007632:	d112      	bne.n	800765a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007638:	881a      	ldrh	r2, [r3, #0]
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007644:	1c9a      	adds	r2, r3, #2
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800764e:	b29b      	uxth	r3, r3
 8007650:	3b01      	subs	r3, #1
 8007652:	b29a      	uxth	r2, r3
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007658:	e018      	b.n	800768c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800765a:	f7fd f9c5 	bl	80049e8 <HAL_GetTick>
 800765e:	4602      	mov	r2, r0
 8007660:	69fb      	ldr	r3, [r7, #28]
 8007662:	1ad3      	subs	r3, r2, r3
 8007664:	683a      	ldr	r2, [r7, #0]
 8007666:	429a      	cmp	r2, r3
 8007668:	d803      	bhi.n	8007672 <HAL_SPI_Transmit+0x160>
 800766a:	683b      	ldr	r3, [r7, #0]
 800766c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007670:	d102      	bne.n	8007678 <HAL_SPI_Transmit+0x166>
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	2b00      	cmp	r3, #0
 8007676:	d109      	bne.n	800768c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	2200      	movs	r2, #0
 8007684:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007688:	2303      	movs	r3, #3
 800768a:	e082      	b.n	8007792 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d1c7      	bne.n	8007626 <HAL_SPI_Transmit+0x114>
 8007696:	e053      	b.n	8007740 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685b      	ldr	r3, [r3, #4]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d002      	beq.n	80076a6 <HAL_SPI_Transmit+0x194>
 80076a0:	8b7b      	ldrh	r3, [r7, #26]
 80076a2:	2b01      	cmp	r3, #1
 80076a4:	d147      	bne.n	8007736 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	7812      	ldrb	r2, [r2, #0]
 80076b2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076b8:	1c5a      	adds	r2, r3, #1
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	3b01      	subs	r3, #1
 80076c6:	b29a      	uxth	r2, r3
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80076cc:	e033      	b.n	8007736 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f003 0302 	and.w	r3, r3, #2
 80076d8:	2b02      	cmp	r3, #2
 80076da:	d113      	bne.n	8007704 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	330c      	adds	r3, #12
 80076e6:	7812      	ldrb	r2, [r2, #0]
 80076e8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ee:	1c5a      	adds	r2, r3, #1
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076f8:	b29b      	uxth	r3, r3
 80076fa:	3b01      	subs	r3, #1
 80076fc:	b29a      	uxth	r2, r3
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007702:	e018      	b.n	8007736 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007704:	f7fd f970 	bl	80049e8 <HAL_GetTick>
 8007708:	4602      	mov	r2, r0
 800770a:	69fb      	ldr	r3, [r7, #28]
 800770c:	1ad3      	subs	r3, r2, r3
 800770e:	683a      	ldr	r2, [r7, #0]
 8007710:	429a      	cmp	r2, r3
 8007712:	d803      	bhi.n	800771c <HAL_SPI_Transmit+0x20a>
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800771a:	d102      	bne.n	8007722 <HAL_SPI_Transmit+0x210>
 800771c:	683b      	ldr	r3, [r7, #0]
 800771e:	2b00      	cmp	r3, #0
 8007720:	d109      	bne.n	8007736 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	2200      	movs	r2, #0
 800772e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007732:	2303      	movs	r3, #3
 8007734:	e02d      	b.n	8007792 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800773a:	b29b      	uxth	r3, r3
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1c6      	bne.n	80076ce <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007740:	69fa      	ldr	r2, [r7, #28]
 8007742:	6839      	ldr	r1, [r7, #0]
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f000 fd21 	bl	800818c <SPI_EndRxTxTransaction>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2220      	movs	r2, #32
 8007754:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	617b      	str	r3, [r7, #20]
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	617b      	str	r3, [r7, #20]
 8007772:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2201      	movs	r2, #1
 8007778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007788:	2b00      	cmp	r3, #0
 800778a:	d001      	beq.n	8007790 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800778c:	2301      	movs	r3, #1
 800778e:	e000      	b.n	8007792 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007790:	2300      	movs	r3, #0
  }
}
 8007792:	4618      	mov	r0, r3
 8007794:	3720      	adds	r7, #32
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b088      	sub	sp, #32
 800779e:	af02      	add	r7, sp, #8
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	60b9      	str	r1, [r7, #8]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	4613      	mov	r3, r2
 80077a8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80077b0:	b2db      	uxtb	r3, r3
 80077b2:	2b01      	cmp	r3, #1
 80077b4:	d001      	beq.n	80077ba <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80077b6:	2302      	movs	r3, #2
 80077b8:	e104      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80077c2:	d112      	bne.n	80077ea <HAL_SPI_Receive+0x50>
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	689b      	ldr	r3, [r3, #8]
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10e      	bne.n	80077ea <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2204      	movs	r2, #4
 80077d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80077d4:	88fa      	ldrh	r2, [r7, #6]
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	9300      	str	r3, [sp, #0]
 80077da:	4613      	mov	r3, r2
 80077dc:	68ba      	ldr	r2, [r7, #8]
 80077de:	68b9      	ldr	r1, [r7, #8]
 80077e0:	68f8      	ldr	r0, [r7, #12]
 80077e2:	f000 f8f3 	bl	80079cc <HAL_SPI_TransmitReceive>
 80077e6:	4603      	mov	r3, r0
 80077e8:	e0ec      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80077ea:	f7fd f8fd 	bl	80049e8 <HAL_GetTick>
 80077ee:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d002      	beq.n	80077fc <HAL_SPI_Receive+0x62>
 80077f6:	88fb      	ldrh	r3, [r7, #6]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d101      	bne.n	8007800 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e0e1      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007806:	2b01      	cmp	r3, #1
 8007808:	d101      	bne.n	800780e <HAL_SPI_Receive+0x74>
 800780a:	2302      	movs	r3, #2
 800780c:	e0da      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2201      	movs	r2, #1
 8007812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	2204      	movs	r2, #4
 800781a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	2200      	movs	r2, #0
 8007822:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	88fa      	ldrh	r2, [r7, #6]
 800782e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	88fa      	ldrh	r2, [r7, #6]
 8007834:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2200      	movs	r2, #0
 800783a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	2200      	movs	r2, #0
 8007840:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	2200      	movs	r2, #0
 8007846:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	2200      	movs	r2, #0
 800784c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	2200      	movs	r2, #0
 8007852:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	689b      	ldr	r3, [r3, #8]
 8007858:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800785c:	d10f      	bne.n	800787e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	681a      	ldr	r2, [r3, #0]
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800786c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800787c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007888:	2b40      	cmp	r3, #64	@ 0x40
 800788a:	d007      	beq.n	800789c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800789a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d170      	bne.n	8007986 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80078a4:	e035      	b.n	8007912 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	689b      	ldr	r3, [r3, #8]
 80078ac:	f003 0301 	and.w	r3, r3, #1
 80078b0:	2b01      	cmp	r3, #1
 80078b2:	d115      	bne.n	80078e0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f103 020c 	add.w	r2, r3, #12
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c0:	7812      	ldrb	r2, [r2, #0]
 80078c2:	b2d2      	uxtb	r2, r2
 80078c4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078ca:	1c5a      	adds	r2, r3, #1
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80078d4:	b29b      	uxth	r3, r3
 80078d6:	3b01      	subs	r3, #1
 80078d8:	b29a      	uxth	r2, r3
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80078de:	e018      	b.n	8007912 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80078e0:	f7fd f882 	bl	80049e8 <HAL_GetTick>
 80078e4:	4602      	mov	r2, r0
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	1ad3      	subs	r3, r2, r3
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	429a      	cmp	r2, r3
 80078ee:	d803      	bhi.n	80078f8 <HAL_SPI_Receive+0x15e>
 80078f0:	683b      	ldr	r3, [r7, #0]
 80078f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078f6:	d102      	bne.n	80078fe <HAL_SPI_Receive+0x164>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d109      	bne.n	8007912 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2200      	movs	r2, #0
 800790a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800790e:	2303      	movs	r3, #3
 8007910:	e058      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007916:	b29b      	uxth	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1c4      	bne.n	80078a6 <HAL_SPI_Receive+0x10c>
 800791c:	e038      	b.n	8007990 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	689b      	ldr	r3, [r3, #8]
 8007924:	f003 0301 	and.w	r3, r3, #1
 8007928:	2b01      	cmp	r3, #1
 800792a:	d113      	bne.n	8007954 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	68da      	ldr	r2, [r3, #12]
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007936:	b292      	uxth	r2, r2
 8007938:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800793e:	1c9a      	adds	r2, r3, #2
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007948:	b29b      	uxth	r3, r3
 800794a:	3b01      	subs	r3, #1
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007952:	e018      	b.n	8007986 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007954:	f7fd f848 	bl	80049e8 <HAL_GetTick>
 8007958:	4602      	mov	r2, r0
 800795a:	697b      	ldr	r3, [r7, #20]
 800795c:	1ad3      	subs	r3, r2, r3
 800795e:	683a      	ldr	r2, [r7, #0]
 8007960:	429a      	cmp	r2, r3
 8007962:	d803      	bhi.n	800796c <HAL_SPI_Receive+0x1d2>
 8007964:	683b      	ldr	r3, [r7, #0]
 8007966:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800796a:	d102      	bne.n	8007972 <HAL_SPI_Receive+0x1d8>
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	2201      	movs	r2, #1
 8007976:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	2200      	movs	r2, #0
 800797e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007982:	2303      	movs	r3, #3
 8007984:	e01e      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800798a:	b29b      	uxth	r3, r3
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1c6      	bne.n	800791e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007990:	697a      	ldr	r2, [r7, #20]
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	68f8      	ldr	r0, [r7, #12]
 8007996:	f000 fb93 	bl	80080c0 <SPI_EndRxTransaction>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d002      	beq.n	80079a6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2220      	movs	r2, #32
 80079a4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2201      	movs	r2, #1
 80079aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d001      	beq.n	80079c2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e000      	b.n	80079c4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80079c2:	2300      	movs	r3, #0
  }
}
 80079c4:	4618      	mov	r0, r3
 80079c6:	3718      	adds	r7, #24
 80079c8:	46bd      	mov	sp, r7
 80079ca:	bd80      	pop	{r7, pc}

080079cc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	@ 0x28
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	607a      	str	r2, [r7, #4]
 80079d8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80079da:	2301      	movs	r3, #1
 80079dc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80079de:	f7fd f803 	bl	80049e8 <HAL_GetTick>
 80079e2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80079ea:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80079f2:	887b      	ldrh	r3, [r7, #2]
 80079f4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80079f6:	7ffb      	ldrb	r3, [r7, #31]
 80079f8:	2b01      	cmp	r3, #1
 80079fa:	d00c      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0x4a>
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a02:	d106      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	689b      	ldr	r3, [r3, #8]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d102      	bne.n	8007a12 <HAL_SPI_TransmitReceive+0x46>
 8007a0c:	7ffb      	ldrb	r3, [r7, #31]
 8007a0e:	2b04      	cmp	r3, #4
 8007a10:	d001      	beq.n	8007a16 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007a12:	2302      	movs	r3, #2
 8007a14:	e17f      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a16:	68bb      	ldr	r3, [r7, #8]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d005      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x5c>
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d002      	beq.n	8007a28 <HAL_SPI_TransmitReceive+0x5c>
 8007a22:	887b      	ldrh	r3, [r7, #2]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d101      	bne.n	8007a2c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e174      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d101      	bne.n	8007a3a <HAL_SPI_TransmitReceive+0x6e>
 8007a36:	2302      	movs	r3, #2
 8007a38:	e16d      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	2201      	movs	r2, #1
 8007a3e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	2b04      	cmp	r3, #4
 8007a4c:	d003      	beq.n	8007a56 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2205      	movs	r2, #5
 8007a52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	2200      	movs	r2, #0
 8007a5a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	887a      	ldrh	r2, [r7, #2]
 8007a66:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	887a      	ldrh	r2, [r7, #2]
 8007a6c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	68ba      	ldr	r2, [r7, #8]
 8007a72:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	887a      	ldrh	r2, [r7, #2]
 8007a78:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	887a      	ldrh	r2, [r7, #2]
 8007a7e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	2200      	movs	r2, #0
 8007a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a96:	2b40      	cmp	r3, #64	@ 0x40
 8007a98:	d007      	beq.n	8007aaa <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	681a      	ldr	r2, [r3, #0]
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007aa8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007ab2:	d17e      	bne.n	8007bb2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	685b      	ldr	r3, [r3, #4]
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d002      	beq.n	8007ac2 <HAL_SPI_TransmitReceive+0xf6>
 8007abc:	8afb      	ldrh	r3, [r7, #22]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d16c      	bne.n	8007b9c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac6:	881a      	ldrh	r2, [r3, #0]
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ad2:	1c9a      	adds	r2, r3, #2
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007adc:	b29b      	uxth	r3, r3
 8007ade:	3b01      	subs	r3, #1
 8007ae0:	b29a      	uxth	r2, r3
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ae6:	e059      	b.n	8007b9c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	f003 0302 	and.w	r3, r3, #2
 8007af2:	2b02      	cmp	r3, #2
 8007af4:	d11b      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x162>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007afa:	b29b      	uxth	r3, r3
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d016      	beq.n	8007b2e <HAL_SPI_TransmitReceive+0x162>
 8007b00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	d113      	bne.n	8007b2e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b0a:	881a      	ldrh	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b16:	1c9a      	adds	r2, r3, #2
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b20:	b29b      	uxth	r3, r3
 8007b22:	3b01      	subs	r3, #1
 8007b24:	b29a      	uxth	r2, r3
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b01      	cmp	r3, #1
 8007b3a:	d119      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x1a4>
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d014      	beq.n	8007b70 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b50:	b292      	uxth	r2, r2
 8007b52:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b58:	1c9a      	adds	r2, r3, #2
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b62:	b29b      	uxth	r3, r3
 8007b64:	3b01      	subs	r3, #1
 8007b66:	b29a      	uxth	r2, r3
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b6c:	2301      	movs	r3, #1
 8007b6e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007b70:	f7fc ff3a 	bl	80049e8 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6a3b      	ldr	r3, [r7, #32]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b7c:	429a      	cmp	r2, r3
 8007b7e:	d80d      	bhi.n	8007b9c <HAL_SPI_TransmitReceive+0x1d0>
 8007b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b82:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b86:	d009      	beq.n	8007b9c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2200      	movs	r2, #0
 8007b94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b98:	2303      	movs	r3, #3
 8007b9a:	e0bc      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d1a0      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x11c>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d19b      	bne.n	8007ae8 <HAL_SPI_TransmitReceive+0x11c>
 8007bb0:	e082      	b.n	8007cb8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007bb2:	68fb      	ldr	r3, [r7, #12]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d002      	beq.n	8007bc0 <HAL_SPI_TransmitReceive+0x1f4>
 8007bba:	8afb      	ldrh	r3, [r7, #22]
 8007bbc:	2b01      	cmp	r3, #1
 8007bbe:	d171      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	7812      	ldrb	r2, [r2, #0]
 8007bcc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bd2:	1c5a      	adds	r2, r3, #1
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bdc:	b29b      	uxth	r3, r3
 8007bde:	3b01      	subs	r3, #1
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007be6:	e05d      	b.n	8007ca4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	689b      	ldr	r3, [r3, #8]
 8007bee:	f003 0302 	and.w	r3, r3, #2
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	d11c      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x264>
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007bfa:	b29b      	uxth	r3, r3
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d017      	beq.n	8007c30 <HAL_SPI_TransmitReceive+0x264>
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	2b01      	cmp	r3, #1
 8007c04:	d114      	bne.n	8007c30 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	330c      	adds	r3, #12
 8007c10:	7812      	ldrb	r2, [r2, #0]
 8007c12:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c18:	1c5a      	adds	r2, r3, #1
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c22:	b29b      	uxth	r3, r3
 8007c24:	3b01      	subs	r3, #1
 8007c26:	b29a      	uxth	r2, r3
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	689b      	ldr	r3, [r3, #8]
 8007c36:	f003 0301 	and.w	r3, r3, #1
 8007c3a:	2b01      	cmp	r3, #1
 8007c3c:	d119      	bne.n	8007c72 <HAL_SPI_TransmitReceive+0x2a6>
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c42:	b29b      	uxth	r3, r3
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d014      	beq.n	8007c72 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	68da      	ldr	r2, [r3, #12]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007c72:	f7fc feb9 	bl	80049e8 <HAL_GetTick>
 8007c76:	4602      	mov	r2, r0
 8007c78:	6a3b      	ldr	r3, [r7, #32]
 8007c7a:	1ad3      	subs	r3, r2, r3
 8007c7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c7e:	429a      	cmp	r2, r3
 8007c80:	d803      	bhi.n	8007c8a <HAL_SPI_TransmitReceive+0x2be>
 8007c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c84:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007c88:	d102      	bne.n	8007c90 <HAL_SPI_TransmitReceive+0x2c4>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d109      	bne.n	8007ca4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e038      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ca8:	b29b      	uxth	r3, r3
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d19c      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x21c>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cb2:	b29b      	uxth	r3, r3
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d197      	bne.n	8007be8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007cb8:	6a3a      	ldr	r2, [r7, #32]
 8007cba:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007cbc:	68f8      	ldr	r0, [r7, #12]
 8007cbe:	f000 fa65 	bl	800818c <SPI_EndRxTxTransaction>
 8007cc2:	4603      	mov	r3, r0
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d008      	beq.n	8007cda <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e01d      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d10a      	bne.n	8007cf8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007ce2:	2300      	movs	r3, #0
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	613b      	str	r3, [r7, #16]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	613b      	str	r3, [r7, #16]
 8007cf6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d001      	beq.n	8007d14 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007d10:	2301      	movs	r3, #1
 8007d12:	e000      	b.n	8007d16 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007d14:	2300      	movs	r3, #0
  }
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3728      	adds	r7, #40	@ 0x28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b084      	sub	sp, #16
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b01      	cmp	r3, #1
 8007d38:	d001      	beq.n	8007d3e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007d3a:	2302      	movs	r3, #2
 8007d3c:	e097      	b.n	8007e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007d3e:	68bb      	ldr	r3, [r7, #8]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d002      	beq.n	8007d4a <HAL_SPI_Transmit_DMA+0x2a>
 8007d44:	88fb      	ldrh	r3, [r7, #6]
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	d101      	bne.n	8007d4e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007d4a:	2301      	movs	r3, #1
 8007d4c:	e08f      	b.n	8007e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d101      	bne.n	8007d5c <HAL_SPI_Transmit_DMA+0x3c>
 8007d58:	2302      	movs	r3, #2
 8007d5a:	e088      	b.n	8007e6e <HAL_SPI_Transmit_DMA+0x14e>
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	2201      	movs	r2, #1
 8007d60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2203      	movs	r2, #3
 8007d68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	68ba      	ldr	r2, [r7, #8]
 8007d76:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	88fa      	ldrh	r2, [r7, #6]
 8007d7c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	88fa      	ldrh	r2, [r7, #6]
 8007d82:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2200      	movs	r2, #0
 8007d88:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	2200      	movs	r2, #0
 8007d9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2200      	movs	r2, #0
 8007da0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007daa:	d10f      	bne.n	8007dcc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	681a      	ldr	r2, [r3, #0]
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007dba:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007dca:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd0:	4a29      	ldr	r2, [pc, #164]	@ (8007e78 <HAL_SPI_Transmit_DMA+0x158>)
 8007dd2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007dd8:	4a28      	ldr	r2, [pc, #160]	@ (8007e7c <HAL_SPI_Transmit_DMA+0x15c>)
 8007dda:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de0:	4a27      	ldr	r2, [pc, #156]	@ (8007e80 <HAL_SPI_Transmit_DMA+0x160>)
 8007de2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007de8:	2200      	movs	r2, #0
 8007dea:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007df4:	4619      	mov	r1, r3
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	330c      	adds	r3, #12
 8007dfc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007dfe:	68fb      	ldr	r3, [r7, #12]
 8007e00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007e02:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007e04:	f7fc ffe0 	bl	8004dc8 <HAL_DMA_Start_IT>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d00b      	beq.n	8007e26 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e12:	f043 0210 	orr.w	r2, r3, #16
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e023      	b.n	8007e6e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007e30:	2b40      	cmp	r3, #64	@ 0x40
 8007e32:	d007      	beq.n	8007e44 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	681a      	ldr	r2, [r3, #0]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007e42:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	685a      	ldr	r2, [r3, #4]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f042 0220 	orr.w	r2, r2, #32
 8007e5a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685a      	ldr	r2, [r3, #4]
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	f042 0202 	orr.w	r2, r2, #2
 8007e6a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	08007f55 	.word	0x08007f55
 8007e7c:	08007ead 	.word	0x08007ead
 8007e80:	08007f71 	.word	0x08007f71

08007e84 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007e84:	b480      	push	{r7}
 8007e86:	b083      	sub	sp, #12
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007e8c:	bf00      	nop
 8007e8e:	370c      	adds	r7, #12
 8007e90:	46bd      	mov	sp, r7
 8007e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e96:	4770      	bx	lr

08007e98 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b086      	sub	sp, #24
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007eb8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007eba:	f7fc fd95 	bl	80049e8 <HAL_GetTick>
 8007ebe:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007ece:	d03b      	beq.n	8007f48 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007ed0:	697b      	ldr	r3, [r7, #20]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	685a      	ldr	r2, [r3, #4]
 8007ed6:	697b      	ldr	r3, [r7, #20]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	f022 0220 	bic.w	r2, r2, #32
 8007ede:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	685a      	ldr	r2, [r3, #4]
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f022 0202 	bic.w	r2, r2, #2
 8007eee:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	2164      	movs	r1, #100	@ 0x64
 8007ef4:	6978      	ldr	r0, [r7, #20]
 8007ef6:	f000 f949 	bl	800818c <SPI_EndRxTxTransaction>
 8007efa:	4603      	mov	r3, r0
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d005      	beq.n	8007f0c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f04:	f043 0220 	orr.w	r2, r3, #32
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007f14:	2300      	movs	r3, #0
 8007f16:	60fb      	str	r3, [r7, #12]
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	68db      	ldr	r3, [r3, #12]
 8007f1e:	60fb      	str	r3, [r7, #12]
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	689b      	ldr	r3, [r3, #8]
 8007f26:	60fb      	str	r3, [r7, #12]
 8007f28:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	2201      	movs	r2, #1
 8007f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007f38:	697b      	ldr	r3, [r7, #20]
 8007f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d003      	beq.n	8007f48 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007f40:	6978      	ldr	r0, [r7, #20]
 8007f42:	f7ff ffa9 	bl	8007e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007f46:	e002      	b.n	8007f4e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007f48:	6978      	ldr	r0, [r7, #20]
 8007f4a:	f7fa fa81 	bl	8002450 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f4e:	3718      	adds	r7, #24
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f60:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007f62:	68f8      	ldr	r0, [r7, #12]
 8007f64:	f7ff ff8e 	bl	8007e84 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007f68:	bf00      	nop
 8007f6a:	3710      	adds	r7, #16
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f7c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007f7e:	68fb      	ldr	r3, [r7, #12]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	685a      	ldr	r2, [r3, #4]
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f022 0203 	bic.w	r2, r2, #3
 8007f8c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f92:	f043 0210 	orr.w	r2, r3, #16
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	2201      	movs	r2, #1
 8007f9e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007fa2:	68f8      	ldr	r0, [r7, #12]
 8007fa4:	f7ff ff78 	bl	8007e98 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007fa8:	bf00      	nop
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b088      	sub	sp, #32
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	60b9      	str	r1, [r7, #8]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007fc0:	f7fc fd12 	bl	80049e8 <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc8:	1a9b      	subs	r3, r3, r2
 8007fca:	683a      	ldr	r2, [r7, #0]
 8007fcc:	4413      	add	r3, r2
 8007fce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007fd0:	f7fc fd0a 	bl	80049e8 <HAL_GetTick>
 8007fd4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007fd6:	4b39      	ldr	r3, [pc, #228]	@ (80080bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	015b      	lsls	r3, r3, #5
 8007fdc:	0d1b      	lsrs	r3, r3, #20
 8007fde:	69fa      	ldr	r2, [r7, #28]
 8007fe0:	fb02 f303 	mul.w	r3, r2, r3
 8007fe4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007fe6:	e054      	b.n	8008092 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fee:	d050      	beq.n	8008092 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ff0:	f7fc fcfa 	bl	80049e8 <HAL_GetTick>
 8007ff4:	4602      	mov	r2, r0
 8007ff6:	69bb      	ldr	r3, [r7, #24]
 8007ff8:	1ad3      	subs	r3, r2, r3
 8007ffa:	69fa      	ldr	r2, [r7, #28]
 8007ffc:	429a      	cmp	r2, r3
 8007ffe:	d902      	bls.n	8008006 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008000:	69fb      	ldr	r3, [r7, #28]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d13d      	bne.n	8008082 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008014:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800801e:	d111      	bne.n	8008044 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008028:	d004      	beq.n	8008034 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008032:	d107      	bne.n	8008044 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008042:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008048:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800804c:	d10f      	bne.n	800806e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	681a      	ldr	r2, [r3, #0]
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800805c:	601a      	str	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800806c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2201      	movs	r2, #1
 8008072:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	2200      	movs	r2, #0
 800807a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800807e:	2303      	movs	r3, #3
 8008080:	e017      	b.n	80080b2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d101      	bne.n	800808c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8008088:	2300      	movs	r3, #0
 800808a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800808c:	697b      	ldr	r3, [r7, #20]
 800808e:	3b01      	subs	r3, #1
 8008090:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	689a      	ldr	r2, [r3, #8]
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	4013      	ands	r3, r2
 800809c:	68ba      	ldr	r2, [r7, #8]
 800809e:	429a      	cmp	r2, r3
 80080a0:	bf0c      	ite	eq
 80080a2:	2301      	moveq	r3, #1
 80080a4:	2300      	movne	r3, #0
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	461a      	mov	r2, r3
 80080aa:	79fb      	ldrb	r3, [r7, #7]
 80080ac:	429a      	cmp	r2, r3
 80080ae:	d19b      	bne.n	8007fe8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3720      	adds	r7, #32
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20000004 	.word	0x20000004

080080c0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80080c0:	b580      	push	{r7, lr}
 80080c2:	b086      	sub	sp, #24
 80080c4:	af02      	add	r7, sp, #8
 80080c6:	60f8      	str	r0, [r7, #12]
 80080c8:	60b9      	str	r1, [r7, #8]
 80080ca:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	685b      	ldr	r3, [r3, #4]
 80080d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080d4:	d111      	bne.n	80080fa <SPI_EndRxTransaction+0x3a>
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	689b      	ldr	r3, [r3, #8]
 80080da:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80080de:	d004      	beq.n	80080ea <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	689b      	ldr	r3, [r3, #8]
 80080e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e8:	d107      	bne.n	80080fa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681a      	ldr	r2, [r3, #0]
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80080f8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8008102:	d12a      	bne.n	800815a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	689b      	ldr	r3, [r3, #8]
 8008108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800810c:	d012      	beq.n	8008134 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	9300      	str	r3, [sp, #0]
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	2200      	movs	r2, #0
 8008116:	2180      	movs	r1, #128	@ 0x80
 8008118:	68f8      	ldr	r0, [r7, #12]
 800811a:	f7ff ff49 	bl	8007fb0 <SPI_WaitFlagStateUntilTimeout>
 800811e:	4603      	mov	r3, r0
 8008120:	2b00      	cmp	r3, #0
 8008122:	d02d      	beq.n	8008180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008128:	f043 0220 	orr.w	r2, r3, #32
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008130:	2303      	movs	r3, #3
 8008132:	e026      	b.n	8008182 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	68bb      	ldr	r3, [r7, #8]
 800813a:	2200      	movs	r2, #0
 800813c:	2101      	movs	r1, #1
 800813e:	68f8      	ldr	r0, [r7, #12]
 8008140:	f7ff ff36 	bl	8007fb0 <SPI_WaitFlagStateUntilTimeout>
 8008144:	4603      	mov	r3, r0
 8008146:	2b00      	cmp	r3, #0
 8008148:	d01a      	beq.n	8008180 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800814e:	f043 0220 	orr.w	r2, r3, #32
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008156:	2303      	movs	r3, #3
 8008158:	e013      	b.n	8008182 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	2200      	movs	r2, #0
 8008162:	2101      	movs	r1, #1
 8008164:	68f8      	ldr	r0, [r7, #12]
 8008166:	f7ff ff23 	bl	8007fb0 <SPI_WaitFlagStateUntilTimeout>
 800816a:	4603      	mov	r3, r0
 800816c:	2b00      	cmp	r3, #0
 800816e:	d007      	beq.n	8008180 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008174:	f043 0220 	orr.w	r2, r3, #32
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800817c:	2303      	movs	r3, #3
 800817e:	e000      	b.n	8008182 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
	...

0800818c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af02      	add	r7, sp, #8
 8008192:	60f8      	str	r0, [r7, #12]
 8008194:	60b9      	str	r1, [r7, #8]
 8008196:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	9300      	str	r3, [sp, #0]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	2201      	movs	r2, #1
 80081a0:	2102      	movs	r1, #2
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f7ff ff04 	bl	8007fb0 <SPI_WaitFlagStateUntilTimeout>
 80081a8:	4603      	mov	r3, r0
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d007      	beq.n	80081be <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081b2:	f043 0220 	orr.w	r2, r3, #32
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80081ba:	2303      	movs	r3, #3
 80081bc:	e032      	b.n	8008224 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80081be:	4b1b      	ldr	r3, [pc, #108]	@ (800822c <SPI_EndRxTxTransaction+0xa0>)
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4a1b      	ldr	r2, [pc, #108]	@ (8008230 <SPI_EndRxTxTransaction+0xa4>)
 80081c4:	fba2 2303 	umull	r2, r3, r2, r3
 80081c8:	0d5b      	lsrs	r3, r3, #21
 80081ca:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80081ce:	fb02 f303 	mul.w	r3, r2, r3
 80081d2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80081dc:	d112      	bne.n	8008204 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	68bb      	ldr	r3, [r7, #8]
 80081e4:	2200      	movs	r2, #0
 80081e6:	2180      	movs	r1, #128	@ 0x80
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff fee1 	bl	8007fb0 <SPI_WaitFlagStateUntilTimeout>
 80081ee:	4603      	mov	r3, r0
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d016      	beq.n	8008222 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80081f8:	f043 0220 	orr.w	r2, r3, #32
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8008200:	2303      	movs	r3, #3
 8008202:	e00f      	b.n	8008224 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8008204:	697b      	ldr	r3, [r7, #20]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d00a      	beq.n	8008220 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800820a:	697b      	ldr	r3, [r7, #20]
 800820c:	3b01      	subs	r3, #1
 800820e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	689b      	ldr	r3, [r3, #8]
 8008216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800821a:	2b80      	cmp	r3, #128	@ 0x80
 800821c:	d0f2      	beq.n	8008204 <SPI_EndRxTxTransaction+0x78>
 800821e:	e000      	b.n	8008222 <SPI_EndRxTxTransaction+0x96>
        break;
 8008220:	bf00      	nop
  }

  return HAL_OK;
 8008222:	2300      	movs	r3, #0
}
 8008224:	4618      	mov	r0, r3
 8008226:	3718      	adds	r7, #24
 8008228:	46bd      	mov	sp, r7
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20000004 	.word	0x20000004
 8008230:	165e9f81 	.word	0x165e9f81

08008234 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d101      	bne.n	8008246 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e041      	b.n	80082ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800824c:	b2db      	uxtb	r3, r3
 800824e:	2b00      	cmp	r3, #0
 8008250:	d106      	bne.n	8008260 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f7fa f830 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	2202      	movs	r2, #2
 8008264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681a      	ldr	r2, [r3, #0]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	3304      	adds	r3, #4
 8008270:	4619      	mov	r1, r3
 8008272:	4610      	mov	r0, r2
 8008274:	f000 fd6a 	bl	8008d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	2201      	movs	r2, #1
 800827c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2201      	movs	r2, #1
 8008284:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	2201      	movs	r2, #1
 800828c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2201      	movs	r2, #1
 8008294:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	2201      	movs	r2, #1
 800829c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2201      	movs	r2, #1
 80082a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2201      	movs	r2, #1
 80082ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2201      	movs	r2, #1
 80082b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2201      	movs	r2, #1
 80082bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2201      	movs	r2, #1
 80082c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}

080082d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80082d2:	b580      	push	{r7, lr}
 80082d4:	b082      	sub	sp, #8
 80082d6:	af00      	add	r7, sp, #0
 80082d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d101      	bne.n	80082e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80082e0:	2301      	movs	r3, #1
 80082e2:	e041      	b.n	8008368 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d106      	bne.n	80082fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f000 f839 	bl	8008370 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	2202      	movs	r2, #2
 8008302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681a      	ldr	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	3304      	adds	r3, #4
 800830e:	4619      	mov	r1, r3
 8008310:	4610      	mov	r0, r2
 8008312:	f000 fd1b 	bl	8008d4c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2201      	movs	r2, #1
 800831a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2201      	movs	r2, #1
 8008322:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2201      	movs	r2, #1
 800832a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2201      	movs	r2, #1
 800833a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2201      	movs	r2, #1
 800834a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	2201      	movs	r2, #1
 8008352:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2201      	movs	r2, #1
 800835a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2201      	movs	r2, #1
 8008362:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008366:	2300      	movs	r3, #0
}
 8008368:	4618      	mov	r0, r3
 800836a:	3708      	adds	r7, #8
 800836c:	46bd      	mov	sp, r7
 800836e:	bd80      	pop	{r7, pc}

08008370 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008370:	b480      	push	{r7}
 8008372:	b083      	sub	sp, #12
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008378:	bf00      	nop
 800837a:	370c      	adds	r7, #12
 800837c:	46bd      	mov	sp, r7
 800837e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008382:	4770      	bx	lr

08008384 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008384:	b580      	push	{r7, lr}
 8008386:	b086      	sub	sp, #24
 8008388:	af00      	add	r7, sp, #0
 800838a:	60f8      	str	r0, [r7, #12]
 800838c:	60b9      	str	r1, [r7, #8]
 800838e:	607a      	str	r2, [r7, #4]
 8008390:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d109      	bne.n	80083b0 <HAL_TIM_PWM_Start_DMA+0x2c>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80083a2:	b2db      	uxtb	r3, r3
 80083a4:	2b02      	cmp	r3, #2
 80083a6:	bf0c      	ite	eq
 80083a8:	2301      	moveq	r3, #1
 80083aa:	2300      	movne	r3, #0
 80083ac:	b2db      	uxtb	r3, r3
 80083ae:	e022      	b.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80083b0:	68bb      	ldr	r3, [r7, #8]
 80083b2:	2b04      	cmp	r3, #4
 80083b4:	d109      	bne.n	80083ca <HAL_TIM_PWM_Start_DMA+0x46>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80083bc:	b2db      	uxtb	r3, r3
 80083be:	2b02      	cmp	r3, #2
 80083c0:	bf0c      	ite	eq
 80083c2:	2301      	moveq	r3, #1
 80083c4:	2300      	movne	r3, #0
 80083c6:	b2db      	uxtb	r3, r3
 80083c8:	e015      	b.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	2b08      	cmp	r3, #8
 80083ce:	d109      	bne.n	80083e4 <HAL_TIM_PWM_Start_DMA+0x60>
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80083d6:	b2db      	uxtb	r3, r3
 80083d8:	2b02      	cmp	r3, #2
 80083da:	bf0c      	ite	eq
 80083dc:	2301      	moveq	r3, #1
 80083de:	2300      	movne	r3, #0
 80083e0:	b2db      	uxtb	r3, r3
 80083e2:	e008      	b.n	80083f6 <HAL_TIM_PWM_Start_DMA+0x72>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083ea:	b2db      	uxtb	r3, r3
 80083ec:	2b02      	cmp	r3, #2
 80083ee:	bf0c      	ite	eq
 80083f0:	2301      	moveq	r3, #1
 80083f2:	2300      	movne	r3, #0
 80083f4:	b2db      	uxtb	r3, r3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d001      	beq.n	80083fe <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80083fa:	2302      	movs	r3, #2
 80083fc:	e15d      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d109      	bne.n	8008418 <HAL_TIM_PWM_Start_DMA+0x94>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800840a:	b2db      	uxtb	r3, r3
 800840c:	2b01      	cmp	r3, #1
 800840e:	bf0c      	ite	eq
 8008410:	2301      	moveq	r3, #1
 8008412:	2300      	movne	r3, #0
 8008414:	b2db      	uxtb	r3, r3
 8008416:	e022      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0xda>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	2b04      	cmp	r3, #4
 800841c:	d109      	bne.n	8008432 <HAL_TIM_PWM_Start_DMA+0xae>
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008424:	b2db      	uxtb	r3, r3
 8008426:	2b01      	cmp	r3, #1
 8008428:	bf0c      	ite	eq
 800842a:	2301      	moveq	r3, #1
 800842c:	2300      	movne	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e015      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0xda>
 8008432:	68bb      	ldr	r3, [r7, #8]
 8008434:	2b08      	cmp	r3, #8
 8008436:	d109      	bne.n	800844c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800843e:	b2db      	uxtb	r3, r3
 8008440:	2b01      	cmp	r3, #1
 8008442:	bf0c      	ite	eq
 8008444:	2301      	moveq	r3, #1
 8008446:	2300      	movne	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	e008      	b.n	800845e <HAL_TIM_PWM_Start_DMA+0xda>
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008452:	b2db      	uxtb	r3, r3
 8008454:	2b01      	cmp	r3, #1
 8008456:	bf0c      	ite	eq
 8008458:	2301      	moveq	r3, #1
 800845a:	2300      	movne	r3, #0
 800845c:	b2db      	uxtb	r3, r3
 800845e:	2b00      	cmp	r3, #0
 8008460:	d024      	beq.n	80084ac <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d002      	beq.n	800846e <HAL_TIM_PWM_Start_DMA+0xea>
 8008468:	887b      	ldrh	r3, [r7, #2]
 800846a:	2b00      	cmp	r3, #0
 800846c:	d101      	bne.n	8008472 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800846e:	2301      	movs	r3, #1
 8008470:	e123      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	2b00      	cmp	r3, #0
 8008476:	d104      	bne.n	8008482 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008478:	68fb      	ldr	r3, [r7, #12]
 800847a:	2202      	movs	r2, #2
 800847c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008480:	e016      	b.n	80084b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008482:	68bb      	ldr	r3, [r7, #8]
 8008484:	2b04      	cmp	r3, #4
 8008486:	d104      	bne.n	8008492 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	2202      	movs	r2, #2
 800848c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008490:	e00e      	b.n	80084b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	2b08      	cmp	r3, #8
 8008496:	d104      	bne.n	80084a2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	2202      	movs	r2, #2
 800849c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80084a0:	e006      	b.n	80084b0 <HAL_TIM_PWM_Start_DMA+0x12c>
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2202      	movs	r2, #2
 80084a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80084aa:	e001      	b.n	80084b0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 80084ac:	2301      	movs	r3, #1
 80084ae:	e104      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	2b0c      	cmp	r3, #12
 80084b4:	f200 80ae 	bhi.w	8008614 <HAL_TIM_PWM_Start_DMA+0x290>
 80084b8:	a201      	add	r2, pc, #4	@ (adr r2, 80084c0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 80084ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084be:	bf00      	nop
 80084c0:	080084f5 	.word	0x080084f5
 80084c4:	08008615 	.word	0x08008615
 80084c8:	08008615 	.word	0x08008615
 80084cc:	08008615 	.word	0x08008615
 80084d0:	0800853d 	.word	0x0800853d
 80084d4:	08008615 	.word	0x08008615
 80084d8:	08008615 	.word	0x08008615
 80084dc:	08008615 	.word	0x08008615
 80084e0:	08008585 	.word	0x08008585
 80084e4:	08008615 	.word	0x08008615
 80084e8:	08008615 	.word	0x08008615
 80084ec:	08008615 	.word	0x08008615
 80084f0:	080085cd 	.word	0x080085cd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084f4:	68fb      	ldr	r3, [r7, #12]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084f8:	4a72      	ldr	r2, [pc, #456]	@ (80086c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80084fa:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008500:	4a71      	ldr	r2, [pc, #452]	@ (80086c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008502:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008508:	4a70      	ldr	r2, [pc, #448]	@ (80086cc <HAL_TIM_PWM_Start_DMA+0x348>)
 800850a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8008510:	6879      	ldr	r1, [r7, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	3334      	adds	r3, #52	@ 0x34
 8008518:	461a      	mov	r2, r3
 800851a:	887b      	ldrh	r3, [r7, #2]
 800851c:	f7fc fc54 	bl	8004dc8 <HAL_DMA_Start_IT>
 8008520:	4603      	mov	r3, r0
 8008522:	2b00      	cmp	r3, #0
 8008524:	d001      	beq.n	800852a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e0c7      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	68da      	ldr	r2, [r3, #12]
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008538:	60da      	str	r2, [r3, #12]
      break;
 800853a:	e06e      	b.n	800861a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008540:	4a60      	ldr	r2, [pc, #384]	@ (80086c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008542:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008548:	4a5f      	ldr	r2, [pc, #380]	@ (80086c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800854a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008550:	4a5e      	ldr	r2, [pc, #376]	@ (80086cc <HAL_TIM_PWM_Start_DMA+0x348>)
 8008552:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008558:	6879      	ldr	r1, [r7, #4]
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	3338      	adds	r3, #56	@ 0x38
 8008560:	461a      	mov	r2, r3
 8008562:	887b      	ldrh	r3, [r7, #2]
 8008564:	f7fc fc30 	bl	8004dc8 <HAL_DMA_Start_IT>
 8008568:	4603      	mov	r3, r0
 800856a:	2b00      	cmp	r3, #0
 800856c:	d001      	beq.n	8008572 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800856e:	2301      	movs	r3, #1
 8008570:	e0a3      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	68da      	ldr	r2, [r3, #12]
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008580:	60da      	str	r2, [r3, #12]
      break;
 8008582:	e04a      	b.n	800861a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008588:	4a4e      	ldr	r2, [pc, #312]	@ (80086c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800858a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008590:	4a4d      	ldr	r2, [pc, #308]	@ (80086c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008592:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008598:	4a4c      	ldr	r2, [pc, #304]	@ (80086cc <HAL_TIM_PWM_Start_DMA+0x348>)
 800859a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 80085a0:	6879      	ldr	r1, [r7, #4]
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	333c      	adds	r3, #60	@ 0x3c
 80085a8:	461a      	mov	r2, r3
 80085aa:	887b      	ldrh	r3, [r7, #2]
 80085ac:	f7fc fc0c 	bl	8004dc8 <HAL_DMA_Start_IT>
 80085b0:	4603      	mov	r3, r0
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d001      	beq.n	80085ba <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	e07f      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68da      	ldr	r2, [r3, #12]
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80085c8:	60da      	str	r2, [r3, #12]
      break;
 80085ca:	e026      	b.n	800861a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d0:	4a3c      	ldr	r2, [pc, #240]	@ (80086c4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80085d2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085d8:	4a3b      	ldr	r2, [pc, #236]	@ (80086c8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80085da:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085e0:	4a3a      	ldr	r2, [pc, #232]	@ (80086cc <HAL_TIM_PWM_Start_DMA+0x348>)
 80085e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085e8:	6879      	ldr	r1, [r7, #4]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	3340      	adds	r3, #64	@ 0x40
 80085f0:	461a      	mov	r2, r3
 80085f2:	887b      	ldrh	r3, [r7, #2]
 80085f4:	f7fc fbe8 	bl	8004dc8 <HAL_DMA_Start_IT>
 80085f8:	4603      	mov	r3, r0
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d001      	beq.n	8008602 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80085fe:	2301      	movs	r3, #1
 8008600:	e05b      	b.n	80086ba <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	68da      	ldr	r2, [r3, #12]
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008610:	60da      	str	r2, [r3, #12]
      break;
 8008612:	e002      	b.n	800861a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	75fb      	strb	r3, [r7, #23]
      break;
 8008618:	bf00      	nop
  }

  if (status == HAL_OK)
 800861a:	7dfb      	ldrb	r3, [r7, #23]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d14b      	bne.n	80086b8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2201      	movs	r2, #1
 8008626:	68b9      	ldr	r1, [r7, #8]
 8008628:	4618      	mov	r0, r3
 800862a:	f000 fe41 	bl	80092b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	4a27      	ldr	r2, [pc, #156]	@ (80086d0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008634:	4293      	cmp	r3, r2
 8008636:	d107      	bne.n	8008648 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008646:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a20      	ldr	r2, [pc, #128]	@ (80086d0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d018      	beq.n	8008684 <HAL_TIM_PWM_Start_DMA+0x300>
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800865a:	d013      	beq.n	8008684 <HAL_TIM_PWM_Start_DMA+0x300>
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a1c      	ldr	r2, [pc, #112]	@ (80086d4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00e      	beq.n	8008684 <HAL_TIM_PWM_Start_DMA+0x300>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a1b      	ldr	r2, [pc, #108]	@ (80086d8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d009      	beq.n	8008684 <HAL_TIM_PWM_Start_DMA+0x300>
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a19      	ldr	r2, [pc, #100]	@ (80086dc <HAL_TIM_PWM_Start_DMA+0x358>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d004      	beq.n	8008684 <HAL_TIM_PWM_Start_DMA+0x300>
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	4a18      	ldr	r2, [pc, #96]	@ (80086e0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008680:	4293      	cmp	r3, r2
 8008682:	d111      	bne.n	80086a8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008684:	68fb      	ldr	r3, [r7, #12]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	f003 0307 	and.w	r3, r3, #7
 800868e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b06      	cmp	r3, #6
 8008694:	d010      	beq.n	80086b8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	f042 0201 	orr.w	r2, r2, #1
 80086a4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80086a6:	e007      	b.n	80086b8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	681a      	ldr	r2, [r3, #0]
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f042 0201 	orr.w	r2, r2, #1
 80086b6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80086b8:	7dfb      	ldrb	r3, [r7, #23]
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3718      	adds	r7, #24
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}
 80086c2:	bf00      	nop
 80086c4:	08008c3d 	.word	0x08008c3d
 80086c8:	08008ce5 	.word	0x08008ce5
 80086cc:	08008bab 	.word	0x08008bab
 80086d0:	40010000 	.word	0x40010000
 80086d4:	40000400 	.word	0x40000400
 80086d8:	40000800 	.word	0x40000800
 80086dc:	40000c00 	.word	0x40000c00
 80086e0:	40014000 	.word	0x40014000

080086e4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80086e4:	b580      	push	{r7, lr}
 80086e6:	b084      	sub	sp, #16
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
 80086ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80086ee:	2300      	movs	r3, #0
 80086f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	2b0c      	cmp	r3, #12
 80086f6:	d855      	bhi.n	80087a4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80086f8:	a201      	add	r2, pc, #4	@ (adr r2, 8008700 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80086fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086fe:	bf00      	nop
 8008700:	08008735 	.word	0x08008735
 8008704:	080087a5 	.word	0x080087a5
 8008708:	080087a5 	.word	0x080087a5
 800870c:	080087a5 	.word	0x080087a5
 8008710:	08008751 	.word	0x08008751
 8008714:	080087a5 	.word	0x080087a5
 8008718:	080087a5 	.word	0x080087a5
 800871c:	080087a5 	.word	0x080087a5
 8008720:	0800876d 	.word	0x0800876d
 8008724:	080087a5 	.word	0x080087a5
 8008728:	080087a5 	.word	0x080087a5
 800872c:	080087a5 	.word	0x080087a5
 8008730:	08008789 	.word	0x08008789
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	68da      	ldr	r2, [r3, #12]
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008742:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008748:	4618      	mov	r0, r3
 800874a:	f7fc fb95 	bl	8004e78 <HAL_DMA_Abort_IT>
      break;
 800874e:	e02c      	b.n	80087aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800875e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008764:	4618      	mov	r0, r3
 8008766:	f7fc fb87 	bl	8004e78 <HAL_DMA_Abort_IT>
      break;
 800876a:	e01e      	b.n	80087aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	68da      	ldr	r2, [r3, #12]
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800877a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008780:	4618      	mov	r0, r3
 8008782:	f7fc fb79 	bl	8004e78 <HAL_DMA_Abort_IT>
      break;
 8008786:	e010      	b.n	80087aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	68da      	ldr	r2, [r3, #12]
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008796:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800879c:	4618      	mov	r0, r3
 800879e:	f7fc fb6b 	bl	8004e78 <HAL_DMA_Abort_IT>
      break;
 80087a2:	e002      	b.n	80087aa <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80087a4:	2301      	movs	r3, #1
 80087a6:	73fb      	strb	r3, [r7, #15]
      break;
 80087a8:	bf00      	nop
  }

  if (status == HAL_OK)
 80087aa:	7bfb      	ldrb	r3, [r7, #15]
 80087ac:	2b00      	cmp	r3, #0
 80087ae:	d157      	bne.n	8008860 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	2200      	movs	r2, #0
 80087b6:	6839      	ldr	r1, [r7, #0]
 80087b8:	4618      	mov	r0, r3
 80087ba:	f000 fd79 	bl	80092b0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a2a      	ldr	r2, [pc, #168]	@ (800886c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d117      	bne.n	80087f8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	6a1a      	ldr	r2, [r3, #32]
 80087ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80087d2:	4013      	ands	r3, r2
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d10f      	bne.n	80087f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	6a1a      	ldr	r2, [r3, #32]
 80087de:	f240 4344 	movw	r3, #1092	@ 0x444
 80087e2:	4013      	ands	r3, r2
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d107      	bne.n	80087f8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80087f6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	6a1a      	ldr	r2, [r3, #32]
 80087fe:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008802:	4013      	ands	r3, r2
 8008804:	2b00      	cmp	r3, #0
 8008806:	d10f      	bne.n	8008828 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	6a1a      	ldr	r2, [r3, #32]
 800880e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008812:	4013      	ands	r3, r2
 8008814:	2b00      	cmp	r3, #0
 8008816:	d107      	bne.n	8008828 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	681a      	ldr	r2, [r3, #0]
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	f022 0201 	bic.w	r2, r2, #1
 8008826:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008828:	683b      	ldr	r3, [r7, #0]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d104      	bne.n	8008838 <HAL_TIM_PWM_Stop_DMA+0x154>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008836:	e013      	b.n	8008860 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	2b04      	cmp	r3, #4
 800883c:	d104      	bne.n	8008848 <HAL_TIM_PWM_Stop_DMA+0x164>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	2201      	movs	r2, #1
 8008842:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008846:	e00b      	b.n	8008860 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	2b08      	cmp	r3, #8
 800884c:	d104      	bne.n	8008858 <HAL_TIM_PWM_Stop_DMA+0x174>
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	2201      	movs	r2, #1
 8008852:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008856:	e003      	b.n	8008860 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	2201      	movs	r2, #1
 800885c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008860:	7bfb      	ldrb	r3, [r7, #15]
}
 8008862:	4618      	mov	r0, r3
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	40010000 	.word	0x40010000

08008870 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800887c:	2300      	movs	r3, #0
 800887e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008886:	2b01      	cmp	r3, #1
 8008888:	d101      	bne.n	800888e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800888a:	2302      	movs	r3, #2
 800888c:	e0ae      	b.n	80089ec <HAL_TIM_PWM_ConfigChannel+0x17c>
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2201      	movs	r2, #1
 8008892:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	2b0c      	cmp	r3, #12
 800889a:	f200 809f 	bhi.w	80089dc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800889e:	a201      	add	r2, pc, #4	@ (adr r2, 80088a4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80088a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a4:	080088d9 	.word	0x080088d9
 80088a8:	080089dd 	.word	0x080089dd
 80088ac:	080089dd 	.word	0x080089dd
 80088b0:	080089dd 	.word	0x080089dd
 80088b4:	08008919 	.word	0x08008919
 80088b8:	080089dd 	.word	0x080089dd
 80088bc:	080089dd 	.word	0x080089dd
 80088c0:	080089dd 	.word	0x080089dd
 80088c4:	0800895b 	.word	0x0800895b
 80088c8:	080089dd 	.word	0x080089dd
 80088cc:	080089dd 	.word	0x080089dd
 80088d0:	080089dd 	.word	0x080089dd
 80088d4:	0800899b 	.word	0x0800899b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	68b9      	ldr	r1, [r7, #8]
 80088de:	4618      	mov	r0, r3
 80088e0:	f000 fac0 	bl	8008e64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	699a      	ldr	r2, [r3, #24]
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f042 0208 	orr.w	r2, r2, #8
 80088f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	699a      	ldr	r2, [r3, #24]
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f022 0204 	bic.w	r2, r2, #4
 8008902:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	6999      	ldr	r1, [r3, #24]
 800890a:	68bb      	ldr	r3, [r7, #8]
 800890c:	691a      	ldr	r2, [r3, #16]
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	430a      	orrs	r2, r1
 8008914:	619a      	str	r2, [r3, #24]
      break;
 8008916:	e064      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68b9      	ldr	r1, [r7, #8]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fb06 	bl	8008f30 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	699a      	ldr	r2, [r3, #24]
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008932:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	699a      	ldr	r2, [r3, #24]
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008942:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	6999      	ldr	r1, [r3, #24]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	691b      	ldr	r3, [r3, #16]
 800894e:	021a      	lsls	r2, r3, #8
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	430a      	orrs	r2, r1
 8008956:	619a      	str	r2, [r3, #24]
      break;
 8008958:	e043      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	68b9      	ldr	r1, [r7, #8]
 8008960:	4618      	mov	r0, r3
 8008962:	f000 fb51 	bl	8009008 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	69da      	ldr	r2, [r3, #28]
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	f042 0208 	orr.w	r2, r2, #8
 8008974:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	69da      	ldr	r2, [r3, #28]
 800897c:	68fb      	ldr	r3, [r7, #12]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f022 0204 	bic.w	r2, r2, #4
 8008984:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	69d9      	ldr	r1, [r3, #28]
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	691a      	ldr	r2, [r3, #16]
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	430a      	orrs	r2, r1
 8008996:	61da      	str	r2, [r3, #28]
      break;
 8008998:	e023      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800899a:	68fb      	ldr	r3, [r7, #12]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	68b9      	ldr	r1, [r7, #8]
 80089a0:	4618      	mov	r0, r3
 80089a2:	f000 fb9b 	bl	80090dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	69da      	ldr	r2, [r3, #28]
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80089b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	69da      	ldr	r2, [r3, #28]
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80089c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	69d9      	ldr	r1, [r3, #28]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	021a      	lsls	r2, r3, #8
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	430a      	orrs	r2, r1
 80089d8:	61da      	str	r2, [r3, #28]
      break;
 80089da:	e002      	b.n	80089e2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80089dc:	2301      	movs	r3, #1
 80089de:	75fb      	strb	r3, [r7, #23]
      break;
 80089e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80089ea:	7dfb      	ldrb	r3, [r7, #23]
}
 80089ec:	4618      	mov	r0, r3
 80089ee:	3718      	adds	r7, #24
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bd80      	pop	{r7, pc}

080089f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80089f4:	b580      	push	{r7, lr}
 80089f6:	b084      	sub	sp, #16
 80089f8:	af00      	add	r7, sp, #0
 80089fa:	6078      	str	r0, [r7, #4]
 80089fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80089fe:	2300      	movs	r3, #0
 8008a00:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d101      	bne.n	8008a10 <HAL_TIM_ConfigClockSource+0x1c>
 8008a0c:	2302      	movs	r3, #2
 8008a0e:	e0b4      	b.n	8008b7a <HAL_TIM_ConfigClockSource+0x186>
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2201      	movs	r2, #1
 8008a14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2202      	movs	r2, #2
 8008a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008a28:	68bb      	ldr	r3, [r7, #8]
 8008a2a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8008a2e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008a36:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	68ba      	ldr	r2, [r7, #8]
 8008a3e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008a40:	683b      	ldr	r3, [r7, #0]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a48:	d03e      	beq.n	8008ac8 <HAL_TIM_ConfigClockSource+0xd4>
 8008a4a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008a4e:	f200 8087 	bhi.w	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a52:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a56:	f000 8086 	beq.w	8008b66 <HAL_TIM_ConfigClockSource+0x172>
 8008a5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a5e:	d87f      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a60:	2b70      	cmp	r3, #112	@ 0x70
 8008a62:	d01a      	beq.n	8008a9a <HAL_TIM_ConfigClockSource+0xa6>
 8008a64:	2b70      	cmp	r3, #112	@ 0x70
 8008a66:	d87b      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a68:	2b60      	cmp	r3, #96	@ 0x60
 8008a6a:	d050      	beq.n	8008b0e <HAL_TIM_ConfigClockSource+0x11a>
 8008a6c:	2b60      	cmp	r3, #96	@ 0x60
 8008a6e:	d877      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a70:	2b50      	cmp	r3, #80	@ 0x50
 8008a72:	d03c      	beq.n	8008aee <HAL_TIM_ConfigClockSource+0xfa>
 8008a74:	2b50      	cmp	r3, #80	@ 0x50
 8008a76:	d873      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a78:	2b40      	cmp	r3, #64	@ 0x40
 8008a7a:	d058      	beq.n	8008b2e <HAL_TIM_ConfigClockSource+0x13a>
 8008a7c:	2b40      	cmp	r3, #64	@ 0x40
 8008a7e:	d86f      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a80:	2b30      	cmp	r3, #48	@ 0x30
 8008a82:	d064      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x15a>
 8008a84:	2b30      	cmp	r3, #48	@ 0x30
 8008a86:	d86b      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a88:	2b20      	cmp	r3, #32
 8008a8a:	d060      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x15a>
 8008a8c:	2b20      	cmp	r3, #32
 8008a8e:	d867      	bhi.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d05c      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x15a>
 8008a94:	2b10      	cmp	r3, #16
 8008a96:	d05a      	beq.n	8008b4e <HAL_TIM_ConfigClockSource+0x15a>
 8008a98:	e062      	b.n	8008b60 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008aaa:	f000 fbe1 	bl	8009270 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008ab6:	68bb      	ldr	r3, [r7, #8]
 8008ab8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008abc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	68ba      	ldr	r2, [r7, #8]
 8008ac4:	609a      	str	r2, [r3, #8]
      break;
 8008ac6:	e04f      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008acc:	683b      	ldr	r3, [r7, #0]
 8008ace:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8008ad8:	f000 fbca 	bl	8009270 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	689a      	ldr	r2, [r3, #8]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008aea:	609a      	str	r2, [r3, #8]
      break;
 8008aec:	e03c      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008af2:	683b      	ldr	r3, [r7, #0]
 8008af4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008afa:	461a      	mov	r2, r3
 8008afc:	f000 fb3e 	bl	800917c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	2150      	movs	r1, #80	@ 0x50
 8008b06:	4618      	mov	r0, r3
 8008b08:	f000 fb97 	bl	800923a <TIM_ITRx_SetConfig>
      break;
 8008b0c:	e02c      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b12:	683b      	ldr	r3, [r7, #0]
 8008b14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b16:	683b      	ldr	r3, [r7, #0]
 8008b18:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008b1a:	461a      	mov	r2, r3
 8008b1c:	f000 fb5d 	bl	80091da <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	2160      	movs	r1, #96	@ 0x60
 8008b26:	4618      	mov	r0, r3
 8008b28:	f000 fb87 	bl	800923a <TIM_ITRx_SetConfig>
      break;
 8008b2c:	e01c      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008b36:	683b      	ldr	r3, [r7, #0]
 8008b38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008b3a:	461a      	mov	r2, r3
 8008b3c:	f000 fb1e 	bl	800917c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	2140      	movs	r1, #64	@ 0x40
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 fb77 	bl	800923a <TIM_ITRx_SetConfig>
      break;
 8008b4c:	e00c      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681a      	ldr	r2, [r3, #0]
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4619      	mov	r1, r3
 8008b58:	4610      	mov	r0, r2
 8008b5a:	f000 fb6e 	bl	800923a <TIM_ITRx_SetConfig>
      break;
 8008b5e:	e003      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008b60:	2301      	movs	r3, #1
 8008b62:	73fb      	strb	r3, [r7, #15]
      break;
 8008b64:	e000      	b.n	8008b68 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008b66:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	2201      	movs	r2, #1
 8008b6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008b78:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b7a:	4618      	mov	r0, r3
 8008b7c:	3710      	adds	r7, #16
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	bd80      	pop	{r7, pc}

08008b82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008b82:	b480      	push	{r7}
 8008b84:	b083      	sub	sp, #12
 8008b86:	af00      	add	r7, sp, #0
 8008b88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008b8a:	bf00      	nop
 8008b8c:	370c      	adds	r7, #12
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b083      	sub	sp, #12
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008b9e:	bf00      	nop
 8008ba0:	370c      	adds	r7, #12
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba8:	4770      	bx	lr

08008baa <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008baa:	b580      	push	{r7, lr}
 8008bac:	b084      	sub	sp, #16
 8008bae:	af00      	add	r7, sp, #0
 8008bb0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bb6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	429a      	cmp	r2, r3
 8008bc0:	d107      	bne.n	8008bd2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2201      	movs	r2, #1
 8008bc6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008bd0:	e02a      	b.n	8008c28 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d107      	bne.n	8008bec <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2202      	movs	r2, #2
 8008be0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2201      	movs	r2, #1
 8008be6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008bea:	e01d      	b.n	8008c28 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	429a      	cmp	r2, r3
 8008bf4:	d107      	bne.n	8008c06 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	2204      	movs	r2, #4
 8008bfa:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008c04:	e010      	b.n	8008c28 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0a:	687a      	ldr	r2, [r7, #4]
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	d107      	bne.n	8008c20 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	2208      	movs	r2, #8
 8008c14:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008c16:	68fb      	ldr	r3, [r7, #12]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008c1e:	e003      	b.n	8008c28 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	2201      	movs	r2, #1
 8008c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008c28:	68f8      	ldr	r0, [r7, #12]
 8008c2a:	f7ff ffb4 	bl	8008b96 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	771a      	strb	r2, [r3, #28]
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b084      	sub	sp, #16
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c48:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d10b      	bne.n	8008c6c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	2201      	movs	r2, #1
 8008c58:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	69db      	ldr	r3, [r3, #28]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d136      	bne.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	2201      	movs	r2, #1
 8008c66:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008c6a:	e031      	b.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c70:	687a      	ldr	r2, [r7, #4]
 8008c72:	429a      	cmp	r2, r3
 8008c74:	d10b      	bne.n	8008c8e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	69db      	ldr	r3, [r3, #28]
 8008c80:	2b00      	cmp	r3, #0
 8008c82:	d125      	bne.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	2201      	movs	r2, #1
 8008c88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008c8c:	e020      	b.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c92:	687a      	ldr	r2, [r7, #4]
 8008c94:	429a      	cmp	r2, r3
 8008c96:	d10b      	bne.n	8008cb0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	2204      	movs	r2, #4
 8008c9c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	69db      	ldr	r3, [r3, #28]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d114      	bne.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2201      	movs	r2, #1
 8008caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cae:	e00f      	b.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008cb4:	687a      	ldr	r2, [r7, #4]
 8008cb6:	429a      	cmp	r2, r3
 8008cb8:	d10a      	bne.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2208      	movs	r2, #8
 8008cbe:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	69db      	ldr	r3, [r3, #28]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	2201      	movs	r2, #1
 8008ccc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008cd0:	68f8      	ldr	r0, [r7, #12]
 8008cd2:	f7f8 fee9 	bl	8001aa8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	771a      	strb	r2, [r3, #28]
}
 8008cdc:	bf00      	nop
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b084      	sub	sp, #16
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cf0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008cf2:	68fb      	ldr	r3, [r7, #12]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cf6:	687a      	ldr	r2, [r7, #4]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d103      	bne.n	8008d04 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	771a      	strb	r2, [r3, #28]
 8008d02:	e019      	b.n	8008d38 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d08:	687a      	ldr	r2, [r7, #4]
 8008d0a:	429a      	cmp	r2, r3
 8008d0c:	d103      	bne.n	8008d16 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2202      	movs	r2, #2
 8008d12:	771a      	strb	r2, [r3, #28]
 8008d14:	e010      	b.n	8008d38 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d1a:	687a      	ldr	r2, [r7, #4]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d103      	bne.n	8008d28 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	2204      	movs	r2, #4
 8008d24:	771a      	strb	r2, [r3, #28]
 8008d26:	e007      	b.n	8008d38 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008d28:	68fb      	ldr	r3, [r7, #12]
 8008d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d2c:	687a      	ldr	r2, [r7, #4]
 8008d2e:	429a      	cmp	r2, r3
 8008d30:	d102      	bne.n	8008d38 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	2208      	movs	r2, #8
 8008d36:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008d38:	68f8      	ldr	r0, [r7, #12]
 8008d3a:	f7ff ff22 	bl	8008b82 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
}
 8008d44:	bf00      	nop
 8008d46:	3710      	adds	r7, #16
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	bd80      	pop	{r7, pc}

08008d4c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008d4c:	b480      	push	{r7}
 8008d4e:	b085      	sub	sp, #20
 8008d50:	af00      	add	r7, sp, #0
 8008d52:	6078      	str	r0, [r7, #4]
 8008d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	4a3a      	ldr	r2, [pc, #232]	@ (8008e48 <TIM_Base_SetConfig+0xfc>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d00f      	beq.n	8008d84 <TIM_Base_SetConfig+0x38>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d6a:	d00b      	beq.n	8008d84 <TIM_Base_SetConfig+0x38>
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	4a37      	ldr	r2, [pc, #220]	@ (8008e4c <TIM_Base_SetConfig+0x100>)
 8008d70:	4293      	cmp	r3, r2
 8008d72:	d007      	beq.n	8008d84 <TIM_Base_SetConfig+0x38>
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	4a36      	ldr	r2, [pc, #216]	@ (8008e50 <TIM_Base_SetConfig+0x104>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d003      	beq.n	8008d84 <TIM_Base_SetConfig+0x38>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	4a35      	ldr	r2, [pc, #212]	@ (8008e54 <TIM_Base_SetConfig+0x108>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d108      	bne.n	8008d96 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d8a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008d8c:	683b      	ldr	r3, [r7, #0]
 8008d8e:	685b      	ldr	r3, [r3, #4]
 8008d90:	68fa      	ldr	r2, [r7, #12]
 8008d92:	4313      	orrs	r3, r2
 8008d94:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	4a2b      	ldr	r2, [pc, #172]	@ (8008e48 <TIM_Base_SetConfig+0xfc>)
 8008d9a:	4293      	cmp	r3, r2
 8008d9c:	d01b      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008da4:	d017      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	4a28      	ldr	r2, [pc, #160]	@ (8008e4c <TIM_Base_SetConfig+0x100>)
 8008daa:	4293      	cmp	r3, r2
 8008dac:	d013      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	4a27      	ldr	r2, [pc, #156]	@ (8008e50 <TIM_Base_SetConfig+0x104>)
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d00f      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	4a26      	ldr	r2, [pc, #152]	@ (8008e54 <TIM_Base_SetConfig+0x108>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d00b      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	4a25      	ldr	r2, [pc, #148]	@ (8008e58 <TIM_Base_SetConfig+0x10c>)
 8008dc2:	4293      	cmp	r3, r2
 8008dc4:	d007      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	4a24      	ldr	r2, [pc, #144]	@ (8008e5c <TIM_Base_SetConfig+0x110>)
 8008dca:	4293      	cmp	r3, r2
 8008dcc:	d003      	beq.n	8008dd6 <TIM_Base_SetConfig+0x8a>
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	4a23      	ldr	r2, [pc, #140]	@ (8008e60 <TIM_Base_SetConfig+0x114>)
 8008dd2:	4293      	cmp	r3, r2
 8008dd4:	d108      	bne.n	8008de8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ddc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	68db      	ldr	r3, [r3, #12]
 8008de2:	68fa      	ldr	r2, [r7, #12]
 8008de4:	4313      	orrs	r3, r2
 8008de6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008dee:	683b      	ldr	r3, [r7, #0]
 8008df0:	695b      	ldr	r3, [r3, #20]
 8008df2:	4313      	orrs	r3, r2
 8008df4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	68fa      	ldr	r2, [r7, #12]
 8008dfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	689a      	ldr	r2, [r3, #8]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	681a      	ldr	r2, [r3, #0]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	4a0e      	ldr	r2, [pc, #56]	@ (8008e48 <TIM_Base_SetConfig+0xfc>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d103      	bne.n	8008e1c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008e14:	683b      	ldr	r3, [r7, #0]
 8008e16:	691a      	ldr	r2, [r3, #16]
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	691b      	ldr	r3, [r3, #16]
 8008e26:	f003 0301 	and.w	r3, r3, #1
 8008e2a:	2b01      	cmp	r3, #1
 8008e2c:	d105      	bne.n	8008e3a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	691b      	ldr	r3, [r3, #16]
 8008e32:	f023 0201 	bic.w	r2, r3, #1
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	611a      	str	r2, [r3, #16]
  }
}
 8008e3a:	bf00      	nop
 8008e3c:	3714      	adds	r7, #20
 8008e3e:	46bd      	mov	sp, r7
 8008e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e44:	4770      	bx	lr
 8008e46:	bf00      	nop
 8008e48:	40010000 	.word	0x40010000
 8008e4c:	40000400 	.word	0x40000400
 8008e50:	40000800 	.word	0x40000800
 8008e54:	40000c00 	.word	0x40000c00
 8008e58:	40014000 	.word	0x40014000
 8008e5c:	40014400 	.word	0x40014400
 8008e60:	40014800 	.word	0x40014800

08008e64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b087      	sub	sp, #28
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	6a1b      	ldr	r3, [r3, #32]
 8008e72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6a1b      	ldr	r3, [r3, #32]
 8008e78:	f023 0201 	bic.w	r2, r3, #1
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	699b      	ldr	r3, [r3, #24]
 8008e8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008e92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	f023 0303 	bic.w	r3, r3, #3
 8008e9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	68fa      	ldr	r2, [r7, #12]
 8008ea2:	4313      	orrs	r3, r2
 8008ea4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008ea6:	697b      	ldr	r3, [r7, #20]
 8008ea8:	f023 0302 	bic.w	r3, r3, #2
 8008eac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008eae:	683b      	ldr	r3, [r7, #0]
 8008eb0:	689b      	ldr	r3, [r3, #8]
 8008eb2:	697a      	ldr	r2, [r7, #20]
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	4a1c      	ldr	r2, [pc, #112]	@ (8008f2c <TIM_OC1_SetConfig+0xc8>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10c      	bne.n	8008eda <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	f023 0308 	bic.w	r3, r3, #8
 8008ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	697a      	ldr	r2, [r7, #20]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008ed2:	697b      	ldr	r3, [r7, #20]
 8008ed4:	f023 0304 	bic.w	r3, r3, #4
 8008ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	4a13      	ldr	r2, [pc, #76]	@ (8008f2c <TIM_OC1_SetConfig+0xc8>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d111      	bne.n	8008f06 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008ee2:	693b      	ldr	r3, [r7, #16]
 8008ee4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008ee8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008ef0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008ef2:	683b      	ldr	r3, [r7, #0]
 8008ef4:	695b      	ldr	r3, [r3, #20]
 8008ef6:	693a      	ldr	r2, [r7, #16]
 8008ef8:	4313      	orrs	r3, r2
 8008efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	693a      	ldr	r2, [r7, #16]
 8008f02:	4313      	orrs	r3, r2
 8008f04:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	693a      	ldr	r2, [r7, #16]
 8008f0a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	68fa      	ldr	r2, [r7, #12]
 8008f10:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008f12:	683b      	ldr	r3, [r7, #0]
 8008f14:	685a      	ldr	r2, [r3, #4]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	697a      	ldr	r2, [r7, #20]
 8008f1e:	621a      	str	r2, [r3, #32]
}
 8008f20:	bf00      	nop
 8008f22:	371c      	adds	r7, #28
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	40010000 	.word	0x40010000

08008f30 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008f30:	b480      	push	{r7}
 8008f32:	b087      	sub	sp, #28
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6a1b      	ldr	r3, [r3, #32]
 8008f3e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	6a1b      	ldr	r3, [r3, #32]
 8008f44:	f023 0210 	bic.w	r2, r3, #16
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	685b      	ldr	r3, [r3, #4]
 8008f50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	699b      	ldr	r3, [r3, #24]
 8008f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008f5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008f66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008f68:	683b      	ldr	r3, [r7, #0]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	68fa      	ldr	r2, [r7, #12]
 8008f70:	4313      	orrs	r3, r2
 8008f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008f74:	697b      	ldr	r3, [r7, #20]
 8008f76:	f023 0320 	bic.w	r3, r3, #32
 8008f7a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	011b      	lsls	r3, r3, #4
 8008f82:	697a      	ldr	r2, [r7, #20]
 8008f84:	4313      	orrs	r3, r2
 8008f86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a1e      	ldr	r2, [pc, #120]	@ (8009004 <TIM_OC2_SetConfig+0xd4>)
 8008f8c:	4293      	cmp	r3, r2
 8008f8e:	d10d      	bne.n	8008fac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008f90:	697b      	ldr	r3, [r7, #20]
 8008f92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008f96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008f98:	683b      	ldr	r3, [r7, #0]
 8008f9a:	68db      	ldr	r3, [r3, #12]
 8008f9c:	011b      	lsls	r3, r3, #4
 8008f9e:	697a      	ldr	r2, [r7, #20]
 8008fa0:	4313      	orrs	r3, r2
 8008fa2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008fa4:	697b      	ldr	r3, [r7, #20]
 8008fa6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008faa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	4a15      	ldr	r2, [pc, #84]	@ (8009004 <TIM_OC2_SetConfig+0xd4>)
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d113      	bne.n	8008fdc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008fba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008fbc:	693b      	ldr	r3, [r7, #16]
 8008fbe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008fc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	695b      	ldr	r3, [r3, #20]
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	693a      	ldr	r2, [r7, #16]
 8008fcc:	4313      	orrs	r3, r2
 8008fce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	699b      	ldr	r3, [r3, #24]
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	693a      	ldr	r2, [r7, #16]
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	693a      	ldr	r2, [r7, #16]
 8008fe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	685a      	ldr	r2, [r3, #4]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	697a      	ldr	r2, [r7, #20]
 8008ff4:	621a      	str	r2, [r3, #32]
}
 8008ff6:	bf00      	nop
 8008ff8:	371c      	adds	r7, #28
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009000:	4770      	bx	lr
 8009002:	bf00      	nop
 8009004:	40010000 	.word	0x40010000

08009008 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009008:	b480      	push	{r7}
 800900a:	b087      	sub	sp, #28
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
 8009010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	6a1b      	ldr	r3, [r3, #32]
 8009016:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	69db      	ldr	r3, [r3, #28]
 800902e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	f023 0303 	bic.w	r3, r3, #3
 800903e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	68fa      	ldr	r2, [r7, #12]
 8009046:	4313      	orrs	r3, r2
 8009048:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800904a:	697b      	ldr	r3, [r7, #20]
 800904c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009050:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	689b      	ldr	r3, [r3, #8]
 8009056:	021b      	lsls	r3, r3, #8
 8009058:	697a      	ldr	r2, [r7, #20]
 800905a:	4313      	orrs	r3, r2
 800905c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	4a1d      	ldr	r2, [pc, #116]	@ (80090d8 <TIM_OC3_SetConfig+0xd0>)
 8009062:	4293      	cmp	r3, r2
 8009064:	d10d      	bne.n	8009082 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800906c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800906e:	683b      	ldr	r3, [r7, #0]
 8009070:	68db      	ldr	r3, [r3, #12]
 8009072:	021b      	lsls	r3, r3, #8
 8009074:	697a      	ldr	r2, [r7, #20]
 8009076:	4313      	orrs	r3, r2
 8009078:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009080:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	4a14      	ldr	r2, [pc, #80]	@ (80090d8 <TIM_OC3_SetConfig+0xd0>)
 8009086:	4293      	cmp	r3, r2
 8009088:	d113      	bne.n	80090b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009090:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009092:	693b      	ldr	r3, [r7, #16]
 8009094:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009098:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800909a:	683b      	ldr	r3, [r7, #0]
 800909c:	695b      	ldr	r3, [r3, #20]
 800909e:	011b      	lsls	r3, r3, #4
 80090a0:	693a      	ldr	r2, [r7, #16]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	699b      	ldr	r3, [r3, #24]
 80090aa:	011b      	lsls	r3, r3, #4
 80090ac:	693a      	ldr	r2, [r7, #16]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	693a      	ldr	r2, [r7, #16]
 80090b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	68fa      	ldr	r2, [r7, #12]
 80090bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090be:	683b      	ldr	r3, [r7, #0]
 80090c0:	685a      	ldr	r2, [r3, #4]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	697a      	ldr	r2, [r7, #20]
 80090ca:	621a      	str	r2, [r3, #32]
}
 80090cc:	bf00      	nop
 80090ce:	371c      	adds	r7, #28
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	40010000 	.word	0x40010000

080090dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80090dc:	b480      	push	{r7}
 80090de:	b087      	sub	sp, #28
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
 80090e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6a1b      	ldr	r3, [r3, #32]
 80090ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6a1b      	ldr	r3, [r3, #32]
 80090f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	685b      	ldr	r3, [r3, #4]
 80090fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	69db      	ldr	r3, [r3, #28]
 8009102:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800910a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8009112:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009114:	683b      	ldr	r3, [r7, #0]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	021b      	lsls	r3, r3, #8
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	4313      	orrs	r3, r2
 800911e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009126:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009128:	683b      	ldr	r3, [r7, #0]
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	031b      	lsls	r3, r3, #12
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	4a10      	ldr	r2, [pc, #64]	@ (8009178 <TIM_OC4_SetConfig+0x9c>)
 8009138:	4293      	cmp	r3, r2
 800913a:	d109      	bne.n	8009150 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	695b      	ldr	r3, [r3, #20]
 8009148:	019b      	lsls	r3, r3, #6
 800914a:	697a      	ldr	r2, [r7, #20]
 800914c:	4313      	orrs	r3, r2
 800914e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	697a      	ldr	r2, [r7, #20]
 8009154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	68fa      	ldr	r2, [r7, #12]
 800915a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800915c:	683b      	ldr	r3, [r7, #0]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	693a      	ldr	r2, [r7, #16]
 8009168:	621a      	str	r2, [r3, #32]
}
 800916a:	bf00      	nop
 800916c:	371c      	adds	r7, #28
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop
 8009178:	40010000 	.word	0x40010000

0800917c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800917c:	b480      	push	{r7}
 800917e:	b087      	sub	sp, #28
 8009180:	af00      	add	r7, sp, #0
 8009182:	60f8      	str	r0, [r7, #12]
 8009184:	60b9      	str	r1, [r7, #8]
 8009186:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	6a1b      	ldr	r3, [r3, #32]
 8009192:	f023 0201 	bic.w	r2, r3, #1
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80091a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	011b      	lsls	r3, r3, #4
 80091ac:	693a      	ldr	r2, [r7, #16]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80091b2:	697b      	ldr	r3, [r7, #20]
 80091b4:	f023 030a 	bic.w	r3, r3, #10
 80091b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80091ba:	697a      	ldr	r2, [r7, #20]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	4313      	orrs	r3, r2
 80091c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	693a      	ldr	r2, [r7, #16]
 80091c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	697a      	ldr	r2, [r7, #20]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr

080091da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80091da:	b480      	push	{r7}
 80091dc:	b087      	sub	sp, #28
 80091de:	af00      	add	r7, sp, #0
 80091e0:	60f8      	str	r0, [r7, #12]
 80091e2:	60b9      	str	r1, [r7, #8]
 80091e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6a1b      	ldr	r3, [r3, #32]
 80091ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	6a1b      	ldr	r3, [r3, #32]
 80091f0:	f023 0210 	bic.w	r2, r3, #16
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	699b      	ldr	r3, [r3, #24]
 80091fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091fe:	693b      	ldr	r3, [r7, #16]
 8009200:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009204:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	031b      	lsls	r3, r3, #12
 800920a:	693a      	ldr	r2, [r7, #16]
 800920c:	4313      	orrs	r3, r2
 800920e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009210:	697b      	ldr	r3, [r7, #20]
 8009212:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009216:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	011b      	lsls	r3, r3, #4
 800921c:	697a      	ldr	r2, [r7, #20]
 800921e:	4313      	orrs	r3, r2
 8009220:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	697a      	ldr	r2, [r7, #20]
 800922c:	621a      	str	r2, [r3, #32]
}
 800922e:	bf00      	nop
 8009230:	371c      	adds	r7, #28
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr

0800923a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800923a:	b480      	push	{r7}
 800923c:	b085      	sub	sp, #20
 800923e:	af00      	add	r7, sp, #0
 8009240:	6078      	str	r0, [r7, #4]
 8009242:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	689b      	ldr	r3, [r3, #8]
 8009248:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800924a:	68fb      	ldr	r3, [r7, #12]
 800924c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009250:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009252:	683a      	ldr	r2, [r7, #0]
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	4313      	orrs	r3, r2
 8009258:	f043 0307 	orr.w	r3, r3, #7
 800925c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	68fa      	ldr	r2, [r7, #12]
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	3714      	adds	r7, #20
 8009268:	46bd      	mov	sp, r7
 800926a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800926e:	4770      	bx	lr

08009270 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009270:	b480      	push	{r7}
 8009272:	b087      	sub	sp, #28
 8009274:	af00      	add	r7, sp, #0
 8009276:	60f8      	str	r0, [r7, #12]
 8009278:	60b9      	str	r1, [r7, #8]
 800927a:	607a      	str	r2, [r7, #4]
 800927c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	689b      	ldr	r3, [r3, #8]
 8009282:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800928a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800928c:	683b      	ldr	r3, [r7, #0]
 800928e:	021a      	lsls	r2, r3, #8
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	431a      	orrs	r2, r3
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	4313      	orrs	r3, r2
 8009298:	697a      	ldr	r2, [r7, #20]
 800929a:	4313      	orrs	r3, r2
 800929c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	697a      	ldr	r2, [r7, #20]
 80092a2:	609a      	str	r2, [r3, #8]
}
 80092a4:	bf00      	nop
 80092a6:	371c      	adds	r7, #28
 80092a8:	46bd      	mov	sp, r7
 80092aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ae:	4770      	bx	lr

080092b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80092b0:	b480      	push	{r7}
 80092b2:	b087      	sub	sp, #28
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	60f8      	str	r0, [r7, #12]
 80092b8:	60b9      	str	r1, [r7, #8]
 80092ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	f003 031f 	and.w	r3, r3, #31
 80092c2:	2201      	movs	r2, #1
 80092c4:	fa02 f303 	lsl.w	r3, r2, r3
 80092c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	6a1a      	ldr	r2, [r3, #32]
 80092ce:	697b      	ldr	r3, [r7, #20]
 80092d0:	43db      	mvns	r3, r3
 80092d2:	401a      	ands	r2, r3
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a1a      	ldr	r2, [r3, #32]
 80092dc:	68bb      	ldr	r3, [r7, #8]
 80092de:	f003 031f 	and.w	r3, r3, #31
 80092e2:	6879      	ldr	r1, [r7, #4]
 80092e4:	fa01 f303 	lsl.w	r3, r1, r3
 80092e8:	431a      	orrs	r2, r3
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	621a      	str	r2, [r3, #32]
}
 80092ee:	bf00      	nop
 80092f0:	371c      	adds	r7, #28
 80092f2:	46bd      	mov	sp, r7
 80092f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f8:	4770      	bx	lr
	...

080092fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092fc:	b480      	push	{r7}
 80092fe:	b085      	sub	sp, #20
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
 8009304:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800930c:	2b01      	cmp	r3, #1
 800930e:	d101      	bne.n	8009314 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009310:	2302      	movs	r3, #2
 8009312:	e050      	b.n	80093b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	2201      	movs	r2, #1
 8009318:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2202      	movs	r2, #2
 8009320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	685b      	ldr	r3, [r3, #4]
 800932a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800932c:	687b      	ldr	r3, [r7, #4]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	689b      	ldr	r3, [r3, #8]
 8009332:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800933a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800933c:	683b      	ldr	r3, [r7, #0]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68fa      	ldr	r2, [r7, #12]
 8009342:	4313      	orrs	r3, r2
 8009344:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	4a1c      	ldr	r2, [pc, #112]	@ (80093c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009354:	4293      	cmp	r3, r2
 8009356:	d018      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009360:	d013      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	@ (80093c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009368:	4293      	cmp	r3, r2
 800936a:	d00e      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	681b      	ldr	r3, [r3, #0]
 8009370:	4a16      	ldr	r2, [pc, #88]	@ (80093cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009372:	4293      	cmp	r3, r2
 8009374:	d009      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	4a15      	ldr	r2, [pc, #84]	@ (80093d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800937c:	4293      	cmp	r3, r2
 800937e:	d004      	beq.n	800938a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a13      	ldr	r2, [pc, #76]	@ (80093d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009386:	4293      	cmp	r3, r2
 8009388:	d10c      	bne.n	80093a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009390:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	685b      	ldr	r3, [r3, #4]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	4313      	orrs	r3, r2
 800939a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	68ba      	ldr	r2, [r7, #8]
 80093a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80093b4:	2300      	movs	r3, #0
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	3714      	adds	r7, #20
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr
 80093c2:	bf00      	nop
 80093c4:	40010000 	.word	0x40010000
 80093c8:	40000400 	.word	0x40000400
 80093cc:	40000800 	.word	0x40000800
 80093d0:	40000c00 	.word	0x40000c00
 80093d4:	40014000 	.word	0x40014000

080093d8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80093d8:	b084      	sub	sp, #16
 80093da:	b580      	push	{r7, lr}
 80093dc:	b084      	sub	sp, #16
 80093de:	af00      	add	r7, sp, #0
 80093e0:	6078      	str	r0, [r7, #4]
 80093e2:	f107 001c 	add.w	r0, r7, #28
 80093e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80093ea:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80093ee:	2b01      	cmp	r3, #1
 80093f0:	d123      	bne.n	800943a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80093f6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	68db      	ldr	r3, [r3, #12]
 8009402:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8009406:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800940a:	687a      	ldr	r2, [r7, #4]
 800940c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	68db      	ldr	r3, [r3, #12]
 8009412:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800941a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800941e:	2b01      	cmp	r3, #1
 8009420:	d105      	bne.n	800942e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800942e:	6878      	ldr	r0, [r7, #4]
 8009430:	f001 fae8 	bl	800aa04 <USB_CoreReset>
 8009434:	4603      	mov	r3, r0
 8009436:	73fb      	strb	r3, [r7, #15]
 8009438:	e01b      	b.n	8009472 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68db      	ldr	r3, [r3, #12]
 800943e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009446:	6878      	ldr	r0, [r7, #4]
 8009448:	f001 fadc 	bl	800aa04 <USB_CoreReset>
 800944c:	4603      	mov	r3, r0
 800944e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009450:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009454:	2b00      	cmp	r3, #0
 8009456:	d106      	bne.n	8009466 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800945c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	639a      	str	r2, [r3, #56]	@ 0x38
 8009464:	e005      	b.n	8009472 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800946a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009472:	7fbb      	ldrb	r3, [r7, #30]
 8009474:	2b01      	cmp	r3, #1
 8009476:	d10b      	bne.n	8009490 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	689b      	ldr	r3, [r3, #8]
 800947c:	f043 0206 	orr.w	r2, r3, #6
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	f043 0220 	orr.w	r2, r3, #32
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009490:	7bfb      	ldrb	r3, [r7, #15]
}
 8009492:	4618      	mov	r0, r3
 8009494:	3710      	adds	r7, #16
 8009496:	46bd      	mov	sp, r7
 8009498:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800949c:	b004      	add	sp, #16
 800949e:	4770      	bx	lr

080094a0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80094a0:	b480      	push	{r7}
 80094a2:	b087      	sub	sp, #28
 80094a4:	af00      	add	r7, sp, #0
 80094a6:	60f8      	str	r0, [r7, #12]
 80094a8:	60b9      	str	r1, [r7, #8]
 80094aa:	4613      	mov	r3, r2
 80094ac:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80094ae:	79fb      	ldrb	r3, [r7, #7]
 80094b0:	2b02      	cmp	r3, #2
 80094b2:	d165      	bne.n	8009580 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4a41      	ldr	r2, [pc, #260]	@ (80095bc <USB_SetTurnaroundTime+0x11c>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d906      	bls.n	80094ca <USB_SetTurnaroundTime+0x2a>
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	4a40      	ldr	r2, [pc, #256]	@ (80095c0 <USB_SetTurnaroundTime+0x120>)
 80094c0:	4293      	cmp	r3, r2
 80094c2:	d202      	bcs.n	80094ca <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80094c4:	230f      	movs	r3, #15
 80094c6:	617b      	str	r3, [r7, #20]
 80094c8:	e062      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	4a3c      	ldr	r2, [pc, #240]	@ (80095c0 <USB_SetTurnaroundTime+0x120>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d306      	bcc.n	80094e0 <USB_SetTurnaroundTime+0x40>
 80094d2:	68bb      	ldr	r3, [r7, #8]
 80094d4:	4a3b      	ldr	r2, [pc, #236]	@ (80095c4 <USB_SetTurnaroundTime+0x124>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d202      	bcs.n	80094e0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80094da:	230e      	movs	r3, #14
 80094dc:	617b      	str	r3, [r7, #20]
 80094de:	e057      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	4a38      	ldr	r2, [pc, #224]	@ (80095c4 <USB_SetTurnaroundTime+0x124>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d306      	bcc.n	80094f6 <USB_SetTurnaroundTime+0x56>
 80094e8:	68bb      	ldr	r3, [r7, #8]
 80094ea:	4a37      	ldr	r2, [pc, #220]	@ (80095c8 <USB_SetTurnaroundTime+0x128>)
 80094ec:	4293      	cmp	r3, r2
 80094ee:	d202      	bcs.n	80094f6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80094f0:	230d      	movs	r3, #13
 80094f2:	617b      	str	r3, [r7, #20]
 80094f4:	e04c      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80094f6:	68bb      	ldr	r3, [r7, #8]
 80094f8:	4a33      	ldr	r2, [pc, #204]	@ (80095c8 <USB_SetTurnaroundTime+0x128>)
 80094fa:	4293      	cmp	r3, r2
 80094fc:	d306      	bcc.n	800950c <USB_SetTurnaroundTime+0x6c>
 80094fe:	68bb      	ldr	r3, [r7, #8]
 8009500:	4a32      	ldr	r2, [pc, #200]	@ (80095cc <USB_SetTurnaroundTime+0x12c>)
 8009502:	4293      	cmp	r3, r2
 8009504:	d802      	bhi.n	800950c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8009506:	230c      	movs	r3, #12
 8009508:	617b      	str	r3, [r7, #20]
 800950a:	e041      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	4a2f      	ldr	r2, [pc, #188]	@ (80095cc <USB_SetTurnaroundTime+0x12c>)
 8009510:	4293      	cmp	r3, r2
 8009512:	d906      	bls.n	8009522 <USB_SetTurnaroundTime+0x82>
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	4a2e      	ldr	r2, [pc, #184]	@ (80095d0 <USB_SetTurnaroundTime+0x130>)
 8009518:	4293      	cmp	r3, r2
 800951a:	d802      	bhi.n	8009522 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800951c:	230b      	movs	r3, #11
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	e036      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	4a2a      	ldr	r2, [pc, #168]	@ (80095d0 <USB_SetTurnaroundTime+0x130>)
 8009526:	4293      	cmp	r3, r2
 8009528:	d906      	bls.n	8009538 <USB_SetTurnaroundTime+0x98>
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	4a29      	ldr	r2, [pc, #164]	@ (80095d4 <USB_SetTurnaroundTime+0x134>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d802      	bhi.n	8009538 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009532:	230a      	movs	r3, #10
 8009534:	617b      	str	r3, [r7, #20]
 8009536:	e02b      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	4a26      	ldr	r2, [pc, #152]	@ (80095d4 <USB_SetTurnaroundTime+0x134>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d906      	bls.n	800954e <USB_SetTurnaroundTime+0xae>
 8009540:	68bb      	ldr	r3, [r7, #8]
 8009542:	4a25      	ldr	r2, [pc, #148]	@ (80095d8 <USB_SetTurnaroundTime+0x138>)
 8009544:	4293      	cmp	r3, r2
 8009546:	d202      	bcs.n	800954e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009548:	2309      	movs	r3, #9
 800954a:	617b      	str	r3, [r7, #20]
 800954c:	e020      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	4a21      	ldr	r2, [pc, #132]	@ (80095d8 <USB_SetTurnaroundTime+0x138>)
 8009552:	4293      	cmp	r3, r2
 8009554:	d306      	bcc.n	8009564 <USB_SetTurnaroundTime+0xc4>
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	4a20      	ldr	r2, [pc, #128]	@ (80095dc <USB_SetTurnaroundTime+0x13c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d802      	bhi.n	8009564 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800955e:	2308      	movs	r3, #8
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	e015      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	4a1d      	ldr	r2, [pc, #116]	@ (80095dc <USB_SetTurnaroundTime+0x13c>)
 8009568:	4293      	cmp	r3, r2
 800956a:	d906      	bls.n	800957a <USB_SetTurnaroundTime+0xda>
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	4a1c      	ldr	r2, [pc, #112]	@ (80095e0 <USB_SetTurnaroundTime+0x140>)
 8009570:	4293      	cmp	r3, r2
 8009572:	d202      	bcs.n	800957a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009574:	2307      	movs	r3, #7
 8009576:	617b      	str	r3, [r7, #20]
 8009578:	e00a      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800957a:	2306      	movs	r3, #6
 800957c:	617b      	str	r3, [r7, #20]
 800957e:	e007      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009580:	79fb      	ldrb	r3, [r7, #7]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d102      	bne.n	800958c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009586:	2309      	movs	r3, #9
 8009588:	617b      	str	r3, [r7, #20]
 800958a:	e001      	b.n	8009590 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800958c:	2309      	movs	r3, #9
 800958e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	68db      	ldr	r3, [r3, #12]
 8009594:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	68da      	ldr	r2, [r3, #12]
 80095a0:	697b      	ldr	r3, [r7, #20]
 80095a2:	029b      	lsls	r3, r3, #10
 80095a4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80095a8:	431a      	orrs	r2, r3
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80095ae:	2300      	movs	r3, #0
}
 80095b0:	4618      	mov	r0, r3
 80095b2:	371c      	adds	r7, #28
 80095b4:	46bd      	mov	sp, r7
 80095b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ba:	4770      	bx	lr
 80095bc:	00d8acbf 	.word	0x00d8acbf
 80095c0:	00e4e1c0 	.word	0x00e4e1c0
 80095c4:	00f42400 	.word	0x00f42400
 80095c8:	01067380 	.word	0x01067380
 80095cc:	011a499f 	.word	0x011a499f
 80095d0:	01312cff 	.word	0x01312cff
 80095d4:	014ca43f 	.word	0x014ca43f
 80095d8:	016e3600 	.word	0x016e3600
 80095dc:	01a6ab1f 	.word	0x01a6ab1f
 80095e0:	01e84800 	.word	0x01e84800

080095e4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b083      	sub	sp, #12
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	689b      	ldr	r3, [r3, #8]
 80095f0:	f043 0201 	orr.w	r2, r3, #1
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80095f8:	2300      	movs	r3, #0
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	370c      	adds	r7, #12
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b083      	sub	sp, #12
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	689b      	ldr	r3, [r3, #8]
 8009612:	f023 0201 	bic.w	r2, r3, #1
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800961a:	2300      	movs	r3, #0
}
 800961c:	4618      	mov	r0, r3
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009628:	b580      	push	{r7, lr}
 800962a:	b084      	sub	sp, #16
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]
 8009630:	460b      	mov	r3, r1
 8009632:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009634:	2300      	movs	r3, #0
 8009636:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	68db      	ldr	r3, [r3, #12]
 800963c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009644:	78fb      	ldrb	r3, [r7, #3]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d115      	bne.n	8009676 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	68db      	ldr	r3, [r3, #12]
 800964e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009656:	200a      	movs	r0, #10
 8009658:	f7fb f9d2 	bl	8004a00 <HAL_Delay>
      ms += 10U;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	330a      	adds	r3, #10
 8009660:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 f93f 	bl	800a8e6 <USB_GetMode>
 8009668:	4603      	mov	r3, r0
 800966a:	2b01      	cmp	r3, #1
 800966c:	d01e      	beq.n	80096ac <USB_SetCurrentMode+0x84>
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	2bc7      	cmp	r3, #199	@ 0xc7
 8009672:	d9f0      	bls.n	8009656 <USB_SetCurrentMode+0x2e>
 8009674:	e01a      	b.n	80096ac <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009676:	78fb      	ldrb	r3, [r7, #3]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d115      	bne.n	80096a8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	68db      	ldr	r3, [r3, #12]
 8009680:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009688:	200a      	movs	r0, #10
 800968a:	f7fb f9b9 	bl	8004a00 <HAL_Delay>
      ms += 10U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	330a      	adds	r3, #10
 8009692:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009694:	6878      	ldr	r0, [r7, #4]
 8009696:	f001 f926 	bl	800a8e6 <USB_GetMode>
 800969a:	4603      	mov	r3, r0
 800969c:	2b00      	cmp	r3, #0
 800969e:	d005      	beq.n	80096ac <USB_SetCurrentMode+0x84>
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	2bc7      	cmp	r3, #199	@ 0xc7
 80096a4:	d9f0      	bls.n	8009688 <USB_SetCurrentMode+0x60>
 80096a6:	e001      	b.n	80096ac <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e005      	b.n	80096b8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2bc8      	cmp	r3, #200	@ 0xc8
 80096b0:	d101      	bne.n	80096b6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80096b2:	2301      	movs	r3, #1
 80096b4:	e000      	b.n	80096b8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80096b6:	2300      	movs	r3, #0
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80096c0:	b084      	sub	sp, #16
 80096c2:	b580      	push	{r7, lr}
 80096c4:	b086      	sub	sp, #24
 80096c6:	af00      	add	r7, sp, #0
 80096c8:	6078      	str	r0, [r7, #4]
 80096ca:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80096ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80096d2:	2300      	movs	r3, #0
 80096d4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80096da:	2300      	movs	r3, #0
 80096dc:	613b      	str	r3, [r7, #16]
 80096de:	e009      	b.n	80096f4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80096e0:	687a      	ldr	r2, [r7, #4]
 80096e2:	693b      	ldr	r3, [r7, #16]
 80096e4:	3340      	adds	r3, #64	@ 0x40
 80096e6:	009b      	lsls	r3, r3, #2
 80096e8:	4413      	add	r3, r2
 80096ea:	2200      	movs	r2, #0
 80096ec:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	3301      	adds	r3, #1
 80096f2:	613b      	str	r3, [r7, #16]
 80096f4:	693b      	ldr	r3, [r7, #16]
 80096f6:	2b0e      	cmp	r3, #14
 80096f8:	d9f2      	bls.n	80096e0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80096fa:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d11c      	bne.n	800973c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009708:	685b      	ldr	r3, [r3, #4]
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009710:	f043 0302 	orr.w	r3, r3, #2
 8009714:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800971a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009726:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009732:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	639a      	str	r2, [r3, #56]	@ 0x38
 800973a:	e00b      	b.n	8009754 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009740:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800974c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800975a:	461a      	mov	r2, r3
 800975c:	2300      	movs	r3, #0
 800975e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009760:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009764:	2b01      	cmp	r3, #1
 8009766:	d10d      	bne.n	8009784 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009768:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800976c:	2b00      	cmp	r3, #0
 800976e:	d104      	bne.n	800977a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009770:	2100      	movs	r1, #0
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f000 f968 	bl	8009a48 <USB_SetDevSpeed>
 8009778:	e008      	b.n	800978c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800977a:	2101      	movs	r1, #1
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 f963 	bl	8009a48 <USB_SetDevSpeed>
 8009782:	e003      	b.n	800978c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009784:	2103      	movs	r1, #3
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	f000 f95e 	bl	8009a48 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800978c:	2110      	movs	r1, #16
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 f8fa 	bl	8009988 <USB_FlushTxFifo>
 8009794:	4603      	mov	r3, r0
 8009796:	2b00      	cmp	r3, #0
 8009798:	d001      	beq.n	800979e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800979a:	2301      	movs	r3, #1
 800979c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 f924 	bl	80099ec <USB_FlushRxFifo>
 80097a4:	4603      	mov	r3, r0
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d001      	beq.n	80097ae <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80097aa:	2301      	movs	r3, #1
 80097ac:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097b4:	461a      	mov	r2, r3
 80097b6:	2300      	movs	r3, #0
 80097b8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097c0:	461a      	mov	r2, r3
 80097c2:	2300      	movs	r3, #0
 80097c4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097cc:	461a      	mov	r2, r3
 80097ce:	2300      	movs	r3, #0
 80097d0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097d2:	2300      	movs	r3, #0
 80097d4:	613b      	str	r3, [r7, #16]
 80097d6:	e043      	b.n	8009860 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80097d8:	693b      	ldr	r3, [r7, #16]
 80097da:	015a      	lsls	r2, r3, #5
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	4413      	add	r3, r2
 80097e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097ee:	d118      	bne.n	8009822 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	2b00      	cmp	r3, #0
 80097f4:	d10a      	bne.n	800980c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	015a      	lsls	r2, r3, #5
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	4413      	add	r3, r2
 80097fe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009802:	461a      	mov	r2, r3
 8009804:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009808:	6013      	str	r3, [r2, #0]
 800980a:	e013      	b.n	8009834 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800980c:	693b      	ldr	r3, [r7, #16]
 800980e:	015a      	lsls	r2, r3, #5
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	4413      	add	r3, r2
 8009814:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009818:	461a      	mov	r2, r3
 800981a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800981e:	6013      	str	r3, [r2, #0]
 8009820:	e008      	b.n	8009834 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	015a      	lsls	r2, r3, #5
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	4413      	add	r3, r2
 800982a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800982e:	461a      	mov	r2, r3
 8009830:	2300      	movs	r3, #0
 8009832:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009840:	461a      	mov	r2, r3
 8009842:	2300      	movs	r3, #0
 8009844:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009846:	693b      	ldr	r3, [r7, #16]
 8009848:	015a      	lsls	r2, r3, #5
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	4413      	add	r3, r2
 800984e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009852:	461a      	mov	r2, r3
 8009854:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009858:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	3301      	adds	r3, #1
 800985e:	613b      	str	r3, [r7, #16]
 8009860:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009864:	461a      	mov	r2, r3
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	4293      	cmp	r3, r2
 800986a:	d3b5      	bcc.n	80097d8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800986c:	2300      	movs	r3, #0
 800986e:	613b      	str	r3, [r7, #16]
 8009870:	e043      	b.n	80098fa <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009872:	693b      	ldr	r3, [r7, #16]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	4413      	add	r3, r2
 800987a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009884:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009888:	d118      	bne.n	80098bc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	d10a      	bne.n	80098a6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	015a      	lsls	r2, r3, #5
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	4413      	add	r3, r2
 8009898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800989c:	461a      	mov	r2, r3
 800989e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80098a2:	6013      	str	r3, [r2, #0]
 80098a4:	e013      	b.n	80098ce <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80098a6:	693b      	ldr	r3, [r7, #16]
 80098a8:	015a      	lsls	r2, r3, #5
 80098aa:	68fb      	ldr	r3, [r7, #12]
 80098ac:	4413      	add	r3, r2
 80098ae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098b2:	461a      	mov	r2, r3
 80098b4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80098b8:	6013      	str	r3, [r2, #0]
 80098ba:	e008      	b.n	80098ce <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	015a      	lsls	r2, r3, #5
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	4413      	add	r3, r2
 80098c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098c8:	461a      	mov	r2, r3
 80098ca:	2300      	movs	r3, #0
 80098cc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80098ce:	693b      	ldr	r3, [r7, #16]
 80098d0:	015a      	lsls	r2, r3, #5
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4413      	add	r3, r2
 80098d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098da:	461a      	mov	r2, r3
 80098dc:	2300      	movs	r3, #0
 80098de:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	015a      	lsls	r2, r3, #5
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	4413      	add	r3, r2
 80098e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098ec:	461a      	mov	r2, r3
 80098ee:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80098f2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	3301      	adds	r3, #1
 80098f8:	613b      	str	r3, [r7, #16]
 80098fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80098fe:	461a      	mov	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	4293      	cmp	r3, r2
 8009904:	d3b5      	bcc.n	8009872 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	68fa      	ldr	r2, [r7, #12]
 8009910:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009914:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009918:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2200      	movs	r2, #0
 800991e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009926:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009928:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800992c:	2b00      	cmp	r3, #0
 800992e:	d105      	bne.n	800993c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	699b      	ldr	r3, [r3, #24]
 8009934:	f043 0210 	orr.w	r2, r3, #16
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	699a      	ldr	r2, [r3, #24]
 8009940:	4b10      	ldr	r3, [pc, #64]	@ (8009984 <USB_DevInit+0x2c4>)
 8009942:	4313      	orrs	r3, r2
 8009944:	687a      	ldr	r2, [r7, #4]
 8009946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009948:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800994c:	2b00      	cmp	r3, #0
 800994e:	d005      	beq.n	800995c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	699b      	ldr	r3, [r3, #24]
 8009954:	f043 0208 	orr.w	r2, r3, #8
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800995c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009960:	2b01      	cmp	r3, #1
 8009962:	d107      	bne.n	8009974 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	699b      	ldr	r3, [r3, #24]
 8009968:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800996c:	f043 0304 	orr.w	r3, r3, #4
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009974:	7dfb      	ldrb	r3, [r7, #23]
}
 8009976:	4618      	mov	r0, r3
 8009978:	3718      	adds	r7, #24
 800997a:	46bd      	mov	sp, r7
 800997c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009980:	b004      	add	sp, #16
 8009982:	4770      	bx	lr
 8009984:	803c3800 	.word	0x803c3800

08009988 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009988:	b480      	push	{r7}
 800998a:	b085      	sub	sp, #20
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009992:	2300      	movs	r3, #0
 8009994:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	3301      	adds	r3, #1
 800999a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099a2:	d901      	bls.n	80099a8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e01b      	b.n	80099e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	daf2      	bge.n	8009996 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80099b0:	2300      	movs	r3, #0
 80099b2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	019b      	lsls	r3, r3, #6
 80099b8:	f043 0220 	orr.w	r2, r3, #32
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	3301      	adds	r3, #1
 80099c4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80099cc:	d901      	bls.n	80099d2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80099ce:	2303      	movs	r3, #3
 80099d0:	e006      	b.n	80099e0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	691b      	ldr	r3, [r3, #16]
 80099d6:	f003 0320 	and.w	r3, r3, #32
 80099da:	2b20      	cmp	r3, #32
 80099dc:	d0f0      	beq.n	80099c0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80099de:	2300      	movs	r3, #0
}
 80099e0:	4618      	mov	r0, r3
 80099e2:	3714      	adds	r7, #20
 80099e4:	46bd      	mov	sp, r7
 80099e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ea:	4770      	bx	lr

080099ec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b085      	sub	sp, #20
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099f4:	2300      	movs	r3, #0
 80099f6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	3301      	adds	r3, #1
 80099fc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a04:	d901      	bls.n	8009a0a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009a06:	2303      	movs	r3, #3
 8009a08:	e018      	b.n	8009a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	691b      	ldr	r3, [r3, #16]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	daf2      	bge.n	80099f8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009a12:	2300      	movs	r3, #0
 8009a14:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2210      	movs	r2, #16
 8009a1a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	3301      	adds	r3, #1
 8009a20:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a28:	d901      	bls.n	8009a2e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	e006      	b.n	8009a3c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 0310 	and.w	r3, r3, #16
 8009a36:	2b10      	cmp	r3, #16
 8009a38:	d0f0      	beq.n	8009a1c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009a3a:	2300      	movs	r3, #0
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3714      	adds	r7, #20
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	460b      	mov	r3, r1
 8009a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a5e:	681a      	ldr	r2, [r3, #0]
 8009a60:	78fb      	ldrb	r3, [r7, #3]
 8009a62:	68f9      	ldr	r1, [r7, #12]
 8009a64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a68:	4313      	orrs	r3, r2
 8009a6a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3714      	adds	r7, #20
 8009a72:	46bd      	mov	sp, r7
 8009a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a78:	4770      	bx	lr

08009a7a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8009a7a:	b480      	push	{r7}
 8009a7c:	b087      	sub	sp, #28
 8009a7e:	af00      	add	r7, sp, #0
 8009a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009a86:	693b      	ldr	r3, [r7, #16]
 8009a88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	f003 0306 	and.w	r3, r3, #6
 8009a92:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	75fb      	strb	r3, [r7, #23]
 8009a9e:	e00a      	b.n	8009ab6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009aa0:	68fb      	ldr	r3, [r7, #12]
 8009aa2:	2b02      	cmp	r3, #2
 8009aa4:	d002      	beq.n	8009aac <USB_GetDevSpeed+0x32>
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2b06      	cmp	r3, #6
 8009aaa:	d102      	bne.n	8009ab2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8009aac:	2302      	movs	r3, #2
 8009aae:	75fb      	strb	r3, [r7, #23]
 8009ab0:	e001      	b.n	8009ab6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009ab2:	230f      	movs	r3, #15
 8009ab4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009ab6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ab8:	4618      	mov	r0, r3
 8009aba:	371c      	adds	r7, #28
 8009abc:	46bd      	mov	sp, r7
 8009abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac2:	4770      	bx	lr

08009ac4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ac4:	b480      	push	{r7}
 8009ac6:	b085      	sub	sp, #20
 8009ac8:	af00      	add	r7, sp, #0
 8009aca:	6078      	str	r0, [r7, #4]
 8009acc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ad2:	683b      	ldr	r3, [r7, #0]
 8009ad4:	781b      	ldrb	r3, [r3, #0]
 8009ad6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009ad8:	683b      	ldr	r3, [r7, #0]
 8009ada:	785b      	ldrb	r3, [r3, #1]
 8009adc:	2b01      	cmp	r3, #1
 8009ade:	d13a      	bne.n	8009b56 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ae6:	69da      	ldr	r2, [r3, #28]
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	781b      	ldrb	r3, [r3, #0]
 8009aec:	f003 030f 	and.w	r3, r3, #15
 8009af0:	2101      	movs	r1, #1
 8009af2:	fa01 f303 	lsl.w	r3, r1, r3
 8009af6:	b29b      	uxth	r3, r3
 8009af8:	68f9      	ldr	r1, [r7, #12]
 8009afa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009afe:	4313      	orrs	r3, r2
 8009b00:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	015a      	lsls	r2, r3, #5
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	4413      	add	r3, r2
 8009b0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d155      	bne.n	8009bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b18:	68bb      	ldr	r3, [r7, #8]
 8009b1a:	015a      	lsls	r2, r3, #5
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	4413      	add	r3, r2
 8009b20:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b24:	681a      	ldr	r2, [r3, #0]
 8009b26:	683b      	ldr	r3, [r7, #0]
 8009b28:	689b      	ldr	r3, [r3, #8]
 8009b2a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	791b      	ldrb	r3, [r3, #4]
 8009b32:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b34:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	059b      	lsls	r3, r3, #22
 8009b3a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009b3c:	4313      	orrs	r3, r2
 8009b3e:	68ba      	ldr	r2, [r7, #8]
 8009b40:	0151      	lsls	r1, r2, #5
 8009b42:	68fa      	ldr	r2, [r7, #12]
 8009b44:	440a      	add	r2, r1
 8009b46:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b4a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009b4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009b52:	6013      	str	r3, [r2, #0]
 8009b54:	e036      	b.n	8009bc4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b5c:	69da      	ldr	r2, [r3, #28]
 8009b5e:	683b      	ldr	r3, [r7, #0]
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	f003 030f 	and.w	r3, r3, #15
 8009b66:	2101      	movs	r1, #1
 8009b68:	fa01 f303 	lsl.w	r3, r1, r3
 8009b6c:	041b      	lsls	r3, r3, #16
 8009b6e:	68f9      	ldr	r1, [r7, #12]
 8009b70:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b74:	4313      	orrs	r3, r2
 8009b76:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009b78:	68bb      	ldr	r3, [r7, #8]
 8009b7a:	015a      	lsls	r2, r3, #5
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	4413      	add	r3, r2
 8009b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d11a      	bne.n	8009bc4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009b8e:	68bb      	ldr	r3, [r7, #8]
 8009b90:	015a      	lsls	r2, r3, #5
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	4413      	add	r3, r2
 8009b96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b9a:	681a      	ldr	r2, [r3, #0]
 8009b9c:	683b      	ldr	r3, [r7, #0]
 8009b9e:	689b      	ldr	r3, [r3, #8]
 8009ba0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	791b      	ldrb	r3, [r3, #4]
 8009ba8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009baa:	430b      	orrs	r3, r1
 8009bac:	4313      	orrs	r3, r2
 8009bae:	68ba      	ldr	r2, [r7, #8]
 8009bb0:	0151      	lsls	r1, r2, #5
 8009bb2:	68fa      	ldr	r2, [r7, #12]
 8009bb4:	440a      	add	r2, r1
 8009bb6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bba:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009bbe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009bc2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009bc4:	2300      	movs	r3, #0
}
 8009bc6:	4618      	mov	r0, r3
 8009bc8:	3714      	adds	r7, #20
 8009bca:	46bd      	mov	sp, r7
 8009bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd0:	4770      	bx	lr
	...

08009bd4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009bd4:	b480      	push	{r7}
 8009bd6:	b085      	sub	sp, #20
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	6078      	str	r0, [r7, #4]
 8009bdc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009be8:	683b      	ldr	r3, [r7, #0]
 8009bea:	785b      	ldrb	r3, [r3, #1]
 8009bec:	2b01      	cmp	r3, #1
 8009bee:	d161      	bne.n	8009cb4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	015a      	lsls	r2, r3, #5
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	4413      	add	r3, r2
 8009bf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009c02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009c06:	d11f      	bne.n	8009c48 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	015a      	lsls	r2, r3, #5
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	4413      	add	r3, r2
 8009c10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	68ba      	ldr	r2, [r7, #8]
 8009c18:	0151      	lsls	r1, r2, #5
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	440a      	add	r2, r1
 8009c1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c22:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009c26:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	015a      	lsls	r2, r3, #5
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	4413      	add	r3, r2
 8009c30:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	68ba      	ldr	r2, [r7, #8]
 8009c38:	0151      	lsls	r1, r2, #5
 8009c3a:	68fa      	ldr	r2, [r7, #12]
 8009c3c:	440a      	add	r2, r1
 8009c3e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c42:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009c46:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c4e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	f003 030f 	and.w	r3, r3, #15
 8009c58:	2101      	movs	r1, #1
 8009c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8009c5e:	b29b      	uxth	r3, r3
 8009c60:	43db      	mvns	r3, r3
 8009c62:	68f9      	ldr	r1, [r7, #12]
 8009c64:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c68:	4013      	ands	r3, r2
 8009c6a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c72:	69da      	ldr	r2, [r3, #28]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	f003 030f 	and.w	r3, r3, #15
 8009c7c:	2101      	movs	r1, #1
 8009c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8009c82:	b29b      	uxth	r3, r3
 8009c84:	43db      	mvns	r3, r3
 8009c86:	68f9      	ldr	r1, [r7, #12]
 8009c88:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c8c:	4013      	ands	r3, r2
 8009c8e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	015a      	lsls	r2, r3, #5
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	4413      	add	r3, r2
 8009c98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c9c:	681a      	ldr	r2, [r3, #0]
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	0159      	lsls	r1, r3, #5
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	440b      	add	r3, r1
 8009ca6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009caa:	4619      	mov	r1, r3
 8009cac:	4b35      	ldr	r3, [pc, #212]	@ (8009d84 <USB_DeactivateEndpoint+0x1b0>)
 8009cae:	4013      	ands	r3, r2
 8009cb0:	600b      	str	r3, [r1, #0]
 8009cb2:	e060      	b.n	8009d76 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009cb4:	68bb      	ldr	r3, [r7, #8]
 8009cb6:	015a      	lsls	r2, r3, #5
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	4413      	add	r3, r2
 8009cbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009cc6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009cca:	d11f      	bne.n	8009d0c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009ccc:	68bb      	ldr	r3, [r7, #8]
 8009cce:	015a      	lsls	r2, r3, #5
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	4413      	add	r3, r2
 8009cd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68ba      	ldr	r2, [r7, #8]
 8009cdc:	0151      	lsls	r1, r2, #5
 8009cde:	68fa      	ldr	r2, [r7, #12]
 8009ce0:	440a      	add	r2, r1
 8009ce2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ce6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009cea:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009cec:	68bb      	ldr	r3, [r7, #8]
 8009cee:	015a      	lsls	r2, r3, #5
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	4413      	add	r3, r2
 8009cf4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	68ba      	ldr	r2, [r7, #8]
 8009cfc:	0151      	lsls	r1, r2, #5
 8009cfe:	68fa      	ldr	r2, [r7, #12]
 8009d00:	440a      	add	r2, r1
 8009d02:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d06:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d0a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d12:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	f003 030f 	and.w	r3, r3, #15
 8009d1c:	2101      	movs	r1, #1
 8009d1e:	fa01 f303 	lsl.w	r3, r1, r3
 8009d22:	041b      	lsls	r3, r3, #16
 8009d24:	43db      	mvns	r3, r3
 8009d26:	68f9      	ldr	r1, [r7, #12]
 8009d28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d36:	69da      	ldr	r2, [r3, #28]
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	f003 030f 	and.w	r3, r3, #15
 8009d40:	2101      	movs	r1, #1
 8009d42:	fa01 f303 	lsl.w	r3, r1, r3
 8009d46:	041b      	lsls	r3, r3, #16
 8009d48:	43db      	mvns	r3, r3
 8009d4a:	68f9      	ldr	r1, [r7, #12]
 8009d4c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d50:	4013      	ands	r3, r2
 8009d52:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d60:	681a      	ldr	r2, [r3, #0]
 8009d62:	68bb      	ldr	r3, [r7, #8]
 8009d64:	0159      	lsls	r1, r3, #5
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	440b      	add	r3, r1
 8009d6a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d6e:	4619      	mov	r1, r3
 8009d70:	4b05      	ldr	r3, [pc, #20]	@ (8009d88 <USB_DeactivateEndpoint+0x1b4>)
 8009d72:	4013      	ands	r3, r2
 8009d74:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009d76:	2300      	movs	r3, #0
}
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3714      	adds	r7, #20
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d82:	4770      	bx	lr
 8009d84:	ec337800 	.word	0xec337800
 8009d88:	eff37800 	.word	0xeff37800

08009d8c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009d8c:	b580      	push	{r7, lr}
 8009d8e:	b08a      	sub	sp, #40	@ 0x28
 8009d90:	af02      	add	r7, sp, #8
 8009d92:	60f8      	str	r0, [r7, #12]
 8009d94:	60b9      	str	r1, [r7, #8]
 8009d96:	4613      	mov	r3, r2
 8009d98:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	785b      	ldrb	r3, [r3, #1]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	f040 817f 	bne.w	800a0ac <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	691b      	ldr	r3, [r3, #16]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d132      	bne.n	8009e1c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009db6:	69bb      	ldr	r3, [r7, #24]
 8009db8:	015a      	lsls	r2, r3, #5
 8009dba:	69fb      	ldr	r3, [r7, #28]
 8009dbc:	4413      	add	r3, r2
 8009dbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dc2:	691b      	ldr	r3, [r3, #16]
 8009dc4:	69ba      	ldr	r2, [r7, #24]
 8009dc6:	0151      	lsls	r1, r2, #5
 8009dc8:	69fa      	ldr	r2, [r7, #28]
 8009dca:	440a      	add	r2, r1
 8009dcc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dd0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009dd4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009dd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009dda:	69bb      	ldr	r3, [r7, #24]
 8009ddc:	015a      	lsls	r2, r3, #5
 8009dde:	69fb      	ldr	r3, [r7, #28]
 8009de0:	4413      	add	r3, r2
 8009de2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009de6:	691b      	ldr	r3, [r3, #16]
 8009de8:	69ba      	ldr	r2, [r7, #24]
 8009dea:	0151      	lsls	r1, r2, #5
 8009dec:	69fa      	ldr	r2, [r7, #28]
 8009dee:	440a      	add	r2, r1
 8009df0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009df4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009df8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009dfa:	69bb      	ldr	r3, [r7, #24]
 8009dfc:	015a      	lsls	r2, r3, #5
 8009dfe:	69fb      	ldr	r3, [r7, #28]
 8009e00:	4413      	add	r3, r2
 8009e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e06:	691b      	ldr	r3, [r3, #16]
 8009e08:	69ba      	ldr	r2, [r7, #24]
 8009e0a:	0151      	lsls	r1, r2, #5
 8009e0c:	69fa      	ldr	r2, [r7, #28]
 8009e0e:	440a      	add	r2, r1
 8009e10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e14:	0cdb      	lsrs	r3, r3, #19
 8009e16:	04db      	lsls	r3, r3, #19
 8009e18:	6113      	str	r3, [r2, #16]
 8009e1a:	e097      	b.n	8009f4c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009e1c:	69bb      	ldr	r3, [r7, #24]
 8009e1e:	015a      	lsls	r2, r3, #5
 8009e20:	69fb      	ldr	r3, [r7, #28]
 8009e22:	4413      	add	r3, r2
 8009e24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	69ba      	ldr	r2, [r7, #24]
 8009e2c:	0151      	lsls	r1, r2, #5
 8009e2e:	69fa      	ldr	r2, [r7, #28]
 8009e30:	440a      	add	r2, r1
 8009e32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e36:	0cdb      	lsrs	r3, r3, #19
 8009e38:	04db      	lsls	r3, r3, #19
 8009e3a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	015a      	lsls	r2, r3, #5
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	4413      	add	r3, r2
 8009e44:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	69ba      	ldr	r2, [r7, #24]
 8009e4c:	0151      	lsls	r1, r2, #5
 8009e4e:	69fa      	ldr	r2, [r7, #28]
 8009e50:	440a      	add	r2, r1
 8009e52:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e56:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009e5a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009e5e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009e60:	69bb      	ldr	r3, [r7, #24]
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d11a      	bne.n	8009e9c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	691a      	ldr	r2, [r3, #16]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	689b      	ldr	r3, [r3, #8]
 8009e6e:	429a      	cmp	r2, r3
 8009e70:	d903      	bls.n	8009e7a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009e72:	68bb      	ldr	r3, [r7, #8]
 8009e74:	689a      	ldr	r2, [r3, #8]
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009e7a:	69bb      	ldr	r3, [r7, #24]
 8009e7c:	015a      	lsls	r2, r3, #5
 8009e7e:	69fb      	ldr	r3, [r7, #28]
 8009e80:	4413      	add	r3, r2
 8009e82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	69ba      	ldr	r2, [r7, #24]
 8009e8a:	0151      	lsls	r1, r2, #5
 8009e8c:	69fa      	ldr	r2, [r7, #28]
 8009e8e:	440a      	add	r2, r1
 8009e90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009e98:	6113      	str	r3, [r2, #16]
 8009e9a:	e044      	b.n	8009f26 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	691a      	ldr	r2, [r3, #16]
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	1e5a      	subs	r2, r3, #1
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	689b      	ldr	r3, [r3, #8]
 8009eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8009eb0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009eb2:	69bb      	ldr	r3, [r7, #24]
 8009eb4:	015a      	lsls	r2, r3, #5
 8009eb6:	69fb      	ldr	r3, [r7, #28]
 8009eb8:	4413      	add	r3, r2
 8009eba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ebe:	691a      	ldr	r2, [r3, #16]
 8009ec0:	8afb      	ldrh	r3, [r7, #22]
 8009ec2:	04d9      	lsls	r1, r3, #19
 8009ec4:	4ba4      	ldr	r3, [pc, #656]	@ (800a158 <USB_EPStartXfer+0x3cc>)
 8009ec6:	400b      	ands	r3, r1
 8009ec8:	69b9      	ldr	r1, [r7, #24]
 8009eca:	0148      	lsls	r0, r1, #5
 8009ecc:	69f9      	ldr	r1, [r7, #28]
 8009ece:	4401      	add	r1, r0
 8009ed0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009ed4:	4313      	orrs	r3, r2
 8009ed6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	791b      	ldrb	r3, [r3, #4]
 8009edc:	2b01      	cmp	r3, #1
 8009ede:	d122      	bne.n	8009f26 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009ee0:	69bb      	ldr	r3, [r7, #24]
 8009ee2:	015a      	lsls	r2, r3, #5
 8009ee4:	69fb      	ldr	r3, [r7, #28]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eec:	691b      	ldr	r3, [r3, #16]
 8009eee:	69ba      	ldr	r2, [r7, #24]
 8009ef0:	0151      	lsls	r1, r2, #5
 8009ef2:	69fa      	ldr	r2, [r7, #28]
 8009ef4:	440a      	add	r2, r1
 8009ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009efa:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009efe:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009f00:	69bb      	ldr	r3, [r7, #24]
 8009f02:	015a      	lsls	r2, r3, #5
 8009f04:	69fb      	ldr	r3, [r7, #28]
 8009f06:	4413      	add	r3, r2
 8009f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f0c:	691a      	ldr	r2, [r3, #16]
 8009f0e:	8afb      	ldrh	r3, [r7, #22]
 8009f10:	075b      	lsls	r3, r3, #29
 8009f12:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009f16:	69b9      	ldr	r1, [r7, #24]
 8009f18:	0148      	lsls	r0, r1, #5
 8009f1a:	69f9      	ldr	r1, [r7, #28]
 8009f1c:	4401      	add	r1, r0
 8009f1e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f22:	4313      	orrs	r3, r2
 8009f24:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009f26:	69bb      	ldr	r3, [r7, #24]
 8009f28:	015a      	lsls	r2, r3, #5
 8009f2a:	69fb      	ldr	r3, [r7, #28]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f32:	691a      	ldr	r2, [r3, #16]
 8009f34:	68bb      	ldr	r3, [r7, #8]
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009f3c:	69b9      	ldr	r1, [r7, #24]
 8009f3e:	0148      	lsls	r0, r1, #5
 8009f40:	69f9      	ldr	r1, [r7, #28]
 8009f42:	4401      	add	r1, r0
 8009f44:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009f4c:	79fb      	ldrb	r3, [r7, #7]
 8009f4e:	2b01      	cmp	r3, #1
 8009f50:	d14b      	bne.n	8009fea <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009f52:	68bb      	ldr	r3, [r7, #8]
 8009f54:	69db      	ldr	r3, [r3, #28]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d009      	beq.n	8009f6e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009f5a:	69bb      	ldr	r3, [r7, #24]
 8009f5c:	015a      	lsls	r2, r3, #5
 8009f5e:	69fb      	ldr	r3, [r7, #28]
 8009f60:	4413      	add	r3, r2
 8009f62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f66:	461a      	mov	r2, r3
 8009f68:	68bb      	ldr	r3, [r7, #8]
 8009f6a:	69db      	ldr	r3, [r3, #28]
 8009f6c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009f6e:	68bb      	ldr	r3, [r7, #8]
 8009f70:	791b      	ldrb	r3, [r3, #4]
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d128      	bne.n	8009fc8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f76:	69fb      	ldr	r3, [r7, #28]
 8009f78:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f7c:	689b      	ldr	r3, [r3, #8]
 8009f7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d110      	bne.n	8009fa8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f86:	69bb      	ldr	r3, [r7, #24]
 8009f88:	015a      	lsls	r2, r3, #5
 8009f8a:	69fb      	ldr	r3, [r7, #28]
 8009f8c:	4413      	add	r3, r2
 8009f8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	69ba      	ldr	r2, [r7, #24]
 8009f96:	0151      	lsls	r1, r2, #5
 8009f98:	69fa      	ldr	r2, [r7, #28]
 8009f9a:	440a      	add	r2, r1
 8009f9c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fa4:	6013      	str	r3, [r2, #0]
 8009fa6:	e00f      	b.n	8009fc8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009fa8:	69bb      	ldr	r3, [r7, #24]
 8009faa:	015a      	lsls	r2, r3, #5
 8009fac:	69fb      	ldr	r3, [r7, #28]
 8009fae:	4413      	add	r3, r2
 8009fb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	69ba      	ldr	r2, [r7, #24]
 8009fb8:	0151      	lsls	r1, r2, #5
 8009fba:	69fa      	ldr	r2, [r7, #28]
 8009fbc:	440a      	add	r2, r1
 8009fbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009fc6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	015a      	lsls	r2, r3, #5
 8009fcc:	69fb      	ldr	r3, [r7, #28]
 8009fce:	4413      	add	r3, r2
 8009fd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	69ba      	ldr	r2, [r7, #24]
 8009fd8:	0151      	lsls	r1, r2, #5
 8009fda:	69fa      	ldr	r2, [r7, #28]
 8009fdc:	440a      	add	r2, r1
 8009fde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fe2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	e166      	b.n	800a2b8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009fea:	69bb      	ldr	r3, [r7, #24]
 8009fec:	015a      	lsls	r2, r3, #5
 8009fee:	69fb      	ldr	r3, [r7, #28]
 8009ff0:	4413      	add	r3, r2
 8009ff2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	69ba      	ldr	r2, [r7, #24]
 8009ffa:	0151      	lsls	r1, r2, #5
 8009ffc:	69fa      	ldr	r2, [r7, #28]
 8009ffe:	440a      	add	r2, r1
 800a000:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a004:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a008:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	791b      	ldrb	r3, [r3, #4]
 800a00e:	2b01      	cmp	r3, #1
 800a010:	d015      	beq.n	800a03e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800a012:	68bb      	ldr	r3, [r7, #8]
 800a014:	691b      	ldr	r3, [r3, #16]
 800a016:	2b00      	cmp	r3, #0
 800a018:	f000 814e 	beq.w	800a2b8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800a01c:	69fb      	ldr	r3, [r7, #28]
 800a01e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a022:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	781b      	ldrb	r3, [r3, #0]
 800a028:	f003 030f 	and.w	r3, r3, #15
 800a02c:	2101      	movs	r1, #1
 800a02e:	fa01 f303 	lsl.w	r3, r1, r3
 800a032:	69f9      	ldr	r1, [r7, #28]
 800a034:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a038:	4313      	orrs	r3, r2
 800a03a:	634b      	str	r3, [r1, #52]	@ 0x34
 800a03c:	e13c      	b.n	800a2b8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a044:	689b      	ldr	r3, [r3, #8]
 800a046:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d110      	bne.n	800a070 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800a04e:	69bb      	ldr	r3, [r7, #24]
 800a050:	015a      	lsls	r2, r3, #5
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	4413      	add	r3, r2
 800a056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	69ba      	ldr	r2, [r7, #24]
 800a05e:	0151      	lsls	r1, r2, #5
 800a060:	69fa      	ldr	r2, [r7, #28]
 800a062:	440a      	add	r2, r1
 800a064:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a068:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a06c:	6013      	str	r3, [r2, #0]
 800a06e:	e00f      	b.n	800a090 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	015a      	lsls	r2, r3, #5
 800a074:	69fb      	ldr	r3, [r7, #28]
 800a076:	4413      	add	r3, r2
 800a078:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	69ba      	ldr	r2, [r7, #24]
 800a080:	0151      	lsls	r1, r2, #5
 800a082:	69fa      	ldr	r2, [r7, #28]
 800a084:	440a      	add	r2, r1
 800a086:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a08a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a08e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	68d9      	ldr	r1, [r3, #12]
 800a094:	68bb      	ldr	r3, [r7, #8]
 800a096:	781a      	ldrb	r2, [r3, #0]
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	691b      	ldr	r3, [r3, #16]
 800a09c:	b298      	uxth	r0, r3
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	9300      	str	r3, [sp, #0]
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	68f8      	ldr	r0, [r7, #12]
 800a0a6:	f000 f9b9 	bl	800a41c <USB_WritePacket>
 800a0aa:	e105      	b.n	800a2b8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800a0ac:	69bb      	ldr	r3, [r7, #24]
 800a0ae:	015a      	lsls	r2, r3, #5
 800a0b0:	69fb      	ldr	r3, [r7, #28]
 800a0b2:	4413      	add	r3, r2
 800a0b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0b8:	691b      	ldr	r3, [r3, #16]
 800a0ba:	69ba      	ldr	r2, [r7, #24]
 800a0bc:	0151      	lsls	r1, r2, #5
 800a0be:	69fa      	ldr	r2, [r7, #28]
 800a0c0:	440a      	add	r2, r1
 800a0c2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0c6:	0cdb      	lsrs	r3, r3, #19
 800a0c8:	04db      	lsls	r3, r3, #19
 800a0ca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800a0cc:	69bb      	ldr	r3, [r7, #24]
 800a0ce:	015a      	lsls	r2, r3, #5
 800a0d0:	69fb      	ldr	r3, [r7, #28]
 800a0d2:	4413      	add	r3, r2
 800a0d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0d8:	691b      	ldr	r3, [r3, #16]
 800a0da:	69ba      	ldr	r2, [r7, #24]
 800a0dc:	0151      	lsls	r1, r2, #5
 800a0de:	69fa      	ldr	r2, [r7, #28]
 800a0e0:	440a      	add	r2, r1
 800a0e2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0e6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800a0ea:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800a0ee:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 800a0f0:	69bb      	ldr	r3, [r7, #24]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d132      	bne.n	800a15c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800a0f6:	68bb      	ldr	r3, [r7, #8]
 800a0f8:	691b      	ldr	r3, [r3, #16]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d003      	beq.n	800a106 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	689a      	ldr	r2, [r3, #8]
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800a106:	68bb      	ldr	r3, [r7, #8]
 800a108:	689a      	ldr	r2, [r3, #8]
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11a:	691a      	ldr	r2, [r3, #16]
 800a11c:	68bb      	ldr	r3, [r7, #8]
 800a11e:	6a1b      	ldr	r3, [r3, #32]
 800a120:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a124:	69b9      	ldr	r1, [r7, #24]
 800a126:	0148      	lsls	r0, r1, #5
 800a128:	69f9      	ldr	r1, [r7, #28]
 800a12a:	4401      	add	r1, r0
 800a12c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a130:	4313      	orrs	r3, r2
 800a132:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a134:	69bb      	ldr	r3, [r7, #24]
 800a136:	015a      	lsls	r2, r3, #5
 800a138:	69fb      	ldr	r3, [r7, #28]
 800a13a:	4413      	add	r3, r2
 800a13c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a140:	691b      	ldr	r3, [r3, #16]
 800a142:	69ba      	ldr	r2, [r7, #24]
 800a144:	0151      	lsls	r1, r2, #5
 800a146:	69fa      	ldr	r2, [r7, #28]
 800a148:	440a      	add	r2, r1
 800a14a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a14e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a152:	6113      	str	r3, [r2, #16]
 800a154:	e062      	b.n	800a21c <USB_EPStartXfer+0x490>
 800a156:	bf00      	nop
 800a158:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	691b      	ldr	r3, [r3, #16]
 800a160:	2b00      	cmp	r3, #0
 800a162:	d123      	bne.n	800a1ac <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a164:	69bb      	ldr	r3, [r7, #24]
 800a166:	015a      	lsls	r2, r3, #5
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	4413      	add	r3, r2
 800a16c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a170:	691a      	ldr	r2, [r3, #16]
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	689b      	ldr	r3, [r3, #8]
 800a176:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a17a:	69b9      	ldr	r1, [r7, #24]
 800a17c:	0148      	lsls	r0, r1, #5
 800a17e:	69f9      	ldr	r1, [r7, #28]
 800a180:	4401      	add	r1, r0
 800a182:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a186:	4313      	orrs	r3, r2
 800a188:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	015a      	lsls	r2, r3, #5
 800a18e:	69fb      	ldr	r3, [r7, #28]
 800a190:	4413      	add	r3, r2
 800a192:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a196:	691b      	ldr	r3, [r3, #16]
 800a198:	69ba      	ldr	r2, [r7, #24]
 800a19a:	0151      	lsls	r1, r2, #5
 800a19c:	69fa      	ldr	r2, [r7, #28]
 800a19e:	440a      	add	r2, r1
 800a1a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a1a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a1a8:	6113      	str	r3, [r2, #16]
 800a1aa:	e037      	b.n	800a21c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a1ac:	68bb      	ldr	r3, [r7, #8]
 800a1ae:	691a      	ldr	r2, [r3, #16]
 800a1b0:	68bb      	ldr	r3, [r7, #8]
 800a1b2:	689b      	ldr	r3, [r3, #8]
 800a1b4:	4413      	add	r3, r2
 800a1b6:	1e5a      	subs	r2, r3, #1
 800a1b8:	68bb      	ldr	r3, [r7, #8]
 800a1ba:	689b      	ldr	r3, [r3, #8]
 800a1bc:	fbb2 f3f3 	udiv	r3, r2, r3
 800a1c0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a1c2:	68bb      	ldr	r3, [r7, #8]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	8afa      	ldrh	r2, [r7, #22]
 800a1c8:	fb03 f202 	mul.w	r2, r3, r2
 800a1cc:	68bb      	ldr	r3, [r7, #8]
 800a1ce:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a1d0:	69bb      	ldr	r3, [r7, #24]
 800a1d2:	015a      	lsls	r2, r3, #5
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	4413      	add	r3, r2
 800a1d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a1dc:	691a      	ldr	r2, [r3, #16]
 800a1de:	8afb      	ldrh	r3, [r7, #22]
 800a1e0:	04d9      	lsls	r1, r3, #19
 800a1e2:	4b38      	ldr	r3, [pc, #224]	@ (800a2c4 <USB_EPStartXfer+0x538>)
 800a1e4:	400b      	ands	r3, r1
 800a1e6:	69b9      	ldr	r1, [r7, #24]
 800a1e8:	0148      	lsls	r0, r1, #5
 800a1ea:	69f9      	ldr	r1, [r7, #28]
 800a1ec:	4401      	add	r1, r0
 800a1ee:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a1f6:	69bb      	ldr	r3, [r7, #24]
 800a1f8:	015a      	lsls	r2, r3, #5
 800a1fa:	69fb      	ldr	r3, [r7, #28]
 800a1fc:	4413      	add	r3, r2
 800a1fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a202:	691a      	ldr	r2, [r3, #16]
 800a204:	68bb      	ldr	r3, [r7, #8]
 800a206:	6a1b      	ldr	r3, [r3, #32]
 800a208:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a20c:	69b9      	ldr	r1, [r7, #24]
 800a20e:	0148      	lsls	r0, r1, #5
 800a210:	69f9      	ldr	r1, [r7, #28]
 800a212:	4401      	add	r1, r0
 800a214:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a218:	4313      	orrs	r3, r2
 800a21a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a21c:	79fb      	ldrb	r3, [r7, #7]
 800a21e:	2b01      	cmp	r3, #1
 800a220:	d10d      	bne.n	800a23e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	2b00      	cmp	r3, #0
 800a228:	d009      	beq.n	800a23e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	68d9      	ldr	r1, [r3, #12]
 800a22e:	69bb      	ldr	r3, [r7, #24]
 800a230:	015a      	lsls	r2, r3, #5
 800a232:	69fb      	ldr	r3, [r7, #28]
 800a234:	4413      	add	r3, r2
 800a236:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a23a:	460a      	mov	r2, r1
 800a23c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	791b      	ldrb	r3, [r3, #4]
 800a242:	2b01      	cmp	r3, #1
 800a244:	d128      	bne.n	800a298 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a246:	69fb      	ldr	r3, [r7, #28]
 800a248:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a24c:	689b      	ldr	r3, [r3, #8]
 800a24e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a252:	2b00      	cmp	r3, #0
 800a254:	d110      	bne.n	800a278 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a256:	69bb      	ldr	r3, [r7, #24]
 800a258:	015a      	lsls	r2, r3, #5
 800a25a:	69fb      	ldr	r3, [r7, #28]
 800a25c:	4413      	add	r3, r2
 800a25e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	0151      	lsls	r1, r2, #5
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	440a      	add	r2, r1
 800a26c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a270:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a274:	6013      	str	r3, [r2, #0]
 800a276:	e00f      	b.n	800a298 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a278:	69bb      	ldr	r3, [r7, #24]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	69fb      	ldr	r3, [r7, #28]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69ba      	ldr	r2, [r7, #24]
 800a288:	0151      	lsls	r1, r2, #5
 800a28a:	69fa      	ldr	r2, [r7, #28]
 800a28c:	440a      	add	r2, r1
 800a28e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a292:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a296:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a298:	69bb      	ldr	r3, [r7, #24]
 800a29a:	015a      	lsls	r2, r3, #5
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	4413      	add	r3, r2
 800a2a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69ba      	ldr	r2, [r7, #24]
 800a2a8:	0151      	lsls	r1, r2, #5
 800a2aa:	69fa      	ldr	r2, [r7, #28]
 800a2ac:	440a      	add	r2, r1
 800a2ae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a2b6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a2b8:	2300      	movs	r3, #0
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3720      	adds	r7, #32
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	bf00      	nop
 800a2c4:	1ff80000 	.word	0x1ff80000

0800a2c8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	6078      	str	r0, [r7, #4]
 800a2d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a2d6:	2300      	movs	r3, #0
 800a2d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	785b      	ldrb	r3, [r3, #1]
 800a2e2:	2b01      	cmp	r3, #1
 800a2e4:	d14a      	bne.n	800a37c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a2e6:	683b      	ldr	r3, [r7, #0]
 800a2e8:	781b      	ldrb	r3, [r3, #0]
 800a2ea:	015a      	lsls	r2, r3, #5
 800a2ec:	693b      	ldr	r3, [r7, #16]
 800a2ee:	4413      	add	r3, r2
 800a2f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2fe:	f040 8086 	bne.w	800a40e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a302:	683b      	ldr	r3, [r7, #0]
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	015a      	lsls	r2, r3, #5
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	4413      	add	r3, r2
 800a30c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	683a      	ldr	r2, [r7, #0]
 800a314:	7812      	ldrb	r2, [r2, #0]
 800a316:	0151      	lsls	r1, r2, #5
 800a318:	693a      	ldr	r2, [r7, #16]
 800a31a:	440a      	add	r2, r1
 800a31c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a320:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a324:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	781b      	ldrb	r3, [r3, #0]
 800a32a:	015a      	lsls	r2, r3, #5
 800a32c:	693b      	ldr	r3, [r7, #16]
 800a32e:	4413      	add	r3, r2
 800a330:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	683a      	ldr	r2, [r7, #0]
 800a338:	7812      	ldrb	r2, [r2, #0]
 800a33a:	0151      	lsls	r1, r2, #5
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	440a      	add	r2, r1
 800a340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a344:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a348:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a34a:	68fb      	ldr	r3, [r7, #12]
 800a34c:	3301      	adds	r3, #1
 800a34e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a356:	4293      	cmp	r3, r2
 800a358:	d902      	bls.n	800a360 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a35a:	2301      	movs	r3, #1
 800a35c:	75fb      	strb	r3, [r7, #23]
          break;
 800a35e:	e056      	b.n	800a40e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	781b      	ldrb	r3, [r3, #0]
 800a364:	015a      	lsls	r2, r3, #5
 800a366:	693b      	ldr	r3, [r7, #16]
 800a368:	4413      	add	r3, r2
 800a36a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a374:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a378:	d0e7      	beq.n	800a34a <USB_EPStopXfer+0x82>
 800a37a:	e048      	b.n	800a40e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a37c:	683b      	ldr	r3, [r7, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	015a      	lsls	r2, r3, #5
 800a382:	693b      	ldr	r3, [r7, #16]
 800a384:	4413      	add	r3, r2
 800a386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a390:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a394:	d13b      	bne.n	800a40e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a396:	683b      	ldr	r3, [r7, #0]
 800a398:	781b      	ldrb	r3, [r3, #0]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	683a      	ldr	r2, [r7, #0]
 800a3a8:	7812      	ldrb	r2, [r2, #0]
 800a3aa:	0151      	lsls	r1, r2, #5
 800a3ac:	693a      	ldr	r2, [r7, #16]
 800a3ae:	440a      	add	r2, r1
 800a3b0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3b4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a3b8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	781b      	ldrb	r3, [r3, #0]
 800a3be:	015a      	lsls	r2, r3, #5
 800a3c0:	693b      	ldr	r3, [r7, #16]
 800a3c2:	4413      	add	r3, r2
 800a3c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	683a      	ldr	r2, [r7, #0]
 800a3cc:	7812      	ldrb	r2, [r2, #0]
 800a3ce:	0151      	lsls	r1, r2, #5
 800a3d0:	693a      	ldr	r2, [r7, #16]
 800a3d2:	440a      	add	r2, r1
 800a3d4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a3dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	3301      	adds	r3, #1
 800a3e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d902      	bls.n	800a3f4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	75fb      	strb	r3, [r7, #23]
          break;
 800a3f2:	e00c      	b.n	800a40e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	781b      	ldrb	r3, [r3, #0]
 800a3f8:	015a      	lsls	r2, r3, #5
 800a3fa:	693b      	ldr	r3, [r7, #16]
 800a3fc:	4413      	add	r3, r2
 800a3fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a408:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a40c:	d0e7      	beq.n	800a3de <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a410:	4618      	mov	r0, r3
 800a412:	371c      	adds	r7, #28
 800a414:	46bd      	mov	sp, r7
 800a416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a41a:	4770      	bx	lr

0800a41c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a41c:	b480      	push	{r7}
 800a41e:	b089      	sub	sp, #36	@ 0x24
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	4611      	mov	r1, r2
 800a428:	461a      	mov	r2, r3
 800a42a:	460b      	mov	r3, r1
 800a42c:	71fb      	strb	r3, [r7, #7]
 800a42e:	4613      	mov	r3, r2
 800a430:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a436:	68bb      	ldr	r3, [r7, #8]
 800a438:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a43a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d123      	bne.n	800a48a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a442:	88bb      	ldrh	r3, [r7, #4]
 800a444:	3303      	adds	r3, #3
 800a446:	089b      	lsrs	r3, r3, #2
 800a448:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a44a:	2300      	movs	r3, #0
 800a44c:	61bb      	str	r3, [r7, #24]
 800a44e:	e018      	b.n	800a482 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a450:	79fb      	ldrb	r3, [r7, #7]
 800a452:	031a      	lsls	r2, r3, #12
 800a454:	697b      	ldr	r3, [r7, #20]
 800a456:	4413      	add	r3, r2
 800a458:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a45c:	461a      	mov	r2, r3
 800a45e:	69fb      	ldr	r3, [r7, #28]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a464:	69fb      	ldr	r3, [r7, #28]
 800a466:	3301      	adds	r3, #1
 800a468:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	3301      	adds	r3, #1
 800a46e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a470:	69fb      	ldr	r3, [r7, #28]
 800a472:	3301      	adds	r3, #1
 800a474:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a476:	69fb      	ldr	r3, [r7, #28]
 800a478:	3301      	adds	r3, #1
 800a47a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a47c:	69bb      	ldr	r3, [r7, #24]
 800a47e:	3301      	adds	r3, #1
 800a480:	61bb      	str	r3, [r7, #24]
 800a482:	69ba      	ldr	r2, [r7, #24]
 800a484:	693b      	ldr	r3, [r7, #16]
 800a486:	429a      	cmp	r2, r3
 800a488:	d3e2      	bcc.n	800a450 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a48a:	2300      	movs	r3, #0
}
 800a48c:	4618      	mov	r0, r3
 800a48e:	3724      	adds	r7, #36	@ 0x24
 800a490:	46bd      	mov	sp, r7
 800a492:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a496:	4770      	bx	lr

0800a498 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a498:	b480      	push	{r7}
 800a49a:	b08b      	sub	sp, #44	@ 0x2c
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a4aa:	68bb      	ldr	r3, [r7, #8]
 800a4ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a4ae:	88fb      	ldrh	r3, [r7, #6]
 800a4b0:	089b      	lsrs	r3, r3, #2
 800a4b2:	b29b      	uxth	r3, r3
 800a4b4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a4b6:	88fb      	ldrh	r3, [r7, #6]
 800a4b8:	f003 0303 	and.w	r3, r3, #3
 800a4bc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a4be:	2300      	movs	r3, #0
 800a4c0:	623b      	str	r3, [r7, #32]
 800a4c2:	e014      	b.n	800a4ee <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a4c4:	69bb      	ldr	r3, [r7, #24]
 800a4c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4ca:	681a      	ldr	r2, [r3, #0]
 800a4cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ce:	601a      	str	r2, [r3, #0]
    pDest++;
 800a4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d2:	3301      	adds	r3, #1
 800a4d4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4d8:	3301      	adds	r3, #1
 800a4da:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	3301      	adds	r3, #1
 800a4e0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a4e8:	6a3b      	ldr	r3, [r7, #32]
 800a4ea:	3301      	adds	r3, #1
 800a4ec:	623b      	str	r3, [r7, #32]
 800a4ee:	6a3a      	ldr	r2, [r7, #32]
 800a4f0:	697b      	ldr	r3, [r7, #20]
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d3e6      	bcc.n	800a4c4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a4f6:	8bfb      	ldrh	r3, [r7, #30]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d01e      	beq.n	800a53a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a4fc:	2300      	movs	r3, #0
 800a4fe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a500:	69bb      	ldr	r3, [r7, #24]
 800a502:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a506:	461a      	mov	r2, r3
 800a508:	f107 0310 	add.w	r3, r7, #16
 800a50c:	6812      	ldr	r2, [r2, #0]
 800a50e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a510:	693a      	ldr	r2, [r7, #16]
 800a512:	6a3b      	ldr	r3, [r7, #32]
 800a514:	b2db      	uxtb	r3, r3
 800a516:	00db      	lsls	r3, r3, #3
 800a518:	fa22 f303 	lsr.w	r3, r2, r3
 800a51c:	b2da      	uxtb	r2, r3
 800a51e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a520:	701a      	strb	r2, [r3, #0]
      i++;
 800a522:	6a3b      	ldr	r3, [r7, #32]
 800a524:	3301      	adds	r3, #1
 800a526:	623b      	str	r3, [r7, #32]
      pDest++;
 800a528:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a52a:	3301      	adds	r3, #1
 800a52c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a52e:	8bfb      	ldrh	r3, [r7, #30]
 800a530:	3b01      	subs	r3, #1
 800a532:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a534:	8bfb      	ldrh	r3, [r7, #30]
 800a536:	2b00      	cmp	r3, #0
 800a538:	d1ea      	bne.n	800a510 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a53a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a53c:	4618      	mov	r0, r3
 800a53e:	372c      	adds	r7, #44	@ 0x2c
 800a540:	46bd      	mov	sp, r7
 800a542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a546:	4770      	bx	lr

0800a548 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]
 800a550:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a556:	683b      	ldr	r3, [r7, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	785b      	ldrb	r3, [r3, #1]
 800a560:	2b01      	cmp	r3, #1
 800a562:	d12c      	bne.n	800a5be <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a564:	68bb      	ldr	r3, [r7, #8]
 800a566:	015a      	lsls	r2, r3, #5
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	4413      	add	r3, r2
 800a56c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	2b00      	cmp	r3, #0
 800a574:	db12      	blt.n	800a59c <USB_EPSetStall+0x54>
 800a576:	68bb      	ldr	r3, [r7, #8]
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d00f      	beq.n	800a59c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a57c:	68bb      	ldr	r3, [r7, #8]
 800a57e:	015a      	lsls	r2, r3, #5
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	4413      	add	r3, r2
 800a584:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	0151      	lsls	r1, r2, #5
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	440a      	add	r2, r1
 800a592:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a596:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a59a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	015a      	lsls	r2, r3, #5
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	4413      	add	r3, r2
 800a5a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	68ba      	ldr	r2, [r7, #8]
 800a5ac:	0151      	lsls	r1, r2, #5
 800a5ae:	68fa      	ldr	r2, [r7, #12]
 800a5b0:	440a      	add	r2, r1
 800a5b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a5b6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a5ba:	6013      	str	r3, [r2, #0]
 800a5bc:	e02b      	b.n	800a616 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a5be:	68bb      	ldr	r3, [r7, #8]
 800a5c0:	015a      	lsls	r2, r3, #5
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	4413      	add	r3, r2
 800a5c6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	db12      	blt.n	800a5f6 <USB_EPSetStall+0xae>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b00      	cmp	r3, #0
 800a5d4:	d00f      	beq.n	800a5f6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	015a      	lsls	r2, r3, #5
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	4413      	add	r3, r2
 800a5de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	68ba      	ldr	r2, [r7, #8]
 800a5e6:	0151      	lsls	r1, r2, #5
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	440a      	add	r2, r1
 800a5ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5f0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a5f4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a5f6:	68bb      	ldr	r3, [r7, #8]
 800a5f8:	015a      	lsls	r2, r3, #5
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4413      	add	r3, r2
 800a5fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	0151      	lsls	r1, r2, #5
 800a608:	68fa      	ldr	r2, [r7, #12]
 800a60a:	440a      	add	r2, r1
 800a60c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a610:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a614:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a616:	2300      	movs	r3, #0
}
 800a618:	4618      	mov	r0, r3
 800a61a:	3714      	adds	r7, #20
 800a61c:	46bd      	mov	sp, r7
 800a61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a622:	4770      	bx	lr

0800a624 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a624:	b480      	push	{r7}
 800a626:	b085      	sub	sp, #20
 800a628:	af00      	add	r7, sp, #0
 800a62a:	6078      	str	r0, [r7, #4]
 800a62c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a632:	683b      	ldr	r3, [r7, #0]
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	785b      	ldrb	r3, [r3, #1]
 800a63c:	2b01      	cmp	r3, #1
 800a63e:	d128      	bne.n	800a692 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a640:	68bb      	ldr	r3, [r7, #8]
 800a642:	015a      	lsls	r2, r3, #5
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	4413      	add	r3, r2
 800a648:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	68ba      	ldr	r2, [r7, #8]
 800a650:	0151      	lsls	r1, r2, #5
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	440a      	add	r2, r1
 800a656:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a65a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a65e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a660:	683b      	ldr	r3, [r7, #0]
 800a662:	791b      	ldrb	r3, [r3, #4]
 800a664:	2b03      	cmp	r3, #3
 800a666:	d003      	beq.n	800a670 <USB_EPClearStall+0x4c>
 800a668:	683b      	ldr	r3, [r7, #0]
 800a66a:	791b      	ldrb	r3, [r3, #4]
 800a66c:	2b02      	cmp	r3, #2
 800a66e:	d138      	bne.n	800a6e2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a670:	68bb      	ldr	r3, [r7, #8]
 800a672:	015a      	lsls	r2, r3, #5
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	4413      	add	r3, r2
 800a678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	68ba      	ldr	r2, [r7, #8]
 800a680:	0151      	lsls	r1, r2, #5
 800a682:	68fa      	ldr	r2, [r7, #12]
 800a684:	440a      	add	r2, r1
 800a686:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a68a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a68e:	6013      	str	r3, [r2, #0]
 800a690:	e027      	b.n	800a6e2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	015a      	lsls	r2, r3, #5
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	4413      	add	r3, r2
 800a69a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	68ba      	ldr	r2, [r7, #8]
 800a6a2:	0151      	lsls	r1, r2, #5
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	440a      	add	r2, r1
 800a6a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6ac:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a6b0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	791b      	ldrb	r3, [r3, #4]
 800a6b6:	2b03      	cmp	r3, #3
 800a6b8:	d003      	beq.n	800a6c2 <USB_EPClearStall+0x9e>
 800a6ba:	683b      	ldr	r3, [r7, #0]
 800a6bc:	791b      	ldrb	r3, [r3, #4]
 800a6be:	2b02      	cmp	r3, #2
 800a6c0:	d10f      	bne.n	800a6e2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	015a      	lsls	r2, r3, #5
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	4413      	add	r3, r2
 800a6ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	68ba      	ldr	r2, [r7, #8]
 800a6d2:	0151      	lsls	r1, r2, #5
 800a6d4:	68fa      	ldr	r2, [r7, #12]
 800a6d6:	440a      	add	r2, r1
 800a6d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a6dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a6e0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr

0800a6f0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a6f0:	b480      	push	{r7}
 800a6f2:	b085      	sub	sp, #20
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	6078      	str	r0, [r7, #4]
 800a6f8:	460b      	mov	r3, r1
 800a6fa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	68fa      	ldr	r2, [r7, #12]
 800a70a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a70e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a712:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a71a:	681a      	ldr	r2, [r3, #0]
 800a71c:	78fb      	ldrb	r3, [r7, #3]
 800a71e:	011b      	lsls	r3, r3, #4
 800a720:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a724:	68f9      	ldr	r1, [r7, #12]
 800a726:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a72a:	4313      	orrs	r3, r2
 800a72c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a72e:	2300      	movs	r3, #0
}
 800a730:	4618      	mov	r0, r3
 800a732:	3714      	adds	r7, #20
 800a734:	46bd      	mov	sp, r7
 800a736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73a:	4770      	bx	lr

0800a73c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	68fa      	ldr	r2, [r7, #12]
 800a752:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a756:	f023 0303 	bic.w	r3, r3, #3
 800a75a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a762:	685b      	ldr	r3, [r3, #4]
 800a764:	68fa      	ldr	r2, [r7, #12]
 800a766:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a76a:	f023 0302 	bic.w	r3, r3, #2
 800a76e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a770:	2300      	movs	r3, #0
}
 800a772:	4618      	mov	r0, r3
 800a774:	3714      	adds	r7, #20
 800a776:	46bd      	mov	sp, r7
 800a778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a77c:	4770      	bx	lr

0800a77e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a77e:	b480      	push	{r7}
 800a780:	b085      	sub	sp, #20
 800a782:	af00      	add	r7, sp, #0
 800a784:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	68fa      	ldr	r2, [r7, #12]
 800a794:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a798:	f023 0303 	bic.w	r3, r3, #3
 800a79c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7a4:	685b      	ldr	r3, [r3, #4]
 800a7a6:	68fa      	ldr	r2, [r7, #12]
 800a7a8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a7ac:	f043 0302 	orr.w	r3, r3, #2
 800a7b0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a7b2:	2300      	movs	r3, #0
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3714      	adds	r7, #20
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7be:	4770      	bx	lr

0800a7c0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	695b      	ldr	r3, [r3, #20]
 800a7cc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	699b      	ldr	r3, [r3, #24]
 800a7d2:	68fa      	ldr	r2, [r7, #12]
 800a7d4:	4013      	ands	r3, r2
 800a7d6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a7d8:	68fb      	ldr	r3, [r7, #12]
}
 800a7da:	4618      	mov	r0, r3
 800a7dc:	3714      	adds	r7, #20
 800a7de:	46bd      	mov	sp, r7
 800a7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e4:	4770      	bx	lr

0800a7e6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7e6:	b480      	push	{r7}
 800a7e8:	b085      	sub	sp, #20
 800a7ea:	af00      	add	r7, sp, #0
 800a7ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a7f8:	699b      	ldr	r3, [r3, #24]
 800a7fa:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	68ba      	ldr	r2, [r7, #8]
 800a806:	4013      	ands	r3, r2
 800a808:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a80a:	68bb      	ldr	r3, [r7, #8]
 800a80c:	0c1b      	lsrs	r3, r3, #16
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3714      	adds	r7, #20
 800a812:	46bd      	mov	sp, r7
 800a814:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a818:	4770      	bx	lr

0800a81a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a81a:	b480      	push	{r7}
 800a81c:	b085      	sub	sp, #20
 800a81e:	af00      	add	r7, sp, #0
 800a820:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a82c:	699b      	ldr	r3, [r3, #24]
 800a82e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a836:	69db      	ldr	r3, [r3, #28]
 800a838:	68ba      	ldr	r2, [r7, #8]
 800a83a:	4013      	ands	r3, r2
 800a83c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a83e:	68bb      	ldr	r3, [r7, #8]
 800a840:	b29b      	uxth	r3, r3
}
 800a842:	4618      	mov	r0, r3
 800a844:	3714      	adds	r7, #20
 800a846:	46bd      	mov	sp, r7
 800a848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a84c:	4770      	bx	lr

0800a84e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a84e:	b480      	push	{r7}
 800a850:	b085      	sub	sp, #20
 800a852:	af00      	add	r7, sp, #0
 800a854:	6078      	str	r0, [r7, #4]
 800a856:	460b      	mov	r3, r1
 800a858:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a85e:	78fb      	ldrb	r3, [r7, #3]
 800a860:	015a      	lsls	r2, r3, #5
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	4413      	add	r3, r2
 800a866:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a86a:	689b      	ldr	r3, [r3, #8]
 800a86c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a874:	695b      	ldr	r3, [r3, #20]
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	4013      	ands	r3, r2
 800a87a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a87c:	68bb      	ldr	r3, [r7, #8]
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3714      	adds	r7, #20
 800a882:	46bd      	mov	sp, r7
 800a884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a888:	4770      	bx	lr

0800a88a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a88a:	b480      	push	{r7}
 800a88c:	b087      	sub	sp, #28
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a8ac:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a8ae:	78fb      	ldrb	r3, [r7, #3]
 800a8b0:	f003 030f 	and.w	r3, r3, #15
 800a8b4:	68fa      	ldr	r2, [r7, #12]
 800a8b6:	fa22 f303 	lsr.w	r3, r2, r3
 800a8ba:	01db      	lsls	r3, r3, #7
 800a8bc:	b2db      	uxtb	r3, r3
 800a8be:	693a      	ldr	r2, [r7, #16]
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a8c4:	78fb      	ldrb	r3, [r7, #3]
 800a8c6:	015a      	lsls	r2, r3, #5
 800a8c8:	697b      	ldr	r3, [r7, #20]
 800a8ca:	4413      	add	r3, r2
 800a8cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a8d0:	689b      	ldr	r3, [r3, #8]
 800a8d2:	693a      	ldr	r2, [r7, #16]
 800a8d4:	4013      	ands	r3, r2
 800a8d6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a8d8:	68bb      	ldr	r3, [r7, #8]
}
 800a8da:	4618      	mov	r0, r3
 800a8dc:	371c      	adds	r7, #28
 800a8de:	46bd      	mov	sp, r7
 800a8e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e4:	4770      	bx	lr

0800a8e6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a8e6:	b480      	push	{r7}
 800a8e8:	b083      	sub	sp, #12
 800a8ea:	af00      	add	r7, sp, #0
 800a8ec:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	f003 0301 	and.w	r3, r3, #1
}
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	370c      	adds	r7, #12
 800a8fa:	46bd      	mov	sp, r7
 800a8fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a900:	4770      	bx	lr

0800a902 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a902:	b480      	push	{r7}
 800a904:	b085      	sub	sp, #20
 800a906:	af00      	add	r7, sp, #0
 800a908:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a914:	681b      	ldr	r3, [r3, #0]
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a91c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a920:	f023 0307 	bic.w	r3, r3, #7
 800a924:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	68fa      	ldr	r2, [r7, #12]
 800a930:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a938:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a93a:	2300      	movs	r3, #0
}
 800a93c:	4618      	mov	r0, r3
 800a93e:	3714      	adds	r7, #20
 800a940:	46bd      	mov	sp, r7
 800a942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a946:	4770      	bx	lr

0800a948 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a948:	b480      	push	{r7}
 800a94a:	b087      	sub	sp, #28
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	60f8      	str	r0, [r7, #12]
 800a950:	460b      	mov	r3, r1
 800a952:	607a      	str	r2, [r7, #4]
 800a954:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	333c      	adds	r3, #60	@ 0x3c
 800a95e:	3304      	adds	r3, #4
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a964:	693b      	ldr	r3, [r7, #16]
 800a966:	4a26      	ldr	r2, [pc, #152]	@ (800aa00 <USB_EP0_OutStart+0xb8>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d90a      	bls.n	800a982 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a96c:	697b      	ldr	r3, [r7, #20]
 800a96e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a978:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a97c:	d101      	bne.n	800a982 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a97e:	2300      	movs	r3, #0
 800a980:	e037      	b.n	800a9f2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a982:	697b      	ldr	r3, [r7, #20]
 800a984:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a988:	461a      	mov	r2, r3
 800a98a:	2300      	movs	r3, #0
 800a98c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a98e:	697b      	ldr	r3, [r7, #20]
 800a990:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a994:	691b      	ldr	r3, [r3, #16]
 800a996:	697a      	ldr	r2, [r7, #20]
 800a998:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a99c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a9a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a9a2:	697b      	ldr	r3, [r7, #20]
 800a9a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9a8:	691b      	ldr	r3, [r3, #16]
 800a9aa:	697a      	ldr	r2, [r7, #20]
 800a9ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9b0:	f043 0318 	orr.w	r3, r3, #24
 800a9b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a9b6:	697b      	ldr	r3, [r7, #20]
 800a9b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9bc:	691b      	ldr	r3, [r3, #16]
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9c4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a9c8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	2b01      	cmp	r3, #1
 800a9ce:	d10f      	bne.n	800a9f0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9d6:	461a      	mov	r2, r3
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	697a      	ldr	r2, [r7, #20]
 800a9e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a9ea:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a9ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	371c      	adds	r7, #28
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr
 800a9fe:	bf00      	nop
 800aa00:	4f54300a 	.word	0x4f54300a

0800aa04 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800aa04:	b480      	push	{r7}
 800aa06:	b085      	sub	sp, #20
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	3301      	adds	r3, #1
 800aa14:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa16:	68fb      	ldr	r3, [r7, #12]
 800aa18:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa1c:	d901      	bls.n	800aa22 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800aa1e:	2303      	movs	r3, #3
 800aa20:	e01b      	b.n	800aa5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	daf2      	bge.n	800aa10 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	691b      	ldr	r3, [r3, #16]
 800aa32:	f043 0201 	orr.w	r2, r3, #1
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	3301      	adds	r3, #1
 800aa3e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800aa46:	d901      	bls.n	800aa4c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e006      	b.n	800aa5a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	691b      	ldr	r3, [r3, #16]
 800aa50:	f003 0301 	and.w	r3, r3, #1
 800aa54:	2b01      	cmp	r3, #1
 800aa56:	d0f0      	beq.n	800aa3a <USB_CoreReset+0x36>

  return HAL_OK;
 800aa58:	2300      	movs	r3, #0
}
 800aa5a:	4618      	mov	r0, r3
 800aa5c:	3714      	adds	r7, #20
 800aa5e:	46bd      	mov	sp, r7
 800aa60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa64:	4770      	bx	lr
	...

0800aa68 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800aa6c:	4904      	ldr	r1, [pc, #16]	@ (800aa80 <MX_FATFS_Init+0x18>)
 800aa6e:	4805      	ldr	r0, [pc, #20]	@ (800aa84 <MX_FATFS_Init+0x1c>)
 800aa70:	f003 f98c 	bl	800dd8c <FATFS_LinkDriver>
 800aa74:	4603      	mov	r3, r0
 800aa76:	461a      	mov	r2, r3
 800aa78:	4b03      	ldr	r3, [pc, #12]	@ (800aa88 <MX_FATFS_Init+0x20>)
 800aa7a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800aa7c:	bf00      	nop
 800aa7e:	bd80      	pop	{r7, pc}
 800aa80:	20000420 	.word	0x20000420
 800aa84:	20000038 	.word	0x20000038
 800aa88:	2000041c 	.word	0x2000041c

0800aa8c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800aa90:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800aa92:	4618      	mov	r0, r3
 800aa94:	46bd      	mov	sp, r7
 800aa96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa9a:	4770      	bx	lr

0800aa9c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800aa9c:	b580      	push	{r7, lr}
 800aa9e:	b082      	sub	sp, #8
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800aaa6:	79fb      	ldrb	r3, [r7, #7]
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7f5 ff71 	bl	8000990 <SD_disk_initialize>
 800aaae:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800aab0:	4618      	mov	r0, r3
 800aab2:	3708      	adds	r7, #8
 800aab4:	46bd      	mov	sp, r7
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	b082      	sub	sp, #8
 800aabc:	af00      	add	r7, sp, #0
 800aabe:	4603      	mov	r3, r0
 800aac0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800aac2:	79fb      	ldrb	r3, [r7, #7]
 800aac4:	4618      	mov	r0, r3
 800aac6:	f7f6 f849 	bl	8000b5c <SD_disk_status>
 800aaca:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800aacc:	4618      	mov	r0, r3
 800aace:	3708      	adds	r7, #8
 800aad0:	46bd      	mov	sp, r7
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	60b9      	str	r1, [r7, #8]
 800aadc:	607a      	str	r2, [r7, #4]
 800aade:	603b      	str	r3, [r7, #0]
 800aae0:	4603      	mov	r3, r0
 800aae2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800aae4:	7bf8      	ldrb	r0, [r7, #15]
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	687a      	ldr	r2, [r7, #4]
 800aaea:	68b9      	ldr	r1, [r7, #8]
 800aaec:	f7f6 f84c 	bl	8000b88 <SD_disk_read>
 800aaf0:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800aaf2:	4618      	mov	r0, r3
 800aaf4:	3710      	adds	r7, #16
 800aaf6:	46bd      	mov	sp, r7
 800aaf8:	bd80      	pop	{r7, pc}

0800aafa <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800aafa:	b580      	push	{r7, lr}
 800aafc:	b084      	sub	sp, #16
 800aafe:	af00      	add	r7, sp, #0
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
 800ab04:	603b      	str	r3, [r7, #0]
 800ab06:	4603      	mov	r3, r0
 800ab08:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800ab0a:	7bf8      	ldrb	r0, [r7, #15]
 800ab0c:	683b      	ldr	r3, [r7, #0]
 800ab0e:	687a      	ldr	r2, [r7, #4]
 800ab10:	68b9      	ldr	r1, [r7, #8]
 800ab12:	f7f6 f8a3 	bl	8000c5c <SD_disk_write>
 800ab16:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800ab18:	4618      	mov	r0, r3
 800ab1a:	3710      	adds	r7, #16
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	bd80      	pop	{r7, pc}

0800ab20 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800ab20:	b580      	push	{r7, lr}
 800ab22:	b082      	sub	sp, #8
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	4603      	mov	r3, r0
 800ab28:	603a      	str	r2, [r7, #0]
 800ab2a:	71fb      	strb	r3, [r7, #7]
 800ab2c:	460b      	mov	r3, r1
 800ab2e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800ab30:	79b9      	ldrb	r1, [r7, #6]
 800ab32:	79fb      	ldrb	r3, [r7, #7]
 800ab34:	683a      	ldr	r2, [r7, #0]
 800ab36:	4618      	mov	r0, r3
 800ab38:	f7f6 f914 	bl	8000d64 <SD_disk_ioctl>
 800ab3c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800ab3e:	4618      	mov	r0, r3
 800ab40:	3708      	adds	r7, #8
 800ab42:	46bd      	mov	sp, r7
 800ab44:	bd80      	pop	{r7, pc}
	...

0800ab48 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab48:	b580      	push	{r7, lr}
 800ab4a:	b084      	sub	sp, #16
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	460b      	mov	r3, r1
 800ab52:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800ab54:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800ab58:	f003 fdf4 	bl	800e744 <USBD_static_malloc>
 800ab5c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2b00      	cmp	r3, #0
 800ab62:	d109      	bne.n	800ab78 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	32b0      	adds	r2, #176	@ 0xb0
 800ab6e:	2100      	movs	r1, #0
 800ab70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800ab74:	2302      	movs	r3, #2
 800ab76:	e0d4      	b.n	800ad22 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800ab78:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	68f8      	ldr	r0, [r7, #12]
 800ab80:	f003 ffa0 	bl	800eac4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	32b0      	adds	r2, #176	@ 0xb0
 800ab8e:	68f9      	ldr	r1, [r7, #12]
 800ab90:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	32b0      	adds	r2, #176	@ 0xb0
 800ab9e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	7c1b      	ldrb	r3, [r3, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d138      	bne.n	800ac22 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800abb0:	4b5e      	ldr	r3, [pc, #376]	@ (800ad2c <USBD_CDC_Init+0x1e4>)
 800abb2:	7819      	ldrb	r1, [r3, #0]
 800abb4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abb8:	2202      	movs	r2, #2
 800abba:	6878      	ldr	r0, [r7, #4]
 800abbc:	f003 fc9f 	bl	800e4fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800abc0:	4b5a      	ldr	r3, [pc, #360]	@ (800ad2c <USBD_CDC_Init+0x1e4>)
 800abc2:	781b      	ldrb	r3, [r3, #0]
 800abc4:	f003 020f 	and.w	r2, r3, #15
 800abc8:	6879      	ldr	r1, [r7, #4]
 800abca:	4613      	mov	r3, r2
 800abcc:	009b      	lsls	r3, r3, #2
 800abce:	4413      	add	r3, r2
 800abd0:	009b      	lsls	r3, r3, #2
 800abd2:	440b      	add	r3, r1
 800abd4:	3324      	adds	r3, #36	@ 0x24
 800abd6:	2201      	movs	r2, #1
 800abd8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800abda:	4b55      	ldr	r3, [pc, #340]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800abdc:	7819      	ldrb	r1, [r3, #0]
 800abde:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe2:	2202      	movs	r2, #2
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f003 fc8a 	bl	800e4fe <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800abea:	4b51      	ldr	r3, [pc, #324]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800abec:	781b      	ldrb	r3, [r3, #0]
 800abee:	f003 020f 	and.w	r2, r3, #15
 800abf2:	6879      	ldr	r1, [r7, #4]
 800abf4:	4613      	mov	r3, r2
 800abf6:	009b      	lsls	r3, r3, #2
 800abf8:	4413      	add	r3, r2
 800abfa:	009b      	lsls	r3, r3, #2
 800abfc:	440b      	add	r3, r1
 800abfe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac02:	2201      	movs	r2, #1
 800ac04:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800ac06:	4b4b      	ldr	r3, [pc, #300]	@ (800ad34 <USBD_CDC_Init+0x1ec>)
 800ac08:	781b      	ldrb	r3, [r3, #0]
 800ac0a:	f003 020f 	and.w	r2, r3, #15
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	4613      	mov	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	4413      	add	r3, r2
 800ac16:	009b      	lsls	r3, r3, #2
 800ac18:	440b      	add	r3, r1
 800ac1a:	3326      	adds	r3, #38	@ 0x26
 800ac1c:	2210      	movs	r2, #16
 800ac1e:	801a      	strh	r2, [r3, #0]
 800ac20:	e035      	b.n	800ac8e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ac22:	4b42      	ldr	r3, [pc, #264]	@ (800ad2c <USBD_CDC_Init+0x1e4>)
 800ac24:	7819      	ldrb	r1, [r3, #0]
 800ac26:	2340      	movs	r3, #64	@ 0x40
 800ac28:	2202      	movs	r2, #2
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f003 fc67 	bl	800e4fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ac30:	4b3e      	ldr	r3, [pc, #248]	@ (800ad2c <USBD_CDC_Init+0x1e4>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 020f 	and.w	r2, r3, #15
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	3324      	adds	r3, #36	@ 0x24
 800ac46:	2201      	movs	r2, #1
 800ac48:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ac4a:	4b39      	ldr	r3, [pc, #228]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800ac4c:	7819      	ldrb	r1, [r3, #0]
 800ac4e:	2340      	movs	r3, #64	@ 0x40
 800ac50:	2202      	movs	r2, #2
 800ac52:	6878      	ldr	r0, [r7, #4]
 800ac54:	f003 fc53 	bl	800e4fe <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ac58:	4b35      	ldr	r3, [pc, #212]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800ac5a:	781b      	ldrb	r3, [r3, #0]
 800ac5c:	f003 020f 	and.w	r2, r3, #15
 800ac60:	6879      	ldr	r1, [r7, #4]
 800ac62:	4613      	mov	r3, r2
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4413      	add	r3, r2
 800ac68:	009b      	lsls	r3, r3, #2
 800ac6a:	440b      	add	r3, r1
 800ac6c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac70:	2201      	movs	r2, #1
 800ac72:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ac74:	4b2f      	ldr	r3, [pc, #188]	@ (800ad34 <USBD_CDC_Init+0x1ec>)
 800ac76:	781b      	ldrb	r3, [r3, #0]
 800ac78:	f003 020f 	and.w	r2, r3, #15
 800ac7c:	6879      	ldr	r1, [r7, #4]
 800ac7e:	4613      	mov	r3, r2
 800ac80:	009b      	lsls	r3, r3, #2
 800ac82:	4413      	add	r3, r2
 800ac84:	009b      	lsls	r3, r3, #2
 800ac86:	440b      	add	r3, r1
 800ac88:	3326      	adds	r3, #38	@ 0x26
 800ac8a:	2210      	movs	r2, #16
 800ac8c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ac8e:	4b29      	ldr	r3, [pc, #164]	@ (800ad34 <USBD_CDC_Init+0x1ec>)
 800ac90:	7819      	ldrb	r1, [r3, #0]
 800ac92:	2308      	movs	r3, #8
 800ac94:	2203      	movs	r2, #3
 800ac96:	6878      	ldr	r0, [r7, #4]
 800ac98:	f003 fc31 	bl	800e4fe <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ac9c:	4b25      	ldr	r3, [pc, #148]	@ (800ad34 <USBD_CDC_Init+0x1ec>)
 800ac9e:	781b      	ldrb	r3, [r3, #0]
 800aca0:	f003 020f 	and.w	r2, r3, #15
 800aca4:	6879      	ldr	r1, [r7, #4]
 800aca6:	4613      	mov	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	4413      	add	r3, r2
 800acac:	009b      	lsls	r3, r3, #2
 800acae:	440b      	add	r3, r1
 800acb0:	3324      	adds	r3, #36	@ 0x24
 800acb2:	2201      	movs	r2, #1
 800acb4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800acb6:	68fb      	ldr	r3, [r7, #12]
 800acb8:	2200      	movs	r2, #0
 800acba:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acc4:	687a      	ldr	r2, [r7, #4]
 800acc6:	33b0      	adds	r3, #176	@ 0xb0
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	4413      	add	r3, r2
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	2200      	movs	r2, #0
 800acd6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	2200      	movs	r2, #0
 800acde:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800ace2:	68fb      	ldr	r3, [r7, #12]
 800ace4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d101      	bne.n	800acf0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800acec:	2302      	movs	r3, #2
 800acee:	e018      	b.n	800ad22 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	7c1b      	ldrb	r3, [r3, #16]
 800acf4:	2b00      	cmp	r3, #0
 800acf6:	d10a      	bne.n	800ad0e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800acf8:	4b0d      	ldr	r3, [pc, #52]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800acfa:	7819      	ldrb	r1, [r3, #0]
 800acfc:	68fb      	ldr	r3, [r7, #12]
 800acfe:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad02:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	f003 fce8 	bl	800e6dc <USBD_LL_PrepareReceive>
 800ad0c:	e008      	b.n	800ad20 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ad0e:	4b08      	ldr	r3, [pc, #32]	@ (800ad30 <USBD_CDC_Init+0x1e8>)
 800ad10:	7819      	ldrb	r1, [r3, #0]
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800ad18:	2340      	movs	r3, #64	@ 0x40
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f003 fcde 	bl	800e6dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ad20:	2300      	movs	r3, #0
}
 800ad22:	4618      	mov	r0, r3
 800ad24:	3710      	adds	r7, #16
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	200000d3 	.word	0x200000d3
 800ad30:	200000d4 	.word	0x200000d4
 800ad34:	200000d5 	.word	0x200000d5

0800ad38 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
 800ad40:	460b      	mov	r3, r1
 800ad42:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ad44:	4b3a      	ldr	r3, [pc, #232]	@ (800ae30 <USBD_CDC_DeInit+0xf8>)
 800ad46:	781b      	ldrb	r3, [r3, #0]
 800ad48:	4619      	mov	r1, r3
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f003 fbfd 	bl	800e54a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ad50:	4b37      	ldr	r3, [pc, #220]	@ (800ae30 <USBD_CDC_DeInit+0xf8>)
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	f003 020f 	and.w	r2, r3, #15
 800ad58:	6879      	ldr	r1, [r7, #4]
 800ad5a:	4613      	mov	r3, r2
 800ad5c:	009b      	lsls	r3, r3, #2
 800ad5e:	4413      	add	r3, r2
 800ad60:	009b      	lsls	r3, r3, #2
 800ad62:	440b      	add	r3, r1
 800ad64:	3324      	adds	r3, #36	@ 0x24
 800ad66:	2200      	movs	r2, #0
 800ad68:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ad6a:	4b32      	ldr	r3, [pc, #200]	@ (800ae34 <USBD_CDC_DeInit+0xfc>)
 800ad6c:	781b      	ldrb	r3, [r3, #0]
 800ad6e:	4619      	mov	r1, r3
 800ad70:	6878      	ldr	r0, [r7, #4]
 800ad72:	f003 fbea 	bl	800e54a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ad76:	4b2f      	ldr	r3, [pc, #188]	@ (800ae34 <USBD_CDC_DeInit+0xfc>)
 800ad78:	781b      	ldrb	r3, [r3, #0]
 800ad7a:	f003 020f 	and.w	r2, r3, #15
 800ad7e:	6879      	ldr	r1, [r7, #4]
 800ad80:	4613      	mov	r3, r2
 800ad82:	009b      	lsls	r3, r3, #2
 800ad84:	4413      	add	r3, r2
 800ad86:	009b      	lsls	r3, r3, #2
 800ad88:	440b      	add	r3, r1
 800ad8a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ad8e:	2200      	movs	r2, #0
 800ad90:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ad92:	4b29      	ldr	r3, [pc, #164]	@ (800ae38 <USBD_CDC_DeInit+0x100>)
 800ad94:	781b      	ldrb	r3, [r3, #0]
 800ad96:	4619      	mov	r1, r3
 800ad98:	6878      	ldr	r0, [r7, #4]
 800ad9a:	f003 fbd6 	bl	800e54a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ad9e:	4b26      	ldr	r3, [pc, #152]	@ (800ae38 <USBD_CDC_DeInit+0x100>)
 800ada0:	781b      	ldrb	r3, [r3, #0]
 800ada2:	f003 020f 	and.w	r2, r3, #15
 800ada6:	6879      	ldr	r1, [r7, #4]
 800ada8:	4613      	mov	r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4413      	add	r3, r2
 800adae:	009b      	lsls	r3, r3, #2
 800adb0:	440b      	add	r3, r1
 800adb2:	3324      	adds	r3, #36	@ 0x24
 800adb4:	2200      	movs	r2, #0
 800adb6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800adb8:	4b1f      	ldr	r3, [pc, #124]	@ (800ae38 <USBD_CDC_DeInit+0x100>)
 800adba:	781b      	ldrb	r3, [r3, #0]
 800adbc:	f003 020f 	and.w	r2, r3, #15
 800adc0:	6879      	ldr	r1, [r7, #4]
 800adc2:	4613      	mov	r3, r2
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	009b      	lsls	r3, r3, #2
 800adca:	440b      	add	r3, r1
 800adcc:	3326      	adds	r3, #38	@ 0x26
 800adce:	2200      	movs	r2, #0
 800add0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	32b0      	adds	r2, #176	@ 0xb0
 800addc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d01f      	beq.n	800ae24 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800adea:	687a      	ldr	r2, [r7, #4]
 800adec:	33b0      	adds	r3, #176	@ 0xb0
 800adee:	009b      	lsls	r3, r3, #2
 800adf0:	4413      	add	r3, r2
 800adf2:	685b      	ldr	r3, [r3, #4]
 800adf4:	685b      	ldr	r3, [r3, #4]
 800adf6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	32b0      	adds	r2, #176	@ 0xb0
 800ae02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae06:	4618      	mov	r0, r3
 800ae08:	f003 fcaa 	bl	800e760 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	32b0      	adds	r2, #176	@ 0xb0
 800ae16:	2100      	movs	r1, #0
 800ae18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	2200      	movs	r2, #0
 800ae20:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ae24:	2300      	movs	r3, #0
}
 800ae26:	4618      	mov	r0, r3
 800ae28:	3708      	adds	r7, #8
 800ae2a:	46bd      	mov	sp, r7
 800ae2c:	bd80      	pop	{r7, pc}
 800ae2e:	bf00      	nop
 800ae30:	200000d3 	.word	0x200000d3
 800ae34:	200000d4 	.word	0x200000d4
 800ae38:	200000d5 	.word	0x200000d5

0800ae3c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b086      	sub	sp, #24
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	6078      	str	r0, [r7, #4]
 800ae44:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	32b0      	adds	r2, #176	@ 0xb0
 800ae50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae54:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ae56:	2300      	movs	r3, #0
 800ae58:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ae5a:	2300      	movs	r3, #0
 800ae5c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ae5e:	2300      	movs	r3, #0
 800ae60:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ae62:	693b      	ldr	r3, [r7, #16]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d101      	bne.n	800ae6c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ae68:	2303      	movs	r3, #3
 800ae6a:	e0bf      	b.n	800afec <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	781b      	ldrb	r3, [r3, #0]
 800ae70:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d050      	beq.n	800af1a <USBD_CDC_Setup+0xde>
 800ae78:	2b20      	cmp	r3, #32
 800ae7a:	f040 80af 	bne.w	800afdc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ae7e:	683b      	ldr	r3, [r7, #0]
 800ae80:	88db      	ldrh	r3, [r3, #6]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	d03a      	beq.n	800aefc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ae86:	683b      	ldr	r3, [r7, #0]
 800ae88:	781b      	ldrb	r3, [r3, #0]
 800ae8a:	b25b      	sxtb	r3, r3
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	da1b      	bge.n	800aec8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ae96:	687a      	ldr	r2, [r7, #4]
 800ae98:	33b0      	adds	r3, #176	@ 0xb0
 800ae9a:	009b      	lsls	r3, r3, #2
 800ae9c:	4413      	add	r3, r2
 800ae9e:	685b      	ldr	r3, [r3, #4]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	683a      	ldr	r2, [r7, #0]
 800aea4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800aea6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	88d2      	ldrh	r2, [r2, #6]
 800aeac:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800aeae:	683b      	ldr	r3, [r7, #0]
 800aeb0:	88db      	ldrh	r3, [r3, #6]
 800aeb2:	2b07      	cmp	r3, #7
 800aeb4:	bf28      	it	cs
 800aeb6:	2307      	movcs	r3, #7
 800aeb8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800aeba:	693b      	ldr	r3, [r7, #16]
 800aebc:	89fa      	ldrh	r2, [r7, #14]
 800aebe:	4619      	mov	r1, r3
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f001 fd93 	bl	800c9ec <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800aec6:	e090      	b.n	800afea <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800aec8:	683b      	ldr	r3, [r7, #0]
 800aeca:	785a      	ldrb	r2, [r3, #1]
 800aecc:	693b      	ldr	r3, [r7, #16]
 800aece:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	88db      	ldrh	r3, [r3, #6]
 800aed6:	2b3f      	cmp	r3, #63	@ 0x3f
 800aed8:	d803      	bhi.n	800aee2 <USBD_CDC_Setup+0xa6>
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	b2da      	uxtb	r2, r3
 800aee0:	e000      	b.n	800aee4 <USBD_CDC_Setup+0xa8>
 800aee2:	2240      	movs	r2, #64	@ 0x40
 800aee4:	693b      	ldr	r3, [r7, #16]
 800aee6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800aeea:	6939      	ldr	r1, [r7, #16]
 800aeec:	693b      	ldr	r3, [r7, #16]
 800aeee:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800aef2:	461a      	mov	r2, r3
 800aef4:	6878      	ldr	r0, [r7, #4]
 800aef6:	f001 fda5 	bl	800ca44 <USBD_CtlPrepareRx>
      break;
 800aefa:	e076      	b.n	800afea <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af02:	687a      	ldr	r2, [r7, #4]
 800af04:	33b0      	adds	r3, #176	@ 0xb0
 800af06:	009b      	lsls	r3, r3, #2
 800af08:	4413      	add	r3, r2
 800af0a:	685b      	ldr	r3, [r3, #4]
 800af0c:	689b      	ldr	r3, [r3, #8]
 800af0e:	683a      	ldr	r2, [r7, #0]
 800af10:	7850      	ldrb	r0, [r2, #1]
 800af12:	2200      	movs	r2, #0
 800af14:	6839      	ldr	r1, [r7, #0]
 800af16:	4798      	blx	r3
      break;
 800af18:	e067      	b.n	800afea <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	785b      	ldrb	r3, [r3, #1]
 800af1e:	2b0b      	cmp	r3, #11
 800af20:	d851      	bhi.n	800afc6 <USBD_CDC_Setup+0x18a>
 800af22:	a201      	add	r2, pc, #4	@ (adr r2, 800af28 <USBD_CDC_Setup+0xec>)
 800af24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af28:	0800af59 	.word	0x0800af59
 800af2c:	0800afd5 	.word	0x0800afd5
 800af30:	0800afc7 	.word	0x0800afc7
 800af34:	0800afc7 	.word	0x0800afc7
 800af38:	0800afc7 	.word	0x0800afc7
 800af3c:	0800afc7 	.word	0x0800afc7
 800af40:	0800afc7 	.word	0x0800afc7
 800af44:	0800afc7 	.word	0x0800afc7
 800af48:	0800afc7 	.word	0x0800afc7
 800af4c:	0800afc7 	.word	0x0800afc7
 800af50:	0800af83 	.word	0x0800af83
 800af54:	0800afad 	.word	0x0800afad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af5e:	b2db      	uxtb	r3, r3
 800af60:	2b03      	cmp	r3, #3
 800af62:	d107      	bne.n	800af74 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800af64:	f107 030a 	add.w	r3, r7, #10
 800af68:	2202      	movs	r2, #2
 800af6a:	4619      	mov	r1, r3
 800af6c:	6878      	ldr	r0, [r7, #4]
 800af6e:	f001 fd3d 	bl	800c9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af72:	e032      	b.n	800afda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af74:	6839      	ldr	r1, [r7, #0]
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f001 fcbb 	bl	800c8f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800af7c:	2303      	movs	r3, #3
 800af7e:	75fb      	strb	r3, [r7, #23]
          break;
 800af80:	e02b      	b.n	800afda <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	2b03      	cmp	r3, #3
 800af8c:	d107      	bne.n	800af9e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800af8e:	f107 030d 	add.w	r3, r7, #13
 800af92:	2201      	movs	r2, #1
 800af94:	4619      	mov	r1, r3
 800af96:	6878      	ldr	r0, [r7, #4]
 800af98:	f001 fd28 	bl	800c9ec <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800af9c:	e01d      	b.n	800afda <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800af9e:	6839      	ldr	r1, [r7, #0]
 800afa0:	6878      	ldr	r0, [r7, #4]
 800afa2:	f001 fca6 	bl	800c8f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800afa6:	2303      	movs	r3, #3
 800afa8:	75fb      	strb	r3, [r7, #23]
          break;
 800afaa:	e016      	b.n	800afda <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800afb2:	b2db      	uxtb	r3, r3
 800afb4:	2b03      	cmp	r3, #3
 800afb6:	d00f      	beq.n	800afd8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f001 fc99 	bl	800c8f2 <USBD_CtlError>
            ret = USBD_FAIL;
 800afc0:	2303      	movs	r3, #3
 800afc2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800afc4:	e008      	b.n	800afd8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	6878      	ldr	r0, [r7, #4]
 800afca:	f001 fc92 	bl	800c8f2 <USBD_CtlError>
          ret = USBD_FAIL;
 800afce:	2303      	movs	r3, #3
 800afd0:	75fb      	strb	r3, [r7, #23]
          break;
 800afd2:	e002      	b.n	800afda <USBD_CDC_Setup+0x19e>
          break;
 800afd4:	bf00      	nop
 800afd6:	e008      	b.n	800afea <USBD_CDC_Setup+0x1ae>
          break;
 800afd8:	bf00      	nop
      }
      break;
 800afda:	e006      	b.n	800afea <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800afdc:	6839      	ldr	r1, [r7, #0]
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f001 fc87 	bl	800c8f2 <USBD_CtlError>
      ret = USBD_FAIL;
 800afe4:	2303      	movs	r3, #3
 800afe6:	75fb      	strb	r3, [r7, #23]
      break;
 800afe8:	bf00      	nop
  }

  return (uint8_t)ret;
 800afea:	7dfb      	ldrb	r3, [r7, #23]
}
 800afec:	4618      	mov	r0, r3
 800afee:	3718      	adds	r7, #24
 800aff0:	46bd      	mov	sp, r7
 800aff2:	bd80      	pop	{r7, pc}

0800aff4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aff4:	b580      	push	{r7, lr}
 800aff6:	b084      	sub	sp, #16
 800aff8:	af00      	add	r7, sp, #0
 800affa:	6078      	str	r0, [r7, #4]
 800affc:	460b      	mov	r3, r1
 800affe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b006:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	32b0      	adds	r2, #176	@ 0xb0
 800b012:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d101      	bne.n	800b01e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800b01a:	2303      	movs	r3, #3
 800b01c:	e065      	b.n	800b0ea <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	32b0      	adds	r2, #176	@ 0xb0
 800b028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b02c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b02e:	78fb      	ldrb	r3, [r7, #3]
 800b030:	f003 020f 	and.w	r2, r3, #15
 800b034:	6879      	ldr	r1, [r7, #4]
 800b036:	4613      	mov	r3, r2
 800b038:	009b      	lsls	r3, r3, #2
 800b03a:	4413      	add	r3, r2
 800b03c:	009b      	lsls	r3, r3, #2
 800b03e:	440b      	add	r3, r1
 800b040:	3318      	adds	r3, #24
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d02f      	beq.n	800b0a8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800b048:	78fb      	ldrb	r3, [r7, #3]
 800b04a:	f003 020f 	and.w	r2, r3, #15
 800b04e:	6879      	ldr	r1, [r7, #4]
 800b050:	4613      	mov	r3, r2
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	4413      	add	r3, r2
 800b056:	009b      	lsls	r3, r3, #2
 800b058:	440b      	add	r3, r1
 800b05a:	3318      	adds	r3, #24
 800b05c:	681a      	ldr	r2, [r3, #0]
 800b05e:	78fb      	ldrb	r3, [r7, #3]
 800b060:	f003 010f 	and.w	r1, r3, #15
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	460b      	mov	r3, r1
 800b068:	00db      	lsls	r3, r3, #3
 800b06a:	440b      	add	r3, r1
 800b06c:	009b      	lsls	r3, r3, #2
 800b06e:	4403      	add	r3, r0
 800b070:	331c      	adds	r3, #28
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	fbb2 f1f3 	udiv	r1, r2, r3
 800b078:	fb01 f303 	mul.w	r3, r1, r3
 800b07c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d112      	bne.n	800b0a8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800b082:	78fb      	ldrb	r3, [r7, #3]
 800b084:	f003 020f 	and.w	r2, r3, #15
 800b088:	6879      	ldr	r1, [r7, #4]
 800b08a:	4613      	mov	r3, r2
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	009b      	lsls	r3, r3, #2
 800b092:	440b      	add	r3, r1
 800b094:	3318      	adds	r3, #24
 800b096:	2200      	movs	r2, #0
 800b098:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800b09a:	78f9      	ldrb	r1, [r7, #3]
 800b09c:	2300      	movs	r3, #0
 800b09e:	2200      	movs	r2, #0
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	f003 fafa 	bl	800e69a <USBD_LL_Transmit>
 800b0a6:	e01f      	b.n	800b0e8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800b0a8:	68bb      	ldr	r3, [r7, #8]
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0b6:	687a      	ldr	r2, [r7, #4]
 800b0b8:	33b0      	adds	r3, #176	@ 0xb0
 800b0ba:	009b      	lsls	r3, r3, #2
 800b0bc:	4413      	add	r3, r2
 800b0be:	685b      	ldr	r3, [r3, #4]
 800b0c0:	691b      	ldr	r3, [r3, #16]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d010      	beq.n	800b0e8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b0cc:	687a      	ldr	r2, [r7, #4]
 800b0ce:	33b0      	adds	r3, #176	@ 0xb0
 800b0d0:	009b      	lsls	r3, r3, #2
 800b0d2:	4413      	add	r3, r2
 800b0d4:	685b      	ldr	r3, [r3, #4]
 800b0d6:	691b      	ldr	r3, [r3, #16]
 800b0d8:	68ba      	ldr	r2, [r7, #8]
 800b0da:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800b0de:	68ba      	ldr	r2, [r7, #8]
 800b0e0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800b0e4:	78fa      	ldrb	r2, [r7, #3]
 800b0e6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	4618      	mov	r0, r3
 800b0ec:	3710      	adds	r7, #16
 800b0ee:	46bd      	mov	sp, r7
 800b0f0:	bd80      	pop	{r7, pc}

0800b0f2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800b0f2:	b580      	push	{r7, lr}
 800b0f4:	b084      	sub	sp, #16
 800b0f6:	af00      	add	r7, sp, #0
 800b0f8:	6078      	str	r0, [r7, #4]
 800b0fa:	460b      	mov	r3, r1
 800b0fc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	32b0      	adds	r2, #176	@ 0xb0
 800b108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b10c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	32b0      	adds	r2, #176	@ 0xb0
 800b118:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d101      	bne.n	800b124 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b120:	2303      	movs	r3, #3
 800b122:	e01a      	b.n	800b15a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b124:	78fb      	ldrb	r3, [r7, #3]
 800b126:	4619      	mov	r1, r3
 800b128:	6878      	ldr	r0, [r7, #4]
 800b12a:	f003 faf8 	bl	800e71e <USBD_LL_GetRxDataSize>
 800b12e:	4602      	mov	r2, r0
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	33b0      	adds	r3, #176	@ 0xb0
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	685b      	ldr	r3, [r3, #4]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	68fa      	ldr	r2, [r7, #12]
 800b14a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b14e:	68fa      	ldr	r2, [r7, #12]
 800b150:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b154:	4611      	mov	r1, r2
 800b156:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b158:	2300      	movs	r3, #0
}
 800b15a:	4618      	mov	r0, r3
 800b15c:	3710      	adds	r7, #16
 800b15e:	46bd      	mov	sp, r7
 800b160:	bd80      	pop	{r7, pc}

0800b162 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b162:	b580      	push	{r7, lr}
 800b164:	b084      	sub	sp, #16
 800b166:	af00      	add	r7, sp, #0
 800b168:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	32b0      	adds	r2, #176	@ 0xb0
 800b174:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b178:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b180:	2303      	movs	r3, #3
 800b182:	e024      	b.n	800b1ce <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b18a:	687a      	ldr	r2, [r7, #4]
 800b18c:	33b0      	adds	r3, #176	@ 0xb0
 800b18e:	009b      	lsls	r3, r3, #2
 800b190:	4413      	add	r3, r2
 800b192:	685b      	ldr	r3, [r3, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d019      	beq.n	800b1cc <USBD_CDC_EP0_RxReady+0x6a>
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b19e:	2bff      	cmp	r3, #255	@ 0xff
 800b1a0:	d014      	beq.n	800b1cc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	33b0      	adds	r3, #176	@ 0xb0
 800b1ac:	009b      	lsls	r3, r3, #2
 800b1ae:	4413      	add	r3, r2
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	68fa      	ldr	r2, [r7, #12]
 800b1b6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b1ba:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b1bc:	68fa      	ldr	r2, [r7, #12]
 800b1be:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b1c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	22ff      	movs	r2, #255	@ 0xff
 800b1c8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b1cc:	2300      	movs	r3, #0
}
 800b1ce:	4618      	mov	r0, r3
 800b1d0:	3710      	adds	r7, #16
 800b1d2:	46bd      	mov	sp, r7
 800b1d4:	bd80      	pop	{r7, pc}
	...

0800b1d8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b1d8:	b580      	push	{r7, lr}
 800b1da:	b086      	sub	sp, #24
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1e0:	2182      	movs	r1, #130	@ 0x82
 800b1e2:	4818      	ldr	r0, [pc, #96]	@ (800b244 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1e4:	f000 fd4f 	bl	800bc86 <USBD_GetEpDesc>
 800b1e8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1ea:	2101      	movs	r1, #1
 800b1ec:	4815      	ldr	r0, [pc, #84]	@ (800b244 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1ee:	f000 fd4a 	bl	800bc86 <USBD_GetEpDesc>
 800b1f2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1f4:	2181      	movs	r1, #129	@ 0x81
 800b1f6:	4813      	ldr	r0, [pc, #76]	@ (800b244 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b1f8:	f000 fd45 	bl	800bc86 <USBD_GetEpDesc>
 800b1fc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d002      	beq.n	800b20a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2210      	movs	r2, #16
 800b208:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b20a:	693b      	ldr	r3, [r7, #16]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d006      	beq.n	800b21e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b210:	693b      	ldr	r3, [r7, #16]
 800b212:	2200      	movs	r2, #0
 800b214:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b218:	711a      	strb	r2, [r3, #4]
 800b21a:	2200      	movs	r2, #0
 800b21c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	2b00      	cmp	r3, #0
 800b222:	d006      	beq.n	800b232 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	2200      	movs	r2, #0
 800b228:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b22c:	711a      	strb	r2, [r3, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	2243      	movs	r2, #67	@ 0x43
 800b236:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b238:	4b02      	ldr	r3, [pc, #8]	@ (800b244 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b23a:	4618      	mov	r0, r3
 800b23c:	3718      	adds	r7, #24
 800b23e:	46bd      	mov	sp, r7
 800b240:	bd80      	pop	{r7, pc}
 800b242:	bf00      	nop
 800b244:	20000090 	.word	0x20000090

0800b248 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b086      	sub	sp, #24
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b250:	2182      	movs	r1, #130	@ 0x82
 800b252:	4818      	ldr	r0, [pc, #96]	@ (800b2b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b254:	f000 fd17 	bl	800bc86 <USBD_GetEpDesc>
 800b258:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b25a:	2101      	movs	r1, #1
 800b25c:	4815      	ldr	r0, [pc, #84]	@ (800b2b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b25e:	f000 fd12 	bl	800bc86 <USBD_GetEpDesc>
 800b262:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b264:	2181      	movs	r1, #129	@ 0x81
 800b266:	4813      	ldr	r0, [pc, #76]	@ (800b2b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b268:	f000 fd0d 	bl	800bc86 <USBD_GetEpDesc>
 800b26c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b26e:	697b      	ldr	r3, [r7, #20]
 800b270:	2b00      	cmp	r3, #0
 800b272:	d002      	beq.n	800b27a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b274:	697b      	ldr	r3, [r7, #20]
 800b276:	2210      	movs	r2, #16
 800b278:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b27a:	693b      	ldr	r3, [r7, #16]
 800b27c:	2b00      	cmp	r3, #0
 800b27e:	d006      	beq.n	800b28e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b280:	693b      	ldr	r3, [r7, #16]
 800b282:	2200      	movs	r2, #0
 800b284:	711a      	strb	r2, [r3, #4]
 800b286:	2200      	movs	r2, #0
 800b288:	f042 0202 	orr.w	r2, r2, #2
 800b28c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d006      	beq.n	800b2a2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	2200      	movs	r2, #0
 800b298:	711a      	strb	r2, [r3, #4]
 800b29a:	2200      	movs	r2, #0
 800b29c:	f042 0202 	orr.w	r2, r2, #2
 800b2a0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2243      	movs	r2, #67	@ 0x43
 800b2a6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b2a8:	4b02      	ldr	r3, [pc, #8]	@ (800b2b4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3718      	adds	r7, #24
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	20000090 	.word	0x20000090

0800b2b8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b086      	sub	sp, #24
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b2c0:	2182      	movs	r1, #130	@ 0x82
 800b2c2:	4818      	ldr	r0, [pc, #96]	@ (800b324 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2c4:	f000 fcdf 	bl	800bc86 <USBD_GetEpDesc>
 800b2c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b2ca:	2101      	movs	r1, #1
 800b2cc:	4815      	ldr	r0, [pc, #84]	@ (800b324 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2ce:	f000 fcda 	bl	800bc86 <USBD_GetEpDesc>
 800b2d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b2d4:	2181      	movs	r1, #129	@ 0x81
 800b2d6:	4813      	ldr	r0, [pc, #76]	@ (800b324 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b2d8:	f000 fcd5 	bl	800bc86 <USBD_GetEpDesc>
 800b2dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b2de:	697b      	ldr	r3, [r7, #20]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d002      	beq.n	800b2ea <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2210      	movs	r2, #16
 800b2e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b2ea:	693b      	ldr	r3, [r7, #16]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d006      	beq.n	800b2fe <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	2200      	movs	r2, #0
 800b2f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b2f8:	711a      	strb	r2, [r3, #4]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	2b00      	cmp	r3, #0
 800b302:	d006      	beq.n	800b312 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	2200      	movs	r2, #0
 800b308:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b30c:	711a      	strb	r2, [r3, #4]
 800b30e:	2200      	movs	r2, #0
 800b310:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	2243      	movs	r2, #67	@ 0x43
 800b316:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b318:	4b02      	ldr	r3, [pc, #8]	@ (800b324 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b31a:	4618      	mov	r0, r3
 800b31c:	3718      	adds	r7, #24
 800b31e:	46bd      	mov	sp, r7
 800b320:	bd80      	pop	{r7, pc}
 800b322:	bf00      	nop
 800b324:	20000090 	.word	0x20000090

0800b328 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b328:	b480      	push	{r7}
 800b32a:	b083      	sub	sp, #12
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	220a      	movs	r2, #10
 800b334:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b336:	4b03      	ldr	r3, [pc, #12]	@ (800b344 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b338:	4618      	mov	r0, r3
 800b33a:	370c      	adds	r7, #12
 800b33c:	46bd      	mov	sp, r7
 800b33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b342:	4770      	bx	lr
 800b344:	2000004c 	.word	0x2000004c

0800b348 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b348:	b480      	push	{r7}
 800b34a:	b083      	sub	sp, #12
 800b34c:	af00      	add	r7, sp, #0
 800b34e:	6078      	str	r0, [r7, #4]
 800b350:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d101      	bne.n	800b35c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b358:	2303      	movs	r3, #3
 800b35a:	e009      	b.n	800b370 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b35c:	687b      	ldr	r3, [r7, #4]
 800b35e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b362:	687a      	ldr	r2, [r7, #4]
 800b364:	33b0      	adds	r3, #176	@ 0xb0
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	4413      	add	r3, r2
 800b36a:	683a      	ldr	r2, [r7, #0]
 800b36c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b36e:	2300      	movs	r3, #0
}
 800b370:	4618      	mov	r0, r3
 800b372:	370c      	adds	r7, #12
 800b374:	46bd      	mov	sp, r7
 800b376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37a:	4770      	bx	lr

0800b37c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b37c:	b480      	push	{r7}
 800b37e:	b087      	sub	sp, #28
 800b380:	af00      	add	r7, sp, #0
 800b382:	60f8      	str	r0, [r7, #12]
 800b384:	60b9      	str	r1, [r7, #8]
 800b386:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	32b0      	adds	r2, #176	@ 0xb0
 800b392:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b396:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b398:	697b      	ldr	r3, [r7, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d101      	bne.n	800b3a2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b39e:	2303      	movs	r3, #3
 800b3a0:	e008      	b.n	800b3b4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b3a2:	697b      	ldr	r3, [r7, #20]
 800b3a4:	68ba      	ldr	r2, [r7, #8]
 800b3a6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b3aa:	697b      	ldr	r3, [r7, #20]
 800b3ac:	687a      	ldr	r2, [r7, #4]
 800b3ae:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b3b2:	2300      	movs	r3, #0
}
 800b3b4:	4618      	mov	r0, r3
 800b3b6:	371c      	adds	r7, #28
 800b3b8:	46bd      	mov	sp, r7
 800b3ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3be:	4770      	bx	lr

0800b3c0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
 800b3c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	32b0      	adds	r2, #176	@ 0xb0
 800b3d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3d8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	2b00      	cmp	r3, #0
 800b3de:	d101      	bne.n	800b3e4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e004      	b.n	800b3ee <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	683a      	ldr	r2, [r7, #0]
 800b3e8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b3ec:	2300      	movs	r3, #0
}
 800b3ee:	4618      	mov	r0, r3
 800b3f0:	3714      	adds	r7, #20
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f8:	4770      	bx	lr
	...

0800b3fc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b3fc:	b580      	push	{r7, lr}
 800b3fe:	b084      	sub	sp, #16
 800b400:	af00      	add	r7, sp, #0
 800b402:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	32b0      	adds	r2, #176	@ 0xb0
 800b40e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b412:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b414:	2301      	movs	r3, #1
 800b416:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b418:	68bb      	ldr	r3, [r7, #8]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d101      	bne.n	800b422 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b41e:	2303      	movs	r3, #3
 800b420:	e025      	b.n	800b46e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b422:	68bb      	ldr	r3, [r7, #8]
 800b424:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d11f      	bne.n	800b46c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b42c:	68bb      	ldr	r3, [r7, #8]
 800b42e:	2201      	movs	r2, #1
 800b430:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b434:	4b10      	ldr	r3, [pc, #64]	@ (800b478 <USBD_CDC_TransmitPacket+0x7c>)
 800b436:	781b      	ldrb	r3, [r3, #0]
 800b438:	f003 020f 	and.w	r2, r3, #15
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b442:	6878      	ldr	r0, [r7, #4]
 800b444:	4613      	mov	r3, r2
 800b446:	009b      	lsls	r3, r3, #2
 800b448:	4413      	add	r3, r2
 800b44a:	009b      	lsls	r3, r3, #2
 800b44c:	4403      	add	r3, r0
 800b44e:	3318      	adds	r3, #24
 800b450:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b452:	4b09      	ldr	r3, [pc, #36]	@ (800b478 <USBD_CDC_TransmitPacket+0x7c>)
 800b454:	7819      	ldrb	r1, [r3, #0]
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b45c:	68bb      	ldr	r3, [r7, #8]
 800b45e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b462:	6878      	ldr	r0, [r7, #4]
 800b464:	f003 f919 	bl	800e69a <USBD_LL_Transmit>

    ret = USBD_OK;
 800b468:	2300      	movs	r3, #0
 800b46a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}
 800b476:	bf00      	nop
 800b478:	200000d3 	.word	0x200000d3

0800b47c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b47c:	b580      	push	{r7, lr}
 800b47e:	b084      	sub	sp, #16
 800b480:	af00      	add	r7, sp, #0
 800b482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	32b0      	adds	r2, #176	@ 0xb0
 800b48e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b492:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b494:	687b      	ldr	r3, [r7, #4]
 800b496:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	32b0      	adds	r2, #176	@ 0xb0
 800b49e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d101      	bne.n	800b4aa <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b4a6:	2303      	movs	r3, #3
 800b4a8:	e018      	b.n	800b4dc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	7c1b      	ldrb	r3, [r3, #16]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d10a      	bne.n	800b4c8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800b4e4 <USBD_CDC_ReceivePacket+0x68>)
 800b4b4:	7819      	ldrb	r1, [r3, #0]
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b4c0:	6878      	ldr	r0, [r7, #4]
 800b4c2:	f003 f90b 	bl	800e6dc <USBD_LL_PrepareReceive>
 800b4c6:	e008      	b.n	800b4da <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b4c8:	4b06      	ldr	r3, [pc, #24]	@ (800b4e4 <USBD_CDC_ReceivePacket+0x68>)
 800b4ca:	7819      	ldrb	r1, [r3, #0]
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b4d2:	2340      	movs	r3, #64	@ 0x40
 800b4d4:	6878      	ldr	r0, [r7, #4]
 800b4d6:	f003 f901 	bl	800e6dc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b4da:	2300      	movs	r3, #0
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3710      	adds	r7, #16
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}
 800b4e4:	200000d4 	.word	0x200000d4

0800b4e8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b086      	sub	sp, #24
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	60f8      	str	r0, [r7, #12]
 800b4f0:	60b9      	str	r1, [r7, #8]
 800b4f2:	4613      	mov	r3, r2
 800b4f4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d101      	bne.n	800b500 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e01f      	b.n	800b540 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	2200      	movs	r2, #0
 800b504:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	2200      	movs	r2, #0
 800b50c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	2200      	movs	r2, #0
 800b514:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d003      	beq.n	800b526 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	68ba      	ldr	r2, [r7, #8]
 800b522:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	2201      	movs	r2, #1
 800b52a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	79fa      	ldrb	r2, [r7, #7]
 800b532:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b534:	68f8      	ldr	r0, [r7, #12]
 800b536:	f002 ff7b 	bl	800e430 <USBD_LL_Init>
 800b53a:	4603      	mov	r3, r0
 800b53c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b53e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3718      	adds	r7, #24
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e025      	b.n	800b5ac <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	683a      	ldr	r2, [r7, #0]
 800b564:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	32ae      	adds	r2, #174	@ 0xae
 800b572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d00f      	beq.n	800b59c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	32ae      	adds	r2, #174	@ 0xae
 800b586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b58c:	f107 020e 	add.w	r2, r7, #14
 800b590:	4610      	mov	r0, r2
 800b592:	4798      	blx	r3
 800b594:	4602      	mov	r2, r0
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b5a2:	1c5a      	adds	r2, r3, #1
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b5aa:	2300      	movs	r3, #0
}
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	3710      	adds	r7, #16
 800b5b0:	46bd      	mov	sp, r7
 800b5b2:	bd80      	pop	{r7, pc}

0800b5b4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b5b4:	b580      	push	{r7, lr}
 800b5b6:	b082      	sub	sp, #8
 800b5b8:	af00      	add	r7, sp, #0
 800b5ba:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f002 ff83 	bl	800e4c8 <USBD_LL_Start>
 800b5c2:	4603      	mov	r3, r0
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3708      	adds	r7, #8
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd80      	pop	{r7, pc}

0800b5cc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b083      	sub	sp, #12
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b5d4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	370c      	adds	r7, #12
 800b5da:	46bd      	mov	sp, r7
 800b5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e0:	4770      	bx	lr

0800b5e2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b084      	sub	sp, #16
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b5ee:	2300      	movs	r3, #0
 800b5f0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d009      	beq.n	800b610 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	78fa      	ldrb	r2, [r7, #3]
 800b606:	4611      	mov	r1, r2
 800b608:	6878      	ldr	r0, [r7, #4]
 800b60a:	4798      	blx	r3
 800b60c:	4603      	mov	r3, r0
 800b60e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b610:	7bfb      	ldrb	r3, [r7, #15]
}
 800b612:	4618      	mov	r0, r3
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}

0800b61a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b61a:	b580      	push	{r7, lr}
 800b61c:	b084      	sub	sp, #16
 800b61e:	af00      	add	r7, sp, #0
 800b620:	6078      	str	r0, [r7, #4]
 800b622:	460b      	mov	r3, r1
 800b624:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b626:	2300      	movs	r3, #0
 800b628:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b630:	685b      	ldr	r3, [r3, #4]
 800b632:	78fa      	ldrb	r2, [r7, #3]
 800b634:	4611      	mov	r1, r2
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	4798      	blx	r3
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d001      	beq.n	800b644 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b640:	2303      	movs	r3, #3
 800b642:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b644:	7bfb      	ldrb	r3, [r7, #15]
}
 800b646:	4618      	mov	r0, r3
 800b648:	3710      	adds	r7, #16
 800b64a:	46bd      	mov	sp, r7
 800b64c:	bd80      	pop	{r7, pc}

0800b64e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b64e:	b580      	push	{r7, lr}
 800b650:	b084      	sub	sp, #16
 800b652:	af00      	add	r7, sp, #0
 800b654:	6078      	str	r0, [r7, #4]
 800b656:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b65e:	6839      	ldr	r1, [r7, #0]
 800b660:	4618      	mov	r0, r3
 800b662:	f001 f90c 	bl	800c87e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2201      	movs	r2, #1
 800b66a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b674:	461a      	mov	r2, r3
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b682:	f003 031f 	and.w	r3, r3, #31
 800b686:	2b02      	cmp	r3, #2
 800b688:	d01a      	beq.n	800b6c0 <USBD_LL_SetupStage+0x72>
 800b68a:	2b02      	cmp	r3, #2
 800b68c:	d822      	bhi.n	800b6d4 <USBD_LL_SetupStage+0x86>
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d002      	beq.n	800b698 <USBD_LL_SetupStage+0x4a>
 800b692:	2b01      	cmp	r3, #1
 800b694:	d00a      	beq.n	800b6ac <USBD_LL_SetupStage+0x5e>
 800b696:	e01d      	b.n	800b6d4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b69e:	4619      	mov	r1, r3
 800b6a0:	6878      	ldr	r0, [r7, #4]
 800b6a2:	f000 fb63 	bl	800bd6c <USBD_StdDevReq>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	73fb      	strb	r3, [r7, #15]
      break;
 800b6aa:	e020      	b.n	800b6ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6b2:	4619      	mov	r1, r3
 800b6b4:	6878      	ldr	r0, [r7, #4]
 800b6b6:	f000 fbcb 	bl	800be50 <USBD_StdItfReq>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	73fb      	strb	r3, [r7, #15]
      break;
 800b6be:	e016      	b.n	800b6ee <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b6c6:	4619      	mov	r1, r3
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fc2d 	bl	800bf28 <USBD_StdEPReq>
 800b6ce:	4603      	mov	r3, r0
 800b6d0:	73fb      	strb	r3, [r7, #15]
      break;
 800b6d2:	e00c      	b.n	800b6ee <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b6da:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b6de:	b2db      	uxtb	r3, r3
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	6878      	ldr	r0, [r7, #4]
 800b6e4:	f002 ff50 	bl	800e588 <USBD_LL_StallEP>
 800b6e8:	4603      	mov	r3, r0
 800b6ea:	73fb      	strb	r3, [r7, #15]
      break;
 800b6ec:	bf00      	nop
  }

  return ret;
 800b6ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800b6f0:	4618      	mov	r0, r3
 800b6f2:	3710      	adds	r7, #16
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	bd80      	pop	{r7, pc}

0800b6f8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b086      	sub	sp, #24
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	60f8      	str	r0, [r7, #12]
 800b700:	460b      	mov	r3, r1
 800b702:	607a      	str	r2, [r7, #4]
 800b704:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b706:	2300      	movs	r3, #0
 800b708:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b70a:	7afb      	ldrb	r3, [r7, #11]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	d16e      	bne.n	800b7ee <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b710:	68fb      	ldr	r3, [r7, #12]
 800b712:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b716:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b71e:	2b03      	cmp	r3, #3
 800b720:	f040 8098 	bne.w	800b854 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b724:	693b      	ldr	r3, [r7, #16]
 800b726:	689a      	ldr	r2, [r3, #8]
 800b728:	693b      	ldr	r3, [r7, #16]
 800b72a:	68db      	ldr	r3, [r3, #12]
 800b72c:	429a      	cmp	r2, r3
 800b72e:	d913      	bls.n	800b758 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b730:	693b      	ldr	r3, [r7, #16]
 800b732:	689a      	ldr	r2, [r3, #8]
 800b734:	693b      	ldr	r3, [r7, #16]
 800b736:	68db      	ldr	r3, [r3, #12]
 800b738:	1ad2      	subs	r2, r2, r3
 800b73a:	693b      	ldr	r3, [r7, #16]
 800b73c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b73e:	693b      	ldr	r3, [r7, #16]
 800b740:	68da      	ldr	r2, [r3, #12]
 800b742:	693b      	ldr	r3, [r7, #16]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	4293      	cmp	r3, r2
 800b748:	bf28      	it	cs
 800b74a:	4613      	movcs	r3, r2
 800b74c:	461a      	mov	r2, r3
 800b74e:	6879      	ldr	r1, [r7, #4]
 800b750:	68f8      	ldr	r0, [r7, #12]
 800b752:	f001 f994 	bl	800ca7e <USBD_CtlContinueRx>
 800b756:	e07d      	b.n	800b854 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b75e:	f003 031f 	and.w	r3, r3, #31
 800b762:	2b02      	cmp	r3, #2
 800b764:	d014      	beq.n	800b790 <USBD_LL_DataOutStage+0x98>
 800b766:	2b02      	cmp	r3, #2
 800b768:	d81d      	bhi.n	800b7a6 <USBD_LL_DataOutStage+0xae>
 800b76a:	2b00      	cmp	r3, #0
 800b76c:	d002      	beq.n	800b774 <USBD_LL_DataOutStage+0x7c>
 800b76e:	2b01      	cmp	r3, #1
 800b770:	d003      	beq.n	800b77a <USBD_LL_DataOutStage+0x82>
 800b772:	e018      	b.n	800b7a6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b774:	2300      	movs	r3, #0
 800b776:	75bb      	strb	r3, [r7, #22]
            break;
 800b778:	e018      	b.n	800b7ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b77a:	68fb      	ldr	r3, [r7, #12]
 800b77c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b780:	b2db      	uxtb	r3, r3
 800b782:	4619      	mov	r1, r3
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f000 fa64 	bl	800bc52 <USBD_CoreFindIF>
 800b78a:	4603      	mov	r3, r0
 800b78c:	75bb      	strb	r3, [r7, #22]
            break;
 800b78e:	e00d      	b.n	800b7ac <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b796:	b2db      	uxtb	r3, r3
 800b798:	4619      	mov	r1, r3
 800b79a:	68f8      	ldr	r0, [r7, #12]
 800b79c:	f000 fa66 	bl	800bc6c <USBD_CoreFindEP>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	75bb      	strb	r3, [r7, #22]
            break;
 800b7a4:	e002      	b.n	800b7ac <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b7a6:	2300      	movs	r3, #0
 800b7a8:	75bb      	strb	r3, [r7, #22]
            break;
 800b7aa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b7ac:	7dbb      	ldrb	r3, [r7, #22]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d119      	bne.n	800b7e6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7b8:	b2db      	uxtb	r3, r3
 800b7ba:	2b03      	cmp	r3, #3
 800b7bc:	d113      	bne.n	800b7e6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b7be:	7dba      	ldrb	r2, [r7, #22]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	32ae      	adds	r2, #174	@ 0xae
 800b7c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7c8:	691b      	ldr	r3, [r3, #16]
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00b      	beq.n	800b7e6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b7ce:	7dba      	ldrb	r2, [r7, #22]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b7d6:	7dba      	ldrb	r2, [r7, #22]
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	32ae      	adds	r2, #174	@ 0xae
 800b7dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7e0:	691b      	ldr	r3, [r3, #16]
 800b7e2:	68f8      	ldr	r0, [r7, #12]
 800b7e4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b7e6:	68f8      	ldr	r0, [r7, #12]
 800b7e8:	f001 f95a 	bl	800caa0 <USBD_CtlSendStatus>
 800b7ec:	e032      	b.n	800b854 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b7ee:	7afb      	ldrb	r3, [r7, #11]
 800b7f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	4619      	mov	r1, r3
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f000 fa37 	bl	800bc6c <USBD_CoreFindEP>
 800b7fe:	4603      	mov	r3, r0
 800b800:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b802:	7dbb      	ldrb	r3, [r7, #22]
 800b804:	2bff      	cmp	r3, #255	@ 0xff
 800b806:	d025      	beq.n	800b854 <USBD_LL_DataOutStage+0x15c>
 800b808:	7dbb      	ldrb	r3, [r7, #22]
 800b80a:	2b00      	cmp	r3, #0
 800b80c:	d122      	bne.n	800b854 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b814:	b2db      	uxtb	r3, r3
 800b816:	2b03      	cmp	r3, #3
 800b818:	d117      	bne.n	800b84a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b81a:	7dba      	ldrb	r2, [r7, #22]
 800b81c:	68fb      	ldr	r3, [r7, #12]
 800b81e:	32ae      	adds	r2, #174	@ 0xae
 800b820:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b824:	699b      	ldr	r3, [r3, #24]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d00f      	beq.n	800b84a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b82a:	7dba      	ldrb	r2, [r7, #22]
 800b82c:	68fb      	ldr	r3, [r7, #12]
 800b82e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b832:	7dba      	ldrb	r2, [r7, #22]
 800b834:	68fb      	ldr	r3, [r7, #12]
 800b836:	32ae      	adds	r2, #174	@ 0xae
 800b838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b83c:	699b      	ldr	r3, [r3, #24]
 800b83e:	7afa      	ldrb	r2, [r7, #11]
 800b840:	4611      	mov	r1, r2
 800b842:	68f8      	ldr	r0, [r7, #12]
 800b844:	4798      	blx	r3
 800b846:	4603      	mov	r3, r0
 800b848:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b84a:	7dfb      	ldrb	r3, [r7, #23]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d001      	beq.n	800b854 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b850:	7dfb      	ldrb	r3, [r7, #23]
 800b852:	e000      	b.n	800b856 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b854:	2300      	movs	r3, #0
}
 800b856:	4618      	mov	r0, r3
 800b858:	3718      	adds	r7, #24
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}

0800b85e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b85e:	b580      	push	{r7, lr}
 800b860:	b086      	sub	sp, #24
 800b862:	af00      	add	r7, sp, #0
 800b864:	60f8      	str	r0, [r7, #12]
 800b866:	460b      	mov	r3, r1
 800b868:	607a      	str	r2, [r7, #4]
 800b86a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b86c:	7afb      	ldrb	r3, [r7, #11]
 800b86e:	2b00      	cmp	r3, #0
 800b870:	d16f      	bne.n	800b952 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	3314      	adds	r3, #20
 800b876:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b87e:	2b02      	cmp	r3, #2
 800b880:	d15a      	bne.n	800b938 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b882:	693b      	ldr	r3, [r7, #16]
 800b884:	689a      	ldr	r2, [r3, #8]
 800b886:	693b      	ldr	r3, [r7, #16]
 800b888:	68db      	ldr	r3, [r3, #12]
 800b88a:	429a      	cmp	r2, r3
 800b88c:	d914      	bls.n	800b8b8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b88e:	693b      	ldr	r3, [r7, #16]
 800b890:	689a      	ldr	r2, [r3, #8]
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	68db      	ldr	r3, [r3, #12]
 800b896:	1ad2      	subs	r2, r2, r3
 800b898:	693b      	ldr	r3, [r7, #16]
 800b89a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	689b      	ldr	r3, [r3, #8]
 800b8a0:	461a      	mov	r2, r3
 800b8a2:	6879      	ldr	r1, [r7, #4]
 800b8a4:	68f8      	ldr	r0, [r7, #12]
 800b8a6:	f001 f8bc 	bl	800ca22 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	2200      	movs	r2, #0
 800b8ae:	2100      	movs	r1, #0
 800b8b0:	68f8      	ldr	r0, [r7, #12]
 800b8b2:	f002 ff13 	bl	800e6dc <USBD_LL_PrepareReceive>
 800b8b6:	e03f      	b.n	800b938 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b8b8:	693b      	ldr	r3, [r7, #16]
 800b8ba:	68da      	ldr	r2, [r3, #12]
 800b8bc:	693b      	ldr	r3, [r7, #16]
 800b8be:	689b      	ldr	r3, [r3, #8]
 800b8c0:	429a      	cmp	r2, r3
 800b8c2:	d11c      	bne.n	800b8fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	685a      	ldr	r2, [r3, #4]
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d316      	bcc.n	800b8fe <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b8d0:	693b      	ldr	r3, [r7, #16]
 800b8d2:	685a      	ldr	r2, [r3, #4]
 800b8d4:	68fb      	ldr	r3, [r7, #12]
 800b8d6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b8da:	429a      	cmp	r2, r3
 800b8dc:	d20f      	bcs.n	800b8fe <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	68f8      	ldr	r0, [r7, #12]
 800b8e4:	f001 f89d 	bl	800ca22 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	68f8      	ldr	r0, [r7, #12]
 800b8f8:	f002 fef0 	bl	800e6dc <USBD_LL_PrepareReceive>
 800b8fc:	e01c      	b.n	800b938 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b904:	b2db      	uxtb	r3, r3
 800b906:	2b03      	cmp	r3, #3
 800b908:	d10f      	bne.n	800b92a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b910:	68db      	ldr	r3, [r3, #12]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d009      	beq.n	800b92a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2200      	movs	r2, #0
 800b91a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b924:	68db      	ldr	r3, [r3, #12]
 800b926:	68f8      	ldr	r0, [r7, #12]
 800b928:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b92a:	2180      	movs	r1, #128	@ 0x80
 800b92c:	68f8      	ldr	r0, [r7, #12]
 800b92e:	f002 fe2b 	bl	800e588 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b932:	68f8      	ldr	r0, [r7, #12]
 800b934:	f001 f8c7 	bl	800cac6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d03a      	beq.n	800b9b8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b942:	68f8      	ldr	r0, [r7, #12]
 800b944:	f7ff fe42 	bl	800b5cc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b948:	68fb      	ldr	r3, [r7, #12]
 800b94a:	2200      	movs	r2, #0
 800b94c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b950:	e032      	b.n	800b9b8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b952:	7afb      	ldrb	r3, [r7, #11]
 800b954:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b958:	b2db      	uxtb	r3, r3
 800b95a:	4619      	mov	r1, r3
 800b95c:	68f8      	ldr	r0, [r7, #12]
 800b95e:	f000 f985 	bl	800bc6c <USBD_CoreFindEP>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	2bff      	cmp	r3, #255	@ 0xff
 800b96a:	d025      	beq.n	800b9b8 <USBD_LL_DataInStage+0x15a>
 800b96c:	7dfb      	ldrb	r3, [r7, #23]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d122      	bne.n	800b9b8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b978:	b2db      	uxtb	r3, r3
 800b97a:	2b03      	cmp	r3, #3
 800b97c:	d11c      	bne.n	800b9b8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b97e:	7dfa      	ldrb	r2, [r7, #23]
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	32ae      	adds	r2, #174	@ 0xae
 800b984:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b988:	695b      	ldr	r3, [r3, #20]
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d014      	beq.n	800b9b8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b98e:	7dfa      	ldrb	r2, [r7, #23]
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b996:	7dfa      	ldrb	r2, [r7, #23]
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	32ae      	adds	r2, #174	@ 0xae
 800b99c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	7afa      	ldrb	r2, [r7, #11]
 800b9a4:	4611      	mov	r1, r2
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	4798      	blx	r3
 800b9aa:	4603      	mov	r3, r0
 800b9ac:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b9ae:	7dbb      	ldrb	r3, [r7, #22]
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d001      	beq.n	800b9b8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b9b4:	7dbb      	ldrb	r3, [r7, #22]
 800b9b6:	e000      	b.n	800b9ba <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b084      	sub	sp, #16
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	2201      	movs	r2, #1
 800b9d2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	2200      	movs	r2, #0
 800b9da:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b9de:	687b      	ldr	r3, [r7, #4]
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	2200      	movs	r2, #0
 800b9e8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d014      	beq.n	800ba28 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba04:	685b      	ldr	r3, [r3, #4]
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d00e      	beq.n	800ba28 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba10:	685b      	ldr	r3, [r3, #4]
 800ba12:	687a      	ldr	r2, [r7, #4]
 800ba14:	6852      	ldr	r2, [r2, #4]
 800ba16:	b2d2      	uxtb	r2, r2
 800ba18:	4611      	mov	r1, r2
 800ba1a:	6878      	ldr	r0, [r7, #4]
 800ba1c:	4798      	blx	r3
 800ba1e:	4603      	mov	r3, r0
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d001      	beq.n	800ba28 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ba24:	2303      	movs	r3, #3
 800ba26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba28:	2340      	movs	r3, #64	@ 0x40
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	2100      	movs	r1, #0
 800ba2e:	6878      	ldr	r0, [r7, #4]
 800ba30:	f002 fd65 	bl	800e4fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2201      	movs	r2, #1
 800ba38:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2240      	movs	r2, #64	@ 0x40
 800ba40:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ba44:	2340      	movs	r3, #64	@ 0x40
 800ba46:	2200      	movs	r2, #0
 800ba48:	2180      	movs	r1, #128	@ 0x80
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f002 fd57 	bl	800e4fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	2201      	movs	r2, #1
 800ba54:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	2240      	movs	r2, #64	@ 0x40
 800ba5a:	621a      	str	r2, [r3, #32]

  return ret;
 800ba5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba5e:	4618      	mov	r0, r3
 800ba60:	3710      	adds	r7, #16
 800ba62:	46bd      	mov	sp, r7
 800ba64:	bd80      	pop	{r7, pc}

0800ba66 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ba66:	b480      	push	{r7}
 800ba68:	b083      	sub	sp, #12
 800ba6a:	af00      	add	r7, sp, #0
 800ba6c:	6078      	str	r0, [r7, #4]
 800ba6e:	460b      	mov	r3, r1
 800ba70:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	78fa      	ldrb	r2, [r7, #3]
 800ba76:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ba78:	2300      	movs	r3, #0
}
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	370c      	adds	r7, #12
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba84:	4770      	bx	lr

0800ba86 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba94:	b2db      	uxtb	r3, r3
 800ba96:	2b04      	cmp	r3, #4
 800ba98:	d006      	beq.n	800baa8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800baa0:	b2da      	uxtb	r2, r3
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	2204      	movs	r2, #4
 800baac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bacc:	b2db      	uxtb	r3, r3
 800bace:	2b04      	cmp	r3, #4
 800bad0:	d106      	bne.n	800bae0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800bad8:	b2da      	uxtb	r2, r3
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800bae0:	2300      	movs	r3, #0
}
 800bae2:	4618      	mov	r0, r3
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr

0800baee <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800baee:	b580      	push	{r7, lr}
 800baf0:	b082      	sub	sp, #8
 800baf2:	af00      	add	r7, sp, #0
 800baf4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d110      	bne.n	800bb24 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d00b      	beq.n	800bb24 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb12:	69db      	ldr	r3, [r3, #28]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d005      	beq.n	800bb24 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb1e:	69db      	ldr	r3, [r3, #28]
 800bb20:	6878      	ldr	r0, [r7, #4]
 800bb22:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	3708      	adds	r7, #8
 800bb2a:	46bd      	mov	sp, r7
 800bb2c:	bd80      	pop	{r7, pc}

0800bb2e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800bb2e:	b580      	push	{r7, lr}
 800bb30:	b082      	sub	sp, #8
 800bb32:	af00      	add	r7, sp, #0
 800bb34:	6078      	str	r0, [r7, #4]
 800bb36:	460b      	mov	r3, r1
 800bb38:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	32ae      	adds	r2, #174	@ 0xae
 800bb44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb48:	2b00      	cmp	r3, #0
 800bb4a:	d101      	bne.n	800bb50 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800bb4c:	2303      	movs	r3, #3
 800bb4e:	e01c      	b.n	800bb8a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb56:	b2db      	uxtb	r3, r3
 800bb58:	2b03      	cmp	r3, #3
 800bb5a:	d115      	bne.n	800bb88 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	32ae      	adds	r2, #174	@ 0xae
 800bb66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb6a:	6a1b      	ldr	r3, [r3, #32]
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	d00b      	beq.n	800bb88 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800bb70:	687b      	ldr	r3, [r7, #4]
 800bb72:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	32ae      	adds	r2, #174	@ 0xae
 800bb7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bb7e:	6a1b      	ldr	r3, [r3, #32]
 800bb80:	78fa      	ldrb	r2, [r7, #3]
 800bb82:	4611      	mov	r1, r2
 800bb84:	6878      	ldr	r0, [r7, #4]
 800bb86:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bb88:	2300      	movs	r3, #0
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3708      	adds	r7, #8
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b082      	sub	sp, #8
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	6078      	str	r0, [r7, #4]
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	32ae      	adds	r2, #174	@ 0xae
 800bba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d101      	bne.n	800bbb4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800bbb0:	2303      	movs	r3, #3
 800bbb2:	e01c      	b.n	800bbee <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bbba:	b2db      	uxtb	r3, r3
 800bbbc:	2b03      	cmp	r3, #3
 800bbbe:	d115      	bne.n	800bbec <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	32ae      	adds	r2, #174	@ 0xae
 800bbca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	d00b      	beq.n	800bbec <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	32ae      	adds	r2, #174	@ 0xae
 800bbde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbe4:	78fa      	ldrb	r2, [r7, #3]
 800bbe6:	4611      	mov	r1, r2
 800bbe8:	6878      	ldr	r0, [r7, #4]
 800bbea:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bbec:	2300      	movs	r3, #0
}
 800bbee:	4618      	mov	r0, r3
 800bbf0:	3708      	adds	r7, #8
 800bbf2:	46bd      	mov	sp, r7
 800bbf4:	bd80      	pop	{r7, pc}

0800bbf6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b083      	sub	sp, #12
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bbfe:	2300      	movs	r3, #0
}
 800bc00:	4618      	mov	r0, r3
 800bc02:	370c      	adds	r7, #12
 800bc04:	46bd      	mov	sp, r7
 800bc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0a:	4770      	bx	lr

0800bc0c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b084      	sub	sp, #16
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800bc14:	2300      	movs	r3, #0
 800bc16:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	2201      	movs	r2, #1
 800bc1c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d00e      	beq.n	800bc48 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bc30:	685b      	ldr	r3, [r3, #4]
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	6852      	ldr	r2, [r2, #4]
 800bc36:	b2d2      	uxtb	r2, r2
 800bc38:	4611      	mov	r1, r2
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
 800bc3e:	4603      	mov	r3, r0
 800bc40:	2b00      	cmp	r3, #0
 800bc42:	d001      	beq.n	800bc48 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bc44:	2303      	movs	r3, #3
 800bc46:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bc48:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc52:	b480      	push	{r7}
 800bc54:	b083      	sub	sp, #12
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	460b      	mov	r3, r1
 800bc5c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc5e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b083      	sub	sp, #12
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
 800bc74:	460b      	mov	r3, r1
 800bc76:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bc78:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bc7a:	4618      	mov	r0, r3
 800bc7c:	370c      	adds	r7, #12
 800bc7e:	46bd      	mov	sp, r7
 800bc80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc84:	4770      	bx	lr

0800bc86 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bc86:	b580      	push	{r7, lr}
 800bc88:	b086      	sub	sp, #24
 800bc8a:	af00      	add	r7, sp, #0
 800bc8c:	6078      	str	r0, [r7, #4]
 800bc8e:	460b      	mov	r3, r1
 800bc90:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	885b      	ldrh	r3, [r3, #2]
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	68fa      	ldr	r2, [r7, #12]
 800bca6:	7812      	ldrb	r2, [r2, #0]
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d91f      	bls.n	800bcec <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bcac:	68fb      	ldr	r3, [r7, #12]
 800bcae:	781b      	ldrb	r3, [r3, #0]
 800bcb0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bcb2:	e013      	b.n	800bcdc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bcb4:	f107 030a 	add.w	r3, r7, #10
 800bcb8:	4619      	mov	r1, r3
 800bcba:	6978      	ldr	r0, [r7, #20]
 800bcbc:	f000 f81b 	bl	800bcf6 <USBD_GetNextDesc>
 800bcc0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bcc2:	697b      	ldr	r3, [r7, #20]
 800bcc4:	785b      	ldrb	r3, [r3, #1]
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	d108      	bne.n	800bcdc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	789b      	ldrb	r3, [r3, #2]
 800bcd2:	78fa      	ldrb	r2, [r7, #3]
 800bcd4:	429a      	cmp	r2, r3
 800bcd6:	d008      	beq.n	800bcea <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bcd8:	2300      	movs	r3, #0
 800bcda:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	885b      	ldrh	r3, [r3, #2]
 800bce0:	b29a      	uxth	r2, r3
 800bce2:	897b      	ldrh	r3, [r7, #10]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d8e5      	bhi.n	800bcb4 <USBD_GetEpDesc+0x2e>
 800bce8:	e000      	b.n	800bcec <USBD_GetEpDesc+0x66>
          break;
 800bcea:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bcec:	693b      	ldr	r3, [r7, #16]
}
 800bcee:	4618      	mov	r0, r3
 800bcf0:	3718      	adds	r7, #24
 800bcf2:	46bd      	mov	sp, r7
 800bcf4:	bd80      	pop	{r7, pc}

0800bcf6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bcf6:	b480      	push	{r7}
 800bcf8:	b085      	sub	sp, #20
 800bcfa:	af00      	add	r7, sp, #0
 800bcfc:	6078      	str	r0, [r7, #4]
 800bcfe:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bd04:	683b      	ldr	r3, [r7, #0]
 800bd06:	881b      	ldrh	r3, [r3, #0]
 800bd08:	68fa      	ldr	r2, [r7, #12]
 800bd0a:	7812      	ldrb	r2, [r2, #0]
 800bd0c:	4413      	add	r3, r2
 800bd0e:	b29a      	uxth	r2, r3
 800bd10:	683b      	ldr	r3, [r7, #0]
 800bd12:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	781b      	ldrb	r3, [r3, #0]
 800bd18:	461a      	mov	r2, r3
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	4413      	add	r3, r2
 800bd1e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bd20:	68fb      	ldr	r3, [r7, #12]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3714      	adds	r7, #20
 800bd26:	46bd      	mov	sp, r7
 800bd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2c:	4770      	bx	lr

0800bd2e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bd2e:	b480      	push	{r7}
 800bd30:	b087      	sub	sp, #28
 800bd32:	af00      	add	r7, sp, #0
 800bd34:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bd3a:	697b      	ldr	r3, [r7, #20]
 800bd3c:	781b      	ldrb	r3, [r3, #0]
 800bd3e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	3301      	adds	r3, #1
 800bd44:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	781b      	ldrb	r3, [r3, #0]
 800bd4a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bd4c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bd50:	021b      	lsls	r3, r3, #8
 800bd52:	b21a      	sxth	r2, r3
 800bd54:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bd58:	4313      	orrs	r3, r2
 800bd5a:	b21b      	sxth	r3, r3
 800bd5c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bd5e:	89fb      	ldrh	r3, [r7, #14]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	371c      	adds	r7, #28
 800bd64:	46bd      	mov	sp, r7
 800bd66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd6a:	4770      	bx	lr

0800bd6c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd6c:	b580      	push	{r7, lr}
 800bd6e:	b084      	sub	sp, #16
 800bd70:	af00      	add	r7, sp, #0
 800bd72:	6078      	str	r0, [r7, #4]
 800bd74:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd76:	2300      	movs	r3, #0
 800bd78:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd7a:	683b      	ldr	r3, [r7, #0]
 800bd7c:	781b      	ldrb	r3, [r3, #0]
 800bd7e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd82:	2b40      	cmp	r3, #64	@ 0x40
 800bd84:	d005      	beq.n	800bd92 <USBD_StdDevReq+0x26>
 800bd86:	2b40      	cmp	r3, #64	@ 0x40
 800bd88:	d857      	bhi.n	800be3a <USBD_StdDevReq+0xce>
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d00f      	beq.n	800bdae <USBD_StdDevReq+0x42>
 800bd8e:	2b20      	cmp	r3, #32
 800bd90:	d153      	bne.n	800be3a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	32ae      	adds	r2, #174	@ 0xae
 800bd9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bda0:	689b      	ldr	r3, [r3, #8]
 800bda2:	6839      	ldr	r1, [r7, #0]
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	4798      	blx	r3
 800bda8:	4603      	mov	r3, r0
 800bdaa:	73fb      	strb	r3, [r7, #15]
      break;
 800bdac:	e04a      	b.n	800be44 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	785b      	ldrb	r3, [r3, #1]
 800bdb2:	2b09      	cmp	r3, #9
 800bdb4:	d83b      	bhi.n	800be2e <USBD_StdDevReq+0xc2>
 800bdb6:	a201      	add	r2, pc, #4	@ (adr r2, 800bdbc <USBD_StdDevReq+0x50>)
 800bdb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdbc:	0800be11 	.word	0x0800be11
 800bdc0:	0800be25 	.word	0x0800be25
 800bdc4:	0800be2f 	.word	0x0800be2f
 800bdc8:	0800be1b 	.word	0x0800be1b
 800bdcc:	0800be2f 	.word	0x0800be2f
 800bdd0:	0800bdef 	.word	0x0800bdef
 800bdd4:	0800bde5 	.word	0x0800bde5
 800bdd8:	0800be2f 	.word	0x0800be2f
 800bddc:	0800be07 	.word	0x0800be07
 800bde0:	0800bdf9 	.word	0x0800bdf9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bde4:	6839      	ldr	r1, [r7, #0]
 800bde6:	6878      	ldr	r0, [r7, #4]
 800bde8:	f000 fa3c 	bl	800c264 <USBD_GetDescriptor>
          break;
 800bdec:	e024      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bdee:	6839      	ldr	r1, [r7, #0]
 800bdf0:	6878      	ldr	r0, [r7, #4]
 800bdf2:	f000 fba1 	bl	800c538 <USBD_SetAddress>
          break;
 800bdf6:	e01f      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bdf8:	6839      	ldr	r1, [r7, #0]
 800bdfa:	6878      	ldr	r0, [r7, #4]
 800bdfc:	f000 fbe0 	bl	800c5c0 <USBD_SetConfig>
 800be00:	4603      	mov	r3, r0
 800be02:	73fb      	strb	r3, [r7, #15]
          break;
 800be04:	e018      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800be06:	6839      	ldr	r1, [r7, #0]
 800be08:	6878      	ldr	r0, [r7, #4]
 800be0a:	f000 fc83 	bl	800c714 <USBD_GetConfig>
          break;
 800be0e:	e013      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800be10:	6839      	ldr	r1, [r7, #0]
 800be12:	6878      	ldr	r0, [r7, #4]
 800be14:	f000 fcb4 	bl	800c780 <USBD_GetStatus>
          break;
 800be18:	e00e      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800be1a:	6839      	ldr	r1, [r7, #0]
 800be1c:	6878      	ldr	r0, [r7, #4]
 800be1e:	f000 fce3 	bl	800c7e8 <USBD_SetFeature>
          break;
 800be22:	e009      	b.n	800be38 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800be24:	6839      	ldr	r1, [r7, #0]
 800be26:	6878      	ldr	r0, [r7, #4]
 800be28:	f000 fd07 	bl	800c83a <USBD_ClrFeature>
          break;
 800be2c:	e004      	b.n	800be38 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800be2e:	6839      	ldr	r1, [r7, #0]
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f000 fd5e 	bl	800c8f2 <USBD_CtlError>
          break;
 800be36:	bf00      	nop
      }
      break;
 800be38:	e004      	b.n	800be44 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800be3a:	6839      	ldr	r1, [r7, #0]
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f000 fd58 	bl	800c8f2 <USBD_CtlError>
      break;
 800be42:	bf00      	nop
  }

  return ret;
 800be44:	7bfb      	ldrb	r3, [r7, #15]
}
 800be46:	4618      	mov	r0, r3
 800be48:	3710      	adds	r7, #16
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	bf00      	nop

0800be50 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b084      	sub	sp, #16
 800be54:	af00      	add	r7, sp, #0
 800be56:	6078      	str	r0, [r7, #4]
 800be58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800be5a:	2300      	movs	r3, #0
 800be5c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be5e:	683b      	ldr	r3, [r7, #0]
 800be60:	781b      	ldrb	r3, [r3, #0]
 800be62:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be66:	2b40      	cmp	r3, #64	@ 0x40
 800be68:	d005      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be6a:	2b40      	cmp	r3, #64	@ 0x40
 800be6c:	d852      	bhi.n	800bf14 <USBD_StdItfReq+0xc4>
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d001      	beq.n	800be76 <USBD_StdItfReq+0x26>
 800be72:	2b20      	cmp	r3, #32
 800be74:	d14e      	bne.n	800bf14 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800be7c:	b2db      	uxtb	r3, r3
 800be7e:	3b01      	subs	r3, #1
 800be80:	2b02      	cmp	r3, #2
 800be82:	d840      	bhi.n	800bf06 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	889b      	ldrh	r3, [r3, #4]
 800be88:	b2db      	uxtb	r3, r3
 800be8a:	2b01      	cmp	r3, #1
 800be8c:	d836      	bhi.n	800befc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800be8e:	683b      	ldr	r3, [r7, #0]
 800be90:	889b      	ldrh	r3, [r3, #4]
 800be92:	b2db      	uxtb	r3, r3
 800be94:	4619      	mov	r1, r3
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f7ff fedb 	bl	800bc52 <USBD_CoreFindIF>
 800be9c:	4603      	mov	r3, r0
 800be9e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bea0:	7bbb      	ldrb	r3, [r7, #14]
 800bea2:	2bff      	cmp	r3, #255	@ 0xff
 800bea4:	d01d      	beq.n	800bee2 <USBD_StdItfReq+0x92>
 800bea6:	7bbb      	ldrb	r3, [r7, #14]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d11a      	bne.n	800bee2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800beac:	7bba      	ldrb	r2, [r7, #14]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	32ae      	adds	r2, #174	@ 0xae
 800beb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800beb6:	689b      	ldr	r3, [r3, #8]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	d00f      	beq.n	800bedc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bebc:	7bba      	ldrb	r2, [r7, #14]
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bec4:	7bba      	ldrb	r2, [r7, #14]
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	32ae      	adds	r2, #174	@ 0xae
 800beca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bece:	689b      	ldr	r3, [r3, #8]
 800bed0:	6839      	ldr	r1, [r7, #0]
 800bed2:	6878      	ldr	r0, [r7, #4]
 800bed4:	4798      	blx	r3
 800bed6:	4603      	mov	r3, r0
 800bed8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800beda:	e004      	b.n	800bee6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bedc:	2303      	movs	r3, #3
 800bede:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bee0:	e001      	b.n	800bee6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bee2:	2303      	movs	r3, #3
 800bee4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	88db      	ldrh	r3, [r3, #6]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d110      	bne.n	800bf10 <USBD_StdItfReq+0xc0>
 800beee:	7bfb      	ldrb	r3, [r7, #15]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d10d      	bne.n	800bf10 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bef4:	6878      	ldr	r0, [r7, #4]
 800bef6:	f000 fdd3 	bl	800caa0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800befa:	e009      	b.n	800bf10 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800befc:	6839      	ldr	r1, [r7, #0]
 800befe:	6878      	ldr	r0, [r7, #4]
 800bf00:	f000 fcf7 	bl	800c8f2 <USBD_CtlError>
          break;
 800bf04:	e004      	b.n	800bf10 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bf06:	6839      	ldr	r1, [r7, #0]
 800bf08:	6878      	ldr	r0, [r7, #4]
 800bf0a:	f000 fcf2 	bl	800c8f2 <USBD_CtlError>
          break;
 800bf0e:	e000      	b.n	800bf12 <USBD_StdItfReq+0xc2>
          break;
 800bf10:	bf00      	nop
      }
      break;
 800bf12:	e004      	b.n	800bf1e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bf14:	6839      	ldr	r1, [r7, #0]
 800bf16:	6878      	ldr	r0, [r7, #4]
 800bf18:	f000 fceb 	bl	800c8f2 <USBD_CtlError>
      break;
 800bf1c:	bf00      	nop
  }

  return ret;
 800bf1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf20:	4618      	mov	r0, r3
 800bf22:	3710      	adds	r7, #16
 800bf24:	46bd      	mov	sp, r7
 800bf26:	bd80      	pop	{r7, pc}

0800bf28 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b084      	sub	sp, #16
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800bf32:	2300      	movs	r3, #0
 800bf34:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	889b      	ldrh	r3, [r3, #4]
 800bf3a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bf3c:	683b      	ldr	r3, [r7, #0]
 800bf3e:	781b      	ldrb	r3, [r3, #0]
 800bf40:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bf44:	2b40      	cmp	r3, #64	@ 0x40
 800bf46:	d007      	beq.n	800bf58 <USBD_StdEPReq+0x30>
 800bf48:	2b40      	cmp	r3, #64	@ 0x40
 800bf4a:	f200 817f 	bhi.w	800c24c <USBD_StdEPReq+0x324>
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d02a      	beq.n	800bfa8 <USBD_StdEPReq+0x80>
 800bf52:	2b20      	cmp	r3, #32
 800bf54:	f040 817a 	bne.w	800c24c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf58:	7bbb      	ldrb	r3, [r7, #14]
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	6878      	ldr	r0, [r7, #4]
 800bf5e:	f7ff fe85 	bl	800bc6c <USBD_CoreFindEP>
 800bf62:	4603      	mov	r3, r0
 800bf64:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf66:	7b7b      	ldrb	r3, [r7, #13]
 800bf68:	2bff      	cmp	r3, #255	@ 0xff
 800bf6a:	f000 8174 	beq.w	800c256 <USBD_StdEPReq+0x32e>
 800bf6e:	7b7b      	ldrb	r3, [r7, #13]
 800bf70:	2b00      	cmp	r3, #0
 800bf72:	f040 8170 	bne.w	800c256 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800bf76:	7b7a      	ldrb	r2, [r7, #13]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800bf7e:	7b7a      	ldrb	r2, [r7, #13]
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	32ae      	adds	r2, #174	@ 0xae
 800bf84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf88:	689b      	ldr	r3, [r3, #8]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	f000 8163 	beq.w	800c256 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800bf90:	7b7a      	ldrb	r2, [r7, #13]
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	32ae      	adds	r2, #174	@ 0xae
 800bf96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	6839      	ldr	r1, [r7, #0]
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	4798      	blx	r3
 800bfa2:	4603      	mov	r3, r0
 800bfa4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800bfa6:	e156      	b.n	800c256 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bfa8:	683b      	ldr	r3, [r7, #0]
 800bfaa:	785b      	ldrb	r3, [r3, #1]
 800bfac:	2b03      	cmp	r3, #3
 800bfae:	d008      	beq.n	800bfc2 <USBD_StdEPReq+0x9a>
 800bfb0:	2b03      	cmp	r3, #3
 800bfb2:	f300 8145 	bgt.w	800c240 <USBD_StdEPReq+0x318>
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	f000 809b 	beq.w	800c0f2 <USBD_StdEPReq+0x1ca>
 800bfbc:	2b01      	cmp	r3, #1
 800bfbe:	d03c      	beq.n	800c03a <USBD_StdEPReq+0x112>
 800bfc0:	e13e      	b.n	800c240 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfc8:	b2db      	uxtb	r3, r3
 800bfca:	2b02      	cmp	r3, #2
 800bfcc:	d002      	beq.n	800bfd4 <USBD_StdEPReq+0xac>
 800bfce:	2b03      	cmp	r3, #3
 800bfd0:	d016      	beq.n	800c000 <USBD_StdEPReq+0xd8>
 800bfd2:	e02c      	b.n	800c02e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfd4:	7bbb      	ldrb	r3, [r7, #14]
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d00d      	beq.n	800bff6 <USBD_StdEPReq+0xce>
 800bfda:	7bbb      	ldrb	r3, [r7, #14]
 800bfdc:	2b80      	cmp	r3, #128	@ 0x80
 800bfde:	d00a      	beq.n	800bff6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bfe0:	7bbb      	ldrb	r3, [r7, #14]
 800bfe2:	4619      	mov	r1, r3
 800bfe4:	6878      	ldr	r0, [r7, #4]
 800bfe6:	f002 facf 	bl	800e588 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bfea:	2180      	movs	r1, #128	@ 0x80
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f002 facb 	bl	800e588 <USBD_LL_StallEP>
 800bff2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bff4:	e020      	b.n	800c038 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bff6:	6839      	ldr	r1, [r7, #0]
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f000 fc7a 	bl	800c8f2 <USBD_CtlError>
              break;
 800bffe:	e01b      	b.n	800c038 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	885b      	ldrh	r3, [r3, #2]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10e      	bne.n	800c026 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800c008:	7bbb      	ldrb	r3, [r7, #14]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d00b      	beq.n	800c026 <USBD_StdEPReq+0xfe>
 800c00e:	7bbb      	ldrb	r3, [r7, #14]
 800c010:	2b80      	cmp	r3, #128	@ 0x80
 800c012:	d008      	beq.n	800c026 <USBD_StdEPReq+0xfe>
 800c014:	683b      	ldr	r3, [r7, #0]
 800c016:	88db      	ldrh	r3, [r3, #6]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d104      	bne.n	800c026 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800c01c:	7bbb      	ldrb	r3, [r7, #14]
 800c01e:	4619      	mov	r1, r3
 800c020:	6878      	ldr	r0, [r7, #4]
 800c022:	f002 fab1 	bl	800e588 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f000 fd3a 	bl	800caa0 <USBD_CtlSendStatus>

              break;
 800c02c:	e004      	b.n	800c038 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800c02e:	6839      	ldr	r1, [r7, #0]
 800c030:	6878      	ldr	r0, [r7, #4]
 800c032:	f000 fc5e 	bl	800c8f2 <USBD_CtlError>
              break;
 800c036:	bf00      	nop
          }
          break;
 800c038:	e107      	b.n	800c24a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c040:	b2db      	uxtb	r3, r3
 800c042:	2b02      	cmp	r3, #2
 800c044:	d002      	beq.n	800c04c <USBD_StdEPReq+0x124>
 800c046:	2b03      	cmp	r3, #3
 800c048:	d016      	beq.n	800c078 <USBD_StdEPReq+0x150>
 800c04a:	e04b      	b.n	800c0e4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c04c:	7bbb      	ldrb	r3, [r7, #14]
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d00d      	beq.n	800c06e <USBD_StdEPReq+0x146>
 800c052:	7bbb      	ldrb	r3, [r7, #14]
 800c054:	2b80      	cmp	r3, #128	@ 0x80
 800c056:	d00a      	beq.n	800c06e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800c058:	7bbb      	ldrb	r3, [r7, #14]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f002 fa93 	bl	800e588 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800c062:	2180      	movs	r1, #128	@ 0x80
 800c064:	6878      	ldr	r0, [r7, #4]
 800c066:	f002 fa8f 	bl	800e588 <USBD_LL_StallEP>
 800c06a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800c06c:	e040      	b.n	800c0f0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800c06e:	6839      	ldr	r1, [r7, #0]
 800c070:	6878      	ldr	r0, [r7, #4]
 800c072:	f000 fc3e 	bl	800c8f2 <USBD_CtlError>
              break;
 800c076:	e03b      	b.n	800c0f0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800c078:	683b      	ldr	r3, [r7, #0]
 800c07a:	885b      	ldrh	r3, [r3, #2]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d136      	bne.n	800c0ee <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800c080:	7bbb      	ldrb	r3, [r7, #14]
 800c082:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c086:	2b00      	cmp	r3, #0
 800c088:	d004      	beq.n	800c094 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800c08a:	7bbb      	ldrb	r3, [r7, #14]
 800c08c:	4619      	mov	r1, r3
 800c08e:	6878      	ldr	r0, [r7, #4]
 800c090:	f002 fa99 	bl	800e5c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 fd03 	bl	800caa0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800c09a:	7bbb      	ldrb	r3, [r7, #14]
 800c09c:	4619      	mov	r1, r3
 800c09e:	6878      	ldr	r0, [r7, #4]
 800c0a0:	f7ff fde4 	bl	800bc6c <USBD_CoreFindEP>
 800c0a4:	4603      	mov	r3, r0
 800c0a6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800c0a8:	7b7b      	ldrb	r3, [r7, #13]
 800c0aa:	2bff      	cmp	r3, #255	@ 0xff
 800c0ac:	d01f      	beq.n	800c0ee <USBD_StdEPReq+0x1c6>
 800c0ae:	7b7b      	ldrb	r3, [r7, #13]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d11c      	bne.n	800c0ee <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800c0b4:	7b7a      	ldrb	r2, [r7, #13]
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800c0bc:	7b7a      	ldrb	r2, [r7, #13]
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	32ae      	adds	r2, #174	@ 0xae
 800c0c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0c6:	689b      	ldr	r3, [r3, #8]
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d010      	beq.n	800c0ee <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800c0cc:	7b7a      	ldrb	r2, [r7, #13]
 800c0ce:	687b      	ldr	r3, [r7, #4]
 800c0d0:	32ae      	adds	r2, #174	@ 0xae
 800c0d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c0d6:	689b      	ldr	r3, [r3, #8]
 800c0d8:	6839      	ldr	r1, [r7, #0]
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	4798      	blx	r3
 800c0de:	4603      	mov	r3, r0
 800c0e0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800c0e2:	e004      	b.n	800c0ee <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800c0e4:	6839      	ldr	r1, [r7, #0]
 800c0e6:	6878      	ldr	r0, [r7, #4]
 800c0e8:	f000 fc03 	bl	800c8f2 <USBD_CtlError>
              break;
 800c0ec:	e000      	b.n	800c0f0 <USBD_StdEPReq+0x1c8>
              break;
 800c0ee:	bf00      	nop
          }
          break;
 800c0f0:	e0ab      	b.n	800c24a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c0f8:	b2db      	uxtb	r3, r3
 800c0fa:	2b02      	cmp	r3, #2
 800c0fc:	d002      	beq.n	800c104 <USBD_StdEPReq+0x1dc>
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d032      	beq.n	800c168 <USBD_StdEPReq+0x240>
 800c102:	e097      	b.n	800c234 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800c104:	7bbb      	ldrb	r3, [r7, #14]
 800c106:	2b00      	cmp	r3, #0
 800c108:	d007      	beq.n	800c11a <USBD_StdEPReq+0x1f2>
 800c10a:	7bbb      	ldrb	r3, [r7, #14]
 800c10c:	2b80      	cmp	r3, #128	@ 0x80
 800c10e:	d004      	beq.n	800c11a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800c110:	6839      	ldr	r1, [r7, #0]
 800c112:	6878      	ldr	r0, [r7, #4]
 800c114:	f000 fbed 	bl	800c8f2 <USBD_CtlError>
                break;
 800c118:	e091      	b.n	800c23e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c11a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c11e:	2b00      	cmp	r3, #0
 800c120:	da0b      	bge.n	800c13a <USBD_StdEPReq+0x212>
 800c122:	7bbb      	ldrb	r3, [r7, #14]
 800c124:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c128:	4613      	mov	r3, r2
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	4413      	add	r3, r2
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	3310      	adds	r3, #16
 800c132:	687a      	ldr	r2, [r7, #4]
 800c134:	4413      	add	r3, r2
 800c136:	3304      	adds	r3, #4
 800c138:	e00b      	b.n	800c152 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c13a:	7bbb      	ldrb	r3, [r7, #14]
 800c13c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c140:	4613      	mov	r3, r2
 800c142:	009b      	lsls	r3, r3, #2
 800c144:	4413      	add	r3, r2
 800c146:	009b      	lsls	r3, r3, #2
 800c148:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c14c:	687a      	ldr	r2, [r7, #4]
 800c14e:	4413      	add	r3, r2
 800c150:	3304      	adds	r3, #4
 800c152:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c154:	68bb      	ldr	r3, [r7, #8]
 800c156:	2200      	movs	r2, #0
 800c158:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c15a:	68bb      	ldr	r3, [r7, #8]
 800c15c:	2202      	movs	r2, #2
 800c15e:	4619      	mov	r1, r3
 800c160:	6878      	ldr	r0, [r7, #4]
 800c162:	f000 fc43 	bl	800c9ec <USBD_CtlSendData>
              break;
 800c166:	e06a      	b.n	800c23e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c16c:	2b00      	cmp	r3, #0
 800c16e:	da11      	bge.n	800c194 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c170:	7bbb      	ldrb	r3, [r7, #14]
 800c172:	f003 020f 	and.w	r2, r3, #15
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	4613      	mov	r3, r2
 800c17a:	009b      	lsls	r3, r3, #2
 800c17c:	4413      	add	r3, r2
 800c17e:	009b      	lsls	r3, r3, #2
 800c180:	440b      	add	r3, r1
 800c182:	3324      	adds	r3, #36	@ 0x24
 800c184:	881b      	ldrh	r3, [r3, #0]
 800c186:	2b00      	cmp	r3, #0
 800c188:	d117      	bne.n	800c1ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c18a:	6839      	ldr	r1, [r7, #0]
 800c18c:	6878      	ldr	r0, [r7, #4]
 800c18e:	f000 fbb0 	bl	800c8f2 <USBD_CtlError>
                  break;
 800c192:	e054      	b.n	800c23e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c194:	7bbb      	ldrb	r3, [r7, #14]
 800c196:	f003 020f 	and.w	r2, r3, #15
 800c19a:	6879      	ldr	r1, [r7, #4]
 800c19c:	4613      	mov	r3, r2
 800c19e:	009b      	lsls	r3, r3, #2
 800c1a0:	4413      	add	r3, r2
 800c1a2:	009b      	lsls	r3, r3, #2
 800c1a4:	440b      	add	r3, r1
 800c1a6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c1aa:	881b      	ldrh	r3, [r3, #0]
 800c1ac:	2b00      	cmp	r3, #0
 800c1ae:	d104      	bne.n	800c1ba <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 fb9d 	bl	800c8f2 <USBD_CtlError>
                  break;
 800c1b8:	e041      	b.n	800c23e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1ba:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	da0b      	bge.n	800c1da <USBD_StdEPReq+0x2b2>
 800c1c2:	7bbb      	ldrb	r3, [r7, #14]
 800c1c4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c1c8:	4613      	mov	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4413      	add	r3, r2
 800c1ce:	009b      	lsls	r3, r3, #2
 800c1d0:	3310      	adds	r3, #16
 800c1d2:	687a      	ldr	r2, [r7, #4]
 800c1d4:	4413      	add	r3, r2
 800c1d6:	3304      	adds	r3, #4
 800c1d8:	e00b      	b.n	800c1f2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c1da:	7bbb      	ldrb	r3, [r7, #14]
 800c1dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c1e0:	4613      	mov	r3, r2
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	4413      	add	r3, r2
 800c1e6:	009b      	lsls	r3, r3, #2
 800c1e8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c1ec:	687a      	ldr	r2, [r7, #4]
 800c1ee:	4413      	add	r3, r2
 800c1f0:	3304      	adds	r3, #4
 800c1f2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c1f4:	7bbb      	ldrb	r3, [r7, #14]
 800c1f6:	2b00      	cmp	r3, #0
 800c1f8:	d002      	beq.n	800c200 <USBD_StdEPReq+0x2d8>
 800c1fa:	7bbb      	ldrb	r3, [r7, #14]
 800c1fc:	2b80      	cmp	r3, #128	@ 0x80
 800c1fe:	d103      	bne.n	800c208 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c200:	68bb      	ldr	r3, [r7, #8]
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
 800c206:	e00e      	b.n	800c226 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c208:	7bbb      	ldrb	r3, [r7, #14]
 800c20a:	4619      	mov	r1, r3
 800c20c:	6878      	ldr	r0, [r7, #4]
 800c20e:	f002 f9f9 	bl	800e604 <USBD_LL_IsStallEP>
 800c212:	4603      	mov	r3, r0
 800c214:	2b00      	cmp	r3, #0
 800c216:	d003      	beq.n	800c220 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	2201      	movs	r2, #1
 800c21c:	601a      	str	r2, [r3, #0]
 800c21e:	e002      	b.n	800c226 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	2200      	movs	r2, #0
 800c224:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c226:	68bb      	ldr	r3, [r7, #8]
 800c228:	2202      	movs	r2, #2
 800c22a:	4619      	mov	r1, r3
 800c22c:	6878      	ldr	r0, [r7, #4]
 800c22e:	f000 fbdd 	bl	800c9ec <USBD_CtlSendData>
              break;
 800c232:	e004      	b.n	800c23e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 fb5b 	bl	800c8f2 <USBD_CtlError>
              break;
 800c23c:	bf00      	nop
          }
          break;
 800c23e:	e004      	b.n	800c24a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c240:	6839      	ldr	r1, [r7, #0]
 800c242:	6878      	ldr	r0, [r7, #4]
 800c244:	f000 fb55 	bl	800c8f2 <USBD_CtlError>
          break;
 800c248:	bf00      	nop
      }
      break;
 800c24a:	e005      	b.n	800c258 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c24c:	6839      	ldr	r1, [r7, #0]
 800c24e:	6878      	ldr	r0, [r7, #4]
 800c250:	f000 fb4f 	bl	800c8f2 <USBD_CtlError>
      break;
 800c254:	e000      	b.n	800c258 <USBD_StdEPReq+0x330>
      break;
 800c256:	bf00      	nop
  }

  return ret;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
	...

0800c264 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b084      	sub	sp, #16
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
 800c26c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c26e:	2300      	movs	r3, #0
 800c270:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c276:	2300      	movs	r3, #0
 800c278:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c27a:	683b      	ldr	r3, [r7, #0]
 800c27c:	885b      	ldrh	r3, [r3, #2]
 800c27e:	0a1b      	lsrs	r3, r3, #8
 800c280:	b29b      	uxth	r3, r3
 800c282:	3b01      	subs	r3, #1
 800c284:	2b06      	cmp	r3, #6
 800c286:	f200 8128 	bhi.w	800c4da <USBD_GetDescriptor+0x276>
 800c28a:	a201      	add	r2, pc, #4	@ (adr r2, 800c290 <USBD_GetDescriptor+0x2c>)
 800c28c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c290:	0800c2ad 	.word	0x0800c2ad
 800c294:	0800c2c5 	.word	0x0800c2c5
 800c298:	0800c305 	.word	0x0800c305
 800c29c:	0800c4db 	.word	0x0800c4db
 800c2a0:	0800c4db 	.word	0x0800c4db
 800c2a4:	0800c47b 	.word	0x0800c47b
 800c2a8:	0800c4a7 	.word	0x0800c4a7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	687a      	ldr	r2, [r7, #4]
 800c2b6:	7c12      	ldrb	r2, [r2, #16]
 800c2b8:	f107 0108 	add.w	r1, r7, #8
 800c2bc:	4610      	mov	r0, r2
 800c2be:	4798      	blx	r3
 800c2c0:	60f8      	str	r0, [r7, #12]
      break;
 800c2c2:	e112      	b.n	800c4ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	7c1b      	ldrb	r3, [r3, #16]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	d10d      	bne.n	800c2e8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c2d4:	f107 0208 	add.w	r2, r7, #8
 800c2d8:	4610      	mov	r0, r2
 800c2da:	4798      	blx	r3
 800c2dc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2de:	68fb      	ldr	r3, [r7, #12]
 800c2e0:	3301      	adds	r3, #1
 800c2e2:	2202      	movs	r2, #2
 800c2e4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c2e6:	e100      	b.n	800c4ea <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c2f0:	f107 0208 	add.w	r2, r7, #8
 800c2f4:	4610      	mov	r0, r2
 800c2f6:	4798      	blx	r3
 800c2f8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	3301      	adds	r3, #1
 800c2fe:	2202      	movs	r2, #2
 800c300:	701a      	strb	r2, [r3, #0]
      break;
 800c302:	e0f2      	b.n	800c4ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c304:	683b      	ldr	r3, [r7, #0]
 800c306:	885b      	ldrh	r3, [r3, #2]
 800c308:	b2db      	uxtb	r3, r3
 800c30a:	2b05      	cmp	r3, #5
 800c30c:	f200 80ac 	bhi.w	800c468 <USBD_GetDescriptor+0x204>
 800c310:	a201      	add	r2, pc, #4	@ (adr r2, 800c318 <USBD_GetDescriptor+0xb4>)
 800c312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c316:	bf00      	nop
 800c318:	0800c331 	.word	0x0800c331
 800c31c:	0800c365 	.word	0x0800c365
 800c320:	0800c399 	.word	0x0800c399
 800c324:	0800c3cd 	.word	0x0800c3cd
 800c328:	0800c401 	.word	0x0800c401
 800c32c:	0800c435 	.word	0x0800c435
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d00b      	beq.n	800c354 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	687a      	ldr	r2, [r7, #4]
 800c346:	7c12      	ldrb	r2, [r2, #16]
 800c348:	f107 0108 	add.w	r1, r7, #8
 800c34c:	4610      	mov	r0, r2
 800c34e:	4798      	blx	r3
 800c350:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c352:	e091      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c354:	6839      	ldr	r1, [r7, #0]
 800c356:	6878      	ldr	r0, [r7, #4]
 800c358:	f000 facb 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c35c:	7afb      	ldrb	r3, [r7, #11]
 800c35e:	3301      	adds	r3, #1
 800c360:	72fb      	strb	r3, [r7, #11]
          break;
 800c362:	e089      	b.n	800c478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d00b      	beq.n	800c388 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c376:	689b      	ldr	r3, [r3, #8]
 800c378:	687a      	ldr	r2, [r7, #4]
 800c37a:	7c12      	ldrb	r2, [r2, #16]
 800c37c:	f107 0108 	add.w	r1, r7, #8
 800c380:	4610      	mov	r0, r2
 800c382:	4798      	blx	r3
 800c384:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c386:	e077      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c388:	6839      	ldr	r1, [r7, #0]
 800c38a:	6878      	ldr	r0, [r7, #4]
 800c38c:	f000 fab1 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c390:	7afb      	ldrb	r3, [r7, #11]
 800c392:	3301      	adds	r3, #1
 800c394:	72fb      	strb	r3, [r7, #11]
          break;
 800c396:	e06f      	b.n	800c478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c39e:	68db      	ldr	r3, [r3, #12]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d00b      	beq.n	800c3bc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3aa:	68db      	ldr	r3, [r3, #12]
 800c3ac:	687a      	ldr	r2, [r7, #4]
 800c3ae:	7c12      	ldrb	r2, [r2, #16]
 800c3b0:	f107 0108 	add.w	r1, r7, #8
 800c3b4:	4610      	mov	r0, r2
 800c3b6:	4798      	blx	r3
 800c3b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ba:	e05d      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3bc:	6839      	ldr	r1, [r7, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	f000 fa97 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c3c4:	7afb      	ldrb	r3, [r7, #11]
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	72fb      	strb	r3, [r7, #11]
          break;
 800c3ca:	e055      	b.n	800c478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3d2:	691b      	ldr	r3, [r3, #16]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d00b      	beq.n	800c3f0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c3de:	691b      	ldr	r3, [r3, #16]
 800c3e0:	687a      	ldr	r2, [r7, #4]
 800c3e2:	7c12      	ldrb	r2, [r2, #16]
 800c3e4:	f107 0108 	add.w	r1, r7, #8
 800c3e8:	4610      	mov	r0, r2
 800c3ea:	4798      	blx	r3
 800c3ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c3ee:	e043      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c3f0:	6839      	ldr	r1, [r7, #0]
 800c3f2:	6878      	ldr	r0, [r7, #4]
 800c3f4:	f000 fa7d 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c3f8:	7afb      	ldrb	r3, [r7, #11]
 800c3fa:	3301      	adds	r3, #1
 800c3fc:	72fb      	strb	r3, [r7, #11]
          break;
 800c3fe:	e03b      	b.n	800c478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c406:	695b      	ldr	r3, [r3, #20]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d00b      	beq.n	800c424 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c40c:	687b      	ldr	r3, [r7, #4]
 800c40e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c412:	695b      	ldr	r3, [r3, #20]
 800c414:	687a      	ldr	r2, [r7, #4]
 800c416:	7c12      	ldrb	r2, [r2, #16]
 800c418:	f107 0108 	add.w	r1, r7, #8
 800c41c:	4610      	mov	r0, r2
 800c41e:	4798      	blx	r3
 800c420:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c422:	e029      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c424:	6839      	ldr	r1, [r7, #0]
 800c426:	6878      	ldr	r0, [r7, #4]
 800c428:	f000 fa63 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c42c:	7afb      	ldrb	r3, [r7, #11]
 800c42e:	3301      	adds	r3, #1
 800c430:	72fb      	strb	r3, [r7, #11]
          break;
 800c432:	e021      	b.n	800c478 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d00b      	beq.n	800c458 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c446:	699b      	ldr	r3, [r3, #24]
 800c448:	687a      	ldr	r2, [r7, #4]
 800c44a:	7c12      	ldrb	r2, [r2, #16]
 800c44c:	f107 0108 	add.w	r1, r7, #8
 800c450:	4610      	mov	r0, r2
 800c452:	4798      	blx	r3
 800c454:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c456:	e00f      	b.n	800c478 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c458:	6839      	ldr	r1, [r7, #0]
 800c45a:	6878      	ldr	r0, [r7, #4]
 800c45c:	f000 fa49 	bl	800c8f2 <USBD_CtlError>
            err++;
 800c460:	7afb      	ldrb	r3, [r7, #11]
 800c462:	3301      	adds	r3, #1
 800c464:	72fb      	strb	r3, [r7, #11]
          break;
 800c466:	e007      	b.n	800c478 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c468:	6839      	ldr	r1, [r7, #0]
 800c46a:	6878      	ldr	r0, [r7, #4]
 800c46c:	f000 fa41 	bl	800c8f2 <USBD_CtlError>
          err++;
 800c470:	7afb      	ldrb	r3, [r7, #11]
 800c472:	3301      	adds	r3, #1
 800c474:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c476:	bf00      	nop
      }
      break;
 800c478:	e037      	b.n	800c4ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	7c1b      	ldrb	r3, [r3, #16]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d109      	bne.n	800c496 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c488:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c48a:	f107 0208 	add.w	r2, r7, #8
 800c48e:	4610      	mov	r0, r2
 800c490:	4798      	blx	r3
 800c492:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c494:	e029      	b.n	800c4ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c496:	6839      	ldr	r1, [r7, #0]
 800c498:	6878      	ldr	r0, [r7, #4]
 800c49a:	f000 fa2a 	bl	800c8f2 <USBD_CtlError>
        err++;
 800c49e:	7afb      	ldrb	r3, [r7, #11]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	72fb      	strb	r3, [r7, #11]
      break;
 800c4a4:	e021      	b.n	800c4ea <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	7c1b      	ldrb	r3, [r3, #16]
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d10d      	bne.n	800c4ca <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c4b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4b6:	f107 0208 	add.w	r2, r7, #8
 800c4ba:	4610      	mov	r0, r2
 800c4bc:	4798      	blx	r3
 800c4be:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	3301      	adds	r3, #1
 800c4c4:	2207      	movs	r2, #7
 800c4c6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c4c8:	e00f      	b.n	800c4ea <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c4ca:	6839      	ldr	r1, [r7, #0]
 800c4cc:	6878      	ldr	r0, [r7, #4]
 800c4ce:	f000 fa10 	bl	800c8f2 <USBD_CtlError>
        err++;
 800c4d2:	7afb      	ldrb	r3, [r7, #11]
 800c4d4:	3301      	adds	r3, #1
 800c4d6:	72fb      	strb	r3, [r7, #11]
      break;
 800c4d8:	e007      	b.n	800c4ea <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c4da:	6839      	ldr	r1, [r7, #0]
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fa08 	bl	800c8f2 <USBD_CtlError>
      err++;
 800c4e2:	7afb      	ldrb	r3, [r7, #11]
 800c4e4:	3301      	adds	r3, #1
 800c4e6:	72fb      	strb	r3, [r7, #11]
      break;
 800c4e8:	bf00      	nop
  }

  if (err != 0U)
 800c4ea:	7afb      	ldrb	r3, [r7, #11]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d11e      	bne.n	800c52e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c4f0:	683b      	ldr	r3, [r7, #0]
 800c4f2:	88db      	ldrh	r3, [r3, #6]
 800c4f4:	2b00      	cmp	r3, #0
 800c4f6:	d016      	beq.n	800c526 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c4f8:	893b      	ldrh	r3, [r7, #8]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00e      	beq.n	800c51c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c4fe:	683b      	ldr	r3, [r7, #0]
 800c500:	88da      	ldrh	r2, [r3, #6]
 800c502:	893b      	ldrh	r3, [r7, #8]
 800c504:	4293      	cmp	r3, r2
 800c506:	bf28      	it	cs
 800c508:	4613      	movcs	r3, r2
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c50e:	893b      	ldrh	r3, [r7, #8]
 800c510:	461a      	mov	r2, r3
 800c512:	68f9      	ldr	r1, [r7, #12]
 800c514:	6878      	ldr	r0, [r7, #4]
 800c516:	f000 fa69 	bl	800c9ec <USBD_CtlSendData>
 800c51a:	e009      	b.n	800c530 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c51c:	6839      	ldr	r1, [r7, #0]
 800c51e:	6878      	ldr	r0, [r7, #4]
 800c520:	f000 f9e7 	bl	800c8f2 <USBD_CtlError>
 800c524:	e004      	b.n	800c530 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 faba 	bl	800caa0 <USBD_CtlSendStatus>
 800c52c:	e000      	b.n	800c530 <USBD_GetDescriptor+0x2cc>
    return;
 800c52e:	bf00      	nop
  }
}
 800c530:	3710      	adds	r7, #16
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}
 800c536:	bf00      	nop

0800c538 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c538:	b580      	push	{r7, lr}
 800c53a:	b084      	sub	sp, #16
 800c53c:	af00      	add	r7, sp, #0
 800c53e:	6078      	str	r0, [r7, #4]
 800c540:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	889b      	ldrh	r3, [r3, #4]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d131      	bne.n	800c5ae <USBD_SetAddress+0x76>
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	88db      	ldrh	r3, [r3, #6]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d12d      	bne.n	800c5ae <USBD_SetAddress+0x76>
 800c552:	683b      	ldr	r3, [r7, #0]
 800c554:	885b      	ldrh	r3, [r3, #2]
 800c556:	2b7f      	cmp	r3, #127	@ 0x7f
 800c558:	d829      	bhi.n	800c5ae <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c55a:	683b      	ldr	r3, [r7, #0]
 800c55c:	885b      	ldrh	r3, [r3, #2]
 800c55e:	b2db      	uxtb	r3, r3
 800c560:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c564:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c56c:	b2db      	uxtb	r3, r3
 800c56e:	2b03      	cmp	r3, #3
 800c570:	d104      	bne.n	800c57c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c572:	6839      	ldr	r1, [r7, #0]
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f000 f9bc 	bl	800c8f2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c57a:	e01d      	b.n	800c5b8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	7bfa      	ldrb	r2, [r7, #15]
 800c580:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	4619      	mov	r1, r3
 800c588:	6878      	ldr	r0, [r7, #4]
 800c58a:	f002 f867 	bl	800e65c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c58e:	6878      	ldr	r0, [r7, #4]
 800c590:	f000 fa86 	bl	800caa0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d004      	beq.n	800c5a4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	2202      	movs	r2, #2
 800c59e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5a2:	e009      	b.n	800c5b8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	2201      	movs	r2, #1
 800c5a8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c5ac:	e004      	b.n	800c5b8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c5ae:	6839      	ldr	r1, [r7, #0]
 800c5b0:	6878      	ldr	r0, [r7, #4]
 800c5b2:	f000 f99e 	bl	800c8f2 <USBD_CtlError>
  }
}
 800c5b6:	bf00      	nop
 800c5b8:	bf00      	nop
 800c5ba:	3710      	adds	r7, #16
 800c5bc:	46bd      	mov	sp, r7
 800c5be:	bd80      	pop	{r7, pc}

0800c5c0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5c0:	b580      	push	{r7, lr}
 800c5c2:	b084      	sub	sp, #16
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	6078      	str	r0, [r7, #4]
 800c5c8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c5ca:	2300      	movs	r3, #0
 800c5cc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c5ce:	683b      	ldr	r3, [r7, #0]
 800c5d0:	885b      	ldrh	r3, [r3, #2]
 800c5d2:	b2da      	uxtb	r2, r3
 800c5d4:	4b4e      	ldr	r3, [pc, #312]	@ (800c710 <USBD_SetConfig+0x150>)
 800c5d6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c5d8:	4b4d      	ldr	r3, [pc, #308]	@ (800c710 <USBD_SetConfig+0x150>)
 800c5da:	781b      	ldrb	r3, [r3, #0]
 800c5dc:	2b01      	cmp	r3, #1
 800c5de:	d905      	bls.n	800c5ec <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c5e0:	6839      	ldr	r1, [r7, #0]
 800c5e2:	6878      	ldr	r0, [r7, #4]
 800c5e4:	f000 f985 	bl	800c8f2 <USBD_CtlError>
    return USBD_FAIL;
 800c5e8:	2303      	movs	r3, #3
 800c5ea:	e08c      	b.n	800c706 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b02      	cmp	r3, #2
 800c5f6:	d002      	beq.n	800c5fe <USBD_SetConfig+0x3e>
 800c5f8:	2b03      	cmp	r3, #3
 800c5fa:	d029      	beq.n	800c650 <USBD_SetConfig+0x90>
 800c5fc:	e075      	b.n	800c6ea <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c5fe:	4b44      	ldr	r3, [pc, #272]	@ (800c710 <USBD_SetConfig+0x150>)
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	2b00      	cmp	r3, #0
 800c604:	d020      	beq.n	800c648 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c606:	4b42      	ldr	r3, [pc, #264]	@ (800c710 <USBD_SetConfig+0x150>)
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	461a      	mov	r2, r3
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c610:	4b3f      	ldr	r3, [pc, #252]	@ (800c710 <USBD_SetConfig+0x150>)
 800c612:	781b      	ldrb	r3, [r3, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	6878      	ldr	r0, [r7, #4]
 800c618:	f7fe ffe3 	bl	800b5e2 <USBD_SetClassConfig>
 800c61c:	4603      	mov	r3, r0
 800c61e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c620:	7bfb      	ldrb	r3, [r7, #15]
 800c622:	2b00      	cmp	r3, #0
 800c624:	d008      	beq.n	800c638 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c626:	6839      	ldr	r1, [r7, #0]
 800c628:	6878      	ldr	r0, [r7, #4]
 800c62a:	f000 f962 	bl	800c8f2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	2202      	movs	r2, #2
 800c632:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c636:	e065      	b.n	800c704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c638:	6878      	ldr	r0, [r7, #4]
 800c63a:	f000 fa31 	bl	800caa0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	2203      	movs	r2, #3
 800c642:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c646:	e05d      	b.n	800c704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c648:	6878      	ldr	r0, [r7, #4]
 800c64a:	f000 fa29 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c64e:	e059      	b.n	800c704 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c650:	4b2f      	ldr	r3, [pc, #188]	@ (800c710 <USBD_SetConfig+0x150>)
 800c652:	781b      	ldrb	r3, [r3, #0]
 800c654:	2b00      	cmp	r3, #0
 800c656:	d112      	bne.n	800c67e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	2202      	movs	r2, #2
 800c65c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c660:	4b2b      	ldr	r3, [pc, #172]	@ (800c710 <USBD_SetConfig+0x150>)
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	687b      	ldr	r3, [r7, #4]
 800c668:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c66a:	4b29      	ldr	r3, [pc, #164]	@ (800c710 <USBD_SetConfig+0x150>)
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	4619      	mov	r1, r3
 800c670:	6878      	ldr	r0, [r7, #4]
 800c672:	f7fe ffd2 	bl	800b61a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c676:	6878      	ldr	r0, [r7, #4]
 800c678:	f000 fa12 	bl	800caa0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c67c:	e042      	b.n	800c704 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c67e:	4b24      	ldr	r3, [pc, #144]	@ (800c710 <USBD_SetConfig+0x150>)
 800c680:	781b      	ldrb	r3, [r3, #0]
 800c682:	461a      	mov	r2, r3
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	685b      	ldr	r3, [r3, #4]
 800c688:	429a      	cmp	r2, r3
 800c68a:	d02a      	beq.n	800c6e2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	685b      	ldr	r3, [r3, #4]
 800c690:	b2db      	uxtb	r3, r3
 800c692:	4619      	mov	r1, r3
 800c694:	6878      	ldr	r0, [r7, #4]
 800c696:	f7fe ffc0 	bl	800b61a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c69a:	4b1d      	ldr	r3, [pc, #116]	@ (800c710 <USBD_SetConfig+0x150>)
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	461a      	mov	r2, r3
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c6a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c710 <USBD_SetConfig+0x150>)
 800c6a6:	781b      	ldrb	r3, [r3, #0]
 800c6a8:	4619      	mov	r1, r3
 800c6aa:	6878      	ldr	r0, [r7, #4]
 800c6ac:	f7fe ff99 	bl	800b5e2 <USBD_SetClassConfig>
 800c6b0:	4603      	mov	r3, r0
 800c6b2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c6b4:	7bfb      	ldrb	r3, [r7, #15]
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d00f      	beq.n	800c6da <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c6ba:	6839      	ldr	r1, [r7, #0]
 800c6bc:	6878      	ldr	r0, [r7, #4]
 800c6be:	f000 f918 	bl	800c8f2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	685b      	ldr	r3, [r3, #4]
 800c6c6:	b2db      	uxtb	r3, r3
 800c6c8:	4619      	mov	r1, r3
 800c6ca:	6878      	ldr	r0, [r7, #4]
 800c6cc:	f7fe ffa5 	bl	800b61a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2202      	movs	r2, #2
 800c6d4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c6d8:	e014      	b.n	800c704 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c6da:	6878      	ldr	r0, [r7, #4]
 800c6dc:	f000 f9e0 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c6e0:	e010      	b.n	800c704 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f9dc 	bl	800caa0 <USBD_CtlSendStatus>
      break;
 800c6e8:	e00c      	b.n	800c704 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c6ea:	6839      	ldr	r1, [r7, #0]
 800c6ec:	6878      	ldr	r0, [r7, #4]
 800c6ee:	f000 f900 	bl	800c8f2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c6f2:	4b07      	ldr	r3, [pc, #28]	@ (800c710 <USBD_SetConfig+0x150>)
 800c6f4:	781b      	ldrb	r3, [r3, #0]
 800c6f6:	4619      	mov	r1, r3
 800c6f8:	6878      	ldr	r0, [r7, #4]
 800c6fa:	f7fe ff8e 	bl	800b61a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c6fe:	2303      	movs	r3, #3
 800c700:	73fb      	strb	r3, [r7, #15]
      break;
 800c702:	bf00      	nop
  }

  return ret;
 800c704:	7bfb      	ldrb	r3, [r7, #15]
}
 800c706:	4618      	mov	r0, r3
 800c708:	3710      	adds	r7, #16
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	20000424 	.word	0x20000424

0800c714 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c714:	b580      	push	{r7, lr}
 800c716:	b082      	sub	sp, #8
 800c718:	af00      	add	r7, sp, #0
 800c71a:	6078      	str	r0, [r7, #4]
 800c71c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	88db      	ldrh	r3, [r3, #6]
 800c722:	2b01      	cmp	r3, #1
 800c724:	d004      	beq.n	800c730 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c726:	6839      	ldr	r1, [r7, #0]
 800c728:	6878      	ldr	r0, [r7, #4]
 800c72a:	f000 f8e2 	bl	800c8f2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c72e:	e023      	b.n	800c778 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c730:	687b      	ldr	r3, [r7, #4]
 800c732:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c736:	b2db      	uxtb	r3, r3
 800c738:	2b02      	cmp	r3, #2
 800c73a:	dc02      	bgt.n	800c742 <USBD_GetConfig+0x2e>
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dc03      	bgt.n	800c748 <USBD_GetConfig+0x34>
 800c740:	e015      	b.n	800c76e <USBD_GetConfig+0x5a>
 800c742:	2b03      	cmp	r3, #3
 800c744:	d00b      	beq.n	800c75e <USBD_GetConfig+0x4a>
 800c746:	e012      	b.n	800c76e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	3308      	adds	r3, #8
 800c752:	2201      	movs	r2, #1
 800c754:	4619      	mov	r1, r3
 800c756:	6878      	ldr	r0, [r7, #4]
 800c758:	f000 f948 	bl	800c9ec <USBD_CtlSendData>
        break;
 800c75c:	e00c      	b.n	800c778 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	3304      	adds	r3, #4
 800c762:	2201      	movs	r2, #1
 800c764:	4619      	mov	r1, r3
 800c766:	6878      	ldr	r0, [r7, #4]
 800c768:	f000 f940 	bl	800c9ec <USBD_CtlSendData>
        break;
 800c76c:	e004      	b.n	800c778 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c76e:	6839      	ldr	r1, [r7, #0]
 800c770:	6878      	ldr	r0, [r7, #4]
 800c772:	f000 f8be 	bl	800c8f2 <USBD_CtlError>
        break;
 800c776:	bf00      	nop
}
 800c778:	bf00      	nop
 800c77a:	3708      	adds	r7, #8
 800c77c:	46bd      	mov	sp, r7
 800c77e:	bd80      	pop	{r7, pc}

0800c780 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c780:	b580      	push	{r7, lr}
 800c782:	b082      	sub	sp, #8
 800c784:	af00      	add	r7, sp, #0
 800c786:	6078      	str	r0, [r7, #4]
 800c788:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c790:	b2db      	uxtb	r3, r3
 800c792:	3b01      	subs	r3, #1
 800c794:	2b02      	cmp	r3, #2
 800c796:	d81e      	bhi.n	800c7d6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	88db      	ldrh	r3, [r3, #6]
 800c79c:	2b02      	cmp	r3, #2
 800c79e:	d004      	beq.n	800c7aa <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c7a0:	6839      	ldr	r1, [r7, #0]
 800c7a2:	6878      	ldr	r0, [r7, #4]
 800c7a4:	f000 f8a5 	bl	800c8f2 <USBD_CtlError>
        break;
 800c7a8:	e01a      	b.n	800c7e0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2201      	movs	r2, #1
 800c7ae:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c7b0:	687b      	ldr	r3, [r7, #4]
 800c7b2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d005      	beq.n	800c7c6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	68db      	ldr	r3, [r3, #12]
 800c7be:	f043 0202 	orr.w	r2, r3, #2
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	330c      	adds	r3, #12
 800c7ca:	2202      	movs	r2, #2
 800c7cc:	4619      	mov	r1, r3
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f000 f90c 	bl	800c9ec <USBD_CtlSendData>
      break;
 800c7d4:	e004      	b.n	800c7e0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c7d6:	6839      	ldr	r1, [r7, #0]
 800c7d8:	6878      	ldr	r0, [r7, #4]
 800c7da:	f000 f88a 	bl	800c8f2 <USBD_CtlError>
      break;
 800c7de:	bf00      	nop
  }
}
 800c7e0:	bf00      	nop
 800c7e2:	3708      	adds	r7, #8
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	bd80      	pop	{r7, pc}

0800c7e8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7e8:	b580      	push	{r7, lr}
 800c7ea:	b082      	sub	sp, #8
 800c7ec:	af00      	add	r7, sp, #0
 800c7ee:	6078      	str	r0, [r7, #4]
 800c7f0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c7f2:	683b      	ldr	r3, [r7, #0]
 800c7f4:	885b      	ldrh	r3, [r3, #2]
 800c7f6:	2b01      	cmp	r3, #1
 800c7f8:	d107      	bne.n	800c80a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c7fa:	687b      	ldr	r3, [r7, #4]
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f94c 	bl	800caa0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c808:	e013      	b.n	800c832 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c80a:	683b      	ldr	r3, [r7, #0]
 800c80c:	885b      	ldrh	r3, [r3, #2]
 800c80e:	2b02      	cmp	r3, #2
 800c810:	d10b      	bne.n	800c82a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	889b      	ldrh	r3, [r3, #4]
 800c816:	0a1b      	lsrs	r3, r3, #8
 800c818:	b29b      	uxth	r3, r3
 800c81a:	b2da      	uxtb	r2, r3
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c822:	6878      	ldr	r0, [r7, #4]
 800c824:	f000 f93c 	bl	800caa0 <USBD_CtlSendStatus>
}
 800c828:	e003      	b.n	800c832 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c82a:	6839      	ldr	r1, [r7, #0]
 800c82c:	6878      	ldr	r0, [r7, #4]
 800c82e:	f000 f860 	bl	800c8f2 <USBD_CtlError>
}
 800c832:	bf00      	nop
 800c834:	3708      	adds	r7, #8
 800c836:	46bd      	mov	sp, r7
 800c838:	bd80      	pop	{r7, pc}

0800c83a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c83a:	b580      	push	{r7, lr}
 800c83c:	b082      	sub	sp, #8
 800c83e:	af00      	add	r7, sp, #0
 800c840:	6078      	str	r0, [r7, #4]
 800c842:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c84a:	b2db      	uxtb	r3, r3
 800c84c:	3b01      	subs	r3, #1
 800c84e:	2b02      	cmp	r3, #2
 800c850:	d80b      	bhi.n	800c86a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	885b      	ldrh	r3, [r3, #2]
 800c856:	2b01      	cmp	r3, #1
 800c858:	d10c      	bne.n	800c874 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	2200      	movs	r2, #0
 800c85e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c862:	6878      	ldr	r0, [r7, #4]
 800c864:	f000 f91c 	bl	800caa0 <USBD_CtlSendStatus>
      }
      break;
 800c868:	e004      	b.n	800c874 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c86a:	6839      	ldr	r1, [r7, #0]
 800c86c:	6878      	ldr	r0, [r7, #4]
 800c86e:	f000 f840 	bl	800c8f2 <USBD_CtlError>
      break;
 800c872:	e000      	b.n	800c876 <USBD_ClrFeature+0x3c>
      break;
 800c874:	bf00      	nop
  }
}
 800c876:	bf00      	nop
 800c878:	3708      	adds	r7, #8
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
 800c886:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c88c:	68fb      	ldr	r3, [r7, #12]
 800c88e:	781a      	ldrb	r2, [r3, #0]
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3301      	adds	r3, #1
 800c898:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c89a:	68fb      	ldr	r3, [r7, #12]
 800c89c:	781a      	ldrb	r2, [r3, #0]
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c8a8:	68f8      	ldr	r0, [r7, #12]
 800c8aa:	f7ff fa40 	bl	800bd2e <SWAPBYTE>
 800c8ae:	4603      	mov	r3, r0
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	3301      	adds	r3, #1
 800c8ba:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	3301      	adds	r3, #1
 800c8c0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c8c2:	68f8      	ldr	r0, [r7, #12]
 800c8c4:	f7ff fa33 	bl	800bd2e <SWAPBYTE>
 800c8c8:	4603      	mov	r3, r0
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	687b      	ldr	r3, [r7, #4]
 800c8ce:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	3301      	adds	r3, #1
 800c8d4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff fa26 	bl	800bd2e <SWAPBYTE>
 800c8e2:	4603      	mov	r3, r0
 800c8e4:	461a      	mov	r2, r3
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	80da      	strh	r2, [r3, #6]
}
 800c8ea:	bf00      	nop
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b082      	sub	sp, #8
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c8fc:	2180      	movs	r1, #128	@ 0x80
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f001 fe42 	bl	800e588 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c904:	2100      	movs	r1, #0
 800c906:	6878      	ldr	r0, [r7, #4]
 800c908:	f001 fe3e 	bl	800e588 <USBD_LL_StallEP>
}
 800c90c:	bf00      	nop
 800c90e:	3708      	adds	r7, #8
 800c910:	46bd      	mov	sp, r7
 800c912:	bd80      	pop	{r7, pc}

0800c914 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c914:	b580      	push	{r7, lr}
 800c916:	b086      	sub	sp, #24
 800c918:	af00      	add	r7, sp, #0
 800c91a:	60f8      	str	r0, [r7, #12]
 800c91c:	60b9      	str	r1, [r7, #8]
 800c91e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c920:	2300      	movs	r3, #0
 800c922:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	2b00      	cmp	r3, #0
 800c928:	d042      	beq.n	800c9b0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c92e:	6938      	ldr	r0, [r7, #16]
 800c930:	f000 f842 	bl	800c9b8 <USBD_GetLen>
 800c934:	4603      	mov	r3, r0
 800c936:	3301      	adds	r3, #1
 800c938:	005b      	lsls	r3, r3, #1
 800c93a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c93e:	d808      	bhi.n	800c952 <USBD_GetString+0x3e>
 800c940:	6938      	ldr	r0, [r7, #16]
 800c942:	f000 f839 	bl	800c9b8 <USBD_GetLen>
 800c946:	4603      	mov	r3, r0
 800c948:	3301      	adds	r3, #1
 800c94a:	b29b      	uxth	r3, r3
 800c94c:	005b      	lsls	r3, r3, #1
 800c94e:	b29a      	uxth	r2, r3
 800c950:	e001      	b.n	800c956 <USBD_GetString+0x42>
 800c952:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c95a:	7dfb      	ldrb	r3, [r7, #23]
 800c95c:	68ba      	ldr	r2, [r7, #8]
 800c95e:	4413      	add	r3, r2
 800c960:	687a      	ldr	r2, [r7, #4]
 800c962:	7812      	ldrb	r2, [r2, #0]
 800c964:	701a      	strb	r2, [r3, #0]
  idx++;
 800c966:	7dfb      	ldrb	r3, [r7, #23]
 800c968:	3301      	adds	r3, #1
 800c96a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c96c:	7dfb      	ldrb	r3, [r7, #23]
 800c96e:	68ba      	ldr	r2, [r7, #8]
 800c970:	4413      	add	r3, r2
 800c972:	2203      	movs	r2, #3
 800c974:	701a      	strb	r2, [r3, #0]
  idx++;
 800c976:	7dfb      	ldrb	r3, [r7, #23]
 800c978:	3301      	adds	r3, #1
 800c97a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c97c:	e013      	b.n	800c9a6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c97e:	7dfb      	ldrb	r3, [r7, #23]
 800c980:	68ba      	ldr	r2, [r7, #8]
 800c982:	4413      	add	r3, r2
 800c984:	693a      	ldr	r2, [r7, #16]
 800c986:	7812      	ldrb	r2, [r2, #0]
 800c988:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c98a:	693b      	ldr	r3, [r7, #16]
 800c98c:	3301      	adds	r3, #1
 800c98e:	613b      	str	r3, [r7, #16]
    idx++;
 800c990:	7dfb      	ldrb	r3, [r7, #23]
 800c992:	3301      	adds	r3, #1
 800c994:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c996:	7dfb      	ldrb	r3, [r7, #23]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	4413      	add	r3, r2
 800c99c:	2200      	movs	r2, #0
 800c99e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c9a0:	7dfb      	ldrb	r3, [r7, #23]
 800c9a2:	3301      	adds	r3, #1
 800c9a4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c9a6:	693b      	ldr	r3, [r7, #16]
 800c9a8:	781b      	ldrb	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d1e7      	bne.n	800c97e <USBD_GetString+0x6a>
 800c9ae:	e000      	b.n	800c9b2 <USBD_GetString+0x9e>
    return;
 800c9b0:	bf00      	nop
  }
}
 800c9b2:	3718      	adds	r7, #24
 800c9b4:	46bd      	mov	sp, r7
 800c9b6:	bd80      	pop	{r7, pc}

0800c9b8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c9b8:	b480      	push	{r7}
 800c9ba:	b085      	sub	sp, #20
 800c9bc:	af00      	add	r7, sp, #0
 800c9be:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c9c0:	2300      	movs	r3, #0
 800c9c2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c9c8:	e005      	b.n	800c9d6 <USBD_GetLen+0x1e>
  {
    len++;
 800c9ca:	7bfb      	ldrb	r3, [r7, #15]
 800c9cc:	3301      	adds	r3, #1
 800c9ce:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c9d0:	68bb      	ldr	r3, [r7, #8]
 800c9d2:	3301      	adds	r3, #1
 800c9d4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c9d6:	68bb      	ldr	r3, [r7, #8]
 800c9d8:	781b      	ldrb	r3, [r3, #0]
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d1f5      	bne.n	800c9ca <USBD_GetLen+0x12>
  }

  return len;
 800c9de:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9e0:	4618      	mov	r0, r3
 800c9e2:	3714      	adds	r7, #20
 800c9e4:	46bd      	mov	sp, r7
 800c9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9ea:	4770      	bx	lr

0800c9ec <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b084      	sub	sp, #16
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	2202      	movs	r2, #2
 800c9fc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800ca00:	68fb      	ldr	r3, [r7, #12]
 800ca02:	687a      	ldr	r2, [r7, #4]
 800ca04:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	687a      	ldr	r2, [r7, #4]
 800ca0a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	68ba      	ldr	r2, [r7, #8]
 800ca10:	2100      	movs	r1, #0
 800ca12:	68f8      	ldr	r0, [r7, #12]
 800ca14:	f001 fe41 	bl	800e69a <USBD_LL_Transmit>

  return USBD_OK;
 800ca18:	2300      	movs	r3, #0
}
 800ca1a:	4618      	mov	r0, r3
 800ca1c:	3710      	adds	r7, #16
 800ca1e:	46bd      	mov	sp, r7
 800ca20:	bd80      	pop	{r7, pc}

0800ca22 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800ca22:	b580      	push	{r7, lr}
 800ca24:	b084      	sub	sp, #16
 800ca26:	af00      	add	r7, sp, #0
 800ca28:	60f8      	str	r0, [r7, #12]
 800ca2a:	60b9      	str	r1, [r7, #8]
 800ca2c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	2100      	movs	r1, #0
 800ca34:	68f8      	ldr	r0, [r7, #12]
 800ca36:	f001 fe30 	bl	800e69a <USBD_LL_Transmit>

  return USBD_OK;
 800ca3a:	2300      	movs	r3, #0
}
 800ca3c:	4618      	mov	r0, r3
 800ca3e:	3710      	adds	r7, #16
 800ca40:	46bd      	mov	sp, r7
 800ca42:	bd80      	pop	{r7, pc}

0800ca44 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800ca44:	b580      	push	{r7, lr}
 800ca46:	b084      	sub	sp, #16
 800ca48:	af00      	add	r7, sp, #0
 800ca4a:	60f8      	str	r0, [r7, #12]
 800ca4c:	60b9      	str	r1, [r7, #8]
 800ca4e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800ca50:	68fb      	ldr	r3, [r7, #12]
 800ca52:	2203      	movs	r2, #3
 800ca54:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800ca60:	68fb      	ldr	r3, [r7, #12]
 800ca62:	687a      	ldr	r2, [r7, #4]
 800ca64:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	68ba      	ldr	r2, [r7, #8]
 800ca6c:	2100      	movs	r1, #0
 800ca6e:	68f8      	ldr	r0, [r7, #12]
 800ca70:	f001 fe34 	bl	800e6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}

0800ca7e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800ca7e:	b580      	push	{r7, lr}
 800ca80:	b084      	sub	sp, #16
 800ca82:	af00      	add	r7, sp, #0
 800ca84:	60f8      	str	r0, [r7, #12]
 800ca86:	60b9      	str	r1, [r7, #8]
 800ca88:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	68ba      	ldr	r2, [r7, #8]
 800ca8e:	2100      	movs	r1, #0
 800ca90:	68f8      	ldr	r0, [r7, #12]
 800ca92:	f001 fe23 	bl	800e6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800ca96:	2300      	movs	r3, #0
}
 800ca98:	4618      	mov	r0, r3
 800ca9a:	3710      	adds	r7, #16
 800ca9c:	46bd      	mov	sp, r7
 800ca9e:	bd80      	pop	{r7, pc}

0800caa0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b082      	sub	sp, #8
 800caa4:	af00      	add	r7, sp, #0
 800caa6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	2204      	movs	r2, #4
 800caac:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800cab0:	2300      	movs	r3, #0
 800cab2:	2200      	movs	r2, #0
 800cab4:	2100      	movs	r1, #0
 800cab6:	6878      	ldr	r0, [r7, #4]
 800cab8:	f001 fdef 	bl	800e69a <USBD_LL_Transmit>

  return USBD_OK;
 800cabc:	2300      	movs	r3, #0
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3708      	adds	r7, #8
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}

0800cac6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800cac6:	b580      	push	{r7, lr}
 800cac8:	b082      	sub	sp, #8
 800caca:	af00      	add	r7, sp, #0
 800cacc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2205      	movs	r2, #5
 800cad2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800cad6:	2300      	movs	r3, #0
 800cad8:	2200      	movs	r2, #0
 800cada:	2100      	movs	r1, #0
 800cadc:	6878      	ldr	r0, [r7, #4]
 800cade:	f001 fdfd 	bl	800e6dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800cae2:	2300      	movs	r3, #0
}
 800cae4:	4618      	mov	r0, r3
 800cae6:	3708      	adds	r7, #8
 800cae8:	46bd      	mov	sp, r7
 800caea:	bd80      	pop	{r7, pc}

0800caec <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800caec:	b580      	push	{r7, lr}
 800caee:	b084      	sub	sp, #16
 800caf0:	af00      	add	r7, sp, #0
 800caf2:	4603      	mov	r3, r0
 800caf4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800caf6:	79fb      	ldrb	r3, [r7, #7]
 800caf8:	4a08      	ldr	r2, [pc, #32]	@ (800cb1c <disk_status+0x30>)
 800cafa:	009b      	lsls	r3, r3, #2
 800cafc:	4413      	add	r3, r2
 800cafe:	685b      	ldr	r3, [r3, #4]
 800cb00:	685b      	ldr	r3, [r3, #4]
 800cb02:	79fa      	ldrb	r2, [r7, #7]
 800cb04:	4905      	ldr	r1, [pc, #20]	@ (800cb1c <disk_status+0x30>)
 800cb06:	440a      	add	r2, r1
 800cb08:	7a12      	ldrb	r2, [r2, #8]
 800cb0a:	4610      	mov	r0, r2
 800cb0c:	4798      	blx	r3
 800cb0e:	4603      	mov	r3, r0
 800cb10:	73fb      	strb	r3, [r7, #15]
  return stat;
 800cb12:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb14:	4618      	mov	r0, r3
 800cb16:	3710      	adds	r7, #16
 800cb18:	46bd      	mov	sp, r7
 800cb1a:	bd80      	pop	{r7, pc}
 800cb1c:	20000450 	.word	0x20000450

0800cb20 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800cb20:	b580      	push	{r7, lr}
 800cb22:	b084      	sub	sp, #16
 800cb24:	af00      	add	r7, sp, #0
 800cb26:	4603      	mov	r3, r0
 800cb28:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800cb2e:	79fb      	ldrb	r3, [r7, #7]
 800cb30:	4a0e      	ldr	r2, [pc, #56]	@ (800cb6c <disk_initialize+0x4c>)
 800cb32:	5cd3      	ldrb	r3, [r2, r3]
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d114      	bne.n	800cb62 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800cb38:	79fb      	ldrb	r3, [r7, #7]
 800cb3a:	4a0c      	ldr	r2, [pc, #48]	@ (800cb6c <disk_initialize+0x4c>)
 800cb3c:	009b      	lsls	r3, r3, #2
 800cb3e:	4413      	add	r3, r2
 800cb40:	685b      	ldr	r3, [r3, #4]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	79fa      	ldrb	r2, [r7, #7]
 800cb46:	4909      	ldr	r1, [pc, #36]	@ (800cb6c <disk_initialize+0x4c>)
 800cb48:	440a      	add	r2, r1
 800cb4a:	7a12      	ldrb	r2, [r2, #8]
 800cb4c:	4610      	mov	r0, r2
 800cb4e:	4798      	blx	r3
 800cb50:	4603      	mov	r3, r0
 800cb52:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800cb54:	7bfb      	ldrb	r3, [r7, #15]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d103      	bne.n	800cb62 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800cb5a:	79fb      	ldrb	r3, [r7, #7]
 800cb5c:	4a03      	ldr	r2, [pc, #12]	@ (800cb6c <disk_initialize+0x4c>)
 800cb5e:	2101      	movs	r1, #1
 800cb60:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800cb62:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb64:	4618      	mov	r0, r3
 800cb66:	3710      	adds	r7, #16
 800cb68:	46bd      	mov	sp, r7
 800cb6a:	bd80      	pop	{r7, pc}
 800cb6c:	20000450 	.word	0x20000450

0800cb70 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800cb70:	b590      	push	{r4, r7, lr}
 800cb72:	b087      	sub	sp, #28
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	60b9      	str	r1, [r7, #8]
 800cb78:	607a      	str	r2, [r7, #4]
 800cb7a:	603b      	str	r3, [r7, #0]
 800cb7c:	4603      	mov	r3, r0
 800cb7e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800cb80:	7bfb      	ldrb	r3, [r7, #15]
 800cb82:	4a0a      	ldr	r2, [pc, #40]	@ (800cbac <disk_read+0x3c>)
 800cb84:	009b      	lsls	r3, r3, #2
 800cb86:	4413      	add	r3, r2
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	689c      	ldr	r4, [r3, #8]
 800cb8c:	7bfb      	ldrb	r3, [r7, #15]
 800cb8e:	4a07      	ldr	r2, [pc, #28]	@ (800cbac <disk_read+0x3c>)
 800cb90:	4413      	add	r3, r2
 800cb92:	7a18      	ldrb	r0, [r3, #8]
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	687a      	ldr	r2, [r7, #4]
 800cb98:	68b9      	ldr	r1, [r7, #8]
 800cb9a:	47a0      	blx	r4
 800cb9c:	4603      	mov	r3, r0
 800cb9e:	75fb      	strb	r3, [r7, #23]
  return res;
 800cba0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cba2:	4618      	mov	r0, r3
 800cba4:	371c      	adds	r7, #28
 800cba6:	46bd      	mov	sp, r7
 800cba8:	bd90      	pop	{r4, r7, pc}
 800cbaa:	bf00      	nop
 800cbac:	20000450 	.word	0x20000450

0800cbb0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800cbb0:	b590      	push	{r4, r7, lr}
 800cbb2:	b087      	sub	sp, #28
 800cbb4:	af00      	add	r7, sp, #0
 800cbb6:	60b9      	str	r1, [r7, #8]
 800cbb8:	607a      	str	r2, [r7, #4]
 800cbba:	603b      	str	r3, [r7, #0]
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800cbc0:	7bfb      	ldrb	r3, [r7, #15]
 800cbc2:	4a0a      	ldr	r2, [pc, #40]	@ (800cbec <disk_write+0x3c>)
 800cbc4:	009b      	lsls	r3, r3, #2
 800cbc6:	4413      	add	r3, r2
 800cbc8:	685b      	ldr	r3, [r3, #4]
 800cbca:	68dc      	ldr	r4, [r3, #12]
 800cbcc:	7bfb      	ldrb	r3, [r7, #15]
 800cbce:	4a07      	ldr	r2, [pc, #28]	@ (800cbec <disk_write+0x3c>)
 800cbd0:	4413      	add	r3, r2
 800cbd2:	7a18      	ldrb	r0, [r3, #8]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	687a      	ldr	r2, [r7, #4]
 800cbd8:	68b9      	ldr	r1, [r7, #8]
 800cbda:	47a0      	blx	r4
 800cbdc:	4603      	mov	r3, r0
 800cbde:	75fb      	strb	r3, [r7, #23]
  return res;
 800cbe0:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbe2:	4618      	mov	r0, r3
 800cbe4:	371c      	adds	r7, #28
 800cbe6:	46bd      	mov	sp, r7
 800cbe8:	bd90      	pop	{r4, r7, pc}
 800cbea:	bf00      	nop
 800cbec:	20000450 	.word	0x20000450

0800cbf0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b084      	sub	sp, #16
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	4603      	mov	r3, r0
 800cbf8:	603a      	str	r2, [r7, #0]
 800cbfa:	71fb      	strb	r3, [r7, #7]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cc00:	79fb      	ldrb	r3, [r7, #7]
 800cc02:	4a09      	ldr	r2, [pc, #36]	@ (800cc28 <disk_ioctl+0x38>)
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	4413      	add	r3, r2
 800cc08:	685b      	ldr	r3, [r3, #4]
 800cc0a:	691b      	ldr	r3, [r3, #16]
 800cc0c:	79fa      	ldrb	r2, [r7, #7]
 800cc0e:	4906      	ldr	r1, [pc, #24]	@ (800cc28 <disk_ioctl+0x38>)
 800cc10:	440a      	add	r2, r1
 800cc12:	7a10      	ldrb	r0, [r2, #8]
 800cc14:	79b9      	ldrb	r1, [r7, #6]
 800cc16:	683a      	ldr	r2, [r7, #0]
 800cc18:	4798      	blx	r3
 800cc1a:	4603      	mov	r3, r0
 800cc1c:	73fb      	strb	r3, [r7, #15]
  return res;
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc20:	4618      	mov	r0, r3
 800cc22:	3710      	adds	r7, #16
 800cc24:	46bd      	mov	sp, r7
 800cc26:	bd80      	pop	{r7, pc}
 800cc28:	20000450 	.word	0x20000450

0800cc2c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b085      	sub	sp, #20
 800cc30:	af00      	add	r7, sp, #0
 800cc32:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3301      	adds	r3, #1
 800cc38:	781b      	ldrb	r3, [r3, #0]
 800cc3a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cc3c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cc40:	021b      	lsls	r3, r3, #8
 800cc42:	b21a      	sxth	r2, r3
 800cc44:	687b      	ldr	r3, [r7, #4]
 800cc46:	781b      	ldrb	r3, [r3, #0]
 800cc48:	b21b      	sxth	r3, r3
 800cc4a:	4313      	orrs	r3, r2
 800cc4c:	b21b      	sxth	r3, r3
 800cc4e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cc50:	89fb      	ldrh	r3, [r7, #14]
}
 800cc52:	4618      	mov	r0, r3
 800cc54:	3714      	adds	r7, #20
 800cc56:	46bd      	mov	sp, r7
 800cc58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5c:	4770      	bx	lr

0800cc5e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cc5e:	b480      	push	{r7}
 800cc60:	b085      	sub	sp, #20
 800cc62:	af00      	add	r7, sp, #0
 800cc64:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	3303      	adds	r3, #3
 800cc6a:	781b      	ldrb	r3, [r3, #0]
 800cc6c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	021b      	lsls	r3, r3, #8
 800cc72:	687a      	ldr	r2, [r7, #4]
 800cc74:	3202      	adds	r2, #2
 800cc76:	7812      	ldrb	r2, [r2, #0]
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	021b      	lsls	r3, r3, #8
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	3201      	adds	r2, #1
 800cc84:	7812      	ldrb	r2, [r2, #0]
 800cc86:	4313      	orrs	r3, r2
 800cc88:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	021b      	lsls	r3, r3, #8
 800cc8e:	687a      	ldr	r2, [r7, #4]
 800cc90:	7812      	ldrb	r2, [r2, #0]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	60fb      	str	r3, [r7, #12]
	return rv;
 800cc96:	68fb      	ldr	r3, [r7, #12]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3714      	adds	r7, #20
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca2:	4770      	bx	lr

0800cca4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cca4:	b480      	push	{r7}
 800cca6:	b083      	sub	sp, #12
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
 800ccac:	460b      	mov	r3, r1
 800ccae:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	1c5a      	adds	r2, r3, #1
 800ccb4:	607a      	str	r2, [r7, #4]
 800ccb6:	887a      	ldrh	r2, [r7, #2]
 800ccb8:	b2d2      	uxtb	r2, r2
 800ccba:	701a      	strb	r2, [r3, #0]
 800ccbc:	887b      	ldrh	r3, [r7, #2]
 800ccbe:	0a1b      	lsrs	r3, r3, #8
 800ccc0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ccc2:	687b      	ldr	r3, [r7, #4]
 800ccc4:	1c5a      	adds	r2, r3, #1
 800ccc6:	607a      	str	r2, [r7, #4]
 800ccc8:	887a      	ldrh	r2, [r7, #2]
 800ccca:	b2d2      	uxtb	r2, r2
 800cccc:	701a      	strb	r2, [r3, #0]
}
 800ccce:	bf00      	nop
 800ccd0:	370c      	adds	r7, #12
 800ccd2:	46bd      	mov	sp, r7
 800ccd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd8:	4770      	bx	lr

0800ccda <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ccda:	b480      	push	{r7}
 800ccdc:	b083      	sub	sp, #12
 800ccde:	af00      	add	r7, sp, #0
 800cce0:	6078      	str	r0, [r7, #4]
 800cce2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	1c5a      	adds	r2, r3, #1
 800cce8:	607a      	str	r2, [r7, #4]
 800ccea:	683a      	ldr	r2, [r7, #0]
 800ccec:	b2d2      	uxtb	r2, r2
 800ccee:	701a      	strb	r2, [r3, #0]
 800ccf0:	683b      	ldr	r3, [r7, #0]
 800ccf2:	0a1b      	lsrs	r3, r3, #8
 800ccf4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ccf6:	687b      	ldr	r3, [r7, #4]
 800ccf8:	1c5a      	adds	r2, r3, #1
 800ccfa:	607a      	str	r2, [r7, #4]
 800ccfc:	683a      	ldr	r2, [r7, #0]
 800ccfe:	b2d2      	uxtb	r2, r2
 800cd00:	701a      	strb	r2, [r3, #0]
 800cd02:	683b      	ldr	r3, [r7, #0]
 800cd04:	0a1b      	lsrs	r3, r3, #8
 800cd06:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	1c5a      	adds	r2, r3, #1
 800cd0c:	607a      	str	r2, [r7, #4]
 800cd0e:	683a      	ldr	r2, [r7, #0]
 800cd10:	b2d2      	uxtb	r2, r2
 800cd12:	701a      	strb	r2, [r3, #0]
 800cd14:	683b      	ldr	r3, [r7, #0]
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	1c5a      	adds	r2, r3, #1
 800cd1e:	607a      	str	r2, [r7, #4]
 800cd20:	683a      	ldr	r2, [r7, #0]
 800cd22:	b2d2      	uxtb	r2, r2
 800cd24:	701a      	strb	r2, [r3, #0]
}
 800cd26:	bf00      	nop
 800cd28:	370c      	adds	r7, #12
 800cd2a:	46bd      	mov	sp, r7
 800cd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd30:	4770      	bx	lr

0800cd32 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cd32:	b480      	push	{r7}
 800cd34:	b087      	sub	sp, #28
 800cd36:	af00      	add	r7, sp, #0
 800cd38:	60f8      	str	r0, [r7, #12]
 800cd3a:	60b9      	str	r1, [r7, #8]
 800cd3c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cd42:	68bb      	ldr	r3, [r7, #8]
 800cd44:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d00d      	beq.n	800cd68 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cd4c:	693a      	ldr	r2, [r7, #16]
 800cd4e:	1c53      	adds	r3, r2, #1
 800cd50:	613b      	str	r3, [r7, #16]
 800cd52:	697b      	ldr	r3, [r7, #20]
 800cd54:	1c59      	adds	r1, r3, #1
 800cd56:	6179      	str	r1, [r7, #20]
 800cd58:	7812      	ldrb	r2, [r2, #0]
 800cd5a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cd5c:	687b      	ldr	r3, [r7, #4]
 800cd5e:	3b01      	subs	r3, #1
 800cd60:	607b      	str	r3, [r7, #4]
 800cd62:	687b      	ldr	r3, [r7, #4]
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d1f1      	bne.n	800cd4c <mem_cpy+0x1a>
	}
}
 800cd68:	bf00      	nop
 800cd6a:	371c      	adds	r7, #28
 800cd6c:	46bd      	mov	sp, r7
 800cd6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd72:	4770      	bx	lr

0800cd74 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cd74:	b480      	push	{r7}
 800cd76:	b087      	sub	sp, #28
 800cd78:	af00      	add	r7, sp, #0
 800cd7a:	60f8      	str	r0, [r7, #12]
 800cd7c:	60b9      	str	r1, [r7, #8]
 800cd7e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cd80:	68fb      	ldr	r3, [r7, #12]
 800cd82:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	617a      	str	r2, [r7, #20]
 800cd8a:	68ba      	ldr	r2, [r7, #8]
 800cd8c:	b2d2      	uxtb	r2, r2
 800cd8e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	3b01      	subs	r3, #1
 800cd94:	607b      	str	r3, [r7, #4]
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1f3      	bne.n	800cd84 <mem_set+0x10>
}
 800cd9c:	bf00      	nop
 800cd9e:	bf00      	nop
 800cda0:	371c      	adds	r7, #28
 800cda2:	46bd      	mov	sp, r7
 800cda4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cda8:	4770      	bx	lr
	...

0800cdac <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cdac:	b480      	push	{r7}
 800cdae:	b085      	sub	sp, #20
 800cdb0:	af00      	add	r7, sp, #0
 800cdb2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	3b01      	subs	r3, #1
 800cdb8:	607b      	str	r3, [r7, #4]
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2b01      	cmp	r3, #1
 800cdbe:	d825      	bhi.n	800ce0c <dec_lock+0x60>
		n = Files[i].ctr;
 800cdc0:	4a17      	ldr	r2, [pc, #92]	@ (800ce20 <dec_lock+0x74>)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	011b      	lsls	r3, r3, #4
 800cdc6:	4413      	add	r3, r2
 800cdc8:	330c      	adds	r3, #12
 800cdca:	881b      	ldrh	r3, [r3, #0]
 800cdcc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cdce:	89fb      	ldrh	r3, [r7, #14]
 800cdd0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdd4:	d101      	bne.n	800cdda <dec_lock+0x2e>
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cdda:	89fb      	ldrh	r3, [r7, #14]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d002      	beq.n	800cde6 <dec_lock+0x3a>
 800cde0:	89fb      	ldrh	r3, [r7, #14]
 800cde2:	3b01      	subs	r3, #1
 800cde4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cde6:	4a0e      	ldr	r2, [pc, #56]	@ (800ce20 <dec_lock+0x74>)
 800cde8:	687b      	ldr	r3, [r7, #4]
 800cdea:	011b      	lsls	r3, r3, #4
 800cdec:	4413      	add	r3, r2
 800cdee:	330c      	adds	r3, #12
 800cdf0:	89fa      	ldrh	r2, [r7, #14]
 800cdf2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cdf4:	89fb      	ldrh	r3, [r7, #14]
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d105      	bne.n	800ce06 <dec_lock+0x5a>
 800cdfa:	4a09      	ldr	r2, [pc, #36]	@ (800ce20 <dec_lock+0x74>)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	011b      	lsls	r3, r3, #4
 800ce00:	4413      	add	r3, r2
 800ce02:	2200      	movs	r2, #0
 800ce04:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800ce06:	2300      	movs	r3, #0
 800ce08:	737b      	strb	r3, [r7, #13]
 800ce0a:	e001      	b.n	800ce10 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800ce10:	7b7b      	ldrb	r3, [r7, #13]
}
 800ce12:	4618      	mov	r0, r3
 800ce14:	3714      	adds	r7, #20
 800ce16:	46bd      	mov	sp, r7
 800ce18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	20000430 	.word	0x20000430

0800ce24 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800ce24:	b480      	push	{r7}
 800ce26:	b085      	sub	sp, #20
 800ce28:	af00      	add	r7, sp, #0
 800ce2a:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800ce2c:	2300      	movs	r3, #0
 800ce2e:	60fb      	str	r3, [r7, #12]
 800ce30:	e010      	b.n	800ce54 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800ce32:	4a0d      	ldr	r2, [pc, #52]	@ (800ce68 <clear_lock+0x44>)
 800ce34:	68fb      	ldr	r3, [r7, #12]
 800ce36:	011b      	lsls	r3, r3, #4
 800ce38:	4413      	add	r3, r2
 800ce3a:	681b      	ldr	r3, [r3, #0]
 800ce3c:	687a      	ldr	r2, [r7, #4]
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d105      	bne.n	800ce4e <clear_lock+0x2a>
 800ce42:	4a09      	ldr	r2, [pc, #36]	@ (800ce68 <clear_lock+0x44>)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	011b      	lsls	r3, r3, #4
 800ce48:	4413      	add	r3, r2
 800ce4a:	2200      	movs	r2, #0
 800ce4c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800ce4e:	68fb      	ldr	r3, [r7, #12]
 800ce50:	3301      	adds	r3, #1
 800ce52:	60fb      	str	r3, [r7, #12]
 800ce54:	68fb      	ldr	r3, [r7, #12]
 800ce56:	2b01      	cmp	r3, #1
 800ce58:	d9eb      	bls.n	800ce32 <clear_lock+0xe>
	}
}
 800ce5a:	bf00      	nop
 800ce5c:	bf00      	nop
 800ce5e:	3714      	adds	r7, #20
 800ce60:	46bd      	mov	sp, r7
 800ce62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce66:	4770      	bx	lr
 800ce68:	20000430 	.word	0x20000430

0800ce6c <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b086      	sub	sp, #24
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800ce74:	2300      	movs	r3, #0
 800ce76:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	78db      	ldrb	r3, [r3, #3]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d034      	beq.n	800ceea <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce84:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	7858      	ldrb	r0, [r3, #1]
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ce90:	2301      	movs	r3, #1
 800ce92:	697a      	ldr	r2, [r7, #20]
 800ce94:	f7ff fe8c 	bl	800cbb0 <disk_write>
 800ce98:	4603      	mov	r3, r0
 800ce9a:	2b00      	cmp	r3, #0
 800ce9c:	d002      	beq.n	800cea4 <sync_window+0x38>
			res = FR_DISK_ERR;
 800ce9e:	2301      	movs	r3, #1
 800cea0:	73fb      	strb	r3, [r7, #15]
 800cea2:	e022      	b.n	800ceea <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	2200      	movs	r2, #0
 800cea8:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	6a1b      	ldr	r3, [r3, #32]
 800ceae:	697a      	ldr	r2, [r7, #20]
 800ceb0:	1ad2      	subs	r2, r2, r3
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	699b      	ldr	r3, [r3, #24]
 800ceb6:	429a      	cmp	r2, r3
 800ceb8:	d217      	bcs.n	800ceea <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	789b      	ldrb	r3, [r3, #2]
 800cebe:	613b      	str	r3, [r7, #16]
 800cec0:	e010      	b.n	800cee4 <sync_window+0x78>
					wsect += fs->fsize;
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	699b      	ldr	r3, [r3, #24]
 800cec6:	697a      	ldr	r2, [r7, #20]
 800cec8:	4413      	add	r3, r2
 800ceca:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	7858      	ldrb	r0, [r3, #1]
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ced6:	2301      	movs	r3, #1
 800ced8:	697a      	ldr	r2, [r7, #20]
 800ceda:	f7ff fe69 	bl	800cbb0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	3b01      	subs	r3, #1
 800cee2:	613b      	str	r3, [r7, #16]
 800cee4:	693b      	ldr	r3, [r7, #16]
 800cee6:	2b01      	cmp	r3, #1
 800cee8:	d8eb      	bhi.n	800cec2 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800ceea:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceec:	4618      	mov	r0, r3
 800ceee:	3718      	adds	r7, #24
 800cef0:	46bd      	mov	sp, r7
 800cef2:	bd80      	pop	{r7, pc}

0800cef4 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cef4:	b580      	push	{r7, lr}
 800cef6:	b084      	sub	sp, #16
 800cef8:	af00      	add	r7, sp, #0
 800cefa:	6078      	str	r0, [r7, #4]
 800cefc:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cefe:	2300      	movs	r3, #0
 800cf00:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf06:	683a      	ldr	r2, [r7, #0]
 800cf08:	429a      	cmp	r2, r3
 800cf0a:	d01b      	beq.n	800cf44 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cf0c:	6878      	ldr	r0, [r7, #4]
 800cf0e:	f7ff ffad 	bl	800ce6c <sync_window>
 800cf12:	4603      	mov	r3, r0
 800cf14:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cf16:	7bfb      	ldrb	r3, [r7, #15]
 800cf18:	2b00      	cmp	r3, #0
 800cf1a:	d113      	bne.n	800cf44 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	7858      	ldrb	r0, [r3, #1]
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cf26:	2301      	movs	r3, #1
 800cf28:	683a      	ldr	r2, [r7, #0]
 800cf2a:	f7ff fe21 	bl	800cb70 <disk_read>
 800cf2e:	4603      	mov	r3, r0
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	d004      	beq.n	800cf3e <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cf34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cf38:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	683a      	ldr	r2, [r7, #0]
 800cf42:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cf44:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3710      	adds	r7, #16
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
	...

0800cf50 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cf58:	6878      	ldr	r0, [r7, #4]
 800cf5a:	f7ff ff87 	bl	800ce6c <sync_window>
 800cf5e:	4603      	mov	r3, r0
 800cf60:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cf62:	7bfb      	ldrb	r3, [r7, #15]
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d158      	bne.n	800d01a <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	781b      	ldrb	r3, [r3, #0]
 800cf6c:	2b03      	cmp	r3, #3
 800cf6e:	d148      	bne.n	800d002 <sync_fs+0xb2>
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	791b      	ldrb	r3, [r3, #4]
 800cf74:	2b01      	cmp	r3, #1
 800cf76:	d144      	bne.n	800d002 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	3330      	adds	r3, #48	@ 0x30
 800cf7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cf80:	2100      	movs	r1, #0
 800cf82:	4618      	mov	r0, r3
 800cf84:	f7ff fef6 	bl	800cd74 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	3330      	adds	r3, #48	@ 0x30
 800cf8c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cf90:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cf94:	4618      	mov	r0, r3
 800cf96:	f7ff fe85 	bl	800cca4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	3330      	adds	r3, #48	@ 0x30
 800cf9e:	4921      	ldr	r1, [pc, #132]	@ (800d024 <sync_fs+0xd4>)
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	f7ff fe9a 	bl	800ccda <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cfa6:	687b      	ldr	r3, [r7, #4]
 800cfa8:	3330      	adds	r3, #48	@ 0x30
 800cfaa:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cfae:	491e      	ldr	r1, [pc, #120]	@ (800d028 <sync_fs+0xd8>)
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fe92 	bl	800ccda <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	3330      	adds	r3, #48	@ 0x30
 800cfba:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	691b      	ldr	r3, [r3, #16]
 800cfc2:	4619      	mov	r1, r3
 800cfc4:	4610      	mov	r0, r2
 800cfc6:	f7ff fe88 	bl	800ccda <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	3330      	adds	r3, #48	@ 0x30
 800cfce:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	68db      	ldr	r3, [r3, #12]
 800cfd6:	4619      	mov	r1, r3
 800cfd8:	4610      	mov	r0, r2
 800cfda:	f7ff fe7e 	bl	800ccda <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	69db      	ldr	r3, [r3, #28]
 800cfe2:	1c5a      	adds	r2, r3, #1
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	7858      	ldrb	r0, [r3, #1]
 800cfec:	687b      	ldr	r3, [r7, #4]
 800cfee:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff6:	2301      	movs	r3, #1
 800cff8:	f7ff fdda 	bl	800cbb0 <disk_write>
			fs->fsi_flag = 0;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	2200      	movs	r2, #0
 800d000:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	785b      	ldrb	r3, [r3, #1]
 800d006:	2200      	movs	r2, #0
 800d008:	2100      	movs	r1, #0
 800d00a:	4618      	mov	r0, r3
 800d00c:	f7ff fdf0 	bl	800cbf0 <disk_ioctl>
 800d010:	4603      	mov	r3, r0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d001      	beq.n	800d01a <sync_fs+0xca>
 800d016:	2301      	movs	r3, #1
 800d018:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d01a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d01c:	4618      	mov	r0, r3
 800d01e:	3710      	adds	r7, #16
 800d020:	46bd      	mov	sp, r7
 800d022:	bd80      	pop	{r7, pc}
 800d024:	41615252 	.word	0x41615252
 800d028:	61417272 	.word	0x61417272

0800d02c <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d02c:	b480      	push	{r7}
 800d02e:	b083      	sub	sp, #12
 800d030:	af00      	add	r7, sp, #0
 800d032:	6078      	str	r0, [r7, #4]
 800d034:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	3b02      	subs	r3, #2
 800d03a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	695b      	ldr	r3, [r3, #20]
 800d040:	3b02      	subs	r3, #2
 800d042:	683a      	ldr	r2, [r7, #0]
 800d044:	429a      	cmp	r2, r3
 800d046:	d301      	bcc.n	800d04c <clust2sect+0x20>
 800d048:	2300      	movs	r3, #0
 800d04a:	e008      	b.n	800d05e <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	895b      	ldrh	r3, [r3, #10]
 800d050:	461a      	mov	r2, r3
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	fb03 f202 	mul.w	r2, r3, r2
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d05c:	4413      	add	r3, r2
}
 800d05e:	4618      	mov	r0, r3
 800d060:	370c      	adds	r7, #12
 800d062:	46bd      	mov	sp, r7
 800d064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d068:	4770      	bx	lr

0800d06a <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d06a:	b580      	push	{r7, lr}
 800d06c:	b086      	sub	sp, #24
 800d06e:	af00      	add	r7, sp, #0
 800d070:	6078      	str	r0, [r7, #4]
 800d072:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d07a:	683b      	ldr	r3, [r7, #0]
 800d07c:	2b01      	cmp	r3, #1
 800d07e:	d904      	bls.n	800d08a <get_fat+0x20>
 800d080:	693b      	ldr	r3, [r7, #16]
 800d082:	695b      	ldr	r3, [r3, #20]
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	429a      	cmp	r2, r3
 800d088:	d302      	bcc.n	800d090 <get_fat+0x26>
		val = 1;	/* Internal error */
 800d08a:	2301      	movs	r3, #1
 800d08c:	617b      	str	r3, [r7, #20]
 800d08e:	e08e      	b.n	800d1ae <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d090:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d094:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	781b      	ldrb	r3, [r3, #0]
 800d09a:	2b03      	cmp	r3, #3
 800d09c:	d061      	beq.n	800d162 <get_fat+0xf8>
 800d09e:	2b03      	cmp	r3, #3
 800d0a0:	dc7b      	bgt.n	800d19a <get_fat+0x130>
 800d0a2:	2b01      	cmp	r3, #1
 800d0a4:	d002      	beq.n	800d0ac <get_fat+0x42>
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d041      	beq.n	800d12e <get_fat+0xc4>
 800d0aa:	e076      	b.n	800d19a <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d0ac:	683b      	ldr	r3, [r7, #0]
 800d0ae:	60fb      	str	r3, [r7, #12]
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	085b      	lsrs	r3, r3, #1
 800d0b4:	68fa      	ldr	r2, [r7, #12]
 800d0b6:	4413      	add	r3, r2
 800d0b8:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0ba:	693b      	ldr	r3, [r7, #16]
 800d0bc:	6a1a      	ldr	r2, [r3, #32]
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	0a5b      	lsrs	r3, r3, #9
 800d0c2:	4413      	add	r3, r2
 800d0c4:	4619      	mov	r1, r3
 800d0c6:	6938      	ldr	r0, [r7, #16]
 800d0c8:	f7ff ff14 	bl	800cef4 <move_window>
 800d0cc:	4603      	mov	r3, r0
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d166      	bne.n	800d1a0 <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d0d2:	68fb      	ldr	r3, [r7, #12]
 800d0d4:	1c5a      	adds	r2, r3, #1
 800d0d6:	60fa      	str	r2, [r7, #12]
 800d0d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0dc:	693a      	ldr	r2, [r7, #16]
 800d0de:	4413      	add	r3, r2
 800d0e0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d0e4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d0e6:	693b      	ldr	r3, [r7, #16]
 800d0e8:	6a1a      	ldr	r2, [r3, #32]
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	0a5b      	lsrs	r3, r3, #9
 800d0ee:	4413      	add	r3, r2
 800d0f0:	4619      	mov	r1, r3
 800d0f2:	6938      	ldr	r0, [r7, #16]
 800d0f4:	f7ff fefe 	bl	800cef4 <move_window>
 800d0f8:	4603      	mov	r3, r0
 800d0fa:	2b00      	cmp	r3, #0
 800d0fc:	d152      	bne.n	800d1a4 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d0fe:	68fb      	ldr	r3, [r7, #12]
 800d100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d104:	693a      	ldr	r2, [r7, #16]
 800d106:	4413      	add	r3, r2
 800d108:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d10c:	021b      	lsls	r3, r3, #8
 800d10e:	68ba      	ldr	r2, [r7, #8]
 800d110:	4313      	orrs	r3, r2
 800d112:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d114:	683b      	ldr	r3, [r7, #0]
 800d116:	f003 0301 	and.w	r3, r3, #1
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d002      	beq.n	800d124 <get_fat+0xba>
 800d11e:	68bb      	ldr	r3, [r7, #8]
 800d120:	091b      	lsrs	r3, r3, #4
 800d122:	e002      	b.n	800d12a <get_fat+0xc0>
 800d124:	68bb      	ldr	r3, [r7, #8]
 800d126:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d12a:	617b      	str	r3, [r7, #20]
			break;
 800d12c:	e03f      	b.n	800d1ae <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d12e:	693b      	ldr	r3, [r7, #16]
 800d130:	6a1a      	ldr	r2, [r3, #32]
 800d132:	683b      	ldr	r3, [r7, #0]
 800d134:	0a1b      	lsrs	r3, r3, #8
 800d136:	4413      	add	r3, r2
 800d138:	4619      	mov	r1, r3
 800d13a:	6938      	ldr	r0, [r7, #16]
 800d13c:	f7ff feda 	bl	800cef4 <move_window>
 800d140:	4603      	mov	r3, r0
 800d142:	2b00      	cmp	r3, #0
 800d144:	d130      	bne.n	800d1a8 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d146:	693b      	ldr	r3, [r7, #16]
 800d148:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	005b      	lsls	r3, r3, #1
 800d150:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d154:	4413      	add	r3, r2
 800d156:	4618      	mov	r0, r3
 800d158:	f7ff fd68 	bl	800cc2c <ld_word>
 800d15c:	4603      	mov	r3, r0
 800d15e:	617b      	str	r3, [r7, #20]
			break;
 800d160:	e025      	b.n	800d1ae <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d162:	693b      	ldr	r3, [r7, #16]
 800d164:	6a1a      	ldr	r2, [r3, #32]
 800d166:	683b      	ldr	r3, [r7, #0]
 800d168:	09db      	lsrs	r3, r3, #7
 800d16a:	4413      	add	r3, r2
 800d16c:	4619      	mov	r1, r3
 800d16e:	6938      	ldr	r0, [r7, #16]
 800d170:	f7ff fec0 	bl	800cef4 <move_window>
 800d174:	4603      	mov	r3, r0
 800d176:	2b00      	cmp	r3, #0
 800d178:	d118      	bne.n	800d1ac <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d17a:	693b      	ldr	r3, [r7, #16]
 800d17c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	009b      	lsls	r3, r3, #2
 800d184:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d188:	4413      	add	r3, r2
 800d18a:	4618      	mov	r0, r3
 800d18c:	f7ff fd67 	bl	800cc5e <ld_dword>
 800d190:	4603      	mov	r3, r0
 800d192:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d196:	617b      	str	r3, [r7, #20]
			break;
 800d198:	e009      	b.n	800d1ae <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d19a:	2301      	movs	r3, #1
 800d19c:	617b      	str	r3, [r7, #20]
 800d19e:	e006      	b.n	800d1ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1a0:	bf00      	nop
 800d1a2:	e004      	b.n	800d1ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d1a4:	bf00      	nop
 800d1a6:	e002      	b.n	800d1ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d1a8:	bf00      	nop
 800d1aa:	e000      	b.n	800d1ae <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d1ac:	bf00      	nop
		}
	}

	return val;
 800d1ae:	697b      	ldr	r3, [r7, #20]
}
 800d1b0:	4618      	mov	r0, r3
 800d1b2:	3718      	adds	r7, #24
 800d1b4:	46bd      	mov	sp, r7
 800d1b6:	bd80      	pop	{r7, pc}

0800d1b8 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d1b8:	b480      	push	{r7}
 800d1ba:	b087      	sub	sp, #28
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	6078      	str	r0, [r7, #4]
 800d1c0:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d1cc:	3304      	adds	r3, #4
 800d1ce:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	0a5b      	lsrs	r3, r3, #9
 800d1d4:	68fa      	ldr	r2, [r7, #12]
 800d1d6:	8952      	ldrh	r2, [r2, #10]
 800d1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800d1dc:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d1de:	693b      	ldr	r3, [r7, #16]
 800d1e0:	1d1a      	adds	r2, r3, #4
 800d1e2:	613a      	str	r2, [r7, #16]
 800d1e4:	681b      	ldr	r3, [r3, #0]
 800d1e6:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d101      	bne.n	800d1f2 <clmt_clust+0x3a>
 800d1ee:	2300      	movs	r3, #0
 800d1f0:	e010      	b.n	800d214 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d1f2:	697a      	ldr	r2, [r7, #20]
 800d1f4:	68bb      	ldr	r3, [r7, #8]
 800d1f6:	429a      	cmp	r2, r3
 800d1f8:	d307      	bcc.n	800d20a <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d1fa:	697a      	ldr	r2, [r7, #20]
 800d1fc:	68bb      	ldr	r3, [r7, #8]
 800d1fe:	1ad3      	subs	r3, r2, r3
 800d200:	617b      	str	r3, [r7, #20]
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	3304      	adds	r3, #4
 800d206:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d208:	e7e9      	b.n	800d1de <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d20a:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d20c:	693b      	ldr	r3, [r7, #16]
 800d20e:	681a      	ldr	r2, [r3, #0]
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	4413      	add	r3, r2
}
 800d214:	4618      	mov	r0, r3
 800d216:	371c      	adds	r7, #28
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	60f8      	str	r0, [r7, #12]
 800d228:	60b9      	str	r1, [r7, #8]
 800d22a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d22c:	68bb      	ldr	r3, [r7, #8]
 800d22e:	331a      	adds	r3, #26
 800d230:	687a      	ldr	r2, [r7, #4]
 800d232:	b292      	uxth	r2, r2
 800d234:	4611      	mov	r1, r2
 800d236:	4618      	mov	r0, r3
 800d238:	f7ff fd34 	bl	800cca4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	781b      	ldrb	r3, [r3, #0]
 800d240:	2b03      	cmp	r3, #3
 800d242:	d109      	bne.n	800d258 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f103 0214 	add.w	r2, r3, #20
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	0c1b      	lsrs	r3, r3, #16
 800d24e:	b29b      	uxth	r3, r3
 800d250:	4619      	mov	r1, r3
 800d252:	4610      	mov	r0, r2
 800d254:	f7ff fd26 	bl	800cca4 <st_word>
	}
}
 800d258:	bf00      	nop
 800d25a:	3710      	adds	r7, #16
 800d25c:	46bd      	mov	sp, r7
 800d25e:	bd80      	pop	{r7, pc}

0800d260 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d260:	b480      	push	{r7}
 800d262:	b087      	sub	sp, #28
 800d264:	af00      	add	r7, sp, #0
 800d266:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d268:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d26c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681b      	ldr	r3, [r3, #0]
 800d272:	2b00      	cmp	r3, #0
 800d274:	d031      	beq.n	800d2da <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d276:	687b      	ldr	r3, [r7, #4]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	e002      	b.n	800d284 <get_ldnumber+0x24>
 800d27e:	697b      	ldr	r3, [r7, #20]
 800d280:	3301      	adds	r3, #1
 800d282:	617b      	str	r3, [r7, #20]
 800d284:	697b      	ldr	r3, [r7, #20]
 800d286:	781b      	ldrb	r3, [r3, #0]
 800d288:	2b20      	cmp	r3, #32
 800d28a:	d903      	bls.n	800d294 <get_ldnumber+0x34>
 800d28c:	697b      	ldr	r3, [r7, #20]
 800d28e:	781b      	ldrb	r3, [r3, #0]
 800d290:	2b3a      	cmp	r3, #58	@ 0x3a
 800d292:	d1f4      	bne.n	800d27e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	781b      	ldrb	r3, [r3, #0]
 800d298:	2b3a      	cmp	r3, #58	@ 0x3a
 800d29a:	d11c      	bne.n	800d2d6 <get_ldnumber+0x76>
			tp = *path;
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	681b      	ldr	r3, [r3, #0]
 800d2a0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d2a2:	68fb      	ldr	r3, [r7, #12]
 800d2a4:	1c5a      	adds	r2, r3, #1
 800d2a6:	60fa      	str	r2, [r7, #12]
 800d2a8:	781b      	ldrb	r3, [r3, #0]
 800d2aa:	3b30      	subs	r3, #48	@ 0x30
 800d2ac:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	2b09      	cmp	r3, #9
 800d2b2:	d80e      	bhi.n	800d2d2 <get_ldnumber+0x72>
 800d2b4:	68fa      	ldr	r2, [r7, #12]
 800d2b6:	697b      	ldr	r3, [r7, #20]
 800d2b8:	429a      	cmp	r2, r3
 800d2ba:	d10a      	bne.n	800d2d2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d2bc:	68bb      	ldr	r3, [r7, #8]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d107      	bne.n	800d2d2 <get_ldnumber+0x72>
					vol = (int)i;
 800d2c2:	68bb      	ldr	r3, [r7, #8]
 800d2c4:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d2c6:	697b      	ldr	r3, [r7, #20]
 800d2c8:	3301      	adds	r3, #1
 800d2ca:	617b      	str	r3, [r7, #20]
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	697a      	ldr	r2, [r7, #20]
 800d2d0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	e002      	b.n	800d2dc <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d2da:	693b      	ldr	r3, [r7, #16]
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	371c      	adds	r7, #28
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2e6:	4770      	bx	lr

0800d2e8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d2e8:	b580      	push	{r7, lr}
 800d2ea:	b082      	sub	sp, #8
 800d2ec:	af00      	add	r7, sp, #0
 800d2ee:	6078      	str	r0, [r7, #4]
 800d2f0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	2200      	movs	r2, #0
 800d2f6:	70da      	strb	r2, [r3, #3]
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d2fe:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d300:	6839      	ldr	r1, [r7, #0]
 800d302:	6878      	ldr	r0, [r7, #4]
 800d304:	f7ff fdf6 	bl	800cef4 <move_window>
 800d308:	4603      	mov	r3, r0
 800d30a:	2b00      	cmp	r3, #0
 800d30c:	d001      	beq.n	800d312 <check_fs+0x2a>
 800d30e:	2304      	movs	r3, #4
 800d310:	e038      	b.n	800d384 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	3330      	adds	r3, #48	@ 0x30
 800d316:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d31a:	4618      	mov	r0, r3
 800d31c:	f7ff fc86 	bl	800cc2c <ld_word>
 800d320:	4603      	mov	r3, r0
 800d322:	461a      	mov	r2, r3
 800d324:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d328:	429a      	cmp	r2, r3
 800d32a:	d001      	beq.n	800d330 <check_fs+0x48>
 800d32c:	2303      	movs	r3, #3
 800d32e:	e029      	b.n	800d384 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800d330:	687b      	ldr	r3, [r7, #4]
 800d332:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d336:	2be9      	cmp	r3, #233	@ 0xe9
 800d338:	d009      	beq.n	800d34e <check_fs+0x66>
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d340:	2beb      	cmp	r3, #235	@ 0xeb
 800d342:	d11e      	bne.n	800d382 <check_fs+0x9a>
 800d344:	687b      	ldr	r3, [r7, #4]
 800d346:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800d34a:	2b90      	cmp	r3, #144	@ 0x90
 800d34c:	d119      	bne.n	800d382 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	3330      	adds	r3, #48	@ 0x30
 800d352:	3336      	adds	r3, #54	@ 0x36
 800d354:	4618      	mov	r0, r3
 800d356:	f7ff fc82 	bl	800cc5e <ld_dword>
 800d35a:	4603      	mov	r3, r0
 800d35c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800d360:	4a0a      	ldr	r2, [pc, #40]	@ (800d38c <check_fs+0xa4>)
 800d362:	4293      	cmp	r3, r2
 800d364:	d101      	bne.n	800d36a <check_fs+0x82>
 800d366:	2300      	movs	r3, #0
 800d368:	e00c      	b.n	800d384 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	3330      	adds	r3, #48	@ 0x30
 800d36e:	3352      	adds	r3, #82	@ 0x52
 800d370:	4618      	mov	r0, r3
 800d372:	f7ff fc74 	bl	800cc5e <ld_dword>
 800d376:	4603      	mov	r3, r0
 800d378:	4a05      	ldr	r2, [pc, #20]	@ (800d390 <check_fs+0xa8>)
 800d37a:	4293      	cmp	r3, r2
 800d37c:	d101      	bne.n	800d382 <check_fs+0x9a>
 800d37e:	2300      	movs	r3, #0
 800d380:	e000      	b.n	800d384 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800d382:	2302      	movs	r3, #2
}
 800d384:	4618      	mov	r0, r3
 800d386:	3708      	adds	r7, #8
 800d388:	46bd      	mov	sp, r7
 800d38a:	bd80      	pop	{r7, pc}
 800d38c:	00544146 	.word	0x00544146
 800d390:	33544146 	.word	0x33544146

0800d394 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800d394:	b580      	push	{r7, lr}
 800d396:	b096      	sub	sp, #88	@ 0x58
 800d398:	af00      	add	r7, sp, #0
 800d39a:	60f8      	str	r0, [r7, #12]
 800d39c:	60b9      	str	r1, [r7, #8]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800d3a2:	68bb      	ldr	r3, [r7, #8]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800d3a8:	68f8      	ldr	r0, [r7, #12]
 800d3aa:	f7ff ff59 	bl	800d260 <get_ldnumber>
 800d3ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800d3b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	da01      	bge.n	800d3ba <find_volume+0x26>
 800d3b6:	230b      	movs	r3, #11
 800d3b8:	e22d      	b.n	800d816 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800d3ba:	4aa1      	ldr	r2, [pc, #644]	@ (800d640 <find_volume+0x2ac>)
 800d3bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d3be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800d3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d101      	bne.n	800d3ce <find_volume+0x3a>
 800d3ca:	230c      	movs	r3, #12
 800d3cc:	e223      	b.n	800d816 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800d3ce:	68bb      	ldr	r3, [r7, #8]
 800d3d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d3d2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800d3d4:	79fb      	ldrb	r3, [r7, #7]
 800d3d6:	f023 0301 	bic.w	r3, r3, #1
 800d3da:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800d3dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3de:	781b      	ldrb	r3, [r3, #0]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d01a      	beq.n	800d41a <find_volume+0x86>
		stat = disk_status(fs->drv);
 800d3e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d3e6:	785b      	ldrb	r3, [r3, #1]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f7ff fb7f 	bl	800caec <disk_status>
 800d3ee:	4603      	mov	r3, r0
 800d3f0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800d3f4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d3f8:	f003 0301 	and.w	r3, r3, #1
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d10c      	bne.n	800d41a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800d400:	79fb      	ldrb	r3, [r7, #7]
 800d402:	2b00      	cmp	r3, #0
 800d404:	d007      	beq.n	800d416 <find_volume+0x82>
 800d406:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d40a:	f003 0304 	and.w	r3, r3, #4
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d001      	beq.n	800d416 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800d412:	230a      	movs	r3, #10
 800d414:	e1ff      	b.n	800d816 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800d416:	2300      	movs	r3, #0
 800d418:	e1fd      	b.n	800d816 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800d41a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d41c:	2200      	movs	r2, #0
 800d41e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800d420:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d422:	b2da      	uxtb	r2, r3
 800d424:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d426:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800d428:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d42a:	785b      	ldrb	r3, [r3, #1]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7ff fb77 	bl	800cb20 <disk_initialize>
 800d432:	4603      	mov	r3, r0
 800d434:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800d438:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d43c:	f003 0301 	and.w	r3, r3, #1
 800d440:	2b00      	cmp	r3, #0
 800d442:	d001      	beq.n	800d448 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800d444:	2303      	movs	r3, #3
 800d446:	e1e6      	b.n	800d816 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800d448:	79fb      	ldrb	r3, [r7, #7]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d007      	beq.n	800d45e <find_volume+0xca>
 800d44e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d452:	f003 0304 	and.w	r3, r3, #4
 800d456:	2b00      	cmp	r3, #0
 800d458:	d001      	beq.n	800d45e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800d45a:	230a      	movs	r3, #10
 800d45c:	e1db      	b.n	800d816 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800d45e:	2300      	movs	r3, #0
 800d460:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800d462:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d464:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d466:	f7ff ff3f 	bl	800d2e8 <check_fs>
 800d46a:	4603      	mov	r3, r0
 800d46c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800d470:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d474:	2b02      	cmp	r3, #2
 800d476:	d149      	bne.n	800d50c <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d478:	2300      	movs	r3, #0
 800d47a:	643b      	str	r3, [r7, #64]	@ 0x40
 800d47c:	e01e      	b.n	800d4bc <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800d47e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d480:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d484:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d486:	011b      	lsls	r3, r3, #4
 800d488:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800d48c:	4413      	add	r3, r2
 800d48e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800d490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d492:	3304      	adds	r3, #4
 800d494:	781b      	ldrb	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d006      	beq.n	800d4a8 <find_volume+0x114>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d49c:	3308      	adds	r3, #8
 800d49e:	4618      	mov	r0, r3
 800d4a0:	f7ff fbdd 	bl	800cc5e <ld_dword>
 800d4a4:	4602      	mov	r2, r0
 800d4a6:	e000      	b.n	800d4aa <find_volume+0x116>
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ac:	009b      	lsls	r3, r3, #2
 800d4ae:	3358      	adds	r3, #88	@ 0x58
 800d4b0:	443b      	add	r3, r7
 800d4b2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800d4b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4b8:	3301      	adds	r3, #1
 800d4ba:	643b      	str	r3, [r7, #64]	@ 0x40
 800d4bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4be:	2b03      	cmp	r3, #3
 800d4c0:	d9dd      	bls.n	800d47e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800d4c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4c8:	2b00      	cmp	r3, #0
 800d4ca:	d002      	beq.n	800d4d2 <find_volume+0x13e>
 800d4cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ce:	3b01      	subs	r3, #1
 800d4d0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800d4d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4d4:	009b      	lsls	r3, r3, #2
 800d4d6:	3358      	adds	r3, #88	@ 0x58
 800d4d8:	443b      	add	r3, r7
 800d4da:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800d4de:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800d4e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d005      	beq.n	800d4f2 <find_volume+0x15e>
 800d4e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800d4e8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d4ea:	f7ff fefd 	bl	800d2e8 <check_fs>
 800d4ee:	4603      	mov	r3, r0
 800d4f0:	e000      	b.n	800d4f4 <find_volume+0x160>
 800d4f2:	2303      	movs	r3, #3
 800d4f4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800d4f8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d905      	bls.n	800d50c <find_volume+0x178>
 800d500:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d502:	3301      	adds	r3, #1
 800d504:	643b      	str	r3, [r7, #64]	@ 0x40
 800d506:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d508:	2b03      	cmp	r3, #3
 800d50a:	d9e2      	bls.n	800d4d2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800d50c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d510:	2b04      	cmp	r3, #4
 800d512:	d101      	bne.n	800d518 <find_volume+0x184>
 800d514:	2301      	movs	r3, #1
 800d516:	e17e      	b.n	800d816 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800d518:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d51c:	2b01      	cmp	r3, #1
 800d51e:	d901      	bls.n	800d524 <find_volume+0x190>
 800d520:	230d      	movs	r3, #13
 800d522:	e178      	b.n	800d816 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800d524:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d526:	3330      	adds	r3, #48	@ 0x30
 800d528:	330b      	adds	r3, #11
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7ff fb7e 	bl	800cc2c <ld_word>
 800d530:	4603      	mov	r3, r0
 800d532:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d536:	d001      	beq.n	800d53c <find_volume+0x1a8>
 800d538:	230d      	movs	r3, #13
 800d53a:	e16c      	b.n	800d816 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800d53c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d53e:	3330      	adds	r3, #48	@ 0x30
 800d540:	3316      	adds	r3, #22
 800d542:	4618      	mov	r0, r3
 800d544:	f7ff fb72 	bl	800cc2c <ld_word>
 800d548:	4603      	mov	r3, r0
 800d54a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800d54c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d54e:	2b00      	cmp	r3, #0
 800d550:	d106      	bne.n	800d560 <find_volume+0x1cc>
 800d552:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d554:	3330      	adds	r3, #48	@ 0x30
 800d556:	3324      	adds	r3, #36	@ 0x24
 800d558:	4618      	mov	r0, r3
 800d55a:	f7ff fb80 	bl	800cc5e <ld_dword>
 800d55e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800d560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d562:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800d564:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800d566:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d568:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800d56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d56e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800d570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d572:	789b      	ldrb	r3, [r3, #2]
 800d574:	2b01      	cmp	r3, #1
 800d576:	d005      	beq.n	800d584 <find_volume+0x1f0>
 800d578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d57a:	789b      	ldrb	r3, [r3, #2]
 800d57c:	2b02      	cmp	r3, #2
 800d57e:	d001      	beq.n	800d584 <find_volume+0x1f0>
 800d580:	230d      	movs	r3, #13
 800d582:	e148      	b.n	800d816 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800d584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d586:	789b      	ldrb	r3, [r3, #2]
 800d588:	461a      	mov	r2, r3
 800d58a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d58c:	fb02 f303 	mul.w	r3, r2, r3
 800d590:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800d592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d594:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800d598:	461a      	mov	r2, r3
 800d59a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d59c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800d59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a0:	895b      	ldrh	r3, [r3, #10]
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d008      	beq.n	800d5b8 <find_volume+0x224>
 800d5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5a8:	895b      	ldrh	r3, [r3, #10]
 800d5aa:	461a      	mov	r2, r3
 800d5ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ae:	895b      	ldrh	r3, [r3, #10]
 800d5b0:	3b01      	subs	r3, #1
 800d5b2:	4013      	ands	r3, r2
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d001      	beq.n	800d5bc <find_volume+0x228>
 800d5b8:	230d      	movs	r3, #13
 800d5ba:	e12c      	b.n	800d816 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800d5bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5be:	3330      	adds	r3, #48	@ 0x30
 800d5c0:	3311      	adds	r3, #17
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	f7ff fb32 	bl	800cc2c <ld_word>
 800d5c8:	4603      	mov	r3, r0
 800d5ca:	461a      	mov	r2, r3
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ce:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800d5d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5d2:	891b      	ldrh	r3, [r3, #8]
 800d5d4:	f003 030f 	and.w	r3, r3, #15
 800d5d8:	b29b      	uxth	r3, r3
 800d5da:	2b00      	cmp	r3, #0
 800d5dc:	d001      	beq.n	800d5e2 <find_volume+0x24e>
 800d5de:	230d      	movs	r3, #13
 800d5e0:	e119      	b.n	800d816 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800d5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5e4:	3330      	adds	r3, #48	@ 0x30
 800d5e6:	3313      	adds	r3, #19
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f7ff fb1f 	bl	800cc2c <ld_word>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800d5f2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	d106      	bne.n	800d606 <find_volume+0x272>
 800d5f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5fa:	3330      	adds	r3, #48	@ 0x30
 800d5fc:	3320      	adds	r3, #32
 800d5fe:	4618      	mov	r0, r3
 800d600:	f7ff fb2d 	bl	800cc5e <ld_dword>
 800d604:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800d606:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d608:	3330      	adds	r3, #48	@ 0x30
 800d60a:	330e      	adds	r3, #14
 800d60c:	4618      	mov	r0, r3
 800d60e:	f7ff fb0d 	bl	800cc2c <ld_word>
 800d612:	4603      	mov	r3, r0
 800d614:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800d616:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800d618:	2b00      	cmp	r3, #0
 800d61a:	d101      	bne.n	800d620 <find_volume+0x28c>
 800d61c:	230d      	movs	r3, #13
 800d61e:	e0fa      	b.n	800d816 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800d620:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d622:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d624:	4413      	add	r3, r2
 800d626:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d628:	8912      	ldrh	r2, [r2, #8]
 800d62a:	0912      	lsrs	r2, r2, #4
 800d62c:	b292      	uxth	r2, r2
 800d62e:	4413      	add	r3, r2
 800d630:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800d632:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d636:	429a      	cmp	r2, r3
 800d638:	d204      	bcs.n	800d644 <find_volume+0x2b0>
 800d63a:	230d      	movs	r3, #13
 800d63c:	e0eb      	b.n	800d816 <find_volume+0x482>
 800d63e:	bf00      	nop
 800d640:	20000428 	.word	0x20000428
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800d644:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800d646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d648:	1ad3      	subs	r3, r2, r3
 800d64a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800d64c:	8952      	ldrh	r2, [r2, #10]
 800d64e:	fbb3 f3f2 	udiv	r3, r3, r2
 800d652:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800d654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d656:	2b00      	cmp	r3, #0
 800d658:	d101      	bne.n	800d65e <find_volume+0x2ca>
 800d65a:	230d      	movs	r3, #13
 800d65c:	e0db      	b.n	800d816 <find_volume+0x482>
		fmt = FS_FAT32;
 800d65e:	2303      	movs	r3, #3
 800d660:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800d664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d666:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800d66a:	4293      	cmp	r3, r2
 800d66c:	d802      	bhi.n	800d674 <find_volume+0x2e0>
 800d66e:	2302      	movs	r3, #2
 800d670:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800d674:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d676:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800d67a:	4293      	cmp	r3, r2
 800d67c:	d802      	bhi.n	800d684 <find_volume+0x2f0>
 800d67e:	2301      	movs	r3, #1
 800d680:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800d684:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d686:	1c9a      	adds	r2, r3, #2
 800d688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800d68c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d68e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d690:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800d692:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800d694:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d696:	441a      	add	r2, r3
 800d698:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d69a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800d69c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800d69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6a0:	441a      	add	r2, r3
 800d6a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6a4:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800d6a6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d6aa:	2b03      	cmp	r3, #3
 800d6ac:	d11e      	bne.n	800d6ec <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800d6ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6b0:	3330      	adds	r3, #48	@ 0x30
 800d6b2:	332a      	adds	r3, #42	@ 0x2a
 800d6b4:	4618      	mov	r0, r3
 800d6b6:	f7ff fab9 	bl	800cc2c <ld_word>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d001      	beq.n	800d6c4 <find_volume+0x330>
 800d6c0:	230d      	movs	r3, #13
 800d6c2:	e0a8      	b.n	800d816 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800d6c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6c6:	891b      	ldrh	r3, [r3, #8]
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <find_volume+0x33c>
 800d6cc:	230d      	movs	r3, #13
 800d6ce:	e0a2      	b.n	800d816 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800d6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6d2:	3330      	adds	r3, #48	@ 0x30
 800d6d4:	332c      	adds	r3, #44	@ 0x2c
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7ff fac1 	bl	800cc5e <ld_dword>
 800d6dc:	4602      	mov	r2, r0
 800d6de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800d6e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6e4:	695b      	ldr	r3, [r3, #20]
 800d6e6:	009b      	lsls	r3, r3, #2
 800d6e8:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6ea:	e01f      	b.n	800d72c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800d6ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6ee:	891b      	ldrh	r3, [r3, #8]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d101      	bne.n	800d6f8 <find_volume+0x364>
 800d6f4:	230d      	movs	r3, #13
 800d6f6:	e08e      	b.n	800d816 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800d6f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fa:	6a1a      	ldr	r2, [r3, #32]
 800d6fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d6fe:	441a      	add	r2, r3
 800d700:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d702:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800d704:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d708:	2b02      	cmp	r3, #2
 800d70a:	d103      	bne.n	800d714 <find_volume+0x380>
 800d70c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d70e:	695b      	ldr	r3, [r3, #20]
 800d710:	005b      	lsls	r3, r3, #1
 800d712:	e00a      	b.n	800d72a <find_volume+0x396>
 800d714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d716:	695a      	ldr	r2, [r3, #20]
 800d718:	4613      	mov	r3, r2
 800d71a:	005b      	lsls	r3, r3, #1
 800d71c:	4413      	add	r3, r2
 800d71e:	085a      	lsrs	r2, r3, #1
 800d720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d722:	695b      	ldr	r3, [r3, #20]
 800d724:	f003 0301 	and.w	r3, r3, #1
 800d728:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800d72a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800d72c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d72e:	699a      	ldr	r2, [r3, #24]
 800d730:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d732:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800d736:	0a5b      	lsrs	r3, r3, #9
 800d738:	429a      	cmp	r2, r3
 800d73a:	d201      	bcs.n	800d740 <find_volume+0x3ac>
 800d73c:	230d      	movs	r3, #13
 800d73e:	e06a      	b.n	800d816 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800d740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d742:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d746:	611a      	str	r2, [r3, #16]
 800d748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74a:	691a      	ldr	r2, [r3, #16]
 800d74c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d74e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800d750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d752:	2280      	movs	r2, #128	@ 0x80
 800d754:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800d756:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800d75a:	2b03      	cmp	r3, #3
 800d75c:	d149      	bne.n	800d7f2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800d75e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d760:	3330      	adds	r3, #48	@ 0x30
 800d762:	3330      	adds	r3, #48	@ 0x30
 800d764:	4618      	mov	r0, r3
 800d766:	f7ff fa61 	bl	800cc2c <ld_word>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d140      	bne.n	800d7f2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800d770:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d772:	3301      	adds	r3, #1
 800d774:	4619      	mov	r1, r3
 800d776:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d778:	f7ff fbbc 	bl	800cef4 <move_window>
 800d77c:	4603      	mov	r3, r0
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d137      	bne.n	800d7f2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800d782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d784:	2200      	movs	r2, #0
 800d786:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800d788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d78a:	3330      	adds	r3, #48	@ 0x30
 800d78c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d790:	4618      	mov	r0, r3
 800d792:	f7ff fa4b 	bl	800cc2c <ld_word>
 800d796:	4603      	mov	r3, r0
 800d798:	461a      	mov	r2, r3
 800d79a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800d79e:	429a      	cmp	r2, r3
 800d7a0:	d127      	bne.n	800d7f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800d7a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7a4:	3330      	adds	r3, #48	@ 0x30
 800d7a6:	4618      	mov	r0, r3
 800d7a8:	f7ff fa59 	bl	800cc5e <ld_dword>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	4a1c      	ldr	r2, [pc, #112]	@ (800d820 <find_volume+0x48c>)
 800d7b0:	4293      	cmp	r3, r2
 800d7b2:	d11e      	bne.n	800d7f2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800d7b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7b6:	3330      	adds	r3, #48	@ 0x30
 800d7b8:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d7bc:	4618      	mov	r0, r3
 800d7be:	f7ff fa4e 	bl	800cc5e <ld_dword>
 800d7c2:	4603      	mov	r3, r0
 800d7c4:	4a17      	ldr	r2, [pc, #92]	@ (800d824 <find_volume+0x490>)
 800d7c6:	4293      	cmp	r3, r2
 800d7c8:	d113      	bne.n	800d7f2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800d7ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7cc:	3330      	adds	r3, #48	@ 0x30
 800d7ce:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800d7d2:	4618      	mov	r0, r3
 800d7d4:	f7ff fa43 	bl	800cc5e <ld_dword>
 800d7d8:	4602      	mov	r2, r0
 800d7da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7dc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800d7de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7e0:	3330      	adds	r3, #48	@ 0x30
 800d7e2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	f7ff fa39 	bl	800cc5e <ld_dword>
 800d7ec:	4602      	mov	r2, r0
 800d7ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800d7f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d7f4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800d7f8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800d7fa:	4b0b      	ldr	r3, [pc, #44]	@ (800d828 <find_volume+0x494>)
 800d7fc:	881b      	ldrh	r3, [r3, #0]
 800d7fe:	3301      	adds	r3, #1
 800d800:	b29a      	uxth	r2, r3
 800d802:	4b09      	ldr	r3, [pc, #36]	@ (800d828 <find_volume+0x494>)
 800d804:	801a      	strh	r2, [r3, #0]
 800d806:	4b08      	ldr	r3, [pc, #32]	@ (800d828 <find_volume+0x494>)
 800d808:	881a      	ldrh	r2, [r3, #0]
 800d80a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d80c:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800d80e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800d810:	f7ff fb08 	bl	800ce24 <clear_lock>
#endif
	return FR_OK;
 800d814:	2300      	movs	r3, #0
}
 800d816:	4618      	mov	r0, r3
 800d818:	3758      	adds	r7, #88	@ 0x58
 800d81a:	46bd      	mov	sp, r7
 800d81c:	bd80      	pop	{r7, pc}
 800d81e:	bf00      	nop
 800d820:	41615252 	.word	0x41615252
 800d824:	61417272 	.word	0x61417272
 800d828:	2000042c 	.word	0x2000042c

0800d82c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800d82c:	b580      	push	{r7, lr}
 800d82e:	b084      	sub	sp, #16
 800d830:	af00      	add	r7, sp, #0
 800d832:	6078      	str	r0, [r7, #4]
 800d834:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800d836:	2309      	movs	r3, #9
 800d838:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d01c      	beq.n	800d87a <validate+0x4e>
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	2b00      	cmp	r3, #0
 800d846:	d018      	beq.n	800d87a <validate+0x4e>
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	781b      	ldrb	r3, [r3, #0]
 800d84e:	2b00      	cmp	r3, #0
 800d850:	d013      	beq.n	800d87a <validate+0x4e>
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	889a      	ldrh	r2, [r3, #4]
 800d856:	687b      	ldr	r3, [r7, #4]
 800d858:	681b      	ldr	r3, [r3, #0]
 800d85a:	88db      	ldrh	r3, [r3, #6]
 800d85c:	429a      	cmp	r2, r3
 800d85e:	d10c      	bne.n	800d87a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800d860:	687b      	ldr	r3, [r7, #4]
 800d862:	681b      	ldr	r3, [r3, #0]
 800d864:	785b      	ldrb	r3, [r3, #1]
 800d866:	4618      	mov	r0, r3
 800d868:	f7ff f940 	bl	800caec <disk_status>
 800d86c:	4603      	mov	r3, r0
 800d86e:	f003 0301 	and.w	r3, r3, #1
 800d872:	2b00      	cmp	r3, #0
 800d874:	d101      	bne.n	800d87a <validate+0x4e>
			res = FR_OK;
 800d876:	2300      	movs	r3, #0
 800d878:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800d87a:	7bfb      	ldrb	r3, [r7, #15]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d102      	bne.n	800d886 <validate+0x5a>
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	e000      	b.n	800d888 <validate+0x5c>
 800d886:	2300      	movs	r3, #0
 800d888:	683a      	ldr	r2, [r7, #0]
 800d88a:	6013      	str	r3, [r2, #0]
	return res;
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d88e:	4618      	mov	r0, r3
 800d890:	3710      	adds	r7, #16
 800d892:	46bd      	mov	sp, r7
 800d894:	bd80      	pop	{r7, pc}
	...

0800d898 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800d898:	b580      	push	{r7, lr}
 800d89a:	b088      	sub	sp, #32
 800d89c:	af00      	add	r7, sp, #0
 800d89e:	60f8      	str	r0, [r7, #12]
 800d8a0:	60b9      	str	r1, [r7, #8]
 800d8a2:	4613      	mov	r3, r2
 800d8a4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800d8a6:	68bb      	ldr	r3, [r7, #8]
 800d8a8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800d8aa:	f107 0310 	add.w	r3, r7, #16
 800d8ae:	4618      	mov	r0, r3
 800d8b0:	f7ff fcd6 	bl	800d260 <get_ldnumber>
 800d8b4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800d8b6:	69fb      	ldr	r3, [r7, #28]
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	da01      	bge.n	800d8c0 <f_mount+0x28>
 800d8bc:	230b      	movs	r3, #11
 800d8be:	e02b      	b.n	800d918 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800d8c0:	4a17      	ldr	r2, [pc, #92]	@ (800d920 <f_mount+0x88>)
 800d8c2:	69fb      	ldr	r3, [r7, #28]
 800d8c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8c8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800d8ca:	69bb      	ldr	r3, [r7, #24]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d005      	beq.n	800d8dc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800d8d0:	69b8      	ldr	r0, [r7, #24]
 800d8d2:	f7ff faa7 	bl	800ce24 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800d8d6:	69bb      	ldr	r3, [r7, #24]
 800d8d8:	2200      	movs	r2, #0
 800d8da:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800d8dc:	68fb      	ldr	r3, [r7, #12]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d002      	beq.n	800d8e8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	2200      	movs	r2, #0
 800d8e6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800d8e8:	68fa      	ldr	r2, [r7, #12]
 800d8ea:	490d      	ldr	r1, [pc, #52]	@ (800d920 <f_mount+0x88>)
 800d8ec:	69fb      	ldr	r3, [r7, #28]
 800d8ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d002      	beq.n	800d8fe <f_mount+0x66>
 800d8f8:	79fb      	ldrb	r3, [r7, #7]
 800d8fa:	2b01      	cmp	r3, #1
 800d8fc:	d001      	beq.n	800d902 <f_mount+0x6a>
 800d8fe:	2300      	movs	r3, #0
 800d900:	e00a      	b.n	800d918 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800d902:	f107 010c 	add.w	r1, r7, #12
 800d906:	f107 0308 	add.w	r3, r7, #8
 800d90a:	2200      	movs	r2, #0
 800d90c:	4618      	mov	r0, r3
 800d90e:	f7ff fd41 	bl	800d394 <find_volume>
 800d912:	4603      	mov	r3, r0
 800d914:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800d916:	7dfb      	ldrb	r3, [r7, #23]
}
 800d918:	4618      	mov	r0, r3
 800d91a:	3720      	adds	r7, #32
 800d91c:	46bd      	mov	sp, r7
 800d91e:	bd80      	pop	{r7, pc}
 800d920:	20000428 	.word	0x20000428

0800d924 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800d924:	b580      	push	{r7, lr}
 800d926:	b08e      	sub	sp, #56	@ 0x38
 800d928:	af00      	add	r7, sp, #0
 800d92a:	60f8      	str	r0, [r7, #12]
 800d92c:	60b9      	str	r1, [r7, #8]
 800d92e:	607a      	str	r2, [r7, #4]
 800d930:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800d932:	68bb      	ldr	r3, [r7, #8]
 800d934:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800d936:	683b      	ldr	r3, [r7, #0]
 800d938:	2200      	movs	r2, #0
 800d93a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	f107 0214 	add.w	r2, r7, #20
 800d942:	4611      	mov	r1, r2
 800d944:	4618      	mov	r0, r3
 800d946:	f7ff ff71 	bl	800d82c <validate>
 800d94a:	4603      	mov	r3, r0
 800d94c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800d950:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d954:	2b00      	cmp	r3, #0
 800d956:	d107      	bne.n	800d968 <f_read+0x44>
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	7d5b      	ldrb	r3, [r3, #21]
 800d95c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800d960:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d964:	2b00      	cmp	r3, #0
 800d966:	d002      	beq.n	800d96e <f_read+0x4a>
 800d968:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800d96c:	e115      	b.n	800db9a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800d96e:	68fb      	ldr	r3, [r7, #12]
 800d970:	7d1b      	ldrb	r3, [r3, #20]
 800d972:	f003 0301 	and.w	r3, r3, #1
 800d976:	2b00      	cmp	r3, #0
 800d978:	d101      	bne.n	800d97e <f_read+0x5a>
 800d97a:	2307      	movs	r3, #7
 800d97c:	e10d      	b.n	800db9a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	68da      	ldr	r2, [r3, #12]
 800d982:	68fb      	ldr	r3, [r7, #12]
 800d984:	699b      	ldr	r3, [r3, #24]
 800d986:	1ad3      	subs	r3, r2, r3
 800d988:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	6a3b      	ldr	r3, [r7, #32]
 800d98e:	429a      	cmp	r2, r3
 800d990:	f240 80fe 	bls.w	800db90 <f_read+0x26c>
 800d994:	6a3b      	ldr	r3, [r7, #32]
 800d996:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800d998:	e0fa      	b.n	800db90 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	699b      	ldr	r3, [r3, #24]
 800d99e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9a2:	2b00      	cmp	r3, #0
 800d9a4:	f040 80c6 	bne.w	800db34 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	699b      	ldr	r3, [r3, #24]
 800d9ac:	0a5b      	lsrs	r3, r3, #9
 800d9ae:	697a      	ldr	r2, [r7, #20]
 800d9b0:	8952      	ldrh	r2, [r2, #10]
 800d9b2:	3a01      	subs	r2, #1
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800d9b8:	69fb      	ldr	r3, [r7, #28]
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	d12f      	bne.n	800da1e <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	699b      	ldr	r3, [r3, #24]
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d103      	bne.n	800d9ce <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800d9c6:	68fb      	ldr	r3, [r7, #12]
 800d9c8:	689b      	ldr	r3, [r3, #8]
 800d9ca:	633b      	str	r3, [r7, #48]	@ 0x30
 800d9cc:	e013      	b.n	800d9f6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9d2:	2b00      	cmp	r3, #0
 800d9d4:	d007      	beq.n	800d9e6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800d9d6:	68fb      	ldr	r3, [r7, #12]
 800d9d8:	699b      	ldr	r3, [r3, #24]
 800d9da:	4619      	mov	r1, r3
 800d9dc:	68f8      	ldr	r0, [r7, #12]
 800d9de:	f7ff fbeb 	bl	800d1b8 <clmt_clust>
 800d9e2:	6338      	str	r0, [r7, #48]	@ 0x30
 800d9e4:	e007      	b.n	800d9f6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800d9e6:	68fa      	ldr	r2, [r7, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	69db      	ldr	r3, [r3, #28]
 800d9ec:	4619      	mov	r1, r3
 800d9ee:	4610      	mov	r0, r2
 800d9f0:	f7ff fb3b 	bl	800d06a <get_fat>
 800d9f4:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800d9f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d804      	bhi.n	800da06 <f_read+0xe2>
 800d9fc:	68fb      	ldr	r3, [r7, #12]
 800d9fe:	2202      	movs	r2, #2
 800da00:	755a      	strb	r2, [r3, #21]
 800da02:	2302      	movs	r3, #2
 800da04:	e0c9      	b.n	800db9a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800da06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800da0c:	d104      	bne.n	800da18 <f_read+0xf4>
 800da0e:	68fb      	ldr	r3, [r7, #12]
 800da10:	2201      	movs	r2, #1
 800da12:	755a      	strb	r2, [r3, #21]
 800da14:	2301      	movs	r3, #1
 800da16:	e0c0      	b.n	800db9a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800da18:	68fb      	ldr	r3, [r7, #12]
 800da1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da1c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800da1e:	697a      	ldr	r2, [r7, #20]
 800da20:	68fb      	ldr	r3, [r7, #12]
 800da22:	69db      	ldr	r3, [r3, #28]
 800da24:	4619      	mov	r1, r3
 800da26:	4610      	mov	r0, r2
 800da28:	f7ff fb00 	bl	800d02c <clust2sect>
 800da2c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800da2e:	69bb      	ldr	r3, [r7, #24]
 800da30:	2b00      	cmp	r3, #0
 800da32:	d104      	bne.n	800da3e <f_read+0x11a>
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	2202      	movs	r2, #2
 800da38:	755a      	strb	r2, [r3, #21]
 800da3a:	2302      	movs	r3, #2
 800da3c:	e0ad      	b.n	800db9a <f_read+0x276>
			sect += csect;
 800da3e:	69ba      	ldr	r2, [r7, #24]
 800da40:	69fb      	ldr	r3, [r7, #28]
 800da42:	4413      	add	r3, r2
 800da44:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800da46:	687b      	ldr	r3, [r7, #4]
 800da48:	0a5b      	lsrs	r3, r3, #9
 800da4a:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800da4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da4e:	2b00      	cmp	r3, #0
 800da50:	d039      	beq.n	800dac6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800da52:	69fa      	ldr	r2, [r7, #28]
 800da54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da56:	4413      	add	r3, r2
 800da58:	697a      	ldr	r2, [r7, #20]
 800da5a:	8952      	ldrh	r2, [r2, #10]
 800da5c:	4293      	cmp	r3, r2
 800da5e:	d905      	bls.n	800da6c <f_read+0x148>
					cc = fs->csize - csect;
 800da60:	697b      	ldr	r3, [r7, #20]
 800da62:	895b      	ldrh	r3, [r3, #10]
 800da64:	461a      	mov	r2, r3
 800da66:	69fb      	ldr	r3, [r7, #28]
 800da68:	1ad3      	subs	r3, r2, r3
 800da6a:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800da6c:	697b      	ldr	r3, [r7, #20]
 800da6e:	7858      	ldrb	r0, [r3, #1]
 800da70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da72:	69ba      	ldr	r2, [r7, #24]
 800da74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800da76:	f7ff f87b 	bl	800cb70 <disk_read>
 800da7a:	4603      	mov	r3, r0
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d004      	beq.n	800da8a <f_read+0x166>
 800da80:	68fb      	ldr	r3, [r7, #12]
 800da82:	2201      	movs	r2, #1
 800da84:	755a      	strb	r2, [r3, #21]
 800da86:	2301      	movs	r3, #1
 800da88:	e087      	b.n	800db9a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800da8a:	68fb      	ldr	r3, [r7, #12]
 800da8c:	7d1b      	ldrb	r3, [r3, #20]
 800da8e:	b25b      	sxtb	r3, r3
 800da90:	2b00      	cmp	r3, #0
 800da92:	da14      	bge.n	800dabe <f_read+0x19a>
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	6a1a      	ldr	r2, [r3, #32]
 800da98:	69bb      	ldr	r3, [r7, #24]
 800da9a:	1ad3      	subs	r3, r2, r3
 800da9c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da9e:	429a      	cmp	r2, r3
 800daa0:	d90d      	bls.n	800dabe <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a1a      	ldr	r2, [r3, #32]
 800daa6:	69bb      	ldr	r3, [r7, #24]
 800daa8:	1ad3      	subs	r3, r2, r3
 800daaa:	025b      	lsls	r3, r3, #9
 800daac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800daae:	18d0      	adds	r0, r2, r3
 800dab0:	68fb      	ldr	r3, [r7, #12]
 800dab2:	3330      	adds	r3, #48	@ 0x30
 800dab4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800dab8:	4619      	mov	r1, r3
 800daba:	f7ff f93a 	bl	800cd32 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800dabe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dac0:	025b      	lsls	r3, r3, #9
 800dac2:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800dac4:	e050      	b.n	800db68 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800dac6:	68fb      	ldr	r3, [r7, #12]
 800dac8:	6a1b      	ldr	r3, [r3, #32]
 800daca:	69ba      	ldr	r2, [r7, #24]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d02e      	beq.n	800db2e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	7d1b      	ldrb	r3, [r3, #20]
 800dad4:	b25b      	sxtb	r3, r3
 800dad6:	2b00      	cmp	r3, #0
 800dad8:	da18      	bge.n	800db0c <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800dada:	697b      	ldr	r3, [r7, #20]
 800dadc:	7858      	ldrb	r0, [r3, #1]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6a1a      	ldr	r2, [r3, #32]
 800dae8:	2301      	movs	r3, #1
 800daea:	f7ff f861 	bl	800cbb0 <disk_write>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d004      	beq.n	800dafe <f_read+0x1da>
 800daf4:	68fb      	ldr	r3, [r7, #12]
 800daf6:	2201      	movs	r2, #1
 800daf8:	755a      	strb	r2, [r3, #21]
 800dafa:	2301      	movs	r3, #1
 800dafc:	e04d      	b.n	800db9a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800dafe:	68fb      	ldr	r3, [r7, #12]
 800db00:	7d1b      	ldrb	r3, [r3, #20]
 800db02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800db06:	b2da      	uxtb	r2, r3
 800db08:	68fb      	ldr	r3, [r7, #12]
 800db0a:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800db0c:	697b      	ldr	r3, [r7, #20]
 800db0e:	7858      	ldrb	r0, [r3, #1]
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800db16:	2301      	movs	r3, #1
 800db18:	69ba      	ldr	r2, [r7, #24]
 800db1a:	f7ff f829 	bl	800cb70 <disk_read>
 800db1e:	4603      	mov	r3, r0
 800db20:	2b00      	cmp	r3, #0
 800db22:	d004      	beq.n	800db2e <f_read+0x20a>
 800db24:	68fb      	ldr	r3, [r7, #12]
 800db26:	2201      	movs	r2, #1
 800db28:	755a      	strb	r2, [r3, #21]
 800db2a:	2301      	movs	r3, #1
 800db2c:	e035      	b.n	800db9a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	69ba      	ldr	r2, [r7, #24]
 800db32:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	699b      	ldr	r3, [r3, #24]
 800db38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db3c:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800db40:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800db42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	429a      	cmp	r2, r3
 800db48:	d901      	bls.n	800db4e <f_read+0x22a>
 800db4a:	687b      	ldr	r3, [r7, #4]
 800db4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800db4e:	68fb      	ldr	r3, [r7, #12]
 800db50:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db54:	68fb      	ldr	r3, [r7, #12]
 800db56:	699b      	ldr	r3, [r3, #24]
 800db58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800db5c:	4413      	add	r3, r2
 800db5e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800db60:	4619      	mov	r1, r3
 800db62:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800db64:	f7ff f8e5 	bl	800cd32 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800db68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800db6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db6c:	4413      	add	r3, r2
 800db6e:	627b      	str	r3, [r7, #36]	@ 0x24
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	699a      	ldr	r2, [r3, #24]
 800db74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db76:	441a      	add	r2, r3
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	619a      	str	r2, [r3, #24]
 800db7c:	683b      	ldr	r3, [r7, #0]
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db82:	441a      	add	r2, r3
 800db84:	683b      	ldr	r3, [r7, #0]
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	687a      	ldr	r2, [r7, #4]
 800db8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800db8c:	1ad3      	subs	r3, r2, r3
 800db8e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	2b00      	cmp	r3, #0
 800db94:	f47f af01 	bne.w	800d99a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800db98:	2300      	movs	r3, #0
}
 800db9a:	4618      	mov	r0, r3
 800db9c:	3738      	adds	r7, #56	@ 0x38
 800db9e:	46bd      	mov	sp, r7
 800dba0:	bd80      	pop	{r7, pc}

0800dba2 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800dba2:	b580      	push	{r7, lr}
 800dba4:	b086      	sub	sp, #24
 800dba6:	af00      	add	r7, sp, #0
 800dba8:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	f107 0208 	add.w	r2, r7, #8
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f7ff fe3a 	bl	800d82c <validate>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800dbbc:	7dfb      	ldrb	r3, [r7, #23]
 800dbbe:	2b00      	cmp	r3, #0
 800dbc0:	d168      	bne.n	800dc94 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	7d1b      	ldrb	r3, [r3, #20]
 800dbc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d062      	beq.n	800dc94 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	7d1b      	ldrb	r3, [r3, #20]
 800dbd2:	b25b      	sxtb	r3, r3
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	da15      	bge.n	800dc04 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800dbd8:	68bb      	ldr	r3, [r7, #8]
 800dbda:	7858      	ldrb	r0, [r3, #1]
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6a1a      	ldr	r2, [r3, #32]
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	f7fe ffe2 	bl	800cbb0 <disk_write>
 800dbec:	4603      	mov	r3, r0
 800dbee:	2b00      	cmp	r3, #0
 800dbf0:	d001      	beq.n	800dbf6 <f_sync+0x54>
 800dbf2:	2301      	movs	r3, #1
 800dbf4:	e04f      	b.n	800dc96 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	7d1b      	ldrb	r3, [r3, #20]
 800dbfa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800dbfe:	b2da      	uxtb	r2, r3
 800dc00:	687b      	ldr	r3, [r7, #4]
 800dc02:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800dc04:	f7fc ff42 	bl	800aa8c <get_fattime>
 800dc08:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc10:	4619      	mov	r1, r3
 800dc12:	4610      	mov	r0, r2
 800dc14:	f7ff f96e 	bl	800cef4 <move_window>
 800dc18:	4603      	mov	r3, r0
 800dc1a:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800dc1c:	7dfb      	ldrb	r3, [r7, #23]
 800dc1e:	2b00      	cmp	r3, #0
 800dc20:	d138      	bne.n	800dc94 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800dc26:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	330b      	adds	r3, #11
 800dc2c:	781a      	ldrb	r2, [r3, #0]
 800dc2e:	68fb      	ldr	r3, [r7, #12]
 800dc30:	330b      	adds	r3, #11
 800dc32:	f042 0220 	orr.w	r2, r2, #32
 800dc36:	b2d2      	uxtb	r2, r2
 800dc38:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	6818      	ldr	r0, [r3, #0]
 800dc3e:	687b      	ldr	r3, [r7, #4]
 800dc40:	689b      	ldr	r3, [r3, #8]
 800dc42:	461a      	mov	r2, r3
 800dc44:	68f9      	ldr	r1, [r7, #12]
 800dc46:	f7ff faeb 	bl	800d220 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800dc4a:	68fb      	ldr	r3, [r7, #12]
 800dc4c:	f103 021c 	add.w	r2, r3, #28
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	68db      	ldr	r3, [r3, #12]
 800dc54:	4619      	mov	r1, r3
 800dc56:	4610      	mov	r0, r2
 800dc58:	f7ff f83f 	bl	800ccda <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	3316      	adds	r3, #22
 800dc60:	6939      	ldr	r1, [r7, #16]
 800dc62:	4618      	mov	r0, r3
 800dc64:	f7ff f839 	bl	800ccda <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800dc68:	68fb      	ldr	r3, [r7, #12]
 800dc6a:	3312      	adds	r3, #18
 800dc6c:	2100      	movs	r1, #0
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f7ff f818 	bl	800cca4 <st_word>
					fs->wflag = 1;
 800dc74:	68bb      	ldr	r3, [r7, #8]
 800dc76:	2201      	movs	r2, #1
 800dc78:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	4618      	mov	r0, r3
 800dc7e:	f7ff f967 	bl	800cf50 <sync_fs>
 800dc82:	4603      	mov	r3, r0
 800dc84:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	7d1b      	ldrb	r3, [r3, #20]
 800dc8a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800dc8e:	b2da      	uxtb	r2, r3
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800dc94:	7dfb      	ldrb	r3, [r7, #23]
}
 800dc96:	4618      	mov	r0, r3
 800dc98:	3718      	adds	r7, #24
 800dc9a:	46bd      	mov	sp, r7
 800dc9c:	bd80      	pop	{r7, pc}

0800dc9e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800dc9e:	b580      	push	{r7, lr}
 800dca0:	b084      	sub	sp, #16
 800dca2:	af00      	add	r7, sp, #0
 800dca4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f7ff ff7b 	bl	800dba2 <f_sync>
 800dcac:	4603      	mov	r3, r0
 800dcae:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800dcb0:	7bfb      	ldrb	r3, [r7, #15]
 800dcb2:	2b00      	cmp	r3, #0
 800dcb4:	d118      	bne.n	800dce8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	f107 0208 	add.w	r2, r7, #8
 800dcbc:	4611      	mov	r1, r2
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	f7ff fdb4 	bl	800d82c <validate>
 800dcc4:	4603      	mov	r3, r0
 800dcc6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dcc8:	7bfb      	ldrb	r3, [r7, #15]
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d10c      	bne.n	800dce8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	691b      	ldr	r3, [r3, #16]
 800dcd2:	4618      	mov	r0, r3
 800dcd4:	f7ff f86a 	bl	800cdac <dec_lock>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800dcdc:	7bfb      	ldrb	r3, [r7, #15]
 800dcde:	2b00      	cmp	r3, #0
 800dce0:	d102      	bne.n	800dce8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	2200      	movs	r2, #0
 800dce6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800dce8:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcea:	4618      	mov	r0, r3
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800dcf4:	b480      	push	{r7}
 800dcf6:	b087      	sub	sp, #28
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	60f8      	str	r0, [r7, #12]
 800dcfc:	60b9      	str	r1, [r7, #8]
 800dcfe:	4613      	mov	r3, r2
 800dd00:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800dd02:	2301      	movs	r3, #1
 800dd04:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800dd06:	2300      	movs	r3, #0
 800dd08:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800dd0a:	4b1f      	ldr	r3, [pc, #124]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd0c:	7a5b      	ldrb	r3, [r3, #9]
 800dd0e:	b2db      	uxtb	r3, r3
 800dd10:	2b00      	cmp	r3, #0
 800dd12:	d131      	bne.n	800dd78 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800dd14:	4b1c      	ldr	r3, [pc, #112]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd16:	7a5b      	ldrb	r3, [r3, #9]
 800dd18:	b2db      	uxtb	r3, r3
 800dd1a:	461a      	mov	r2, r3
 800dd1c:	4b1a      	ldr	r3, [pc, #104]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd1e:	2100      	movs	r1, #0
 800dd20:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800dd22:	4b19      	ldr	r3, [pc, #100]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd24:	7a5b      	ldrb	r3, [r3, #9]
 800dd26:	b2db      	uxtb	r3, r3
 800dd28:	4a17      	ldr	r2, [pc, #92]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd2a:	009b      	lsls	r3, r3, #2
 800dd2c:	4413      	add	r3, r2
 800dd2e:	68fa      	ldr	r2, [r7, #12]
 800dd30:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800dd32:	4b15      	ldr	r3, [pc, #84]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd34:	7a5b      	ldrb	r3, [r3, #9]
 800dd36:	b2db      	uxtb	r3, r3
 800dd38:	461a      	mov	r2, r3
 800dd3a:	4b13      	ldr	r3, [pc, #76]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd3c:	4413      	add	r3, r2
 800dd3e:	79fa      	ldrb	r2, [r7, #7]
 800dd40:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800dd42:	4b11      	ldr	r3, [pc, #68]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd44:	7a5b      	ldrb	r3, [r3, #9]
 800dd46:	b2db      	uxtb	r3, r3
 800dd48:	1c5a      	adds	r2, r3, #1
 800dd4a:	b2d1      	uxtb	r1, r2
 800dd4c:	4a0e      	ldr	r2, [pc, #56]	@ (800dd88 <FATFS_LinkDriverEx+0x94>)
 800dd4e:	7251      	strb	r1, [r2, #9]
 800dd50:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800dd52:	7dbb      	ldrb	r3, [r7, #22]
 800dd54:	3330      	adds	r3, #48	@ 0x30
 800dd56:	b2da      	uxtb	r2, r3
 800dd58:	68bb      	ldr	r3, [r7, #8]
 800dd5a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800dd5c:	68bb      	ldr	r3, [r7, #8]
 800dd5e:	3301      	adds	r3, #1
 800dd60:	223a      	movs	r2, #58	@ 0x3a
 800dd62:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800dd64:	68bb      	ldr	r3, [r7, #8]
 800dd66:	3302      	adds	r3, #2
 800dd68:	222f      	movs	r2, #47	@ 0x2f
 800dd6a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800dd6c:	68bb      	ldr	r3, [r7, #8]
 800dd6e:	3303      	adds	r3, #3
 800dd70:	2200      	movs	r2, #0
 800dd72:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800dd74:	2300      	movs	r3, #0
 800dd76:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800dd78:	7dfb      	ldrb	r3, [r7, #23]
}
 800dd7a:	4618      	mov	r0, r3
 800dd7c:	371c      	adds	r7, #28
 800dd7e:	46bd      	mov	sp, r7
 800dd80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd84:	4770      	bx	lr
 800dd86:	bf00      	nop
 800dd88:	20000450 	.word	0x20000450

0800dd8c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]
 800dd94:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800dd96:	2200      	movs	r2, #0
 800dd98:	6839      	ldr	r1, [r7, #0]
 800dd9a:	6878      	ldr	r0, [r7, #4]
 800dd9c:	f7ff ffaa 	bl	800dcf4 <FATFS_LinkDriverEx>
 800dda0:	4603      	mov	r3, r0
}
 800dda2:	4618      	mov	r0, r3
 800dda4:	3708      	adds	r7, #8
 800dda6:	46bd      	mov	sp, r7
 800dda8:	bd80      	pop	{r7, pc}
	...

0800ddac <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ddac:	b580      	push	{r7, lr}
 800ddae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ddb0:	2200      	movs	r2, #0
 800ddb2:	4912      	ldr	r1, [pc, #72]	@ (800ddfc <MX_USB_DEVICE_Init+0x50>)
 800ddb4:	4812      	ldr	r0, [pc, #72]	@ (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddb6:	f7fd fb97 	bl	800b4e8 <USBD_Init>
 800ddba:	4603      	mov	r3, r0
 800ddbc:	2b00      	cmp	r3, #0
 800ddbe:	d001      	beq.n	800ddc4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ddc0:	f7f3 fd28 	bl	8001814 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ddc4:	490f      	ldr	r1, [pc, #60]	@ (800de04 <MX_USB_DEVICE_Init+0x58>)
 800ddc6:	480e      	ldr	r0, [pc, #56]	@ (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddc8:	f7fd fbbe 	bl	800b548 <USBD_RegisterClass>
 800ddcc:	4603      	mov	r3, r0
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d001      	beq.n	800ddd6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ddd2:	f7f3 fd1f 	bl	8001814 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ddd6:	490c      	ldr	r1, [pc, #48]	@ (800de08 <MX_USB_DEVICE_Init+0x5c>)
 800ddd8:	4809      	ldr	r0, [pc, #36]	@ (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddda:	f7fd fab5 	bl	800b348 <USBD_CDC_RegisterInterface>
 800ddde:	4603      	mov	r3, r0
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	d001      	beq.n	800dde8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800dde4:	f7f3 fd16 	bl	8001814 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800dde8:	4805      	ldr	r0, [pc, #20]	@ (800de00 <MX_USB_DEVICE_Init+0x54>)
 800ddea:	f7fd fbe3 	bl	800b5b4 <USBD_Start>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ddf4:	f7f3 fd0e 	bl	8001814 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ddf8:	bf00      	nop
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	200000ec 	.word	0x200000ec
 800de00:	2000045c 	.word	0x2000045c
 800de04:	20000058 	.word	0x20000058
 800de08:	200000d8 	.word	0x200000d8

0800de0c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800de0c:	b580      	push	{r7, lr}
 800de0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800de10:	2200      	movs	r2, #0
 800de12:	4905      	ldr	r1, [pc, #20]	@ (800de28 <CDC_Init_FS+0x1c>)
 800de14:	4805      	ldr	r0, [pc, #20]	@ (800de2c <CDC_Init_FS+0x20>)
 800de16:	f7fd fab1 	bl	800b37c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800de1a:	4905      	ldr	r1, [pc, #20]	@ (800de30 <CDC_Init_FS+0x24>)
 800de1c:	4803      	ldr	r0, [pc, #12]	@ (800de2c <CDC_Init_FS+0x20>)
 800de1e:	f7fd facf 	bl	800b3c0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800de22:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800de24:	4618      	mov	r0, r3
 800de26:	bd80      	pop	{r7, pc}
 800de28:	20000b38 	.word	0x20000b38
 800de2c:	2000045c 	.word	0x2000045c
 800de30:	20000738 	.word	0x20000738

0800de34 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800de34:	b480      	push	{r7}
 800de36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800de38:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800de3a:	4618      	mov	r0, r3
 800de3c:	46bd      	mov	sp, r7
 800de3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de42:	4770      	bx	lr

0800de44 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800de44:	b480      	push	{r7}
 800de46:	b083      	sub	sp, #12
 800de48:	af00      	add	r7, sp, #0
 800de4a:	4603      	mov	r3, r0
 800de4c:	6039      	str	r1, [r7, #0]
 800de4e:	71fb      	strb	r3, [r7, #7]
 800de50:	4613      	mov	r3, r2
 800de52:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800de54:	79fb      	ldrb	r3, [r7, #7]
 800de56:	2b23      	cmp	r3, #35	@ 0x23
 800de58:	d84a      	bhi.n	800def0 <CDC_Control_FS+0xac>
 800de5a:	a201      	add	r2, pc, #4	@ (adr r2, 800de60 <CDC_Control_FS+0x1c>)
 800de5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800de60:	0800def1 	.word	0x0800def1
 800de64:	0800def1 	.word	0x0800def1
 800de68:	0800def1 	.word	0x0800def1
 800de6c:	0800def1 	.word	0x0800def1
 800de70:	0800def1 	.word	0x0800def1
 800de74:	0800def1 	.word	0x0800def1
 800de78:	0800def1 	.word	0x0800def1
 800de7c:	0800def1 	.word	0x0800def1
 800de80:	0800def1 	.word	0x0800def1
 800de84:	0800def1 	.word	0x0800def1
 800de88:	0800def1 	.word	0x0800def1
 800de8c:	0800def1 	.word	0x0800def1
 800de90:	0800def1 	.word	0x0800def1
 800de94:	0800def1 	.word	0x0800def1
 800de98:	0800def1 	.word	0x0800def1
 800de9c:	0800def1 	.word	0x0800def1
 800dea0:	0800def1 	.word	0x0800def1
 800dea4:	0800def1 	.word	0x0800def1
 800dea8:	0800def1 	.word	0x0800def1
 800deac:	0800def1 	.word	0x0800def1
 800deb0:	0800def1 	.word	0x0800def1
 800deb4:	0800def1 	.word	0x0800def1
 800deb8:	0800def1 	.word	0x0800def1
 800debc:	0800def1 	.word	0x0800def1
 800dec0:	0800def1 	.word	0x0800def1
 800dec4:	0800def1 	.word	0x0800def1
 800dec8:	0800def1 	.word	0x0800def1
 800decc:	0800def1 	.word	0x0800def1
 800ded0:	0800def1 	.word	0x0800def1
 800ded4:	0800def1 	.word	0x0800def1
 800ded8:	0800def1 	.word	0x0800def1
 800dedc:	0800def1 	.word	0x0800def1
 800dee0:	0800def1 	.word	0x0800def1
 800dee4:	0800def1 	.word	0x0800def1
 800dee8:	0800def1 	.word	0x0800def1
 800deec:	0800def1 	.word	0x0800def1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800def0:	bf00      	nop
  }

  return (USBD_OK);
 800def2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800def4:	4618      	mov	r0, r3
 800def6:	370c      	adds	r7, #12
 800def8:	46bd      	mov	sp, r7
 800defa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800defe:	4770      	bx	lr

0800df00 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800df00:	b580      	push	{r7, lr}
 800df02:	b082      	sub	sp, #8
 800df04:	af00      	add	r7, sp, #0
 800df06:	6078      	str	r0, [r7, #4]
 800df08:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800df0a:	6879      	ldr	r1, [r7, #4]
 800df0c:	4805      	ldr	r0, [pc, #20]	@ (800df24 <CDC_Receive_FS+0x24>)
 800df0e:	f7fd fa57 	bl	800b3c0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800df12:	4804      	ldr	r0, [pc, #16]	@ (800df24 <CDC_Receive_FS+0x24>)
 800df14:	f7fd fab2 	bl	800b47c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800df18:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800df1a:	4618      	mov	r0, r3
 800df1c:	3708      	adds	r7, #8
 800df1e:	46bd      	mov	sp, r7
 800df20:	bd80      	pop	{r7, pc}
 800df22:	bf00      	nop
 800df24:	2000045c 	.word	0x2000045c

0800df28 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b084      	sub	sp, #16
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	6078      	str	r0, [r7, #4]
 800df30:	460b      	mov	r3, r1
 800df32:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800df34:	2300      	movs	r3, #0
 800df36:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800df38:	4b0d      	ldr	r3, [pc, #52]	@ (800df70 <CDC_Transmit_FS+0x48>)
 800df3a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800df3e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800df46:	2b00      	cmp	r3, #0
 800df48:	d001      	beq.n	800df4e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800df4a:	2301      	movs	r3, #1
 800df4c:	e00b      	b.n	800df66 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800df4e:	887b      	ldrh	r3, [r7, #2]
 800df50:	461a      	mov	r2, r3
 800df52:	6879      	ldr	r1, [r7, #4]
 800df54:	4806      	ldr	r0, [pc, #24]	@ (800df70 <CDC_Transmit_FS+0x48>)
 800df56:	f7fd fa11 	bl	800b37c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800df5a:	4805      	ldr	r0, [pc, #20]	@ (800df70 <CDC_Transmit_FS+0x48>)
 800df5c:	f7fd fa4e 	bl	800b3fc <USBD_CDC_TransmitPacket>
 800df60:	4603      	mov	r3, r0
 800df62:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800df64:	7bfb      	ldrb	r3, [r7, #15]
}
 800df66:	4618      	mov	r0, r3
 800df68:	3710      	adds	r7, #16
 800df6a:	46bd      	mov	sp, r7
 800df6c:	bd80      	pop	{r7, pc}
 800df6e:	bf00      	nop
 800df70:	2000045c 	.word	0x2000045c

0800df74 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800df74:	b480      	push	{r7}
 800df76:	b087      	sub	sp, #28
 800df78:	af00      	add	r7, sp, #0
 800df7a:	60f8      	str	r0, [r7, #12]
 800df7c:	60b9      	str	r1, [r7, #8]
 800df7e:	4613      	mov	r3, r2
 800df80:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800df82:	2300      	movs	r3, #0
 800df84:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800df86:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800df8a:	4618      	mov	r0, r3
 800df8c:	371c      	adds	r7, #28
 800df8e:	46bd      	mov	sp, r7
 800df90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df94:	4770      	bx	lr
	...

0800df98 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800df98:	b480      	push	{r7}
 800df9a:	b083      	sub	sp, #12
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	4603      	mov	r3, r0
 800dfa0:	6039      	str	r1, [r7, #0]
 800dfa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	2212      	movs	r2, #18
 800dfa8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800dfaa:	4b03      	ldr	r3, [pc, #12]	@ (800dfb8 <USBD_FS_DeviceDescriptor+0x20>)
}
 800dfac:	4618      	mov	r0, r3
 800dfae:	370c      	adds	r7, #12
 800dfb0:	46bd      	mov	sp, r7
 800dfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfb6:	4770      	bx	lr
 800dfb8:	20000108 	.word	0x20000108

0800dfbc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfbc:	b480      	push	{r7}
 800dfbe:	b083      	sub	sp, #12
 800dfc0:	af00      	add	r7, sp, #0
 800dfc2:	4603      	mov	r3, r0
 800dfc4:	6039      	str	r1, [r7, #0]
 800dfc6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800dfc8:	683b      	ldr	r3, [r7, #0]
 800dfca:	2204      	movs	r2, #4
 800dfcc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800dfce:	4b03      	ldr	r3, [pc, #12]	@ (800dfdc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800dfd0:	4618      	mov	r0, r3
 800dfd2:	370c      	adds	r7, #12
 800dfd4:	46bd      	mov	sp, r7
 800dfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfda:	4770      	bx	lr
 800dfdc:	2000011c 	.word	0x2000011c

0800dfe0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b082      	sub	sp, #8
 800dfe4:	af00      	add	r7, sp, #0
 800dfe6:	4603      	mov	r3, r0
 800dfe8:	6039      	str	r1, [r7, #0]
 800dfea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800dfec:	79fb      	ldrb	r3, [r7, #7]
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d105      	bne.n	800dffe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dff2:	683a      	ldr	r2, [r7, #0]
 800dff4:	4907      	ldr	r1, [pc, #28]	@ (800e014 <USBD_FS_ProductStrDescriptor+0x34>)
 800dff6:	4808      	ldr	r0, [pc, #32]	@ (800e018 <USBD_FS_ProductStrDescriptor+0x38>)
 800dff8:	f7fe fc8c 	bl	800c914 <USBD_GetString>
 800dffc:	e004      	b.n	800e008 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800dffe:	683a      	ldr	r2, [r7, #0]
 800e000:	4904      	ldr	r1, [pc, #16]	@ (800e014 <USBD_FS_ProductStrDescriptor+0x34>)
 800e002:	4805      	ldr	r0, [pc, #20]	@ (800e018 <USBD_FS_ProductStrDescriptor+0x38>)
 800e004:	f7fe fc86 	bl	800c914 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e008:	4b02      	ldr	r3, [pc, #8]	@ (800e014 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800e00a:	4618      	mov	r0, r3
 800e00c:	3708      	adds	r7, #8
 800e00e:	46bd      	mov	sp, r7
 800e010:	bd80      	pop	{r7, pc}
 800e012:	bf00      	nop
 800e014:	20000f38 	.word	0x20000f38
 800e018:	0800f4ac 	.word	0x0800f4ac

0800e01c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	4603      	mov	r3, r0
 800e024:	6039      	str	r1, [r7, #0]
 800e026:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800e028:	683a      	ldr	r2, [r7, #0]
 800e02a:	4904      	ldr	r1, [pc, #16]	@ (800e03c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800e02c:	4804      	ldr	r0, [pc, #16]	@ (800e040 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800e02e:	f7fe fc71 	bl	800c914 <USBD_GetString>
  return USBD_StrDesc;
 800e032:	4b02      	ldr	r3, [pc, #8]	@ (800e03c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800e034:	4618      	mov	r0, r3
 800e036:	3708      	adds	r7, #8
 800e038:	46bd      	mov	sp, r7
 800e03a:	bd80      	pop	{r7, pc}
 800e03c:	20000f38 	.word	0x20000f38
 800e040:	0800f4c4 	.word	0x0800f4c4

0800e044 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e044:	b580      	push	{r7, lr}
 800e046:	b082      	sub	sp, #8
 800e048:	af00      	add	r7, sp, #0
 800e04a:	4603      	mov	r3, r0
 800e04c:	6039      	str	r1, [r7, #0]
 800e04e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800e050:	683b      	ldr	r3, [r7, #0]
 800e052:	221a      	movs	r2, #26
 800e054:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800e056:	f000 f843 	bl	800e0e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800e05a:	4b02      	ldr	r3, [pc, #8]	@ (800e064 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800e05c:	4618      	mov	r0, r3
 800e05e:	3708      	adds	r7, #8
 800e060:	46bd      	mov	sp, r7
 800e062:	bd80      	pop	{r7, pc}
 800e064:	20000120 	.word	0x20000120

0800e068 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	4603      	mov	r3, r0
 800e070:	6039      	str	r1, [r7, #0]
 800e072:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800e074:	79fb      	ldrb	r3, [r7, #7]
 800e076:	2b00      	cmp	r3, #0
 800e078:	d105      	bne.n	800e086 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e07a:	683a      	ldr	r2, [r7, #0]
 800e07c:	4907      	ldr	r1, [pc, #28]	@ (800e09c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e07e:	4808      	ldr	r0, [pc, #32]	@ (800e0a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e080:	f7fe fc48 	bl	800c914 <USBD_GetString>
 800e084:	e004      	b.n	800e090 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800e086:	683a      	ldr	r2, [r7, #0]
 800e088:	4904      	ldr	r1, [pc, #16]	@ (800e09c <USBD_FS_ConfigStrDescriptor+0x34>)
 800e08a:	4805      	ldr	r0, [pc, #20]	@ (800e0a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800e08c:	f7fe fc42 	bl	800c914 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e090:	4b02      	ldr	r3, [pc, #8]	@ (800e09c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800e092:	4618      	mov	r0, r3
 800e094:	3708      	adds	r7, #8
 800e096:	46bd      	mov	sp, r7
 800e098:	bd80      	pop	{r7, pc}
 800e09a:	bf00      	nop
 800e09c:	20000f38 	.word	0x20000f38
 800e0a0:	0800f4d8 	.word	0x0800f4d8

0800e0a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b082      	sub	sp, #8
 800e0a8:	af00      	add	r7, sp, #0
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	6039      	str	r1, [r7, #0]
 800e0ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800e0b0:	79fb      	ldrb	r3, [r7, #7]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d105      	bne.n	800e0c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0b6:	683a      	ldr	r2, [r7, #0]
 800e0b8:	4907      	ldr	r1, [pc, #28]	@ (800e0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0ba:	4808      	ldr	r0, [pc, #32]	@ (800e0dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0bc:	f7fe fc2a 	bl	800c914 <USBD_GetString>
 800e0c0:	e004      	b.n	800e0cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800e0c2:	683a      	ldr	r2, [r7, #0]
 800e0c4:	4904      	ldr	r1, [pc, #16]	@ (800e0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800e0c6:	4805      	ldr	r0, [pc, #20]	@ (800e0dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800e0c8:	f7fe fc24 	bl	800c914 <USBD_GetString>
  }
  return USBD_StrDesc;
 800e0cc:	4b02      	ldr	r3, [pc, #8]	@ (800e0d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800e0ce:	4618      	mov	r0, r3
 800e0d0:	3708      	adds	r7, #8
 800e0d2:	46bd      	mov	sp, r7
 800e0d4:	bd80      	pop	{r7, pc}
 800e0d6:	bf00      	nop
 800e0d8:	20000f38 	.word	0x20000f38
 800e0dc:	0800f4e4 	.word	0x0800f4e4

0800e0e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800e0e0:	b580      	push	{r7, lr}
 800e0e2:	b084      	sub	sp, #16
 800e0e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800e0e6:	4b0f      	ldr	r3, [pc, #60]	@ (800e124 <Get_SerialNum+0x44>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800e0ec:	4b0e      	ldr	r3, [pc, #56]	@ (800e128 <Get_SerialNum+0x48>)
 800e0ee:	681b      	ldr	r3, [r3, #0]
 800e0f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800e0f2:	4b0e      	ldr	r3, [pc, #56]	@ (800e12c <Get_SerialNum+0x4c>)
 800e0f4:	681b      	ldr	r3, [r3, #0]
 800e0f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800e0f8:	68fa      	ldr	r2, [r7, #12]
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2b00      	cmp	r3, #0
 800e104:	d009      	beq.n	800e11a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800e106:	2208      	movs	r2, #8
 800e108:	4909      	ldr	r1, [pc, #36]	@ (800e130 <Get_SerialNum+0x50>)
 800e10a:	68f8      	ldr	r0, [r7, #12]
 800e10c:	f000 f814 	bl	800e138 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800e110:	2204      	movs	r2, #4
 800e112:	4908      	ldr	r1, [pc, #32]	@ (800e134 <Get_SerialNum+0x54>)
 800e114:	68b8      	ldr	r0, [r7, #8]
 800e116:	f000 f80f 	bl	800e138 <IntToUnicode>
  }
}
 800e11a:	bf00      	nop
 800e11c:	3710      	adds	r7, #16
 800e11e:	46bd      	mov	sp, r7
 800e120:	bd80      	pop	{r7, pc}
 800e122:	bf00      	nop
 800e124:	1fff7a10 	.word	0x1fff7a10
 800e128:	1fff7a14 	.word	0x1fff7a14
 800e12c:	1fff7a18 	.word	0x1fff7a18
 800e130:	20000122 	.word	0x20000122
 800e134:	20000132 	.word	0x20000132

0800e138 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800e138:	b480      	push	{r7}
 800e13a:	b087      	sub	sp, #28
 800e13c:	af00      	add	r7, sp, #0
 800e13e:	60f8      	str	r0, [r7, #12]
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	4613      	mov	r3, r2
 800e144:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800e146:	2300      	movs	r3, #0
 800e148:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800e14a:	2300      	movs	r3, #0
 800e14c:	75fb      	strb	r3, [r7, #23]
 800e14e:	e027      	b.n	800e1a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	0f1b      	lsrs	r3, r3, #28
 800e154:	2b09      	cmp	r3, #9
 800e156:	d80b      	bhi.n	800e170 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	0f1b      	lsrs	r3, r3, #28
 800e15c:	b2da      	uxtb	r2, r3
 800e15e:	7dfb      	ldrb	r3, [r7, #23]
 800e160:	005b      	lsls	r3, r3, #1
 800e162:	4619      	mov	r1, r3
 800e164:	68bb      	ldr	r3, [r7, #8]
 800e166:	440b      	add	r3, r1
 800e168:	3230      	adds	r2, #48	@ 0x30
 800e16a:	b2d2      	uxtb	r2, r2
 800e16c:	701a      	strb	r2, [r3, #0]
 800e16e:	e00a      	b.n	800e186 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	0f1b      	lsrs	r3, r3, #28
 800e174:	b2da      	uxtb	r2, r3
 800e176:	7dfb      	ldrb	r3, [r7, #23]
 800e178:	005b      	lsls	r3, r3, #1
 800e17a:	4619      	mov	r1, r3
 800e17c:	68bb      	ldr	r3, [r7, #8]
 800e17e:	440b      	add	r3, r1
 800e180:	3237      	adds	r2, #55	@ 0x37
 800e182:	b2d2      	uxtb	r2, r2
 800e184:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	011b      	lsls	r3, r3, #4
 800e18a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800e18c:	7dfb      	ldrb	r3, [r7, #23]
 800e18e:	005b      	lsls	r3, r3, #1
 800e190:	3301      	adds	r3, #1
 800e192:	68ba      	ldr	r2, [r7, #8]
 800e194:	4413      	add	r3, r2
 800e196:	2200      	movs	r2, #0
 800e198:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800e19a:	7dfb      	ldrb	r3, [r7, #23]
 800e19c:	3301      	adds	r3, #1
 800e19e:	75fb      	strb	r3, [r7, #23]
 800e1a0:	7dfa      	ldrb	r2, [r7, #23]
 800e1a2:	79fb      	ldrb	r3, [r7, #7]
 800e1a4:	429a      	cmp	r2, r3
 800e1a6:	d3d3      	bcc.n	800e150 <IntToUnicode+0x18>
  }
}
 800e1a8:	bf00      	nop
 800e1aa:	bf00      	nop
 800e1ac:	371c      	adds	r7, #28
 800e1ae:	46bd      	mov	sp, r7
 800e1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b4:	4770      	bx	lr
	...

0800e1b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800e1b8:	b580      	push	{r7, lr}
 800e1ba:	b08a      	sub	sp, #40	@ 0x28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e1c0:	f107 0314 	add.w	r3, r7, #20
 800e1c4:	2200      	movs	r2, #0
 800e1c6:	601a      	str	r2, [r3, #0]
 800e1c8:	605a      	str	r2, [r3, #4]
 800e1ca:	609a      	str	r2, [r3, #8]
 800e1cc:	60da      	str	r2, [r3, #12]
 800e1ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800e1d8:	d13a      	bne.n	800e250 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1da:	2300      	movs	r3, #0
 800e1dc:	613b      	str	r3, [r7, #16]
 800e1de:	4b1e      	ldr	r3, [pc, #120]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e1e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1e2:	4a1d      	ldr	r2, [pc, #116]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e1e4:	f043 0301 	orr.w	r3, r3, #1
 800e1e8:	6313      	str	r3, [r2, #48]	@ 0x30
 800e1ea:	4b1b      	ldr	r3, [pc, #108]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e1ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e1ee:	f003 0301 	and.w	r3, r3, #1
 800e1f2:	613b      	str	r3, [r7, #16]
 800e1f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800e1f6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800e1fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e1fc:	2302      	movs	r3, #2
 800e1fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e200:	2300      	movs	r3, #0
 800e202:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e204:	2303      	movs	r3, #3
 800e206:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800e208:	230a      	movs	r3, #10
 800e20a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e20c:	f107 0314 	add.w	r3, r7, #20
 800e210:	4619      	mov	r1, r3
 800e212:	4812      	ldr	r0, [pc, #72]	@ (800e25c <HAL_PCD_MspInit+0xa4>)
 800e214:	f7f7 f8bc 	bl	8005390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800e218:	4b0f      	ldr	r3, [pc, #60]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e21a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e21c:	4a0e      	ldr	r2, [pc, #56]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e21e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e222:	6353      	str	r3, [r2, #52]	@ 0x34
 800e224:	2300      	movs	r3, #0
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	4b0b      	ldr	r3, [pc, #44]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e22a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e22c:	4a0a      	ldr	r2, [pc, #40]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e22e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800e232:	6453      	str	r3, [r2, #68]	@ 0x44
 800e234:	4b08      	ldr	r3, [pc, #32]	@ (800e258 <HAL_PCD_MspInit+0xa0>)
 800e236:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e238:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e23c:	60fb      	str	r3, [r7, #12]
 800e23e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800e240:	2200      	movs	r2, #0
 800e242:	2100      	movs	r1, #0
 800e244:	2043      	movs	r0, #67	@ 0x43
 800e246:	f7f6 fcda 	bl	8004bfe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800e24a:	2043      	movs	r0, #67	@ 0x43
 800e24c:	f7f6 fcf3 	bl	8004c36 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800e250:	bf00      	nop
 800e252:	3728      	adds	r7, #40	@ 0x28
 800e254:	46bd      	mov	sp, r7
 800e256:	bd80      	pop	{r7, pc}
 800e258:	40023800 	.word	0x40023800
 800e25c:	40020000 	.word	0x40020000

0800e260 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e260:	b580      	push	{r7, lr}
 800e262:	b082      	sub	sp, #8
 800e264:	af00      	add	r7, sp, #0
 800e266:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800e26e:	687b      	ldr	r3, [r7, #4]
 800e270:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800e274:	4619      	mov	r1, r3
 800e276:	4610      	mov	r0, r2
 800e278:	f7fd f9e9 	bl	800b64e <USBD_LL_SetupStage>
}
 800e27c:	bf00      	nop
 800e27e:	3708      	adds	r7, #8
 800e280:	46bd      	mov	sp, r7
 800e282:	bd80      	pop	{r7, pc}

0800e284 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e284:	b580      	push	{r7, lr}
 800e286:	b082      	sub	sp, #8
 800e288:	af00      	add	r7, sp, #0
 800e28a:	6078      	str	r0, [r7, #4]
 800e28c:	460b      	mov	r3, r1
 800e28e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e296:	78fa      	ldrb	r2, [r7, #3]
 800e298:	6879      	ldr	r1, [r7, #4]
 800e29a:	4613      	mov	r3, r2
 800e29c:	00db      	lsls	r3, r3, #3
 800e29e:	4413      	add	r3, r2
 800e2a0:	009b      	lsls	r3, r3, #2
 800e2a2:	440b      	add	r3, r1
 800e2a4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800e2a8:	681a      	ldr	r2, [r3, #0]
 800e2aa:	78fb      	ldrb	r3, [r7, #3]
 800e2ac:	4619      	mov	r1, r3
 800e2ae:	f7fd fa23 	bl	800b6f8 <USBD_LL_DataOutStage>
}
 800e2b2:	bf00      	nop
 800e2b4:	3708      	adds	r7, #8
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	bd80      	pop	{r7, pc}

0800e2ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ba:	b580      	push	{r7, lr}
 800e2bc:	b082      	sub	sp, #8
 800e2be:	af00      	add	r7, sp, #0
 800e2c0:	6078      	str	r0, [r7, #4]
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800e2c6:	687b      	ldr	r3, [r7, #4]
 800e2c8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800e2cc:	78fa      	ldrb	r2, [r7, #3]
 800e2ce:	6879      	ldr	r1, [r7, #4]
 800e2d0:	4613      	mov	r3, r2
 800e2d2:	00db      	lsls	r3, r3, #3
 800e2d4:	4413      	add	r3, r2
 800e2d6:	009b      	lsls	r3, r3, #2
 800e2d8:	440b      	add	r3, r1
 800e2da:	3320      	adds	r3, #32
 800e2dc:	681a      	ldr	r2, [r3, #0]
 800e2de:	78fb      	ldrb	r3, [r7, #3]
 800e2e0:	4619      	mov	r1, r3
 800e2e2:	f7fd fabc 	bl	800b85e <USBD_LL_DataInStage>
}
 800e2e6:	bf00      	nop
 800e2e8:	3708      	adds	r7, #8
 800e2ea:	46bd      	mov	sp, r7
 800e2ec:	bd80      	pop	{r7, pc}

0800e2ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e2ee:	b580      	push	{r7, lr}
 800e2f0:	b082      	sub	sp, #8
 800e2f2:	af00      	add	r7, sp, #0
 800e2f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800e2f6:	687b      	ldr	r3, [r7, #4]
 800e2f8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e2fc:	4618      	mov	r0, r3
 800e2fe:	f7fd fbf6 	bl	800baee <USBD_LL_SOF>
}
 800e302:	bf00      	nop
 800e304:	3708      	adds	r7, #8
 800e306:	46bd      	mov	sp, r7
 800e308:	bd80      	pop	{r7, pc}

0800e30a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e30a:	b580      	push	{r7, lr}
 800e30c:	b084      	sub	sp, #16
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800e312:	2301      	movs	r3, #1
 800e314:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800e316:	687b      	ldr	r3, [r7, #4]
 800e318:	79db      	ldrb	r3, [r3, #7]
 800e31a:	2b02      	cmp	r3, #2
 800e31c:	d001      	beq.n	800e322 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800e31e:	f7f3 fa79 	bl	8001814 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e328:	7bfa      	ldrb	r2, [r7, #15]
 800e32a:	4611      	mov	r1, r2
 800e32c:	4618      	mov	r0, r3
 800e32e:	f7fd fb9a 	bl	800ba66 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e338:	4618      	mov	r0, r3
 800e33a:	f7fd fb42 	bl	800b9c2 <USBD_LL_Reset>
}
 800e33e:	bf00      	nop
 800e340:	3710      	adds	r7, #16
 800e342:	46bd      	mov	sp, r7
 800e344:	bd80      	pop	{r7, pc}
	...

0800e348 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e348:	b580      	push	{r7, lr}
 800e34a:	b082      	sub	sp, #8
 800e34c:	af00      	add	r7, sp, #0
 800e34e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e356:	4618      	mov	r0, r3
 800e358:	f7fd fb95 	bl	800ba86 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800e35c:	687b      	ldr	r3, [r7, #4]
 800e35e:	681b      	ldr	r3, [r3, #0]
 800e360:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800e364:	681b      	ldr	r3, [r3, #0]
 800e366:	687a      	ldr	r2, [r7, #4]
 800e368:	6812      	ldr	r2, [r2, #0]
 800e36a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800e36e:	f043 0301 	orr.w	r3, r3, #1
 800e372:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	7adb      	ldrb	r3, [r3, #11]
 800e378:	2b00      	cmp	r3, #0
 800e37a:	d005      	beq.n	800e388 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800e37c:	4b04      	ldr	r3, [pc, #16]	@ (800e390 <HAL_PCD_SuspendCallback+0x48>)
 800e37e:	691b      	ldr	r3, [r3, #16]
 800e380:	4a03      	ldr	r2, [pc, #12]	@ (800e390 <HAL_PCD_SuspendCallback+0x48>)
 800e382:	f043 0306 	orr.w	r3, r3, #6
 800e386:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800e388:	bf00      	nop
 800e38a:	3708      	adds	r7, #8
 800e38c:	46bd      	mov	sp, r7
 800e38e:	bd80      	pop	{r7, pc}
 800e390:	e000ed00 	.word	0xe000ed00

0800e394 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b082      	sub	sp, #8
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800e39c:	687b      	ldr	r3, [r7, #4]
 800e39e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3a2:	4618      	mov	r0, r3
 800e3a4:	f7fd fb8b 	bl	800babe <USBD_LL_Resume>
}
 800e3a8:	bf00      	nop
 800e3aa:	3708      	adds	r7, #8
 800e3ac:	46bd      	mov	sp, r7
 800e3ae:	bd80      	pop	{r7, pc}

0800e3b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3b0:	b580      	push	{r7, lr}
 800e3b2:	b082      	sub	sp, #8
 800e3b4:	af00      	add	r7, sp, #0
 800e3b6:	6078      	str	r0, [r7, #4]
 800e3b8:	460b      	mov	r3, r1
 800e3ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3bc:	687b      	ldr	r3, [r7, #4]
 800e3be:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3c2:	78fa      	ldrb	r2, [r7, #3]
 800e3c4:	4611      	mov	r1, r2
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd fbe3 	bl	800bb92 <USBD_LL_IsoOUTIncomplete>
}
 800e3cc:	bf00      	nop
 800e3ce:	3708      	adds	r7, #8
 800e3d0:	46bd      	mov	sp, r7
 800e3d2:	bd80      	pop	{r7, pc}

0800e3d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3d4:	b580      	push	{r7, lr}
 800e3d6:	b082      	sub	sp, #8
 800e3d8:	af00      	add	r7, sp, #0
 800e3da:	6078      	str	r0, [r7, #4]
 800e3dc:	460b      	mov	r3, r1
 800e3de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e3e6:	78fa      	ldrb	r2, [r7, #3]
 800e3e8:	4611      	mov	r1, r2
 800e3ea:	4618      	mov	r0, r3
 800e3ec:	f7fd fb9f 	bl	800bb2e <USBD_LL_IsoINIncomplete>
}
 800e3f0:	bf00      	nop
 800e3f2:	3708      	adds	r7, #8
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}

0800e3f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e406:	4618      	mov	r0, r3
 800e408:	f7fd fbf5 	bl	800bbf6 <USBD_LL_DevConnected>
}
 800e40c:	bf00      	nop
 800e40e:	3708      	adds	r7, #8
 800e410:	46bd      	mov	sp, r7
 800e412:	bd80      	pop	{r7, pc}

0800e414 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800e414:	b580      	push	{r7, lr}
 800e416:	b082      	sub	sp, #8
 800e418:	af00      	add	r7, sp, #0
 800e41a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800e422:	4618      	mov	r0, r3
 800e424:	f7fd fbf2 	bl	800bc0c <USBD_LL_DevDisconnected>
}
 800e428:	bf00      	nop
 800e42a:	3708      	adds	r7, #8
 800e42c:	46bd      	mov	sp, r7
 800e42e:	bd80      	pop	{r7, pc}

0800e430 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800e430:	b580      	push	{r7, lr}
 800e432:	b082      	sub	sp, #8
 800e434:	af00      	add	r7, sp, #0
 800e436:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	781b      	ldrb	r3, [r3, #0]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d13c      	bne.n	800e4ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800e440:	4a20      	ldr	r2, [pc, #128]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	4a1e      	ldr	r2, [pc, #120]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e44c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800e450:	4b1c      	ldr	r3, [pc, #112]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e452:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800e456:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800e458:	4b1a      	ldr	r3, [pc, #104]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e45a:	2204      	movs	r2, #4
 800e45c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800e45e:	4b19      	ldr	r3, [pc, #100]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e460:	2202      	movs	r2, #2
 800e462:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800e464:	4b17      	ldr	r3, [pc, #92]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e466:	2200      	movs	r2, #0
 800e468:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800e46a:	4b16      	ldr	r3, [pc, #88]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e46c:	2202      	movs	r2, #2
 800e46e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800e470:	4b14      	ldr	r3, [pc, #80]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e472:	2200      	movs	r2, #0
 800e474:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800e476:	4b13      	ldr	r3, [pc, #76]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e478:	2200      	movs	r2, #0
 800e47a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800e47c:	4b11      	ldr	r3, [pc, #68]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e47e:	2200      	movs	r2, #0
 800e480:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800e482:	4b10      	ldr	r3, [pc, #64]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e484:	2200      	movs	r2, #0
 800e486:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800e488:	4b0e      	ldr	r3, [pc, #56]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e48a:	2200      	movs	r2, #0
 800e48c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800e48e:	480d      	ldr	r0, [pc, #52]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e490:	f7f7 f934 	bl	80056fc <HAL_PCD_Init>
 800e494:	4603      	mov	r3, r0
 800e496:	2b00      	cmp	r3, #0
 800e498:	d001      	beq.n	800e49e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800e49a:	f7f3 f9bb 	bl	8001814 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800e49e:	2180      	movs	r1, #128	@ 0x80
 800e4a0:	4808      	ldr	r0, [pc, #32]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e4a2:	f7f8 fb60 	bl	8006b66 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800e4a6:	2240      	movs	r2, #64	@ 0x40
 800e4a8:	2100      	movs	r1, #0
 800e4aa:	4806      	ldr	r0, [pc, #24]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e4ac:	f7f8 fb14 	bl	8006ad8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800e4b0:	2280      	movs	r2, #128	@ 0x80
 800e4b2:	2101      	movs	r1, #1
 800e4b4:	4803      	ldr	r0, [pc, #12]	@ (800e4c4 <USBD_LL_Init+0x94>)
 800e4b6:	f7f8 fb0f 	bl	8006ad8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800e4ba:	2300      	movs	r3, #0
}
 800e4bc:	4618      	mov	r0, r3
 800e4be:	3708      	adds	r7, #8
 800e4c0:	46bd      	mov	sp, r7
 800e4c2:	bd80      	pop	{r7, pc}
 800e4c4:	20001138 	.word	0x20001138

0800e4c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800e4c8:	b580      	push	{r7, lr}
 800e4ca:	b084      	sub	sp, #16
 800e4cc:	af00      	add	r7, sp, #0
 800e4ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e4d0:	2300      	movs	r3, #0
 800e4d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e4d4:	2300      	movs	r3, #0
 800e4d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800e4d8:	687b      	ldr	r3, [r7, #4]
 800e4da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e4de:	4618      	mov	r0, r3
 800e4e0:	f7f7 fa1b 	bl	800591a <HAL_PCD_Start>
 800e4e4:	4603      	mov	r3, r0
 800e4e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e4e8:	7bfb      	ldrb	r3, [r7, #15]
 800e4ea:	4618      	mov	r0, r3
 800e4ec:	f000 f942 	bl	800e774 <USBD_Get_USB_Status>
 800e4f0:	4603      	mov	r3, r0
 800e4f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e4f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800e4f6:	4618      	mov	r0, r3
 800e4f8:	3710      	adds	r7, #16
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	bd80      	pop	{r7, pc}

0800e4fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800e4fe:	b580      	push	{r7, lr}
 800e500:	b084      	sub	sp, #16
 800e502:	af00      	add	r7, sp, #0
 800e504:	6078      	str	r0, [r7, #4]
 800e506:	4608      	mov	r0, r1
 800e508:	4611      	mov	r1, r2
 800e50a:	461a      	mov	r2, r3
 800e50c:	4603      	mov	r3, r0
 800e50e:	70fb      	strb	r3, [r7, #3]
 800e510:	460b      	mov	r3, r1
 800e512:	70bb      	strb	r3, [r7, #2]
 800e514:	4613      	mov	r3, r2
 800e516:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e518:	2300      	movs	r3, #0
 800e51a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e51c:	2300      	movs	r3, #0
 800e51e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e526:	78bb      	ldrb	r3, [r7, #2]
 800e528:	883a      	ldrh	r2, [r7, #0]
 800e52a:	78f9      	ldrb	r1, [r7, #3]
 800e52c:	f7f7 feef 	bl	800630e <HAL_PCD_EP_Open>
 800e530:	4603      	mov	r3, r0
 800e532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e534:	7bfb      	ldrb	r3, [r7, #15]
 800e536:	4618      	mov	r0, r3
 800e538:	f000 f91c 	bl	800e774 <USBD_Get_USB_Status>
 800e53c:	4603      	mov	r3, r0
 800e53e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e540:	7bbb      	ldrb	r3, [r7, #14]
}
 800e542:	4618      	mov	r0, r3
 800e544:	3710      	adds	r7, #16
 800e546:	46bd      	mov	sp, r7
 800e548:	bd80      	pop	{r7, pc}

0800e54a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e54a:	b580      	push	{r7, lr}
 800e54c:	b084      	sub	sp, #16
 800e54e:	af00      	add	r7, sp, #0
 800e550:	6078      	str	r0, [r7, #4]
 800e552:	460b      	mov	r3, r1
 800e554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e556:	2300      	movs	r3, #0
 800e558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e55a:	2300      	movs	r3, #0
 800e55c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800e55e:	687b      	ldr	r3, [r7, #4]
 800e560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e564:	78fa      	ldrb	r2, [r7, #3]
 800e566:	4611      	mov	r1, r2
 800e568:	4618      	mov	r0, r3
 800e56a:	f7f7 ff3a 	bl	80063e2 <HAL_PCD_EP_Close>
 800e56e:	4603      	mov	r3, r0
 800e570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e572:	7bfb      	ldrb	r3, [r7, #15]
 800e574:	4618      	mov	r0, r3
 800e576:	f000 f8fd 	bl	800e774 <USBD_Get_USB_Status>
 800e57a:	4603      	mov	r3, r0
 800e57c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e57e:	7bbb      	ldrb	r3, [r7, #14]
}
 800e580:	4618      	mov	r0, r3
 800e582:	3710      	adds	r7, #16
 800e584:	46bd      	mov	sp, r7
 800e586:	bd80      	pop	{r7, pc}

0800e588 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e588:	b580      	push	{r7, lr}
 800e58a:	b084      	sub	sp, #16
 800e58c:	af00      	add	r7, sp, #0
 800e58e:	6078      	str	r0, [r7, #4]
 800e590:	460b      	mov	r3, r1
 800e592:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e594:	2300      	movs	r3, #0
 800e596:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e598:	2300      	movs	r3, #0
 800e59a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5a2:	78fa      	ldrb	r2, [r7, #3]
 800e5a4:	4611      	mov	r1, r2
 800e5a6:	4618      	mov	r0, r3
 800e5a8:	f7f7 fff2 	bl	8006590 <HAL_PCD_EP_SetStall>
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5b0:	7bfb      	ldrb	r3, [r7, #15]
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	f000 f8de 	bl	800e774 <USBD_Get_USB_Status>
 800e5b8:	4603      	mov	r3, r0
 800e5ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5bc:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5be:	4618      	mov	r0, r3
 800e5c0:	3710      	adds	r7, #16
 800e5c2:	46bd      	mov	sp, r7
 800e5c4:	bd80      	pop	{r7, pc}

0800e5c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e5c6:	b580      	push	{r7, lr}
 800e5c8:	b084      	sub	sp, #16
 800e5ca:	af00      	add	r7, sp, #0
 800e5cc:	6078      	str	r0, [r7, #4]
 800e5ce:	460b      	mov	r3, r1
 800e5d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e5d6:	2300      	movs	r3, #0
 800e5d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e5e0:	78fa      	ldrb	r2, [r7, #3]
 800e5e2:	4611      	mov	r1, r2
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	f7f8 f836 	bl	8006656 <HAL_PCD_EP_ClrStall>
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e5ee:	7bfb      	ldrb	r3, [r7, #15]
 800e5f0:	4618      	mov	r0, r3
 800e5f2:	f000 f8bf 	bl	800e774 <USBD_Get_USB_Status>
 800e5f6:	4603      	mov	r3, r0
 800e5f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e5fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800e5fc:	4618      	mov	r0, r3
 800e5fe:	3710      	adds	r7, #16
 800e600:	46bd      	mov	sp, r7
 800e602:	bd80      	pop	{r7, pc}

0800e604 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e604:	b480      	push	{r7}
 800e606:	b085      	sub	sp, #20
 800e608:	af00      	add	r7, sp, #0
 800e60a:	6078      	str	r0, [r7, #4]
 800e60c:	460b      	mov	r3, r1
 800e60e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800e610:	687b      	ldr	r3, [r7, #4]
 800e612:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e616:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800e618:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	da0b      	bge.n	800e638 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800e620:	78fb      	ldrb	r3, [r7, #3]
 800e622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e626:	68f9      	ldr	r1, [r7, #12]
 800e628:	4613      	mov	r3, r2
 800e62a:	00db      	lsls	r3, r3, #3
 800e62c:	4413      	add	r3, r2
 800e62e:	009b      	lsls	r3, r3, #2
 800e630:	440b      	add	r3, r1
 800e632:	3316      	adds	r3, #22
 800e634:	781b      	ldrb	r3, [r3, #0]
 800e636:	e00b      	b.n	800e650 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800e638:	78fb      	ldrb	r3, [r7, #3]
 800e63a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e63e:	68f9      	ldr	r1, [r7, #12]
 800e640:	4613      	mov	r3, r2
 800e642:	00db      	lsls	r3, r3, #3
 800e644:	4413      	add	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	440b      	add	r3, r1
 800e64a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800e64e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800e650:	4618      	mov	r0, r3
 800e652:	3714      	adds	r7, #20
 800e654:	46bd      	mov	sp, r7
 800e656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e65a:	4770      	bx	lr

0800e65c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800e65c:	b580      	push	{r7, lr}
 800e65e:	b084      	sub	sp, #16
 800e660:	af00      	add	r7, sp, #0
 800e662:	6078      	str	r0, [r7, #4]
 800e664:	460b      	mov	r3, r1
 800e666:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e668:	2300      	movs	r3, #0
 800e66a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e66c:	2300      	movs	r3, #0
 800e66e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e676:	78fa      	ldrb	r2, [r7, #3]
 800e678:	4611      	mov	r1, r2
 800e67a:	4618      	mov	r0, r3
 800e67c:	f7f7 fe23 	bl	80062c6 <HAL_PCD_SetAddress>
 800e680:	4603      	mov	r3, r0
 800e682:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e684:	7bfb      	ldrb	r3, [r7, #15]
 800e686:	4618      	mov	r0, r3
 800e688:	f000 f874 	bl	800e774 <USBD_Get_USB_Status>
 800e68c:	4603      	mov	r3, r0
 800e68e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800e690:	7bbb      	ldrb	r3, [r7, #14]
}
 800e692:	4618      	mov	r0, r3
 800e694:	3710      	adds	r7, #16
 800e696:	46bd      	mov	sp, r7
 800e698:	bd80      	pop	{r7, pc}

0800e69a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e69a:	b580      	push	{r7, lr}
 800e69c:	b086      	sub	sp, #24
 800e69e:	af00      	add	r7, sp, #0
 800e6a0:	60f8      	str	r0, [r7, #12]
 800e6a2:	607a      	str	r2, [r7, #4]
 800e6a4:	603b      	str	r3, [r7, #0]
 800e6a6:	460b      	mov	r3, r1
 800e6a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6aa:	2300      	movs	r3, #0
 800e6ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800e6b2:	68fb      	ldr	r3, [r7, #12]
 800e6b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6b8:	7af9      	ldrb	r1, [r7, #11]
 800e6ba:	683b      	ldr	r3, [r7, #0]
 800e6bc:	687a      	ldr	r2, [r7, #4]
 800e6be:	f7f7 ff2d 	bl	800651c <HAL_PCD_EP_Transmit>
 800e6c2:	4603      	mov	r3, r0
 800e6c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e6c6:	7dfb      	ldrb	r3, [r7, #23]
 800e6c8:	4618      	mov	r0, r3
 800e6ca:	f000 f853 	bl	800e774 <USBD_Get_USB_Status>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e6d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800e6d4:	4618      	mov	r0, r3
 800e6d6:	3718      	adds	r7, #24
 800e6d8:	46bd      	mov	sp, r7
 800e6da:	bd80      	pop	{r7, pc}

0800e6dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800e6dc:	b580      	push	{r7, lr}
 800e6de:	b086      	sub	sp, #24
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	60f8      	str	r0, [r7, #12]
 800e6e4:	607a      	str	r2, [r7, #4]
 800e6e6:	603b      	str	r3, [r7, #0]
 800e6e8:	460b      	mov	r3, r1
 800e6ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800e6ec:	2300      	movs	r3, #0
 800e6ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e6f0:	2300      	movs	r3, #0
 800e6f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800e6fa:	7af9      	ldrb	r1, [r7, #11]
 800e6fc:	683b      	ldr	r3, [r7, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	f7f7 feb9 	bl	8006476 <HAL_PCD_EP_Receive>
 800e704:	4603      	mov	r3, r0
 800e706:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800e708:	7dfb      	ldrb	r3, [r7, #23]
 800e70a:	4618      	mov	r0, r3
 800e70c:	f000 f832 	bl	800e774 <USBD_Get_USB_Status>
 800e710:	4603      	mov	r3, r0
 800e712:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800e714:	7dbb      	ldrb	r3, [r7, #22]
}
 800e716:	4618      	mov	r0, r3
 800e718:	3718      	adds	r7, #24
 800e71a:	46bd      	mov	sp, r7
 800e71c:	bd80      	pop	{r7, pc}

0800e71e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800e71e:	b580      	push	{r7, lr}
 800e720:	b082      	sub	sp, #8
 800e722:	af00      	add	r7, sp, #0
 800e724:	6078      	str	r0, [r7, #4]
 800e726:	460b      	mov	r3, r1
 800e728:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800e730:	78fa      	ldrb	r2, [r7, #3]
 800e732:	4611      	mov	r1, r2
 800e734:	4618      	mov	r0, r3
 800e736:	f7f7 fed9 	bl	80064ec <HAL_PCD_EP_GetRxCount>
 800e73a:	4603      	mov	r3, r0
}
 800e73c:	4618      	mov	r0, r3
 800e73e:	3708      	adds	r7, #8
 800e740:	46bd      	mov	sp, r7
 800e742:	bd80      	pop	{r7, pc}

0800e744 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800e744:	b480      	push	{r7}
 800e746:	b083      	sub	sp, #12
 800e748:	af00      	add	r7, sp, #0
 800e74a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800e74c:	4b03      	ldr	r3, [pc, #12]	@ (800e75c <USBD_static_malloc+0x18>)
}
 800e74e:	4618      	mov	r0, r3
 800e750:	370c      	adds	r7, #12
 800e752:	46bd      	mov	sp, r7
 800e754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e758:	4770      	bx	lr
 800e75a:	bf00      	nop
 800e75c:	2000161c 	.word	0x2000161c

0800e760 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800e760:	b480      	push	{r7}
 800e762:	b083      	sub	sp, #12
 800e764:	af00      	add	r7, sp, #0
 800e766:	6078      	str	r0, [r7, #4]

}
 800e768:	bf00      	nop
 800e76a:	370c      	adds	r7, #12
 800e76c:	46bd      	mov	sp, r7
 800e76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e772:	4770      	bx	lr

0800e774 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800e774:	b480      	push	{r7}
 800e776:	b085      	sub	sp, #20
 800e778:	af00      	add	r7, sp, #0
 800e77a:	4603      	mov	r3, r0
 800e77c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800e77e:	2300      	movs	r3, #0
 800e780:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800e782:	79fb      	ldrb	r3, [r7, #7]
 800e784:	2b03      	cmp	r3, #3
 800e786:	d817      	bhi.n	800e7b8 <USBD_Get_USB_Status+0x44>
 800e788:	a201      	add	r2, pc, #4	@ (adr r2, 800e790 <USBD_Get_USB_Status+0x1c>)
 800e78a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e78e:	bf00      	nop
 800e790:	0800e7a1 	.word	0x0800e7a1
 800e794:	0800e7a7 	.word	0x0800e7a7
 800e798:	0800e7ad 	.word	0x0800e7ad
 800e79c:	0800e7b3 	.word	0x0800e7b3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	73fb      	strb	r3, [r7, #15]
    break;
 800e7a4:	e00b      	b.n	800e7be <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800e7a6:	2303      	movs	r3, #3
 800e7a8:	73fb      	strb	r3, [r7, #15]
    break;
 800e7aa:	e008      	b.n	800e7be <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800e7ac:	2301      	movs	r3, #1
 800e7ae:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b0:	e005      	b.n	800e7be <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800e7b2:	2303      	movs	r3, #3
 800e7b4:	73fb      	strb	r3, [r7, #15]
    break;
 800e7b6:	e002      	b.n	800e7be <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800e7b8:	2303      	movs	r3, #3
 800e7ba:	73fb      	strb	r3, [r7, #15]
    break;
 800e7bc:	bf00      	nop
  }
  return usb_status;
 800e7be:	7bfb      	ldrb	r3, [r7, #15]
}
 800e7c0:	4618      	mov	r0, r3
 800e7c2:	3714      	adds	r7, #20
 800e7c4:	46bd      	mov	sp, r7
 800e7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7ca:	4770      	bx	lr

0800e7cc <_ZdlPvj>:
 800e7cc:	f000 b811 	b.w	800e7f2 <_ZdlPv>

0800e7d0 <_Znwj>:
 800e7d0:	2801      	cmp	r0, #1
 800e7d2:	bf38      	it	cc
 800e7d4:	2001      	movcc	r0, #1
 800e7d6:	b510      	push	{r4, lr}
 800e7d8:	4604      	mov	r4, r0
 800e7da:	4620      	mov	r0, r4
 800e7dc:	f000 f836 	bl	800e84c <malloc>
 800e7e0:	b100      	cbz	r0, 800e7e4 <_Znwj+0x14>
 800e7e2:	bd10      	pop	{r4, pc}
 800e7e4:	f000 f808 	bl	800e7f8 <_ZSt15get_new_handlerv>
 800e7e8:	b908      	cbnz	r0, 800e7ee <_Znwj+0x1e>
 800e7ea:	f000 f80d 	bl	800e808 <abort>
 800e7ee:	4780      	blx	r0
 800e7f0:	e7f3      	b.n	800e7da <_Znwj+0xa>

0800e7f2 <_ZdlPv>:
 800e7f2:	f000 b833 	b.w	800e85c <free>
	...

0800e7f8 <_ZSt15get_new_handlerv>:
 800e7f8:	4b02      	ldr	r3, [pc, #8]	@ (800e804 <_ZSt15get_new_handlerv+0xc>)
 800e7fa:	6818      	ldr	r0, [r3, #0]
 800e7fc:	f3bf 8f5b 	dmb	ish
 800e800:	4770      	bx	lr
 800e802:	bf00      	nop
 800e804:	2000183c 	.word	0x2000183c

0800e808 <abort>:
 800e808:	b508      	push	{r3, lr}
 800e80a:	2006      	movs	r0, #6
 800e80c:	f000 f9b0 	bl	800eb70 <raise>
 800e810:	2001      	movs	r0, #1
 800e812:	f7f3 fc8b 	bl	800212c <_exit>

0800e816 <__itoa>:
 800e816:	1e93      	subs	r3, r2, #2
 800e818:	2b22      	cmp	r3, #34	@ 0x22
 800e81a:	b510      	push	{r4, lr}
 800e81c:	460c      	mov	r4, r1
 800e81e:	d904      	bls.n	800e82a <__itoa+0x14>
 800e820:	2300      	movs	r3, #0
 800e822:	700b      	strb	r3, [r1, #0]
 800e824:	461c      	mov	r4, r3
 800e826:	4620      	mov	r0, r4
 800e828:	bd10      	pop	{r4, pc}
 800e82a:	2a0a      	cmp	r2, #10
 800e82c:	d109      	bne.n	800e842 <__itoa+0x2c>
 800e82e:	2800      	cmp	r0, #0
 800e830:	da07      	bge.n	800e842 <__itoa+0x2c>
 800e832:	232d      	movs	r3, #45	@ 0x2d
 800e834:	700b      	strb	r3, [r1, #0]
 800e836:	4240      	negs	r0, r0
 800e838:	2101      	movs	r1, #1
 800e83a:	4421      	add	r1, r4
 800e83c:	f000 f8c4 	bl	800e9c8 <__utoa>
 800e840:	e7f1      	b.n	800e826 <__itoa+0x10>
 800e842:	2100      	movs	r1, #0
 800e844:	e7f9      	b.n	800e83a <__itoa+0x24>

0800e846 <itoa>:
 800e846:	f7ff bfe6 	b.w	800e816 <__itoa>
	...

0800e84c <malloc>:
 800e84c:	4b02      	ldr	r3, [pc, #8]	@ (800e858 <malloc+0xc>)
 800e84e:	4601      	mov	r1, r0
 800e850:	6818      	ldr	r0, [r3, #0]
 800e852:	f000 b82d 	b.w	800e8b0 <_malloc_r>
 800e856:	bf00      	nop
 800e858:	2000013c 	.word	0x2000013c

0800e85c <free>:
 800e85c:	4b02      	ldr	r3, [pc, #8]	@ (800e868 <free+0xc>)
 800e85e:	4601      	mov	r1, r0
 800e860:	6818      	ldr	r0, [r3, #0]
 800e862:	f000 b9eb 	b.w	800ec3c <_free_r>
 800e866:	bf00      	nop
 800e868:	2000013c 	.word	0x2000013c

0800e86c <sbrk_aligned>:
 800e86c:	b570      	push	{r4, r5, r6, lr}
 800e86e:	4e0f      	ldr	r6, [pc, #60]	@ (800e8ac <sbrk_aligned+0x40>)
 800e870:	460c      	mov	r4, r1
 800e872:	6831      	ldr	r1, [r6, #0]
 800e874:	4605      	mov	r5, r0
 800e876:	b911      	cbnz	r1, 800e87e <sbrk_aligned+0x12>
 800e878:	f000 f996 	bl	800eba8 <_sbrk_r>
 800e87c:	6030      	str	r0, [r6, #0]
 800e87e:	4621      	mov	r1, r4
 800e880:	4628      	mov	r0, r5
 800e882:	f000 f991 	bl	800eba8 <_sbrk_r>
 800e886:	1c43      	adds	r3, r0, #1
 800e888:	d103      	bne.n	800e892 <sbrk_aligned+0x26>
 800e88a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e88e:	4620      	mov	r0, r4
 800e890:	bd70      	pop	{r4, r5, r6, pc}
 800e892:	1cc4      	adds	r4, r0, #3
 800e894:	f024 0403 	bic.w	r4, r4, #3
 800e898:	42a0      	cmp	r0, r4
 800e89a:	d0f8      	beq.n	800e88e <sbrk_aligned+0x22>
 800e89c:	1a21      	subs	r1, r4, r0
 800e89e:	4628      	mov	r0, r5
 800e8a0:	f000 f982 	bl	800eba8 <_sbrk_r>
 800e8a4:	3001      	adds	r0, #1
 800e8a6:	d1f2      	bne.n	800e88e <sbrk_aligned+0x22>
 800e8a8:	e7ef      	b.n	800e88a <sbrk_aligned+0x1e>
 800e8aa:	bf00      	nop
 800e8ac:	20001840 	.word	0x20001840

0800e8b0 <_malloc_r>:
 800e8b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e8b4:	1ccd      	adds	r5, r1, #3
 800e8b6:	f025 0503 	bic.w	r5, r5, #3
 800e8ba:	3508      	adds	r5, #8
 800e8bc:	2d0c      	cmp	r5, #12
 800e8be:	bf38      	it	cc
 800e8c0:	250c      	movcc	r5, #12
 800e8c2:	2d00      	cmp	r5, #0
 800e8c4:	4606      	mov	r6, r0
 800e8c6:	db01      	blt.n	800e8cc <_malloc_r+0x1c>
 800e8c8:	42a9      	cmp	r1, r5
 800e8ca:	d904      	bls.n	800e8d6 <_malloc_r+0x26>
 800e8cc:	230c      	movs	r3, #12
 800e8ce:	6033      	str	r3, [r6, #0]
 800e8d0:	2000      	movs	r0, #0
 800e8d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e9ac <_malloc_r+0xfc>
 800e8da:	f000 f869 	bl	800e9b0 <__malloc_lock>
 800e8de:	f8d8 3000 	ldr.w	r3, [r8]
 800e8e2:	461c      	mov	r4, r3
 800e8e4:	bb44      	cbnz	r4, 800e938 <_malloc_r+0x88>
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	4630      	mov	r0, r6
 800e8ea:	f7ff ffbf 	bl	800e86c <sbrk_aligned>
 800e8ee:	1c43      	adds	r3, r0, #1
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	d158      	bne.n	800e9a6 <_malloc_r+0xf6>
 800e8f4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8f8:	4627      	mov	r7, r4
 800e8fa:	2f00      	cmp	r7, #0
 800e8fc:	d143      	bne.n	800e986 <_malloc_r+0xd6>
 800e8fe:	2c00      	cmp	r4, #0
 800e900:	d04b      	beq.n	800e99a <_malloc_r+0xea>
 800e902:	6823      	ldr	r3, [r4, #0]
 800e904:	4639      	mov	r1, r7
 800e906:	4630      	mov	r0, r6
 800e908:	eb04 0903 	add.w	r9, r4, r3
 800e90c:	f000 f94c 	bl	800eba8 <_sbrk_r>
 800e910:	4581      	cmp	r9, r0
 800e912:	d142      	bne.n	800e99a <_malloc_r+0xea>
 800e914:	6821      	ldr	r1, [r4, #0]
 800e916:	1a6d      	subs	r5, r5, r1
 800e918:	4629      	mov	r1, r5
 800e91a:	4630      	mov	r0, r6
 800e91c:	f7ff ffa6 	bl	800e86c <sbrk_aligned>
 800e920:	3001      	adds	r0, #1
 800e922:	d03a      	beq.n	800e99a <_malloc_r+0xea>
 800e924:	6823      	ldr	r3, [r4, #0]
 800e926:	442b      	add	r3, r5
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	f8d8 3000 	ldr.w	r3, [r8]
 800e92e:	685a      	ldr	r2, [r3, #4]
 800e930:	bb62      	cbnz	r2, 800e98c <_malloc_r+0xdc>
 800e932:	f8c8 7000 	str.w	r7, [r8]
 800e936:	e00f      	b.n	800e958 <_malloc_r+0xa8>
 800e938:	6822      	ldr	r2, [r4, #0]
 800e93a:	1b52      	subs	r2, r2, r5
 800e93c:	d420      	bmi.n	800e980 <_malloc_r+0xd0>
 800e93e:	2a0b      	cmp	r2, #11
 800e940:	d917      	bls.n	800e972 <_malloc_r+0xc2>
 800e942:	1961      	adds	r1, r4, r5
 800e944:	42a3      	cmp	r3, r4
 800e946:	6025      	str	r5, [r4, #0]
 800e948:	bf18      	it	ne
 800e94a:	6059      	strne	r1, [r3, #4]
 800e94c:	6863      	ldr	r3, [r4, #4]
 800e94e:	bf08      	it	eq
 800e950:	f8c8 1000 	streq.w	r1, [r8]
 800e954:	5162      	str	r2, [r4, r5]
 800e956:	604b      	str	r3, [r1, #4]
 800e958:	4630      	mov	r0, r6
 800e95a:	f000 f82f 	bl	800e9bc <__malloc_unlock>
 800e95e:	f104 000b 	add.w	r0, r4, #11
 800e962:	1d23      	adds	r3, r4, #4
 800e964:	f020 0007 	bic.w	r0, r0, #7
 800e968:	1ac2      	subs	r2, r0, r3
 800e96a:	bf1c      	itt	ne
 800e96c:	1a1b      	subne	r3, r3, r0
 800e96e:	50a3      	strne	r3, [r4, r2]
 800e970:	e7af      	b.n	800e8d2 <_malloc_r+0x22>
 800e972:	6862      	ldr	r2, [r4, #4]
 800e974:	42a3      	cmp	r3, r4
 800e976:	bf0c      	ite	eq
 800e978:	f8c8 2000 	streq.w	r2, [r8]
 800e97c:	605a      	strne	r2, [r3, #4]
 800e97e:	e7eb      	b.n	800e958 <_malloc_r+0xa8>
 800e980:	4623      	mov	r3, r4
 800e982:	6864      	ldr	r4, [r4, #4]
 800e984:	e7ae      	b.n	800e8e4 <_malloc_r+0x34>
 800e986:	463c      	mov	r4, r7
 800e988:	687f      	ldr	r7, [r7, #4]
 800e98a:	e7b6      	b.n	800e8fa <_malloc_r+0x4a>
 800e98c:	461a      	mov	r2, r3
 800e98e:	685b      	ldr	r3, [r3, #4]
 800e990:	42a3      	cmp	r3, r4
 800e992:	d1fb      	bne.n	800e98c <_malloc_r+0xdc>
 800e994:	2300      	movs	r3, #0
 800e996:	6053      	str	r3, [r2, #4]
 800e998:	e7de      	b.n	800e958 <_malloc_r+0xa8>
 800e99a:	230c      	movs	r3, #12
 800e99c:	6033      	str	r3, [r6, #0]
 800e99e:	4630      	mov	r0, r6
 800e9a0:	f000 f80c 	bl	800e9bc <__malloc_unlock>
 800e9a4:	e794      	b.n	800e8d0 <_malloc_r+0x20>
 800e9a6:	6005      	str	r5, [r0, #0]
 800e9a8:	e7d6      	b.n	800e958 <_malloc_r+0xa8>
 800e9aa:	bf00      	nop
 800e9ac:	20001844 	.word	0x20001844

0800e9b0 <__malloc_lock>:
 800e9b0:	4801      	ldr	r0, [pc, #4]	@ (800e9b8 <__malloc_lock+0x8>)
 800e9b2:	f000 b933 	b.w	800ec1c <__retarget_lock_acquire_recursive>
 800e9b6:	bf00      	nop
 800e9b8:	20001984 	.word	0x20001984

0800e9bc <__malloc_unlock>:
 800e9bc:	4801      	ldr	r0, [pc, #4]	@ (800e9c4 <__malloc_unlock+0x8>)
 800e9be:	f000 b92e 	b.w	800ec1e <__retarget_lock_release_recursive>
 800e9c2:	bf00      	nop
 800e9c4:	20001984 	.word	0x20001984

0800e9c8 <__utoa>:
 800e9c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9ca:	4c1f      	ldr	r4, [pc, #124]	@ (800ea48 <__utoa+0x80>)
 800e9cc:	b08b      	sub	sp, #44	@ 0x2c
 800e9ce:	4605      	mov	r5, r0
 800e9d0:	460b      	mov	r3, r1
 800e9d2:	466e      	mov	r6, sp
 800e9d4:	f104 0c20 	add.w	ip, r4, #32
 800e9d8:	6820      	ldr	r0, [r4, #0]
 800e9da:	6861      	ldr	r1, [r4, #4]
 800e9dc:	4637      	mov	r7, r6
 800e9de:	c703      	stmia	r7!, {r0, r1}
 800e9e0:	3408      	adds	r4, #8
 800e9e2:	4564      	cmp	r4, ip
 800e9e4:	463e      	mov	r6, r7
 800e9e6:	d1f7      	bne.n	800e9d8 <__utoa+0x10>
 800e9e8:	7921      	ldrb	r1, [r4, #4]
 800e9ea:	7139      	strb	r1, [r7, #4]
 800e9ec:	1e91      	subs	r1, r2, #2
 800e9ee:	6820      	ldr	r0, [r4, #0]
 800e9f0:	6038      	str	r0, [r7, #0]
 800e9f2:	2922      	cmp	r1, #34	@ 0x22
 800e9f4:	f04f 0100 	mov.w	r1, #0
 800e9f8:	d904      	bls.n	800ea04 <__utoa+0x3c>
 800e9fa:	7019      	strb	r1, [r3, #0]
 800e9fc:	460b      	mov	r3, r1
 800e9fe:	4618      	mov	r0, r3
 800ea00:	b00b      	add	sp, #44	@ 0x2c
 800ea02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea04:	1e58      	subs	r0, r3, #1
 800ea06:	4684      	mov	ip, r0
 800ea08:	fbb5 f7f2 	udiv	r7, r5, r2
 800ea0c:	fb02 5617 	mls	r6, r2, r7, r5
 800ea10:	3628      	adds	r6, #40	@ 0x28
 800ea12:	446e      	add	r6, sp
 800ea14:	460c      	mov	r4, r1
 800ea16:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800ea1a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800ea1e:	462e      	mov	r6, r5
 800ea20:	42b2      	cmp	r2, r6
 800ea22:	f101 0101 	add.w	r1, r1, #1
 800ea26:	463d      	mov	r5, r7
 800ea28:	d9ee      	bls.n	800ea08 <__utoa+0x40>
 800ea2a:	2200      	movs	r2, #0
 800ea2c:	545a      	strb	r2, [r3, r1]
 800ea2e:	1919      	adds	r1, r3, r4
 800ea30:	1aa5      	subs	r5, r4, r2
 800ea32:	42aa      	cmp	r2, r5
 800ea34:	dae3      	bge.n	800e9fe <__utoa+0x36>
 800ea36:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800ea3a:	780e      	ldrb	r6, [r1, #0]
 800ea3c:	7006      	strb	r6, [r0, #0]
 800ea3e:	3201      	adds	r2, #1
 800ea40:	f801 5901 	strb.w	r5, [r1], #-1
 800ea44:	e7f4      	b.n	800ea30 <__utoa+0x68>
 800ea46:	bf00      	nop
 800ea48:	08016f98 	.word	0x08016f98

0800ea4c <_vsniprintf_r>:
 800ea4c:	b530      	push	{r4, r5, lr}
 800ea4e:	4614      	mov	r4, r2
 800ea50:	2c00      	cmp	r4, #0
 800ea52:	b09b      	sub	sp, #108	@ 0x6c
 800ea54:	4605      	mov	r5, r0
 800ea56:	461a      	mov	r2, r3
 800ea58:	da05      	bge.n	800ea66 <_vsniprintf_r+0x1a>
 800ea5a:	238b      	movs	r3, #139	@ 0x8b
 800ea5c:	6003      	str	r3, [r0, #0]
 800ea5e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea62:	b01b      	add	sp, #108	@ 0x6c
 800ea64:	bd30      	pop	{r4, r5, pc}
 800ea66:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ea6a:	f8ad 300c 	strh.w	r3, [sp, #12]
 800ea6e:	f04f 0300 	mov.w	r3, #0
 800ea72:	9319      	str	r3, [sp, #100]	@ 0x64
 800ea74:	bf14      	ite	ne
 800ea76:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800ea7a:	4623      	moveq	r3, r4
 800ea7c:	9302      	str	r3, [sp, #8]
 800ea7e:	9305      	str	r3, [sp, #20]
 800ea80:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800ea84:	9100      	str	r1, [sp, #0]
 800ea86:	9104      	str	r1, [sp, #16]
 800ea88:	f8ad 300e 	strh.w	r3, [sp, #14]
 800ea8c:	4669      	mov	r1, sp
 800ea8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800ea90:	f000 f97a 	bl	800ed88 <_svfiprintf_r>
 800ea94:	1c43      	adds	r3, r0, #1
 800ea96:	bfbc      	itt	lt
 800ea98:	238b      	movlt	r3, #139	@ 0x8b
 800ea9a:	602b      	strlt	r3, [r5, #0]
 800ea9c:	2c00      	cmp	r4, #0
 800ea9e:	d0e0      	beq.n	800ea62 <_vsniprintf_r+0x16>
 800eaa0:	9b00      	ldr	r3, [sp, #0]
 800eaa2:	2200      	movs	r2, #0
 800eaa4:	701a      	strb	r2, [r3, #0]
 800eaa6:	e7dc      	b.n	800ea62 <_vsniprintf_r+0x16>

0800eaa8 <vsniprintf>:
 800eaa8:	b507      	push	{r0, r1, r2, lr}
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	4613      	mov	r3, r2
 800eaae:	460a      	mov	r2, r1
 800eab0:	4601      	mov	r1, r0
 800eab2:	4803      	ldr	r0, [pc, #12]	@ (800eac0 <vsniprintf+0x18>)
 800eab4:	6800      	ldr	r0, [r0, #0]
 800eab6:	f7ff ffc9 	bl	800ea4c <_vsniprintf_r>
 800eaba:	b003      	add	sp, #12
 800eabc:	f85d fb04 	ldr.w	pc, [sp], #4
 800eac0:	2000013c 	.word	0x2000013c

0800eac4 <memset>:
 800eac4:	4402      	add	r2, r0
 800eac6:	4603      	mov	r3, r0
 800eac8:	4293      	cmp	r3, r2
 800eaca:	d100      	bne.n	800eace <memset+0xa>
 800eacc:	4770      	bx	lr
 800eace:	f803 1b01 	strb.w	r1, [r3], #1
 800ead2:	e7f9      	b.n	800eac8 <memset+0x4>

0800ead4 <strncat>:
 800ead4:	b530      	push	{r4, r5, lr}
 800ead6:	4604      	mov	r4, r0
 800ead8:	7825      	ldrb	r5, [r4, #0]
 800eada:	4623      	mov	r3, r4
 800eadc:	3401      	adds	r4, #1
 800eade:	2d00      	cmp	r5, #0
 800eae0:	d1fa      	bne.n	800ead8 <strncat+0x4>
 800eae2:	3a01      	subs	r2, #1
 800eae4:	d304      	bcc.n	800eaf0 <strncat+0x1c>
 800eae6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eaea:	f803 4b01 	strb.w	r4, [r3], #1
 800eaee:	b904      	cbnz	r4, 800eaf2 <strncat+0x1e>
 800eaf0:	bd30      	pop	{r4, r5, pc}
 800eaf2:	2a00      	cmp	r2, #0
 800eaf4:	d1f5      	bne.n	800eae2 <strncat+0xe>
 800eaf6:	701a      	strb	r2, [r3, #0]
 800eaf8:	e7f3      	b.n	800eae2 <strncat+0xe>

0800eafa <strncpy>:
 800eafa:	b510      	push	{r4, lr}
 800eafc:	3901      	subs	r1, #1
 800eafe:	4603      	mov	r3, r0
 800eb00:	b132      	cbz	r2, 800eb10 <strncpy+0x16>
 800eb02:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800eb06:	f803 4b01 	strb.w	r4, [r3], #1
 800eb0a:	3a01      	subs	r2, #1
 800eb0c:	2c00      	cmp	r4, #0
 800eb0e:	d1f7      	bne.n	800eb00 <strncpy+0x6>
 800eb10:	441a      	add	r2, r3
 800eb12:	2100      	movs	r1, #0
 800eb14:	4293      	cmp	r3, r2
 800eb16:	d100      	bne.n	800eb1a <strncpy+0x20>
 800eb18:	bd10      	pop	{r4, pc}
 800eb1a:	f803 1b01 	strb.w	r1, [r3], #1
 800eb1e:	e7f9      	b.n	800eb14 <strncpy+0x1a>

0800eb20 <_raise_r>:
 800eb20:	291f      	cmp	r1, #31
 800eb22:	b538      	push	{r3, r4, r5, lr}
 800eb24:	4605      	mov	r5, r0
 800eb26:	460c      	mov	r4, r1
 800eb28:	d904      	bls.n	800eb34 <_raise_r+0x14>
 800eb2a:	2316      	movs	r3, #22
 800eb2c:	6003      	str	r3, [r0, #0]
 800eb2e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eb32:	bd38      	pop	{r3, r4, r5, pc}
 800eb34:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800eb36:	b112      	cbz	r2, 800eb3e <_raise_r+0x1e>
 800eb38:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800eb3c:	b94b      	cbnz	r3, 800eb52 <_raise_r+0x32>
 800eb3e:	4628      	mov	r0, r5
 800eb40:	f000 f830 	bl	800eba4 <_getpid_r>
 800eb44:	4622      	mov	r2, r4
 800eb46:	4601      	mov	r1, r0
 800eb48:	4628      	mov	r0, r5
 800eb4a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800eb4e:	f000 b817 	b.w	800eb80 <_kill_r>
 800eb52:	2b01      	cmp	r3, #1
 800eb54:	d00a      	beq.n	800eb6c <_raise_r+0x4c>
 800eb56:	1c59      	adds	r1, r3, #1
 800eb58:	d103      	bne.n	800eb62 <_raise_r+0x42>
 800eb5a:	2316      	movs	r3, #22
 800eb5c:	6003      	str	r3, [r0, #0]
 800eb5e:	2001      	movs	r0, #1
 800eb60:	e7e7      	b.n	800eb32 <_raise_r+0x12>
 800eb62:	2100      	movs	r1, #0
 800eb64:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800eb68:	4620      	mov	r0, r4
 800eb6a:	4798      	blx	r3
 800eb6c:	2000      	movs	r0, #0
 800eb6e:	e7e0      	b.n	800eb32 <_raise_r+0x12>

0800eb70 <raise>:
 800eb70:	4b02      	ldr	r3, [pc, #8]	@ (800eb7c <raise+0xc>)
 800eb72:	4601      	mov	r1, r0
 800eb74:	6818      	ldr	r0, [r3, #0]
 800eb76:	f7ff bfd3 	b.w	800eb20 <_raise_r>
 800eb7a:	bf00      	nop
 800eb7c:	2000013c 	.word	0x2000013c

0800eb80 <_kill_r>:
 800eb80:	b538      	push	{r3, r4, r5, lr}
 800eb82:	4d07      	ldr	r5, [pc, #28]	@ (800eba0 <_kill_r+0x20>)
 800eb84:	2300      	movs	r3, #0
 800eb86:	4604      	mov	r4, r0
 800eb88:	4608      	mov	r0, r1
 800eb8a:	4611      	mov	r1, r2
 800eb8c:	602b      	str	r3, [r5, #0]
 800eb8e:	f7f3 fabd 	bl	800210c <_kill>
 800eb92:	1c43      	adds	r3, r0, #1
 800eb94:	d102      	bne.n	800eb9c <_kill_r+0x1c>
 800eb96:	682b      	ldr	r3, [r5, #0]
 800eb98:	b103      	cbz	r3, 800eb9c <_kill_r+0x1c>
 800eb9a:	6023      	str	r3, [r4, #0]
 800eb9c:	bd38      	pop	{r3, r4, r5, pc}
 800eb9e:	bf00      	nop
 800eba0:	20001980 	.word	0x20001980

0800eba4 <_getpid_r>:
 800eba4:	f7f3 baaa 	b.w	80020fc <_getpid>

0800eba8 <_sbrk_r>:
 800eba8:	b538      	push	{r3, r4, r5, lr}
 800ebaa:	4d06      	ldr	r5, [pc, #24]	@ (800ebc4 <_sbrk_r+0x1c>)
 800ebac:	2300      	movs	r3, #0
 800ebae:	4604      	mov	r4, r0
 800ebb0:	4608      	mov	r0, r1
 800ebb2:	602b      	str	r3, [r5, #0]
 800ebb4:	f7f3 fac6 	bl	8002144 <_sbrk>
 800ebb8:	1c43      	adds	r3, r0, #1
 800ebba:	d102      	bne.n	800ebc2 <_sbrk_r+0x1a>
 800ebbc:	682b      	ldr	r3, [r5, #0]
 800ebbe:	b103      	cbz	r3, 800ebc2 <_sbrk_r+0x1a>
 800ebc0:	6023      	str	r3, [r4, #0]
 800ebc2:	bd38      	pop	{r3, r4, r5, pc}
 800ebc4:	20001980 	.word	0x20001980

0800ebc8 <__errno>:
 800ebc8:	4b01      	ldr	r3, [pc, #4]	@ (800ebd0 <__errno+0x8>)
 800ebca:	6818      	ldr	r0, [r3, #0]
 800ebcc:	4770      	bx	lr
 800ebce:	bf00      	nop
 800ebd0:	2000013c 	.word	0x2000013c

0800ebd4 <__libc_init_array>:
 800ebd4:	b570      	push	{r4, r5, r6, lr}
 800ebd6:	4d0d      	ldr	r5, [pc, #52]	@ (800ec0c <__libc_init_array+0x38>)
 800ebd8:	4c0d      	ldr	r4, [pc, #52]	@ (800ec10 <__libc_init_array+0x3c>)
 800ebda:	1b64      	subs	r4, r4, r5
 800ebdc:	10a4      	asrs	r4, r4, #2
 800ebde:	2600      	movs	r6, #0
 800ebe0:	42a6      	cmp	r6, r4
 800ebe2:	d109      	bne.n	800ebf8 <__libc_init_array+0x24>
 800ebe4:	4d0b      	ldr	r5, [pc, #44]	@ (800ec14 <__libc_init_array+0x40>)
 800ebe6:	4c0c      	ldr	r4, [pc, #48]	@ (800ec18 <__libc_init_array+0x44>)
 800ebe8:	f000 fba6 	bl	800f338 <_init>
 800ebec:	1b64      	subs	r4, r4, r5
 800ebee:	10a4      	asrs	r4, r4, #2
 800ebf0:	2600      	movs	r6, #0
 800ebf2:	42a6      	cmp	r6, r4
 800ebf4:	d105      	bne.n	800ec02 <__libc_init_array+0x2e>
 800ebf6:	bd70      	pop	{r4, r5, r6, pc}
 800ebf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebfc:	4798      	blx	r3
 800ebfe:	3601      	adds	r6, #1
 800ec00:	e7ee      	b.n	800ebe0 <__libc_init_array+0xc>
 800ec02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ec06:	4798      	blx	r3
 800ec08:	3601      	adds	r6, #1
 800ec0a:	e7f2      	b.n	800ebf2 <__libc_init_array+0x1e>
 800ec0c:	08016ff8 	.word	0x08016ff8
 800ec10:	08016ff8 	.word	0x08016ff8
 800ec14:	08016ff8 	.word	0x08016ff8
 800ec18:	08017004 	.word	0x08017004

0800ec1c <__retarget_lock_acquire_recursive>:
 800ec1c:	4770      	bx	lr

0800ec1e <__retarget_lock_release_recursive>:
 800ec1e:	4770      	bx	lr

0800ec20 <memcpy>:
 800ec20:	440a      	add	r2, r1
 800ec22:	4291      	cmp	r1, r2
 800ec24:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ec28:	d100      	bne.n	800ec2c <memcpy+0xc>
 800ec2a:	4770      	bx	lr
 800ec2c:	b510      	push	{r4, lr}
 800ec2e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ec32:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ec36:	4291      	cmp	r1, r2
 800ec38:	d1f9      	bne.n	800ec2e <memcpy+0xe>
 800ec3a:	bd10      	pop	{r4, pc}

0800ec3c <_free_r>:
 800ec3c:	b538      	push	{r3, r4, r5, lr}
 800ec3e:	4605      	mov	r5, r0
 800ec40:	2900      	cmp	r1, #0
 800ec42:	d041      	beq.n	800ecc8 <_free_r+0x8c>
 800ec44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ec48:	1f0c      	subs	r4, r1, #4
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	bfb8      	it	lt
 800ec4e:	18e4      	addlt	r4, r4, r3
 800ec50:	f7ff feae 	bl	800e9b0 <__malloc_lock>
 800ec54:	4a1d      	ldr	r2, [pc, #116]	@ (800eccc <_free_r+0x90>)
 800ec56:	6813      	ldr	r3, [r2, #0]
 800ec58:	b933      	cbnz	r3, 800ec68 <_free_r+0x2c>
 800ec5a:	6063      	str	r3, [r4, #4]
 800ec5c:	6014      	str	r4, [r2, #0]
 800ec5e:	4628      	mov	r0, r5
 800ec60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec64:	f7ff beaa 	b.w	800e9bc <__malloc_unlock>
 800ec68:	42a3      	cmp	r3, r4
 800ec6a:	d908      	bls.n	800ec7e <_free_r+0x42>
 800ec6c:	6820      	ldr	r0, [r4, #0]
 800ec6e:	1821      	adds	r1, r4, r0
 800ec70:	428b      	cmp	r3, r1
 800ec72:	bf01      	itttt	eq
 800ec74:	6819      	ldreq	r1, [r3, #0]
 800ec76:	685b      	ldreq	r3, [r3, #4]
 800ec78:	1809      	addeq	r1, r1, r0
 800ec7a:	6021      	streq	r1, [r4, #0]
 800ec7c:	e7ed      	b.n	800ec5a <_free_r+0x1e>
 800ec7e:	461a      	mov	r2, r3
 800ec80:	685b      	ldr	r3, [r3, #4]
 800ec82:	b10b      	cbz	r3, 800ec88 <_free_r+0x4c>
 800ec84:	42a3      	cmp	r3, r4
 800ec86:	d9fa      	bls.n	800ec7e <_free_r+0x42>
 800ec88:	6811      	ldr	r1, [r2, #0]
 800ec8a:	1850      	adds	r0, r2, r1
 800ec8c:	42a0      	cmp	r0, r4
 800ec8e:	d10b      	bne.n	800eca8 <_free_r+0x6c>
 800ec90:	6820      	ldr	r0, [r4, #0]
 800ec92:	4401      	add	r1, r0
 800ec94:	1850      	adds	r0, r2, r1
 800ec96:	4283      	cmp	r3, r0
 800ec98:	6011      	str	r1, [r2, #0]
 800ec9a:	d1e0      	bne.n	800ec5e <_free_r+0x22>
 800ec9c:	6818      	ldr	r0, [r3, #0]
 800ec9e:	685b      	ldr	r3, [r3, #4]
 800eca0:	6053      	str	r3, [r2, #4]
 800eca2:	4408      	add	r0, r1
 800eca4:	6010      	str	r0, [r2, #0]
 800eca6:	e7da      	b.n	800ec5e <_free_r+0x22>
 800eca8:	d902      	bls.n	800ecb0 <_free_r+0x74>
 800ecaa:	230c      	movs	r3, #12
 800ecac:	602b      	str	r3, [r5, #0]
 800ecae:	e7d6      	b.n	800ec5e <_free_r+0x22>
 800ecb0:	6820      	ldr	r0, [r4, #0]
 800ecb2:	1821      	adds	r1, r4, r0
 800ecb4:	428b      	cmp	r3, r1
 800ecb6:	bf04      	itt	eq
 800ecb8:	6819      	ldreq	r1, [r3, #0]
 800ecba:	685b      	ldreq	r3, [r3, #4]
 800ecbc:	6063      	str	r3, [r4, #4]
 800ecbe:	bf04      	itt	eq
 800ecc0:	1809      	addeq	r1, r1, r0
 800ecc2:	6021      	streq	r1, [r4, #0]
 800ecc4:	6054      	str	r4, [r2, #4]
 800ecc6:	e7ca      	b.n	800ec5e <_free_r+0x22>
 800ecc8:	bd38      	pop	{r3, r4, r5, pc}
 800ecca:	bf00      	nop
 800eccc:	20001844 	.word	0x20001844

0800ecd0 <__ssputs_r>:
 800ecd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ecd4:	688e      	ldr	r6, [r1, #8]
 800ecd6:	461f      	mov	r7, r3
 800ecd8:	42be      	cmp	r6, r7
 800ecda:	680b      	ldr	r3, [r1, #0]
 800ecdc:	4682      	mov	sl, r0
 800ecde:	460c      	mov	r4, r1
 800ece0:	4690      	mov	r8, r2
 800ece2:	d82d      	bhi.n	800ed40 <__ssputs_r+0x70>
 800ece4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ece8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ecec:	d026      	beq.n	800ed3c <__ssputs_r+0x6c>
 800ecee:	6965      	ldr	r5, [r4, #20]
 800ecf0:	6909      	ldr	r1, [r1, #16]
 800ecf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ecf6:	eba3 0901 	sub.w	r9, r3, r1
 800ecfa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ecfe:	1c7b      	adds	r3, r7, #1
 800ed00:	444b      	add	r3, r9
 800ed02:	106d      	asrs	r5, r5, #1
 800ed04:	429d      	cmp	r5, r3
 800ed06:	bf38      	it	cc
 800ed08:	461d      	movcc	r5, r3
 800ed0a:	0553      	lsls	r3, r2, #21
 800ed0c:	d527      	bpl.n	800ed5e <__ssputs_r+0x8e>
 800ed0e:	4629      	mov	r1, r5
 800ed10:	f7ff fdce 	bl	800e8b0 <_malloc_r>
 800ed14:	4606      	mov	r6, r0
 800ed16:	b360      	cbz	r0, 800ed72 <__ssputs_r+0xa2>
 800ed18:	6921      	ldr	r1, [r4, #16]
 800ed1a:	464a      	mov	r2, r9
 800ed1c:	f7ff ff80 	bl	800ec20 <memcpy>
 800ed20:	89a3      	ldrh	r3, [r4, #12]
 800ed22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ed26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ed2a:	81a3      	strh	r3, [r4, #12]
 800ed2c:	6126      	str	r6, [r4, #16]
 800ed2e:	6165      	str	r5, [r4, #20]
 800ed30:	444e      	add	r6, r9
 800ed32:	eba5 0509 	sub.w	r5, r5, r9
 800ed36:	6026      	str	r6, [r4, #0]
 800ed38:	60a5      	str	r5, [r4, #8]
 800ed3a:	463e      	mov	r6, r7
 800ed3c:	42be      	cmp	r6, r7
 800ed3e:	d900      	bls.n	800ed42 <__ssputs_r+0x72>
 800ed40:	463e      	mov	r6, r7
 800ed42:	6820      	ldr	r0, [r4, #0]
 800ed44:	4632      	mov	r2, r6
 800ed46:	4641      	mov	r1, r8
 800ed48:	f000 faa6 	bl	800f298 <memmove>
 800ed4c:	68a3      	ldr	r3, [r4, #8]
 800ed4e:	1b9b      	subs	r3, r3, r6
 800ed50:	60a3      	str	r3, [r4, #8]
 800ed52:	6823      	ldr	r3, [r4, #0]
 800ed54:	4433      	add	r3, r6
 800ed56:	6023      	str	r3, [r4, #0]
 800ed58:	2000      	movs	r0, #0
 800ed5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ed5e:	462a      	mov	r2, r5
 800ed60:	f000 fab4 	bl	800f2cc <_realloc_r>
 800ed64:	4606      	mov	r6, r0
 800ed66:	2800      	cmp	r0, #0
 800ed68:	d1e0      	bne.n	800ed2c <__ssputs_r+0x5c>
 800ed6a:	6921      	ldr	r1, [r4, #16]
 800ed6c:	4650      	mov	r0, sl
 800ed6e:	f7ff ff65 	bl	800ec3c <_free_r>
 800ed72:	230c      	movs	r3, #12
 800ed74:	f8ca 3000 	str.w	r3, [sl]
 800ed78:	89a3      	ldrh	r3, [r4, #12]
 800ed7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed7e:	81a3      	strh	r3, [r4, #12]
 800ed80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed84:	e7e9      	b.n	800ed5a <__ssputs_r+0x8a>
	...

0800ed88 <_svfiprintf_r>:
 800ed88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed8c:	4698      	mov	r8, r3
 800ed8e:	898b      	ldrh	r3, [r1, #12]
 800ed90:	061b      	lsls	r3, r3, #24
 800ed92:	b09d      	sub	sp, #116	@ 0x74
 800ed94:	4607      	mov	r7, r0
 800ed96:	460d      	mov	r5, r1
 800ed98:	4614      	mov	r4, r2
 800ed9a:	d510      	bpl.n	800edbe <_svfiprintf_r+0x36>
 800ed9c:	690b      	ldr	r3, [r1, #16]
 800ed9e:	b973      	cbnz	r3, 800edbe <_svfiprintf_r+0x36>
 800eda0:	2140      	movs	r1, #64	@ 0x40
 800eda2:	f7ff fd85 	bl	800e8b0 <_malloc_r>
 800eda6:	6028      	str	r0, [r5, #0]
 800eda8:	6128      	str	r0, [r5, #16]
 800edaa:	b930      	cbnz	r0, 800edba <_svfiprintf_r+0x32>
 800edac:	230c      	movs	r3, #12
 800edae:	603b      	str	r3, [r7, #0]
 800edb0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800edb4:	b01d      	add	sp, #116	@ 0x74
 800edb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edba:	2340      	movs	r3, #64	@ 0x40
 800edbc:	616b      	str	r3, [r5, #20]
 800edbe:	2300      	movs	r3, #0
 800edc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800edc2:	2320      	movs	r3, #32
 800edc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800edc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800edcc:	2330      	movs	r3, #48	@ 0x30
 800edce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ef6c <_svfiprintf_r+0x1e4>
 800edd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800edd6:	f04f 0901 	mov.w	r9, #1
 800edda:	4623      	mov	r3, r4
 800eddc:	469a      	mov	sl, r3
 800edde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ede2:	b10a      	cbz	r2, 800ede8 <_svfiprintf_r+0x60>
 800ede4:	2a25      	cmp	r2, #37	@ 0x25
 800ede6:	d1f9      	bne.n	800eddc <_svfiprintf_r+0x54>
 800ede8:	ebba 0b04 	subs.w	fp, sl, r4
 800edec:	d00b      	beq.n	800ee06 <_svfiprintf_r+0x7e>
 800edee:	465b      	mov	r3, fp
 800edf0:	4622      	mov	r2, r4
 800edf2:	4629      	mov	r1, r5
 800edf4:	4638      	mov	r0, r7
 800edf6:	f7ff ff6b 	bl	800ecd0 <__ssputs_r>
 800edfa:	3001      	adds	r0, #1
 800edfc:	f000 80a7 	beq.w	800ef4e <_svfiprintf_r+0x1c6>
 800ee00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee02:	445a      	add	r2, fp
 800ee04:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee06:	f89a 3000 	ldrb.w	r3, [sl]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	f000 809f 	beq.w	800ef4e <_svfiprintf_r+0x1c6>
 800ee10:	2300      	movs	r3, #0
 800ee12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ee16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ee1a:	f10a 0a01 	add.w	sl, sl, #1
 800ee1e:	9304      	str	r3, [sp, #16]
 800ee20:	9307      	str	r3, [sp, #28]
 800ee22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ee26:	931a      	str	r3, [sp, #104]	@ 0x68
 800ee28:	4654      	mov	r4, sl
 800ee2a:	2205      	movs	r2, #5
 800ee2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee30:	484e      	ldr	r0, [pc, #312]	@ (800ef6c <_svfiprintf_r+0x1e4>)
 800ee32:	f7f1 f9dd 	bl	80001f0 <memchr>
 800ee36:	9a04      	ldr	r2, [sp, #16]
 800ee38:	b9d8      	cbnz	r0, 800ee72 <_svfiprintf_r+0xea>
 800ee3a:	06d0      	lsls	r0, r2, #27
 800ee3c:	bf44      	itt	mi
 800ee3e:	2320      	movmi	r3, #32
 800ee40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee44:	0711      	lsls	r1, r2, #28
 800ee46:	bf44      	itt	mi
 800ee48:	232b      	movmi	r3, #43	@ 0x2b
 800ee4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ee4e:	f89a 3000 	ldrb.w	r3, [sl]
 800ee52:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee54:	d015      	beq.n	800ee82 <_svfiprintf_r+0xfa>
 800ee56:	9a07      	ldr	r2, [sp, #28]
 800ee58:	4654      	mov	r4, sl
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	f04f 0c0a 	mov.w	ip, #10
 800ee60:	4621      	mov	r1, r4
 800ee62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ee66:	3b30      	subs	r3, #48	@ 0x30
 800ee68:	2b09      	cmp	r3, #9
 800ee6a:	d94b      	bls.n	800ef04 <_svfiprintf_r+0x17c>
 800ee6c:	b1b0      	cbz	r0, 800ee9c <_svfiprintf_r+0x114>
 800ee6e:	9207      	str	r2, [sp, #28]
 800ee70:	e014      	b.n	800ee9c <_svfiprintf_r+0x114>
 800ee72:	eba0 0308 	sub.w	r3, r0, r8
 800ee76:	fa09 f303 	lsl.w	r3, r9, r3
 800ee7a:	4313      	orrs	r3, r2
 800ee7c:	9304      	str	r3, [sp, #16]
 800ee7e:	46a2      	mov	sl, r4
 800ee80:	e7d2      	b.n	800ee28 <_svfiprintf_r+0xa0>
 800ee82:	9b03      	ldr	r3, [sp, #12]
 800ee84:	1d19      	adds	r1, r3, #4
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	9103      	str	r1, [sp, #12]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	bfbb      	ittet	lt
 800ee8e:	425b      	neglt	r3, r3
 800ee90:	f042 0202 	orrlt.w	r2, r2, #2
 800ee94:	9307      	strge	r3, [sp, #28]
 800ee96:	9307      	strlt	r3, [sp, #28]
 800ee98:	bfb8      	it	lt
 800ee9a:	9204      	strlt	r2, [sp, #16]
 800ee9c:	7823      	ldrb	r3, [r4, #0]
 800ee9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800eea0:	d10a      	bne.n	800eeb8 <_svfiprintf_r+0x130>
 800eea2:	7863      	ldrb	r3, [r4, #1]
 800eea4:	2b2a      	cmp	r3, #42	@ 0x2a
 800eea6:	d132      	bne.n	800ef0e <_svfiprintf_r+0x186>
 800eea8:	9b03      	ldr	r3, [sp, #12]
 800eeaa:	1d1a      	adds	r2, r3, #4
 800eeac:	681b      	ldr	r3, [r3, #0]
 800eeae:	9203      	str	r2, [sp, #12]
 800eeb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eeb4:	3402      	adds	r4, #2
 800eeb6:	9305      	str	r3, [sp, #20]
 800eeb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ef7c <_svfiprintf_r+0x1f4>
 800eebc:	7821      	ldrb	r1, [r4, #0]
 800eebe:	2203      	movs	r2, #3
 800eec0:	4650      	mov	r0, sl
 800eec2:	f7f1 f995 	bl	80001f0 <memchr>
 800eec6:	b138      	cbz	r0, 800eed8 <_svfiprintf_r+0x150>
 800eec8:	9b04      	ldr	r3, [sp, #16]
 800eeca:	eba0 000a 	sub.w	r0, r0, sl
 800eece:	2240      	movs	r2, #64	@ 0x40
 800eed0:	4082      	lsls	r2, r0
 800eed2:	4313      	orrs	r3, r2
 800eed4:	3401      	adds	r4, #1
 800eed6:	9304      	str	r3, [sp, #16]
 800eed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eedc:	4824      	ldr	r0, [pc, #144]	@ (800ef70 <_svfiprintf_r+0x1e8>)
 800eede:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eee2:	2206      	movs	r2, #6
 800eee4:	f7f1 f984 	bl	80001f0 <memchr>
 800eee8:	2800      	cmp	r0, #0
 800eeea:	d036      	beq.n	800ef5a <_svfiprintf_r+0x1d2>
 800eeec:	4b21      	ldr	r3, [pc, #132]	@ (800ef74 <_svfiprintf_r+0x1ec>)
 800eeee:	bb1b      	cbnz	r3, 800ef38 <_svfiprintf_r+0x1b0>
 800eef0:	9b03      	ldr	r3, [sp, #12]
 800eef2:	3307      	adds	r3, #7
 800eef4:	f023 0307 	bic.w	r3, r3, #7
 800eef8:	3308      	adds	r3, #8
 800eefa:	9303      	str	r3, [sp, #12]
 800eefc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eefe:	4433      	add	r3, r6
 800ef00:	9309      	str	r3, [sp, #36]	@ 0x24
 800ef02:	e76a      	b.n	800edda <_svfiprintf_r+0x52>
 800ef04:	fb0c 3202 	mla	r2, ip, r2, r3
 800ef08:	460c      	mov	r4, r1
 800ef0a:	2001      	movs	r0, #1
 800ef0c:	e7a8      	b.n	800ee60 <_svfiprintf_r+0xd8>
 800ef0e:	2300      	movs	r3, #0
 800ef10:	3401      	adds	r4, #1
 800ef12:	9305      	str	r3, [sp, #20]
 800ef14:	4619      	mov	r1, r3
 800ef16:	f04f 0c0a 	mov.w	ip, #10
 800ef1a:	4620      	mov	r0, r4
 800ef1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ef20:	3a30      	subs	r2, #48	@ 0x30
 800ef22:	2a09      	cmp	r2, #9
 800ef24:	d903      	bls.n	800ef2e <_svfiprintf_r+0x1a6>
 800ef26:	2b00      	cmp	r3, #0
 800ef28:	d0c6      	beq.n	800eeb8 <_svfiprintf_r+0x130>
 800ef2a:	9105      	str	r1, [sp, #20]
 800ef2c:	e7c4      	b.n	800eeb8 <_svfiprintf_r+0x130>
 800ef2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ef32:	4604      	mov	r4, r0
 800ef34:	2301      	movs	r3, #1
 800ef36:	e7f0      	b.n	800ef1a <_svfiprintf_r+0x192>
 800ef38:	ab03      	add	r3, sp, #12
 800ef3a:	9300      	str	r3, [sp, #0]
 800ef3c:	462a      	mov	r2, r5
 800ef3e:	4b0e      	ldr	r3, [pc, #56]	@ (800ef78 <_svfiprintf_r+0x1f0>)
 800ef40:	a904      	add	r1, sp, #16
 800ef42:	4638      	mov	r0, r7
 800ef44:	f3af 8000 	nop.w
 800ef48:	1c42      	adds	r2, r0, #1
 800ef4a:	4606      	mov	r6, r0
 800ef4c:	d1d6      	bne.n	800eefc <_svfiprintf_r+0x174>
 800ef4e:	89ab      	ldrh	r3, [r5, #12]
 800ef50:	065b      	lsls	r3, r3, #25
 800ef52:	f53f af2d 	bmi.w	800edb0 <_svfiprintf_r+0x28>
 800ef56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ef58:	e72c      	b.n	800edb4 <_svfiprintf_r+0x2c>
 800ef5a:	ab03      	add	r3, sp, #12
 800ef5c:	9300      	str	r3, [sp, #0]
 800ef5e:	462a      	mov	r2, r5
 800ef60:	4b05      	ldr	r3, [pc, #20]	@ (800ef78 <_svfiprintf_r+0x1f0>)
 800ef62:	a904      	add	r1, sp, #16
 800ef64:	4638      	mov	r0, r7
 800ef66:	f000 f879 	bl	800f05c <_printf_i>
 800ef6a:	e7ed      	b.n	800ef48 <_svfiprintf_r+0x1c0>
 800ef6c:	08016fbd 	.word	0x08016fbd
 800ef70:	08016fc7 	.word	0x08016fc7
 800ef74:	00000000 	.word	0x00000000
 800ef78:	0800ecd1 	.word	0x0800ecd1
 800ef7c:	08016fc3 	.word	0x08016fc3

0800ef80 <_printf_common>:
 800ef80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef84:	4616      	mov	r6, r2
 800ef86:	4698      	mov	r8, r3
 800ef88:	688a      	ldr	r2, [r1, #8]
 800ef8a:	690b      	ldr	r3, [r1, #16]
 800ef8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ef90:	4293      	cmp	r3, r2
 800ef92:	bfb8      	it	lt
 800ef94:	4613      	movlt	r3, r2
 800ef96:	6033      	str	r3, [r6, #0]
 800ef98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ef9c:	4607      	mov	r7, r0
 800ef9e:	460c      	mov	r4, r1
 800efa0:	b10a      	cbz	r2, 800efa6 <_printf_common+0x26>
 800efa2:	3301      	adds	r3, #1
 800efa4:	6033      	str	r3, [r6, #0]
 800efa6:	6823      	ldr	r3, [r4, #0]
 800efa8:	0699      	lsls	r1, r3, #26
 800efaa:	bf42      	ittt	mi
 800efac:	6833      	ldrmi	r3, [r6, #0]
 800efae:	3302      	addmi	r3, #2
 800efb0:	6033      	strmi	r3, [r6, #0]
 800efb2:	6825      	ldr	r5, [r4, #0]
 800efb4:	f015 0506 	ands.w	r5, r5, #6
 800efb8:	d106      	bne.n	800efc8 <_printf_common+0x48>
 800efba:	f104 0a19 	add.w	sl, r4, #25
 800efbe:	68e3      	ldr	r3, [r4, #12]
 800efc0:	6832      	ldr	r2, [r6, #0]
 800efc2:	1a9b      	subs	r3, r3, r2
 800efc4:	42ab      	cmp	r3, r5
 800efc6:	dc26      	bgt.n	800f016 <_printf_common+0x96>
 800efc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800efcc:	6822      	ldr	r2, [r4, #0]
 800efce:	3b00      	subs	r3, #0
 800efd0:	bf18      	it	ne
 800efd2:	2301      	movne	r3, #1
 800efd4:	0692      	lsls	r2, r2, #26
 800efd6:	d42b      	bmi.n	800f030 <_printf_common+0xb0>
 800efd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800efdc:	4641      	mov	r1, r8
 800efde:	4638      	mov	r0, r7
 800efe0:	47c8      	blx	r9
 800efe2:	3001      	adds	r0, #1
 800efe4:	d01e      	beq.n	800f024 <_printf_common+0xa4>
 800efe6:	6823      	ldr	r3, [r4, #0]
 800efe8:	6922      	ldr	r2, [r4, #16]
 800efea:	f003 0306 	and.w	r3, r3, #6
 800efee:	2b04      	cmp	r3, #4
 800eff0:	bf02      	ittt	eq
 800eff2:	68e5      	ldreq	r5, [r4, #12]
 800eff4:	6833      	ldreq	r3, [r6, #0]
 800eff6:	1aed      	subeq	r5, r5, r3
 800eff8:	68a3      	ldr	r3, [r4, #8]
 800effa:	bf0c      	ite	eq
 800effc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f000:	2500      	movne	r5, #0
 800f002:	4293      	cmp	r3, r2
 800f004:	bfc4      	itt	gt
 800f006:	1a9b      	subgt	r3, r3, r2
 800f008:	18ed      	addgt	r5, r5, r3
 800f00a:	2600      	movs	r6, #0
 800f00c:	341a      	adds	r4, #26
 800f00e:	42b5      	cmp	r5, r6
 800f010:	d11a      	bne.n	800f048 <_printf_common+0xc8>
 800f012:	2000      	movs	r0, #0
 800f014:	e008      	b.n	800f028 <_printf_common+0xa8>
 800f016:	2301      	movs	r3, #1
 800f018:	4652      	mov	r2, sl
 800f01a:	4641      	mov	r1, r8
 800f01c:	4638      	mov	r0, r7
 800f01e:	47c8      	blx	r9
 800f020:	3001      	adds	r0, #1
 800f022:	d103      	bne.n	800f02c <_printf_common+0xac>
 800f024:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f028:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f02c:	3501      	adds	r5, #1
 800f02e:	e7c6      	b.n	800efbe <_printf_common+0x3e>
 800f030:	18e1      	adds	r1, r4, r3
 800f032:	1c5a      	adds	r2, r3, #1
 800f034:	2030      	movs	r0, #48	@ 0x30
 800f036:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f03a:	4422      	add	r2, r4
 800f03c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f040:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f044:	3302      	adds	r3, #2
 800f046:	e7c7      	b.n	800efd8 <_printf_common+0x58>
 800f048:	2301      	movs	r3, #1
 800f04a:	4622      	mov	r2, r4
 800f04c:	4641      	mov	r1, r8
 800f04e:	4638      	mov	r0, r7
 800f050:	47c8      	blx	r9
 800f052:	3001      	adds	r0, #1
 800f054:	d0e6      	beq.n	800f024 <_printf_common+0xa4>
 800f056:	3601      	adds	r6, #1
 800f058:	e7d9      	b.n	800f00e <_printf_common+0x8e>
	...

0800f05c <_printf_i>:
 800f05c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f060:	7e0f      	ldrb	r7, [r1, #24]
 800f062:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f064:	2f78      	cmp	r7, #120	@ 0x78
 800f066:	4691      	mov	r9, r2
 800f068:	4680      	mov	r8, r0
 800f06a:	460c      	mov	r4, r1
 800f06c:	469a      	mov	sl, r3
 800f06e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f072:	d807      	bhi.n	800f084 <_printf_i+0x28>
 800f074:	2f62      	cmp	r7, #98	@ 0x62
 800f076:	d80a      	bhi.n	800f08e <_printf_i+0x32>
 800f078:	2f00      	cmp	r7, #0
 800f07a:	f000 80d1 	beq.w	800f220 <_printf_i+0x1c4>
 800f07e:	2f58      	cmp	r7, #88	@ 0x58
 800f080:	f000 80b8 	beq.w	800f1f4 <_printf_i+0x198>
 800f084:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f088:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f08c:	e03a      	b.n	800f104 <_printf_i+0xa8>
 800f08e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f092:	2b15      	cmp	r3, #21
 800f094:	d8f6      	bhi.n	800f084 <_printf_i+0x28>
 800f096:	a101      	add	r1, pc, #4	@ (adr r1, 800f09c <_printf_i+0x40>)
 800f098:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f09c:	0800f0f5 	.word	0x0800f0f5
 800f0a0:	0800f109 	.word	0x0800f109
 800f0a4:	0800f085 	.word	0x0800f085
 800f0a8:	0800f085 	.word	0x0800f085
 800f0ac:	0800f085 	.word	0x0800f085
 800f0b0:	0800f085 	.word	0x0800f085
 800f0b4:	0800f109 	.word	0x0800f109
 800f0b8:	0800f085 	.word	0x0800f085
 800f0bc:	0800f085 	.word	0x0800f085
 800f0c0:	0800f085 	.word	0x0800f085
 800f0c4:	0800f085 	.word	0x0800f085
 800f0c8:	0800f207 	.word	0x0800f207
 800f0cc:	0800f133 	.word	0x0800f133
 800f0d0:	0800f1c1 	.word	0x0800f1c1
 800f0d4:	0800f085 	.word	0x0800f085
 800f0d8:	0800f085 	.word	0x0800f085
 800f0dc:	0800f229 	.word	0x0800f229
 800f0e0:	0800f085 	.word	0x0800f085
 800f0e4:	0800f133 	.word	0x0800f133
 800f0e8:	0800f085 	.word	0x0800f085
 800f0ec:	0800f085 	.word	0x0800f085
 800f0f0:	0800f1c9 	.word	0x0800f1c9
 800f0f4:	6833      	ldr	r3, [r6, #0]
 800f0f6:	1d1a      	adds	r2, r3, #4
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	6032      	str	r2, [r6, #0]
 800f0fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f100:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f104:	2301      	movs	r3, #1
 800f106:	e09c      	b.n	800f242 <_printf_i+0x1e6>
 800f108:	6833      	ldr	r3, [r6, #0]
 800f10a:	6820      	ldr	r0, [r4, #0]
 800f10c:	1d19      	adds	r1, r3, #4
 800f10e:	6031      	str	r1, [r6, #0]
 800f110:	0606      	lsls	r6, r0, #24
 800f112:	d501      	bpl.n	800f118 <_printf_i+0xbc>
 800f114:	681d      	ldr	r5, [r3, #0]
 800f116:	e003      	b.n	800f120 <_printf_i+0xc4>
 800f118:	0645      	lsls	r5, r0, #25
 800f11a:	d5fb      	bpl.n	800f114 <_printf_i+0xb8>
 800f11c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f120:	2d00      	cmp	r5, #0
 800f122:	da03      	bge.n	800f12c <_printf_i+0xd0>
 800f124:	232d      	movs	r3, #45	@ 0x2d
 800f126:	426d      	negs	r5, r5
 800f128:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f12c:	4858      	ldr	r0, [pc, #352]	@ (800f290 <_printf_i+0x234>)
 800f12e:	230a      	movs	r3, #10
 800f130:	e011      	b.n	800f156 <_printf_i+0xfa>
 800f132:	6821      	ldr	r1, [r4, #0]
 800f134:	6833      	ldr	r3, [r6, #0]
 800f136:	0608      	lsls	r0, r1, #24
 800f138:	f853 5b04 	ldr.w	r5, [r3], #4
 800f13c:	d402      	bmi.n	800f144 <_printf_i+0xe8>
 800f13e:	0649      	lsls	r1, r1, #25
 800f140:	bf48      	it	mi
 800f142:	b2ad      	uxthmi	r5, r5
 800f144:	2f6f      	cmp	r7, #111	@ 0x6f
 800f146:	4852      	ldr	r0, [pc, #328]	@ (800f290 <_printf_i+0x234>)
 800f148:	6033      	str	r3, [r6, #0]
 800f14a:	bf14      	ite	ne
 800f14c:	230a      	movne	r3, #10
 800f14e:	2308      	moveq	r3, #8
 800f150:	2100      	movs	r1, #0
 800f152:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f156:	6866      	ldr	r6, [r4, #4]
 800f158:	60a6      	str	r6, [r4, #8]
 800f15a:	2e00      	cmp	r6, #0
 800f15c:	db05      	blt.n	800f16a <_printf_i+0x10e>
 800f15e:	6821      	ldr	r1, [r4, #0]
 800f160:	432e      	orrs	r6, r5
 800f162:	f021 0104 	bic.w	r1, r1, #4
 800f166:	6021      	str	r1, [r4, #0]
 800f168:	d04b      	beq.n	800f202 <_printf_i+0x1a6>
 800f16a:	4616      	mov	r6, r2
 800f16c:	fbb5 f1f3 	udiv	r1, r5, r3
 800f170:	fb03 5711 	mls	r7, r3, r1, r5
 800f174:	5dc7      	ldrb	r7, [r0, r7]
 800f176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f17a:	462f      	mov	r7, r5
 800f17c:	42bb      	cmp	r3, r7
 800f17e:	460d      	mov	r5, r1
 800f180:	d9f4      	bls.n	800f16c <_printf_i+0x110>
 800f182:	2b08      	cmp	r3, #8
 800f184:	d10b      	bne.n	800f19e <_printf_i+0x142>
 800f186:	6823      	ldr	r3, [r4, #0]
 800f188:	07df      	lsls	r7, r3, #31
 800f18a:	d508      	bpl.n	800f19e <_printf_i+0x142>
 800f18c:	6923      	ldr	r3, [r4, #16]
 800f18e:	6861      	ldr	r1, [r4, #4]
 800f190:	4299      	cmp	r1, r3
 800f192:	bfde      	ittt	le
 800f194:	2330      	movle	r3, #48	@ 0x30
 800f196:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f19a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800f19e:	1b92      	subs	r2, r2, r6
 800f1a0:	6122      	str	r2, [r4, #16]
 800f1a2:	f8cd a000 	str.w	sl, [sp]
 800f1a6:	464b      	mov	r3, r9
 800f1a8:	aa03      	add	r2, sp, #12
 800f1aa:	4621      	mov	r1, r4
 800f1ac:	4640      	mov	r0, r8
 800f1ae:	f7ff fee7 	bl	800ef80 <_printf_common>
 800f1b2:	3001      	adds	r0, #1
 800f1b4:	d14a      	bne.n	800f24c <_printf_i+0x1f0>
 800f1b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f1ba:	b004      	add	sp, #16
 800f1bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1c0:	6823      	ldr	r3, [r4, #0]
 800f1c2:	f043 0320 	orr.w	r3, r3, #32
 800f1c6:	6023      	str	r3, [r4, #0]
 800f1c8:	4832      	ldr	r0, [pc, #200]	@ (800f294 <_printf_i+0x238>)
 800f1ca:	2778      	movs	r7, #120	@ 0x78
 800f1cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f1d0:	6823      	ldr	r3, [r4, #0]
 800f1d2:	6831      	ldr	r1, [r6, #0]
 800f1d4:	061f      	lsls	r7, r3, #24
 800f1d6:	f851 5b04 	ldr.w	r5, [r1], #4
 800f1da:	d402      	bmi.n	800f1e2 <_printf_i+0x186>
 800f1dc:	065f      	lsls	r7, r3, #25
 800f1de:	bf48      	it	mi
 800f1e0:	b2ad      	uxthmi	r5, r5
 800f1e2:	6031      	str	r1, [r6, #0]
 800f1e4:	07d9      	lsls	r1, r3, #31
 800f1e6:	bf44      	itt	mi
 800f1e8:	f043 0320 	orrmi.w	r3, r3, #32
 800f1ec:	6023      	strmi	r3, [r4, #0]
 800f1ee:	b11d      	cbz	r5, 800f1f8 <_printf_i+0x19c>
 800f1f0:	2310      	movs	r3, #16
 800f1f2:	e7ad      	b.n	800f150 <_printf_i+0xf4>
 800f1f4:	4826      	ldr	r0, [pc, #152]	@ (800f290 <_printf_i+0x234>)
 800f1f6:	e7e9      	b.n	800f1cc <_printf_i+0x170>
 800f1f8:	6823      	ldr	r3, [r4, #0]
 800f1fa:	f023 0320 	bic.w	r3, r3, #32
 800f1fe:	6023      	str	r3, [r4, #0]
 800f200:	e7f6      	b.n	800f1f0 <_printf_i+0x194>
 800f202:	4616      	mov	r6, r2
 800f204:	e7bd      	b.n	800f182 <_printf_i+0x126>
 800f206:	6833      	ldr	r3, [r6, #0]
 800f208:	6825      	ldr	r5, [r4, #0]
 800f20a:	6961      	ldr	r1, [r4, #20]
 800f20c:	1d18      	adds	r0, r3, #4
 800f20e:	6030      	str	r0, [r6, #0]
 800f210:	062e      	lsls	r6, r5, #24
 800f212:	681b      	ldr	r3, [r3, #0]
 800f214:	d501      	bpl.n	800f21a <_printf_i+0x1be>
 800f216:	6019      	str	r1, [r3, #0]
 800f218:	e002      	b.n	800f220 <_printf_i+0x1c4>
 800f21a:	0668      	lsls	r0, r5, #25
 800f21c:	d5fb      	bpl.n	800f216 <_printf_i+0x1ba>
 800f21e:	8019      	strh	r1, [r3, #0]
 800f220:	2300      	movs	r3, #0
 800f222:	6123      	str	r3, [r4, #16]
 800f224:	4616      	mov	r6, r2
 800f226:	e7bc      	b.n	800f1a2 <_printf_i+0x146>
 800f228:	6833      	ldr	r3, [r6, #0]
 800f22a:	1d1a      	adds	r2, r3, #4
 800f22c:	6032      	str	r2, [r6, #0]
 800f22e:	681e      	ldr	r6, [r3, #0]
 800f230:	6862      	ldr	r2, [r4, #4]
 800f232:	2100      	movs	r1, #0
 800f234:	4630      	mov	r0, r6
 800f236:	f7f0 ffdb 	bl	80001f0 <memchr>
 800f23a:	b108      	cbz	r0, 800f240 <_printf_i+0x1e4>
 800f23c:	1b80      	subs	r0, r0, r6
 800f23e:	6060      	str	r0, [r4, #4]
 800f240:	6863      	ldr	r3, [r4, #4]
 800f242:	6123      	str	r3, [r4, #16]
 800f244:	2300      	movs	r3, #0
 800f246:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f24a:	e7aa      	b.n	800f1a2 <_printf_i+0x146>
 800f24c:	6923      	ldr	r3, [r4, #16]
 800f24e:	4632      	mov	r2, r6
 800f250:	4649      	mov	r1, r9
 800f252:	4640      	mov	r0, r8
 800f254:	47d0      	blx	sl
 800f256:	3001      	adds	r0, #1
 800f258:	d0ad      	beq.n	800f1b6 <_printf_i+0x15a>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	079b      	lsls	r3, r3, #30
 800f25e:	d413      	bmi.n	800f288 <_printf_i+0x22c>
 800f260:	68e0      	ldr	r0, [r4, #12]
 800f262:	9b03      	ldr	r3, [sp, #12]
 800f264:	4298      	cmp	r0, r3
 800f266:	bfb8      	it	lt
 800f268:	4618      	movlt	r0, r3
 800f26a:	e7a6      	b.n	800f1ba <_printf_i+0x15e>
 800f26c:	2301      	movs	r3, #1
 800f26e:	4632      	mov	r2, r6
 800f270:	4649      	mov	r1, r9
 800f272:	4640      	mov	r0, r8
 800f274:	47d0      	blx	sl
 800f276:	3001      	adds	r0, #1
 800f278:	d09d      	beq.n	800f1b6 <_printf_i+0x15a>
 800f27a:	3501      	adds	r5, #1
 800f27c:	68e3      	ldr	r3, [r4, #12]
 800f27e:	9903      	ldr	r1, [sp, #12]
 800f280:	1a5b      	subs	r3, r3, r1
 800f282:	42ab      	cmp	r3, r5
 800f284:	dcf2      	bgt.n	800f26c <_printf_i+0x210>
 800f286:	e7eb      	b.n	800f260 <_printf_i+0x204>
 800f288:	2500      	movs	r5, #0
 800f28a:	f104 0619 	add.w	r6, r4, #25
 800f28e:	e7f5      	b.n	800f27c <_printf_i+0x220>
 800f290:	08016fce 	.word	0x08016fce
 800f294:	08016fdf 	.word	0x08016fdf

0800f298 <memmove>:
 800f298:	4288      	cmp	r0, r1
 800f29a:	b510      	push	{r4, lr}
 800f29c:	eb01 0402 	add.w	r4, r1, r2
 800f2a0:	d902      	bls.n	800f2a8 <memmove+0x10>
 800f2a2:	4284      	cmp	r4, r0
 800f2a4:	4623      	mov	r3, r4
 800f2a6:	d807      	bhi.n	800f2b8 <memmove+0x20>
 800f2a8:	1e43      	subs	r3, r0, #1
 800f2aa:	42a1      	cmp	r1, r4
 800f2ac:	d008      	beq.n	800f2c0 <memmove+0x28>
 800f2ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f2b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f2b6:	e7f8      	b.n	800f2aa <memmove+0x12>
 800f2b8:	4402      	add	r2, r0
 800f2ba:	4601      	mov	r1, r0
 800f2bc:	428a      	cmp	r2, r1
 800f2be:	d100      	bne.n	800f2c2 <memmove+0x2a>
 800f2c0:	bd10      	pop	{r4, pc}
 800f2c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f2c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f2ca:	e7f7      	b.n	800f2bc <memmove+0x24>

0800f2cc <_realloc_r>:
 800f2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f2d0:	4607      	mov	r7, r0
 800f2d2:	4614      	mov	r4, r2
 800f2d4:	460d      	mov	r5, r1
 800f2d6:	b921      	cbnz	r1, 800f2e2 <_realloc_r+0x16>
 800f2d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f2dc:	4611      	mov	r1, r2
 800f2de:	f7ff bae7 	b.w	800e8b0 <_malloc_r>
 800f2e2:	b92a      	cbnz	r2, 800f2f0 <_realloc_r+0x24>
 800f2e4:	f7ff fcaa 	bl	800ec3c <_free_r>
 800f2e8:	4625      	mov	r5, r4
 800f2ea:	4628      	mov	r0, r5
 800f2ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2f0:	f000 f81a 	bl	800f328 <_malloc_usable_size_r>
 800f2f4:	4284      	cmp	r4, r0
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	d802      	bhi.n	800f300 <_realloc_r+0x34>
 800f2fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f2fe:	d8f4      	bhi.n	800f2ea <_realloc_r+0x1e>
 800f300:	4621      	mov	r1, r4
 800f302:	4638      	mov	r0, r7
 800f304:	f7ff fad4 	bl	800e8b0 <_malloc_r>
 800f308:	4680      	mov	r8, r0
 800f30a:	b908      	cbnz	r0, 800f310 <_realloc_r+0x44>
 800f30c:	4645      	mov	r5, r8
 800f30e:	e7ec      	b.n	800f2ea <_realloc_r+0x1e>
 800f310:	42b4      	cmp	r4, r6
 800f312:	4622      	mov	r2, r4
 800f314:	4629      	mov	r1, r5
 800f316:	bf28      	it	cs
 800f318:	4632      	movcs	r2, r6
 800f31a:	f7ff fc81 	bl	800ec20 <memcpy>
 800f31e:	4629      	mov	r1, r5
 800f320:	4638      	mov	r0, r7
 800f322:	f7ff fc8b 	bl	800ec3c <_free_r>
 800f326:	e7f1      	b.n	800f30c <_realloc_r+0x40>

0800f328 <_malloc_usable_size_r>:
 800f328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f32c:	1f18      	subs	r0, r3, #4
 800f32e:	2b00      	cmp	r3, #0
 800f330:	bfbc      	itt	lt
 800f332:	580b      	ldrlt	r3, [r1, r0]
 800f334:	18c0      	addlt	r0, r0, r3
 800f336:	4770      	bx	lr

0800f338 <_init>:
 800f338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f33a:	bf00      	nop
 800f33c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f33e:	bc08      	pop	{r3}
 800f340:	469e      	mov	lr, r3
 800f342:	4770      	bx	lr

0800f344 <_fini>:
 800f344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f346:	bf00      	nop
 800f348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f34a:	bc08      	pop	{r3}
 800f34c:	469e      	mov	lr, r3
 800f34e:	4770      	bx	lr
