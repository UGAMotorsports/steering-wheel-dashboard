
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfb8  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002d264  0800c14c  0800c14c  0000d14c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080393b0  080393b0  0003b188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080393b0  080393b0  0003a3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080393b8  080393b8  0003b188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  080393b8  080393b8  0003a3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080393c4  080393c4  0003a3c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  080393c8  0003b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000174c  20000188  08039550  0003b188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018d4  08039550  0003b8d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003b188  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f0c6  00000000  00000000  0003b1b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005271  00000000  00000000  0005a27e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019a0  00000000  00000000  0005f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000137a  00000000  00000000  00060e90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e572  00000000  00000000  0006220a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dee4  00000000  00000000  0008077c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098de8  00000000  00000000  0009e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137448  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006f4c  00000000  00000000  0013748c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0013e3d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000188 	.word	0x20000188
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800c134 	.word	0x0800c134

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000018c 	.word	0x2000018c
 80001d0:	0800c134 	.word	0x0800c134

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e8:	f000 b988 	b.w	80004fc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	468e      	mov	lr, r1
 800020c:	4604      	mov	r4, r0
 800020e:	4688      	mov	r8, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d962      	bls.n	80002e0 <__udivmoddi4+0xdc>
 800021a:	fab2 f682 	clz	r6, r2
 800021e:	b14e      	cbz	r6, 8000234 <__udivmoddi4+0x30>
 8000220:	f1c6 0320 	rsb	r3, r6, #32
 8000224:	fa01 f806 	lsl.w	r8, r1, r6
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	40b7      	lsls	r7, r6
 800022e:	ea43 0808 	orr.w	r8, r3, r8
 8000232:	40b4      	lsls	r4, r6
 8000234:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000238:	fa1f fc87 	uxth.w	ip, r7
 800023c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000240:	0c23      	lsrs	r3, r4, #16
 8000242:	fb0e 8811 	mls	r8, lr, r1, r8
 8000246:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024a:	fb01 f20c 	mul.w	r2, r1, ip
 800024e:	429a      	cmp	r2, r3
 8000250:	d909      	bls.n	8000266 <__udivmoddi4+0x62>
 8000252:	18fb      	adds	r3, r7, r3
 8000254:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000258:	f080 80ea 	bcs.w	8000430 <__udivmoddi4+0x22c>
 800025c:	429a      	cmp	r2, r3
 800025e:	f240 80e7 	bls.w	8000430 <__udivmoddi4+0x22c>
 8000262:	3902      	subs	r1, #2
 8000264:	443b      	add	r3, r7
 8000266:	1a9a      	subs	r2, r3, r2
 8000268:	b2a3      	uxth	r3, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000276:	fb00 fc0c 	mul.w	ip, r0, ip
 800027a:	459c      	cmp	ip, r3
 800027c:	d909      	bls.n	8000292 <__udivmoddi4+0x8e>
 800027e:	18fb      	adds	r3, r7, r3
 8000280:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000284:	f080 80d6 	bcs.w	8000434 <__udivmoddi4+0x230>
 8000288:	459c      	cmp	ip, r3
 800028a:	f240 80d3 	bls.w	8000434 <__udivmoddi4+0x230>
 800028e:	443b      	add	r3, r7
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000296:	eba3 030c 	sub.w	r3, r3, ip
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40f3      	lsrs	r3, r6
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xb6>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb0>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x14c>
 80002c2:	4573      	cmp	r3, lr
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xc8>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 8105 	bhi.w	80004d6 <__udivmoddi4+0x2d2>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb6e 0203 	sbc.w	r2, lr, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	4690      	mov	r8, r2
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e5      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002da:	e9c5 4800 	strd	r4, r8, [r5]
 80002de:	e7e2      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	2a00      	cmp	r2, #0
 80002e2:	f000 8090 	beq.w	8000406 <__udivmoddi4+0x202>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f040 80a4 	bne.w	8000438 <__udivmoddi4+0x234>
 80002f0:	1a8a      	subs	r2, r1, r2
 80002f2:	0c03      	lsrs	r3, r0, #16
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	b280      	uxth	r0, r0
 80002fa:	b2bc      	uxth	r4, r7
 80002fc:	2101      	movs	r1, #1
 80002fe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000302:	fb0e 221c 	mls	r2, lr, ip, r2
 8000306:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800030a:	fb04 f20c 	mul.w	r2, r4, ip
 800030e:	429a      	cmp	r2, r3
 8000310:	d907      	bls.n	8000322 <__udivmoddi4+0x11e>
 8000312:	18fb      	adds	r3, r7, r3
 8000314:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000318:	d202      	bcs.n	8000320 <__udivmoddi4+0x11c>
 800031a:	429a      	cmp	r2, r3
 800031c:	f200 80e0 	bhi.w	80004e0 <__udivmoddi4+0x2dc>
 8000320:	46c4      	mov	ip, r8
 8000322:	1a9b      	subs	r3, r3, r2
 8000324:	fbb3 f2fe 	udiv	r2, r3, lr
 8000328:	fb0e 3312 	mls	r3, lr, r2, r3
 800032c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000330:	fb02 f404 	mul.w	r4, r2, r4
 8000334:	429c      	cmp	r4, r3
 8000336:	d907      	bls.n	8000348 <__udivmoddi4+0x144>
 8000338:	18fb      	adds	r3, r7, r3
 800033a:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x142>
 8000340:	429c      	cmp	r4, r3
 8000342:	f200 80ca 	bhi.w	80004da <__udivmoddi4+0x2d6>
 8000346:	4602      	mov	r2, r0
 8000348:	1b1b      	subs	r3, r3, r4
 800034a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x98>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa0e f401 	lsl.w	r4, lr, r1
 8000360:	fa20 f306 	lsr.w	r3, r0, r6
 8000364:	fa2e fe06 	lsr.w	lr, lr, r6
 8000368:	ea4f 4917 	mov.w	r9, r7, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	fa1f fc87 	uxth.w	ip, r7
 8000376:	fbbe f0f9 	udiv	r0, lr, r9
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000380:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000384:	fb00 fe0c 	mul.w	lr, r0, ip
 8000388:	45a6      	cmp	lr, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x1a0>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000396:	f080 809c 	bcs.w	80004d2 <__udivmoddi4+0x2ce>
 800039a:	45a6      	cmp	lr, r4
 800039c:	f240 8099 	bls.w	80004d2 <__udivmoddi4+0x2ce>
 80003a0:	3802      	subs	r0, #2
 80003a2:	443c      	add	r4, r7
 80003a4:	eba4 040e 	sub.w	r4, r4, lr
 80003a8:	fa1f fe83 	uxth.w	lr, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b8:	fb03 fc0c 	mul.w	ip, r3, ip
 80003bc:	45a4      	cmp	ip, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1ce>
 80003c0:	193c      	adds	r4, r7, r4
 80003c2:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c6:	f080 8082 	bcs.w	80004ce <__udivmoddi4+0x2ca>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d97f      	bls.n	80004ce <__udivmoddi4+0x2ca>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d6:	eba4 040c 	sub.w	r4, r4, ip
 80003da:	fba0 ec02 	umull	lr, ip, r0, r2
 80003de:	4564      	cmp	r4, ip
 80003e0:	4673      	mov	r3, lr
 80003e2:	46e1      	mov	r9, ip
 80003e4:	d362      	bcc.n	80004ac <__udivmoddi4+0x2a8>
 80003e6:	d05f      	beq.n	80004a8 <__udivmoddi4+0x2a4>
 80003e8:	b15d      	cbz	r5, 8000402 <__udivmoddi4+0x1fe>
 80003ea:	ebb8 0203 	subs.w	r2, r8, r3
 80003ee:	eb64 0409 	sbc.w	r4, r4, r9
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	fa22 f301 	lsr.w	r3, r2, r1
 80003fa:	431e      	orrs	r6, r3
 80003fc:	40cc      	lsrs	r4, r1
 80003fe:	e9c5 6400 	strd	r6, r4, [r5]
 8000402:	2100      	movs	r1, #0
 8000404:	e74f      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000406:	fbb1 fcf2 	udiv	ip, r1, r2
 800040a:	0c01      	lsrs	r1, r0, #16
 800040c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000410:	b280      	uxth	r0, r0
 8000412:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000416:	463b      	mov	r3, r7
 8000418:	4638      	mov	r0, r7
 800041a:	463c      	mov	r4, r7
 800041c:	46b8      	mov	r8, r7
 800041e:	46be      	mov	lr, r7
 8000420:	2620      	movs	r6, #32
 8000422:	fbb1 f1f7 	udiv	r1, r1, r7
 8000426:	eba2 0208 	sub.w	r2, r2, r8
 800042a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042e:	e766      	b.n	80002fe <__udivmoddi4+0xfa>
 8000430:	4601      	mov	r1, r0
 8000432:	e718      	b.n	8000266 <__udivmoddi4+0x62>
 8000434:	4610      	mov	r0, r2
 8000436:	e72c      	b.n	8000292 <__udivmoddi4+0x8e>
 8000438:	f1c6 0220 	rsb	r2, r6, #32
 800043c:	fa2e f302 	lsr.w	r3, lr, r2
 8000440:	40b7      	lsls	r7, r6
 8000442:	40b1      	lsls	r1, r6
 8000444:	fa20 f202 	lsr.w	r2, r0, r2
 8000448:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800044c:	430a      	orrs	r2, r1
 800044e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000452:	b2bc      	uxth	r4, r7
 8000454:	fb0e 3318 	mls	r3, lr, r8, r3
 8000458:	0c11      	lsrs	r1, r2, #16
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb08 f904 	mul.w	r9, r8, r4
 8000462:	40b0      	lsls	r0, r6
 8000464:	4589      	cmp	r9, r1
 8000466:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800046a:	b280      	uxth	r0, r0
 800046c:	d93e      	bls.n	80004ec <__udivmoddi4+0x2e8>
 800046e:	1879      	adds	r1, r7, r1
 8000470:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000474:	d201      	bcs.n	800047a <__udivmoddi4+0x276>
 8000476:	4589      	cmp	r9, r1
 8000478:	d81f      	bhi.n	80004ba <__udivmoddi4+0x2b6>
 800047a:	eba1 0109 	sub.w	r1, r1, r9
 800047e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000482:	fb09 f804 	mul.w	r8, r9, r4
 8000486:	fb0e 1119 	mls	r1, lr, r9, r1
 800048a:	b292      	uxth	r2, r2
 800048c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000490:	4542      	cmp	r2, r8
 8000492:	d229      	bcs.n	80004e8 <__udivmoddi4+0x2e4>
 8000494:	18ba      	adds	r2, r7, r2
 8000496:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800049a:	d2c4      	bcs.n	8000426 <__udivmoddi4+0x222>
 800049c:	4542      	cmp	r2, r8
 800049e:	d2c2      	bcs.n	8000426 <__udivmoddi4+0x222>
 80004a0:	f1a9 0102 	sub.w	r1, r9, #2
 80004a4:	443a      	add	r2, r7
 80004a6:	e7be      	b.n	8000426 <__udivmoddi4+0x222>
 80004a8:	45f0      	cmp	r8, lr
 80004aa:	d29d      	bcs.n	80003e8 <__udivmoddi4+0x1e4>
 80004ac:	ebbe 0302 	subs.w	r3, lr, r2
 80004b0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b4:	3801      	subs	r0, #1
 80004b6:	46e1      	mov	r9, ip
 80004b8:	e796      	b.n	80003e8 <__udivmoddi4+0x1e4>
 80004ba:	eba7 0909 	sub.w	r9, r7, r9
 80004be:	4449      	add	r1, r9
 80004c0:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c4:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c8:	fb09 f804 	mul.w	r8, r9, r4
 80004cc:	e7db      	b.n	8000486 <__udivmoddi4+0x282>
 80004ce:	4673      	mov	r3, lr
 80004d0:	e77f      	b.n	80003d2 <__udivmoddi4+0x1ce>
 80004d2:	4650      	mov	r0, sl
 80004d4:	e766      	b.n	80003a4 <__udivmoddi4+0x1a0>
 80004d6:	4608      	mov	r0, r1
 80004d8:	e6fd      	b.n	80002d6 <__udivmoddi4+0xd2>
 80004da:	443b      	add	r3, r7
 80004dc:	3a02      	subs	r2, #2
 80004de:	e733      	b.n	8000348 <__udivmoddi4+0x144>
 80004e0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e4:	443b      	add	r3, r7
 80004e6:	e71c      	b.n	8000322 <__udivmoddi4+0x11e>
 80004e8:	4649      	mov	r1, r9
 80004ea:	e79c      	b.n	8000426 <__udivmoddi4+0x222>
 80004ec:	eba1 0109 	sub.w	r1, r1, r9
 80004f0:	46c4      	mov	ip, r8
 80004f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f6:	fb09 f804 	mul.w	r8, r9, r4
 80004fa:	e7c4      	b.n	8000486 <__udivmoddi4+0x282>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	607b      	str	r3, [r7, #4]
 800050a:	4b17      	ldr	r3, [pc, #92]	@ (8000568 <MX_DMA_Init+0x68>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800050e:	4a16      	ldr	r2, [pc, #88]	@ (8000568 <MX_DMA_Init+0x68>)
 8000510:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000514:	6313      	str	r3, [r2, #48]	@ 0x30
 8000516:	4b14      	ldr	r3, [pc, #80]	@ (8000568 <MX_DMA_Init+0x68>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800051a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800051e:	607b      	str	r3, [r7, #4]
 8000520:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	603b      	str	r3, [r7, #0]
 8000526:	4b10      	ldr	r3, [pc, #64]	@ (8000568 <MX_DMA_Init+0x68>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800052a:	4a0f      	ldr	r2, [pc, #60]	@ (8000568 <MX_DMA_Init+0x68>)
 800052c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000530:	6313      	str	r3, [r2, #48]	@ 0x30
 8000532:	4b0d      	ldr	r3, [pc, #52]	@ (8000568 <MX_DMA_Init+0x68>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800053a:	603b      	str	r3, [r7, #0]
 800053c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800053e:	2200      	movs	r2, #0
 8000540:	2100      	movs	r1, #0
 8000542:	200b      	movs	r0, #11
 8000544:	f003 f825 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000548:	200b      	movs	r0, #11
 800054a:	f003 f83e 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800054e:	2200      	movs	r2, #0
 8000550:	2100      	movs	r1, #0
 8000552:	203b      	movs	r0, #59	@ 0x3b
 8000554:	f003 f81d 	bl	8003592 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000558:	203b      	movs	r0, #59	@ 0x3b
 800055a:	f003 f836 	bl	80035ca <HAL_NVIC_EnableIRQ>

}
 800055e:	bf00      	nop
 8000560:	3708      	adds	r7, #8
 8000562:	46bd      	mov	sp, r7
 8000564:	bd80      	pop	{r7, pc}
 8000566:	bf00      	nop
 8000568:	40023800 	.word	0x40023800

0800056c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b08a      	sub	sp, #40	@ 0x28
 8000570:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000572:	f107 0314 	add.w	r3, r7, #20
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
 8000580:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	613b      	str	r3, [r7, #16]
 8000586:	4b47      	ldr	r3, [pc, #284]	@ (80006a4 <MX_GPIO_Init+0x138>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800058a:	4a46      	ldr	r2, [pc, #280]	@ (80006a4 <MX_GPIO_Init+0x138>)
 800058c:	f043 0304 	orr.w	r3, r3, #4
 8000590:	6313      	str	r3, [r2, #48]	@ 0x30
 8000592:	4b44      	ldr	r3, [pc, #272]	@ (80006a4 <MX_GPIO_Init+0x138>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000596:	f003 0304 	and.w	r3, r3, #4
 800059a:	613b      	str	r3, [r7, #16]
 800059c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800059e:	2300      	movs	r3, #0
 80005a0:	60fb      	str	r3, [r7, #12]
 80005a2:	4b40      	ldr	r3, [pc, #256]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005a6:	4a3f      	ldr	r2, [pc, #252]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ae:	4b3d      	ldr	r3, [pc, #244]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005b6:	60fb      	str	r3, [r7, #12]
 80005b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ba:	2300      	movs	r3, #0
 80005bc:	60bb      	str	r3, [r7, #8]
 80005be:	4b39      	ldr	r3, [pc, #228]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c2:	4a38      	ldr	r2, [pc, #224]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005c4:	f043 0301 	orr.w	r3, r3, #1
 80005c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ca:	4b36      	ldr	r3, [pc, #216]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ce:	f003 0301 	and.w	r3, r3, #1
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	4b32      	ldr	r3, [pc, #200]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005de:	4a31      	ldr	r2, [pc, #196]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005e0:	f043 0302 	orr.w	r3, r3, #2
 80005e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e6:	4b2f      	ldr	r3, [pc, #188]	@ (80006a4 <MX_GPIO_Init+0x138>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	f003 0302 	and.w	r3, r3, #2
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80005f8:	482b      	ldr	r0, [pc, #172]	@ (80006a8 <MX_GPIO_Init+0x13c>)
 80005fa:	f003 fd17 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 80005fe:	2200      	movs	r2, #0
 8000600:	2110      	movs	r1, #16
 8000602:	482a      	ldr	r0, [pc, #168]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000604:	f003 fd12 	bl	800402c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8000608:	2200      	movs	r2, #0
 800060a:	213b      	movs	r1, #59	@ 0x3b
 800060c:	4828      	ldr	r0, [pc, #160]	@ (80006b0 <MX_GPIO_Init+0x144>)
 800060e:	f003 fd0d 	bl	800402c <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 8000612:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000616:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000618:	2301      	movs	r3, #1
 800061a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000620:	2300      	movs	r3, #0
 8000622:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8000624:	f107 0314 	add.w	r3, r7, #20
 8000628:	4619      	mov	r1, r3
 800062a:	481f      	ldr	r0, [pc, #124]	@ (80006a8 <MX_GPIO_Init+0x13c>)
 800062c:	f003 fb7a 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin button3_Pin button2_Pin
                           button1_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin|button3_Pin|button2_Pin
 8000630:	f240 7306 	movw	r3, #1798	@ 0x706
 8000634:	617b      	str	r3, [r7, #20]
                          |button1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000636:	2300      	movs	r3, #0
 8000638:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063a:	2300      	movs	r3, #0
 800063c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800063e:	f107 0314 	add.w	r3, r7, #20
 8000642:	4619      	mov	r1, r3
 8000644:	4819      	ldr	r0, [pc, #100]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000646:	f003 fb6d 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 800064a:	2310      	movs	r3, #16
 800064c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800064e:	2301      	movs	r3, #1
 8000650:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000652:	2300      	movs	r3, #0
 8000654:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000656:	2300      	movs	r3, #0
 8000658:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 800065a:	f107 0314 	add.w	r3, r7, #20
 800065e:	4619      	mov	r1, r3
 8000660:	4812      	ldr	r0, [pc, #72]	@ (80006ac <MX_GPIO_Init+0x140>)
 8000662:	f003 fb5f 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8000666:	233b      	movs	r3, #59	@ 0x3b
 8000668:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800066a:	2301      	movs	r3, #1
 800066c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800066e:	2300      	movs	r3, #0
 8000670:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000672:	2300      	movs	r3, #0
 8000674:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000676:	f107 0314 	add.w	r3, r7, #20
 800067a:	4619      	mov	r1, r3
 800067c:	480c      	ldr	r0, [pc, #48]	@ (80006b0 <MX_GPIO_Init+0x144>)
 800067e:	f003 fb51 	bl	8003d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4_Pin */
  GPIO_InitStruct.Pin = button4_Pin;
 8000682:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000688:	2300      	movs	r3, #0
 800068a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068c:	2300      	movs	r3, #0
 800068e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4_GPIO_Port, &GPIO_InitStruct);
 8000690:	f107 0314 	add.w	r3, r7, #20
 8000694:	4619      	mov	r1, r3
 8000696:	4806      	ldr	r0, [pc, #24]	@ (80006b0 <MX_GPIO_Init+0x144>)
 8000698:	f003 fb44 	bl	8003d24 <HAL_GPIO_Init>

}
 800069c:	bf00      	nop
 800069e:	3728      	adds	r7, #40	@ 0x28
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	40023800 	.word	0x40023800
 80006a8:	40020800 	.word	0x40020800
 80006ac:	40020000 	.word	0x40020000
 80006b0:	40020400 	.word	0x40020400

080006b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006b4:	b5b0      	push	{r4, r5, r7, lr}
 80006b6:	f5ad 6d9f 	sub.w	sp, sp, #1272	@ 0x4f8
 80006ba:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006bc:	f002 fdf8 	bl	80032b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006c0:	f000 f954 	bl	800096c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006c4:	f7ff ff52 	bl	800056c <MX_GPIO_Init>
  MX_DMA_Init();
 80006c8:	f7ff ff1a 	bl	8000500 <MX_DMA_Init>
  MX_SPI1_Init();
 80006cc:	f000 fc38 	bl	8000f40 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80006d0:	f00a fe0e 	bl	800b2f0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80006d4:	f000 fc6c 	bl	8000fb0 <MX_SPI2_Init>
  MX_TIM4_Init();
 80006d8:	f000 fe34 	bl	8001344 <MX_TIM4_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  initializeMCP2515();
 80006dc:	f000 f9b8 	bl	8000a50 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 2500, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 80006e0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80006e4:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80006e8:	4a9d      	ldr	r2, [pc, #628]	@ (8000960 <main+0x2ac>)
 80006ea:	461c      	mov	r4, r3
 80006ec:	4615      	mov	r5, r2
 80006ee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80006fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80006fe:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000702:	f207 42ac 	addw	r2, r7, #1196	@ 0x4ac
 8000706:	2100      	movs	r1, #0
 8000708:	4896      	ldr	r0, [pc, #600]	@ (8000964 <main+0x2b0>)
 800070a:	f000 fa59 	bl	8000bc0 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 800070e:	2300      	movs	r3, #0
 8000710:	9303      	str	r3, [sp, #12]
 8000712:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000716:	9302      	str	r3, [sp, #8]
 8000718:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2300      	movs	r3, #0
 8000720:	9300      	str	r3, [sp, #0]
 8000722:	2300      	movs	r3, #0
 8000724:	2200      	movs	r2, #0
 8000726:	2100      	movs	r1, #0
 8000728:	488e      	ldr	r0, [pc, #568]	@ (8000964 <main+0x2b0>)
 800072a:	f000 f9cd 	bl	8000ac8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 800072e:	2301      	movs	r3, #1
 8000730:	9303      	str	r3, [sp, #12]
 8000732:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000736:	9302      	str	r3, [sp, #8]
 8000738:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2300      	movs	r3, #0
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	2300      	movs	r3, #0
 8000744:	2200      	movs	r2, #0
 8000746:	2100      	movs	r1, #0
 8000748:	4886      	ldr	r0, [pc, #536]	@ (8000964 <main+0x2b0>)
 800074a:	f000 f9bd 	bl	8000ac8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 800074e:	230e      	movs	r3, #14
 8000750:	9303      	str	r3, [sp, #12]
 8000752:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000756:	9302      	str	r3, [sp, #8]
 8000758:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2300      	movs	r3, #0
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	2300      	movs	r3, #0
 8000764:	2200      	movs	r2, #0
 8000766:	2100      	movs	r1, #0
 8000768:	487e      	ldr	r0, [pc, #504]	@ (8000964 <main+0x2b0>)
 800076a:	f000 f9ad 	bl	8000ac8 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 800076e:	230f      	movs	r3, #15
 8000770:	9303      	str	r3, [sp, #12]
 8000772:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 8000776:	9302      	str	r3, [sp, #8]
 8000778:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 800077c:	9301      	str	r3, [sp, #4]
 800077e:	2300      	movs	r3, #0
 8000780:	9300      	str	r3, [sp, #0]
 8000782:	2300      	movs	r3, #0
 8000784:	2200      	movs	r2, #0
 8000786:	2100      	movs	r1, #0
 8000788:	4876      	ldr	r0, [pc, #472]	@ (8000964 <main+0x2b0>)
 800078a:	f000 f99d 	bl	8000ac8 <setColor>

  resetScreen();
 800078e:	f001 fb3b 	bl	8001e08 <resetScreen>
  initializeScreen();
 8000792:	f001 fb57 	bl	8001e44 <initializeScreen>
  dosplashscene();
 8000796:	f001 ff59 	bl	800264c <dosplashscene>
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 800079a:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 800079e:	f207 42ac 	addw	r2, r7, #1196	@ 0x4ac
 80007a2:	2100      	movs	r1, #0
 80007a4:	486f      	ldr	r0, [pc, #444]	@ (8000964 <main+0x2b0>)
 80007a6:	f000 fb63 	bl	8000e70 <startUp>
  HAL_Delay(200);
 80007aa:	20c8      	movs	r0, #200	@ 0xc8
 80007ac:	f002 fdf2 	bl	8003394 <HAL_Delay>

  char result[20] = "null"; //rpm
 80007b0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80007b4:	f2a3 43ac 	subw	r3, r3, #1196	@ 0x4ac
 80007b8:	4a6b      	ldr	r2, [pc, #428]	@ (8000968 <main+0x2b4>)
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	3304      	adds	r3, #4
 80007be:	2200      	movs	r2, #0
 80007c0:	601a      	str	r2, [r3, #0]
 80007c2:	605a      	str	r2, [r3, #4]
 80007c4:	609a      	str	r2, [r3, #8]
 80007c6:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 80007c8:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80007cc:	f5a3 6398 	sub.w	r3, r3, #1216	@ 0x4c0
 80007d0:	4a65      	ldr	r2, [pc, #404]	@ (8000968 <main+0x2b4>)
 80007d2:	601a      	str	r2, [r3, #0]
 80007d4:	3304      	adds	r3, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
 80007da:	605a      	str	r2, [r3, #4]
 80007dc:	609a      	str	r2, [r3, #8]
 80007de:	60da      	str	r2, [r3, #12]
  char result3[20] = "null";//gear
 80007e0:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 80007e4:	f2a3 43d4 	subw	r3, r3, #1236	@ 0x4d4
 80007e8:	4a5f      	ldr	r2, [pc, #380]	@ (8000968 <main+0x2b4>)
 80007ea:	601a      	str	r2, [r3, #0]
 80007ec:	3304      	adds	r3, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 80007f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007fc:	4618      	mov	r0, r3
 80007fe:	f001 fe99 	bl	8002534 <settempdata>
  setgeardata(result3);
 8000802:	f107 0314 	add.w	r3, r7, #20
 8000806:	4618      	mov	r0, r3
 8000808:	f001 fed2 	bl	80025b0 <setgeardata>
  setrpmdata(result);
 800080c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000810:	4618      	mov	r0, r3
 8000812:	f001 fe53 	bl	80024bc <setrpmdata>
  domainscreen();
 8000816:	f001 ff09 	bl	800262c <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 800081a:	463b      	mov	r3, r7
 800081c:	4618      	mov	r0, r3
 800081e:	f000 f929 	bl	8000a74 <readMessage>
 8000822:	f8c7 04e4 	str.w	r0, [r7, #1252]	@ 0x4e4
	  if (canresult == 0) {
 8000826:	f8d7 34e4 	ldr.w	r3, [r7, #1252]	@ 0x4e4
 800082a:	2b00      	cmp	r3, #0
 800082c:	f040 8095 	bne.w	800095a <main+0x2a6>
		  if (frame.can_id == 1512) {
 8000830:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000834:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 800083e:	d16f      	bne.n	8000920 <main+0x26c>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 8000840:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000844:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8000848:	7a9b      	ldrb	r3, [r3, #10]
 800084a:	021b      	lsls	r3, r3, #8
 800084c:	b29b      	uxth	r3, r3
 800084e:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 8000852:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 8000856:	7ad2      	ldrb	r2, [r2, #11]
 8000858:	4413      	add	r3, r2
 800085a:	f8a7 34e0 	strh.w	r3, [r7, #1248]	@ 0x4e0
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 800085e:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8000862:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8000866:	f207 41ac 	addw	r1, r7, #1196	@ 0x4ac
 800086a:	f107 0250 	add.w	r2, r7, #80	@ 0x50
 800086e:	9201      	str	r2, [sp, #4]
 8000870:	9300      	str	r3, [sp, #0]
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	2100      	movs	r1, #0
 8000878:	483a      	ldr	r0, [pc, #232]	@ (8000964 <main+0x2b0>)
 800087a:	f000 fa31 	bl	8000ce0 <UpdateShiftLights>

			  itoa(rpm, (char*)(result), 10);
 800087e:	f8b7 34e0 	ldrh.w	r3, [r7, #1248]	@ 0x4e0
 8000882:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8000886:	220a      	movs	r2, #10
 8000888:	4618      	mov	r0, r3
 800088a:	f00b fa58 	bl	800bd3e <itoa>
			  setrpmdata(result);
 800088e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000892:	4618      	mov	r0, r3
 8000894:	f001 fe12 	bl	80024bc <setrpmdata>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 8000898:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 800089c:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 80008a0:	7b1b      	ldrb	r3, [r3, #12]
 80008a2:	021b      	lsls	r3, r3, #8
 80008a4:	b29b      	uxth	r3, r3
 80008a6:	f507 629d 	add.w	r2, r7, #1256	@ 0x4e8
 80008aa:	f5a2 629d 	sub.w	r2, r2, #1256	@ 0x4e8
 80008ae:	7b52      	ldrb	r2, [r2, #13]
 80008b0:	4413      	add	r3, r2
 80008b2:	f8a7 34de 	strh.w	r3, [r7, #1246]	@ 0x4de
			  if (temp > 2150) {
 80008b6:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 80008ba:	f640 0266 	movw	r2, #2150	@ 0x866
 80008be:	4293      	cmp	r3, r2
 80008c0:	d910      	bls.n	80008e4 <main+0x230>
				setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 80008c2:	230f      	movs	r3, #15
 80008c4:	9303      	str	r3, [sp, #12]
 80008c6:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80008ca:	9302      	str	r3, [sp, #8]
 80008cc:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 80008d0:	9301      	str	r3, [sp, #4]
 80008d2:	2300      	movs	r3, #0
 80008d4:	9300      	str	r3, [sp, #0]
 80008d6:	23ff      	movs	r3, #255	@ 0xff
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	4821      	ldr	r0, [pc, #132]	@ (8000964 <main+0x2b0>)
 80008de:	f000 f8f3 	bl	8000ac8 <setColor>
 80008e2:	e00f      	b.n	8000904 <main+0x250>
			  } else {
				setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80008e4:	230f      	movs	r3, #15
 80008e6:	9303      	str	r3, [sp, #12]
 80008e8:	f107 0380 	add.w	r3, r7, #128	@ 0x80
 80008ec:	9302      	str	r3, [sp, #8]
 80008ee:	f207 43ac 	addw	r3, r7, #1196	@ 0x4ac
 80008f2:	9301      	str	r3, [sp, #4]
 80008f4:	2300      	movs	r3, #0
 80008f6:	9300      	str	r3, [sp, #0]
 80008f8:	2300      	movs	r3, #0
 80008fa:	2200      	movs	r2, #0
 80008fc:	2100      	movs	r1, #0
 80008fe:	4819      	ldr	r0, [pc, #100]	@ (8000964 <main+0x2b0>)
 8000900:	f000 f8e2 	bl	8000ac8 <setColor>
			  }
			  itoa(temp, result2, 10);
 8000904:	f8b7 34de 	ldrh.w	r3, [r7, #1246]	@ 0x4de
 8000908:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800090c:	220a      	movs	r2, #10
 800090e:	4618      	mov	r0, r3
 8000910:	f00b fa15 	bl	800bd3e <itoa>
			  settempdata(result2);
 8000914:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000918:	4618      	mov	r0, r3
 800091a:	f001 fe0b 	bl	8002534 <settempdata>
 800091e:	e01c      	b.n	800095a <main+0x2a6>
		  } else if (frame.can_id == 1520 + 33) {
 8000920:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000924:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f240 6211 	movw	r2, #1553	@ 0x611
 800092e:	4293      	cmp	r3, r2
 8000930:	d113      	bne.n	800095a <main+0x2a6>
			  uint8_t gear = ((uint8_t)frame.data[6]);
 8000932:	f507 639d 	add.w	r3, r7, #1256	@ 0x4e8
 8000936:	f5a3 639d 	sub.w	r3, r3, #1256	@ 0x4e8
 800093a:	7b9b      	ldrb	r3, [r3, #14]
 800093c:	f887 34e3 	strb.w	r3, [r7, #1251]	@ 0x4e3
			  itoa(gear, result3, 10);
 8000940:	f897 34e3 	ldrb.w	r3, [r7, #1251]	@ 0x4e3
 8000944:	f107 0114 	add.w	r1, r7, #20
 8000948:	220a      	movs	r2, #10
 800094a:	4618      	mov	r0, r3
 800094c:	f00b f9f7 	bl	800bd3e <itoa>
			  setgeardata(result3);
 8000950:	f107 0314 	add.w	r3, r7, #20
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fe2b 	bl	80025b0 <setgeardata>
		  }
	  }

	  domainscreen();
 800095a:	f001 fe67 	bl	800262c <domainscreen>
  {
 800095e:	e75c      	b.n	800081a <main+0x166>
 8000960:	0800c14c 	.word	0x0800c14c
 8000964:	200002cc 	.word	0x200002cc
 8000968:	6c6c756e 	.word	0x6c6c756e

0800096c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b094      	sub	sp, #80	@ 0x50
 8000970:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000972:	f107 0320 	add.w	r3, r7, #32
 8000976:	2230      	movs	r2, #48	@ 0x30
 8000978:	2100      	movs	r1, #0
 800097a:	4618      	mov	r0, r3
 800097c:	f00b fae2 	bl	800bf44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000980:	f107 030c 	add.w	r3, r7, #12
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
 8000988:	605a      	str	r2, [r3, #4]
 800098a:	609a      	str	r2, [r3, #8]
 800098c:	60da      	str	r2, [r3, #12]
 800098e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000990:	2300      	movs	r3, #0
 8000992:	60bb      	str	r3, [r7, #8]
 8000994:	4b29      	ldr	r3, [pc, #164]	@ (8000a3c <SystemClock_Config+0xd0>)
 8000996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000998:	4a28      	ldr	r2, [pc, #160]	@ (8000a3c <SystemClock_Config+0xd0>)
 800099a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800099e:	6413      	str	r3, [r2, #64]	@ 0x40
 80009a0:	4b26      	ldr	r3, [pc, #152]	@ (8000a3c <SystemClock_Config+0xd0>)
 80009a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009a8:	60bb      	str	r3, [r7, #8]
 80009aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009ac:	2300      	movs	r3, #0
 80009ae:	607b      	str	r3, [r7, #4]
 80009b0:	4b23      	ldr	r3, [pc, #140]	@ (8000a40 <SystemClock_Config+0xd4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009b8:	4a21      	ldr	r2, [pc, #132]	@ (8000a40 <SystemClock_Config+0xd4>)
 80009ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009be:	6013      	str	r3, [r2, #0]
 80009c0:	4b1f      	ldr	r3, [pc, #124]	@ (8000a40 <SystemClock_Config+0xd4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009d6:	2302      	movs	r3, #2
 80009d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80009de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80009e0:	2319      	movs	r3, #25
 80009e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80009e4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80009e8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80009ea:	2304      	movs	r3, #4
 80009ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80009ee:	2307      	movs	r3, #7
 80009f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f2:	f107 0320 	add.w	r3, r7, #32
 80009f6:	4618      	mov	r0, r3
 80009f8:	f004 fd84 	bl	8005504 <HAL_RCC_OscConfig>
 80009fc:	4603      	mov	r3, r0
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d001      	beq.n	8000a06 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000a02:	f000 f81f 	bl	8000a44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a06:	230f      	movs	r3, #15
 8000a08:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a12:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f004 ffe6 	bl	80059f4 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a2e:	f000 f809 	bl	8000a44 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3750      	adds	r7, #80	@ 0x50
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40007000 	.word	0x40007000

08000a44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a48:	b672      	cpsid	i
}
 8000a4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a4c:	bf00      	nop
 8000a4e:	e7fd      	b.n	8000a4c <Error_Handler+0x8>

08000a50 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	myMCP.reset();
 8000a54:	4806      	ldr	r0, [pc, #24]	@ (8000a70 <initializeMCP2515+0x20>)
 8000a56:	f001 feeb 	bl	8002830 <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 8000a5a:	2202      	movs	r2, #2
 8000a5c:	210e      	movs	r1, #14
 8000a5e:	4804      	ldr	r0, [pc, #16]	@ (8000a70 <initializeMCP2515+0x20>)
 8000a60:	f002 f8b8 	bl	8002bd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 8000a64:	4802      	ldr	r0, [pc, #8]	@ (8000a70 <initializeMCP2515+0x20>)
 8000a66:	f002 f869 	bl	8002b3c <_ZN7MCP251513setNormalModeEv>
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200001a4 	.word	0x200001a4

08000a74 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8000a7c:	6879      	ldr	r1, [r7, #4]
 8000a7e:	4804      	ldr	r0, [pc, #16]	@ (8000a90 <readMessage+0x1c>)
 8000a80:	f002 fbc0 	bl	8003204 <_ZN7MCP251511readMessageEP9can_frame>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200001a4 	.word	0x200001a4

08000a94 <_Z41__static_initialization_and_destruction_0v>:
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 8000a9a:	2310      	movs	r3, #16
 8000a9c:	9300      	str	r3, [sp, #0]
 8000a9e:	4b04      	ldr	r3, [pc, #16]	@ (8000ab0 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8000aa0:	220a      	movs	r2, #10
 8000aa2:	4904      	ldr	r1, [pc, #16]	@ (8000ab4 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8000aa4:	4804      	ldr	r0, [pc, #16]	@ (8000ab8 <_Z41__static_initialization_and_destruction_0v+0x24>)
 8000aa6:	f001 fe64 	bl	8002772 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020000 	.word	0x40020000
 8000ab4:	20000210 	.word	0x20000210
 8000ab8:	200001a4 	.word	0x200001a4

08000abc <_GLOBAL__sub_I_myMCP>:
 8000abc:	b580      	push	{r7, lr}
 8000abe:	af00      	add	r7, sp, #0
 8000ac0:	f7ff ffe8 	bl	8000a94 <_Z41__static_initialization_and_destruction_0v>
 8000ac4:	bd80      	pop	{r7, pc}
	...

08000ac8 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b088      	sub	sp, #32
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	461a      	mov	r2, r3
 8000ad6:	460b      	mov	r3, r1
 8000ad8:	71fb      	strb	r3, [r7, #7]
 8000ada:	4613      	mov	r3, r2
 8000adc:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8000ade:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000ae0:	4613      	mov	r3, r2
 8000ae2:	005b      	lsls	r3, r3, #1
 8000ae4:	4413      	add	r3, r2
 8000ae6:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8000ae8:	693b      	ldr	r3, [r7, #16]
 8000aea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000aec:	4413      	add	r3, r2
 8000aee:	79fa      	ldrb	r2, [r7, #7]
 8000af0:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	3301      	adds	r3, #1
 8000af6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000af8:	4413      	add	r3, r2
 8000afa:	79ba      	ldrb	r2, [r7, #6]
 8000afc:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8000afe:	693b      	ldr	r3, [r7, #16]
 8000b00:	3302      	adds	r3, #2
 8000b02:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b04:	4413      	add	r3, r2
 8000b06:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000b0a:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 8000b0c:	693b      	ldr	r3, [r7, #16]
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	e02a      	b.n	8000b68 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 8000b12:	2300      	movs	r3, #0
 8000b14:	61bb      	str	r3, [r7, #24]
 8000b16:	e021      	b.n	8000b5c <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 8000b18:	69fb      	ldr	r3, [r7, #28]
 8000b1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000b1c:	4413      	add	r3, r2
 8000b1e:	781b      	ldrb	r3, [r3, #0]
 8000b20:	461a      	mov	r2, r3
 8000b22:	69bb      	ldr	r3, [r7, #24]
 8000b24:	fa02 f303 	lsl.w	r3, r2, r3
 8000b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d009      	beq.n	8000b44 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 8000b30:	69fb      	ldr	r3, [r7, #28]
 8000b32:	00da      	lsls	r2, r3, #3
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	4413      	add	r3, r2
 8000b38:	005b      	lsls	r3, r3, #1
 8000b3a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b3c:	4413      	add	r3, r2
 8000b3e:	2246      	movs	r2, #70	@ 0x46
 8000b40:	801a      	strh	r2, [r3, #0]
 8000b42:	e008      	b.n	8000b56 <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	00da      	lsls	r2, r3, #3
 8000b48:	69bb      	ldr	r3, [r7, #24]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	005b      	lsls	r3, r3, #1
 8000b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b50:	4413      	add	r3, r2
 8000b52:	2223      	movs	r2, #35	@ 0x23
 8000b54:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 8000b56:	69bb      	ldr	r3, [r7, #24]
 8000b58:	3301      	adds	r3, #1
 8000b5a:	61bb      	str	r3, [r7, #24]
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	2b07      	cmp	r3, #7
 8000b60:	ddda      	ble.n	8000b18 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	693b      	ldr	r3, [r7, #16]
 8000b6a:	3302      	adds	r3, #2
 8000b6c:	69fa      	ldr	r2, [r7, #28]
 8000b6e:	429a      	cmp	r2, r3
 8000b70:	ddcf      	ble.n	8000b12 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000b72:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000b76:	617b      	str	r3, [r7, #20]
 8000b78:	e008      	b.n	8000b8c <setColor+0xc4>
    	ledbytes[i] = 0;
 8000b7a:	697b      	ldr	r3, [r7, #20]
 8000b7c:	005b      	lsls	r3, r3, #1
 8000b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b80:	4413      	add	r3, r2
 8000b82:	2200      	movs	r2, #0
 8000b84:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	3301      	adds	r3, #1
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	697b      	ldr	r3, [r7, #20]
 8000b8e:	f240 2215 	movw	r2, #533	@ 0x215
 8000b92:	4293      	cmp	r3, r2
 8000b94:	ddf1      	ble.n	8000b7a <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000b96:	f240 2316 	movw	r3, #534	@ 0x216
 8000b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f006 f8a2 	bl	8006ce8 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8000ba4:	bf00      	nop
 8000ba6:	4b05      	ldr	r3, [pc, #20]	@ (8000bbc <setColor+0xf4>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d0fb      	beq.n	8000ba6 <setColor+0xde>
    datasentflag = 0;
 8000bae:	4b03      	ldr	r3, [pc, #12]	@ (8000bbc <setColor+0xf4>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	601a      	str	r2, [r3, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	3720      	adds	r7, #32
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	200001b4 	.word	0x200001b4

08000bc0 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b088      	sub	sp, #32
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	60f8      	str	r0, [r7, #12]
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
 8000bd2:	e013      	b.n	8000bfc <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8000bd4:	69fb      	ldr	r3, [r7, #28]
 8000bd6:	687a      	ldr	r2, [r7, #4]
 8000bd8:	4413      	add	r3, r2
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8000bde:	69fb      	ldr	r3, [r7, #28]
 8000be0:	3301      	adds	r3, #1
 8000be2:	687a      	ldr	r2, [r7, #4]
 8000be4:	4413      	add	r3, r2
 8000be6:	2200      	movs	r2, #0
 8000be8:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	3302      	adds	r3, #2
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	22ff      	movs	r2, #255	@ 0xff
 8000bf4:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3303      	adds	r3, #3
 8000bfa:	61fb      	str	r3, [r7, #28]
 8000bfc:	69fb      	ldr	r3, [r7, #28]
 8000bfe:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c00:	dde8      	ble.n	8000bd4 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8000c02:	2300      	movs	r3, #0
 8000c04:	61bb      	str	r3, [r7, #24]
 8000c06:	e02a      	b.n	8000c5e <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
 8000c0c:	e021      	b.n	8000c52 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 8000c0e:	69bb      	ldr	r3, [r7, #24]
 8000c10:	687a      	ldr	r2, [r7, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	461a      	mov	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d009      	beq.n	8000c3a <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	00da      	lsls	r2, r3, #3
 8000c2a:	697b      	ldr	r3, [r7, #20]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	683a      	ldr	r2, [r7, #0]
 8000c32:	4413      	add	r3, r2
 8000c34:	2246      	movs	r2, #70	@ 0x46
 8000c36:	801a      	strh	r2, [r3, #0]
 8000c38:	e008      	b.n	8000c4c <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 8000c3a:	69bb      	ldr	r3, [r7, #24]
 8000c3c:	00da      	lsls	r2, r3, #3
 8000c3e:	697b      	ldr	r3, [r7, #20]
 8000c40:	4413      	add	r3, r2
 8000c42:	005b      	lsls	r3, r3, #1
 8000c44:	683a      	ldr	r2, [r7, #0]
 8000c46:	4413      	add	r3, r2
 8000c48:	2223      	movs	r2, #35	@ 0x23
 8000c4a:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	3301      	adds	r3, #1
 8000c50:	617b      	str	r3, [r7, #20]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	2b07      	cmp	r3, #7
 8000c56:	ddda      	ble.n	8000c0e <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8000c58:	69bb      	ldr	r3, [r7, #24]
 8000c5a:	3301      	adds	r3, #1
 8000c5c:	61bb      	str	r3, [r7, #24]
 8000c5e:	69bb      	ldr	r3, [r7, #24]
 8000c60:	2b2f      	cmp	r3, #47	@ 0x2f
 8000c62:	ddd1      	ble.n	8000c08 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000c64:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000c68:	613b      	str	r3, [r7, #16]
 8000c6a:	e008      	b.n	8000c7e <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8000c6c:	693b      	ldr	r3, [r7, #16]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	2200      	movs	r2, #0
 8000c76:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8000c78:	693b      	ldr	r3, [r7, #16]
 8000c7a:	3301      	adds	r3, #1
 8000c7c:	613b      	str	r3, [r7, #16]
 8000c7e:	693b      	ldr	r3, [r7, #16]
 8000c80:	f240 2215 	movw	r2, #533	@ 0x215
 8000c84:	4293      	cmp	r3, r2
 8000c86:	ddf1      	ble.n	8000c6c <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8000c88:	f240 2316 	movw	r3, #534	@ 0x216
 8000c8c:	683a      	ldr	r2, [r7, #0]
 8000c8e:	68b9      	ldr	r1, [r7, #8]
 8000c90:	68f8      	ldr	r0, [r7, #12]
 8000c92:	f006 f829 	bl	8006ce8 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8000c96:	bf00      	nop
 8000c98:	4b06      	ldr	r3, [pc, #24]	@ (8000cb4 <shiftLightsInit+0xf4>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d0fb      	beq.n	8000c98 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8000ca0:	4b04      	ldr	r3, [pc, #16]	@ (8000cb4 <shiftLightsInit+0xf4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	603b      	str	r3, [r7, #0]
}
 8000caa:	bf00      	nop
 8000cac:	3720      	adds	r7, #32
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200001b4 	.word	0x200001b4

08000cb8 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	4805      	ldr	r0, [pc, #20]	@ (8000cd8 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8000cc4:	f006 f9c0 	bl	8007048 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8000cc8:	4b04      	ldr	r3, [pc, #16]	@ (8000cdc <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8000cca:	2201      	movs	r2, #1
 8000ccc:	601a      	str	r2, [r3, #0]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200002cc 	.word	0x200002cc
 8000cdc:	200001b4 	.word	0x200001b4

08000ce0 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b08a      	sub	sp, #40	@ 0x28
 8000ce4:	af04      	add	r7, sp, #16
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]
 8000cec:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8000cee:	6a3b      	ldr	r3, [r7, #32]
 8000cf0:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	dd06      	ble.n	8000d06 <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	687a      	ldr	r2, [r7, #4]
 8000cfc:	68b9      	ldr	r1, [r7, #8]
 8000cfe:	68f8      	ldr	r0, [r7, #12]
 8000d00:	f000 f8b6 	bl	8000e70 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8000d04:	e02a      	b.n	8000d5c <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8000d06:	2302      	movs	r3, #2
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	e024      	b.n	8000d56 <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8000d12:	3b02      	subs	r3, #2
 8000d14:	009b      	lsls	r3, r3, #2
 8000d16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000d18:	4413      	add	r3, r2
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	6a3a      	ldr	r2, [r7, #32]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	db08      	blt.n	8000d34 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8000d22:	697b      	ldr	r3, [r7, #20]
 8000d24:	9300      	str	r3, [sp, #0]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	687a      	ldr	r2, [r7, #4]
 8000d2a:	68b9      	ldr	r1, [r7, #8]
 8000d2c:	68f8      	ldr	r0, [r7, #12]
 8000d2e:	f000 f819 	bl	8000d64 <lightOn>
 8000d32:	e00d      	b.n	8000d50 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	9303      	str	r3, [sp, #12]
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	9302      	str	r3, [sp, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	9301      	str	r3, [sp, #4]
 8000d40:	2300      	movs	r3, #0
 8000d42:	9300      	str	r3, [sp, #0]
 8000d44:	2300      	movs	r3, #0
 8000d46:	2200      	movs	r2, #0
 8000d48:	68b9      	ldr	r1, [r7, #8]
 8000d4a:	68f8      	ldr	r0, [r7, #12]
 8000d4c:	f7ff febc 	bl	8000ac8 <setColor>
	for (int i = 2; i < 14; i++) {
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b0d      	cmp	r3, #13
 8000d5a:	ddd7      	ble.n	8000d0c <UpdateShiftLights+0x2c>
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}

08000d64 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b088      	sub	sp, #32
 8000d68:	af04      	add	r7, sp, #16
 8000d6a:	60f8      	str	r0, [r7, #12]
 8000d6c:	60b9      	str	r1, [r7, #8]
 8000d6e:	607a      	str	r2, [r7, #4]
 8000d70:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8000d72:	69bb      	ldr	r3, [r7, #24]
 8000d74:	2b0d      	cmp	r3, #13
 8000d76:	d140      	bne.n	8000dfa <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	687a      	ldr	r2, [r7, #4]
 8000d7c:	68b9      	ldr	r1, [r7, #8]
 8000d7e:	68f8      	ldr	r0, [r7, #12]
 8000d80:	f7ff ff1e 	bl	8000bc0 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8000d84:	2300      	movs	r3, #0
 8000d86:	9303      	str	r3, [sp, #12]
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	9302      	str	r3, [sp, #8]
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	9301      	str	r3, [sp, #4]
 8000d90:	2300      	movs	r3, #0
 8000d92:	9300      	str	r3, [sp, #0]
 8000d94:	2300      	movs	r3, #0
 8000d96:	2200      	movs	r2, #0
 8000d98:	2100      	movs	r1, #0
 8000d9a:	4834      	ldr	r0, [pc, #208]	@ (8000e6c <lightOn+0x108>)
 8000d9c:	f7ff fe94 	bl	8000ac8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8000da0:	2301      	movs	r3, #1
 8000da2:	9303      	str	r3, [sp, #12]
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	9302      	str	r3, [sp, #8]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	9301      	str	r3, [sp, #4]
 8000dac:	2300      	movs	r3, #0
 8000dae:	9300      	str	r3, [sp, #0]
 8000db0:	2300      	movs	r3, #0
 8000db2:	2200      	movs	r2, #0
 8000db4:	2100      	movs	r1, #0
 8000db6:	482d      	ldr	r0, [pc, #180]	@ (8000e6c <lightOn+0x108>)
 8000db8:	f7ff fe86 	bl	8000ac8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8000dbc:	230e      	movs	r3, #14
 8000dbe:	9303      	str	r3, [sp, #12]
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	9302      	str	r3, [sp, #8]
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	9301      	str	r3, [sp, #4]
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	2300      	movs	r3, #0
 8000dce:	2200      	movs	r2, #0
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	4826      	ldr	r0, [pc, #152]	@ (8000e6c <lightOn+0x108>)
 8000dd4:	f7ff fe78 	bl	8000ac8 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8000dd8:	230f      	movs	r3, #15
 8000dda:	9303      	str	r3, [sp, #12]
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	9302      	str	r3, [sp, #8]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	2300      	movs	r3, #0
 8000de6:	9300      	str	r3, [sp, #0]
 8000de8:	2300      	movs	r3, #0
 8000dea:	2200      	movs	r2, #0
 8000dec:	2100      	movs	r1, #0
 8000dee:	481f      	ldr	r0, [pc, #124]	@ (8000e6c <lightOn+0x108>)
 8000df0:	f7ff fe6a 	bl	8000ac8 <setColor>
		HAL_Delay(5);
 8000df4:	2005      	movs	r0, #5
 8000df6:	f002 facd 	bl	8003394 <HAL_Delay>
	}
	if (index < 6) {
 8000dfa:	69bb      	ldr	r3, [r7, #24]
 8000dfc:	2b05      	cmp	r3, #5
 8000dfe:	dc0e      	bgt.n	8000e1e <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	9303      	str	r3, [sp, #12]
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	9302      	str	r3, [sp, #8]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	9301      	str	r3, [sp, #4]
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	9300      	str	r3, [sp, #0]
 8000e10:	2300      	movs	r3, #0
 8000e12:	22ff      	movs	r2, #255	@ 0xff
 8000e14:	68b9      	ldr	r1, [r7, #8]
 8000e16:	68f8      	ldr	r0, [r7, #12]
 8000e18:	f7ff fe56 	bl	8000ac8 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8000e1c:	e022      	b.n	8000e64 <lightOn+0x100>
	} else if (index < 10) {
 8000e1e:	69bb      	ldr	r3, [r7, #24]
 8000e20:	2b09      	cmp	r3, #9
 8000e22:	dc0e      	bgt.n	8000e42 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	9303      	str	r3, [sp, #12]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	9302      	str	r3, [sp, #8]
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	9301      	str	r3, [sp, #4]
 8000e30:	2300      	movs	r3, #0
 8000e32:	9300      	str	r3, [sp, #0]
 8000e34:	23ff      	movs	r3, #255	@ 0xff
 8000e36:	2200      	movs	r2, #0
 8000e38:	68b9      	ldr	r1, [r7, #8]
 8000e3a:	68f8      	ldr	r0, [r7, #12]
 8000e3c:	f7ff fe44 	bl	8000ac8 <setColor>
}
 8000e40:	e010      	b.n	8000e64 <lightOn+0x100>
	} else if (index < 14){
 8000e42:	69bb      	ldr	r3, [r7, #24]
 8000e44:	2b0d      	cmp	r3, #13
 8000e46:	dc0d      	bgt.n	8000e64 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8000e48:	69bb      	ldr	r3, [r7, #24]
 8000e4a:	9303      	str	r3, [sp, #12]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	9302      	str	r3, [sp, #8]
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	9301      	str	r3, [sp, #4]
 8000e54:	23ff      	movs	r3, #255	@ 0xff
 8000e56:	9300      	str	r3, [sp, #0]
 8000e58:	2300      	movs	r3, #0
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	68b9      	ldr	r1, [r7, #8]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff fe32 	bl	8000ac8 <setColor>
}
 8000e64:	bf00      	nop
 8000e66:	3710      	adds	r7, #16
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	200002cc 	.word	0x200002cc

08000e70 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	@ 0x30
 8000e74:	af04      	add	r7, sp, #16
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8000e7e:	2307      	movs	r3, #7
 8000e80:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8000e82:	2300      	movs	r3, #0
 8000e84:	61fb      	str	r3, [r7, #28]
 8000e86:	e026      	b.n	8000ed6 <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8000e88:	697a      	ldr	r2, [r7, #20]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	1ad3      	subs	r3, r2, r3
 8000e8e:	9303      	str	r3, [sp, #12]
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	9302      	str	r3, [sp, #8]
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	2300      	movs	r3, #0
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	23ff      	movs	r3, #255	@ 0xff
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	68b9      	ldr	r1, [r7, #8]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff fe10 	bl	8000ac8 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	4413      	add	r3, r2
 8000eae:	3301      	adds	r3, #1
 8000eb0:	9303      	str	r3, [sp, #12]
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	9302      	str	r3, [sp, #8]
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	9301      	str	r3, [sp, #4]
 8000eba:	2300      	movs	r3, #0
 8000ebc:	9300      	str	r3, [sp, #0]
 8000ebe:	23ff      	movs	r3, #255	@ 0xff
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	68b9      	ldr	r1, [r7, #8]
 8000ec4:	68f8      	ldr	r0, [r7, #12]
 8000ec6:	f7ff fdff 	bl	8000ac8 <setColor>
		HAL_Delay(20);
 8000eca:	2014      	movs	r0, #20
 8000ecc:	f002 fa62 	bl	8003394 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	3301      	adds	r3, #1
 8000ed4:	61fb      	str	r3, [r7, #28]
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	2b05      	cmp	r3, #5
 8000eda:	ddd5      	ble.n	8000e88 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8000edc:	2300      	movs	r3, #0
 8000ede:	61bb      	str	r3, [r7, #24]
 8000ee0:	e026      	b.n	8000f30 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8000ee2:	697a      	ldr	r2, [r7, #20]
 8000ee4:	69bb      	ldr	r3, [r7, #24]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	9303      	str	r3, [sp, #12]
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	9302      	str	r3, [sp, #8]
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	9301      	str	r3, [sp, #4]
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	9300      	str	r3, [sp, #0]
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	2200      	movs	r2, #0
 8000efa:	68b9      	ldr	r1, [r7, #8]
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f7ff fde3 	bl	8000ac8 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	69bb      	ldr	r3, [r7, #24]
 8000f06:	4413      	add	r3, r2
 8000f08:	3301      	adds	r3, #1
 8000f0a:	9303      	str	r3, [sp, #12]
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	9302      	str	r3, [sp, #8]
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	9301      	str	r3, [sp, #4]
 8000f14:	2300      	movs	r3, #0
 8000f16:	9300      	str	r3, [sp, #0]
 8000f18:	2300      	movs	r3, #0
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	68b9      	ldr	r1, [r7, #8]
 8000f1e:	68f8      	ldr	r0, [r7, #12]
 8000f20:	f7ff fdd2 	bl	8000ac8 <setColor>
		HAL_Delay(20);
 8000f24:	2014      	movs	r0, #20
 8000f26:	f002 fa35 	bl	8003394 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8000f2a:	69bb      	ldr	r3, [r7, #24]
 8000f2c:	3301      	adds	r3, #1
 8000f2e:	61bb      	str	r3, [r7, #24]
 8000f30:	69bb      	ldr	r3, [r7, #24]
 8000f32:	2b05      	cmp	r3, #5
 8000f34:	ddd5      	ble.n	8000ee2 <startUp+0x72>
	}
}
 8000f36:	bf00      	nop
 8000f38:	bf00      	nop
 8000f3a:	3720      	adds	r7, #32
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}

08000f40 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000f44:	4b18      	ldr	r3, [pc, #96]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f46:	4a19      	ldr	r2, [pc, #100]	@ (8000fac <MX_SPI1_Init+0x6c>)
 8000f48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000f4a:	4b17      	ldr	r3, [pc, #92]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f4c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000f50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000f52:	4b15      	ldr	r3, [pc, #84]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000f58:	4b13      	ldr	r3, [pc, #76]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f60:	4b11      	ldr	r3, [pc, #68]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f66:	4b10      	ldr	r3, [pc, #64]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f6e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000f74:	4b0c      	ldr	r3, [pc, #48]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f76:	2208      	movs	r2, #8
 8000f78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f80:	4b09      	ldr	r3, [pc, #36]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f86:	4b08      	ldr	r3, [pc, #32]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000f8c:	4b06      	ldr	r3, [pc, #24]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f8e:	220a      	movs	r2, #10
 8000f90:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000f92:	4805      	ldr	r0, [pc, #20]	@ (8000fa8 <MX_SPI1_Init+0x68>)
 8000f94:	f004 fee6 	bl	8005d64 <HAL_SPI_Init>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8000f9e:	f7ff fd51 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	200001b8 	.word	0x200001b8
 8000fac:	40013000 	.word	0x40013000

08000fb0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000fb4:	4b17      	ldr	r3, [pc, #92]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fb6:	4a18      	ldr	r2, [pc, #96]	@ (8001018 <MX_SPI2_Init+0x68>)
 8000fb8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000fba:	4b16      	ldr	r3, [pc, #88]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fbc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000fc0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000fc2:	4b14      	ldr	r3, [pc, #80]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000fc8:	4b12      	ldr	r3, [pc, #72]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fce:	4b11      	ldr	r3, [pc, #68]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fd4:	4b0f      	ldr	r3, [pc, #60]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000fda:	4b0e      	ldr	r3, [pc, #56]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fdc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000fe0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fee:	4b09      	ldr	r3, [pc, #36]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ff4:	4b07      	ldr	r3, [pc, #28]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ffa:	4b06      	ldr	r3, [pc, #24]	@ (8001014 <MX_SPI2_Init+0x64>)
 8000ffc:	220a      	movs	r2, #10
 8000ffe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001000:	4804      	ldr	r0, [pc, #16]	@ (8001014 <MX_SPI2_Init+0x64>)
 8001002:	f004 feaf 	bl	8005d64 <HAL_SPI_Init>
 8001006:	4603      	mov	r3, r0
 8001008:	2b00      	cmp	r3, #0
 800100a:	d001      	beq.n	8001010 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800100c:	f7ff fd1a 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001010:	bf00      	nop
 8001012:	bd80      	pop	{r7, pc}
 8001014:	20000210 	.word	0x20000210
 8001018:	40003800 	.word	0x40003800

0800101c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b08c      	sub	sp, #48	@ 0x30
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	f107 031c 	add.w	r3, r7, #28
 8001028:	2200      	movs	r2, #0
 800102a:	601a      	str	r2, [r3, #0]
 800102c:	605a      	str	r2, [r3, #4]
 800102e:	609a      	str	r2, [r3, #8]
 8001030:	60da      	str	r2, [r3, #12]
 8001032:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a4a      	ldr	r2, [pc, #296]	@ (8001164 <HAL_SPI_MspInit+0x148>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d15c      	bne.n	80010f8 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800103e:	2300      	movs	r3, #0
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	4b49      	ldr	r3, [pc, #292]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001044:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001046:	4a48      	ldr	r2, [pc, #288]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001048:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800104c:	6453      	str	r3, [r2, #68]	@ 0x44
 800104e:	4b46      	ldr	r3, [pc, #280]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001050:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001052:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001056:	61bb      	str	r3, [r7, #24]
 8001058:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105a:	2300      	movs	r3, #0
 800105c:	617b      	str	r3, [r7, #20]
 800105e:	4b42      	ldr	r3, [pc, #264]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001062:	4a41      	ldr	r2, [pc, #260]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001064:	f043 0301 	orr.w	r3, r3, #1
 8001068:	6313      	str	r3, [r2, #48]	@ 0x30
 800106a:	4b3f      	ldr	r3, [pc, #252]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 800106c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106e:	f003 0301 	and.w	r3, r3, #1
 8001072:	617b      	str	r3, [r7, #20]
 8001074:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001076:	23a0      	movs	r3, #160	@ 0xa0
 8001078:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107a:	2302      	movs	r3, #2
 800107c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800107e:	2300      	movs	r3, #0
 8001080:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001082:	2303      	movs	r3, #3
 8001084:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001086:	2305      	movs	r3, #5
 8001088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 031c 	add.w	r3, r7, #28
 800108e:	4619      	mov	r1, r3
 8001090:	4836      	ldr	r0, [pc, #216]	@ (800116c <HAL_SPI_MspInit+0x150>)
 8001092:	f002 fe47 	bl	8003d24 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001096:	4b36      	ldr	r3, [pc, #216]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 8001098:	4a36      	ldr	r2, [pc, #216]	@ (8001174 <HAL_SPI_MspInit+0x158>)
 800109a:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 800109c:	4b34      	ldr	r3, [pc, #208]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 800109e:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 80010a2:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010a6:	2240      	movs	r2, #64	@ 0x40
 80010a8:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80010aa:	4b31      	ldr	r3, [pc, #196]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80010b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80010b8:	4b2d      	ldr	r3, [pc, #180]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010ba:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010be:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80010c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010c2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80010c8:	4b29      	ldr	r3, [pc, #164]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b28      	ldr	r3, [pc, #160]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80010d4:	4b26      	ldr	r3, [pc, #152]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 80010da:	4825      	ldr	r0, [pc, #148]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010dc:	f002 fa90 	bl	8003600 <HAL_DMA_Init>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 80010e6:	f7ff fcad 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a20      	ldr	r2, [pc, #128]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010ee:	649a      	str	r2, [r3, #72]	@ 0x48
 80010f0:	4a1f      	ldr	r2, [pc, #124]	@ (8001170 <HAL_SPI_MspInit+0x154>)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80010f6:	e031      	b.n	800115c <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a1e      	ldr	r2, [pc, #120]	@ (8001178 <HAL_SPI_MspInit+0x15c>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d12c      	bne.n	800115c <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	613b      	str	r3, [r7, #16]
 8001106:	4b18      	ldr	r3, [pc, #96]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800110a:	4a17      	ldr	r2, [pc, #92]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 800110c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001110:	6413      	str	r3, [r2, #64]	@ 0x40
 8001112:	4b15      	ldr	r3, [pc, #84]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800111e:	2300      	movs	r3, #0
 8001120:	60fb      	str	r3, [r7, #12]
 8001122:	4b11      	ldr	r3, [pc, #68]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001126:	4a10      	ldr	r2, [pc, #64]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001128:	f043 0302 	orr.w	r3, r3, #2
 800112c:	6313      	str	r3, [r2, #48]	@ 0x30
 800112e:	4b0e      	ldr	r3, [pc, #56]	@ (8001168 <HAL_SPI_MspInit+0x14c>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	f003 0302 	and.w	r3, r3, #2
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 800113a:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 800113e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001140:	2302      	movs	r3, #2
 8001142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001148:	2303      	movs	r3, #3
 800114a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800114c:	2305      	movs	r3, #5
 800114e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	4809      	ldr	r0, [pc, #36]	@ (800117c <HAL_SPI_MspInit+0x160>)
 8001158:	f002 fde4 	bl	8003d24 <HAL_GPIO_Init>
}
 800115c:	bf00      	nop
 800115e:	3730      	adds	r7, #48	@ 0x30
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40013000 	.word	0x40013000
 8001168:	40023800 	.word	0x40023800
 800116c:	40020000 	.word	0x40020000
 8001170:	20000268 	.word	0x20000268
 8001174:	40026458 	.word	0x40026458
 8001178:	40003800 	.word	0x40003800
 800117c:	40020400 	.word	0x40020400

08001180 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
 800118a:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_MspInit+0x4c>)
 800118c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118e:	4a0f      	ldr	r2, [pc, #60]	@ (80011cc <HAL_MspInit+0x4c>)
 8001190:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001194:	6453      	str	r3, [r2, #68]	@ 0x44
 8001196:	4b0d      	ldr	r3, [pc, #52]	@ (80011cc <HAL_MspInit+0x4c>)
 8001198:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800119a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800119e:	607b      	str	r3, [r7, #4]
 80011a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	603b      	str	r3, [r7, #0]
 80011a6:	4b09      	ldr	r3, [pc, #36]	@ (80011cc <HAL_MspInit+0x4c>)
 80011a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011aa:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_MspInit+0x4c>)
 80011ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011b2:	4b06      	ldr	r3, [pc, #24]	@ (80011cc <HAL_MspInit+0x4c>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011ba:	603b      	str	r3, [r7, #0]
 80011bc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40023800 	.word	0x40023800

080011d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <NMI_Handler+0x4>

080011d8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <HardFault_Handler+0x4>

080011e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <MemManage_Handler+0x4>

080011e8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <BusFault_Handler+0x4>

080011f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011f0:	b480      	push	{r7}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011f4:	bf00      	nop
 80011f6:	e7fd      	b.n	80011f4 <UsageFault_Handler+0x4>

080011f8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800120a:	bf00      	nop
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr

08001214 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr

08001222 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001222:	b580      	push	{r7, lr}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001226:	f002 f895 	bl	8003354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001234:	4802      	ldr	r0, [pc, #8]	@ (8001240 <DMA1_Stream0_IRQHandler+0x10>)
 8001236:	f002 fb0b 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000314 	.word	0x20000314

08001244 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001248:	4802      	ldr	r0, [pc, #8]	@ (8001254 <DMA2_Stream3_IRQHandler+0x10>)
 800124a:	f002 fb01 	bl	8003850 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000268 	.word	0x20000268

08001258 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <OTG_FS_IRQHandler+0x10>)
 800125e:	f003 f842 	bl	80042e6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20001084 	.word	0x20001084

0800126c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return 1;
 8001270:	2301      	movs	r3, #1
}
 8001272:	4618      	mov	r0, r3
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <_kill>:

int _kill(int pid, int sig)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001286:	f00a fedf 	bl	800c048 <__errno>
 800128a:	4603      	mov	r3, r0
 800128c:	2216      	movs	r2, #22
 800128e:	601a      	str	r2, [r3, #0]
  return -1;
 8001290:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001294:	4618      	mov	r0, r3
 8001296:	3708      	adds	r7, #8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}

0800129c <_exit>:

void _exit (int status)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80012a4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80012a8:	6878      	ldr	r0, [r7, #4]
 80012aa:	f7ff ffe7 	bl	800127c <_kill>
  while (1) {}    /* Make sure we hang here */
 80012ae:	bf00      	nop
 80012b0:	e7fd      	b.n	80012ae <_exit+0x12>
	...

080012b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012bc:	4a14      	ldr	r2, [pc, #80]	@ (8001310 <_sbrk+0x5c>)
 80012be:	4b15      	ldr	r3, [pc, #84]	@ (8001314 <_sbrk+0x60>)
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012c8:	4b13      	ldr	r3, [pc, #76]	@ (8001318 <_sbrk+0x64>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d102      	bne.n	80012d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012d0:	4b11      	ldr	r3, [pc, #68]	@ (8001318 <_sbrk+0x64>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	@ (800131c <_sbrk+0x68>)
 80012d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012d6:	4b10      	ldr	r3, [pc, #64]	@ (8001318 <_sbrk+0x64>)
 80012d8:	681a      	ldr	r2, [r3, #0]
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	4413      	add	r3, r2
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d207      	bcs.n	80012f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012e4:	f00a feb0 	bl	800c048 <__errno>
 80012e8:	4603      	mov	r3, r0
 80012ea:	220c      	movs	r2, #12
 80012ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012f2:	e009      	b.n	8001308 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012f4:	4b08      	ldr	r3, [pc, #32]	@ (8001318 <_sbrk+0x64>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012fa:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <_sbrk+0x64>)
 80012fc:	681a      	ldr	r2, [r3, #0]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4413      	add	r3, r2
 8001302:	4a05      	ldr	r2, [pc, #20]	@ (8001318 <_sbrk+0x64>)
 8001304:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001306:	68fb      	ldr	r3, [r7, #12]
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	20010000 	.word	0x20010000
 8001314:	00000400 	.word	0x00000400
 8001318:	200002c8 	.word	0x200002c8
 800131c:	200018d8 	.word	0x200018d8

08001320 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <SystemInit+0x20>)
 8001326:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800132a:	4a05      	ldr	r2, [pc, #20]	@ (8001340 <SystemInit+0x20>)
 800132c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001330:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	e000ed00 	.word	0xe000ed00

08001344 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	@ 0x38
 8001348:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001358:	f107 0320 	add.w	r3, r7, #32
 800135c:	2200      	movs	r2, #0
 800135e:	601a      	str	r2, [r3, #0]
 8001360:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
 8001370:	615a      	str	r2, [r3, #20]
 8001372:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001374:	4b2c      	ldr	r3, [pc, #176]	@ (8001428 <MX_TIM4_Init+0xe4>)
 8001376:	4a2d      	ldr	r2, [pc, #180]	@ (800142c <MX_TIM4_Init+0xe8>)
 8001378:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800137a:	4b2b      	ldr	r3, [pc, #172]	@ (8001428 <MX_TIM4_Init+0xe4>)
 800137c:	2200      	movs	r2, #0
 800137e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001380:	4b29      	ldr	r3, [pc, #164]	@ (8001428 <MX_TIM4_Init+0xe4>)
 8001382:	2200      	movs	r2, #0
 8001384:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 8001386:	4b28      	ldr	r3, [pc, #160]	@ (8001428 <MX_TIM4_Init+0xe4>)
 8001388:	2269      	movs	r2, #105	@ 0x69
 800138a:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b26      	ldr	r3, [pc, #152]	@ (8001428 <MX_TIM4_Init+0xe4>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <MX_TIM4_Init+0xe4>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001398:	4823      	ldr	r0, [pc, #140]	@ (8001428 <MX_TIM4_Init+0xe4>)
 800139a:	f005 fbfd 	bl	8006b98 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80013a4:	f7ff fb4e 	bl	8000a44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80013b2:	4619      	mov	r1, r3
 80013b4:	481c      	ldr	r0, [pc, #112]	@ (8001428 <MX_TIM4_Init+0xe4>)
 80013b6:	f005 ffcf 	bl	8007358 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80013c0:	f7ff fb40 	bl	8000a44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013c4:	4818      	ldr	r0, [pc, #96]	@ (8001428 <MX_TIM4_Init+0xe4>)
 80013c6:	f005 fc36 	bl	8006c36 <HAL_TIM_PWM_Init>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80013d0:	f7ff fb38 	bl	8000a44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013d4:	2300      	movs	r3, #0
 80013d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013d8:	2300      	movs	r3, #0
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	4619      	mov	r1, r3
 80013e2:	4811      	ldr	r0, [pc, #68]	@ (8001428 <MX_TIM4_Init+0xe4>)
 80013e4:	f006 fc3c 	bl	8007c60 <HAL_TIMEx_MasterConfigSynchronization>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80013ee:	f7ff fb29 	bl	8000a44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013f2:	2360      	movs	r3, #96	@ 0x60
 80013f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013fa:	2300      	movs	r3, #0
 80013fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013fe:	2300      	movs	r3, #0
 8001400:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	4619      	mov	r1, r3
 8001408:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_TIM4_Init+0xe4>)
 800140a:	f005 fee3 	bl	80071d4 <HAL_TIM_PWM_ConfigChannel>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8001414:	f7ff fb16 	bl	8000a44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001418:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_TIM4_Init+0xe4>)
 800141a:	f000 f85d 	bl	80014d8 <HAL_TIM_MspPostInit>

}
 800141e:	bf00      	nop
 8001420:	3738      	adds	r7, #56	@ 0x38
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	200002cc 	.word	0x200002cc
 800142c:	40000800 	.word	0x40000800

08001430 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a22      	ldr	r2, [pc, #136]	@ (80014c8 <HAL_TIM_Base_MspInit+0x98>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d13d      	bne.n	80014be <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	60fb      	str	r3, [r7, #12]
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <HAL_TIM_Base_MspInit+0x9c>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800144a:	4a20      	ldr	r2, [pc, #128]	@ (80014cc <HAL_TIM_Base_MspInit+0x9c>)
 800144c:	f043 0304 	orr.w	r3, r3, #4
 8001450:	6413      	str	r3, [r2, #64]	@ 0x40
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <HAL_TIM_Base_MspInit+0x9c>)
 8001454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001456:	f003 0304 	and.w	r3, r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
 800145c:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 800145e:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001460:	4a1c      	ldr	r2, [pc, #112]	@ (80014d4 <HAL_TIM_Base_MspInit+0xa4>)
 8001462:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001466:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800146a:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800146c:	4b18      	ldr	r3, [pc, #96]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 800146e:	2240      	movs	r2, #64	@ 0x40
 8001470:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001472:	4b17      	ldr	r3, [pc, #92]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001478:	4b15      	ldr	r3, [pc, #84]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 800147a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800147e:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001480:	4b13      	ldr	r3, [pc, #76]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001482:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001486:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001488:	4b11      	ldr	r3, [pc, #68]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 800148a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800148e:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 8001490:	4b0f      	ldr	r3, [pc, #60]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001492:	2200      	movs	r2, #0
 8001494:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001496:	4b0e      	ldr	r3, [pc, #56]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 8001498:	2200      	movs	r2, #0
 800149a:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800149c:	4b0c      	ldr	r3, [pc, #48]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 800149e:	2200      	movs	r2, #0
 80014a0:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80014a2:	480b      	ldr	r0, [pc, #44]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 80014a4:	f002 f8ac 	bl	8003600 <HAL_DMA_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80014ae:	f7ff fac9 	bl	8000a44 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4a06      	ldr	r2, [pc, #24]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 80014b6:	625a      	str	r2, [r3, #36]	@ 0x24
 80014b8:	4a05      	ldr	r2, [pc, #20]	@ (80014d0 <HAL_TIM_Base_MspInit+0xa0>)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014be:	bf00      	nop
 80014c0:	3710      	adds	r7, #16
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	40000800 	.word	0x40000800
 80014cc:	40023800 	.word	0x40023800
 80014d0:	20000314 	.word	0x20000314
 80014d4:	40026010 	.word	0x40026010

080014d8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b088      	sub	sp, #32
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e0:	f107 030c 	add.w	r3, r7, #12
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	4a12      	ldr	r2, [pc, #72]	@ (8001540 <HAL_TIM_MspPostInit+0x68>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d11d      	bne.n	8001536 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	2300      	movs	r3, #0
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	4b11      	ldr	r3, [pc, #68]	@ (8001544 <HAL_TIM_MspPostInit+0x6c>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001502:	4a10      	ldr	r2, [pc, #64]	@ (8001544 <HAL_TIM_MspPostInit+0x6c>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	6313      	str	r3, [r2, #48]	@ 0x30
 800150a:	4b0e      	ldr	r3, [pc, #56]	@ (8001544 <HAL_TIM_MspPostInit+0x6c>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	60bb      	str	r3, [r7, #8]
 8001514:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001516:	2340      	movs	r3, #64	@ 0x40
 8001518:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151a:	2302      	movs	r3, #2
 800151c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800151e:	2300      	movs	r3, #0
 8001520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001522:	2300      	movs	r3, #0
 8001524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001526:	2302      	movs	r3, #2
 8001528:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800152a:	f107 030c 	add.w	r3, r7, #12
 800152e:	4619      	mov	r1, r3
 8001530:	4805      	ldr	r0, [pc, #20]	@ (8001548 <HAL_TIM_MspPostInit+0x70>)
 8001532:	f002 fbf7 	bl	8003d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	40000800 	.word	0x40000800
 8001544:	40023800 	.word	0x40023800
 8001548:	40020400 	.word	0x40020400

0800154c <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	4613      	mov	r3, r2
 8001558:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 800155a:	4b06      	ldr	r3, [pc, #24]	@ (8001574 <transmitdma+0x28>)
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	461a      	mov	r2, r3
 8001564:	68b9      	ldr	r1, [r7, #8]
 8001566:	68f8      	ldr	r0, [r7, #12]
 8001568:	f005 f88c 	bl	8006684 <HAL_SPI_Transmit_DMA>
}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000374 	.word	0x20000374

08001578 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a05      	ldr	r2, [pc, #20]	@ (800159c <HAL_SPI_TxCpltCallback+0x24>)
 8001586:	4293      	cmp	r3, r2
 8001588:	d102      	bne.n	8001590 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 800158a:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <HAL_SPI_TxCpltCallback+0x28>)
 800158c:	2201      	movs	r2, #1
 800158e:	701a      	strb	r2, [r3, #0]
	}
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40013000 	.word	0x40013000
 80015a0:	20000374 	.word	0x20000374

080015a4 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	60f8      	str	r0, [r7, #12]
 80015ac:	60b9      	str	r1, [r7, #8]
 80015ae:	4613      	mov	r3, r2
 80015b0:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 80015b2:	79fb      	ldrb	r3, [r7, #7]
 80015b4:	461a      	mov	r2, r3
 80015b6:	68b9      	ldr	r1, [r7, #8]
 80015b8:	68f8      	ldr	r0, [r7, #12]
 80015ba:	f000 f805 	bl	80015c8 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	4618      	mov	r0, r3
 80015c2:	3710      	adds	r7, #16
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	60b9      	str	r1, [r7, #8]
 80015d2:	4613      	mov	r3, r2
 80015d4:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	68ba      	ldr	r2, [r7, #8]
 80015da:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	79fa      	ldrb	r2, [r7, #7]
 80015e0:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	2201      	movs	r2, #1
 80015e6:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	2200      	movs	r2, #0
 80015ec:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	e014      	b.n	800161e <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	68ba      	ldr	r2, [r7, #8]
 80015fa:	4413      	add	r3, r2
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4618      	mov	r0, r3
 8001600:	f000 f9da 	bl	80019b8 <_ZN13DisplayObject11getpriorityEv>
 8001604:	4603      	mov	r3, r0
 8001606:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	799b      	ldrb	r3, [r3, #6]
 800160c:	7cfa      	ldrb	r2, [r7, #19]
 800160e:	429a      	cmp	r2, r3
 8001610:	d902      	bls.n	8001618 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	7cfa      	ldrb	r2, [r7, #19]
 8001616:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8001618:	697b      	ldr	r3, [r7, #20]
 800161a:	3301      	adds	r3, #1
 800161c:	617b      	str	r3, [r7, #20]
 800161e:	79fb      	ldrb	r3, [r7, #7]
 8001620:	697a      	ldr	r2, [r7, #20]
 8001622:	429a      	cmp	r2, r3
 8001624:	dbe6      	blt.n	80015f4 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 8001626:	bf00      	nop
 8001628:	bf00      	nop
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 8001630:	b590      	push	{r4, r7, lr}
 8001632:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8001636:	b089      	sub	sp, #36	@ 0x24
 8001638:	af00      	add	r7, sp, #0
 800163a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800163e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001642:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 8001644:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001648:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	795b      	ldrb	r3, [r3, #5]
 8001650:	2b00      	cmp	r3, #0
 8001652:	f000 813e 	beq.w	80018d2 <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 8001656:	f240 133f 	movw	r3, #319	@ 0x13f
 800165a:	f240 12df 	movw	r2, #479	@ 0x1df
 800165e:	2100      	movs	r1, #0
 8001660:	2000      	movs	r0, #0
 8001662:	f000 fca8 	bl	8001fb6 <modifySpace>
		startCommand(WRITE_COMMAND);
 8001666:	202c      	movs	r0, #44	@ 0x2c
 8001668:	f000 fbb2 	bl	8001dd0 <startCommand>
		dataOrRegister(1);
 800166c:	2001      	movs	r0, #1
 800166e:	f000 fb6d 	bl	8001d4c <dataOrRegister>
		uint8_t anychanges = 0;
 8001672:	2300      	movs	r3, #0
 8001674:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001678:	f102 021f 	add.w	r2, r2, #31
 800167c:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 800167e:	2300      	movs	r3, #0
 8001680:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001684:	f102 0218 	add.w	r2, r2, #24
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	e028      	b.n	80016de <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 800168c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001690:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	681a      	ldr	r2, [r3, #0]
 8001698:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800169c:	f103 0318 	add.w	r3, r3, #24
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	009b      	lsls	r3, r3, #2
 80016a4:	4413      	add	r3, r2
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4618      	mov	r0, r3
 80016aa:	f000 f9a0 	bl	80019ee <_ZN13DisplayObject13getChangeFlagEv>
 80016ae:	4603      	mov	r3, r0
 80016b0:	461a      	mov	r2, r3
 80016b2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80016b6:	f103 031f 	add.w	r3, r3, #31
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	4413      	add	r3, r2
 80016be:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80016c2:	f102 021f 	add.w	r2, r2, #31
 80016c6:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80016c8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80016cc:	f103 0318 	add.w	r3, r3, #24
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	3301      	adds	r3, #1
 80016d4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80016d8:	f102 0218 	add.w	r2, r2, #24
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80016e2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	791b      	ldrb	r3, [r3, #4]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80016f0:	f103 0318 	add.w	r3, r3, #24
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4293      	cmp	r3, r2
 80016f8:	dbc8      	blt.n	800168c <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 80016fa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80016fe:	f103 031f 	add.w	r3, r3, #31
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b00      	cmp	r3, #0
 8001706:	f000 80ec 	beq.w	80018e2 <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800170a:	2300      	movs	r3, #0
 800170c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001710:	f102 0214 	add.w	r2, r2, #20
 8001714:	6013      	str	r3, [r2, #0]
 8001716:	e0d2      	b.n	80018be <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8001718:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800171c:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 8001720:	4618      	mov	r0, r3
 8001722:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 8001726:	461a      	mov	r2, r3
 8001728:	2100      	movs	r1, #0
 800172a:	f00a fc0b 	bl	800bf44 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 800172e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001732:	f103 0314 	add.w	r3, r3, #20
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	4613      	mov	r3, r2
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	4413      	add	r3, r2
 800173e:	011b      	lsls	r3, r3, #4
 8001740:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001744:	f102 0208 	add.w	r2, r2, #8
 8001748:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 800174a:	2300      	movs	r3, #0
 800174c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8001750:	f102 0210 	add.w	r2, r2, #16
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e084      	b.n	8001862 <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 8001758:	2300      	movs	r3, #0
 800175a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800175e:	f102 020c 	add.w	r2, r2, #12
 8001762:	6013      	str	r3, [r2, #0]
 8001764:	e064      	b.n	8001830 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 8001766:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800176a:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001776:	f103 030c 	add.w	r3, r3, #12
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f000 f918 	bl	80019b8 <_ZN13DisplayObject11getpriorityEv>
 8001788:	4603      	mov	r3, r0
 800178a:	461a      	mov	r2, r3
 800178c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001790:	f103 0310 	add.w	r3, r3, #16
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4293      	cmp	r3, r2
 8001798:	bf0c      	ite	eq
 800179a:	2301      	moveq	r3, #1
 800179c:	2300      	movne	r3, #0
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d03a      	beq.n	800181a <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 80017a4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80017a8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80017b4:	f103 030c 	add.w	r3, r3, #12
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	4413      	add	r3, r2
 80017be:	6818      	ldr	r0, [r3, #0]
 80017c0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80017c4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80017d0:	f103 030c 	add.w	r3, r3, #12
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	009b      	lsls	r3, r3, #2
 80017d8:	4413      	add	r3, r2
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	3308      	adds	r3, #8
 80017e0:	681c      	ldr	r4, [r3, #0]
 80017e2:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80017e6:	f103 0308 	add.w	r3, r3, #8
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	f107 0120 	add.w	r1, r7, #32
 80017f2:	3918      	subs	r1, #24
 80017f4:	2250      	movs	r2, #80	@ 0x50
 80017f6:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 80017f8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80017fc:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001808:	f103 030c 	add.w	r3, r3, #12
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	4413      	add	r3, r2
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4618      	mov	r0, r3
 8001816:	f000 f87f 	bl	8001918 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 800181a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800181e:	f103 030c 	add.w	r3, r3, #12
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	3301      	adds	r3, #1
 8001826:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800182a:	f102 020c 	add.w	r2, r2, #12
 800182e:	6013      	str	r3, [r2, #0]
 8001830:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001834:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	791b      	ldrb	r3, [r3, #4]
 800183c:	461a      	mov	r2, r3
 800183e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001842:	f103 030c 	add.w	r3, r3, #12
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4293      	cmp	r3, r2
 800184a:	db8c      	blt.n	8001766 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 800184c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001850:	f103 0310 	add.w	r3, r3, #16
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	3301      	adds	r3, #1
 8001858:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800185c:	f102 0210 	add.w	r2, r2, #16
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8001866:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	799b      	ldrb	r3, [r3, #6]
 800186e:	461a      	mov	r2, r3
 8001870:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8001874:	f103 0310 	add.w	r3, r3, #16
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4293      	cmp	r3, r2
 800187c:	f77f af6c 	ble.w	8001758 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8001880:	f107 0320 	add.w	r3, r7, #32
 8001884:	3b18      	subs	r3, #24
 8001886:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800188a:	4619      	mov	r1, r3
 800188c:	4818      	ldr	r0, [pc, #96]	@ (80018f0 <_ZN5Scene9drawSceneEv+0x2c0>)
 800188e:	f7ff fe5d 	bl	800154c <transmitdma>
			while(!spidatasentflag) {}
 8001892:	bf00      	nop
 8001894:	4b17      	ldr	r3, [pc, #92]	@ (80018f4 <_ZN5Scene9drawSceneEv+0x2c4>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b00      	cmp	r3, #0
 800189c:	bf0c      	ite	eq
 800189e:	2301      	moveq	r3, #1
 80018a0:	2300      	movne	r3, #0
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1f5      	bne.n	8001894 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80018a8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80018ac:	f103 0314 	add.w	r3, r3, #20
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	3301      	adds	r3, #1
 80018b4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80018b8:	f102 0214 	add.w	r2, r2, #20
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80018c2:	f103 0314 	add.w	r3, r3, #20
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2b05      	cmp	r3, #5
 80018ca:	f77f af25 	ble.w	8001718 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 80018ce:	f000 fa95 	bl	8001dfc <endCommand>
	}
	this->changed = 0;
 80018d2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80018d6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	2200      	movs	r2, #0
 80018de:	715a      	strb	r2, [r3, #5]
 80018e0:	e000      	b.n	80018e4 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 80018e2:	bf00      	nop
}
 80018e4:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80018e8:	3724      	adds	r7, #36	@ 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd90      	pop	{r4, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	200001b8 	.word	0x200001b8
 80018f4:	20000374 	.word	0x20000374

080018f8 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 80018f8:	b480      	push	{r7}
 80018fa:	b083      	sub	sp, #12
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	4a04      	ldr	r2, [pc, #16]	@ (8001914 <_ZN13DisplayObjectD1Ev+0x1c>)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	601a      	str	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4618      	mov	r0, r3
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	0800c2ac 	.word	0x0800c2ac

08001918 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8001918:	b480      	push	{r7}
 800191a:	b083      	sub	sp, #12
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2200      	movs	r2, #0
 8001924:	715a      	strb	r2, [r3, #5]
}
 8001926:	bf00      	nop
 8001928:	370c      	adds	r7, #12
 800192a:	46bd      	mov	sp, r7
 800192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001930:	4770      	bx	lr

08001932 <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 8001932:	b480      	push	{r7}
 8001934:	b083      	sub	sp, #12
 8001936:	af00      	add	r7, sp, #0
 8001938:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2201      	movs	r2, #1
 800193e:	715a      	strb	r2, [r3, #5]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
	return this->xpos;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	88db      	ldrh	r3, [r3, #6]
}
 8001958:	4618      	mov	r0, r3
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
 800196c:	460b      	mov	r3, r1
 800196e:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	887a      	ldrh	r2, [r7, #2]
 8001974:	80da      	strh	r2, [r3, #6]
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr

08001982 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 8001982:	b480      	push	{r7}
 8001984:	b083      	sub	sp, #12
 8001986:	af00      	add	r7, sp, #0
 8001988:	6078      	str	r0, [r7, #4]
	return this->ypos;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	891b      	ldrh	r3, [r3, #8]
}
 800198e:	4618      	mov	r0, r3
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr

0800199a <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 800199a:	b480      	push	{r7}
 800199c:	b083      	sub	sp, #12
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
 80019a2:	460b      	mov	r3, r1
 80019a4:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	887a      	ldrh	r2, [r7, #2]
 80019aa:	811a      	strh	r2, [r3, #8]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 80019b8:	b480      	push	{r7}
 80019ba:	b083      	sub	sp, #12
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
	return this->priority;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	791b      	ldrb	r3, [r3, #4]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	370c      	adds	r7, #12
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr

080019d0 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 80019d0:	b480      	push	{r7}
 80019d2:	b083      	sub	sp, #12
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	460b      	mov	r3, r1
 80019da:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	78fa      	ldrb	r2, [r7, #3]
 80019e0:	711a      	strb	r2, [r3, #4]
}
 80019e2:	bf00      	nop
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 80019ee:	b480      	push	{r7}
 80019f0:	b083      	sub	sp, #12
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	6078      	str	r0, [r7, #4]
	return this->changed;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	795b      	ldrb	r3, [r3, #5]
}
 80019fa:	4618      	mov	r0, r3
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
	...

08001a08 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	4a04      	ldr	r2, [pc, #16]	@ (8001a24 <_ZN13DisplayObjectC1Ev+0x1c>)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	601a      	str	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	370c      	adds	r7, #12
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr
 8001a24:	0800c2ac 	.word	0x0800c2ac

08001a28 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	4608      	mov	r0, r1
 8001a32:	4611      	mov	r1, r2
 8001a34:	461a      	mov	r2, r3
 8001a36:	4603      	mov	r3, r0
 8001a38:	817b      	strh	r3, [r7, #10]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	813b      	strh	r3, [r7, #8]
 8001a3e:	4613      	mov	r3, r2
 8001a40:	80fb      	strh	r3, [r7, #6]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ffdf 	bl	8001a08 <_ZN13DisplayObjectC1Ev>
 8001a4a:	4a15      	ldr	r2, [pc, #84]	@ (8001aa0 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	6a3a      	ldr	r2, [r7, #32]
 8001a54:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	897a      	ldrh	r2, [r7, #10]
 8001a5a:	4611      	mov	r1, r2
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff81 	bl	8001964 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	893a      	ldrh	r2, [r7, #8]
 8001a66:	4611      	mov	r1, r2
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff ff96 	bl	800199a <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	88fa      	ldrh	r2, [r7, #6]
 8001a72:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	7f3a      	ldrb	r2, [r7, #28]
 8001a78:	751a      	strb	r2, [r3, #20]
	this->font = font;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001a86:	4611      	mov	r1, r2
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff ffa1 	bl	80019d0 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff4e 	bl	8001932 <_ZN13DisplayObject12redrawObjectEv>
}
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	0800c298 	.word	0x0800c298

08001aa4 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8001aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001aa8:	b08a      	sub	sp, #40	@ 0x28
 8001aaa:	af06      	add	r7, sp, #24
 8001aac:	60f8      	str	r0, [r7, #12]
 8001aae:	60b9      	str	r1, [r7, #8]
 8001ab0:	4611      	mov	r1, r2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	460b      	mov	r3, r1
 8001ab6:	80fb      	strh	r3, [r7, #6]
 8001ab8:	4613      	mov	r3, r2
 8001aba:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	68dc      	ldr	r4, [r3, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	691d      	ldr	r5, [r3, #16]
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	895e      	ldrh	r6, [r3, #10]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff3e 	bl	800194c <_ZN13DisplayObject7getxposEv>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	4698      	mov	r8, r3
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7ff ff53 	bl	8001982 <_ZN13DisplayObject7getyposEv>
 8001adc:	4603      	mov	r3, r0
 8001ade:	4619      	mov	r1, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	7d1b      	ldrb	r3, [r3, #20]
 8001ae4:	88ba      	ldrh	r2, [r7, #4]
 8001ae6:	9204      	str	r2, [sp, #16]
 8001ae8:	88fa      	ldrh	r2, [r7, #6]
 8001aea:	9203      	str	r2, [sp, #12]
 8001aec:	68ba      	ldr	r2, [r7, #8]
 8001aee:	9202      	str	r2, [sp, #8]
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	9100      	str	r1, [sp, #0]
 8001af4:	4643      	mov	r3, r8
 8001af6:	4632      	mov	r2, r6
 8001af8:	4629      	mov	r1, r5
 8001afa:	4620      	mov	r0, r4
 8001afc:	f000 fc19 	bl	8002332 <drawStringIntoFramebuffer>
 8001b00:	4603      	mov	r3, r0
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3710      	adds	r7, #16
 8001b06:	46bd      	mov	sp, r7
 8001b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001b0c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b084      	sub	sp, #16
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	4611      	mov	r1, r2
 8001b18:	461a      	mov	r2, r3
 8001b1a:	460b      	mov	r3, r1
 8001b1c:	71fb      	strb	r3, [r7, #7]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	68ba      	ldr	r2, [r7, #8]
 8001b26:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	79fa      	ldrb	r2, [r7, #7]
 8001b2c:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	88ba      	ldrh	r2, [r7, #4]
 8001b32:	815a      	strh	r2, [r3, #10]
	this->font = font;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	8bba      	ldrh	r2, [r7, #28]
 8001b3e:	4611      	mov	r1, r2
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7ff ff0f 	bl	8001964 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	8c3a      	ldrh	r2, [r7, #32]
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f7ff ff24 	bl	800199a <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001b58:	4611      	mov	r1, r2
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff38 	bl	80019d0 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4618      	mov	r0, r3
 8001b64:	f7ff fee5 	bl	8001932 <_ZN13DisplayObject12redrawObjectEv>
}
 8001b68:	bf00      	nop
 8001b6a:	3710      	adds	r7, #16
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <_ZN11ImageObjectC1EPKttttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(const uint16_t* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b088      	sub	sp, #32
 8001b74:	af04      	add	r7, sp, #16
 8001b76:	60f8      	str	r0, [r7, #12]
 8001b78:	60b9      	str	r1, [r7, #8]
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	460b      	mov	r3, r1
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	4618      	mov	r0, r3
 8001b8a:	f7ff ff3d 	bl	8001a08 <_ZN13DisplayObjectC1Ev>
 8001b8e:	4a0c      	ldr	r2, [pc, #48]	@ (8001bc0 <_ZN11ImageObjectC1EPKttttthh+0x50>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8001b94:	88b9      	ldrh	r1, [r7, #4]
 8001b96:	88fa      	ldrh	r2, [r7, #6]
 8001b98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001b9c:	9303      	str	r3, [sp, #12]
 8001b9e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001ba2:	9302      	str	r3, [sp, #8]
 8001ba4:	8bbb      	ldrh	r3, [r7, #28]
 8001ba6:	9301      	str	r3, [sp, #4]
 8001ba8:	8b3b      	ldrh	r3, [r7, #24]
 8001baa:	9300      	str	r3, [sp, #0]
 8001bac:	460b      	mov	r3, r1
 8001bae:	68b9      	ldr	r1, [r7, #8]
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f000 f83b 	bl	8001c2c <_ZN11ImageObject11updateImageEPKttttthh>
}
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3710      	adds	r7, #16
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	0800c284 	.word	0x0800c284

08001bc4 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8001bc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001bc8:	b08a      	sub	sp, #40	@ 0x28
 8001bca:	af06      	add	r7, sp, #24
 8001bcc:	60f8      	str	r0, [r7, #12]
 8001bce:	60b9      	str	r1, [r7, #8]
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	80fb      	strh	r3, [r7, #6]
 8001bd8:	4613      	mov	r3, r2
 8001bda:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	691c      	ldr	r4, [r3, #16]
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	895d      	ldrh	r5, [r3, #10]
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	899e      	ldrh	r6, [r3, #12]
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff feae 	bl	800194c <_ZN13DisplayObject7getxposEv>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4698      	mov	r8, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7ff fec3 	bl	8001982 <_ZN13DisplayObject7getyposEv>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	4619      	mov	r1, r3
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	7b9b      	ldrb	r3, [r3, #14]
 8001c04:	88ba      	ldrh	r2, [r7, #4]
 8001c06:	9204      	str	r2, [sp, #16]
 8001c08:	88fa      	ldrh	r2, [r7, #6]
 8001c0a:	9203      	str	r2, [sp, #12]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	9202      	str	r2, [sp, #8]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	9100      	str	r1, [sp, #0]
 8001c14:	4643      	mov	r3, r8
 8001c16:	4632      	mov	r2, r6
 8001c18:	4629      	mov	r1, r5
 8001c1a:	4620      	mov	r0, r4
 8001c1c:	f000 fbdc 	bl	80023d8 <drawImageIntoFramebuffer>
	return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001c2c <_ZN11ImageObject11updateImageEPKttttthh>:

void ImageObject::updateImage(const uint16_t *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b084      	sub	sp, #16
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	60f8      	str	r0, [r7, #12]
 8001c34:	60b9      	str	r1, [r7, #8]
 8001c36:	4611      	mov	r1, r2
 8001c38:	461a      	mov	r2, r3
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	80fb      	strh	r3, [r7, #6]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	8b3a      	ldrh	r2, [r7, #24]
 8001c46:	4611      	mov	r1, r2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff fe8b 	bl	8001964 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	8bba      	ldrh	r2, [r7, #28]
 8001c52:	4611      	mov	r1, r2
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7ff fea0 	bl	800199a <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	68ba      	ldr	r2, [r7, #8]
 8001c5e:	611a      	str	r2, [r3, #16]
	this->length = length;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	88fa      	ldrh	r2, [r7, #6]
 8001c64:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	88ba      	ldrh	r2, [r7, #4]
 8001c6a:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c72:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001c7a:	4611      	mov	r1, r2
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff fea7 	bl	80019d0 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7ff fe54 	bl	8001932 <_ZN13DisplayObject12redrawObjectEv>
}
 8001c8a:	bf00      	nop
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
 8001c9c:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <_ZN11ImageObjectD1Ev+0x20>)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	f7ff fe27 	bl	80018f8 <_ZN13DisplayObjectD1Ev>
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4618      	mov	r0, r3
 8001cae:	3708      	adds	r7, #8
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	0800c284 	.word	0x0800c284

08001cb8 <_ZN11ImageObjectD0Ev>:
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b082      	sub	sp, #8
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f7ff ffe7 	bl	8001c94 <_ZN11ImageObjectD1Ev>
 8001cc6:	2114      	movs	r1, #20
 8001cc8:	6878      	ldr	r0, [r7, #4]
 8001cca:	f009 fffb 	bl	800bcc4 <_ZdlPvj>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	3708      	adds	r7, #8
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bd80      	pop	{r7, pc}

08001cd8 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	4a05      	ldr	r2, [pc, #20]	@ (8001cf8 <_ZN12StringObjectD1Ev+0x20>)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	601a      	str	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff fe05 	bl	80018f8 <_ZN13DisplayObjectD1Ev>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	0800c298 	.word	0x0800c298

08001cfc <_ZN12StringObjectD0Ev>:
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffe7 	bl	8001cd8 <_ZN12StringObjectD1Ev>
 8001d0a:	2118      	movs	r1, #24
 8001d0c:	6878      	ldr	r0, [r7, #4]
 8001d0e:	f009 ffd9 	bl	800bcc4 <_ZdlPvj>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <startTransaction>:
#include "gpio.h"
#include "spi.h"
#include "dmatransmitter.h"


void startTransaction() {
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8001d20:	2200      	movs	r2, #0
 8001d22:	2108      	movs	r1, #8
 8001d24:	4802      	ldr	r0, [pc, #8]	@ (8001d30 <startTransaction+0x14>)
 8001d26:	f002 f981 	bl	800402c <HAL_GPIO_WritePin>
}
 8001d2a:	bf00      	nop
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	40020400 	.word	0x40020400

08001d34 <endTransaction>:

void endTransaction() {
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8001d38:	2201      	movs	r2, #1
 8001d3a:	2108      	movs	r1, #8
 8001d3c:	4802      	ldr	r0, [pc, #8]	@ (8001d48 <endTransaction+0x14>)
 8001d3e:	f002 f975 	bl	800402c <HAL_GPIO_WritePin>
}
 8001d42:	bf00      	nop
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	40020400 	.word	0x40020400

08001d4c <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8001d56:	79fb      	ldrb	r3, [r7, #7]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d005      	beq.n	8001d68 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8001d5c:	2201      	movs	r2, #1
 8001d5e:	2110      	movs	r1, #16
 8001d60:	4806      	ldr	r0, [pc, #24]	@ (8001d7c <dataOrRegister+0x30>)
 8001d62:	f002 f963 	bl	800402c <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8001d66:	e004      	b.n	8001d72 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2110      	movs	r1, #16
 8001d6c:	4803      	ldr	r0, [pc, #12]	@ (8001d7c <dataOrRegister+0x30>)
 8001d6e:	f002 f95d 	bl	800402c <HAL_GPIO_WritePin>
}
 8001d72:	bf00      	nop
 8001d74:	3708      	adds	r7, #8
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40020400 	.word	0x40020400

08001d80 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	60b9      	str	r1, [r7, #8]
 8001d8a:	607a      	str	r2, [r7, #4]
 8001d8c:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8001d8e:	f7ff ffc5 	bl	8001d1c <startTransaction>

	dataOrRegister(0);
 8001d92:	2000      	movs	r0, #0
 8001d94:	f7ff ffda 	bl	8001d4c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8001d98:	f107 010e 	add.w	r1, r7, #14
 8001d9c:	230a      	movs	r3, #10
 8001d9e:	2201      	movs	r2, #1
 8001da0:	480a      	ldr	r0, [pc, #40]	@ (8001dcc <commandAndData+0x4c>)
 8001da2:	f004 f868 	bl	8005e76 <HAL_SPI_Transmit>

	if (size) {
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d009      	beq.n	8001dc0 <commandAndData+0x40>
		dataOrRegister(1);
 8001dac:	2001      	movs	r0, #1
 8001dae:	f7ff ffcd 	bl	8001d4c <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	230a      	movs	r3, #10
 8001db8:	68b9      	ldr	r1, [r7, #8]
 8001dba:	4804      	ldr	r0, [pc, #16]	@ (8001dcc <commandAndData+0x4c>)
 8001dbc:	f004 f85b 	bl	8005e76 <HAL_SPI_Transmit>
	}

	endTransaction();
 8001dc0:	f7ff ffb8 	bl	8001d34 <endTransaction>
}
 8001dc4:	bf00      	nop
 8001dc6:	3710      	adds	r7, #16
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	200001b8 	.word	0x200001b8

08001dd0 <startCommand>:

void startCommand(uint16_t command) {
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8001dda:	f7ff ff9f 	bl	8001d1c <startTransaction>
	dataOrRegister(0);
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff ffb4 	bl	8001d4c <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8001de4:	1db9      	adds	r1, r7, #6
 8001de6:	230a      	movs	r3, #10
 8001de8:	2201      	movs	r2, #1
 8001dea:	4803      	ldr	r0, [pc, #12]	@ (8001df8 <startCommand+0x28>)
 8001dec:	f004 f843 	bl	8005e76 <HAL_SPI_Transmit>
}
 8001df0:	bf00      	nop
 8001df2:	3708      	adds	r7, #8
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	200001b8 	.word	0x200001b8

08001dfc <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	af00      	add	r7, sp, #0
	endTransaction();
 8001e00:	f7ff ff98 	bl	8001d34 <endTransaction>
}
 8001e04:	bf00      	nop
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <resetScreen>:

void resetScreen() {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e0c:	2201      	movs	r2, #1
 8001e0e:	2120      	movs	r1, #32
 8001e10:	480b      	ldr	r0, [pc, #44]	@ (8001e40 <resetScreen+0x38>)
 8001e12:	f002 f90b 	bl	800402c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e16:	2014      	movs	r0, #20
 8001e18:	f001 fabc 	bl	8003394 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	2120      	movs	r1, #32
 8001e20:	4807      	ldr	r0, [pc, #28]	@ (8001e40 <resetScreen+0x38>)
 8001e22:	f002 f903 	bl	800402c <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8001e26:	2014      	movs	r0, #20
 8001e28:	f001 fab4 	bl	8003394 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001e2c:	2201      	movs	r2, #1
 8001e2e:	2120      	movs	r1, #32
 8001e30:	4803      	ldr	r0, [pc, #12]	@ (8001e40 <resetScreen+0x38>)
 8001e32:	f002 f8fb 	bl	800402c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001e36:	2064      	movs	r0, #100	@ 0x64
 8001e38:	f001 faac 	bl	8003394 <HAL_Delay>
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40020400 	.word	0x40020400

08001e44 <initializeScreen>:

void initializeScreen() {
 8001e44:	b5b0      	push	{r4, r5, r7, lr}
 8001e46:	b09c      	sub	sp, #112	@ 0x70
 8001e48:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	2100      	movs	r1, #0
 8001e4e:	2001      	movs	r0, #1
 8001e50:	f7ff ff96 	bl	8001d80 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8001e54:	2200      	movs	r2, #0
 8001e56:	2100      	movs	r1, #0
 8001e58:	2011      	movs	r0, #17
 8001e5a:	f7ff ff91 	bl	8001d80 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8001e5e:	2355      	movs	r3, #85	@ 0x55
 8001e60:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8001e64:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001e68:	2202      	movs	r2, #2
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	203a      	movs	r0, #58	@ 0x3a
 8001e6e:	f7ff ff87 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8001e72:	4b47      	ldr	r3, [pc, #284]	@ (8001f90 <initializeScreen+0x14c>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8001e78:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8001e7c:	2204      	movs	r2, #4
 8001e7e:	4619      	mov	r1, r3
 8001e80:	20c0      	movs	r0, #192	@ 0xc0
 8001e82:	f7ff ff7d 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8001e86:	2345      	movs	r3, #69	@ 0x45
 8001e88:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8001e92:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001e96:	2204      	movs	r2, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	20c1      	movs	r0, #193	@ 0xc1
 8001e9c:	f7ff ff70 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8001ea0:	2333      	movs	r3, #51	@ 0x33
 8001ea2:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8001ea6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4619      	mov	r1, r3
 8001eae:	20c2      	movs	r0, #194	@ 0xc2
 8001eb0:	f7ff ff66 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8001eba:	2328      	movs	r3, #40	@ 0x28
 8001ebc:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8001ec0:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	20c5      	movs	r0, #197	@ 0xc5
 8001eca:	f7ff ff59 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8001ece:	4b31      	ldr	r3, [pc, #196]	@ (8001f94 <initializeScreen+0x150>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8001ed4:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ed8:	2204      	movs	r2, #4
 8001eda:	4619      	mov	r1, r3
 8001edc:	20b1      	movs	r0, #177	@ 0xb1
 8001ede:	f7ff ff4f 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8001ee8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001eec:	2202      	movs	r2, #2
 8001eee:	4619      	mov	r1, r3
 8001ef0:	20b4      	movs	r0, #180	@ 0xb4
 8001ef2:	f7ff ff45 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8001ef6:	4a28      	ldr	r2, [pc, #160]	@ (8001f98 <initializeScreen+0x154>)
 8001ef8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001efc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001f00:	6018      	str	r0, [r3, #0]
 8001f02:	3304      	adds	r3, #4
 8001f04:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8001f06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001f0a:	2206      	movs	r2, #6
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	20b6      	movs	r0, #182	@ 0xb6
 8001f10:	f7ff ff36 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8001f14:	4b21      	ldr	r3, [pc, #132]	@ (8001f9c <initializeScreen+0x158>)
 8001f16:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8001f1a:	461d      	mov	r5, r3
 8001f1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f24:	c407      	stmia	r4!, {r0, r1, r2}
 8001f26:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8001f28:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001f2c:	221e      	movs	r2, #30
 8001f2e:	4619      	mov	r1, r3
 8001f30:	20e0      	movs	r0, #224	@ 0xe0
 8001f32:	f7ff ff25 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8001f36:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa0 <initializeScreen+0x15c>)
 8001f38:	f107 040c 	add.w	r4, r7, #12
 8001f3c:	461d      	mov	r5, r3
 8001f3e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001f40:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001f42:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001f46:	c407      	stmia	r4!, {r0, r1, r2}
 8001f48:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8001f4a:	f107 030c 	add.w	r3, r7, #12
 8001f4e:	221e      	movs	r2, #30
 8001f50:	4619      	mov	r1, r3
 8001f52:	20e1      	movs	r0, #225	@ 0xe1
 8001f54:	f7ff ff14 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8001f58:	2300      	movs	r3, #0
 8001f5a:	813b      	strh	r3, [r7, #8]
 8001f5c:	2322      	movs	r3, #34	@ 0x22
 8001f5e:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8001f60:	f107 0308 	add.w	r3, r7, #8
 8001f64:	2204      	movs	r2, #4
 8001f66:	4619      	mov	r1, r3
 8001f68:	20b6      	movs	r0, #182	@ 0xb6
 8001f6a:	f7ff ff09 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN
 8001f6e:	2308      	movs	r3, #8
 8001f70:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8001f72:	1d3b      	adds	r3, r7, #4
 8001f74:	2202      	movs	r2, #2
 8001f76:	4619      	mov	r1, r3
 8001f78:	2036      	movs	r0, #54	@ 0x36
 8001f7a:	f7ff ff01 	bl	8001d80 <commandAndData>
	}
	clearScreenfast(0x0000);
 8001f7e:	2000      	movs	r0, #0
 8001f80:	f000 f85a 	bl	8002038 <clearScreenfast>
	displayOn();
 8001f84:	f000 f80e 	bl	8001fa4 <displayOn>
}
 8001f88:	bf00      	nop
 8001f8a:	3770      	adds	r7, #112	@ 0x70
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bdb0      	pop	{r4, r5, r7, pc}
 8001f90:	0800c17c 	.word	0x0800c17c
 8001f94:	0800c180 	.word	0x0800c180
 8001f98:	0800c184 	.word	0x0800c184
 8001f9c:	0800c18c 	.word	0x0800c18c
 8001fa0:	0800c1ac 	.word	0x0800c1ac

08001fa4 <displayOn>:

void displayOn() {
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	2100      	movs	r1, #0
 8001fac:	2029      	movs	r0, #41	@ 0x29
 8001fae:	f7ff fee7 	bl	8001d80 <commandAndData>
}
 8001fb2:	bf00      	nop
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8001fb6:	b590      	push	{r4, r7, lr}
 8001fb8:	b087      	sub	sp, #28
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	4604      	mov	r4, r0
 8001fbe:	4608      	mov	r0, r1
 8001fc0:	4611      	mov	r1, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4623      	mov	r3, r4
 8001fc6:	80fb      	strh	r3, [r7, #6]
 8001fc8:	4603      	mov	r3, r0
 8001fca:	80bb      	strh	r3, [r7, #4]
 8001fcc:	460b      	mov	r3, r1
 8001fce:	807b      	strh	r3, [r7, #2]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8001fd4:	88bb      	ldrh	r3, [r7, #4]
 8001fd6:	0a1b      	lsrs	r3, r3, #8
 8001fd8:	b29b      	uxth	r3, r3
 8001fda:	823b      	strh	r3, [r7, #16]
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	827b      	strh	r3, [r7, #18]
 8001fe4:	883b      	ldrh	r3, [r7, #0]
 8001fe6:	0a1b      	lsrs	r3, r3, #8
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	82bb      	strh	r3, [r7, #20]
 8001fec:	883b      	ldrh	r3, [r7, #0]
 8001fee:	b2db      	uxtb	r3, r3
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8001ff4:	f107 0310 	add.w	r3, r7, #16
 8001ff8:	2208      	movs	r2, #8
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	202a      	movs	r0, #42	@ 0x2a
 8001ffe:	f7ff febf 	bl	8001d80 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002002:	88fb      	ldrh	r3, [r7, #6]
 8002004:	0a1b      	lsrs	r3, r3, #8
 8002006:	b29b      	uxth	r3, r3
 8002008:	813b      	strh	r3, [r7, #8]
 800200a:	88fb      	ldrh	r3, [r7, #6]
 800200c:	b2db      	uxtb	r3, r3
 800200e:	b29b      	uxth	r3, r3
 8002010:	817b      	strh	r3, [r7, #10]
 8002012:	887b      	ldrh	r3, [r7, #2]
 8002014:	0a1b      	lsrs	r3, r3, #8
 8002016:	b29b      	uxth	r3, r3
 8002018:	81bb      	strh	r3, [r7, #12]
 800201a:	887b      	ldrh	r3, [r7, #2]
 800201c:	b2db      	uxtb	r3, r3
 800201e:	b29b      	uxth	r3, r3
 8002020:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002022:	f107 0308 	add.w	r3, r7, #8
 8002026:	2208      	movs	r2, #8
 8002028:	4619      	mov	r1, r3
 800202a:	202b      	movs	r0, #43	@ 0x2b
 800202c:	f7ff fea8 	bl	8001d80 <commandAndData>
	}
}
 8002030:	bf00      	nop
 8002032:	371c      	adds	r7, #28
 8002034:	46bd      	mov	sp, r7
 8002036:	bd90      	pop	{r4, r7, pc}

08002038 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002038:	b580      	push	{r7, lr}
 800203a:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	4602      	mov	r2, r0
 8002044:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002048:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 800204c:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800204e:	2300      	movs	r3, #0
 8002050:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002054:	f102 020c 	add.w	r2, r2, #12
 8002058:	6013      	str	r3, [r2, #0]
 800205a:	e01a      	b.n	8002092 <clearScreenfast+0x5a>
		buffer1[i] = color;
 800205c:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002060:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8002064:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002068:	f102 020c 	add.w	r2, r2, #12
 800206c:	6812      	ldr	r2, [r2, #0]
 800206e:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8002072:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8002076:	8809      	ldrh	r1, [r1, #0]
 8002078:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 800207c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002080:	f103 030c 	add.w	r3, r3, #12
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	3301      	adds	r3, #1
 8002088:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800208c:	f102 020c 	add.w	r2, r2, #12
 8002090:	6013      	str	r3, [r2, #0]
 8002092:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002096:	f103 030c 	add.w	r3, r3, #12
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 80020a0:	dbdc      	blt.n	800205c <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 80020a2:	f240 133f 	movw	r3, #319	@ 0x13f
 80020a6:	f240 12df 	movw	r2, #479	@ 0x1df
 80020aa:	2100      	movs	r1, #0
 80020ac:	2000      	movs	r0, #0
 80020ae:	f7ff ff82 	bl	8001fb6 <modifySpace>
	startCommand(0x2C);
 80020b2:	202c      	movs	r0, #44	@ 0x2c
 80020b4:	f7ff fe8c 	bl	8001dd0 <startCommand>
	dataOrRegister(1);
 80020b8:	2001      	movs	r0, #1
 80020ba:	f7ff fe47 	bl	8001d4c <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80020be:	2300      	movs	r3, #0
 80020c0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80020c4:	f102 0208 	add.w	r2, r2, #8
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	e019      	b.n	8002100 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 80020cc:	f107 0310 	add.w	r3, r7, #16
 80020d0:	3b08      	subs	r3, #8
 80020d2:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 80020d6:	4619      	mov	r1, r3
 80020d8:	4811      	ldr	r0, [pc, #68]	@ (8002120 <clearScreenfast+0xe8>)
 80020da:	f7ff fa37 	bl	800154c <transmitdma>
		while (!spidatasentflag) {}
 80020de:	bf00      	nop
 80020e0:	4b10      	ldr	r3, [pc, #64]	@ (8002124 <clearScreenfast+0xec>)
 80020e2:	781b      	ldrb	r3, [r3, #0]
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d0fa      	beq.n	80020e0 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 80020ea:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80020ee:	f103 0308 	add.w	r3, r3, #8
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	3301      	adds	r3, #1
 80020f6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80020fa:	f102 0208 	add.w	r2, r2, #8
 80020fe:	6013      	str	r3, [r2, #0]
 8002100:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002104:	f103 0308 	add.w	r3, r3, #8
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	2b05      	cmp	r3, #5
 800210c:	ddde      	ble.n	80020cc <clearScreenfast+0x94>
	}
	endCommand();
 800210e:	f7ff fe75 	bl	8001dfc <endCommand>
}
 8002112:	bf00      	nop
 8002114:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002118:	3710      	adds	r7, #16
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	200001b8 	.word	0x200001b8
 8002124:	20000374 	.word	0x20000374

08002128 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8002128:	b480      	push	{r7}
 800212a:	b085      	sub	sp, #20
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	4611      	mov	r1, r2
 8002134:	461a      	mov	r2, r3
 8002136:	460b      	mov	r3, r1
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	4613      	mov	r3, r2
 800213c:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	881a      	ldrh	r2, [r3, #0]
 8002142:	88fb      	ldrh	r3, [r7, #6]
 8002144:	085b      	lsrs	r3, r3, #1
 8002146:	b29b      	uxth	r3, r3
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	b29a      	uxth	r2, r3
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	881a      	ldrh	r2, [r3, #0]
 8002154:	88bb      	ldrh	r3, [r7, #4]
 8002156:	085b      	lsrs	r3, r3, #1
 8002158:	b29b      	uxth	r3, r3
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	b29a      	uxth	r2, r3
 800215e:	68bb      	ldr	r3, [r7, #8]
 8002160:	801a      	strh	r2, [r3, #0]
}
 8002162:	bf00      	nop
 8002164:	3714      	adds	r7, #20
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr

0800216e <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 800216e:	b480      	push	{r7}
 8002170:	b089      	sub	sp, #36	@ 0x24
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
 800217a:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8002184:	e012      	b.n	80021ac <getStringCenter+0x3e>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685a      	ldr	r2, [r3, #4]
 800218a:	69fb      	ldr	r3, [r7, #28]
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002192:	3b20      	subs	r3, #32
 8002194:	00db      	lsls	r3, r3, #3
 8002196:	4413      	add	r3, r2
 8002198:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	791b      	ldrb	r3, [r3, #4]
 800219e:	461a      	mov	r2, r3
 80021a0:	8b7b      	ldrh	r3, [r7, #26]
 80021a2:	4413      	add	r3, r2
 80021a4:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	3301      	adds	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80021ac:	69fb      	ldr	r3, [r7, #28]
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d1e8      	bne.n	8002186 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	881a      	ldrh	r2, [r3, #0]
 80021b8:	8b7b      	ldrh	r3, [r7, #26]
 80021ba:	085b      	lsrs	r3, r3, #1
 80021bc:	b29b      	uxth	r3, r3
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	b29a      	uxth	r2, r3
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 80021c6:	bf00      	nop
 80021c8:	3724      	adds	r7, #36	@ 0x24
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <drawCharIntoFramebuffer>:

	return (uint16_t)xadv;
}

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80021d2:	b480      	push	{r7}
 80021d4:	b08d      	sub	sp, #52	@ 0x34
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	4611      	mov	r1, r2
 80021dc:	461a      	mov	r2, r3
 80021de:	4603      	mov	r3, r0
 80021e0:	73fb      	strb	r3, [r7, #15]
 80021e2:	460b      	mov	r3, r1
 80021e4:	81bb      	strh	r3, [r7, #12]
 80021e6:	4613      	mov	r3, r2
 80021e8:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	7bfb      	ldrb	r3, [r7, #15]
 80021f0:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 80021f4:	3b20      	subs	r3, #32
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	4413      	add	r3, r2
 80021fa:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	789b      	ldrb	r3, [r3, #2]
 8002200:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002204:	78db      	ldrb	r3, [r3, #3]
 8002206:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	795b      	ldrb	r3, [r3, #5]
 800220c:	77fb      	strb	r3, [r7, #31]
 800220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002210:	799b      	ldrb	r3, [r3, #6]
 8002212:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 8002214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002216:	791b      	ldrb	r3, [r3, #4]
 8002218:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	881b      	ldrh	r3, [r3, #0]
 8002224:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8002226:	2300      	movs	r3, #0
 8002228:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 800222c:	2300      	movs	r3, #0
 800222e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8002232:	2300      	movs	r3, #0
 8002234:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002236:	e06d      	b.n	8002314 <drawCharIntoFramebuffer+0x142>
		for (int16_t xx = 0; xx < width; xx++) {
 8002238:	2300      	movs	r3, #0
 800223a:	853b      	strh	r3, [r7, #40]	@ 0x28
 800223c:	e05e      	b.n	80022fc <drawCharIntoFramebuffer+0x12a>
			if (!(bit++ & 7)) {
 800223e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	2b00      	cmp	r3, #0
 800224e:	d108      	bne.n	8002262 <drawCharIntoFramebuffer+0x90>
				bits = bitlist[bo++];
 8002250:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8002256:	461a      	mov	r2, r3
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	4413      	add	r3, r2
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8002262:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8002266:	2b00      	cmp	r3, #0
 8002268:	da3d      	bge.n	80022e6 <drawCharIntoFramebuffer+0x114>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 800226a:	f997 301d 	ldrsb.w	r3, [r7, #29]
 800226e:	b29a      	uxth	r2, r3
 8002270:	88fb      	ldrh	r3, [r7, #6]
 8002272:	4413      	add	r3, r2
 8002274:	b29a      	uxth	r2, r3
 8002276:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800227a:	b29b      	uxth	r3, r3
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	b29a      	uxth	r2, r3
 8002280:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 8002286:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8002288:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800228a:	1ad3      	subs	r3, r2, r3
 800228c:	b29a      	uxth	r2, r3
 800228e:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8002292:	b29b      	uxth	r3, r3
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 8002298:	8afa      	ldrh	r2, [r7, #22]
 800229a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 800229e:	429a      	cmp	r2, r3
 80022a0:	bf2c      	ite	cs
 80022a2:	2301      	movcs	r3, #1
 80022a4:	2300      	movcc	r3, #0
 80022a6:	b2da      	uxtb	r2, r3
 80022a8:	8af9      	ldrh	r1, [r7, #22]
 80022aa:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80022ae:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80022b2:	4403      	add	r3, r0
 80022b4:	4299      	cmp	r1, r3
 80022b6:	bfb4      	ite	lt
 80022b8:	2301      	movlt	r3, #1
 80022ba:	2300      	movge	r3, #0
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	4013      	ands	r3, r2
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d00f      	beq.n	80022e6 <drawCharIntoFramebuffer+0x114>
					framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80022c6:	8afa      	ldrh	r2, [r7, #22]
 80022c8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80022cc:	1ad2      	subs	r2, r2, r3
 80022ce:	4613      	mov	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	461a      	mov	r2, r3
 80022d8:	8abb      	ldrh	r3, [r7, #20]
 80022da:	4413      	add	r3, r2
 80022dc:	005b      	lsls	r3, r3, #1
 80022de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80022e0:	4413      	add	r3, r2
 80022e2:	89ba      	ldrh	r2, [r7, #12]
 80022e4:	801a      	strh	r2, [r3, #0]
				}
			}
			bits <<= 1;
 80022e6:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80022f0:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3301      	adds	r3, #1
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	853b      	strh	r3, [r7, #40]	@ 0x28
 80022fc:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8002300:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8002304:	429a      	cmp	r2, r3
 8002306:	db9a      	blt.n	800223e <drawCharIntoFramebuffer+0x6c>
	for (int16_t yy = 0; yy < height; yy++) {
 8002308:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800230c:	b29b      	uxth	r3, r3
 800230e:	3301      	adds	r3, #1
 8002310:	b29b      	uxth	r3, r3
 8002312:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8002314:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8002318:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 800231c:	429a      	cmp	r2, r3
 800231e:	db8b      	blt.n	8002238 <drawCharIntoFramebuffer+0x66>
		}
	}

	return (uint16_t)xadv;
 8002320:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8002324:	b29b      	uxth	r3, r3
}
 8002326:	4618      	mov	r0, r3
 8002328:	3734      	adds	r7, #52	@ 0x34
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002332:	b590      	push	{r4, r7, lr}
 8002334:	b08d      	sub	sp, #52	@ 0x34
 8002336:	af06      	add	r7, sp, #24
 8002338:	60f8      	str	r0, [r7, #12]
 800233a:	60b9      	str	r1, [r7, #8]
 800233c:	4611      	mov	r1, r2
 800233e:	461a      	mov	r2, r3
 8002340:	460b      	mov	r3, r1
 8002342:	80fb      	strh	r3, [r7, #6]
 8002344:	4613      	mov	r3, r2
 8002346:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8002348:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d006      	beq.n	8002362 <drawStringIntoFramebuffer+0x30>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8002354:	1d38      	adds	r0, r7, #4
 8002356:	68bb      	ldr	r3, [r7, #8]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800235e:	f7ff ff06 	bl	800216e <getStringCenter>
	}
	uint16_t xAdvance = 0;
 8002362:	2300      	movs	r3, #0
 8002364:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8002366:	2300      	movs	r3, #0
 8002368:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 800236a:	bf00      	nop
 800236c:	8abb      	ldrh	r3, [r7, #20]
 800236e:	3301      	adds	r3, #1
 8002370:	82bb      	strh	r3, [r7, #20]
 8002372:	8abb      	ldrh	r3, [r7, #20]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4413      	add	r3, r2
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	2b00      	cmp	r3, #0
 800237c:	d1f6      	bne.n	800236c <drawStringIntoFramebuffer+0x3a>
	for (int i = buffersize - 1; i >= 0; i--) {
 800237e:	8abb      	ldrh	r3, [r7, #20]
 8002380:	3b01      	subs	r3, #1
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	e01f      	b.n	80023c6 <drawStringIntoFramebuffer+0x94>
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4413      	add	r3, r2
 800238c:	7818      	ldrb	r0, [r3, #0]
 800238e:	88ba      	ldrh	r2, [r7, #4]
 8002390:	8afb      	ldrh	r3, [r7, #22]
 8002392:	4413      	add	r3, r2
 8002394:	b29c      	uxth	r4, r3
 8002396:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8002398:	88f9      	ldrh	r1, [r7, #6]
 800239a:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800239c:	9204      	str	r2, [sp, #16]
 800239e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80023a0:	9203      	str	r2, [sp, #12]
 80023a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80023a4:	9202      	str	r2, [sp, #8]
 80023a6:	2200      	movs	r2, #0
 80023a8:	9201      	str	r2, [sp, #4]
 80023aa:	9300      	str	r3, [sp, #0]
 80023ac:	4623      	mov	r3, r4
 80023ae:	460a      	mov	r2, r1
 80023b0:	68b9      	ldr	r1, [r7, #8]
 80023b2:	f7ff ff0e 	bl	80021d2 <drawCharIntoFramebuffer>
 80023b6:	4603      	mov	r3, r0
 80023b8:	461a      	mov	r2, r3
 80023ba:	8afb      	ldrh	r3, [r7, #22]
 80023bc:	4413      	add	r3, r2
 80023be:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	3b01      	subs	r3, #1
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	dadc      	bge.n	8002386 <drawStringIntoFramebuffer+0x54>
	}
	return font->yAdvance;
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	7b1b      	ldrb	r3, [r3, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd90      	pop	{r4, r7, pc}

080023d8 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const uint16_t* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b086      	sub	sp, #24
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	4608      	mov	r0, r1
 80023e2:	4611      	mov	r1, r2
 80023e4:	461a      	mov	r2, r3
 80023e6:	4603      	mov	r3, r0
 80023e8:	817b      	strh	r3, [r7, #10]
 80023ea:	460b      	mov	r3, r1
 80023ec:	813b      	strh	r3, [r7, #8]
 80023ee:	4613      	mov	r3, r2
 80023f0:	80fb      	strh	r3, [r7, #6]
	if (positioning & CENTER_OBJECT) {
 80023f2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80023f6:	f003 0302 	and.w	r3, r3, #2
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d006      	beq.n	800240c <drawImageIntoFramebuffer+0x34>
		 getRectCenter(&x, &y, length, height);
 80023fe:	893b      	ldrh	r3, [r7, #8]
 8002400:	897a      	ldrh	r2, [r7, #10]
 8002402:	1db8      	adds	r0, r7, #6
 8002404:	f107 0120 	add.w	r1, r7, #32
 8002408:	f7ff fe8e 	bl	8002128 <getRectCenter>
	}
	for (int xx = x; xx < x + length; xx++) {
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	617b      	str	r3, [r7, #20]
 8002410:	e047      	b.n	80024a2 <drawImageIntoFramebuffer+0xca>
		for (int yy = y; yy < y + height; yy++) {
 8002412:	8c3b      	ldrh	r3, [r7, #32]
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	e038      	b.n	800248a <drawImageIntoFramebuffer+0xb2>
			if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 8002418:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800241a:	697a      	ldr	r2, [r7, #20]
 800241c:	429a      	cmp	r2, r3
 800241e:	bfac      	ite	ge
 8002420:	2301      	movge	r3, #1
 8002422:	2300      	movlt	r3, #0
 8002424:	b2da      	uxtb	r2, r3
 8002426:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8002428:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 800242a:	440b      	add	r3, r1
 800242c:	6979      	ldr	r1, [r7, #20]
 800242e:	4299      	cmp	r1, r3
 8002430:	bfb4      	ite	lt
 8002432:	2301      	movlt	r3, #1
 8002434:	2300      	movge	r3, #0
 8002436:	b2db      	uxtb	r3, r3
 8002438:	4013      	ands	r3, r2
 800243a:	b2db      	uxtb	r3, r3
 800243c:	2b00      	cmp	r3, #0
 800243e:	d02c      	beq.n	800249a <drawImageIntoFramebuffer+0xc2>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + yy] = image[(height - yy + y - 1) * length + (length - xx + x - 1)];
 8002440:	893a      	ldrh	r2, [r7, #8]
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	8c3a      	ldrh	r2, [r7, #32]
 8002448:	4413      	add	r3, r2
 800244a:	3b01      	subs	r3, #1
 800244c:	897a      	ldrh	r2, [r7, #10]
 800244e:	fb03 f202 	mul.w	r2, r3, r2
 8002452:	8979      	ldrh	r1, [r7, #10]
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	88f9      	ldrh	r1, [r7, #6]
 800245a:	440b      	add	r3, r1
 800245c:	3b01      	subs	r3, #1
 800245e:	4413      	add	r3, r2
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	18d1      	adds	r1, r2, r3
 8002466:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	1ad2      	subs	r2, r2, r3
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	019b      	lsls	r3, r3, #6
 8002474:	461a      	mov	r2, r3
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	4413      	add	r3, r2
 800247a:	005b      	lsls	r3, r3, #1
 800247c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800247e:	4413      	add	r3, r2
 8002480:	880a      	ldrh	r2, [r1, #0]
 8002482:	801a      	strh	r2, [r3, #0]
		for (int yy = y; yy < y + height; yy++) {
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	3301      	adds	r3, #1
 8002488:	613b      	str	r3, [r7, #16]
 800248a:	8c3b      	ldrh	r3, [r7, #32]
 800248c:	461a      	mov	r2, r3
 800248e:	893b      	ldrh	r3, [r7, #8]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	dbbf      	blt.n	8002418 <drawImageIntoFramebuffer+0x40>
 8002498:	e000      	b.n	800249c <drawImageIntoFramebuffer+0xc4>
			} else {
				break;
 800249a:	bf00      	nop
	for (int xx = x; xx < x + length; xx++) {
 800249c:	697b      	ldr	r3, [r7, #20]
 800249e:	3301      	adds	r3, #1
 80024a0:	617b      	str	r3, [r7, #20]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	461a      	mov	r2, r3
 80024a6:	897b      	ldrh	r3, [r7, #10]
 80024a8:	4413      	add	r3, r2
 80024aa:	697a      	ldr	r2, [r7, #20]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	dbb0      	blt.n	8002412 <drawImageIntoFramebuffer+0x3a>
			}
		}
	}
}
 80024b0:	bf00      	nop
 80024b2:	bf00      	nop
 80024b4:	3718      	adds	r7, #24
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bd80      	pop	{r7, pc}
	...

080024bc <setrpmdata>:
DisplayObject* splashobjects[3] = {
		new ImageObject(epd_bitmap_Screenshot_from_2025_05_03_23_43_00, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	@ 0x30
 80024c0:	af04      	add	r7, sp, #16
 80024c2:	6078      	str	r0, [r7, #4]
	char newrpmresult[17] = "rpm: ";
 80024c4:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <setrpmdata+0x68>)
 80024c6:	f107 030c 	add.w	r3, r7, #12
 80024ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80024ce:	6018      	str	r0, [r3, #0]
 80024d0:	3304      	adds	r3, #4
 80024d2:	8019      	strh	r1, [r3, #0]
 80024d4:	f107 0312 	add.w	r3, r7, #18
 80024d8:	2200      	movs	r2, #0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	605a      	str	r2, [r3, #4]
 80024de:	f8c3 2007 	str.w	r2, [r3, #7]
	strncpy(rpmresult, newrpmresult, 16);
 80024e2:	f107 030c 	add.w	r3, r7, #12
 80024e6:	2210      	movs	r2, #16
 80024e8:	4619      	mov	r1, r3
 80024ea:	480f      	ldr	r0, [pc, #60]	@ (8002528 <setrpmdata+0x6c>)
 80024ec:	f009 fd45 	bl	800bf7a <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80024f0:	220a      	movs	r2, #10
 80024f2:	6879      	ldr	r1, [r7, #4]
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <setrpmdata+0x6c>)
 80024f6:	f009 fd2d 	bl	800bf54 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 240, 160, 1);
 80024fa:	4b0c      	ldr	r3, [pc, #48]	@ (800252c <setrpmdata+0x70>)
 80024fc:	6818      	ldr	r0, [r3, #0]
 80024fe:	2301      	movs	r3, #1
 8002500:	9303      	str	r3, [sp, #12]
 8002502:	23a0      	movs	r3, #160	@ 0xa0
 8002504:	9302      	str	r3, [sp, #8]
 8002506:	23f0      	movs	r3, #240	@ 0xf0
 8002508:	9301      	str	r3, [sp, #4]
 800250a:	4b09      	ldr	r3, [pc, #36]	@ (8002530 <setrpmdata+0x74>)
 800250c:	9300      	str	r3, [sp, #0]
 800250e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002512:	2202      	movs	r2, #2
 8002514:	4904      	ldr	r1, [pc, #16]	@ (8002528 <setrpmdata+0x6c>)
 8002516:	f7ff faf9 	bl	8001b0c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800251a:	bf00      	nop
 800251c:	3720      	adds	r7, #32
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	0800c1dc 	.word	0x0800c1dc
 8002528:	20000004 	.word	0x20000004
 800252c:	20000378 	.word	0x20000378
 8002530:	0800f388 	.word	0x0800f388

08002534 <settempdata>:

void settempdata(char *tempvalue) {
 8002534:	b580      	push	{r7, lr}
 8002536:	b08c      	sub	sp, #48	@ 0x30
 8002538:	af04      	add	r7, sp, #16
 800253a:	6078      	str	r0, [r7, #4]
	char newtempresult[18] = "temp: ";
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <settempdata+0x6c>)
 800253e:	f107 030c 	add.w	r3, r7, #12
 8002542:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002546:	6018      	str	r0, [r3, #0]
 8002548:	3304      	adds	r3, #4
 800254a:	8019      	strh	r1, [r3, #0]
 800254c:	3302      	adds	r3, #2
 800254e:	0c0a      	lsrs	r2, r1, #16
 8002550:	701a      	strb	r2, [r3, #0]
 8002552:	f107 0313 	add.w	r3, r7, #19
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
 800255a:	605a      	str	r2, [r3, #4]
 800255c:	f8c3 2007 	str.w	r2, [r3, #7]
	strncpy(tempresult, newtempresult, 17);
 8002560:	f107 030c 	add.w	r3, r7, #12
 8002564:	2211      	movs	r2, #17
 8002566:	4619      	mov	r1, r3
 8002568:	480e      	ldr	r0, [pc, #56]	@ (80025a4 <settempdata+0x70>)
 800256a:	f009 fd06 	bl	800bf7a <strncpy>
	strncat(tempresult, tempvalue, 10);
 800256e:	220a      	movs	r2, #10
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	480c      	ldr	r0, [pc, #48]	@ (80025a4 <settempdata+0x70>)
 8002574:	f009 fcee 	bl	800bf54 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 240, 100, 3);
 8002578:	4b0b      	ldr	r3, [pc, #44]	@ (80025a8 <settempdata+0x74>)
 800257a:	6858      	ldr	r0, [r3, #4]
 800257c:	2303      	movs	r3, #3
 800257e:	9303      	str	r3, [sp, #12]
 8002580:	2364      	movs	r3, #100	@ 0x64
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	23f0      	movs	r3, #240	@ 0xf0
 8002586:	9301      	str	r3, [sp, #4]
 8002588:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <settempdata+0x78>)
 800258a:	9300      	str	r3, [sp, #0]
 800258c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002590:	2202      	movs	r2, #2
 8002592:	4904      	ldr	r1, [pc, #16]	@ (80025a4 <settempdata+0x70>)
 8002594:	f7ff faba 	bl	8001b0c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 8002598:	bf00      	nop
 800259a:	3720      	adds	r7, #32
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	0800c1f0 	.word	0x0800c1f0
 80025a4:	20000018 	.word	0x20000018
 80025a8:	20000378 	.word	0x20000378
 80025ac:	0800d5f0 	.word	0x0800d5f0

080025b0 <setgeardata>:

void setgeardata(char *gearvalue) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b08c      	sub	sp, #48	@ 0x30
 80025b4:	af04      	add	r7, sp, #16
 80025b6:	6078      	str	r0, [r7, #4]
	char newgearresult[20] = "GEAR: ";
 80025b8:	4a18      	ldr	r2, [pc, #96]	@ (800261c <setgeardata+0x6c>)
 80025ba:	f107 030c 	add.w	r3, r7, #12
 80025be:	e892 0003 	ldmia.w	r2, {r0, r1}
 80025c2:	6018      	str	r0, [r3, #0]
 80025c4:	3304      	adds	r3, #4
 80025c6:	8019      	strh	r1, [r3, #0]
 80025c8:	3302      	adds	r3, #2
 80025ca:	0c0a      	lsrs	r2, r1, #16
 80025cc:	701a      	strb	r2, [r3, #0]
 80025ce:	f107 0313 	add.w	r3, r7, #19
 80025d2:	2200      	movs	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
 80025d6:	605a      	str	r2, [r3, #4]
 80025d8:	609a      	str	r2, [r3, #8]
 80025da:	731a      	strb	r2, [r3, #12]
	strncpy(gearresult, newgearresult, 20);
 80025dc:	f107 030c 	add.w	r3, r7, #12
 80025e0:	2214      	movs	r2, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	480e      	ldr	r0, [pc, #56]	@ (8002620 <setgeardata+0x70>)
 80025e6:	f009 fcc8 	bl	800bf7a <strncpy>
	strncat(gearresult, gearvalue, 10);
 80025ea:	220a      	movs	r2, #10
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	480c      	ldr	r0, [pc, #48]	@ (8002620 <setgeardata+0x70>)
 80025f0:	f009 fcb0 	bl	800bf54 <strncat>
	((StringObject*)otherobjects[2])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 240, 200, 2);
 80025f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002624 <setgeardata+0x74>)
 80025f6:	6898      	ldr	r0, [r3, #8]
 80025f8:	2302      	movs	r3, #2
 80025fa:	9303      	str	r3, [sp, #12]
 80025fc:	23c8      	movs	r3, #200	@ 0xc8
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	23f0      	movs	r3, #240	@ 0xf0
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	4b08      	ldr	r3, [pc, #32]	@ (8002628 <setgeardata+0x78>)
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800260c:	2202      	movs	r2, #2
 800260e:	4904      	ldr	r1, [pc, #16]	@ (8002620 <setgeardata+0x70>)
 8002610:	f7ff fa7c 	bl	8001b0c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8002614:	bf00      	nop
 8002616:	3720      	adds	r7, #32
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	0800c204 	.word	0x0800c204
 8002620:	2000002c 	.word	0x2000002c
 8002624:	20000378 	.word	0x20000378
 8002628:	0800f388 	.word	0x0800f388

0800262c <domainscreen>:

void domainscreen() {
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8002630:	4804      	ldr	r0, [pc, #16]	@ (8002644 <domainscreen+0x18>)
 8002632:	f7fe fffd 	bl	8001630 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 3);
 8002636:	2203      	movs	r2, #3
 8002638:	4903      	ldr	r1, [pc, #12]	@ (8002648 <domainscreen+0x1c>)
 800263a:	4802      	ldr	r0, [pc, #8]	@ (8002644 <domainscreen+0x18>)
 800263c:	f7fe ffc4 	bl	80015c8 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002640:	bf00      	nop
 8002642:	bd80      	pop	{r7, pc}
 8002644:	20000384 	.word	0x20000384
 8002648:	20000378 	.word	0x20000378

0800264c <dosplashscene>:

void dosplashscene() {
 800264c:	b580      	push	{r7, lr}
 800264e:	af00      	add	r7, sp, #0
	splashScene.drawScene();
 8002650:	4804      	ldr	r0, [pc, #16]	@ (8002664 <dosplashscene+0x18>)
 8002652:	f7fe ffed 	bl	8001630 <_ZN5Scene9drawSceneEv>
	splashScene.setScene(splashobjects, 1);
 8002656:	2201      	movs	r2, #1
 8002658:	4903      	ldr	r1, [pc, #12]	@ (8002668 <dosplashscene+0x1c>)
 800265a:	4802      	ldr	r0, [pc, #8]	@ (8002664 <dosplashscene+0x18>)
 800265c:	f7fe ffb4 	bl	80015c8 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8002660:	bf00      	nop
 8002662:	bd80      	pop	{r7, pc}
 8002664:	20000398 	.word	0x20000398
 8002668:	2000038c 	.word	0x2000038c

0800266c <_Z41__static_initialization_and_destruction_0v>:
 800266c:	b590      	push	{r4, r7, lr}
 800266e:	b085      	sub	sp, #20
 8002670:	af04      	add	r7, sp, #16
		new StringObject(240, 160, 0xFFFF, FREE_MONO_BOLD_24PT7B, CENTER_OBJECT, rpmresult, 1),
 8002672:	2018      	movs	r0, #24
 8002674:	f009 fb28 	bl	800bcc8 <_Znwj>
 8002678:	4603      	mov	r3, r0
 800267a:	461c      	mov	r4, r3
 800267c:	2301      	movs	r3, #1
 800267e:	9303      	str	r3, [sp, #12]
 8002680:	4b2f      	ldr	r3, [pc, #188]	@ (8002740 <_Z41__static_initialization_and_destruction_0v+0xd4>)
 8002682:	9302      	str	r3, [sp, #8]
 8002684:	2302      	movs	r3, #2
 8002686:	9301      	str	r3, [sp, #4]
 8002688:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 800268a:	9300      	str	r3, [sp, #0]
 800268c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8002690:	22a0      	movs	r2, #160	@ 0xa0
 8002692:	21f0      	movs	r1, #240	@ 0xf0
 8002694:	4620      	mov	r0, r4
 8002696:	f7ff f9c7 	bl	8001a28 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800269a:	4b2b      	ldr	r3, [pc, #172]	@ (8002748 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 800269c:	601c      	str	r4, [r3, #0]
		new StringObject(240, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 800269e:	2018      	movs	r0, #24
 80026a0:	f009 fb12 	bl	800bcc8 <_Znwj>
 80026a4:	4603      	mov	r3, r0
 80026a6:	461c      	mov	r4, r3
 80026a8:	2303      	movs	r3, #3
 80026aa:	9303      	str	r3, [sp, #12]
 80026ac:	4b27      	ldr	r3, [pc, #156]	@ (800274c <_Z41__static_initialization_and_destruction_0v+0xe0>)
 80026ae:	9302      	str	r3, [sp, #8]
 80026b0:	2302      	movs	r3, #2
 80026b2:	9301      	str	r3, [sp, #4]
 80026b4:	4b26      	ldr	r3, [pc, #152]	@ (8002750 <_Z41__static_initialization_and_destruction_0v+0xe4>)
 80026b6:	9300      	str	r3, [sp, #0]
 80026b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026bc:	2264      	movs	r2, #100	@ 0x64
 80026be:	21f0      	movs	r1, #240	@ 0xf0
 80026c0:	4620      	mov	r0, r4
 80026c2:	f7ff f9b1 	bl	8001a28 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80026c6:	4b20      	ldr	r3, [pc, #128]	@ (8002748 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 80026c8:	605c      	str	r4, [r3, #4]
		new StringObject(240, 200, 0xFFFF, FREE_MONO_BOLD_24PT7B, CENTER_OBJECT, gearresult, 2)
 80026ca:	2018      	movs	r0, #24
 80026cc:	f009 fafc 	bl	800bcc8 <_Znwj>
 80026d0:	4603      	mov	r3, r0
 80026d2:	461c      	mov	r4, r3
 80026d4:	2302      	movs	r3, #2
 80026d6:	9303      	str	r3, [sp, #12]
 80026d8:	4b1e      	ldr	r3, [pc, #120]	@ (8002754 <_Z41__static_initialization_and_destruction_0v+0xe8>)
 80026da:	9302      	str	r3, [sp, #8]
 80026dc:	2302      	movs	r3, #2
 80026de:	9301      	str	r3, [sp, #4]
 80026e0:	4b18      	ldr	r3, [pc, #96]	@ (8002744 <_Z41__static_initialization_and_destruction_0v+0xd8>)
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80026e8:	22c8      	movs	r2, #200	@ 0xc8
 80026ea:	21f0      	movs	r1, #240	@ 0xf0
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff f99b 	bl	8001a28 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 80026f4:	609c      	str	r4, [r3, #8]
Scene myScene2(otherobjects, 3);
 80026f6:	2203      	movs	r2, #3
 80026f8:	4913      	ldr	r1, [pc, #76]	@ (8002748 <_Z41__static_initialization_and_destruction_0v+0xdc>)
 80026fa:	4817      	ldr	r0, [pc, #92]	@ (8002758 <_Z41__static_initialization_and_destruction_0v+0xec>)
 80026fc:	f7fe ff52 	bl	80015a4 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(epd_bitmap_Screenshot_from_2025_05_03_23_43_00, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8002700:	2014      	movs	r0, #20
 8002702:	f009 fae1 	bl	800bcc8 <_Znwj>
 8002706:	4603      	mov	r3, r0
 8002708:	461c      	mov	r4, r3
 800270a:	2302      	movs	r3, #2
 800270c:	9303      	str	r3, [sp, #12]
 800270e:	2302      	movs	r3, #2
 8002710:	9302      	str	r3, [sp, #8]
 8002712:	23a0      	movs	r3, #160	@ 0xa0
 8002714:	9301      	str	r3, [sp, #4]
 8002716:	23f0      	movs	r3, #240	@ 0xf0
 8002718:	9300      	str	r3, [sp, #0]
 800271a:	23d7      	movs	r3, #215	@ 0xd7
 800271c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8002720:	490e      	ldr	r1, [pc, #56]	@ (800275c <_Z41__static_initialization_and_destruction_0v+0xf0>)
 8002722:	4620      	mov	r0, r4
 8002724:	f7ff fa24 	bl	8001b70 <_ZN11ImageObjectC1EPKttttthh>
};
 8002728:	4b0d      	ldr	r3, [pc, #52]	@ (8002760 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 800272a:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 800272c:	2201      	movs	r2, #1
 800272e:	490c      	ldr	r1, [pc, #48]	@ (8002760 <_Z41__static_initialization_and_destruction_0v+0xf4>)
 8002730:	480c      	ldr	r0, [pc, #48]	@ (8002764 <_Z41__static_initialization_and_destruction_0v+0xf8>)
 8002732:	f7fe ff37 	bl	80015a4 <_ZN5SceneC1EPP13DisplayObjecth>
}
 8002736:	bf00      	nop
 8002738:	3704      	adds	r7, #4
 800273a:	46bd      	mov	sp, r7
 800273c:	bd90      	pop	{r4, r7, pc}
 800273e:	bf00      	nop
 8002740:	20000004 	.word	0x20000004
 8002744:	0800f388 	.word	0x0800f388
 8002748:	20000378 	.word	0x20000378
 800274c:	20000018 	.word	0x20000018
 8002750:	0800d5f0 	.word	0x0800d5f0
 8002754:	2000002c 	.word	0x2000002c
 8002758:	20000384 	.word	0x20000384
 800275c:	0800f398 	.word	0x0800f398
 8002760:	2000038c 	.word	0x2000038c
 8002764:	20000398 	.word	0x20000398

08002768 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
 800276c:	f7ff ff7e 	bl	800266c <_Z41__static_initialization_and_destruction_0v>
 8002770:	bd80      	pop	{r7, pc}

08002772 <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8002772:	b580      	push	{r7, lr}
 8002774:	b084      	sub	sp, #16
 8002776:	af00      	add	r7, sp, #0
 8002778:	60f8      	str	r0, [r7, #12]
 800277a:	60b9      	str	r1, [r7, #8]
 800277c:	607a      	str	r2, [r7, #4]
 800277e:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	7e3a      	ldrb	r2, [r7, #24]
 800278a:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	605a      	str	r2, [r3, #4]
    endSPI();
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f839 	bl	8002810 <_ZN7MCP25156endSPIEv>
}
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b082      	sub	sp, #8
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6818      	ldr	r0, [r3, #0]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	1cf9      	adds	r1, r7, #3
 80027be:	2201      	movs	r2, #1
 80027c0:	f003 fb59 	bl	8005e76 <HAL_SPI_Transmit>
}
 80027c4:	bf00      	nop
 80027c6:	3708      	adds	r7, #8
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}

080027cc <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6818      	ldr	r0, [r3, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f107 010f 	add.w	r1, r7, #15
 80027e0:	2201      	movs	r2, #1
 80027e2:	f003 fc8c 	bl	80060fe <HAL_SPI_Receive>
	return retVal;
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3710      	adds	r7, #16
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6898      	ldr	r0, [r3, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	7b1b      	ldrb	r3, [r3, #12]
 8002800:	2200      	movs	r2, #0
 8002802:	4619      	mov	r1, r3
 8002804:	f001 fc12 	bl	800402c <HAL_GPIO_WritePin>
}
 8002808:	bf00      	nop
 800280a:	3708      	adds	r7, #8
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}

08002810 <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8002810:	b580      	push	{r7, lr}
 8002812:	b082      	sub	sp, #8
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6898      	ldr	r0, [r3, #8]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	7b1b      	ldrb	r3, [r3, #12]
 8002820:	2201      	movs	r2, #1
 8002822:	4619      	mov	r1, r3
 8002824:	f001 fc02 	bl	800402c <HAL_GPIO_WritePin>
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b08c      	sub	sp, #48	@ 0x30
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	startSPI();
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f7ff ffd9 	bl	80027f0 <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 800283e:	21c0      	movs	r1, #192	@ 0xc0
 8002840:	6878      	ldr	r0, [r7, #4]
 8002842:	f7ff ffb1 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8002846:	6878      	ldr	r0, [r7, #4]
 8002848:	f7ff ffe2 	bl	8002810 <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 800284c:	f107 0314 	add.w	r3, r7, #20
 8002850:	220e      	movs	r2, #14
 8002852:	2100      	movs	r1, #0
 8002854:	4618      	mov	r0, r3
 8002856:	f009 fb75 	bl	800bf44 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 800285a:	f107 0214 	add.w	r2, r7, #20
 800285e:	230e      	movs	r3, #14
 8002860:	2130      	movs	r1, #48	@ 0x30
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8ec 	bl	8002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8002868:	f107 0214 	add.w	r2, r7, #20
 800286c:	230e      	movs	r3, #14
 800286e:	2140      	movs	r1, #64	@ 0x40
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8e5 	bl	8002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8002876:	f107 0214 	add.w	r2, r7, #20
 800287a:	230e      	movs	r3, #14
 800287c:	2150      	movs	r1, #80	@ 0x50
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f8de 	bl	8002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8002884:	2200      	movs	r2, #0
 8002886:	2160      	movs	r1, #96	@ 0x60
 8002888:	6878      	ldr	r0, [r7, #4]
 800288a:	f000 f8b9 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 800288e:	2200      	movs	r2, #0
 8002890:	2170      	movs	r1, #112	@ 0x70
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 f8b4 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8002898:	22a3      	movs	r2, #163	@ 0xa3
 800289a:	212b      	movs	r1, #43	@ 0x2b
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8af 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 80028a2:	2304      	movs	r3, #4
 80028a4:	2267      	movs	r2, #103	@ 0x67
 80028a6:	2160      	movs	r1, #96	@ 0x60
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f000 f8f8 	bl	8002a9e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 80028ae:	2301      	movs	r3, #1
 80028b0:	2267      	movs	r2, #103	@ 0x67
 80028b2:	2170      	movs	r1, #112	@ 0x70
 80028b4:	6878      	ldr	r0, [r7, #4]
 80028b6:	f000 f8f2 	bl	8002a9e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 80028ba:	4a29      	ldr	r2, [pc, #164]	@ (8002960 <_ZN7MCP25155resetEv+0x130>)
 80028bc:	f107 030c 	add.w	r3, r7, #12
 80028c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80028c4:	6018      	str	r0, [r3, #0]
 80028c6:	3304      	adds	r3, #4
 80028c8:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 80028ca:	2300      	movs	r3, #0
 80028cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80028ce:	e01e      	b.n	800290e <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 80028d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	bf0c      	ite	eq
 80028d6:	2301      	moveq	r3, #1
 80028d8:	2300      	movne	r3, #0
 80028da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 80028de:	f107 020c 	add.w	r2, r7, #12
 80028e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80028e4:	4413      	add	r3, r2
 80028e6:	7819      	ldrb	r1, [r3, #0]
 80028e8:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80028ec:	2300      	movs	r3, #0
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 fbce 	bl	8003090 <_ZN7MCP25159setFilterENS_3RXFEbm>
 80028f4:	4603      	mov	r3, r0
 80028f6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 80028fa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d002      	beq.n	8002908 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8002902:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002906:	e027      	b.n	8002958 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8002908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800290a:	3301      	adds	r3, #1
 800290c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800290e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002910:	2b05      	cmp	r3, #5
 8002912:	dddd      	ble.n	80028d0 <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8002914:	2300      	movs	r3, #0
 8002916:	723b      	strb	r3, [r7, #8]
 8002918:	2301      	movs	r3, #1
 800291a:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002920:	e016      	b.n	8002950 <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8002922:	f107 0208 	add.w	r2, r7, #8
 8002926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002928:	4413      	add	r3, r2
 800292a:	7819      	ldrb	r1, [r3, #0]
 800292c:	2300      	movs	r3, #0
 800292e:	2201      	movs	r2, #1
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 fb79 	bl	8003028 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8002936:	4603      	mov	r3, r0
 8002938:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 800293c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002940:	2b00      	cmp	r3, #0
 8002942:	d002      	beq.n	800294a <_ZN7MCP25155resetEv+0x11a>
            return result;
 8002944:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002948:	e006      	b.n	8002958 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 800294a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294c:	3301      	adds	r3, #1
 800294e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002952:	2b01      	cmp	r3, #1
 8002954:	dde5      	ble.n	8002922 <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8002956:	2300      	movs	r3, #0
}
 8002958:	4618      	mov	r0, r3
 800295a:	3730      	adds	r7, #48	@ 0x30
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	0800c218 	.word	0x0800c218

08002964 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8002970:	6878      	ldr	r0, [r7, #4]
 8002972:	f7ff ff3d 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8002976:	2103      	movs	r1, #3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ff15 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 800297e:	78fb      	ldrb	r3, [r7, #3]
 8002980:	4619      	mov	r1, r3
 8002982:	6878      	ldr	r0, [r7, #4]
 8002984:	f7ff ff10 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f7ff ff1f 	bl	80027cc <_ZN7MCP25156SPI_RxEv>
 800298e:	4603      	mov	r3, r0
 8002990:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff3c 	bl	8002810 <_ZN7MCP25156endSPIEv>

    return ret;
 8002998:	7bfb      	ldrb	r3, [r7, #15]
}
 800299a:	4618      	mov	r0, r3
 800299c:	3710      	adds	r7, #16
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 80029a2:	b590      	push	{r4, r7, lr}
 80029a4:	b087      	sub	sp, #28
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	60f8      	str	r0, [r7, #12]
 80029aa:	607a      	str	r2, [r7, #4]
 80029ac:	461a      	mov	r2, r3
 80029ae:	460b      	mov	r3, r1
 80029b0:	72fb      	strb	r3, [r7, #11]
 80029b2:	4613      	mov	r3, r2
 80029b4:	72bb      	strb	r3, [r7, #10]
    startSPI();
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	f7ff ff1a 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 80029bc:	2103      	movs	r1, #3
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f7ff fef2 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 80029c4:	7afb      	ldrb	r3, [r7, #11]
 80029c6:	4619      	mov	r1, r3
 80029c8:	68f8      	ldr	r0, [r7, #12]
 80029ca:	f7ff feed 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 80029ce:	2300      	movs	r3, #0
 80029d0:	75fb      	strb	r3, [r7, #23]
 80029d2:	e00a      	b.n	80029ea <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 80029d4:	7dfb      	ldrb	r3, [r7, #23]
 80029d6:	687a      	ldr	r2, [r7, #4]
 80029d8:	18d4      	adds	r4, r2, r3
 80029da:	68f8      	ldr	r0, [r7, #12]
 80029dc:	f7ff fef6 	bl	80027cc <_ZN7MCP25156SPI_RxEv>
 80029e0:	4603      	mov	r3, r0
 80029e2:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 80029e4:	7dfb      	ldrb	r3, [r7, #23]
 80029e6:	3301      	adds	r3, #1
 80029e8:	75fb      	strb	r3, [r7, #23]
 80029ea:	7dfa      	ldrb	r2, [r7, #23]
 80029ec:	7abb      	ldrb	r3, [r7, #10]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d3f0      	bcc.n	80029d4 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f7ff ff0c 	bl	8002810 <_ZN7MCP25156endSPIEv>
}
 80029f8:	bf00      	nop
 80029fa:	371c      	adds	r7, #28
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd90      	pop	{r4, r7, pc}

08002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	70fb      	strb	r3, [r7, #3]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8002a10:	6878      	ldr	r0, [r7, #4]
 8002a12:	f7ff feed 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8002a16:	2102      	movs	r1, #2
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f7ff fec5 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8002a1e:	78fb      	ldrb	r3, [r7, #3]
 8002a20:	4619      	mov	r1, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f7ff fec0 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8002a28:	78bb      	ldrb	r3, [r7, #2]
 8002a2a:	4619      	mov	r1, r3
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f7ff febb 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7ff feec 	bl	8002810 <_ZN7MCP25156endSPIEv>
}
 8002a38:	bf00      	nop
 8002a3a:	3708      	adds	r7, #8
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bd80      	pop	{r7, pc}

08002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b086      	sub	sp, #24
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	607a      	str	r2, [r7, #4]
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	72fb      	strb	r3, [r7, #11]
 8002a50:	4613      	mov	r3, r2
 8002a52:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8002a54:	68f8      	ldr	r0, [r7, #12]
 8002a56:	f7ff fecb 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8002a5a:	2102      	movs	r1, #2
 8002a5c:	68f8      	ldr	r0, [r7, #12]
 8002a5e:	f7ff fea3 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8002a62:	7afb      	ldrb	r3, [r7, #11]
 8002a64:	4619      	mov	r1, r3
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f7ff fe9e 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	75fb      	strb	r3, [r7, #23]
 8002a70:	e00a      	b.n	8002a88 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8002a72:	7dfb      	ldrb	r3, [r7, #23]
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	4413      	add	r3, r2
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	4619      	mov	r1, r3
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f7ff fe93 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8002a82:	7dfb      	ldrb	r3, [r7, #23]
 8002a84:	3301      	adds	r3, #1
 8002a86:	75fb      	strb	r3, [r7, #23]
 8002a88:	7dfa      	ldrb	r2, [r7, #23]
 8002a8a:	7abb      	ldrb	r3, [r7, #10]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d3f0      	bcc.n	8002a72 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff febd 	bl	8002810 <_ZN7MCP25156endSPIEv>
}
 8002a96:	bf00      	nop
 8002a98:	3718      	adds	r7, #24
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b082      	sub	sp, #8
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	6078      	str	r0, [r7, #4]
 8002aa6:	4608      	mov	r0, r1
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	461a      	mov	r2, r3
 8002aac:	4603      	mov	r3, r0
 8002aae:	70fb      	strb	r3, [r7, #3]
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	70bb      	strb	r3, [r7, #2]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	707b      	strb	r3, [r7, #1]
    startSPI();
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f7ff fe99 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8002abe:	2105      	movs	r1, #5
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff fe71 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8002ac6:	78fb      	ldrb	r3, [r7, #3]
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fe6c 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8002ad0:	78bb      	ldrb	r3, [r7, #2]
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f7ff fe67 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8002ada:	787b      	ldrb	r3, [r7, #1]
 8002adc:	4619      	mov	r1, r3
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7ff fe62 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f7ff fe93 	bl	8002810 <_ZN7MCP25156endSPIEv>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b084      	sub	sp, #16
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
    startSPI();
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff fe78 	bl	80027f0 <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8002b00:	21a0      	movs	r1, #160	@ 0xa0
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f7ff fe50 	bl	80027a8 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fe5f 	bl	80027cc <_ZN7MCP25156SPI_RxEv>
 8002b0e:	4603      	mov	r3, r0
 8002b10:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff fe7c 	bl	8002810 <_ZN7MCP25156endSPIEv>

    return i;
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	3710      	adds	r7, #16
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8002b2a:	2180      	movs	r1, #128	@ 0x80
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f000 f812 	bl	8002b56 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8002b32:	4603      	mov	r3, r0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3708      	adds	r7, #8
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}

08002b3c <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8002b44:	2100      	movs	r1, #0
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f805 	bl	8002b56 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8002b4c:	4603      	mov	r3, r0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}

08002b56 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8002b56:	b580      	push	{r7, lr}
 8002b58:	b086      	sub	sp, #24
 8002b5a:	af00      	add	r7, sp, #0
 8002b5c:	6078      	str	r0, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8002b62:	78fb      	ldrb	r3, [r7, #3]
 8002b64:	22e0      	movs	r2, #224	@ 0xe0
 8002b66:	210f      	movs	r1, #15
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ff98 	bl	8002a9e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8002b6e:	f000 fc05 	bl	800337c <HAL_GetTick>
 8002b72:	4603      	mov	r3, r0
 8002b74:	330a      	adds	r3, #10
 8002b76:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8002b7c:	e013      	b.n	8002ba6 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8002b7e:	210e      	movs	r1, #14
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff feef 	bl	8002964 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8002b86:	4603      	mov	r3, r0
 8002b88:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8002b8a:	7bfb      	ldrb	r3, [r7, #15]
 8002b8c:	f023 031f 	bic.w	r3, r3, #31
 8002b90:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8002b92:	7bfa      	ldrb	r2, [r7, #15]
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	429a      	cmp	r2, r3
 8002b98:	bf0c      	ite	eq
 8002b9a:	2301      	moveq	r3, #1
 8002b9c:	2300      	movne	r3, #0
 8002b9e:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8002ba0:	7dfb      	ldrb	r3, [r7, #23]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8002ba6:	f000 fbe9 	bl	800337c <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	bf8c      	ite	hi
 8002bb2:	2301      	movhi	r3, #1
 8002bb4:	2300      	movls	r3, #0
 8002bb6:	b2db      	uxtb	r3, r3
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1e0      	bne.n	8002b7e <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8002bbc:	e000      	b.n	8002bc0 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8002bbe:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8002bc0:	7dfb      	ldrb	r3, [r7, #23]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d001      	beq.n	8002bca <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	e000      	b.n	8002bcc <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8002bca:	2301      	movs	r3, #1

}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	70fb      	strb	r3, [r7, #3]
 8002be0:	4613      	mov	r3, r2
 8002be2:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f7ff ff9c 	bl	8002b22 <_ZN7MCP251513setConfigModeEv>
 8002bea:	4603      	mov	r3, r0
 8002bec:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8002bee:	7afb      	ldrb	r3, [r7, #11]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8002bf4:	7afb      	ldrb	r3, [r7, #11]
 8002bf6:	e1b5      	b.n	8002f64 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8002bfc:	78bb      	ldrb	r3, [r7, #2]
 8002bfe:	2b02      	cmp	r3, #2
 8002c00:	d009      	beq.n	8002c16 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8002c02:	2b02      	cmp	r3, #2
 8002c04:	f300 8193 	bgt.w	8002f2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	f000 811f 	beq.w	8002e4c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	f000 808e 	beq.w	8002d30 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8002c14:	e18b      	b.n	8002f2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8002c16:	78fb      	ldrb	r3, [r7, #3]
 8002c18:	2b0f      	cmp	r3, #15
 8002c1a:	f200 8085 	bhi.w	8002d28 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8002c1e:	a201      	add	r2, pc, #4	@ (adr r2, 8002c24 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8002c20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c24:	08002c65 	.word	0x08002c65
 8002c28:	08002c73 	.word	0x08002c73
 8002c2c:	08002c81 	.word	0x08002c81
 8002c30:	08002c8f 	.word	0x08002c8f
 8002c34:	08002c9d 	.word	0x08002c9d
 8002c38:	08002cab 	.word	0x08002cab
 8002c3c:	08002cb9 	.word	0x08002cb9
 8002c40:	08002cc7 	.word	0x08002cc7
 8002c44:	08002d29 	.word	0x08002d29
 8002c48:	08002d29 	.word	0x08002d29
 8002c4c:	08002cd5 	.word	0x08002cd5
 8002c50:	08002ce3 	.word	0x08002ce3
 8002c54:	08002cf1 	.word	0x08002cf1
 8002c58:	08002cff 	.word	0x08002cff
 8002c5c:	08002d0d 	.word	0x08002d0d
 8002c60:	08002d1b 	.word	0x08002d1b
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8002c64:	231f      	movs	r3, #31
 8002c66:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8002c68:	23bf      	movs	r3, #191	@ 0xbf
 8002c6a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8002c6c:	2387      	movs	r3, #135	@ 0x87
 8002c6e:	733b      	strb	r3, [r7, #12]
            break;
 8002c70:	e05d      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8002c72:	230f      	movs	r3, #15
 8002c74:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8002c76:	23bf      	movs	r3, #191	@ 0xbf
 8002c78:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8002c7a:	2387      	movs	r3, #135	@ 0x87
 8002c7c:	733b      	strb	r3, [r7, #12]
            break;
 8002c7e:	e056      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8002c80:	2307      	movs	r3, #7
 8002c82:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8002c84:	23bf      	movs	r3, #191	@ 0xbf
 8002c86:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8002c88:	2387      	movs	r3, #135	@ 0x87
 8002c8a:	733b      	strb	r3, [r7, #12]
            break;
 8002c8c:	e04f      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8002c8e:	2307      	movs	r3, #7
 8002c90:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8002c92:	23a4      	movs	r3, #164	@ 0xa4
 8002c94:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8002c96:	2384      	movs	r3, #132	@ 0x84
 8002c98:	733b      	strb	r3, [r7, #12]
            break;
 8002c9a:	e048      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8002c9c:	2347      	movs	r3, #71	@ 0x47
 8002c9e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8002ca0:	23e2      	movs	r3, #226	@ 0xe2
 8002ca2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8002ca4:	2385      	movs	r3, #133	@ 0x85
 8002ca6:	733b      	strb	r3, [r7, #12]
            break;
 8002ca8:	e041      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8002caa:	2303      	movs	r3, #3
 8002cac:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8002cae:	23bf      	movs	r3, #191	@ 0xbf
 8002cb0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8002cb2:	2387      	movs	r3, #135	@ 0x87
 8002cb4:	733b      	strb	r3, [r7, #12]
            break;
 8002cb6:	e03a      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8002cbc:	23b4      	movs	r3, #180	@ 0xb4
 8002cbe:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8002cc0:	2386      	movs	r3, #134	@ 0x86
 8002cc2:	733b      	strb	r3, [r7, #12]
            break;
 8002cc4:	e033      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8002cca:	23bf      	movs	r3, #191	@ 0xbf
 8002ccc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8002cce:	2387      	movs	r3, #135	@ 0x87
 8002cd0:	733b      	strb	r3, [r7, #12]
            break;
 8002cd2:	e02c      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8002cd8:	23b4      	movs	r3, #180	@ 0xb4
 8002cda:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8002cdc:	2386      	movs	r3, #134	@ 0x86
 8002cde:	733b      	strb	r3, [r7, #12]
            break;
 8002ce0:	e025      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8002ce2:	2301      	movs	r3, #1
 8002ce4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8002ce6:	23b1      	movs	r3, #177	@ 0xb1
 8002ce8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8002cea:	2385      	movs	r3, #133	@ 0x85
 8002cec:	733b      	strb	r3, [r7, #12]
            break;
 8002cee:	e01e      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8002cf4:	23b4      	movs	r3, #180	@ 0xb4
 8002cf6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8002cf8:	2386      	movs	r3, #134	@ 0x86
 8002cfa:	733b      	strb	r3, [r7, #12]
            break;
 8002cfc:	e017      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8002d02:	23b1      	movs	r3, #177	@ 0xb1
 8002d04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8002d06:	2385      	movs	r3, #133	@ 0x85
 8002d08:	733b      	strb	r3, [r7, #12]
            break;
 8002d0a:	e010      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8002d10:	2390      	movs	r3, #144	@ 0x90
 8002d12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8002d14:	2382      	movs	r3, #130	@ 0x82
 8002d16:	733b      	strb	r3, [r7, #12]
            break;
 8002d18:	e009      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8002d1e:	2380      	movs	r3, #128	@ 0x80
 8002d20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8002d22:	2380      	movs	r3, #128	@ 0x80
 8002d24:	733b      	strb	r3, [r7, #12]
            break;
 8002d26:	e002      	b.n	8002d2e <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	73fb      	strb	r3, [r7, #15]
            break;
 8002d2c:	bf00      	nop
        }
        break;
 8002d2e:	e101      	b.n	8002f34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	2b0f      	cmp	r3, #15
 8002d34:	f200 8086 	bhi.w	8002e44 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8002d38:	a201      	add	r2, pc, #4	@ (adr r2, 8002d40 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8002d3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3e:	bf00      	nop
 8002d40:	08002d81 	.word	0x08002d81
 8002d44:	08002d8f 	.word	0x08002d8f
 8002d48:	08002d9d 	.word	0x08002d9d
 8002d4c:	08002e45 	.word	0x08002e45
 8002d50:	08002dab 	.word	0x08002dab
 8002d54:	08002db9 	.word	0x08002db9
 8002d58:	08002dc7 	.word	0x08002dc7
 8002d5c:	08002dd5 	.word	0x08002dd5
 8002d60:	08002de3 	.word	0x08002de3
 8002d64:	08002e45 	.word	0x08002e45
 8002d68:	08002df1 	.word	0x08002df1
 8002d6c:	08002dff 	.word	0x08002dff
 8002d70:	08002e0d 	.word	0x08002e0d
 8002d74:	08002e1b 	.word	0x08002e1b
 8002d78:	08002e29 	.word	0x08002e29
 8002d7c:	08002e37 	.word	0x08002e37
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8002d80:	233f      	movs	r3, #63	@ 0x3f
 8002d82:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8002d84:	23ff      	movs	r3, #255	@ 0xff
 8002d86:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8002d88:	2387      	movs	r3, #135	@ 0x87
 8002d8a:	733b      	strb	r3, [r7, #12]
            break;
 8002d8c:	e05d      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8002d8e:	231f      	movs	r3, #31
 8002d90:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8002d92:	23ff      	movs	r3, #255	@ 0xff
 8002d94:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8002d96:	2387      	movs	r3, #135	@ 0x87
 8002d98:	733b      	strb	r3, [r7, #12]
            break;
 8002d9a:	e056      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8002d9c:	230f      	movs	r3, #15
 8002d9e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8002da0:	23ff      	movs	r3, #255	@ 0xff
 8002da2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8002da4:	2387      	movs	r3, #135	@ 0x87
 8002da6:	733b      	strb	r3, [r7, #12]
            break;
 8002da8:	e04f      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8002daa:	234e      	movs	r3, #78	@ 0x4e
 8002dac:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8002dae:	23f1      	movs	r3, #241	@ 0xf1
 8002db0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8002db2:	2385      	movs	r3, #133	@ 0x85
 8002db4:	733b      	strb	r3, [r7, #12]
            break;
 8002db6:	e048      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8002db8:	2307      	movs	r3, #7
 8002dba:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8002dbc:	23ff      	movs	r3, #255	@ 0xff
 8002dbe:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8002dc0:	2387      	movs	r3, #135	@ 0x87
 8002dc2:	733b      	strb	r3, [r7, #12]
            break;
 8002dc4:	e041      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8002dc6:	2307      	movs	r3, #7
 8002dc8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8002dca:	23fa      	movs	r3, #250	@ 0xfa
 8002dcc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8002dce:	2387      	movs	r3, #135	@ 0x87
 8002dd0:	733b      	strb	r3, [r7, #12]
            break;
 8002dd2:	e03a      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8002dd8:	23ff      	movs	r3, #255	@ 0xff
 8002dda:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8002ddc:	2387      	movs	r3, #135	@ 0x87
 8002dde:	733b      	strb	r3, [r7, #12]
            break;
 8002de0:	e033      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8002de2:	2303      	movs	r3, #3
 8002de4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8002de6:	23be      	movs	r3, #190	@ 0xbe
 8002de8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8002dea:	2307      	movs	r3, #7
 8002dec:	733b      	strb	r3, [r7, #12]
            break;
 8002dee:	e02c      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8002df0:	2303      	movs	r3, #3
 8002df2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8002df4:	23fa      	movs	r3, #250	@ 0xfa
 8002df6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8002df8:	2387      	movs	r3, #135	@ 0x87
 8002dfa:	733b      	strb	r3, [r7, #12]
            break;
 8002dfc:	e025      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8002e02:	23f0      	movs	r3, #240	@ 0xf0
 8002e04:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8002e06:	2386      	movs	r3, #134	@ 0x86
 8002e08:	733b      	strb	r3, [r7, #12]
            break;
 8002e0a:	e01e      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8002e10:	23fa      	movs	r3, #250	@ 0xfa
 8002e12:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8002e14:	2387      	movs	r3, #135	@ 0x87
 8002e16:	733b      	strb	r3, [r7, #12]
            break;
 8002e18:	e017      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8002e1a:	2341      	movs	r3, #65	@ 0x41
 8002e1c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8002e1e:	23f1      	movs	r3, #241	@ 0xf1
 8002e20:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8002e22:	2385      	movs	r3, #133	@ 0x85
 8002e24:	733b      	strb	r3, [r7, #12]
            break;
 8002e26:	e010      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8002e28:	2300      	movs	r3, #0
 8002e2a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8002e2c:	23f0      	movs	r3, #240	@ 0xf0
 8002e2e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8002e30:	2386      	movs	r3, #134	@ 0x86
 8002e32:	733b      	strb	r3, [r7, #12]
            break;
 8002e34:	e009      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8002e3a:	23d0      	movs	r3, #208	@ 0xd0
 8002e3c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8002e3e:	2382      	movs	r3, #130	@ 0x82
 8002e40:	733b      	strb	r3, [r7, #12]
            break;
 8002e42:	e002      	b.n	8002e4a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8002e44:	2300      	movs	r3, #0
 8002e46:	73fb      	strb	r3, [r7, #15]
            break;
 8002e48:	bf00      	nop
        }
        break;
 8002e4a:	e073      	b.n	8002f34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8002e4c:	78fb      	ldrb	r3, [r7, #3]
 8002e4e:	3b04      	subs	r3, #4
 8002e50:	2b0b      	cmp	r3, #11
 8002e52:	d868      	bhi.n	8002f26 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8002e54:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8002e56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5a:	bf00      	nop
 8002e5c:	08002e8d 	.word	0x08002e8d
 8002e60:	08002e9b 	.word	0x08002e9b
 8002e64:	08002ea9 	.word	0x08002ea9
 8002e68:	08002eb7 	.word	0x08002eb7
 8002e6c:	08002ec5 	.word	0x08002ec5
 8002e70:	08002f27 	.word	0x08002f27
 8002e74:	08002ed3 	.word	0x08002ed3
 8002e78:	08002ee1 	.word	0x08002ee1
 8002e7c:	08002eef 	.word	0x08002eef
 8002e80:	08002efd 	.word	0x08002efd
 8002e84:	08002f0b 	.word	0x08002f0b
 8002e88:	08002f19 	.word	0x08002f19
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8002e8c:	230b      	movs	r3, #11
 8002e8e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8002e90:	23ff      	movs	r3, #255	@ 0xff
 8002e92:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8002e94:	2387      	movs	r3, #135	@ 0x87
 8002e96:	733b      	strb	r3, [r7, #12]
	    break;
 8002e98:	e048      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8002e9a:	2309      	movs	r3, #9
 8002e9c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8002e9e:	23ff      	movs	r3, #255	@ 0xff
 8002ea0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8002ea2:	2387      	movs	r3, #135	@ 0x87
 8002ea4:	733b      	strb	r3, [r7, #12]
            break;
 8002ea6:	e041      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8002ea8:	2309      	movs	r3, #9
 8002eaa:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8002eac:	23fa      	movs	r3, #250	@ 0xfa
 8002eae:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8002eb0:	2387      	movs	r3, #135	@ 0x87
 8002eb2:	733b      	strb	r3, [r7, #12]
            break;
 8002eb4:	e03a      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8002eb6:	2304      	movs	r3, #4
 8002eb8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8002eba:	23ff      	movs	r3, #255	@ 0xff
 8002ebc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8002ebe:	2387      	movs	r3, #135	@ 0x87
 8002ec0:	733b      	strb	r3, [r7, #12]
            break;
 8002ec2:	e033      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8002ec8:	23fe      	movs	r3, #254	@ 0xfe
 8002eca:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8002ecc:	2387      	movs	r3, #135	@ 0x87
 8002ece:	733b      	strb	r3, [r7, #12]
	    break;
 8002ed0:	e02c      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8002ed6:	23fa      	movs	r3, #250	@ 0xfa
 8002ed8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8002eda:	2387      	movs	r3, #135	@ 0x87
 8002edc:	733b      	strb	r3, [r7, #12]
            break;
 8002ede:	e025      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8002ee0:	2303      	movs	r3, #3
 8002ee2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8002ee4:	23fa      	movs	r3, #250	@ 0xfa
 8002ee6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8002ee8:	2387      	movs	r3, #135	@ 0x87
 8002eea:	733b      	strb	r3, [r7, #12]
            break;
 8002eec:	e01e      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8002ef2:	23ff      	movs	r3, #255	@ 0xff
 8002ef4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8002ef6:	2387      	movs	r3, #135	@ 0x87
 8002ef8:	733b      	strb	r3, [r7, #12]
            break;
 8002efa:	e017      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8002efc:	2341      	movs	r3, #65	@ 0x41
 8002efe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8002f00:	23fb      	movs	r3, #251	@ 0xfb
 8002f02:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8002f04:	2386      	movs	r3, #134	@ 0x86
 8002f06:	733b      	strb	r3, [r7, #12]
            break;
 8002f08:	e010      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8002f0e:	23fa      	movs	r3, #250	@ 0xfa
 8002f10:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8002f12:	2387      	movs	r3, #135	@ 0x87
 8002f14:	733b      	strb	r3, [r7, #12]
            break;
 8002f16:	e009      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8002f18:	2300      	movs	r3, #0
 8002f1a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8002f1c:	23d9      	movs	r3, #217	@ 0xd9
 8002f1e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8002f20:	2382      	movs	r3, #130	@ 0x82
 8002f22:	733b      	strb	r3, [r7, #12]
            break;
 8002f24:	e002      	b.n	8002f2c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8002f26:	2300      	movs	r3, #0
 8002f28:	73fb      	strb	r3, [r7, #15]
            break;
 8002f2a:	bf00      	nop
        }
        break;
 8002f2c:	e002      	b.n	8002f34 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	73fb      	strb	r3, [r7, #15]
        break;
 8002f32:	bf00      	nop
    }

    if (set) {
 8002f34:	7bfb      	ldrb	r3, [r7, #15]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d013      	beq.n	8002f62 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8002f3a:	7bbb      	ldrb	r3, [r7, #14]
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	212a      	movs	r1, #42	@ 0x2a
 8002f40:	6878      	ldr	r0, [r7, #4]
 8002f42:	f7ff fd5d 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8002f46:	7b7b      	ldrb	r3, [r7, #13]
 8002f48:	461a      	mov	r2, r3
 8002f4a:	2129      	movs	r1, #41	@ 0x29
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fd57 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8002f52:	7b3b      	ldrb	r3, [r7, #12]
 8002f54:	461a      	mov	r2, r3
 8002f56:	2128      	movs	r1, #40	@ 0x28
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff fd51 	bl	8002a00 <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	e000      	b.n	8002f64 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8002f62:	2301      	movs	r3, #1
    }
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	3710      	adds	r7, #16
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b087      	sub	sp, #28
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	60f8      	str	r0, [r7, #12]
 8002f74:	60b9      	str	r1, [r7, #8]
 8002f76:	603b      	str	r3, [r7, #0]
 8002f78:	4613      	mov	r3, r2
 8002f7a:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8002f80:	79fb      	ldrb	r3, [r7, #7]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d035      	beq.n	8002ff2 <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	3303      	adds	r3, #3
 8002f8a:	8afa      	ldrh	r2, [r7, #22]
 8002f8c:	b2d2      	uxtb	r2, r2
 8002f8e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 8002f90:	8afb      	ldrh	r3, [r7, #22]
 8002f92:	0a1b      	lsrs	r3, r3, #8
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68bb      	ldr	r3, [r7, #8]
 8002f98:	3302      	adds	r3, #2
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	0c1b      	lsrs	r3, r3, #16
 8002fa2:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8002fa4:	8afb      	ldrh	r3, [r7, #22]
 8002fa6:	b2da      	uxtb	r2, r3
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	3301      	adds	r3, #1
 8002fac:	f002 0203 	and.w	r2, r2, #3
 8002fb0:	b2d2      	uxtb	r2, r2
 8002fb2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	3301      	adds	r3, #1
 8002fb8:	7819      	ldrb	r1, [r3, #0]
 8002fba:	8afb      	ldrh	r3, [r7, #22]
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	00db      	lsls	r3, r3, #3
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	f023 031f 	bic.w	r3, r3, #31
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	3301      	adds	r3, #1
 8002fcc:	440a      	add	r2, r1
 8002fce:	b2d2      	uxtb	r2, r2
 8002fd0:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	3301      	adds	r3, #1
 8002fd6:	781a      	ldrb	r2, [r3, #0]
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	3301      	adds	r3, #1
 8002fdc:	f042 0208 	orr.w	r2, r2, #8
 8002fe0:	b2d2      	uxtb	r2, r2
 8002fe2:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8002fe4:	8afb      	ldrh	r3, [r7, #22]
 8002fe6:	095b      	lsrs	r3, r3, #5
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b2da      	uxtb	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 8002ff0:	e014      	b.n	800301c <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 8002ff2:	8afb      	ldrh	r3, [r7, #22]
 8002ff4:	08db      	lsrs	r3, r3, #3
 8002ff6:	b29b      	uxth	r3, r3
 8002ff8:	b2da      	uxtb	r2, r3
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 8002ffe:	8afb      	ldrh	r3, [r7, #22]
 8003000:	b2da      	uxtb	r2, r3
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	3301      	adds	r3, #1
 8003006:	0152      	lsls	r2, r2, #5
 8003008:	b2d2      	uxtb	r2, r2
 800300a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 800300c:	68bb      	ldr	r3, [r7, #8]
 800300e:	3303      	adds	r3, #3
 8003010:	2200      	movs	r2, #0
 8003012:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8003014:	68bb      	ldr	r3, [r7, #8]
 8003016:	3302      	adds	r3, #2
 8003018:	2200      	movs	r2, #0
 800301a:	701a      	strb	r2, [r3, #0]
}
 800301c:	bf00      	nop
 800301e:	371c      	adds	r7, #28
 8003020:	46bd      	mov	sp, r7
 8003022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003026:	4770      	bx	lr

08003028 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b086      	sub	sp, #24
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	607b      	str	r3, [r7, #4]
 8003032:	460b      	mov	r3, r1
 8003034:	72fb      	strb	r3, [r7, #11]
 8003036:	4613      	mov	r3, r2
 8003038:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800303a:	68f8      	ldr	r0, [r7, #12]
 800303c:	f7ff fd71 	bl	8002b22 <_ZN7MCP251513setConfigModeEv>
 8003040:	4603      	mov	r3, r0
 8003042:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8003044:	7dbb      	ldrb	r3, [r7, #22]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 800304a:	7dbb      	ldrb	r3, [r7, #22]
 800304c:	e01c      	b.n	8003088 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800304e:	7aba      	ldrb	r2, [r7, #10]
 8003050:	f107 0110 	add.w	r1, r7, #16
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff ff88 	bl	8002f6c <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 800305c:	7afb      	ldrb	r3, [r7, #11]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 8003062:	2b01      	cmp	r3, #1
 8003064:	d003      	beq.n	800306e <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 8003066:	e005      	b.n	8003074 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 8003068:	2320      	movs	r3, #32
 800306a:	75fb      	strb	r3, [r7, #23]
 800306c:	e004      	b.n	8003078 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 800306e:	2324      	movs	r3, #36	@ 0x24
 8003070:	75fb      	strb	r3, [r7, #23]
 8003072:	e001      	b.n	8003078 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 8003074:	2301      	movs	r3, #1
 8003076:	e007      	b.n	8003088 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 8003078:	f107 0210 	add.w	r2, r7, #16
 800307c:	7df9      	ldrb	r1, [r7, #23]
 800307e:	2304      	movs	r3, #4
 8003080:	68f8      	ldr	r0, [r7, #12]
 8003082:	f7ff fcdd 	bl	8002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8003086:	2300      	movs	r3, #0
}
 8003088:	4618      	mov	r0, r3
 800308a:	3718      	adds	r7, #24
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	607b      	str	r3, [r7, #4]
 800309a:	460b      	mov	r3, r1
 800309c:	72fb      	strb	r3, [r7, #11]
 800309e:	4613      	mov	r3, r2
 80030a0:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f7ff fd3d 	bl	8002b22 <_ZN7MCP251513setConfigModeEv>
 80030a8:	4603      	mov	r3, r0
 80030aa:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80030ac:	7dbb      	ldrb	r3, [r7, #22]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 80030b2:	7dbb      	ldrb	r3, [r7, #22]
 80030b4:	e035      	b.n	8003122 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 80030b6:	7afb      	ldrb	r3, [r7, #11]
 80030b8:	2b05      	cmp	r3, #5
 80030ba:	d821      	bhi.n	8003100 <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 80030bc:	a201      	add	r2, pc, #4	@ (adr r2, 80030c4 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 80030be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030c2:	bf00      	nop
 80030c4:	080030dd 	.word	0x080030dd
 80030c8:	080030e3 	.word	0x080030e3
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	080030ef 	.word	0x080030ef
 80030d4:	080030f5 	.word	0x080030f5
 80030d8:	080030fb 	.word	0x080030fb
        case RXF0: reg = MCP_RXF0SIDH; break;
 80030dc:	2300      	movs	r3, #0
 80030de:	75fb      	strb	r3, [r7, #23]
 80030e0:	e010      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 80030e2:	2304      	movs	r3, #4
 80030e4:	75fb      	strb	r3, [r7, #23]
 80030e6:	e00d      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 80030e8:	2308      	movs	r3, #8
 80030ea:	75fb      	strb	r3, [r7, #23]
 80030ec:	e00a      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 80030ee:	2310      	movs	r3, #16
 80030f0:	75fb      	strb	r3, [r7, #23]
 80030f2:	e007      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 80030f4:	2314      	movs	r3, #20
 80030f6:	75fb      	strb	r3, [r7, #23]
 80030f8:	e004      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 80030fa:	2318      	movs	r3, #24
 80030fc:	75fb      	strb	r3, [r7, #23]
 80030fe:	e001      	b.n	8003104 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 8003100:	2301      	movs	r3, #1
 8003102:	e00e      	b.n	8003122 <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8003104:	7aba      	ldrb	r2, [r7, #10]
 8003106:	f107 0110 	add.w	r1, r7, #16
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68f8      	ldr	r0, [r7, #12]
 800310e:	f7ff ff2d 	bl	8002f6c <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 8003112:	f107 0210 	add.w	r2, r7, #16
 8003116:	7df9      	ldrb	r1, [r7, #23]
 8003118:	2304      	movs	r3, #4
 800311a:	68f8      	ldr	r0, [r7, #12]
 800311c:	f7ff fc90 	bl	8002a40 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop

0800312c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	460b      	mov	r3, r1
 8003136:	607a      	str	r2, [r7, #4]
 8003138:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 800313a:	7afb      	ldrb	r3, [r7, #11]
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	4a30      	ldr	r2, [pc, #192]	@ (8003200 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 8003140:	4413      	add	r3, r2
 8003142:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8003144:	69bb      	ldr	r3, [r7, #24]
 8003146:	7859      	ldrb	r1, [r3, #1]
 8003148:	f107 0210 	add.w	r2, r7, #16
 800314c:	2305      	movs	r3, #5
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fc27 	bl	80029a2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 8003154:	7c3b      	ldrb	r3, [r7, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	7c7a      	ldrb	r2, [r7, #17]
 800315a:	0952      	lsrs	r2, r2, #5
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	4413      	add	r3, r2
 8003160:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 8003162:	7c7b      	ldrb	r3, [r7, #17]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b00      	cmp	r3, #0
 800316a:	d014      	beq.n	8003196 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 800316c:	69fb      	ldr	r3, [r7, #28]
 800316e:	009a      	lsls	r2, r3, #2
 8003170:	7c7b      	ldrb	r3, [r7, #17]
 8003172:	f003 0303 	and.w	r3, r3, #3
 8003176:	4413      	add	r3, r2
 8003178:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	021b      	lsls	r3, r3, #8
 800317e:	7cba      	ldrb	r2, [r7, #18]
 8003180:	4413      	add	r3, r2
 8003182:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	021b      	lsls	r3, r3, #8
 8003188:	7cfa      	ldrb	r2, [r7, #19]
 800318a:	4413      	add	r3, r2
 800318c:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 800318e:	69fb      	ldr	r3, [r7, #28]
 8003190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003194:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8003196:	7d3b      	ldrb	r3, [r7, #20]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800319e:	7dfb      	ldrb	r3, [r7, #23]
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d901      	bls.n	80031a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80031a4:	2301      	movs	r3, #1
 80031a6:	e027      	b.n	80031f8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	781b      	ldrb	r3, [r3, #0]
 80031ac:	4619      	mov	r1, r3
 80031ae:	68f8      	ldr	r0, [r7, #12]
 80031b0:	f7ff fbd8 	bl	8002964 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80031b4:	4603      	mov	r3, r0
 80031b6:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 80031b8:	7dbb      	ldrb	r3, [r7, #22]
 80031ba:	f003 0308 	and.w	r3, r3, #8
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d003      	beq.n	80031ca <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 80031c2:	69fb      	ldr	r3, [r7, #28]
 80031c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80031c8:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69fa      	ldr	r2, [r7, #28]
 80031ce:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	7dfa      	ldrb	r2, [r7, #23]
 80031d4:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	7899      	ldrb	r1, [r3, #2]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f103 0208 	add.w	r2, r3, #8
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f7ff fbdd 	bl	80029a2 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	78da      	ldrb	r2, [r3, #3]
 80031ec:	2300      	movs	r3, #0
 80031ee:	212c      	movs	r1, #44	@ 0x2c
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f7ff fc54 	bl	8002a9e <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 80031f6:	2300      	movs	r3, #0
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3720      	adds	r7, #32
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}
 8003200:	08039378 	.word	0x08039378

08003204 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b084      	sub	sp, #16
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
 800320c:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fc6f 	bl	8002af2 <_ZN7MCP25159getStatusEv>
 8003214:	4603      	mov	r3, r0
 8003216:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8003218:	7bbb      	ldrb	r3, [r7, #14]
 800321a:	f003 0301 	and.w	r3, r3, #1
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 8003222:	683a      	ldr	r2, [r7, #0]
 8003224:	2100      	movs	r1, #0
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f7ff ff80 	bl	800312c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 800322c:	4603      	mov	r3, r0
 800322e:	73fb      	strb	r3, [r7, #15]
 8003230:	e00e      	b.n	8003250 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 8003232:	7bbb      	ldrb	r3, [r7, #14]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d007      	beq.n	800324c <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 800323c:	683a      	ldr	r2, [r7, #0]
 800323e:	2101      	movs	r1, #1
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff ff73 	bl	800312c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8003246:	4603      	mov	r3, r0
 8003248:	73fb      	strb	r3, [r7, #15]
 800324a:	e001      	b.n	8003250 <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 800324c:	2305      	movs	r3, #5
 800324e:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 8003250:	7bfb      	ldrb	r3, [r7, #15]
}
 8003252:	4618      	mov	r0, r3
 8003254:	3710      	adds	r7, #16
 8003256:	46bd      	mov	sp, r7
 8003258:	bd80      	pop	{r7, pc}
	...

0800325c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800325c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003294 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003260:	f7fe f85e 	bl	8001320 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003264:	480c      	ldr	r0, [pc, #48]	@ (8003298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003266:	490d      	ldr	r1, [pc, #52]	@ (800329c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003268:	4a0d      	ldr	r2, [pc, #52]	@ (80032a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800326a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800326c:	e002      	b.n	8003274 <LoopCopyDataInit>

0800326e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800326e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003272:	3304      	adds	r3, #4

08003274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003278:	d3f9      	bcc.n	800326e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800327a:	4a0a      	ldr	r2, [pc, #40]	@ (80032a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800327c:	4c0a      	ldr	r4, [pc, #40]	@ (80032a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800327e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003280:	e001      	b.n	8003286 <LoopFillZerobss>

08003282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003284:	3204      	adds	r2, #4

08003286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003288:	d3fb      	bcc.n	8003282 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800328a:	f008 fee3 	bl	800c054 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800328e:	f7fd fa11 	bl	80006b4 <main>
  bx  lr    
 8003292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003294:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800329c:	20000188 	.word	0x20000188
  ldr r2, =_sidata
 80032a0:	080393c8 	.word	0x080393c8
  ldr r2, =_sbss
 80032a4:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 80032a8:	200018d4 	.word	0x200018d4

080032ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80032ac:	e7fe      	b.n	80032ac <ADC_IRQHandler>
	...

080032b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80032b4:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <HAL_Init+0x40>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a0d      	ldr	r2, [pc, #52]	@ (80032f0 <HAL_Init+0x40>)
 80032ba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80032be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80032c0:	4b0b      	ldr	r3, [pc, #44]	@ (80032f0 <HAL_Init+0x40>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a0a      	ldr	r2, [pc, #40]	@ (80032f0 <HAL_Init+0x40>)
 80032c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80032ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80032cc:	4b08      	ldr	r3, [pc, #32]	@ (80032f0 <HAL_Init+0x40>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a07      	ldr	r2, [pc, #28]	@ (80032f0 <HAL_Init+0x40>)
 80032d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80032d8:	2003      	movs	r0, #3
 80032da:	f000 f94f 	bl	800357c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80032de:	200f      	movs	r0, #15
 80032e0:	f000 f808 	bl	80032f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80032e4:	f7fd ff4c 	bl	8001180 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00

080032f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80032fc:	4b12      	ldr	r3, [pc, #72]	@ (8003348 <HAL_InitTick+0x54>)
 80032fe:	681a      	ldr	r2, [r3, #0]
 8003300:	4b12      	ldr	r3, [pc, #72]	@ (800334c <HAL_InitTick+0x58>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	4619      	mov	r1, r3
 8003306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800330a:	fbb3 f3f1 	udiv	r3, r3, r1
 800330e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003312:	4618      	mov	r0, r3
 8003314:	f000 f967 	bl	80035e6 <HAL_SYSTICK_Config>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00e      	b.n	8003340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b0f      	cmp	r3, #15
 8003326:	d80a      	bhi.n	800333e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003328:	2200      	movs	r2, #0
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003330:	f000 f92f 	bl	8003592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003334:	4a06      	ldr	r2, [pc, #24]	@ (8003350 <HAL_InitTick+0x5c>)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800333a:	2300      	movs	r3, #0
 800333c:	e000      	b.n	8003340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
}
 8003340:	4618      	mov	r0, r3
 8003342:	3708      	adds	r7, #8
 8003344:	46bd      	mov	sp, r7
 8003346:	bd80      	pop	{r7, pc}
 8003348:	20000000 	.word	0x20000000
 800334c:	20000044 	.word	0x20000044
 8003350:	20000040 	.word	0x20000040

08003354 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003358:	4b06      	ldr	r3, [pc, #24]	@ (8003374 <HAL_IncTick+0x20>)
 800335a:	781b      	ldrb	r3, [r3, #0]
 800335c:	461a      	mov	r2, r3
 800335e:	4b06      	ldr	r3, [pc, #24]	@ (8003378 <HAL_IncTick+0x24>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4413      	add	r3, r2
 8003364:	4a04      	ldr	r2, [pc, #16]	@ (8003378 <HAL_IncTick+0x24>)
 8003366:	6013      	str	r3, [r2, #0]
}
 8003368:	bf00      	nop
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr
 8003372:	bf00      	nop
 8003374:	20000044 	.word	0x20000044
 8003378:	200003a0 	.word	0x200003a0

0800337c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800337c:	b480      	push	{r7}
 800337e:	af00      	add	r7, sp, #0
  return uwTick;
 8003380:	4b03      	ldr	r3, [pc, #12]	@ (8003390 <HAL_GetTick+0x14>)
 8003382:	681b      	ldr	r3, [r3, #0]
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	200003a0 	.word	0x200003a0

08003394 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800339c:	f7ff ffee 	bl	800337c <HAL_GetTick>
 80033a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033ac:	d005      	beq.n	80033ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80033ae:	4b0a      	ldr	r3, [pc, #40]	@ (80033d8 <HAL_Delay+0x44>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	461a      	mov	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	4413      	add	r3, r2
 80033b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80033ba:	bf00      	nop
 80033bc:	f7ff ffde 	bl	800337c <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d8f7      	bhi.n	80033bc <HAL_Delay+0x28>
  {
  }
}
 80033cc:	bf00      	nop
 80033ce:	bf00      	nop
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}
 80033d6:	bf00      	nop
 80033d8:	20000044 	.word	0x20000044

080033dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033dc:	b480      	push	{r7}
 80033de:	b085      	sub	sp, #20
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 80033ee:	68db      	ldr	r3, [r3, #12]
 80033f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033f2:	68ba      	ldr	r2, [r7, #8]
 80033f4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80033f8:	4013      	ands	r3, r2
 80033fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003404:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003408:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800340c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800340e:	4a04      	ldr	r2, [pc, #16]	@ (8003420 <__NVIC_SetPriorityGrouping+0x44>)
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	60d3      	str	r3, [r2, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	e000ed00 	.word	0xe000ed00

08003424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003424:	b480      	push	{r7}
 8003426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003428:	4b04      	ldr	r3, [pc, #16]	@ (800343c <__NVIC_GetPriorityGrouping+0x18>)
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	0a1b      	lsrs	r3, r3, #8
 800342e:	f003 0307 	and.w	r3, r3, #7
}
 8003432:	4618      	mov	r0, r3
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr
 800343c:	e000ed00 	.word	0xe000ed00

08003440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	4603      	mov	r3, r0
 8003448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	2b00      	cmp	r3, #0
 8003450:	db0b      	blt.n	800346a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003452:	79fb      	ldrb	r3, [r7, #7]
 8003454:	f003 021f 	and.w	r2, r3, #31
 8003458:	4907      	ldr	r1, [pc, #28]	@ (8003478 <__NVIC_EnableIRQ+0x38>)
 800345a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800345e:	095b      	lsrs	r3, r3, #5
 8003460:	2001      	movs	r0, #1
 8003462:	fa00 f202 	lsl.w	r2, r0, r2
 8003466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800346a:	bf00      	nop
 800346c:	370c      	adds	r7, #12
 800346e:	46bd      	mov	sp, r7
 8003470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	e000e100 	.word	0xe000e100

0800347c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800347c:	b480      	push	{r7}
 800347e:	b083      	sub	sp, #12
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	6039      	str	r1, [r7, #0]
 8003486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348c:	2b00      	cmp	r3, #0
 800348e:	db0a      	blt.n	80034a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	b2da      	uxtb	r2, r3
 8003494:	490c      	ldr	r1, [pc, #48]	@ (80034c8 <__NVIC_SetPriority+0x4c>)
 8003496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800349a:	0112      	lsls	r2, r2, #4
 800349c:	b2d2      	uxtb	r2, r2
 800349e:	440b      	add	r3, r1
 80034a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034a4:	e00a      	b.n	80034bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	b2da      	uxtb	r2, r3
 80034aa:	4908      	ldr	r1, [pc, #32]	@ (80034cc <__NVIC_SetPriority+0x50>)
 80034ac:	79fb      	ldrb	r3, [r7, #7]
 80034ae:	f003 030f 	and.w	r3, r3, #15
 80034b2:	3b04      	subs	r3, #4
 80034b4:	0112      	lsls	r2, r2, #4
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	440b      	add	r3, r1
 80034ba:	761a      	strb	r2, [r3, #24]
}
 80034bc:	bf00      	nop
 80034be:	370c      	adds	r7, #12
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	e000e100 	.word	0xe000e100
 80034cc:	e000ed00 	.word	0xe000ed00

080034d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	60f8      	str	r0, [r7, #12]
 80034d8:	60b9      	str	r1, [r7, #8]
 80034da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f003 0307 	and.w	r3, r3, #7
 80034e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	f1c3 0307 	rsb	r3, r3, #7
 80034ea:	2b04      	cmp	r3, #4
 80034ec:	bf28      	it	cs
 80034ee:	2304      	movcs	r3, #4
 80034f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034f2:	69fb      	ldr	r3, [r7, #28]
 80034f4:	3304      	adds	r3, #4
 80034f6:	2b06      	cmp	r3, #6
 80034f8:	d902      	bls.n	8003500 <NVIC_EncodePriority+0x30>
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	3b03      	subs	r3, #3
 80034fe:	e000      	b.n	8003502 <NVIC_EncodePriority+0x32>
 8003500:	2300      	movs	r3, #0
 8003502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003504:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	fa02 f303 	lsl.w	r3, r2, r3
 800350e:	43da      	mvns	r2, r3
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	401a      	ands	r2, r3
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003518:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	fa01 f303 	lsl.w	r3, r1, r3
 8003522:	43d9      	mvns	r1, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003528:	4313      	orrs	r3, r2
         );
}
 800352a:	4618      	mov	r0, r3
 800352c:	3724      	adds	r7, #36	@ 0x24
 800352e:	46bd      	mov	sp, r7
 8003530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003534:	4770      	bx	lr
	...

08003538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	3b01      	subs	r3, #1
 8003544:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003548:	d301      	bcc.n	800354e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800354a:	2301      	movs	r3, #1
 800354c:	e00f      	b.n	800356e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800354e:	4a0a      	ldr	r2, [pc, #40]	@ (8003578 <SysTick_Config+0x40>)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003556:	210f      	movs	r1, #15
 8003558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800355c:	f7ff ff8e 	bl	800347c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003560:	4b05      	ldr	r3, [pc, #20]	@ (8003578 <SysTick_Config+0x40>)
 8003562:	2200      	movs	r2, #0
 8003564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003566:	4b04      	ldr	r3, [pc, #16]	@ (8003578 <SysTick_Config+0x40>)
 8003568:	2207      	movs	r2, #7
 800356a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3708      	adds	r7, #8
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003584:	6878      	ldr	r0, [r7, #4]
 8003586:	f7ff ff29 	bl	80033dc <__NVIC_SetPriorityGrouping>
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003592:	b580      	push	{r7, lr}
 8003594:	b086      	sub	sp, #24
 8003596:	af00      	add	r7, sp, #0
 8003598:	4603      	mov	r3, r0
 800359a:	60b9      	str	r1, [r7, #8]
 800359c:	607a      	str	r2, [r7, #4]
 800359e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035a4:	f7ff ff3e 	bl	8003424 <__NVIC_GetPriorityGrouping>
 80035a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	68b9      	ldr	r1, [r7, #8]
 80035ae:	6978      	ldr	r0, [r7, #20]
 80035b0:	f7ff ff8e 	bl	80034d0 <NVIC_EncodePriority>
 80035b4:	4602      	mov	r2, r0
 80035b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f7ff ff5d 	bl	800347c <__NVIC_SetPriority>
}
 80035c2:	bf00      	nop
 80035c4:	3718      	adds	r7, #24
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	4603      	mov	r3, r0
 80035d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	4618      	mov	r0, r3
 80035da:	f7ff ff31 	bl	8003440 <__NVIC_EnableIRQ>
}
 80035de:	bf00      	nop
 80035e0:	3708      	adds	r7, #8
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b082      	sub	sp, #8
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff ffa2 	bl	8003538 <SysTick_Config>
 80035f4:	4603      	mov	r3, r0
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	3708      	adds	r7, #8
 80035fa:	46bd      	mov	sp, r7
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b086      	sub	sp, #24
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003608:	2300      	movs	r3, #0
 800360a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800360c:	f7ff feb6 	bl	800337c <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d101      	bne.n	800361c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003618:	2301      	movs	r3, #1
 800361a:	e099      	b.n	8003750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2202      	movs	r2, #2
 8003620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0201 	bic.w	r2, r2, #1
 800363a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800363c:	e00f      	b.n	800365e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800363e:	f7ff fe9d 	bl	800337c <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b05      	cmp	r3, #5
 800364a:	d908      	bls.n	800365e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2203      	movs	r2, #3
 8003656:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e078      	b.n	8003750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0301 	and.w	r3, r3, #1
 8003668:	2b00      	cmp	r3, #0
 800366a:	d1e8      	bne.n	800363e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003674:	697a      	ldr	r2, [r7, #20]
 8003676:	4b38      	ldr	r3, [pc, #224]	@ (8003758 <HAL_DMA_Init+0x158>)
 8003678:	4013      	ands	r3, r2
 800367a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800368a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80036a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80036aa:	697a      	ldr	r2, [r7, #20]
 80036ac:	4313      	orrs	r3, r2
 80036ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b4:	2b04      	cmp	r3, #4
 80036b6:	d107      	bne.n	80036c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036c0:	4313      	orrs	r3, r2
 80036c2:	697a      	ldr	r2, [r7, #20]
 80036c4:	4313      	orrs	r3, r2
 80036c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0307 	bic.w	r3, r3, #7
 80036de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036ee:	2b04      	cmp	r3, #4
 80036f0:	d117      	bne.n	8003722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036f6:	697a      	ldr	r2, [r7, #20]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00e      	beq.n	8003722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003704:	6878      	ldr	r0, [r7, #4]
 8003706:	f000 fa91 	bl	8003c2c <DMA_CheckFifoParam>
 800370a:	4603      	mov	r3, r0
 800370c:	2b00      	cmp	r3, #0
 800370e:	d008      	beq.n	8003722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2240      	movs	r2, #64	@ 0x40
 8003714:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800371e:	2301      	movs	r3, #1
 8003720:	e016      	b.n	8003750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 fa48 	bl	8003bc0 <DMA_CalcBaseAndBitshift>
 8003730:	4603      	mov	r3, r0
 8003732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003738:	223f      	movs	r2, #63	@ 0x3f
 800373a:	409a      	lsls	r2, r3
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2200      	movs	r2, #0
 8003744:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800374e:	2300      	movs	r3, #0
}
 8003750:	4618      	mov	r0, r3
 8003752:	3718      	adds	r7, #24
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}
 8003758:	f010803f 	.word	0xf010803f

0800375c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	60f8      	str	r0, [r7, #12]
 8003764:	60b9      	str	r1, [r7, #8]
 8003766:	607a      	str	r2, [r7, #4]
 8003768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003772:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800377a:	2b01      	cmp	r3, #1
 800377c:	d101      	bne.n	8003782 <HAL_DMA_Start_IT+0x26>
 800377e:	2302      	movs	r3, #2
 8003780:	e040      	b.n	8003804 <HAL_DMA_Start_IT+0xa8>
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003790:	b2db      	uxtb	r3, r3
 8003792:	2b01      	cmp	r3, #1
 8003794:	d12f      	bne.n	80037f6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2202      	movs	r2, #2
 800379a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	68b9      	ldr	r1, [r7, #8]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f9da 	bl	8003b64 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	223f      	movs	r2, #63	@ 0x3f
 80037b6:	409a      	lsls	r2, r3
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	681a      	ldr	r2, [r3, #0]
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f042 0216 	orr.w	r2, r2, #22
 80037ca:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d007      	beq.n	80037e4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	681a      	ldr	r2, [r3, #0]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f042 0208 	orr.w	r2, r2, #8
 80037e2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681a      	ldr	r2, [r3, #0]
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f042 0201 	orr.w	r2, r2, #1
 80037f2:	601a      	str	r2, [r3, #0]
 80037f4:	e005      	b.n	8003802 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	2200      	movs	r2, #0
 80037fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80037fe:	2302      	movs	r3, #2
 8003800:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003802:	7dfb      	ldrb	r3, [r7, #23]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3718      	adds	r7, #24
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800381a:	b2db      	uxtb	r3, r3
 800381c:	2b02      	cmp	r3, #2
 800381e:	d004      	beq.n	800382a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2280      	movs	r2, #128	@ 0x80
 8003824:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e00c      	b.n	8003844 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2205      	movs	r2, #5
 800382e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	681a      	ldr	r2, [r3, #0]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 0201 	bic.w	r2, r2, #1
 8003840:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003842:	2300      	movs	r3, #0
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003858:	2300      	movs	r3, #0
 800385a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800385c:	4b8e      	ldr	r3, [pc, #568]	@ (8003a98 <HAL_DMA_IRQHandler+0x248>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a8e      	ldr	r2, [pc, #568]	@ (8003a9c <HAL_DMA_IRQHandler+0x24c>)
 8003862:	fba2 2303 	umull	r2, r3, r2, r3
 8003866:	0a9b      	lsrs	r3, r3, #10
 8003868:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800386e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800387a:	2208      	movs	r2, #8
 800387c:	409a      	lsls	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	4013      	ands	r3, r2
 8003882:	2b00      	cmp	r3, #0
 8003884:	d01a      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0304 	and.w	r3, r3, #4
 8003890:	2b00      	cmp	r3, #0
 8003892:	d013      	beq.n	80038bc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f022 0204 	bic.w	r2, r2, #4
 80038a2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038a8:	2208      	movs	r2, #8
 80038aa:	409a      	lsls	r2, r3
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038b4:	f043 0201 	orr.w	r2, r3, #1
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038c0:	2201      	movs	r2, #1
 80038c2:	409a      	lsls	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	4013      	ands	r3, r2
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d012      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	695b      	ldr	r3, [r3, #20]
 80038d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00b      	beq.n	80038f2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038de:	2201      	movs	r2, #1
 80038e0:	409a      	lsls	r2, r3
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ea:	f043 0202 	orr.w	r2, r3, #2
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f6:	2204      	movs	r2, #4
 80038f8:	409a      	lsls	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4013      	ands	r3, r2
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d012      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0302 	and.w	r3, r3, #2
 800390c:	2b00      	cmp	r3, #0
 800390e:	d00b      	beq.n	8003928 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003914:	2204      	movs	r2, #4
 8003916:	409a      	lsls	r2, r3
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003920:	f043 0204 	orr.w	r2, r3, #4
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800392c:	2210      	movs	r2, #16
 800392e:	409a      	lsls	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	4013      	ands	r3, r2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d043      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d03c      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800394a:	2210      	movs	r2, #16
 800394c:	409a      	lsls	r2, r3
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d018      	beq.n	8003992 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d108      	bne.n	8003980 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003972:	2b00      	cmp	r3, #0
 8003974:	d024      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800397a:	6878      	ldr	r0, [r7, #4]
 800397c:	4798      	blx	r3
 800397e:	e01f      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003984:	2b00      	cmp	r3, #0
 8003986:	d01b      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	4798      	blx	r3
 8003990:	e016      	b.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800399c:	2b00      	cmp	r3, #0
 800399e:	d107      	bne.n	80039b0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	f022 0208 	bic.w	r2, r2, #8
 80039ae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d003      	beq.n	80039c0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039c4:	2220      	movs	r2, #32
 80039c6:	409a      	lsls	r2, r3
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	4013      	ands	r3, r2
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	f000 808f 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f003 0310 	and.w	r3, r3, #16
 80039dc:	2b00      	cmp	r3, #0
 80039de:	f000 8087 	beq.w	8003af0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039e6:	2220      	movs	r2, #32
 80039e8:	409a      	lsls	r2, r3
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	2b05      	cmp	r3, #5
 80039f8:	d136      	bne.n	8003a68 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 0216 	bic.w	r2, r2, #22
 8003a08:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	695a      	ldr	r2, [r3, #20]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a18:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d103      	bne.n	8003a2a <HAL_DMA_IRQHandler+0x1da>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f022 0208 	bic.w	r2, r2, #8
 8003a38:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a3e:	223f      	movs	r2, #63	@ 0x3f
 8003a40:	409a      	lsls	r2, r3
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d07e      	beq.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
        }
        return;
 8003a66:	e079      	b.n	8003b5c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d01d      	beq.n	8003ab2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d10d      	bne.n	8003aa0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d031      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	4798      	blx	r3
 8003a94:	e02c      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
 8003a96:	bf00      	nop
 8003a98:	20000000 	.word	0x20000000
 8003a9c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d023      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	4798      	blx	r3
 8003ab0:	e01e      	b.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10f      	bne.n	8003ae0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f022 0210 	bic.w	r2, r2, #16
 8003ace:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d032      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003afc:	f003 0301 	and.w	r3, r3, #1
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d022      	beq.n	8003b4a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2205      	movs	r2, #5
 8003b08:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0201 	bic.w	r2, r2, #1
 8003b1a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	60bb      	str	r3, [r7, #8]
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d307      	bcc.n	8003b38 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1f2      	bne.n	8003b1c <HAL_DMA_IRQHandler+0x2cc>
 8003b36:	e000      	b.n	8003b3a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003b38:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d005      	beq.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	4798      	blx	r3
 8003b5a:	e000      	b.n	8003b5e <HAL_DMA_IRQHandler+0x30e>
        return;
 8003b5c:	bf00      	nop
    }
  }
}
 8003b5e:	3718      	adds	r7, #24
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}

08003b64 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8003b80:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	683a      	ldr	r2, [r7, #0]
 8003b88:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b40      	cmp	r3, #64	@ 0x40
 8003b90:	d108      	bne.n	8003ba4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	687a      	ldr	r2, [r7, #4]
 8003b98:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68ba      	ldr	r2, [r7, #8]
 8003ba0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ba2:	e007      	b.n	8003bb4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68ba      	ldr	r2, [r7, #8]
 8003baa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	687a      	ldr	r2, [r7, #4]
 8003bb2:	60da      	str	r2, [r3, #12]
}
 8003bb4:	bf00      	nop
 8003bb6:	3714      	adds	r7, #20
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr

08003bc0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	3b10      	subs	r3, #16
 8003bd0:	4a14      	ldr	r2, [pc, #80]	@ (8003c24 <DMA_CalcBaseAndBitshift+0x64>)
 8003bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd6:	091b      	lsrs	r3, r3, #4
 8003bd8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003bda:	4a13      	ldr	r2, [pc, #76]	@ (8003c28 <DMA_CalcBaseAndBitshift+0x68>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	4413      	add	r3, r2
 8003be0:	781b      	ldrb	r3, [r3, #0]
 8003be2:	461a      	mov	r2, r3
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b03      	cmp	r3, #3
 8003bec:	d909      	bls.n	8003c02 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003bf6:	f023 0303 	bic.w	r3, r3, #3
 8003bfa:	1d1a      	adds	r2, r3, #4
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	659a      	str	r2, [r3, #88]	@ 0x58
 8003c00:	e007      	b.n	8003c12 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8003c0a:	f023 0303 	bic.w	r3, r3, #3
 8003c0e:	687a      	ldr	r2, [r7, #4]
 8003c10:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	aaaaaaab 	.word	0xaaaaaaab
 8003c28:	08039380 	.word	0x08039380

08003c2c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	b085      	sub	sp, #20
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c34:	2300      	movs	r3, #0
 8003c36:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c3c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	699b      	ldr	r3, [r3, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d11f      	bne.n	8003c86 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003c46:	68bb      	ldr	r3, [r7, #8]
 8003c48:	2b03      	cmp	r3, #3
 8003c4a:	d856      	bhi.n	8003cfa <DMA_CheckFifoParam+0xce>
 8003c4c:	a201      	add	r2, pc, #4	@ (adr r2, 8003c54 <DMA_CheckFifoParam+0x28>)
 8003c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c52:	bf00      	nop
 8003c54:	08003c65 	.word	0x08003c65
 8003c58:	08003c77 	.word	0x08003c77
 8003c5c:	08003c65 	.word	0x08003c65
 8003c60:	08003cfb 	.word	0x08003cfb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d046      	beq.n	8003cfe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c70:	2301      	movs	r3, #1
 8003c72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c74:	e043      	b.n	8003cfe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c7a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003c7e:	d140      	bne.n	8003d02 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c80:	2301      	movs	r3, #1
 8003c82:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c84:	e03d      	b.n	8003d02 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8e:	d121      	bne.n	8003cd4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	2b03      	cmp	r3, #3
 8003c94:	d837      	bhi.n	8003d06 <DMA_CheckFifoParam+0xda>
 8003c96:	a201      	add	r2, pc, #4	@ (adr r2, 8003c9c <DMA_CheckFifoParam+0x70>)
 8003c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9c:	08003cad 	.word	0x08003cad
 8003ca0:	08003cb3 	.word	0x08003cb3
 8003ca4:	08003cad 	.word	0x08003cad
 8003ca8:	08003cc5 	.word	0x08003cc5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	73fb      	strb	r3, [r7, #15]
      break;
 8003cb0:	e030      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cb6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d025      	beq.n	8003d0a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003cbe:	2301      	movs	r3, #1
 8003cc0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc2:	e022      	b.n	8003d0a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cc8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003ccc:	d11f      	bne.n	8003d0e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003cd2:	e01c      	b.n	8003d0e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003cd4:	68bb      	ldr	r3, [r7, #8]
 8003cd6:	2b02      	cmp	r3, #2
 8003cd8:	d903      	bls.n	8003ce2 <DMA_CheckFifoParam+0xb6>
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b03      	cmp	r3, #3
 8003cde:	d003      	beq.n	8003ce8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003ce0:	e018      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8003ce6:	e015      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00e      	beq.n	8003d12 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8003cf8:	e00b      	b.n	8003d12 <DMA_CheckFifoParam+0xe6>
      break;
 8003cfa:	bf00      	nop
 8003cfc:	e00a      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003cfe:	bf00      	nop
 8003d00:	e008      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d02:	bf00      	nop
 8003d04:	e006      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d06:	bf00      	nop
 8003d08:	e004      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d0a:	bf00      	nop
 8003d0c:	e002      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d0e:	bf00      	nop
 8003d10:	e000      	b.n	8003d14 <DMA_CheckFifoParam+0xe8>
      break;
 8003d12:	bf00      	nop
    }
  } 
  
  return status; 
 8003d14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3714      	adds	r7, #20
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop

08003d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b089      	sub	sp, #36	@ 0x24
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
 8003d2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d32:	2300      	movs	r3, #0
 8003d34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d36:	2300      	movs	r3, #0
 8003d38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	61fb      	str	r3, [r7, #28]
 8003d3e:	e159      	b.n	8003ff4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d40:	2201      	movs	r2, #1
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	fa02 f303 	lsl.w	r3, r2, r3
 8003d48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	697a      	ldr	r2, [r7, #20]
 8003d50:	4013      	ands	r3, r2
 8003d52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	f040 8148 	bne.w	8003fee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	f003 0303 	and.w	r3, r3, #3
 8003d66:	2b01      	cmp	r3, #1
 8003d68:	d005      	beq.n	8003d76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d130      	bne.n	8003dd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d7c:	69fb      	ldr	r3, [r7, #28]
 8003d7e:	005b      	lsls	r3, r3, #1
 8003d80:	2203      	movs	r2, #3
 8003d82:	fa02 f303 	lsl.w	r3, r2, r3
 8003d86:	43db      	mvns	r3, r3
 8003d88:	69ba      	ldr	r2, [r7, #24]
 8003d8a:	4013      	ands	r3, r2
 8003d8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d8e:	683b      	ldr	r3, [r7, #0]
 8003d90:	68da      	ldr	r2, [r3, #12]
 8003d92:	69fb      	ldr	r3, [r7, #28]
 8003d94:	005b      	lsls	r3, r3, #1
 8003d96:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9a:	69ba      	ldr	r2, [r7, #24]
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	69ba      	ldr	r2, [r7, #24]
 8003da4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003dac:	2201      	movs	r2, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	fa02 f303 	lsl.w	r3, r2, r3
 8003db4:	43db      	mvns	r3, r3
 8003db6:	69ba      	ldr	r2, [r7, #24]
 8003db8:	4013      	ands	r3, r2
 8003dba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	f003 0201 	and.w	r2, r3, #1
 8003dc6:	69fb      	ldr	r3, [r7, #28]
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	69ba      	ldr	r2, [r7, #24]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f003 0303 	and.w	r3, r3, #3
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d017      	beq.n	8003e14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	68db      	ldr	r3, [r3, #12]
 8003de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	005b      	lsls	r3, r3, #1
 8003dee:	2203      	movs	r2, #3
 8003df0:	fa02 f303 	lsl.w	r3, r2, r3
 8003df4:	43db      	mvns	r3, r3
 8003df6:	69ba      	ldr	r2, [r7, #24]
 8003df8:	4013      	ands	r3, r2
 8003dfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	005b      	lsls	r3, r3, #1
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	4313      	orrs	r3, r2
 8003e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69ba      	ldr	r2, [r7, #24]
 8003e12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685b      	ldr	r3, [r3, #4]
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d123      	bne.n	8003e68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	08da      	lsrs	r2, r3, #3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3208      	adds	r2, #8
 8003e28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	f003 0307 	and.w	r3, r3, #7
 8003e34:	009b      	lsls	r3, r3, #2
 8003e36:	220f      	movs	r2, #15
 8003e38:	fa02 f303 	lsl.w	r3, r2, r3
 8003e3c:	43db      	mvns	r3, r3
 8003e3e:	69ba      	ldr	r2, [r7, #24]
 8003e40:	4013      	ands	r3, r2
 8003e42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	69fb      	ldr	r3, [r7, #28]
 8003e4a:	f003 0307 	and.w	r3, r3, #7
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003e5a:	69fb      	ldr	r3, [r7, #28]
 8003e5c:	08da      	lsrs	r2, r3, #3
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	3208      	adds	r2, #8
 8003e62:	69b9      	ldr	r1, [r7, #24]
 8003e64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003e6e:	69fb      	ldr	r3, [r7, #28]
 8003e70:	005b      	lsls	r3, r3, #1
 8003e72:	2203      	movs	r2, #3
 8003e74:	fa02 f303 	lsl.w	r3, r2, r3
 8003e78:	43db      	mvns	r3, r3
 8003e7a:	69ba      	ldr	r2, [r7, #24]
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f003 0203 	and.w	r2, r3, #3
 8003e88:	69fb      	ldr	r3, [r7, #28]
 8003e8a:	005b      	lsls	r3, r3, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	69ba      	ldr	r2, [r7, #24]
 8003e9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80a2 	beq.w	8003fee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60fb      	str	r3, [r7, #12]
 8003eae:	4b57      	ldr	r3, [pc, #348]	@ (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eb2:	4a56      	ldr	r2, [pc, #344]	@ (800400c <HAL_GPIO_Init+0x2e8>)
 8003eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003eba:	4b54      	ldr	r3, [pc, #336]	@ (800400c <HAL_GPIO_Init+0x2e8>)
 8003ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ec2:	60fb      	str	r3, [r7, #12]
 8003ec4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003ec6:	4a52      	ldr	r2, [pc, #328]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	089b      	lsrs	r3, r3, #2
 8003ecc:	3302      	adds	r3, #2
 8003ece:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ed2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	f003 0303 	and.w	r3, r3, #3
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	220f      	movs	r2, #15
 8003ede:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a49      	ldr	r2, [pc, #292]	@ (8004014 <HAL_GPIO_Init+0x2f0>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d019      	beq.n	8003f26 <HAL_GPIO_Init+0x202>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a48      	ldr	r2, [pc, #288]	@ (8004018 <HAL_GPIO_Init+0x2f4>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d013      	beq.n	8003f22 <HAL_GPIO_Init+0x1fe>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a47      	ldr	r2, [pc, #284]	@ (800401c <HAL_GPIO_Init+0x2f8>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d00d      	beq.n	8003f1e <HAL_GPIO_Init+0x1fa>
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4a46      	ldr	r2, [pc, #280]	@ (8004020 <HAL_GPIO_Init+0x2fc>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d007      	beq.n	8003f1a <HAL_GPIO_Init+0x1f6>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	4a45      	ldr	r2, [pc, #276]	@ (8004024 <HAL_GPIO_Init+0x300>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d101      	bne.n	8003f16 <HAL_GPIO_Init+0x1f2>
 8003f12:	2304      	movs	r3, #4
 8003f14:	e008      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f16:	2307      	movs	r3, #7
 8003f18:	e006      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1a:	2303      	movs	r3, #3
 8003f1c:	e004      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f1e:	2302      	movs	r3, #2
 8003f20:	e002      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <HAL_GPIO_Init+0x204>
 8003f26:	2300      	movs	r3, #0
 8003f28:	69fa      	ldr	r2, [r7, #28]
 8003f2a:	f002 0203 	and.w	r2, r2, #3
 8003f2e:	0092      	lsls	r2, r2, #2
 8003f30:	4093      	lsls	r3, r2
 8003f32:	69ba      	ldr	r2, [r7, #24]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003f38:	4935      	ldr	r1, [pc, #212]	@ (8004010 <HAL_GPIO_Init+0x2ec>)
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	089b      	lsrs	r3, r3, #2
 8003f3e:	3302      	adds	r3, #2
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f46:	4b38      	ldr	r3, [pc, #224]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f4c:	693b      	ldr	r3, [r7, #16]
 8003f4e:	43db      	mvns	r3, r3
 8003f50:	69ba      	ldr	r2, [r7, #24]
 8003f52:	4013      	ands	r3, r2
 8003f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003f62:	69ba      	ldr	r2, [r7, #24]
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003f6c:	69bb      	ldr	r3, [r7, #24]
 8003f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f70:	4b2d      	ldr	r3, [pc, #180]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003f72:	68db      	ldr	r3, [r3, #12]
 8003f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	43db      	mvns	r3, r3
 8003f7a:	69ba      	ldr	r2, [r7, #24]
 8003f7c:	4013      	ands	r3, r2
 8003f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	685b      	ldr	r3, [r3, #4]
 8003f84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d003      	beq.n	8003f94 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003f8c:	69ba      	ldr	r2, [r7, #24]
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f94:	4a24      	ldr	r2, [pc, #144]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003f96:	69bb      	ldr	r3, [r7, #24]
 8003f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003f9a:	4b23      	ldr	r3, [pc, #140]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	43db      	mvns	r3, r3
 8003fa4:	69ba      	ldr	r2, [r7, #24]
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003fb6:	69ba      	ldr	r2, [r7, #24]
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fc4:	4b18      	ldr	r3, [pc, #96]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fca:	693b      	ldr	r3, [r7, #16]
 8003fcc:	43db      	mvns	r3, r3
 8003fce:	69ba      	ldr	r2, [r7, #24]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d003      	beq.n	8003fe8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003fe0:	69ba      	ldr	r2, [r7, #24]
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	4313      	orrs	r3, r2
 8003fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fe8:	4a0f      	ldr	r2, [pc, #60]	@ (8004028 <HAL_GPIO_Init+0x304>)
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	61fb      	str	r3, [r7, #28]
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b0f      	cmp	r3, #15
 8003ff8:	f67f aea2 	bls.w	8003d40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ffc:	bf00      	nop
 8003ffe:	bf00      	nop
 8004000:	3724      	adds	r7, #36	@ 0x24
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800
 8004010:	40013800 	.word	0x40013800
 8004014:	40020000 	.word	0x40020000
 8004018:	40020400 	.word	0x40020400
 800401c:	40020800 	.word	0x40020800
 8004020:	40020c00 	.word	0x40020c00
 8004024:	40021000 	.word	0x40021000
 8004028:	40013c00 	.word	0x40013c00

0800402c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800402c:	b480      	push	{r7}
 800402e:	b083      	sub	sp, #12
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	460b      	mov	r3, r1
 8004036:	807b      	strh	r3, [r7, #2]
 8004038:	4613      	mov	r3, r2
 800403a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800403c:	787b      	ldrb	r3, [r7, #1]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d003      	beq.n	800404a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004042:	887a      	ldrh	r2, [r7, #2]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004048:	e003      	b.n	8004052 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	041a      	lsls	r2, r3, #16
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	619a      	str	r2, [r3, #24]
}
 8004052:	bf00      	nop
 8004054:	370c      	adds	r7, #12
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr

0800405e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800405e:	b580      	push	{r7, lr}
 8004060:	b086      	sub	sp, #24
 8004062:	af02      	add	r7, sp, #8
 8004064:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e101      	b.n	8004274 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f007 fb10 	bl	800b6b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2203      	movs	r2, #3
 8004094:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800409e:	d102      	bne.n	80040a6 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4618      	mov	r0, r3
 80040ac:	f003 ff5d 	bl	8007f6a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6818      	ldr	r0, [r3, #0]
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	7c1a      	ldrb	r2, [r3, #16]
 80040b8:	f88d 2000 	strb.w	r2, [sp]
 80040bc:	3304      	adds	r3, #4
 80040be:	cb0e      	ldmia	r3, {r1, r2, r3}
 80040c0:	f003 fe3c 	bl	8007d3c <USB_CoreInit>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d005      	beq.n	80040d6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2202      	movs	r2, #2
 80040ce:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e0ce      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2100      	movs	r1, #0
 80040dc:	4618      	mov	r0, r3
 80040de:	f003 ff55 	bl	8007f8c <USB_SetCurrentMode>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d005      	beq.n	80040f4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2202      	movs	r2, #2
 80040ec:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0bf      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f4:	2300      	movs	r3, #0
 80040f6:	73fb      	strb	r3, [r7, #15]
 80040f8:	e04a      	b.n	8004190 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80040fa:	7bfa      	ldrb	r2, [r7, #15]
 80040fc:	6879      	ldr	r1, [r7, #4]
 80040fe:	4613      	mov	r3, r2
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4413      	add	r3, r2
 8004104:	009b      	lsls	r3, r3, #2
 8004106:	440b      	add	r3, r1
 8004108:	3315      	adds	r3, #21
 800410a:	2201      	movs	r2, #1
 800410c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800410e:	7bfa      	ldrb	r2, [r7, #15]
 8004110:	6879      	ldr	r1, [r7, #4]
 8004112:	4613      	mov	r3, r2
 8004114:	00db      	lsls	r3, r3, #3
 8004116:	4413      	add	r3, r2
 8004118:	009b      	lsls	r3, r3, #2
 800411a:	440b      	add	r3, r1
 800411c:	3314      	adds	r3, #20
 800411e:	7bfa      	ldrb	r2, [r7, #15]
 8004120:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004122:	7bfa      	ldrb	r2, [r7, #15]
 8004124:	7bfb      	ldrb	r3, [r7, #15]
 8004126:	b298      	uxth	r0, r3
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	00db      	lsls	r3, r3, #3
 800412e:	4413      	add	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	332e      	adds	r3, #46	@ 0x2e
 8004136:	4602      	mov	r2, r0
 8004138:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800413a:	7bfa      	ldrb	r2, [r7, #15]
 800413c:	6879      	ldr	r1, [r7, #4]
 800413e:	4613      	mov	r3, r2
 8004140:	00db      	lsls	r3, r3, #3
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	3318      	adds	r3, #24
 800414a:	2200      	movs	r2, #0
 800414c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800414e:	7bfa      	ldrb	r2, [r7, #15]
 8004150:	6879      	ldr	r1, [r7, #4]
 8004152:	4613      	mov	r3, r2
 8004154:	00db      	lsls	r3, r3, #3
 8004156:	4413      	add	r3, r2
 8004158:	009b      	lsls	r3, r3, #2
 800415a:	440b      	add	r3, r1
 800415c:	331c      	adds	r3, #28
 800415e:	2200      	movs	r2, #0
 8004160:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004162:	7bfa      	ldrb	r2, [r7, #15]
 8004164:	6879      	ldr	r1, [r7, #4]
 8004166:	4613      	mov	r3, r2
 8004168:	00db      	lsls	r3, r3, #3
 800416a:	4413      	add	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	440b      	add	r3, r1
 8004170:	3320      	adds	r3, #32
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004176:	7bfa      	ldrb	r2, [r7, #15]
 8004178:	6879      	ldr	r1, [r7, #4]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	4413      	add	r3, r2
 8004180:	009b      	lsls	r3, r3, #2
 8004182:	440b      	add	r3, r1
 8004184:	3324      	adds	r3, #36	@ 0x24
 8004186:	2200      	movs	r2, #0
 8004188:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800418a:	7bfb      	ldrb	r3, [r7, #15]
 800418c:	3301      	adds	r3, #1
 800418e:	73fb      	strb	r3, [r7, #15]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	791b      	ldrb	r3, [r3, #4]
 8004194:	7bfa      	ldrb	r2, [r7, #15]
 8004196:	429a      	cmp	r2, r3
 8004198:	d3af      	bcc.n	80040fa <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800419a:	2300      	movs	r3, #0
 800419c:	73fb      	strb	r3, [r7, #15]
 800419e:	e044      	b.n	800422a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80041a0:	7bfa      	ldrb	r2, [r7, #15]
 80041a2:	6879      	ldr	r1, [r7, #4]
 80041a4:	4613      	mov	r3, r2
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	4413      	add	r3, r2
 80041aa:	009b      	lsls	r3, r3, #2
 80041ac:	440b      	add	r3, r1
 80041ae:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80041b2:	2200      	movs	r2, #0
 80041b4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80041b6:	7bfa      	ldrb	r2, [r7, #15]
 80041b8:	6879      	ldr	r1, [r7, #4]
 80041ba:	4613      	mov	r3, r2
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4413      	add	r3, r2
 80041c0:	009b      	lsls	r3, r3, #2
 80041c2:	440b      	add	r3, r1
 80041c4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80041c8:	7bfa      	ldrb	r2, [r7, #15]
 80041ca:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80041cc:	7bfa      	ldrb	r2, [r7, #15]
 80041ce:	6879      	ldr	r1, [r7, #4]
 80041d0:	4613      	mov	r3, r2
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	4413      	add	r3, r2
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	440b      	add	r3, r1
 80041da:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80041de:	2200      	movs	r2, #0
 80041e0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	00db      	lsls	r3, r3, #3
 80041ea:	4413      	add	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	6879      	ldr	r1, [r7, #4]
 80041fc:	4613      	mov	r3, r2
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	4413      	add	r3, r2
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	440b      	add	r3, r1
 8004206:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800420a:	2200      	movs	r2, #0
 800420c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	6879      	ldr	r1, [r7, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	00db      	lsls	r3, r3, #3
 8004216:	4413      	add	r3, r2
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	440b      	add	r3, r1
 800421c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004220:	2200      	movs	r2, #0
 8004222:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004224:	7bfb      	ldrb	r3, [r7, #15]
 8004226:	3301      	adds	r3, #1
 8004228:	73fb      	strb	r3, [r7, #15]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	791b      	ldrb	r3, [r3, #4]
 800422e:	7bfa      	ldrb	r2, [r7, #15]
 8004230:	429a      	cmp	r2, r3
 8004232:	d3b5      	bcc.n	80041a0 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6818      	ldr	r0, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	7c1a      	ldrb	r2, [r3, #16]
 800423c:	f88d 2000 	strb.w	r2, [sp]
 8004240:	3304      	adds	r3, #4
 8004242:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004244:	f003 feee 	bl	8008024 <USB_DevInit>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d005      	beq.n	800425a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e00c      	b.n	8004274 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2200      	movs	r2, #0
 800425e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	4618      	mov	r0, r3
 800426e:	f004 ff38 	bl	80090e2 <USB_DevDisconnect>

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3710      	adds	r7, #16
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004290:	2b01      	cmp	r3, #1
 8004292:	d101      	bne.n	8004298 <HAL_PCD_Start+0x1c>
 8004294:	2302      	movs	r3, #2
 8004296:	e022      	b.n	80042de <HAL_PCD_Start+0x62>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d009      	beq.n	80042c0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d105      	bne.n	80042c0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4618      	mov	r0, r3
 80042c6:	f003 fe3f 	bl	8007f48 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f004 fee6 	bl	80090a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80042dc:	2300      	movs	r3, #0
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}

080042e6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80042e6:	b590      	push	{r4, r7, lr}
 80042e8:	b08d      	sub	sp, #52	@ 0x34
 80042ea:	af00      	add	r7, sp, #0
 80042ec:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042f4:	6a3b      	ldr	r3, [r7, #32]
 80042f6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f004 ffa4 	bl	800924a <USB_GetMode>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	f040 848c 	bne.w	8004c22 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 ff08 	bl	8009124 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	2b00      	cmp	r3, #0
 8004318:	f000 8482 	beq.w	8004c20 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	0a1b      	lsrs	r3, r3, #8
 8004326:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4618      	mov	r0, r3
 8004336:	f004 fef5 	bl	8009124 <USB_ReadInterrupts>
 800433a:	4603      	mov	r3, r0
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b02      	cmp	r3, #2
 8004342:	d107      	bne.n	8004354 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	695a      	ldr	r2, [r3, #20]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f002 0202 	and.w	r2, r2, #2
 8004352:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4618      	mov	r0, r3
 800435a:	f004 fee3 	bl	8009124 <USB_ReadInterrupts>
 800435e:	4603      	mov	r3, r0
 8004360:	f003 0310 	and.w	r3, r3, #16
 8004364:	2b10      	cmp	r3, #16
 8004366:	d161      	bne.n	800442c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	699a      	ldr	r2, [r3, #24]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0210 	bic.w	r2, r2, #16
 8004376:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004378:	6a3b      	ldr	r3, [r7, #32]
 800437a:	6a1b      	ldr	r3, [r3, #32]
 800437c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800437e:	69bb      	ldr	r3, [r7, #24]
 8004380:	f003 020f 	and.w	r2, r3, #15
 8004384:	4613      	mov	r3, r2
 8004386:	00db      	lsls	r3, r3, #3
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	4413      	add	r3, r2
 8004394:	3304      	adds	r3, #4
 8004396:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004398:	69bb      	ldr	r3, [r7, #24]
 800439a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800439e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043a2:	d124      	bne.n	80043ee <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 80043aa:	4013      	ands	r3, r2
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d035      	beq.n	800441c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	091b      	lsrs	r3, r3, #4
 80043b8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80043ba:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043be:	b29b      	uxth	r3, r3
 80043c0:	461a      	mov	r2, r3
 80043c2:	6a38      	ldr	r0, [r7, #32]
 80043c4:	f004 fd1a 	bl	8008dfc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	68da      	ldr	r2, [r3, #12]
 80043cc:	69bb      	ldr	r3, [r7, #24]
 80043ce:	091b      	lsrs	r3, r3, #4
 80043d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043d4:	441a      	add	r2, r3
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	695a      	ldr	r2, [r3, #20]
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	091b      	lsrs	r3, r3, #4
 80043e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80043e6:	441a      	add	r2, r3
 80043e8:	697b      	ldr	r3, [r7, #20]
 80043ea:	615a      	str	r2, [r3, #20]
 80043ec:	e016      	b.n	800441c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80043f4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80043f8:	d110      	bne.n	800441c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004400:	2208      	movs	r2, #8
 8004402:	4619      	mov	r1, r3
 8004404:	6a38      	ldr	r0, [r7, #32]
 8004406:	f004 fcf9 	bl	8008dfc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	695a      	ldr	r2, [r3, #20]
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	091b      	lsrs	r3, r3, #4
 8004412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004416:	441a      	add	r2, r3
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699a      	ldr	r2, [r3, #24]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f042 0210 	orr.w	r2, r2, #16
 800442a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	4618      	mov	r0, r3
 8004432:	f004 fe77 	bl	8009124 <USB_ReadInterrupts>
 8004436:	4603      	mov	r3, r0
 8004438:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800443c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004440:	f040 80a7 	bne.w	8004592 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004444:	2300      	movs	r3, #0
 8004446:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f004 fe7c 	bl	800914a <USB_ReadDevAllOutEpInterrupt>
 8004452:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004454:	e099      	b.n	800458a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004456:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004458:	f003 0301 	and.w	r3, r3, #1
 800445c:	2b00      	cmp	r3, #0
 800445e:	f000 808e 	beq.w	800457e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004468:	b2d2      	uxtb	r2, r2
 800446a:	4611      	mov	r1, r2
 800446c:	4618      	mov	r0, r3
 800446e:	f004 fea0 	bl	80091b2 <USB_ReadDevOutEPInterrupt>
 8004472:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f003 0301 	and.w	r3, r3, #1
 800447a:	2b00      	cmp	r3, #0
 800447c:	d00c      	beq.n	8004498 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800447e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800448a:	461a      	mov	r2, r3
 800448c:	2301      	movs	r3, #1
 800448e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004490:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 fea4 	bl	80051e0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d00c      	beq.n	80044bc <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80044a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	69fb      	ldr	r3, [r7, #28]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ae:	461a      	mov	r2, r3
 80044b0:	2308      	movs	r3, #8
 80044b2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80044b4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 ff7a 	bl	80053b0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	f003 0310 	and.w	r3, r3, #16
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d008      	beq.n	80044d8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80044c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044c8:	015a      	lsls	r2, r3, #5
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	4413      	add	r3, r2
 80044ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044d2:	461a      	mov	r2, r3
 80044d4:	2310      	movs	r3, #16
 80044d6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d030      	beq.n	8004544 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80044e2:	6a3b      	ldr	r3, [r7, #32]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ea:	2b80      	cmp	r3, #128	@ 0x80
 80044ec:	d109      	bne.n	8004502 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	69fa      	ldr	r2, [r7, #28]
 80044f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80044fc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004500:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004502:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	4413      	add	r3, r2
 8004514:	3304      	adds	r3, #4
 8004516:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004518:	697b      	ldr	r3, [r7, #20]
 800451a:	78db      	ldrb	r3, [r3, #3]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d108      	bne.n	8004532 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	2200      	movs	r2, #0
 8004524:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004528:	b2db      	uxtb	r3, r3
 800452a:	4619      	mov	r1, r3
 800452c:	6878      	ldr	r0, [r7, #4]
 800452e:	f007 f9bb 	bl	800b8a8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004534:	015a      	lsls	r2, r3, #5
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	4413      	add	r3, r2
 800453a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453e:	461a      	mov	r2, r3
 8004540:	2302      	movs	r3, #2
 8004542:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	f003 0320 	and.w	r3, r3, #32
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800454e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004550:	015a      	lsls	r2, r3, #5
 8004552:	69fb      	ldr	r3, [r7, #28]
 8004554:	4413      	add	r3, r2
 8004556:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800455a:	461a      	mov	r2, r3
 800455c:	2320      	movs	r3, #32
 800455e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d009      	beq.n	800457e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800456a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004576:	461a      	mov	r2, r3
 8004578:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800457c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800457e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004580:	3301      	adds	r3, #1
 8004582:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004586:	085b      	lsrs	r3, r3, #1
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800458a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af62 	bne.w	8004456 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	4618      	mov	r0, r3
 8004598:	f004 fdc4 	bl	8009124 <USB_ReadInterrupts>
 800459c:	4603      	mov	r3, r0
 800459e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80045a2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80045a6:	f040 80db 	bne.w	8004760 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4618      	mov	r0, r3
 80045b0:	f004 fde5 	bl	800917e <USB_ReadDevAllInEpInterrupt>
 80045b4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80045ba:	e0cd      	b.n	8004758 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80045bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045be:	f003 0301 	and.w	r3, r3, #1
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	f000 80c2 	beq.w	800474c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045ce:	b2d2      	uxtb	r2, r2
 80045d0:	4611      	mov	r1, r2
 80045d2:	4618      	mov	r0, r3
 80045d4:	f004 fe0b 	bl	80091ee <USB_ReadDevInEPInterrupt>
 80045d8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f003 0301 	and.w	r3, r3, #1
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d057      	beq.n	8004694 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80045e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045e6:	f003 030f 	and.w	r3, r3, #15
 80045ea:	2201      	movs	r2, #1
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80045f8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	43db      	mvns	r3, r3
 80045fe:	69f9      	ldr	r1, [r7, #28]
 8004600:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004604:	4013      	ands	r3, r2
 8004606:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800460a:	015a      	lsls	r2, r3, #5
 800460c:	69fb      	ldr	r3, [r7, #28]
 800460e:	4413      	add	r3, r2
 8004610:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004614:	461a      	mov	r2, r3
 8004616:	2301      	movs	r3, #1
 8004618:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	799b      	ldrb	r3, [r3, #6]
 800461e:	2b01      	cmp	r3, #1
 8004620:	d132      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004622:	6879      	ldr	r1, [r7, #4]
 8004624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004626:	4613      	mov	r3, r2
 8004628:	00db      	lsls	r3, r3, #3
 800462a:	4413      	add	r3, r2
 800462c:	009b      	lsls	r3, r3, #2
 800462e:	440b      	add	r3, r1
 8004630:	3320      	adds	r3, #32
 8004632:	6819      	ldr	r1, [r3, #0]
 8004634:	6878      	ldr	r0, [r7, #4]
 8004636:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004638:	4613      	mov	r3, r2
 800463a:	00db      	lsls	r3, r3, #3
 800463c:	4413      	add	r3, r2
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4403      	add	r3, r0
 8004642:	331c      	adds	r3, #28
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4419      	add	r1, r3
 8004648:	6878      	ldr	r0, [r7, #4]
 800464a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800464c:	4613      	mov	r3, r2
 800464e:	00db      	lsls	r3, r3, #3
 8004650:	4413      	add	r3, r2
 8004652:	009b      	lsls	r3, r3, #2
 8004654:	4403      	add	r3, r0
 8004656:	3320      	adds	r3, #32
 8004658:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800465a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800465c:	2b00      	cmp	r3, #0
 800465e:	d113      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
 8004660:	6879      	ldr	r1, [r7, #4]
 8004662:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004664:	4613      	mov	r3, r2
 8004666:	00db      	lsls	r3, r3, #3
 8004668:	4413      	add	r3, r2
 800466a:	009b      	lsls	r3, r3, #2
 800466c:	440b      	add	r3, r1
 800466e:	3324      	adds	r3, #36	@ 0x24
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d108      	bne.n	8004688 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6818      	ldr	r0, [r3, #0]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004680:	461a      	mov	r2, r3
 8004682:	2101      	movs	r1, #1
 8004684:	f004 fe12 	bl	80092ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800468a:	b2db      	uxtb	r3, r3
 800468c:	4619      	mov	r1, r3
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f007 f88f 	bl	800b7b2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d008      	beq.n	80046b0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	015a      	lsls	r2, r3, #5
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	4413      	add	r3, r2
 80046a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046aa:	461a      	mov	r2, r3
 80046ac:	2308      	movs	r3, #8
 80046ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d008      	beq.n	80046cc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80046ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046bc:	015a      	lsls	r2, r3, #5
 80046be:	69fb      	ldr	r3, [r7, #28]
 80046c0:	4413      	add	r3, r2
 80046c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046c6:	461a      	mov	r2, r3
 80046c8:	2310      	movs	r3, #16
 80046ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d008      	beq.n	80046e8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80046d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046e2:	461a      	mov	r2, r3
 80046e4:	2340      	movs	r3, #64	@ 0x40
 80046e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f003 0302 	and.w	r3, r3, #2
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d023      	beq.n	800473a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80046f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80046f4:	6a38      	ldr	r0, [r7, #32]
 80046f6:	f003 fdf9 	bl	80082ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80046fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046fc:	4613      	mov	r3, r2
 80046fe:	00db      	lsls	r3, r3, #3
 8004700:	4413      	add	r3, r2
 8004702:	009b      	lsls	r3, r3, #2
 8004704:	3310      	adds	r3, #16
 8004706:	687a      	ldr	r2, [r7, #4]
 8004708:	4413      	add	r3, r2
 800470a:	3304      	adds	r3, #4
 800470c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	78db      	ldrb	r3, [r3, #3]
 8004712:	2b01      	cmp	r3, #1
 8004714:	d108      	bne.n	8004728 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800471c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800471e:	b2db      	uxtb	r3, r3
 8004720:	4619      	mov	r1, r3
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f007 f8d2 	bl	800b8cc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004734:	461a      	mov	r2, r3
 8004736:	2302      	movs	r3, #2
 8004738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004744:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 fcbd 	bl	80050c6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800474c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800474e:	3301      	adds	r3, #1
 8004750:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004752:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004754:	085b      	lsrs	r3, r3, #1
 8004756:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	2b00      	cmp	r3, #0
 800475c:	f47f af2e 	bne.w	80045bc <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4618      	mov	r0, r3
 8004766:	f004 fcdd 	bl	8009124 <USB_ReadInterrupts>
 800476a:	4603      	mov	r3, r0
 800476c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004770:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004774:	d122      	bne.n	80047bc <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	69fa      	ldr	r2, [r7, #28]
 8004780:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004784:	f023 0301 	bic.w	r3, r3, #1
 8004788:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8004790:	2b01      	cmp	r3, #1
 8004792:	d108      	bne.n	80047a6 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800479c:	2100      	movs	r1, #0
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f000 fea4 	bl	80054ec <HAL_PCDEx_LPM_Callback>
 80047a4:	e002      	b.n	80047ac <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f007 f870 	bl	800b88c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	695a      	ldr	r2, [r3, #20]
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80047ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4618      	mov	r0, r3
 80047c2:	f004 fcaf 	bl	8009124 <USB_ReadInterrupts>
 80047c6:	4603      	mov	r3, r0
 80047c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80047cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047d0:	d112      	bne.n	80047f8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80047d2:	69fb      	ldr	r3, [r7, #28]
 80047d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	f003 0301 	and.w	r3, r3, #1
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d102      	bne.n	80047e8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f007 f82c 	bl	800b840 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	695a      	ldr	r2, [r3, #20]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80047f6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f004 fc91 	bl	8009124 <USB_ReadInterrupts>
 8004802:	4603      	mov	r3, r0
 8004804:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004808:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800480c:	f040 80b7 	bne.w	800497e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004816:	685b      	ldr	r3, [r3, #4]
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800481e:	f023 0301 	bic.w	r3, r3, #1
 8004822:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2110      	movs	r1, #16
 800482a:	4618      	mov	r0, r3
 800482c:	f003 fd5e 	bl	80082ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004830:	2300      	movs	r3, #0
 8004832:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004834:	e046      	b.n	80048c4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004838:	015a      	lsls	r2, r3, #5
 800483a:	69fb      	ldr	r3, [r7, #28]
 800483c:	4413      	add	r3, r2
 800483e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004842:	461a      	mov	r2, r3
 8004844:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004848:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800484a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800484c:	015a      	lsls	r2, r3, #5
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	4413      	add	r3, r2
 8004852:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485a:	0151      	lsls	r1, r2, #5
 800485c:	69fa      	ldr	r2, [r7, #28]
 800485e:	440a      	add	r2, r1
 8004860:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004864:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004868:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800486a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800486c:	015a      	lsls	r2, r3, #5
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	4413      	add	r3, r2
 8004872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004876:	461a      	mov	r2, r3
 8004878:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800487c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800487e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004880:	015a      	lsls	r2, r3, #5
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	4413      	add	r3, r2
 8004886:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800488e:	0151      	lsls	r1, r2, #5
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	440a      	add	r2, r1
 8004894:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004898:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800489c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800489e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a0:	015a      	lsls	r2, r3, #5
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80048ae:	0151      	lsls	r1, r2, #5
 80048b0:	69fa      	ldr	r2, [r7, #28]
 80048b2:	440a      	add	r2, r1
 80048b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80048bc:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048c0:	3301      	adds	r3, #1
 80048c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	791b      	ldrb	r3, [r3, #4]
 80048c8:	461a      	mov	r2, r3
 80048ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d3b2      	bcc.n	8004836 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d6:	69db      	ldr	r3, [r3, #28]
 80048d8:	69fa      	ldr	r2, [r7, #28]
 80048da:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048de:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80048e2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7bdb      	ldrb	r3, [r3, #15]
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d016      	beq.n	800491a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80048ec:	69fb      	ldr	r3, [r7, #28]
 80048ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80048f6:	69fa      	ldr	r2, [r7, #28]
 80048f8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80048fc:	f043 030b 	orr.w	r3, r3, #11
 8004900:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8004904:	69fb      	ldr	r3, [r7, #28]
 8004906:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800490a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800490c:	69fa      	ldr	r2, [r7, #28]
 800490e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004912:	f043 030b 	orr.w	r3, r3, #11
 8004916:	6453      	str	r3, [r2, #68]	@ 0x44
 8004918:	e015      	b.n	8004946 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800491a:	69fb      	ldr	r3, [r7, #28]
 800491c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004920:	695b      	ldr	r3, [r3, #20]
 8004922:	69fa      	ldr	r2, [r7, #28]
 8004924:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004928:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800492c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8004930:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8004932:	69fb      	ldr	r3, [r7, #28]
 8004934:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	69fa      	ldr	r2, [r7, #28]
 800493c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004940:	f043 030b 	orr.w	r3, r3, #11
 8004944:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004946:	69fb      	ldr	r3, [r7, #28]
 8004948:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004954:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004958:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004968:	461a      	mov	r2, r3
 800496a:	f004 fc9f 	bl	80092ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	695a      	ldr	r2, [r3, #20]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800497c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f004 fbce 	bl	8009124 <USB_ReadInterrupts>
 8004988:	4603      	mov	r3, r0
 800498a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800498e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004992:	d123      	bne.n	80049dc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f004 fc64 	bl	8009266 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4618      	mov	r0, r3
 80049a4:	f003 fd1b 	bl	80083de <USB_GetDevSpeed>
 80049a8:	4603      	mov	r3, r0
 80049aa:	461a      	mov	r2, r3
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681c      	ldr	r4, [r3, #0]
 80049b4:	f001 f9ca 	bl	8005d4c <HAL_RCC_GetHCLKFreq>
 80049b8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80049be:	461a      	mov	r2, r3
 80049c0:	4620      	mov	r0, r4
 80049c2:	f003 fa1f 	bl	8007e04 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f006 ff1b 	bl	800b802 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	695a      	ldr	r2, [r3, #20]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80049da:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f004 fb9f 	bl	8009124 <USB_ReadInterrupts>
 80049e6:	4603      	mov	r3, r0
 80049e8:	f003 0308 	and.w	r3, r3, #8
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d10a      	bne.n	8004a06 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f006 fef8 	bl	800b7e6 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	695a      	ldr	r2, [r3, #20]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f002 0208 	and.w	r2, r2, #8
 8004a04:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f004 fb8a 	bl	8009124 <USB_ReadInterrupts>
 8004a10:	4603      	mov	r3, r0
 8004a12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a16:	2b80      	cmp	r3, #128	@ 0x80
 8004a18:	d123      	bne.n	8004a62 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	699b      	ldr	r3, [r3, #24]
 8004a1e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004a22:	6a3b      	ldr	r3, [r7, #32]
 8004a24:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a26:	2301      	movs	r3, #1
 8004a28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2a:	e014      	b.n	8004a56 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b01      	cmp	r3, #1
 8004a42:	d105      	bne.n	8004a50 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	4619      	mov	r1, r3
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fb0a 	bl	8005064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a52:	3301      	adds	r3, #1
 8004a54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	791b      	ldrb	r3, [r3, #4]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d3e4      	bcc.n	8004a2c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4618      	mov	r0, r3
 8004a68:	f004 fb5c 	bl	8009124 <USB_ReadInterrupts>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004a72:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a76:	d13c      	bne.n	8004af2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a78:	2301      	movs	r3, #1
 8004a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a7c:	e02b      	b.n	8004ad6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8004a7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	69fb      	ldr	r3, [r7, #28]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a8e:	6879      	ldr	r1, [r7, #4]
 8004a90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a92:	4613      	mov	r3, r2
 8004a94:	00db      	lsls	r3, r3, #3
 8004a96:	4413      	add	r3, r2
 8004a98:	009b      	lsls	r3, r3, #2
 8004a9a:	440b      	add	r3, r1
 8004a9c:	3318      	adds	r3, #24
 8004a9e:	781b      	ldrb	r3, [r3, #0]
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d115      	bne.n	8004ad0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004aa4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	da12      	bge.n	8004ad0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004aaa:	6879      	ldr	r1, [r7, #4]
 8004aac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004aae:	4613      	mov	r3, r2
 8004ab0:	00db      	lsls	r3, r3, #3
 8004ab2:	4413      	add	r3, r2
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	440b      	add	r3, r1
 8004ab8:	3317      	adds	r3, #23
 8004aba:	2201      	movs	r2, #1
 8004abc:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8004abe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004ac6:	b2db      	uxtb	r3, r3
 8004ac8:	4619      	mov	r1, r3
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f000 faca 	bl	8005064 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ad2:	3301      	adds	r3, #1
 8004ad4:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	791b      	ldrb	r3, [r3, #4]
 8004ada:	461a      	mov	r2, r3
 8004adc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d3cd      	bcc.n	8004a7e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	695a      	ldr	r2, [r3, #20]
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8004af0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4618      	mov	r0, r3
 8004af8:	f004 fb14 	bl	8009124 <USB_ReadInterrupts>
 8004afc:	4603      	mov	r3, r0
 8004afe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004b06:	d156      	bne.n	8004bb6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b08:	2301      	movs	r3, #1
 8004b0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b0c:	e045      	b.n	8004b9a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8004b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b1e:	6879      	ldr	r1, [r7, #4]
 8004b20:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b22:	4613      	mov	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	4413      	add	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	440b      	add	r3, r1
 8004b2c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d12e      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b36:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da2b      	bge.n	8004b94 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8004b48:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d121      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004b50:	6879      	ldr	r1, [r7, #4]
 8004b52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b54:	4613      	mov	r3, r2
 8004b56:	00db      	lsls	r3, r3, #3
 8004b58:	4413      	add	r3, r2
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	440b      	add	r3, r1
 8004b5e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8004b62:	2201      	movs	r2, #1
 8004b64:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004b6e:	6a3b      	ldr	r3, [r7, #32]
 8004b70:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004b72:	6a3b      	ldr	r3, [r7, #32]
 8004b74:	695b      	ldr	r3, [r3, #20]
 8004b76:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d10a      	bne.n	8004b94 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004b7e:	69fb      	ldr	r3, [r7, #28]
 8004b80:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	69fa      	ldr	r2, [r7, #28]
 8004b88:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004b8c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b90:	6053      	str	r3, [r2, #4]
            break;
 8004b92:	e008      	b.n	8004ba6 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004b94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b96:	3301      	adds	r3, #1
 8004b98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	791b      	ldrb	r3, [r3, #4]
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	d3b3      	bcc.n	8004b0e <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	695a      	ldr	r2, [r3, #20]
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8004bb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f004 fab2 	bl	8009124 <USB_ReadInterrupts>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004bc6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004bca:	d10a      	bne.n	8004be2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f006 fe8f 	bl	800b8f0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	695a      	ldr	r2, [r3, #20]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004be0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	4618      	mov	r0, r3
 8004be8:	f004 fa9c 	bl	8009124 <USB_ReadInterrupts>
 8004bec:	4603      	mov	r3, r0
 8004bee:	f003 0304 	and.w	r3, r3, #4
 8004bf2:	2b04      	cmp	r3, #4
 8004bf4:	d115      	bne.n	8004c22 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	685b      	ldr	r3, [r3, #4]
 8004bfc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	f003 0304 	and.w	r3, r3, #4
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d002      	beq.n	8004c0e <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f006 fe7f 	bl	800b90c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	69ba      	ldr	r2, [r7, #24]
 8004c1a:	430a      	orrs	r2, r1
 8004c1c:	605a      	str	r2, [r3, #4]
 8004c1e:	e000      	b.n	8004c22 <HAL_PCD_IRQHandler+0x93c>
      return;
 8004c20:	bf00      	nop
    }
  }
}
 8004c22:	3734      	adds	r7, #52	@ 0x34
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd90      	pop	{r4, r7, pc}

08004c28 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
 8004c30:	460b      	mov	r3, r1
 8004c32:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d101      	bne.n	8004c42 <HAL_PCD_SetAddress+0x1a>
 8004c3e:	2302      	movs	r3, #2
 8004c40:	e012      	b.n	8004c68 <HAL_PCD_SetAddress+0x40>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2201      	movs	r2, #1
 8004c46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	78fa      	ldrb	r2, [r7, #3]
 8004c4e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	78fa      	ldrb	r2, [r7, #3]
 8004c56:	4611      	mov	r1, r2
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f004 f9fb 	bl	8009054 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2200      	movs	r2, #0
 8004c62:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004c66:	2300      	movs	r3, #0
}
 8004c68:	4618      	mov	r0, r3
 8004c6a:	3708      	adds	r7, #8
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	bd80      	pop	{r7, pc}

08004c70 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b084      	sub	sp, #16
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
 8004c78:	4608      	mov	r0, r1
 8004c7a:	4611      	mov	r1, r2
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	70fb      	strb	r3, [r7, #3]
 8004c82:	460b      	mov	r3, r1
 8004c84:	803b      	strh	r3, [r7, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c8e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	da0f      	bge.n	8004cb6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c96:	78fb      	ldrb	r3, [r7, #3]
 8004c98:	f003 020f 	and.w	r2, r3, #15
 8004c9c:	4613      	mov	r3, r2
 8004c9e:	00db      	lsls	r3, r3, #3
 8004ca0:	4413      	add	r3, r2
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	3310      	adds	r3, #16
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	4413      	add	r3, r2
 8004caa:	3304      	adds	r3, #4
 8004cac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	2201      	movs	r2, #1
 8004cb2:	705a      	strb	r2, [r3, #1]
 8004cb4:	e00f      	b.n	8004cd6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cb6:	78fb      	ldrb	r3, [r7, #3]
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	4613      	mov	r3, r2
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4413      	add	r3, r2
 8004cc2:	009b      	lsls	r3, r3, #2
 8004cc4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	4413      	add	r3, r2
 8004ccc:	3304      	adds	r3, #4
 8004cce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004cd6:	78fb      	ldrb	r3, [r7, #3]
 8004cd8:	f003 030f 	and.w	r3, r3, #15
 8004cdc:	b2da      	uxtb	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8004ce2:	883b      	ldrh	r3, [r7, #0]
 8004ce4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	78ba      	ldrb	r2, [r7, #2]
 8004cf0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	785b      	ldrb	r3, [r3, #1]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d004      	beq.n	8004d04 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	781b      	ldrb	r3, [r3, #0]
 8004cfe:	461a      	mov	r2, r3
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004d04:	78bb      	ldrb	r3, [r7, #2]
 8004d06:	2b02      	cmp	r3, #2
 8004d08:	d102      	bne.n	8004d10 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d101      	bne.n	8004d1e <HAL_PCD_EP_Open+0xae>
 8004d1a:	2302      	movs	r3, #2
 8004d1c:	e00e      	b.n	8004d3c <HAL_PCD_EP_Open+0xcc>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	68f9      	ldr	r1, [r7, #12]
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	f003 fb7b 	bl	8008428 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8004d3a:	7afb      	ldrb	r3, [r7, #11]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	460b      	mov	r3, r1
 8004d4e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004d50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	da0f      	bge.n	8004d78 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d58:	78fb      	ldrb	r3, [r7, #3]
 8004d5a:	f003 020f 	and.w	r2, r3, #15
 8004d5e:	4613      	mov	r3, r2
 8004d60:	00db      	lsls	r3, r3, #3
 8004d62:	4413      	add	r3, r2
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	3310      	adds	r3, #16
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3304      	adds	r3, #4
 8004d6e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	705a      	strb	r2, [r3, #1]
 8004d76:	e00f      	b.n	8004d98 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004d78:	78fb      	ldrb	r3, [r7, #3]
 8004d7a:	f003 020f 	and.w	r2, r3, #15
 8004d7e:	4613      	mov	r3, r2
 8004d80:	00db      	lsls	r3, r3, #3
 8004d82:	4413      	add	r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004d8a:	687a      	ldr	r2, [r7, #4]
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3304      	adds	r3, #4
 8004d90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	2200      	movs	r2, #0
 8004d96:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d98:	78fb      	ldrb	r3, [r7, #3]
 8004d9a:	f003 030f 	and.w	r3, r3, #15
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	d101      	bne.n	8004db2 <HAL_PCD_EP_Close+0x6e>
 8004dae:	2302      	movs	r3, #2
 8004db0:	e00e      	b.n	8004dd0 <HAL_PCD_EP_Close+0x8c>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68f9      	ldr	r1, [r7, #12]
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f003 fbb9 	bl	8008538 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	2200      	movs	r2, #0
 8004dca:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8004dce:	2300      	movs	r3, #0
}
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	3710      	adds	r7, #16
 8004dd4:	46bd      	mov	sp, r7
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	b086      	sub	sp, #24
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	60f8      	str	r0, [r7, #12]
 8004de0:	607a      	str	r2, [r7, #4]
 8004de2:	603b      	str	r3, [r7, #0]
 8004de4:	460b      	mov	r3, r1
 8004de6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004de8:	7afb      	ldrb	r3, [r7, #11]
 8004dea:	f003 020f 	and.w	r2, r3, #15
 8004dee:	4613      	mov	r3, r2
 8004df0:	00db      	lsls	r3, r3, #3
 8004df2:	4413      	add	r3, r2
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004dfa:	68fa      	ldr	r2, [r7, #12]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	3304      	adds	r3, #4
 8004e00:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	687a      	ldr	r2, [r7, #4]
 8004e06:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	683a      	ldr	r2, [r7, #0]
 8004e0c:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2200      	movs	r2, #0
 8004e12:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	2200      	movs	r2, #0
 8004e18:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e1a:	7afb      	ldrb	r3, [r7, #11]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	b2da      	uxtb	r2, r3
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	799b      	ldrb	r3, [r3, #6]
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	d102      	bne.n	8004e34 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	6818      	ldr	r0, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	799b      	ldrb	r3, [r3, #6]
 8004e3c:	461a      	mov	r2, r3
 8004e3e:	6979      	ldr	r1, [r7, #20]
 8004e40:	f003 fc56 	bl	80086f0 <USB_EPStartXfer>

  return HAL_OK;
 8004e44:	2300      	movs	r3, #0
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	3718      	adds	r7, #24
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}

08004e4e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	460b      	mov	r3, r1
 8004e58:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8004e5a:	78fb      	ldrb	r3, [r7, #3]
 8004e5c:	f003 020f 	and.w	r2, r3, #15
 8004e60:	6879      	ldr	r1, [r7, #4]
 8004e62:	4613      	mov	r3, r2
 8004e64:	00db      	lsls	r3, r3, #3
 8004e66:	4413      	add	r3, r2
 8004e68:	009b      	lsls	r3, r3, #2
 8004e6a:	440b      	add	r3, r1
 8004e6c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8004e70:	681b      	ldr	r3, [r3, #0]
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	370c      	adds	r7, #12
 8004e76:	46bd      	mov	sp, r7
 8004e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7c:	4770      	bx	lr

08004e7e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	607a      	str	r2, [r7, #4]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	460b      	mov	r3, r1
 8004e8c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e8e:	7afb      	ldrb	r3, [r7, #11]
 8004e90:	f003 020f 	and.w	r2, r3, #15
 8004e94:	4613      	mov	r3, r2
 8004e96:	00db      	lsls	r3, r3, #3
 8004e98:	4413      	add	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	3310      	adds	r3, #16
 8004e9e:	68fa      	ldr	r2, [r7, #12]
 8004ea0:	4413      	add	r3, r2
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	687a      	ldr	r2, [r7, #4]
 8004eaa:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	683a      	ldr	r2, [r7, #0]
 8004eb0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004ebe:	7afb      	ldrb	r3, [r7, #11]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	b2da      	uxtb	r2, r3
 8004ec6:	697b      	ldr	r3, [r7, #20]
 8004ec8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	799b      	ldrb	r3, [r3, #6]
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	d102      	bne.n	8004ed8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	6818      	ldr	r0, [r3, #0]
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	799b      	ldrb	r3, [r3, #6]
 8004ee0:	461a      	mov	r2, r3
 8004ee2:	6979      	ldr	r1, [r7, #20]
 8004ee4:	f003 fc04 	bl	80086f0 <USB_EPStartXfer>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3718      	adds	r7, #24
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}

08004ef2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
 8004efa:	460b      	mov	r3, r1
 8004efc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004efe:	78fb      	ldrb	r3, [r7, #3]
 8004f00:	f003 030f 	and.w	r3, r3, #15
 8004f04:	687a      	ldr	r2, [r7, #4]
 8004f06:	7912      	ldrb	r2, [r2, #4]
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d901      	bls.n	8004f10 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	e04f      	b.n	8004fb0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004f10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	da0f      	bge.n	8004f38 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f18:	78fb      	ldrb	r3, [r7, #3]
 8004f1a:	f003 020f 	and.w	r2, r3, #15
 8004f1e:	4613      	mov	r3, r2
 8004f20:	00db      	lsls	r3, r3, #3
 8004f22:	4413      	add	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	3310      	adds	r3, #16
 8004f28:	687a      	ldr	r2, [r7, #4]
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3304      	adds	r3, #4
 8004f2e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	2201      	movs	r2, #1
 8004f34:	705a      	strb	r2, [r3, #1]
 8004f36:	e00d      	b.n	8004f54 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004f38:	78fa      	ldrb	r2, [r7, #3]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	00db      	lsls	r3, r3, #3
 8004f3e:	4413      	add	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004f46:	687a      	ldr	r2, [r7, #4]
 8004f48:	4413      	add	r3, r2
 8004f4a:	3304      	adds	r3, #4
 8004f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	2200      	movs	r2, #0
 8004f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	2201      	movs	r2, #1
 8004f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f5a:	78fb      	ldrb	r3, [r7, #3]
 8004f5c:	f003 030f 	and.w	r3, r3, #15
 8004f60:	b2da      	uxtb	r2, r3
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004f6c:	2b01      	cmp	r3, #1
 8004f6e:	d101      	bne.n	8004f74 <HAL_PCD_EP_SetStall+0x82>
 8004f70:	2302      	movs	r3, #2
 8004f72:	e01d      	b.n	8004fb0 <HAL_PCD_EP_SetStall+0xbe>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2201      	movs	r2, #1
 8004f78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	68f9      	ldr	r1, [r7, #12]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f003 ff92 	bl	8008eac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004f88:	78fb      	ldrb	r3, [r7, #3]
 8004f8a:	f003 030f 	and.w	r3, r3, #15
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d109      	bne.n	8004fa6 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6818      	ldr	r0, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	7999      	ldrb	r1, [r3, #6]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	f004 f983 	bl	80092ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004fae:	2300      	movs	r3, #0
}
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	3710      	adds	r7, #16
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	bd80      	pop	{r7, pc}

08004fb8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b084      	sub	sp, #16
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004fc4:	78fb      	ldrb	r3, [r7, #3]
 8004fc6:	f003 030f 	and.w	r3, r3, #15
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	7912      	ldrb	r2, [r2, #4]
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d901      	bls.n	8004fd6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004fd2:	2301      	movs	r3, #1
 8004fd4:	e042      	b.n	800505c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004fd6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	da0f      	bge.n	8004ffe <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004fde:	78fb      	ldrb	r3, [r7, #3]
 8004fe0:	f003 020f 	and.w	r2, r3, #15
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	00db      	lsls	r3, r3, #3
 8004fe8:	4413      	add	r3, r2
 8004fea:	009b      	lsls	r3, r3, #2
 8004fec:	3310      	adds	r3, #16
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3304      	adds	r3, #4
 8004ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2201      	movs	r2, #1
 8004ffa:	705a      	strb	r2, [r3, #1]
 8004ffc:	e00f      	b.n	800501e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ffe:	78fb      	ldrb	r3, [r7, #3]
 8005000:	f003 020f 	and.w	r2, r3, #15
 8005004:	4613      	mov	r3, r2
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4413      	add	r3, r2
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	4413      	add	r3, r2
 8005014:	3304      	adds	r3, #4
 8005016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005024:	78fb      	ldrb	r3, [r7, #3]
 8005026:	f003 030f 	and.w	r3, r3, #15
 800502a:	b2da      	uxtb	r2, r3
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005036:	2b01      	cmp	r3, #1
 8005038:	d101      	bne.n	800503e <HAL_PCD_EP_ClrStall+0x86>
 800503a:	2302      	movs	r3, #2
 800503c:	e00e      	b.n	800505c <HAL_PCD_EP_ClrStall+0xa4>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2201      	movs	r2, #1
 8005042:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	4618      	mov	r0, r3
 800504e:	f003 ff9b 	bl	8008f88 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3710      	adds	r7, #16
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005064:	b580      	push	{r7, lr}
 8005066:	b084      	sub	sp, #16
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
 800506c:	460b      	mov	r3, r1
 800506e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005070:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005074:	2b00      	cmp	r3, #0
 8005076:	da0c      	bge.n	8005092 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	f003 020f 	and.w	r2, r3, #15
 800507e:	4613      	mov	r3, r2
 8005080:	00db      	lsls	r3, r3, #3
 8005082:	4413      	add	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	3310      	adds	r3, #16
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	4413      	add	r3, r2
 800508c:	3304      	adds	r3, #4
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	e00c      	b.n	80050ac <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005092:	78fb      	ldrb	r3, [r7, #3]
 8005094:	f003 020f 	and.w	r2, r3, #15
 8005098:	4613      	mov	r3, r2
 800509a:	00db      	lsls	r3, r3, #3
 800509c:	4413      	add	r3, r2
 800509e:	009b      	lsls	r3, r3, #2
 80050a0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80050a4:	687a      	ldr	r2, [r7, #4]
 80050a6:	4413      	add	r3, r2
 80050a8:	3304      	adds	r3, #4
 80050aa:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68f9      	ldr	r1, [r7, #12]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f003 fdba 	bl	8008c2c <USB_EPStopXfer>
 80050b8:	4603      	mov	r3, r0
 80050ba:	72fb      	strb	r3, [r7, #11]

  return ret;
 80050bc:	7afb      	ldrb	r3, [r7, #11]
}
 80050be:	4618      	mov	r0, r3
 80050c0:	3710      	adds	r7, #16
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}

080050c6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050c6:	b580      	push	{r7, lr}
 80050c8:	b08a      	sub	sp, #40	@ 0x28
 80050ca:	af02      	add	r7, sp, #8
 80050cc:	6078      	str	r0, [r7, #4]
 80050ce:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80050da:	683a      	ldr	r2, [r7, #0]
 80050dc:	4613      	mov	r3, r2
 80050de:	00db      	lsls	r3, r3, #3
 80050e0:	4413      	add	r3, r2
 80050e2:	009b      	lsls	r3, r3, #2
 80050e4:	3310      	adds	r3, #16
 80050e6:	687a      	ldr	r2, [r7, #4]
 80050e8:	4413      	add	r3, r2
 80050ea:	3304      	adds	r3, #4
 80050ec:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	429a      	cmp	r2, r3
 80050f8:	d901      	bls.n	80050fe <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80050fa:	2301      	movs	r3, #1
 80050fc:	e06b      	b.n	80051d6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	691a      	ldr	r2, [r3, #16]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	695b      	ldr	r3, [r3, #20]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	69fa      	ldr	r2, [r7, #28]
 8005110:	429a      	cmp	r2, r3
 8005112:	d902      	bls.n	800511a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689b      	ldr	r3, [r3, #8]
 8005118:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3303      	adds	r3, #3
 800511e:	089b      	lsrs	r3, r3, #2
 8005120:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005122:	e02a      	b.n	800517a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691a      	ldr	r2, [r3, #16]
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	689b      	ldr	r3, [r3, #8]
 8005134:	69fa      	ldr	r2, [r7, #28]
 8005136:	429a      	cmp	r2, r3
 8005138:	d902      	bls.n	8005140 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005140:	69fb      	ldr	r3, [r7, #28]
 8005142:	3303      	adds	r3, #3
 8005144:	089b      	lsrs	r3, r3, #2
 8005146:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	68d9      	ldr	r1, [r3, #12]
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	b2da      	uxtb	r2, r3
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005158:	9300      	str	r3, [sp, #0]
 800515a:	4603      	mov	r3, r0
 800515c:	6978      	ldr	r0, [r7, #20]
 800515e:	f003 fe0f 	bl	8008d80 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	68da      	ldr	r2, [r3, #12]
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	441a      	add	r2, r3
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	695a      	ldr	r2, [r3, #20]
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	441a      	add	r2, r3
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800517a:	683b      	ldr	r3, [r7, #0]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005186:	699b      	ldr	r3, [r3, #24]
 8005188:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	429a      	cmp	r2, r3
 800518e:	d809      	bhi.n	80051a4 <PCD_WriteEmptyTxFifo+0xde>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005198:	429a      	cmp	r2, r3
 800519a:	d203      	bcs.n	80051a4 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d1bf      	bne.n	8005124 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	691a      	ldr	r2, [r3, #16]
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	d811      	bhi.n	80051d4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	f003 030f 	and.w	r3, r3, #15
 80051b6:	2201      	movs	r2, #1
 80051b8:	fa02 f303 	lsl.w	r3, r2, r3
 80051bc:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	43db      	mvns	r3, r3
 80051ca:	6939      	ldr	r1, [r7, #16]
 80051cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80051d0:	4013      	ands	r3, r2
 80051d2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3720      	adds	r7, #32
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
	...

080051e0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b088      	sub	sp, #32
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f0:	69fb      	ldr	r3, [r7, #28]
 80051f2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	333c      	adds	r3, #60	@ 0x3c
 80051f8:	3304      	adds	r3, #4
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	015a      	lsls	r2, r3, #5
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	4413      	add	r3, r2
 8005206:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	799b      	ldrb	r3, [r3, #6]
 8005212:	2b01      	cmp	r3, #1
 8005214:	d17b      	bne.n	800530e <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	2b00      	cmp	r3, #0
 800521e:	d015      	beq.n	800524c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005220:	697b      	ldr	r3, [r7, #20]
 8005222:	4a61      	ldr	r2, [pc, #388]	@ (80053a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005224:	4293      	cmp	r3, r2
 8005226:	f240 80b9 	bls.w	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800522a:	693b      	ldr	r3, [r7, #16]
 800522c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005230:	2b00      	cmp	r3, #0
 8005232:	f000 80b3 	beq.w	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	69bb      	ldr	r3, [r7, #24]
 800523c:	4413      	add	r3, r2
 800523e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005242:	461a      	mov	r2, r3
 8005244:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005248:	6093      	str	r3, [r2, #8]
 800524a:	e0a7      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f003 0320 	and.w	r3, r3, #32
 8005252:	2b00      	cmp	r3, #0
 8005254:	d009      	beq.n	800526a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005262:	461a      	mov	r2, r3
 8005264:	2320      	movs	r3, #32
 8005266:	6093      	str	r3, [r2, #8]
 8005268:	e098      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005270:	2b00      	cmp	r3, #0
 8005272:	f040 8093 	bne.w	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005276:	697b      	ldr	r3, [r7, #20]
 8005278:	4a4b      	ldr	r2, [pc, #300]	@ (80053a8 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800527a:	4293      	cmp	r3, r2
 800527c:	d90f      	bls.n	800529e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00a      	beq.n	800529e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	015a      	lsls	r2, r3, #5
 800528c:	69bb      	ldr	r3, [r7, #24]
 800528e:	4413      	add	r3, r2
 8005290:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005294:	461a      	mov	r2, r3
 8005296:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800529a:	6093      	str	r3, [r2, #8]
 800529c:	e07e      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800529e:	683a      	ldr	r2, [r7, #0]
 80052a0:	4613      	mov	r3, r2
 80052a2:	00db      	lsls	r3, r3, #3
 80052a4:	4413      	add	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	4413      	add	r3, r2
 80052b0:	3304      	adds	r3, #4
 80052b2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	6a1a      	ldr	r2, [r3, #32]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	0159      	lsls	r1, r3, #5
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	440b      	add	r3, r1
 80052c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d114      	bne.n	8005300 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d109      	bne.n	80052f2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6818      	ldr	r0, [r3, #0]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80052e8:	461a      	mov	r2, r3
 80052ea:	2101      	movs	r1, #1
 80052ec:	f003 ffde 	bl	80092ac <USB_EP0_OutStart>
 80052f0:	e006      	b.n	8005300 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	68da      	ldr	r2, [r3, #12]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	441a      	add	r2, r3
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	4619      	mov	r1, r3
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f006 fa38 	bl	800b77c <HAL_PCD_DataOutStageCallback>
 800530c:	e046      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4a26      	ldr	r2, [pc, #152]	@ (80053ac <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005312:	4293      	cmp	r3, r2
 8005314:	d124      	bne.n	8005360 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005332:	6093      	str	r3, [r2, #8]
 8005334:	e032      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f003 0320 	and.w	r3, r3, #32
 800533c:	2b00      	cmp	r3, #0
 800533e:	d008      	beq.n	8005352 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	015a      	lsls	r2, r3, #5
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	4413      	add	r3, r2
 8005348:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534c:	461a      	mov	r2, r3
 800534e:	2320      	movs	r3, #32
 8005350:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	4619      	mov	r1, r3
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f006 fa0f 	bl	800b77c <HAL_PCD_DataOutStageCallback>
 800535e:	e01d      	b.n	800539c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d114      	bne.n	8005390 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005366:	6879      	ldr	r1, [r7, #4]
 8005368:	683a      	ldr	r2, [r7, #0]
 800536a:	4613      	mov	r3, r2
 800536c:	00db      	lsls	r3, r3, #3
 800536e:	4413      	add	r3, r2
 8005370:	009b      	lsls	r3, r3, #2
 8005372:	440b      	add	r3, r1
 8005374:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d108      	bne.n	8005390 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	6818      	ldr	r0, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005388:	461a      	mov	r2, r3
 800538a:	2100      	movs	r1, #0
 800538c:	f003 ff8e 	bl	80092ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	b2db      	uxtb	r3, r3
 8005394:	4619      	mov	r1, r3
 8005396:	6878      	ldr	r0, [r7, #4]
 8005398:	f006 f9f0 	bl	800b77c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800539c:	2300      	movs	r3, #0
}
 800539e:	4618      	mov	r0, r3
 80053a0:	3720      	adds	r7, #32
 80053a2:	46bd      	mov	sp, r7
 80053a4:	bd80      	pop	{r7, pc}
 80053a6:	bf00      	nop
 80053a8:	4f54300a 	.word	0x4f54300a
 80053ac:	4f54310a 	.word	0x4f54310a

080053b0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	333c      	adds	r3, #60	@ 0x3c
 80053c8:	3304      	adds	r3, #4
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	693b      	ldr	r3, [r7, #16]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a15      	ldr	r2, [pc, #84]	@ (8005438 <PCD_EP_OutSetupPacket_int+0x88>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d90e      	bls.n	8005404 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d009      	beq.n	8005404 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	015a      	lsls	r2, r3, #5
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	4413      	add	r3, r2
 80053f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053fc:	461a      	mov	r2, r3
 80053fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005402:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f006 f9a7 	bl	800b758 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	4a0a      	ldr	r2, [pc, #40]	@ (8005438 <PCD_EP_OutSetupPacket_int+0x88>)
 800540e:	4293      	cmp	r3, r2
 8005410:	d90c      	bls.n	800542c <PCD_EP_OutSetupPacket_int+0x7c>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	799b      	ldrb	r3, [r3, #6]
 8005416:	2b01      	cmp	r3, #1
 8005418:	d108      	bne.n	800542c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6818      	ldr	r0, [r3, #0]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005424:	461a      	mov	r2, r3
 8005426:	2101      	movs	r1, #1
 8005428:	f003 ff40 	bl	80092ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
 8005436:	bf00      	nop
 8005438:	4f54300a 	.word	0x4f54300a

0800543c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
 8005444:	460b      	mov	r3, r1
 8005446:	70fb      	strb	r3, [r7, #3]
 8005448:	4613      	mov	r3, r2
 800544a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005452:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005454:	78fb      	ldrb	r3, [r7, #3]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d107      	bne.n	800546a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800545a:	883b      	ldrh	r3, [r7, #0]
 800545c:	0419      	lsls	r1, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	430a      	orrs	r2, r1
 8005466:	629a      	str	r2, [r3, #40]	@ 0x28
 8005468:	e028      	b.n	80054bc <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005470:	0c1b      	lsrs	r3, r3, #16
 8005472:	68ba      	ldr	r2, [r7, #8]
 8005474:	4413      	add	r3, r2
 8005476:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005478:	2300      	movs	r3, #0
 800547a:	73fb      	strb	r3, [r7, #15]
 800547c:	e00d      	b.n	800549a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681a      	ldr	r2, [r3, #0]
 8005482:	7bfb      	ldrb	r3, [r7, #15]
 8005484:	3340      	adds	r3, #64	@ 0x40
 8005486:	009b      	lsls	r3, r3, #2
 8005488:	4413      	add	r3, r2
 800548a:	685b      	ldr	r3, [r3, #4]
 800548c:	0c1b      	lsrs	r3, r3, #16
 800548e:	68ba      	ldr	r2, [r7, #8]
 8005490:	4413      	add	r3, r2
 8005492:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005494:	7bfb      	ldrb	r3, [r7, #15]
 8005496:	3301      	adds	r3, #1
 8005498:	73fb      	strb	r3, [r7, #15]
 800549a:	7bfa      	ldrb	r2, [r7, #15]
 800549c:	78fb      	ldrb	r3, [r7, #3]
 800549e:	3b01      	subs	r3, #1
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d3ec      	bcc.n	800547e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80054a4:	883b      	ldrh	r3, [r7, #0]
 80054a6:	0418      	lsls	r0, r3, #16
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6819      	ldr	r1, [r3, #0]
 80054ac:	78fb      	ldrb	r3, [r7, #3]
 80054ae:	3b01      	subs	r3, #1
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	4302      	orrs	r2, r0
 80054b4:	3340      	adds	r3, #64	@ 0x40
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80054bc:	2300      	movs	r3, #0
}
 80054be:	4618      	mov	r0, r3
 80054c0:	3714      	adds	r7, #20
 80054c2:	46bd      	mov	sp, r7
 80054c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c8:	4770      	bx	lr

080054ca <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80054ca:	b480      	push	{r7}
 80054cc:	b083      	sub	sp, #12
 80054ce:	af00      	add	r7, sp, #0
 80054d0:	6078      	str	r0, [r7, #4]
 80054d2:	460b      	mov	r3, r1
 80054d4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80054de:	2300      	movs	r3, #0
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	370c      	adds	r7, #12
 80054e4:	46bd      	mov	sp, r7
 80054e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ea:	4770      	bx	lr

080054ec <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80054f8:	bf00      	nop
 80054fa:	370c      	adds	r7, #12
 80054fc:	46bd      	mov	sp, r7
 80054fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005502:	4770      	bx	lr

08005504 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b086      	sub	sp, #24
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e267      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b00      	cmp	r3, #0
 8005520:	d075      	beq.n	800560e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005522:	4b88      	ldr	r3, [pc, #544]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 030c 	and.w	r3, r3, #12
 800552a:	2b04      	cmp	r3, #4
 800552c:	d00c      	beq.n	8005548 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800552e:	4b85      	ldr	r3, [pc, #532]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005536:	2b08      	cmp	r3, #8
 8005538:	d112      	bne.n	8005560 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800553a:	4b82      	ldr	r3, [pc, #520]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800553c:	685b      	ldr	r3, [r3, #4]
 800553e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005542:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005546:	d10b      	bne.n	8005560 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005548:	4b7e      	ldr	r3, [pc, #504]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005550:	2b00      	cmp	r3, #0
 8005552:	d05b      	beq.n	800560c <HAL_RCC_OscConfig+0x108>
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d157      	bne.n	800560c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e242      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005568:	d106      	bne.n	8005578 <HAL_RCC_OscConfig+0x74>
 800556a:	4b76      	ldr	r3, [pc, #472]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	4a75      	ldr	r2, [pc, #468]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005570:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005574:	6013      	str	r3, [r2, #0]
 8005576:	e01d      	b.n	80055b4 <HAL_RCC_OscConfig+0xb0>
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005580:	d10c      	bne.n	800559c <HAL_RCC_OscConfig+0x98>
 8005582:	4b70      	ldr	r3, [pc, #448]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	4a6f      	ldr	r2, [pc, #444]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005588:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	4b6d      	ldr	r3, [pc, #436]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	4a6c      	ldr	r2, [pc, #432]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005594:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005598:	6013      	str	r3, [r2, #0]
 800559a:	e00b      	b.n	80055b4 <HAL_RCC_OscConfig+0xb0>
 800559c:	4b69      	ldr	r3, [pc, #420]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	4a68      	ldr	r2, [pc, #416]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80055a6:	6013      	str	r3, [r2, #0]
 80055a8:	4b66      	ldr	r3, [pc, #408]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a65      	ldr	r2, [pc, #404]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055ae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80055b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d013      	beq.n	80055e4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055bc:	f7fd fede 	bl	800337c <HAL_GetTick>
 80055c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055c4:	f7fd feda 	bl	800337c <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b64      	cmp	r3, #100	@ 0x64
 80055d0:	d901      	bls.n	80055d6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e207      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055d6:	4b5b      	ldr	r3, [pc, #364]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d0f0      	beq.n	80055c4 <HAL_RCC_OscConfig+0xc0>
 80055e2:	e014      	b.n	800560e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055e4:	f7fd feca 	bl	800337c <HAL_GetTick>
 80055e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055ea:	e008      	b.n	80055fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055ec:	f7fd fec6 	bl	800337c <HAL_GetTick>
 80055f0:	4602      	mov	r2, r0
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	1ad3      	subs	r3, r2, r3
 80055f6:	2b64      	cmp	r3, #100	@ 0x64
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e1f3      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055fe:	4b51      	ldr	r3, [pc, #324]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1f0      	bne.n	80055ec <HAL_RCC_OscConfig+0xe8>
 800560a:	e000      	b.n	800560e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800560c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d063      	beq.n	80056e2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800561a:	4b4a      	ldr	r3, [pc, #296]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f003 030c 	and.w	r3, r3, #12
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005626:	4b47      	ldr	r3, [pc, #284]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800562e:	2b08      	cmp	r3, #8
 8005630:	d11c      	bne.n	800566c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005632:	4b44      	ldr	r3, [pc, #272]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d116      	bne.n	800566c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800563e:	4b41      	ldr	r3, [pc, #260]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f003 0302 	and.w	r3, r3, #2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d005      	beq.n	8005656 <HAL_RCC_OscConfig+0x152>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68db      	ldr	r3, [r3, #12]
 800564e:	2b01      	cmp	r3, #1
 8005650:	d001      	beq.n	8005656 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005652:	2301      	movs	r3, #1
 8005654:	e1c7      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005656:	4b3b      	ldr	r3, [pc, #236]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	00db      	lsls	r3, r3, #3
 8005664:	4937      	ldr	r1, [pc, #220]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005666:	4313      	orrs	r3, r2
 8005668:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800566a:	e03a      	b.n	80056e2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	2b00      	cmp	r3, #0
 8005672:	d020      	beq.n	80056b6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005674:	4b34      	ldr	r3, [pc, #208]	@ (8005748 <HAL_RCC_OscConfig+0x244>)
 8005676:	2201      	movs	r2, #1
 8005678:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800567a:	f7fd fe7f 	bl	800337c <HAL_GetTick>
 800567e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005680:	e008      	b.n	8005694 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005682:	f7fd fe7b 	bl	800337c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	2b02      	cmp	r3, #2
 800568e:	d901      	bls.n	8005694 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e1a8      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005694:	4b2b      	ldr	r3, [pc, #172]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f003 0302 	and.w	r3, r3, #2
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0f0      	beq.n	8005682 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80056a0:	4b28      	ldr	r3, [pc, #160]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	691b      	ldr	r3, [r3, #16]
 80056ac:	00db      	lsls	r3, r3, #3
 80056ae:	4925      	ldr	r1, [pc, #148]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056b0:	4313      	orrs	r3, r2
 80056b2:	600b      	str	r3, [r1, #0]
 80056b4:	e015      	b.n	80056e2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b6:	4b24      	ldr	r3, [pc, #144]	@ (8005748 <HAL_RCC_OscConfig+0x244>)
 80056b8:	2200      	movs	r2, #0
 80056ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd fe5e 	bl	800337c <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c4:	f7fd fe5a 	bl	800337c <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e187      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80056d6:	4b1b      	ldr	r3, [pc, #108]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0302 	and.w	r3, r3, #2
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f003 0308 	and.w	r3, r3, #8
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d036      	beq.n	800575c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d016      	beq.n	8005724 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056f6:	4b15      	ldr	r3, [pc, #84]	@ (800574c <HAL_RCC_OscConfig+0x248>)
 80056f8:	2201      	movs	r2, #1
 80056fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fc:	f7fd fe3e 	bl	800337c <HAL_GetTick>
 8005700:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005702:	e008      	b.n	8005716 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005704:	f7fd fe3a 	bl	800337c <HAL_GetTick>
 8005708:	4602      	mov	r2, r0
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	1ad3      	subs	r3, r2, r3
 800570e:	2b02      	cmp	r3, #2
 8005710:	d901      	bls.n	8005716 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005712:	2303      	movs	r3, #3
 8005714:	e167      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005716:	4b0b      	ldr	r3, [pc, #44]	@ (8005744 <HAL_RCC_OscConfig+0x240>)
 8005718:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800571a:	f003 0302 	and.w	r3, r3, #2
 800571e:	2b00      	cmp	r3, #0
 8005720:	d0f0      	beq.n	8005704 <HAL_RCC_OscConfig+0x200>
 8005722:	e01b      	b.n	800575c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005724:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCC_OscConfig+0x248>)
 8005726:	2200      	movs	r2, #0
 8005728:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800572a:	f7fd fe27 	bl	800337c <HAL_GetTick>
 800572e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005730:	e00e      	b.n	8005750 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005732:	f7fd fe23 	bl	800337c <HAL_GetTick>
 8005736:	4602      	mov	r2, r0
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	1ad3      	subs	r3, r2, r3
 800573c:	2b02      	cmp	r3, #2
 800573e:	d907      	bls.n	8005750 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005740:	2303      	movs	r3, #3
 8005742:	e150      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
 8005744:	40023800 	.word	0x40023800
 8005748:	42470000 	.word	0x42470000
 800574c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005750:	4b88      	ldr	r3, [pc, #544]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005752:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005754:	f003 0302 	and.w	r3, r3, #2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ea      	bne.n	8005732 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	2b00      	cmp	r3, #0
 8005766:	f000 8097 	beq.w	8005898 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800576a:	2300      	movs	r3, #0
 800576c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800576e:	4b81      	ldr	r3, [pc, #516]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005770:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005772:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d10f      	bne.n	800579a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800577a:	2300      	movs	r3, #0
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	4b7d      	ldr	r3, [pc, #500]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005780:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005782:	4a7c      	ldr	r2, [pc, #496]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005784:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005788:	6413      	str	r3, [r2, #64]	@ 0x40
 800578a:	4b7a      	ldr	r3, [pc, #488]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800578c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005792:	60bb      	str	r3, [r7, #8]
 8005794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005796:	2301      	movs	r3, #1
 8005798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800579a:	4b77      	ldr	r3, [pc, #476]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d118      	bne.n	80057d8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80057a6:	4b74      	ldr	r3, [pc, #464]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a73      	ldr	r2, [pc, #460]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80057b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057b2:	f7fd fde3 	bl	800337c <HAL_GetTick>
 80057b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057b8:	e008      	b.n	80057cc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057ba:	f7fd fddf 	bl	800337c <HAL_GetTick>
 80057be:	4602      	mov	r2, r0
 80057c0:	693b      	ldr	r3, [r7, #16]
 80057c2:	1ad3      	subs	r3, r2, r3
 80057c4:	2b02      	cmp	r3, #2
 80057c6:	d901      	bls.n	80057cc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80057c8:	2303      	movs	r3, #3
 80057ca:	e10c      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80057cc:	4b6a      	ldr	r3, [pc, #424]	@ (8005978 <HAL_RCC_OscConfig+0x474>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d0f0      	beq.n	80057ba <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	2b01      	cmp	r3, #1
 80057de:	d106      	bne.n	80057ee <HAL_RCC_OscConfig+0x2ea>
 80057e0:	4b64      	ldr	r3, [pc, #400]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057e4:	4a63      	ldr	r2, [pc, #396]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	6713      	str	r3, [r2, #112]	@ 0x70
 80057ec:	e01c      	b.n	8005828 <HAL_RCC_OscConfig+0x324>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b05      	cmp	r3, #5
 80057f4:	d10c      	bne.n	8005810 <HAL_RCC_OscConfig+0x30c>
 80057f6:	4b5f      	ldr	r3, [pc, #380]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fa:	4a5e      	ldr	r2, [pc, #376]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80057fc:	f043 0304 	orr.w	r3, r3, #4
 8005800:	6713      	str	r3, [r2, #112]	@ 0x70
 8005802:	4b5c      	ldr	r3, [pc, #368]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005804:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005806:	4a5b      	ldr	r2, [pc, #364]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	6713      	str	r3, [r2, #112]	@ 0x70
 800580e:	e00b      	b.n	8005828 <HAL_RCC_OscConfig+0x324>
 8005810:	4b58      	ldr	r3, [pc, #352]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005812:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005814:	4a57      	ldr	r2, [pc, #348]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005816:	f023 0301 	bic.w	r3, r3, #1
 800581a:	6713      	str	r3, [r2, #112]	@ 0x70
 800581c:	4b55      	ldr	r3, [pc, #340]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800581e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005820:	4a54      	ldr	r2, [pc, #336]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005822:	f023 0304 	bic.w	r3, r3, #4
 8005826:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	2b00      	cmp	r3, #0
 800582e:	d015      	beq.n	800585c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005830:	f7fd fda4 	bl	800337c <HAL_GetTick>
 8005834:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005836:	e00a      	b.n	800584e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005838:	f7fd fda0 	bl	800337c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005846:	4293      	cmp	r3, r2
 8005848:	d901      	bls.n	800584e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e0cb      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800584e:	4b49      	ldr	r3, [pc, #292]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005850:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d0ee      	beq.n	8005838 <HAL_RCC_OscConfig+0x334>
 800585a:	e014      	b.n	8005886 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800585c:	f7fd fd8e 	bl	800337c <HAL_GetTick>
 8005860:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005862:	e00a      	b.n	800587a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005864:	f7fd fd8a 	bl	800337c <HAL_GetTick>
 8005868:	4602      	mov	r2, r0
 800586a:	693b      	ldr	r3, [r7, #16]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005872:	4293      	cmp	r3, r2
 8005874:	d901      	bls.n	800587a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005876:	2303      	movs	r3, #3
 8005878:	e0b5      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800587a:	4b3e      	ldr	r3, [pc, #248]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800587c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800587e:	f003 0302 	and.w	r3, r3, #2
 8005882:	2b00      	cmp	r3, #0
 8005884:	d1ee      	bne.n	8005864 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005886:	7dfb      	ldrb	r3, [r7, #23]
 8005888:	2b01      	cmp	r3, #1
 800588a:	d105      	bne.n	8005898 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800588c:	4b39      	ldr	r3, [pc, #228]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	4a38      	ldr	r2, [pc, #224]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005892:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005896:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	699b      	ldr	r3, [r3, #24]
 800589c:	2b00      	cmp	r3, #0
 800589e:	f000 80a1 	beq.w	80059e4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80058a2:	4b34      	ldr	r3, [pc, #208]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80058a4:	689b      	ldr	r3, [r3, #8]
 80058a6:	f003 030c 	and.w	r3, r3, #12
 80058aa:	2b08      	cmp	r3, #8
 80058ac:	d05c      	beq.n	8005968 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	699b      	ldr	r3, [r3, #24]
 80058b2:	2b02      	cmp	r3, #2
 80058b4:	d141      	bne.n	800593a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058b6:	4b31      	ldr	r3, [pc, #196]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058bc:	f7fd fd5e 	bl	800337c <HAL_GetTick>
 80058c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058c2:	e008      	b.n	80058d6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058c4:	f7fd fd5a 	bl	800337c <HAL_GetTick>
 80058c8:	4602      	mov	r2, r0
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	1ad3      	subs	r3, r2, r3
 80058ce:	2b02      	cmp	r3, #2
 80058d0:	d901      	bls.n	80058d6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e087      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058d6:	4b27      	ldr	r3, [pc, #156]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d1f0      	bne.n	80058c4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	69da      	ldr	r2, [r3, #28]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	431a      	orrs	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f0:	019b      	lsls	r3, r3, #6
 80058f2:	431a      	orrs	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058f8:	085b      	lsrs	r3, r3, #1
 80058fa:	3b01      	subs	r3, #1
 80058fc:	041b      	lsls	r3, r3, #16
 80058fe:	431a      	orrs	r2, r3
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005904:	061b      	lsls	r3, r3, #24
 8005906:	491b      	ldr	r1, [pc, #108]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 8005908:	4313      	orrs	r3, r2
 800590a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800590c:	4b1b      	ldr	r3, [pc, #108]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 800590e:	2201      	movs	r2, #1
 8005910:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005912:	f7fd fd33 	bl	800337c <HAL_GetTick>
 8005916:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005918:	e008      	b.n	800592c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800591a:	f7fd fd2f 	bl	800337c <HAL_GetTick>
 800591e:	4602      	mov	r2, r0
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	1ad3      	subs	r3, r2, r3
 8005924:	2b02      	cmp	r3, #2
 8005926:	d901      	bls.n	800592c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005928:	2303      	movs	r3, #3
 800592a:	e05c      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592c:	4b11      	ldr	r3, [pc, #68]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005934:	2b00      	cmp	r3, #0
 8005936:	d0f0      	beq.n	800591a <HAL_RCC_OscConfig+0x416>
 8005938:	e054      	b.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800593a:	4b10      	ldr	r3, [pc, #64]	@ (800597c <HAL_RCC_OscConfig+0x478>)
 800593c:	2200      	movs	r2, #0
 800593e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005940:	f7fd fd1c 	bl	800337c <HAL_GetTick>
 8005944:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005946:	e008      	b.n	800595a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005948:	f7fd fd18 	bl	800337c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	2b02      	cmp	r3, #2
 8005954:	d901      	bls.n	800595a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005956:	2303      	movs	r3, #3
 8005958:	e045      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800595a:	4b06      	ldr	r3, [pc, #24]	@ (8005974 <HAL_RCC_OscConfig+0x470>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1f0      	bne.n	8005948 <HAL_RCC_OscConfig+0x444>
 8005966:	e03d      	b.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	2b01      	cmp	r3, #1
 800596e:	d107      	bne.n	8005980 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005970:	2301      	movs	r3, #1
 8005972:	e038      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
 8005974:	40023800 	.word	0x40023800
 8005978:	40007000 	.word	0x40007000
 800597c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005980:	4b1b      	ldr	r3, [pc, #108]	@ (80059f0 <HAL_RCC_OscConfig+0x4ec>)
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	699b      	ldr	r3, [r3, #24]
 800598a:	2b01      	cmp	r3, #1
 800598c:	d028      	beq.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005998:	429a      	cmp	r2, r3
 800599a:	d121      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d11a      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059aa:	68fa      	ldr	r2, [r7, #12]
 80059ac:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80059b0:	4013      	ands	r3, r2
 80059b2:	687a      	ldr	r2, [r7, #4]
 80059b4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80059b6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80059b8:	4293      	cmp	r3, r2
 80059ba:	d111      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059c6:	085b      	lsrs	r3, r3, #1
 80059c8:	3b01      	subs	r3, #1
 80059ca:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d107      	bne.n	80059e0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80059da:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80059dc:	429a      	cmp	r2, r3
 80059de:	d001      	beq.n	80059e4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e000      	b.n	80059e6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3718      	adds	r7, #24
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}
 80059ee:	bf00      	nop
 80059f0:	40023800 	.word	0x40023800

080059f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	6078      	str	r0, [r7, #4]
 80059fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	e0cc      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a08:	4b68      	ldr	r3, [pc, #416]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d90c      	bls.n	8005a30 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a16:	4b65      	ldr	r3, [pc, #404]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	b2d2      	uxtb	r2, r2
 8005a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a1e:	4b63      	ldr	r3, [pc, #396]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 0307 	and.w	r3, r3, #7
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d001      	beq.n	8005a30 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e0b8      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d020      	beq.n	8005a7e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f003 0304 	and.w	r3, r3, #4
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d005      	beq.n	8005a54 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a48:	4b59      	ldr	r3, [pc, #356]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4a:	689b      	ldr	r3, [r3, #8]
 8005a4c:	4a58      	ldr	r2, [pc, #352]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a4e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005a52:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f003 0308 	and.w	r3, r3, #8
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d005      	beq.n	8005a6c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a60:	4b53      	ldr	r3, [pc, #332]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	4a52      	ldr	r2, [pc, #328]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a66:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8005a6a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a6c:	4b50      	ldr	r3, [pc, #320]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	494d      	ldr	r1, [pc, #308]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a7a:	4313      	orrs	r3, r2
 8005a7c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f003 0301 	and.w	r3, r3, #1
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d044      	beq.n	8005b14 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	2b01      	cmp	r3, #1
 8005a90:	d107      	bne.n	8005aa2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a92:	4b47      	ldr	r3, [pc, #284]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d119      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	e07f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	685b      	ldr	r3, [r3, #4]
 8005aa6:	2b02      	cmp	r3, #2
 8005aa8:	d003      	beq.n	8005ab2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005aae:	2b03      	cmp	r3, #3
 8005ab0:	d107      	bne.n	8005ac2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005ab2:	4b3f      	ldr	r3, [pc, #252]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d109      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e06f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ac2:	4b3b      	ldr	r3, [pc, #236]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f003 0302 	and.w	r3, r3, #2
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d101      	bne.n	8005ad2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ace:	2301      	movs	r3, #1
 8005ad0:	e067      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005ad2:	4b37      	ldr	r3, [pc, #220]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	f023 0203 	bic.w	r2, r3, #3
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	4934      	ldr	r1, [pc, #208]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005ae4:	f7fd fc4a 	bl	800337c <HAL_GetTick>
 8005ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aea:	e00a      	b.n	8005b02 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005aec:	f7fd fc46 	bl	800337c <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005afa:	4293      	cmp	r3, r2
 8005afc:	d901      	bls.n	8005b02 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005afe:	2303      	movs	r3, #3
 8005b00:	e04f      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b02:	4b2b      	ldr	r3, [pc, #172]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b04:	689b      	ldr	r3, [r3, #8]
 8005b06:	f003 020c 	and.w	r2, r3, #12
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	009b      	lsls	r3, r3, #2
 8005b10:	429a      	cmp	r2, r3
 8005b12:	d1eb      	bne.n	8005aec <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b14:	4b25      	ldr	r3, [pc, #148]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f003 0307 	and.w	r3, r3, #7
 8005b1c:	683a      	ldr	r2, [r7, #0]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d20c      	bcs.n	8005b3c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b22:	4b22      	ldr	r3, [pc, #136]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b24:	683a      	ldr	r2, [r7, #0]
 8005b26:	b2d2      	uxtb	r2, r2
 8005b28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b2a:	4b20      	ldr	r3, [pc, #128]	@ (8005bac <HAL_RCC_ClockConfig+0x1b8>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f003 0307 	and.w	r3, r3, #7
 8005b32:	683a      	ldr	r2, [r7, #0]
 8005b34:	429a      	cmp	r2, r3
 8005b36:	d001      	beq.n	8005b3c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e032      	b.n	8005ba2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	f003 0304 	and.w	r3, r3, #4
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d008      	beq.n	8005b5a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b48:	4b19      	ldr	r3, [pc, #100]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b4a:	689b      	ldr	r3, [r3, #8]
 8005b4c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	4916      	ldr	r1, [pc, #88]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b56:	4313      	orrs	r3, r2
 8005b58:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d009      	beq.n	8005b7a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b66:	4b12      	ldr	r3, [pc, #72]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	490e      	ldr	r1, [pc, #56]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b76:	4313      	orrs	r3, r2
 8005b78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005b7a:	f000 f821 	bl	8005bc0 <HAL_RCC_GetSysClockFreq>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	4b0b      	ldr	r3, [pc, #44]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1bc>)
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	091b      	lsrs	r3, r3, #4
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	490a      	ldr	r1, [pc, #40]	@ (8005bb4 <HAL_RCC_ClockConfig+0x1c0>)
 8005b8c:	5ccb      	ldrb	r3, [r1, r3]
 8005b8e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b92:	4a09      	ldr	r2, [pc, #36]	@ (8005bb8 <HAL_RCC_ClockConfig+0x1c4>)
 8005b94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005b96:	4b09      	ldr	r3, [pc, #36]	@ (8005bbc <HAL_RCC_ClockConfig+0x1c8>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7fd fbaa 	bl	80032f4 <HAL_InitTick>

  return HAL_OK;
 8005ba0:	2300      	movs	r3, #0
}
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	40023c00 	.word	0x40023c00
 8005bb0:	40023800 	.word	0x40023800
 8005bb4:	0800c26c 	.word	0x0800c26c
 8005bb8:	20000000 	.word	0x20000000
 8005bbc:	20000040 	.word	0x20000040

08005bc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bc4:	b090      	sub	sp, #64	@ 0x40
 8005bc6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005bcc:	2300      	movs	r3, #0
 8005bce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005bd8:	4b59      	ldr	r3, [pc, #356]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	f003 030c 	and.w	r3, r3, #12
 8005be0:	2b08      	cmp	r3, #8
 8005be2:	d00d      	beq.n	8005c00 <HAL_RCC_GetSysClockFreq+0x40>
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	f200 80a1 	bhi.w	8005d2c <HAL_RCC_GetSysClockFreq+0x16c>
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d002      	beq.n	8005bf4 <HAL_RCC_GetSysClockFreq+0x34>
 8005bee:	2b04      	cmp	r3, #4
 8005bf0:	d003      	beq.n	8005bfa <HAL_RCC_GetSysClockFreq+0x3a>
 8005bf2:	e09b      	b.n	8005d2c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005bf4:	4b53      	ldr	r3, [pc, #332]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8005bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bf8:	e09b      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005bfa:	4b53      	ldr	r3, [pc, #332]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8005bfc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005bfe:	e098      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c00:	4b4f      	ldr	r3, [pc, #316]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c08:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c0a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0c:	685b      	ldr	r3, [r3, #4]
 8005c0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d028      	beq.n	8005c68 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c16:	4b4a      	ldr	r3, [pc, #296]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	099b      	lsrs	r3, r3, #6
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	623b      	str	r3, [r7, #32]
 8005c20:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c22:	6a3b      	ldr	r3, [r7, #32]
 8005c24:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c28:	2100      	movs	r1, #0
 8005c2a:	4b47      	ldr	r3, [pc, #284]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c2c:	fb03 f201 	mul.w	r2, r3, r1
 8005c30:	2300      	movs	r3, #0
 8005c32:	fb00 f303 	mul.w	r3, r0, r3
 8005c36:	4413      	add	r3, r2
 8005c38:	4a43      	ldr	r2, [pc, #268]	@ (8005d48 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c3a:	fba0 1202 	umull	r1, r2, r0, r2
 8005c3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c40:	460a      	mov	r2, r1
 8005c42:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c46:	4413      	add	r3, r2
 8005c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	61bb      	str	r3, [r7, #24]
 8005c50:	61fa      	str	r2, [r7, #28]
 8005c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c56:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c5a:	f7fa fabb 	bl	80001d4 <__aeabi_uldivmod>
 8005c5e:	4602      	mov	r2, r0
 8005c60:	460b      	mov	r3, r1
 8005c62:	4613      	mov	r3, r2
 8005c64:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c66:	e053      	b.n	8005d10 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c68:	4b35      	ldr	r3, [pc, #212]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c6a:	685b      	ldr	r3, [r3, #4]
 8005c6c:	099b      	lsrs	r3, r3, #6
 8005c6e:	2200      	movs	r2, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	617a      	str	r2, [r7, #20]
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005c7a:	f04f 0b00 	mov.w	fp, #0
 8005c7e:	4652      	mov	r2, sl
 8005c80:	465b      	mov	r3, fp
 8005c82:	f04f 0000 	mov.w	r0, #0
 8005c86:	f04f 0100 	mov.w	r1, #0
 8005c8a:	0159      	lsls	r1, r3, #5
 8005c8c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005c90:	0150      	lsls	r0, r2, #5
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	ebb2 080a 	subs.w	r8, r2, sl
 8005c9a:	eb63 090b 	sbc.w	r9, r3, fp
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005caa:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cae:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005cb2:	ebb2 0408 	subs.w	r4, r2, r8
 8005cb6:	eb63 0509 	sbc.w	r5, r3, r9
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	00eb      	lsls	r3, r5, #3
 8005cc4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cc8:	00e2      	lsls	r2, r4, #3
 8005cca:	4614      	mov	r4, r2
 8005ccc:	461d      	mov	r5, r3
 8005cce:	eb14 030a 	adds.w	r3, r4, sl
 8005cd2:	603b      	str	r3, [r7, #0]
 8005cd4:	eb45 030b 	adc.w	r3, r5, fp
 8005cd8:	607b      	str	r3, [r7, #4]
 8005cda:	f04f 0200 	mov.w	r2, #0
 8005cde:	f04f 0300 	mov.w	r3, #0
 8005ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005ce6:	4629      	mov	r1, r5
 8005ce8:	028b      	lsls	r3, r1, #10
 8005cea:	4621      	mov	r1, r4
 8005cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005cf0:	4621      	mov	r1, r4
 8005cf2:	028a      	lsls	r2, r1, #10
 8005cf4:	4610      	mov	r0, r2
 8005cf6:	4619      	mov	r1, r3
 8005cf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	60bb      	str	r3, [r7, #8]
 8005cfe:	60fa      	str	r2, [r7, #12]
 8005d00:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d04:	f7fa fa66 	bl	80001d4 <__aeabi_uldivmod>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d10:	4b0b      	ldr	r3, [pc, #44]	@ (8005d40 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d12:	685b      	ldr	r3, [r3, #4]
 8005d14:	0c1b      	lsrs	r3, r3, #16
 8005d16:	f003 0303 	and.w	r3, r3, #3
 8005d1a:	3301      	adds	r3, #1
 8005d1c:	005b      	lsls	r3, r3, #1
 8005d1e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d20:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d28:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d2a:	e002      	b.n	8005d32 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d2c:	4b05      	ldr	r3, [pc, #20]	@ (8005d44 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d34:	4618      	mov	r0, r3
 8005d36:	3740      	adds	r7, #64	@ 0x40
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d3e:	bf00      	nop
 8005d40:	40023800 	.word	0x40023800
 8005d44:	00f42400 	.word	0x00f42400
 8005d48:	017d7840 	.word	0x017d7840

08005d4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d50:	4b03      	ldr	r3, [pc, #12]	@ (8005d60 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d52:	681b      	ldr	r3, [r3, #0]
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	20000000 	.word	0x20000000

08005d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d101      	bne.n	8005d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d72:	2301      	movs	r3, #1
 8005d74:	e07b      	b.n	8005e6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d108      	bne.n	8005d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d86:	d009      	beq.n	8005d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	61da      	str	r2, [r3, #28]
 8005d8e:	e005      	b.n	8005d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2200      	movs	r2, #0
 8005da0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005da8:	b2db      	uxtb	r3, r3
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d106      	bne.n	8005dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2200      	movs	r2, #0
 8005db2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005db6:	6878      	ldr	r0, [r7, #4]
 8005db8:	f7fb f930 	bl	800101c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2202      	movs	r2, #2
 8005dc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	681a      	ldr	r2, [r3, #0]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	689b      	ldr	r3, [r3, #8]
 8005de0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005de4:	431a      	orrs	r2, r3
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	68db      	ldr	r3, [r3, #12]
 8005dea:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dee:	431a      	orrs	r2, r3
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	691b      	ldr	r3, [r3, #16]
 8005df4:	f003 0302 	and.w	r3, r3, #2
 8005df8:	431a      	orrs	r2, r3
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	695b      	ldr	r3, [r3, #20]
 8005dfe:	f003 0301 	and.w	r3, r3, #1
 8005e02:	431a      	orrs	r2, r3
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	699b      	ldr	r3, [r3, #24]
 8005e08:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e0c:	431a      	orrs	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e16:	431a      	orrs	r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6a1b      	ldr	r3, [r3, #32]
 8005e1c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e20:	ea42 0103 	orr.w	r1, r2, r3
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e28:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	430a      	orrs	r2, r1
 8005e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	699b      	ldr	r3, [r3, #24]
 8005e38:	0c1b      	lsrs	r3, r3, #16
 8005e3a:	f003 0104 	and.w	r1, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e42:	f003 0210 	and.w	r2, r3, #16
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	430a      	orrs	r2, r1
 8005e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	69da      	ldr	r2, [r3, #28]
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	2200      	movs	r2, #0
 8005e62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3708      	adds	r7, #8
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}

08005e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b088      	sub	sp, #32
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	60f8      	str	r0, [r7, #12]
 8005e7e:	60b9      	str	r1, [r7, #8]
 8005e80:	603b      	str	r3, [r7, #0]
 8005e82:	4613      	mov	r3, r2
 8005e84:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005e86:	f7fd fa79 	bl	800337c <HAL_GetTick>
 8005e8a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005e8c:	88fb      	ldrh	r3, [r7, #6]
 8005e8e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	2b01      	cmp	r3, #1
 8005e9a:	d001      	beq.n	8005ea0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005e9c:	2302      	movs	r3, #2
 8005e9e:	e12a      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d002      	beq.n	8005eac <HAL_SPI_Transmit+0x36>
 8005ea6:	88fb      	ldrh	r3, [r7, #6]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005eac:	2301      	movs	r3, #1
 8005eae:	e122      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eb6:	2b01      	cmp	r3, #1
 8005eb8:	d101      	bne.n	8005ebe <HAL_SPI_Transmit+0x48>
 8005eba:	2302      	movs	r3, #2
 8005ebc:	e11b      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	2203      	movs	r2, #3
 8005eca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	68ba      	ldr	r2, [r7, #8]
 8005ed8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	88fa      	ldrh	r2, [r7, #6]
 8005ede:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	88fa      	ldrh	r2, [r7, #6]
 8005ee4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	2200      	movs	r2, #0
 8005ef0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2200      	movs	r2, #0
 8005ef6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2200      	movs	r2, #0
 8005efc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	2200      	movs	r2, #0
 8005f02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f0c:	d10f      	bne.n	8005f2e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f1c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f2c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f38:	2b40      	cmp	r3, #64	@ 0x40
 8005f3a:	d007      	beq.n	8005f4c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	681a      	ldr	r2, [r3, #0]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f4a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f54:	d152      	bne.n	8005ffc <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	685b      	ldr	r3, [r3, #4]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d002      	beq.n	8005f64 <HAL_SPI_Transmit+0xee>
 8005f5e:	8b7b      	ldrh	r3, [r7, #26]
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d145      	bne.n	8005ff0 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f68:	881a      	ldrh	r2, [r3, #0]
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f74:	1c9a      	adds	r2, r3, #2
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7e:	b29b      	uxth	r3, r3
 8005f80:	3b01      	subs	r3, #1
 8005f82:	b29a      	uxth	r2, r3
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005f88:	e032      	b.n	8005ff0 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	f003 0302 	and.w	r3, r3, #2
 8005f94:	2b02      	cmp	r3, #2
 8005f96:	d112      	bne.n	8005fbe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f9c:	881a      	ldrh	r2, [r3, #0]
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa8:	1c9a      	adds	r2, r3, #2
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fb2:	b29b      	uxth	r3, r3
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	b29a      	uxth	r2, r3
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fbc:	e018      	b.n	8005ff0 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fbe:	f7fd f9dd 	bl	800337c <HAL_GetTick>
 8005fc2:	4602      	mov	r2, r0
 8005fc4:	69fb      	ldr	r3, [r7, #28]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	683a      	ldr	r2, [r7, #0]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d803      	bhi.n	8005fd6 <HAL_SPI_Transmit+0x160>
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fd4:	d102      	bne.n	8005fdc <HAL_SPI_Transmit+0x166>
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d109      	bne.n	8005ff0 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	2201      	movs	r2, #1
 8005fe0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005fec:	2303      	movs	r3, #3
 8005fee:	e082      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff4:	b29b      	uxth	r3, r3
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1c7      	bne.n	8005f8a <HAL_SPI_Transmit+0x114>
 8005ffa:	e053      	b.n	80060a4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	685b      	ldr	r3, [r3, #4]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_SPI_Transmit+0x194>
 8006004:	8b7b      	ldrh	r3, [r7, #26]
 8006006:	2b01      	cmp	r3, #1
 8006008:	d147      	bne.n	800609a <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	330c      	adds	r3, #12
 8006014:	7812      	ldrb	r2, [r2, #0]
 8006016:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006030:	e033      	b.n	800609a <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	f003 0302 	and.w	r3, r3, #2
 800603c:	2b02      	cmp	r3, #2
 800603e:	d113      	bne.n	8006068 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	7812      	ldrb	r2, [r2, #0]
 800604c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006052:	1c5a      	adds	r2, r3, #1
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006066:	e018      	b.n	800609a <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006068:	f7fd f988 	bl	800337c <HAL_GetTick>
 800606c:	4602      	mov	r2, r0
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	1ad3      	subs	r3, r2, r3
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d803      	bhi.n	8006080 <HAL_SPI_Transmit+0x20a>
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800607e:	d102      	bne.n	8006086 <HAL_SPI_Transmit+0x210>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d109      	bne.n	800609a <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	2201      	movs	r2, #1
 800608a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	2200      	movs	r2, #0
 8006092:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006096:	2303      	movs	r3, #3
 8006098:	e02d      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609e:	b29b      	uxth	r3, r3
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d1c6      	bne.n	8006032 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a4:	69fa      	ldr	r2, [r7, #28]
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	68f8      	ldr	r0, [r7, #12]
 80060aa:	f000 fd21 	bl	8006af0 <SPI_EndRxTxTransaction>
 80060ae:	4603      	mov	r3, r0
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d002      	beq.n	80060ba <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2220      	movs	r2, #32
 80060b8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	689b      	ldr	r3, [r3, #8]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d10a      	bne.n	80060d8 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	617b      	str	r3, [r7, #20]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	617b      	str	r3, [r7, #20]
 80060d6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	2201      	movs	r2, #1
 80060dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e000      	b.n	80060f6 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80060f4:	2300      	movs	r3, #0
  }
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3720      	adds	r7, #32
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b088      	sub	sp, #32
 8006102:	af02      	add	r7, sp, #8
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	603b      	str	r3, [r7, #0]
 800610a:	4613      	mov	r3, r2
 800610c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006114:	b2db      	uxtb	r3, r3
 8006116:	2b01      	cmp	r3, #1
 8006118:	d001      	beq.n	800611e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800611a:	2302      	movs	r3, #2
 800611c:	e104      	b.n	8006328 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	685b      	ldr	r3, [r3, #4]
 8006122:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006126:	d112      	bne.n	800614e <HAL_SPI_Receive+0x50>
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	689b      	ldr	r3, [r3, #8]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10e      	bne.n	800614e <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2204      	movs	r2, #4
 8006134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006138:	88fa      	ldrh	r2, [r7, #6]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	9300      	str	r3, [sp, #0]
 800613e:	4613      	mov	r3, r2
 8006140:	68ba      	ldr	r2, [r7, #8]
 8006142:	68b9      	ldr	r1, [r7, #8]
 8006144:	68f8      	ldr	r0, [r7, #12]
 8006146:	f000 f8f3 	bl	8006330 <HAL_SPI_TransmitReceive>
 800614a:	4603      	mov	r3, r0
 800614c:	e0ec      	b.n	8006328 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800614e:	f7fd f915 	bl	800337c <HAL_GetTick>
 8006152:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d002      	beq.n	8006160 <HAL_SPI_Receive+0x62>
 800615a:	88fb      	ldrh	r3, [r7, #6]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d101      	bne.n	8006164 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006160:	2301      	movs	r3, #1
 8006162:	e0e1      	b.n	8006328 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800616a:	2b01      	cmp	r3, #1
 800616c:	d101      	bne.n	8006172 <HAL_SPI_Receive+0x74>
 800616e:	2302      	movs	r3, #2
 8006170:	e0da      	b.n	8006328 <HAL_SPI_Receive+0x22a>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	2201      	movs	r2, #1
 8006176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	2204      	movs	r2, #4
 800617e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	68ba      	ldr	r2, [r7, #8]
 800618c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	88fa      	ldrh	r2, [r7, #6]
 8006192:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	88fa      	ldrh	r2, [r7, #6]
 8006198:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	2200      	movs	r2, #0
 80061a4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	2200      	movs	r2, #0
 80061aa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061c0:	d10f      	bne.n	80061e2 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	681a      	ldr	r2, [r3, #0]
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061d0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	681a      	ldr	r2, [r3, #0]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061e0:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061ec:	2b40      	cmp	r3, #64	@ 0x40
 80061ee:	d007      	beq.n	8006200 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	681a      	ldr	r2, [r3, #0]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061fe:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d170      	bne.n	80062ea <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006208:	e035      	b.n	8006276 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	f003 0301 	and.w	r3, r3, #1
 8006214:	2b01      	cmp	r3, #1
 8006216:	d115      	bne.n	8006244 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f103 020c 	add.w	r2, r3, #12
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006224:	7812      	ldrb	r2, [r2, #0]
 8006226:	b2d2      	uxtb	r2, r2
 8006228:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622e:	1c5a      	adds	r2, r3, #1
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006238:	b29b      	uxth	r3, r3
 800623a:	3b01      	subs	r3, #1
 800623c:	b29a      	uxth	r2, r3
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006242:	e018      	b.n	8006276 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006244:	f7fd f89a 	bl	800337c <HAL_GetTick>
 8006248:	4602      	mov	r2, r0
 800624a:	697b      	ldr	r3, [r7, #20]
 800624c:	1ad3      	subs	r3, r2, r3
 800624e:	683a      	ldr	r2, [r7, #0]
 8006250:	429a      	cmp	r2, r3
 8006252:	d803      	bhi.n	800625c <HAL_SPI_Receive+0x15e>
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800625a:	d102      	bne.n	8006262 <HAL_SPI_Receive+0x164>
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2201      	movs	r2, #1
 8006266:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2200      	movs	r2, #0
 800626e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006272:	2303      	movs	r3, #3
 8006274:	e058      	b.n	8006328 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800627a:	b29b      	uxth	r3, r3
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1c4      	bne.n	800620a <HAL_SPI_Receive+0x10c>
 8006280:	e038      	b.n	80062f4 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	689b      	ldr	r3, [r3, #8]
 8006288:	f003 0301 	and.w	r3, r3, #1
 800628c:	2b01      	cmp	r3, #1
 800628e:	d113      	bne.n	80062b8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629a:	b292      	uxth	r2, r2
 800629c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062a2:	1c9a      	adds	r2, r3, #2
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ac:	b29b      	uxth	r3, r3
 80062ae:	3b01      	subs	r3, #1
 80062b0:	b29a      	uxth	r2, r3
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062b6:	e018      	b.n	80062ea <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062b8:	f7fd f860 	bl	800337c <HAL_GetTick>
 80062bc:	4602      	mov	r2, r0
 80062be:	697b      	ldr	r3, [r7, #20]
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	683a      	ldr	r2, [r7, #0]
 80062c4:	429a      	cmp	r2, r3
 80062c6:	d803      	bhi.n	80062d0 <HAL_SPI_Receive+0x1d2>
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80062ce:	d102      	bne.n	80062d6 <HAL_SPI_Receive+0x1d8>
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d109      	bne.n	80062ea <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2201      	movs	r2, #1
 80062da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e01e      	b.n	8006328 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ee:	b29b      	uxth	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d1c6      	bne.n	8006282 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f000 fb93 	bl	8006a24 <SPI_EndRxTransaction>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d002      	beq.n	800630a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2220      	movs	r2, #32
 8006308:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631e:	2b00      	cmp	r3, #0
 8006320:	d001      	beq.n	8006326 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006326:	2300      	movs	r3, #0
  }
}
 8006328:	4618      	mov	r0, r3
 800632a:	3718      	adds	r7, #24
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	@ 0x28
 8006334:	af00      	add	r7, sp, #0
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	607a      	str	r2, [r7, #4]
 800633c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800633e:	2301      	movs	r3, #1
 8006340:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006342:	f7fd f81b 	bl	800337c <HAL_GetTick>
 8006346:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800634e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006356:	887b      	ldrh	r3, [r7, #2]
 8006358:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	2b01      	cmp	r3, #1
 800635e:	d00c      	beq.n	800637a <HAL_SPI_TransmitReceive+0x4a>
 8006360:	69bb      	ldr	r3, [r7, #24]
 8006362:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006366:	d106      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d102      	bne.n	8006376 <HAL_SPI_TransmitReceive+0x46>
 8006370:	7ffb      	ldrb	r3, [r7, #31]
 8006372:	2b04      	cmp	r3, #4
 8006374:	d001      	beq.n	800637a <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8006376:	2302      	movs	r3, #2
 8006378:	e17f      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d005      	beq.n	800638c <HAL_SPI_TransmitReceive+0x5c>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2b00      	cmp	r3, #0
 8006384:	d002      	beq.n	800638c <HAL_SPI_TransmitReceive+0x5c>
 8006386:	887b      	ldrh	r3, [r7, #2]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d101      	bne.n	8006390 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e174      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006396:	2b01      	cmp	r3, #1
 8006398:	d101      	bne.n	800639e <HAL_SPI_TransmitReceive+0x6e>
 800639a:	2302      	movs	r3, #2
 800639c:	e16d      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	2201      	movs	r2, #1
 80063a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b04      	cmp	r3, #4
 80063b0:	d003      	beq.n	80063ba <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	2205      	movs	r2, #5
 80063b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2200      	movs	r2, #0
 80063be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	887a      	ldrh	r2, [r7, #2]
 80063ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	887a      	ldrh	r2, [r7, #2]
 80063d0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	887a      	ldrh	r2, [r7, #2]
 80063dc:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	887a      	ldrh	r2, [r7, #2]
 80063e2:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fa:	2b40      	cmp	r3, #64	@ 0x40
 80063fc:	d007      	beq.n	800640e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800640c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006416:	d17e      	bne.n	8006516 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_SPI_TransmitReceive+0xf6>
 8006420:	8afb      	ldrh	r3, [r7, #22]
 8006422:	2b01      	cmp	r3, #1
 8006424:	d16c      	bne.n	8006500 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800642a:	881a      	ldrh	r2, [r3, #0]
 800642c:	68fb      	ldr	r3, [r7, #12]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006436:	1c9a      	adds	r2, r3, #2
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006440:	b29b      	uxth	r3, r3
 8006442:	3b01      	subs	r3, #1
 8006444:	b29a      	uxth	r2, r3
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800644a:	e059      	b.n	8006500 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	689b      	ldr	r3, [r3, #8]
 8006452:	f003 0302 	and.w	r3, r3, #2
 8006456:	2b02      	cmp	r3, #2
 8006458:	d11b      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x162>
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	d016      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x162>
 8006464:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006466:	2b01      	cmp	r3, #1
 8006468:	d113      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646e:	881a      	ldrh	r2, [r3, #0]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800647a:	1c9a      	adds	r2, r3, #2
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800648e:	2300      	movs	r3, #0
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	689b      	ldr	r3, [r3, #8]
 8006498:	f003 0301 	and.w	r3, r3, #1
 800649c:	2b01      	cmp	r3, #1
 800649e:	d119      	bne.n	80064d4 <HAL_SPI_TransmitReceive+0x1a4>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a4:	b29b      	uxth	r3, r3
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d014      	beq.n	80064d4 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	68da      	ldr	r2, [r3, #12]
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	b292      	uxth	r2, r2
 80064b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064bc:	1c9a      	adds	r2, r3, #2
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c6:	b29b      	uxth	r3, r3
 80064c8:	3b01      	subs	r3, #1
 80064ca:	b29a      	uxth	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80064d0:	2301      	movs	r3, #1
 80064d2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80064d4:	f7fc ff52 	bl	800337c <HAL_GetTick>
 80064d8:	4602      	mov	r2, r0
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	1ad3      	subs	r3, r2, r3
 80064de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064e0:	429a      	cmp	r2, r3
 80064e2:	d80d      	bhi.n	8006500 <HAL_SPI_TransmitReceive+0x1d0>
 80064e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ea:	d009      	beq.n	8006500 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2201      	movs	r2, #1
 80064f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e0bc      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006504:	b29b      	uxth	r3, r3
 8006506:	2b00      	cmp	r3, #0
 8006508:	d1a0      	bne.n	800644c <HAL_SPI_TransmitReceive+0x11c>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650e:	b29b      	uxth	r3, r3
 8006510:	2b00      	cmp	r3, #0
 8006512:	d19b      	bne.n	800644c <HAL_SPI_TransmitReceive+0x11c>
 8006514:	e082      	b.n	800661c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	685b      	ldr	r3, [r3, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d002      	beq.n	8006524 <HAL_SPI_TransmitReceive+0x1f4>
 800651e:	8afb      	ldrh	r3, [r7, #22]
 8006520:	2b01      	cmp	r3, #1
 8006522:	d171      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	330c      	adds	r3, #12
 800652e:	7812      	ldrb	r2, [r2, #0]
 8006530:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006540:	b29b      	uxth	r3, r3
 8006542:	3b01      	subs	r3, #1
 8006544:	b29a      	uxth	r2, r3
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800654a:	e05d      	b.n	8006608 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	689b      	ldr	r3, [r3, #8]
 8006552:	f003 0302 	and.w	r3, r3, #2
 8006556:	2b02      	cmp	r3, #2
 8006558:	d11c      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x264>
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655e:	b29b      	uxth	r3, r3
 8006560:	2b00      	cmp	r3, #0
 8006562:	d017      	beq.n	8006594 <HAL_SPI_TransmitReceive+0x264>
 8006564:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006566:	2b01      	cmp	r3, #1
 8006568:	d114      	bne.n	8006594 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	330c      	adds	r3, #12
 8006574:	7812      	ldrb	r2, [r2, #0]
 8006576:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	1c5a      	adds	r2, r3, #1
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006586:	b29b      	uxth	r3, r3
 8006588:	3b01      	subs	r3, #1
 800658a:	b29a      	uxth	r2, r3
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006590:	2300      	movs	r3, #0
 8006592:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f003 0301 	and.w	r3, r3, #1
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d119      	bne.n	80065d6 <HAL_SPI_TransmitReceive+0x2a6>
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d014      	beq.n	80065d6 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68da      	ldr	r2, [r3, #12]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b6:	b2d2      	uxtb	r2, r2
 80065b8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065be:	1c5a      	adds	r2, r3, #1
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b01      	subs	r3, #1
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80065d2:	2301      	movs	r3, #1
 80065d4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80065d6:	f7fc fed1 	bl	800337c <HAL_GetTick>
 80065da:	4602      	mov	r2, r0
 80065dc:	6a3b      	ldr	r3, [r7, #32]
 80065de:	1ad3      	subs	r3, r2, r3
 80065e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d803      	bhi.n	80065ee <HAL_SPI_TransmitReceive+0x2be>
 80065e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ec:	d102      	bne.n	80065f4 <HAL_SPI_TransmitReceive+0x2c4>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d109      	bne.n	8006608 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006604:	2303      	movs	r3, #3
 8006606:	e038      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d19c      	bne.n	800654c <HAL_SPI_TransmitReceive+0x21c>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006616:	b29b      	uxth	r3, r3
 8006618:	2b00      	cmp	r3, #0
 800661a:	d197      	bne.n	800654c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800661c:	6a3a      	ldr	r2, [r7, #32]
 800661e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006620:	68f8      	ldr	r0, [r7, #12]
 8006622:	f000 fa65 	bl	8006af0 <SPI_EndRxTxTransaction>
 8006626:	4603      	mov	r3, r0
 8006628:	2b00      	cmp	r3, #0
 800662a:	d008      	beq.n	800663e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	2220      	movs	r2, #32
 8006630:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800663a:	2301      	movs	r3, #1
 800663c:	e01d      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	689b      	ldr	r3, [r3, #8]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10a      	bne.n	800665c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006646:	2300      	movs	r3, #0
 8006648:	613b      	str	r3, [r7, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	68db      	ldr	r3, [r3, #12]
 8006650:	613b      	str	r3, [r7, #16]
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	689b      	ldr	r3, [r3, #8]
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2201      	movs	r2, #1
 8006660:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2200      	movs	r2, #0
 8006668:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006674:	2301      	movs	r3, #1
 8006676:	e000      	b.n	800667a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006678:	2300      	movs	r3, #0
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	3728      	adds	r7, #40	@ 0x28
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8006684:	b580      	push	{r7, lr}
 8006686:	b084      	sub	sp, #16
 8006688:	af00      	add	r7, sp, #0
 800668a:	60f8      	str	r0, [r7, #12]
 800668c:	60b9      	str	r1, [r7, #8]
 800668e:	4613      	mov	r3, r2
 8006690:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006698:	b2db      	uxtb	r3, r3
 800669a:	2b01      	cmp	r3, #1
 800669c:	d001      	beq.n	80066a2 <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800669e:	2302      	movs	r3, #2
 80066a0:	e097      	b.n	80067d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d002      	beq.n	80066ae <HAL_SPI_Transmit_DMA+0x2a>
 80066a8:	88fb      	ldrh	r3, [r7, #6]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e08f      	b.n	80067d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_SPI_Transmit_DMA+0x3c>
 80066bc:	2302      	movs	r3, #2
 80066be:	e088      	b.n	80067d2 <HAL_SPI_Transmit_DMA+0x14e>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	2203      	movs	r2, #3
 80066cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	2200      	movs	r2, #0
 80066d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	68ba      	ldr	r2, [r7, #8]
 80066da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	88fa      	ldrh	r2, [r7, #6]
 80066e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	88fa      	ldrh	r2, [r7, #6]
 80066e6:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2200      	movs	r2, #0
 80066f2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2200      	movs	r2, #0
 8006704:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800670e:	d10f      	bne.n	8006730 <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800671e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681a      	ldr	r2, [r3, #0]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800672e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006734:	4a29      	ldr	r2, [pc, #164]	@ (80067dc <HAL_SPI_Transmit_DMA+0x158>)
 8006736:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800673c:	4a28      	ldr	r2, [pc, #160]	@ (80067e0 <HAL_SPI_Transmit_DMA+0x15c>)
 800673e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006744:	4a27      	ldr	r2, [pc, #156]	@ (80067e4 <HAL_SPI_Transmit_DMA+0x160>)
 8006746:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800674c:	2200      	movs	r2, #0
 800674e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006758:	4619      	mov	r1, r3
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	330c      	adds	r3, #12
 8006760:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006766:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8006768:	f7fc fff8 	bl	800375c <HAL_DMA_Start_IT>
 800676c:	4603      	mov	r3, r0
 800676e:	2b00      	cmp	r3, #0
 8006770:	d00b      	beq.n	800678a <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006776:	f043 0210 	orr.w	r2, r3, #16
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	2200      	movs	r2, #0
 8006782:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006786:	2301      	movs	r3, #1
 8006788:	e023      	b.n	80067d2 <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006794:	2b40      	cmp	r3, #64	@ 0x40
 8006796:	d007      	beq.n	80067a8 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	681a      	ldr	r2, [r3, #0]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80067a6:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685a      	ldr	r2, [r3, #4]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0220 	orr.w	r2, r2, #32
 80067be:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	685a      	ldr	r2, [r3, #4]
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f042 0202 	orr.w	r2, r2, #2
 80067ce:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 80067d0:	2300      	movs	r3, #0
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3710      	adds	r7, #16
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd80      	pop	{r7, pc}
 80067da:	bf00      	nop
 80067dc:	080068b9 	.word	0x080068b9
 80067e0:	08006811 	.word	0x08006811
 80067e4:	080068d5 	.word	0x080068d5

080067e8 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b083      	sub	sp, #12
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8006804:	bf00      	nop
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800681c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800681e:	f7fc fdad 	bl	800337c <HAL_GetTick>
 8006822:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800682e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006832:	d03b      	beq.n	80068ac <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	685a      	ldr	r2, [r3, #4]
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 0220 	bic.w	r2, r2, #32
 8006842:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8006844:	697b      	ldr	r3, [r7, #20]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	685a      	ldr	r2, [r3, #4]
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f022 0202 	bic.w	r2, r2, #2
 8006852:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	2164      	movs	r1, #100	@ 0x64
 8006858:	6978      	ldr	r0, [r7, #20]
 800685a:	f000 f949 	bl	8006af0 <SPI_EndRxTxTransaction>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006868:	f043 0220 	orr.w	r2, r3, #32
 800686c:	697b      	ldr	r3, [r7, #20]
 800686e:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	689b      	ldr	r3, [r3, #8]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10a      	bne.n	800688e <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006878:	2300      	movs	r3, #0
 800687a:	60fb      	str	r3, [r7, #12]
 800687c:	697b      	ldr	r3, [r7, #20]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	68db      	ldr	r3, [r3, #12]
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	60fb      	str	r3, [r7, #12]
 800688c:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800688e:	697b      	ldr	r3, [r7, #20]
 8006890:	2200      	movs	r2, #0
 8006892:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	2201      	movs	r2, #1
 8006898:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800689c:	697b      	ldr	r3, [r7, #20]
 800689e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80068a4:	6978      	ldr	r0, [r7, #20]
 80068a6:	f7ff ffa9 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80068aa:	e002      	b.n	80068b2 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 80068ac:	6978      	ldr	r0, [r7, #20]
 80068ae:	f7fa fe63 	bl	8001578 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}

080068b8 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 80068b8:	b580      	push	{r7, lr}
 80068ba:	b084      	sub	sp, #16
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068c4:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ff8e 	bl	80067e8 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068e0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	685a      	ldr	r2, [r3, #4]
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f022 0203 	bic.w	r2, r2, #3
 80068f0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80068f6:	f043 0210 	orr.w	r2, r3, #16
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	2201      	movs	r2, #1
 8006902:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7ff ff78 	bl	80067fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b088      	sub	sp, #32
 8006918:	af00      	add	r7, sp, #0
 800691a:	60f8      	str	r0, [r7, #12]
 800691c:	60b9      	str	r1, [r7, #8]
 800691e:	603b      	str	r3, [r7, #0]
 8006920:	4613      	mov	r3, r2
 8006922:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006924:	f7fc fd2a 	bl	800337c <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800692c:	1a9b      	subs	r3, r3, r2
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	4413      	add	r3, r2
 8006932:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006934:	f7fc fd22 	bl	800337c <HAL_GetTick>
 8006938:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800693a:	4b39      	ldr	r3, [pc, #228]	@ (8006a20 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	015b      	lsls	r3, r3, #5
 8006940:	0d1b      	lsrs	r3, r3, #20
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	fb02 f303 	mul.w	r3, r2, r3
 8006948:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800694a:	e054      	b.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006952:	d050      	beq.n	80069f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006954:	f7fc fd12 	bl	800337c <HAL_GetTick>
 8006958:	4602      	mov	r2, r0
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	1ad3      	subs	r3, r2, r3
 800695e:	69fa      	ldr	r2, [r7, #28]
 8006960:	429a      	cmp	r2, r3
 8006962:	d902      	bls.n	800696a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006964:	69fb      	ldr	r3, [r7, #28]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d13d      	bne.n	80069e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006978:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006982:	d111      	bne.n	80069a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	689b      	ldr	r3, [r3, #8]
 8006988:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800698c:	d004      	beq.n	8006998 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006996:	d107      	bne.n	80069a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80069b0:	d10f      	bne.n	80069d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80069c0:	601a      	str	r2, [r3, #0]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80069d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2201      	movs	r2, #1
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80069e2:	2303      	movs	r3, #3
 80069e4:	e017      	b.n	8006a16 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d101      	bne.n	80069f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80069f0:	697b      	ldr	r3, [r7, #20]
 80069f2:	3b01      	subs	r3, #1
 80069f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	689a      	ldr	r2, [r3, #8]
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	4013      	ands	r3, r2
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	bf0c      	ite	eq
 8006a06:	2301      	moveq	r3, #1
 8006a08:	2300      	movne	r3, #0
 8006a0a:	b2db      	uxtb	r3, r3
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	429a      	cmp	r2, r3
 8006a12:	d19b      	bne.n	800694c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006a14:	2300      	movs	r3, #0
}
 8006a16:	4618      	mov	r0, r3
 8006a18:	3720      	adds	r7, #32
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	20000000 	.word	0x20000000

08006a24 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b086      	sub	sp, #24
 8006a28:	af02      	add	r7, sp, #8
 8006a2a:	60f8      	str	r0, [r7, #12]
 8006a2c:	60b9      	str	r1, [r7, #8]
 8006a2e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a38:	d111      	bne.n	8006a5e <SPI_EndRxTransaction+0x3a>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	689b      	ldr	r3, [r3, #8]
 8006a3e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a42:	d004      	beq.n	8006a4e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	689b      	ldr	r3, [r3, #8]
 8006a48:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a4c:	d107      	bne.n	8006a5e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	681a      	ldr	r2, [r3, #0]
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a5c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a66:	d12a      	bne.n	8006abe <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	689b      	ldr	r3, [r3, #8]
 8006a6c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a70:	d012      	beq.n	8006a98 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	9300      	str	r3, [sp, #0]
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	2180      	movs	r1, #128	@ 0x80
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f7ff ff49 	bl	8006914 <SPI_WaitFlagStateUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d02d      	beq.n	8006ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a8c:	f043 0220 	orr.w	r2, r3, #32
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006a94:	2303      	movs	r3, #3
 8006a96:	e026      	b.n	8006ae6 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	9300      	str	r3, [sp, #0]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	2101      	movs	r1, #1
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7ff ff36 	bl	8006914 <SPI_WaitFlagStateUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d01a      	beq.n	8006ae4 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ab2:	f043 0220 	orr.w	r2, r3, #32
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006aba:	2303      	movs	r3, #3
 8006abc:	e013      	b.n	8006ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	2101      	movs	r1, #1
 8006ac8:	68f8      	ldr	r0, [r7, #12]
 8006aca:	f7ff ff23 	bl	8006914 <SPI_WaitFlagStateUntilTimeout>
 8006ace:	4603      	mov	r3, r0
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	d007      	beq.n	8006ae4 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006ad8:	f043 0220 	orr.w	r2, r3, #32
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006ae0:	2303      	movs	r3, #3
 8006ae2:	e000      	b.n	8006ae6 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006ae4:	2300      	movs	r3, #0
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
	...

08006af0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b088      	sub	sp, #32
 8006af4:	af02      	add	r7, sp, #8
 8006af6:	60f8      	str	r0, [r7, #12]
 8006af8:	60b9      	str	r1, [r7, #8]
 8006afa:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	9300      	str	r3, [sp, #0]
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	2201      	movs	r2, #1
 8006b04:	2102      	movs	r1, #2
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f7ff ff04 	bl	8006914 <SPI_WaitFlagStateUntilTimeout>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d007      	beq.n	8006b22 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b16:	f043 0220 	orr.w	r2, r3, #32
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e032      	b.n	8006b88 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006b22:	4b1b      	ldr	r3, [pc, #108]	@ (8006b90 <SPI_EndRxTxTransaction+0xa0>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	4a1b      	ldr	r2, [pc, #108]	@ (8006b94 <SPI_EndRxTxTransaction+0xa4>)
 8006b28:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2c:	0d5b      	lsrs	r3, r3, #21
 8006b2e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006b32:	fb02 f303 	mul.w	r3, r2, r3
 8006b36:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006b40:	d112      	bne.n	8006b68 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	9300      	str	r3, [sp, #0]
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	2180      	movs	r1, #128	@ 0x80
 8006b4c:	68f8      	ldr	r0, [r7, #12]
 8006b4e:	f7ff fee1 	bl	8006914 <SPI_WaitFlagStateUntilTimeout>
 8006b52:	4603      	mov	r3, r0
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d016      	beq.n	8006b86 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b5c:	f043 0220 	orr.w	r2, r3, #32
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006b64:	2303      	movs	r3, #3
 8006b66:	e00f      	b.n	8006b88 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	3b01      	subs	r3, #1
 8006b72:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b7e:	2b80      	cmp	r3, #128	@ 0x80
 8006b80:	d0f2      	beq.n	8006b68 <SPI_EndRxTxTransaction+0x78>
 8006b82:	e000      	b.n	8006b86 <SPI_EndRxTxTransaction+0x96>
        break;
 8006b84:	bf00      	nop
  }

  return HAL_OK;
 8006b86:	2300      	movs	r3, #0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000000 	.word	0x20000000
 8006b94:	165e9f81 	.word	0x165e9f81

08006b98 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e041      	b.n	8006c2e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d106      	bne.n	8006bc4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2200      	movs	r2, #0
 8006bba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa fc36 	bl	8001430 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2202      	movs	r2, #2
 8006bc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681a      	ldr	r2, [r3, #0]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3304      	adds	r3, #4
 8006bd4:	4619      	mov	r1, r3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	f000 fd6a 	bl	80076b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2201      	movs	r2, #1
 8006be0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2201      	movs	r2, #1
 8006be8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2201      	movs	r2, #1
 8006bf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2201      	movs	r2, #1
 8006c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3708      	adds	r7, #8
 8006c32:	46bd      	mov	sp, r7
 8006c34:	bd80      	pop	{r7, pc}

08006c36 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006c36:	b580      	push	{r7, lr}
 8006c38:	b082      	sub	sp, #8
 8006c3a:	af00      	add	r7, sp, #0
 8006c3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d101      	bne.n	8006c48 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e041      	b.n	8006ccc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c4e:	b2db      	uxtb	r3, r3
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d106      	bne.n	8006c62 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006c5c:	6878      	ldr	r0, [r7, #4]
 8006c5e:	f000 f839 	bl	8006cd4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2202      	movs	r2, #2
 8006c66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681a      	ldr	r2, [r3, #0]
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f000 fd1b 	bl	80076b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2201      	movs	r2, #1
 8006c7e:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2201      	movs	r2, #1
 8006c86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2201      	movs	r2, #1
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2201      	movs	r2, #1
 8006c9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3708      	adds	r7, #8
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	bd80      	pop	{r7, pc}

08006cd4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b083      	sub	sp, #12
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006cdc:	bf00      	nop
 8006cde:	370c      	adds	r7, #12
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce6:	4770      	bx	lr

08006ce8 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b086      	sub	sp, #24
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	60f8      	str	r0, [r7, #12]
 8006cf0:	60b9      	str	r1, [r7, #8]
 8006cf2:	607a      	str	r2, [r7, #4]
 8006cf4:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d109      	bne.n	8006d14 <HAL_TIM_PWM_Start_DMA+0x2c>
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	2b02      	cmp	r3, #2
 8006d0a:	bf0c      	ite	eq
 8006d0c:	2301      	moveq	r3, #1
 8006d0e:	2300      	movne	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	e022      	b.n	8006d5a <HAL_TIM_PWM_Start_DMA+0x72>
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	2b04      	cmp	r3, #4
 8006d18:	d109      	bne.n	8006d2e <HAL_TIM_PWM_Start_DMA+0x46>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d20:	b2db      	uxtb	r3, r3
 8006d22:	2b02      	cmp	r3, #2
 8006d24:	bf0c      	ite	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	2300      	movne	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	e015      	b.n	8006d5a <HAL_TIM_PWM_Start_DMA+0x72>
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	2b08      	cmp	r3, #8
 8006d32:	d109      	bne.n	8006d48 <HAL_TIM_PWM_Start_DMA+0x60>
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b02      	cmp	r3, #2
 8006d3e:	bf0c      	ite	eq
 8006d40:	2301      	moveq	r3, #1
 8006d42:	2300      	movne	r3, #0
 8006d44:	b2db      	uxtb	r3, r3
 8006d46:	e008      	b.n	8006d5a <HAL_TIM_PWM_Start_DMA+0x72>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d4e:	b2db      	uxtb	r3, r3
 8006d50:	2b02      	cmp	r3, #2
 8006d52:	bf0c      	ite	eq
 8006d54:	2301      	moveq	r3, #1
 8006d56:	2300      	movne	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d001      	beq.n	8006d62 <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8006d5e:	2302      	movs	r3, #2
 8006d60:	e15d      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d109      	bne.n	8006d7c <HAL_TIM_PWM_Start_DMA+0x94>
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d6e:	b2db      	uxtb	r3, r3
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	bf0c      	ite	eq
 8006d74:	2301      	moveq	r3, #1
 8006d76:	2300      	movne	r3, #0
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	e022      	b.n	8006dc2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	2b04      	cmp	r3, #4
 8006d80:	d109      	bne.n	8006d96 <HAL_TIM_PWM_Start_DMA+0xae>
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006d88:	b2db      	uxtb	r3, r3
 8006d8a:	2b01      	cmp	r3, #1
 8006d8c:	bf0c      	ite	eq
 8006d8e:	2301      	moveq	r3, #1
 8006d90:	2300      	movne	r3, #0
 8006d92:	b2db      	uxtb	r3, r3
 8006d94:	e015      	b.n	8006dc2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d109      	bne.n	8006db0 <HAL_TIM_PWM_Start_DMA+0xc8>
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	2b01      	cmp	r3, #1
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	e008      	b.n	8006dc2 <HAL_TIM_PWM_Start_DMA+0xda>
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006db6:	b2db      	uxtb	r3, r3
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	bf0c      	ite	eq
 8006dbc:	2301      	moveq	r3, #1
 8006dbe:	2300      	movne	r3, #0
 8006dc0:	b2db      	uxtb	r3, r3
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d024      	beq.n	8006e10 <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d002      	beq.n	8006dd2 <HAL_TIM_PWM_Start_DMA+0xea>
 8006dcc:	887b      	ldrh	r3, [r7, #2]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d101      	bne.n	8006dd6 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	e123      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d104      	bne.n	8006de6 <HAL_TIM_PWM_Start_DMA+0xfe>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	2202      	movs	r2, #2
 8006de0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006de4:	e016      	b.n	8006e14 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2b04      	cmp	r3, #4
 8006dea:	d104      	bne.n	8006df6 <HAL_TIM_PWM_Start_DMA+0x10e>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2202      	movs	r2, #2
 8006df0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006df4:	e00e      	b.n	8006e14 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	2b08      	cmp	r3, #8
 8006dfa:	d104      	bne.n	8006e06 <HAL_TIM_PWM_Start_DMA+0x11e>
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2202      	movs	r2, #2
 8006e00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006e04:	e006      	b.n	8006e14 <HAL_TIM_PWM_Start_DMA+0x12c>
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	2202      	movs	r2, #2
 8006e0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006e0e:	e001      	b.n	8006e14 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8006e10:	2301      	movs	r3, #1
 8006e12:	e104      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	2b0c      	cmp	r3, #12
 8006e18:	f200 80ae 	bhi.w	8006f78 <HAL_TIM_PWM_Start_DMA+0x290>
 8006e1c:	a201      	add	r2, pc, #4	@ (adr r2, 8006e24 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8006e1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e22:	bf00      	nop
 8006e24:	08006e59 	.word	0x08006e59
 8006e28:	08006f79 	.word	0x08006f79
 8006e2c:	08006f79 	.word	0x08006f79
 8006e30:	08006f79 	.word	0x08006f79
 8006e34:	08006ea1 	.word	0x08006ea1
 8006e38:	08006f79 	.word	0x08006f79
 8006e3c:	08006f79 	.word	0x08006f79
 8006e40:	08006f79 	.word	0x08006f79
 8006e44:	08006ee9 	.word	0x08006ee9
 8006e48:	08006f79 	.word	0x08006f79
 8006e4c:	08006f79 	.word	0x08006f79
 8006e50:	08006f79 	.word	0x08006f79
 8006e54:	08006f31 	.word	0x08006f31
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5c:	4a72      	ldr	r2, [pc, #456]	@ (8007028 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006e5e:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e64:	4a71      	ldr	r2, [pc, #452]	@ (800702c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006e66:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	4a70      	ldr	r2, [pc, #448]	@ (8007030 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006e6e:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8006e74:	6879      	ldr	r1, [r7, #4]
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	3334      	adds	r3, #52	@ 0x34
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	887b      	ldrh	r3, [r7, #2]
 8006e80:	f7fc fc6c 	bl	800375c <HAL_DMA_Start_IT>
 8006e84:	4603      	mov	r3, r0
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d001      	beq.n	8006e8e <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e0c7      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	68da      	ldr	r2, [r3, #12]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006e9c:	60da      	str	r2, [r3, #12]
      break;
 8006e9e:	e06e      	b.n	8006f7e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ea4:	4a60      	ldr	r2, [pc, #384]	@ (8007028 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006ea6:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eac:	4a5f      	ldr	r2, [pc, #380]	@ (800702c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006eae:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006eb4:	4a5e      	ldr	r2, [pc, #376]	@ (8007030 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8006ebc:	6879      	ldr	r1, [r7, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	3338      	adds	r3, #56	@ 0x38
 8006ec4:	461a      	mov	r2, r3
 8006ec6:	887b      	ldrh	r3, [r7, #2]
 8006ec8:	f7fc fc48 	bl	800375c <HAL_DMA_Start_IT>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e0a3      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	68da      	ldr	r2, [r3, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006ee4:	60da      	str	r2, [r3, #12]
      break;
 8006ee6:	e04a      	b.n	8006f7e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006eec:	4a4e      	ldr	r2, [pc, #312]	@ (8007028 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006eee:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ef4:	4a4d      	ldr	r2, [pc, #308]	@ (800702c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006ef6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006efc:	4a4c      	ldr	r2, [pc, #304]	@ (8007030 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006efe:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8006f04:	6879      	ldr	r1, [r7, #4]
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	333c      	adds	r3, #60	@ 0x3c
 8006f0c:	461a      	mov	r2, r3
 8006f0e:	887b      	ldrh	r3, [r7, #2]
 8006f10:	f7fc fc24 	bl	800375c <HAL_DMA_Start_IT>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e07f      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68da      	ldr	r2, [r3, #12]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006f2c:	60da      	str	r2, [r3, #12]
      break;
 8006f2e:	e026      	b.n	8006f7e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f34:	4a3c      	ldr	r2, [pc, #240]	@ (8007028 <HAL_TIM_PWM_Start_DMA+0x340>)
 8006f36:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f3c:	4a3b      	ldr	r2, [pc, #236]	@ (800702c <HAL_TIM_PWM_Start_DMA+0x344>)
 8006f3e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f44:	4a3a      	ldr	r2, [pc, #232]	@ (8007030 <HAL_TIM_PWM_Start_DMA+0x348>)
 8006f46:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	3340      	adds	r3, #64	@ 0x40
 8006f54:	461a      	mov	r2, r3
 8006f56:	887b      	ldrh	r3, [r7, #2]
 8006f58:	f7fc fc00 	bl	800375c <HAL_DMA_Start_IT>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8006f62:	2301      	movs	r3, #1
 8006f64:	e05b      	b.n	800701e <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006f74:	60da      	str	r2, [r3, #12]
      break;
 8006f76:	e002      	b.n	8006f7e <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8006f7c:	bf00      	nop
  }

  if (status == HAL_OK)
 8006f7e:	7dfb      	ldrb	r3, [r7, #23]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d14b      	bne.n	800701c <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	68b9      	ldr	r1, [r7, #8]
 8006f8c:	4618      	mov	r0, r3
 8006f8e:	f000 fe41 	bl	8007c14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	4a27      	ldr	r2, [pc, #156]	@ (8007034 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d107      	bne.n	8006fac <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006faa:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	4a20      	ldr	r2, [pc, #128]	@ (8007034 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8006fb2:	4293      	cmp	r3, r2
 8006fb4:	d018      	beq.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006fbe:	d013      	beq.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8007038 <HAL_TIM_PWM_Start_DMA+0x350>)
 8006fc6:	4293      	cmp	r3, r2
 8006fc8:	d00e      	beq.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	4a1b      	ldr	r2, [pc, #108]	@ (800703c <HAL_TIM_PWM_Start_DMA+0x354>)
 8006fd0:	4293      	cmp	r3, r2
 8006fd2:	d009      	beq.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	4a19      	ldr	r2, [pc, #100]	@ (8007040 <HAL_TIM_PWM_Start_DMA+0x358>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d004      	beq.n	8006fe8 <HAL_TIM_PWM_Start_DMA+0x300>
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	4a18      	ldr	r2, [pc, #96]	@ (8007044 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8006fe4:	4293      	cmp	r3, r2
 8006fe6:	d111      	bne.n	800700c <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	f003 0307 	and.w	r3, r3, #7
 8006ff2:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2b06      	cmp	r3, #6
 8006ff8:	d010      	beq.n	800701c <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	681a      	ldr	r2, [r3, #0]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f042 0201 	orr.w	r2, r2, #1
 8007008:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800700a:	e007      	b.n	800701c <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	f042 0201 	orr.w	r2, r2, #1
 800701a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	080075a1 	.word	0x080075a1
 800702c:	08007649 	.word	0x08007649
 8007030:	0800750f 	.word	0x0800750f
 8007034:	40010000 	.word	0x40010000
 8007038:	40000400 	.word	0x40000400
 800703c:	40000800 	.word	0x40000800
 8007040:	40000c00 	.word	0x40000c00
 8007044:	40014000 	.word	0x40014000

08007048 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b084      	sub	sp, #16
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007052:	2300      	movs	r3, #0
 8007054:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	2b0c      	cmp	r3, #12
 800705a:	d855      	bhi.n	8007108 <HAL_TIM_PWM_Stop_DMA+0xc0>
 800705c:	a201      	add	r2, pc, #4	@ (adr r2, 8007064 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800705e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007062:	bf00      	nop
 8007064:	08007099 	.word	0x08007099
 8007068:	08007109 	.word	0x08007109
 800706c:	08007109 	.word	0x08007109
 8007070:	08007109 	.word	0x08007109
 8007074:	080070b5 	.word	0x080070b5
 8007078:	08007109 	.word	0x08007109
 800707c:	08007109 	.word	0x08007109
 8007080:	08007109 	.word	0x08007109
 8007084:	080070d1 	.word	0x080070d1
 8007088:	08007109 	.word	0x08007109
 800708c:	08007109 	.word	0x08007109
 8007090:	08007109 	.word	0x08007109
 8007094:	080070ed 	.word	0x080070ed
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68da      	ldr	r2, [r3, #12]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80070a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070ac:	4618      	mov	r0, r3
 80070ae:	f7fc fbad 	bl	800380c <HAL_DMA_Abort_IT>
      break;
 80070b2:	e02c      	b.n	800710e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68da      	ldr	r2, [r3, #12]
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80070c2:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	4618      	mov	r0, r3
 80070ca:	f7fc fb9f 	bl	800380c <HAL_DMA_Abort_IT>
      break;
 80070ce:	e01e      	b.n	800710e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80070de:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fc fb91 	bl	800380c <HAL_DMA_Abort_IT>
      break;
 80070ea:	e010      	b.n	800710e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	68da      	ldr	r2, [r3, #12]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80070fa:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007100:	4618      	mov	r0, r3
 8007102:	f7fc fb83 	bl	800380c <HAL_DMA_Abort_IT>
      break;
 8007106:	e002      	b.n	800710e <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8007108:	2301      	movs	r3, #1
 800710a:	73fb      	strb	r3, [r7, #15]
      break;
 800710c:	bf00      	nop
  }

  if (status == HAL_OK)
 800710e:	7bfb      	ldrb	r3, [r7, #15]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d157      	bne.n	80071c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2200      	movs	r2, #0
 800711a:	6839      	ldr	r1, [r7, #0]
 800711c:	4618      	mov	r0, r3
 800711e:	f000 fd79 	bl	8007c14 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a2a      	ldr	r2, [pc, #168]	@ (80071d0 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d117      	bne.n	800715c <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	6a1a      	ldr	r2, [r3, #32]
 8007132:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007136:	4013      	ands	r3, r2
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10f      	bne.n	800715c <HAL_TIM_PWM_Stop_DMA+0x114>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	6a1a      	ldr	r2, [r3, #32]
 8007142:	f240 4344 	movw	r3, #1092	@ 0x444
 8007146:	4013      	ands	r3, r2
 8007148:	2b00      	cmp	r3, #0
 800714a:	d107      	bne.n	800715c <HAL_TIM_PWM_Stop_DMA+0x114>
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800715a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	6a1a      	ldr	r2, [r3, #32]
 8007162:	f241 1311 	movw	r3, #4369	@ 0x1111
 8007166:	4013      	ands	r3, r2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d10f      	bne.n	800718c <HAL_TIM_PWM_Stop_DMA+0x144>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	6a1a      	ldr	r2, [r3, #32]
 8007172:	f240 4344 	movw	r3, #1092	@ 0x444
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d107      	bne.n	800718c <HAL_TIM_PWM_Stop_DMA+0x144>
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f022 0201 	bic.w	r2, r2, #1
 800718a:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800718c:	683b      	ldr	r3, [r7, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d104      	bne.n	800719c <HAL_TIM_PWM_Stop_DMA+0x154>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	2201      	movs	r2, #1
 8007196:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800719a:	e013      	b.n	80071c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	2b04      	cmp	r3, #4
 80071a0:	d104      	bne.n	80071ac <HAL_TIM_PWM_Stop_DMA+0x164>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	2201      	movs	r2, #1
 80071a6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80071aa:	e00b      	b.n	80071c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	2b08      	cmp	r3, #8
 80071b0:	d104      	bne.n	80071bc <HAL_TIM_PWM_Stop_DMA+0x174>
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2201      	movs	r2, #1
 80071b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80071ba:	e003      	b.n	80071c4 <HAL_TIM_PWM_Stop_DMA+0x17c>
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000

080071d4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b086      	sub	sp, #24
 80071d8:	af00      	add	r7, sp, #0
 80071da:	60f8      	str	r0, [r7, #12]
 80071dc:	60b9      	str	r1, [r7, #8]
 80071de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80071ea:	2b01      	cmp	r3, #1
 80071ec:	d101      	bne.n	80071f2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80071ee:	2302      	movs	r3, #2
 80071f0:	e0ae      	b.n	8007350 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2201      	movs	r2, #1
 80071f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b0c      	cmp	r3, #12
 80071fe:	f200 809f 	bhi.w	8007340 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007202:	a201      	add	r2, pc, #4	@ (adr r2, 8007208 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007208:	0800723d 	.word	0x0800723d
 800720c:	08007341 	.word	0x08007341
 8007210:	08007341 	.word	0x08007341
 8007214:	08007341 	.word	0x08007341
 8007218:	0800727d 	.word	0x0800727d
 800721c:	08007341 	.word	0x08007341
 8007220:	08007341 	.word	0x08007341
 8007224:	08007341 	.word	0x08007341
 8007228:	080072bf 	.word	0x080072bf
 800722c:	08007341 	.word	0x08007341
 8007230:	08007341 	.word	0x08007341
 8007234:	08007341 	.word	0x08007341
 8007238:	080072ff 	.word	0x080072ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	68b9      	ldr	r1, [r7, #8]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 fac0 	bl	80077c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	699a      	ldr	r2, [r3, #24]
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	f042 0208 	orr.w	r2, r2, #8
 8007256:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	699a      	ldr	r2, [r3, #24]
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f022 0204 	bic.w	r2, r2, #4
 8007266:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	6999      	ldr	r1, [r3, #24]
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	691a      	ldr	r2, [r3, #16]
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	430a      	orrs	r2, r1
 8007278:	619a      	str	r2, [r3, #24]
      break;
 800727a:	e064      	b.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68b9      	ldr	r1, [r7, #8]
 8007282:	4618      	mov	r0, r3
 8007284:	f000 fb06 	bl	8007894 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	699a      	ldr	r2, [r3, #24]
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007296:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	699a      	ldr	r2, [r3, #24]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80072a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6999      	ldr	r1, [r3, #24]
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	691b      	ldr	r3, [r3, #16]
 80072b2:	021a      	lsls	r2, r3, #8
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	430a      	orrs	r2, r1
 80072ba:	619a      	str	r2, [r3, #24]
      break;
 80072bc:	e043      	b.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68b9      	ldr	r1, [r7, #8]
 80072c4:	4618      	mov	r0, r3
 80072c6:	f000 fb51 	bl	800796c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	69da      	ldr	r2, [r3, #28]
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f042 0208 	orr.w	r2, r2, #8
 80072d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	69da      	ldr	r2, [r3, #28]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f022 0204 	bic.w	r2, r2, #4
 80072e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	69d9      	ldr	r1, [r3, #28]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	691a      	ldr	r2, [r3, #16]
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	430a      	orrs	r2, r1
 80072fa:	61da      	str	r2, [r3, #28]
      break;
 80072fc:	e023      	b.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68b9      	ldr	r1, [r7, #8]
 8007304:	4618      	mov	r0, r3
 8007306:	f000 fb9b 	bl	8007a40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	69da      	ldr	r2, [r3, #28]
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007318:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	69da      	ldr	r2, [r3, #28]
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007328:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	69d9      	ldr	r1, [r3, #28]
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	691b      	ldr	r3, [r3, #16]
 8007334:	021a      	lsls	r2, r3, #8
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	430a      	orrs	r2, r1
 800733c:	61da      	str	r2, [r3, #28]
      break;
 800733e:	e002      	b.n	8007346 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007340:	2301      	movs	r3, #1
 8007342:	75fb      	strb	r3, [r7, #23]
      break;
 8007344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800734e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007350:	4618      	mov	r0, r3
 8007352:	3718      	adds	r7, #24
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b084      	sub	sp, #16
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007362:	2300      	movs	r3, #0
 8007364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800736c:	2b01      	cmp	r3, #1
 800736e:	d101      	bne.n	8007374 <HAL_TIM_ConfigClockSource+0x1c>
 8007370:	2302      	movs	r3, #2
 8007372:	e0b4      	b.n	80074de <HAL_TIM_ConfigClockSource+0x186>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	2201      	movs	r2, #1
 8007378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2202      	movs	r2, #2
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800738c:	68bb      	ldr	r3, [r7, #8]
 800738e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800739a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073ac:	d03e      	beq.n	800742c <HAL_TIM_ConfigClockSource+0xd4>
 80073ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80073b2:	f200 8087 	bhi.w	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073ba:	f000 8086 	beq.w	80074ca <HAL_TIM_ConfigClockSource+0x172>
 80073be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073c2:	d87f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073c4:	2b70      	cmp	r3, #112	@ 0x70
 80073c6:	d01a      	beq.n	80073fe <HAL_TIM_ConfigClockSource+0xa6>
 80073c8:	2b70      	cmp	r3, #112	@ 0x70
 80073ca:	d87b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073cc:	2b60      	cmp	r3, #96	@ 0x60
 80073ce:	d050      	beq.n	8007472 <HAL_TIM_ConfigClockSource+0x11a>
 80073d0:	2b60      	cmp	r3, #96	@ 0x60
 80073d2:	d877      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073d4:	2b50      	cmp	r3, #80	@ 0x50
 80073d6:	d03c      	beq.n	8007452 <HAL_TIM_ConfigClockSource+0xfa>
 80073d8:	2b50      	cmp	r3, #80	@ 0x50
 80073da:	d873      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073dc:	2b40      	cmp	r3, #64	@ 0x40
 80073de:	d058      	beq.n	8007492 <HAL_TIM_ConfigClockSource+0x13a>
 80073e0:	2b40      	cmp	r3, #64	@ 0x40
 80073e2:	d86f      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073e4:	2b30      	cmp	r3, #48	@ 0x30
 80073e6:	d064      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073e8:	2b30      	cmp	r3, #48	@ 0x30
 80073ea:	d86b      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073ec:	2b20      	cmp	r3, #32
 80073ee:	d060      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f0:	2b20      	cmp	r3, #32
 80073f2:	d867      	bhi.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d05c      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073f8:	2b10      	cmp	r3, #16
 80073fa:	d05a      	beq.n	80074b2 <HAL_TIM_ConfigClockSource+0x15a>
 80073fc:	e062      	b.n	80074c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007406:	683b      	ldr	r3, [r7, #0]
 8007408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800740a:	683b      	ldr	r3, [r7, #0]
 800740c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800740e:	f000 fbe1 	bl	8007bd4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8007420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	609a      	str	r2, [r3, #8]
      break;
 800742a:	e04f      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8007434:	683b      	ldr	r3, [r7, #0]
 8007436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800743c:	f000 fbca 	bl	8007bd4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	689a      	ldr	r2, [r3, #8]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800744e:	609a      	str	r2, [r3, #8]
      break;
 8007450:	e03c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800745e:	461a      	mov	r2, r3
 8007460:	f000 fb3e 	bl	8007ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	2150      	movs	r1, #80	@ 0x50
 800746a:	4618      	mov	r0, r3
 800746c:	f000 fb97 	bl	8007b9e <TIM_ITRx_SetConfig>
      break;
 8007470:	e02c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007476:	683b      	ldr	r3, [r7, #0]
 8007478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800747a:	683b      	ldr	r3, [r7, #0]
 800747c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800747e:	461a      	mov	r2, r3
 8007480:	f000 fb5d 	bl	8007b3e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	2160      	movs	r1, #96	@ 0x60
 800748a:	4618      	mov	r0, r3
 800748c:	f000 fb87 	bl	8007b9e <TIM_ITRx_SetConfig>
      break;
 8007490:	e01c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800749e:	461a      	mov	r2, r3
 80074a0:	f000 fb1e 	bl	8007ae0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2140      	movs	r1, #64	@ 0x40
 80074aa:	4618      	mov	r0, r3
 80074ac:	f000 fb77 	bl	8007b9e <TIM_ITRx_SetConfig>
      break;
 80074b0:	e00c      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681a      	ldr	r2, [r3, #0]
 80074b6:	683b      	ldr	r3, [r7, #0]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4619      	mov	r1, r3
 80074bc:	4610      	mov	r0, r2
 80074be:	f000 fb6e 	bl	8007b9e <TIM_ITRx_SetConfig>
      break;
 80074c2:	e003      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      break;
 80074c8:	e000      	b.n	80074cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80074ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80074dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80074e6:	b480      	push	{r7}
 80074e8:	b083      	sub	sp, #12
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80074ee:	bf00      	nop
 80074f0:	370c      	adds	r7, #12
 80074f2:	46bd      	mov	sp, r7
 80074f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f8:	4770      	bx	lr

080074fa <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80074fa:	b480      	push	{r7}
 80074fc:	b083      	sub	sp, #12
 80074fe:	af00      	add	r7, sp, #0
 8007500:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8007502:	bf00      	nop
 8007504:	370c      	adds	r7, #12
 8007506:	46bd      	mov	sp, r7
 8007508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750c:	4770      	bx	lr

0800750e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800750e:	b580      	push	{r7, lr}
 8007510:	b084      	sub	sp, #16
 8007512:	af00      	add	r7, sp, #0
 8007514:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007520:	687a      	ldr	r2, [r7, #4]
 8007522:	429a      	cmp	r2, r3
 8007524:	d107      	bne.n	8007536 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2201      	movs	r2, #1
 800752a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2201      	movs	r2, #1
 8007530:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007534:	e02a      	b.n	800758c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800753a:	687a      	ldr	r2, [r7, #4]
 800753c:	429a      	cmp	r2, r3
 800753e:	d107      	bne.n	8007550 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	2202      	movs	r2, #2
 8007544:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	2201      	movs	r2, #1
 800754a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800754e:	e01d      	b.n	800758c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007554:	687a      	ldr	r2, [r7, #4]
 8007556:	429a      	cmp	r2, r3
 8007558:	d107      	bne.n	800756a <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2204      	movs	r2, #4
 800755e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2201      	movs	r2, #1
 8007564:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007568:	e010      	b.n	800758c <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	429a      	cmp	r2, r3
 8007572:	d107      	bne.n	8007584 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	2208      	movs	r2, #8
 8007578:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	2201      	movs	r2, #1
 800757e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007582:	e003      	b.n	800758c <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	2201      	movs	r2, #1
 8007588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800758c:	68f8      	ldr	r0, [r7, #12]
 800758e:	f7ff ffb4 	bl	80074fa <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	2200      	movs	r2, #0
 8007596:	771a      	strb	r2, [r3, #28]
}
 8007598:	bf00      	nop
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075ac:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80075b2:	687a      	ldr	r2, [r7, #4]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	d10b      	bne.n	80075d0 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	69db      	ldr	r3, [r3, #28]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d136      	bne.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2201      	movs	r2, #1
 80075ca:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80075ce:	e031      	b.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80075d4:	687a      	ldr	r2, [r7, #4]
 80075d6:	429a      	cmp	r2, r3
 80075d8:	d10b      	bne.n	80075f2 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	2202      	movs	r2, #2
 80075de:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d125      	bne.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2201      	movs	r2, #1
 80075ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80075f0:	e020      	b.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075f6:	687a      	ldr	r2, [r7, #4]
 80075f8:	429a      	cmp	r2, r3
 80075fa:	d10b      	bne.n	8007614 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2204      	movs	r2, #4
 8007600:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	69db      	ldr	r3, [r3, #28]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d114      	bne.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2201      	movs	r2, #1
 800760e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007612:	e00f      	b.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	429a      	cmp	r2, r3
 800761c:	d10a      	bne.n	8007634 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2208      	movs	r2, #8
 8007622:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	69db      	ldr	r3, [r3, #28]
 8007628:	2b00      	cmp	r3, #0
 800762a:	d103      	bne.n	8007634 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2201      	movs	r2, #1
 8007630:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f7f9 fb3f 	bl	8000cb8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2200      	movs	r2, #0
 800763e:	771a      	strb	r2, [r3, #28]
}
 8007640:	bf00      	nop
 8007642:	3710      	adds	r7, #16
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}

08007648 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b084      	sub	sp, #16
 800764c:	af00      	add	r7, sp, #0
 800764e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007654:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800765a:	687a      	ldr	r2, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d103      	bne.n	8007668 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2201      	movs	r2, #1
 8007664:	771a      	strb	r2, [r3, #28]
 8007666:	e019      	b.n	800769c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d103      	bne.n	800767a <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2202      	movs	r2, #2
 8007676:	771a      	strb	r2, [r3, #28]
 8007678:	e010      	b.n	800769c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d103      	bne.n	800768c <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2204      	movs	r2, #4
 8007688:	771a      	strb	r2, [r3, #28]
 800768a:	e007      	b.n	800769c <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d102      	bne.n	800769c <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	2208      	movs	r2, #8
 800769a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f7ff ff22 	bl	80074e6 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
}
 80076a8:	bf00      	nop
 80076aa:	3710      	adds	r7, #16
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	4a3a      	ldr	r2, [pc, #232]	@ (80077ac <TIM_Base_SetConfig+0xfc>)
 80076c4:	4293      	cmp	r3, r2
 80076c6:	d00f      	beq.n	80076e8 <TIM_Base_SetConfig+0x38>
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80076ce:	d00b      	beq.n	80076e8 <TIM_Base_SetConfig+0x38>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	4a37      	ldr	r2, [pc, #220]	@ (80077b0 <TIM_Base_SetConfig+0x100>)
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d007      	beq.n	80076e8 <TIM_Base_SetConfig+0x38>
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	4a36      	ldr	r2, [pc, #216]	@ (80077b4 <TIM_Base_SetConfig+0x104>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d003      	beq.n	80076e8 <TIM_Base_SetConfig+0x38>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	4a35      	ldr	r2, [pc, #212]	@ (80077b8 <TIM_Base_SetConfig+0x108>)
 80076e4:	4293      	cmp	r3, r2
 80076e6:	d108      	bne.n	80076fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80076ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80076f0:	683b      	ldr	r3, [r7, #0]
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	68fa      	ldr	r2, [r7, #12]
 80076f6:	4313      	orrs	r3, r2
 80076f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	4a2b      	ldr	r2, [pc, #172]	@ (80077ac <TIM_Base_SetConfig+0xfc>)
 80076fe:	4293      	cmp	r3, r2
 8007700:	d01b      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007708:	d017      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	4a28      	ldr	r2, [pc, #160]	@ (80077b0 <TIM_Base_SetConfig+0x100>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d013      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	4a27      	ldr	r2, [pc, #156]	@ (80077b4 <TIM_Base_SetConfig+0x104>)
 8007716:	4293      	cmp	r3, r2
 8007718:	d00f      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	4a26      	ldr	r2, [pc, #152]	@ (80077b8 <TIM_Base_SetConfig+0x108>)
 800771e:	4293      	cmp	r3, r2
 8007720:	d00b      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	4a25      	ldr	r2, [pc, #148]	@ (80077bc <TIM_Base_SetConfig+0x10c>)
 8007726:	4293      	cmp	r3, r2
 8007728:	d007      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	4a24      	ldr	r2, [pc, #144]	@ (80077c0 <TIM_Base_SetConfig+0x110>)
 800772e:	4293      	cmp	r3, r2
 8007730:	d003      	beq.n	800773a <TIM_Base_SetConfig+0x8a>
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a23      	ldr	r2, [pc, #140]	@ (80077c4 <TIM_Base_SetConfig+0x114>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d108      	bne.n	800774c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007740:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007742:	683b      	ldr	r3, [r7, #0]
 8007744:	68db      	ldr	r3, [r3, #12]
 8007746:	68fa      	ldr	r2, [r7, #12]
 8007748:	4313      	orrs	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007752:	683b      	ldr	r3, [r7, #0]
 8007754:	695b      	ldr	r3, [r3, #20]
 8007756:	4313      	orrs	r3, r2
 8007758:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	68fa      	ldr	r2, [r7, #12]
 800775e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	689a      	ldr	r2, [r3, #8]
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	4a0e      	ldr	r2, [pc, #56]	@ (80077ac <TIM_Base_SetConfig+0xfc>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d103      	bne.n	8007780 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007778:	683b      	ldr	r3, [r7, #0]
 800777a:	691a      	ldr	r2, [r3, #16]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2201      	movs	r2, #1
 8007784:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	691b      	ldr	r3, [r3, #16]
 800778a:	f003 0301 	and.w	r3, r3, #1
 800778e:	2b01      	cmp	r3, #1
 8007790:	d105      	bne.n	800779e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f023 0201 	bic.w	r2, r3, #1
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	611a      	str	r2, [r3, #16]
  }
}
 800779e:	bf00      	nop
 80077a0:	3714      	adds	r7, #20
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr
 80077aa:	bf00      	nop
 80077ac:	40010000 	.word	0x40010000
 80077b0:	40000400 	.word	0x40000400
 80077b4:	40000800 	.word	0x40000800
 80077b8:	40000c00 	.word	0x40000c00
 80077bc:	40014000 	.word	0x40014000
 80077c0:	40014400 	.word	0x40014400
 80077c4:	40014800 	.word	0x40014800

080077c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b087      	sub	sp, #28
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a1b      	ldr	r3, [r3, #32]
 80077d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a1b      	ldr	r3, [r3, #32]
 80077dc:	f023 0201 	bic.w	r2, r3, #1
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	699b      	ldr	r3, [r3, #24]
 80077ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80077f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f023 0303 	bic.w	r3, r3, #3
 80077fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007800:	683b      	ldr	r3, [r7, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	68fa      	ldr	r2, [r7, #12]
 8007806:	4313      	orrs	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800780a:	697b      	ldr	r3, [r7, #20]
 800780c:	f023 0302 	bic.w	r3, r3, #2
 8007810:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	689b      	ldr	r3, [r3, #8]
 8007816:	697a      	ldr	r2, [r7, #20]
 8007818:	4313      	orrs	r3, r2
 800781a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	4a1c      	ldr	r2, [pc, #112]	@ (8007890 <TIM_OC1_SetConfig+0xc8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d10c      	bne.n	800783e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007824:	697b      	ldr	r3, [r7, #20]
 8007826:	f023 0308 	bic.w	r3, r3, #8
 800782a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	697a      	ldr	r2, [r7, #20]
 8007832:	4313      	orrs	r3, r2
 8007834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	f023 0304 	bic.w	r3, r3, #4
 800783c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a13      	ldr	r2, [pc, #76]	@ (8007890 <TIM_OC1_SetConfig+0xc8>)
 8007842:	4293      	cmp	r3, r2
 8007844:	d111      	bne.n	800786a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800784c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007854:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	695b      	ldr	r3, [r3, #20]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	4313      	orrs	r3, r2
 800785e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007860:	683b      	ldr	r3, [r7, #0]
 8007862:	699b      	ldr	r3, [r3, #24]
 8007864:	693a      	ldr	r2, [r7, #16]
 8007866:	4313      	orrs	r3, r2
 8007868:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007876:	683b      	ldr	r3, [r7, #0]
 8007878:	685a      	ldr	r2, [r3, #4]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	697a      	ldr	r2, [r7, #20]
 8007882:	621a      	str	r2, [r3, #32]
}
 8007884:	bf00      	nop
 8007886:	371c      	adds	r7, #28
 8007888:	46bd      	mov	sp, r7
 800788a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788e:	4770      	bx	lr
 8007890:	40010000 	.word	0x40010000

08007894 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007894:	b480      	push	{r7}
 8007896:	b087      	sub	sp, #28
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
 800789c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	6a1b      	ldr	r3, [r3, #32]
 80078a8:	f023 0210 	bic.w	r2, r3, #16
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	685b      	ldr	r3, [r3, #4]
 80078b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	699b      	ldr	r3, [r3, #24]
 80078ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80078c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80078ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80078cc:	683b      	ldr	r3, [r7, #0]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	021b      	lsls	r3, r3, #8
 80078d2:	68fa      	ldr	r2, [r7, #12]
 80078d4:	4313      	orrs	r3, r2
 80078d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f023 0320 	bic.w	r3, r3, #32
 80078de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	689b      	ldr	r3, [r3, #8]
 80078e4:	011b      	lsls	r3, r3, #4
 80078e6:	697a      	ldr	r2, [r7, #20]
 80078e8:	4313      	orrs	r3, r2
 80078ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	4a1e      	ldr	r2, [pc, #120]	@ (8007968 <TIM_OC2_SetConfig+0xd4>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d10d      	bne.n	8007910 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80078f4:	697b      	ldr	r3, [r7, #20]
 80078f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80078fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80078fc:	683b      	ldr	r3, [r7, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	011b      	lsls	r3, r3, #4
 8007902:	697a      	ldr	r2, [r7, #20]
 8007904:	4313      	orrs	r3, r2
 8007906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800790e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	4a15      	ldr	r2, [pc, #84]	@ (8007968 <TIM_OC2_SetConfig+0xd4>)
 8007914:	4293      	cmp	r3, r2
 8007916:	d113      	bne.n	8007940 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007918:	693b      	ldr	r3, [r7, #16]
 800791a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800791e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007920:	693b      	ldr	r3, [r7, #16]
 8007922:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007928:	683b      	ldr	r3, [r7, #0]
 800792a:	695b      	ldr	r3, [r3, #20]
 800792c:	009b      	lsls	r3, r3, #2
 800792e:	693a      	ldr	r2, [r7, #16]
 8007930:	4313      	orrs	r3, r2
 8007932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	699b      	ldr	r3, [r3, #24]
 8007938:	009b      	lsls	r3, r3, #2
 800793a:	693a      	ldr	r2, [r7, #16]
 800793c:	4313      	orrs	r3, r2
 800793e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	693a      	ldr	r2, [r7, #16]
 8007944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800794c:	683b      	ldr	r3, [r7, #0]
 800794e:	685a      	ldr	r2, [r3, #4]
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	697a      	ldr	r2, [r7, #20]
 8007958:	621a      	str	r2, [r3, #32]
}
 800795a:	bf00      	nop
 800795c:	371c      	adds	r7, #28
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	40010000 	.word	0x40010000

0800796c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800796c:	b480      	push	{r7}
 800796e:	b087      	sub	sp, #28
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
 8007974:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	6a1b      	ldr	r3, [r3, #32]
 8007980:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	69db      	ldr	r3, [r3, #28]
 8007992:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800799a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	f023 0303 	bic.w	r3, r3, #3
 80079a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80079a4:	683b      	ldr	r3, [r7, #0]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	68fa      	ldr	r2, [r7, #12]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80079b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80079b6:	683b      	ldr	r3, [r7, #0]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	021b      	lsls	r3, r3, #8
 80079bc:	697a      	ldr	r2, [r7, #20]
 80079be:	4313      	orrs	r3, r2
 80079c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	4a1d      	ldr	r2, [pc, #116]	@ (8007a3c <TIM_OC3_SetConfig+0xd0>)
 80079c6:	4293      	cmp	r3, r2
 80079c8:	d10d      	bne.n	80079e6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80079ca:	697b      	ldr	r3, [r7, #20]
 80079cc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80079d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80079d2:	683b      	ldr	r3, [r7, #0]
 80079d4:	68db      	ldr	r3, [r3, #12]
 80079d6:	021b      	lsls	r3, r3, #8
 80079d8:	697a      	ldr	r2, [r7, #20]
 80079da:	4313      	orrs	r3, r2
 80079dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80079e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	4a14      	ldr	r2, [pc, #80]	@ (8007a3c <TIM_OC3_SetConfig+0xd0>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d113      	bne.n	8007a16 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80079ee:	693b      	ldr	r3, [r7, #16]
 80079f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80079fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	695b      	ldr	r3, [r3, #20]
 8007a02:	011b      	lsls	r3, r3, #4
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	4313      	orrs	r3, r2
 8007a08:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	699b      	ldr	r3, [r3, #24]
 8007a0e:	011b      	lsls	r3, r3, #4
 8007a10:	693a      	ldr	r2, [r7, #16]
 8007a12:	4313      	orrs	r3, r2
 8007a14:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	693a      	ldr	r2, [r7, #16]
 8007a1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	685a      	ldr	r2, [r3, #4]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	697a      	ldr	r2, [r7, #20]
 8007a2e:	621a      	str	r2, [r3, #32]
}
 8007a30:	bf00      	nop
 8007a32:	371c      	adds	r7, #28
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	40010000 	.word	0x40010000

08007a40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007a40:	b480      	push	{r7}
 8007a42:	b087      	sub	sp, #28
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
 8007a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a1b      	ldr	r3, [r3, #32]
 8007a4e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	6a1b      	ldr	r3, [r3, #32]
 8007a54:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	69db      	ldr	r3, [r3, #28]
 8007a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8007a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	021b      	lsls	r3, r3, #8
 8007a7e:	68fa      	ldr	r2, [r7, #12]
 8007a80:	4313      	orrs	r3, r2
 8007a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007a8a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007a8c:	683b      	ldr	r3, [r7, #0]
 8007a8e:	689b      	ldr	r3, [r3, #8]
 8007a90:	031b      	lsls	r3, r3, #12
 8007a92:	693a      	ldr	r2, [r7, #16]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	4a10      	ldr	r2, [pc, #64]	@ (8007adc <TIM_OC4_SetConfig+0x9c>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d109      	bne.n	8007ab4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007aa0:	697b      	ldr	r3, [r7, #20]
 8007aa2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007aa6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007aa8:	683b      	ldr	r3, [r7, #0]
 8007aaa:	695b      	ldr	r3, [r3, #20]
 8007aac:	019b      	lsls	r3, r3, #6
 8007aae:	697a      	ldr	r2, [r7, #20]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	697a      	ldr	r2, [r7, #20]
 8007ab8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	68fa      	ldr	r2, [r7, #12]
 8007abe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	685a      	ldr	r2, [r3, #4]
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	693a      	ldr	r2, [r7, #16]
 8007acc:	621a      	str	r2, [r3, #32]
}
 8007ace:	bf00      	nop
 8007ad0:	371c      	adds	r7, #28
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad8:	4770      	bx	lr
 8007ada:	bf00      	nop
 8007adc:	40010000 	.word	0x40010000

08007ae0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	b087      	sub	sp, #28
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	60f8      	str	r0, [r7, #12]
 8007ae8:	60b9      	str	r1, [r7, #8]
 8007aea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6a1b      	ldr	r3, [r3, #32]
 8007af0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	6a1b      	ldr	r3, [r3, #32]
 8007af6:	f023 0201 	bic.w	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	699b      	ldr	r3, [r3, #24]
 8007b02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007b0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	011b      	lsls	r3, r3, #4
 8007b10:	693a      	ldr	r2, [r7, #16]
 8007b12:	4313      	orrs	r3, r2
 8007b14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007b16:	697b      	ldr	r3, [r7, #20]
 8007b18:	f023 030a 	bic.w	r3, r3, #10
 8007b1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007b1e:	697a      	ldr	r2, [r7, #20]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	4313      	orrs	r3, r2
 8007b24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	693a      	ldr	r2, [r7, #16]
 8007b2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	697a      	ldr	r2, [r7, #20]
 8007b30:	621a      	str	r2, [r3, #32]
}
 8007b32:	bf00      	nop
 8007b34:	371c      	adds	r7, #28
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007b3e:	b480      	push	{r7}
 8007b40:	b087      	sub	sp, #28
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	60f8      	str	r0, [r7, #12]
 8007b46:	60b9      	str	r1, [r7, #8]
 8007b48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6a1b      	ldr	r3, [r3, #32]
 8007b54:	f023 0210 	bic.w	r2, r3, #16
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	699b      	ldr	r3, [r3, #24]
 8007b60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007b68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	031b      	lsls	r3, r3, #12
 8007b6e:	693a      	ldr	r2, [r7, #16]
 8007b70:	4313      	orrs	r3, r2
 8007b72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007b74:	697b      	ldr	r3, [r7, #20]
 8007b76:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007b7a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007b7c:	68bb      	ldr	r3, [r7, #8]
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	697a      	ldr	r2, [r7, #20]
 8007b82:	4313      	orrs	r3, r2
 8007b84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	693a      	ldr	r2, [r7, #16]
 8007b8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	621a      	str	r2, [r3, #32]
}
 8007b92:	bf00      	nop
 8007b94:	371c      	adds	r7, #28
 8007b96:	46bd      	mov	sp, r7
 8007b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	6078      	str	r0, [r7, #4]
 8007ba6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	689b      	ldr	r3, [r3, #8]
 8007bac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007bb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007bb6:	683a      	ldr	r2, [r7, #0]
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	f043 0307 	orr.w	r3, r3, #7
 8007bc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	68fa      	ldr	r2, [r7, #12]
 8007bc6:	609a      	str	r2, [r3, #8]
}
 8007bc8:	bf00      	nop
 8007bca:	3714      	adds	r7, #20
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr

08007bd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b087      	sub	sp, #28
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	60f8      	str	r0, [r7, #12]
 8007bdc:	60b9      	str	r1, [r7, #8]
 8007bde:	607a      	str	r2, [r7, #4]
 8007be0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007bee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007bf0:	683b      	ldr	r3, [r7, #0]
 8007bf2:	021a      	lsls	r2, r3, #8
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	431a      	orrs	r2, r3
 8007bf8:	68bb      	ldr	r3, [r7, #8]
 8007bfa:	4313      	orrs	r3, r2
 8007bfc:	697a      	ldr	r2, [r7, #20]
 8007bfe:	4313      	orrs	r3, r2
 8007c00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	697a      	ldr	r2, [r7, #20]
 8007c06:	609a      	str	r2, [r3, #8]
}
 8007c08:	bf00      	nop
 8007c0a:	371c      	adds	r7, #28
 8007c0c:	46bd      	mov	sp, r7
 8007c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c12:	4770      	bx	lr

08007c14 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007c14:	b480      	push	{r7}
 8007c16:	b087      	sub	sp, #28
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 031f 	and.w	r3, r3, #31
 8007c26:	2201      	movs	r2, #1
 8007c28:	fa02 f303 	lsl.w	r3, r2, r3
 8007c2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6a1a      	ldr	r2, [r3, #32]
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	43db      	mvns	r3, r3
 8007c36:	401a      	ands	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	6a1a      	ldr	r2, [r3, #32]
 8007c40:	68bb      	ldr	r3, [r7, #8]
 8007c42:	f003 031f 	and.w	r3, r3, #31
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	fa01 f303 	lsl.w	r3, r1, r3
 8007c4c:	431a      	orrs	r2, r3
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	621a      	str	r2, [r3, #32]
}
 8007c52:	bf00      	nop
 8007c54:	371c      	adds	r7, #28
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
	...

08007c60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007c60:	b480      	push	{r7}
 8007c62:	b085      	sub	sp, #20
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	6078      	str	r0, [r7, #4]
 8007c68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d101      	bne.n	8007c78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007c74:	2302      	movs	r3, #2
 8007c76:	e050      	b.n	8007d1a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2202      	movs	r2, #2
 8007c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	685b      	ldr	r3, [r3, #4]
 8007c8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689b      	ldr	r3, [r3, #8]
 8007c96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007c9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68fa      	ldr	r2, [r7, #12]
 8007ca6:	4313      	orrs	r3, r2
 8007ca8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	68fa      	ldr	r2, [r7, #12]
 8007cb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	4a1c      	ldr	r2, [pc, #112]	@ (8007d28 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d018      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007cc4:	d013      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	4a18      	ldr	r2, [pc, #96]	@ (8007d2c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d00e      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a16      	ldr	r2, [pc, #88]	@ (8007d30 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007cd6:	4293      	cmp	r3, r2
 8007cd8:	d009      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	4a15      	ldr	r2, [pc, #84]	@ (8007d34 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007ce0:	4293      	cmp	r3, r2
 8007ce2:	d004      	beq.n	8007cee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a13      	ldr	r2, [pc, #76]	@ (8007d38 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d10c      	bne.n	8007d08 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007cee:	68bb      	ldr	r3, [r7, #8]
 8007cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007cf4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007cf6:	683b      	ldr	r3, [r7, #0]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	68ba      	ldr	r2, [r7, #8]
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	68ba      	ldr	r2, [r7, #8]
 8007d06:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2201      	movs	r2, #1
 8007d0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2200      	movs	r2, #0
 8007d14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007d18:	2300      	movs	r3, #0
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3714      	adds	r7, #20
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr
 8007d26:	bf00      	nop
 8007d28:	40010000 	.word	0x40010000
 8007d2c:	40000400 	.word	0x40000400
 8007d30:	40000800 	.word	0x40000800
 8007d34:	40000c00 	.word	0x40000c00
 8007d38:	40014000 	.word	0x40014000

08007d3c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d3c:	b084      	sub	sp, #16
 8007d3e:	b580      	push	{r7, lr}
 8007d40:	b084      	sub	sp, #16
 8007d42:	af00      	add	r7, sp, #0
 8007d44:	6078      	str	r0, [r7, #4]
 8007d46:	f107 001c 	add.w	r0, r7, #28
 8007d4a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007d4e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d123      	bne.n	8007d9e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d5a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	68db      	ldr	r3, [r3, #12]
 8007d66:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007d6a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007d7e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d105      	bne.n	8007d92 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f001 fae8 	bl	8009368 <USB_CoreReset>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	73fb      	strb	r3, [r7, #15]
 8007d9c:	e01b      	b.n	8007dd6 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	68db      	ldr	r3, [r3, #12]
 8007da2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f001 fadc 	bl	8009368 <USB_CoreReset>
 8007db0:	4603      	mov	r3, r0
 8007db2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007db4:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d106      	bne.n	8007dca <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dc0:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	639a      	str	r2, [r3, #56]	@ 0x38
 8007dc8:	e005      	b.n	8007dd6 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dce:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007dd6:	7fbb      	ldrb	r3, [r7, #30]
 8007dd8:	2b01      	cmp	r3, #1
 8007dda:	d10b      	bne.n	8007df4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	689b      	ldr	r3, [r3, #8]
 8007de0:	f043 0206 	orr.w	r2, r3, #6
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	689b      	ldr	r3, [r3, #8]
 8007dec:	f043 0220 	orr.w	r2, r3, #32
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007df4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3710      	adds	r7, #16
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e00:	b004      	add	sp, #16
 8007e02:	4770      	bx	lr

08007e04 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8007e04:	b480      	push	{r7}
 8007e06:	b087      	sub	sp, #28
 8007e08:	af00      	add	r7, sp, #0
 8007e0a:	60f8      	str	r0, [r7, #12]
 8007e0c:	60b9      	str	r1, [r7, #8]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8007e12:	79fb      	ldrb	r3, [r7, #7]
 8007e14:	2b02      	cmp	r3, #2
 8007e16:	d165      	bne.n	8007ee4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	4a41      	ldr	r2, [pc, #260]	@ (8007f20 <USB_SetTurnaroundTime+0x11c>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d906      	bls.n	8007e2e <USB_SetTurnaroundTime+0x2a>
 8007e20:	68bb      	ldr	r3, [r7, #8]
 8007e22:	4a40      	ldr	r2, [pc, #256]	@ (8007f24 <USB_SetTurnaroundTime+0x120>)
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d202      	bcs.n	8007e2e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8007e28:	230f      	movs	r3, #15
 8007e2a:	617b      	str	r3, [r7, #20]
 8007e2c:	e062      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	4a3c      	ldr	r2, [pc, #240]	@ (8007f24 <USB_SetTurnaroundTime+0x120>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d306      	bcc.n	8007e44 <USB_SetTurnaroundTime+0x40>
 8007e36:	68bb      	ldr	r3, [r7, #8]
 8007e38:	4a3b      	ldr	r2, [pc, #236]	@ (8007f28 <USB_SetTurnaroundTime+0x124>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d202      	bcs.n	8007e44 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8007e3e:	230e      	movs	r3, #14
 8007e40:	617b      	str	r3, [r7, #20]
 8007e42:	e057      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	4a38      	ldr	r2, [pc, #224]	@ (8007f28 <USB_SetTurnaroundTime+0x124>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d306      	bcc.n	8007e5a <USB_SetTurnaroundTime+0x56>
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	4a37      	ldr	r2, [pc, #220]	@ (8007f2c <USB_SetTurnaroundTime+0x128>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d202      	bcs.n	8007e5a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8007e54:	230d      	movs	r3, #13
 8007e56:	617b      	str	r3, [r7, #20]
 8007e58:	e04c      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8007e5a:	68bb      	ldr	r3, [r7, #8]
 8007e5c:	4a33      	ldr	r2, [pc, #204]	@ (8007f2c <USB_SetTurnaroundTime+0x128>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d306      	bcc.n	8007e70 <USB_SetTurnaroundTime+0x6c>
 8007e62:	68bb      	ldr	r3, [r7, #8]
 8007e64:	4a32      	ldr	r2, [pc, #200]	@ (8007f30 <USB_SetTurnaroundTime+0x12c>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d802      	bhi.n	8007e70 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8007e6a:	230c      	movs	r3, #12
 8007e6c:	617b      	str	r3, [r7, #20]
 8007e6e:	e041      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8007e70:	68bb      	ldr	r3, [r7, #8]
 8007e72:	4a2f      	ldr	r2, [pc, #188]	@ (8007f30 <USB_SetTurnaroundTime+0x12c>)
 8007e74:	4293      	cmp	r3, r2
 8007e76:	d906      	bls.n	8007e86 <USB_SetTurnaroundTime+0x82>
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	4a2e      	ldr	r2, [pc, #184]	@ (8007f34 <USB_SetTurnaroundTime+0x130>)
 8007e7c:	4293      	cmp	r3, r2
 8007e7e:	d802      	bhi.n	8007e86 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8007e80:	230b      	movs	r3, #11
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	e036      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	4a2a      	ldr	r2, [pc, #168]	@ (8007f34 <USB_SetTurnaroundTime+0x130>)
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d906      	bls.n	8007e9c <USB_SetTurnaroundTime+0x98>
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	4a29      	ldr	r2, [pc, #164]	@ (8007f38 <USB_SetTurnaroundTime+0x134>)
 8007e92:	4293      	cmp	r3, r2
 8007e94:	d802      	bhi.n	8007e9c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8007e96:	230a      	movs	r3, #10
 8007e98:	617b      	str	r3, [r7, #20]
 8007e9a:	e02b      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8007e9c:	68bb      	ldr	r3, [r7, #8]
 8007e9e:	4a26      	ldr	r2, [pc, #152]	@ (8007f38 <USB_SetTurnaroundTime+0x134>)
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	d906      	bls.n	8007eb2 <USB_SetTurnaroundTime+0xae>
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	4a25      	ldr	r2, [pc, #148]	@ (8007f3c <USB_SetTurnaroundTime+0x138>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d202      	bcs.n	8007eb2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8007eac:	2309      	movs	r3, #9
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	e020      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	4a21      	ldr	r2, [pc, #132]	@ (8007f3c <USB_SetTurnaroundTime+0x138>)
 8007eb6:	4293      	cmp	r3, r2
 8007eb8:	d306      	bcc.n	8007ec8 <USB_SetTurnaroundTime+0xc4>
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	4a20      	ldr	r2, [pc, #128]	@ (8007f40 <USB_SetTurnaroundTime+0x13c>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d802      	bhi.n	8007ec8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8007ec2:	2308      	movs	r3, #8
 8007ec4:	617b      	str	r3, [r7, #20]
 8007ec6:	e015      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	4a1d      	ldr	r2, [pc, #116]	@ (8007f40 <USB_SetTurnaroundTime+0x13c>)
 8007ecc:	4293      	cmp	r3, r2
 8007ece:	d906      	bls.n	8007ede <USB_SetTurnaroundTime+0xda>
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	4a1c      	ldr	r2, [pc, #112]	@ (8007f44 <USB_SetTurnaroundTime+0x140>)
 8007ed4:	4293      	cmp	r3, r2
 8007ed6:	d202      	bcs.n	8007ede <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8007ed8:	2307      	movs	r3, #7
 8007eda:	617b      	str	r3, [r7, #20]
 8007edc:	e00a      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8007ede:	2306      	movs	r3, #6
 8007ee0:	617b      	str	r3, [r7, #20]
 8007ee2:	e007      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8007ee4:	79fb      	ldrb	r3, [r7, #7]
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d102      	bne.n	8007ef0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8007eea:	2309      	movs	r3, #9
 8007eec:	617b      	str	r3, [r7, #20]
 8007eee:	e001      	b.n	8007ef4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8007ef0:	2309      	movs	r3, #9
 8007ef2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	68db      	ldr	r3, [r3, #12]
 8007ef8:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	68da      	ldr	r2, [r3, #12]
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	029b      	lsls	r3, r3, #10
 8007f08:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8007f0c:	431a      	orrs	r2, r3
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007f12:	2300      	movs	r3, #0
}
 8007f14:	4618      	mov	r0, r3
 8007f16:	371c      	adds	r7, #28
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr
 8007f20:	00d8acbf 	.word	0x00d8acbf
 8007f24:	00e4e1c0 	.word	0x00e4e1c0
 8007f28:	00f42400 	.word	0x00f42400
 8007f2c:	01067380 	.word	0x01067380
 8007f30:	011a499f 	.word	0x011a499f
 8007f34:	01312cff 	.word	0x01312cff
 8007f38:	014ca43f 	.word	0x014ca43f
 8007f3c:	016e3600 	.word	0x016e3600
 8007f40:	01a6ab1f 	.word	0x01a6ab1f
 8007f44:	01e84800 	.word	0x01e84800

08007f48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	f043 0201 	orr.w	r2, r3, #1
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f5c:	2300      	movs	r3, #0
}
 8007f5e:	4618      	mov	r0, r3
 8007f60:	370c      	adds	r7, #12
 8007f62:	46bd      	mov	sp, r7
 8007f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f68:	4770      	bx	lr

08007f6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007f6a:	b480      	push	{r7}
 8007f6c:	b083      	sub	sp, #12
 8007f6e:	af00      	add	r7, sp, #0
 8007f70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	f023 0201 	bic.w	r2, r3, #1
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007f7e:	2300      	movs	r3, #0
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	460b      	mov	r3, r1
 8007f96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	68db      	ldr	r3, [r3, #12]
 8007fa0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007fa8:	78fb      	ldrb	r3, [r7, #3]
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d115      	bne.n	8007fda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fba:	200a      	movs	r0, #10
 8007fbc:	f7fb f9ea 	bl	8003394 <HAL_Delay>
      ms += 10U;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	330a      	adds	r3, #10
 8007fc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f001 f93f 	bl	800924a <USB_GetMode>
 8007fcc:	4603      	mov	r3, r0
 8007fce:	2b01      	cmp	r3, #1
 8007fd0:	d01e      	beq.n	8008010 <USB_SetCurrentMode+0x84>
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8007fd6:	d9f0      	bls.n	8007fba <USB_SetCurrentMode+0x2e>
 8007fd8:	e01a      	b.n	8008010 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007fda:	78fb      	ldrb	r3, [r7, #3]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d115      	bne.n	800800c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007fec:	200a      	movs	r0, #10
 8007fee:	f7fb f9d1 	bl	8003394 <HAL_Delay>
      ms += 10U;
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	330a      	adds	r3, #10
 8007ff6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f001 f926 	bl	800924a <USB_GetMode>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d005      	beq.n	8008010 <USB_SetCurrentMode+0x84>
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	2bc7      	cmp	r3, #199	@ 0xc7
 8008008:	d9f0      	bls.n	8007fec <USB_SetCurrentMode+0x60>
 800800a:	e001      	b.n	8008010 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800800c:	2301      	movs	r3, #1
 800800e:	e005      	b.n	800801c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2bc8      	cmp	r3, #200	@ 0xc8
 8008014:	d101      	bne.n	800801a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008016:	2301      	movs	r3, #1
 8008018:	e000      	b.n	800801c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800801a:	2300      	movs	r3, #0
}
 800801c:	4618      	mov	r0, r3
 800801e:	3710      	adds	r7, #16
 8008020:	46bd      	mov	sp, r7
 8008022:	bd80      	pop	{r7, pc}

08008024 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008024:	b084      	sub	sp, #16
 8008026:	b580      	push	{r7, lr}
 8008028:	b086      	sub	sp, #24
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
 800802e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008032:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800803e:	2300      	movs	r3, #0
 8008040:	613b      	str	r3, [r7, #16]
 8008042:	e009      	b.n	8008058 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008044:	687a      	ldr	r2, [r7, #4]
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	3340      	adds	r3, #64	@ 0x40
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	2200      	movs	r2, #0
 8008050:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	3301      	adds	r3, #1
 8008056:	613b      	str	r3, [r7, #16]
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	2b0e      	cmp	r3, #14
 800805c:	d9f2      	bls.n	8008044 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800805e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008062:	2b00      	cmp	r3, #0
 8008064:	d11c      	bne.n	80080a0 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008074:	f043 0302 	orr.w	r3, r3, #2
 8008078:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800807e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800808a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008096:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	639a      	str	r2, [r3, #56]	@ 0x38
 800809e:	e00b      	b.n	80080b8 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080a4:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080b0:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80080be:	461a      	mov	r2, r3
 80080c0:	2300      	movs	r3, #0
 80080c2:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80080c4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d10d      	bne.n	80080e8 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80080cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d104      	bne.n	80080de <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80080d4:	2100      	movs	r1, #0
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f968 	bl	80083ac <USB_SetDevSpeed>
 80080dc:	e008      	b.n	80080f0 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80080de:	2101      	movs	r1, #1
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 f963 	bl	80083ac <USB_SetDevSpeed>
 80080e6:	e003      	b.n	80080f0 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80080e8:	2103      	movs	r1, #3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f95e 	bl	80083ac <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80080f0:	2110      	movs	r1, #16
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f8fa 	bl	80082ec <USB_FlushTxFifo>
 80080f8:	4603      	mov	r3, r0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d001      	beq.n	8008102 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80080fe:	2301      	movs	r3, #1
 8008100:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f924 	bl	8008350 <USB_FlushRxFifo>
 8008108:	4603      	mov	r3, r0
 800810a:	2b00      	cmp	r3, #0
 800810c:	d001      	beq.n	8008112 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008118:	461a      	mov	r2, r3
 800811a:	2300      	movs	r3, #0
 800811c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008124:	461a      	mov	r2, r3
 8008126:	2300      	movs	r3, #0
 8008128:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008130:	461a      	mov	r2, r3
 8008132:	2300      	movs	r3, #0
 8008134:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008136:	2300      	movs	r3, #0
 8008138:	613b      	str	r3, [r7, #16]
 800813a:	e043      	b.n	80081c4 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800813c:	693b      	ldr	r3, [r7, #16]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800814e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008152:	d118      	bne.n	8008186 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008154:	693b      	ldr	r3, [r7, #16]
 8008156:	2b00      	cmp	r3, #0
 8008158:	d10a      	bne.n	8008170 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800815a:	693b      	ldr	r3, [r7, #16]
 800815c:	015a      	lsls	r2, r3, #5
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4413      	add	r3, r2
 8008162:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008166:	461a      	mov	r2, r3
 8008168:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800816c:	6013      	str	r3, [r2, #0]
 800816e:	e013      	b.n	8008198 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	015a      	lsls	r2, r3, #5
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	4413      	add	r3, r2
 8008178:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800817c:	461a      	mov	r2, r3
 800817e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008182:	6013      	str	r3, [r2, #0]
 8008184:	e008      	b.n	8008198 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008186:	693b      	ldr	r3, [r7, #16]
 8008188:	015a      	lsls	r2, r3, #5
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	4413      	add	r3, r2
 800818e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008192:	461a      	mov	r2, r3
 8008194:	2300      	movs	r3, #0
 8008196:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	015a      	lsls	r2, r3, #5
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	4413      	add	r3, r2
 80081a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081a4:	461a      	mov	r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80081aa:	693b      	ldr	r3, [r7, #16]
 80081ac:	015a      	lsls	r2, r3, #5
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	4413      	add	r3, r2
 80081b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80081b6:	461a      	mov	r2, r3
 80081b8:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80081bc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	3301      	adds	r3, #1
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80081c8:	461a      	mov	r2, r3
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d3b5      	bcc.n	800813c <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80081d0:	2300      	movs	r3, #0
 80081d2:	613b      	str	r3, [r7, #16]
 80081d4:	e043      	b.n	800825e <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	015a      	lsls	r2, r3, #5
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	4413      	add	r3, r2
 80081de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80081e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80081ec:	d118      	bne.n	8008220 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d10a      	bne.n	800820a <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	015a      	lsls	r2, r3, #5
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	4413      	add	r3, r2
 80081fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008200:	461a      	mov	r2, r3
 8008202:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	e013      	b.n	8008232 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	015a      	lsls	r2, r3, #5
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	4413      	add	r3, r2
 8008212:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008216:	461a      	mov	r2, r3
 8008218:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800821c:	6013      	str	r3, [r2, #0]
 800821e:	e008      	b.n	8008232 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008220:	693b      	ldr	r3, [r7, #16]
 8008222:	015a      	lsls	r2, r3, #5
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	4413      	add	r3, r2
 8008228:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800822c:	461a      	mov	r2, r3
 800822e:	2300      	movs	r3, #0
 8008230:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	015a      	lsls	r2, r3, #5
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	4413      	add	r3, r2
 800823a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800823e:	461a      	mov	r2, r3
 8008240:	2300      	movs	r3, #0
 8008242:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008244:	693b      	ldr	r3, [r7, #16]
 8008246:	015a      	lsls	r2, r3, #5
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	4413      	add	r3, r2
 800824c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008250:	461a      	mov	r2, r3
 8008252:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008256:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	3301      	adds	r3, #1
 800825c:	613b      	str	r3, [r7, #16]
 800825e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008262:	461a      	mov	r2, r3
 8008264:	693b      	ldr	r3, [r7, #16]
 8008266:	4293      	cmp	r3, r2
 8008268:	d3b5      	bcc.n	80081d6 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008270:	691b      	ldr	r3, [r3, #16]
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008278:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800827c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	2200      	movs	r2, #0
 8008282:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800828a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800828c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008290:	2b00      	cmp	r3, #0
 8008292:	d105      	bne.n	80082a0 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	699b      	ldr	r3, [r3, #24]
 8008298:	f043 0210 	orr.w	r2, r3, #16
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	699a      	ldr	r2, [r3, #24]
 80082a4:	4b10      	ldr	r3, [pc, #64]	@ (80082e8 <USB_DevInit+0x2c4>)
 80082a6:	4313      	orrs	r3, r2
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80082ac:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d005      	beq.n	80082c0 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	699b      	ldr	r3, [r3, #24]
 80082b8:	f043 0208 	orr.w	r2, r3, #8
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80082c0:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80082c4:	2b01      	cmp	r3, #1
 80082c6:	d107      	bne.n	80082d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	699b      	ldr	r3, [r3, #24]
 80082cc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80082d0:	f043 0304 	orr.w	r3, r3, #4
 80082d4:	687a      	ldr	r2, [r7, #4]
 80082d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80082d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3718      	adds	r7, #24
 80082de:	46bd      	mov	sp, r7
 80082e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80082e4:	b004      	add	sp, #16
 80082e6:	4770      	bx	lr
 80082e8:	803c3800 	.word	0x803c3800

080082ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b085      	sub	sp, #20
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
 80082f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	3301      	adds	r3, #1
 80082fe:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008306:	d901      	bls.n	800830c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008308:	2303      	movs	r3, #3
 800830a:	e01b      	b.n	8008344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	2b00      	cmp	r3, #0
 8008312:	daf2      	bge.n	80082fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	019b      	lsls	r3, r3, #6
 800831c:	f043 0220 	orr.w	r2, r3, #32
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	3301      	adds	r3, #1
 8008328:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008330:	d901      	bls.n	8008336 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008332:	2303      	movs	r3, #3
 8008334:	e006      	b.n	8008344 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	691b      	ldr	r3, [r3, #16]
 800833a:	f003 0320 	and.w	r3, r3, #32
 800833e:	2b20      	cmp	r3, #32
 8008340:	d0f0      	beq.n	8008324 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008342:	2300      	movs	r3, #0
}
 8008344:	4618      	mov	r0, r3
 8008346:	3714      	adds	r7, #20
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008350:	b480      	push	{r7}
 8008352:	b085      	sub	sp, #20
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008358:	2300      	movs	r3, #0
 800835a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008368:	d901      	bls.n	800836e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800836a:	2303      	movs	r3, #3
 800836c:	e018      	b.n	80083a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	2b00      	cmp	r3, #0
 8008374:	daf2      	bge.n	800835c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008376:	2300      	movs	r3, #0
 8008378:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2210      	movs	r2, #16
 800837e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3301      	adds	r3, #1
 8008384:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800838c:	d901      	bls.n	8008392 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800838e:	2303      	movs	r3, #3
 8008390:	e006      	b.n	80083a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b10      	cmp	r3, #16
 800839c:	d0f0      	beq.n	8008380 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800839e:	2300      	movs	r3, #0
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3714      	adds	r7, #20
 80083a4:	46bd      	mov	sp, r7
 80083a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083aa:	4770      	bx	lr

080083ac <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
 80083b4:	460b      	mov	r3, r1
 80083b6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	78fb      	ldrb	r3, [r7, #3]
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80083cc:	4313      	orrs	r3, r2
 80083ce:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80083d0:	2300      	movs	r3, #0
}
 80083d2:	4618      	mov	r0, r3
 80083d4:	3714      	adds	r7, #20
 80083d6:	46bd      	mov	sp, r7
 80083d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083dc:	4770      	bx	lr

080083de <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80083de:	b480      	push	{r7}
 80083e0:	b087      	sub	sp, #28
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80083ea:	693b      	ldr	r3, [r7, #16]
 80083ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	f003 0306 	and.w	r3, r3, #6
 80083f6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d102      	bne.n	8008404 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80083fe:	2300      	movs	r3, #0
 8008400:	75fb      	strb	r3, [r7, #23]
 8008402:	e00a      	b.n	800841a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	2b02      	cmp	r3, #2
 8008408:	d002      	beq.n	8008410 <USB_GetDevSpeed+0x32>
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	2b06      	cmp	r3, #6
 800840e:	d102      	bne.n	8008416 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008410:	2302      	movs	r3, #2
 8008412:	75fb      	strb	r3, [r7, #23]
 8008414:	e001      	b.n	800841a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008416:	230f      	movs	r3, #15
 8008418:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800841a:	7dfb      	ldrb	r3, [r7, #23]
}
 800841c:	4618      	mov	r0, r3
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008428:	b480      	push	{r7}
 800842a:	b085      	sub	sp, #20
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
 8008430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	781b      	ldrb	r3, [r3, #0]
 800843a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	785b      	ldrb	r3, [r3, #1]
 8008440:	2b01      	cmp	r3, #1
 8008442:	d13a      	bne.n	80084ba <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800844a:	69da      	ldr	r2, [r3, #28]
 800844c:	683b      	ldr	r3, [r7, #0]
 800844e:	781b      	ldrb	r3, [r3, #0]
 8008450:	f003 030f 	and.w	r3, r3, #15
 8008454:	2101      	movs	r1, #1
 8008456:	fa01 f303 	lsl.w	r3, r1, r3
 800845a:	b29b      	uxth	r3, r3
 800845c:	68f9      	ldr	r1, [r7, #12]
 800845e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008462:	4313      	orrs	r3, r2
 8008464:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	015a      	lsls	r2, r3, #5
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	4413      	add	r3, r2
 800846e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008478:	2b00      	cmp	r3, #0
 800847a:	d155      	bne.n	8008528 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	015a      	lsls	r2, r3, #5
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	4413      	add	r3, r2
 8008484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008488:	681a      	ldr	r2, [r3, #0]
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	689b      	ldr	r3, [r3, #8]
 800848e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008492:	683b      	ldr	r3, [r7, #0]
 8008494:	791b      	ldrb	r3, [r3, #4]
 8008496:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008498:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800849a:	68bb      	ldr	r3, [r7, #8]
 800849c:	059b      	lsls	r3, r3, #22
 800849e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80084a0:	4313      	orrs	r3, r2
 80084a2:	68ba      	ldr	r2, [r7, #8]
 80084a4:	0151      	lsls	r1, r2, #5
 80084a6:	68fa      	ldr	r2, [r7, #12]
 80084a8:	440a      	add	r2, r1
 80084aa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80084ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80084b2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80084b6:	6013      	str	r3, [r2, #0]
 80084b8:	e036      	b.n	8008528 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80084c0:	69da      	ldr	r2, [r3, #28]
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	781b      	ldrb	r3, [r3, #0]
 80084c6:	f003 030f 	and.w	r3, r3, #15
 80084ca:	2101      	movs	r1, #1
 80084cc:	fa01 f303 	lsl.w	r3, r1, r3
 80084d0:	041b      	lsls	r3, r3, #16
 80084d2:	68f9      	ldr	r1, [r7, #12]
 80084d4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80084d8:	4313      	orrs	r3, r2
 80084da:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	015a      	lsls	r2, r3, #5
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	4413      	add	r3, r2
 80084e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d11a      	bne.n	8008528 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	015a      	lsls	r2, r3, #5
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4413      	add	r3, r2
 80084fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	689b      	ldr	r3, [r3, #8]
 8008504:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008508:	683b      	ldr	r3, [r7, #0]
 800850a:	791b      	ldrb	r3, [r3, #4]
 800850c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800850e:	430b      	orrs	r3, r1
 8008510:	4313      	orrs	r3, r2
 8008512:	68ba      	ldr	r2, [r7, #8]
 8008514:	0151      	lsls	r1, r2, #5
 8008516:	68fa      	ldr	r2, [r7, #12]
 8008518:	440a      	add	r2, r1
 800851a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800851e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008522:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008526:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008528:	2300      	movs	r3, #0
}
 800852a:	4618      	mov	r0, r3
 800852c:	3714      	adds	r7, #20
 800852e:	46bd      	mov	sp, r7
 8008530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008534:	4770      	bx	lr
	...

08008538 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008538:	b480      	push	{r7}
 800853a:	b085      	sub	sp, #20
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	781b      	ldrb	r3, [r3, #0]
 800854a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	785b      	ldrb	r3, [r3, #1]
 8008550:	2b01      	cmp	r3, #1
 8008552:	d161      	bne.n	8008618 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	015a      	lsls	r2, r3, #5
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	4413      	add	r3, r2
 800855c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008566:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800856a:	d11f      	bne.n	80085ac <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	015a      	lsls	r2, r3, #5
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	4413      	add	r3, r2
 8008574:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68ba      	ldr	r2, [r7, #8]
 800857c:	0151      	lsls	r1, r2, #5
 800857e:	68fa      	ldr	r2, [r7, #12]
 8008580:	440a      	add	r2, r1
 8008582:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008586:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800858a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	015a      	lsls	r2, r3, #5
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	4413      	add	r3, r2
 8008594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	68ba      	ldr	r2, [r7, #8]
 800859c:	0151      	lsls	r1, r2, #5
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	440a      	add	r2, r1
 80085a2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80085a6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80085aa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	781b      	ldrb	r3, [r3, #0]
 80085b8:	f003 030f 	and.w	r3, r3, #15
 80085bc:	2101      	movs	r1, #1
 80085be:	fa01 f303 	lsl.w	r3, r1, r3
 80085c2:	b29b      	uxth	r3, r3
 80085c4:	43db      	mvns	r3, r3
 80085c6:	68f9      	ldr	r1, [r7, #12]
 80085c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085cc:	4013      	ands	r3, r2
 80085ce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085d6:	69da      	ldr	r2, [r3, #28]
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	f003 030f 	and.w	r3, r3, #15
 80085e0:	2101      	movs	r1, #1
 80085e2:	fa01 f303 	lsl.w	r3, r1, r3
 80085e6:	b29b      	uxth	r3, r3
 80085e8:	43db      	mvns	r3, r3
 80085ea:	68f9      	ldr	r1, [r7, #12]
 80085ec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80085f0:	4013      	ands	r3, r2
 80085f2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	015a      	lsls	r2, r3, #5
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	4413      	add	r3, r2
 80085fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008600:	681a      	ldr	r2, [r3, #0]
 8008602:	68bb      	ldr	r3, [r7, #8]
 8008604:	0159      	lsls	r1, r3, #5
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	440b      	add	r3, r1
 800860a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800860e:	4619      	mov	r1, r3
 8008610:	4b35      	ldr	r3, [pc, #212]	@ (80086e8 <USB_DeactivateEndpoint+0x1b0>)
 8008612:	4013      	ands	r3, r2
 8008614:	600b      	str	r3, [r1, #0]
 8008616:	e060      	b.n	80086da <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	015a      	lsls	r2, r3, #5
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	4413      	add	r3, r2
 8008620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800862a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800862e:	d11f      	bne.n	8008670 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	015a      	lsls	r2, r3, #5
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	4413      	add	r3, r2
 8008638:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	68ba      	ldr	r2, [r7, #8]
 8008640:	0151      	lsls	r1, r2, #5
 8008642:	68fa      	ldr	r2, [r7, #12]
 8008644:	440a      	add	r2, r1
 8008646:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800864a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800864e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008650:	68bb      	ldr	r3, [r7, #8]
 8008652:	015a      	lsls	r2, r3, #5
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	4413      	add	r3, r2
 8008658:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	0151      	lsls	r1, r2, #5
 8008662:	68fa      	ldr	r2, [r7, #12]
 8008664:	440a      	add	r2, r1
 8008666:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800866a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800866e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008676:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	781b      	ldrb	r3, [r3, #0]
 800867c:	f003 030f 	and.w	r3, r3, #15
 8008680:	2101      	movs	r1, #1
 8008682:	fa01 f303 	lsl.w	r3, r1, r3
 8008686:	041b      	lsls	r3, r3, #16
 8008688:	43db      	mvns	r3, r3
 800868a:	68f9      	ldr	r1, [r7, #12]
 800868c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008690:	4013      	ands	r3, r2
 8008692:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800869a:	69da      	ldr	r2, [r3, #28]
 800869c:	683b      	ldr	r3, [r7, #0]
 800869e:	781b      	ldrb	r3, [r3, #0]
 80086a0:	f003 030f 	and.w	r3, r3, #15
 80086a4:	2101      	movs	r1, #1
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	041b      	lsls	r3, r3, #16
 80086ac:	43db      	mvns	r3, r3
 80086ae:	68f9      	ldr	r1, [r7, #12]
 80086b0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80086b4:	4013      	ands	r3, r2
 80086b6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	015a      	lsls	r2, r3, #5
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	4413      	add	r3, r2
 80086c0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	68bb      	ldr	r3, [r7, #8]
 80086c8:	0159      	lsls	r1, r3, #5
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	440b      	add	r3, r1
 80086ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80086d2:	4619      	mov	r1, r3
 80086d4:	4b05      	ldr	r3, [pc, #20]	@ (80086ec <USB_DeactivateEndpoint+0x1b4>)
 80086d6:	4013      	ands	r3, r2
 80086d8:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80086da:	2300      	movs	r3, #0
}
 80086dc:	4618      	mov	r0, r3
 80086de:	3714      	adds	r7, #20
 80086e0:	46bd      	mov	sp, r7
 80086e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e6:	4770      	bx	lr
 80086e8:	ec337800 	.word	0xec337800
 80086ec:	eff37800 	.word	0xeff37800

080086f0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b08a      	sub	sp, #40	@ 0x28
 80086f4:	af02      	add	r7, sp, #8
 80086f6:	60f8      	str	r0, [r7, #12]
 80086f8:	60b9      	str	r1, [r7, #8]
 80086fa:	4613      	mov	r3, r2
 80086fc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086fe:	68fb      	ldr	r3, [r7, #12]
 8008700:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008702:	68bb      	ldr	r3, [r7, #8]
 8008704:	781b      	ldrb	r3, [r3, #0]
 8008706:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	785b      	ldrb	r3, [r3, #1]
 800870c:	2b01      	cmp	r3, #1
 800870e:	f040 817f 	bne.w	8008a10 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008712:	68bb      	ldr	r3, [r7, #8]
 8008714:	691b      	ldr	r3, [r3, #16]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d132      	bne.n	8008780 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800871a:	69bb      	ldr	r3, [r7, #24]
 800871c:	015a      	lsls	r2, r3, #5
 800871e:	69fb      	ldr	r3, [r7, #28]
 8008720:	4413      	add	r3, r2
 8008722:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008726:	691b      	ldr	r3, [r3, #16]
 8008728:	69ba      	ldr	r2, [r7, #24]
 800872a:	0151      	lsls	r1, r2, #5
 800872c:	69fa      	ldr	r2, [r7, #28]
 800872e:	440a      	add	r2, r1
 8008730:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008734:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008738:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800873c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	015a      	lsls	r2, r3, #5
 8008742:	69fb      	ldr	r3, [r7, #28]
 8008744:	4413      	add	r3, r2
 8008746:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800874a:	691b      	ldr	r3, [r3, #16]
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	0151      	lsls	r1, r2, #5
 8008750:	69fa      	ldr	r2, [r7, #28]
 8008752:	440a      	add	r2, r1
 8008754:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008758:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800875c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	015a      	lsls	r2, r3, #5
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	4413      	add	r3, r2
 8008766:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800876a:	691b      	ldr	r3, [r3, #16]
 800876c:	69ba      	ldr	r2, [r7, #24]
 800876e:	0151      	lsls	r1, r2, #5
 8008770:	69fa      	ldr	r2, [r7, #28]
 8008772:	440a      	add	r2, r1
 8008774:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008778:	0cdb      	lsrs	r3, r3, #19
 800877a:	04db      	lsls	r3, r3, #19
 800877c:	6113      	str	r3, [r2, #16]
 800877e:	e097      	b.n	80088b0 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008780:	69bb      	ldr	r3, [r7, #24]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	69fb      	ldr	r3, [r7, #28]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	69ba      	ldr	r2, [r7, #24]
 8008790:	0151      	lsls	r1, r2, #5
 8008792:	69fa      	ldr	r2, [r7, #28]
 8008794:	440a      	add	r2, r1
 8008796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800879a:	0cdb      	lsrs	r3, r3, #19
 800879c:	04db      	lsls	r3, r3, #19
 800879e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	015a      	lsls	r2, r3, #5
 80087a4:	69fb      	ldr	r3, [r7, #28]
 80087a6:	4413      	add	r3, r2
 80087a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	69ba      	ldr	r2, [r7, #24]
 80087b0:	0151      	lsls	r1, r2, #5
 80087b2:	69fa      	ldr	r2, [r7, #28]
 80087b4:	440a      	add	r2, r1
 80087b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087ba:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80087be:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80087c2:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 80087c4:	69bb      	ldr	r3, [r7, #24]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d11a      	bne.n	8008800 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	691a      	ldr	r2, [r3, #16]
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	429a      	cmp	r2, r3
 80087d4:	d903      	bls.n	80087de <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	68bb      	ldr	r3, [r7, #8]
 80087dc:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80087de:	69bb      	ldr	r3, [r7, #24]
 80087e0:	015a      	lsls	r2, r3, #5
 80087e2:	69fb      	ldr	r3, [r7, #28]
 80087e4:	4413      	add	r3, r2
 80087e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80087ea:	691b      	ldr	r3, [r3, #16]
 80087ec:	69ba      	ldr	r2, [r7, #24]
 80087ee:	0151      	lsls	r1, r2, #5
 80087f0:	69fa      	ldr	r2, [r7, #28]
 80087f2:	440a      	add	r2, r1
 80087f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80087f8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80087fc:	6113      	str	r3, [r2, #16]
 80087fe:	e044      	b.n	800888a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008800:	68bb      	ldr	r3, [r7, #8]
 8008802:	691a      	ldr	r2, [r3, #16]
 8008804:	68bb      	ldr	r3, [r7, #8]
 8008806:	689b      	ldr	r3, [r3, #8]
 8008808:	4413      	add	r3, r2
 800880a:	1e5a      	subs	r2, r3, #1
 800880c:	68bb      	ldr	r3, [r7, #8]
 800880e:	689b      	ldr	r3, [r3, #8]
 8008810:	fbb2 f3f3 	udiv	r3, r2, r3
 8008814:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	015a      	lsls	r2, r3, #5
 800881a:	69fb      	ldr	r3, [r7, #28]
 800881c:	4413      	add	r3, r2
 800881e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008822:	691a      	ldr	r2, [r3, #16]
 8008824:	8afb      	ldrh	r3, [r7, #22]
 8008826:	04d9      	lsls	r1, r3, #19
 8008828:	4ba4      	ldr	r3, [pc, #656]	@ (8008abc <USB_EPStartXfer+0x3cc>)
 800882a:	400b      	ands	r3, r1
 800882c:	69b9      	ldr	r1, [r7, #24]
 800882e:	0148      	lsls	r0, r1, #5
 8008830:	69f9      	ldr	r1, [r7, #28]
 8008832:	4401      	add	r1, r0
 8008834:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008838:	4313      	orrs	r3, r2
 800883a:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 800883c:	68bb      	ldr	r3, [r7, #8]
 800883e:	791b      	ldrb	r3, [r3, #4]
 8008840:	2b01      	cmp	r3, #1
 8008842:	d122      	bne.n	800888a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008844:	69bb      	ldr	r3, [r7, #24]
 8008846:	015a      	lsls	r2, r3, #5
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4413      	add	r3, r2
 800884c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008850:	691b      	ldr	r3, [r3, #16]
 8008852:	69ba      	ldr	r2, [r7, #24]
 8008854:	0151      	lsls	r1, r2, #5
 8008856:	69fa      	ldr	r2, [r7, #28]
 8008858:	440a      	add	r2, r1
 800885a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800885e:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008862:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	015a      	lsls	r2, r3, #5
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	4413      	add	r3, r2
 800886c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008870:	691a      	ldr	r2, [r3, #16]
 8008872:	8afb      	ldrh	r3, [r7, #22]
 8008874:	075b      	lsls	r3, r3, #29
 8008876:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800887a:	69b9      	ldr	r1, [r7, #24]
 800887c:	0148      	lsls	r0, r1, #5
 800887e:	69f9      	ldr	r1, [r7, #28]
 8008880:	4401      	add	r1, r0
 8008882:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008886:	4313      	orrs	r3, r2
 8008888:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800888a:	69bb      	ldr	r3, [r7, #24]
 800888c:	015a      	lsls	r2, r3, #5
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	4413      	add	r3, r2
 8008892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008896:	691a      	ldr	r2, [r3, #16]
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	691b      	ldr	r3, [r3, #16]
 800889c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80088a0:	69b9      	ldr	r1, [r7, #24]
 80088a2:	0148      	lsls	r0, r1, #5
 80088a4:	69f9      	ldr	r1, [r7, #28]
 80088a6:	4401      	add	r1, r0
 80088a8:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80088ac:	4313      	orrs	r3, r2
 80088ae:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80088b0:	79fb      	ldrb	r3, [r7, #7]
 80088b2:	2b01      	cmp	r3, #1
 80088b4:	d14b      	bne.n	800894e <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	69db      	ldr	r3, [r3, #28]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d009      	beq.n	80088d2 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80088be:	69bb      	ldr	r3, [r7, #24]
 80088c0:	015a      	lsls	r2, r3, #5
 80088c2:	69fb      	ldr	r3, [r7, #28]
 80088c4:	4413      	add	r3, r2
 80088c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088ca:	461a      	mov	r2, r3
 80088cc:	68bb      	ldr	r3, [r7, #8]
 80088ce:	69db      	ldr	r3, [r3, #28]
 80088d0:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	791b      	ldrb	r3, [r3, #4]
 80088d6:	2b01      	cmp	r3, #1
 80088d8:	d128      	bne.n	800892c <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80088da:	69fb      	ldr	r3, [r7, #28]
 80088dc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d110      	bne.n	800890c <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80088ea:	69bb      	ldr	r3, [r7, #24]
 80088ec:	015a      	lsls	r2, r3, #5
 80088ee:	69fb      	ldr	r3, [r7, #28]
 80088f0:	4413      	add	r3, r2
 80088f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	69ba      	ldr	r2, [r7, #24]
 80088fa:	0151      	lsls	r1, r2, #5
 80088fc:	69fa      	ldr	r2, [r7, #28]
 80088fe:	440a      	add	r2, r1
 8008900:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008904:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008908:	6013      	str	r3, [r2, #0]
 800890a:	e00f      	b.n	800892c <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	015a      	lsls	r2, r3, #5
 8008910:	69fb      	ldr	r3, [r7, #28]
 8008912:	4413      	add	r3, r2
 8008914:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	69ba      	ldr	r2, [r7, #24]
 800891c:	0151      	lsls	r1, r2, #5
 800891e:	69fa      	ldr	r2, [r7, #28]
 8008920:	440a      	add	r2, r1
 8008922:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008926:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800892a:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800892c:	69bb      	ldr	r3, [r7, #24]
 800892e:	015a      	lsls	r2, r3, #5
 8008930:	69fb      	ldr	r3, [r7, #28]
 8008932:	4413      	add	r3, r2
 8008934:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	69ba      	ldr	r2, [r7, #24]
 800893c:	0151      	lsls	r1, r2, #5
 800893e:	69fa      	ldr	r2, [r7, #28]
 8008940:	440a      	add	r2, r1
 8008942:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008946:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	e166      	b.n	8008c1c <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	015a      	lsls	r2, r3, #5
 8008952:	69fb      	ldr	r3, [r7, #28]
 8008954:	4413      	add	r3, r2
 8008956:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	69ba      	ldr	r2, [r7, #24]
 800895e:	0151      	lsls	r1, r2, #5
 8008960:	69fa      	ldr	r2, [r7, #28]
 8008962:	440a      	add	r2, r1
 8008964:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008968:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800896c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	791b      	ldrb	r3, [r3, #4]
 8008972:	2b01      	cmp	r3, #1
 8008974:	d015      	beq.n	80089a2 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	691b      	ldr	r3, [r3, #16]
 800897a:	2b00      	cmp	r3, #0
 800897c:	f000 814e 	beq.w	8008c1c <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008980:	69fb      	ldr	r3, [r7, #28]
 8008982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008986:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	69f9      	ldr	r1, [r7, #28]
 8008998:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800899c:	4313      	orrs	r3, r2
 800899e:	634b      	str	r3, [r1, #52]	@ 0x34
 80089a0:	e13c      	b.n	8008c1c <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d110      	bne.n	80089d4 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	015a      	lsls	r2, r3, #5
 80089b6:	69fb      	ldr	r3, [r7, #28]
 80089b8:	4413      	add	r3, r2
 80089ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69ba      	ldr	r2, [r7, #24]
 80089c2:	0151      	lsls	r1, r2, #5
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	440a      	add	r2, r1
 80089c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089cc:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80089d0:	6013      	str	r3, [r2, #0]
 80089d2:	e00f      	b.n	80089f4 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80089d4:	69bb      	ldr	r3, [r7, #24]
 80089d6:	015a      	lsls	r2, r3, #5
 80089d8:	69fb      	ldr	r3, [r7, #28]
 80089da:	4413      	add	r3, r2
 80089dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	69ba      	ldr	r2, [r7, #24]
 80089e4:	0151      	lsls	r1, r2, #5
 80089e6:	69fa      	ldr	r2, [r7, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089f2:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80089f4:	68bb      	ldr	r3, [r7, #8]
 80089f6:	68d9      	ldr	r1, [r3, #12]
 80089f8:	68bb      	ldr	r3, [r7, #8]
 80089fa:	781a      	ldrb	r2, [r3, #0]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	b298      	uxth	r0, r3
 8008a02:	79fb      	ldrb	r3, [r7, #7]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	4603      	mov	r3, r0
 8008a08:	68f8      	ldr	r0, [r7, #12]
 8008a0a:	f000 f9b9 	bl	8008d80 <USB_WritePacket>
 8008a0e:	e105      	b.n	8008c1c <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008a10:	69bb      	ldr	r3, [r7, #24]
 8008a12:	015a      	lsls	r2, r3, #5
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	4413      	add	r3, r2
 8008a18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a1c:	691b      	ldr	r3, [r3, #16]
 8008a1e:	69ba      	ldr	r2, [r7, #24]
 8008a20:	0151      	lsls	r1, r2, #5
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	440a      	add	r2, r1
 8008a26:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a2a:	0cdb      	lsrs	r3, r3, #19
 8008a2c:	04db      	lsls	r3, r3, #19
 8008a2e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008a30:	69bb      	ldr	r3, [r7, #24]
 8008a32:	015a      	lsls	r2, r3, #5
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	4413      	add	r3, r2
 8008a38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	69ba      	ldr	r2, [r7, #24]
 8008a40:	0151      	lsls	r1, r2, #5
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	440a      	add	r2, r1
 8008a46:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a4a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008a4e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008a52:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008a54:	69bb      	ldr	r3, [r7, #24]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d132      	bne.n	8008ac0 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	691b      	ldr	r3, [r3, #16]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d003      	beq.n	8008a6a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	689a      	ldr	r2, [r3, #8]
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008a6a:	68bb      	ldr	r3, [r7, #8]
 8008a6c:	689a      	ldr	r2, [r3, #8]
 8008a6e:	68bb      	ldr	r3, [r7, #8]
 8008a70:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008a72:	69bb      	ldr	r3, [r7, #24]
 8008a74:	015a      	lsls	r2, r3, #5
 8008a76:	69fb      	ldr	r3, [r7, #28]
 8008a78:	4413      	add	r3, r2
 8008a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a7e:	691a      	ldr	r2, [r3, #16]
 8008a80:	68bb      	ldr	r3, [r7, #8]
 8008a82:	6a1b      	ldr	r3, [r3, #32]
 8008a84:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a88:	69b9      	ldr	r1, [r7, #24]
 8008a8a:	0148      	lsls	r0, r1, #5
 8008a8c:	69f9      	ldr	r1, [r7, #28]
 8008a8e:	4401      	add	r1, r0
 8008a90:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008a94:	4313      	orrs	r3, r2
 8008a96:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008a98:	69bb      	ldr	r3, [r7, #24]
 8008a9a:	015a      	lsls	r2, r3, #5
 8008a9c:	69fb      	ldr	r3, [r7, #28]
 8008a9e:	4413      	add	r3, r2
 8008aa0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008aa4:	691b      	ldr	r3, [r3, #16]
 8008aa6:	69ba      	ldr	r2, [r7, #24]
 8008aa8:	0151      	lsls	r1, r2, #5
 8008aaa:	69fa      	ldr	r2, [r7, #28]
 8008aac:	440a      	add	r2, r1
 8008aae:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ab2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ab6:	6113      	str	r3, [r2, #16]
 8008ab8:	e062      	b.n	8008b80 <USB_EPStartXfer+0x490>
 8008aba:	bf00      	nop
 8008abc:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	691b      	ldr	r3, [r3, #16]
 8008ac4:	2b00      	cmp	r3, #0
 8008ac6:	d123      	bne.n	8008b10 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ad4:	691a      	ldr	r2, [r3, #16]
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	689b      	ldr	r3, [r3, #8]
 8008ada:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ade:	69b9      	ldr	r1, [r7, #24]
 8008ae0:	0148      	lsls	r0, r1, #5
 8008ae2:	69f9      	ldr	r1, [r7, #28]
 8008ae4:	4401      	add	r1, r0
 8008ae6:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008aea:	4313      	orrs	r3, r2
 8008aec:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	69fb      	ldr	r3, [r7, #28]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008afa:	691b      	ldr	r3, [r3, #16]
 8008afc:	69ba      	ldr	r2, [r7, #24]
 8008afe:	0151      	lsls	r1, r2, #5
 8008b00:	69fa      	ldr	r2, [r7, #28]
 8008b02:	440a      	add	r2, r1
 8008b04:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b08:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008b0c:	6113      	str	r3, [r2, #16]
 8008b0e:	e037      	b.n	8008b80 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	691a      	ldr	r2, [r3, #16]
 8008b14:	68bb      	ldr	r3, [r7, #8]
 8008b16:	689b      	ldr	r3, [r3, #8]
 8008b18:	4413      	add	r3, r2
 8008b1a:	1e5a      	subs	r2, r3, #1
 8008b1c:	68bb      	ldr	r3, [r7, #8]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b24:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8008b26:	68bb      	ldr	r3, [r7, #8]
 8008b28:	689b      	ldr	r3, [r3, #8]
 8008b2a:	8afa      	ldrh	r2, [r7, #22]
 8008b2c:	fb03 f202 	mul.w	r2, r3, r2
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008b34:	69bb      	ldr	r3, [r7, #24]
 8008b36:	015a      	lsls	r2, r3, #5
 8008b38:	69fb      	ldr	r3, [r7, #28]
 8008b3a:	4413      	add	r3, r2
 8008b3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b40:	691a      	ldr	r2, [r3, #16]
 8008b42:	8afb      	ldrh	r3, [r7, #22]
 8008b44:	04d9      	lsls	r1, r3, #19
 8008b46:	4b38      	ldr	r3, [pc, #224]	@ (8008c28 <USB_EPStartXfer+0x538>)
 8008b48:	400b      	ands	r3, r1
 8008b4a:	69b9      	ldr	r1, [r7, #24]
 8008b4c:	0148      	lsls	r0, r1, #5
 8008b4e:	69f9      	ldr	r1, [r7, #28]
 8008b50:	4401      	add	r1, r0
 8008b52:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b56:	4313      	orrs	r3, r2
 8008b58:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	015a      	lsls	r2, r3, #5
 8008b5e:	69fb      	ldr	r3, [r7, #28]
 8008b60:	4413      	add	r3, r2
 8008b62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b66:	691a      	ldr	r2, [r3, #16]
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	6a1b      	ldr	r3, [r3, #32]
 8008b6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008b70:	69b9      	ldr	r1, [r7, #24]
 8008b72:	0148      	lsls	r0, r1, #5
 8008b74:	69f9      	ldr	r1, [r7, #28]
 8008b76:	4401      	add	r1, r0
 8008b78:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8008b80:	79fb      	ldrb	r3, [r7, #7]
 8008b82:	2b01      	cmp	r3, #1
 8008b84:	d10d      	bne.n	8008ba2 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	68db      	ldr	r3, [r3, #12]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d009      	beq.n	8008ba2 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	68d9      	ldr	r1, [r3, #12]
 8008b92:	69bb      	ldr	r3, [r7, #24]
 8008b94:	015a      	lsls	r2, r3, #5
 8008b96:	69fb      	ldr	r3, [r7, #28]
 8008b98:	4413      	add	r3, r2
 8008b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b9e:	460a      	mov	r2, r1
 8008ba0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008ba2:	68bb      	ldr	r3, [r7, #8]
 8008ba4:	791b      	ldrb	r3, [r3, #4]
 8008ba6:	2b01      	cmp	r3, #1
 8008ba8:	d128      	bne.n	8008bfc <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb0:	689b      	ldr	r3, [r3, #8]
 8008bb2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	d110      	bne.n	8008bdc <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008bba:	69bb      	ldr	r3, [r7, #24]
 8008bbc:	015a      	lsls	r2, r3, #5
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	4413      	add	r3, r2
 8008bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008bc6:	681b      	ldr	r3, [r3, #0]
 8008bc8:	69ba      	ldr	r2, [r7, #24]
 8008bca:	0151      	lsls	r1, r2, #5
 8008bcc:	69fa      	ldr	r2, [r7, #28]
 8008bce:	440a      	add	r2, r1
 8008bd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bd4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e00f      	b.n	8008bfc <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008bdc:	69bb      	ldr	r3, [r7, #24]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	69ba      	ldr	r2, [r7, #24]
 8008bec:	0151      	lsls	r1, r2, #5
 8008bee:	69fa      	ldr	r2, [r7, #28]
 8008bf0:	440a      	add	r2, r1
 8008bf2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008bf6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008bfa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008bfc:	69bb      	ldr	r3, [r7, #24]
 8008bfe:	015a      	lsls	r2, r3, #5
 8008c00:	69fb      	ldr	r3, [r7, #28]
 8008c02:	4413      	add	r3, r2
 8008c04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	69ba      	ldr	r2, [r7, #24]
 8008c0c:	0151      	lsls	r1, r2, #5
 8008c0e:	69fa      	ldr	r2, [r7, #28]
 8008c10:	440a      	add	r2, r1
 8008c12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008c16:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008c1a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008c1c:	2300      	movs	r3, #0
}
 8008c1e:	4618      	mov	r0, r3
 8008c20:	3720      	adds	r7, #32
 8008c22:	46bd      	mov	sp, r7
 8008c24:	bd80      	pop	{r7, pc}
 8008c26:	bf00      	nop
 8008c28:	1ff80000 	.word	0x1ff80000

08008c2c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b087      	sub	sp, #28
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008c36:	2300      	movs	r3, #0
 8008c38:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8008c3a:	2300      	movs	r3, #0
 8008c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	785b      	ldrb	r3, [r3, #1]
 8008c46:	2b01      	cmp	r3, #1
 8008c48:	d14a      	bne.n	8008ce0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	781b      	ldrb	r3, [r3, #0]
 8008c4e:	015a      	lsls	r2, r3, #5
 8008c50:	693b      	ldr	r3, [r7, #16]
 8008c52:	4413      	add	r3, r2
 8008c54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008c5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008c62:	f040 8086 	bne.w	8008d72 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8008c66:	683b      	ldr	r3, [r7, #0]
 8008c68:	781b      	ldrb	r3, [r3, #0]
 8008c6a:	015a      	lsls	r2, r3, #5
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	4413      	add	r3, r2
 8008c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	683a      	ldr	r2, [r7, #0]
 8008c78:	7812      	ldrb	r2, [r2, #0]
 8008c7a:	0151      	lsls	r1, r2, #5
 8008c7c:	693a      	ldr	r2, [r7, #16]
 8008c7e:	440a      	add	r2, r1
 8008c80:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c84:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008c88:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8008c8a:	683b      	ldr	r3, [r7, #0]
 8008c8c:	781b      	ldrb	r3, [r3, #0]
 8008c8e:	015a      	lsls	r2, r3, #5
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	4413      	add	r3, r2
 8008c94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	683a      	ldr	r2, [r7, #0]
 8008c9c:	7812      	ldrb	r2, [r2, #0]
 8008c9e:	0151      	lsls	r1, r2, #5
 8008ca0:	693a      	ldr	r2, [r7, #16]
 8008ca2:	440a      	add	r2, r1
 8008ca4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ca8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	3301      	adds	r3, #1
 8008cb2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d902      	bls.n	8008cc4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8008cbe:	2301      	movs	r3, #1
 8008cc0:	75fb      	strb	r3, [r7, #23]
          break;
 8008cc2:	e056      	b.n	8008d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8008cc4:	683b      	ldr	r3, [r7, #0]
 8008cc6:	781b      	ldrb	r3, [r3, #0]
 8008cc8:	015a      	lsls	r2, r3, #5
 8008cca:	693b      	ldr	r3, [r7, #16]
 8008ccc:	4413      	add	r3, r2
 8008cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cd8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cdc:	d0e7      	beq.n	8008cae <USB_EPStopXfer+0x82>
 8008cde:	e048      	b.n	8008d72 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	781b      	ldrb	r3, [r3, #0]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf8:	d13b      	bne.n	8008d72 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	693b      	ldr	r3, [r7, #16]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	7812      	ldrb	r2, [r2, #0]
 8008d0e:	0151      	lsls	r1, r2, #5
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	440a      	add	r2, r1
 8008d14:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d18:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008d1c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	015a      	lsls	r2, r3, #5
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	4413      	add	r3, r2
 8008d28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	7812      	ldrb	r2, [r2, #0]
 8008d32:	0151      	lsls	r1, r2, #5
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	440a      	add	r2, r1
 8008d38:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008d3c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d40:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	3301      	adds	r3, #1
 8008d46:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f242 7210 	movw	r2, #10000	@ 0x2710
 8008d4e:	4293      	cmp	r3, r2
 8008d50:	d902      	bls.n	8008d58 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8008d52:	2301      	movs	r3, #1
 8008d54:	75fb      	strb	r3, [r7, #23]
          break;
 8008d56:	e00c      	b.n	8008d72 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	781b      	ldrb	r3, [r3, #0]
 8008d5c:	015a      	lsls	r2, r3, #5
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	4413      	add	r3, r2
 8008d62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008d6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008d70:	d0e7      	beq.n	8008d42 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8008d72:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d74:	4618      	mov	r0, r3
 8008d76:	371c      	adds	r7, #28
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b089      	sub	sp, #36	@ 0x24
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60f8      	str	r0, [r7, #12]
 8008d88:	60b9      	str	r1, [r7, #8]
 8008d8a:	4611      	mov	r1, r2
 8008d8c:	461a      	mov	r2, r3
 8008d8e:	460b      	mov	r3, r1
 8008d90:	71fb      	strb	r3, [r7, #7]
 8008d92:	4613      	mov	r3, r2
 8008d94:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008d9e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d123      	bne.n	8008dee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8008da6:	88bb      	ldrh	r3, [r7, #4]
 8008da8:	3303      	adds	r3, #3
 8008daa:	089b      	lsrs	r3, r3, #2
 8008dac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008dae:	2300      	movs	r3, #0
 8008db0:	61bb      	str	r3, [r7, #24]
 8008db2:	e018      	b.n	8008de6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008db4:	79fb      	ldrb	r3, [r7, #7]
 8008db6:	031a      	lsls	r2, r3, #12
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008dc0:	461a      	mov	r2, r3
 8008dc2:	69fb      	ldr	r3, [r7, #28]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	6013      	str	r3, [r2, #0]
      pSrc++;
 8008dc8:	69fb      	ldr	r3, [r7, #28]
 8008dca:	3301      	adds	r3, #1
 8008dcc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dce:	69fb      	ldr	r3, [r7, #28]
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dd4:	69fb      	ldr	r3, [r7, #28]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008dda:	69fb      	ldr	r3, [r7, #28]
 8008ddc:	3301      	adds	r3, #1
 8008dde:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008de0:	69bb      	ldr	r3, [r7, #24]
 8008de2:	3301      	adds	r3, #1
 8008de4:	61bb      	str	r3, [r7, #24]
 8008de6:	69ba      	ldr	r2, [r7, #24]
 8008de8:	693b      	ldr	r3, [r7, #16]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d3e2      	bcc.n	8008db4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008dee:	2300      	movs	r3, #0
}
 8008df0:	4618      	mov	r0, r3
 8008df2:	3724      	adds	r7, #36	@ 0x24
 8008df4:	46bd      	mov	sp, r7
 8008df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfa:	4770      	bx	lr

08008dfc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008dfc:	b480      	push	{r7}
 8008dfe:	b08b      	sub	sp, #44	@ 0x2c
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	60f8      	str	r0, [r7, #12]
 8008e04:	60b9      	str	r1, [r7, #8]
 8008e06:	4613      	mov	r3, r2
 8008e08:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008e12:	88fb      	ldrh	r3, [r7, #6]
 8008e14:	089b      	lsrs	r3, r3, #2
 8008e16:	b29b      	uxth	r3, r3
 8008e18:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8008e1a:	88fb      	ldrh	r3, [r7, #6]
 8008e1c:	f003 0303 	and.w	r3, r3, #3
 8008e20:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008e22:	2300      	movs	r3, #0
 8008e24:	623b      	str	r3, [r7, #32]
 8008e26:	e014      	b.n	8008e52 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e2e:	681a      	ldr	r2, [r3, #0]
 8008e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e32:	601a      	str	r2, [r3, #0]
    pDest++;
 8008e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e36:	3301      	adds	r3, #1
 8008e38:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e3c:	3301      	adds	r3, #1
 8008e3e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e42:	3301      	adds	r3, #1
 8008e44:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8008e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e48:	3301      	adds	r3, #1
 8008e4a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8008e4c:	6a3b      	ldr	r3, [r7, #32]
 8008e4e:	3301      	adds	r3, #1
 8008e50:	623b      	str	r3, [r7, #32]
 8008e52:	6a3a      	ldr	r2, [r7, #32]
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d3e6      	bcc.n	8008e28 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8008e5a:	8bfb      	ldrh	r3, [r7, #30]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d01e      	beq.n	8008e9e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8008e60:	2300      	movs	r3, #0
 8008e62:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8008e64:	69bb      	ldr	r3, [r7, #24]
 8008e66:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	f107 0310 	add.w	r3, r7, #16
 8008e70:	6812      	ldr	r2, [r2, #0]
 8008e72:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8008e74:	693a      	ldr	r2, [r7, #16]
 8008e76:	6a3b      	ldr	r3, [r7, #32]
 8008e78:	b2db      	uxtb	r3, r3
 8008e7a:	00db      	lsls	r3, r3, #3
 8008e7c:	fa22 f303 	lsr.w	r3, r2, r3
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e84:	701a      	strb	r2, [r3, #0]
      i++;
 8008e86:	6a3b      	ldr	r3, [r7, #32]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	623b      	str	r3, [r7, #32]
      pDest++;
 8008e8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008e8e:	3301      	adds	r3, #1
 8008e90:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8008e92:	8bfb      	ldrh	r3, [r7, #30]
 8008e94:	3b01      	subs	r3, #1
 8008e96:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8008e98:	8bfb      	ldrh	r3, [r7, #30]
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d1ea      	bne.n	8008e74 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	372c      	adds	r7, #44	@ 0x2c
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008eac:	b480      	push	{r7}
 8008eae:	b085      	sub	sp, #20
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	6078      	str	r0, [r7, #4]
 8008eb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008eba:	683b      	ldr	r3, [r7, #0]
 8008ebc:	781b      	ldrb	r3, [r3, #0]
 8008ebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	785b      	ldrb	r3, [r3, #1]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d12c      	bne.n	8008f22 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	db12      	blt.n	8008f00 <USB_EPSetStall+0x54>
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d00f      	beq.n	8008f00 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	015a      	lsls	r2, r3, #5
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	4413      	add	r3, r2
 8008ee8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	68ba      	ldr	r2, [r7, #8]
 8008ef0:	0151      	lsls	r1, r2, #5
 8008ef2:	68fa      	ldr	r2, [r7, #12]
 8008ef4:	440a      	add	r2, r1
 8008ef6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008efa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008efe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	015a      	lsls	r2, r3, #5
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	4413      	add	r3, r2
 8008f08:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	68ba      	ldr	r2, [r7, #8]
 8008f10:	0151      	lsls	r1, r2, #5
 8008f12:	68fa      	ldr	r2, [r7, #12]
 8008f14:	440a      	add	r2, r1
 8008f16:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f1a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e02b      	b.n	8008f7a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008f22:	68bb      	ldr	r3, [r7, #8]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	db12      	blt.n	8008f5a <USB_EPSetStall+0xae>
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d00f      	beq.n	8008f5a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	015a      	lsls	r2, r3, #5
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	4413      	add	r3, r2
 8008f42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	68ba      	ldr	r2, [r7, #8]
 8008f4a:	0151      	lsls	r1, r2, #5
 8008f4c:	68fa      	ldr	r2, [r7, #12]
 8008f4e:	440a      	add	r2, r1
 8008f50:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f58:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	015a      	lsls	r2, r3, #5
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	4413      	add	r3, r2
 8008f62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68ba      	ldr	r2, [r7, #8]
 8008f6a:	0151      	lsls	r1, r2, #5
 8008f6c:	68fa      	ldr	r2, [r7, #12]
 8008f6e:	440a      	add	r2, r1
 8008f70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f74:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8008f78:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008f7a:	2300      	movs	r3, #0
}
 8008f7c:	4618      	mov	r0, r3
 8008f7e:	3714      	adds	r7, #20
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr

08008f88 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008f88:	b480      	push	{r7}
 8008f8a:	b085      	sub	sp, #20
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008f96:	683b      	ldr	r3, [r7, #0]
 8008f98:	781b      	ldrb	r3, [r3, #0]
 8008f9a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	785b      	ldrb	r3, [r3, #1]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d128      	bne.n	8008ff6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	015a      	lsls	r2, r3, #5
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	4413      	add	r3, r2
 8008fac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	68ba      	ldr	r2, [r7, #8]
 8008fb4:	0151      	lsls	r1, r2, #5
 8008fb6:	68fa      	ldr	r2, [r7, #12]
 8008fb8:	440a      	add	r2, r1
 8008fba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fbe:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8008fc2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	791b      	ldrb	r3, [r3, #4]
 8008fc8:	2b03      	cmp	r3, #3
 8008fca:	d003      	beq.n	8008fd4 <USB_EPClearStall+0x4c>
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	791b      	ldrb	r3, [r3, #4]
 8008fd0:	2b02      	cmp	r3, #2
 8008fd2:	d138      	bne.n	8009046 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	68ba      	ldr	r2, [r7, #8]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	68fa      	ldr	r2, [r7, #12]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008ff2:	6013      	str	r3, [r2, #0]
 8008ff4:	e027      	b.n	8009046 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	015a      	lsls	r2, r3, #5
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	4413      	add	r3, r2
 8008ffe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	68ba      	ldr	r2, [r7, #8]
 8009006:	0151      	lsls	r1, r2, #5
 8009008:	68fa      	ldr	r2, [r7, #12]
 800900a:	440a      	add	r2, r1
 800900c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009010:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009014:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009016:	683b      	ldr	r3, [r7, #0]
 8009018:	791b      	ldrb	r3, [r3, #4]
 800901a:	2b03      	cmp	r3, #3
 800901c:	d003      	beq.n	8009026 <USB_EPClearStall+0x9e>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	791b      	ldrb	r3, [r3, #4]
 8009022:	2b02      	cmp	r3, #2
 8009024:	d10f      	bne.n	8009046 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009026:	68bb      	ldr	r3, [r7, #8]
 8009028:	015a      	lsls	r2, r3, #5
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	4413      	add	r3, r2
 800902e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009032:	681b      	ldr	r3, [r3, #0]
 8009034:	68ba      	ldr	r2, [r7, #8]
 8009036:	0151      	lsls	r1, r2, #5
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	440a      	add	r2, r1
 800903c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009044:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	3714      	adds	r7, #20
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	460b      	mov	r3, r1
 800905e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009072:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009076:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800907e:	681a      	ldr	r2, [r3, #0]
 8009080:	78fb      	ldrb	r3, [r7, #3]
 8009082:	011b      	lsls	r3, r3, #4
 8009084:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009088:	68f9      	ldr	r1, [r7, #12]
 800908a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800908e:	4313      	orrs	r3, r2
 8009090:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3714      	adds	r7, #20
 8009098:	46bd      	mov	sp, r7
 800909a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909e:	4770      	bx	lr

080090a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090a0:	b480      	push	{r7}
 80090a2:	b085      	sub	sp, #20
 80090a4:	af00      	add	r7, sp, #0
 80090a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	68fa      	ldr	r2, [r7, #12]
 80090b6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090ba:	f023 0303 	bic.w	r3, r3, #3
 80090be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c6:	685b      	ldr	r3, [r3, #4]
 80090c8:	68fa      	ldr	r2, [r7, #12]
 80090ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80090ce:	f023 0302 	bic.w	r3, r3, #2
 80090d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80090d4:	2300      	movs	r3, #0
}
 80090d6:	4618      	mov	r0, r3
 80090d8:	3714      	adds	r7, #20
 80090da:	46bd      	mov	sp, r7
 80090dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090e0:	4770      	bx	lr

080090e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80090e2:	b480      	push	{r7}
 80090e4:	b085      	sub	sp, #20
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	68fa      	ldr	r2, [r7, #12]
 80090f8:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80090fc:	f023 0303 	bic.w	r3, r3, #3
 8009100:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	68fa      	ldr	r2, [r7, #12]
 800910c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009110:	f043 0302 	orr.w	r3, r3, #2
 8009114:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009116:	2300      	movs	r3, #0
}
 8009118:	4618      	mov	r0, r3
 800911a:	3714      	adds	r7, #20
 800911c:	46bd      	mov	sp, r7
 800911e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009122:	4770      	bx	lr

08009124 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009124:	b480      	push	{r7}
 8009126:	b085      	sub	sp, #20
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	695b      	ldr	r3, [r3, #20]
 8009130:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	68fa      	ldr	r2, [r7, #12]
 8009138:	4013      	ands	r3, r2
 800913a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800913c:	68fb      	ldr	r3, [r7, #12]
}
 800913e:	4618      	mov	r0, r3
 8009140:	3714      	adds	r7, #20
 8009142:	46bd      	mov	sp, r7
 8009144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009148:	4770      	bx	lr

0800914a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800914a:	b480      	push	{r7}
 800914c:	b085      	sub	sp, #20
 800914e:	af00      	add	r7, sp, #0
 8009150:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800915c:	699b      	ldr	r3, [r3, #24]
 800915e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	68ba      	ldr	r2, [r7, #8]
 800916a:	4013      	ands	r3, r2
 800916c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	0c1b      	lsrs	r3, r3, #16
}
 8009172:	4618      	mov	r0, r3
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr

0800917e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800917e:	b480      	push	{r7}
 8009180:	b085      	sub	sp, #20
 8009182:	af00      	add	r7, sp, #0
 8009184:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009190:	699b      	ldr	r3, [r3, #24]
 8009192:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800919a:	69db      	ldr	r3, [r3, #28]
 800919c:	68ba      	ldr	r2, [r7, #8]
 800919e:	4013      	ands	r3, r2
 80091a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80091a2:	68bb      	ldr	r3, [r7, #8]
 80091a4:	b29b      	uxth	r3, r3
}
 80091a6:	4618      	mov	r0, r3
 80091a8:	3714      	adds	r7, #20
 80091aa:	46bd      	mov	sp, r7
 80091ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b0:	4770      	bx	lr

080091b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091b2:	b480      	push	{r7}
 80091b4:	b085      	sub	sp, #20
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80091c2:	78fb      	ldrb	r3, [r7, #3]
 80091c4:	015a      	lsls	r2, r3, #5
 80091c6:	68fb      	ldr	r3, [r7, #12]
 80091c8:	4413      	add	r3, r2
 80091ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d8:	695b      	ldr	r3, [r3, #20]
 80091da:	68ba      	ldr	r2, [r7, #8]
 80091dc:	4013      	ands	r3, r2
 80091de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80091e0:	68bb      	ldr	r3, [r7, #8]
}
 80091e2:	4618      	mov	r0, r3
 80091e4:	3714      	adds	r7, #20
 80091e6:	46bd      	mov	sp, r7
 80091e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ec:	4770      	bx	lr

080091ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80091ee:	b480      	push	{r7}
 80091f0:	b087      	sub	sp, #28
 80091f2:	af00      	add	r7, sp, #0
 80091f4:	6078      	str	r0, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009204:	691b      	ldr	r3, [r3, #16]
 8009206:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009208:	697b      	ldr	r3, [r7, #20]
 800920a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800920e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009210:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009212:	78fb      	ldrb	r3, [r7, #3]
 8009214:	f003 030f 	and.w	r3, r3, #15
 8009218:	68fa      	ldr	r2, [r7, #12]
 800921a:	fa22 f303 	lsr.w	r3, r2, r3
 800921e:	01db      	lsls	r3, r3, #7
 8009220:	b2db      	uxtb	r3, r3
 8009222:	693a      	ldr	r2, [r7, #16]
 8009224:	4313      	orrs	r3, r2
 8009226:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009228:	78fb      	ldrb	r3, [r7, #3]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	697b      	ldr	r3, [r7, #20]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009234:	689b      	ldr	r3, [r3, #8]
 8009236:	693a      	ldr	r2, [r7, #16]
 8009238:	4013      	ands	r3, r2
 800923a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800923c:	68bb      	ldr	r3, [r7, #8]
}
 800923e:	4618      	mov	r0, r3
 8009240:	371c      	adds	r7, #28
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr

0800924a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800924a:	b480      	push	{r7}
 800924c:	b083      	sub	sp, #12
 800924e:	af00      	add	r7, sp, #0
 8009250:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	695b      	ldr	r3, [r3, #20]
 8009256:	f003 0301 	and.w	r3, r3, #1
}
 800925a:	4618      	mov	r0, r3
 800925c:	370c      	adds	r7, #12
 800925e:	46bd      	mov	sp, r7
 8009260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009264:	4770      	bx	lr

08009266 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009266:	b480      	push	{r7}
 8009268:	b085      	sub	sp, #20
 800926a:	af00      	add	r7, sp, #0
 800926c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	68fa      	ldr	r2, [r7, #12]
 800927c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009280:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009284:	f023 0307 	bic.w	r3, r3, #7
 8009288:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	68fa      	ldr	r2, [r7, #12]
 8009294:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800929c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800929e:	2300      	movs	r3, #0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3714      	adds	r7, #20
 80092a4:	46bd      	mov	sp, r7
 80092a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092aa:	4770      	bx	lr

080092ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	60f8      	str	r0, [r7, #12]
 80092b4:	460b      	mov	r3, r1
 80092b6:	607a      	str	r2, [r7, #4]
 80092b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	333c      	adds	r3, #60	@ 0x3c
 80092c2:	3304      	adds	r3, #4
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	4a26      	ldr	r2, [pc, #152]	@ (8009364 <USB_EP0_OutStart+0xb8>)
 80092cc:	4293      	cmp	r3, r2
 80092ce:	d90a      	bls.n	80092e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092dc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092e0:	d101      	bne.n	80092e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80092e2:	2300      	movs	r3, #0
 80092e4:	e037      	b.n	8009356 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80092e6:	697b      	ldr	r3, [r7, #20]
 80092e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ec:	461a      	mov	r2, r3
 80092ee:	2300      	movs	r3, #0
 80092f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80092f2:	697b      	ldr	r3, [r7, #20]
 80092f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f8:	691b      	ldr	r3, [r3, #16]
 80092fa:	697a      	ldr	r2, [r7, #20]
 80092fc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009300:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009304:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009306:	697b      	ldr	r3, [r7, #20]
 8009308:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800930c:	691b      	ldr	r3, [r3, #16]
 800930e:	697a      	ldr	r2, [r7, #20]
 8009310:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009314:	f043 0318 	orr.w	r3, r3, #24
 8009318:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800931a:	697b      	ldr	r3, [r7, #20]
 800931c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009320:	691b      	ldr	r3, [r3, #16]
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009328:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800932c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800932e:	7afb      	ldrb	r3, [r7, #11]
 8009330:	2b01      	cmp	r3, #1
 8009332:	d10f      	bne.n	8009354 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009334:	697b      	ldr	r3, [r7, #20]
 8009336:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800933a:	461a      	mov	r2, r3
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8009340:	697b      	ldr	r3, [r7, #20]
 8009342:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	697a      	ldr	r2, [r7, #20]
 800934a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800934e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8009352:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009354:	2300      	movs	r3, #0
}
 8009356:	4618      	mov	r0, r3
 8009358:	371c      	adds	r7, #28
 800935a:	46bd      	mov	sp, r7
 800935c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009360:	4770      	bx	lr
 8009362:	bf00      	nop
 8009364:	4f54300a 	.word	0x4f54300a

08009368 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009368:	b480      	push	{r7}
 800936a:	b085      	sub	sp, #20
 800936c:	af00      	add	r7, sp, #0
 800936e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009370:	2300      	movs	r3, #0
 8009372:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	3301      	adds	r3, #1
 8009378:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009380:	d901      	bls.n	8009386 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009382:	2303      	movs	r3, #3
 8009384:	e01b      	b.n	80093be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	691b      	ldr	r3, [r3, #16]
 800938a:	2b00      	cmp	r3, #0
 800938c:	daf2      	bge.n	8009374 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800938e:	2300      	movs	r3, #0
 8009390:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	691b      	ldr	r3, [r3, #16]
 8009396:	f043 0201 	orr.w	r2, r3, #1
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	3301      	adds	r3, #1
 80093a2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093aa:	d901      	bls.n	80093b0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80093ac:	2303      	movs	r3, #3
 80093ae:	e006      	b.n	80093be <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	691b      	ldr	r3, [r3, #16]
 80093b4:	f003 0301 	and.w	r3, r3, #1
 80093b8:	2b01      	cmp	r3, #1
 80093ba:	d0f0      	beq.n	800939e <USB_CoreReset+0x36>

  return HAL_OK;
 80093bc:	2300      	movs	r3, #0
}
 80093be:	4618      	mov	r0, r3
 80093c0:	3714      	adds	r7, #20
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
	...

080093cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80093cc:	b580      	push	{r7, lr}
 80093ce:	b084      	sub	sp, #16
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	6078      	str	r0, [r7, #4]
 80093d4:	460b      	mov	r3, r1
 80093d6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80093d8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 80093dc:	f002 fc2e 	bl	800bc3c <USBD_static_malloc>
 80093e0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d109      	bne.n	80093fc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	32b0      	adds	r2, #176	@ 0xb0
 80093f2:	2100      	movs	r1, #0
 80093f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80093f8:	2302      	movs	r3, #2
 80093fa:	e0d4      	b.n	80095a6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 80093fc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009400:	2100      	movs	r1, #0
 8009402:	68f8      	ldr	r0, [r7, #12]
 8009404:	f002 fd9e 	bl	800bf44 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	32b0      	adds	r2, #176	@ 0xb0
 8009412:	68f9      	ldr	r1, [r7, #12]
 8009414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	32b0      	adds	r2, #176	@ 0xb0
 8009422:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	7c1b      	ldrb	r3, [r3, #16]
 8009430:	2b00      	cmp	r3, #0
 8009432:	d138      	bne.n	80094a6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8009434:	4b5e      	ldr	r3, [pc, #376]	@ (80095b0 <USBD_CDC_Init+0x1e4>)
 8009436:	7819      	ldrb	r1, [r3, #0]
 8009438:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800943c:	2202      	movs	r2, #2
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f002 fad9 	bl	800b9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8009444:	4b5a      	ldr	r3, [pc, #360]	@ (80095b0 <USBD_CDC_Init+0x1e4>)
 8009446:	781b      	ldrb	r3, [r3, #0]
 8009448:	f003 020f 	and.w	r2, r3, #15
 800944c:	6879      	ldr	r1, [r7, #4]
 800944e:	4613      	mov	r3, r2
 8009450:	009b      	lsls	r3, r3, #2
 8009452:	4413      	add	r3, r2
 8009454:	009b      	lsls	r3, r3, #2
 8009456:	440b      	add	r3, r1
 8009458:	3324      	adds	r3, #36	@ 0x24
 800945a:	2201      	movs	r2, #1
 800945c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800945e:	4b55      	ldr	r3, [pc, #340]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 8009460:	7819      	ldrb	r1, [r3, #0]
 8009462:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009466:	2202      	movs	r2, #2
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f002 fac4 	bl	800b9f6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800946e:	4b51      	ldr	r3, [pc, #324]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	f003 020f 	and.w	r2, r3, #15
 8009476:	6879      	ldr	r1, [r7, #4]
 8009478:	4613      	mov	r3, r2
 800947a:	009b      	lsls	r3, r3, #2
 800947c:	4413      	add	r3, r2
 800947e:	009b      	lsls	r3, r3, #2
 8009480:	440b      	add	r3, r1
 8009482:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009486:	2201      	movs	r2, #1
 8009488:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800948a:	4b4b      	ldr	r3, [pc, #300]	@ (80095b8 <USBD_CDC_Init+0x1ec>)
 800948c:	781b      	ldrb	r3, [r3, #0]
 800948e:	f003 020f 	and.w	r2, r3, #15
 8009492:	6879      	ldr	r1, [r7, #4]
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	440b      	add	r3, r1
 800949e:	3326      	adds	r3, #38	@ 0x26
 80094a0:	2210      	movs	r2, #16
 80094a2:	801a      	strh	r2, [r3, #0]
 80094a4:	e035      	b.n	8009512 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80094a6:	4b42      	ldr	r3, [pc, #264]	@ (80095b0 <USBD_CDC_Init+0x1e4>)
 80094a8:	7819      	ldrb	r1, [r3, #0]
 80094aa:	2340      	movs	r3, #64	@ 0x40
 80094ac:	2202      	movs	r2, #2
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f002 faa1 	bl	800b9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80094b4:	4b3e      	ldr	r3, [pc, #248]	@ (80095b0 <USBD_CDC_Init+0x1e4>)
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	f003 020f 	and.w	r2, r3, #15
 80094bc:	6879      	ldr	r1, [r7, #4]
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	4413      	add	r3, r2
 80094c4:	009b      	lsls	r3, r3, #2
 80094c6:	440b      	add	r3, r1
 80094c8:	3324      	adds	r3, #36	@ 0x24
 80094ca:	2201      	movs	r2, #1
 80094cc:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80094ce:	4b39      	ldr	r3, [pc, #228]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 80094d0:	7819      	ldrb	r1, [r3, #0]
 80094d2:	2340      	movs	r3, #64	@ 0x40
 80094d4:	2202      	movs	r2, #2
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	f002 fa8d 	bl	800b9f6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80094dc:	4b35      	ldr	r3, [pc, #212]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	f003 020f 	and.w	r2, r3, #15
 80094e4:	6879      	ldr	r1, [r7, #4]
 80094e6:	4613      	mov	r3, r2
 80094e8:	009b      	lsls	r3, r3, #2
 80094ea:	4413      	add	r3, r2
 80094ec:	009b      	lsls	r3, r3, #2
 80094ee:	440b      	add	r3, r1
 80094f0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80094f4:	2201      	movs	r2, #1
 80094f6:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80094f8:	4b2f      	ldr	r3, [pc, #188]	@ (80095b8 <USBD_CDC_Init+0x1ec>)
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 020f 	and.w	r2, r3, #15
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	4613      	mov	r3, r2
 8009504:	009b      	lsls	r3, r3, #2
 8009506:	4413      	add	r3, r2
 8009508:	009b      	lsls	r3, r3, #2
 800950a:	440b      	add	r3, r1
 800950c:	3326      	adds	r3, #38	@ 0x26
 800950e:	2210      	movs	r2, #16
 8009510:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009512:	4b29      	ldr	r3, [pc, #164]	@ (80095b8 <USBD_CDC_Init+0x1ec>)
 8009514:	7819      	ldrb	r1, [r3, #0]
 8009516:	2308      	movs	r3, #8
 8009518:	2203      	movs	r2, #3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f002 fa6b 	bl	800b9f6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009520:	4b25      	ldr	r3, [pc, #148]	@ (80095b8 <USBD_CDC_Init+0x1ec>)
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	f003 020f 	and.w	r2, r3, #15
 8009528:	6879      	ldr	r1, [r7, #4]
 800952a:	4613      	mov	r3, r2
 800952c:	009b      	lsls	r3, r3, #2
 800952e:	4413      	add	r3, r2
 8009530:	009b      	lsls	r3, r3, #2
 8009532:	440b      	add	r3, r1
 8009534:	3324      	adds	r3, #36	@ 0x24
 8009536:	2201      	movs	r2, #1
 8009538:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	2200      	movs	r2, #0
 800953e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009548:	687a      	ldr	r2, [r7, #4]
 800954a:	33b0      	adds	r3, #176	@ 0xb0
 800954c:	009b      	lsls	r3, r3, #2
 800954e:	4413      	add	r3, r2
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009556:	68fb      	ldr	r3, [r7, #12]
 8009558:	2200      	movs	r2, #0
 800955a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	2200      	movs	r2, #0
 8009562:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800956c:	2b00      	cmp	r3, #0
 800956e:	d101      	bne.n	8009574 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009570:	2302      	movs	r3, #2
 8009572:	e018      	b.n	80095a6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	7c1b      	ldrb	r3, [r3, #16]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d10a      	bne.n	8009592 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800957c:	4b0d      	ldr	r3, [pc, #52]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 800957e:	7819      	ldrb	r1, [r3, #0]
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009586:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	f002 fb22 	bl	800bbd4 <USBD_LL_PrepareReceive>
 8009590:	e008      	b.n	80095a4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009592:	4b08      	ldr	r3, [pc, #32]	@ (80095b4 <USBD_CDC_Init+0x1e8>)
 8009594:	7819      	ldrb	r1, [r3, #0]
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800959c:	2340      	movs	r3, #64	@ 0x40
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f002 fb18 	bl	800bbd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80095a4:	2300      	movs	r3, #0
}
 80095a6:	4618      	mov	r0, r3
 80095a8:	3710      	adds	r7, #16
 80095aa:	46bd      	mov	sp, r7
 80095ac:	bd80      	pop	{r7, pc}
 80095ae:	bf00      	nop
 80095b0:	200000cf 	.word	0x200000cf
 80095b4:	200000d0 	.word	0x200000d0
 80095b8:	200000d1 	.word	0x200000d1

080095bc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80095bc:	b580      	push	{r7, lr}
 80095be:	b082      	sub	sp, #8
 80095c0:	af00      	add	r7, sp, #0
 80095c2:	6078      	str	r0, [r7, #4]
 80095c4:	460b      	mov	r3, r1
 80095c6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80095c8:	4b3a      	ldr	r3, [pc, #232]	@ (80096b4 <USBD_CDC_DeInit+0xf8>)
 80095ca:	781b      	ldrb	r3, [r3, #0]
 80095cc:	4619      	mov	r1, r3
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f002 fa37 	bl	800ba42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80095d4:	4b37      	ldr	r3, [pc, #220]	@ (80096b4 <USBD_CDC_DeInit+0xf8>)
 80095d6:	781b      	ldrb	r3, [r3, #0]
 80095d8:	f003 020f 	and.w	r2, r3, #15
 80095dc:	6879      	ldr	r1, [r7, #4]
 80095de:	4613      	mov	r3, r2
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	009b      	lsls	r3, r3, #2
 80095e6:	440b      	add	r3, r1
 80095e8:	3324      	adds	r3, #36	@ 0x24
 80095ea:	2200      	movs	r2, #0
 80095ec:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 80095ee:	4b32      	ldr	r3, [pc, #200]	@ (80096b8 <USBD_CDC_DeInit+0xfc>)
 80095f0:	781b      	ldrb	r3, [r3, #0]
 80095f2:	4619      	mov	r1, r3
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f002 fa24 	bl	800ba42 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 80095fa:	4b2f      	ldr	r3, [pc, #188]	@ (80096b8 <USBD_CDC_DeInit+0xfc>)
 80095fc:	781b      	ldrb	r3, [r3, #0]
 80095fe:	f003 020f 	and.w	r2, r3, #15
 8009602:	6879      	ldr	r1, [r7, #4]
 8009604:	4613      	mov	r3, r2
 8009606:	009b      	lsls	r3, r3, #2
 8009608:	4413      	add	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	440b      	add	r3, r1
 800960e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8009612:	2200      	movs	r2, #0
 8009614:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009616:	4b29      	ldr	r3, [pc, #164]	@ (80096bc <USBD_CDC_DeInit+0x100>)
 8009618:	781b      	ldrb	r3, [r3, #0]
 800961a:	4619      	mov	r1, r3
 800961c:	6878      	ldr	r0, [r7, #4]
 800961e:	f002 fa10 	bl	800ba42 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009622:	4b26      	ldr	r3, [pc, #152]	@ (80096bc <USBD_CDC_DeInit+0x100>)
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	f003 020f 	and.w	r2, r3, #15
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	009b      	lsls	r3, r3, #2
 8009630:	4413      	add	r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	3324      	adds	r3, #36	@ 0x24
 8009638:	2200      	movs	r2, #0
 800963a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800963c:	4b1f      	ldr	r3, [pc, #124]	@ (80096bc <USBD_CDC_DeInit+0x100>)
 800963e:	781b      	ldrb	r3, [r3, #0]
 8009640:	f003 020f 	and.w	r2, r3, #15
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	4613      	mov	r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	4413      	add	r3, r2
 800964c:	009b      	lsls	r3, r3, #2
 800964e:	440b      	add	r3, r1
 8009650:	3326      	adds	r3, #38	@ 0x26
 8009652:	2200      	movs	r2, #0
 8009654:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	32b0      	adds	r2, #176	@ 0xb0
 8009660:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009664:	2b00      	cmp	r3, #0
 8009666:	d01f      	beq.n	80096a8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	33b0      	adds	r3, #176	@ 0xb0
 8009672:	009b      	lsls	r3, r3, #2
 8009674:	4413      	add	r3, r2
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	685b      	ldr	r3, [r3, #4]
 800967a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	32b0      	adds	r2, #176	@ 0xb0
 8009686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800968a:	4618      	mov	r0, r3
 800968c:	f002 fae4 	bl	800bc58 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	32b0      	adds	r2, #176	@ 0xb0
 800969a:	2100      	movs	r1, #0
 800969c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	2200      	movs	r2, #0
 80096a4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 80096a8:	2300      	movs	r3, #0
}
 80096aa:	4618      	mov	r0, r3
 80096ac:	3708      	adds	r7, #8
 80096ae:	46bd      	mov	sp, r7
 80096b0:	bd80      	pop	{r7, pc}
 80096b2:	bf00      	nop
 80096b4:	200000cf 	.word	0x200000cf
 80096b8:	200000d0 	.word	0x200000d0
 80096bc:	200000d1 	.word	0x200000d1

080096c0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
 80096c8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	32b0      	adds	r2, #176	@ 0xb0
 80096d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80096d8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80096da:	2300      	movs	r3, #0
 80096dc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80096de:	2300      	movs	r3, #0
 80096e0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80096e2:	2300      	movs	r3, #0
 80096e4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80096e6:	693b      	ldr	r3, [r7, #16]
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	d101      	bne.n	80096f0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 80096ec:	2303      	movs	r3, #3
 80096ee:	e0bf      	b.n	8009870 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80096f0:	683b      	ldr	r3, [r7, #0]
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d050      	beq.n	800979e <USBD_CDC_Setup+0xde>
 80096fc:	2b20      	cmp	r3, #32
 80096fe:	f040 80af 	bne.w	8009860 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	88db      	ldrh	r3, [r3, #6]
 8009706:	2b00      	cmp	r3, #0
 8009708:	d03a      	beq.n	8009780 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800970a:	683b      	ldr	r3, [r7, #0]
 800970c:	781b      	ldrb	r3, [r3, #0]
 800970e:	b25b      	sxtb	r3, r3
 8009710:	2b00      	cmp	r3, #0
 8009712:	da1b      	bge.n	800974c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800971a:	687a      	ldr	r2, [r7, #4]
 800971c:	33b0      	adds	r3, #176	@ 0xb0
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	4413      	add	r3, r2
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	689b      	ldr	r3, [r3, #8]
 8009726:	683a      	ldr	r2, [r7, #0]
 8009728:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800972a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	88d2      	ldrh	r2, [r2, #6]
 8009730:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009732:	683b      	ldr	r3, [r7, #0]
 8009734:	88db      	ldrh	r3, [r3, #6]
 8009736:	2b07      	cmp	r3, #7
 8009738:	bf28      	it	cs
 800973a:	2307      	movcs	r3, #7
 800973c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800973e:	693b      	ldr	r3, [r7, #16]
 8009740:	89fa      	ldrh	r2, [r7, #14]
 8009742:	4619      	mov	r1, r3
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f001 fd53 	bl	800b1f0 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800974a:	e090      	b.n	800986e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	785a      	ldrb	r2, [r3, #1]
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009756:	683b      	ldr	r3, [r7, #0]
 8009758:	88db      	ldrh	r3, [r3, #6]
 800975a:	2b3f      	cmp	r3, #63	@ 0x3f
 800975c:	d803      	bhi.n	8009766 <USBD_CDC_Setup+0xa6>
 800975e:	683b      	ldr	r3, [r7, #0]
 8009760:	88db      	ldrh	r3, [r3, #6]
 8009762:	b2da      	uxtb	r2, r3
 8009764:	e000      	b.n	8009768 <USBD_CDC_Setup+0xa8>
 8009766:	2240      	movs	r2, #64	@ 0x40
 8009768:	693b      	ldr	r3, [r7, #16]
 800976a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800976e:	6939      	ldr	r1, [r7, #16]
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009776:	461a      	mov	r2, r3
 8009778:	6878      	ldr	r0, [r7, #4]
 800977a:	f001 fd65 	bl	800b248 <USBD_CtlPrepareRx>
      break;
 800977e:	e076      	b.n	800986e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009786:	687a      	ldr	r2, [r7, #4]
 8009788:	33b0      	adds	r3, #176	@ 0xb0
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	685b      	ldr	r3, [r3, #4]
 8009790:	689b      	ldr	r3, [r3, #8]
 8009792:	683a      	ldr	r2, [r7, #0]
 8009794:	7850      	ldrb	r0, [r2, #1]
 8009796:	2200      	movs	r2, #0
 8009798:	6839      	ldr	r1, [r7, #0]
 800979a:	4798      	blx	r3
      break;
 800979c:	e067      	b.n	800986e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	785b      	ldrb	r3, [r3, #1]
 80097a2:	2b0b      	cmp	r3, #11
 80097a4:	d851      	bhi.n	800984a <USBD_CDC_Setup+0x18a>
 80097a6:	a201      	add	r2, pc, #4	@ (adr r2, 80097ac <USBD_CDC_Setup+0xec>)
 80097a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80097ac:	080097dd 	.word	0x080097dd
 80097b0:	08009859 	.word	0x08009859
 80097b4:	0800984b 	.word	0x0800984b
 80097b8:	0800984b 	.word	0x0800984b
 80097bc:	0800984b 	.word	0x0800984b
 80097c0:	0800984b 	.word	0x0800984b
 80097c4:	0800984b 	.word	0x0800984b
 80097c8:	0800984b 	.word	0x0800984b
 80097cc:	0800984b 	.word	0x0800984b
 80097d0:	0800984b 	.word	0x0800984b
 80097d4:	08009807 	.word	0x08009807
 80097d8:	08009831 	.word	0x08009831
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80097e2:	b2db      	uxtb	r3, r3
 80097e4:	2b03      	cmp	r3, #3
 80097e6:	d107      	bne.n	80097f8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80097e8:	f107 030a 	add.w	r3, r7, #10
 80097ec:	2202      	movs	r2, #2
 80097ee:	4619      	mov	r1, r3
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f001 fcfd 	bl	800b1f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80097f6:	e032      	b.n	800985e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80097f8:	6839      	ldr	r1, [r7, #0]
 80097fa:	6878      	ldr	r0, [r7, #4]
 80097fc:	f001 fc7b 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009800:	2303      	movs	r3, #3
 8009802:	75fb      	strb	r3, [r7, #23]
          break;
 8009804:	e02b      	b.n	800985e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b03      	cmp	r3, #3
 8009810:	d107      	bne.n	8009822 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009812:	f107 030d 	add.w	r3, r7, #13
 8009816:	2201      	movs	r2, #1
 8009818:	4619      	mov	r1, r3
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fce8 	bl	800b1f0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009820:	e01d      	b.n	800985e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009822:	6839      	ldr	r1, [r7, #0]
 8009824:	6878      	ldr	r0, [r7, #4]
 8009826:	f001 fc66 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 800982a:	2303      	movs	r3, #3
 800982c:	75fb      	strb	r3, [r7, #23]
          break;
 800982e:	e016      	b.n	800985e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b03      	cmp	r3, #3
 800983a:	d00f      	beq.n	800985c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800983c:	6839      	ldr	r1, [r7, #0]
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fc59 	bl	800b0f6 <USBD_CtlError>
            ret = USBD_FAIL;
 8009844:	2303      	movs	r3, #3
 8009846:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009848:	e008      	b.n	800985c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800984a:	6839      	ldr	r1, [r7, #0]
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f001 fc52 	bl	800b0f6 <USBD_CtlError>
          ret = USBD_FAIL;
 8009852:	2303      	movs	r3, #3
 8009854:	75fb      	strb	r3, [r7, #23]
          break;
 8009856:	e002      	b.n	800985e <USBD_CDC_Setup+0x19e>
          break;
 8009858:	bf00      	nop
 800985a:	e008      	b.n	800986e <USBD_CDC_Setup+0x1ae>
          break;
 800985c:	bf00      	nop
      }
      break;
 800985e:	e006      	b.n	800986e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009860:	6839      	ldr	r1, [r7, #0]
 8009862:	6878      	ldr	r0, [r7, #4]
 8009864:	f001 fc47 	bl	800b0f6 <USBD_CtlError>
      ret = USBD_FAIL;
 8009868:	2303      	movs	r3, #3
 800986a:	75fb      	strb	r3, [r7, #23]
      break;
 800986c:	bf00      	nop
  }

  return (uint8_t)ret;
 800986e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009870:	4618      	mov	r0, r3
 8009872:	3718      	adds	r7, #24
 8009874:	46bd      	mov	sp, r7
 8009876:	bd80      	pop	{r7, pc}

08009878 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009878:	b580      	push	{r7, lr}
 800987a:	b084      	sub	sp, #16
 800987c:	af00      	add	r7, sp, #0
 800987e:	6078      	str	r0, [r7, #4]
 8009880:	460b      	mov	r3, r1
 8009882:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800988a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	32b0      	adds	r2, #176	@ 0xb0
 8009896:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800989a:	2b00      	cmp	r3, #0
 800989c:	d101      	bne.n	80098a2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800989e:	2303      	movs	r3, #3
 80098a0:	e065      	b.n	800996e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	32b0      	adds	r2, #176	@ 0xb0
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80098b2:	78fb      	ldrb	r3, [r7, #3]
 80098b4:	f003 020f 	and.w	r2, r3, #15
 80098b8:	6879      	ldr	r1, [r7, #4]
 80098ba:	4613      	mov	r3, r2
 80098bc:	009b      	lsls	r3, r3, #2
 80098be:	4413      	add	r3, r2
 80098c0:	009b      	lsls	r3, r3, #2
 80098c2:	440b      	add	r3, r1
 80098c4:	3318      	adds	r3, #24
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d02f      	beq.n	800992c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80098cc:	78fb      	ldrb	r3, [r7, #3]
 80098ce:	f003 020f 	and.w	r2, r3, #15
 80098d2:	6879      	ldr	r1, [r7, #4]
 80098d4:	4613      	mov	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	4413      	add	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	440b      	add	r3, r1
 80098de:	3318      	adds	r3, #24
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	78fb      	ldrb	r3, [r7, #3]
 80098e4:	f003 010f 	and.w	r1, r3, #15
 80098e8:	68f8      	ldr	r0, [r7, #12]
 80098ea:	460b      	mov	r3, r1
 80098ec:	00db      	lsls	r3, r3, #3
 80098ee:	440b      	add	r3, r1
 80098f0:	009b      	lsls	r3, r3, #2
 80098f2:	4403      	add	r3, r0
 80098f4:	331c      	adds	r3, #28
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	fbb2 f1f3 	udiv	r1, r2, r3
 80098fc:	fb01 f303 	mul.w	r3, r1, r3
 8009900:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009902:	2b00      	cmp	r3, #0
 8009904:	d112      	bne.n	800992c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009906:	78fb      	ldrb	r3, [r7, #3]
 8009908:	f003 020f 	and.w	r2, r3, #15
 800990c:	6879      	ldr	r1, [r7, #4]
 800990e:	4613      	mov	r3, r2
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	4413      	add	r3, r2
 8009914:	009b      	lsls	r3, r3, #2
 8009916:	440b      	add	r3, r1
 8009918:	3318      	adds	r3, #24
 800991a:	2200      	movs	r2, #0
 800991c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800991e:	78f9      	ldrb	r1, [r7, #3]
 8009920:	2300      	movs	r3, #0
 8009922:	2200      	movs	r2, #0
 8009924:	6878      	ldr	r0, [r7, #4]
 8009926:	f002 f934 	bl	800bb92 <USBD_LL_Transmit>
 800992a:	e01f      	b.n	800996c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800992c:	68bb      	ldr	r3, [r7, #8]
 800992e:	2200      	movs	r2, #0
 8009930:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800993a:	687a      	ldr	r2, [r7, #4]
 800993c:	33b0      	adds	r3, #176	@ 0xb0
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	4413      	add	r3, r2
 8009942:	685b      	ldr	r3, [r3, #4]
 8009944:	691b      	ldr	r3, [r3, #16]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d010      	beq.n	800996c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009950:	687a      	ldr	r2, [r7, #4]
 8009952:	33b0      	adds	r3, #176	@ 0xb0
 8009954:	009b      	lsls	r3, r3, #2
 8009956:	4413      	add	r3, r2
 8009958:	685b      	ldr	r3, [r3, #4]
 800995a:	691b      	ldr	r3, [r3, #16]
 800995c:	68ba      	ldr	r2, [r7, #8]
 800995e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009962:	68ba      	ldr	r2, [r7, #8]
 8009964:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009968:	78fa      	ldrb	r2, [r7, #3]
 800996a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800996c:	2300      	movs	r3, #0
}
 800996e:	4618      	mov	r0, r3
 8009970:	3710      	adds	r7, #16
 8009972:	46bd      	mov	sp, r7
 8009974:	bd80      	pop	{r7, pc}

08009976 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009976:	b580      	push	{r7, lr}
 8009978:	b084      	sub	sp, #16
 800997a:	af00      	add	r7, sp, #0
 800997c:	6078      	str	r0, [r7, #4]
 800997e:	460b      	mov	r3, r1
 8009980:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	@ 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	32b0      	adds	r2, #176	@ 0xb0
 800999c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80099a4:	2303      	movs	r3, #3
 80099a6:	e01a      	b.n	80099de <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80099a8:	78fb      	ldrb	r3, [r7, #3]
 80099aa:	4619      	mov	r1, r3
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	f002 f932 	bl	800bc16 <USBD_LL_GetRxDataSize>
 80099b2:	4602      	mov	r2, r0
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	33b0      	adds	r3, #176	@ 0xb0
 80099c4:	009b      	lsls	r3, r3, #2
 80099c6:	4413      	add	r3, r2
 80099c8:	685b      	ldr	r3, [r3, #4]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	68fa      	ldr	r2, [r7, #12]
 80099ce:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 80099d2:	68fa      	ldr	r2, [r7, #12]
 80099d4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 80099d8:	4611      	mov	r1, r2
 80099da:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80099dc:	2300      	movs	r3, #0
}
 80099de:	4618      	mov	r0, r3
 80099e0:	3710      	adds	r7, #16
 80099e2:	46bd      	mov	sp, r7
 80099e4:	bd80      	pop	{r7, pc}

080099e6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	32b0      	adds	r2, #176	@ 0xb0
 80099f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099fc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2b00      	cmp	r3, #0
 8009a02:	d101      	bne.n	8009a08 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e024      	b.n	8009a52 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	33b0      	adds	r3, #176	@ 0xb0
 8009a12:	009b      	lsls	r3, r3, #2
 8009a14:	4413      	add	r3, r2
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d019      	beq.n	8009a50 <USBD_CDC_EP0_RxReady+0x6a>
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009a22:	2bff      	cmp	r3, #255	@ 0xff
 8009a24:	d014      	beq.n	8009a50 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a2c:	687a      	ldr	r2, [r7, #4]
 8009a2e:	33b0      	adds	r3, #176	@ 0xb0
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	685b      	ldr	r3, [r3, #4]
 8009a36:	689b      	ldr	r3, [r3, #8]
 8009a38:	68fa      	ldr	r2, [r7, #12]
 8009a3a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009a3e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009a46:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	22ff      	movs	r2, #255	@ 0xff
 8009a4c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	4618      	mov	r0, r3
 8009a54:	3710      	adds	r7, #16
 8009a56:	46bd      	mov	sp, r7
 8009a58:	bd80      	pop	{r7, pc}
	...

08009a5c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009a5c:	b580      	push	{r7, lr}
 8009a5e:	b086      	sub	sp, #24
 8009a60:	af00      	add	r7, sp, #0
 8009a62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009a64:	2182      	movs	r1, #130	@ 0x82
 8009a66:	4818      	ldr	r0, [pc, #96]	@ (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a68:	f000 fd0f 	bl	800a48a <USBD_GetEpDesc>
 8009a6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009a6e:	2101      	movs	r1, #1
 8009a70:	4815      	ldr	r0, [pc, #84]	@ (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a72:	f000 fd0a 	bl	800a48a <USBD_GetEpDesc>
 8009a76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009a78:	2181      	movs	r1, #129	@ 0x81
 8009a7a:	4813      	ldr	r0, [pc, #76]	@ (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009a7c:	f000 fd05 	bl	800a48a <USBD_GetEpDesc>
 8009a80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d002      	beq.n	8009a8e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	2210      	movs	r2, #16
 8009a8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009a8e:	693b      	ldr	r3, [r7, #16]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	d006      	beq.n	8009aa2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009a94:	693b      	ldr	r3, [r7, #16]
 8009a96:	2200      	movs	r2, #0
 8009a98:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009a9c:	711a      	strb	r2, [r3, #4]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d006      	beq.n	8009ab6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ab0:	711a      	strb	r2, [r3, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	2243      	movs	r2, #67	@ 0x43
 8009aba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009abc:	4b02      	ldr	r3, [pc, #8]	@ (8009ac8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}
 8009ac6:	bf00      	nop
 8009ac8:	2000008c 	.word	0x2000008c

08009acc <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b086      	sub	sp, #24
 8009ad0:	af00      	add	r7, sp, #0
 8009ad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009ad4:	2182      	movs	r1, #130	@ 0x82
 8009ad6:	4818      	ldr	r0, [pc, #96]	@ (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ad8:	f000 fcd7 	bl	800a48a <USBD_GetEpDesc>
 8009adc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009ade:	2101      	movs	r1, #1
 8009ae0:	4815      	ldr	r0, [pc, #84]	@ (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009ae2:	f000 fcd2 	bl	800a48a <USBD_GetEpDesc>
 8009ae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009ae8:	2181      	movs	r1, #129	@ 0x81
 8009aea:	4813      	ldr	r0, [pc, #76]	@ (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8009aec:	f000 fccd 	bl	800a48a <USBD_GetEpDesc>
 8009af0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d002      	beq.n	8009afe <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	2210      	movs	r2, #16
 8009afc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d006      	beq.n	8009b12 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b04:	693b      	ldr	r3, [r7, #16]
 8009b06:	2200      	movs	r2, #0
 8009b08:	711a      	strb	r2, [r3, #4]
 8009b0a:	2200      	movs	r2, #0
 8009b0c:	f042 0202 	orr.w	r2, r2, #2
 8009b10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d006      	beq.n	8009b26 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	711a      	strb	r2, [r3, #4]
 8009b1e:	2200      	movs	r2, #0
 8009b20:	f042 0202 	orr.w	r2, r2, #2
 8009b24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	2243      	movs	r2, #67	@ 0x43
 8009b2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b2c:	4b02      	ldr	r3, [pc, #8]	@ (8009b38 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3718      	adds	r7, #24
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	2000008c 	.word	0x2000008c

08009b3c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009b3c:	b580      	push	{r7, lr}
 8009b3e:	b086      	sub	sp, #24
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009b44:	2182      	movs	r1, #130	@ 0x82
 8009b46:	4818      	ldr	r0, [pc, #96]	@ (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b48:	f000 fc9f 	bl	800a48a <USBD_GetEpDesc>
 8009b4c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009b4e:	2101      	movs	r1, #1
 8009b50:	4815      	ldr	r0, [pc, #84]	@ (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b52:	f000 fc9a 	bl	800a48a <USBD_GetEpDesc>
 8009b56:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009b58:	2181      	movs	r1, #129	@ 0x81
 8009b5a:	4813      	ldr	r0, [pc, #76]	@ (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8009b5c:	f000 fc95 	bl	800a48a <USBD_GetEpDesc>
 8009b60:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d002      	beq.n	8009b6e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	2210      	movs	r2, #16
 8009b6c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009b6e:	693b      	ldr	r3, [r7, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d006      	beq.n	8009b82 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b74:	693b      	ldr	r3, [r7, #16]
 8009b76:	2200      	movs	r2, #0
 8009b78:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b7c:	711a      	strb	r2, [r3, #4]
 8009b7e:	2200      	movs	r2, #0
 8009b80:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d006      	beq.n	8009b96 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	2200      	movs	r2, #0
 8009b8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009b90:	711a      	strb	r2, [r3, #4]
 8009b92:	2200      	movs	r2, #0
 8009b94:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2243      	movs	r2, #67	@ 0x43
 8009b9a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8009b9c:	4b02      	ldr	r3, [pc, #8]	@ (8009ba8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8009b9e:	4618      	mov	r0, r3
 8009ba0:	3718      	adds	r7, #24
 8009ba2:	46bd      	mov	sp, r7
 8009ba4:	bd80      	pop	{r7, pc}
 8009ba6:	bf00      	nop
 8009ba8:	2000008c 	.word	0x2000008c

08009bac <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8009bac:	b480      	push	{r7}
 8009bae:	b083      	sub	sp, #12
 8009bb0:	af00      	add	r7, sp, #0
 8009bb2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	220a      	movs	r2, #10
 8009bb8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8009bba:	4b03      	ldr	r3, [pc, #12]	@ (8009bc8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	370c      	adds	r7, #12
 8009bc0:	46bd      	mov	sp, r7
 8009bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bc6:	4770      	bx	lr
 8009bc8:	20000048 	.word	0x20000048

08009bcc <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8009bcc:	b480      	push	{r7}
 8009bce:	b083      	sub	sp, #12
 8009bd0:	af00      	add	r7, sp, #0
 8009bd2:	6078      	str	r0, [r7, #4]
 8009bd4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8009bd6:	683b      	ldr	r3, [r7, #0]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d101      	bne.n	8009be0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8009bdc:	2303      	movs	r3, #3
 8009bde:	e009      	b.n	8009bf4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009be6:	687a      	ldr	r2, [r7, #4]
 8009be8:	33b0      	adds	r3, #176	@ 0xb0
 8009bea:	009b      	lsls	r3, r3, #2
 8009bec:	4413      	add	r3, r2
 8009bee:	683a      	ldr	r2, [r7, #0]
 8009bf0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8009bf2:	2300      	movs	r3, #0
}
 8009bf4:	4618      	mov	r0, r3
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr

08009c00 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8009c00:	b480      	push	{r7}
 8009c02:	b087      	sub	sp, #28
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	60f8      	str	r0, [r7, #12]
 8009c08:	60b9      	str	r1, [r7, #8]
 8009c0a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	32b0      	adds	r2, #176	@ 0xb0
 8009c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c1a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d101      	bne.n	8009c26 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e008      	b.n	8009c38 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8009c26:	697b      	ldr	r3, [r7, #20]
 8009c28:	68ba      	ldr	r2, [r7, #8]
 8009c2a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 8009c2e:	697b      	ldr	r3, [r7, #20]
 8009c30:	687a      	ldr	r2, [r7, #4]
 8009c32:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 8009c36:	2300      	movs	r3, #0
}
 8009c38:	4618      	mov	r0, r3
 8009c3a:	371c      	adds	r7, #28
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
 8009c4c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	32b0      	adds	r2, #176	@ 0xb0
 8009c58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c5c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d101      	bne.n	8009c68 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8009c64:	2303      	movs	r3, #3
 8009c66:	e004      	b.n	8009c72 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	683a      	ldr	r2, [r7, #0]
 8009c6c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 8009c70:	2300      	movs	r3, #0
}
 8009c72:	4618      	mov	r0, r3
 8009c74:	3714      	adds	r7, #20
 8009c76:	46bd      	mov	sp, r7
 8009c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7c:	4770      	bx	lr
	...

08009c80 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
 8009c86:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	32b0      	adds	r2, #176	@ 0xb0
 8009c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c96:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	32b0      	adds	r2, #176	@ 0xb0
 8009ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d101      	bne.n	8009cae <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e018      	b.n	8009ce0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	7c1b      	ldrb	r3, [r3, #16]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10a      	bne.n	8009ccc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009cb6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ce8 <USBD_CDC_ReceivePacket+0x68>)
 8009cb8:	7819      	ldrb	r1, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cc0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f001 ff85 	bl	800bbd4 <USBD_LL_PrepareReceive>
 8009cca:	e008      	b.n	8009cde <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ccc:	4b06      	ldr	r3, [pc, #24]	@ (8009ce8 <USBD_CDC_ReceivePacket+0x68>)
 8009cce:	7819      	ldrb	r1, [r3, #0]
 8009cd0:	68fb      	ldr	r3, [r7, #12]
 8009cd2:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009cd6:	2340      	movs	r3, #64	@ 0x40
 8009cd8:	6878      	ldr	r0, [r7, #4]
 8009cda:	f001 ff7b 	bl	800bbd4 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009cde:	2300      	movs	r3, #0
}
 8009ce0:	4618      	mov	r0, r3
 8009ce2:	3710      	adds	r7, #16
 8009ce4:	46bd      	mov	sp, r7
 8009ce6:	bd80      	pop	{r7, pc}
 8009ce8:	200000d0 	.word	0x200000d0

08009cec <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cec:	b580      	push	{r7, lr}
 8009cee:	b086      	sub	sp, #24
 8009cf0:	af00      	add	r7, sp, #0
 8009cf2:	60f8      	str	r0, [r7, #12]
 8009cf4:	60b9      	str	r1, [r7, #8]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d101      	bne.n	8009d04 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d00:	2303      	movs	r3, #3
 8009d02:	e01f      	b.n	8009d44 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	2200      	movs	r2, #0
 8009d10:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2200      	movs	r2, #0
 8009d18:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d003      	beq.n	8009d2a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009d22:	68fb      	ldr	r3, [r7, #12]
 8009d24:	68ba      	ldr	r2, [r7, #8]
 8009d26:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	2201      	movs	r2, #1
 8009d2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	79fa      	ldrb	r2, [r7, #7]
 8009d36:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009d38:	68f8      	ldr	r0, [r7, #12]
 8009d3a:	f001 fdf5 	bl	800b928 <USBD_LL_Init>
 8009d3e:	4603      	mov	r3, r0
 8009d40:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
 8009d54:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d56:	2300      	movs	r3, #0
 8009d58:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d101      	bne.n	8009d64 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e025      	b.n	8009db0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	683a      	ldr	r2, [r7, #0]
 8009d68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	32ae      	adds	r2, #174	@ 0xae
 8009d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d00f      	beq.n	8009da0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	32ae      	adds	r2, #174	@ 0xae
 8009d8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009d90:	f107 020e 	add.w	r2, r7, #14
 8009d94:	4610      	mov	r0, r2
 8009d96:	4798      	blx	r3
 8009d98:	4602      	mov	r2, r0
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8009da6:	1c5a      	adds	r2, r3, #1
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8009dae:	2300      	movs	r3, #0
}
 8009db0:	4618      	mov	r0, r3
 8009db2:	3710      	adds	r7, #16
 8009db4:	46bd      	mov	sp, r7
 8009db6:	bd80      	pop	{r7, pc}

08009db8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009db8:	b580      	push	{r7, lr}
 8009dba:	b082      	sub	sp, #8
 8009dbc:	af00      	add	r7, sp, #0
 8009dbe:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009dc0:	6878      	ldr	r0, [r7, #4]
 8009dc2:	f001 fdfd 	bl	800b9c0 <USBD_LL_Start>
 8009dc6:	4603      	mov	r3, r0
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3708      	adds	r7, #8
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009dd8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009dda:	4618      	mov	r0, r3
 8009ddc:	370c      	adds	r7, #12
 8009dde:	46bd      	mov	sp, r7
 8009de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de4:	4770      	bx	lr

08009de6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009de6:	b580      	push	{r7, lr}
 8009de8:	b084      	sub	sp, #16
 8009dea:	af00      	add	r7, sp, #0
 8009dec:	6078      	str	r0, [r7, #4]
 8009dee:	460b      	mov	r3, r1
 8009df0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009df2:	2300      	movs	r3, #0
 8009df4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d009      	beq.n	8009e14 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	78fa      	ldrb	r2, [r7, #3]
 8009e0a:	4611      	mov	r1, r2
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	4798      	blx	r3
 8009e10:	4603      	mov	r3, r0
 8009e12:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e14:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e16:	4618      	mov	r0, r3
 8009e18:	3710      	adds	r7, #16
 8009e1a:	46bd      	mov	sp, r7
 8009e1c:	bd80      	pop	{r7, pc}

08009e1e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009e1e:	b580      	push	{r7, lr}
 8009e20:	b084      	sub	sp, #16
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
 8009e26:	460b      	mov	r3, r1
 8009e28:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8009e34:	685b      	ldr	r3, [r3, #4]
 8009e36:	78fa      	ldrb	r2, [r7, #3]
 8009e38:	4611      	mov	r1, r2
 8009e3a:	6878      	ldr	r0, [r7, #4]
 8009e3c:	4798      	blx	r3
 8009e3e:	4603      	mov	r3, r0
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	d001      	beq.n	8009e48 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e44:	2303      	movs	r3, #3
 8009e46:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	3710      	adds	r7, #16
 8009e4e:	46bd      	mov	sp, r7
 8009e50:	bd80      	pop	{r7, pc}

08009e52 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e52:	b580      	push	{r7, lr}
 8009e54:	b084      	sub	sp, #16
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
 8009e5a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009e62:	6839      	ldr	r1, [r7, #0]
 8009e64:	4618      	mov	r0, r3
 8009e66:	f001 f90c 	bl	800b082 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8009e78:	461a      	mov	r2, r3
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009e86:	f003 031f 	and.w	r3, r3, #31
 8009e8a:	2b02      	cmp	r3, #2
 8009e8c:	d01a      	beq.n	8009ec4 <USBD_LL_SetupStage+0x72>
 8009e8e:	2b02      	cmp	r3, #2
 8009e90:	d822      	bhi.n	8009ed8 <USBD_LL_SetupStage+0x86>
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d002      	beq.n	8009e9c <USBD_LL_SetupStage+0x4a>
 8009e96:	2b01      	cmp	r3, #1
 8009e98:	d00a      	beq.n	8009eb0 <USBD_LL_SetupStage+0x5e>
 8009e9a:	e01d      	b.n	8009ed8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009ea2:	4619      	mov	r1, r3
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 fb63 	bl	800a570 <USBD_StdDevReq>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	73fb      	strb	r3, [r7, #15]
      break;
 8009eae:	e020      	b.n	8009ef2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	6878      	ldr	r0, [r7, #4]
 8009eba:	f000 fbcb 	bl	800a654 <USBD_StdItfReq>
 8009ebe:	4603      	mov	r3, r0
 8009ec0:	73fb      	strb	r3, [r7, #15]
      break;
 8009ec2:	e016      	b.n	8009ef2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8009eca:	4619      	mov	r1, r3
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	f000 fc2d 	bl	800a72c <USBD_StdEPReq>
 8009ed2:	4603      	mov	r3, r0
 8009ed4:	73fb      	strb	r3, [r7, #15]
      break;
 8009ed6:	e00c      	b.n	8009ef2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009ede:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009ee2:	b2db      	uxtb	r3, r3
 8009ee4:	4619      	mov	r1, r3
 8009ee6:	6878      	ldr	r0, [r7, #4]
 8009ee8:	f001 fdca 	bl	800ba80 <USBD_LL_StallEP>
 8009eec:	4603      	mov	r3, r0
 8009eee:	73fb      	strb	r3, [r7, #15]
      break;
 8009ef0:	bf00      	nop
  }

  return ret;
 8009ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3710      	adds	r7, #16
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	bd80      	pop	{r7, pc}

08009efc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	60f8      	str	r0, [r7, #12]
 8009f04:	460b      	mov	r3, r1
 8009f06:	607a      	str	r2, [r7, #4]
 8009f08:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009f0e:	7afb      	ldrb	r3, [r7, #11]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d16e      	bne.n	8009ff2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8009f1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8009f22:	2b03      	cmp	r3, #3
 8009f24:	f040 8098 	bne.w	800a058 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	689a      	ldr	r2, [r3, #8]
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	429a      	cmp	r2, r3
 8009f32:	d913      	bls.n	8009f5c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009f34:	693b      	ldr	r3, [r7, #16]
 8009f36:	689a      	ldr	r2, [r3, #8]
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	68db      	ldr	r3, [r3, #12]
 8009f3c:	1ad2      	subs	r2, r2, r3
 8009f3e:	693b      	ldr	r3, [r7, #16]
 8009f40:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	68da      	ldr	r2, [r3, #12]
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	689b      	ldr	r3, [r3, #8]
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	bf28      	it	cs
 8009f4e:	4613      	movcs	r3, r2
 8009f50:	461a      	mov	r2, r3
 8009f52:	6879      	ldr	r1, [r7, #4]
 8009f54:	68f8      	ldr	r0, [r7, #12]
 8009f56:	f001 f994 	bl	800b282 <USBD_CtlContinueRx>
 8009f5a:	e07d      	b.n	800a058 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8009f62:	f003 031f 	and.w	r3, r3, #31
 8009f66:	2b02      	cmp	r3, #2
 8009f68:	d014      	beq.n	8009f94 <USBD_LL_DataOutStage+0x98>
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d81d      	bhi.n	8009faa <USBD_LL_DataOutStage+0xae>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d002      	beq.n	8009f78 <USBD_LL_DataOutStage+0x7c>
 8009f72:	2b01      	cmp	r3, #1
 8009f74:	d003      	beq.n	8009f7e <USBD_LL_DataOutStage+0x82>
 8009f76:	e018      	b.n	8009faa <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f78:	2300      	movs	r3, #0
 8009f7a:	75bb      	strb	r3, [r7, #22]
            break;
 8009f7c:	e018      	b.n	8009fb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f84:	b2db      	uxtb	r3, r3
 8009f86:	4619      	mov	r1, r3
 8009f88:	68f8      	ldr	r0, [r7, #12]
 8009f8a:	f000 fa64 	bl	800a456 <USBD_CoreFindIF>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	75bb      	strb	r3, [r7, #22]
            break;
 8009f92:	e00d      	b.n	8009fb0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	4619      	mov	r1, r3
 8009f9e:	68f8      	ldr	r0, [r7, #12]
 8009fa0:	f000 fa66 	bl	800a470 <USBD_CoreFindEP>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	75bb      	strb	r3, [r7, #22]
            break;
 8009fa8:	e002      	b.n	8009fb0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009faa:	2300      	movs	r3, #0
 8009fac:	75bb      	strb	r3, [r7, #22]
            break;
 8009fae:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009fb0:	7dbb      	ldrb	r3, [r7, #22]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d119      	bne.n	8009fea <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009fbc:	b2db      	uxtb	r3, r3
 8009fbe:	2b03      	cmp	r3, #3
 8009fc0:	d113      	bne.n	8009fea <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009fc2:	7dba      	ldrb	r2, [r7, #22]
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	32ae      	adds	r2, #174	@ 0xae
 8009fc8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d00b      	beq.n	8009fea <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009fd2:	7dba      	ldrb	r2, [r7, #22]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009fda:	7dba      	ldrb	r2, [r7, #22]
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	32ae      	adds	r2, #174	@ 0xae
 8009fe0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe4:	691b      	ldr	r3, [r3, #16]
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009fea:	68f8      	ldr	r0, [r7, #12]
 8009fec:	f001 f95a 	bl	800b2a4 <USBD_CtlSendStatus>
 8009ff0:	e032      	b.n	800a058 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009ff2:	7afb      	ldrb	r3, [r7, #11]
 8009ff4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009ff8:	b2db      	uxtb	r3, r3
 8009ffa:	4619      	mov	r1, r3
 8009ffc:	68f8      	ldr	r0, [r7, #12]
 8009ffe:	f000 fa37 	bl	800a470 <USBD_CoreFindEP>
 800a002:	4603      	mov	r3, r0
 800a004:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a006:	7dbb      	ldrb	r3, [r7, #22]
 800a008:	2bff      	cmp	r3, #255	@ 0xff
 800a00a:	d025      	beq.n	800a058 <USBD_LL_DataOutStage+0x15c>
 800a00c:	7dbb      	ldrb	r3, [r7, #22]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d122      	bne.n	800a058 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a012:	68fb      	ldr	r3, [r7, #12]
 800a014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a018:	b2db      	uxtb	r3, r3
 800a01a:	2b03      	cmp	r3, #3
 800a01c:	d117      	bne.n	800a04e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a01e:	7dba      	ldrb	r2, [r7, #22]
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	32ae      	adds	r2, #174	@ 0xae
 800a024:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a028:	699b      	ldr	r3, [r3, #24]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d00f      	beq.n	800a04e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800a02e:	7dba      	ldrb	r2, [r7, #22]
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a036:	7dba      	ldrb	r2, [r7, #22]
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	32ae      	adds	r2, #174	@ 0xae
 800a03c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a040:	699b      	ldr	r3, [r3, #24]
 800a042:	7afa      	ldrb	r2, [r7, #11]
 800a044:	4611      	mov	r1, r2
 800a046:	68f8      	ldr	r0, [r7, #12]
 800a048:	4798      	blx	r3
 800a04a:	4603      	mov	r3, r0
 800a04c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a04e:	7dfb      	ldrb	r3, [r7, #23]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d001      	beq.n	800a058 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a054:	7dfb      	ldrb	r3, [r7, #23]
 800a056:	e000      	b.n	800a05a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a058:	2300      	movs	r3, #0
}
 800a05a:	4618      	mov	r0, r3
 800a05c:	3718      	adds	r7, #24
 800a05e:	46bd      	mov	sp, r7
 800a060:	bd80      	pop	{r7, pc}

0800a062 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a062:	b580      	push	{r7, lr}
 800a064:	b086      	sub	sp, #24
 800a066:	af00      	add	r7, sp, #0
 800a068:	60f8      	str	r0, [r7, #12]
 800a06a:	460b      	mov	r3, r1
 800a06c:	607a      	str	r2, [r7, #4]
 800a06e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a070:	7afb      	ldrb	r3, [r7, #11]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d16f      	bne.n	800a156 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3314      	adds	r3, #20
 800a07a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a082:	2b02      	cmp	r3, #2
 800a084:	d15a      	bne.n	800a13c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a086:	693b      	ldr	r3, [r7, #16]
 800a088:	689a      	ldr	r2, [r3, #8]
 800a08a:	693b      	ldr	r3, [r7, #16]
 800a08c:	68db      	ldr	r3, [r3, #12]
 800a08e:	429a      	cmp	r2, r3
 800a090:	d914      	bls.n	800a0bc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a092:	693b      	ldr	r3, [r7, #16]
 800a094:	689a      	ldr	r2, [r3, #8]
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	693b      	ldr	r3, [r7, #16]
 800a09e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a0a0:	693b      	ldr	r3, [r7, #16]
 800a0a2:	689b      	ldr	r3, [r3, #8]
 800a0a4:	461a      	mov	r2, r3
 800a0a6:	6879      	ldr	r1, [r7, #4]
 800a0a8:	68f8      	ldr	r0, [r7, #12]
 800a0aa:	f001 f8bc 	bl	800b226 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0ae:	2300      	movs	r3, #0
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	2100      	movs	r1, #0
 800a0b4:	68f8      	ldr	r0, [r7, #12]
 800a0b6:	f001 fd8d 	bl	800bbd4 <USBD_LL_PrepareReceive>
 800a0ba:	e03f      	b.n	800a13c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	68da      	ldr	r2, [r3, #12]
 800a0c0:	693b      	ldr	r3, [r7, #16]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	429a      	cmp	r2, r3
 800a0c6:	d11c      	bne.n	800a102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	685a      	ldr	r2, [r3, #4]
 800a0cc:	693b      	ldr	r3, [r7, #16]
 800a0ce:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d316      	bcc.n	800a102 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a0d4:	693b      	ldr	r3, [r7, #16]
 800a0d6:	685a      	ldr	r2, [r3, #4]
 800a0d8:	68fb      	ldr	r3, [r7, #12]
 800a0da:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d20f      	bcs.n	800a102 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0e2:	2200      	movs	r2, #0
 800a0e4:	2100      	movs	r1, #0
 800a0e6:	68f8      	ldr	r0, [r7, #12]
 800a0e8:	f001 f89d 	bl	800b226 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	2200      	movs	r2, #0
 800a0f0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	2100      	movs	r1, #0
 800a0fa:	68f8      	ldr	r0, [r7, #12]
 800a0fc:	f001 fd6a 	bl	800bbd4 <USBD_LL_PrepareReceive>
 800a100:	e01c      	b.n	800a13c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a108:	b2db      	uxtb	r3, r3
 800a10a:	2b03      	cmp	r3, #3
 800a10c:	d10f      	bne.n	800a12e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a114:	68db      	ldr	r3, [r3, #12]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d009      	beq.n	800a12e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	2200      	movs	r2, #0
 800a11e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	68f8      	ldr	r0, [r7, #12]
 800a12c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a12e:	2180      	movs	r1, #128	@ 0x80
 800a130:	68f8      	ldr	r0, [r7, #12]
 800a132:	f001 fca5 	bl	800ba80 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a136:	68f8      	ldr	r0, [r7, #12]
 800a138:	f001 f8c7 	bl	800b2ca <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d03a      	beq.n	800a1bc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a146:	68f8      	ldr	r0, [r7, #12]
 800a148:	f7ff fe42 	bl	8009dd0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a14c:	68fb      	ldr	r3, [r7, #12]
 800a14e:	2200      	movs	r2, #0
 800a150:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a154:	e032      	b.n	800a1bc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a156:	7afb      	ldrb	r3, [r7, #11]
 800a158:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a15c:	b2db      	uxtb	r3, r3
 800a15e:	4619      	mov	r1, r3
 800a160:	68f8      	ldr	r0, [r7, #12]
 800a162:	f000 f985 	bl	800a470 <USBD_CoreFindEP>
 800a166:	4603      	mov	r3, r0
 800a168:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a16a:	7dfb      	ldrb	r3, [r7, #23]
 800a16c:	2bff      	cmp	r3, #255	@ 0xff
 800a16e:	d025      	beq.n	800a1bc <USBD_LL_DataInStage+0x15a>
 800a170:	7dfb      	ldrb	r3, [r7, #23]
 800a172:	2b00      	cmp	r3, #0
 800a174:	d122      	bne.n	800a1bc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a17c:	b2db      	uxtb	r3, r3
 800a17e:	2b03      	cmp	r3, #3
 800a180:	d11c      	bne.n	800a1bc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a182:	7dfa      	ldrb	r2, [r7, #23]
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	32ae      	adds	r2, #174	@ 0xae
 800a188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a18c:	695b      	ldr	r3, [r3, #20]
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d014      	beq.n	800a1bc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a192:	7dfa      	ldrb	r2, [r7, #23]
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a19a:	7dfa      	ldrb	r2, [r7, #23]
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	32ae      	adds	r2, #174	@ 0xae
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	695b      	ldr	r3, [r3, #20]
 800a1a6:	7afa      	ldrb	r2, [r7, #11]
 800a1a8:	4611      	mov	r1, r2
 800a1aa:	68f8      	ldr	r0, [r7, #12]
 800a1ac:	4798      	blx	r3
 800a1ae:	4603      	mov	r3, r0
 800a1b0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a1b2:	7dbb      	ldrb	r3, [r7, #22]
 800a1b4:	2b00      	cmp	r3, #0
 800a1b6:	d001      	beq.n	800a1bc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a1b8:	7dbb      	ldrb	r3, [r7, #22]
 800a1ba:	e000      	b.n	800a1be <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a1bc:	2300      	movs	r3, #0
}
 800a1be:	4618      	mov	r0, r3
 800a1c0:	3718      	adds	r7, #24
 800a1c2:	46bd      	mov	sp, r7
 800a1c4:	bd80      	pop	{r7, pc}

0800a1c6 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a1c6:	b580      	push	{r7, lr}
 800a1c8:	b084      	sub	sp, #16
 800a1ca:	af00      	add	r7, sp, #0
 800a1cc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a1ce:	2300      	movs	r3, #0
 800a1d0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	2200      	movs	r2, #0
 800a1de:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	2200      	movs	r2, #0
 800a1e6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2200      	movs	r2, #0
 800a1f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d014      	beq.n	800a22c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	2b00      	cmp	r3, #0
 800a20c:	d00e      	beq.n	800a22c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a214:	685b      	ldr	r3, [r3, #4]
 800a216:	687a      	ldr	r2, [r7, #4]
 800a218:	6852      	ldr	r2, [r2, #4]
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	4611      	mov	r1, r2
 800a21e:	6878      	ldr	r0, [r7, #4]
 800a220:	4798      	blx	r3
 800a222:	4603      	mov	r3, r0
 800a224:	2b00      	cmp	r3, #0
 800a226:	d001      	beq.n	800a22c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a228:	2303      	movs	r3, #3
 800a22a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a22c:	2340      	movs	r3, #64	@ 0x40
 800a22e:	2200      	movs	r2, #0
 800a230:	2100      	movs	r1, #0
 800a232:	6878      	ldr	r0, [r7, #4]
 800a234:	f001 fbdf 	bl	800b9f6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2201      	movs	r2, #1
 800a23c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	2240      	movs	r2, #64	@ 0x40
 800a244:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a248:	2340      	movs	r3, #64	@ 0x40
 800a24a:	2200      	movs	r2, #0
 800a24c:	2180      	movs	r1, #128	@ 0x80
 800a24e:	6878      	ldr	r0, [r7, #4]
 800a250:	f001 fbd1 	bl	800b9f6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2201      	movs	r2, #1
 800a258:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	2240      	movs	r2, #64	@ 0x40
 800a25e:	621a      	str	r2, [r3, #32]

  return ret;
 800a260:	7bfb      	ldrb	r3, [r7, #15]
}
 800a262:	4618      	mov	r0, r3
 800a264:	3710      	adds	r7, #16
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}

0800a26a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a26a:	b480      	push	{r7}
 800a26c:	b083      	sub	sp, #12
 800a26e:	af00      	add	r7, sp, #0
 800a270:	6078      	str	r0, [r7, #4]
 800a272:	460b      	mov	r3, r1
 800a274:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	78fa      	ldrb	r2, [r7, #3]
 800a27a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a27c:	2300      	movs	r3, #0
}
 800a27e:	4618      	mov	r0, r3
 800a280:	370c      	adds	r7, #12
 800a282:	46bd      	mov	sp, r7
 800a284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a288:	4770      	bx	lr

0800a28a <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a28a:	b480      	push	{r7}
 800a28c:	b083      	sub	sp, #12
 800a28e:	af00      	add	r7, sp, #0
 800a290:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a298:	b2db      	uxtb	r3, r3
 800a29a:	2b04      	cmp	r3, #4
 800a29c:	d006      	beq.n	800a2ac <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2a4:	b2da      	uxtb	r2, r3
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2204      	movs	r2, #4
 800a2b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a2b4:	2300      	movs	r3, #0
}
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	370c      	adds	r7, #12
 800a2ba:	46bd      	mov	sp, r7
 800a2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c0:	4770      	bx	lr

0800a2c2 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a2c2:	b480      	push	{r7}
 800a2c4:	b083      	sub	sp, #12
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b04      	cmp	r3, #4
 800a2d4:	d106      	bne.n	800a2e4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a2dc:	b2da      	uxtb	r2, r3
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a2e4:	2300      	movs	r3, #0
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2f2:	b580      	push	{r7, lr}
 800a2f4:	b082      	sub	sp, #8
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a300:	b2db      	uxtb	r3, r3
 800a302:	2b03      	cmp	r3, #3
 800a304:	d110      	bne.n	800a328 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d00b      	beq.n	800a328 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d005      	beq.n	800a328 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a322:	69db      	ldr	r3, [r3, #28]
 800a324:	6878      	ldr	r0, [r7, #4]
 800a326:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a328:	2300      	movs	r3, #0
}
 800a32a:	4618      	mov	r0, r3
 800a32c:	3708      	adds	r7, #8
 800a32e:	46bd      	mov	sp, r7
 800a330:	bd80      	pop	{r7, pc}

0800a332 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a332:	b580      	push	{r7, lr}
 800a334:	b082      	sub	sp, #8
 800a336:	af00      	add	r7, sp, #0
 800a338:	6078      	str	r0, [r7, #4]
 800a33a:	460b      	mov	r3, r1
 800a33c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	32ae      	adds	r2, #174	@ 0xae
 800a348:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a350:	2303      	movs	r3, #3
 800a352:	e01c      	b.n	800a38e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a35a:	b2db      	uxtb	r3, r3
 800a35c:	2b03      	cmp	r3, #3
 800a35e:	d115      	bne.n	800a38c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	32ae      	adds	r2, #174	@ 0xae
 800a36a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36e:	6a1b      	ldr	r3, [r3, #32]
 800a370:	2b00      	cmp	r3, #0
 800a372:	d00b      	beq.n	800a38c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	32ae      	adds	r2, #174	@ 0xae
 800a37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a382:	6a1b      	ldr	r3, [r3, #32]
 800a384:	78fa      	ldrb	r2, [r7, #3]
 800a386:	4611      	mov	r1, r2
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a38c:	2300      	movs	r3, #0
}
 800a38e:	4618      	mov	r0, r3
 800a390:	3708      	adds	r7, #8
 800a392:	46bd      	mov	sp, r7
 800a394:	bd80      	pop	{r7, pc}

0800a396 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a396:	b580      	push	{r7, lr}
 800a398:	b082      	sub	sp, #8
 800a39a:	af00      	add	r7, sp, #0
 800a39c:	6078      	str	r0, [r7, #4]
 800a39e:	460b      	mov	r3, r1
 800a3a0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	32ae      	adds	r2, #174	@ 0xae
 800a3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d101      	bne.n	800a3b8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a3b4:	2303      	movs	r3, #3
 800a3b6:	e01c      	b.n	800a3f2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a3be:	b2db      	uxtb	r3, r3
 800a3c0:	2b03      	cmp	r3, #3
 800a3c2:	d115      	bne.n	800a3f0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	32ae      	adds	r2, #174	@ 0xae
 800a3ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	d00b      	beq.n	800a3f0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	32ae      	adds	r2, #174	@ 0xae
 800a3e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3e8:	78fa      	ldrb	r2, [r7, #3]
 800a3ea:	4611      	mov	r1, r2
 800a3ec:	6878      	ldr	r0, [r7, #4]
 800a3ee:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3f0:	2300      	movs	r3, #0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3fa:	b480      	push	{r7}
 800a3fc:	b083      	sub	sp, #12
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a402:	2300      	movs	r3, #0
}
 800a404:	4618      	mov	r0, r3
 800a406:	370c      	adds	r7, #12
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a410:	b580      	push	{r7, lr}
 800a412:	b084      	sub	sp, #16
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a418:	2300      	movs	r3, #0
 800a41a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	2201      	movs	r2, #1
 800a420:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d00e      	beq.n	800a44c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	6852      	ldr	r2, [r2, #4]
 800a43a:	b2d2      	uxtb	r2, r2
 800a43c:	4611      	mov	r1, r2
 800a43e:	6878      	ldr	r0, [r7, #4]
 800a440:	4798      	blx	r3
 800a442:	4603      	mov	r3, r0
 800a444:	2b00      	cmp	r3, #0
 800a446:	d001      	beq.n	800a44c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a448:	2303      	movs	r3, #3
 800a44a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a44c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a44e:	4618      	mov	r0, r3
 800a450:	3710      	adds	r7, #16
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}

0800a456 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a456:	b480      	push	{r7}
 800a458:	b083      	sub	sp, #12
 800a45a:	af00      	add	r7, sp, #0
 800a45c:	6078      	str	r0, [r7, #4]
 800a45e:	460b      	mov	r3, r1
 800a460:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a462:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr

0800a470 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a47c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a47e:	4618      	mov	r0, r3
 800a480:	370c      	adds	r7, #12
 800a482:	46bd      	mov	sp, r7
 800a484:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a488:	4770      	bx	lr

0800a48a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a48a:	b580      	push	{r7, lr}
 800a48c:	b086      	sub	sp, #24
 800a48e:	af00      	add	r7, sp, #0
 800a490:	6078      	str	r0, [r7, #4]
 800a492:	460b      	mov	r3, r1
 800a494:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a49e:	2300      	movs	r3, #0
 800a4a0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	885b      	ldrh	r3, [r3, #2]
 800a4a6:	b29b      	uxth	r3, r3
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	7812      	ldrb	r2, [r2, #0]
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d91f      	bls.n	800a4f0 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	781b      	ldrb	r3, [r3, #0]
 800a4b4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a4b6:	e013      	b.n	800a4e0 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a4b8:	f107 030a 	add.w	r3, r7, #10
 800a4bc:	4619      	mov	r1, r3
 800a4be:	6978      	ldr	r0, [r7, #20]
 800a4c0:	f000 f81b 	bl	800a4fa <USBD_GetNextDesc>
 800a4c4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a4c6:	697b      	ldr	r3, [r7, #20]
 800a4c8:	785b      	ldrb	r3, [r3, #1]
 800a4ca:	2b05      	cmp	r3, #5
 800a4cc:	d108      	bne.n	800a4e0 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a4ce:	697b      	ldr	r3, [r7, #20]
 800a4d0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	789b      	ldrb	r3, [r3, #2]
 800a4d6:	78fa      	ldrb	r2, [r7, #3]
 800a4d8:	429a      	cmp	r2, r3
 800a4da:	d008      	beq.n	800a4ee <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	885b      	ldrh	r3, [r3, #2]
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	897b      	ldrh	r3, [r7, #10]
 800a4e8:	429a      	cmp	r2, r3
 800a4ea:	d8e5      	bhi.n	800a4b8 <USBD_GetEpDesc+0x2e>
 800a4ec:	e000      	b.n	800a4f0 <USBD_GetEpDesc+0x66>
          break;
 800a4ee:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a4f0:	693b      	ldr	r3, [r7, #16]
}
 800a4f2:	4618      	mov	r0, r3
 800a4f4:	3718      	adds	r7, #24
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	bd80      	pop	{r7, pc}

0800a4fa <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4fa:	b480      	push	{r7}
 800a4fc:	b085      	sub	sp, #20
 800a4fe:	af00      	add	r7, sp, #0
 800a500:	6078      	str	r0, [r7, #4]
 800a502:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	881b      	ldrh	r3, [r3, #0]
 800a50c:	68fa      	ldr	r2, [r7, #12]
 800a50e:	7812      	ldrb	r2, [r2, #0]
 800a510:	4413      	add	r3, r2
 800a512:	b29a      	uxth	r2, r3
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	781b      	ldrb	r3, [r3, #0]
 800a51c:	461a      	mov	r2, r3
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	4413      	add	r3, r2
 800a522:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a524:	68fb      	ldr	r3, [r7, #12]
}
 800a526:	4618      	mov	r0, r3
 800a528:	3714      	adds	r7, #20
 800a52a:	46bd      	mov	sp, r7
 800a52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a530:	4770      	bx	lr

0800a532 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a532:	b480      	push	{r7}
 800a534:	b087      	sub	sp, #28
 800a536:	af00      	add	r7, sp, #0
 800a538:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	781b      	ldrb	r3, [r3, #0]
 800a542:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a544:	697b      	ldr	r3, [r7, #20]
 800a546:	3301      	adds	r3, #1
 800a548:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a54a:	697b      	ldr	r3, [r7, #20]
 800a54c:	781b      	ldrb	r3, [r3, #0]
 800a54e:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a550:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800a554:	021b      	lsls	r3, r3, #8
 800a556:	b21a      	sxth	r2, r3
 800a558:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a55c:	4313      	orrs	r3, r2
 800a55e:	b21b      	sxth	r3, r3
 800a560:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a562:	89fb      	ldrh	r3, [r7, #14]
}
 800a564:	4618      	mov	r0, r3
 800a566:	371c      	adds	r7, #28
 800a568:	46bd      	mov	sp, r7
 800a56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a56e:	4770      	bx	lr

0800a570 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a57a:	2300      	movs	r3, #0
 800a57c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a57e:	683b      	ldr	r3, [r7, #0]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a586:	2b40      	cmp	r3, #64	@ 0x40
 800a588:	d005      	beq.n	800a596 <USBD_StdDevReq+0x26>
 800a58a:	2b40      	cmp	r3, #64	@ 0x40
 800a58c:	d857      	bhi.n	800a63e <USBD_StdDevReq+0xce>
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00f      	beq.n	800a5b2 <USBD_StdDevReq+0x42>
 800a592:	2b20      	cmp	r3, #32
 800a594:	d153      	bne.n	800a63e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	32ae      	adds	r2, #174	@ 0xae
 800a5a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a4:	689b      	ldr	r3, [r3, #8]
 800a5a6:	6839      	ldr	r1, [r7, #0]
 800a5a8:	6878      	ldr	r0, [r7, #4]
 800a5aa:	4798      	blx	r3
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	73fb      	strb	r3, [r7, #15]
      break;
 800a5b0:	e04a      	b.n	800a648 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	785b      	ldrb	r3, [r3, #1]
 800a5b6:	2b09      	cmp	r3, #9
 800a5b8:	d83b      	bhi.n	800a632 <USBD_StdDevReq+0xc2>
 800a5ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a5c0 <USBD_StdDevReq+0x50>)
 800a5bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c0:	0800a615 	.word	0x0800a615
 800a5c4:	0800a629 	.word	0x0800a629
 800a5c8:	0800a633 	.word	0x0800a633
 800a5cc:	0800a61f 	.word	0x0800a61f
 800a5d0:	0800a633 	.word	0x0800a633
 800a5d4:	0800a5f3 	.word	0x0800a5f3
 800a5d8:	0800a5e9 	.word	0x0800a5e9
 800a5dc:	0800a633 	.word	0x0800a633
 800a5e0:	0800a60b 	.word	0x0800a60b
 800a5e4:	0800a5fd 	.word	0x0800a5fd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5e8:	6839      	ldr	r1, [r7, #0]
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f000 fa3c 	bl	800aa68 <USBD_GetDescriptor>
          break;
 800a5f0:	e024      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a5f2:	6839      	ldr	r1, [r7, #0]
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f000 fba1 	bl	800ad3c <USBD_SetAddress>
          break;
 800a5fa:	e01f      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5fc:	6839      	ldr	r1, [r7, #0]
 800a5fe:	6878      	ldr	r0, [r7, #4]
 800a600:	f000 fbe0 	bl	800adc4 <USBD_SetConfig>
 800a604:	4603      	mov	r3, r0
 800a606:	73fb      	strb	r3, [r7, #15]
          break;
 800a608:	e018      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a60a:	6839      	ldr	r1, [r7, #0]
 800a60c:	6878      	ldr	r0, [r7, #4]
 800a60e:	f000 fc83 	bl	800af18 <USBD_GetConfig>
          break;
 800a612:	e013      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a614:	6839      	ldr	r1, [r7, #0]
 800a616:	6878      	ldr	r0, [r7, #4]
 800a618:	f000 fcb4 	bl	800af84 <USBD_GetStatus>
          break;
 800a61c:	e00e      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a61e:	6839      	ldr	r1, [r7, #0]
 800a620:	6878      	ldr	r0, [r7, #4]
 800a622:	f000 fce3 	bl	800afec <USBD_SetFeature>
          break;
 800a626:	e009      	b.n	800a63c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a628:	6839      	ldr	r1, [r7, #0]
 800a62a:	6878      	ldr	r0, [r7, #4]
 800a62c:	f000 fd07 	bl	800b03e <USBD_ClrFeature>
          break;
 800a630:	e004      	b.n	800a63c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a632:	6839      	ldr	r1, [r7, #0]
 800a634:	6878      	ldr	r0, [r7, #4]
 800a636:	f000 fd5e 	bl	800b0f6 <USBD_CtlError>
          break;
 800a63a:	bf00      	nop
      }
      break;
 800a63c:	e004      	b.n	800a648 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a63e:	6839      	ldr	r1, [r7, #0]
 800a640:	6878      	ldr	r0, [r7, #4]
 800a642:	f000 fd58 	bl	800b0f6 <USBD_CtlError>
      break;
 800a646:	bf00      	nop
  }

  return ret;
 800a648:	7bfb      	ldrb	r3, [r7, #15]
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3710      	adds	r7, #16
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop

0800a654 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a654:	b580      	push	{r7, lr}
 800a656:	b084      	sub	sp, #16
 800a658:	af00      	add	r7, sp, #0
 800a65a:	6078      	str	r0, [r7, #4]
 800a65c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a65e:	2300      	movs	r3, #0
 800a660:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a662:	683b      	ldr	r3, [r7, #0]
 800a664:	781b      	ldrb	r3, [r3, #0]
 800a666:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a66a:	2b40      	cmp	r3, #64	@ 0x40
 800a66c:	d005      	beq.n	800a67a <USBD_StdItfReq+0x26>
 800a66e:	2b40      	cmp	r3, #64	@ 0x40
 800a670:	d852      	bhi.n	800a718 <USBD_StdItfReq+0xc4>
 800a672:	2b00      	cmp	r3, #0
 800a674:	d001      	beq.n	800a67a <USBD_StdItfReq+0x26>
 800a676:	2b20      	cmp	r3, #32
 800a678:	d14e      	bne.n	800a718 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a680:	b2db      	uxtb	r3, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	2b02      	cmp	r3, #2
 800a686:	d840      	bhi.n	800a70a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	889b      	ldrh	r3, [r3, #4]
 800a68c:	b2db      	uxtb	r3, r3
 800a68e:	2b01      	cmp	r3, #1
 800a690:	d836      	bhi.n	800a700 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a692:	683b      	ldr	r3, [r7, #0]
 800a694:	889b      	ldrh	r3, [r3, #4]
 800a696:	b2db      	uxtb	r3, r3
 800a698:	4619      	mov	r1, r3
 800a69a:	6878      	ldr	r0, [r7, #4]
 800a69c:	f7ff fedb 	bl	800a456 <USBD_CoreFindIF>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a6a4:	7bbb      	ldrb	r3, [r7, #14]
 800a6a6:	2bff      	cmp	r3, #255	@ 0xff
 800a6a8:	d01d      	beq.n	800a6e6 <USBD_StdItfReq+0x92>
 800a6aa:	7bbb      	ldrb	r3, [r7, #14]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d11a      	bne.n	800a6e6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a6b0:	7bba      	ldrb	r2, [r7, #14]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	32ae      	adds	r2, #174	@ 0xae
 800a6b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6ba:	689b      	ldr	r3, [r3, #8]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d00f      	beq.n	800a6e0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a6c0:	7bba      	ldrb	r2, [r7, #14]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a6c8:	7bba      	ldrb	r2, [r7, #14]
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	32ae      	adds	r2, #174	@ 0xae
 800a6ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6d2:	689b      	ldr	r3, [r3, #8]
 800a6d4:	6839      	ldr	r1, [r7, #0]
 800a6d6:	6878      	ldr	r0, [r7, #4]
 800a6d8:	4798      	blx	r3
 800a6da:	4603      	mov	r3, r0
 800a6dc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6de:	e004      	b.n	800a6ea <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a6e0:	2303      	movs	r3, #3
 800a6e2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a6e4:	e001      	b.n	800a6ea <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a6e6:	2303      	movs	r3, #3
 800a6e8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6ea:	683b      	ldr	r3, [r7, #0]
 800a6ec:	88db      	ldrh	r3, [r3, #6]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d110      	bne.n	800a714 <USBD_StdItfReq+0xc0>
 800a6f2:	7bfb      	ldrb	r3, [r7, #15]
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d10d      	bne.n	800a714 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fdd3 	bl	800b2a4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6fe:	e009      	b.n	800a714 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a700:	6839      	ldr	r1, [r7, #0]
 800a702:	6878      	ldr	r0, [r7, #4]
 800a704:	f000 fcf7 	bl	800b0f6 <USBD_CtlError>
          break;
 800a708:	e004      	b.n	800a714 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a70a:	6839      	ldr	r1, [r7, #0]
 800a70c:	6878      	ldr	r0, [r7, #4]
 800a70e:	f000 fcf2 	bl	800b0f6 <USBD_CtlError>
          break;
 800a712:	e000      	b.n	800a716 <USBD_StdItfReq+0xc2>
          break;
 800a714:	bf00      	nop
      }
      break;
 800a716:	e004      	b.n	800a722 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a718:	6839      	ldr	r1, [r7, #0]
 800a71a:	6878      	ldr	r0, [r7, #4]
 800a71c:	f000 fceb 	bl	800b0f6 <USBD_CtlError>
      break;
 800a720:	bf00      	nop
  }

  return ret;
 800a722:	7bfb      	ldrb	r3, [r7, #15]
}
 800a724:	4618      	mov	r0, r3
 800a726:	3710      	adds	r7, #16
 800a728:	46bd      	mov	sp, r7
 800a72a:	bd80      	pop	{r7, pc}

0800a72c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b084      	sub	sp, #16
 800a730:	af00      	add	r7, sp, #0
 800a732:	6078      	str	r0, [r7, #4]
 800a734:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a736:	2300      	movs	r3, #0
 800a738:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a73a:	683b      	ldr	r3, [r7, #0]
 800a73c:	889b      	ldrh	r3, [r3, #4]
 800a73e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a740:	683b      	ldr	r3, [r7, #0]
 800a742:	781b      	ldrb	r3, [r3, #0]
 800a744:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a748:	2b40      	cmp	r3, #64	@ 0x40
 800a74a:	d007      	beq.n	800a75c <USBD_StdEPReq+0x30>
 800a74c:	2b40      	cmp	r3, #64	@ 0x40
 800a74e:	f200 817f 	bhi.w	800aa50 <USBD_StdEPReq+0x324>
 800a752:	2b00      	cmp	r3, #0
 800a754:	d02a      	beq.n	800a7ac <USBD_StdEPReq+0x80>
 800a756:	2b20      	cmp	r3, #32
 800a758:	f040 817a 	bne.w	800aa50 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a75c:	7bbb      	ldrb	r3, [r7, #14]
 800a75e:	4619      	mov	r1, r3
 800a760:	6878      	ldr	r0, [r7, #4]
 800a762:	f7ff fe85 	bl	800a470 <USBD_CoreFindEP>
 800a766:	4603      	mov	r3, r0
 800a768:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a76a:	7b7b      	ldrb	r3, [r7, #13]
 800a76c:	2bff      	cmp	r3, #255	@ 0xff
 800a76e:	f000 8174 	beq.w	800aa5a <USBD_StdEPReq+0x32e>
 800a772:	7b7b      	ldrb	r3, [r7, #13]
 800a774:	2b00      	cmp	r3, #0
 800a776:	f040 8170 	bne.w	800aa5a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a77a:	7b7a      	ldrb	r2, [r7, #13]
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a782:	7b7a      	ldrb	r2, [r7, #13]
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	32ae      	adds	r2, #174	@ 0xae
 800a788:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	f000 8163 	beq.w	800aa5a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a794:	7b7a      	ldrb	r2, [r7, #13]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	32ae      	adds	r2, #174	@ 0xae
 800a79a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a79e:	689b      	ldr	r3, [r3, #8]
 800a7a0:	6839      	ldr	r1, [r7, #0]
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	4798      	blx	r3
 800a7a6:	4603      	mov	r3, r0
 800a7a8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7aa:	e156      	b.n	800aa5a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	785b      	ldrb	r3, [r3, #1]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d008      	beq.n	800a7c6 <USBD_StdEPReq+0x9a>
 800a7b4:	2b03      	cmp	r3, #3
 800a7b6:	f300 8145 	bgt.w	800aa44 <USBD_StdEPReq+0x318>
 800a7ba:	2b00      	cmp	r3, #0
 800a7bc:	f000 809b 	beq.w	800a8f6 <USBD_StdEPReq+0x1ca>
 800a7c0:	2b01      	cmp	r3, #1
 800a7c2:	d03c      	beq.n	800a83e <USBD_StdEPReq+0x112>
 800a7c4:	e13e      	b.n	800aa44 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a7cc:	b2db      	uxtb	r3, r3
 800a7ce:	2b02      	cmp	r3, #2
 800a7d0:	d002      	beq.n	800a7d8 <USBD_StdEPReq+0xac>
 800a7d2:	2b03      	cmp	r3, #3
 800a7d4:	d016      	beq.n	800a804 <USBD_StdEPReq+0xd8>
 800a7d6:	e02c      	b.n	800a832 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	2b00      	cmp	r3, #0
 800a7dc:	d00d      	beq.n	800a7fa <USBD_StdEPReq+0xce>
 800a7de:	7bbb      	ldrb	r3, [r7, #14]
 800a7e0:	2b80      	cmp	r3, #128	@ 0x80
 800a7e2:	d00a      	beq.n	800a7fa <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7e4:	7bbb      	ldrb	r3, [r7, #14]
 800a7e6:	4619      	mov	r1, r3
 800a7e8:	6878      	ldr	r0, [r7, #4]
 800a7ea:	f001 f949 	bl	800ba80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7ee:	2180      	movs	r1, #128	@ 0x80
 800a7f0:	6878      	ldr	r0, [r7, #4]
 800a7f2:	f001 f945 	bl	800ba80 <USBD_LL_StallEP>
 800a7f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7f8:	e020      	b.n	800a83c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6878      	ldr	r0, [r7, #4]
 800a7fe:	f000 fc7a 	bl	800b0f6 <USBD_CtlError>
              break;
 800a802:	e01b      	b.n	800a83c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	885b      	ldrh	r3, [r3, #2]
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d10e      	bne.n	800a82a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a80c:	7bbb      	ldrb	r3, [r7, #14]
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d00b      	beq.n	800a82a <USBD_StdEPReq+0xfe>
 800a812:	7bbb      	ldrb	r3, [r7, #14]
 800a814:	2b80      	cmp	r3, #128	@ 0x80
 800a816:	d008      	beq.n	800a82a <USBD_StdEPReq+0xfe>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	88db      	ldrh	r3, [r3, #6]
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d104      	bne.n	800a82a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a820:	7bbb      	ldrb	r3, [r7, #14]
 800a822:	4619      	mov	r1, r3
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f001 f92b 	bl	800ba80 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a82a:	6878      	ldr	r0, [r7, #4]
 800a82c:	f000 fd3a 	bl	800b2a4 <USBD_CtlSendStatus>

              break;
 800a830:	e004      	b.n	800a83c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a832:	6839      	ldr	r1, [r7, #0]
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 fc5e 	bl	800b0f6 <USBD_CtlError>
              break;
 800a83a:	bf00      	nop
          }
          break;
 800a83c:	e107      	b.n	800aa4e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a844:	b2db      	uxtb	r3, r3
 800a846:	2b02      	cmp	r3, #2
 800a848:	d002      	beq.n	800a850 <USBD_StdEPReq+0x124>
 800a84a:	2b03      	cmp	r3, #3
 800a84c:	d016      	beq.n	800a87c <USBD_StdEPReq+0x150>
 800a84e:	e04b      	b.n	800a8e8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a850:	7bbb      	ldrb	r3, [r7, #14]
 800a852:	2b00      	cmp	r3, #0
 800a854:	d00d      	beq.n	800a872 <USBD_StdEPReq+0x146>
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	2b80      	cmp	r3, #128	@ 0x80
 800a85a:	d00a      	beq.n	800a872 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a85c:	7bbb      	ldrb	r3, [r7, #14]
 800a85e:	4619      	mov	r1, r3
 800a860:	6878      	ldr	r0, [r7, #4]
 800a862:	f001 f90d 	bl	800ba80 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a866:	2180      	movs	r1, #128	@ 0x80
 800a868:	6878      	ldr	r0, [r7, #4]
 800a86a:	f001 f909 	bl	800ba80 <USBD_LL_StallEP>
 800a86e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a870:	e040      	b.n	800a8f4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a872:	6839      	ldr	r1, [r7, #0]
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 fc3e 	bl	800b0f6 <USBD_CtlError>
              break;
 800a87a:	e03b      	b.n	800a8f4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	885b      	ldrh	r3, [r3, #2]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d136      	bne.n	800a8f2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a884:	7bbb      	ldrb	r3, [r7, #14]
 800a886:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d004      	beq.n	800a898 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a88e:	7bbb      	ldrb	r3, [r7, #14]
 800a890:	4619      	mov	r1, r3
 800a892:	6878      	ldr	r0, [r7, #4]
 800a894:	f001 f913 	bl	800babe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a898:	6878      	ldr	r0, [r7, #4]
 800a89a:	f000 fd03 	bl	800b2a4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a89e:	7bbb      	ldrb	r3, [r7, #14]
 800a8a0:	4619      	mov	r1, r3
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f7ff fde4 	bl	800a470 <USBD_CoreFindEP>
 800a8a8:	4603      	mov	r3, r0
 800a8aa:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a8ac:	7b7b      	ldrb	r3, [r7, #13]
 800a8ae:	2bff      	cmp	r3, #255	@ 0xff
 800a8b0:	d01f      	beq.n	800a8f2 <USBD_StdEPReq+0x1c6>
 800a8b2:	7b7b      	ldrb	r3, [r7, #13]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d11c      	bne.n	800a8f2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a8b8:	7b7a      	ldrb	r2, [r7, #13]
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a8c0:	7b7a      	ldrb	r2, [r7, #13]
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	32ae      	adds	r2, #174	@ 0xae
 800a8c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ca:	689b      	ldr	r3, [r3, #8]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d010      	beq.n	800a8f2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a8d0:	7b7a      	ldrb	r2, [r7, #13]
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	32ae      	adds	r2, #174	@ 0xae
 800a8d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8da:	689b      	ldr	r3, [r3, #8]
 800a8dc:	6839      	ldr	r1, [r7, #0]
 800a8de:	6878      	ldr	r0, [r7, #4]
 800a8e0:	4798      	blx	r3
 800a8e2:	4603      	mov	r3, r0
 800a8e4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a8e6:	e004      	b.n	800a8f2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a8e8:	6839      	ldr	r1, [r7, #0]
 800a8ea:	6878      	ldr	r0, [r7, #4]
 800a8ec:	f000 fc03 	bl	800b0f6 <USBD_CtlError>
              break;
 800a8f0:	e000      	b.n	800a8f4 <USBD_StdEPReq+0x1c8>
              break;
 800a8f2:	bf00      	nop
          }
          break;
 800a8f4:	e0ab      	b.n	800aa4e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8fc:	b2db      	uxtb	r3, r3
 800a8fe:	2b02      	cmp	r3, #2
 800a900:	d002      	beq.n	800a908 <USBD_StdEPReq+0x1dc>
 800a902:	2b03      	cmp	r3, #3
 800a904:	d032      	beq.n	800a96c <USBD_StdEPReq+0x240>
 800a906:	e097      	b.n	800aa38 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a908:	7bbb      	ldrb	r3, [r7, #14]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d007      	beq.n	800a91e <USBD_StdEPReq+0x1f2>
 800a90e:	7bbb      	ldrb	r3, [r7, #14]
 800a910:	2b80      	cmp	r3, #128	@ 0x80
 800a912:	d004      	beq.n	800a91e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a914:	6839      	ldr	r1, [r7, #0]
 800a916:	6878      	ldr	r0, [r7, #4]
 800a918:	f000 fbed 	bl	800b0f6 <USBD_CtlError>
                break;
 800a91c:	e091      	b.n	800aa42 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a91e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a922:	2b00      	cmp	r3, #0
 800a924:	da0b      	bge.n	800a93e <USBD_StdEPReq+0x212>
 800a926:	7bbb      	ldrb	r3, [r7, #14]
 800a928:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a92c:	4613      	mov	r3, r2
 800a92e:	009b      	lsls	r3, r3, #2
 800a930:	4413      	add	r3, r2
 800a932:	009b      	lsls	r3, r3, #2
 800a934:	3310      	adds	r3, #16
 800a936:	687a      	ldr	r2, [r7, #4]
 800a938:	4413      	add	r3, r2
 800a93a:	3304      	adds	r3, #4
 800a93c:	e00b      	b.n	800a956 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a93e:	7bbb      	ldrb	r3, [r7, #14]
 800a940:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a944:	4613      	mov	r3, r2
 800a946:	009b      	lsls	r3, r3, #2
 800a948:	4413      	add	r3, r2
 800a94a:	009b      	lsls	r3, r3, #2
 800a94c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	4413      	add	r3, r2
 800a954:	3304      	adds	r3, #4
 800a956:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2200      	movs	r2, #0
 800a95c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a95e:	68bb      	ldr	r3, [r7, #8]
 800a960:	2202      	movs	r2, #2
 800a962:	4619      	mov	r1, r3
 800a964:	6878      	ldr	r0, [r7, #4]
 800a966:	f000 fc43 	bl	800b1f0 <USBD_CtlSendData>
              break;
 800a96a:	e06a      	b.n	800aa42 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a96c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a970:	2b00      	cmp	r3, #0
 800a972:	da11      	bge.n	800a998 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a974:	7bbb      	ldrb	r3, [r7, #14]
 800a976:	f003 020f 	and.w	r2, r3, #15
 800a97a:	6879      	ldr	r1, [r7, #4]
 800a97c:	4613      	mov	r3, r2
 800a97e:	009b      	lsls	r3, r3, #2
 800a980:	4413      	add	r3, r2
 800a982:	009b      	lsls	r3, r3, #2
 800a984:	440b      	add	r3, r1
 800a986:	3324      	adds	r3, #36	@ 0x24
 800a988:	881b      	ldrh	r3, [r3, #0]
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d117      	bne.n	800a9be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a98e:	6839      	ldr	r1, [r7, #0]
 800a990:	6878      	ldr	r0, [r7, #4]
 800a992:	f000 fbb0 	bl	800b0f6 <USBD_CtlError>
                  break;
 800a996:	e054      	b.n	800aa42 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a998:	7bbb      	ldrb	r3, [r7, #14]
 800a99a:	f003 020f 	and.w	r2, r3, #15
 800a99e:	6879      	ldr	r1, [r7, #4]
 800a9a0:	4613      	mov	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	4413      	add	r3, r2
 800a9a6:	009b      	lsls	r3, r3, #2
 800a9a8:	440b      	add	r3, r1
 800a9aa:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a9ae:	881b      	ldrh	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d104      	bne.n	800a9be <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a9b4:	6839      	ldr	r1, [r7, #0]
 800a9b6:	6878      	ldr	r0, [r7, #4]
 800a9b8:	f000 fb9d 	bl	800b0f6 <USBD_CtlError>
                  break;
 800a9bc:	e041      	b.n	800aa42 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	da0b      	bge.n	800a9de <USBD_StdEPReq+0x2b2>
 800a9c6:	7bbb      	ldrb	r3, [r7, #14]
 800a9c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800a9cc:	4613      	mov	r3, r2
 800a9ce:	009b      	lsls	r3, r3, #2
 800a9d0:	4413      	add	r3, r2
 800a9d2:	009b      	lsls	r3, r3, #2
 800a9d4:	3310      	adds	r3, #16
 800a9d6:	687a      	ldr	r2, [r7, #4]
 800a9d8:	4413      	add	r3, r2
 800a9da:	3304      	adds	r3, #4
 800a9dc:	e00b      	b.n	800a9f6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a9de:	7bbb      	ldrb	r3, [r7, #14]
 800a9e0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a9e4:	4613      	mov	r3, r2
 800a9e6:	009b      	lsls	r3, r3, #2
 800a9e8:	4413      	add	r3, r2
 800a9ea:	009b      	lsls	r3, r3, #2
 800a9ec:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	4413      	add	r3, r2
 800a9f4:	3304      	adds	r3, #4
 800a9f6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9f8:	7bbb      	ldrb	r3, [r7, #14]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d002      	beq.n	800aa04 <USBD_StdEPReq+0x2d8>
 800a9fe:	7bbb      	ldrb	r3, [r7, #14]
 800aa00:	2b80      	cmp	r3, #128	@ 0x80
 800aa02:	d103      	bne.n	800aa0c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	2200      	movs	r2, #0
 800aa08:	601a      	str	r2, [r3, #0]
 800aa0a:	e00e      	b.n	800aa2a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800aa0c:	7bbb      	ldrb	r3, [r7, #14]
 800aa0e:	4619      	mov	r1, r3
 800aa10:	6878      	ldr	r0, [r7, #4]
 800aa12:	f001 f873 	bl	800bafc <USBD_LL_IsStallEP>
 800aa16:	4603      	mov	r3, r0
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d003      	beq.n	800aa24 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800aa1c:	68bb      	ldr	r3, [r7, #8]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	601a      	str	r2, [r3, #0]
 800aa22:	e002      	b.n	800aa2a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800aa24:	68bb      	ldr	r3, [r7, #8]
 800aa26:	2200      	movs	r2, #0
 800aa28:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800aa2a:	68bb      	ldr	r3, [r7, #8]
 800aa2c:	2202      	movs	r2, #2
 800aa2e:	4619      	mov	r1, r3
 800aa30:	6878      	ldr	r0, [r7, #4]
 800aa32:	f000 fbdd 	bl	800b1f0 <USBD_CtlSendData>
              break;
 800aa36:	e004      	b.n	800aa42 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800aa38:	6839      	ldr	r1, [r7, #0]
 800aa3a:	6878      	ldr	r0, [r7, #4]
 800aa3c:	f000 fb5b 	bl	800b0f6 <USBD_CtlError>
              break;
 800aa40:	bf00      	nop
          }
          break;
 800aa42:	e004      	b.n	800aa4e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800aa44:	6839      	ldr	r1, [r7, #0]
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fb55 	bl	800b0f6 <USBD_CtlError>
          break;
 800aa4c:	bf00      	nop
      }
      break;
 800aa4e:	e005      	b.n	800aa5c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa50:	6839      	ldr	r1, [r7, #0]
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	f000 fb4f 	bl	800b0f6 <USBD_CtlError>
      break;
 800aa58:	e000      	b.n	800aa5c <USBD_StdEPReq+0x330>
      break;
 800aa5a:	bf00      	nop
  }

  return ret;
 800aa5c:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa5e:	4618      	mov	r0, r3
 800aa60:	3710      	adds	r7, #16
 800aa62:	46bd      	mov	sp, r7
 800aa64:	bd80      	pop	{r7, pc}
	...

0800aa68 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b084      	sub	sp, #16
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa72:	2300      	movs	r3, #0
 800aa74:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa76:	2300      	movs	r3, #0
 800aa78:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	885b      	ldrh	r3, [r3, #2]
 800aa82:	0a1b      	lsrs	r3, r3, #8
 800aa84:	b29b      	uxth	r3, r3
 800aa86:	3b01      	subs	r3, #1
 800aa88:	2b06      	cmp	r3, #6
 800aa8a:	f200 8128 	bhi.w	800acde <USBD_GetDescriptor+0x276>
 800aa8e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa94 <USBD_GetDescriptor+0x2c>)
 800aa90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa94:	0800aab1 	.word	0x0800aab1
 800aa98:	0800aac9 	.word	0x0800aac9
 800aa9c:	0800ab09 	.word	0x0800ab09
 800aaa0:	0800acdf 	.word	0x0800acdf
 800aaa4:	0800acdf 	.word	0x0800acdf
 800aaa8:	0800ac7f 	.word	0x0800ac7f
 800aaac:	0800acab 	.word	0x0800acab
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	687a      	ldr	r2, [r7, #4]
 800aaba:	7c12      	ldrb	r2, [r2, #16]
 800aabc:	f107 0108 	add.w	r1, r7, #8
 800aac0:	4610      	mov	r0, r2
 800aac2:	4798      	blx	r3
 800aac4:	60f8      	str	r0, [r7, #12]
      break;
 800aac6:	e112      	b.n	800acee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	7c1b      	ldrb	r3, [r3, #16]
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d10d      	bne.n	800aaec <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aad8:	f107 0208 	add.w	r2, r7, #8
 800aadc:	4610      	mov	r0, r2
 800aade:	4798      	blx	r3
 800aae0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	3301      	adds	r3, #1
 800aae6:	2202      	movs	r2, #2
 800aae8:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaea:	e100      	b.n	800acee <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aaf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf4:	f107 0208 	add.w	r2, r7, #8
 800aaf8:	4610      	mov	r0, r2
 800aafa:	4798      	blx	r3
 800aafc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	3301      	adds	r3, #1
 800ab02:	2202      	movs	r2, #2
 800ab04:	701a      	strb	r2, [r3, #0]
      break;
 800ab06:	e0f2      	b.n	800acee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800ab08:	683b      	ldr	r3, [r7, #0]
 800ab0a:	885b      	ldrh	r3, [r3, #2]
 800ab0c:	b2db      	uxtb	r3, r3
 800ab0e:	2b05      	cmp	r3, #5
 800ab10:	f200 80ac 	bhi.w	800ac6c <USBD_GetDescriptor+0x204>
 800ab14:	a201      	add	r2, pc, #4	@ (adr r2, 800ab1c <USBD_GetDescriptor+0xb4>)
 800ab16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab1a:	bf00      	nop
 800ab1c:	0800ab35 	.word	0x0800ab35
 800ab20:	0800ab69 	.word	0x0800ab69
 800ab24:	0800ab9d 	.word	0x0800ab9d
 800ab28:	0800abd1 	.word	0x0800abd1
 800ab2c:	0800ac05 	.word	0x0800ac05
 800ab30:	0800ac39 	.word	0x0800ac39
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00b      	beq.n	800ab58 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	687a      	ldr	r2, [r7, #4]
 800ab4a:	7c12      	ldrb	r2, [r2, #16]
 800ab4c:	f107 0108 	add.w	r1, r7, #8
 800ab50:	4610      	mov	r0, r2
 800ab52:	4798      	blx	r3
 800ab54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab56:	e091      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab58:	6839      	ldr	r1, [r7, #0]
 800ab5a:	6878      	ldr	r0, [r7, #4]
 800ab5c:	f000 facb 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ab60:	7afb      	ldrb	r3, [r7, #11]
 800ab62:	3301      	adds	r3, #1
 800ab64:	72fb      	strb	r3, [r7, #11]
          break;
 800ab66:	e089      	b.n	800ac7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab6e:	689b      	ldr	r3, [r3, #8]
 800ab70:	2b00      	cmp	r3, #0
 800ab72:	d00b      	beq.n	800ab8c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ab7a:	689b      	ldr	r3, [r3, #8]
 800ab7c:	687a      	ldr	r2, [r7, #4]
 800ab7e:	7c12      	ldrb	r2, [r2, #16]
 800ab80:	f107 0108 	add.w	r1, r7, #8
 800ab84:	4610      	mov	r0, r2
 800ab86:	4798      	blx	r3
 800ab88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab8a:	e077      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab8c:	6839      	ldr	r1, [r7, #0]
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 fab1 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ab94:	7afb      	ldrb	r3, [r7, #11]
 800ab96:	3301      	adds	r3, #1
 800ab98:	72fb      	strb	r3, [r7, #11]
          break;
 800ab9a:	e06f      	b.n	800ac7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800aba2:	68db      	ldr	r3, [r3, #12]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d00b      	beq.n	800abc0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abae:	68db      	ldr	r3, [r3, #12]
 800abb0:	687a      	ldr	r2, [r7, #4]
 800abb2:	7c12      	ldrb	r2, [r2, #16]
 800abb4:	f107 0108 	add.w	r1, r7, #8
 800abb8:	4610      	mov	r0, r2
 800abba:	4798      	blx	r3
 800abbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abbe:	e05d      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abc0:	6839      	ldr	r1, [r7, #0]
 800abc2:	6878      	ldr	r0, [r7, #4]
 800abc4:	f000 fa97 	bl	800b0f6 <USBD_CtlError>
            err++;
 800abc8:	7afb      	ldrb	r3, [r7, #11]
 800abca:	3301      	adds	r3, #1
 800abcc:	72fb      	strb	r3, [r7, #11]
          break;
 800abce:	e055      	b.n	800ac7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abd6:	691b      	ldr	r3, [r3, #16]
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00b      	beq.n	800abf4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800abe2:	691b      	ldr	r3, [r3, #16]
 800abe4:	687a      	ldr	r2, [r7, #4]
 800abe6:	7c12      	ldrb	r2, [r2, #16]
 800abe8:	f107 0108 	add.w	r1, r7, #8
 800abec:	4610      	mov	r0, r2
 800abee:	4798      	blx	r3
 800abf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abf2:	e043      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abf4:	6839      	ldr	r1, [r7, #0]
 800abf6:	6878      	ldr	r0, [r7, #4]
 800abf8:	f000 fa7d 	bl	800b0f6 <USBD_CtlError>
            err++;
 800abfc:	7afb      	ldrb	r3, [r7, #11]
 800abfe:	3301      	adds	r3, #1
 800ac00:	72fb      	strb	r3, [r7, #11]
          break;
 800ac02:	e03b      	b.n	800ac7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac0a:	695b      	ldr	r3, [r3, #20]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00b      	beq.n	800ac28 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac16:	695b      	ldr	r3, [r3, #20]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	7c12      	ldrb	r2, [r2, #16]
 800ac1c:	f107 0108 	add.w	r1, r7, #8
 800ac20:	4610      	mov	r0, r2
 800ac22:	4798      	blx	r3
 800ac24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac26:	e029      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fa63 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ac30:	7afb      	ldrb	r3, [r7, #11]
 800ac32:	3301      	adds	r3, #1
 800ac34:	72fb      	strb	r3, [r7, #11]
          break;
 800ac36:	e021      	b.n	800ac7c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d00b      	beq.n	800ac5c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800ac4a:	699b      	ldr	r3, [r3, #24]
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	7c12      	ldrb	r2, [r2, #16]
 800ac50:	f107 0108 	add.w	r1, r7, #8
 800ac54:	4610      	mov	r0, r2
 800ac56:	4798      	blx	r3
 800ac58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac5a:	e00f      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac5c:	6839      	ldr	r1, [r7, #0]
 800ac5e:	6878      	ldr	r0, [r7, #4]
 800ac60:	f000 fa49 	bl	800b0f6 <USBD_CtlError>
            err++;
 800ac64:	7afb      	ldrb	r3, [r7, #11]
 800ac66:	3301      	adds	r3, #1
 800ac68:	72fb      	strb	r3, [r7, #11]
          break;
 800ac6a:	e007      	b.n	800ac7c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac6c:	6839      	ldr	r1, [r7, #0]
 800ac6e:	6878      	ldr	r0, [r7, #4]
 800ac70:	f000 fa41 	bl	800b0f6 <USBD_CtlError>
          err++;
 800ac74:	7afb      	ldrb	r3, [r7, #11]
 800ac76:	3301      	adds	r3, #1
 800ac78:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac7a:	bf00      	nop
      }
      break;
 800ac7c:	e037      	b.n	800acee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	7c1b      	ldrb	r3, [r3, #16]
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d109      	bne.n	800ac9a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ac8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ac8e:	f107 0208 	add.w	r2, r7, #8
 800ac92:	4610      	mov	r0, r2
 800ac94:	4798      	blx	r3
 800ac96:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac98:	e029      	b.n	800acee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac9a:	6839      	ldr	r1, [r7, #0]
 800ac9c:	6878      	ldr	r0, [r7, #4]
 800ac9e:	f000 fa2a 	bl	800b0f6 <USBD_CtlError>
        err++;
 800aca2:	7afb      	ldrb	r3, [r7, #11]
 800aca4:	3301      	adds	r3, #1
 800aca6:	72fb      	strb	r3, [r7, #11]
      break;
 800aca8:	e021      	b.n	800acee <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	7c1b      	ldrb	r3, [r3, #16]
 800acae:	2b00      	cmp	r3, #0
 800acb0:	d10d      	bne.n	800acce <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800acb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800acba:	f107 0208 	add.w	r2, r7, #8
 800acbe:	4610      	mov	r0, r2
 800acc0:	4798      	blx	r3
 800acc2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	3301      	adds	r3, #1
 800acc8:	2207      	movs	r2, #7
 800acca:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800accc:	e00f      	b.n	800acee <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800acce:	6839      	ldr	r1, [r7, #0]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fa10 	bl	800b0f6 <USBD_CtlError>
        err++;
 800acd6:	7afb      	ldrb	r3, [r7, #11]
 800acd8:	3301      	adds	r3, #1
 800acda:	72fb      	strb	r3, [r7, #11]
      break;
 800acdc:	e007      	b.n	800acee <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa08 	bl	800b0f6 <USBD_CtlError>
      err++;
 800ace6:	7afb      	ldrb	r3, [r7, #11]
 800ace8:	3301      	adds	r3, #1
 800acea:	72fb      	strb	r3, [r7, #11]
      break;
 800acec:	bf00      	nop
  }

  if (err != 0U)
 800acee:	7afb      	ldrb	r3, [r7, #11]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d11e      	bne.n	800ad32 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acf4:	683b      	ldr	r3, [r7, #0]
 800acf6:	88db      	ldrh	r3, [r3, #6]
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d016      	beq.n	800ad2a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acfc:	893b      	ldrh	r3, [r7, #8]
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d00e      	beq.n	800ad20 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ad02:	683b      	ldr	r3, [r7, #0]
 800ad04:	88da      	ldrh	r2, [r3, #6]
 800ad06:	893b      	ldrh	r3, [r7, #8]
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	bf28      	it	cs
 800ad0c:	4613      	movcs	r3, r2
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ad12:	893b      	ldrh	r3, [r7, #8]
 800ad14:	461a      	mov	r2, r3
 800ad16:	68f9      	ldr	r1, [r7, #12]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa69 	bl	800b1f0 <USBD_CtlSendData>
 800ad1e:	e009      	b.n	800ad34 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800ad20:	6839      	ldr	r1, [r7, #0]
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 f9e7 	bl	800b0f6 <USBD_CtlError>
 800ad28:	e004      	b.n	800ad34 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ad2a:	6878      	ldr	r0, [r7, #4]
 800ad2c:	f000 faba 	bl	800b2a4 <USBD_CtlSendStatus>
 800ad30:	e000      	b.n	800ad34 <USBD_GetDescriptor+0x2cc>
    return;
 800ad32:	bf00      	nop
  }
}
 800ad34:	3710      	adds	r7, #16
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop

0800ad3c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	b084      	sub	sp, #16
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	889b      	ldrh	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d131      	bne.n	800adb2 <USBD_SetAddress+0x76>
 800ad4e:	683b      	ldr	r3, [r7, #0]
 800ad50:	88db      	ldrh	r3, [r3, #6]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d12d      	bne.n	800adb2 <USBD_SetAddress+0x76>
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	885b      	ldrh	r3, [r3, #2]
 800ad5a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad5c:	d829      	bhi.n	800adb2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	885b      	ldrh	r3, [r3, #2]
 800ad62:	b2db      	uxtb	r3, r3
 800ad64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad68:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad70:	b2db      	uxtb	r3, r3
 800ad72:	2b03      	cmp	r3, #3
 800ad74:	d104      	bne.n	800ad80 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad76:	6839      	ldr	r1, [r7, #0]
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f9bc 	bl	800b0f6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad7e:	e01d      	b.n	800adbc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	7bfa      	ldrb	r2, [r7, #15]
 800ad84:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad88:	7bfb      	ldrb	r3, [r7, #15]
 800ad8a:	4619      	mov	r1, r3
 800ad8c:	6878      	ldr	r0, [r7, #4]
 800ad8e:	f000 fee1 	bl	800bb54 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	f000 fa86 	bl	800b2a4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad98:	7bfb      	ldrb	r3, [r7, #15]
 800ad9a:	2b00      	cmp	r3, #0
 800ad9c:	d004      	beq.n	800ada8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2202      	movs	r2, #2
 800ada2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ada6:	e009      	b.n	800adbc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	2201      	movs	r2, #1
 800adac:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800adb0:	e004      	b.n	800adbc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800adb2:	6839      	ldr	r1, [r7, #0]
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f000 f99e 	bl	800b0f6 <USBD_CtlError>
  }
}
 800adba:	bf00      	nop
 800adbc:	bf00      	nop
 800adbe:	3710      	adds	r7, #16
 800adc0:	46bd      	mov	sp, r7
 800adc2:	bd80      	pop	{r7, pc}

0800adc4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800adc4:	b580      	push	{r7, lr}
 800adc6:	b084      	sub	sp, #16
 800adc8:	af00      	add	r7, sp, #0
 800adca:	6078      	str	r0, [r7, #4]
 800adcc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800adce:	2300      	movs	r3, #0
 800add0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	885b      	ldrh	r3, [r3, #2]
 800add6:	b2da      	uxtb	r2, r3
 800add8:	4b4e      	ldr	r3, [pc, #312]	@ (800af14 <USBD_SetConfig+0x150>)
 800adda:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800addc:	4b4d      	ldr	r3, [pc, #308]	@ (800af14 <USBD_SetConfig+0x150>)
 800adde:	781b      	ldrb	r3, [r3, #0]
 800ade0:	2b01      	cmp	r3, #1
 800ade2:	d905      	bls.n	800adf0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ade4:	6839      	ldr	r1, [r7, #0]
 800ade6:	6878      	ldr	r0, [r7, #4]
 800ade8:	f000 f985 	bl	800b0f6 <USBD_CtlError>
    return USBD_FAIL;
 800adec:	2303      	movs	r3, #3
 800adee:	e08c      	b.n	800af0a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adf6:	b2db      	uxtb	r3, r3
 800adf8:	2b02      	cmp	r3, #2
 800adfa:	d002      	beq.n	800ae02 <USBD_SetConfig+0x3e>
 800adfc:	2b03      	cmp	r3, #3
 800adfe:	d029      	beq.n	800ae54 <USBD_SetConfig+0x90>
 800ae00:	e075      	b.n	800aeee <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800ae02:	4b44      	ldr	r3, [pc, #272]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d020      	beq.n	800ae4c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800ae0a:	4b42      	ldr	r3, [pc, #264]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae0c:	781b      	ldrb	r3, [r3, #0]
 800ae0e:	461a      	mov	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae14:	4b3f      	ldr	r3, [pc, #252]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	4619      	mov	r1, r3
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f7fe ffe3 	bl	8009de6 <USBD_SetClassConfig>
 800ae20:	4603      	mov	r3, r0
 800ae22:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800ae24:	7bfb      	ldrb	r3, [r7, #15]
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d008      	beq.n	800ae3c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ae2a:	6839      	ldr	r1, [r7, #0]
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f000 f962 	bl	800b0f6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	2202      	movs	r2, #2
 800ae36:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae3a:	e065      	b.n	800af08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae3c:	6878      	ldr	r0, [r7, #4]
 800ae3e:	f000 fa31 	bl	800b2a4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2203      	movs	r2, #3
 800ae46:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800ae4a:	e05d      	b.n	800af08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f000 fa29 	bl	800b2a4 <USBD_CtlSendStatus>
      break;
 800ae52:	e059      	b.n	800af08 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae54:	4b2f      	ldr	r3, [pc, #188]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae56:	781b      	ldrb	r3, [r3, #0]
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d112      	bne.n	800ae82 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2202      	movs	r2, #2
 800ae60:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800ae64:	4b2b      	ldr	r3, [pc, #172]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae66:	781b      	ldrb	r3, [r3, #0]
 800ae68:	461a      	mov	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae6e:	4b29      	ldr	r3, [pc, #164]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae70:	781b      	ldrb	r3, [r3, #0]
 800ae72:	4619      	mov	r1, r3
 800ae74:	6878      	ldr	r0, [r7, #4]
 800ae76:	f7fe ffd2 	bl	8009e1e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae7a:	6878      	ldr	r0, [r7, #4]
 800ae7c:	f000 fa12 	bl	800b2a4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae80:	e042      	b.n	800af08 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae82:	4b24      	ldr	r3, [pc, #144]	@ (800af14 <USBD_SetConfig+0x150>)
 800ae84:	781b      	ldrb	r3, [r3, #0]
 800ae86:	461a      	mov	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	685b      	ldr	r3, [r3, #4]
 800ae8c:	429a      	cmp	r2, r3
 800ae8e:	d02a      	beq.n	800aee6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	685b      	ldr	r3, [r3, #4]
 800ae94:	b2db      	uxtb	r3, r3
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f7fe ffc0 	bl	8009e1e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae9e:	4b1d      	ldr	r3, [pc, #116]	@ (800af14 <USBD_SetConfig+0x150>)
 800aea0:	781b      	ldrb	r3, [r3, #0]
 800aea2:	461a      	mov	r2, r3
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800aea8:	4b1a      	ldr	r3, [pc, #104]	@ (800af14 <USBD_SetConfig+0x150>)
 800aeaa:	781b      	ldrb	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	6878      	ldr	r0, [r7, #4]
 800aeb0:	f7fe ff99 	bl	8009de6 <USBD_SetClassConfig>
 800aeb4:	4603      	mov	r3, r0
 800aeb6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800aeb8:	7bfb      	ldrb	r3, [r7, #15]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00f      	beq.n	800aede <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800aebe:	6839      	ldr	r1, [r7, #0]
 800aec0:	6878      	ldr	r0, [r7, #4]
 800aec2:	f000 f918 	bl	800b0f6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	4619      	mov	r1, r3
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	f7fe ffa5 	bl	8009e1e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	2202      	movs	r2, #2
 800aed8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800aedc:	e014      	b.n	800af08 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f9e0 	bl	800b2a4 <USBD_CtlSendStatus>
      break;
 800aee4:	e010      	b.n	800af08 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	f000 f9dc 	bl	800b2a4 <USBD_CtlSendStatus>
      break;
 800aeec:	e00c      	b.n	800af08 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aeee:	6839      	ldr	r1, [r7, #0]
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 f900 	bl	800b0f6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aef6:	4b07      	ldr	r3, [pc, #28]	@ (800af14 <USBD_SetConfig+0x150>)
 800aef8:	781b      	ldrb	r3, [r3, #0]
 800aefa:	4619      	mov	r1, r3
 800aefc:	6878      	ldr	r0, [r7, #4]
 800aefe:	f7fe ff8e 	bl	8009e1e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800af02:	2303      	movs	r3, #3
 800af04:	73fb      	strb	r3, [r7, #15]
      break;
 800af06:	bf00      	nop
  }

  return ret;
 800af08:	7bfb      	ldrb	r3, [r7, #15]
}
 800af0a:	4618      	mov	r0, r3
 800af0c:	3710      	adds	r7, #16
 800af0e:	46bd      	mov	sp, r7
 800af10:	bd80      	pop	{r7, pc}
 800af12:	bf00      	nop
 800af14:	200003a4 	.word	0x200003a4

0800af18 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af18:	b580      	push	{r7, lr}
 800af1a:	b082      	sub	sp, #8
 800af1c:	af00      	add	r7, sp, #0
 800af1e:	6078      	str	r0, [r7, #4]
 800af20:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	88db      	ldrh	r3, [r3, #6]
 800af26:	2b01      	cmp	r3, #1
 800af28:	d004      	beq.n	800af34 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f8e2 	bl	800b0f6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800af32:	e023      	b.n	800af7c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b02      	cmp	r3, #2
 800af3e:	dc02      	bgt.n	800af46 <USBD_GetConfig+0x2e>
 800af40:	2b00      	cmp	r3, #0
 800af42:	dc03      	bgt.n	800af4c <USBD_GetConfig+0x34>
 800af44:	e015      	b.n	800af72 <USBD_GetConfig+0x5a>
 800af46:	2b03      	cmp	r3, #3
 800af48:	d00b      	beq.n	800af62 <USBD_GetConfig+0x4a>
 800af4a:	e012      	b.n	800af72 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	3308      	adds	r3, #8
 800af56:	2201      	movs	r2, #1
 800af58:	4619      	mov	r1, r3
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f000 f948 	bl	800b1f0 <USBD_CtlSendData>
        break;
 800af60:	e00c      	b.n	800af7c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	3304      	adds	r3, #4
 800af66:	2201      	movs	r2, #1
 800af68:	4619      	mov	r1, r3
 800af6a:	6878      	ldr	r0, [r7, #4]
 800af6c:	f000 f940 	bl	800b1f0 <USBD_CtlSendData>
        break;
 800af70:	e004      	b.n	800af7c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af72:	6839      	ldr	r1, [r7, #0]
 800af74:	6878      	ldr	r0, [r7, #4]
 800af76:	f000 f8be 	bl	800b0f6 <USBD_CtlError>
        break;
 800af7a:	bf00      	nop
}
 800af7c:	bf00      	nop
 800af7e:	3708      	adds	r7, #8
 800af80:	46bd      	mov	sp, r7
 800af82:	bd80      	pop	{r7, pc}

0800af84 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af84:	b580      	push	{r7, lr}
 800af86:	b082      	sub	sp, #8
 800af88:	af00      	add	r7, sp, #0
 800af8a:	6078      	str	r0, [r7, #4]
 800af8c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af94:	b2db      	uxtb	r3, r3
 800af96:	3b01      	subs	r3, #1
 800af98:	2b02      	cmp	r3, #2
 800af9a:	d81e      	bhi.n	800afda <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	88db      	ldrh	r3, [r3, #6]
 800afa0:	2b02      	cmp	r3, #2
 800afa2:	d004      	beq.n	800afae <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800afa4:	6839      	ldr	r1, [r7, #0]
 800afa6:	6878      	ldr	r0, [r7, #4]
 800afa8:	f000 f8a5 	bl	800b0f6 <USBD_CtlError>
        break;
 800afac:	e01a      	b.n	800afe4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	2201      	movs	r2, #1
 800afb2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d005      	beq.n	800afca <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	68db      	ldr	r3, [r3, #12]
 800afc2:	f043 0202 	orr.w	r2, r3, #2
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	330c      	adds	r3, #12
 800afce:	2202      	movs	r2, #2
 800afd0:	4619      	mov	r1, r3
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f000 f90c 	bl	800b1f0 <USBD_CtlSendData>
      break;
 800afd8:	e004      	b.n	800afe4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800afda:	6839      	ldr	r1, [r7, #0]
 800afdc:	6878      	ldr	r0, [r7, #4]
 800afde:	f000 f88a 	bl	800b0f6 <USBD_CtlError>
      break;
 800afe2:	bf00      	nop
  }
}
 800afe4:	bf00      	nop
 800afe6:	3708      	adds	r7, #8
 800afe8:	46bd      	mov	sp, r7
 800afea:	bd80      	pop	{r7, pc}

0800afec <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
 800aff4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	885b      	ldrh	r3, [r3, #2]
 800affa:	2b01      	cmp	r3, #1
 800affc:	d107      	bne.n	800b00e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2201      	movs	r2, #1
 800b002:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b006:	6878      	ldr	r0, [r7, #4]
 800b008:	f000 f94c 	bl	800b2a4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b00c:	e013      	b.n	800b036 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d10b      	bne.n	800b02e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b016:	683b      	ldr	r3, [r7, #0]
 800b018:	889b      	ldrh	r3, [r3, #4]
 800b01a:	0a1b      	lsrs	r3, r3, #8
 800b01c:	b29b      	uxth	r3, r3
 800b01e:	b2da      	uxtb	r2, r3
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b026:	6878      	ldr	r0, [r7, #4]
 800b028:	f000 f93c 	bl	800b2a4 <USBD_CtlSendStatus>
}
 800b02c:	e003      	b.n	800b036 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b02e:	6839      	ldr	r1, [r7, #0]
 800b030:	6878      	ldr	r0, [r7, #4]
 800b032:	f000 f860 	bl	800b0f6 <USBD_CtlError>
}
 800b036:	bf00      	nop
 800b038:	3708      	adds	r7, #8
 800b03a:	46bd      	mov	sp, r7
 800b03c:	bd80      	pop	{r7, pc}

0800b03e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b03e:	b580      	push	{r7, lr}
 800b040:	b082      	sub	sp, #8
 800b042:	af00      	add	r7, sp, #0
 800b044:	6078      	str	r0, [r7, #4]
 800b046:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b04e:	b2db      	uxtb	r3, r3
 800b050:	3b01      	subs	r3, #1
 800b052:	2b02      	cmp	r3, #2
 800b054:	d80b      	bhi.n	800b06e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	885b      	ldrh	r3, [r3, #2]
 800b05a:	2b01      	cmp	r3, #1
 800b05c:	d10c      	bne.n	800b078 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b066:	6878      	ldr	r0, [r7, #4]
 800b068:	f000 f91c 	bl	800b2a4 <USBD_CtlSendStatus>
      }
      break;
 800b06c:	e004      	b.n	800b078 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	f000 f840 	bl	800b0f6 <USBD_CtlError>
      break;
 800b076:	e000      	b.n	800b07a <USBD_ClrFeature+0x3c>
      break;
 800b078:	bf00      	nop
  }
}
 800b07a:	bf00      	nop
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b082:	b580      	push	{r7, lr}
 800b084:	b084      	sub	sp, #16
 800b086:	af00      	add	r7, sp, #0
 800b088:	6078      	str	r0, [r7, #4]
 800b08a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b08c:	683b      	ldr	r3, [r7, #0]
 800b08e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	781a      	ldrb	r2, [r3, #0]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	3301      	adds	r3, #1
 800b09c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	781a      	ldrb	r2, [r3, #0]
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	3301      	adds	r3, #1
 800b0aa:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b0ac:	68f8      	ldr	r0, [r7, #12]
 800b0ae:	f7ff fa40 	bl	800a532 <SWAPBYTE>
 800b0b2:	4603      	mov	r3, r0
 800b0b4:	461a      	mov	r2, r3
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	3301      	adds	r3, #1
 800b0be:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	3301      	adds	r3, #1
 800b0c4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b0c6:	68f8      	ldr	r0, [r7, #12]
 800b0c8:	f7ff fa33 	bl	800a532 <SWAPBYTE>
 800b0cc:	4603      	mov	r3, r0
 800b0ce:	461a      	mov	r2, r3
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	3301      	adds	r3, #1
 800b0d8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	3301      	adds	r3, #1
 800b0de:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b0e0:	68f8      	ldr	r0, [r7, #12]
 800b0e2:	f7ff fa26 	bl	800a532 <SWAPBYTE>
 800b0e6:	4603      	mov	r3, r0
 800b0e8:	461a      	mov	r2, r3
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	80da      	strh	r2, [r3, #6]
}
 800b0ee:	bf00      	nop
 800b0f0:	3710      	adds	r7, #16
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	bd80      	pop	{r7, pc}

0800b0f6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0f6:	b580      	push	{r7, lr}
 800b0f8:	b082      	sub	sp, #8
 800b0fa:	af00      	add	r7, sp, #0
 800b0fc:	6078      	str	r0, [r7, #4]
 800b0fe:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b100:	2180      	movs	r1, #128	@ 0x80
 800b102:	6878      	ldr	r0, [r7, #4]
 800b104:	f000 fcbc 	bl	800ba80 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b108:	2100      	movs	r1, #0
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fcb8 	bl	800ba80 <USBD_LL_StallEP>
}
 800b110:	bf00      	nop
 800b112:	3708      	adds	r7, #8
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}

0800b118 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b118:	b580      	push	{r7, lr}
 800b11a:	b086      	sub	sp, #24
 800b11c:	af00      	add	r7, sp, #0
 800b11e:	60f8      	str	r0, [r7, #12]
 800b120:	60b9      	str	r1, [r7, #8]
 800b122:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b124:	2300      	movs	r3, #0
 800b126:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	d042      	beq.n	800b1b4 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b132:	6938      	ldr	r0, [r7, #16]
 800b134:	f000 f842 	bl	800b1bc <USBD_GetLen>
 800b138:	4603      	mov	r3, r0
 800b13a:	3301      	adds	r3, #1
 800b13c:	005b      	lsls	r3, r3, #1
 800b13e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b142:	d808      	bhi.n	800b156 <USBD_GetString+0x3e>
 800b144:	6938      	ldr	r0, [r7, #16]
 800b146:	f000 f839 	bl	800b1bc <USBD_GetLen>
 800b14a:	4603      	mov	r3, r0
 800b14c:	3301      	adds	r3, #1
 800b14e:	b29b      	uxth	r3, r3
 800b150:	005b      	lsls	r3, r3, #1
 800b152:	b29a      	uxth	r2, r3
 800b154:	e001      	b.n	800b15a <USBD_GetString+0x42>
 800b156:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b15e:	7dfb      	ldrb	r3, [r7, #23]
 800b160:	68ba      	ldr	r2, [r7, #8]
 800b162:	4413      	add	r3, r2
 800b164:	687a      	ldr	r2, [r7, #4]
 800b166:	7812      	ldrb	r2, [r2, #0]
 800b168:	701a      	strb	r2, [r3, #0]
  idx++;
 800b16a:	7dfb      	ldrb	r3, [r7, #23]
 800b16c:	3301      	adds	r3, #1
 800b16e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b170:	7dfb      	ldrb	r3, [r7, #23]
 800b172:	68ba      	ldr	r2, [r7, #8]
 800b174:	4413      	add	r3, r2
 800b176:	2203      	movs	r2, #3
 800b178:	701a      	strb	r2, [r3, #0]
  idx++;
 800b17a:	7dfb      	ldrb	r3, [r7, #23]
 800b17c:	3301      	adds	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b180:	e013      	b.n	800b1aa <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b182:	7dfb      	ldrb	r3, [r7, #23]
 800b184:	68ba      	ldr	r2, [r7, #8]
 800b186:	4413      	add	r3, r2
 800b188:	693a      	ldr	r2, [r7, #16]
 800b18a:	7812      	ldrb	r2, [r2, #0]
 800b18c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b18e:	693b      	ldr	r3, [r7, #16]
 800b190:	3301      	adds	r3, #1
 800b192:	613b      	str	r3, [r7, #16]
    idx++;
 800b194:	7dfb      	ldrb	r3, [r7, #23]
 800b196:	3301      	adds	r3, #1
 800b198:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b19a:	7dfb      	ldrb	r3, [r7, #23]
 800b19c:	68ba      	ldr	r2, [r7, #8]
 800b19e:	4413      	add	r3, r2
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	701a      	strb	r2, [r3, #0]
    idx++;
 800b1a4:	7dfb      	ldrb	r3, [r7, #23]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b1aa:	693b      	ldr	r3, [r7, #16]
 800b1ac:	781b      	ldrb	r3, [r3, #0]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d1e7      	bne.n	800b182 <USBD_GetString+0x6a>
 800b1b2:	e000      	b.n	800b1b6 <USBD_GetString+0x9e>
    return;
 800b1b4:	bf00      	nop
  }
}
 800b1b6:	3718      	adds	r7, #24
 800b1b8:	46bd      	mov	sp, r7
 800b1ba:	bd80      	pop	{r7, pc}

0800b1bc <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b1bc:	b480      	push	{r7}
 800b1be:	b085      	sub	sp, #20
 800b1c0:	af00      	add	r7, sp, #0
 800b1c2:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b1cc:	e005      	b.n	800b1da <USBD_GetLen+0x1e>
  {
    len++;
 800b1ce:	7bfb      	ldrb	r3, [r7, #15]
 800b1d0:	3301      	adds	r3, #1
 800b1d2:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b1d4:	68bb      	ldr	r3, [r7, #8]
 800b1d6:	3301      	adds	r3, #1
 800b1d8:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	781b      	ldrb	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d1f5      	bne.n	800b1ce <USBD_GetLen+0x12>
  }

  return len;
 800b1e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	3714      	adds	r7, #20
 800b1e8:	46bd      	mov	sp, r7
 800b1ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ee:	4770      	bx	lr

0800b1f0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b1f0:	b580      	push	{r7, lr}
 800b1f2:	b084      	sub	sp, #16
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	2202      	movs	r2, #2
 800b200:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	687a      	ldr	r2, [r7, #4]
 800b208:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	68ba      	ldr	r2, [r7, #8]
 800b214:	2100      	movs	r1, #0
 800b216:	68f8      	ldr	r0, [r7, #12]
 800b218:	f000 fcbb 	bl	800bb92 <USBD_LL_Transmit>

  return USBD_OK;
 800b21c:	2300      	movs	r3, #0
}
 800b21e:	4618      	mov	r0, r3
 800b220:	3710      	adds	r7, #16
 800b222:	46bd      	mov	sp, r7
 800b224:	bd80      	pop	{r7, pc}

0800b226 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b226:	b580      	push	{r7, lr}
 800b228:	b084      	sub	sp, #16
 800b22a:	af00      	add	r7, sp, #0
 800b22c:	60f8      	str	r0, [r7, #12]
 800b22e:	60b9      	str	r1, [r7, #8]
 800b230:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	68ba      	ldr	r2, [r7, #8]
 800b236:	2100      	movs	r1, #0
 800b238:	68f8      	ldr	r0, [r7, #12]
 800b23a:	f000 fcaa 	bl	800bb92 <USBD_LL_Transmit>

  return USBD_OK;
 800b23e:	2300      	movs	r3, #0
}
 800b240:	4618      	mov	r0, r3
 800b242:	3710      	adds	r7, #16
 800b244:	46bd      	mov	sp, r7
 800b246:	bd80      	pop	{r7, pc}

0800b248 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	b084      	sub	sp, #16
 800b24c:	af00      	add	r7, sp, #0
 800b24e:	60f8      	str	r0, [r7, #12]
 800b250:	60b9      	str	r1, [r7, #8]
 800b252:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2203      	movs	r2, #3
 800b258:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	687a      	ldr	r2, [r7, #4]
 800b260:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	687a      	ldr	r2, [r7, #4]
 800b268:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	68ba      	ldr	r2, [r7, #8]
 800b270:	2100      	movs	r1, #0
 800b272:	68f8      	ldr	r0, [r7, #12]
 800b274:	f000 fcae 	bl	800bbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}

0800b282 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b282:	b580      	push	{r7, lr}
 800b284:	b084      	sub	sp, #16
 800b286:	af00      	add	r7, sp, #0
 800b288:	60f8      	str	r0, [r7, #12]
 800b28a:	60b9      	str	r1, [r7, #8]
 800b28c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	68ba      	ldr	r2, [r7, #8]
 800b292:	2100      	movs	r1, #0
 800b294:	68f8      	ldr	r0, [r7, #12]
 800b296:	f000 fc9d 	bl	800bbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b29a:	2300      	movs	r3, #0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3710      	adds	r7, #16
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b082      	sub	sp, #8
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	2204      	movs	r2, #4
 800b2b0:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	2200      	movs	r2, #0
 800b2b8:	2100      	movs	r1, #0
 800b2ba:	6878      	ldr	r0, [r7, #4]
 800b2bc:	f000 fc69 	bl	800bb92 <USBD_LL_Transmit>

  return USBD_OK;
 800b2c0:	2300      	movs	r3, #0
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3708      	adds	r7, #8
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b082      	sub	sp, #8
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	2205      	movs	r2, #5
 800b2d6:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2da:	2300      	movs	r3, #0
 800b2dc:	2200      	movs	r2, #0
 800b2de:	2100      	movs	r1, #0
 800b2e0:	6878      	ldr	r0, [r7, #4]
 800b2e2:	f000 fc77 	bl	800bbd4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b2e6:	2300      	movs	r3, #0
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3708      	adds	r7, #8
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd80      	pop	{r7, pc}

0800b2f0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b2f4:	2200      	movs	r2, #0
 800b2f6:	4912      	ldr	r1, [pc, #72]	@ (800b340 <MX_USB_DEVICE_Init+0x50>)
 800b2f8:	4812      	ldr	r0, [pc, #72]	@ (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b2fa:	f7fe fcf7 	bl	8009cec <USBD_Init>
 800b2fe:	4603      	mov	r3, r0
 800b300:	2b00      	cmp	r3, #0
 800b302:	d001      	beq.n	800b308 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b304:	f7f5 fb9e 	bl	8000a44 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b308:	490f      	ldr	r1, [pc, #60]	@ (800b348 <MX_USB_DEVICE_Init+0x58>)
 800b30a:	480e      	ldr	r0, [pc, #56]	@ (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b30c:	f7fe fd1e 	bl	8009d4c <USBD_RegisterClass>
 800b310:	4603      	mov	r3, r0
 800b312:	2b00      	cmp	r3, #0
 800b314:	d001      	beq.n	800b31a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b316:	f7f5 fb95 	bl	8000a44 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b31a:	490c      	ldr	r1, [pc, #48]	@ (800b34c <MX_USB_DEVICE_Init+0x5c>)
 800b31c:	4809      	ldr	r0, [pc, #36]	@ (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b31e:	f7fe fc55 	bl	8009bcc <USBD_CDC_RegisterInterface>
 800b322:	4603      	mov	r3, r0
 800b324:	2b00      	cmp	r3, #0
 800b326:	d001      	beq.n	800b32c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b328:	f7f5 fb8c 	bl	8000a44 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b32c:	4805      	ldr	r0, [pc, #20]	@ (800b344 <MX_USB_DEVICE_Init+0x54>)
 800b32e:	f7fe fd43 	bl	8009db8 <USBD_Start>
 800b332:	4603      	mov	r3, r0
 800b334:	2b00      	cmp	r3, #0
 800b336:	d001      	beq.n	800b33c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b338:	f7f5 fb84 	bl	8000a44 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b33c:	bf00      	nop
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	200000e8 	.word	0x200000e8
 800b344:	200003a8 	.word	0x200003a8
 800b348:	20000054 	.word	0x20000054
 800b34c:	200000d4 	.word	0x200000d4

0800b350 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b354:	2200      	movs	r2, #0
 800b356:	4905      	ldr	r1, [pc, #20]	@ (800b36c <CDC_Init_FS+0x1c>)
 800b358:	4805      	ldr	r0, [pc, #20]	@ (800b370 <CDC_Init_FS+0x20>)
 800b35a:	f7fe fc51 	bl	8009c00 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b35e:	4905      	ldr	r1, [pc, #20]	@ (800b374 <CDC_Init_FS+0x24>)
 800b360:	4803      	ldr	r0, [pc, #12]	@ (800b370 <CDC_Init_FS+0x20>)
 800b362:	f7fe fc6f 	bl	8009c44 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b366:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b368:	4618      	mov	r0, r3
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20000a84 	.word	0x20000a84
 800b370:	200003a8 	.word	0x200003a8
 800b374:	20000684 	.word	0x20000684

0800b378 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b378:	b480      	push	{r7}
 800b37a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b37c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b37e:	4618      	mov	r0, r3
 800b380:	46bd      	mov	sp, r7
 800b382:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b386:	4770      	bx	lr

0800b388 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b388:	b480      	push	{r7}
 800b38a:	b083      	sub	sp, #12
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	4603      	mov	r3, r0
 800b390:	6039      	str	r1, [r7, #0]
 800b392:	71fb      	strb	r3, [r7, #7]
 800b394:	4613      	mov	r3, r2
 800b396:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b398:	79fb      	ldrb	r3, [r7, #7]
 800b39a:	2b23      	cmp	r3, #35	@ 0x23
 800b39c:	d84a      	bhi.n	800b434 <CDC_Control_FS+0xac>
 800b39e:	a201      	add	r2, pc, #4	@ (adr r2, 800b3a4 <CDC_Control_FS+0x1c>)
 800b3a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3a4:	0800b435 	.word	0x0800b435
 800b3a8:	0800b435 	.word	0x0800b435
 800b3ac:	0800b435 	.word	0x0800b435
 800b3b0:	0800b435 	.word	0x0800b435
 800b3b4:	0800b435 	.word	0x0800b435
 800b3b8:	0800b435 	.word	0x0800b435
 800b3bc:	0800b435 	.word	0x0800b435
 800b3c0:	0800b435 	.word	0x0800b435
 800b3c4:	0800b435 	.word	0x0800b435
 800b3c8:	0800b435 	.word	0x0800b435
 800b3cc:	0800b435 	.word	0x0800b435
 800b3d0:	0800b435 	.word	0x0800b435
 800b3d4:	0800b435 	.word	0x0800b435
 800b3d8:	0800b435 	.word	0x0800b435
 800b3dc:	0800b435 	.word	0x0800b435
 800b3e0:	0800b435 	.word	0x0800b435
 800b3e4:	0800b435 	.word	0x0800b435
 800b3e8:	0800b435 	.word	0x0800b435
 800b3ec:	0800b435 	.word	0x0800b435
 800b3f0:	0800b435 	.word	0x0800b435
 800b3f4:	0800b435 	.word	0x0800b435
 800b3f8:	0800b435 	.word	0x0800b435
 800b3fc:	0800b435 	.word	0x0800b435
 800b400:	0800b435 	.word	0x0800b435
 800b404:	0800b435 	.word	0x0800b435
 800b408:	0800b435 	.word	0x0800b435
 800b40c:	0800b435 	.word	0x0800b435
 800b410:	0800b435 	.word	0x0800b435
 800b414:	0800b435 	.word	0x0800b435
 800b418:	0800b435 	.word	0x0800b435
 800b41c:	0800b435 	.word	0x0800b435
 800b420:	0800b435 	.word	0x0800b435
 800b424:	0800b435 	.word	0x0800b435
 800b428:	0800b435 	.word	0x0800b435
 800b42c:	0800b435 	.word	0x0800b435
 800b430:	0800b435 	.word	0x0800b435
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800b434:	bf00      	nop
  }

  return (USBD_OK);
 800b436:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800b438:	4618      	mov	r0, r3
 800b43a:	370c      	adds	r7, #12
 800b43c:	46bd      	mov	sp, r7
 800b43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b442:	4770      	bx	lr

0800b444 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b082      	sub	sp, #8
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800b44e:	6879      	ldr	r1, [r7, #4]
 800b450:	4805      	ldr	r0, [pc, #20]	@ (800b468 <CDC_Receive_FS+0x24>)
 800b452:	f7fe fbf7 	bl	8009c44 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800b456:	4804      	ldr	r0, [pc, #16]	@ (800b468 <CDC_Receive_FS+0x24>)
 800b458:	f7fe fc12 	bl	8009c80 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800b45c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3708      	adds	r7, #8
 800b462:	46bd      	mov	sp, r7
 800b464:	bd80      	pop	{r7, pc}
 800b466:	bf00      	nop
 800b468:	200003a8 	.word	0x200003a8

0800b46c <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800b46c:	b480      	push	{r7}
 800b46e:	b087      	sub	sp, #28
 800b470:	af00      	add	r7, sp, #0
 800b472:	60f8      	str	r0, [r7, #12]
 800b474:	60b9      	str	r1, [r7, #8]
 800b476:	4613      	mov	r3, r2
 800b478:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800b47a:	2300      	movs	r3, #0
 800b47c:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800b47e:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800b482:	4618      	mov	r0, r3
 800b484:	371c      	adds	r7, #28
 800b486:	46bd      	mov	sp, r7
 800b488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b48c:	4770      	bx	lr
	...

0800b490 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b490:	b480      	push	{r7}
 800b492:	b083      	sub	sp, #12
 800b494:	af00      	add	r7, sp, #0
 800b496:	4603      	mov	r3, r0
 800b498:	6039      	str	r1, [r7, #0]
 800b49a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b49c:	683b      	ldr	r3, [r7, #0]
 800b49e:	2212      	movs	r2, #18
 800b4a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b4a2:	4b03      	ldr	r3, [pc, #12]	@ (800b4b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	370c      	adds	r7, #12
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ae:	4770      	bx	lr
 800b4b0:	20000104 	.word	0x20000104

0800b4b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4b4:	b480      	push	{r7}
 800b4b6:	b083      	sub	sp, #12
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	6039      	str	r1, [r7, #0]
 800b4be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	2204      	movs	r2, #4
 800b4c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b4c6:	4b03      	ldr	r3, [pc, #12]	@ (800b4d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	370c      	adds	r7, #12
 800b4cc:	46bd      	mov	sp, r7
 800b4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d2:	4770      	bx	lr
 800b4d4:	20000118 	.word	0x20000118

0800b4d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d105      	bne.n	800b4f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	4907      	ldr	r1, [pc, #28]	@ (800b50c <USBD_FS_ProductStrDescriptor+0x34>)
 800b4ee:	4808      	ldr	r0, [pc, #32]	@ (800b510 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4f0:	f7ff fe12 	bl	800b118 <USBD_GetString>
 800b4f4:	e004      	b.n	800b500 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b4f6:	683a      	ldr	r2, [r7, #0]
 800b4f8:	4904      	ldr	r1, [pc, #16]	@ (800b50c <USBD_FS_ProductStrDescriptor+0x34>)
 800b4fa:	4805      	ldr	r0, [pc, #20]	@ (800b510 <USBD_FS_ProductStrDescriptor+0x38>)
 800b4fc:	f7ff fe0c 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b500:	4b02      	ldr	r3, [pc, #8]	@ (800b50c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b502:	4618      	mov	r0, r3
 800b504:	3708      	adds	r7, #8
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}
 800b50a:	bf00      	nop
 800b50c:	20000e84 	.word	0x20000e84
 800b510:	0800c224 	.word	0x0800c224

0800b514 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
 800b51a:	4603      	mov	r3, r0
 800b51c:	6039      	str	r1, [r7, #0]
 800b51e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b520:	683a      	ldr	r2, [r7, #0]
 800b522:	4904      	ldr	r1, [pc, #16]	@ (800b534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b524:	4804      	ldr	r0, [pc, #16]	@ (800b538 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b526:	f7ff fdf7 	bl	800b118 <USBD_GetString>
  return USBD_StrDesc;
 800b52a:	4b02      	ldr	r3, [pc, #8]	@ (800b534 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b52c:	4618      	mov	r0, r3
 800b52e:	3708      	adds	r7, #8
 800b530:	46bd      	mov	sp, r7
 800b532:	bd80      	pop	{r7, pc}
 800b534:	20000e84 	.word	0x20000e84
 800b538:	0800c23c 	.word	0x0800c23c

0800b53c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b082      	sub	sp, #8
 800b540:	af00      	add	r7, sp, #0
 800b542:	4603      	mov	r3, r0
 800b544:	6039      	str	r1, [r7, #0]
 800b546:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	221a      	movs	r2, #26
 800b54c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b54e:	f000 f843 	bl	800b5d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b552:	4b02      	ldr	r3, [pc, #8]	@ (800b55c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b554:	4618      	mov	r0, r3
 800b556:	3708      	adds	r7, #8
 800b558:	46bd      	mov	sp, r7
 800b55a:	bd80      	pop	{r7, pc}
 800b55c:	2000011c 	.word	0x2000011c

0800b560 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b560:	b580      	push	{r7, lr}
 800b562:	b082      	sub	sp, #8
 800b564:	af00      	add	r7, sp, #0
 800b566:	4603      	mov	r3, r0
 800b568:	6039      	str	r1, [r7, #0]
 800b56a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b56c:	79fb      	ldrb	r3, [r7, #7]
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d105      	bne.n	800b57e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b572:	683a      	ldr	r2, [r7, #0]
 800b574:	4907      	ldr	r1, [pc, #28]	@ (800b594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b576:	4808      	ldr	r0, [pc, #32]	@ (800b598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b578:	f7ff fdce 	bl	800b118 <USBD_GetString>
 800b57c:	e004      	b.n	800b588 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b57e:	683a      	ldr	r2, [r7, #0]
 800b580:	4904      	ldr	r1, [pc, #16]	@ (800b594 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b582:	4805      	ldr	r0, [pc, #20]	@ (800b598 <USBD_FS_ConfigStrDescriptor+0x38>)
 800b584:	f7ff fdc8 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b588:	4b02      	ldr	r3, [pc, #8]	@ (800b594 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b58a:	4618      	mov	r0, r3
 800b58c:	3708      	adds	r7, #8
 800b58e:	46bd      	mov	sp, r7
 800b590:	bd80      	pop	{r7, pc}
 800b592:	bf00      	nop
 800b594:	20000e84 	.word	0x20000e84
 800b598:	0800c250 	.word	0x0800c250

0800b59c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b59c:	b580      	push	{r7, lr}
 800b59e:	b082      	sub	sp, #8
 800b5a0:	af00      	add	r7, sp, #0
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	6039      	str	r1, [r7, #0]
 800b5a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b5a8:	79fb      	ldrb	r3, [r7, #7]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d105      	bne.n	800b5ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ae:	683a      	ldr	r2, [r7, #0]
 800b5b0:	4907      	ldr	r1, [pc, #28]	@ (800b5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5b2:	4808      	ldr	r0, [pc, #32]	@ (800b5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5b4:	f7ff fdb0 	bl	800b118 <USBD_GetString>
 800b5b8:	e004      	b.n	800b5c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b5ba:	683a      	ldr	r2, [r7, #0]
 800b5bc:	4904      	ldr	r1, [pc, #16]	@ (800b5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b5be:	4805      	ldr	r0, [pc, #20]	@ (800b5d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b5c0:	f7ff fdaa 	bl	800b118 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b5c4:	4b02      	ldr	r3, [pc, #8]	@ (800b5d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	20000e84 	.word	0x20000e84
 800b5d4:	0800c25c 	.word	0x0800c25c

0800b5d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b5de:	4b0f      	ldr	r3, [pc, #60]	@ (800b61c <Get_SerialNum+0x44>)
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b5e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b620 <Get_SerialNum+0x48>)
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b5ea:	4b0e      	ldr	r3, [pc, #56]	@ (800b624 <Get_SerialNum+0x4c>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b5f0:	68fa      	ldr	r2, [r7, #12]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d009      	beq.n	800b612 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b5fe:	2208      	movs	r2, #8
 800b600:	4909      	ldr	r1, [pc, #36]	@ (800b628 <Get_SerialNum+0x50>)
 800b602:	68f8      	ldr	r0, [r7, #12]
 800b604:	f000 f814 	bl	800b630 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b608:	2204      	movs	r2, #4
 800b60a:	4908      	ldr	r1, [pc, #32]	@ (800b62c <Get_SerialNum+0x54>)
 800b60c:	68b8      	ldr	r0, [r7, #8]
 800b60e:	f000 f80f 	bl	800b630 <IntToUnicode>
  }
}
 800b612:	bf00      	nop
 800b614:	3710      	adds	r7, #16
 800b616:	46bd      	mov	sp, r7
 800b618:	bd80      	pop	{r7, pc}
 800b61a:	bf00      	nop
 800b61c:	1fff7a10 	.word	0x1fff7a10
 800b620:	1fff7a14 	.word	0x1fff7a14
 800b624:	1fff7a18 	.word	0x1fff7a18
 800b628:	2000011e 	.word	0x2000011e
 800b62c:	2000012e 	.word	0x2000012e

0800b630 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b630:	b480      	push	{r7}
 800b632:	b087      	sub	sp, #28
 800b634:	af00      	add	r7, sp, #0
 800b636:	60f8      	str	r0, [r7, #12]
 800b638:	60b9      	str	r1, [r7, #8]
 800b63a:	4613      	mov	r3, r2
 800b63c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b63e:	2300      	movs	r3, #0
 800b640:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b642:	2300      	movs	r3, #0
 800b644:	75fb      	strb	r3, [r7, #23]
 800b646:	e027      	b.n	800b698 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	0f1b      	lsrs	r3, r3, #28
 800b64c:	2b09      	cmp	r3, #9
 800b64e:	d80b      	bhi.n	800b668 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	0f1b      	lsrs	r3, r3, #28
 800b654:	b2da      	uxtb	r2, r3
 800b656:	7dfb      	ldrb	r3, [r7, #23]
 800b658:	005b      	lsls	r3, r3, #1
 800b65a:	4619      	mov	r1, r3
 800b65c:	68bb      	ldr	r3, [r7, #8]
 800b65e:	440b      	add	r3, r1
 800b660:	3230      	adds	r2, #48	@ 0x30
 800b662:	b2d2      	uxtb	r2, r2
 800b664:	701a      	strb	r2, [r3, #0]
 800b666:	e00a      	b.n	800b67e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b668:	68fb      	ldr	r3, [r7, #12]
 800b66a:	0f1b      	lsrs	r3, r3, #28
 800b66c:	b2da      	uxtb	r2, r3
 800b66e:	7dfb      	ldrb	r3, [r7, #23]
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	4619      	mov	r1, r3
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	440b      	add	r3, r1
 800b678:	3237      	adds	r2, #55	@ 0x37
 800b67a:	b2d2      	uxtb	r2, r2
 800b67c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	011b      	lsls	r3, r3, #4
 800b682:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b684:	7dfb      	ldrb	r3, [r7, #23]
 800b686:	005b      	lsls	r3, r3, #1
 800b688:	3301      	adds	r3, #1
 800b68a:	68ba      	ldr	r2, [r7, #8]
 800b68c:	4413      	add	r3, r2
 800b68e:	2200      	movs	r2, #0
 800b690:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b692:	7dfb      	ldrb	r3, [r7, #23]
 800b694:	3301      	adds	r3, #1
 800b696:	75fb      	strb	r3, [r7, #23]
 800b698:	7dfa      	ldrb	r2, [r7, #23]
 800b69a:	79fb      	ldrb	r3, [r7, #7]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	d3d3      	bcc.n	800b648 <IntToUnicode+0x18>
  }
}
 800b6a0:	bf00      	nop
 800b6a2:	bf00      	nop
 800b6a4:	371c      	adds	r7, #28
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr
	...

0800b6b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b08a      	sub	sp, #40	@ 0x28
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b6b8:	f107 0314 	add.w	r3, r7, #20
 800b6bc:	2200      	movs	r2, #0
 800b6be:	601a      	str	r2, [r3, #0]
 800b6c0:	605a      	str	r2, [r3, #4]
 800b6c2:	609a      	str	r2, [r3, #8]
 800b6c4:	60da      	str	r2, [r3, #12]
 800b6c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800b6d0:	d13a      	bne.n	800b748 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	613b      	str	r3, [r7, #16]
 800b6d6:	4b1e      	ldr	r3, [pc, #120]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b6d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6da:	4a1d      	ldr	r2, [pc, #116]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b6dc:	f043 0301 	orr.w	r3, r3, #1
 800b6e0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b6e2:	4b1b      	ldr	r3, [pc, #108]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b6e6:	f003 0301 	and.w	r3, r3, #1
 800b6ea:	613b      	str	r3, [r7, #16]
 800b6ec:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b6ee:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800b6f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b6fc:	2303      	movs	r3, #3
 800b6fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b700:	230a      	movs	r3, #10
 800b702:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b704:	f107 0314 	add.w	r3, r7, #20
 800b708:	4619      	mov	r1, r3
 800b70a:	4812      	ldr	r0, [pc, #72]	@ (800b754 <HAL_PCD_MspInit+0xa4>)
 800b70c:	f7f8 fb0a 	bl	8003d24 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b710:	4b0f      	ldr	r3, [pc, #60]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b712:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b714:	4a0e      	ldr	r2, [pc, #56]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b716:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b71a:	6353      	str	r3, [r2, #52]	@ 0x34
 800b71c:	2300      	movs	r3, #0
 800b71e:	60fb      	str	r3, [r7, #12]
 800b720:	4b0b      	ldr	r3, [pc, #44]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b722:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b724:	4a0a      	ldr	r2, [pc, #40]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b726:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800b72a:	6453      	str	r3, [r2, #68]	@ 0x44
 800b72c:	4b08      	ldr	r3, [pc, #32]	@ (800b750 <HAL_PCD_MspInit+0xa0>)
 800b72e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b730:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b734:	60fb      	str	r3, [r7, #12]
 800b736:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b738:	2200      	movs	r2, #0
 800b73a:	2100      	movs	r1, #0
 800b73c:	2043      	movs	r0, #67	@ 0x43
 800b73e:	f7f7 ff28 	bl	8003592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b742:	2043      	movs	r0, #67	@ 0x43
 800b744:	f7f7 ff41 	bl	80035ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b748:	bf00      	nop
 800b74a:	3728      	adds	r7, #40	@ 0x28
 800b74c:	46bd      	mov	sp, r7
 800b74e:	bd80      	pop	{r7, pc}
 800b750:	40023800 	.word	0x40023800
 800b754:	40020000 	.word	0x40020000

0800b758 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800b76c:	4619      	mov	r1, r3
 800b76e:	4610      	mov	r0, r2
 800b770:	f7fe fb6f 	bl	8009e52 <USBD_LL_SetupStage>
}
 800b774:	bf00      	nop
 800b776:	3708      	adds	r7, #8
 800b778:	46bd      	mov	sp, r7
 800b77a:	bd80      	pop	{r7, pc}

0800b77c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b082      	sub	sp, #8
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	460b      	mov	r3, r1
 800b786:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b78e:	78fa      	ldrb	r2, [r7, #3]
 800b790:	6879      	ldr	r1, [r7, #4]
 800b792:	4613      	mov	r3, r2
 800b794:	00db      	lsls	r3, r3, #3
 800b796:	4413      	add	r3, r2
 800b798:	009b      	lsls	r3, r3, #2
 800b79a:	440b      	add	r3, r1
 800b79c:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800b7a0:	681a      	ldr	r2, [r3, #0]
 800b7a2:	78fb      	ldrb	r3, [r7, #3]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	f7fe fba9 	bl	8009efc <USBD_LL_DataOutStage>
}
 800b7aa:	bf00      	nop
 800b7ac:	3708      	adds	r7, #8
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	bd80      	pop	{r7, pc}

0800b7b2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7b2:	b580      	push	{r7, lr}
 800b7b4:	b082      	sub	sp, #8
 800b7b6:	af00      	add	r7, sp, #0
 800b7b8:	6078      	str	r0, [r7, #4]
 800b7ba:	460b      	mov	r3, r1
 800b7bc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800b7c4:	78fa      	ldrb	r2, [r7, #3]
 800b7c6:	6879      	ldr	r1, [r7, #4]
 800b7c8:	4613      	mov	r3, r2
 800b7ca:	00db      	lsls	r3, r3, #3
 800b7cc:	4413      	add	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	440b      	add	r3, r1
 800b7d2:	3320      	adds	r3, #32
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	78fb      	ldrb	r3, [r7, #3]
 800b7d8:	4619      	mov	r1, r3
 800b7da:	f7fe fc42 	bl	800a062 <USBD_LL_DataInStage>
}
 800b7de:	bf00      	nop
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b082      	sub	sp, #8
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f7fe fd7c 	bl	800a2f2 <USBD_LL_SOF>
}
 800b7fa:	bf00      	nop
 800b7fc:	3708      	adds	r7, #8
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}

0800b802 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b802:	b580      	push	{r7, lr}
 800b804:	b084      	sub	sp, #16
 800b806:	af00      	add	r7, sp, #0
 800b808:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b80a:	2301      	movs	r3, #1
 800b80c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	79db      	ldrb	r3, [r3, #7]
 800b812:	2b02      	cmp	r3, #2
 800b814:	d001      	beq.n	800b81a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b816:	f7f5 f915 	bl	8000a44 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b820:	7bfa      	ldrb	r2, [r7, #15]
 800b822:	4611      	mov	r1, r2
 800b824:	4618      	mov	r0, r3
 800b826:	f7fe fd20 	bl	800a26a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe fcc8 	bl	800a1c6 <USBD_LL_Reset>
}
 800b836:	bf00      	nop
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
	...

0800b840 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b840:	b580      	push	{r7, lr}
 800b842:	b082      	sub	sp, #8
 800b844:	af00      	add	r7, sp, #0
 800b846:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b84e:	4618      	mov	r0, r3
 800b850:	f7fe fd1b 	bl	800a28a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800b85c:	681b      	ldr	r3, [r3, #0]
 800b85e:	687a      	ldr	r2, [r7, #4]
 800b860:	6812      	ldr	r2, [r2, #0]
 800b862:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800b866:	f043 0301 	orr.w	r3, r3, #1
 800b86a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	7adb      	ldrb	r3, [r3, #11]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d005      	beq.n	800b880 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b874:	4b04      	ldr	r3, [pc, #16]	@ (800b888 <HAL_PCD_SuspendCallback+0x48>)
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	4a03      	ldr	r2, [pc, #12]	@ (800b888 <HAL_PCD_SuspendCallback+0x48>)
 800b87a:	f043 0306 	orr.w	r3, r3, #6
 800b87e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b880:	bf00      	nop
 800b882:	3708      	adds	r7, #8
 800b884:	46bd      	mov	sp, r7
 800b886:	bd80      	pop	{r7, pc}
 800b888:	e000ed00 	.word	0xe000ed00

0800b88c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b88c:	b580      	push	{r7, lr}
 800b88e:	b082      	sub	sp, #8
 800b890:	af00      	add	r7, sp, #0
 800b892:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b89a:	4618      	mov	r0, r3
 800b89c:	f7fe fd11 	bl	800a2c2 <USBD_LL_Resume>
}
 800b8a0:	bf00      	nop
 800b8a2:	3708      	adds	r7, #8
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd80      	pop	{r7, pc}

0800b8a8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8a8:	b580      	push	{r7, lr}
 800b8aa:	b082      	sub	sp, #8
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6078      	str	r0, [r7, #4]
 800b8b0:	460b      	mov	r3, r1
 800b8b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8ba:	78fa      	ldrb	r2, [r7, #3]
 800b8bc:	4611      	mov	r1, r2
 800b8be:	4618      	mov	r0, r3
 800b8c0:	f7fe fd69 	bl	800a396 <USBD_LL_IsoOUTIncomplete>
}
 800b8c4:	bf00      	nop
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	460b      	mov	r3, r1
 800b8d6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8de:	78fa      	ldrb	r2, [r7, #3]
 800b8e0:	4611      	mov	r1, r2
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fe fd25 	bl	800a332 <USBD_LL_IsoINIncomplete>
}
 800b8e8:	bf00      	nop
 800b8ea:	3708      	adds	r7, #8
 800b8ec:	46bd      	mov	sp, r7
 800b8ee:	bd80      	pop	{r7, pc}

0800b8f0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b8f0:	b580      	push	{r7, lr}
 800b8f2:	b082      	sub	sp, #8
 800b8f4:	af00      	add	r7, sp, #0
 800b8f6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b8fe:	4618      	mov	r0, r3
 800b900:	f7fe fd7b 	bl	800a3fa <USBD_LL_DevConnected>
}
 800b904:	bf00      	nop
 800b906:	3708      	adds	r7, #8
 800b908:	46bd      	mov	sp, r7
 800b90a:	bd80      	pop	{r7, pc}

0800b90c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b90c:	b580      	push	{r7, lr}
 800b90e:	b082      	sub	sp, #8
 800b910:	af00      	add	r7, sp, #0
 800b912:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800b91a:	4618      	mov	r0, r3
 800b91c:	f7fe fd78 	bl	800a410 <USBD_LL_DevDisconnected>
}
 800b920:	bf00      	nop
 800b922:	3708      	adds	r7, #8
 800b924:	46bd      	mov	sp, r7
 800b926:	bd80      	pop	{r7, pc}

0800b928 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b082      	sub	sp, #8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	781b      	ldrb	r3, [r3, #0]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d13c      	bne.n	800b9b2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b938:	4a20      	ldr	r2, [pc, #128]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	4a1e      	ldr	r2, [pc, #120]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b944:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b948:	4b1c      	ldr	r3, [pc, #112]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b94a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800b94e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b950:	4b1a      	ldr	r3, [pc, #104]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b952:	2204      	movs	r2, #4
 800b954:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b956:	4b19      	ldr	r3, [pc, #100]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b958:	2202      	movs	r2, #2
 800b95a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b95c:	4b17      	ldr	r3, [pc, #92]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b95e:	2200      	movs	r2, #0
 800b960:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b962:	4b16      	ldr	r3, [pc, #88]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b964:	2202      	movs	r2, #2
 800b966:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b968:	4b14      	ldr	r3, [pc, #80]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b96a:	2200      	movs	r2, #0
 800b96c:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b96e:	4b13      	ldr	r3, [pc, #76]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b970:	2200      	movs	r2, #0
 800b972:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b974:	4b11      	ldr	r3, [pc, #68]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b976:	2200      	movs	r2, #0
 800b978:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800b97a:	4b10      	ldr	r3, [pc, #64]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b97c:	2200      	movs	r2, #0
 800b97e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b980:	4b0e      	ldr	r3, [pc, #56]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b982:	2200      	movs	r2, #0
 800b984:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b986:	480d      	ldr	r0, [pc, #52]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b988:	f7f8 fb69 	bl	800405e <HAL_PCD_Init>
 800b98c:	4603      	mov	r3, r0
 800b98e:	2b00      	cmp	r3, #0
 800b990:	d001      	beq.n	800b996 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b992:	f7f5 f857 	bl	8000a44 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b996:	2180      	movs	r1, #128	@ 0x80
 800b998:	4808      	ldr	r0, [pc, #32]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b99a:	f7f9 fd96 	bl	80054ca <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b99e:	2240      	movs	r2, #64	@ 0x40
 800b9a0:	2100      	movs	r1, #0
 800b9a2:	4806      	ldr	r0, [pc, #24]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b9a4:	f7f9 fd4a 	bl	800543c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b9a8:	2280      	movs	r2, #128	@ 0x80
 800b9aa:	2101      	movs	r1, #1
 800b9ac:	4803      	ldr	r0, [pc, #12]	@ (800b9bc <USBD_LL_Init+0x94>)
 800b9ae:	f7f9 fd45 	bl	800543c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3708      	adds	r7, #8
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20001084 	.word	0x20001084

0800b9c0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b9c0:	b580      	push	{r7, lr}
 800b9c2:	b084      	sub	sp, #16
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	f7f8 fc50 	bl	800427c <HAL_PCD_Start>
 800b9dc:	4603      	mov	r3, r0
 800b9de:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9e0:	7bfb      	ldrb	r3, [r7, #15]
 800b9e2:	4618      	mov	r0, r3
 800b9e4:	f000 f942 	bl	800bc6c <USBD_Get_USB_Status>
 800b9e8:	4603      	mov	r3, r0
 800b9ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	3710      	adds	r7, #16
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	bd80      	pop	{r7, pc}

0800b9f6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b9f6:	b580      	push	{r7, lr}
 800b9f8:	b084      	sub	sp, #16
 800b9fa:	af00      	add	r7, sp, #0
 800b9fc:	6078      	str	r0, [r7, #4]
 800b9fe:	4608      	mov	r0, r1
 800ba00:	4611      	mov	r1, r2
 800ba02:	461a      	mov	r2, r3
 800ba04:	4603      	mov	r3, r0
 800ba06:	70fb      	strb	r3, [r7, #3]
 800ba08:	460b      	mov	r3, r1
 800ba0a:	70bb      	strb	r3, [r7, #2]
 800ba0c:	4613      	mov	r3, r2
 800ba0e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba10:	2300      	movs	r3, #0
 800ba12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ba1e:	78bb      	ldrb	r3, [r7, #2]
 800ba20:	883a      	ldrh	r2, [r7, #0]
 800ba22:	78f9      	ldrb	r1, [r7, #3]
 800ba24:	f7f9 f924 	bl	8004c70 <HAL_PCD_EP_Open>
 800ba28:	4603      	mov	r3, r0
 800ba2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba2c:	7bfb      	ldrb	r3, [r7, #15]
 800ba2e:	4618      	mov	r0, r3
 800ba30:	f000 f91c 	bl	800bc6c <USBD_Get_USB_Status>
 800ba34:	4603      	mov	r3, r0
 800ba36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba38:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba3a:	4618      	mov	r0, r3
 800ba3c:	3710      	adds	r7, #16
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	bd80      	pop	{r7, pc}

0800ba42 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba42:	b580      	push	{r7, lr}
 800ba44:	b084      	sub	sp, #16
 800ba46:	af00      	add	r7, sp, #0
 800ba48:	6078      	str	r0, [r7, #4]
 800ba4a:	460b      	mov	r3, r1
 800ba4c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba4e:	2300      	movs	r3, #0
 800ba50:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba52:	2300      	movs	r3, #0
 800ba54:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba5c:	78fa      	ldrb	r2, [r7, #3]
 800ba5e:	4611      	mov	r1, r2
 800ba60:	4618      	mov	r0, r3
 800ba62:	f7f9 f96f 	bl	8004d44 <HAL_PCD_EP_Close>
 800ba66:	4603      	mov	r3, r0
 800ba68:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba6a:	7bfb      	ldrb	r3, [r7, #15]
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	f000 f8fd 	bl	800bc6c <USBD_Get_USB_Status>
 800ba72:	4603      	mov	r3, r0
 800ba74:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ba76:	7bbb      	ldrb	r3, [r7, #14]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3710      	adds	r7, #16
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	bd80      	pop	{r7, pc}

0800ba80 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ba80:	b580      	push	{r7, lr}
 800ba82:	b084      	sub	sp, #16
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
 800ba88:	460b      	mov	r3, r1
 800ba8a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba8c:	2300      	movs	r3, #0
 800ba8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba90:	2300      	movs	r3, #0
 800ba92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ba9a:	78fa      	ldrb	r2, [r7, #3]
 800ba9c:	4611      	mov	r1, r2
 800ba9e:	4618      	mov	r0, r3
 800baa0:	f7f9 fa27 	bl	8004ef2 <HAL_PCD_EP_SetStall>
 800baa4:	4603      	mov	r3, r0
 800baa6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800baa8:	7bfb      	ldrb	r3, [r7, #15]
 800baaa:	4618      	mov	r0, r3
 800baac:	f000 f8de 	bl	800bc6c <USBD_Get_USB_Status>
 800bab0:	4603      	mov	r3, r0
 800bab2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bab4:	7bbb      	ldrb	r3, [r7, #14]
}
 800bab6:	4618      	mov	r0, r3
 800bab8:	3710      	adds	r7, #16
 800baba:	46bd      	mov	sp, r7
 800babc:	bd80      	pop	{r7, pc}

0800babe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800babe:	b580      	push	{r7, lr}
 800bac0:	b084      	sub	sp, #16
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
 800bac6:	460b      	mov	r3, r1
 800bac8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bace:	2300      	movs	r3, #0
 800bad0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bad8:	78fa      	ldrb	r2, [r7, #3]
 800bada:	4611      	mov	r1, r2
 800badc:	4618      	mov	r0, r3
 800bade:	f7f9 fa6b 	bl	8004fb8 <HAL_PCD_EP_ClrStall>
 800bae2:	4603      	mov	r3, r0
 800bae4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bae6:	7bfb      	ldrb	r3, [r7, #15]
 800bae8:	4618      	mov	r0, r3
 800baea:	f000 f8bf 	bl	800bc6c <USBD_Get_USB_Status>
 800baee:	4603      	mov	r3, r0
 800baf0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800baf2:	7bbb      	ldrb	r3, [r7, #14]
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	3710      	adds	r7, #16
 800baf8:	46bd      	mov	sp, r7
 800bafa:	bd80      	pop	{r7, pc}

0800bafc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b085      	sub	sp, #20
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
 800bb04:	460b      	mov	r3, r1
 800bb06:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb0e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800bb10:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	da0b      	bge.n	800bb30 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800bb18:	78fb      	ldrb	r3, [r7, #3]
 800bb1a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb1e:	68f9      	ldr	r1, [r7, #12]
 800bb20:	4613      	mov	r3, r2
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	4413      	add	r3, r2
 800bb26:	009b      	lsls	r3, r3, #2
 800bb28:	440b      	add	r3, r1
 800bb2a:	3316      	adds	r3, #22
 800bb2c:	781b      	ldrb	r3, [r3, #0]
 800bb2e:	e00b      	b.n	800bb48 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800bb30:	78fb      	ldrb	r3, [r7, #3]
 800bb32:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb36:	68f9      	ldr	r1, [r7, #12]
 800bb38:	4613      	mov	r3, r2
 800bb3a:	00db      	lsls	r3, r3, #3
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	440b      	add	r3, r1
 800bb42:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800bb46:	781b      	ldrb	r3, [r3, #0]
  }
}
 800bb48:	4618      	mov	r0, r3
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr

0800bb54 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800bb54:	b580      	push	{r7, lr}
 800bb56:	b084      	sub	sp, #16
 800bb58:	af00      	add	r7, sp, #0
 800bb5a:	6078      	str	r0, [r7, #4]
 800bb5c:	460b      	mov	r3, r1
 800bb5e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bb60:	2300      	movs	r3, #0
 800bb62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bb64:	2300      	movs	r3, #0
 800bb66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bb6e:	78fa      	ldrb	r2, [r7, #3]
 800bb70:	4611      	mov	r1, r2
 800bb72:	4618      	mov	r0, r3
 800bb74:	f7f9 f858 	bl	8004c28 <HAL_PCD_SetAddress>
 800bb78:	4603      	mov	r3, r0
 800bb7a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bb7c:	7bfb      	ldrb	r3, [r7, #15]
 800bb7e:	4618      	mov	r0, r3
 800bb80:	f000 f874 	bl	800bc6c <USBD_Get_USB_Status>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
}
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	3710      	adds	r7, #16
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	bd80      	pop	{r7, pc}

0800bb92 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bb92:	b580      	push	{r7, lr}
 800bb94:	b086      	sub	sp, #24
 800bb96:	af00      	add	r7, sp, #0
 800bb98:	60f8      	str	r0, [r7, #12]
 800bb9a:	607a      	str	r2, [r7, #4]
 800bb9c:	603b      	str	r3, [r7, #0]
 800bb9e:	460b      	mov	r3, r1
 800bba0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bba6:	2300      	movs	r3, #0
 800bba8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbb0:	7af9      	ldrb	r1, [r7, #11]
 800bbb2:	683b      	ldr	r3, [r7, #0]
 800bbb4:	687a      	ldr	r2, [r7, #4]
 800bbb6:	f7f9 f962 	bl	8004e7e <HAL_PCD_EP_Transmit>
 800bbba:	4603      	mov	r3, r0
 800bbbc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bbbe:	7dfb      	ldrb	r3, [r7, #23]
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f000 f853 	bl	800bc6c <USBD_Get_USB_Status>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bbca:	7dbb      	ldrb	r3, [r7, #22]
}
 800bbcc:	4618      	mov	r0, r3
 800bbce:	3718      	adds	r7, #24
 800bbd0:	46bd      	mov	sp, r7
 800bbd2:	bd80      	pop	{r7, pc}

0800bbd4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	b086      	sub	sp, #24
 800bbd8:	af00      	add	r7, sp, #0
 800bbda:	60f8      	str	r0, [r7, #12]
 800bbdc:	607a      	str	r2, [r7, #4]
 800bbde:	603b      	str	r3, [r7, #0]
 800bbe0:	460b      	mov	r3, r1
 800bbe2:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800bbf2:	7af9      	ldrb	r1, [r7, #11]
 800bbf4:	683b      	ldr	r3, [r7, #0]
 800bbf6:	687a      	ldr	r2, [r7, #4]
 800bbf8:	f7f9 f8ee 	bl	8004dd8 <HAL_PCD_EP_Receive>
 800bbfc:	4603      	mov	r3, r0
 800bbfe:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800bc00:	7dfb      	ldrb	r3, [r7, #23]
 800bc02:	4618      	mov	r0, r3
 800bc04:	f000 f832 	bl	800bc6c <USBD_Get_USB_Status>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800bc0c:	7dbb      	ldrb	r3, [r7, #22]
}
 800bc0e:	4618      	mov	r0, r3
 800bc10:	3718      	adds	r7, #24
 800bc12:	46bd      	mov	sp, r7
 800bc14:	bd80      	pop	{r7, pc}

0800bc16 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800bc16:	b580      	push	{r7, lr}
 800bc18:	b082      	sub	sp, #8
 800bc1a:	af00      	add	r7, sp, #0
 800bc1c:	6078      	str	r0, [r7, #4]
 800bc1e:	460b      	mov	r3, r1
 800bc20:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800bc28:	78fa      	ldrb	r2, [r7, #3]
 800bc2a:	4611      	mov	r1, r2
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	f7f9 f90e 	bl	8004e4e <HAL_PCD_EP_GetRxCount>
 800bc32:	4603      	mov	r3, r0
}
 800bc34:	4618      	mov	r0, r3
 800bc36:	3708      	adds	r7, #8
 800bc38:	46bd      	mov	sp, r7
 800bc3a:	bd80      	pop	{r7, pc}

0800bc3c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800bc3c:	b480      	push	{r7}
 800bc3e:	b083      	sub	sp, #12
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800bc44:	4b03      	ldr	r3, [pc, #12]	@ (800bc54 <USBD_static_malloc+0x18>)
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
 800bc52:	bf00      	nop
 800bc54:	20001568 	.word	0x20001568

0800bc58 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800bc58:	b480      	push	{r7}
 800bc5a:	b083      	sub	sp, #12
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	6078      	str	r0, [r7, #4]

}
 800bc60:	bf00      	nop
 800bc62:	370c      	adds	r7, #12
 800bc64:	46bd      	mov	sp, r7
 800bc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6a:	4770      	bx	lr

0800bc6c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800bc6c:	b480      	push	{r7}
 800bc6e:	b085      	sub	sp, #20
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	4603      	mov	r3, r0
 800bc74:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800bc76:	2300      	movs	r3, #0
 800bc78:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800bc7a:	79fb      	ldrb	r3, [r7, #7]
 800bc7c:	2b03      	cmp	r3, #3
 800bc7e:	d817      	bhi.n	800bcb0 <USBD_Get_USB_Status+0x44>
 800bc80:	a201      	add	r2, pc, #4	@ (adr r2, 800bc88 <USBD_Get_USB_Status+0x1c>)
 800bc82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc86:	bf00      	nop
 800bc88:	0800bc99 	.word	0x0800bc99
 800bc8c:	0800bc9f 	.word	0x0800bc9f
 800bc90:	0800bca5 	.word	0x0800bca5
 800bc94:	0800bcab 	.word	0x0800bcab
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800bc98:	2300      	movs	r3, #0
 800bc9a:	73fb      	strb	r3, [r7, #15]
    break;
 800bc9c:	e00b      	b.n	800bcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800bc9e:	2303      	movs	r3, #3
 800bca0:	73fb      	strb	r3, [r7, #15]
    break;
 800bca2:	e008      	b.n	800bcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bca4:	2301      	movs	r3, #1
 800bca6:	73fb      	strb	r3, [r7, #15]
    break;
 800bca8:	e005      	b.n	800bcb6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bcaa:	2303      	movs	r3, #3
 800bcac:	73fb      	strb	r3, [r7, #15]
    break;
 800bcae:	e002      	b.n	800bcb6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800bcb0:	2303      	movs	r3, #3
 800bcb2:	73fb      	strb	r3, [r7, #15]
    break;
 800bcb4:	bf00      	nop
  }
  return usb_status;
 800bcb6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <_ZdlPvj>:
 800bcc4:	f000 b811 	b.w	800bcea <_ZdlPv>

0800bcc8 <_Znwj>:
 800bcc8:	2801      	cmp	r0, #1
 800bcca:	bf38      	it	cc
 800bccc:	2001      	movcc	r0, #1
 800bcce:	b510      	push	{r4, lr}
 800bcd0:	4604      	mov	r4, r0
 800bcd2:	4620      	mov	r0, r4
 800bcd4:	f000 f836 	bl	800bd44 <malloc>
 800bcd8:	b100      	cbz	r0, 800bcdc <_Znwj+0x14>
 800bcda:	bd10      	pop	{r4, pc}
 800bcdc:	f000 f808 	bl	800bcf0 <_ZSt15get_new_handlerv>
 800bce0:	b908      	cbnz	r0, 800bce6 <_Znwj+0x1e>
 800bce2:	f000 f80d 	bl	800bd00 <abort>
 800bce6:	4780      	blx	r0
 800bce8:	e7f3      	b.n	800bcd2 <_Znwj+0xa>

0800bcea <_ZdlPv>:
 800bcea:	f000 b833 	b.w	800bd54 <free>
	...

0800bcf0 <_ZSt15get_new_handlerv>:
 800bcf0:	4b02      	ldr	r3, [pc, #8]	@ (800bcfc <_ZSt15get_new_handlerv+0xc>)
 800bcf2:	6818      	ldr	r0, [r3, #0]
 800bcf4:	f3bf 8f5b 	dmb	ish
 800bcf8:	4770      	bx	lr
 800bcfa:	bf00      	nop
 800bcfc:	20001788 	.word	0x20001788

0800bd00 <abort>:
 800bd00:	b508      	push	{r3, lr}
 800bd02:	2006      	movs	r0, #6
 800bd04:	f000 f974 	bl	800bff0 <raise>
 800bd08:	2001      	movs	r0, #1
 800bd0a:	f7f5 fac7 	bl	800129c <_exit>

0800bd0e <__itoa>:
 800bd0e:	1e93      	subs	r3, r2, #2
 800bd10:	2b22      	cmp	r3, #34	@ 0x22
 800bd12:	b510      	push	{r4, lr}
 800bd14:	460c      	mov	r4, r1
 800bd16:	d904      	bls.n	800bd22 <__itoa+0x14>
 800bd18:	2300      	movs	r3, #0
 800bd1a:	700b      	strb	r3, [r1, #0]
 800bd1c:	461c      	mov	r4, r3
 800bd1e:	4620      	mov	r0, r4
 800bd20:	bd10      	pop	{r4, pc}
 800bd22:	2a0a      	cmp	r2, #10
 800bd24:	d109      	bne.n	800bd3a <__itoa+0x2c>
 800bd26:	2800      	cmp	r0, #0
 800bd28:	da07      	bge.n	800bd3a <__itoa+0x2c>
 800bd2a:	232d      	movs	r3, #45	@ 0x2d
 800bd2c:	700b      	strb	r3, [r1, #0]
 800bd2e:	4240      	negs	r0, r0
 800bd30:	2101      	movs	r1, #1
 800bd32:	4421      	add	r1, r4
 800bd34:	f000 f8c4 	bl	800bec0 <__utoa>
 800bd38:	e7f1      	b.n	800bd1e <__itoa+0x10>
 800bd3a:	2100      	movs	r1, #0
 800bd3c:	e7f9      	b.n	800bd32 <__itoa+0x24>

0800bd3e <itoa>:
 800bd3e:	f7ff bfe6 	b.w	800bd0e <__itoa>
	...

0800bd44 <malloc>:
 800bd44:	4b02      	ldr	r3, [pc, #8]	@ (800bd50 <malloc+0xc>)
 800bd46:	4601      	mov	r1, r0
 800bd48:	6818      	ldr	r0, [r3, #0]
 800bd4a:	f000 b82d 	b.w	800bda8 <_malloc_r>
 800bd4e:	bf00      	nop
 800bd50:	20000138 	.word	0x20000138

0800bd54 <free>:
 800bd54:	4b02      	ldr	r3, [pc, #8]	@ (800bd60 <free+0xc>)
 800bd56:	4601      	mov	r1, r0
 800bd58:	6818      	ldr	r0, [r3, #0]
 800bd5a:	f000 b9a1 	b.w	800c0a0 <_free_r>
 800bd5e:	bf00      	nop
 800bd60:	20000138 	.word	0x20000138

0800bd64 <sbrk_aligned>:
 800bd64:	b570      	push	{r4, r5, r6, lr}
 800bd66:	4e0f      	ldr	r6, [pc, #60]	@ (800bda4 <sbrk_aligned+0x40>)
 800bd68:	460c      	mov	r4, r1
 800bd6a:	6831      	ldr	r1, [r6, #0]
 800bd6c:	4605      	mov	r5, r0
 800bd6e:	b911      	cbnz	r1, 800bd76 <sbrk_aligned+0x12>
 800bd70:	f000 f95a 	bl	800c028 <_sbrk_r>
 800bd74:	6030      	str	r0, [r6, #0]
 800bd76:	4621      	mov	r1, r4
 800bd78:	4628      	mov	r0, r5
 800bd7a:	f000 f955 	bl	800c028 <_sbrk_r>
 800bd7e:	1c43      	adds	r3, r0, #1
 800bd80:	d103      	bne.n	800bd8a <sbrk_aligned+0x26>
 800bd82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800bd86:	4620      	mov	r0, r4
 800bd88:	bd70      	pop	{r4, r5, r6, pc}
 800bd8a:	1cc4      	adds	r4, r0, #3
 800bd8c:	f024 0403 	bic.w	r4, r4, #3
 800bd90:	42a0      	cmp	r0, r4
 800bd92:	d0f8      	beq.n	800bd86 <sbrk_aligned+0x22>
 800bd94:	1a21      	subs	r1, r4, r0
 800bd96:	4628      	mov	r0, r5
 800bd98:	f000 f946 	bl	800c028 <_sbrk_r>
 800bd9c:	3001      	adds	r0, #1
 800bd9e:	d1f2      	bne.n	800bd86 <sbrk_aligned+0x22>
 800bda0:	e7ef      	b.n	800bd82 <sbrk_aligned+0x1e>
 800bda2:	bf00      	nop
 800bda4:	2000178c 	.word	0x2000178c

0800bda8 <_malloc_r>:
 800bda8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdac:	1ccd      	adds	r5, r1, #3
 800bdae:	f025 0503 	bic.w	r5, r5, #3
 800bdb2:	3508      	adds	r5, #8
 800bdb4:	2d0c      	cmp	r5, #12
 800bdb6:	bf38      	it	cc
 800bdb8:	250c      	movcc	r5, #12
 800bdba:	2d00      	cmp	r5, #0
 800bdbc:	4606      	mov	r6, r0
 800bdbe:	db01      	blt.n	800bdc4 <_malloc_r+0x1c>
 800bdc0:	42a9      	cmp	r1, r5
 800bdc2:	d904      	bls.n	800bdce <_malloc_r+0x26>
 800bdc4:	230c      	movs	r3, #12
 800bdc6:	6033      	str	r3, [r6, #0]
 800bdc8:	2000      	movs	r0, #0
 800bdca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800bea4 <_malloc_r+0xfc>
 800bdd2:	f000 f869 	bl	800bea8 <__malloc_lock>
 800bdd6:	f8d8 3000 	ldr.w	r3, [r8]
 800bdda:	461c      	mov	r4, r3
 800bddc:	bb44      	cbnz	r4, 800be30 <_malloc_r+0x88>
 800bdde:	4629      	mov	r1, r5
 800bde0:	4630      	mov	r0, r6
 800bde2:	f7ff ffbf 	bl	800bd64 <sbrk_aligned>
 800bde6:	1c43      	adds	r3, r0, #1
 800bde8:	4604      	mov	r4, r0
 800bdea:	d158      	bne.n	800be9e <_malloc_r+0xf6>
 800bdec:	f8d8 4000 	ldr.w	r4, [r8]
 800bdf0:	4627      	mov	r7, r4
 800bdf2:	2f00      	cmp	r7, #0
 800bdf4:	d143      	bne.n	800be7e <_malloc_r+0xd6>
 800bdf6:	2c00      	cmp	r4, #0
 800bdf8:	d04b      	beq.n	800be92 <_malloc_r+0xea>
 800bdfa:	6823      	ldr	r3, [r4, #0]
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	4630      	mov	r0, r6
 800be00:	eb04 0903 	add.w	r9, r4, r3
 800be04:	f000 f910 	bl	800c028 <_sbrk_r>
 800be08:	4581      	cmp	r9, r0
 800be0a:	d142      	bne.n	800be92 <_malloc_r+0xea>
 800be0c:	6821      	ldr	r1, [r4, #0]
 800be0e:	1a6d      	subs	r5, r5, r1
 800be10:	4629      	mov	r1, r5
 800be12:	4630      	mov	r0, r6
 800be14:	f7ff ffa6 	bl	800bd64 <sbrk_aligned>
 800be18:	3001      	adds	r0, #1
 800be1a:	d03a      	beq.n	800be92 <_malloc_r+0xea>
 800be1c:	6823      	ldr	r3, [r4, #0]
 800be1e:	442b      	add	r3, r5
 800be20:	6023      	str	r3, [r4, #0]
 800be22:	f8d8 3000 	ldr.w	r3, [r8]
 800be26:	685a      	ldr	r2, [r3, #4]
 800be28:	bb62      	cbnz	r2, 800be84 <_malloc_r+0xdc>
 800be2a:	f8c8 7000 	str.w	r7, [r8]
 800be2e:	e00f      	b.n	800be50 <_malloc_r+0xa8>
 800be30:	6822      	ldr	r2, [r4, #0]
 800be32:	1b52      	subs	r2, r2, r5
 800be34:	d420      	bmi.n	800be78 <_malloc_r+0xd0>
 800be36:	2a0b      	cmp	r2, #11
 800be38:	d917      	bls.n	800be6a <_malloc_r+0xc2>
 800be3a:	1961      	adds	r1, r4, r5
 800be3c:	42a3      	cmp	r3, r4
 800be3e:	6025      	str	r5, [r4, #0]
 800be40:	bf18      	it	ne
 800be42:	6059      	strne	r1, [r3, #4]
 800be44:	6863      	ldr	r3, [r4, #4]
 800be46:	bf08      	it	eq
 800be48:	f8c8 1000 	streq.w	r1, [r8]
 800be4c:	5162      	str	r2, [r4, r5]
 800be4e:	604b      	str	r3, [r1, #4]
 800be50:	4630      	mov	r0, r6
 800be52:	f000 f82f 	bl	800beb4 <__malloc_unlock>
 800be56:	f104 000b 	add.w	r0, r4, #11
 800be5a:	1d23      	adds	r3, r4, #4
 800be5c:	f020 0007 	bic.w	r0, r0, #7
 800be60:	1ac2      	subs	r2, r0, r3
 800be62:	bf1c      	itt	ne
 800be64:	1a1b      	subne	r3, r3, r0
 800be66:	50a3      	strne	r3, [r4, r2]
 800be68:	e7af      	b.n	800bdca <_malloc_r+0x22>
 800be6a:	6862      	ldr	r2, [r4, #4]
 800be6c:	42a3      	cmp	r3, r4
 800be6e:	bf0c      	ite	eq
 800be70:	f8c8 2000 	streq.w	r2, [r8]
 800be74:	605a      	strne	r2, [r3, #4]
 800be76:	e7eb      	b.n	800be50 <_malloc_r+0xa8>
 800be78:	4623      	mov	r3, r4
 800be7a:	6864      	ldr	r4, [r4, #4]
 800be7c:	e7ae      	b.n	800bddc <_malloc_r+0x34>
 800be7e:	463c      	mov	r4, r7
 800be80:	687f      	ldr	r7, [r7, #4]
 800be82:	e7b6      	b.n	800bdf2 <_malloc_r+0x4a>
 800be84:	461a      	mov	r2, r3
 800be86:	685b      	ldr	r3, [r3, #4]
 800be88:	42a3      	cmp	r3, r4
 800be8a:	d1fb      	bne.n	800be84 <_malloc_r+0xdc>
 800be8c:	2300      	movs	r3, #0
 800be8e:	6053      	str	r3, [r2, #4]
 800be90:	e7de      	b.n	800be50 <_malloc_r+0xa8>
 800be92:	230c      	movs	r3, #12
 800be94:	6033      	str	r3, [r6, #0]
 800be96:	4630      	mov	r0, r6
 800be98:	f000 f80c 	bl	800beb4 <__malloc_unlock>
 800be9c:	e794      	b.n	800bdc8 <_malloc_r+0x20>
 800be9e:	6005      	str	r5, [r0, #0]
 800bea0:	e7d6      	b.n	800be50 <_malloc_r+0xa8>
 800bea2:	bf00      	nop
 800bea4:	20001790 	.word	0x20001790

0800bea8 <__malloc_lock>:
 800bea8:	4801      	ldr	r0, [pc, #4]	@ (800beb0 <__malloc_lock+0x8>)
 800beaa:	f000 b8f7 	b.w	800c09c <__retarget_lock_acquire_recursive>
 800beae:	bf00      	nop
 800beb0:	200018d0 	.word	0x200018d0

0800beb4 <__malloc_unlock>:
 800beb4:	4801      	ldr	r0, [pc, #4]	@ (800bebc <__malloc_unlock+0x8>)
 800beb6:	f000 b8f2 	b.w	800c09e <__retarget_lock_release_recursive>
 800beba:	bf00      	nop
 800bebc:	200018d0 	.word	0x200018d0

0800bec0 <__utoa>:
 800bec0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bec2:	4c1f      	ldr	r4, [pc, #124]	@ (800bf40 <__utoa+0x80>)
 800bec4:	b08b      	sub	sp, #44	@ 0x2c
 800bec6:	4605      	mov	r5, r0
 800bec8:	460b      	mov	r3, r1
 800beca:	466e      	mov	r6, sp
 800becc:	f104 0c20 	add.w	ip, r4, #32
 800bed0:	6820      	ldr	r0, [r4, #0]
 800bed2:	6861      	ldr	r1, [r4, #4]
 800bed4:	4637      	mov	r7, r6
 800bed6:	c703      	stmia	r7!, {r0, r1}
 800bed8:	3408      	adds	r4, #8
 800beda:	4564      	cmp	r4, ip
 800bedc:	463e      	mov	r6, r7
 800bede:	d1f7      	bne.n	800bed0 <__utoa+0x10>
 800bee0:	7921      	ldrb	r1, [r4, #4]
 800bee2:	7139      	strb	r1, [r7, #4]
 800bee4:	1e91      	subs	r1, r2, #2
 800bee6:	6820      	ldr	r0, [r4, #0]
 800bee8:	6038      	str	r0, [r7, #0]
 800beea:	2922      	cmp	r1, #34	@ 0x22
 800beec:	f04f 0100 	mov.w	r1, #0
 800bef0:	d904      	bls.n	800befc <__utoa+0x3c>
 800bef2:	7019      	strb	r1, [r3, #0]
 800bef4:	460b      	mov	r3, r1
 800bef6:	4618      	mov	r0, r3
 800bef8:	b00b      	add	sp, #44	@ 0x2c
 800befa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800befc:	1e58      	subs	r0, r3, #1
 800befe:	4684      	mov	ip, r0
 800bf00:	fbb5 f7f2 	udiv	r7, r5, r2
 800bf04:	fb02 5617 	mls	r6, r2, r7, r5
 800bf08:	3628      	adds	r6, #40	@ 0x28
 800bf0a:	446e      	add	r6, sp
 800bf0c:	460c      	mov	r4, r1
 800bf0e:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800bf12:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800bf16:	462e      	mov	r6, r5
 800bf18:	42b2      	cmp	r2, r6
 800bf1a:	f101 0101 	add.w	r1, r1, #1
 800bf1e:	463d      	mov	r5, r7
 800bf20:	d9ee      	bls.n	800bf00 <__utoa+0x40>
 800bf22:	2200      	movs	r2, #0
 800bf24:	545a      	strb	r2, [r3, r1]
 800bf26:	1919      	adds	r1, r3, r4
 800bf28:	1aa5      	subs	r5, r4, r2
 800bf2a:	42aa      	cmp	r2, r5
 800bf2c:	dae3      	bge.n	800bef6 <__utoa+0x36>
 800bf2e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800bf32:	780e      	ldrb	r6, [r1, #0]
 800bf34:	7006      	strb	r6, [r0, #0]
 800bf36:	3201      	adds	r2, #1
 800bf38:	f801 5901 	strb.w	r5, [r1], #-1
 800bf3c:	e7f4      	b.n	800bf28 <__utoa+0x68>
 800bf3e:	bf00      	nop
 800bf40:	08039388 	.word	0x08039388

0800bf44 <memset>:
 800bf44:	4402      	add	r2, r0
 800bf46:	4603      	mov	r3, r0
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d100      	bne.n	800bf4e <memset+0xa>
 800bf4c:	4770      	bx	lr
 800bf4e:	f803 1b01 	strb.w	r1, [r3], #1
 800bf52:	e7f9      	b.n	800bf48 <memset+0x4>

0800bf54 <strncat>:
 800bf54:	b530      	push	{r4, r5, lr}
 800bf56:	4604      	mov	r4, r0
 800bf58:	7825      	ldrb	r5, [r4, #0]
 800bf5a:	4623      	mov	r3, r4
 800bf5c:	3401      	adds	r4, #1
 800bf5e:	2d00      	cmp	r5, #0
 800bf60:	d1fa      	bne.n	800bf58 <strncat+0x4>
 800bf62:	3a01      	subs	r2, #1
 800bf64:	d304      	bcc.n	800bf70 <strncat+0x1c>
 800bf66:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bf6a:	f803 4b01 	strb.w	r4, [r3], #1
 800bf6e:	b904      	cbnz	r4, 800bf72 <strncat+0x1e>
 800bf70:	bd30      	pop	{r4, r5, pc}
 800bf72:	2a00      	cmp	r2, #0
 800bf74:	d1f5      	bne.n	800bf62 <strncat+0xe>
 800bf76:	701a      	strb	r2, [r3, #0]
 800bf78:	e7f3      	b.n	800bf62 <strncat+0xe>

0800bf7a <strncpy>:
 800bf7a:	b510      	push	{r4, lr}
 800bf7c:	3901      	subs	r1, #1
 800bf7e:	4603      	mov	r3, r0
 800bf80:	b132      	cbz	r2, 800bf90 <strncpy+0x16>
 800bf82:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bf86:	f803 4b01 	strb.w	r4, [r3], #1
 800bf8a:	3a01      	subs	r2, #1
 800bf8c:	2c00      	cmp	r4, #0
 800bf8e:	d1f7      	bne.n	800bf80 <strncpy+0x6>
 800bf90:	441a      	add	r2, r3
 800bf92:	2100      	movs	r1, #0
 800bf94:	4293      	cmp	r3, r2
 800bf96:	d100      	bne.n	800bf9a <strncpy+0x20>
 800bf98:	bd10      	pop	{r4, pc}
 800bf9a:	f803 1b01 	strb.w	r1, [r3], #1
 800bf9e:	e7f9      	b.n	800bf94 <strncpy+0x1a>

0800bfa0 <_raise_r>:
 800bfa0:	291f      	cmp	r1, #31
 800bfa2:	b538      	push	{r3, r4, r5, lr}
 800bfa4:	4605      	mov	r5, r0
 800bfa6:	460c      	mov	r4, r1
 800bfa8:	d904      	bls.n	800bfb4 <_raise_r+0x14>
 800bfaa:	2316      	movs	r3, #22
 800bfac:	6003      	str	r3, [r0, #0]
 800bfae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bfb6:	b112      	cbz	r2, 800bfbe <_raise_r+0x1e>
 800bfb8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfbc:	b94b      	cbnz	r3, 800bfd2 <_raise_r+0x32>
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f000 f830 	bl	800c024 <_getpid_r>
 800bfc4:	4622      	mov	r2, r4
 800bfc6:	4601      	mov	r1, r0
 800bfc8:	4628      	mov	r0, r5
 800bfca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfce:	f000 b817 	b.w	800c000 <_kill_r>
 800bfd2:	2b01      	cmp	r3, #1
 800bfd4:	d00a      	beq.n	800bfec <_raise_r+0x4c>
 800bfd6:	1c59      	adds	r1, r3, #1
 800bfd8:	d103      	bne.n	800bfe2 <_raise_r+0x42>
 800bfda:	2316      	movs	r3, #22
 800bfdc:	6003      	str	r3, [r0, #0]
 800bfde:	2001      	movs	r0, #1
 800bfe0:	e7e7      	b.n	800bfb2 <_raise_r+0x12>
 800bfe2:	2100      	movs	r1, #0
 800bfe4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bfe8:	4620      	mov	r0, r4
 800bfea:	4798      	blx	r3
 800bfec:	2000      	movs	r0, #0
 800bfee:	e7e0      	b.n	800bfb2 <_raise_r+0x12>

0800bff0 <raise>:
 800bff0:	4b02      	ldr	r3, [pc, #8]	@ (800bffc <raise+0xc>)
 800bff2:	4601      	mov	r1, r0
 800bff4:	6818      	ldr	r0, [r3, #0]
 800bff6:	f7ff bfd3 	b.w	800bfa0 <_raise_r>
 800bffa:	bf00      	nop
 800bffc:	20000138 	.word	0x20000138

0800c000 <_kill_r>:
 800c000:	b538      	push	{r3, r4, r5, lr}
 800c002:	4d07      	ldr	r5, [pc, #28]	@ (800c020 <_kill_r+0x20>)
 800c004:	2300      	movs	r3, #0
 800c006:	4604      	mov	r4, r0
 800c008:	4608      	mov	r0, r1
 800c00a:	4611      	mov	r1, r2
 800c00c:	602b      	str	r3, [r5, #0]
 800c00e:	f7f5 f935 	bl	800127c <_kill>
 800c012:	1c43      	adds	r3, r0, #1
 800c014:	d102      	bne.n	800c01c <_kill_r+0x1c>
 800c016:	682b      	ldr	r3, [r5, #0]
 800c018:	b103      	cbz	r3, 800c01c <_kill_r+0x1c>
 800c01a:	6023      	str	r3, [r4, #0]
 800c01c:	bd38      	pop	{r3, r4, r5, pc}
 800c01e:	bf00      	nop
 800c020:	200018cc 	.word	0x200018cc

0800c024 <_getpid_r>:
 800c024:	f7f5 b922 	b.w	800126c <_getpid>

0800c028 <_sbrk_r>:
 800c028:	b538      	push	{r3, r4, r5, lr}
 800c02a:	4d06      	ldr	r5, [pc, #24]	@ (800c044 <_sbrk_r+0x1c>)
 800c02c:	2300      	movs	r3, #0
 800c02e:	4604      	mov	r4, r0
 800c030:	4608      	mov	r0, r1
 800c032:	602b      	str	r3, [r5, #0]
 800c034:	f7f5 f93e 	bl	80012b4 <_sbrk>
 800c038:	1c43      	adds	r3, r0, #1
 800c03a:	d102      	bne.n	800c042 <_sbrk_r+0x1a>
 800c03c:	682b      	ldr	r3, [r5, #0]
 800c03e:	b103      	cbz	r3, 800c042 <_sbrk_r+0x1a>
 800c040:	6023      	str	r3, [r4, #0]
 800c042:	bd38      	pop	{r3, r4, r5, pc}
 800c044:	200018cc 	.word	0x200018cc

0800c048 <__errno>:
 800c048:	4b01      	ldr	r3, [pc, #4]	@ (800c050 <__errno+0x8>)
 800c04a:	6818      	ldr	r0, [r3, #0]
 800c04c:	4770      	bx	lr
 800c04e:	bf00      	nop
 800c050:	20000138 	.word	0x20000138

0800c054 <__libc_init_array>:
 800c054:	b570      	push	{r4, r5, r6, lr}
 800c056:	4d0d      	ldr	r5, [pc, #52]	@ (800c08c <__libc_init_array+0x38>)
 800c058:	4c0d      	ldr	r4, [pc, #52]	@ (800c090 <__libc_init_array+0x3c>)
 800c05a:	1b64      	subs	r4, r4, r5
 800c05c:	10a4      	asrs	r4, r4, #2
 800c05e:	2600      	movs	r6, #0
 800c060:	42a6      	cmp	r6, r4
 800c062:	d109      	bne.n	800c078 <__libc_init_array+0x24>
 800c064:	4d0b      	ldr	r5, [pc, #44]	@ (800c094 <__libc_init_array+0x40>)
 800c066:	4c0c      	ldr	r4, [pc, #48]	@ (800c098 <__libc_init_array+0x44>)
 800c068:	f000 f864 	bl	800c134 <_init>
 800c06c:	1b64      	subs	r4, r4, r5
 800c06e:	10a4      	asrs	r4, r4, #2
 800c070:	2600      	movs	r6, #0
 800c072:	42a6      	cmp	r6, r4
 800c074:	d105      	bne.n	800c082 <__libc_init_array+0x2e>
 800c076:	bd70      	pop	{r4, r5, r6, pc}
 800c078:	f855 3b04 	ldr.w	r3, [r5], #4
 800c07c:	4798      	blx	r3
 800c07e:	3601      	adds	r6, #1
 800c080:	e7ee      	b.n	800c060 <__libc_init_array+0xc>
 800c082:	f855 3b04 	ldr.w	r3, [r5], #4
 800c086:	4798      	blx	r3
 800c088:	3601      	adds	r6, #1
 800c08a:	e7f2      	b.n	800c072 <__libc_init_array+0x1e>
 800c08c:	080393b8 	.word	0x080393b8
 800c090:	080393b8 	.word	0x080393b8
 800c094:	080393b8 	.word	0x080393b8
 800c098:	080393c4 	.word	0x080393c4

0800c09c <__retarget_lock_acquire_recursive>:
 800c09c:	4770      	bx	lr

0800c09e <__retarget_lock_release_recursive>:
 800c09e:	4770      	bx	lr

0800c0a0 <_free_r>:
 800c0a0:	b538      	push	{r3, r4, r5, lr}
 800c0a2:	4605      	mov	r5, r0
 800c0a4:	2900      	cmp	r1, #0
 800c0a6:	d041      	beq.n	800c12c <_free_r+0x8c>
 800c0a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0ac:	1f0c      	subs	r4, r1, #4
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	bfb8      	it	lt
 800c0b2:	18e4      	addlt	r4, r4, r3
 800c0b4:	f7ff fef8 	bl	800bea8 <__malloc_lock>
 800c0b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c130 <_free_r+0x90>)
 800c0ba:	6813      	ldr	r3, [r2, #0]
 800c0bc:	b933      	cbnz	r3, 800c0cc <_free_r+0x2c>
 800c0be:	6063      	str	r3, [r4, #4]
 800c0c0:	6014      	str	r4, [r2, #0]
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c0c8:	f7ff bef4 	b.w	800beb4 <__malloc_unlock>
 800c0cc:	42a3      	cmp	r3, r4
 800c0ce:	d908      	bls.n	800c0e2 <_free_r+0x42>
 800c0d0:	6820      	ldr	r0, [r4, #0]
 800c0d2:	1821      	adds	r1, r4, r0
 800c0d4:	428b      	cmp	r3, r1
 800c0d6:	bf01      	itttt	eq
 800c0d8:	6819      	ldreq	r1, [r3, #0]
 800c0da:	685b      	ldreq	r3, [r3, #4]
 800c0dc:	1809      	addeq	r1, r1, r0
 800c0de:	6021      	streq	r1, [r4, #0]
 800c0e0:	e7ed      	b.n	800c0be <_free_r+0x1e>
 800c0e2:	461a      	mov	r2, r3
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	b10b      	cbz	r3, 800c0ec <_free_r+0x4c>
 800c0e8:	42a3      	cmp	r3, r4
 800c0ea:	d9fa      	bls.n	800c0e2 <_free_r+0x42>
 800c0ec:	6811      	ldr	r1, [r2, #0]
 800c0ee:	1850      	adds	r0, r2, r1
 800c0f0:	42a0      	cmp	r0, r4
 800c0f2:	d10b      	bne.n	800c10c <_free_r+0x6c>
 800c0f4:	6820      	ldr	r0, [r4, #0]
 800c0f6:	4401      	add	r1, r0
 800c0f8:	1850      	adds	r0, r2, r1
 800c0fa:	4283      	cmp	r3, r0
 800c0fc:	6011      	str	r1, [r2, #0]
 800c0fe:	d1e0      	bne.n	800c0c2 <_free_r+0x22>
 800c100:	6818      	ldr	r0, [r3, #0]
 800c102:	685b      	ldr	r3, [r3, #4]
 800c104:	6053      	str	r3, [r2, #4]
 800c106:	4408      	add	r0, r1
 800c108:	6010      	str	r0, [r2, #0]
 800c10a:	e7da      	b.n	800c0c2 <_free_r+0x22>
 800c10c:	d902      	bls.n	800c114 <_free_r+0x74>
 800c10e:	230c      	movs	r3, #12
 800c110:	602b      	str	r3, [r5, #0]
 800c112:	e7d6      	b.n	800c0c2 <_free_r+0x22>
 800c114:	6820      	ldr	r0, [r4, #0]
 800c116:	1821      	adds	r1, r4, r0
 800c118:	428b      	cmp	r3, r1
 800c11a:	bf04      	itt	eq
 800c11c:	6819      	ldreq	r1, [r3, #0]
 800c11e:	685b      	ldreq	r3, [r3, #4]
 800c120:	6063      	str	r3, [r4, #4]
 800c122:	bf04      	itt	eq
 800c124:	1809      	addeq	r1, r1, r0
 800c126:	6021      	streq	r1, [r4, #0]
 800c128:	6054      	str	r4, [r2, #4]
 800c12a:	e7ca      	b.n	800c0c2 <_free_r+0x22>
 800c12c:	bd38      	pop	{r3, r4, r5, pc}
 800c12e:	bf00      	nop
 800c130:	20001790 	.word	0x20001790

0800c134 <_init>:
 800c134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c136:	bf00      	nop
 800c138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c13a:	bc08      	pop	{r3}
 800c13c:	469e      	mov	lr, r3
 800c13e:	4770      	bx	lr

0800c140 <_fini>:
 800c140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c142:	bf00      	nop
 800c144:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c146:	bc08      	pop	{r3}
 800c148:	469e      	mov	lr, r3
 800c14a:	4770      	bx	lr
