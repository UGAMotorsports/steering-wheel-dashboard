
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000100d4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
<<<<<<< HEAD
  2 .rodata       00007cc4  08010274  08010274  00011274  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017f38  08017f38  00019188  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017f38  08017f38  00018f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017f40  08017f40  00019188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017f40  08017f40  00018f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017f4c  08017f4c  00018f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08017f50  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f4  20000188  080180d8  00019188  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000197c  080180d8  0001997c  2**0
=======
  2 .rodata       00007c5c  08010290  08010290  00011290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017eec  08017eec  00019188  2**0
                  CONTENTS
  4 .ARM          00000008  08017eec  08017eec  00018eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017ef4  08017ef4  00019188  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017ef4  08017ef4  00018ef4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08017f00  08017f00  00018f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000188  20000000  08017f04  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f8  20000188  0801808c  00019188  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001980  0801808c  00019980  2**0
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019188  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d9f  00000000  00000000  000191b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f7b  00000000  00000000  0003cf57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001da0  00000000  00000000  00042ed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001680  00000000  00000000  00044c78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205fd  00000000  00000000  000462f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
<<<<<<< HEAD
 17 .debug_line   000255ae  00000000  00000000  000668f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad8c  00000000  00000000  0008bea3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126c2f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00126c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012edb4  2**0
=======
 17 .debug_line   0002774e  00000000  00000000  000668e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009abec  00000000  00000000  0008e030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00128c1c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008140  00000000  00000000  00128c60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  00130da0  2**0
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000188 	.word	0x20000188
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0801025c 	.word	0x0801025c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000018c 	.word	0x2000018c
 80001dc:	0801025c 	.word	0x0801025c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_DMA_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f004 fa6d 	bl	8004ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f004 fa86 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	203b      	movs	r0, #59	@ 0x3b
 8000610:	f004 fa65 	bl	8004ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000614:	203b      	movs	r0, #59	@ 0x3b
 8000616:	f004 fa7e 	bl	8004b16 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SELECT+0x18>)
 8000632:	f004 ffa1 	bl	8005578 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f004 f952 	bl	80048e0 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <DESELECT+0x18>)
 800064e:	f004 ff93 	bl	8005578 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f004 f944 	bl	80048e0 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SPI_TxByte+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1f8      	bne.n	800066c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SPI_TxByte+0x30>)
 8000682:	f006 feb6 	bl	80073f2 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000218 	.word	0x20000218

08000694 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d1f8      	bne.n	80006a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006b8:	f006 fe9b 	bl	80073f2 <HAL_SPI_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000218 	.word	0x20000218

080006c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80006ce:	23ff      	movs	r3, #255	@ 0xff
 80006d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <SPI_RxByte+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006e2:	1dba      	adds	r2, r7, #6
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <SPI_RxByte+0x34>)
 80006ee:	f007 f8dd 	bl	80078ac <HAL_SPI_TransmitReceive>

	return data;
 80006f2:	79bb      	ldrb	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000218 	.word	0x20000218

08000700 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000708:	f7ff ffde 	bl	80006c8 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <SD_ReadyWait+0x30>)
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800072a:	f7ff ffcd 	bl	80006c8 <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d003      	beq.n	8000740 <SD_ReadyWait+0x24>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SD_ReadyWait+0x30>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_ReadyWait+0xe>

	return res;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001a6 	.word	0x200001a6

08000750 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000756:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800075a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800075c:	f7ff ff72 	bl	8000644 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	e005      	b.n	8000772 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	f7ff ff7a 	bl	8000660 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddf6      	ble.n	8000766 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000778:	f7ff ff56 	bl	8000628 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000790:	2395      	movs	r3, #149	@ 0x95
 8000792:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000794:	463b      	mov	r3, r7
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff7b 	bl	8000694 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800079e:	e002      	b.n	80007a6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007a6:	f7ff ff8f 	bl	80006c8 <SPI_RxByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <SD_PowerOn+0x66>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80007b6:	f7ff ff45 	bl	8000644 <DESELECT>
	SPI_TxByte(0XFF);
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	f7ff ff50 	bl	8000660 <SPI_TxByte>

	PowerFlag = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SD_PowerOn+0x80>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001a9 	.word	0x200001a9

080007d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <SD_PowerOff+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200001a9 	.word	0x200001a9

080007ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <SD_CheckPower+0x14>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200001a9 	.word	0x200001a9

08000804 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <SD_RxDataBlock+0x58>)
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000814:	f7ff ff58 	bl	80006c8 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d103      	bne.n	800082a <SD_RxDataBlock+0x26>
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SD_RxDataBlock+0x58>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bfe      	cmp	r3, #254	@ 0xfe
 800082e:	d001      	beq.n	8000834 <SD_RxDataBlock+0x30>
 8000830:	2300      	movs	r3, #0
 8000832:	e00f      	b.n	8000854 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff60 	bl	8000700 <SPI_RxBytePtr>
	} while(len--);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f4      	bne.n	8000834 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800084a:	f7ff ff3d 	bl	80006c8 <SPI_RxByte>
	SPI_RxByte();
 800084e:	f7ff ff3b 	bl	80006c8 <SPI_RxByte>

	return TRUE;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a4 	.word	0x200001a4

08000860 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000870:	f7ff ff54 	bl	800071c <SD_ReadyWait>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d001      	beq.n	800087e <SD_TxDataBlock+0x1e>
 800087a:	2300      	movs	r3, #0
 800087c:	e02f      	b.n	80008de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feed 	bl	8000660 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2bfd      	cmp	r3, #253	@ 0xfd
 800088a:	d020      	beq.n	80008ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff feff 	bl	8000694 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000896:	f7ff ff17 	bl	80006c8 <SPI_RxByte>
		SPI_RxByte();
 800089a:	f7ff ff15 	bl	80006c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800089e:	e00b      	b.n	80008b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008a0:	f7ff ff12 	bl	80006c8 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d006      	beq.n	80008c0 <SD_TxDataBlock+0x60>
			i++;
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d9f0      	bls.n	80008a0 <SD_TxDataBlock+0x40>
 80008be:	e000      	b.n	80008c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80008c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80008c2:	bf00      	nop
 80008c4:	f7ff ff00 	bl	80006c8 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d101      	bne.n	80008dc <SD_TxDataBlock+0x7c>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <SD_TxDataBlock+0x7e>

	return FALSE;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	6039      	str	r1, [r7, #0]
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f2:	f7ff ff13 	bl	800071c <SD_ReadyWait>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d001      	beq.n	8000900 <SD_SendCmd+0x1a>
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	e042      	b.n	8000986 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feac 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea6 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fea0 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b40      	cmp	r3, #64	@ 0x40
 800093a:	d102      	bne.n	8000942 <SD_SendCmd+0x5c>
 800093c:	2395      	movs	r3, #149	@ 0x95
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e007      	b.n	8000952 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d102      	bne.n	800094e <SD_SendCmd+0x68>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <SD_SendCmd+0x6c>
	else crc = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe83 	bl	8000660 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b4c      	cmp	r3, #76	@ 0x4c
 800095e:	d101      	bne.n	8000964 <SD_SendCmd+0x7e>
 8000960:	f7ff feb2 	bl	80006c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000968:	f7ff feae 	bl	80006c8 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000970:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da05      	bge.n	8000984 <SD_SendCmd+0x9e>
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	3b01      	subs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f1      	bne.n	8000968 <SD_SendCmd+0x82>

	return res;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d1      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0c6      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80009ba:	f7ff fec9 	bl	8000750 <SD_PowerOn>

	/* slave select */
	SELECT();
 80009be:	f7ff fe33 	bl	8000628 <SELECT>

	/* check disk type */
	type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8c 	bl	80008e6 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a1 	bne.w	8000b18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80009d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff7f 	bl	80008e6 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d155      	bne.n	8000a9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe67 	bl	80006c8 <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d17e      	bne.n	8000b18 <SD_disk_initialize+0x188>
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000a1e:	d17b      	bne.n	8000b18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	@ 0x77
 8000a24:	f7ff ff5f 	bl	80008e6 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d807      	bhi.n	8000a3e <SD_disk_initialize+0xae>
 8000a2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff57 	bl	80008e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a3e:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ec      	bne.n	8000a20 <SD_disk_initialize+0x90>
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f7ff ff46 	bl	80008e6 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d15b      	bne.n	8000b18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	f7ff fe2e 	bl	80006c8 <SPI_RxByte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f104 0310 	add.w	r3, r4, #16
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d9ef      	bls.n	8000a66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x104>
 8000a90:	230c      	movs	r3, #12
 8000a92:	e000      	b.n	8000a96 <SD_disk_initialize+0x106>
 8000a94:	2304      	movs	r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
 8000a98:	e03e      	b.n	8000b18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2077      	movs	r0, #119	@ 0x77
 8000a9e:	f7ff ff22 	bl	80008e6 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d808      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2069      	movs	r0, #105	@ 0x69
 8000aac:	f7ff ff1b 	bl	80008e6 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d801      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e000      	b.n	8000abc <SD_disk_initialize+0x12c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d10e      	bne.n	8000ae2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2077      	movs	r0, #119	@ 0x77
 8000ac8:	f7ff ff0d 	bl	80008e6 <SD_SendCmd>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d80e      	bhi.n	8000af0 <SD_disk_initialize+0x160>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2069      	movs	r0, #105	@ 0x69
 8000ad6:	f7ff ff06 	bl	80008e6 <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <SD_disk_initialize+0x160>
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2041      	movs	r0, #65	@ 0x41
 8000ae6:	f7ff fefe 	bl	80008e6 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e2      	bne.n	8000abe <SD_disk_initialize+0x12e>
 8000af8:	e000      	b.n	8000afc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000afa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <SD_disk_initialize+0x184>
 8000b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b08:	2050      	movs	r0, #80	@ 0x50
 8000b0a:	f7ff feec 	bl	80008e6 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SD_disk_initialize+0x1c8>)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b1e:	f7ff fd91 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000b22:	f7ff fdd1 	bl	80006c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b3e:	f7ff fe49 	bl	80007d4 <SD_PowerOff>
	}

	return Stat;
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001a4 	.word	0x200001a4
 8000b58:	200001a8 	.word	0x200001a8

08000b5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_status+0x14>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <SD_disk_status+0x1a>
	return Stat;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SD_disk_status+0x28>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x1c>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <SD_disk_read+0x20>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e051      	b.n	8000c4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SD_disk_read+0xcc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_read+0x32>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e048      	b.n	8000c4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <SD_disk_read+0xd0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <SD_disk_read+0x44>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bcc:	f7ff fd2c 	bl	8000628 <SELECT>

	if (count == 1)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f7ff fe84 	bl	80008e6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <SD_disk_read+0xb0>
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fe0b 	bl	8000804 <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <SD_disk_read+0xb0>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e01e      	b.n	8000c38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2052      	movs	r0, #82	@ 0x52
 8000bfe:	f7ff fe72 	bl	80008e6 <SD_SendCmd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdf9 	bl	8000804 <SD_RxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <SD_disk_read+0xa6>
				buff += 512;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ed      	bne.n	8000c08 <SD_disk_read+0x80>
 8000c2c:	e000      	b.n	8000c30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	204c      	movs	r0, #76	@ 0x4c
 8000c34:	f7ff fe57 	bl	80008e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c38:	f7ff fd04 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000c3c:	f7ff fd44 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	200001a8 	.word	0x200001a8

08000c5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <SD_disk_write+0x1c>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <SD_disk_write+0x20>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e06b      	b.n	8000d54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <SD_disk_write+0x100>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SD_disk_write+0x32>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e062      	b.n	8000d54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <SD_disk_write+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SD_disk_write+0x44>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e059      	b.n	8000d54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SD_disk_write+0x104>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <SD_disk_write+0x56>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cb2:	f7ff fcb9 	bl	8000628 <SELECT>

	if (count == 1)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d110      	bne.n	8000cde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2058      	movs	r0, #88	@ 0x58
 8000cc0:	f7ff fe11 	bl	80008e6 <SD_SendCmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13a      	bne.n	8000d40 <SD_disk_write+0xe4>
 8000cca:	21fe      	movs	r1, #254	@ 0xfe
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fdc7 	bl	8000860 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d033      	beq.n	8000d40 <SD_disk_write+0xe4>
			count = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e030      	b.n	8000d40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <SD_disk_write+0x104>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2077      	movs	r0, #119	@ 0x77
 8000cee:	f7ff fdfa 	bl	80008e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	2057      	movs	r0, #87	@ 0x57
 8000cf6:	f7ff fdf6 	bl	80008e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2059      	movs	r0, #89	@ 0x59
 8000cfe:	f7ff fdf2 	bl	80008e6 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d08:	21fc      	movs	r1, #252	@ 0xfc
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fda8 	bl	8000860 <SD_TxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <SD_disk_write+0xd0>
				buff += 512;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_disk_write+0xac>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d2e:	21fd      	movs	r1, #253	@ 0xfd
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd95 	bl	8000860 <SD_TxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d40:	f7ff fc80 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000d44:	f7ff fcc0 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001a8 	.word	0x200001a8

08000d64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	603a      	str	r2, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_disk_ioctl+0x1e>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e113      	b.n	8000faa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d124      	bne.n	8000dd8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d012      	beq.n	8000dbc <SD_disk_ioctl+0x58>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dc1a      	bgt.n	8000dd0 <SD_disk_ioctl+0x6c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <SD_disk_ioctl+0x40>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d006      	beq.n	8000db0 <SD_disk_ioctl+0x4c>
 8000da2:	e015      	b.n	8000dd0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000da4:	f7ff fd16 	bl	80007d4 <SD_PowerOff>
			res = RES_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e0fa      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000db0:	f7ff fcce 	bl	8000750 <SD_PowerOn>
			res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e0f4      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1c5c      	adds	r4, r3, #1
 8000dc0:	f7ff fd14 	bl	80007ec <SD_CheckPower>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e0ea      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	e0e6      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dd8:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <SD_disk_ioctl+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x86>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0df      	b.n	8000faa <SD_disk_ioctl+0x246>

		SELECT();
 8000dea:	f7ff fc1d 	bl	8000628 <SELECT>

		switch (ctrl)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	f200 80c9 	bhi.w	8000f88 <SD_disk_ioctl+0x224>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <SD_disk_ioctl+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f89 	.word	0x08000f89
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f05 	.word	0x08000f05
 8000e2c:	08000f29 	.word	0x08000f29
 8000e30:	08000f4d 	.word	0x08000f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e34:	2100      	movs	r1, #0
 8000e36:	2049      	movs	r0, #73	@ 0x49
 8000e38:	f7ff fd55 	bl	80008e6 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80a6 	bne.w	8000f90 <SD_disk_ioctl+0x22c>
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcda 	bl	8000804 <SD_RxDataBlock>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10d      	bne.n	8000e7e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e62:	7d7b      	ldrb	r3, [r7, #21]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02d      	b.n	8000eda <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7e:	7c7b      	ldrb	r3, [r7, #17]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0306 	and.w	r3, r3, #6
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7cbb      	ldrb	r3, [r7, #18]
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ecc:	8bfa      	ldrh	r2, [r7, #30]
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	3b09      	subs	r3, #9
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ee0:	e056      	b.n	8000f90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ef0:	e055      	b.n	8000f9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ef2:	f7ff fc13 	bl	800071c <SD_ReadyWait>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2bff      	cmp	r3, #255	@ 0xff
 8000efa:	d14b      	bne.n	8000f94 <SD_disk_ioctl+0x230>
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f02:	e047      	b.n	8000f94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f04:	2100      	movs	r1, #0
 8000f06:	2049      	movs	r0, #73	@ 0x49
 8000f08:	f7ff fced 	bl	80008e6 <SD_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d142      	bne.n	8000f98 <SD_disk_ioctl+0x234>
 8000f12:	2110      	movs	r1, #16
 8000f14:	6a38      	ldr	r0, [r7, #32]
 8000f16:	f7ff fc75 	bl	8000804 <SD_RxDataBlock>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d03b      	beq.n	8000f98 <SD_disk_ioctl+0x234>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f26:	e037      	b.n	8000f98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204a      	movs	r0, #74	@ 0x4a
 8000f2c:	f7ff fcdb 	bl	80008e6 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d132      	bne.n	8000f9c <SD_disk_ioctl+0x238>
 8000f36:	2110      	movs	r1, #16
 8000f38:	6a38      	ldr	r0, [r7, #32]
 8000f3a:	f7ff fc63 	bl	8000804 <SD_RxDataBlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02b      	beq.n	8000f9c <SD_disk_ioctl+0x238>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f4a:	e027      	b.n	8000f9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207a      	movs	r0, #122	@ 0x7a
 8000f50:	f7ff fcc9 	bl	80008e6 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f60:	e00b      	b.n	8000f7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f62:	6a3c      	ldr	r4, [r7, #32]
 8000f64:	1c63      	adds	r3, r4, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	f7ff fbae 	bl	80006c8 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f8e:	e006      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f9c:	bf00      	nop
		}

		DESELECT();
 8000f9e:	f7ff fb51 	bl	8000644 <DESELECT>
		SPI_RxByte();
 8000fa2:	f7ff fb91 	bl	80006c8 <SPI_RxByte>
	}

	return res;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x190>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <MX_GPIO_Init+0x190>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001044:	4841      	ldr	r0, [pc, #260]	@ (800114c <MX_GPIO_Init+0x194>)
 8001046:	f004 fa97 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4840      	ldr	r0, [pc, #256]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001050:	f004 fa92 	bl	8005578 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	213b      	movs	r1, #59	@ 0x3b
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x19c>)
 800105a:	f004 fa8d 	bl	8005578 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x194>)
 8001078:	f004 f8fa 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 800107c:	2306      	movs	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4830      	ldr	r0, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001090:	f004 f8ee 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <MX_GPIO_Init+0x198>)
 80010ac:	f004 f8e0 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 80010b0:	233b      	movs	r3, #59	@ 0x3b
 80010b2:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010c8:	f004 f8d2 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010e4:	f004 f8c4 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001100:	f004 f8b6 	bl	8005270 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_GPIO_Init+0x198>)
 800111c:	f004 f8a8 	bl	8005270 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f003 fcda 	bl	8004ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f003 fcf3 	bl	8004b16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f003 fcd2 	bl	8004ade <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f003 fceb 	bl	8004b16 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800116c:	f001 f908 	bl	8002380 <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001170:	e01c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001178:	d103      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800117a:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800117c:	f001 f900 	bl	8002380 <USB_Println>
}
 8001180:	e014      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001188:	d103      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x64>)
 800118c:	f001 f8f8 	bl	8002380 <USB_Println>
}
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001198:	d103      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x68>)
 800119c:	f001 f8f0 	bl	8002380 <USB_Println>
}
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011a8:	f001 f8ea 	bl	8002380 <USB_Println>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	08010274 	.word	0x08010274
 80011b8:	0801028c 	.word	0x0801028c
 80011bc:	080102a4 	.word	0x080102a4
 80011c0:	080102bc 	.word	0x080102bc
 80011c4:	080102d4 	.word	0x080102d4

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	f5ad 6def 	sub.w	sp, sp, #1912	@ 0x778
 80011ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f003 fb14 	bl	80047fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 fa94 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f7ff feee 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011dc:	f7ff f9ee 	bl	80005bc <MX_DMA_Init>
  MX_SPI1_Init();
 80011e0:	f000 fd78 	bl	8001cd4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011e4:	f00d fd74 	bl	800ecd0 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011e8:	f000 fdac 	bl	8001d44 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011ec:	f000 ffc4 	bl	8002178 <MX_TIM4_Init>
  MX_FATFS_Init();
 80011f0:	f009 fbaa 	bl	800a948 <MX_FATFS_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_Delay(100);
 80011f4:	2064      	movs	r0, #100	@ 0x64
 80011f6:	f003 fb73 	bl	80048e0 <HAL_Delay>

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011fa:	f207 531c 	addw	r3, r7, #1308	@ 0x51c
 80011fe:	2201      	movs	r2, #1
 8001200:	499c      	ldr	r1, [pc, #624]	@ (8001474 <main+0x2ac>)
 8001202:	4618      	mov	r0, r3
 8001204:	f00d f920 	bl	800e448 <f_mount>
 8001208:	4603      	mov	r3, r0
 800120a:	f887 3763 	strb.w	r3, [r7, #1891]	@ 0x763
//	  USB_Println("There was an error: %d\n", fresult);
//  } else {
//	  USB_Println("the sdcard is mounted\n");
//  }

  initializeMCP2515();
 800120e:	f000 fae9 	bl	80017e4 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 3000, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 8001212:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001216:	f5a3 63db 	sub.w	r3, r3, #1752	@ 0x6d8
 800121a:	4a97      	ldr	r2, [pc, #604]	@ (8001478 <main+0x2b0>)
 800121c:	461c      	mov	r4, r3
 800121e:	4615      	mov	r5, r2
 8001220:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001222:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001224:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001226:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001228:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800122c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001230:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001234:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 8001238:	2100      	movs	r1, #0
 800123a:	4890      	ldr	r0, [pc, #576]	@ (800147c <main+0x2b4>)
 800123c:	f000 fb8a 	bl	8001954 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001240:	2300      	movs	r3, #0
 8001242:	9303      	str	r3, [sp, #12]
 8001244:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001248:	9302      	str	r3, [sp, #8]
 800124a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	2300      	movs	r3, #0
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	2300      	movs	r3, #0
 8001256:	2200      	movs	r2, #0
 8001258:	2100      	movs	r1, #0
 800125a:	4888      	ldr	r0, [pc, #544]	@ (800147c <main+0x2b4>)
 800125c:	f000 fafe 	bl	800185c <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001260:	2301      	movs	r3, #1
 8001262:	9303      	str	r3, [sp, #12]
 8001264:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001268:	9302      	str	r3, [sp, #8]
 800126a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800126e:	9301      	str	r3, [sp, #4]
 8001270:	2300      	movs	r3, #0
 8001272:	9300      	str	r3, [sp, #0]
 8001274:	2300      	movs	r3, #0
 8001276:	2200      	movs	r2, #0
 8001278:	2100      	movs	r1, #0
 800127a:	4880      	ldr	r0, [pc, #512]	@ (800147c <main+0x2b4>)
 800127c:	f000 faee 	bl	800185c <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001280:	230e      	movs	r3, #14
 8001282:	9303      	str	r3, [sp, #12]
 8001284:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001288:	9302      	str	r3, [sp, #8]
 800128a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800128e:	9301      	str	r3, [sp, #4]
 8001290:	2300      	movs	r3, #0
 8001292:	9300      	str	r3, [sp, #0]
 8001294:	2300      	movs	r3, #0
 8001296:	2200      	movs	r2, #0
 8001298:	2100      	movs	r1, #0
 800129a:	4878      	ldr	r0, [pc, #480]	@ (800147c <main+0x2b4>)
 800129c:	f000 fade 	bl	800185c <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80012a0:	230f      	movs	r3, #15
 80012a2:	9303      	str	r3, [sp, #12]
 80012a4:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012a8:	9302      	str	r3, [sp, #8]
 80012aa:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 80012ae:	9301      	str	r3, [sp, #4]
 80012b0:	2300      	movs	r3, #0
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	2300      	movs	r3, #0
 80012b6:	2200      	movs	r2, #0
 80012b8:	2100      	movs	r1, #0
 80012ba:	4870      	ldr	r0, [pc, #448]	@ (800147c <main+0x2b4>)
 80012bc:	f000 face 	bl	800185c <setColor>

  resetScreen();
 80012c0:	f001 fd74 	bl	8002dac <resetScreen>
  initializeScreen();
 80012c4:	f001 fd90 	bl	8002de8 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012c8:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 80012cc:	f207 42ec 	addw	r2, r7, #1260	@ 0x4ec
 80012d0:	2100      	movs	r1, #0
 80012d2:	486a      	ldr	r0, [pc, #424]	@ (800147c <main+0x2b4>)
 80012d4:	f000 fc96 	bl	8001c04 <startUp>
  HAL_Delay(200);
 80012d8:	20c8      	movs	r0, #200	@ 0xc8
 80012da:	f003 fb01 	bl	80048e0 <HAL_Delay>

  char result[20] = "null"; //rpm
 80012de:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012e2:	f2a3 63ec 	subw	r3, r3, #1772	@ 0x6ec
 80012e6:	4a66      	ldr	r2, [pc, #408]	@ (8001480 <main+0x2b8>)
 80012e8:	601a      	str	r2, [r3, #0]
 80012ea:	3304      	adds	r3, #4
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
 80012f0:	605a      	str	r2, [r3, #4]
 80012f2:	609a      	str	r2, [r3, #8]
 80012f4:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 80012f6:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80012fa:	f5a3 63e0 	sub.w	r3, r3, #1792	@ 0x700
 80012fe:	4a60      	ldr	r2, [pc, #384]	@ (8001480 <main+0x2b8>)
 8001300:	601a      	str	r2, [r3, #0]
 8001302:	3304      	adds	r3, #4
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  char result3[20] = "8";//gear
 800130e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001312:	f2a3 7314 	subw	r3, r3, #1812	@ 0x714
 8001316:	2238      	movs	r2, #56	@ 0x38
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	3304      	adds	r3, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 8001326:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800132a:	f5a3 63e5 	sub.w	r3, r3, #1832	@ 0x728
 800132e:	4a54      	ldr	r2, [pc, #336]	@ (8001480 <main+0x2b8>)
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	3304      	adds	r3, #4
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
  char result5[20] = "null"; //speed
 800133e:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001342:	f2a3 733c 	subw	r3, r3, #1852	@ 0x73c
 8001346:	4a4e      	ldr	r2, [pc, #312]	@ (8001480 <main+0x2b8>)
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	3304      	adds	r3, #4
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 8001356:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 800135a:	4618      	mov	r0, r3
 800135c:	f002 fad6 	bl	800390c <settempdata>
  setgeardata(result3);
 8001360:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001364:	4618      	mov	r0, r3
 8001366:	f002 fafd 	bl	8003964 <setgeardata>
  setrpmdata(result);
 800136a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800136e:	4618      	mov	r0, r3
 8001370:	f002 faa0 	bl	80038b4 <setrpmdata>
  setbattdata(result4);
 8001374:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001378:	4618      	mov	r0, r3
 800137a:	f002 fb1d 	bl	80039b8 <setbattdata>
  setspeeddata(result5);
 800137e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001382:	4618      	mov	r0, r3
 8001384:	f002 fb44 	bl	8003a10 <setspeeddata>
  domainscreen();
 8001388:	f002 fb6c 	bl	8003a64 <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  for (int i = 0; i < 10; i++) {
 800138c:	2300      	movs	r3, #0
 800138e:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 8001392:	e1a1      	b.n	80016d8 <main+0x510>
		  int canresult = readMessage(&frame);
 8001394:	f107 0318 	add.w	r3, r7, #24
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fa35 	bl	8001808 <readMessage>
 800139e:	f8c7 075c 	str.w	r0, [r7, #1884]	@ 0x75c
		  if (canresult == 0) {
 80013a2:	f8d7 375c 	ldr.w	r3, [r7, #1884]	@ 0x75c
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f040 8191 	bne.w	80016ce <main+0x506>
			  if (frame.can_id == (1520 + 0)) {
 80013ac:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013b0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 80013ba:	d12b      	bne.n	8001414 <main+0x24c>
				  uint16_t rpm = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 80013bc:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80013c0:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80013c4:	7b9b      	ldrb	r3, [r3, #14]
 80013c6:	021b      	lsls	r3, r3, #8
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 80013ce:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 80013d2:	7bd2      	ldrb	r2, [r2, #15]
 80013d4:	4413      	add	r3, r2
 80013d6:	f8a7 375a 	strh.w	r3, [r7, #1882]	@ 0x75a
				  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013da:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013de:	f107 00c0 	add.w	r0, r7, #192	@ 0xc0
 80013e2:	f207 41ec 	addw	r1, r7, #1260	@ 0x4ec
 80013e6:	f107 0290 	add.w	r2, r7, #144	@ 0x90
 80013ea:	9201      	str	r2, [sp, #4]
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	4603      	mov	r3, r0
 80013f0:	460a      	mov	r2, r1
 80013f2:	2100      	movs	r1, #0
 80013f4:	4821      	ldr	r0, [pc, #132]	@ (800147c <main+0x2b4>)
 80013f6:	f000 fb3d 	bl	8001a74 <UpdateShiftLights>

				  itoa(rpm, (char*)(result), 10);
 80013fa:	f8b7 375a 	ldrh.w	r3, [r7, #1882]	@ 0x75a
 80013fe:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001402:	220a      	movs	r2, #10
 8001404:	4618      	mov	r0, r3
 8001406:	f00e f9b0 	bl	800f76a <itoa>
				  setrpmdata(result);
 800140a:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800140e:	4618      	mov	r0, r3
 8001410:	f002 fa50 	bl	80038b4 <setrpmdata>
			  }
			  if (frame.can_id == (1520 + 2)) {
 8001414:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001418:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f240 52f2 	movw	r2, #1522	@ 0x5f2
 8001422:	4293      	cmp	r3, r2
 8001424:	d153      	bne.n	80014ce <main+0x306>
				  uint16_t temp = (((uint16_t)frame.data[6]) << 8) + frame.data[7];
 8001426:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 800142a:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800142e:	7b9b      	ldrb	r3, [r3, #14]
 8001430:	021b      	lsls	r3, r3, #8
 8001432:	b29b      	uxth	r3, r3
 8001434:	f507 62ed 	add.w	r2, r7, #1896	@ 0x768
 8001438:	f5a2 62ea 	sub.w	r2, r2, #1872	@ 0x750
 800143c:	7bd2      	ldrb	r2, [r2, #15]
 800143e:	4413      	add	r3, r2
 8001440:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  if (temp > 2150) {
 8001444:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 8001448:	f640 0266 	movw	r2, #2150	@ 0x866
 800144c:	4293      	cmp	r3, r2
 800144e:	d919      	bls.n	8001484 <main+0x2bc>
					setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 8001450:	230f      	movs	r3, #15
 8001452:	9303      	str	r3, [sp, #12]
 8001454:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001458:	9302      	str	r3, [sp, #8]
 800145a:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800145e:	9301      	str	r3, [sp, #4]
 8001460:	2300      	movs	r3, #0
 8001462:	9300      	str	r3, [sp, #0]
 8001464:	23ff      	movs	r3, #255	@ 0xff
 8001466:	2200      	movs	r2, #0
 8001468:	2100      	movs	r1, #0
 800146a:	4804      	ldr	r0, [pc, #16]	@ (800147c <main+0x2b4>)
 800146c:	f000 f9f6 	bl	800185c <setColor>
 8001470:	e018      	b.n	80014a4 <main+0x2dc>
 8001472:	bf00      	nop
 8001474:	080102f4 	.word	0x080102f4
 8001478:	08010308 	.word	0x08010308
 800147c:	200002d8 	.word	0x200002d8
 8001480:	6c6c756e 	.word	0x6c6c756e
				  } else {
					setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001484:	230f      	movs	r3, #15
 8001486:	9303      	str	r3, [sp, #12]
 8001488:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800148c:	9302      	str	r3, [sp, #8]
 800148e:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001492:	9301      	str	r3, [sp, #4]
 8001494:	2300      	movs	r3, #0
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	2300      	movs	r3, #0
 800149a:	2200      	movs	r2, #0
 800149c:	2100      	movs	r1, #0
 800149e:	4892      	ldr	r0, [pc, #584]	@ (80016e8 <main+0x520>)
 80014a0:	f000 f9dc 	bl	800185c <setColor>
				  }
				  temp /= 10;
 80014a4:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014a8:	4a90      	ldr	r2, [pc, #576]	@ (80016ec <main+0x524>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	08db      	lsrs	r3, r3, #3
 80014b0:	f8a7 3758 	strh.w	r3, [r7, #1880]	@ 0x758
				  itoa(temp, result2, 10);
 80014b4:	f8b7 3758 	ldrh.w	r3, [r7, #1880]	@ 0x758
 80014b8:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80014bc:	220a      	movs	r2, #10
 80014be:	4618      	mov	r0, r3
 80014c0:	f00e f953 	bl	800f76a <itoa>
				  settempdata(result2);
 80014c4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fa1f 	bl	800390c <settempdata>
			  }
			  if (frame.can_id == 1520 + 33) {
 80014ce:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014d2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f240 6211 	movw	r2, #1553	@ 0x611
 80014dc:	4293      	cmp	r3, r2
 80014de:	d117      	bne.n	8001510 <main+0x348>
				  uint8_t gear = ((uint8_t)frame.data[6]);
 80014e0:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80014e4:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80014e8:	7b9b      	ldrb	r3, [r3, #14]
 80014ea:	f887 3757 	strb.w	r3, [r7, #1879]	@ 0x757
				  if (gear != 0) {
 80014ee:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d00c      	beq.n	8001510 <main+0x348>
					  //USB_Println("the gear value is %d\n", gear);
					  itoa(gear, result3, 10);
 80014f6:	f897 3757 	ldrb.w	r3, [r7, #1879]	@ 0x757
 80014fa:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80014fe:	220a      	movs	r2, #10
 8001500:	4618      	mov	r0, r3
 8001502:	f00e f932 	bl	800f76a <itoa>
					  setgeardata(result3);
 8001506:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800150a:	4618      	mov	r0, r3
 800150c:	f002 fa2a 	bl	8003964 <setgeardata>
				  }
			  }
			  if (frame.can_id == (1520 + 3)) {
 8001510:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001514:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f240 52f3 	movw	r2, #1523	@ 0x5f3
 800151e:	4293      	cmp	r3, r2
 8001520:	d155      	bne.n	80015ce <main+0x406>
				  uint8_t battvalue = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 8001522:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001526:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 800152a:	7adb      	ldrb	r3, [r3, #11]
 800152c:	f887 3751 	strb.w	r3, [r7, #1873]	@ 0x751
				  uint8_t batIntPart = battvalue / 10;
 8001530:	f897 3751 	ldrb.w	r3, [r7, #1873]	@ 0x751
 8001534:	4a6d      	ldr	r2, [pc, #436]	@ (80016ec <main+0x524>)
 8001536:	fba2 2303 	umull	r2, r3, r2, r3
 800153a:	08db      	lsrs	r3, r3, #3
 800153c:	f887 3750 	strb.w	r3, [r7, #1872]	@ 0x750
				  uint8_t batDecimalPart = battvalue % 10;
 8001540:	f897 2751 	ldrb.w	r2, [r7, #1873]	@ 0x751
 8001544:	4b69      	ldr	r3, [pc, #420]	@ (80016ec <main+0x524>)
 8001546:	fba3 1302 	umull	r1, r3, r3, r2
 800154a:	08d9      	lsrs	r1, r3, #3
 800154c:	460b      	mov	r3, r1
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f887 374f 	strb.w	r3, [r7, #1871]	@ 0x74f
				  char batint[10];
				  char batdec[10];
				  itoa(batIntPart, batint, 10);
 800155a:	f897 3750 	ldrb.w	r3, [r7, #1872]	@ 0x750
 800155e:	f107 010c 	add.w	r1, r7, #12
 8001562:	220a      	movs	r2, #10
 8001564:	4618      	mov	r0, r3
 8001566:	f00e f900 	bl	800f76a <itoa>
				  itoa(batDecimalPart, batdec, 10);
 800156a:	f897 374f 	ldrb.w	r3, [r7, #1871]	@ 0x74f
 800156e:	4639      	mov	r1, r7
 8001570:	220a      	movs	r2, #10
 8001572:	4618      	mov	r0, r3
 8001574:	f00e f8f9 	bl	800f76a <itoa>
				  strncpy(result4, "", 20);
 8001578:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800157c:	2214      	movs	r2, #20
 800157e:	495c      	ldr	r1, [pc, #368]	@ (80016f0 <main+0x528>)
 8001580:	4618      	mov	r0, r3
 8001582:	f00e fa4c 	bl	800fa1e <strncpy>
				  strncat(result4, batint, 5);
 8001586:	f107 010c 	add.w	r1, r7, #12
 800158a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800158e:	2205      	movs	r2, #5
 8001590:	4618      	mov	r0, r3
 8001592:	f00e fa31 	bl	800f9f8 <strncat>
				  strncat(result4, ".", 5);
 8001596:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800159a:	4618      	mov	r0, r3
 800159c:	f7fe fe20 	bl	80001e0 <strlen>
 80015a0:	4603      	mov	r3, r0
 80015a2:	461a      	mov	r2, r3
 80015a4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015a8:	4413      	add	r3, r2
 80015aa:	4952      	ldr	r1, [pc, #328]	@ (80016f4 <main+0x52c>)
 80015ac:	461a      	mov	r2, r3
 80015ae:	460b      	mov	r3, r1
 80015b0:	881b      	ldrh	r3, [r3, #0]
 80015b2:	8013      	strh	r3, [r2, #0]
				  strncat(result4, batdec, 1);
 80015b4:	4639      	mov	r1, r7
 80015b6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015ba:	2201      	movs	r2, #1
 80015bc:	4618      	mov	r0, r3
 80015be:	f00e fa1b 	bl	800f9f8 <strncat>
				  setbattdata(result4);
 80015c2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80015c6:	4618      	mov	r0, r3
 80015c8:	f002 f9f6 	bl	80039b8 <setbattdata>
 80015cc:	e07f      	b.n	80016ce <main+0x506>
			  } else if (frame.can_id == 504) {
 80015ce:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015d2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015dc:	d150      	bne.n	8001680 <main+0x4b8>
				  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015de:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015e2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015e6:	7b9b      	ldrb	r3, [r3, #14]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21a      	sxth	r2, r3
 80015ee:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80015f2:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80015f6:	7bdb      	ldrb	r3, [r3, #15]
 80015f8:	b21b      	sxth	r3, r3
 80015fa:	4313      	orrs	r3, r2
 80015fc:	b21b      	sxth	r3, r3
 80015fe:	f8a7 3752 	strh.w	r3, [r7, #1874]	@ 0x752
				  if (neutrallight < 1024) {
 8001602:	f8b7 3752 	ldrh.w	r3, [r7, #1874]	@ 0x752
 8001606:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800160a:	d21c      	bcs.n	8001646 <main+0x47e>
					  setColor(&htim4, TIM_CHANNEL_1, 128, 255, 0, ledcolors, ledbytes, 0);
 800160c:	2300      	movs	r3, #0
 800160e:	9303      	str	r3, [sp, #12]
 8001610:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 8001614:	9302      	str	r3, [sp, #8]
 8001616:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 800161a:	9301      	str	r3, [sp, #4]
 800161c:	2300      	movs	r3, #0
 800161e:	9300      	str	r3, [sp, #0]
 8001620:	23ff      	movs	r3, #255	@ 0xff
 8001622:	2280      	movs	r2, #128	@ 0x80
 8001624:	2100      	movs	r1, #0
 8001626:	4830      	ldr	r0, [pc, #192]	@ (80016e8 <main+0x520>)
 8001628:	f000 f918 	bl	800185c <setColor>
					  strncpy(result3, "7", 10);
 800162c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001630:	220a      	movs	r2, #10
 8001632:	4931      	ldr	r1, [pc, #196]	@ (80016f8 <main+0x530>)
 8001634:	4618      	mov	r0, r3
 8001636:	f00e f9f2 	bl	800fa1e <strncpy>
					  setgeardata(result3);
 800163a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800163e:	4618      	mov	r0, r3
 8001640:	f002 f990 	bl	8003964 <setgeardata>
 8001644:	e043      	b.n	80016ce <main+0x506>
				  } else {
					  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001646:	2300      	movs	r3, #0
 8001648:	9303      	str	r3, [sp, #12]
 800164a:	f107 03c0 	add.w	r3, r7, #192	@ 0xc0
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	f207 43ec 	addw	r3, r7, #1260	@ 0x4ec
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	2300      	movs	r3, #0
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	2200      	movs	r2, #0
 800165e:	2100      	movs	r1, #0
 8001660:	4821      	ldr	r0, [pc, #132]	@ (80016e8 <main+0x520>)
 8001662:	f000 f8fb 	bl	800185c <setColor>
					  strncpy(result3, "8", 10);
 8001666:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800166a:	220a      	movs	r2, #10
 800166c:	4923      	ldr	r1, [pc, #140]	@ (80016fc <main+0x534>)
 800166e:	4618      	mov	r0, r3
 8001670:	f00e f9d5 	bl	800fa1e <strncpy>
					  setgeardata(result3);
 8001674:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001678:	4618      	mov	r0, r3
 800167a:	f002 f973 	bl	8003964 <setgeardata>
 800167e:	e026      	b.n	80016ce <main+0x506>
				  }
				  //USB_Println("the neutral light value is %d\n", neutrallight);
			  } else if (frame.can_id == 1520) {
 8001680:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001684:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f5b3 6fbe 	cmp.w	r3, #1520	@ 0x5f0
 800168e:	d11e      	bne.n	80016ce <main+0x506>
				  uint16_t speed = (uint16_t)((frame.data[0] << 8) | (frame.data[1]));
 8001690:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 8001694:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 8001698:	7a1b      	ldrb	r3, [r3, #8]
 800169a:	b21b      	sxth	r3, r3
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	b21a      	sxth	r2, r3
 80016a0:	f507 63ed 	add.w	r3, r7, #1896	@ 0x768
 80016a4:	f5a3 63ea 	sub.w	r3, r3, #1872	@ 0x750
 80016a8:	7a5b      	ldrb	r3, [r3, #9]
 80016aa:	b21b      	sxth	r3, r3
 80016ac:	4313      	orrs	r3, r2
 80016ae:	b21b      	sxth	r3, r3
 80016b0:	f8a7 3754 	strh.w	r3, [r7, #1876]	@ 0x754
				  itoa(speed, (char*) result5, 10);
 80016b4:	f8b7 3754 	ldrh.w	r3, [r7, #1876]	@ 0x754
 80016b8:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 80016bc:	220a      	movs	r2, #10
 80016be:	4618      	mov	r0, r3
 80016c0:	f00e f853 	bl	800f76a <itoa>
				  setspeeddata(result5);
 80016c4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 f9a1 	bl	8003a10 <setspeeddata>
	  for (int i = 0; i < 10; i++) {
 80016ce:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016d2:	3301      	adds	r3, #1
 80016d4:	f8c7 3764 	str.w	r3, [r7, #1892]	@ 0x764
 80016d8:	f8d7 3764 	ldr.w	r3, [r7, #1892]	@ 0x764
 80016dc:	2b09      	cmp	r3, #9
 80016de:	f77f ae59 	ble.w	8001394 <main+0x1cc>
			  }
		  }
	  }

	  domainscreen();
 80016e2:	f002 f9bf 	bl	8003a64 <domainscreen>
	  for (int i = 0; i < 10; i++) {
 80016e6:	e651      	b.n	800138c <main+0x1c4>
 80016e8:	200002d8 	.word	0x200002d8
 80016ec:	cccccccd 	.word	0xcccccccd
 80016f0:	080102f8 	.word	0x080102f8
 80016f4:	080102fc 	.word	0x080102fc
 80016f8:	08010300 	.word	0x08010300
 80016fc:	08010304 	.word	0x08010304

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	@ 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f00e f96a 	bl	800f9e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b29      	ldr	r3, [pc, #164]	@ (80017d0 <SystemClock_Config+0xd0>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a28      	ldr	r2, [pc, #160]	@ (80017d0 <SystemClock_Config+0xd0>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
 8001734:	4b26      	ldr	r3, [pc, #152]	@ (80017d0 <SystemClock_Config+0xd0>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b23      	ldr	r3, [pc, #140]	@ (80017d4 <SystemClock_Config+0xd4>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800174c:	4a21      	ldr	r2, [pc, #132]	@ (80017d4 <SystemClock_Config+0xd4>)
 800174e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001752:	6013      	str	r3, [r2, #0]
 8001754:	4b1f      	ldr	r3, [pc, #124]	@ (80017d4 <SystemClock_Config+0xd4>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800175c:	607b      	str	r3, [r7, #4]
 800175e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001760:	2301      	movs	r3, #1
 8001762:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001764:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001768:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800176a:	2302      	movs	r3, #2
 800176c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001772:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001774:	2319      	movs	r3, #25
 8001776:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001778:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800177c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800177e:	2304      	movs	r3, #4
 8001780:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001782:	2307      	movs	r3, #7
 8001784:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001786:	f107 0320 	add.w	r3, r7, #32
 800178a:	4618      	mov	r0, r3
 800178c:	f005 f978 	bl	8006a80 <HAL_RCC_OscConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001796:	f000 f81f 	bl	80017d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800179a:	230f      	movs	r3, #15
 800179c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179e:	2302      	movs	r3, #2
 80017a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80017a2:	2300      	movs	r3, #0
 80017a4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80017a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017aa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80017b0:	f107 030c 	add.w	r3, r7, #12
 80017b4:	2102      	movs	r1, #2
 80017b6:	4618      	mov	r0, r3
 80017b8:	f005 fbda 	bl	8006f70 <HAL_RCC_ClockConfig>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80017c2:	f000 f809 	bl	80017d8 <Error_Handler>
  }
}
 80017c6:	bf00      	nop
 80017c8:	3750      	adds	r7, #80	@ 0x50
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40023800 	.word	0x40023800
 80017d4:	40007000 	.word	0x40007000

080017d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017dc:	b672      	cpsid	i
}
 80017de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017e0:	bf00      	nop
 80017e2:	e7fd      	b.n	80017e0 <Error_Handler+0x8>

080017e4 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80017e4:	b580      	push	{r7, lr}
 80017e6:	af00      	add	r7, sp, #0
	myMCP.reset();
 80017e8:	4806      	ldr	r0, [pc, #24]	@ (8001804 <initializeMCP2515+0x20>)
 80017ea:	f002 fac7 	bl	8003d7c <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 80017ee:	2202      	movs	r2, #2
 80017f0:	210e      	movs	r1, #14
 80017f2:	4804      	ldr	r0, [pc, #16]	@ (8001804 <initializeMCP2515+0x20>)
 80017f4:	f002 fc94 	bl	8004120 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 80017f8:	4802      	ldr	r0, [pc, #8]	@ (8001804 <initializeMCP2515+0x20>)
 80017fa:	f002 fc45 	bl	8004088 <_ZN7MCP251513setNormalModeEv>
}
 80017fe:	bf00      	nop
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	200001ac 	.word	0x200001ac

08001808 <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4804      	ldr	r0, [pc, #16]	@ (8001824 <readMessage+0x1c>)
 8001814:	f002 ff9c 	bl	8004750 <_ZN7MCP251511readMessageEP9can_frame>
 8001818:	4603      	mov	r3, r0
}
 800181a:	4618      	mov	r0, r3
 800181c:	3708      	adds	r7, #8
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	200001ac 	.word	0x200001ac

08001828 <_Z41__static_initialization_and_destruction_0v>:
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 800182e:	2310      	movs	r3, #16
 8001830:	9300      	str	r3, [sp, #0]
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001834:	220a      	movs	r2, #10
 8001836:	4904      	ldr	r1, [pc, #16]	@ (8001848 <_Z41__static_initialization_and_destruction_0v+0x20>)
 8001838:	4804      	ldr	r0, [pc, #16]	@ (800184c <_Z41__static_initialization_and_destruction_0v+0x24>)
 800183a:	f002 fa40 	bl	8003cbe <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 800183e:	bf00      	nop
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	40020000 	.word	0x40020000
 8001848:	20000218 	.word	0x20000218
 800184c:	200001ac 	.word	0x200001ac

08001850 <_GLOBAL__sub_I_myMCP>:
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
 8001854:	f7ff ffe8 	bl	8001828 <_Z41__static_initialization_and_destruction_0v>
 8001858:	bd80      	pop	{r7, pc}
	...

0800185c <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 800185c:	b580      	push	{r7, lr}
 800185e:	b088      	sub	sp, #32
 8001860:	af00      	add	r7, sp, #0
 8001862:	60f8      	str	r0, [r7, #12]
 8001864:	60b9      	str	r1, [r7, #8]
 8001866:	4611      	mov	r1, r2
 8001868:	461a      	mov	r2, r3
 800186a:	460b      	mov	r3, r1
 800186c:	71fb      	strb	r3, [r7, #7]
 800186e:	4613      	mov	r3, r2
 8001870:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001872:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001874:	4613      	mov	r3, r2
 8001876:	005b      	lsls	r3, r3, #1
 8001878:	4413      	add	r3, r2
 800187a:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001880:	4413      	add	r3, r2
 8001882:	79fa      	ldrb	r2, [r7, #7]
 8001884:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	3301      	adds	r3, #1
 800188a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800188c:	4413      	add	r3, r2
 800188e:	79ba      	ldrb	r2, [r7, #6]
 8001890:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	3302      	adds	r3, #2
 8001896:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001898:	4413      	add	r3, r2
 800189a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800189e:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	e02a      	b.n	80018fc <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80018a6:	2300      	movs	r3, #0
 80018a8:	61bb      	str	r3, [r7, #24]
 80018aa:	e021      	b.n	80018f0 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80018b0:	4413      	add	r3, r2
 80018b2:	781b      	ldrb	r3, [r3, #0]
 80018b4:	461a      	mov	r2, r3
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	fa02 f303 	lsl.w	r3, r2, r3
 80018bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80018c4:	69fb      	ldr	r3, [r7, #28]
 80018c6:	00da      	lsls	r2, r3, #3
 80018c8:	69bb      	ldr	r3, [r7, #24]
 80018ca:	4413      	add	r3, r2
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018d0:	4413      	add	r3, r2
 80018d2:	2246      	movs	r2, #70	@ 0x46
 80018d4:	801a      	strh	r2, [r3, #0]
 80018d6:	e008      	b.n	80018ea <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	00da      	lsls	r2, r3, #3
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80018e4:	4413      	add	r3, r2
 80018e6:	2223      	movs	r2, #35	@ 0x23
 80018e8:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	3301      	adds	r3, #1
 80018ee:	61bb      	str	r3, [r7, #24]
 80018f0:	69bb      	ldr	r3, [r7, #24]
 80018f2:	2b07      	cmp	r3, #7
 80018f4:	ddda      	ble.n	80018ac <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	3301      	adds	r3, #1
 80018fa:	61fb      	str	r3, [r7, #28]
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	3302      	adds	r3, #2
 8001900:	69fa      	ldr	r2, [r7, #28]
 8001902:	429a      	cmp	r2, r3
 8001904:	ddcf      	ble.n	80018a6 <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001906:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800190a:	617b      	str	r3, [r7, #20]
 800190c:	e008      	b.n	8001920 <setColor+0xc4>
    	ledbytes[i] = 0;
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001914:	4413      	add	r3, r2
 8001916:	2200      	movs	r2, #0
 8001918:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800191a:	697b      	ldr	r3, [r7, #20]
 800191c:	3301      	adds	r3, #1
 800191e:	617b      	str	r3, [r7, #20]
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	f240 2215 	movw	r2, #533	@ 0x215
 8001926:	4293      	cmp	r3, r2
 8001928:	ddf1      	ble.n	800190e <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 800192a:	f240 2316 	movw	r3, #534	@ 0x216
 800192e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	68f8      	ldr	r0, [r7, #12]
 8001934:	f006 fc96 	bl	8008264 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 8001938:	bf00      	nop
 800193a:	4b05      	ldr	r3, [pc, #20]	@ (8001950 <setColor+0xf4>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0fb      	beq.n	800193a <setColor+0xde>
    datasentflag = 0;
 8001942:	4b03      	ldr	r3, [pc, #12]	@ (8001950 <setColor+0xf4>)
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
}
 8001948:	bf00      	nop
 800194a:	3720      	adds	r7, #32
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	200001bc 	.word	0x200001bc

08001954 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001954:	b580      	push	{r7, lr}
 8001956:	b088      	sub	sp, #32
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
 8001960:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
 8001966:	e013      	b.n	8001990 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	4413      	add	r3, r2
 800196e:	2200      	movs	r2, #0
 8001970:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	3301      	adds	r3, #1
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	4413      	add	r3, r2
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3302      	adds	r3, #2
 8001982:	687a      	ldr	r2, [r7, #4]
 8001984:	4413      	add	r3, r2
 8001986:	22ff      	movs	r2, #255	@ 0xff
 8001988:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	3303      	adds	r3, #3
 800198e:	61fb      	str	r3, [r7, #28]
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	2b2f      	cmp	r3, #47	@ 0x2f
 8001994:	dde8      	ble.n	8001968 <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 8001996:	2300      	movs	r3, #0
 8001998:	61bb      	str	r3, [r7, #24]
 800199a:	e02a      	b.n	80019f2 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
 80019a0:	e021      	b.n	80019e6 <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80019a2:	69bb      	ldr	r3, [r7, #24]
 80019a4:	687a      	ldr	r2, [r7, #4]
 80019a6:	4413      	add	r3, r2
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	461a      	mov	r2, r3
 80019ac:	697b      	ldr	r3, [r7, #20]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	00da      	lsls	r2, r3, #3
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	4413      	add	r3, r2
 80019c2:	005b      	lsls	r3, r3, #1
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	4413      	add	r3, r2
 80019c8:	2246      	movs	r2, #70	@ 0x46
 80019ca:	801a      	strh	r2, [r3, #0]
 80019cc:	e008      	b.n	80019e0 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80019ce:	69bb      	ldr	r3, [r7, #24]
 80019d0:	00da      	lsls	r2, r3, #3
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4413      	add	r3, r2
 80019d6:	005b      	lsls	r3, r3, #1
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	4413      	add	r3, r2
 80019dc:	2223      	movs	r2, #35	@ 0x23
 80019de:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80019e0:	697b      	ldr	r3, [r7, #20]
 80019e2:	3301      	adds	r3, #1
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	2b07      	cmp	r3, #7
 80019ea:	ddda      	ble.n	80019a2 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 80019ec:	69bb      	ldr	r3, [r7, #24]
 80019ee:	3301      	adds	r3, #1
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	2b2f      	cmp	r3, #47	@ 0x2f
 80019f6:	ddd1      	ble.n	800199c <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 80019f8:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80019fc:	613b      	str	r3, [r7, #16]
 80019fe:	e008      	b.n	8001a12 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	005b      	lsls	r3, r3, #1
 8001a04:	683a      	ldr	r2, [r7, #0]
 8001a06:	4413      	add	r3, r2
 8001a08:	2200      	movs	r2, #0
 8001a0a:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	3301      	adds	r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	f240 2215 	movw	r2, #533	@ 0x215
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	ddf1      	ble.n	8001a00 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001a1c:	f240 2316 	movw	r3, #534	@ 0x216
 8001a20:	683a      	ldr	r2, [r7, #0]
 8001a22:	68b9      	ldr	r1, [r7, #8]
 8001a24:	68f8      	ldr	r0, [r7, #12]
 8001a26:	f006 fc1d 	bl	8008264 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 8001a2a:	bf00      	nop
 8001a2c:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <shiftLightsInit+0xf4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0fb      	beq.n	8001a2c <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001a34:	4b04      	ldr	r3, [pc, #16]	@ (8001a48 <shiftLightsInit+0xf4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	603b      	str	r3, [r7, #0]
}
 8001a3e:	bf00      	nop
 8001a40:	3720      	adds	r7, #32
 8001a42:	46bd      	mov	sp, r7
 8001a44:	bd80      	pop	{r7, pc}
 8001a46:	bf00      	nop
 8001a48:	200001bc 	.word	0x200001bc

08001a4c <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001a54:	2100      	movs	r1, #0
 8001a56:	4805      	ldr	r0, [pc, #20]	@ (8001a6c <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8001a58:	f006 fdb4 	bl	80085c4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001a5c:	4b04      	ldr	r3, [pc, #16]	@ (8001a70 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001a5e:	2201      	movs	r2, #1
 8001a60:	601a      	str	r2, [r3, #0]
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002d8 	.word	0x200002d8
 8001a70:	200001bc 	.word	0x200001bc

08001a74 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
 8001a80:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001a82:	6a3b      	ldr	r3, [r7, #32]
 8001a84:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	dd06      	ble.n	8001a9a <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68b9      	ldr	r1, [r7, #8]
 8001a92:	68f8      	ldr	r0, [r7, #12]
 8001a94:	f000 f8b6 	bl	8001c04 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 8001a98:	e02a      	b.n	8001af0 <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	617b      	str	r3, [r7, #20]
 8001a9e:	e024      	b.n	8001aea <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001aa6:	3b02      	subs	r3, #2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001aac:	4413      	add	r3, r2
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	6a3a      	ldr	r2, [r7, #32]
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	db08      	blt.n	8001ac8 <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	9300      	str	r3, [sp, #0]
 8001aba:	683b      	ldr	r3, [r7, #0]
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	68b9      	ldr	r1, [r7, #8]
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f819 	bl	8001af8 <lightOn>
 8001ac6:	e00d      	b.n	8001ae4 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	9303      	str	r3, [sp, #12]
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	9302      	str	r3, [sp, #8]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	9301      	str	r3, [sp, #4]
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	9300      	str	r3, [sp, #0]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	68b9      	ldr	r1, [r7, #8]
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff febc 	bl	800185c <setColor>
	for (int i = 2; i < 14; i++) {
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	3301      	adds	r3, #1
 8001ae8:	617b      	str	r3, [r7, #20]
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	2b0d      	cmp	r3, #13
 8001aee:	ddd7      	ble.n	8001aa0 <UpdateShiftLights+0x2c>
}
 8001af0:	bf00      	nop
 8001af2:	3718      	adds	r7, #24
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b088      	sub	sp, #32
 8001afc:	af04      	add	r7, sp, #16
 8001afe:	60f8      	str	r0, [r7, #12]
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	2b0d      	cmp	r3, #13
 8001b0a:	d140      	bne.n	8001b8e <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	68f8      	ldr	r0, [r7, #12]
 8001b14:	f7ff ff1e 	bl	8001954 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001b18:	2300      	movs	r3, #0
 8001b1a:	9303      	str	r3, [sp, #12]
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	9302      	str	r3, [sp, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	9301      	str	r3, [sp, #4]
 8001b24:	2300      	movs	r3, #0
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2300      	movs	r3, #0
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	2100      	movs	r1, #0
 8001b2e:	4834      	ldr	r0, [pc, #208]	@ (8001c00 <lightOn+0x108>)
 8001b30:	f7ff fe94 	bl	800185c <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001b34:	2301      	movs	r3, #1
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	2300      	movs	r3, #0
 8001b46:	2200      	movs	r2, #0
 8001b48:	2100      	movs	r1, #0
 8001b4a:	482d      	ldr	r0, [pc, #180]	@ (8001c00 <lightOn+0x108>)
 8001b4c:	f7ff fe86 	bl	800185c <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001b50:	230e      	movs	r3, #14
 8001b52:	9303      	str	r3, [sp, #12]
 8001b54:	683b      	ldr	r3, [r7, #0]
 8001b56:	9302      	str	r3, [sp, #8]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	9301      	str	r3, [sp, #4]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9300      	str	r3, [sp, #0]
 8001b60:	2300      	movs	r3, #0
 8001b62:	2200      	movs	r2, #0
 8001b64:	2100      	movs	r1, #0
 8001b66:	4826      	ldr	r0, [pc, #152]	@ (8001c00 <lightOn+0x108>)
 8001b68:	f7ff fe78 	bl	800185c <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001b6c:	230f      	movs	r3, #15
 8001b6e:	9303      	str	r3, [sp, #12]
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	9302      	str	r3, [sp, #8]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	9301      	str	r3, [sp, #4]
 8001b78:	2300      	movs	r3, #0
 8001b7a:	9300      	str	r3, [sp, #0]
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	2200      	movs	r2, #0
 8001b80:	2100      	movs	r1, #0
 8001b82:	481f      	ldr	r0, [pc, #124]	@ (8001c00 <lightOn+0x108>)
 8001b84:	f7ff fe6a 	bl	800185c <setColor>
		HAL_Delay(5);
 8001b88:	2005      	movs	r0, #5
 8001b8a:	f002 fea9 	bl	80048e0 <HAL_Delay>
	}
	if (index < 6) {
 8001b8e:	69bb      	ldr	r3, [r7, #24]
 8001b90:	2b05      	cmp	r3, #5
 8001b92:	dc0e      	bgt.n	8001bb2 <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	9303      	str	r3, [sp, #12]
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	9302      	str	r3, [sp, #8]
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	9301      	str	r3, [sp, #4]
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	9300      	str	r3, [sp, #0]
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	22ff      	movs	r2, #255	@ 0xff
 8001ba8:	68b9      	ldr	r1, [r7, #8]
 8001baa:	68f8      	ldr	r0, [r7, #12]
 8001bac:	f7ff fe56 	bl	800185c <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001bb0:	e022      	b.n	8001bf8 <lightOn+0x100>
	} else if (index < 10) {
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	2b09      	cmp	r3, #9
 8001bb6:	dc0e      	bgt.n	8001bd6 <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001bb8:	69bb      	ldr	r3, [r7, #24]
 8001bba:	9303      	str	r3, [sp, #12]
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	9302      	str	r3, [sp, #8]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	9301      	str	r3, [sp, #4]
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	9300      	str	r3, [sp, #0]
 8001bc8:	23ff      	movs	r3, #255	@ 0xff
 8001bca:	2200      	movs	r2, #0
 8001bcc:	68b9      	ldr	r1, [r7, #8]
 8001bce:	68f8      	ldr	r0, [r7, #12]
 8001bd0:	f7ff fe44 	bl	800185c <setColor>
}
 8001bd4:	e010      	b.n	8001bf8 <lightOn+0x100>
	} else if (index < 14){
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	2b0d      	cmp	r3, #13
 8001bda:	dc0d      	bgt.n	8001bf8 <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	9303      	str	r3, [sp, #12]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	9301      	str	r3, [sp, #4]
 8001be8:	23ff      	movs	r3, #255	@ 0xff
 8001bea:	9300      	str	r3, [sp, #0]
 8001bec:	2300      	movs	r3, #0
 8001bee:	2200      	movs	r2, #0
 8001bf0:	68b9      	ldr	r1, [r7, #8]
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	f7ff fe32 	bl	800185c <setColor>
}
 8001bf8:	bf00      	nop
 8001bfa:	3710      	adds	r7, #16
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200002d8 	.word	0x200002d8

08001c04 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08c      	sub	sp, #48	@ 0x30
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
 8001c10:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001c12:	2307      	movs	r3, #7
 8001c14:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001c16:	2300      	movs	r3, #0
 8001c18:	61fb      	str	r3, [r7, #28]
 8001c1a:	e026      	b.n	8001c6a <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	9303      	str	r3, [sp, #12]
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	9302      	str	r3, [sp, #8]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	9301      	str	r3, [sp, #4]
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	9300      	str	r3, [sp, #0]
 8001c30:	23ff      	movs	r3, #255	@ 0xff
 8001c32:	2200      	movs	r2, #0
 8001c34:	68b9      	ldr	r1, [r7, #8]
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	f7ff fe10 	bl	800185c <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001c3c:	697a      	ldr	r2, [r7, #20]
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	4413      	add	r3, r2
 8001c42:	3301      	adds	r3, #1
 8001c44:	9303      	str	r3, [sp, #12]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	9302      	str	r3, [sp, #8]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	9301      	str	r3, [sp, #4]
 8001c4e:	2300      	movs	r3, #0
 8001c50:	9300      	str	r3, [sp, #0]
 8001c52:	23ff      	movs	r3, #255	@ 0xff
 8001c54:	2200      	movs	r2, #0
 8001c56:	68b9      	ldr	r1, [r7, #8]
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f7ff fdff 	bl	800185c <setColor>
		HAL_Delay(20);
 8001c5e:	2014      	movs	r0, #20
 8001c60:	f002 fe3e 	bl	80048e0 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	3301      	adds	r3, #1
 8001c68:	61fb      	str	r3, [r7, #28]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	2b05      	cmp	r3, #5
 8001c6e:	ddd5      	ble.n	8001c1c <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001c70:	2300      	movs	r3, #0
 8001c72:	61bb      	str	r3, [r7, #24]
 8001c74:	e026      	b.n	8001cc4 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001c76:	697a      	ldr	r2, [r7, #20]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	1ad3      	subs	r3, r2, r3
 8001c7c:	9303      	str	r3, [sp, #12]
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	9302      	str	r3, [sp, #8]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	2300      	movs	r3, #0
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	68b9      	ldr	r1, [r7, #8]
 8001c90:	68f8      	ldr	r0, [r7, #12]
 8001c92:	f7ff fde3 	bl	800185c <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	69bb      	ldr	r3, [r7, #24]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	3301      	adds	r3, #1
 8001c9e:	9303      	str	r3, [sp, #12]
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9302      	str	r3, [sp, #8]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	9301      	str	r3, [sp, #4]
 8001ca8:	2300      	movs	r3, #0
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2300      	movs	r3, #0
 8001cae:	2200      	movs	r2, #0
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	68f8      	ldr	r0, [r7, #12]
 8001cb4:	f7ff fdd2 	bl	800185c <setColor>
		HAL_Delay(20);
 8001cb8:	2014      	movs	r0, #20
 8001cba:	f002 fe11 	bl	80048e0 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001cbe:	69bb      	ldr	r3, [r7, #24]
 8001cc0:	3301      	adds	r3, #1
 8001cc2:	61bb      	str	r3, [r7, #24]
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b05      	cmp	r3, #5
 8001cc8:	ddd5      	ble.n	8001c76 <startUp+0x72>
	}
}
 8001cca:	bf00      	nop
 8001ccc:	bf00      	nop
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cd8:	4b18      	ldr	r3, [pc, #96]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001cda:	4a19      	ldr	r2, [pc, #100]	@ (8001d40 <MX_SPI1_Init+0x6c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cde:	4b17      	ldr	r3, [pc, #92]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001ce0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ce4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001ce6:	4b15      	ldr	r3, [pc, #84]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001cec:	4b13      	ldr	r3, [pc, #76]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001cee:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001cf2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d00:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d02:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d06:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001d08:	4b0c      	ldr	r3, [pc, #48]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d0e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d14:	4b09      	ldr	r3, [pc, #36]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d1a:	4b08      	ldr	r3, [pc, #32]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001d20:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d22:	220a      	movs	r2, #10
 8001d24:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d26:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <MX_SPI1_Init+0x68>)
 8001d28:	f005 fada 	bl	80072e0 <HAL_SPI_Init>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001d32:	f7ff fd51 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d36:	bf00      	nop
 8001d38:	bd80      	pop	{r7, pc}
 8001d3a:	bf00      	nop
 8001d3c:	200001c0 	.word	0x200001c0
 8001d40:	40013000 	.word	0x40013000

08001d44 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001d48:	4b17      	ldr	r3, [pc, #92]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d4a:	4a18      	ldr	r2, [pc, #96]	@ (8001dac <MX_SPI2_Init+0x68>)
 8001d4c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001d4e:	4b16      	ldr	r3, [pc, #88]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d50:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001d54:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001d56:	4b14      	ldr	r3, [pc, #80]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d62:	4b11      	ldr	r3, [pc, #68]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d68:	4b0f      	ldr	r3, [pc, #60]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001d74:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001d76:	4b0c      	ldr	r3, [pc, #48]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d78:	2220      	movs	r2, #32
 8001d7a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d82:	4b09      	ldr	r3, [pc, #36]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d84:	2200      	movs	r2, #0
 8001d86:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d88:	4b07      	ldr	r3, [pc, #28]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001d8e:	4b06      	ldr	r3, [pc, #24]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d90:	220a      	movs	r2, #10
 8001d92:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d94:	4804      	ldr	r0, [pc, #16]	@ (8001da8 <MX_SPI2_Init+0x64>)
 8001d96:	f005 faa3 	bl	80072e0 <HAL_SPI_Init>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d001      	beq.n	8001da4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001da0:	f7ff fd1a 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001da4:	bf00      	nop
 8001da6:	bd80      	pop	{r7, pc}
 8001da8:	20000218 	.word	0x20000218
 8001dac:	40003800 	.word	0x40003800

08001db0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a4a      	ldr	r2, [pc, #296]	@ (8001ef8 <HAL_SPI_MspInit+0x148>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d15c      	bne.n	8001e8c <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	4b49      	ldr	r3, [pc, #292]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dda:	4a48      	ldr	r2, [pc, #288]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001ddc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001de0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001de2:	4b46      	ldr	r3, [pc, #280]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001de6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	4b42      	ldr	r3, [pc, #264]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a41      	ldr	r2, [pc, #260]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b3f      	ldr	r3, [pc, #252]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001e0a:	23a0      	movs	r3, #160	@ 0xa0
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e16:	2303      	movs	r3, #3
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e1a:	2305      	movs	r3, #5
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	4836      	ldr	r0, [pc, #216]	@ (8001f00 <HAL_SPI_MspInit+0x150>)
 8001e26:	f003 fa23 	bl	8005270 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001e2a:	4b36      	ldr	r3, [pc, #216]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e2c:	4a36      	ldr	r2, [pc, #216]	@ (8001f08 <HAL_SPI_MspInit+0x158>)
 8001e2e:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001e30:	4b34      	ldr	r3, [pc, #208]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e32:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001e36:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001e38:	4b32      	ldr	r3, [pc, #200]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e3a:	2240      	movs	r2, #64	@ 0x40
 8001e3c:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e3e:	4b31      	ldr	r3, [pc, #196]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001e44:	4b2f      	ldr	r3, [pc, #188]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e46:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e4a:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001e4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e4e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001e52:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001e54:	4b2b      	ldr	r3, [pc, #172]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e56:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001e5a:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e68:	4b26      	ldr	r3, [pc, #152]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001e6e:	4825      	ldr	r0, [pc, #148]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e70:	f002 fe6c 	bl	8004b4c <HAL_DMA_Init>
 8001e74:	4603      	mov	r3, r0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001e7a:	f7ff fcad 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e82:	649a      	str	r2, [r3, #72]	@ 0x48
 8001e84:	4a1f      	ldr	r2, [pc, #124]	@ (8001f04 <HAL_SPI_MspInit+0x154>)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001e8a:	e031      	b.n	8001ef0 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a1e      	ldr	r2, [pc, #120]	@ (8001f0c <HAL_SPI_MspInit+0x15c>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d12c      	bne.n	8001ef0 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	4b18      	ldr	r3, [pc, #96]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a17      	ldr	r2, [pc, #92]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001ea0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b15      	ldr	r3, [pc, #84]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001eae:	613b      	str	r3, [r7, #16]
 8001eb0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60fb      	str	r3, [r7, #12]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001ebc:	f043 0302 	orr.w	r3, r3, #2
 8001ec0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_SPI_MspInit+0x14c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	60fb      	str	r3, [r7, #12]
 8001ecc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001ece:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001edc:	2303      	movs	r3, #3
 8001ede:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ee0:	2305      	movs	r3, #5
 8001ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ee4:	f107 031c 	add.w	r3, r7, #28
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4809      	ldr	r0, [pc, #36]	@ (8001f10 <HAL_SPI_MspInit+0x160>)
 8001eec:	f003 f9c0 	bl	8005270 <HAL_GPIO_Init>
}
 8001ef0:	bf00      	nop
 8001ef2:	3730      	adds	r7, #48	@ 0x30
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40013000 	.word	0x40013000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000
 8001f04:	20000270 	.word	0x20000270
 8001f08:	40026458 	.word	0x40026458
 8001f0c:	40003800 	.word	0x40003800
 8001f10:	40020400 	.word	0x40020400

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b083      	sub	sp, #12
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	4b10      	ldr	r3, [pc, #64]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f22:	4a0f      	ldr	r2, [pc, #60]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f32:	607b      	str	r3, [r7, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	603b      	str	r3, [r7, #0]
 8001f3a:	4b09      	ldr	r3, [pc, #36]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	4a08      	ldr	r2, [pc, #32]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f46:	4b06      	ldr	r3, [pc, #24]	@ (8001f60 <HAL_MspInit+0x4c>)
 8001f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f4e:	603b      	str	r3, [r7, #0]
 8001f50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f52:	bf00      	nop
 8001f54:	370c      	adds	r7, #12
 8001f56:	46bd      	mov	sp, r7
 8001f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5c:	4770      	bx	lr
 8001f5e:	bf00      	nop
 8001f60:	40023800 	.word	0x40023800

08001f64 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001f68:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <SDTimer_Handler+0x40>)
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29b      	uxth	r3, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d006      	beq.n	8001f80 <SDTimer_Handler+0x1c>
    Timer1--;
 8001f72:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <SDTimer_Handler+0x40>)
 8001f74:	881b      	ldrh	r3, [r3, #0]
 8001f76:	b29b      	uxth	r3, r3
 8001f78:	3b01      	subs	r3, #1
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <SDTimer_Handler+0x40>)
 8001f7e:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001f80:	4b09      	ldr	r3, [pc, #36]	@ (8001fa8 <SDTimer_Handler+0x44>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d006      	beq.n	8001f98 <SDTimer_Handler+0x34>
    Timer2--;
 8001f8a:	4b07      	ldr	r3, [pc, #28]	@ (8001fa8 <SDTimer_Handler+0x44>)
 8001f8c:	881b      	ldrh	r3, [r3, #0]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	3b01      	subs	r3, #1
 8001f92:	b29a      	uxth	r2, r3
 8001f94:	4b04      	ldr	r3, [pc, #16]	@ (8001fa8 <SDTimer_Handler+0x44>)
 8001f96:	801a      	strh	r2, [r3, #0]
}
 8001f98:	bf00      	nop
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	200001a4 	.word	0x200001a4
 8001fa8:	200001a6 	.word	0x200001a6

08001fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fb0:	bf00      	nop
 8001fb2:	e7fd      	b.n	8001fb0 <NMI_Handler+0x4>

08001fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fb8:	bf00      	nop
 8001fba:	e7fd      	b.n	8001fb8 <HardFault_Handler+0x4>

08001fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <MemManage_Handler+0x4>

08001fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <BusFault_Handler+0x4>

08001fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <UsageFault_Handler+0x4>

08001fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fd8:	bf00      	nop
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe0:	4770      	bx	lr

08001fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe2:	b480      	push	{r7}
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe6:	bf00      	nop
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ff4:	bf00      	nop
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
	...

08002000 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8002004:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <SysTick_Handler+0x30>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	b2db      	uxtb	r3, r3
 800200a:	3301      	adds	r3, #1
 800200c:	b2da      	uxtb	r2, r3
 800200e:	4b08      	ldr	r3, [pc, #32]	@ (8002030 <SysTick_Handler+0x30>)
 8002010:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8002012:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <SysTick_Handler+0x30>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b09      	cmp	r3, #9
 800201a:	d904      	bls.n	8002026 <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 800201c:	4b04      	ldr	r3, [pc, #16]	@ (8002030 <SysTick_Handler+0x30>)
 800201e:	2200      	movs	r2, #0
 8002020:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8002022:	f7ff ff9f 	bl	8001f64 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002026:	f002 fc3b 	bl	80048a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800202a:	bf00      	nop
 800202c:	bd80      	pop	{r7, pc}
 800202e:	bf00      	nop
 8002030:	200002d0 	.word	0x200002d0

08002034 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8002038:	4802      	ldr	r0, [pc, #8]	@ (8002044 <DMA1_Stream0_IRQHandler+0x10>)
 800203a:	f002 feaf 	bl	8004d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	20000320 	.word	0x20000320

08002048 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 800204c:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8002050:	f003 faac 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8002054:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8002058:	f003 faa8 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}

08002060 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8002064:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002068:	f003 faa0 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 800206c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002070:	f003 fa9c 	bl	80055ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002074:	bf00      	nop
 8002076:	bd80      	pop	{r7, pc}

08002078 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 800207c:	4802      	ldr	r0, [pc, #8]	@ (8002088 <DMA2_Stream3_IRQHandler+0x10>)
 800207e:	f002 fe8d 	bl	8004d9c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	20000270 	.word	0x20000270

0800208c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002090:	4802      	ldr	r0, [pc, #8]	@ (800209c <OTG_FS_IRQHandler+0x10>)
 8002092:	f003 fbe7 	bl	8005864 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
<<<<<<< HEAD
 800209c:	2000112c 	.word	0x2000112c
=======
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	20001130 	.word	0x20001130
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

080020a0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020a0:	b480      	push	{r7}
 80020a2:	af00      	add	r7, sp, #0
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	46bd      	mov	sp, r7
 80020aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ae:	4770      	bx	lr

080020b0 <_kill>:

int _kill(int pid, int sig)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b082      	sub	sp, #8
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
 80020b8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ba:	f00d fd17 	bl	800faec <__errno>
 80020be:	4603      	mov	r3, r0
 80020c0:	2216      	movs	r2, #22
 80020c2:	601a      	str	r2, [r3, #0]
  return -1;
 80020c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3708      	adds	r7, #8
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <_exit>:

void _exit (int status)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f7ff ffe7 	bl	80020b0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020e2:	bf00      	nop
 80020e4:	e7fd      	b.n	80020e2 <_exit+0x12>
	...

080020e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b086      	sub	sp, #24
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020f0:	4a14      	ldr	r2, [pc, #80]	@ (8002144 <_sbrk+0x5c>)
 80020f2:	4b15      	ldr	r3, [pc, #84]	@ (8002148 <_sbrk+0x60>)
 80020f4:	1ad3      	subs	r3, r2, r3
 80020f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020fc:	4b13      	ldr	r3, [pc, #76]	@ (800214c <_sbrk+0x64>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d102      	bne.n	800210a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002104:	4b11      	ldr	r3, [pc, #68]	@ (800214c <_sbrk+0x64>)
 8002106:	4a12      	ldr	r2, [pc, #72]	@ (8002150 <_sbrk+0x68>)
 8002108:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800210a:	4b10      	ldr	r3, [pc, #64]	@ (800214c <_sbrk+0x64>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4413      	add	r3, r2
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	429a      	cmp	r2, r3
 8002116:	d207      	bcs.n	8002128 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002118:	f00d fce8 	bl	800faec <__errno>
 800211c:	4603      	mov	r3, r0
 800211e:	220c      	movs	r2, #12
 8002120:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002122:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002126:	e009      	b.n	800213c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002128:	4b08      	ldr	r3, [pc, #32]	@ (800214c <_sbrk+0x64>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800212e:	4b07      	ldr	r3, [pc, #28]	@ (800214c <_sbrk+0x64>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4413      	add	r3, r2
 8002136:	4a05      	ldr	r2, [pc, #20]	@ (800214c <_sbrk+0x64>)
 8002138:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800213a:	68fb      	ldr	r3, [r7, #12]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3718      	adds	r7, #24
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20010000 	.word	0x20010000
 8002148:	00000400 	.word	0x00000400
 800214c:	200002d4 	.word	0x200002d4
 8002150:	20001980 	.word	0x20001980

08002154 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002158:	4b06      	ldr	r3, [pc, #24]	@ (8002174 <SystemInit+0x20>)
 800215a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800215e:	4a05      	ldr	r2, [pc, #20]	@ (8002174 <SystemInit+0x20>)
 8002160:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002164:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b08e      	sub	sp, #56	@ 0x38
 800217c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800217e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002182:	2200      	movs	r2, #0
 8002184:	601a      	str	r2, [r3, #0]
 8002186:	605a      	str	r2, [r3, #4]
 8002188:	609a      	str	r2, [r3, #8]
 800218a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800218c:	f107 0320 	add.w	r3, r7, #32
 8002190:	2200      	movs	r2, #0
 8002192:	601a      	str	r2, [r3, #0]
 8002194:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002196:	1d3b      	adds	r3, r7, #4
 8002198:	2200      	movs	r2, #0
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	605a      	str	r2, [r3, #4]
 800219e:	609a      	str	r2, [r3, #8]
 80021a0:	60da      	str	r2, [r3, #12]
 80021a2:	611a      	str	r2, [r3, #16]
 80021a4:	615a      	str	r2, [r3, #20]
 80021a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80021a8:	4b2c      	ldr	r3, [pc, #176]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021aa:	4a2d      	ldr	r2, [pc, #180]	@ (8002260 <MX_TIM4_Init+0xe8>)
 80021ac:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80021ae:	4b2b      	ldr	r3, [pc, #172]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b4:	4b29      	ldr	r3, [pc, #164]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80021ba:	4b28      	ldr	r3, [pc, #160]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021bc:	2269      	movs	r2, #105	@ 0x69
 80021be:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b26      	ldr	r3, [pc, #152]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b25      	ldr	r3, [pc, #148]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80021cc:	4823      	ldr	r0, [pc, #140]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021ce:	f005 ffa1 	bl	8008114 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80021d8:	f7ff fafe 	bl	80017d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80021e2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021e6:	4619      	mov	r1, r3
 80021e8:	481c      	ldr	r0, [pc, #112]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021ea:	f006 fb73 	bl	80088d4 <HAL_TIM_ConfigClockSource>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80021f4:	f7ff faf0 	bl	80017d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80021f8:	4818      	ldr	r0, [pc, #96]	@ (800225c <MX_TIM4_Init+0xe4>)
 80021fa:	f005 ffda 	bl	80081b2 <HAL_TIM_PWM_Init>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002204:	f7ff fae8 	bl	80017d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002208:	2300      	movs	r3, #0
 800220a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800220c:	2300      	movs	r3, #0
 800220e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002210:	f107 0320 	add.w	r3, r7, #32
 8002214:	4619      	mov	r1, r3
 8002216:	4811      	ldr	r0, [pc, #68]	@ (800225c <MX_TIM4_Init+0xe4>)
 8002218:	f006 ffe0 	bl	80091dc <HAL_TIMEx_MasterConfigSynchronization>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002222:	f7ff fad9 	bl	80017d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002226:	2360      	movs	r3, #96	@ 0x60
 8002228:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002236:	1d3b      	adds	r3, r7, #4
 8002238:	2200      	movs	r2, #0
 800223a:	4619      	mov	r1, r3
 800223c:	4807      	ldr	r0, [pc, #28]	@ (800225c <MX_TIM4_Init+0xe4>)
 800223e:	f006 fa87 	bl	8008750 <HAL_TIM_PWM_ConfigChannel>
 8002242:	4603      	mov	r3, r0
 8002244:	2b00      	cmp	r3, #0
 8002246:	d001      	beq.n	800224c <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8002248:	f7ff fac6 	bl	80017d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800224c:	4803      	ldr	r0, [pc, #12]	@ (800225c <MX_TIM4_Init+0xe4>)
 800224e:	f000 f85d 	bl	800230c <HAL_TIM_MspPostInit>

}
 8002252:	bf00      	nop
 8002254:	3738      	adds	r7, #56	@ 0x38
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	200002d8 	.word	0x200002d8
 8002260:	40000800 	.word	0x40000800

08002264 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002264:	b580      	push	{r7, lr}
 8002266:	b084      	sub	sp, #16
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	4a22      	ldr	r2, [pc, #136]	@ (80022fc <HAL_TIM_Base_MspInit+0x98>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d13d      	bne.n	80022f2 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002276:	2300      	movs	r3, #0
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	4b21      	ldr	r3, [pc, #132]	@ (8002300 <HAL_TIM_Base_MspInit+0x9c>)
 800227c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227e:	4a20      	ldr	r2, [pc, #128]	@ (8002300 <HAL_TIM_Base_MspInit+0x9c>)
 8002280:	f043 0304 	orr.w	r3, r3, #4
 8002284:	6413      	str	r3, [r2, #64]	@ 0x40
 8002286:	4b1e      	ldr	r3, [pc, #120]	@ (8002300 <HAL_TIM_Base_MspInit+0x9c>)
 8002288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800228a:	f003 0304 	and.w	r3, r3, #4
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 8002292:	4b1c      	ldr	r3, [pc, #112]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 8002294:	4a1c      	ldr	r2, [pc, #112]	@ (8002308 <HAL_TIM_Base_MspInit+0xa4>)
 8002296:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 8002298:	4b1a      	ldr	r3, [pc, #104]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 800229a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800229e:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80022a0:	4b18      	ldr	r3, [pc, #96]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022a2:	2240      	movs	r2, #64	@ 0x40
 80022a4:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80022a6:	4b17      	ldr	r3, [pc, #92]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80022ac:	4b15      	ldr	r3, [pc, #84]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022ae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80022b2:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80022b4:	4b13      	ldr	r3, [pc, #76]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80022ba:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80022bc:	4b11      	ldr	r3, [pc, #68]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022be:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022c2:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80022c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80022d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80022d6:	480b      	ldr	r0, [pc, #44]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022d8:	f002 fc38 	bl	8004b4c <HAL_DMA_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80022e2:	f7ff fa79 	bl	80017d8 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a06      	ldr	r2, [pc, #24]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022ea:	625a      	str	r2, [r3, #36]	@ 0x24
 80022ec:	4a05      	ldr	r2, [pc, #20]	@ (8002304 <HAL_TIM_Base_MspInit+0xa0>)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80022f2:	bf00      	nop
 80022f4:	3710      	adds	r7, #16
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	40000800 	.word	0x40000800
 8002300:	40023800 	.word	0x40023800
 8002304:	20000320 	.word	0x20000320
 8002308:	40026010 	.word	0x40026010

0800230c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b088      	sub	sp, #32
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002314:	f107 030c 	add.w	r3, r7, #12
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
 8002320:	60da      	str	r2, [r3, #12]
 8002322:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a12      	ldr	r2, [pc, #72]	@ (8002374 <HAL_TIM_MspPostInit+0x68>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d11d      	bne.n	800236a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800232e:	2300      	movs	r3, #0
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002336:	4a10      	ldr	r2, [pc, #64]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002338:	f043 0302 	orr.w	r3, r3, #2
 800233c:	6313      	str	r3, [r2, #48]	@ 0x30
 800233e:	4b0e      	ldr	r3, [pc, #56]	@ (8002378 <HAL_TIM_MspPostInit+0x6c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002342:	f003 0302 	and.w	r3, r3, #2
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800234a:	2340      	movs	r3, #64	@ 0x40
 800234c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800234e:	2302      	movs	r3, #2
 8002350:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002356:	2300      	movs	r3, #0
 8002358:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800235a:	2302      	movs	r3, #2
 800235c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800235e:	f107 030c 	add.w	r3, r7, #12
 8002362:	4619      	mov	r1, r3
 8002364:	4805      	ldr	r0, [pc, #20]	@ (800237c <HAL_TIM_MspPostInit+0x70>)
 8002366:	f002 ff83 	bl	8005270 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800236a:	bf00      	nop
 800236c:	3720      	adds	r7, #32
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40000800 	.word	0x40000800
 8002378:	40023800 	.word	0x40023800
 800237c:	40020400 	.word	0x40020400

08002380 <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 8002380:	b40f      	push	{r0, r1, r2, r3}
 8002382:	b580      	push	{r7, lr}
 8002384:	b0a2      	sub	sp, #136	@ 0x88
 8002386:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 8002388:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800238c:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 800238e:	f107 0008 	add.w	r0, r7, #8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8002398:	2180      	movs	r1, #128	@ 0x80
 800239a:	f00d fb17 	bl	800f9cc <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7fd ff1c 	bl	80001e0 <strlen>
 80023a8:	4603      	mov	r3, r0
 80023aa:	b29a      	uxth	r2, r3
 80023ac:	f107 0308 	add.w	r3, r7, #8
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f00c fd4a 	bl	800ee4c <CDC_Transmit_FS>
}
 80023b8:	bf00      	nop
 80023ba:	3788      	adds	r7, #136	@ 0x88
 80023bc:	46bd      	mov	sp, r7
 80023be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80023c2:	b004      	add	sp, #16
 80023c4:	4770      	bx	lr
	...

080023c8 <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <transmitdma+0x28>)
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	461a      	mov	r2, r3
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	68f8      	ldr	r0, [r7, #12]
 80023e4:	f005 fc0c 	bl	8007c00 <HAL_SPI_Transmit_DMA>
}
 80023e8:	bf00      	nop
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	20000380 	.word	0x20000380

080023f4 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 80023f4:	b480      	push	{r7}
 80023f6:	b083      	sub	sp, #12
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a05      	ldr	r2, [pc, #20]	@ (8002418 <HAL_SPI_TxCpltCallback+0x24>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d102      	bne.n	800240c <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_SPI_TxCpltCallback+0x28>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
	}
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40013000 	.word	0x40013000
 800241c:	20000380 	.word	0x20000380

08002420 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 8002420:	b580      	push	{r7, lr}
 8002422:	b084      	sub	sp, #16
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	4613      	mov	r3, r2
 800242c:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 800242e:	79fb      	ldrb	r3, [r7, #7]
 8002430:	461a      	mov	r2, r3
 8002432:	68b9      	ldr	r1, [r7, #8]
 8002434:	68f8      	ldr	r0, [r7, #12]
 8002436:	f000 f805 	bl	8002444 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	4618      	mov	r0, r3
 800243e:	3710      	adds	r7, #16
 8002440:	46bd      	mov	sp, r7
 8002442:	bd80      	pop	{r7, pc}

08002444 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	4613      	mov	r3, r2
 8002450:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	68ba      	ldr	r2, [r7, #8]
 8002456:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	79fa      	ldrb	r2, [r7, #7]
 800245c:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	2201      	movs	r2, #1
 8002462:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2200      	movs	r2, #0
 8002468:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 800246a:	2300      	movs	r3, #0
 800246c:	617b      	str	r3, [r7, #20]
 800246e:	e014      	b.n	800249a <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	4413      	add	r3, r2
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f000 f9da 	bl	8002834 <_ZN13DisplayObject11getpriorityEv>
 8002480:	4603      	mov	r3, r0
 8002482:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	799b      	ldrb	r3, [r3, #6]
 8002488:	7cfa      	ldrb	r2, [r7, #19]
 800248a:	429a      	cmp	r2, r3
 800248c:	d902      	bls.n	8002494 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	7cfa      	ldrb	r2, [r7, #19]
 8002492:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	3301      	adds	r3, #1
 8002498:	617b      	str	r3, [r7, #20]
 800249a:	79fb      	ldrb	r3, [r7, #7]
 800249c:	697a      	ldr	r2, [r7, #20]
 800249e:	429a      	cmp	r2, r3
 80024a0:	dbe6      	blt.n	8002470 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80024a2:	bf00      	nop
 80024a4:	bf00      	nop
 80024a6:	3718      	adds	r7, #24
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bd80      	pop	{r7, pc}

080024ac <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80024b2:	b089      	sub	sp, #36	@ 0x24
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024ba:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024be:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80024c0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024c4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	795b      	ldrb	r3, [r3, #5]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	f000 813e 	beq.w	800274e <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80024d2:	f240 133f 	movw	r3, #319	@ 0x13f
 80024d6:	f240 12df 	movw	r2, #479	@ 0x1df
 80024da:	2100      	movs	r1, #0
 80024dc:	2000      	movs	r0, #0
 80024de:	f000 fd3c 	bl	8002f5a <modifySpace>
		startCommand(WRITE_COMMAND);
 80024e2:	202c      	movs	r0, #44	@ 0x2c
 80024e4:	f000 fc46 	bl	8002d74 <startCommand>
		dataOrRegister(1);
 80024e8:	2001      	movs	r0, #1
 80024ea:	f000 fc01 	bl	8002cf0 <dataOrRegister>
		uint8_t anychanges = 0;
 80024ee:	2300      	movs	r3, #0
 80024f0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024f4:	f102 021f 	add.w	r2, r2, #31
 80024f8:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 80024fa:	2300      	movs	r3, #0
 80024fc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002500:	f102 0218 	add.w	r2, r2, #24
 8002504:	6013      	str	r3, [r2, #0]
 8002506:	e028      	b.n	800255a <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 8002508:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800250c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002518:	f103 0318 	add.w	r3, r3, #24
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	4413      	add	r3, r2
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 f9a0 	bl	800286a <_ZN13DisplayObject13getChangeFlagEv>
 800252a:	4603      	mov	r3, r0
 800252c:	461a      	mov	r2, r3
 800252e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002532:	f103 031f 	add.w	r3, r3, #31
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	4413      	add	r3, r2
 800253a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800253e:	f102 021f 	add.w	r2, r2, #31
 8002542:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002544:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002548:	f103 0318 	add.w	r3, r3, #24
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	3301      	adds	r3, #1
 8002550:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002554:	f102 0218 	add.w	r2, r2, #24
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800255e:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	791b      	ldrb	r3, [r3, #4]
 8002566:	461a      	mov	r2, r3
 8002568:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800256c:	f103 0318 	add.w	r3, r3, #24
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4293      	cmp	r3, r2
 8002574:	dbc8      	blt.n	8002508 <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 8002576:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800257a:	f103 031f 	add.w	r3, r3, #31
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	f000 80ec 	beq.w	800275e <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002586:	2300      	movs	r3, #0
 8002588:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800258c:	f102 0214 	add.w	r2, r2, #20
 8002590:	6013      	str	r3, [r2, #0]
 8002592:	e0d2      	b.n	800273a <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 8002594:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002598:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 800259c:	4618      	mov	r0, r3
 800259e:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80025a2:	461a      	mov	r2, r3
 80025a4:	2100      	movs	r1, #0
 80025a6:	f00d fa1f 	bl	800f9e8 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80025aa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025ae:	f103 0314 	add.w	r3, r3, #20
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	4413      	add	r3, r2
 80025ba:	011b      	lsls	r3, r3, #4
 80025bc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025c0:	f102 0208 	add.w	r2, r2, #8
 80025c4:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025cc:	f102 0210 	add.w	r2, r2, #16
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e084      	b.n	80026de <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025da:	f102 020c 	add.w	r2, r2, #12
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	e064      	b.n	80026ac <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80025e2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025e6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681a      	ldr	r2, [r3, #0]
 80025ee:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025f2:	f103 030c 	add.w	r3, r3, #12
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f000 f918 	bl	8002834 <_ZN13DisplayObject11getpriorityEv>
 8002604:	4603      	mov	r3, r0
 8002606:	461a      	mov	r2, r3
 8002608:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800260c:	f103 0310 	add.w	r3, r3, #16
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4293      	cmp	r3, r2
 8002614:	bf0c      	ite	eq
 8002616:	2301      	moveq	r3, #1
 8002618:	2300      	movne	r3, #0
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	d03a      	beq.n	8002696 <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 8002620:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002624:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002630:	f103 030c 	add.w	r3, r3, #12
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	009b      	lsls	r3, r3, #2
 8002638:	4413      	add	r3, r2
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002640:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800264c:	f103 030c 	add.w	r3, r3, #12
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	4413      	add	r3, r2
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	3308      	adds	r3, #8
 800265c:	681c      	ldr	r4, [r3, #0]
 800265e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002662:	f103 0308 	add.w	r3, r3, #8
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	b29b      	uxth	r3, r3
 800266a:	f107 0120 	add.w	r1, r7, #32
 800266e:	3918      	subs	r1, #24
 8002670:	2250      	movs	r2, #80	@ 0x50
 8002672:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002674:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002678:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	681a      	ldr	r2, [r3, #0]
 8002680:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002684:	f103 030c 	add.w	r3, r3, #12
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	009b      	lsls	r3, r3, #2
 800268c:	4413      	add	r3, r2
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4618      	mov	r0, r3
 8002692:	f000 f87f 	bl	8002794 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 8002696:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800269a:	f103 030c 	add.w	r3, r3, #12
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	3301      	adds	r3, #1
 80026a2:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026a6:	f102 020c 	add.w	r2, r2, #12
 80026aa:	6013      	str	r3, [r2, #0]
 80026ac:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026b0:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	791b      	ldrb	r3, [r3, #4]
 80026b8:	461a      	mov	r2, r3
 80026ba:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026be:	f103 030c 	add.w	r3, r3, #12
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4293      	cmp	r3, r2
 80026c6:	db8c      	blt.n	80025e2 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80026c8:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026cc:	f103 0310 	add.w	r3, r3, #16
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	3301      	adds	r3, #1
 80026d4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80026d8:	f102 0210 	add.w	r2, r2, #16
 80026dc:	6013      	str	r3, [r2, #0]
 80026de:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80026e2:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	799b      	ldrb	r3, [r3, #6]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80026f0:	f103 0310 	add.w	r3, r3, #16
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4293      	cmp	r3, r2
 80026f8:	f77f af6c 	ble.w	80025d4 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 80026fc:	f107 0320 	add.w	r3, r7, #32
 8002700:	3b18      	subs	r3, #24
 8002702:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002706:	4619      	mov	r1, r3
 8002708:	4818      	ldr	r0, [pc, #96]	@ (800276c <_ZN5Scene9drawSceneEv+0x2c0>)
 800270a:	f7ff fe5d 	bl	80023c8 <transmitdma>
			while(!spidatasentflag) {}
 800270e:	bf00      	nop
 8002710:	4b17      	ldr	r3, [pc, #92]	@ (8002770 <_ZN5Scene9drawSceneEv+0x2c4>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b2db      	uxtb	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	bf0c      	ite	eq
 800271a:	2301      	moveq	r3, #1
 800271c:	2300      	movne	r3, #0
 800271e:	b2db      	uxtb	r3, r3
 8002720:	2b00      	cmp	r3, #0
 8002722:	d1f5      	bne.n	8002710 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002724:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002728:	f103 0314 	add.w	r3, r3, #20
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	3301      	adds	r3, #1
 8002730:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002734:	f102 0214 	add.w	r2, r2, #20
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800273e:	f103 0314 	add.w	r3, r3, #20
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	2b05      	cmp	r3, #5
 8002746:	f77f af25 	ble.w	8002594 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 800274a:	f000 fb29 	bl	8002da0 <endCommand>
	}
	this->changed = 0;
 800274e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002752:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	2200      	movs	r2, #0
 800275a:	715a      	strb	r2, [r3, #5]
 800275c:	e000      	b.n	8002760 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 800275e:	bf00      	nop
}
 8002760:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002764:	3724      	adds	r7, #36	@ 0x24
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}
 800276a:	bf00      	nop
 800276c:	200001c0 	.word	0x200001c0
 8002770:	20000380 	.word	0x20000380

08002774 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	4a04      	ldr	r2, [pc, #16]	@ (8002790 <_ZN13DisplayObjectD1Ev+0x1c>)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4618      	mov	r0, r3
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr
 8002790:	080104c8 	.word	0x080104c8

08002794 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	715a      	strb	r2, [r3, #5]
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80027ae:	b480      	push	{r7}
 80027b0:	b083      	sub	sp, #12
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	715a      	strb	r2, [r3, #5]
}
 80027bc:	bf00      	nop
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	88db      	ldrh	r3, [r3, #6]
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	370c      	adds	r7, #12
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr

080027e0 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	460b      	mov	r3, r1
 80027ea:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	887a      	ldrh	r2, [r7, #2]
 80027f0:	80da      	strh	r2, [r3, #6]
}
 80027f2:	bf00      	nop
 80027f4:	370c      	adds	r7, #12
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr

080027fe <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
	return this->ypos;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	891b      	ldrh	r3, [r3, #8]
}
 800280a:	4618      	mov	r0, r3
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr

08002816 <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 8002816:	b480      	push	{r7}
 8002818:	b083      	sub	sp, #12
 800281a:	af00      	add	r7, sp, #0
 800281c:	6078      	str	r0, [r7, #4]
 800281e:	460b      	mov	r3, r1
 8002820:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	887a      	ldrh	r2, [r7, #2]
 8002826:	811a      	strh	r2, [r3, #8]
}
 8002828:	bf00      	nop
 800282a:	370c      	adds	r7, #12
 800282c:	46bd      	mov	sp, r7
 800282e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002832:	4770      	bx	lr

08002834 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002834:	b480      	push	{r7}
 8002836:	b083      	sub	sp, #12
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
	return this->priority;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	791b      	ldrb	r3, [r3, #4]
}
 8002840:	4618      	mov	r0, r3
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	460b      	mov	r3, r1
 8002856:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	78fa      	ldrb	r2, [r7, #3]
 800285c:	711a      	strb	r2, [r3, #4]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr

0800286a <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 800286a:	b480      	push	{r7}
 800286c:	b083      	sub	sp, #12
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
	return this->changed;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	795b      	ldrb	r3, [r3, #5]
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	4a04      	ldr	r2, [pc, #16]	@ (80028a0 <_ZN13DisplayObjectC1Ev+0x1c>)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	4618      	mov	r0, r3
 8002896:	370c      	adds	r7, #12
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr
 80028a0:	080104c8 	.word	0x080104c8

080028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	60f8      	str	r0, [r7, #12]
 80028ac:	4608      	mov	r0, r1
 80028ae:	4611      	mov	r1, r2
 80028b0:	461a      	mov	r2, r3
 80028b2:	4603      	mov	r3, r0
 80028b4:	817b      	strh	r3, [r7, #10]
 80028b6:	460b      	mov	r3, r1
 80028b8:	813b      	strh	r3, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ffdf 	bl	8002884 <_ZN13DisplayObjectC1Ev>
 80028c6:	4a15      	ldr	r2, [pc, #84]	@ (800291c <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6a3a      	ldr	r2, [r7, #32]
 80028d0:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	897a      	ldrh	r2, [r7, #10]
 80028d6:	4611      	mov	r1, r2
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff ff81 	bl	80027e0 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	893a      	ldrh	r2, [r7, #8]
 80028e2:	4611      	mov	r1, r2
 80028e4:	4618      	mov	r0, r3
 80028e6:	f7ff ff96 	bl	8002816 <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	88fa      	ldrh	r2, [r7, #6]
 80028ee:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	7f3a      	ldrb	r2, [r7, #28]
 80028f4:	751a      	strb	r2, [r3, #20]
	this->font = font;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	69ba      	ldr	r2, [r7, #24]
 80028fa:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff ffa1 	bl	800284c <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	4618      	mov	r0, r3
 800290e:	f7ff ff4e 	bl	80027ae <_ZN13DisplayObject12redrawObjectEv>
}
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	080104b4 	.word	0x080104b4

08002920 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002924:	b08a      	sub	sp, #40	@ 0x28
 8002926:	af06      	add	r7, sp, #24
 8002928:	60f8      	str	r0, [r7, #12]
 800292a:	60b9      	str	r1, [r7, #8]
 800292c:	4611      	mov	r1, r2
 800292e:	461a      	mov	r2, r3
 8002930:	460b      	mov	r3, r1
 8002932:	80fb      	strh	r3, [r7, #6]
 8002934:	4613      	mov	r3, r2
 8002936:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68dc      	ldr	r4, [r3, #12]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	691d      	ldr	r5, [r3, #16]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	895e      	ldrh	r6, [r3, #10]
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff ff3e 	bl	80027c8 <_ZN13DisplayObject7getxposEv>
 800294c:	4603      	mov	r3, r0
 800294e:	4698      	mov	r8, r3
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff ff53 	bl	80027fe <_ZN13DisplayObject7getyposEv>
 8002958:	4603      	mov	r3, r0
 800295a:	4619      	mov	r1, r3
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	7d1b      	ldrb	r3, [r3, #20]
 8002960:	88ba      	ldrh	r2, [r7, #4]
 8002962:	9204      	str	r2, [sp, #16]
 8002964:	88fa      	ldrh	r2, [r7, #6]
 8002966:	9203      	str	r2, [sp, #12]
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	9202      	str	r2, [sp, #8]
 800296c:	9301      	str	r3, [sp, #4]
 800296e:	9100      	str	r1, [sp, #0]
 8002970:	4643      	mov	r3, r8
 8002972:	4632      	mov	r2, r6
 8002974:	4629      	mov	r1, r5
 8002976:	4620      	mov	r0, r4
 8002978:	f000 fdcc 	bl	8003514 <drawStringIntoFramebuffer>
 800297c:	4603      	mov	r3, r0
}
 800297e:	4618      	mov	r0, r3
 8002980:	3710      	adds	r7, #16
 8002982:	46bd      	mov	sp, r7
 8002984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b084      	sub	sp, #16
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	4611      	mov	r1, r2
 8002994:	461a      	mov	r2, r3
 8002996:	460b      	mov	r3, r1
 8002998:	71fb      	strb	r3, [r7, #7]
 800299a:	4613      	mov	r3, r2
 800299c:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	68ba      	ldr	r2, [r7, #8]
 80029a2:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	79fa      	ldrb	r2, [r7, #7]
 80029a8:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	88ba      	ldrh	r2, [r7, #4]
 80029ae:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	69ba      	ldr	r2, [r7, #24]
 80029b4:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	8bba      	ldrh	r2, [r7, #28]
 80029ba:	4611      	mov	r1, r2
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff0f 	bl	80027e0 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	8c3a      	ldrh	r2, [r7, #32]
 80029c6:	4611      	mov	r1, r2
 80029c8:	4618      	mov	r0, r3
 80029ca:	f7ff ff24 	bl	8002816 <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80029d4:	4611      	mov	r1, r2
 80029d6:	4618      	mov	r0, r3
 80029d8:	f7ff ff38 	bl	800284c <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7ff fee5 	bl	80027ae <_ZN13DisplayObject12redrawObjectEv>
}
 80029e4:	bf00      	nop
 80029e6:	3710      	adds	r7, #16
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <_ZN17OutlineRectObjectC1Ettttthh>:

/*
 * the following are all OutlineRectObject definitions
 */

OutlineRectObject::OutlineRectObject(uint16_t xpos, uint16_t ypos, uint16_t length, uint16_t height, uint16_t colorvalue, uint8_t positioning, uint8_t priority) {
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b084      	sub	sp, #16
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	4608      	mov	r0, r1
 80029f6:	4611      	mov	r1, r2
 80029f8:	461a      	mov	r2, r3
 80029fa:	4603      	mov	r3, r0
 80029fc:	817b      	strh	r3, [r7, #10]
 80029fe:	460b      	mov	r3, r1
 8002a00:	813b      	strh	r3, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7ff ff3b 	bl	8002884 <_ZN13DisplayObjectC1Ev>
 8002a0e:	4a16      	ldr	r2, [pc, #88]	@ (8002a68 <_ZN17OutlineRectObjectC1Ettttthh+0x7c>)
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	601a      	str	r2, [r3, #0]
	this->setxpos(xpos);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	897a      	ldrh	r2, [r7, #10]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f7ff fee0 	bl	80027e0 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	893a      	ldrh	r2, [r7, #8]
 8002a24:	4611      	mov	r1, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f7ff fef5 	bl	8002816 <_ZN13DisplayObject7setyposEt>
	this->length = length;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	88fa      	ldrh	r2, [r7, #6]
 8002a30:	819a      	strh	r2, [r3, #12]
	this->height = height;
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8b3a      	ldrh	r2, [r7, #24]
 8002a36:	81da      	strh	r2, [r3, #14]
	this->colorvalue = colorvalue;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	8bba      	ldrh	r2, [r7, #28]
 8002a3c:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a44:	741a      	strb	r2, [r3, #16]
	this->setpriority(priority);
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a4c:	4611      	mov	r1, r2
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fefc 	bl	800284c <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fea9 	bl	80027ae <_ZN13DisplayObject12redrawObjectEv>
}
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3710      	adds	r7, #16
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	080104a0 	.word	0x080104a0

08002a6c <_ZN17OutlineRectObject19drawIntoFramebufferEPttt>:

uint16_t OutlineRectObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002a6c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a6e:	b08b      	sub	sp, #44	@ 0x2c
 8002a70:	af06      	add	r7, sp, #24
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	60b9      	str	r1, [r7, #8]
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	80fb      	strh	r3, [r7, #6]
 8002a7e:	4613      	mov	r3, r2
 8002a80:	80bb      	strh	r3, [r7, #4]
	drawRectangleOutlineIntoFramebuffer(this->getxpos(), this->getypos(), this->length, this->height, this->colorvalue, this->positioning, framebuffer, framewidth, xstart);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7ff fe9f 	bl	80027c8 <_ZN13DisplayObject7getxposEv>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	461d      	mov	r5, r3
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	4618      	mov	r0, r3
 8002a92:	f7ff feb4 	bl	80027fe <_ZN13DisplayObject7getyposEv>
 8002a96:	4603      	mov	r3, r0
 8002a98:	461e      	mov	r6, r3
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8998      	ldrh	r0, [r3, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	89dc      	ldrh	r4, [r3, #14]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	895b      	ldrh	r3, [r3, #10]
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	7c12      	ldrb	r2, [r2, #16]
 8002aaa:	88b9      	ldrh	r1, [r7, #4]
 8002aac:	9104      	str	r1, [sp, #16]
 8002aae:	88f9      	ldrh	r1, [r7, #6]
 8002ab0:	9103      	str	r1, [sp, #12]
 8002ab2:	68b9      	ldr	r1, [r7, #8]
 8002ab4:	9102      	str	r1, [sp, #8]
 8002ab6:	9201      	str	r2, [sp, #4]
 8002ab8:	9300      	str	r3, [sp, #0]
 8002aba:	4623      	mov	r3, r4
 8002abc:	4602      	mov	r2, r0
 8002abe:	4631      	mov	r1, r6
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	f000 fb26 	bl	8003112 <drawRectangleOutlineIntoFramebuffer>
	return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3714      	adds	r7, #20
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002ad0 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af04      	add	r7, sp, #16
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	4611      	mov	r1, r2
 8002adc:	461a      	mov	r2, r3
 8002ade:	460b      	mov	r3, r1
 8002ae0:	80fb      	strh	r3, [r7, #6]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	80bb      	strh	r3, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f7ff fecb 	bl	8002884 <_ZN13DisplayObjectC1Ev>
 8002aee:	4a0c      	ldr	r2, [pc, #48]	@ (8002b20 <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002af4:	88b9      	ldrh	r1, [r7, #4]
 8002af6:	88fa      	ldrh	r2, [r7, #6]
 8002af8:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8002afc:	9303      	str	r3, [sp, #12]
 8002afe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b02:	9302      	str	r3, [sp, #8]
 8002b04:	8bbb      	ldrh	r3, [r7, #28]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	8b3b      	ldrh	r3, [r7, #24]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	68b9      	ldr	r1, [r7, #8]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	f000 f83b 	bl	8002b8c <_ZN11ImageObject11updateImageEPctttthh>
}
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	0801048c 	.word	0x0801048c

08002b24 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b28:	b08a      	sub	sp, #40	@ 0x28
 8002b2a:	af06      	add	r7, sp, #24
 8002b2c:	60f8      	str	r0, [r7, #12]
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	4611      	mov	r1, r2
 8002b32:	461a      	mov	r2, r3
 8002b34:	460b      	mov	r3, r1
 8002b36:	80fb      	strh	r3, [r7, #6]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	691c      	ldr	r4, [r3, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	895d      	ldrh	r5, [r3, #10]
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	899e      	ldrh	r6, [r3, #12]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f7ff fe3c 	bl	80027c8 <_ZN13DisplayObject7getxposEv>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4698      	mov	r8, r3
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7ff fe51 	bl	80027fe <_ZN13DisplayObject7getyposEv>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4619      	mov	r1, r3
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	7b9b      	ldrb	r3, [r3, #14]
 8002b64:	88ba      	ldrh	r2, [r7, #4]
 8002b66:	9204      	str	r2, [sp, #16]
 8002b68:	88fa      	ldrh	r2, [r7, #6]
 8002b6a:	9203      	str	r2, [sp, #12]
 8002b6c:	68ba      	ldr	r2, [r7, #8]
 8002b6e:	9202      	str	r2, [sp, #8]
 8002b70:	9301      	str	r3, [sp, #4]
 8002b72:	9100      	str	r1, [sp, #0]
 8002b74:	4643      	mov	r3, r8
 8002b76:	4632      	mov	r2, r6
 8002b78:	4629      	mov	r1, r5
 8002b7a:	4620      	mov	r0, r4
 8002b7c:	f000 fd42 	bl	8003604 <drawImageIntoFramebuffer>
	return 0;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08002b8c <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	4611      	mov	r1, r2
 8002b98:	461a      	mov	r2, r3
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	80fb      	strh	r3, [r7, #6]
 8002b9e:	4613      	mov	r3, r2
 8002ba0:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	8b3a      	ldrh	r2, [r7, #24]
 8002ba6:	4611      	mov	r1, r2
 8002ba8:	4618      	mov	r0, r3
 8002baa:	f7ff fe19 	bl	80027e0 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8bba      	ldrh	r2, [r7, #28]
 8002bb2:	4611      	mov	r1, r2
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fe2e 	bl	8002816 <_ZN13DisplayObject7setyposEt>
	this->image = image;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	611a      	str	r2, [r3, #16]
	this->length = length;
 8002bc0:	68fb      	ldr	r3, [r7, #12]
 8002bc2:	88fa      	ldrh	r2, [r7, #6]
 8002bc4:	815a      	strh	r2, [r3, #10]
	this->height = height;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	88ba      	ldrh	r2, [r7, #4]
 8002bca:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002bd2:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f7ff fe35 	bl	800284c <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fde2 	bl	80027ae <_ZN13DisplayObject12redrawObjectEv>
}
 8002bea:	bf00      	nop
 8002bec:	3710      	adds	r7, #16
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	4a05      	ldr	r2, [pc, #20]	@ (8002c14 <_ZN11ImageObjectD1Ev+0x20>)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4618      	mov	r0, r3
 8002c06:	f7ff fdb5 	bl	8002774 <_ZN13DisplayObjectD1Ev>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3708      	adds	r7, #8
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}
 8002c14:	0801048c 	.word	0x0801048c

08002c18 <_ZN11ImageObjectD0Ev>:
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ffe7 	bl	8002bf4 <_ZN11ImageObjectD1Ev>
 8002c26:	2114      	movs	r1, #20
 8002c28:	6878      	ldr	r0, [r7, #4]
 8002c2a:	f00c fd61 	bl	800f6f0 <_ZdlPvj>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4618      	mov	r0, r3
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}

08002c38 <_ZN17OutlineRectObjectD1Ev>:
class OutlineRectObject : public DisplayObject {
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
 8002c40:	4a05      	ldr	r2, [pc, #20]	@ (8002c58 <_ZN17OutlineRectObjectD1Ev+0x20>)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	601a      	str	r2, [r3, #0]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff fd93 	bl	8002774 <_ZN13DisplayObjectD1Ev>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4618      	mov	r0, r3
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	080104a0 	.word	0x080104a0

08002c5c <_ZN17OutlineRectObjectD0Ev>:
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f7ff ffe7 	bl	8002c38 <_ZN17OutlineRectObjectD1Ev>
 8002c6a:	2114      	movs	r1, #20
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f00c fd3f 	bl	800f6f0 <_ZdlPvj>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4618      	mov	r0, r3
 8002c76:	3708      	adds	r7, #8
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	bd80      	pop	{r7, pc}

08002c7c <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
 8002c84:	4a05      	ldr	r2, [pc, #20]	@ (8002c9c <_ZN12StringObjectD1Ev+0x20>)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	601a      	str	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff fd71 	bl	8002774 <_ZN13DisplayObjectD1Ev>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	4618      	mov	r0, r3
 8002c96:	3708      	adds	r7, #8
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	080104b4 	.word	0x080104b4

08002ca0 <_ZN12StringObjectD0Ev>:
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f7ff ffe7 	bl	8002c7c <_ZN12StringObjectD1Ev>
 8002cae:	2118      	movs	r1, #24
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f00c fd1d 	bl	800f6f0 <_ZdlPvj>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2108      	movs	r1, #8
 8002cc8:	4802      	ldr	r0, [pc, #8]	@ (8002cd4 <startTransaction+0x14>)
 8002cca:	f002 fc55 	bl	8005578 <HAL_GPIO_WritePin>
}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40020400 	.word	0x40020400

08002cd8 <endTransaction>:

void endTransaction() {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002cdc:	2201      	movs	r2, #1
 8002cde:	2108      	movs	r1, #8
 8002ce0:	4802      	ldr	r0, [pc, #8]	@ (8002cec <endTransaction+0x14>)
 8002ce2:	f002 fc49 	bl	8005578 <HAL_GPIO_WritePin>
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40020400 	.word	0x40020400

08002cf0 <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b082      	sub	sp, #8
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002cfa:	79fb      	ldrb	r3, [r7, #7]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d005      	beq.n	8002d0c <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002d00:	2201      	movs	r2, #1
 8002d02:	2110      	movs	r1, #16
 8002d04:	4806      	ldr	r0, [pc, #24]	@ (8002d20 <dataOrRegister+0x30>)
 8002d06:	f002 fc37 	bl	8005578 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002d0a:	e004      	b.n	8002d16 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	2110      	movs	r1, #16
 8002d10:	4803      	ldr	r0, [pc, #12]	@ (8002d20 <dataOrRegister+0x30>)
 8002d12:	f002 fc31 	bl	8005578 <HAL_GPIO_WritePin>
}
 8002d16:	bf00      	nop
 8002d18:	3708      	adds	r7, #8
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}
 8002d1e:	bf00      	nop
 8002d20:	40020400 	.word	0x40020400

08002d24 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b084      	sub	sp, #16
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	60b9      	str	r1, [r7, #8]
 8002d2e:	607a      	str	r2, [r7, #4]
 8002d30:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002d32:	f7ff ffc5 	bl	8002cc0 <startTransaction>

	dataOrRegister(0);
 8002d36:	2000      	movs	r0, #0
 8002d38:	f7ff ffda 	bl	8002cf0 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d3c:	f107 010e 	add.w	r1, r7, #14
 8002d40:	230a      	movs	r3, #10
 8002d42:	2201      	movs	r2, #1
 8002d44:	480a      	ldr	r0, [pc, #40]	@ (8002d70 <commandAndData+0x4c>)
 8002d46:	f004 fb54 	bl	80073f2 <HAL_SPI_Transmit>

	if (size) {
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d009      	beq.n	8002d64 <commandAndData+0x40>
		dataOrRegister(1);
 8002d50:	2001      	movs	r0, #1
 8002d52:	f7ff ffcd 	bl	8002cf0 <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	230a      	movs	r3, #10
 8002d5c:	68b9      	ldr	r1, [r7, #8]
 8002d5e:	4804      	ldr	r0, [pc, #16]	@ (8002d70 <commandAndData+0x4c>)
 8002d60:	f004 fb47 	bl	80073f2 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002d64:	f7ff ffb8 	bl	8002cd8 <endTransaction>
}
 8002d68:	bf00      	nop
 8002d6a:	3710      	adds	r7, #16
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200001c0 	.word	0x200001c0

08002d74 <startCommand>:

void startCommand(uint16_t command) {
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b082      	sub	sp, #8
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	4603      	mov	r3, r0
 8002d7c:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002d7e:	f7ff ff9f 	bl	8002cc0 <startTransaction>
	dataOrRegister(0);
 8002d82:	2000      	movs	r0, #0
 8002d84:	f7ff ffb4 	bl	8002cf0 <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002d88:	1db9      	adds	r1, r7, #6
 8002d8a:	230a      	movs	r3, #10
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	4803      	ldr	r0, [pc, #12]	@ (8002d9c <startCommand+0x28>)
 8002d90:	f004 fb2f 	bl	80073f2 <HAL_SPI_Transmit>
}
 8002d94:	bf00      	nop
 8002d96:	3708      	adds	r7, #8
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200001c0 	.word	0x200001c0

08002da0 <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	endTransaction();
 8002da4:	f7ff ff98 	bl	8002cd8 <endTransaction>
}
 8002da8:	bf00      	nop
 8002daa:	bd80      	pop	{r7, pc}

08002dac <resetScreen>:

void resetScreen() {
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002db0:	2201      	movs	r2, #1
 8002db2:	2120      	movs	r1, #32
 8002db4:	480b      	ldr	r0, [pc, #44]	@ (8002de4 <resetScreen+0x38>)
 8002db6:	f002 fbdf 	bl	8005578 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002dba:	2014      	movs	r0, #20
 8002dbc:	f001 fd90 	bl	80048e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	2120      	movs	r1, #32
 8002dc4:	4807      	ldr	r0, [pc, #28]	@ (8002de4 <resetScreen+0x38>)
 8002dc6:	f002 fbd7 	bl	8005578 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002dca:	2014      	movs	r0, #20
 8002dcc:	f001 fd88 	bl	80048e0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	2120      	movs	r1, #32
 8002dd4:	4803      	ldr	r0, [pc, #12]	@ (8002de4 <resetScreen+0x38>)
 8002dd6:	f002 fbcf 	bl	8005578 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002dda:	2064      	movs	r0, #100	@ 0x64
 8002ddc:	f001 fd80 	bl	80048e0 <HAL_Delay>
}
 8002de0:	bf00      	nop
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	40020400 	.word	0x40020400

08002de8 <initializeScreen>:

void initializeScreen() {
 8002de8:	b5b0      	push	{r4, r5, r7, lr}
 8002dea:	b09c      	sub	sp, #112	@ 0x70
 8002dec:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002dee:	2200      	movs	r2, #0
 8002df0:	2100      	movs	r1, #0
 8002df2:	2001      	movs	r0, #1
 8002df4:	f7ff ff96 	bl	8002d24 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002df8:	2200      	movs	r2, #0
 8002dfa:	2100      	movs	r1, #0
 8002dfc:	2011      	movs	r0, #17
 8002dfe:	f7ff ff91 	bl	8002d24 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002e02:	2355      	movs	r3, #85	@ 0x55
 8002e04:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002e08:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002e0c:	2202      	movs	r2, #2
 8002e0e:	4619      	mov	r1, r3
 8002e10:	203a      	movs	r0, #58	@ 0x3a
 8002e12:	f7ff ff87 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002e16:	4b47      	ldr	r3, [pc, #284]	@ (8002f34 <initializeScreen+0x14c>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002e1c:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002e20:	2204      	movs	r2, #4
 8002e22:	4619      	mov	r1, r3
 8002e24:	20c0      	movs	r0, #192	@ 0xc0
 8002e26:	f7ff ff7d 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002e2a:	2345      	movs	r3, #69	@ 0x45
 8002e2c:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002e30:	2300      	movs	r3, #0
 8002e32:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002e36:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002e3a:	2204      	movs	r2, #4
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	20c1      	movs	r0, #193	@ 0xc1
 8002e40:	f7ff ff70 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002e44:	2333      	movs	r3, #51	@ 0x33
 8002e46:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002e4a:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002e4e:	2202      	movs	r2, #2
 8002e50:	4619      	mov	r1, r3
 8002e52:	20c2      	movs	r0, #194	@ 0xc2
 8002e54:	f7ff ff66 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002e58:	2300      	movs	r3, #0
 8002e5a:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002e5e:	2328      	movs	r3, #40	@ 0x28
 8002e60:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002e64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002e68:	2204      	movs	r2, #4
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	20c5      	movs	r0, #197	@ 0xc5
 8002e6e:	f7ff ff59 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002e72:	4b31      	ldr	r3, [pc, #196]	@ (8002f38 <initializeScreen+0x150>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002e78:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	20b1      	movs	r0, #177	@ 0xb1
 8002e82:	f7ff ff4f 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002e86:	2302      	movs	r3, #2
 8002e88:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002e8c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002e90:	2202      	movs	r2, #2
 8002e92:	4619      	mov	r1, r3
 8002e94:	20b4      	movs	r0, #180	@ 0xb4
 8002e96:	f7ff ff45 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002e9a:	4a28      	ldr	r2, [pc, #160]	@ (8002f3c <initializeScreen+0x154>)
 8002e9c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002ea0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ea4:	6018      	str	r0, [r3, #0]
 8002ea6:	3304      	adds	r3, #4
 8002ea8:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002eaa:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002eae:	2206      	movs	r2, #6
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	20b6      	movs	r0, #182	@ 0xb6
 8002eb4:	f7ff ff36 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002eb8:	4b21      	ldr	r3, [pc, #132]	@ (8002f40 <initializeScreen+0x158>)
 8002eba:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002ebe:	461d      	mov	r5, r3
 8002ec0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ec2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ec4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002ec8:	c407      	stmia	r4!, {r0, r1, r2}
 8002eca:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002ecc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002ed0:	221e      	movs	r2, #30
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	20e0      	movs	r0, #224	@ 0xe0
 8002ed6:	f7ff ff25 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002eda:	4b1a      	ldr	r3, [pc, #104]	@ (8002f44 <initializeScreen+0x15c>)
 8002edc:	f107 040c 	add.w	r4, r7, #12
 8002ee0:	461d      	mov	r5, r3
 8002ee2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002ee4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002ee6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002eea:	c407      	stmia	r4!, {r0, r1, r2}
 8002eec:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002eee:	f107 030c 	add.w	r3, r7, #12
 8002ef2:	221e      	movs	r2, #30
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	20e1      	movs	r0, #225	@ 0xe1
 8002ef8:	f7ff ff14 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002efc:	2300      	movs	r3, #0
 8002efe:	813b      	strh	r3, [r7, #8]
 8002f00:	2322      	movs	r3, #34	@ 0x22
 8002f02:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002f04:	f107 0308 	add.w	r3, r7, #8
 8002f08:	2204      	movs	r2, #4
 8002f0a:	4619      	mov	r1, r3
 8002f0c:	20b6      	movs	r0, #182	@ 0xb6
 8002f0e:	f7ff ff09 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002f12:	2308      	movs	r3, #8
 8002f14:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002f16:	1d3b      	adds	r3, r7, #4
 8002f18:	2202      	movs	r2, #2
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	2036      	movs	r0, #54	@ 0x36
 8002f1e:	f7ff ff01 	bl	8002d24 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002f22:	2000      	movs	r0, #0
 8002f24:	f000 f85a 	bl	8002fdc <clearScreenfast>
	displayOn();
 8002f28:	f000 f80e 	bl	8002f48 <displayOn>
}
 8002f2c:	bf00      	nop
 8002f2e:	3770      	adds	r7, #112	@ 0x70
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bdb0      	pop	{r4, r5, r7, pc}
 8002f34:	08010338 	.word	0x08010338
 8002f38:	0801033c 	.word	0x0801033c
 8002f3c:	08010340 	.word	0x08010340
 8002f40:	08010348 	.word	0x08010348
 8002f44:	08010368 	.word	0x08010368

08002f48 <displayOn>:

void displayOn() {
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	2100      	movs	r1, #0
 8002f50:	2029      	movs	r0, #41	@ 0x29
 8002f52:	f7ff fee7 	bl	8002d24 <commandAndData>
}
 8002f56:	bf00      	nop
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002f5a:	b590      	push	{r4, r7, lr}
 8002f5c:	b087      	sub	sp, #28
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4604      	mov	r4, r0
 8002f62:	4608      	mov	r0, r1
 8002f64:	4611      	mov	r1, r2
 8002f66:	461a      	mov	r2, r3
 8002f68:	4623      	mov	r3, r4
 8002f6a:	80fb      	strh	r3, [r7, #6]
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	80bb      	strh	r3, [r7, #4]
 8002f70:	460b      	mov	r3, r1
 8002f72:	807b      	strh	r3, [r7, #2]
 8002f74:	4613      	mov	r3, r2
 8002f76:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002f78:	88bb      	ldrh	r3, [r7, #4]
 8002f7a:	0a1b      	lsrs	r3, r3, #8
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	823b      	strh	r3, [r7, #16]
 8002f80:	88bb      	ldrh	r3, [r7, #4]
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	b29b      	uxth	r3, r3
 8002f86:	827b      	strh	r3, [r7, #18]
 8002f88:	883b      	ldrh	r3, [r7, #0]
 8002f8a:	0a1b      	lsrs	r3, r3, #8
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	82bb      	strh	r3, [r7, #20]
 8002f90:	883b      	ldrh	r3, [r7, #0]
 8002f92:	b2db      	uxtb	r3, r3
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002f98:	f107 0310 	add.w	r3, r7, #16
 8002f9c:	2208      	movs	r2, #8
 8002f9e:	4619      	mov	r1, r3
 8002fa0:	202a      	movs	r0, #42	@ 0x2a
 8002fa2:	f7ff febf 	bl	8002d24 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002fa6:	88fb      	ldrh	r3, [r7, #6]
 8002fa8:	0a1b      	lsrs	r3, r3, #8
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	813b      	strh	r3, [r7, #8]
 8002fae:	88fb      	ldrh	r3, [r7, #6]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	b29b      	uxth	r3, r3
 8002fb4:	817b      	strh	r3, [r7, #10]
 8002fb6:	887b      	ldrh	r3, [r7, #2]
 8002fb8:	0a1b      	lsrs	r3, r3, #8
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	81bb      	strh	r3, [r7, #12]
 8002fbe:	887b      	ldrh	r3, [r7, #2]
 8002fc0:	b2db      	uxtb	r3, r3
 8002fc2:	b29b      	uxth	r3, r3
 8002fc4:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002fc6:	f107 0308 	add.w	r3, r7, #8
 8002fca:	2208      	movs	r2, #8
 8002fcc:	4619      	mov	r1, r3
 8002fce:	202b      	movs	r0, #43	@ 0x2b
 8002fd0:	f7ff fea8 	bl	8002d24 <commandAndData>
	}
}
 8002fd4:	bf00      	nop
 8002fd6:	371c      	adds	r7, #28
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd90      	pop	{r4, r7, pc}

08002fdc <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002fec:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002ff0:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002ff8:	f102 020c 	add.w	r2, r2, #12
 8002ffc:	6013      	str	r3, [r2, #0]
 8002ffe:	e01a      	b.n	8003036 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8003000:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8003004:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8003008:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800300c:	f102 020c 	add.w	r2, r2, #12
 8003010:	6812      	ldr	r2, [r2, #0]
 8003012:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8003016:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 800301a:	8809      	ldrh	r1, [r1, #0]
 800301c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8003020:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003024:	f103 030c 	add.w	r3, r3, #12
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	3301      	adds	r3, #1
 800302c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003030:	f102 020c 	add.w	r2, r2, #12
 8003034:	6013      	str	r3, [r2, #0]
 8003036:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800303a:	f103 030c 	add.w	r3, r3, #12
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8003044:	dbdc      	blt.n	8003000 <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8003046:	f240 133f 	movw	r3, #319	@ 0x13f
 800304a:	f240 12df 	movw	r2, #479	@ 0x1df
 800304e:	2100      	movs	r1, #0
 8003050:	2000      	movs	r0, #0
 8003052:	f7ff ff82 	bl	8002f5a <modifySpace>
	startCommand(0x2C);
 8003056:	202c      	movs	r0, #44	@ 0x2c
 8003058:	f7ff fe8c 	bl	8002d74 <startCommand>
	dataOrRegister(1);
 800305c:	2001      	movs	r0, #1
 800305e:	f7ff fe47 	bl	8002cf0 <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8003062:	2300      	movs	r3, #0
 8003064:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8003068:	f102 0208 	add.w	r2, r2, #8
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	e019      	b.n	80030a4 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8003070:	f107 0310 	add.w	r3, r7, #16
 8003074:	3b08      	subs	r3, #8
 8003076:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800307a:	4619      	mov	r1, r3
 800307c:	4811      	ldr	r0, [pc, #68]	@ (80030c4 <clearScreenfast+0xe8>)
 800307e:	f7ff f9a3 	bl	80023c8 <transmitdma>
		while (!spidatasentflag) {}
 8003082:	bf00      	nop
 8003084:	4b10      	ldr	r3, [pc, #64]	@ (80030c8 <clearScreenfast+0xec>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	b2db      	uxtb	r3, r3
 800308a:	2b00      	cmp	r3, #0
 800308c:	d0fa      	beq.n	8003084 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800308e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8003092:	f103 0308 	add.w	r3, r3, #8
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	3301      	adds	r3, #1
 800309a:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 800309e:	f102 0208 	add.w	r2, r2, #8
 80030a2:	6013      	str	r3, [r2, #0]
 80030a4:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80030a8:	f103 0308 	add.w	r3, r3, #8
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	ddde      	ble.n	8003070 <clearScreenfast+0x94>
	}
	endCommand();
 80030b2:	f7ff fe75 	bl	8002da0 <endCommand>
}
 80030b6:	bf00      	nop
 80030b8:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 80030bc:	3710      	adds	r7, #16
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	200001c0 	.word	0x200001c0
 80030c8:	20000380 	.word	0x20000380

080030cc <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	4611      	mov	r1, r2
 80030d8:	461a      	mov	r2, r3
 80030da:	460b      	mov	r3, r1
 80030dc:	80fb      	strh	r3, [r7, #6]
 80030de:	4613      	mov	r3, r2
 80030e0:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	881a      	ldrh	r2, [r3, #0]
 80030e6:	88fb      	ldrh	r3, [r7, #6]
 80030e8:	085b      	lsrs	r3, r3, #1
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	881a      	ldrh	r2, [r3, #0]
 80030f8:	88bb      	ldrh	r3, [r7, #4]
 80030fa:	085b      	lsrs	r3, r3, #1
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	1ad3      	subs	r3, r2, r3
 8003100:	b29a      	uxth	r2, r3
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	801a      	strh	r2, [r3, #0]
}
 8003106:	bf00      	nop
 8003108:	3714      	adds	r7, #20
 800310a:	46bd      	mov	sp, r7
 800310c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003110:	4770      	bx	lr

08003112 <drawRectangleOutlineIntoFramebuffer>:
	drawVLine(x1 + length, y1, height, color);
	drawHLine(x1, y1, length, color);
	drawHLine(x1, y1 + height, length, color);
}

void drawRectangleOutlineIntoFramebuffer(uint16_t x1, uint16_t y1, uint16_t length, uint16_t height, uint16_t color, uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003112:	b590      	push	{r4, r7, lr}
 8003114:	b085      	sub	sp, #20
 8003116:	af00      	add	r7, sp, #0
 8003118:	4604      	mov	r4, r0
 800311a:	4608      	mov	r0, r1
 800311c:	4611      	mov	r1, r2
 800311e:	461a      	mov	r2, r3
 8003120:	4623      	mov	r3, r4
 8003122:	80fb      	strh	r3, [r7, #6]
 8003124:	4603      	mov	r3, r0
 8003126:	80bb      	strh	r3, [r7, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	807b      	strh	r3, [r7, #2]
 800312c:	4613      	mov	r3, r2
 800312e:	803b      	strh	r3, [r7, #0]
	if (positioning & CENTER_OBJECT) {
 8003130:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <drawRectangleOutlineIntoFramebuffer+0x36>
		getRectCenter(&x1, &y1, length, height);
 800313c:	883b      	ldrh	r3, [r7, #0]
 800313e:	887a      	ldrh	r2, [r7, #2]
 8003140:	1d39      	adds	r1, r7, #4
 8003142:	1db8      	adds	r0, r7, #6
 8003144:	f7ff ffc2 	bl	80030cc <getRectCenter>
	}
	for (int x = x1; x < x1 + length; x++) {
 8003148:	88fb      	ldrh	r3, [r7, #6]
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	e09c      	b.n	8003288 <drawRectangleOutlineIntoFramebuffer+0x176>
		for (int y = y1; y < y1 + height; y++) {
 800314e:	88bb      	ldrh	r3, [r7, #4]
 8003150:	60bb      	str	r3, [r7, #8]
 8003152:	e08e      	b.n	8003272 <drawRectangleOutlineIntoFramebuffer+0x160>
			if ((x >= xstart) & (x < (xstart + framewidth))) {
 8003154:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	429a      	cmp	r2, r3
 800315a:	bfac      	ite	ge
 800315c:	2301      	movge	r3, #1
 800315e:	2300      	movlt	r3, #0
 8003160:	b2da      	uxtb	r2, r3
 8003162:	8e39      	ldrh	r1, [r7, #48]	@ 0x30
 8003164:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8003166:	440b      	add	r3, r1
 8003168:	68f9      	ldr	r1, [r7, #12]
 800316a:	4299      	cmp	r1, r3
 800316c:	bfb4      	ite	lt
 800316e:	2301      	movlt	r3, #1
 8003170:	2300      	movge	r3, #0
 8003172:	b2db      	uxtb	r3, r3
 8003174:	4013      	ands	r3, r2
 8003176:	b2db      	uxtb	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d077      	beq.n	800326c <drawRectangleOutlineIntoFramebuffer+0x15a>
				if ((x == x1) | (x == (x1 + length - 1))) {
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	461a      	mov	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4293      	cmp	r3, r2
 8003184:	bf0c      	ite	eq
 8003186:	2301      	moveq	r3, #1
 8003188:	2300      	movne	r3, #0
 800318a:	b2da      	uxtb	r2, r3
 800318c:	88fb      	ldrh	r3, [r7, #6]
 800318e:	4619      	mov	r1, r3
 8003190:	887b      	ldrh	r3, [r7, #2]
 8003192:	440b      	add	r3, r1
 8003194:	3b01      	subs	r3, #1
 8003196:	68f9      	ldr	r1, [r7, #12]
 8003198:	4299      	cmp	r1, r3
 800319a:	bf0c      	ite	eq
 800319c:	2301      	moveq	r3, #1
 800319e:	2300      	movne	r3, #0
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	4313      	orrs	r3, r2
 80031a4:	b2db      	uxtb	r3, r3
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d024      	beq.n	80031f4 <drawRectangleOutlineIntoFramebuffer+0xe2>
					if ((y >= y1) & (y < y1 + height)) {
 80031aa:	88bb      	ldrh	r3, [r7, #4]
 80031ac:	461a      	mov	r2, r3
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	4293      	cmp	r3, r2
 80031b2:	bfac      	ite	ge
 80031b4:	2301      	movge	r3, #1
 80031b6:	2300      	movlt	r3, #0
 80031b8:	b2da      	uxtb	r2, r3
 80031ba:	88bb      	ldrh	r3, [r7, #4]
 80031bc:	4619      	mov	r1, r3
 80031be:	883b      	ldrh	r3, [r7, #0]
 80031c0:	440b      	add	r3, r1
 80031c2:	68b9      	ldr	r1, [r7, #8]
 80031c4:	4299      	cmp	r1, r3
 80031c6:	bfb4      	ite	lt
 80031c8:	2301      	movlt	r3, #1
 80031ca:	2300      	movge	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	4013      	ands	r3, r2
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00e      	beq.n	80031f4 <drawRectangleOutlineIntoFramebuffer+0xe2>
							framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 80031d6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	1ad2      	subs	r2, r2, r3
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	019b      	lsls	r3, r3, #6
 80031e4:	461a      	mov	r2, r3
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	4413      	add	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80031ee:	4413      	add	r3, r2
 80031f0:	8c3a      	ldrh	r2, [r7, #32]
 80031f2:	801a      	strh	r2, [r3, #0]
					}
				}
				if ((y == y1) | (y == (y1 + height - 1))) {
 80031f4:	88bb      	ldrh	r3, [r7, #4]
 80031f6:	461a      	mov	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bf0c      	ite	eq
 80031fe:	2301      	moveq	r3, #1
 8003200:	2300      	movne	r3, #0
 8003202:	b2da      	uxtb	r2, r3
 8003204:	88bb      	ldrh	r3, [r7, #4]
 8003206:	4619      	mov	r1, r3
 8003208:	883b      	ldrh	r3, [r7, #0]
 800320a:	440b      	add	r3, r1
 800320c:	3b01      	subs	r3, #1
 800320e:	68b9      	ldr	r1, [r7, #8]
 8003210:	4299      	cmp	r1, r3
 8003212:	bf0c      	ite	eq
 8003214:	2301      	moveq	r3, #1
 8003216:	2300      	movne	r3, #0
 8003218:	b2db      	uxtb	r3, r3
 800321a:	4313      	orrs	r3, r2
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d024      	beq.n	800326c <drawRectangleOutlineIntoFramebuffer+0x15a>
					if ((x >= x1) & (x < (x1 + length))) {
 8003222:	88fb      	ldrh	r3, [r7, #6]
 8003224:	461a      	mov	r2, r3
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4293      	cmp	r3, r2
 800322a:	bfac      	ite	ge
 800322c:	2301      	movge	r3, #1
 800322e:	2300      	movlt	r3, #0
 8003230:	b2da      	uxtb	r2, r3
 8003232:	88fb      	ldrh	r3, [r7, #6]
 8003234:	4619      	mov	r1, r3
 8003236:	887b      	ldrh	r3, [r7, #2]
 8003238:	440b      	add	r3, r1
 800323a:	68f9      	ldr	r1, [r7, #12]
 800323c:	4299      	cmp	r1, r3
 800323e:	bfb4      	ite	lt
 8003240:	2301      	movlt	r3, #1
 8003242:	2300      	movge	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	4013      	ands	r3, r2
 8003248:	b2db      	uxtb	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00e      	beq.n	800326c <drawRectangleOutlineIntoFramebuffer+0x15a>
						framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
 800324e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8003250:	68fa      	ldr	r2, [r7, #12]
 8003252:	1ad2      	subs	r2, r2, r3
 8003254:	4613      	mov	r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	4413      	add	r3, r2
 800325a:	019b      	lsls	r3, r3, #6
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	4413      	add	r3, r2
 8003262:	005b      	lsls	r3, r3, #1
 8003264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003266:	4413      	add	r3, r2
 8003268:	8c3a      	ldrh	r2, [r7, #32]
 800326a:	801a      	strh	r2, [r3, #0]
		for (int y = y1; y < y1 + height; y++) {
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	3301      	adds	r3, #1
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	88bb      	ldrh	r3, [r7, #4]
 8003274:	461a      	mov	r2, r3
 8003276:	883b      	ldrh	r3, [r7, #0]
 8003278:	4413      	add	r3, r2
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	429a      	cmp	r2, r3
 800327e:	f6ff af69 	blt.w	8003154 <drawRectangleOutlineIntoFramebuffer+0x42>
	for (int x = x1; x < x1 + length; x++) {
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	3301      	adds	r3, #1
 8003286:	60fb      	str	r3, [r7, #12]
 8003288:	88fb      	ldrh	r3, [r7, #6]
 800328a:	461a      	mov	r2, r3
 800328c:	887b      	ldrh	r3, [r7, #2]
 800328e:	4413      	add	r3, r2
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	429a      	cmp	r2, r3
 8003294:	f6ff af5b 	blt.w	800314e <drawRectangleOutlineIntoFramebuffer+0x3c>
					}
				}
			}
		}
	}
}
 8003298:	bf00      	nop
 800329a:	bf00      	nop
 800329c:	3714      	adds	r7, #20
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd90      	pop	{r4, r7, pc}

080032a2 <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 80032a2:	b480      	push	{r7}
 80032a4:	b089      	sub	sp, #36	@ 0x24
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
 80032ae:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 80032b4:	2300      	movs	r3, #0
 80032b6:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 80032b8:	e015      	b.n	80032e6 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685a      	ldr	r2, [r3, #4]
 80032be:	69fb      	ldr	r3, [r7, #28]
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	4619      	mov	r1, r3
 80032c4:	460b      	mov	r3, r1
 80032c6:	009b      	lsls	r3, r3, #2
 80032c8:	440b      	add	r3, r1
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80032d0:	4413      	add	r3, r2
 80032d2:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 80032d4:	697b      	ldr	r3, [r7, #20]
 80032d6:	791b      	ldrb	r3, [r3, #4]
 80032d8:	461a      	mov	r2, r3
 80032da:	8b7b      	ldrh	r3, [r7, #26]
 80032dc:	4413      	add	r3, r2
 80032de:	837b      	strh	r3, [r7, #26]
		currentletter++;
 80032e0:	69fb      	ldr	r3, [r7, #28]
 80032e2:	3301      	adds	r3, #1
 80032e4:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	781b      	ldrb	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1e5      	bne.n	80032ba <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	881a      	ldrh	r2, [r3, #0]
 80032f2:	8b7b      	ldrh	r3, [r7, #26]
 80032f4:	085b      	lsrs	r3, r3, #1
 80032f6:	b29b      	uxth	r3, r3
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	b29a      	uxth	r2, r3
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003300:	bf00      	nop
 8003302:	3724      	adds	r7, #36	@ 0x24
 8003304:	46bd      	mov	sp, r7
 8003306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800330a:	4770      	bx	lr

0800330c <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 800330c:	b480      	push	{r7}
 800330e:	b089      	sub	sp, #36	@ 0x24
 8003310:	af00      	add	r7, sp, #0
 8003312:	60f8      	str	r0, [r7, #12]
 8003314:	60b9      	str	r1, [r7, #8]
 8003316:	607a      	str	r2, [r7, #4]
 8003318:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 800331e:	2300      	movs	r3, #0
 8003320:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8003322:	e015      	b.n	8003350 <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	4619      	mov	r1, r3
 800332e:	460b      	mov	r3, r1
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800333a:	4413      	add	r3, r2
 800333c:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 800333e:	697b      	ldr	r3, [r7, #20]
 8003340:	791b      	ldrb	r3, [r3, #4]
 8003342:	461a      	mov	r2, r3
 8003344:	8b7b      	ldrh	r3, [r7, #26]
 8003346:	4413      	add	r3, r2
 8003348:	837b      	strh	r3, [r7, #26]
		currentletter++;
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	3301      	adds	r3, #1
 800334e:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1e5      	bne.n	8003324 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	881a      	ldrh	r2, [r3, #0]
 800335c:	8b7b      	ldrh	r3, [r7, #26]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8003366:	bf00      	nop
 8003368:	3724      	adds	r7, #36	@ 0x24
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <getCharXadv>:
	}

	return (uint16_t)xadv;
}

uint16_t getCharXadv(char letter, const GFXfont *font) {
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	4603      	mov	r3, r0
 800337a:	6039      	str	r1, [r7, #0]
 800337c:	71fb      	strb	r3, [r7, #7]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 800337e:	683b      	ldr	r3, [r7, #0]
 8003380:	6859      	ldr	r1, [r3, #4]
 8003382:	79fa      	ldrb	r2, [r7, #7]
 8003384:	4613      	mov	r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	4413      	add	r3, r2
 800338a:	005b      	lsls	r3, r3, #1
 800338c:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8003390:	440b      	add	r3, r1
 8003392:	60fb      	str	r3, [r7, #12]
	return toDraw->xAdvance;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	791b      	ldrb	r3, [r3, #4]
}
 8003398:	4618      	mov	r0, r3
 800339a:	3714      	adds	r7, #20
 800339c:	46bd      	mov	sp, r7
 800339e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a2:	4770      	bx	lr

080033a4 <drawCharIntoFramebuffer>:

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 80033a4:	b480      	push	{r7}
 80033a6:	b08d      	sub	sp, #52	@ 0x34
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	4611      	mov	r1, r2
 80033ae:	461a      	mov	r2, r3
 80033b0:	4603      	mov	r3, r0
 80033b2:	73fb      	strb	r3, [r7, #15]
 80033b4:	460b      	mov	r3, r1
 80033b6:	81bb      	strh	r3, [r7, #12]
 80033b8:	4613      	mov	r3, r2
 80033ba:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	7bfa      	ldrb	r2, [r7, #15]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80033ce:	440b      	add	r3, r1
 80033d0:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 80033d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033d4:	789b      	ldrb	r3, [r3, #2]
 80033d6:	847b      	strh	r3, [r7, #34]	@ 0x22
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	78db      	ldrb	r3, [r3, #3]
 80033dc:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 80033de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 80033e4:	77fb      	strb	r3, [r7, #31]
 80033e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033e8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80033ec:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 80033ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f0:	791b      	ldrb	r3, [r3, #4]
 80033f2:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	881b      	ldrh	r3, [r3, #0]
 80033fe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 8003400:	2300      	movs	r3, #0
 8003402:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003406:	2300      	movs	r3, #0
 8003408:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 800340c:	2300      	movs	r3, #0
 800340e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003410:	e071      	b.n	80034f6 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 8003412:	2300      	movs	r3, #0
 8003414:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003416:	e062      	b.n	80034de <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003418:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 8003422:	f003 0307 	and.w	r3, r3, #7
 8003426:	2b00      	cmp	r3, #0
 8003428:	d108      	bne.n	800343c <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 800342a:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800342c:	1c5a      	adds	r2, r3, #1
 800342e:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 8003430:	461a      	mov	r2, r3
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	4413      	add	r3, r2
 8003436:	781b      	ldrb	r3, [r3, #0]
 8003438:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 800343c:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 8003440:	2b00      	cmp	r3, #0
 8003442:	da41      	bge.n	80034c8 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 8003444:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003448:	b29a      	uxth	r2, r3
 800344a:	88fb      	ldrh	r3, [r7, #6]
 800344c:	4413      	add	r3, r2
 800344e:	b29a      	uxth	r2, r3
 8003450:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8003454:	b29b      	uxth	r3, r3
 8003456:	1ad3      	subs	r3, r2, r3
 8003458:	b29a      	uxth	r2, r3
 800345a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 8003460:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8003462:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b29a      	uxth	r2, r3
 8003468:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800346c:	b29b      	uxth	r3, r3
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 8003472:	8afa      	ldrh	r2, [r7, #22]
 8003474:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8003478:	429a      	cmp	r2, r3
 800347a:	bf2c      	ite	cs
 800347c:	2301      	movcs	r3, #1
 800347e:	2300      	movcc	r3, #0
 8003480:	b2da      	uxtb	r2, r3
 8003482:	8af9      	ldrh	r1, [r7, #22]
 8003484:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 8003488:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 800348c:	4403      	add	r3, r0
 800348e:	4299      	cmp	r1, r3
 8003490:	bfb4      	ite	lt
 8003492:	2301      	movlt	r3, #1
 8003494:	2300      	movge	r3, #0
 8003496:	b2db      	uxtb	r3, r3
 8003498:	4013      	ands	r3, r2
 800349a:	b2db      	uxtb	r3, r3
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80034a0:	8abb      	ldrh	r3, [r7, #20]
 80034a2:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80034a6:	d20f      	bcs.n	80034c8 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80034a8:	8afa      	ldrh	r2, [r7, #22]
 80034aa:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80034ae:	1ad2      	subs	r2, r2, r3
 80034b0:	4613      	mov	r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	4413      	add	r3, r2
 80034b6:	019b      	lsls	r3, r3, #6
 80034b8:	461a      	mov	r2, r3
 80034ba:	8abb      	ldrh	r3, [r7, #20]
 80034bc:	4413      	add	r3, r2
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80034c2:	4413      	add	r3, r2
 80034c4:	89ba      	ldrh	r2, [r7, #12]
 80034c6:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 80034c8:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80034d2:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	3301      	adds	r3, #1
 80034da:	b29b      	uxth	r3, r3
 80034dc:	853b      	strh	r3, [r7, #40]	@ 0x28
 80034de:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 80034e2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 80034e6:	429a      	cmp	r2, r3
 80034e8:	db96      	blt.n	8003418 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 80034ea:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3301      	adds	r3, #1
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80034f6:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 80034fa:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80034fe:	429a      	cmp	r2, r3
 8003500:	db87      	blt.n	8003412 <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 8003502:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003506:	b29b      	uxth	r3, r3
}
 8003508:	4618      	mov	r0, r3
 800350a:	3734      	adds	r7, #52	@ 0x34
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003514:	b590      	push	{r4, r7, lr}
 8003516:	b08d      	sub	sp, #52	@ 0x34
 8003518:	af06      	add	r7, sp, #24
 800351a:	60f8      	str	r0, [r7, #12]
 800351c:	60b9      	str	r1, [r7, #8]
 800351e:	4611      	mov	r1, r2
 8003520:	461a      	mov	r2, r3
 8003522:	460b      	mov	r3, r1
 8003524:	80fb      	strh	r3, [r7, #6]
 8003526:	4613      	mov	r3, r2
 8003528:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 800352a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d007      	beq.n	8003546 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003536:	1d38      	adds	r0, r7, #4
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003540:	f7ff feaf 	bl	80032a2 <getStringCenter>
 8003544:	e00c      	b.n	8003560 <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003546:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	d006      	beq.n	8003560 <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 8003552:	1d38      	adds	r0, r7, #4
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	68fa      	ldr	r2, [r7, #12]
 8003558:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800355c:	f7ff fed6 	bl	800330c <getStringLeft>
	}
	uint16_t xAdvance = 0;
 8003560:	2300      	movs	r3, #0
 8003562:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 8003564:	2300      	movs	r3, #0
 8003566:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 8003568:	bf00      	nop
 800356a:	8abb      	ldrh	r3, [r7, #20]
 800356c:	3301      	adds	r3, #1
 800356e:	82bb      	strh	r3, [r7, #20]
 8003570:	8abb      	ldrh	r3, [r7, #20]
 8003572:	68fa      	ldr	r2, [r7, #12]
 8003574:	4413      	add	r3, r2
 8003576:	781b      	ldrb	r3, [r3, #0]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d1f6      	bne.n	800356a <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 800357c:	8abb      	ldrh	r3, [r7, #20]
 800357e:	3b01      	subs	r3, #1
 8003580:	613b      	str	r3, [r7, #16]
 8003582:	e036      	b.n	80035f2 <drawStringIntoFramebuffer+0xde>
		if ((stringxpos + xAdvance) > (xstart + framewidth)) {
 8003584:	88bb      	ldrh	r3, [r7, #4]
 8003586:	461a      	mov	r2, r3
 8003588:	8afb      	ldrh	r3, [r7, #22]
 800358a:	441a      	add	r2, r3
 800358c:	8f39      	ldrh	r1, [r7, #56]	@ 0x38
 800358e:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8003590:	440b      	add	r3, r1
 8003592:	429a      	cmp	r2, r3
 8003594:	dd0d      	ble.n	80035b2 <drawStringIntoFramebuffer+0x9e>
			xAdvance += getCharXadv(buffer[i], font);
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	68fa      	ldr	r2, [r7, #12]
 800359a:	4413      	add	r3, r2
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	68b9      	ldr	r1, [r7, #8]
 80035a0:	4618      	mov	r0, r3
 80035a2:	f7ff fee6 	bl	8003372 <getCharXadv>
 80035a6:	4603      	mov	r3, r0
 80035a8:	461a      	mov	r2, r3
 80035aa:	8afb      	ldrh	r3, [r7, #22]
 80035ac:	4413      	add	r3, r2
 80035ae:	82fb      	strh	r3, [r7, #22]
			break;
 80035b0:	e022      	b.n	80035f8 <drawStringIntoFramebuffer+0xe4>
		}
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4413      	add	r3, r2
 80035b8:	7818      	ldrb	r0, [r3, #0]
 80035ba:	88ba      	ldrh	r2, [r7, #4]
 80035bc:	8afb      	ldrh	r3, [r7, #22]
 80035be:	4413      	add	r3, r2
 80035c0:	b29c      	uxth	r4, r3
 80035c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80035c4:	88f9      	ldrh	r1, [r7, #6]
 80035c6:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80035c8:	9204      	str	r2, [sp, #16]
 80035ca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80035cc:	9203      	str	r2, [sp, #12]
 80035ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035d0:	9202      	str	r2, [sp, #8]
 80035d2:	2200      	movs	r2, #0
 80035d4:	9201      	str	r2, [sp, #4]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	4623      	mov	r3, r4
 80035da:	460a      	mov	r2, r1
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	f7ff fee1 	bl	80033a4 <drawCharIntoFramebuffer>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	8afb      	ldrh	r3, [r7, #22]
 80035e8:	4413      	add	r3, r2
 80035ea:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	3b01      	subs	r3, #1
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	dac5      	bge.n	8003584 <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	7b1b      	ldrb	r3, [r3, #12]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bd90      	pop	{r4, r7, pc}

08003604 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003604:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003608:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 800360c:	af00      	add	r7, sp, #0
 800360e:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 8003612:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 8003616:	6030      	str	r0, [r6, #0]
 8003618:	460e      	mov	r6, r1
 800361a:	4610      	mov	r0, r2
 800361c:	4619      	mov	r1, r3
 800361e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003622:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003626:	4632      	mov	r2, r6
 8003628:	801a      	strh	r2, [r3, #0]
 800362a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800362e:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003632:	4602      	mov	r2, r0
 8003634:	801a      	strh	r2, [r3, #0]
 8003636:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800363a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800363e:	460a      	mov	r2, r1
 8003640:	801a      	strh	r2, [r3, #0]
 8003642:	466b      	mov	r3, sp
 8003644:	469a      	mov	sl, r3
	length = 400;
 8003646:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800364a:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800364e:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003652:	801a      	strh	r2, [r3, #0]
	height = 215;
 8003654:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003658:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800365c:	22d7      	movs	r2, #215	@ 0xd7
 800365e:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 8003660:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003664:	f003 0302 	and.w	r3, r3, #2
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00f      	beq.n	800368c <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 800366c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003670:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003674:	8819      	ldrh	r1, [r3, #0]
 8003676:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800367a:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800367e:	881a      	ldrh	r2, [r3, #0]
 8003680:	1db8      	adds	r0, r7, #6
 8003682:	460b      	mov	r3, r1
 8003684:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8003688:	f7ff fd20 	bl	80030cc <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 800368c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003690:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003694:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003698:	2201      	movs	r2, #1
 800369a:	6819      	ldr	r1, [r3, #0]
 800369c:	f00a ff1a 	bl	800e4d4 <f_open>
 80036a0:	4603      	mov	r3, r0
 80036a2:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80036a6:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d103      	bne.n	80036b6 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80036ae:	487e      	ldr	r0, [pc, #504]	@ (80038a8 <drawImageIntoFramebuffer+0x2a4>)
 80036b0:	f7fe fe66 	bl	8002380 <USB_Println>
 80036b4:	e007      	b.n	80036c6 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 80036b6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036ba:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80036be:	6819      	ldr	r1, [r3, #0]
 80036c0:	487a      	ldr	r0, [pc, #488]	@ (80038ac <drawImageIntoFramebuffer+0x2a8>)
 80036c2:	f7fe fe5d 	bl	8002380 <USB_Println>
	}
	uint16_t readbuffer[height];
 80036c6:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80036ca:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80036ce:	881e      	ldrh	r6, [r3, #0]
 80036d0:	4633      	mov	r3, r6
 80036d2:	3b01      	subs	r3, #1
 80036d4:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80036d8:	b2b3      	uxth	r3, r6
 80036da:	2200      	movs	r2, #0
 80036dc:	4698      	mov	r8, r3
 80036de:	4691      	mov	r9, r2
 80036e0:	f04f 0200 	mov.w	r2, #0
 80036e4:	f04f 0300 	mov.w	r3, #0
 80036e8:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80036ec:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80036f0:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80036f4:	b2b3      	uxth	r3, r6
 80036f6:	2200      	movs	r2, #0
 80036f8:	461c      	mov	r4, r3
 80036fa:	4615      	mov	r5, r2
 80036fc:	f04f 0200 	mov.w	r2, #0
 8003700:	f04f 0300 	mov.w	r3, #0
 8003704:	012b      	lsls	r3, r5, #4
 8003706:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 800370a:	0122      	lsls	r2, r4, #4
 800370c:	4633      	mov	r3, r6
 800370e:	005b      	lsls	r3, r3, #1
 8003710:	3307      	adds	r3, #7
 8003712:	08db      	lsrs	r3, r3, #3
 8003714:	00db      	lsls	r3, r3, #3
 8003716:	ebad 0d03 	sub.w	sp, sp, r3
 800371a:	466b      	mov	r3, sp
 800371c:	3301      	adds	r3, #1
 800371e:	085b      	lsrs	r3, r3, #1
 8003720:	005b      	lsls	r3, r3, #1
 8003722:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 8003726:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800372a:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 8003732:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003736:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003740:	e093      	b.n	800386a <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 8003742:	4633      	mov	r3, r6
 8003744:	005a      	lsls	r2, r3, #1
 8003746:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800374a:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800374e:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 8003752:	f00b f879 	bl	800e848 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 8003756:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 800375a:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800375e:	429a      	cmp	r2, r3
 8003760:	bfac      	ite	ge
 8003762:	2301      	movge	r3, #1
 8003764:	2300      	movlt	r3, #0
 8003766:	b2da      	uxtb	r2, r3
 8003768:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 800376c:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003770:	440b      	add	r3, r1
 8003772:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8003776:	4299      	cmp	r1, r3
 8003778:	bfb4      	ite	lt
 800377a:	2301      	movlt	r3, #1
 800377c:	2300      	movge	r3, #0
 800377e:	b2db      	uxtb	r3, r3
 8003780:	4013      	ands	r3, r2
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b00      	cmp	r3, #0
 8003786:	d062      	beq.n	800384e <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 8003788:	2300      	movs	r3, #0
 800378a:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800378e:	e055      	b.n	800383c <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 8003790:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003794:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003798:	1ad2      	subs	r2, r2, r3
 800379a:	4613      	mov	r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	4413      	add	r3, r2
 80037a0:	019b      	lsls	r3, r3, #6
 80037a2:	461a      	mov	r2, r3
 80037a4:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80037a8:	4413      	add	r3, r2
 80037aa:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80037ae:	4413      	add	r3, r2
 80037b0:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 80037b4:	f107 0310 	add.w	r3, r7, #16
 80037b8:	220a      	movs	r2, #10
 80037ba:	4619      	mov	r1, r3
 80037bc:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 80037c0:	f00b ffd3 	bl	800f76a <itoa>
				strncat(whatbuffer, "\n", 10);
 80037c4:	f107 0310 	add.w	r3, r7, #16
 80037c8:	4618      	mov	r0, r3
 80037ca:	f7fc fd09 	bl	80001e0 <strlen>
 80037ce:	4603      	mov	r3, r0
 80037d0:	461a      	mov	r2, r3
 80037d2:	f107 0310 	add.w	r3, r7, #16
 80037d6:	4413      	add	r3, r2
 80037d8:	4935      	ldr	r1, [pc, #212]	@ (80038b0 <drawImageIntoFramebuffer+0x2ac>)
 80037da:	461a      	mov	r2, r3
 80037dc:	460b      	mov	r3, r1
 80037de:	881b      	ldrh	r3, [r3, #0]
 80037e0:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 80037e2:	f107 0310 	add.w	r3, r7, #16
 80037e6:	4618      	mov	r0, r3
 80037e8:	f7fc fcfa 	bl	80001e0 <strlen>
 80037ec:	4603      	mov	r3, r0
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	f107 0310 	add.w	r3, r7, #16
 80037f4:	4611      	mov	r1, r2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f00b fb28 	bl	800ee4c <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 80037fc:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003800:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003804:	1ad2      	subs	r2, r2, r3
 8003806:	4613      	mov	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	4413      	add	r3, r2
 800380c:	019b      	lsls	r3, r3, #6
 800380e:	461a      	mov	r2, r3
 8003810:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003814:	441a      	add	r2, r3
 8003816:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 800381a:	4413      	add	r3, r2
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 8003822:	4413      	add	r3, r2
 8003824:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8003828:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 800382c:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 8003830:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 8003832:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003836:	3301      	adds	r3, #1
 8003838:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800383c:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003840:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003844:	881b      	ldrh	r3, [r3, #0]
 8003846:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 800384a:	429a      	cmp	r2, r3
 800384c:	dba0      	blt.n	8003790 <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 800384e:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 8003852:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003856:	4413      	add	r3, r2
 8003858:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800385c:	429a      	cmp	r2, r3
 800385e:	dc16      	bgt.n	800388e <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 8003860:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003864:	3301      	adds	r3, #1
 8003866:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800386a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800386e:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003872:	881b      	ldrh	r3, [r3, #0]
 8003874:	461a      	mov	r2, r3
 8003876:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800387a:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800387e:	881b      	ldrh	r3, [r3, #0]
 8003880:	4413      	add	r3, r2
 8003882:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003886:	429a      	cmp	r2, r3
 8003888:	f6ff af5b 	blt.w	8003742 <drawImageIntoFramebuffer+0x13e>
 800388c:	e000      	b.n	8003890 <drawImageIntoFramebuffer+0x28c>
			break;
 800388e:	bf00      	nop
		}
	}
	f_close(&newfile);
 8003890:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003894:	4618      	mov	r0, r3
 8003896:	f00b f994 	bl	800ebc2 <f_close>
 800389a:	46d5      	mov	sp, sl
}
 800389c:	bf00      	nop
 800389e:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 80038a2:	46bd      	mov	sp, r7
 80038a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038a8:	08010398 	.word	0x08010398
 80038ac:	080103b4 	.word	0x080103b4
 80038b0:	080103c8 	.word	0x080103c8

080038b4 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af04      	add	r7, sp, #16
 80038ba:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 80038bc:	220a      	movs	r2, #10
 80038be:	490f      	ldr	r1, [pc, #60]	@ (80038fc <setrpmdata+0x48>)
 80038c0:	480f      	ldr	r0, [pc, #60]	@ (8003900 <setrpmdata+0x4c>)
 80038c2:	f00c f8ac 	bl	800fa1e <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80038c6:	220a      	movs	r2, #10
 80038c8:	6879      	ldr	r1, [r7, #4]
 80038ca:	480d      	ldr	r0, [pc, #52]	@ (8003900 <setrpmdata+0x4c>)
 80038cc:	f00c f894 	bl	800f9f8 <strncat>
	((StringObject*)otherobjects[0])->updateString(rpmresult, NO_CENTER_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 200, 260, 1);
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <setrpmdata+0x50>)
 80038d2:	6818      	ldr	r0, [r3, #0]
 80038d4:	2301      	movs	r3, #1
 80038d6:	9303      	str	r3, [sp, #12]
 80038d8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80038dc:	9302      	str	r3, [sp, #8]
 80038de:	23c8      	movs	r3, #200	@ 0xc8
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	4b09      	ldr	r3, [pc, #36]	@ (8003908 <setrpmdata+0x54>)
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80038ea:	2200      	movs	r2, #0
 80038ec:	4904      	ldr	r1, [pc, #16]	@ (8003900 <setrpmdata+0x4c>)
 80038ee:	f7ff f84b 	bl	8002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80038f2:	bf00      	nop
 80038f4:	3708      	adds	r7, #8
 80038f6:	46bd      	mov	sp, r7
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	bf00      	nop
 80038fc:	080103d8 	.word	0x080103d8
 8003900:	20000384 	.word	0x20000384
 8003904:	200003d4 	.word	0x200003d4
 8003908:	08013724 	.word	0x08013724

0800390c <settempdata>:

void settempdata(char *tempvalue) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b086      	sub	sp, #24
 8003910:	af04      	add	r7, sp, #16
 8003912:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003914:	220a      	movs	r2, #10
 8003916:	490f      	ldr	r1, [pc, #60]	@ (8003954 <settempdata+0x48>)
 8003918:	480f      	ldr	r0, [pc, #60]	@ (8003958 <settempdata+0x4c>)
 800391a:	f00c f880 	bl	800fa1e <strncpy>
	strncat(tempresult, tempvalue, 10);
 800391e:	220a      	movs	r2, #10
 8003920:	6879      	ldr	r1, [r7, #4]
 8003922:	480d      	ldr	r0, [pc, #52]	@ (8003958 <settempdata+0x4c>)
 8003924:	f00c f868 	bl	800f9f8 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 8003928:	4b0c      	ldr	r3, [pc, #48]	@ (800395c <settempdata+0x50>)
 800392a:	6858      	ldr	r0, [r3, #4]
 800392c:	2303      	movs	r3, #3
 800392e:	9303      	str	r3, [sp, #12]
 8003930:	2364      	movs	r3, #100	@ 0x64
 8003932:	9302      	str	r3, [sp, #8]
 8003934:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 8003938:	9301      	str	r3, [sp, #4]
 800393a:	4b09      	ldr	r3, [pc, #36]	@ (8003960 <settempdata+0x54>)
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003942:	2202      	movs	r2, #2
 8003944:	4904      	ldr	r1, [pc, #16]	@ (8003958 <settempdata+0x4c>)
 8003946:	f7ff f81f 	bl	8002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 800394a:	bf00      	nop
 800394c:	3708      	adds	r7, #8
 800394e:	46bd      	mov	sp, r7
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	080103d8 	.word	0x080103d8
 8003958:	20000398 	.word	0x20000398
 800395c:	200003d4 	.word	0x200003d4
 8003960:	080118cc 	.word	0x080118cc

08003964 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003964:	b580      	push	{r7, lr}
 8003966:	b086      	sub	sp, #24
 8003968:	af04      	add	r7, sp, #16
 800396a:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 800396c:	220a      	movs	r2, #10
 800396e:	490e      	ldr	r1, [pc, #56]	@ (80039a8 <setgeardata+0x44>)
 8003970:	480e      	ldr	r0, [pc, #56]	@ (80039ac <setgeardata+0x48>)
 8003972:	f00c f854 	bl	800fa1e <strncpy>
	strncat(gearresult, gearvalue, 10);
 8003976:	220a      	movs	r2, #10
 8003978:	6879      	ldr	r1, [r7, #4]
 800397a:	480c      	ldr	r0, [pc, #48]	@ (80039ac <setgeardata+0x48>)
 800397c:	f00c f83c 	bl	800f9f8 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 8003980:	4b0b      	ldr	r3, [pc, #44]	@ (80039b0 <setgeardata+0x4c>)
 8003982:	68d8      	ldr	r0, [r3, #12]
 8003984:	2302      	movs	r3, #2
 8003986:	9303      	str	r3, [sp, #12]
 8003988:	23f0      	movs	r3, #240	@ 0xf0
 800398a:	9302      	str	r3, [sp, #8]
 800398c:	2364      	movs	r3, #100	@ 0x64
 800398e:	9301      	str	r3, [sp, #4]
 8003990:	4b08      	ldr	r3, [pc, #32]	@ (80039b4 <setgeardata+0x50>)
 8003992:	9300      	str	r3, [sp, #0]
 8003994:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003998:	2202      	movs	r2, #2
 800399a:	4904      	ldr	r1, [pc, #16]	@ (80039ac <setgeardata+0x48>)
 800399c:	f7fe fff4 	bl	8002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039a0:	bf00      	nop
 80039a2:	3708      	adds	r7, #8
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	080103d8 	.word	0x080103d8
 80039ac:	2000000c 	.word	0x2000000c
 80039b0:	200003d4 	.word	0x200003d4
 80039b4:	08017b30 	.word	0x08017b30

080039b8 <setbattdata>:

void setbattdata(char *battvalue) {
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b086      	sub	sp, #24
 80039bc:	af04      	add	r7, sp, #16
 80039be:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80039c0:	220a      	movs	r2, #10
 80039c2:	490f      	ldr	r1, [pc, #60]	@ (8003a00 <setbattdata+0x48>)
 80039c4:	480f      	ldr	r0, [pc, #60]	@ (8003a04 <setbattdata+0x4c>)
 80039c6:	f00c f82a 	bl	800fa1e <strncpy>
	strncat(battresult, battvalue, 10);
 80039ca:	220a      	movs	r2, #10
 80039cc:	6879      	ldr	r1, [r7, #4]
 80039ce:	480d      	ldr	r0, [pc, #52]	@ (8003a04 <setbattdata+0x4c>)
 80039d0:	f00c f812 	bl	800f9f8 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 80039d4:	4b0c      	ldr	r3, [pc, #48]	@ (8003a08 <setbattdata+0x50>)
 80039d6:	6898      	ldr	r0, [r3, #8]
 80039d8:	2306      	movs	r3, #6
 80039da:	9303      	str	r3, [sp, #12]
 80039dc:	233c      	movs	r3, #60	@ 0x3c
 80039de:	9302      	str	r3, [sp, #8]
 80039e0:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	4b09      	ldr	r3, [pc, #36]	@ (8003a0c <setbattdata+0x54>)
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80039ee:	2202      	movs	r2, #2
 80039f0:	4904      	ldr	r1, [pc, #16]	@ (8003a04 <setbattdata+0x4c>)
 80039f2:	f7fe ffc9 	bl	8002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80039f6:	bf00      	nop
 80039f8:	3708      	adds	r7, #8
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	080103d8 	.word	0x080103d8
 8003a04:	200003c0 	.word	0x200003c0
 8003a08:	200003d4 	.word	0x200003d4
 8003a0c:	080118cc 	.word	0x080118cc

08003a10 <setspeeddata>:

void setspeeddata(char *speedvalue) {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af04      	add	r7, sp, #16
 8003a16:	6078      	str	r0, [r7, #4]
	strncpy(speedresult, "", 10);
 8003a18:	220a      	movs	r2, #10
 8003a1a:	490e      	ldr	r1, [pc, #56]	@ (8003a54 <setspeeddata+0x44>)
 8003a1c:	480e      	ldr	r0, [pc, #56]	@ (8003a58 <setspeeddata+0x48>)
 8003a1e:	f00b fffe 	bl	800fa1e <strncpy>
	strncat(speedresult, speedvalue, 10);
 8003a22:	220a      	movs	r2, #10
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	480c      	ldr	r0, [pc, #48]	@ (8003a58 <setspeeddata+0x48>)
 8003a28:	f00b ffe6 	bl	800f9f8 <strncat>
	((StringObject*)otherobjects[6])->updateString(speedresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 140, 55, 7);
 8003a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <setspeeddata+0x4c>)
 8003a2e:	6998      	ldr	r0, [r3, #24]
 8003a30:	2307      	movs	r3, #7
 8003a32:	9303      	str	r3, [sp, #12]
 8003a34:	2337      	movs	r3, #55	@ 0x37
 8003a36:	9302      	str	r3, [sp, #8]
 8003a38:	238c      	movs	r3, #140	@ 0x8c
 8003a3a:	9301      	str	r3, [sp, #4]
 8003a3c:	4b08      	ldr	r3, [pc, #32]	@ (8003a60 <setspeeddata+0x50>)
 8003a3e:	9300      	str	r3, [sp, #0]
 8003a40:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003a44:	2201      	movs	r2, #1
 8003a46:	4904      	ldr	r1, [pc, #16]	@ (8003a58 <setspeeddata+0x48>)
 8003a48:	f7fe ff9e 	bl	8002988 <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	080103d8 	.word	0x080103d8
 8003a58:	200003ac 	.word	0x200003ac
 8003a5c:	200003d4 	.word	0x200003d4
 8003a60:	080118cc 	.word	0x080118cc

08003a64 <domainscreen>:

void domainscreen() {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003a68:	4804      	ldr	r0, [pc, #16]	@ (8003a7c <domainscreen+0x18>)
 8003a6a:	f7fe fd1f 	bl	80024ac <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 9);
 8003a6e:	2209      	movs	r2, #9
 8003a70:	4903      	ldr	r1, [pc, #12]	@ (8003a80 <domainscreen+0x1c>)
 8003a72:	4802      	ldr	r0, [pc, #8]	@ (8003a7c <domainscreen+0x18>)
 8003a74:	f7fe fce6 	bl	8002444 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
<<<<<<< HEAD
 8003a78:	bf00      	nop
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	200003f8 	.word	0x200003f8
 8003a80:	200003d4 	.word	0x200003d4
=======
 8003a7c:	bf00      	nop
 8003a7e:	bd80      	pop	{r7, pc}
 8003a80:	200003fc 	.word	0x200003fc
 8003a84:	200003d4 	.word	0x200003d4
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

08003a84 <_Z41__static_initialization_and_destruction_0v>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 8003a84:	b590      	push	{r4, r7, lr}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af04      	add	r7, sp, #16
		new StringObject(200, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, NO_CENTER_OBJECT, rpmresult, 1),
 8003a8a:	2018      	movs	r0, #24
 8003a8c:	f00b fe32 	bl	800f6f4 <_Znwj>
 8003a90:	4603      	mov	r3, r0
 8003a92:	461c      	mov	r4, r3
 8003a94:	2301      	movs	r3, #1
 8003a96:	9303      	str	r3, [sp, #12]
 8003a98:	4b75      	ldr	r3, [pc, #468]	@ (8003c70 <_Z41__static_initialization_and_destruction_0v+0x1ec>)
 8003a9a:	9302      	str	r3, [sp, #8]
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	9301      	str	r3, [sp, #4]
 8003aa0:	4b74      	ldr	r3, [pc, #464]	@ (8003c74 <_Z41__static_initialization_and_destruction_0v+0x1f0>)
 8003aa2:	9300      	str	r3, [sp, #0]
 8003aa4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003aac:	21c8      	movs	r1, #200	@ 0xc8
 8003aae:	4620      	mov	r0, r4
 8003ab0:	f7fe fef8 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ab4:	4b70      	ldr	r3, [pc, #448]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003ab6:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 8003ab8:	2018      	movs	r0, #24
 8003aba:	f00b fe1b 	bl	800f6f4 <_Znwj>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	461c      	mov	r4, r3
 8003ac2:	2303      	movs	r3, #3
 8003ac4:	9303      	str	r3, [sp, #12]
 8003ac6:	4b6d      	ldr	r3, [pc, #436]	@ (8003c7c <_Z41__static_initialization_and_destruction_0v+0x1f8>)
 8003ac8:	9302      	str	r3, [sp, #8]
 8003aca:	2302      	movs	r3, #2
 8003acc:	9301      	str	r3, [sp, #4]
 8003ace:	4b6c      	ldr	r3, [pc, #432]	@ (8003c80 <_Z41__static_initialization_and_destruction_0v+0x1fc>)
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003ad6:	2264      	movs	r2, #100	@ 0x64
 8003ad8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003adc:	4620      	mov	r0, r4
 8003ade:	f7fe fee1 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003ae2:	4b65      	ldr	r3, [pc, #404]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003ae4:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 8003ae6:	2018      	movs	r0, #24
 8003ae8:	f00b fe04 	bl	800f6f4 <_Znwj>
 8003aec:	4603      	mov	r3, r0
 8003aee:	461c      	mov	r4, r3
 8003af0:	2306      	movs	r3, #6
 8003af2:	9303      	str	r3, [sp, #12]
 8003af4:	4b63      	ldr	r3, [pc, #396]	@ (8003c84 <_Z41__static_initialization_and_destruction_0v+0x200>)
 8003af6:	9302      	str	r3, [sp, #8]
 8003af8:	2302      	movs	r3, #2
 8003afa:	9301      	str	r3, [sp, #4]
 8003afc:	4b60      	ldr	r3, [pc, #384]	@ (8003c80 <_Z41__static_initialization_and_destruction_0v+0x1fc>)
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b04:	223c      	movs	r2, #60	@ 0x3c
 8003b06:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8003b0a:	4620      	mov	r0, r4
 8003b0c:	f7fe feca 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b10:	4b59      	ldr	r3, [pc, #356]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003b12:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 8003b14:	2018      	movs	r0, #24
 8003b16:	f00b fded 	bl	800f6f4 <_Znwj>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	461c      	mov	r4, r3
 8003b1e:	2302      	movs	r3, #2
 8003b20:	9303      	str	r3, [sp, #12]
 8003b22:	4b59      	ldr	r3, [pc, #356]	@ (8003c88 <_Z41__static_initialization_and_destruction_0v+0x204>)
 8003b24:	9302      	str	r3, [sp, #8]
 8003b26:	2302      	movs	r3, #2
 8003b28:	9301      	str	r3, [sp, #4]
 8003b2a:	4b58      	ldr	r3, [pc, #352]	@ (8003c8c <_Z41__static_initialization_and_destruction_0v+0x208>)
 8003b2c:	9300      	str	r3, [sp, #0]
 8003b2e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b32:	22f0      	movs	r2, #240	@ 0xf0
 8003b34:	2164      	movs	r1, #100	@ 0x64
 8003b36:	4620      	mov	r0, r4
 8003b38:	f7fe feb4 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b3c:	4b4e      	ldr	r3, [pc, #312]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003b3e:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003b40:	2018      	movs	r0, #24
 8003b42:	f00b fdd7 	bl	800f6f4 <_Znwj>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461c      	mov	r4, r3
 8003b4a:	2304      	movs	r3, #4
 8003b4c:	9303      	str	r3, [sp, #12]
 8003b4e:	4b50      	ldr	r3, [pc, #320]	@ (8003c90 <_Z41__static_initialization_and_destruction_0v+0x20c>)
 8003b50:	9302      	str	r3, [sp, #8]
 8003b52:	2302      	movs	r3, #2
 8003b54:	9301      	str	r3, [sp, #4]
 8003b56:	4b4f      	ldr	r3, [pc, #316]	@ (8003c94 <_Z41__static_initialization_and_destruction_0v+0x210>)
 8003b58:	9300      	str	r3, [sp, #0]
 8003b5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b5e:	2282      	movs	r2, #130	@ 0x82
 8003b60:	f240 118b 	movw	r1, #395	@ 0x18b
 8003b64:	4620      	mov	r0, r4
 8003b66:	f7fe fe9d 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b6a:	4b43      	ldr	r3, [pc, #268]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003b6c:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5),
 8003b6e:	2018      	movs	r0, #24
 8003b70:	f00b fdc0 	bl	800f6f4 <_Znwj>
 8003b74:	4603      	mov	r3, r0
 8003b76:	461c      	mov	r4, r3
 8003b78:	2305      	movs	r3, #5
 8003b7a:	9303      	str	r3, [sp, #12]
 8003b7c:	4b46      	ldr	r3, [pc, #280]	@ (8003c98 <_Z41__static_initialization_and_destruction_0v+0x214>)
 8003b7e:	9302      	str	r3, [sp, #8]
 8003b80:	2302      	movs	r3, #2
 8003b82:	9301      	str	r3, [sp, #4]
 8003b84:	4b43      	ldr	r3, [pc, #268]	@ (8003c94 <_Z41__static_initialization_and_destruction_0v+0x210>)
 8003b86:	9300      	str	r3, [sp, #0]
 8003b88:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003b8c:	225a      	movs	r2, #90	@ 0x5a
 8003b8e:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003b92:	4620      	mov	r0, r4
 8003b94:	f7fe fe86 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003b98:	4b37      	ldr	r3, [pc, #220]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003b9a:	615c      	str	r4, [r3, #20]
		new StringObject(140, 55, 0xFFFF, FREE_SANS_18PT7B, LEFTDRAW_OBJECT, speedresult, 7),
 8003b9c:	2018      	movs	r0, #24
 8003b9e:	f00b fda9 	bl	800f6f4 <_Znwj>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461c      	mov	r4, r3
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	9303      	str	r3, [sp, #12]
 8003baa:	4b3c      	ldr	r3, [pc, #240]	@ (8003c9c <_Z41__static_initialization_and_destruction_0v+0x218>)
 8003bac:	9302      	str	r3, [sp, #8]
 8003bae:	2301      	movs	r3, #1
 8003bb0:	9301      	str	r3, [sp, #4]
 8003bb2:	4b33      	ldr	r3, [pc, #204]	@ (8003c80 <_Z41__static_initialization_and_destruction_0v+0x1fc>)
 8003bb4:	9300      	str	r3, [sp, #0]
 8003bb6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003bba:	2237      	movs	r2, #55	@ 0x37
 8003bbc:	218c      	movs	r1, #140	@ 0x8c
 8003bbe:	4620      	mov	r0, r4
 8003bc0:	f7fe fe70 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003bc4:	4b2c      	ldr	r3, [pc, #176]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003bc6:	619c      	str	r4, [r3, #24]
		new StringObject(440, 288, 0xFFFF, ICONFONT, LEFTDRAW_OBJECT, rpmicon, 8),
 8003bc8:	2018      	movs	r0, #24
 8003bca:	f00b fd93 	bl	800f6f4 <_Znwj>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	461c      	mov	r4, r3
 8003bd2:	2308      	movs	r3, #8
 8003bd4:	9303      	str	r3, [sp, #12]
 8003bd6:	4b32      	ldr	r3, [pc, #200]	@ (8003ca0 <_Z41__static_initialization_and_destruction_0v+0x21c>)
 8003bd8:	9302      	str	r3, [sp, #8]
 8003bda:	2301      	movs	r3, #1
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	4b2d      	ldr	r3, [pc, #180]	@ (8003c94 <_Z41__static_initialization_and_destruction_0v+0x210>)
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003be6:	f44f 7290 	mov.w	r2, #288	@ 0x120
 8003bea:	f44f 71dc 	mov.w	r1, #440	@ 0x1b8
 8003bee:	4620      	mov	r0, r4
 8003bf0:	f7fe fe58 	bl	80028a4 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
<<<<<<< HEAD
 8003bf4:	4b20      	ldr	r3, [pc, #128]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003bf6:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9)
 8003bf8:	2014      	movs	r0, #20
 8003bfa:	f00b fd7b 	bl	800f6f4 <_Znwj>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	461c      	mov	r4, r3
 8003c02:	2309      	movs	r3, #9
 8003c04:	9303      	str	r3, [sp, #12]
 8003c06:	2300      	movs	r3, #0
 8003c08:	9302      	str	r3, [sp, #8]
 8003c0a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c0e:	9301      	str	r3, [sp, #4]
 8003c10:	2337      	movs	r3, #55	@ 0x37
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c18:	22fa      	movs	r2, #250	@ 0xfa
 8003c1a:	21be      	movs	r1, #190	@ 0xbe
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	f7fe fee5 	bl	80029ec <_ZN17OutlineRectObjectC1Ettttthh>
=======
 8003c10:	4b20      	ldr	r3, [pc, #128]	@ (8003c94 <_Z41__static_initialization_and_destruction_0ii+0x20c>)
 8003c12:	61dc      	str	r4, [r3, #28]
		new OutlineRectObject(190, 250, 260, 55, 0xFFFF, NO_CENTER_OBJECT, 9),
 8003c14:	2014      	movs	r0, #20
 8003c16:	f00b fd7b 	bl	800f710 <_Znwj>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	461c      	mov	r4, r3
 8003c1e:	2309      	movs	r3, #9
 8003c20:	9303      	str	r3, [sp, #12]
 8003c22:	2300      	movs	r3, #0
 8003c24:	9302      	str	r3, [sp, #8]
 8003c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003c2a:	9301      	str	r3, [sp, #4]
 8003c2c:	2337      	movs	r3, #55	@ 0x37
 8003c2e:	9300      	str	r3, [sp, #0]
 8003c30:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8003c34:	22fa      	movs	r2, #250	@ 0xfa
 8003c36:	21be      	movs	r1, #190	@ 0xbe
 8003c38:	4620      	mov	r0, r4
 8003c3a:	f7fe fed9 	bl	80029f0 <_ZN17OutlineRectObjectC1Ettttthh>
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37
};
 8003c22:	4b15      	ldr	r3, [pc, #84]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003c24:	621c      	str	r4, [r3, #32]
Scene myScene2(otherobjects, 6);
 8003c26:	2206      	movs	r2, #6
 8003c28:	4913      	ldr	r1, [pc, #76]	@ (8003c78 <_Z41__static_initialization_and_destruction_0v+0x1f4>)
 8003c2a:	481e      	ldr	r0, [pc, #120]	@ (8003ca4 <_Z41__static_initialization_and_destruction_0v+0x220>)
 8003c2c:	f7fe fbf8 	bl	8002420 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003c30:	2014      	movs	r0, #20
 8003c32:	f00b fd5f 	bl	800f6f4 <_Znwj>
 8003c36:	4603      	mov	r3, r0
 8003c38:	461c      	mov	r4, r3
 8003c3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003ca8 <_Z41__static_initialization_and_destruction_0v+0x224>)
 8003c3c:	6819      	ldr	r1, [r3, #0]
 8003c3e:	2302      	movs	r3, #2
 8003c40:	9303      	str	r3, [sp, #12]
 8003c42:	2302      	movs	r3, #2
 8003c44:	9302      	str	r3, [sp, #8]
 8003c46:	23a0      	movs	r3, #160	@ 0xa0
 8003c48:	9301      	str	r3, [sp, #4]
 8003c4a:	23f0      	movs	r3, #240	@ 0xf0
 8003c4c:	9300      	str	r3, [sp, #0]
 8003c4e:	23d7      	movs	r3, #215	@ 0xd7
 8003c50:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8003c54:	4620      	mov	r0, r4
 8003c56:	f7fe ff3b 	bl	8002ad0 <_ZN11ImageObjectC1EPctttthh>
};
 8003c5a:	4b14      	ldr	r3, [pc, #80]	@ (8003cac <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003c5c:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003c5e:	2201      	movs	r2, #1
 8003c60:	4912      	ldr	r1, [pc, #72]	@ (8003cac <_Z41__static_initialization_and_destruction_0v+0x228>)
 8003c62:	4813      	ldr	r0, [pc, #76]	@ (8003cb0 <_Z41__static_initialization_and_destruction_0v+0x22c>)
 8003c64:	f7fe fbdc 	bl	8002420 <_ZN5SceneC1EPP13DisplayObjecth>
}
<<<<<<< HEAD
 8003c68:	bf00      	nop
 8003c6a:	3704      	adds	r7, #4
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd90      	pop	{r4, r7, pc}
 8003c70:	20000384 	.word	0x20000384
 8003c74:	08013724 	.word	0x08013724
 8003c78:	200003d4 	.word	0x200003d4
 8003c7c:	20000398 	.word	0x20000398
 8003c80:	080118cc 	.word	0x080118cc
 8003c84:	200003c0 	.word	0x200003c0
 8003c88:	2000000c 	.word	0x2000000c
 8003c8c:	08017b30 	.word	0x08017b30
 8003c90:	20000020 	.word	0x20000020
 8003c94:	08017e40 	.word	0x08017e40
 8003c98:	20000024 	.word	0x20000024
 8003c9c:	200003ac 	.word	0x200003ac
 8003ca0:	20000008 	.word	0x20000008
 8003ca4:	200003f8 	.word	0x200003f8
 8003ca8:	20000028 	.word	0x20000028
 8003cac:	20000400 	.word	0x20000400
 8003cb0:	20000404 	.word	0x20000404
=======
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd90      	pop	{r4, r7, pc}
 8003c8c:	20000384 	.word	0x20000384
 8003c90:	08013754 	.word	0x08013754
 8003c94:	200003d4 	.word	0x200003d4
 8003c98:	20000398 	.word	0x20000398
 8003c9c:	080118fc 	.word	0x080118fc
 8003ca0:	200003c0 	.word	0x200003c0
 8003ca4:	2000000c 	.word	0x2000000c
 8003ca8:	08017b60 	.word	0x08017b60
 8003cac:	20000020 	.word	0x20000020
 8003cb0:	08017df4 	.word	0x08017df4
 8003cb4:	20000024 	.word	0x20000024
 8003cb8:	200003ac 	.word	0x200003ac
 8003cbc:	20000008 	.word	0x20000008
 8003cc0:	200003fc 	.word	0x200003fc
 8003cc4:	20000028 	.word	0x20000028
 8003cc8:	20000404 	.word	0x20000404
 8003ccc:	20000408 	.word	0x20000408
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

08003cb4 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	af00      	add	r7, sp, #0
 8003cb8:	f7ff fee4 	bl	8003a84 <_Z41__static_initialization_and_destruction_0v>
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 8003cbe:	b580      	push	{r7, lr}
 8003cc0:	b084      	sub	sp, #16
 8003cc2:	af00      	add	r7, sp, #0
 8003cc4:	60f8      	str	r0, [r7, #12]
 8003cc6:	60b9      	str	r1, [r7, #8]
 8003cc8:	607a      	str	r2, [r7, #4]
 8003cca:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	683a      	ldr	r2, [r7, #0]
 8003cd0:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	7e3a      	ldrb	r2, [r7, #24]
 8003cd6:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	687a      	ldr	r2, [r7, #4]
 8003ce2:	605a      	str	r2, [r3, #4]
    endSPI();
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f839 	bl	8003d5c <_ZN7MCP25156endSPIEv>
}
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4618      	mov	r0, r3
 8003cee:	3710      	adds	r7, #16
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}

08003cf4 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b082      	sub	sp, #8
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6818      	ldr	r0, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	1cf9      	adds	r1, r7, #3
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f003 fb71 	bl	80073f2 <HAL_SPI_Transmit>
}
 8003d10:	bf00      	nop
 8003d12:	3708      	adds	r7, #8
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f107 010f 	add.w	r1, r7, #15
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	f003 fca4 	bl	800767a <HAL_SPI_Receive>
	return retVal;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3710      	adds	r7, #16
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}

08003d3c <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6898      	ldr	r0, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	7b1b      	ldrb	r3, [r3, #12]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	4619      	mov	r1, r3
 8003d50:	f001 fc12 	bl	8005578 <HAL_GPIO_WritePin>
}
 8003d54:	bf00      	nop
 8003d56:	3708      	adds	r7, #8
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b082      	sub	sp, #8
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6898      	ldr	r0, [r3, #8]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	7b1b      	ldrb	r3, [r3, #12]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	4619      	mov	r1, r3
 8003d70:	f001 fc02 	bl	8005578 <HAL_GPIO_WritePin>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}

08003d7c <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08c      	sub	sp, #48	@ 0x30
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
	startSPI();
 8003d84:	6878      	ldr	r0, [r7, #4]
 8003d86:	f7ff ffd9 	bl	8003d3c <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 8003d8a:	21c0      	movs	r1, #192	@ 0xc0
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f7ff ffb1 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 8003d92:	6878      	ldr	r0, [r7, #4]
 8003d94:	f7ff ffe2 	bl	8003d5c <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 8003d98:	f107 0314 	add.w	r3, r7, #20
 8003d9c:	220e      	movs	r2, #14
 8003d9e:	2100      	movs	r1, #0
 8003da0:	4618      	mov	r0, r3
 8003da2:	f00b fe21 	bl	800f9e8 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 8003da6:	f107 0214 	add.w	r2, r7, #20
 8003daa:	230e      	movs	r3, #14
 8003dac:	2130      	movs	r1, #48	@ 0x30
 8003dae:	6878      	ldr	r0, [r7, #4]
 8003db0:	f000 f8ec 	bl	8003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 8003db4:	f107 0214 	add.w	r2, r7, #20
 8003db8:	230e      	movs	r3, #14
 8003dba:	2140      	movs	r1, #64	@ 0x40
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f000 f8e5 	bl	8003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 8003dc2:	f107 0214 	add.w	r2, r7, #20
 8003dc6:	230e      	movs	r3, #14
 8003dc8:	2150      	movs	r1, #80	@ 0x50
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	f000 f8de 	bl	8003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2160      	movs	r1, #96	@ 0x60
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 f8b9 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 8003dda:	2200      	movs	r2, #0
 8003ddc:	2170      	movs	r1, #112	@ 0x70
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f8b4 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003de4:	22a3      	movs	r2, #163	@ 0xa3
 8003de6:	212b      	movs	r1, #43	@ 0x2b
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8af 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 8003dee:	2304      	movs	r3, #4
 8003df0:	2267      	movs	r2, #103	@ 0x67
 8003df2:	2160      	movs	r1, #96	@ 0x60
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f000 f8f8 	bl	8003fea <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	2267      	movs	r2, #103	@ 0x67
 8003dfe:	2170      	movs	r1, #112	@ 0x70
 8003e00:	6878      	ldr	r0, [r7, #4]
 8003e02:	f000 f8f2 	bl	8003fea <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003e06:	4a29      	ldr	r2, [pc, #164]	@ (8003eac <_ZN7MCP25155resetEv+0x130>)
 8003e08:	f107 030c 	add.w	r3, r7, #12
 8003e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003e10:	6018      	str	r0, [r3, #0]
 8003e12:	3304      	adds	r3, #4
 8003e14:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003e16:	2300      	movs	r3, #0
 8003e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e1a:	e01e      	b.n	8003e5a <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 8003e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	bf0c      	ite	eq
 8003e22:	2301      	moveq	r3, #1
 8003e24:	2300      	movne	r3, #0
 8003e26:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 8003e2a:	f107 020c 	add.w	r2, r7, #12
 8003e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e30:	4413      	add	r3, r2
 8003e32:	7819      	ldrb	r1, [r3, #0]
 8003e34:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003e38:	2300      	movs	r3, #0
 8003e3a:	6878      	ldr	r0, [r7, #4]
 8003e3c:	f000 fbce 	bl	80045dc <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003e40:	4603      	mov	r3, r0
 8003e42:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003e46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d002      	beq.n	8003e54 <_ZN7MCP25155resetEv+0xd8>
            return result;
 8003e4e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003e52:	e027      	b.n	8003ea4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003e54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e56:	3301      	adds	r3, #1
 8003e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003e5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e5c:	2b05      	cmp	r3, #5
 8003e5e:	dddd      	ble.n	8003e1c <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003e60:	2300      	movs	r3, #0
 8003e62:	723b      	strb	r3, [r7, #8]
 8003e64:	2301      	movs	r3, #1
 8003e66:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003e68:	2300      	movs	r3, #0
 8003e6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e6c:	e016      	b.n	8003e9c <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 8003e6e:	f107 0208 	add.w	r2, r7, #8
 8003e72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e74:	4413      	add	r3, r2
 8003e76:	7819      	ldrb	r1, [r3, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 fb79 	bl	8004574 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 8003e82:	4603      	mov	r3, r0
 8003e84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 8003e88:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d002      	beq.n	8003e96 <_ZN7MCP25155resetEv+0x11a>
            return result;
 8003e90:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003e94:	e006      	b.n	8003ea4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 8003e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e98:	3301      	adds	r3, #1
 8003e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	dde5      	ble.n	8003e6e <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 8003ea2:	2300      	movs	r3, #0
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3730      	adds	r7, #48	@ 0x30
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	080103dc 	.word	0x080103dc

08003eb0 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	460b      	mov	r3, r1
 8003eba:	70fb      	strb	r3, [r7, #3]
    startSPI();
 8003ebc:	6878      	ldr	r0, [r7, #4]
 8003ebe:	f7ff ff3d 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003ec2:	2103      	movs	r1, #3
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f7ff ff15 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	4619      	mov	r1, r3
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	f7ff ff10 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff ff1f 	bl	8003d18 <_ZN7MCP25156SPI_RxEv>
 8003eda:	4603      	mov	r3, r0
 8003edc:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f7ff ff3c 	bl	8003d5c <_ZN7MCP25156endSPIEv>

    return ret;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003eee:	b590      	push	{r4, r7, lr}
 8003ef0:	b087      	sub	sp, #28
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	461a      	mov	r2, r3
 8003efa:	460b      	mov	r3, r1
 8003efc:	72fb      	strb	r3, [r7, #11]
 8003efe:	4613      	mov	r3, r2
 8003f00:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003f02:	68f8      	ldr	r0, [r7, #12]
 8003f04:	f7ff ff1a 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003f08:	2103      	movs	r1, #3
 8003f0a:	68f8      	ldr	r0, [r7, #12]
 8003f0c:	f7ff fef2 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f10:	7afb      	ldrb	r3, [r7, #11]
 8003f12:	4619      	mov	r1, r3
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f7ff feed 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	75fb      	strb	r3, [r7, #23]
 8003f1e:	e00a      	b.n	8003f36 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	18d4      	adds	r4, r2, r3
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	f7ff fef6 	bl	8003d18 <_ZN7MCP25156SPI_RxEv>
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003f30:	7dfb      	ldrb	r3, [r7, #23]
 8003f32:	3301      	adds	r3, #1
 8003f34:	75fb      	strb	r3, [r7, #23]
 8003f36:	7dfa      	ldrb	r2, [r7, #23]
 8003f38:	7abb      	ldrb	r3, [r7, #10]
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d3f0      	bcc.n	8003f20 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff ff0c 	bl	8003d5c <_ZN7MCP25156endSPIEv>
}
 8003f44:	bf00      	nop
 8003f46:	371c      	adds	r7, #28
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd90      	pop	{r4, r7, pc}

08003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
 8003f58:	4613      	mov	r3, r2
 8003f5a:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff feed 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003f62:	2102      	movs	r1, #2
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f7ff fec5 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003f6a:	78fb      	ldrb	r3, [r7, #3]
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff fec0 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003f74:	78bb      	ldrb	r3, [r7, #2]
 8003f76:	4619      	mov	r1, r3
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f7ff febb 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f7ff feec 	bl	8003d5c <_ZN7MCP25156endSPIEv>
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b086      	sub	sp, #24
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	72fb      	strb	r3, [r7, #11]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7ff fecb 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003fa6:	2102      	movs	r1, #2
 8003fa8:	68f8      	ldr	r0, [r7, #12]
 8003faa:	f7ff fea3 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003fae:	7afb      	ldrb	r3, [r7, #11]
 8003fb0:	4619      	mov	r1, r3
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f7ff fe9e 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003fb8:	2300      	movs	r3, #0
 8003fba:	75fb      	strb	r3, [r7, #23]
 8003fbc:	e00a      	b.n	8003fd4 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003fbe:	7dfb      	ldrb	r3, [r7, #23]
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	781b      	ldrb	r3, [r3, #0]
 8003fc6:	4619      	mov	r1, r3
 8003fc8:	68f8      	ldr	r0, [r7, #12]
 8003fca:	f7ff fe93 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003fce:	7dfb      	ldrb	r3, [r7, #23]
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	75fb      	strb	r3, [r7, #23]
 8003fd4:	7dfa      	ldrb	r2, [r7, #23]
 8003fd6:	7abb      	ldrb	r3, [r7, #10]
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d3f0      	bcc.n	8003fbe <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f7ff febd 	bl	8003d5c <_ZN7MCP25156endSPIEv>
}
 8003fe2:	bf00      	nop
 8003fe4:	3718      	adds	r7, #24
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}

08003fea <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003fea:	b580      	push	{r7, lr}
 8003fec:	b082      	sub	sp, #8
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	4608      	mov	r0, r1
 8003ff4:	4611      	mov	r1, r2
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	4603      	mov	r3, r0
 8003ffa:	70fb      	strb	r3, [r7, #3]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	70bb      	strb	r3, [r7, #2]
 8004000:	4613      	mov	r3, r2
 8004002:	707b      	strb	r3, [r7, #1]
    startSPI();
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f7ff fe99 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 800400a:	2105      	movs	r1, #5
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f7ff fe71 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8004012:	78fb      	ldrb	r3, [r7, #3]
 8004014:	4619      	mov	r1, r3
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f7ff fe6c 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 800401c:	78bb      	ldrb	r3, [r7, #2]
 800401e:	4619      	mov	r1, r3
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f7ff fe67 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8004026:	787b      	ldrb	r3, [r7, #1]
 8004028:	4619      	mov	r1, r3
 800402a:	6878      	ldr	r0, [r7, #4]
 800402c:	f7ff fe62 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	f7ff fe93 	bl	8003d5c <_ZN7MCP25156endSPIEv>
}
 8004036:	bf00      	nop
 8004038:	3708      	adds	r7, #8
 800403a:	46bd      	mov	sp, r7
 800403c:	bd80      	pop	{r7, pc}

0800403e <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 800403e:	b580      	push	{r7, lr}
 8004040:	b084      	sub	sp, #16
 8004042:	af00      	add	r7, sp, #0
 8004044:	6078      	str	r0, [r7, #4]
    startSPI();
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fe78 	bl	8003d3c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 800404c:	21a0      	movs	r1, #160	@ 0xa0
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f7ff fe50 	bl	8003cf4 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f7ff fe5f 	bl	8003d18 <_ZN7MCP25156SPI_RxEv>
 800405a:	4603      	mov	r3, r0
 800405c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff fe7c 	bl	8003d5c <_ZN7MCP25156endSPIEv>

    return i;
 8004064:	7bfb      	ldrb	r3, [r7, #15]
}
 8004066:	4618      	mov	r0, r3
 8004068:	3710      	adds	r7, #16
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}

0800406e <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 800406e:	b580      	push	{r7, lr}
 8004070:	b082      	sub	sp, #8
 8004072:	af00      	add	r7, sp, #0
 8004074:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8004076:	2180      	movs	r1, #128	@ 0x80
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 f812 	bl	80040a2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 800407e:	4603      	mov	r3, r0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8004090:	2100      	movs	r1, #0
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f805 	bl	80040a2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8004098:	4603      	mov	r3, r0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 80040a2:	b580      	push	{r7, lr}
 80040a4:	b086      	sub	sp, #24
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
 80040aa:	460b      	mov	r3, r1
 80040ac:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 80040ae:	78fb      	ldrb	r3, [r7, #3]
 80040b0:	22e0      	movs	r2, #224	@ 0xe0
 80040b2:	210f      	movs	r1, #15
 80040b4:	6878      	ldr	r0, [r7, #4]
 80040b6:	f7ff ff98 	bl	8003fea <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 80040ba:	f000 fc05 	bl	80048c8 <HAL_GetTick>
 80040be:	4603      	mov	r3, r0
 80040c0:	330a      	adds	r3, #10
 80040c2:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 80040c4:	2300      	movs	r3, #0
 80040c6:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 80040c8:	e013      	b.n	80040f2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 80040ca:	210e      	movs	r1, #14
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f7ff feef 	bl	8003eb0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 80040d2:	4603      	mov	r3, r0
 80040d4:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 80040d6:	7bfb      	ldrb	r3, [r7, #15]
 80040d8:	f023 031f 	bic.w	r3, r3, #31
 80040dc:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 80040de:	7bfa      	ldrb	r2, [r7, #15]
 80040e0:	78fb      	ldrb	r3, [r7, #3]
 80040e2:	429a      	cmp	r2, r3
 80040e4:	bf0c      	ite	eq
 80040e6:	2301      	moveq	r3, #1
 80040e8:	2300      	movne	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 80040ec:	7dfb      	ldrb	r3, [r7, #23]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d10b      	bne.n	800410a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 80040f2:	f000 fbe9 	bl	80048c8 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	4293      	cmp	r3, r2
 80040fc:	bf8c      	ite	hi
 80040fe:	2301      	movhi	r3, #1
 8004100:	2300      	movls	r3, #0
 8004102:	b2db      	uxtb	r3, r3
 8004104:	2b00      	cmp	r3, #0
 8004106:	d1e0      	bne.n	80040ca <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8004108:	e000      	b.n	800410c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 800410a:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 800410c:	7dfb      	ldrb	r3, [r7, #23]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8004112:	2300      	movs	r3, #0
 8004114:	e000      	b.n	8004118 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8004116:	2301      	movs	r3, #1

}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b084      	sub	sp, #16
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	460b      	mov	r3, r1
 800412a:	70fb      	strb	r3, [r7, #3]
 800412c:	4613      	mov	r3, r2
 800412e:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f7ff ff9c 	bl	800406e <_ZN7MCP251513setConfigModeEv>
 8004136:	4603      	mov	r3, r0
 8004138:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 800413a:	7afb      	ldrb	r3, [r7, #11]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8004140:	7afb      	ldrb	r3, [r7, #11]
 8004142:	e1b5      	b.n	80044b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8004144:	2301      	movs	r3, #1
 8004146:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8004148:	78bb      	ldrb	r3, [r7, #2]
 800414a:	2b02      	cmp	r3, #2
 800414c:	d009      	beq.n	8004162 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 800414e:	2b02      	cmp	r3, #2
 8004150:	f300 8193 	bgt.w	800447a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8004154:	2b00      	cmp	r3, #0
 8004156:	f000 811f 	beq.w	8004398 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 800415a:	2b01      	cmp	r3, #1
 800415c:	f000 808e 	beq.w	800427c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8004160:	e18b      	b.n	800447a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8004162:	78fb      	ldrb	r3, [r7, #3]
 8004164:	2b0f      	cmp	r3, #15
 8004166:	f200 8085 	bhi.w	8004274 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041bf 	.word	0x080041bf
 8004178:	080041cd 	.word	0x080041cd
 800417c:	080041db 	.word	0x080041db
 8004180:	080041e9 	.word	0x080041e9
 8004184:	080041f7 	.word	0x080041f7
 8004188:	08004205 	.word	0x08004205
 800418c:	08004213 	.word	0x08004213
 8004190:	08004275 	.word	0x08004275
 8004194:	08004275 	.word	0x08004275
 8004198:	08004221 	.word	0x08004221
 800419c:	0800422f 	.word	0x0800422f
 80041a0:	0800423d 	.word	0x0800423d
 80041a4:	0800424b 	.word	0x0800424b
 80041a8:	08004259 	.word	0x08004259
 80041ac:	08004267 	.word	0x08004267
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 80041b0:	231f      	movs	r3, #31
 80041b2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 80041b4:	23bf      	movs	r3, #191	@ 0xbf
 80041b6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 80041b8:	2387      	movs	r3, #135	@ 0x87
 80041ba:	733b      	strb	r3, [r7, #12]
            break;
 80041bc:	e05d      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 80041be:	230f      	movs	r3, #15
 80041c0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 80041c2:	23bf      	movs	r3, #191	@ 0xbf
 80041c4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 80041c6:	2387      	movs	r3, #135	@ 0x87
 80041c8:	733b      	strb	r3, [r7, #12]
            break;
 80041ca:	e056      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 80041cc:	2307      	movs	r3, #7
 80041ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 80041d0:	23bf      	movs	r3, #191	@ 0xbf
 80041d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 80041d4:	2387      	movs	r3, #135	@ 0x87
 80041d6:	733b      	strb	r3, [r7, #12]
            break;
 80041d8:	e04f      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 80041da:	2307      	movs	r3, #7
 80041dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 80041de:	23a4      	movs	r3, #164	@ 0xa4
 80041e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 80041e2:	2384      	movs	r3, #132	@ 0x84
 80041e4:	733b      	strb	r3, [r7, #12]
            break;
 80041e6:	e048      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 80041e8:	2347      	movs	r3, #71	@ 0x47
 80041ea:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 80041ec:	23e2      	movs	r3, #226	@ 0xe2
 80041ee:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 80041f0:	2385      	movs	r3, #133	@ 0x85
 80041f2:	733b      	strb	r3, [r7, #12]
            break;
 80041f4:	e041      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 80041f6:	2303      	movs	r3, #3
 80041f8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 80041fa:	23bf      	movs	r3, #191	@ 0xbf
 80041fc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 80041fe:	2387      	movs	r3, #135	@ 0x87
 8004200:	733b      	strb	r3, [r7, #12]
            break;
 8004202:	e03a      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8004204:	2303      	movs	r3, #3
 8004206:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8004208:	23b4      	movs	r3, #180	@ 0xb4
 800420a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 800420c:	2386      	movs	r3, #134	@ 0x86
 800420e:	733b      	strb	r3, [r7, #12]
            break;
 8004210:	e033      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8004212:	2301      	movs	r3, #1
 8004214:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8004216:	23bf      	movs	r3, #191	@ 0xbf
 8004218:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 800421a:	2387      	movs	r3, #135	@ 0x87
 800421c:	733b      	strb	r3, [r7, #12]
            break;
 800421e:	e02c      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8004220:	2301      	movs	r3, #1
 8004222:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8004224:	23b4      	movs	r3, #180	@ 0xb4
 8004226:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8004228:	2386      	movs	r3, #134	@ 0x86
 800422a:	733b      	strb	r3, [r7, #12]
            break;
 800422c:	e025      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 800422e:	2301      	movs	r3, #1
 8004230:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8004232:	23b1      	movs	r3, #177	@ 0xb1
 8004234:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8004236:	2385      	movs	r3, #133	@ 0x85
 8004238:	733b      	strb	r3, [r7, #12]
            break;
 800423a:	e01e      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 800423c:	2300      	movs	r3, #0
 800423e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8004240:	23b4      	movs	r3, #180	@ 0xb4
 8004242:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8004244:	2386      	movs	r3, #134	@ 0x86
 8004246:	733b      	strb	r3, [r7, #12]
            break;
 8004248:	e017      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 800424a:	2300      	movs	r3, #0
 800424c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 800424e:	23b1      	movs	r3, #177	@ 0xb1
 8004250:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8004252:	2385      	movs	r3, #133	@ 0x85
 8004254:	733b      	strb	r3, [r7, #12]
            break;
 8004256:	e010      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8004258:	2300      	movs	r3, #0
 800425a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 800425c:	2390      	movs	r3, #144	@ 0x90
 800425e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8004260:	2382      	movs	r3, #130	@ 0x82
 8004262:	733b      	strb	r3, [r7, #12]
            break;
 8004264:	e009      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8004266:	2300      	movs	r3, #0
 8004268:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 800426a:	2380      	movs	r3, #128	@ 0x80
 800426c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 800426e:	2380      	movs	r3, #128	@ 0x80
 8004270:	733b      	strb	r3, [r7, #12]
            break;
 8004272:	e002      	b.n	800427a <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8004274:	2300      	movs	r3, #0
 8004276:	73fb      	strb	r3, [r7, #15]
            break;
 8004278:	bf00      	nop
        }
        break;
 800427a:	e101      	b.n	8004480 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 800427c:	78fb      	ldrb	r3, [r7, #3]
 800427e:	2b0f      	cmp	r3, #15
 8004280:	f200 8086 	bhi.w	8004390 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8004284:	a201      	add	r2, pc, #4	@ (adr r2, 800428c <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8004286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800428a:	bf00      	nop
 800428c:	080042cd 	.word	0x080042cd
 8004290:	080042db 	.word	0x080042db
 8004294:	080042e9 	.word	0x080042e9
 8004298:	08004391 	.word	0x08004391
 800429c:	080042f7 	.word	0x080042f7
 80042a0:	08004305 	.word	0x08004305
 80042a4:	08004313 	.word	0x08004313
 80042a8:	08004321 	.word	0x08004321
 80042ac:	0800432f 	.word	0x0800432f
 80042b0:	08004391 	.word	0x08004391
 80042b4:	0800433d 	.word	0x0800433d
 80042b8:	0800434b 	.word	0x0800434b
 80042bc:	08004359 	.word	0x08004359
 80042c0:	08004367 	.word	0x08004367
 80042c4:	08004375 	.word	0x08004375
 80042c8:	08004383 	.word	0x08004383
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 80042cc:	233f      	movs	r3, #63	@ 0x3f
 80042ce:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 80042d0:	23ff      	movs	r3, #255	@ 0xff
 80042d2:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 80042d4:	2387      	movs	r3, #135	@ 0x87
 80042d6:	733b      	strb	r3, [r7, #12]
            break;
 80042d8:	e05d      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 80042da:	231f      	movs	r3, #31
 80042dc:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 80042de:	23ff      	movs	r3, #255	@ 0xff
 80042e0:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 80042e2:	2387      	movs	r3, #135	@ 0x87
 80042e4:	733b      	strb	r3, [r7, #12]
            break;
 80042e6:	e056      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 80042e8:	230f      	movs	r3, #15
 80042ea:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 80042ec:	23ff      	movs	r3, #255	@ 0xff
 80042ee:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 80042f0:	2387      	movs	r3, #135	@ 0x87
 80042f2:	733b      	strb	r3, [r7, #12]
            break;
 80042f4:	e04f      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 80042f6:	234e      	movs	r3, #78	@ 0x4e
 80042f8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 80042fa:	23f1      	movs	r3, #241	@ 0xf1
 80042fc:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 80042fe:	2385      	movs	r3, #133	@ 0x85
 8004300:	733b      	strb	r3, [r7, #12]
            break;
 8004302:	e048      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8004304:	2307      	movs	r3, #7
 8004306:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8004308:	23ff      	movs	r3, #255	@ 0xff
 800430a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 800430c:	2387      	movs	r3, #135	@ 0x87
 800430e:	733b      	strb	r3, [r7, #12]
            break;
 8004310:	e041      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8004312:	2307      	movs	r3, #7
 8004314:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8004316:	23fa      	movs	r3, #250	@ 0xfa
 8004318:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 800431a:	2387      	movs	r3, #135	@ 0x87
 800431c:	733b      	strb	r3, [r7, #12]
            break;
 800431e:	e03a      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8004320:	2303      	movs	r3, #3
 8004322:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8004324:	23ff      	movs	r3, #255	@ 0xff
 8004326:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8004328:	2387      	movs	r3, #135	@ 0x87
 800432a:	733b      	strb	r3, [r7, #12]
            break;
 800432c:	e033      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 800432e:	2303      	movs	r3, #3
 8004330:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8004332:	23be      	movs	r3, #190	@ 0xbe
 8004334:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8004336:	2307      	movs	r3, #7
 8004338:	733b      	strb	r3, [r7, #12]
            break;
 800433a:	e02c      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 800433c:	2303      	movs	r3, #3
 800433e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8004340:	23fa      	movs	r3, #250	@ 0xfa
 8004342:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8004344:	2387      	movs	r3, #135	@ 0x87
 8004346:	733b      	strb	r3, [r7, #12]
            break;
 8004348:	e025      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 800434a:	2303      	movs	r3, #3
 800434c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 800434e:	23f0      	movs	r3, #240	@ 0xf0
 8004350:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8004352:	2386      	movs	r3, #134	@ 0x86
 8004354:	733b      	strb	r3, [r7, #12]
            break;
 8004356:	e01e      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8004358:	2301      	movs	r3, #1
 800435a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 800435c:	23fa      	movs	r3, #250	@ 0xfa
 800435e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8004360:	2387      	movs	r3, #135	@ 0x87
 8004362:	733b      	strb	r3, [r7, #12]
            break;
 8004364:	e017      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8004366:	2341      	movs	r3, #65	@ 0x41
 8004368:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 800436a:	23f1      	movs	r3, #241	@ 0xf1
 800436c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 800436e:	2385      	movs	r3, #133	@ 0x85
 8004370:	733b      	strb	r3, [r7, #12]
            break;
 8004372:	e010      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8004374:	2300      	movs	r3, #0
 8004376:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8004378:	23f0      	movs	r3, #240	@ 0xf0
 800437a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 800437c:	2386      	movs	r3, #134	@ 0x86
 800437e:	733b      	strb	r3, [r7, #12]
            break;
 8004380:	e009      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8004382:	2300      	movs	r3, #0
 8004384:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8004386:	23d0      	movs	r3, #208	@ 0xd0
 8004388:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 800438a:	2382      	movs	r3, #130	@ 0x82
 800438c:	733b      	strb	r3, [r7, #12]
            break;
 800438e:	e002      	b.n	8004396 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	73fb      	strb	r3, [r7, #15]
            break;
 8004394:	bf00      	nop
        }
        break;
 8004396:	e073      	b.n	8004480 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	3b04      	subs	r3, #4
 800439c:	2b0b      	cmp	r3, #11
 800439e:	d868      	bhi.n	8004472 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 80043a0:	a201      	add	r2, pc, #4	@ (adr r2, 80043a8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 80043a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a6:	bf00      	nop
 80043a8:	080043d9 	.word	0x080043d9
 80043ac:	080043e7 	.word	0x080043e7
 80043b0:	080043f5 	.word	0x080043f5
 80043b4:	08004403 	.word	0x08004403
 80043b8:	08004411 	.word	0x08004411
 80043bc:	08004473 	.word	0x08004473
 80043c0:	0800441f 	.word	0x0800441f
 80043c4:	0800442d 	.word	0x0800442d
 80043c8:	0800443b 	.word	0x0800443b
 80043cc:	08004449 	.word	0x08004449
 80043d0:	08004457 	.word	0x08004457
 80043d4:	08004465 	.word	0x08004465
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 80043d8:	230b      	movs	r3, #11
 80043da:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 80043dc:	23ff      	movs	r3, #255	@ 0xff
 80043de:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 80043e0:	2387      	movs	r3, #135	@ 0x87
 80043e2:	733b      	strb	r3, [r7, #12]
	    break;
 80043e4:	e048      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 80043e6:	2309      	movs	r3, #9
 80043e8:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 80043ea:	23ff      	movs	r3, #255	@ 0xff
 80043ec:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 80043ee:	2387      	movs	r3, #135	@ 0x87
 80043f0:	733b      	strb	r3, [r7, #12]
            break;
 80043f2:	e041      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 80043f4:	2309      	movs	r3, #9
 80043f6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 80043f8:	23fa      	movs	r3, #250	@ 0xfa
 80043fa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 80043fc:	2387      	movs	r3, #135	@ 0x87
 80043fe:	733b      	strb	r3, [r7, #12]
            break;
 8004400:	e03a      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8004402:	2304      	movs	r3, #4
 8004404:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8004406:	23ff      	movs	r3, #255	@ 0xff
 8004408:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 800440a:	2387      	movs	r3, #135	@ 0x87
 800440c:	733b      	strb	r3, [r7, #12]
            break;
 800440e:	e033      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8004410:	2304      	movs	r3, #4
 8004412:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8004414:	23fe      	movs	r3, #254	@ 0xfe
 8004416:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8004418:	2387      	movs	r3, #135	@ 0x87
 800441a:	733b      	strb	r3, [r7, #12]
	    break;
 800441c:	e02c      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 800441e:	2304      	movs	r3, #4
 8004420:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8004422:	23fa      	movs	r3, #250	@ 0xfa
 8004424:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8004426:	2387      	movs	r3, #135	@ 0x87
 8004428:	733b      	strb	r3, [r7, #12]
            break;
 800442a:	e025      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 800442c:	2303      	movs	r3, #3
 800442e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8004430:	23fa      	movs	r3, #250	@ 0xfa
 8004432:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8004434:	2387      	movs	r3, #135	@ 0x87
 8004436:	733b      	strb	r3, [r7, #12]
            break;
 8004438:	e01e      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 800443a:	2301      	movs	r3, #1
 800443c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 800443e:	23ff      	movs	r3, #255	@ 0xff
 8004440:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8004442:	2387      	movs	r3, #135	@ 0x87
 8004444:	733b      	strb	r3, [r7, #12]
            break;
 8004446:	e017      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8004448:	2341      	movs	r3, #65	@ 0x41
 800444a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 800444c:	23fb      	movs	r3, #251	@ 0xfb
 800444e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8004450:	2386      	movs	r3, #134	@ 0x86
 8004452:	733b      	strb	r3, [r7, #12]
            break;
 8004454:	e010      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8004456:	2300      	movs	r3, #0
 8004458:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 800445a:	23fa      	movs	r3, #250	@ 0xfa
 800445c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 800445e:	2387      	movs	r3, #135	@ 0x87
 8004460:	733b      	strb	r3, [r7, #12]
            break;
 8004462:	e009      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8004464:	2300      	movs	r3, #0
 8004466:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8004468:	23d9      	movs	r3, #217	@ 0xd9
 800446a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 800446c:	2382      	movs	r3, #130	@ 0x82
 800446e:	733b      	strb	r3, [r7, #12]
            break;
 8004470:	e002      	b.n	8004478 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8004472:	2300      	movs	r3, #0
 8004474:	73fb      	strb	r3, [r7, #15]
            break;
 8004476:	bf00      	nop
        }
        break;
 8004478:	e002      	b.n	8004480 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 800447a:	2300      	movs	r3, #0
 800447c:	73fb      	strb	r3, [r7, #15]
        break;
 800447e:	bf00      	nop
    }

    if (set) {
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d013      	beq.n	80044ae <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8004486:	7bbb      	ldrb	r3, [r7, #14]
 8004488:	461a      	mov	r2, r3
 800448a:	212a      	movs	r1, #42	@ 0x2a
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f7ff fd5d 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8004492:	7b7b      	ldrb	r3, [r7, #13]
 8004494:	461a      	mov	r2, r3
 8004496:	2129      	movs	r1, #41	@ 0x29
 8004498:	6878      	ldr	r0, [r7, #4]
 800449a:	f7ff fd57 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 800449e:	7b3b      	ldrb	r3, [r7, #12]
 80044a0:	461a      	mov	r2, r3
 80044a2:	2128      	movs	r1, #40	@ 0x28
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fd51 	bl	8003f4c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 80044aa:	2300      	movs	r3, #0
 80044ac:	e000      	b.n	80044b0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 80044ae:	2301      	movs	r3, #1
    }
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3710      	adds	r7, #16
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 80044cc:	79fb      	ldrb	r3, [r7, #7]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d035      	beq.n	800453e <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	3303      	adds	r3, #3
 80044d6:	8afa      	ldrh	r2, [r7, #22]
 80044d8:	b2d2      	uxtb	r2, r2
 80044da:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 80044dc:	8afb      	ldrh	r3, [r7, #22]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	3302      	adds	r3, #2
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	0c1b      	lsrs	r3, r3, #16
 80044ee:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 80044f0:	8afb      	ldrh	r3, [r7, #22]
 80044f2:	b2da      	uxtb	r2, r3
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	3301      	adds	r3, #1
 80044f8:	f002 0203 	and.w	r2, r2, #3
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	3301      	adds	r3, #1
 8004504:	7819      	ldrb	r1, [r3, #0]
 8004506:	8afb      	ldrh	r3, [r7, #22]
 8004508:	b2db      	uxtb	r3, r3
 800450a:	00db      	lsls	r3, r3, #3
 800450c:	b2db      	uxtb	r3, r3
 800450e:	f023 031f 	bic.w	r3, r3, #31
 8004512:	b2da      	uxtb	r2, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	3301      	adds	r3, #1
 8004518:	440a      	add	r2, r1
 800451a:	b2d2      	uxtb	r2, r2
 800451c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	3301      	adds	r3, #1
 8004522:	781a      	ldrb	r2, [r3, #0]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	3301      	adds	r3, #1
 8004528:	f042 0208 	orr.w	r2, r2, #8
 800452c:	b2d2      	uxtb	r2, r2
 800452e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8004530:	8afb      	ldrh	r3, [r7, #22]
 8004532:	095b      	lsrs	r3, r3, #5
 8004534:	b29b      	uxth	r3, r3
 8004536:	b2da      	uxtb	r2, r3
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800453c:	e014      	b.n	8004568 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 800453e:	8afb      	ldrh	r3, [r7, #22]
 8004540:	08db      	lsrs	r3, r3, #3
 8004542:	b29b      	uxth	r3, r3
 8004544:	b2da      	uxtb	r2, r3
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 800454a:	8afb      	ldrh	r3, [r7, #22]
 800454c:	b2da      	uxtb	r2, r3
 800454e:	68bb      	ldr	r3, [r7, #8]
 8004550:	3301      	adds	r3, #1
 8004552:	0152      	lsls	r2, r2, #5
 8004554:	b2d2      	uxtb	r2, r2
 8004556:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	3303      	adds	r3, #3
 800455c:	2200      	movs	r2, #0
 800455e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	3302      	adds	r3, #2
 8004564:	2200      	movs	r2, #0
 8004566:	701a      	strb	r2, [r3, #0]
}
 8004568:	bf00      	nop
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr

08004574 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	60f8      	str	r0, [r7, #12]
 800457c:	607b      	str	r3, [r7, #4]
 800457e:	460b      	mov	r3, r1
 8004580:	72fb      	strb	r3, [r7, #11]
 8004582:	4613      	mov	r3, r2
 8004584:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 8004586:	68f8      	ldr	r0, [r7, #12]
 8004588:	f7ff fd71 	bl	800406e <_ZN7MCP251513setConfigModeEv>
 800458c:	4603      	mov	r3, r0
 800458e:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004590:	7dbb      	ldrb	r3, [r7, #22]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d001      	beq.n	800459a <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 8004596:	7dbb      	ldrb	r3, [r7, #22]
 8004598:	e01c      	b.n	80045d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 800459a:	7aba      	ldrb	r2, [r7, #10]
 800459c:	f107 0110 	add.w	r1, r7, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff ff88 	bl	80044b8 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80045a8:	7afb      	ldrb	r3, [r7, #11]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80045ae:	2b01      	cmp	r3, #1
 80045b0:	d003      	beq.n	80045ba <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80045b2:	e005      	b.n	80045c0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80045b4:	2320      	movs	r3, #32
 80045b6:	75fb      	strb	r3, [r7, #23]
 80045b8:	e004      	b.n	80045c4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80045ba:	2324      	movs	r3, #36	@ 0x24
 80045bc:	75fb      	strb	r3, [r7, #23]
 80045be:	e001      	b.n	80045c4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e007      	b.n	80045d4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80045c4:	f107 0210 	add.w	r2, r7, #16
 80045c8:	7df9      	ldrb	r1, [r7, #23]
 80045ca:	2304      	movs	r3, #4
 80045cc:	68f8      	ldr	r0, [r7, #12]
 80045ce:	f7ff fcdd 	bl	8003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3718      	adds	r7, #24
 80045d8:	46bd      	mov	sp, r7
 80045da:	bd80      	pop	{r7, pc}

080045dc <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	60f8      	str	r0, [r7, #12]
 80045e4:	607b      	str	r3, [r7, #4]
 80045e6:	460b      	mov	r3, r1
 80045e8:	72fb      	strb	r3, [r7, #11]
 80045ea:	4613      	mov	r3, r2
 80045ec:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f7ff fd3d 	bl	800406e <_ZN7MCP251513setConfigModeEv>
 80045f4:	4603      	mov	r3, r0
 80045f6:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80045f8:	7dbb      	ldrb	r3, [r7, #22]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d001      	beq.n	8004602 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 80045fe:	7dbb      	ldrb	r3, [r7, #22]
 8004600:	e035      	b.n	800466e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004602:	7afb      	ldrb	r3, [r7, #11]
 8004604:	2b05      	cmp	r3, #5
 8004606:	d821      	bhi.n	800464c <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004608:	a201      	add	r2, pc, #4	@ (adr r2, 8004610 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800460a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460e:	bf00      	nop
 8004610:	08004629 	.word	0x08004629
 8004614:	0800462f 	.word	0x0800462f
 8004618:	08004635 	.word	0x08004635
 800461c:	0800463b 	.word	0x0800463b
 8004620:	08004641 	.word	0x08004641
 8004624:	08004647 	.word	0x08004647
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004628:	2300      	movs	r3, #0
 800462a:	75fb      	strb	r3, [r7, #23]
 800462c:	e010      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800462e:	2304      	movs	r3, #4
 8004630:	75fb      	strb	r3, [r7, #23]
 8004632:	e00d      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8004634:	2308      	movs	r3, #8
 8004636:	75fb      	strb	r3, [r7, #23]
 8004638:	e00a      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800463a:	2310      	movs	r3, #16
 800463c:	75fb      	strb	r3, [r7, #23]
 800463e:	e007      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004640:	2314      	movs	r3, #20
 8004642:	75fb      	strb	r3, [r7, #23]
 8004644:	e004      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8004646:	2318      	movs	r3, #24
 8004648:	75fb      	strb	r3, [r7, #23]
 800464a:	e001      	b.n	8004650 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 800464c:	2301      	movs	r3, #1
 800464e:	e00e      	b.n	800466e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004650:	7aba      	ldrb	r2, [r7, #10]
 8004652:	f107 0110 	add.w	r1, r7, #16
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68f8      	ldr	r0, [r7, #12]
 800465a:	f7ff ff2d 	bl	80044b8 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 800465e:	f107 0210 	add.w	r2, r7, #16
 8004662:	7df9      	ldrb	r1, [r7, #23]
 8004664:	2304      	movs	r3, #4
 8004666:	68f8      	ldr	r0, [r7, #12]
 8004668:	f7ff fc90 	bl	8003f8c <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop

08004678 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b088      	sub	sp, #32
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	460b      	mov	r3, r1
 8004682:	607a      	str	r2, [r7, #4]
 8004684:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 8004686:	7afb      	ldrb	r3, [r7, #11]
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a30      	ldr	r2, [pc, #192]	@ (800474c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 800468c:	4413      	add	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 8004690:	69bb      	ldr	r3, [r7, #24]
 8004692:	7859      	ldrb	r1, [r3, #1]
 8004694:	f107 0210 	add.w	r2, r7, #16
 8004698:	2305      	movs	r3, #5
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f7ff fc27 	bl	8003eee <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80046a0:	7c3b      	ldrb	r3, [r7, #16]
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	7c7a      	ldrb	r2, [r7, #17]
 80046a6:	0952      	lsrs	r2, r2, #5
 80046a8:	b2d2      	uxtb	r2, r2
 80046aa:	4413      	add	r3, r2
 80046ac:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80046ae:	7c7b      	ldrb	r3, [r7, #17]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d014      	beq.n	80046e2 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	009a      	lsls	r2, r3, #2
 80046bc:	7c7b      	ldrb	r3, [r7, #17]
 80046be:	f003 0303 	and.w	r3, r3, #3
 80046c2:	4413      	add	r3, r2
 80046c4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	021b      	lsls	r3, r3, #8
 80046ca:	7cba      	ldrb	r2, [r7, #18]
 80046cc:	4413      	add	r3, r2
 80046ce:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 80046d0:	69fb      	ldr	r3, [r7, #28]
 80046d2:	021b      	lsls	r3, r3, #8
 80046d4:	7cfa      	ldrb	r2, [r7, #19]
 80046d6:	4413      	add	r3, r2
 80046d8:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80046e0:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 80046e2:	7d3b      	ldrb	r3, [r7, #20]
 80046e4:	f003 030f 	and.w	r3, r3, #15
 80046e8:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 80046ea:	7dfb      	ldrb	r3, [r7, #23]
 80046ec:	2b08      	cmp	r3, #8
 80046ee:	d901      	bls.n	80046f4 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 80046f0:	2301      	movs	r3, #1
 80046f2:	e027      	b.n	8004744 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	781b      	ldrb	r3, [r3, #0]
 80046f8:	4619      	mov	r1, r3
 80046fa:	68f8      	ldr	r0, [r7, #12]
 80046fc:	f7ff fbd8 	bl	8003eb0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004700:	4603      	mov	r3, r0
 8004702:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004704:	7dbb      	ldrb	r3, [r7, #22]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d003      	beq.n	8004716 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800470e:	69fb      	ldr	r3, [r7, #28]
 8004710:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004714:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69fa      	ldr	r2, [r7, #28]
 800471a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	7dfa      	ldrb	r2, [r7, #23]
 8004720:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	7899      	ldrb	r1, [r3, #2]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f103 0208 	add.w	r2, r3, #8
 800472c:	7dfb      	ldrb	r3, [r7, #23]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f7ff fbdd 	bl	8003eee <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	78da      	ldrb	r2, [r3, #3]
 8004738:	2300      	movs	r3, #0
 800473a:	212c      	movs	r1, #44	@ 0x2c
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f7ff fc54 	bl	8003fea <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004742:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 8004744:	4618      	mov	r0, r3
 8004746:	3720      	adds	r7, #32
 8004748:	46bd      	mov	sp, r7
 800474a:	bd80      	pop	{r7, pc}
 800474c:	08017e50 	.word	0x08017e50
=======
 8004764:	4618      	mov	r0, r3
 8004766:	3720      	adds	r7, #32
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}
 800476c:	08017e04 	.word	0x08017e04
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

08004750 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7ff fc6f 	bl	800403e <_ZN7MCP25159getStatusEv>
 8004760:	4603      	mov	r3, r0
 8004762:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004764:	7bbb      	ldrb	r3, [r7, #14]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d007      	beq.n	800477e <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800476e:	683a      	ldr	r2, [r7, #0]
 8004770:	2100      	movs	r1, #0
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff ff80 	bl	8004678 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004778:	4603      	mov	r3, r0
 800477a:	73fb      	strb	r3, [r7, #15]
 800477c:	e00e      	b.n	800479c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 800477e:	7bbb      	ldrb	r3, [r7, #14]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 8004788:	683a      	ldr	r2, [r7, #0]
 800478a:	2101      	movs	r1, #1
 800478c:	6878      	ldr	r0, [r7, #4]
 800478e:	f7ff ff73 	bl	8004678 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 8004792:	4603      	mov	r3, r0
 8004794:	73fb      	strb	r3, [r7, #15]
 8004796:	e001      	b.n	800479c <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 8004798:	2305      	movs	r3, #5
 800479a:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 800479c:	7bfb      	ldrb	r3, [r7, #15]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
	...

080047a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80047a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80047e0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80047ac:	f7fd fcd2 	bl	8002154 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80047b0:	480c      	ldr	r0, [pc, #48]	@ (80047e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80047b2:	490d      	ldr	r1, [pc, #52]	@ (80047e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80047b4:	4a0d      	ldr	r2, [pc, #52]	@ (80047ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80047b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80047b8:	e002      	b.n	80047c0 <LoopCopyDataInit>

080047ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80047ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80047bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80047be:	3304      	adds	r3, #4

080047c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80047c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80047c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80047c4:	d3f9      	bcc.n	80047ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80047c6:	4a0a      	ldr	r2, [pc, #40]	@ (80047f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80047c8:	4c0a      	ldr	r4, [pc, #40]	@ (80047f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80047ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80047cc:	e001      	b.n	80047d2 <LoopFillZerobss>

080047ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80047ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80047d0:	3204      	adds	r2, #4

080047d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80047d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047d4:	d3fb      	bcc.n	80047ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80047d6:	f00b f98f 	bl	800faf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047da:	f7fc fcf5 	bl	80011c8 <main>
  bx  lr    
 80047de:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80047e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80047e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047e8:	20000188 	.word	0x20000188
  ldr r2, =_sidata
<<<<<<< HEAD
 80047ec:	08017f50 	.word	0x08017f50
=======
 800480c:	08017f04 	.word	0x08017f04
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37
  ldr r2, =_sbss
 80047f0:	20000188 	.word	0x20000188
  ldr r4, =_ebss
<<<<<<< HEAD
 80047f4:	2000197c 	.word	0x2000197c
=======
 8004814:	20001980 	.word	0x20001980
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

080047f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047f8:	e7fe      	b.n	80047f8 <ADC_IRQHandler>
	...

080047fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004800:	4b0e      	ldr	r3, [pc, #56]	@ (800483c <HAL_Init+0x40>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a0d      	ldr	r2, [pc, #52]	@ (800483c <HAL_Init+0x40>)
 8004806:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800480a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800480c:	4b0b      	ldr	r3, [pc, #44]	@ (800483c <HAL_Init+0x40>)
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a0a      	ldr	r2, [pc, #40]	@ (800483c <HAL_Init+0x40>)
 8004812:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004816:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004818:	4b08      	ldr	r3, [pc, #32]	@ (800483c <HAL_Init+0x40>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a07      	ldr	r2, [pc, #28]	@ (800483c <HAL_Init+0x40>)
 800481e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004822:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004824:	2003      	movs	r0, #3
 8004826:	f000 f94f 	bl	8004ac8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800482a:	200f      	movs	r0, #15
 800482c:	f000 f808 	bl	8004840 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004830:	f7fd fb70 	bl	8001f14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004834:	2300      	movs	r3, #0
}
 8004836:	4618      	mov	r0, r3
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	40023c00 	.word	0x40023c00

08004840 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b082      	sub	sp, #8
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004848:	4b12      	ldr	r3, [pc, #72]	@ (8004894 <HAL_InitTick+0x54>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	4b12      	ldr	r3, [pc, #72]	@ (8004898 <HAL_InitTick+0x58>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	4619      	mov	r1, r3
 8004852:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004856:	fbb3 f3f1 	udiv	r3, r3, r1
 800485a:	fbb2 f3f3 	udiv	r3, r2, r3
 800485e:	4618      	mov	r0, r3
 8004860:	f000 f967 	bl	8004b32 <HAL_SYSTICK_Config>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e00e      	b.n	800488c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2b0f      	cmp	r3, #15
 8004872:	d80a      	bhi.n	800488a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004874:	2200      	movs	r2, #0
 8004876:	6879      	ldr	r1, [r7, #4]
 8004878:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800487c:	f000 f92f 	bl	8004ade <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004880:	4a06      	ldr	r2, [pc, #24]	@ (800489c <HAL_InitTick+0x5c>)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
}
 800488c:	4618      	mov	r0, r3
 800488e:	3708      	adds	r7, #8
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}
 8004894:	20000004 	.word	0x20000004
 8004898:	20000030 	.word	0x20000030
 800489c:	2000002c 	.word	0x2000002c

080048a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048a4:	4b06      	ldr	r3, [pc, #24]	@ (80048c0 <HAL_IncTick+0x20>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	461a      	mov	r2, r3
 80048aa:	4b06      	ldr	r3, [pc, #24]	@ (80048c4 <HAL_IncTick+0x24>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4413      	add	r3, r2
 80048b0:	4a04      	ldr	r2, [pc, #16]	@ (80048c4 <HAL_IncTick+0x24>)
 80048b2:	6013      	str	r3, [r2, #0]
}
<<<<<<< HEAD
 80048b4:	bf00      	nop
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	20000030 	.word	0x20000030
 80048c4:	2000040c 	.word	0x2000040c
=======
 80048d4:	bf00      	nop
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	20000030 	.word	0x20000030
 80048e4:	20000410 	.word	0x20000410
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

080048c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80048c8:	b480      	push	{r7}
 80048ca:	af00      	add	r7, sp, #0
  return uwTick;
 80048cc:	4b03      	ldr	r3, [pc, #12]	@ (80048dc <HAL_GetTick+0x14>)
 80048ce:	681b      	ldr	r3, [r3, #0]
}
<<<<<<< HEAD
 80048d0:	4618      	mov	r0, r3
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr
 80048da:	bf00      	nop
 80048dc:	2000040c 	.word	0x2000040c
=======
 80048f0:	4618      	mov	r0, r3
 80048f2:	46bd      	mov	sp, r7
 80048f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f8:	4770      	bx	lr
 80048fa:	bf00      	nop
 80048fc:	20000410 	.word	0x20000410
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

080048e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	b084      	sub	sp, #16
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048e8:	f7ff ffee 	bl	80048c8 <HAL_GetTick>
 80048ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80048f8:	d005      	beq.n	8004906 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048fa:	4b0a      	ldr	r3, [pc, #40]	@ (8004924 <HAL_Delay+0x44>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	461a      	mov	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4413      	add	r3, r2
 8004904:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004906:	bf00      	nop
 8004908:	f7ff ffde 	bl	80048c8 <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	68fa      	ldr	r2, [r7, #12]
 8004914:	429a      	cmp	r2, r3
 8004916:	d8f7      	bhi.n	8004908 <HAL_Delay+0x28>
  {
  }
}
 8004918:	bf00      	nop
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000030 	.word	0x20000030

08004928 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004928:	b480      	push	{r7}
 800492a:	b085      	sub	sp, #20
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f003 0307 	and.w	r3, r3, #7
 8004936:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004938:	4b0c      	ldr	r3, [pc, #48]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800493e:	68ba      	ldr	r2, [r7, #8]
 8004940:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004944:	4013      	ands	r3, r2
 8004946:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004950:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004958:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800495a:	4a04      	ldr	r2, [pc, #16]	@ (800496c <__NVIC_SetPriorityGrouping+0x44>)
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	60d3      	str	r3, [r2, #12]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000ed00 	.word	0xe000ed00

08004970 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004970:	b480      	push	{r7}
 8004972:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004974:	4b04      	ldr	r3, [pc, #16]	@ (8004988 <__NVIC_GetPriorityGrouping+0x18>)
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	0a1b      	lsrs	r3, r3, #8
 800497a:	f003 0307 	and.w	r3, r3, #7
}
 800497e:	4618      	mov	r0, r3
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr
 8004988:	e000ed00 	.word	0xe000ed00

0800498c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	4603      	mov	r3, r0
 8004994:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db0b      	blt.n	80049b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800499e:	79fb      	ldrb	r3, [r7, #7]
 80049a0:	f003 021f 	and.w	r2, r3, #31
 80049a4:	4907      	ldr	r1, [pc, #28]	@ (80049c4 <__NVIC_EnableIRQ+0x38>)
 80049a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049aa:	095b      	lsrs	r3, r3, #5
 80049ac:	2001      	movs	r0, #1
 80049ae:	fa00 f202 	lsl.w	r2, r0, r2
 80049b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80049b6:	bf00      	nop
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
 80049c2:	bf00      	nop
 80049c4:	e000e100 	.word	0xe000e100

080049c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	4603      	mov	r3, r0
 80049d0:	6039      	str	r1, [r7, #0]
 80049d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80049d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	db0a      	blt.n	80049f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	490c      	ldr	r1, [pc, #48]	@ (8004a14 <__NVIC_SetPriority+0x4c>)
 80049e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80049e6:	0112      	lsls	r2, r2, #4
 80049e8:	b2d2      	uxtb	r2, r2
 80049ea:	440b      	add	r3, r1
 80049ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80049f0:	e00a      	b.n	8004a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049f2:	683b      	ldr	r3, [r7, #0]
 80049f4:	b2da      	uxtb	r2, r3
 80049f6:	4908      	ldr	r1, [pc, #32]	@ (8004a18 <__NVIC_SetPriority+0x50>)
 80049f8:	79fb      	ldrb	r3, [r7, #7]
 80049fa:	f003 030f 	and.w	r3, r3, #15
 80049fe:	3b04      	subs	r3, #4
 8004a00:	0112      	lsls	r2, r2, #4
 8004a02:	b2d2      	uxtb	r2, r2
 8004a04:	440b      	add	r3, r1
 8004a06:	761a      	strb	r2, [r3, #24]
}
 8004a08:	bf00      	nop
 8004a0a:	370c      	adds	r7, #12
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr
 8004a14:	e000e100 	.word	0xe000e100
 8004a18:	e000ed00 	.word	0xe000ed00

08004a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b089      	sub	sp, #36	@ 0x24
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	60f8      	str	r0, [r7, #12]
 8004a24:	60b9      	str	r1, [r7, #8]
 8004a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f003 0307 	and.w	r3, r3, #7
 8004a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	f1c3 0307 	rsb	r3, r3, #7
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	bf28      	it	cs
 8004a3a:	2304      	movcs	r3, #4
 8004a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a3e:	69fb      	ldr	r3, [r7, #28]
 8004a40:	3304      	adds	r3, #4
 8004a42:	2b06      	cmp	r3, #6
 8004a44:	d902      	bls.n	8004a4c <NVIC_EncodePriority+0x30>
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	3b03      	subs	r3, #3
 8004a4a:	e000      	b.n	8004a4e <NVIC_EncodePriority+0x32>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5a:	43da      	mvns	r2, r3
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	401a      	ands	r2, r3
 8004a60:	697b      	ldr	r3, [r7, #20]
 8004a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6e:	43d9      	mvns	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a74:	4313      	orrs	r3, r2
         );
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3724      	adds	r7, #36	@ 0x24
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a80:	4770      	bx	lr
	...

08004a84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b082      	sub	sp, #8
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	3b01      	subs	r3, #1
 8004a90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004a94:	d301      	bcc.n	8004a9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004a96:	2301      	movs	r3, #1
 8004a98:	e00f      	b.n	8004aba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8004ac4 <SysTick_Config+0x40>)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	3b01      	subs	r3, #1
 8004aa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004aa2:	210f      	movs	r1, #15
 8004aa4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aa8:	f7ff ff8e 	bl	80049c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aac:	4b05      	ldr	r3, [pc, #20]	@ (8004ac4 <SysTick_Config+0x40>)
 8004aae:	2200      	movs	r2, #0
 8004ab0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ab2:	4b04      	ldr	r3, [pc, #16]	@ (8004ac4 <SysTick_Config+0x40>)
 8004ab4:	2207      	movs	r2, #7
 8004ab6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004ab8:	2300      	movs	r3, #0
}
 8004aba:	4618      	mov	r0, r3
 8004abc:	3708      	adds	r7, #8
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	bd80      	pop	{r7, pc}
 8004ac2:	bf00      	nop
 8004ac4:	e000e010 	.word	0xe000e010

08004ac8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ad0:	6878      	ldr	r0, [r7, #4]
 8004ad2:	f7ff ff29 	bl	8004928 <__NVIC_SetPriorityGrouping>
}
 8004ad6:	bf00      	nop
 8004ad8:	3708      	adds	r7, #8
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}

08004ade <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004ade:	b580      	push	{r7, lr}
 8004ae0:	b086      	sub	sp, #24
 8004ae2:	af00      	add	r7, sp, #0
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	60b9      	str	r1, [r7, #8]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004aec:	2300      	movs	r3, #0
 8004aee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004af0:	f7ff ff3e 	bl	8004970 <__NVIC_GetPriorityGrouping>
 8004af4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	68b9      	ldr	r1, [r7, #8]
 8004afa:	6978      	ldr	r0, [r7, #20]
 8004afc:	f7ff ff8e 	bl	8004a1c <NVIC_EncodePriority>
 8004b00:	4602      	mov	r2, r0
 8004b02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004b06:	4611      	mov	r1, r2
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f7ff ff5d 	bl	80049c8 <__NVIC_SetPriority>
}
 8004b0e:	bf00      	nop
 8004b10:	3718      	adds	r7, #24
 8004b12:	46bd      	mov	sp, r7
 8004b14:	bd80      	pop	{r7, pc}

08004b16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b16:	b580      	push	{r7, lr}
 8004b18:	b082      	sub	sp, #8
 8004b1a:	af00      	add	r7, sp, #0
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b24:	4618      	mov	r0, r3
 8004b26:	f7ff ff31 	bl	800498c <__NVIC_EnableIRQ>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b082      	sub	sp, #8
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7ff ffa2 	bl	8004a84 <SysTick_Config>
 8004b40:	4603      	mov	r3, r0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
	...

08004b4c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004b54:	2300      	movs	r3, #0
 8004b56:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004b58:	f7ff feb6 	bl	80048c8 <HAL_GetTick>
 8004b5c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e099      	b.n	8004c9c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2202      	movs	r2, #2
 8004b6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f022 0201 	bic.w	r2, r2, #1
 8004b86:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b88:	e00f      	b.n	8004baa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004b8a:	f7ff fe9d 	bl	80048c8 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	2b05      	cmp	r3, #5
 8004b96:	d908      	bls.n	8004baa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2203      	movs	r2, #3
 8004ba2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004ba6:	2303      	movs	r3, #3
 8004ba8:	e078      	b.n	8004c9c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f003 0301 	and.w	r3, r3, #1
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d1e8      	bne.n	8004b8a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004bc0:	697a      	ldr	r2, [r7, #20]
 8004bc2:	4b38      	ldr	r3, [pc, #224]	@ (8004ca4 <HAL_DMA_Init+0x158>)
 8004bc4:	4013      	ands	r3, r2
 8004bc6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	689b      	ldr	r3, [r3, #8]
 8004bd0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bd6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	691b      	ldr	r3, [r3, #16]
 8004bdc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004be2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	699b      	ldr	r3, [r3, #24]
 8004be8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004bee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6a1b      	ldr	r3, [r3, #32]
 8004bf4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c00:	2b04      	cmp	r3, #4
 8004c02:	d107      	bne.n	8004c14 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	4313      	orrs	r3, r2
 8004c0e:	697a      	ldr	r2, [r7, #20]
 8004c10:	4313      	orrs	r3, r2
 8004c12:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	695b      	ldr	r3, [r3, #20]
 8004c22:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	f023 0307 	bic.w	r3, r3, #7
 8004c2a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	697a      	ldr	r2, [r7, #20]
 8004c32:	4313      	orrs	r3, r2
 8004c34:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	2b04      	cmp	r3, #4
 8004c3c:	d117      	bne.n	8004c6e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4313      	orrs	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d00e      	beq.n	8004c6e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 fa91 	bl	8005178 <DMA_CheckFifoParam>
 8004c56:	4603      	mov	r3, r0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d008      	beq.n	8004c6e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2240      	movs	r2, #64	@ 0x40
 8004c60:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e016      	b.n	8004c9c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 fa48 	bl	800510c <DMA_CalcBaseAndBitshift>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c84:	223f      	movs	r2, #63	@ 0x3f
 8004c86:	409a      	lsls	r2, r3
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2201      	movs	r2, #1
 8004c96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	f010803f 	.word	0xf010803f

08004ca8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
 8004cb4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004cbe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d101      	bne.n	8004cce <HAL_DMA_Start_IT+0x26>
 8004cca:	2302      	movs	r3, #2
 8004ccc:	e040      	b.n	8004d50 <HAL_DMA_Start_IT+0xa8>
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2201      	movs	r2, #1
 8004cd2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004cdc:	b2db      	uxtb	r3, r3
 8004cde:	2b01      	cmp	r3, #1
 8004ce0:	d12f      	bne.n	8004d42 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	2200      	movs	r2, #0
 8004cee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	68b9      	ldr	r1, [r7, #8]
 8004cf6:	68f8      	ldr	r0, [r7, #12]
 8004cf8:	f000 f9da 	bl	80050b0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d00:	223f      	movs	r2, #63	@ 0x3f
 8004d02:	409a      	lsls	r2, r3
 8004d04:	693b      	ldr	r3, [r7, #16]
 8004d06:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	681a      	ldr	r2, [r3, #0]
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f042 0216 	orr.w	r2, r2, #22
 8004d16:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d007      	beq.n	8004d30 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f042 0208 	orr.w	r2, r2, #8
 8004d2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	681a      	ldr	r2, [r3, #0]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f042 0201 	orr.w	r2, r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
 8004d40:	e005      	b.n	8004d4e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004d4a:	2302      	movs	r3, #2
 8004d4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004d4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3718      	adds	r7, #24
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	2b02      	cmp	r3, #2
 8004d6a:	d004      	beq.n	8004d76 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2280      	movs	r2, #128	@ 0x80
 8004d70:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e00c      	b.n	8004d90 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2205      	movs	r2, #5
 8004d7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f022 0201 	bic.w	r2, r2, #1
 8004d8c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004da8:	4b8e      	ldr	r3, [pc, #568]	@ (8004fe4 <HAL_DMA_IRQHandler+0x248>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a8e      	ldr	r2, [pc, #568]	@ (8004fe8 <HAL_DMA_IRQHandler+0x24c>)
 8004dae:	fba2 2303 	umull	r2, r3, r2, r3
 8004db2:	0a9b      	lsrs	r3, r3, #10
 8004db4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dba:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004dc6:	2208      	movs	r2, #8
 8004dc8:	409a      	lsls	r2, r3
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d01a      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d013      	beq.n	8004e08 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f022 0204 	bic.w	r2, r2, #4
 8004dee:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004df4:	2208      	movs	r2, #8
 8004df6:	409a      	lsls	r2, r3
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	409a      	lsls	r2, r3
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4013      	ands	r3, r2
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d012      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00b      	beq.n	8004e3e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	409a      	lsls	r2, r3
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e36:	f043 0202 	orr.w	r2, r3, #2
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e42:	2204      	movs	r2, #4
 8004e44:	409a      	lsls	r2, r3
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	4013      	ands	r3, r2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00b      	beq.n	8004e74 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e60:	2204      	movs	r2, #4
 8004e62:	409a      	lsls	r2, r3
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e6c:	f043 0204 	orr.w	r2, r3, #4
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e78:	2210      	movs	r2, #16
 8004e7a:	409a      	lsls	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	4013      	ands	r3, r2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d043      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03c      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004e96:	2210      	movs	r2, #16
 8004e98:	409a      	lsls	r2, r3
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d018      	beq.n	8004ede <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d108      	bne.n	8004ecc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d024      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
 8004eca:	e01f      	b.n	8004f0c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d01b      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	4798      	blx	r3
 8004edc:	e016      	b.n	8004f0c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d107      	bne.n	8004efc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f022 0208 	bic.w	r2, r2, #8
 8004efa:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f10:	2220      	movs	r2, #32
 8004f12:	409a      	lsls	r2, r3
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 808f 	beq.w	800503c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	f003 0310 	and.w	r3, r3, #16
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	f000 8087 	beq.w	800503c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f32:	2220      	movs	r2, #32
 8004f34:	409a      	lsls	r2, r3
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b05      	cmp	r3, #5
 8004f44:	d136      	bne.n	8004fb4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	681a      	ldr	r2, [r3, #0]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f022 0216 	bic.w	r2, r2, #22
 8004f54:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	695a      	ldr	r2, [r3, #20]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f64:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <HAL_DMA_IRQHandler+0x1da>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d007      	beq.n	8004f86 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f022 0208 	bic.w	r2, r2, #8
 8004f84:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004f8a:	223f      	movs	r2, #63	@ 0x3f
 8004f8c:	409a      	lsls	r2, r3
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2201      	movs	r2, #1
 8004f96:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d07e      	beq.n	80050a8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	4798      	blx	r3
        }
        return;
 8004fb2:	e079      	b.n	80050a8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01d      	beq.n	8004ffe <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d10d      	bne.n	8004fec <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d031      	beq.n	800503c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	4798      	blx	r3
 8004fe0:	e02c      	b.n	800503c <HAL_DMA_IRQHandler+0x2a0>
 8004fe2:	bf00      	nop
 8004fe4:	20000004 	.word	0x20000004
 8004fe8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	4798      	blx	r3
 8004ffc:	e01e      	b.n	800503c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005008:	2b00      	cmp	r3, #0
 800500a:	d10f      	bne.n	800502c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	681a      	ldr	r2, [r3, #0]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0210 	bic.w	r2, r2, #16
 800501a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005038:	6878      	ldr	r0, [r7, #4]
 800503a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005040:	2b00      	cmp	r3, #0
 8005042:	d032      	beq.n	80050aa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d022      	beq.n	8005096 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2205      	movs	r2, #5
 8005054:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	681a      	ldr	r2, [r3, #0]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f022 0201 	bic.w	r2, r2, #1
 8005066:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005068:	68bb      	ldr	r3, [r7, #8]
 800506a:	3301      	adds	r3, #1
 800506c:	60bb      	str	r3, [r7, #8]
 800506e:	697a      	ldr	r2, [r7, #20]
 8005070:	429a      	cmp	r2, r3
 8005072:	d307      	bcc.n	8005084 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0301 	and.w	r3, r3, #1
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f2      	bne.n	8005068 <HAL_DMA_IRQHandler+0x2cc>
 8005082:	e000      	b.n	8005086 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005084:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2201      	movs	r2, #1
 800508a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800509a:	2b00      	cmp	r3, #0
 800509c:	d005      	beq.n	80050aa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80050a2:	6878      	ldr	r0, [r7, #4]
 80050a4:	4798      	blx	r3
 80050a6:	e000      	b.n	80050aa <HAL_DMA_IRQHandler+0x30e>
        return;
 80050a8:	bf00      	nop
    }
  }
}
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}

080050b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80050b0:	b480      	push	{r7}
 80050b2:	b085      	sub	sp, #20
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	60f8      	str	r0, [r7, #12]
 80050b8:	60b9      	str	r1, [r7, #8]
 80050ba:	607a      	str	r2, [r7, #4]
 80050bc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80050cc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	683a      	ldr	r2, [r7, #0]
 80050d4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	2b40      	cmp	r3, #64	@ 0x40
 80050dc:	d108      	bne.n	80050f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80050ee:	e007      	b.n	8005100 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]
}
 8005100:	bf00      	nop
 8005102:	3714      	adds	r7, #20
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	b2db      	uxtb	r3, r3
 800511a:	3b10      	subs	r3, #16
 800511c:	4a14      	ldr	r2, [pc, #80]	@ (8005170 <DMA_CalcBaseAndBitshift+0x64>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	091b      	lsrs	r3, r3, #4
 8005124:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005126:	4a13      	ldr	r2, [pc, #76]	@ (8005174 <DMA_CalcBaseAndBitshift+0x68>)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	4413      	add	r3, r2
 800512c:	781b      	ldrb	r3, [r3, #0]
 800512e:	461a      	mov	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d909      	bls.n	800514e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005142:	f023 0303 	bic.w	r3, r3, #3
 8005146:	1d1a      	adds	r2, r3, #4
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	659a      	str	r2, [r3, #88]	@ 0x58
 800514c:	e007      	b.n	800515e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8005156:	f023 0303 	bic.w	r3, r3, #3
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
<<<<<<< HEAD
 8005162:	4618      	mov	r0, r3
 8005164:	3714      	adds	r7, #20
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	aaaaaaab 	.word	0xaaaaaaab
 8005174:	08017e58 	.word	0x08017e58
=======
 8005182:	4618      	mov	r0, r3
 8005184:	3714      	adds	r7, #20
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr
 800518e:	bf00      	nop
 8005190:	aaaaaaab 	.word	0xaaaaaaab
 8005194:	08017e0c 	.word	0x08017e0c
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

08005178 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005188:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d11f      	bne.n	80051d2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	2b03      	cmp	r3, #3
 8005196:	d856      	bhi.n	8005246 <DMA_CheckFifoParam+0xce>
 8005198:	a201      	add	r2, pc, #4	@ (adr r2, 80051a0 <DMA_CheckFifoParam+0x28>)
 800519a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800519e:	bf00      	nop
 80051a0:	080051b1 	.word	0x080051b1
 80051a4:	080051c3 	.word	0x080051c3
 80051a8:	080051b1 	.word	0x080051b1
 80051ac:	08005247 	.word	0x08005247
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051b4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d046      	beq.n	800524a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051c0:	e043      	b.n	800524a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80051ca:	d140      	bne.n	800524e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80051d0:	e03d      	b.n	800524e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	699b      	ldr	r3, [r3, #24]
 80051d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80051da:	d121      	bne.n	8005220 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	2b03      	cmp	r3, #3
 80051e0:	d837      	bhi.n	8005252 <DMA_CheckFifoParam+0xda>
 80051e2:	a201      	add	r2, pc, #4	@ (adr r2, 80051e8 <DMA_CheckFifoParam+0x70>)
 80051e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051e8:	080051f9 	.word	0x080051f9
 80051ec:	080051ff 	.word	0x080051ff
 80051f0:	080051f9 	.word	0x080051f9
 80051f4:	08005211 	.word	0x08005211
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80051f8:	2301      	movs	r3, #1
 80051fa:	73fb      	strb	r3, [r7, #15]
      break;
 80051fc:	e030      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005202:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005206:	2b00      	cmp	r3, #0
 8005208:	d025      	beq.n	8005256 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800520e:	e022      	b.n	8005256 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005214:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8005218:	d11f      	bne.n	800525a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800521e:	e01c      	b.n	800525a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	2b02      	cmp	r3, #2
 8005224:	d903      	bls.n	800522e <DMA_CheckFifoParam+0xb6>
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	2b03      	cmp	r3, #3
 800522a:	d003      	beq.n	8005234 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800522c:	e018      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	73fb      	strb	r3, [r7, #15]
      break;
 8005232:	e015      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005238:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00e      	beq.n	800525e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	73fb      	strb	r3, [r7, #15]
      break;
 8005244:	e00b      	b.n	800525e <DMA_CheckFifoParam+0xe6>
      break;
 8005246:	bf00      	nop
 8005248:	e00a      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;
 800524a:	bf00      	nop
 800524c:	e008      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;
 800524e:	bf00      	nop
 8005250:	e006      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;
 8005252:	bf00      	nop
 8005254:	e004      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;
 8005256:	bf00      	nop
 8005258:	e002      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;   
 800525a:	bf00      	nop
 800525c:	e000      	b.n	8005260 <DMA_CheckFifoParam+0xe8>
      break;
 800525e:	bf00      	nop
    }
  } 
  
  return status; 
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3714      	adds	r7, #20
 8005266:	46bd      	mov	sp, r7
 8005268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526c:	4770      	bx	lr
 800526e:	bf00      	nop

08005270 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005270:	b480      	push	{r7}
 8005272:	b089      	sub	sp, #36	@ 0x24
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800527a:	2300      	movs	r3, #0
 800527c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800527e:	2300      	movs	r3, #0
 8005280:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005282:	2300      	movs	r3, #0
 8005284:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005286:	2300      	movs	r3, #0
 8005288:	61fb      	str	r3, [r7, #28]
 800528a:	e159      	b.n	8005540 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800528c:	2201      	movs	r2, #1
 800528e:	69fb      	ldr	r3, [r7, #28]
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	697a      	ldr	r2, [r7, #20]
 800529c:	4013      	ands	r3, r2
 800529e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80052a0:	693a      	ldr	r2, [r7, #16]
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	f040 8148 	bne.w	800553a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	f003 0303 	and.w	r3, r3, #3
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d005      	beq.n	80052c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d130      	bne.n	8005324 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	005b      	lsls	r3, r3, #1
 80052cc:	2203      	movs	r2, #3
 80052ce:	fa02 f303 	lsl.w	r3, r2, r3
 80052d2:	43db      	mvns	r3, r3
 80052d4:	69ba      	ldr	r2, [r7, #24]
 80052d6:	4013      	ands	r3, r2
 80052d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68da      	ldr	r2, [r3, #12]
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	fa02 f303 	lsl.w	r3, r2, r3
 80052e6:	69ba      	ldr	r2, [r7, #24]
 80052e8:	4313      	orrs	r3, r2
 80052ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	69ba      	ldr	r2, [r7, #24]
 80052f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f8:	2201      	movs	r2, #1
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005300:	43db      	mvns	r3, r3
 8005302:	69ba      	ldr	r2, [r7, #24]
 8005304:	4013      	ands	r3, r2
 8005306:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	091b      	lsrs	r3, r3, #4
 800530e:	f003 0201 	and.w	r2, r3, #1
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	fa02 f303 	lsl.w	r3, r2, r3
 8005318:	69ba      	ldr	r2, [r7, #24]
 800531a:	4313      	orrs	r3, r2
 800531c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	69ba      	ldr	r2, [r7, #24]
 8005322:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	2b03      	cmp	r3, #3
 800532e:	d017      	beq.n	8005360 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	68db      	ldr	r3, [r3, #12]
 8005334:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	005b      	lsls	r3, r3, #1
 800533a:	2203      	movs	r2, #3
 800533c:	fa02 f303 	lsl.w	r3, r2, r3
 8005340:	43db      	mvns	r3, r3
 8005342:	69ba      	ldr	r2, [r7, #24]
 8005344:	4013      	ands	r3, r2
 8005346:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	689a      	ldr	r2, [r3, #8]
 800534c:	69fb      	ldr	r3, [r7, #28]
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	fa02 f303 	lsl.w	r3, r2, r3
 8005354:	69ba      	ldr	r2, [r7, #24]
 8005356:	4313      	orrs	r3, r2
 8005358:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	685b      	ldr	r3, [r3, #4]
 8005364:	f003 0303 	and.w	r3, r3, #3
 8005368:	2b02      	cmp	r3, #2
 800536a:	d123      	bne.n	80053b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	08da      	lsrs	r2, r3, #3
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	3208      	adds	r2, #8
 8005374:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005378:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800537a:	69fb      	ldr	r3, [r7, #28]
 800537c:	f003 0307 	and.w	r3, r3, #7
 8005380:	009b      	lsls	r3, r3, #2
 8005382:	220f      	movs	r2, #15
 8005384:	fa02 f303 	lsl.w	r3, r2, r3
 8005388:	43db      	mvns	r3, r3
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	4013      	ands	r3, r2
 800538e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	691a      	ldr	r2, [r3, #16]
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	f003 0307 	and.w	r3, r3, #7
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	fa02 f303 	lsl.w	r3, r2, r3
 80053a0:	69ba      	ldr	r2, [r7, #24]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	08da      	lsrs	r2, r3, #3
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	3208      	adds	r2, #8
 80053ae:	69b9      	ldr	r1, [r7, #24]
 80053b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	005b      	lsls	r3, r3, #1
 80053be:	2203      	movs	r2, #3
 80053c0:	fa02 f303 	lsl.w	r3, r2, r3
 80053c4:	43db      	mvns	r3, r3
 80053c6:	69ba      	ldr	r2, [r7, #24]
 80053c8:	4013      	ands	r3, r2
 80053ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	685b      	ldr	r3, [r3, #4]
 80053d0:	f003 0203 	and.w	r2, r3, #3
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	005b      	lsls	r3, r3, #1
 80053d8:	fa02 f303 	lsl.w	r3, r2, r3
 80053dc:	69ba      	ldr	r2, [r7, #24]
 80053de:	4313      	orrs	r3, r2
 80053e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	69ba      	ldr	r2, [r7, #24]
 80053e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	f000 80a2 	beq.w	800553a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80053f6:	2300      	movs	r3, #0
 80053f8:	60fb      	str	r3, [r7, #12]
 80053fa:	4b57      	ldr	r3, [pc, #348]	@ (8005558 <HAL_GPIO_Init+0x2e8>)
 80053fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80053fe:	4a56      	ldr	r2, [pc, #344]	@ (8005558 <HAL_GPIO_Init+0x2e8>)
 8005400:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005404:	6453      	str	r3, [r2, #68]	@ 0x44
 8005406:	4b54      	ldr	r3, [pc, #336]	@ (8005558 <HAL_GPIO_Init+0x2e8>)
 8005408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800540a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800540e:	60fb      	str	r3, [r7, #12]
 8005410:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005412:	4a52      	ldr	r2, [pc, #328]	@ (800555c <HAL_GPIO_Init+0x2ec>)
 8005414:	69fb      	ldr	r3, [r7, #28]
 8005416:	089b      	lsrs	r3, r3, #2
 8005418:	3302      	adds	r3, #2
 800541a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800541e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	f003 0303 	and.w	r3, r3, #3
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	220f      	movs	r2, #15
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	69ba      	ldr	r2, [r7, #24]
 8005432:	4013      	ands	r3, r2
 8005434:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a49      	ldr	r2, [pc, #292]	@ (8005560 <HAL_GPIO_Init+0x2f0>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d019      	beq.n	8005472 <HAL_GPIO_Init+0x202>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	4a48      	ldr	r2, [pc, #288]	@ (8005564 <HAL_GPIO_Init+0x2f4>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d013      	beq.n	800546e <HAL_GPIO_Init+0x1fe>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a47      	ldr	r2, [pc, #284]	@ (8005568 <HAL_GPIO_Init+0x2f8>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d00d      	beq.n	800546a <HAL_GPIO_Init+0x1fa>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4a46      	ldr	r2, [pc, #280]	@ (800556c <HAL_GPIO_Init+0x2fc>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d007      	beq.n	8005466 <HAL_GPIO_Init+0x1f6>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4a45      	ldr	r2, [pc, #276]	@ (8005570 <HAL_GPIO_Init+0x300>)
 800545a:	4293      	cmp	r3, r2
 800545c:	d101      	bne.n	8005462 <HAL_GPIO_Init+0x1f2>
 800545e:	2304      	movs	r3, #4
 8005460:	e008      	b.n	8005474 <HAL_GPIO_Init+0x204>
 8005462:	2307      	movs	r3, #7
 8005464:	e006      	b.n	8005474 <HAL_GPIO_Init+0x204>
 8005466:	2303      	movs	r3, #3
 8005468:	e004      	b.n	8005474 <HAL_GPIO_Init+0x204>
 800546a:	2302      	movs	r3, #2
 800546c:	e002      	b.n	8005474 <HAL_GPIO_Init+0x204>
 800546e:	2301      	movs	r3, #1
 8005470:	e000      	b.n	8005474 <HAL_GPIO_Init+0x204>
 8005472:	2300      	movs	r3, #0
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	f002 0203 	and.w	r2, r2, #3
 800547a:	0092      	lsls	r2, r2, #2
 800547c:	4093      	lsls	r3, r2
 800547e:	69ba      	ldr	r2, [r7, #24]
 8005480:	4313      	orrs	r3, r2
 8005482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005484:	4935      	ldr	r1, [pc, #212]	@ (800555c <HAL_GPIO_Init+0x2ec>)
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	089b      	lsrs	r3, r3, #2
 800548a:	3302      	adds	r3, #2
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005492:	4b38      	ldr	r3, [pc, #224]	@ (8005574 <HAL_GPIO_Init+0x304>)
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005498:	693b      	ldr	r3, [r7, #16]
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80054ae:	69ba      	ldr	r2, [r7, #24]
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	4313      	orrs	r3, r2
 80054b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80054b6:	4a2f      	ldr	r2, [pc, #188]	@ (8005574 <HAL_GPIO_Init+0x304>)
 80054b8:	69bb      	ldr	r3, [r7, #24]
 80054ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80054bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005574 <HAL_GPIO_Init+0x304>)
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054c2:	693b      	ldr	r3, [r7, #16]
 80054c4:	43db      	mvns	r3, r3
 80054c6:	69ba      	ldr	r2, [r7, #24]
 80054c8:	4013      	ands	r3, r2
 80054ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d003      	beq.n	80054e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	693b      	ldr	r3, [r7, #16]
 80054dc:	4313      	orrs	r3, r2
 80054de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80054e0:	4a24      	ldr	r2, [pc, #144]	@ (8005574 <HAL_GPIO_Init+0x304>)
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80054e6:	4b23      	ldr	r3, [pc, #140]	@ (8005574 <HAL_GPIO_Init+0x304>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80054ec:	693b      	ldr	r3, [r7, #16]
 80054ee:	43db      	mvns	r3, r3
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	4013      	ands	r3, r2
 80054f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	685b      	ldr	r3, [r3, #4]
 80054fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d003      	beq.n	800550a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005502:	69ba      	ldr	r2, [r7, #24]
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800550a:	4a1a      	ldr	r2, [pc, #104]	@ (8005574 <HAL_GPIO_Init+0x304>)
 800550c:	69bb      	ldr	r3, [r7, #24]
 800550e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005510:	4b18      	ldr	r3, [pc, #96]	@ (8005574 <HAL_GPIO_Init+0x304>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	43db      	mvns	r3, r3
 800551a:	69ba      	ldr	r2, [r7, #24]
 800551c:	4013      	ands	r3, r2
 800551e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d003      	beq.n	8005534 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	4313      	orrs	r3, r2
 8005532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005534:	4a0f      	ldr	r2, [pc, #60]	@ (8005574 <HAL_GPIO_Init+0x304>)
 8005536:	69bb      	ldr	r3, [r7, #24]
 8005538:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	3301      	adds	r3, #1
 800553e:	61fb      	str	r3, [r7, #28]
 8005540:	69fb      	ldr	r3, [r7, #28]
 8005542:	2b0f      	cmp	r3, #15
 8005544:	f67f aea2 	bls.w	800528c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005548:	bf00      	nop
 800554a:	bf00      	nop
 800554c:	3724      	adds	r7, #36	@ 0x24
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40023800 	.word	0x40023800
 800555c:	40013800 	.word	0x40013800
 8005560:	40020000 	.word	0x40020000
 8005564:	40020400 	.word	0x40020400
 8005568:	40020800 	.word	0x40020800
 800556c:	40020c00 	.word	0x40020c00
 8005570:	40021000 	.word	0x40021000
 8005574:	40013c00 	.word	0x40013c00

08005578 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	460b      	mov	r3, r1
 8005582:	807b      	strh	r3, [r7, #2]
 8005584:	4613      	mov	r3, r2
 8005586:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005588:	787b      	ldrb	r3, [r7, #1]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800558e:	887a      	ldrh	r2, [r7, #2]
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005594:	e003      	b.n	800559e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005596:	887b      	ldrh	r3, [r7, #2]
 8005598:	041a      	lsls	r2, r3, #16
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	619a      	str	r2, [r3, #24]
}
 800559e:	bf00      	nop
 80055a0:	370c      	adds	r7, #12
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
	...

080055ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	4603      	mov	r3, r0
 80055b4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80055b6:	4b08      	ldr	r3, [pc, #32]	@ (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055b8:	695a      	ldr	r2, [r3, #20]
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	4013      	ands	r3, r2
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d006      	beq.n	80055d0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80055c2:	4a05      	ldr	r2, [pc, #20]	@ (80055d8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c4:	88fb      	ldrh	r3, [r7, #6]
 80055c6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80055c8:	88fb      	ldrh	r3, [r7, #6]
 80055ca:	4618      	mov	r0, r3
 80055cc:	f7fb fdc4 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}
 80055d8:	40013c00 	.word	0x40013c00

080055dc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af02      	add	r7, sp, #8
 80055e2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d101      	bne.n	80055ee <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e101      	b.n	80057f2 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 80055fa:	b2db      	uxtb	r3, r3
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d106      	bne.n	800560e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f009 fd67 	bl	800f0dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2203      	movs	r2, #3
 8005612:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800561c:	d102      	bne.n	8005624 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2200      	movs	r2, #0
 8005622:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4618      	mov	r0, r3
 800562a:	f003 ff5c 	bl	80094e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6818      	ldr	r0, [r3, #0]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	7c1a      	ldrb	r2, [r3, #16]
 8005636:	f88d 2000 	strb.w	r2, [sp]
 800563a:	3304      	adds	r3, #4
 800563c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800563e:	f003 fe3b 	bl	80092b8 <USB_CoreInit>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	d005      	beq.n	8005654 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2202      	movs	r2, #2
 800564c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005650:	2301      	movs	r3, #1
 8005652:	e0ce      	b.n	80057f2 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2100      	movs	r1, #0
 800565a:	4618      	mov	r0, r3
 800565c:	f003 ff54 	bl	8009508 <USB_SetCurrentMode>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d005      	beq.n	8005672 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2202      	movs	r2, #2
 800566a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e0bf      	b.n	80057f2 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005672:	2300      	movs	r3, #0
 8005674:	73fb      	strb	r3, [r7, #15]
 8005676:	e04a      	b.n	800570e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005678:	7bfa      	ldrb	r2, [r7, #15]
 800567a:	6879      	ldr	r1, [r7, #4]
 800567c:	4613      	mov	r3, r2
 800567e:	00db      	lsls	r3, r3, #3
 8005680:	4413      	add	r3, r2
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	440b      	add	r3, r1
 8005686:	3315      	adds	r3, #21
 8005688:	2201      	movs	r2, #1
 800568a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800568c:	7bfa      	ldrb	r2, [r7, #15]
 800568e:	6879      	ldr	r1, [r7, #4]
 8005690:	4613      	mov	r3, r2
 8005692:	00db      	lsls	r3, r3, #3
 8005694:	4413      	add	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	440b      	add	r3, r1
 800569a:	3314      	adds	r3, #20
 800569c:	7bfa      	ldrb	r2, [r7, #15]
 800569e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80056a0:	7bfa      	ldrb	r2, [r7, #15]
 80056a2:	7bfb      	ldrb	r3, [r7, #15]
 80056a4:	b298      	uxth	r0, r3
 80056a6:	6879      	ldr	r1, [r7, #4]
 80056a8:	4613      	mov	r3, r2
 80056aa:	00db      	lsls	r3, r3, #3
 80056ac:	4413      	add	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	440b      	add	r3, r1
 80056b2:	332e      	adds	r3, #46	@ 0x2e
 80056b4:	4602      	mov	r2, r0
 80056b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80056b8:	7bfa      	ldrb	r2, [r7, #15]
 80056ba:	6879      	ldr	r1, [r7, #4]
 80056bc:	4613      	mov	r3, r2
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	4413      	add	r3, r2
 80056c2:	009b      	lsls	r3, r3, #2
 80056c4:	440b      	add	r3, r1
 80056c6:	3318      	adds	r3, #24
 80056c8:	2200      	movs	r2, #0
 80056ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80056cc:	7bfa      	ldrb	r2, [r7, #15]
 80056ce:	6879      	ldr	r1, [r7, #4]
 80056d0:	4613      	mov	r3, r2
 80056d2:	00db      	lsls	r3, r3, #3
 80056d4:	4413      	add	r3, r2
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	440b      	add	r3, r1
 80056da:	331c      	adds	r3, #28
 80056dc:	2200      	movs	r2, #0
 80056de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80056e0:	7bfa      	ldrb	r2, [r7, #15]
 80056e2:	6879      	ldr	r1, [r7, #4]
 80056e4:	4613      	mov	r3, r2
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	4413      	add	r3, r2
 80056ea:	009b      	lsls	r3, r3, #2
 80056ec:	440b      	add	r3, r1
 80056ee:	3320      	adds	r3, #32
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80056f4:	7bfa      	ldrb	r2, [r7, #15]
 80056f6:	6879      	ldr	r1, [r7, #4]
 80056f8:	4613      	mov	r3, r2
 80056fa:	00db      	lsls	r3, r3, #3
 80056fc:	4413      	add	r3, r2
 80056fe:	009b      	lsls	r3, r3, #2
 8005700:	440b      	add	r3, r1
 8005702:	3324      	adds	r3, #36	@ 0x24
 8005704:	2200      	movs	r2, #0
 8005706:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005708:	7bfb      	ldrb	r3, [r7, #15]
 800570a:	3301      	adds	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	791b      	ldrb	r3, [r3, #4]
 8005712:	7bfa      	ldrb	r2, [r7, #15]
 8005714:	429a      	cmp	r2, r3
 8005716:	d3af      	bcc.n	8005678 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005718:	2300      	movs	r3, #0
 800571a:	73fb      	strb	r3, [r7, #15]
 800571c:	e044      	b.n	80057a8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800571e:	7bfa      	ldrb	r2, [r7, #15]
 8005720:	6879      	ldr	r1, [r7, #4]
 8005722:	4613      	mov	r3, r2
 8005724:	00db      	lsls	r3, r3, #3
 8005726:	4413      	add	r3, r2
 8005728:	009b      	lsls	r3, r3, #2
 800572a:	440b      	add	r3, r1
 800572c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005730:	2200      	movs	r2, #0
 8005732:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005734:	7bfa      	ldrb	r2, [r7, #15]
 8005736:	6879      	ldr	r1, [r7, #4]
 8005738:	4613      	mov	r3, r2
 800573a:	00db      	lsls	r3, r3, #3
 800573c:	4413      	add	r3, r2
 800573e:	009b      	lsls	r3, r3, #2
 8005740:	440b      	add	r3, r1
 8005742:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005746:	7bfa      	ldrb	r2, [r7, #15]
 8005748:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800574a:	7bfa      	ldrb	r2, [r7, #15]
 800574c:	6879      	ldr	r1, [r7, #4]
 800574e:	4613      	mov	r3, r2
 8005750:	00db      	lsls	r3, r3, #3
 8005752:	4413      	add	r3, r2
 8005754:	009b      	lsls	r3, r3, #2
 8005756:	440b      	add	r3, r1
 8005758:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005760:	7bfa      	ldrb	r2, [r7, #15]
 8005762:	6879      	ldr	r1, [r7, #4]
 8005764:	4613      	mov	r3, r2
 8005766:	00db      	lsls	r3, r3, #3
 8005768:	4413      	add	r3, r2
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	440b      	add	r3, r1
 800576e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8005772:	2200      	movs	r2, #0
 8005774:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005776:	7bfa      	ldrb	r2, [r7, #15]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	00db      	lsls	r3, r3, #3
 800577e:	4413      	add	r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8005788:	2200      	movs	r2, #0
 800578a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800578c:	7bfa      	ldrb	r2, [r7, #15]
 800578e:	6879      	ldr	r1, [r7, #4]
 8005790:	4613      	mov	r3, r2
 8005792:	00db      	lsls	r3, r3, #3
 8005794:	4413      	add	r3, r2
 8005796:	009b      	lsls	r3, r3, #2
 8005798:	440b      	add	r3, r1
 800579a:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	3301      	adds	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	791b      	ldrb	r3, [r3, #4]
 80057ac:	7bfa      	ldrb	r2, [r7, #15]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3b5      	bcc.n	800571e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6818      	ldr	r0, [r3, #0]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	7c1a      	ldrb	r2, [r3, #16]
 80057ba:	f88d 2000 	strb.w	r2, [sp]
 80057be:	3304      	adds	r3, #4
 80057c0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80057c2:	f003 feed 	bl	80095a0 <USB_DevInit>
 80057c6:	4603      	mov	r3, r0
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d005      	beq.n	80057d8 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2202      	movs	r2, #2
 80057d0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80057d4:	2301      	movs	r3, #1
 80057d6:	e00c      	b.n	80057f2 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f004 ff37 	bl	800a65e <USB_DevDisconnect>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b084      	sub	sp, #16
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800580e:	2b01      	cmp	r3, #1
 8005810:	d101      	bne.n	8005816 <HAL_PCD_Start+0x1c>
 8005812:	2302      	movs	r3, #2
 8005814:	e022      	b.n	800585c <HAL_PCD_Start+0x62>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2201      	movs	r2, #1
 800581a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	68db      	ldr	r3, [r3, #12]
 8005822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005826:	2b00      	cmp	r3, #0
 8005828:	d009      	beq.n	800583e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800582e:	2b01      	cmp	r3, #1
 8005830:	d105      	bne.n	800583e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005836:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4618      	mov	r0, r3
 8005844:	f003 fe3e 	bl	80094c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	4618      	mov	r0, r3
 800584e:	f004 fee5 	bl	800a61c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800585a:	2300      	movs	r3, #0
}
 800585c:	4618      	mov	r0, r3
 800585e:	3710      	adds	r7, #16
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}

08005864 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005864:	b590      	push	{r4, r7, lr}
 8005866:	b08d      	sub	sp, #52	@ 0x34
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4618      	mov	r0, r3
 800587c:	f004 ffa3 	bl	800a7c6 <USB_GetMode>
 8005880:	4603      	mov	r3, r0
 8005882:	2b00      	cmp	r3, #0
 8005884:	f040 848c 	bne.w	80061a0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4618      	mov	r0, r3
 800588e:	f004 ff07 	bl	800a6a0 <USB_ReadInterrupts>
 8005892:	4603      	mov	r3, r0
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 8482 	beq.w	800619e <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a0:	689b      	ldr	r3, [r3, #8]
 80058a2:	0a1b      	lsrs	r3, r3, #8
 80058a4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4618      	mov	r0, r3
 80058b4:	f004 fef4 	bl	800a6a0 <USB_ReadInterrupts>
 80058b8:	4603      	mov	r3, r0
 80058ba:	f003 0302 	and.w	r3, r3, #2
 80058be:	2b02      	cmp	r3, #2
 80058c0:	d107      	bne.n	80058d2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	695a      	ldr	r2, [r3, #20]
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f002 0202 	and.w	r2, r2, #2
 80058d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	4618      	mov	r0, r3
 80058d8:	f004 fee2 	bl	800a6a0 <USB_ReadInterrupts>
 80058dc:	4603      	mov	r3, r0
 80058de:	f003 0310 	and.w	r3, r3, #16
 80058e2:	2b10      	cmp	r3, #16
 80058e4:	d161      	bne.n	80059aa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	699a      	ldr	r2, [r3, #24]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f022 0210 	bic.w	r2, r2, #16
 80058f4:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80058f6:	6a3b      	ldr	r3, [r7, #32]
 80058f8:	6a1b      	ldr	r3, [r3, #32]
 80058fa:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80058fc:	69bb      	ldr	r3, [r7, #24]
 80058fe:	f003 020f 	and.w	r2, r3, #15
 8005902:	4613      	mov	r3, r2
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	009b      	lsls	r3, r3, #2
 800590a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	4413      	add	r3, r2
 8005912:	3304      	adds	r3, #4
 8005914:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800591c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005920:	d124      	bne.n	800596c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005928:	4013      	ands	r3, r2
 800592a:	2b00      	cmp	r3, #0
 800592c:	d035      	beq.n	800599a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005932:	69bb      	ldr	r3, [r7, #24]
 8005934:	091b      	lsrs	r3, r3, #4
 8005936:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005938:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800593c:	b29b      	uxth	r3, r3
 800593e:	461a      	mov	r2, r3
 8005940:	6a38      	ldr	r0, [r7, #32]
 8005942:	f004 fd19 	bl	800a378 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005946:	697b      	ldr	r3, [r7, #20]
 8005948:	68da      	ldr	r2, [r3, #12]
 800594a:	69bb      	ldr	r3, [r7, #24]
 800594c:	091b      	lsrs	r3, r3, #4
 800594e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005952:	441a      	add	r2, r3
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	69bb      	ldr	r3, [r7, #24]
 800595e:	091b      	lsrs	r3, r3, #4
 8005960:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005964:	441a      	add	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	615a      	str	r2, [r3, #20]
 800596a:	e016      	b.n	800599a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005972:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8005976:	d110      	bne.n	800599a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800597e:	2208      	movs	r2, #8
 8005980:	4619      	mov	r1, r3
 8005982:	6a38      	ldr	r0, [r7, #32]
 8005984:	f004 fcf8 	bl	800a378 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005988:	697b      	ldr	r3, [r7, #20]
 800598a:	695a      	ldr	r2, [r3, #20]
 800598c:	69bb      	ldr	r3, [r7, #24]
 800598e:	091b      	lsrs	r3, r3, #4
 8005990:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005994:	441a      	add	r2, r3
 8005996:	697b      	ldr	r3, [r7, #20]
 8005998:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	699a      	ldr	r2, [r3, #24]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f042 0210 	orr.w	r2, r2, #16
 80059a8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4618      	mov	r0, r3
 80059b0:	f004 fe76 	bl	800a6a0 <USB_ReadInterrupts>
 80059b4:	4603      	mov	r3, r0
 80059b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80059ba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80059be:	f040 80a7 	bne.w	8005b10 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80059c2:	2300      	movs	r3, #0
 80059c4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 fe7b 	bl	800a6c6 <USB_ReadDevAllOutEpInterrupt>
 80059d0:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 80059d2:	e099      	b.n	8005b08 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80059d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	f000 808e 	beq.w	8005afc <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e6:	b2d2      	uxtb	r2, r2
 80059e8:	4611      	mov	r1, r2
 80059ea:	4618      	mov	r0, r3
 80059ec:	f004 fe9f 	bl	800a72e <USB_ReadDevOutEPInterrupt>
 80059f0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80059f2:	693b      	ldr	r3, [r7, #16]
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d00c      	beq.n	8005a16 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80059fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059fe:	015a      	lsls	r2, r3, #5
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	4413      	add	r3, r2
 8005a04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a08:	461a      	mov	r2, r3
 8005a0a:	2301      	movs	r3, #1
 8005a0c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005a0e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 fea3 	bl	800675c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f003 0308 	and.w	r3, r3, #8
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00c      	beq.n	8005a3a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a22:	015a      	lsls	r2, r3, #5
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	4413      	add	r3, r2
 8005a28:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a2c:	461a      	mov	r2, r3
 8005a2e:	2308      	movs	r3, #8
 8005a30:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005a32:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f000 ff79 	bl	800692c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d008      	beq.n	8005a56 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	015a      	lsls	r2, r3, #5
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	4413      	add	r3, r2
 8005a4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a50:	461a      	mov	r2, r3
 8005a52:	2310      	movs	r3, #16
 8005a54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005a56:	693b      	ldr	r3, [r7, #16]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d030      	beq.n	8005ac2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a68:	2b80      	cmp	r3, #128	@ 0x80
 8005a6a:	d109      	bne.n	8005a80 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	69fa      	ldr	r2, [r7, #28]
 8005a76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a7a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005a7e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8005a80:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a82:	4613      	mov	r3, r2
 8005a84:	00db      	lsls	r3, r3, #3
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	4413      	add	r3, r2
 8005a92:	3304      	adds	r3, #4
 8005a94:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005a96:	697b      	ldr	r3, [r7, #20]
 8005a98:	78db      	ldrb	r3, [r3, #3]
 8005a9a:	2b01      	cmp	r3, #1
 8005a9c:	d108      	bne.n	8005ab0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8005aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	4619      	mov	r1, r3
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f009 fc12 	bl	800f2d4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab2:	015a      	lsls	r2, r3, #5
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	4413      	add	r3, r2
 8005ab8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005abc:	461a      	mov	r2, r3
 8005abe:	2302      	movs	r3, #2
 8005ac0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	f003 0320 	and.w	r3, r3, #32
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	d008      	beq.n	8005ade <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ace:	015a      	lsls	r2, r3, #5
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	4413      	add	r3, r2
 8005ad4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ad8:	461a      	mov	r2, r3
 8005ada:	2320      	movs	r3, #32
 8005adc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d009      	beq.n	8005afc <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	015a      	lsls	r2, r3, #5
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	4413      	add	r3, r2
 8005af0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af4:	461a      	mov	r2, r3
 8005af6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005afa:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	3301      	adds	r3, #1
 8005b00:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005b02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b04:	085b      	lsrs	r3, r3, #1
 8005b06:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	f47f af62 	bne.w	80059d4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f004 fdc3 	bl	800a6a0 <USB_ReadInterrupts>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005b20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005b24:	f040 80db 	bne.w	8005cde <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f004 fde4 	bl	800a6fa <USB_ReadDevAllInEpInterrupt>
 8005b32:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005b38:	e0cd      	b.n	8005cd6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8005b3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b3c:	f003 0301 	and.w	r3, r3, #1
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f000 80c2 	beq.w	8005cca <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b4c:	b2d2      	uxtb	r2, r2
 8005b4e:	4611      	mov	r1, r2
 8005b50:	4618      	mov	r0, r3
 8005b52:	f004 fe0a 	bl	800a76a <USB_ReadDevInEPInterrupt>
 8005b56:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d057      	beq.n	8005c12 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b64:	f003 030f 	and.w	r3, r3, #15
 8005b68:	2201      	movs	r2, #1
 8005b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005b70:	69fb      	ldr	r3, [r7, #28]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005b76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	43db      	mvns	r3, r3
 8005b7c:	69f9      	ldr	r1, [r7, #28]
 8005b7e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005b82:	4013      	ands	r3, r2
 8005b84:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8005b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b88:	015a      	lsls	r2, r3, #5
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	4413      	add	r3, r2
 8005b8e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b92:	461a      	mov	r2, r3
 8005b94:	2301      	movs	r3, #1
 8005b96:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	799b      	ldrb	r3, [r3, #6]
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d132      	bne.n	8005c06 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005ba0:	6879      	ldr	r1, [r7, #4]
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	4613      	mov	r3, r2
 8005ba6:	00db      	lsls	r3, r3, #3
 8005ba8:	4413      	add	r3, r2
 8005baa:	009b      	lsls	r3, r3, #2
 8005bac:	440b      	add	r3, r1
 8005bae:	3320      	adds	r3, #32
 8005bb0:	6819      	ldr	r1, [r3, #0]
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bb6:	4613      	mov	r3, r2
 8005bb8:	00db      	lsls	r3, r3, #3
 8005bba:	4413      	add	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4403      	add	r3, r0
 8005bc0:	331c      	adds	r3, #28
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	4419      	add	r1, r3
 8005bc6:	6878      	ldr	r0, [r7, #4]
 8005bc8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bca:	4613      	mov	r3, r2
 8005bcc:	00db      	lsls	r3, r3, #3
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	4403      	add	r3, r0
 8005bd4:	3320      	adds	r3, #32
 8005bd6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d113      	bne.n	8005c06 <HAL_PCD_IRQHandler+0x3a2>
 8005bde:	6879      	ldr	r1, [r7, #4]
 8005be0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005be2:	4613      	mov	r3, r2
 8005be4:	00db      	lsls	r3, r3, #3
 8005be6:	4413      	add	r3, r2
 8005be8:	009b      	lsls	r3, r3, #2
 8005bea:	440b      	add	r3, r1
 8005bec:	3324      	adds	r3, #36	@ 0x24
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d108      	bne.n	8005c06 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6818      	ldr	r0, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bfe:	461a      	mov	r2, r3
 8005c00:	2101      	movs	r1, #1
 8005c02:	f004 fe11 	bl	800a828 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c08:	b2db      	uxtb	r3, r3
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f009 fae6 	bl	800f1de <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0308 	and.w	r3, r3, #8
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d008      	beq.n	8005c2e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005c1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	69fb      	ldr	r3, [r7, #28]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c28:	461a      	mov	r2, r3
 8005c2a:	2308      	movs	r3, #8
 8005c2c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005c2e:	693b      	ldr	r3, [r7, #16]
 8005c30:	f003 0310 	and.w	r3, r3, #16
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d008      	beq.n	8005c4a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005c38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3a:	015a      	lsls	r2, r3, #5
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	4413      	add	r3, r2
 8005c40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c44:	461a      	mov	r2, r3
 8005c46:	2310      	movs	r3, #16
 8005c48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d008      	beq.n	8005c66 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005c54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c56:	015a      	lsls	r2, r3, #5
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	4413      	add	r3, r2
 8005c5c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005c60:	461a      	mov	r2, r3
 8005c62:	2340      	movs	r3, #64	@ 0x40
 8005c64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005c66:	693b      	ldr	r3, [r7, #16]
 8005c68:	f003 0302 	and.w	r3, r3, #2
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d023      	beq.n	8005cb8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8005c70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005c72:	6a38      	ldr	r0, [r7, #32]
 8005c74:	f003 fdf8 	bl	8009868 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8005c78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	00db      	lsls	r3, r3, #3
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	3310      	adds	r3, #16
 8005c84:	687a      	ldr	r2, [r7, #4]
 8005c86:	4413      	add	r3, r2
 8005c88:	3304      	adds	r3, #4
 8005c8a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	78db      	ldrb	r3, [r3, #3]
 8005c90:	2b01      	cmp	r3, #1
 8005c92:	d108      	bne.n	8005ca6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	2200      	movs	r2, #0
 8005c98:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c9c:	b2db      	uxtb	r3, r3
 8005c9e:	4619      	mov	r1, r3
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f009 fb29 	bl	800f2f8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2302      	movs	r3, #2
 8005cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f000 fcbd 	bl	8006644 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ccc:	3301      	adds	r3, #1
 8005cce:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd2:	085b      	lsrs	r3, r3, #1
 8005cd4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005cd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	f47f af2e 	bne.w	8005b3a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f004 fcdc 	bl	800a6a0 <USB_ReadInterrupts>
 8005ce8:	4603      	mov	r3, r0
 8005cea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005cee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005cf2:	d122      	bne.n	8005d3a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005cf4:	69fb      	ldr	r3, [r7, #28]
 8005cf6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	69fa      	ldr	r2, [r7, #28]
 8005cfe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d02:	f023 0301 	bic.w	r3, r3, #1
 8005d06:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d108      	bne.n	8005d24 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2200      	movs	r2, #0
 8005d16:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005d1a:	2100      	movs	r1, #0
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fea3 	bl	8006a68 <HAL_PCDEx_LPM_Callback>
 8005d22:	e002      	b.n	8005d2a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f009 fac7 	bl	800f2b8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	695a      	ldr	r2, [r3, #20]
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005d38:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f004 fcae 	bl	800a6a0 <USB_ReadInterrupts>
 8005d44:	4603      	mov	r3, r0
 8005d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005d4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005d4e:	d112      	bne.n	8005d76 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f003 0301 	and.w	r3, r3, #1
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d102      	bne.n	8005d66 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005d60:	6878      	ldr	r0, [r7, #4]
 8005d62:	f009 fa83 	bl	800f26c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	695a      	ldr	r2, [r3, #20]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8005d74:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	f004 fc90 	bl	800a6a0 <USB_ReadInterrupts>
 8005d80:	4603      	mov	r3, r0
 8005d82:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005d86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d8a:	f040 80b7 	bne.w	8005efc <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005d8e:	69fb      	ldr	r3, [r7, #28]
 8005d90:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	69fa      	ldr	r2, [r7, #28]
 8005d98:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005d9c:	f023 0301 	bic.w	r3, r3, #1
 8005da0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	2110      	movs	r1, #16
 8005da8:	4618      	mov	r0, r3
 8005daa:	f003 fd5d 	bl	8009868 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005dae:	2300      	movs	r3, #0
 8005db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005db2:	e046      	b.n	8005e42 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005db4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005db6:	015a      	lsls	r2, r3, #5
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	4413      	add	r3, r2
 8005dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dc0:	461a      	mov	r2, r3
 8005dc2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005dc6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005de2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005de6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005de8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005df4:	461a      	mov	r2, r3
 8005df6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005dfa:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005dfc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfe:	015a      	lsls	r2, r3, #5
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	4413      	add	r3, r2
 8005e04:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e0c:	0151      	lsls	r1, r2, #5
 8005e0e:	69fa      	ldr	r2, [r7, #28]
 8005e10:	440a      	add	r2, r1
 8005e12:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e16:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e1a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005e1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e1e:	015a      	lsls	r2, r3, #5
 8005e20:	69fb      	ldr	r3, [r7, #28]
 8005e22:	4413      	add	r3, r2
 8005e24:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e2c:	0151      	lsls	r1, r2, #5
 8005e2e:	69fa      	ldr	r2, [r7, #28]
 8005e30:	440a      	add	r2, r1
 8005e32:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e36:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005e3a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e3e:	3301      	adds	r3, #1
 8005e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	791b      	ldrb	r3, [r3, #4]
 8005e46:	461a      	mov	r2, r3
 8005e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e4a:	4293      	cmp	r3, r2
 8005e4c:	d3b2      	bcc.n	8005db4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005e4e:	69fb      	ldr	r3, [r7, #28]
 8005e50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e54:	69db      	ldr	r3, [r3, #28]
 8005e56:	69fa      	ldr	r2, [r7, #28]
 8005e58:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e5c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005e60:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	7bdb      	ldrb	r3, [r3, #15]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d016      	beq.n	8005e98 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005e6a:	69fb      	ldr	r3, [r7, #28]
 8005e6c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e74:	69fa      	ldr	r2, [r7, #28]
 8005e76:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e7a:	f043 030b 	orr.w	r3, r3, #11
 8005e7e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005e82:	69fb      	ldr	r3, [r7, #28]
 8005e84:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005e8a:	69fa      	ldr	r2, [r7, #28]
 8005e8c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005e90:	f043 030b 	orr.w	r3, r3, #11
 8005e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8005e96:	e015      	b.n	8005ec4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005e98:	69fb      	ldr	r3, [r7, #28]
 8005e9a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e9e:	695b      	ldr	r3, [r3, #20]
 8005ea0:	69fa      	ldr	r2, [r7, #28]
 8005ea2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ea6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005eaa:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005eae:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005eb0:	69fb      	ldr	r3, [r7, #28]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eb6:	691b      	ldr	r3, [r3, #16]
 8005eb8:	69fa      	ldr	r2, [r7, #28]
 8005eba:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ebe:	f043 030b 	orr.w	r3, r3, #11
 8005ec2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005ec4:	69fb      	ldr	r3, [r7, #28]
 8005ec6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	69fa      	ldr	r2, [r7, #28]
 8005ece:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005ed2:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005ed6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6818      	ldr	r0, [r3, #0]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005ee6:	461a      	mov	r2, r3
 8005ee8:	f004 fc9e 	bl	800a828 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695a      	ldr	r2, [r3, #20]
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005efa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f004 fbcd 	bl	800a6a0 <USB_ReadInterrupts>
 8005f06:	4603      	mov	r3, r0
 8005f08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005f0c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f10:	d123      	bne.n	8005f5a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4618      	mov	r0, r3
 8005f18:	f004 fc63 	bl	800a7e2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	4618      	mov	r0, r3
 8005f22:	f003 fd1a 	bl	800995a <USB_GetDevSpeed>
 8005f26:	4603      	mov	r3, r0
 8005f28:	461a      	mov	r2, r3
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681c      	ldr	r4, [r3, #0]
 8005f32:	f001 f9c9 	bl	80072c8 <HAL_RCC_GetHCLKFreq>
 8005f36:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005f3c:	461a      	mov	r2, r3
 8005f3e:	4620      	mov	r0, r4
 8005f40:	f003 fa1e 	bl	8009380 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f009 f972 	bl	800f22e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	695a      	ldr	r2, [r3, #20]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005f58:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f004 fb9e 	bl	800a6a0 <USB_ReadInterrupts>
 8005f64:	4603      	mov	r3, r0
 8005f66:	f003 0308 	and.w	r3, r3, #8
 8005f6a:	2b08      	cmp	r3, #8
 8005f6c:	d10a      	bne.n	8005f84 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f009 f94f 	bl	800f212 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	695a      	ldr	r2, [r3, #20]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f002 0208 	and.w	r2, r2, #8
 8005f82:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f004 fb89 	bl	800a6a0 <USB_ReadInterrupts>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f94:	2b80      	cmp	r3, #128	@ 0x80
 8005f96:	d123      	bne.n	8005fe0 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005f98:	6a3b      	ldr	r3, [r7, #32]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005fa0:	6a3b      	ldr	r3, [r7, #32]
 8005fa2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fa4:	2301      	movs	r3, #1
 8005fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fa8:	e014      	b.n	8005fd4 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fae:	4613      	mov	r3, r2
 8005fb0:	00db      	lsls	r3, r3, #3
 8005fb2:	4413      	add	r3, r2
 8005fb4:	009b      	lsls	r3, r3, #2
 8005fb6:	440b      	add	r3, r1
 8005fb8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005fbc:	781b      	ldrb	r3, [r3, #0]
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d105      	bne.n	8005fce <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005fc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	4619      	mov	r1, r3
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 fb0a 	bl	80065e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	791b      	ldrb	r3, [r3, #4]
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d3e4      	bcc.n	8005faa <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	f004 fb5b 	bl	800a6a0 <USB_ReadInterrupts>
 8005fea:	4603      	mov	r3, r0
 8005fec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005ff0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005ff4:	d13c      	bne.n	8006070 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ffa:	e02b      	b.n	8006054 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ffe:	015a      	lsls	r2, r3, #5
 8006000:	69fb      	ldr	r3, [r7, #28]
 8006002:	4413      	add	r3, r2
 8006004:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800600c:	6879      	ldr	r1, [r7, #4]
 800600e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006010:	4613      	mov	r3, r2
 8006012:	00db      	lsls	r3, r3, #3
 8006014:	4413      	add	r3, r2
 8006016:	009b      	lsls	r3, r3, #2
 8006018:	440b      	add	r3, r1
 800601a:	3318      	adds	r3, #24
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	2b01      	cmp	r3, #1
 8006020:	d115      	bne.n	800604e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006022:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006024:	2b00      	cmp	r3, #0
 8006026:	da12      	bge.n	800604e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006028:	6879      	ldr	r1, [r7, #4]
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	4613      	mov	r3, r2
 800602e:	00db      	lsls	r3, r3, #3
 8006030:	4413      	add	r3, r2
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	440b      	add	r3, r1
 8006036:	3317      	adds	r3, #23
 8006038:	2201      	movs	r2, #1
 800603a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800603c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800603e:	b2db      	uxtb	r3, r3
 8006040:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006044:	b2db      	uxtb	r3, r3
 8006046:	4619      	mov	r1, r3
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 faca 	bl	80065e2 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	3301      	adds	r3, #1
 8006052:	627b      	str	r3, [r7, #36]	@ 0x24
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	791b      	ldrb	r3, [r3, #4]
 8006058:	461a      	mov	r2, r3
 800605a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800605c:	4293      	cmp	r3, r2
 800605e:	d3cd      	bcc.n	8005ffc <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	695a      	ldr	r2, [r3, #20]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800606e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	4618      	mov	r0, r3
 8006076:	f004 fb13 	bl	800a6a0 <USB_ReadInterrupts>
 800607a:	4603      	mov	r3, r0
 800607c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006080:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006084:	d156      	bne.n	8006134 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006086:	2301      	movs	r3, #1
 8006088:	627b      	str	r3, [r7, #36]	@ 0x24
 800608a:	e045      	b.n	8006118 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800608c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	4413      	add	r3, r2
 8006094:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800609c:	6879      	ldr	r1, [r7, #4]
 800609e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060a0:	4613      	mov	r3, r2
 80060a2:	00db      	lsls	r3, r3, #3
 80060a4:	4413      	add	r3, r2
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	440b      	add	r3, r1
 80060aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b01      	cmp	r3, #1
 80060b2:	d12e      	bne.n	8006112 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060b4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	da2b      	bge.n	8006112 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 80060c6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d121      	bne.n	8006112 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d2:	4613      	mov	r3, r2
 80060d4:	00db      	lsls	r3, r3, #3
 80060d6:	4413      	add	r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	f203 2357 	addw	r3, r3, #599	@ 0x257
 80060e0:	2201      	movs	r2, #1
 80060e2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80060e4:	6a3b      	ldr	r3, [r7, #32]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80060ec:	6a3b      	ldr	r3, [r7, #32]
 80060ee:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80060f0:	6a3b      	ldr	r3, [r7, #32]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d10a      	bne.n	8006112 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006102:	685b      	ldr	r3, [r3, #4]
 8006104:	69fa      	ldr	r2, [r7, #28]
 8006106:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800610a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800610e:	6053      	str	r3, [r2, #4]
            break;
 8006110:	e008      	b.n	8006124 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006114:	3301      	adds	r3, #1
 8006116:	627b      	str	r3, [r7, #36]	@ 0x24
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	791b      	ldrb	r3, [r3, #4]
 800611c:	461a      	mov	r2, r3
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	4293      	cmp	r3, r2
 8006122:	d3b3      	bcc.n	800608c <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	695a      	ldr	r2, [r3, #20]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8006132:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	4618      	mov	r0, r3
 800613a:	f004 fab1 	bl	800a6a0 <USB_ReadInterrupts>
 800613e:	4603      	mov	r3, r0
 8006140:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006144:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006148:	d10a      	bne.n	8006160 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f009 f8e6 	bl	800f31c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	695a      	ldr	r2, [r3, #20]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 800615e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4618      	mov	r0, r3
 8006166:	f004 fa9b 	bl	800a6a0 <USB_ReadInterrupts>
 800616a:	4603      	mov	r3, r0
 800616c:	f003 0304 	and.w	r3, r3, #4
 8006170:	2b04      	cmp	r3, #4
 8006172:	d115      	bne.n	80061a0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800617c:	69bb      	ldr	r3, [r7, #24]
 800617e:	f003 0304 	and.w	r3, r3, #4
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	f009 f8d6 	bl	800f338 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	6859      	ldr	r1, [r3, #4]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	69ba      	ldr	r2, [r7, #24]
 8006198:	430a      	orrs	r2, r1
 800619a:	605a      	str	r2, [r3, #4]
 800619c:	e000      	b.n	80061a0 <HAL_PCD_IRQHandler+0x93c>
      return;
 800619e:	bf00      	nop
    }
  }
}
 80061a0:	3734      	adds	r7, #52	@ 0x34
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd90      	pop	{r4, r7, pc}

080061a6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80061a6:	b580      	push	{r7, lr}
 80061a8:	b082      	sub	sp, #8
 80061aa:	af00      	add	r7, sp, #0
 80061ac:	6078      	str	r0, [r7, #4]
 80061ae:	460b      	mov	r3, r1
 80061b0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80061b8:	2b01      	cmp	r3, #1
 80061ba:	d101      	bne.n	80061c0 <HAL_PCD_SetAddress+0x1a>
 80061bc:	2302      	movs	r3, #2
 80061be:	e012      	b.n	80061e6 <HAL_PCD_SetAddress+0x40>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	78fa      	ldrb	r2, [r7, #3]
 80061d4:	4611      	mov	r1, r2
 80061d6:	4618      	mov	r0, r3
 80061d8:	f004 f9fa 	bl	800a5d0 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b084      	sub	sp, #16
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	4608      	mov	r0, r1
 80061f8:	4611      	mov	r1, r2
 80061fa:	461a      	mov	r2, r3
 80061fc:	4603      	mov	r3, r0
 80061fe:	70fb      	strb	r3, [r7, #3]
 8006200:	460b      	mov	r3, r1
 8006202:	803b      	strh	r3, [r7, #0]
 8006204:	4613      	mov	r3, r2
 8006206:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8006208:	2300      	movs	r3, #0
 800620a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800620c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006210:	2b00      	cmp	r3, #0
 8006212:	da0f      	bge.n	8006234 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006214:	78fb      	ldrb	r3, [r7, #3]
 8006216:	f003 020f 	and.w	r2, r3, #15
 800621a:	4613      	mov	r3, r2
 800621c:	00db      	lsls	r3, r3, #3
 800621e:	4413      	add	r3, r2
 8006220:	009b      	lsls	r3, r3, #2
 8006222:	3310      	adds	r3, #16
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	4413      	add	r3, r2
 8006228:	3304      	adds	r3, #4
 800622a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	2201      	movs	r2, #1
 8006230:	705a      	strb	r2, [r3, #1]
 8006232:	e00f      	b.n	8006254 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006234:	78fb      	ldrb	r3, [r7, #3]
 8006236:	f003 020f 	and.w	r2, r3, #15
 800623a:	4613      	mov	r3, r2
 800623c:	00db      	lsls	r3, r3, #3
 800623e:	4413      	add	r3, r2
 8006240:	009b      	lsls	r3, r3, #2
 8006242:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006246:	687a      	ldr	r2, [r7, #4]
 8006248:	4413      	add	r3, r2
 800624a:	3304      	adds	r3, #4
 800624c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2200      	movs	r2, #0
 8006252:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8006254:	78fb      	ldrb	r3, [r7, #3]
 8006256:	f003 030f 	and.w	r3, r3, #15
 800625a:	b2da      	uxtb	r2, r3
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8006260:	883b      	ldrh	r3, [r7, #0]
 8006262:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	78ba      	ldrb	r2, [r7, #2]
 800626e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	785b      	ldrb	r3, [r3, #1]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d004      	beq.n	8006282 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	781b      	ldrb	r3, [r3, #0]
 800627c:	461a      	mov	r2, r3
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8006282:	78bb      	ldrb	r3, [r7, #2]
 8006284:	2b02      	cmp	r3, #2
 8006286:	d102      	bne.n	800628e <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	2200      	movs	r2, #0
 800628c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006294:	2b01      	cmp	r3, #1
 8006296:	d101      	bne.n	800629c <HAL_PCD_EP_Open+0xae>
 8006298:	2302      	movs	r3, #2
 800629a:	e00e      	b.n	80062ba <HAL_PCD_EP_Open+0xcc>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2201      	movs	r2, #1
 80062a0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68f9      	ldr	r1, [r7, #12]
 80062aa:	4618      	mov	r0, r3
 80062ac:	f003 fb7a 	bl	80099a4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 80062b8:	7afb      	ldrb	r3, [r7, #11]
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}

080062c2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
 80062ca:	460b      	mov	r3, r1
 80062cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80062ce:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	da0f      	bge.n	80062f6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80062d6:	78fb      	ldrb	r3, [r7, #3]
 80062d8:	f003 020f 	and.w	r2, r3, #15
 80062dc:	4613      	mov	r3, r2
 80062de:	00db      	lsls	r3, r3, #3
 80062e0:	4413      	add	r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	3310      	adds	r3, #16
 80062e6:	687a      	ldr	r2, [r7, #4]
 80062e8:	4413      	add	r3, r2
 80062ea:	3304      	adds	r3, #4
 80062ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	2201      	movs	r2, #1
 80062f2:	705a      	strb	r2, [r3, #1]
 80062f4:	e00f      	b.n	8006316 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062f6:	78fb      	ldrb	r3, [r7, #3]
 80062f8:	f003 020f 	and.w	r2, r3, #15
 80062fc:	4613      	mov	r3, r2
 80062fe:	00db      	lsls	r3, r3, #3
 8006300:	4413      	add	r3, r2
 8006302:	009b      	lsls	r3, r3, #2
 8006304:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	4413      	add	r3, r2
 800630c:	3304      	adds	r3, #4
 800630e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8006316:	78fb      	ldrb	r3, [r7, #3]
 8006318:	f003 030f 	and.w	r3, r3, #15
 800631c:	b2da      	uxtb	r2, r3
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8006328:	2b01      	cmp	r3, #1
 800632a:	d101      	bne.n	8006330 <HAL_PCD_EP_Close+0x6e>
 800632c:	2302      	movs	r3, #2
 800632e:	e00e      	b.n	800634e <HAL_PCD_EP_Close+0x8c>
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	68f9      	ldr	r1, [r7, #12]
 800633e:	4618      	mov	r0, r3
 8006340:	f003 fbb8 	bl	8009ab4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2200      	movs	r2, #0
 8006348:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006356:	b580      	push	{r7, lr}
 8006358:	b086      	sub	sp, #24
 800635a:	af00      	add	r7, sp, #0
 800635c:	60f8      	str	r0, [r7, #12]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
 8006362:	460b      	mov	r3, r1
 8006364:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006366:	7afb      	ldrb	r3, [r7, #11]
 8006368:	f003 020f 	and.w	r2, r3, #15
 800636c:	4613      	mov	r3, r2
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	4413      	add	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006378:	68fa      	ldr	r2, [r7, #12]
 800637a:	4413      	add	r3, r2
 800637c:	3304      	adds	r3, #4
 800637e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006380:	697b      	ldr	r3, [r7, #20]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8006386:	697b      	ldr	r3, [r7, #20]
 8006388:	683a      	ldr	r2, [r7, #0]
 800638a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	2200      	movs	r2, #0
 8006390:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8006392:	697b      	ldr	r3, [r7, #20]
 8006394:	2200      	movs	r2, #0
 8006396:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006398:	7afb      	ldrb	r3, [r7, #11]
 800639a:	f003 030f 	and.w	r3, r3, #15
 800639e:	b2da      	uxtb	r2, r3
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	799b      	ldrb	r3, [r3, #6]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d102      	bne.n	80063b2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80063ac:	687a      	ldr	r2, [r7, #4]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6818      	ldr	r0, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	799b      	ldrb	r3, [r3, #6]
 80063ba:	461a      	mov	r2, r3
 80063bc:	6979      	ldr	r1, [r7, #20]
 80063be:	f003 fc55 	bl	8009c6c <USB_EPStartXfer>

  return HAL_OK;
 80063c2:	2300      	movs	r3, #0
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3718      	adds	r7, #24
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 80063cc:	b480      	push	{r7}
 80063ce:	b083      	sub	sp, #12
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	460b      	mov	r3, r1
 80063d6:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80063d8:	78fb      	ldrb	r3, [r7, #3]
 80063da:	f003 020f 	and.w	r2, r3, #15
 80063de:	6879      	ldr	r1, [r7, #4]
 80063e0:	4613      	mov	r3, r2
 80063e2:	00db      	lsls	r3, r3, #3
 80063e4:	4413      	add	r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	440b      	add	r3, r1
 80063ea:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 80063ee:	681b      	ldr	r3, [r3, #0]
}
 80063f0:	4618      	mov	r0, r3
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr

080063fc <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b086      	sub	sp, #24
 8006400:	af00      	add	r7, sp, #0
 8006402:	60f8      	str	r0, [r7, #12]
 8006404:	607a      	str	r2, [r7, #4]
 8006406:	603b      	str	r3, [r7, #0]
 8006408:	460b      	mov	r3, r1
 800640a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800640c:	7afb      	ldrb	r3, [r7, #11]
 800640e:	f003 020f 	and.w	r2, r3, #15
 8006412:	4613      	mov	r3, r2
 8006414:	00db      	lsls	r3, r3, #3
 8006416:	4413      	add	r3, r2
 8006418:	009b      	lsls	r3, r3, #2
 800641a:	3310      	adds	r3, #16
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4413      	add	r3, r2
 8006420:	3304      	adds	r3, #4
 8006422:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	683a      	ldr	r2, [r7, #0]
 800642e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8006430:	697b      	ldr	r3, [r7, #20]
 8006432:	2200      	movs	r2, #0
 8006434:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	2201      	movs	r2, #1
 800643a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800643c:	7afb      	ldrb	r3, [r7, #11]
 800643e:	f003 030f 	and.w	r3, r3, #15
 8006442:	b2da      	uxtb	r2, r3
 8006444:	697b      	ldr	r3, [r7, #20]
 8006446:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	799b      	ldrb	r3, [r3, #6]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d102      	bne.n	8006456 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8006450:	687a      	ldr	r2, [r7, #4]
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	6818      	ldr	r0, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	799b      	ldrb	r3, [r3, #6]
 800645e:	461a      	mov	r2, r3
 8006460:	6979      	ldr	r1, [r7, #20]
 8006462:	f003 fc03 	bl	8009c6c <USB_EPStartXfer>

  return HAL_OK;
 8006466:	2300      	movs	r3, #0
}
 8006468:	4618      	mov	r0, r3
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
 8006478:	460b      	mov	r3, r1
 800647a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	f003 030f 	and.w	r3, r3, #15
 8006482:	687a      	ldr	r2, [r7, #4]
 8006484:	7912      	ldrb	r2, [r2, #4]
 8006486:	4293      	cmp	r3, r2
 8006488:	d901      	bls.n	800648e <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800648a:	2301      	movs	r3, #1
 800648c:	e04f      	b.n	800652e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800648e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006492:	2b00      	cmp	r3, #0
 8006494:	da0f      	bge.n	80064b6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006496:	78fb      	ldrb	r3, [r7, #3]
 8006498:	f003 020f 	and.w	r2, r3, #15
 800649c:	4613      	mov	r3, r2
 800649e:	00db      	lsls	r3, r3, #3
 80064a0:	4413      	add	r3, r2
 80064a2:	009b      	lsls	r3, r3, #2
 80064a4:	3310      	adds	r3, #16
 80064a6:	687a      	ldr	r2, [r7, #4]
 80064a8:	4413      	add	r3, r2
 80064aa:	3304      	adds	r3, #4
 80064ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2201      	movs	r2, #1
 80064b2:	705a      	strb	r2, [r3, #1]
 80064b4:	e00d      	b.n	80064d2 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80064b6:	78fa      	ldrb	r2, [r7, #3]
 80064b8:	4613      	mov	r3, r2
 80064ba:	00db      	lsls	r3, r3, #3
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80064c4:	687a      	ldr	r2, [r7, #4]
 80064c6:	4413      	add	r3, r2
 80064c8:	3304      	adds	r3, #4
 80064ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	2200      	movs	r2, #0
 80064d0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2201      	movs	r2, #1
 80064d6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80064d8:	78fb      	ldrb	r3, [r7, #3]
 80064da:	f003 030f 	and.w	r3, r3, #15
 80064de:	b2da      	uxtb	r2, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d101      	bne.n	80064f2 <HAL_PCD_EP_SetStall+0x82>
 80064ee:	2302      	movs	r3, #2
 80064f0:	e01d      	b.n	800652e <HAL_PCD_EP_SetStall+0xbe>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68f9      	ldr	r1, [r7, #12]
 8006500:	4618      	mov	r0, r3
 8006502:	f003 ff91 	bl	800a428 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006506:	78fb      	ldrb	r3, [r7, #3]
 8006508:	f003 030f 	and.w	r3, r3, #15
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6818      	ldr	r0, [r3, #0]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	7999      	ldrb	r1, [r3, #6]
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800651e:	461a      	mov	r2, r3
 8006520:	f004 f982 	bl	800a828 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800652c:	2300      	movs	r3, #0
}
 800652e:	4618      	mov	r0, r3
 8006530:	3710      	adds	r7, #16
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}

08006536 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006536:	b580      	push	{r7, lr}
 8006538:	b084      	sub	sp, #16
 800653a:	af00      	add	r7, sp, #0
 800653c:	6078      	str	r0, [r7, #4]
 800653e:	460b      	mov	r3, r1
 8006540:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006542:	78fb      	ldrb	r3, [r7, #3]
 8006544:	f003 030f 	and.w	r3, r3, #15
 8006548:	687a      	ldr	r2, [r7, #4]
 800654a:	7912      	ldrb	r2, [r2, #4]
 800654c:	4293      	cmp	r3, r2
 800654e:	d901      	bls.n	8006554 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e042      	b.n	80065da <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006558:	2b00      	cmp	r3, #0
 800655a:	da0f      	bge.n	800657c <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800655c:	78fb      	ldrb	r3, [r7, #3]
 800655e:	f003 020f 	and.w	r2, r3, #15
 8006562:	4613      	mov	r3, r2
 8006564:	00db      	lsls	r3, r3, #3
 8006566:	4413      	add	r3, r2
 8006568:	009b      	lsls	r3, r3, #2
 800656a:	3310      	adds	r3, #16
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	4413      	add	r3, r2
 8006570:	3304      	adds	r3, #4
 8006572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	2201      	movs	r2, #1
 8006578:	705a      	strb	r2, [r3, #1]
 800657a:	e00f      	b.n	800659c <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800657c:	78fb      	ldrb	r3, [r7, #3]
 800657e:	f003 020f 	and.w	r2, r3, #15
 8006582:	4613      	mov	r3, r2
 8006584:	00db      	lsls	r3, r3, #3
 8006586:	4413      	add	r3, r2
 8006588:	009b      	lsls	r3, r3, #2
 800658a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	4413      	add	r3, r2
 8006592:	3304      	adds	r3, #4
 8006594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	2200      	movs	r2, #0
 800659a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80065a2:	78fb      	ldrb	r3, [r7, #3]
 80065a4:	f003 030f 	and.w	r3, r3, #15
 80065a8:	b2da      	uxtb	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80065b4:	2b01      	cmp	r3, #1
 80065b6:	d101      	bne.n	80065bc <HAL_PCD_EP_ClrStall+0x86>
 80065b8:	2302      	movs	r3, #2
 80065ba:	e00e      	b.n	80065da <HAL_PCD_EP_ClrStall+0xa4>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	68f9      	ldr	r1, [r7, #12]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f003 ff9a 	bl	800a504 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2200      	movs	r2, #0
 80065d4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80065d8:	2300      	movs	r3, #0
}
 80065da:	4618      	mov	r0, r3
 80065dc:	3710      	adds	r7, #16
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}

080065e2 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80065e2:	b580      	push	{r7, lr}
 80065e4:	b084      	sub	sp, #16
 80065e6:	af00      	add	r7, sp, #0
 80065e8:	6078      	str	r0, [r7, #4]
 80065ea:	460b      	mov	r3, r1
 80065ec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80065ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	da0c      	bge.n	8006610 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80065f6:	78fb      	ldrb	r3, [r7, #3]
 80065f8:	f003 020f 	and.w	r2, r3, #15
 80065fc:	4613      	mov	r3, r2
 80065fe:	00db      	lsls	r3, r3, #3
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	3310      	adds	r3, #16
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	4413      	add	r3, r2
 800660a:	3304      	adds	r3, #4
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e00c      	b.n	800662a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006610:	78fb      	ldrb	r3, [r7, #3]
 8006612:	f003 020f 	and.w	r2, r3, #15
 8006616:	4613      	mov	r3, r2
 8006618:	00db      	lsls	r3, r3, #3
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006622:	687a      	ldr	r2, [r7, #4]
 8006624:	4413      	add	r3, r2
 8006626:	3304      	adds	r3, #4
 8006628:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	68f9      	ldr	r1, [r7, #12]
 8006630:	4618      	mov	r0, r3
 8006632:	f003 fdb9 	bl	800a1a8 <USB_EPStopXfer>
 8006636:	4603      	mov	r3, r0
 8006638:	72fb      	strb	r3, [r7, #11]

  return ret;
 800663a:	7afb      	ldrb	r3, [r7, #11]
}
 800663c:	4618      	mov	r0, r3
 800663e:	3710      	adds	r7, #16
 8006640:	46bd      	mov	sp, r7
 8006642:	bd80      	pop	{r7, pc}

08006644 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b08a      	sub	sp, #40	@ 0x28
 8006648:	af02      	add	r7, sp, #8
 800664a:	6078      	str	r0, [r7, #4]
 800664c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006658:	683a      	ldr	r2, [r7, #0]
 800665a:	4613      	mov	r3, r2
 800665c:	00db      	lsls	r3, r3, #3
 800665e:	4413      	add	r3, r2
 8006660:	009b      	lsls	r3, r3, #2
 8006662:	3310      	adds	r3, #16
 8006664:	687a      	ldr	r2, [r7, #4]
 8006666:	4413      	add	r3, r2
 8006668:	3304      	adds	r3, #4
 800666a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	695a      	ldr	r2, [r3, #20]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	429a      	cmp	r2, r3
 8006676:	d901      	bls.n	800667c <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8006678:	2301      	movs	r3, #1
 800667a:	e06b      	b.n	8006754 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	691a      	ldr	r2, [r3, #16]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	695b      	ldr	r3, [r3, #20]
 8006684:	1ad3      	subs	r3, r2, r3
 8006686:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	689b      	ldr	r3, [r3, #8]
 800668c:	69fa      	ldr	r2, [r7, #28]
 800668e:	429a      	cmp	r2, r3
 8006690:	d902      	bls.n	8006698 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8006698:	69fb      	ldr	r3, [r7, #28]
 800669a:	3303      	adds	r3, #3
 800669c:	089b      	lsrs	r3, r3, #2
 800669e:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066a0:	e02a      	b.n	80066f8 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	691a      	ldr	r2, [r3, #16]
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	1ad3      	subs	r3, r2, r3
 80066ac:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	689b      	ldr	r3, [r3, #8]
 80066b2:	69fa      	ldr	r2, [r7, #28]
 80066b4:	429a      	cmp	r2, r3
 80066b6:	d902      	bls.n	80066be <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80066be:	69fb      	ldr	r3, [r7, #28]
 80066c0:	3303      	adds	r3, #3
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	68d9      	ldr	r1, [r3, #12]
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	b2da      	uxtb	r2, r3
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80066d6:	9300      	str	r3, [sp, #0]
 80066d8:	4603      	mov	r3, r0
 80066da:	6978      	ldr	r0, [r7, #20]
 80066dc:	f003 fe0e 	bl	800a2fc <USB_WritePacket>

    ep->xfer_buff  += len;
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	69fb      	ldr	r3, [r7, #28]
 80066e6:	441a      	add	r2, r3
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	695a      	ldr	r2, [r3, #20]
 80066f0:	69fb      	ldr	r3, [r7, #28]
 80066f2:	441a      	add	r2, r3
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	015a      	lsls	r2, r3, #5
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	4413      	add	r3, r2
 8006700:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006704:	699b      	ldr	r3, [r3, #24]
 8006706:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006708:	69ba      	ldr	r2, [r7, #24]
 800670a:	429a      	cmp	r2, r3
 800670c:	d809      	bhi.n	8006722 <PCD_WriteEmptyTxFifo+0xde>
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006716:	429a      	cmp	r2, r3
 8006718:	d203      	bcs.n	8006722 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	691b      	ldr	r3, [r3, #16]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d1bf      	bne.n	80066a2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	691a      	ldr	r2, [r3, #16]
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	695b      	ldr	r3, [r3, #20]
 800672a:	429a      	cmp	r2, r3
 800672c:	d811      	bhi.n	8006752 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	f003 030f 	and.w	r3, r3, #15
 8006734:	2201      	movs	r2, #1
 8006736:	fa02 f303 	lsl.w	r3, r2, r3
 800673a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006744:	68bb      	ldr	r3, [r7, #8]
 8006746:	43db      	mvns	r3, r3
 8006748:	6939      	ldr	r1, [r7, #16]
 800674a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800674e:	4013      	ands	r3, r2
 8006750:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3720      	adds	r7, #32
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b088      	sub	sp, #32
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800676c:	69fb      	ldr	r3, [r7, #28]
 800676e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	333c      	adds	r3, #60	@ 0x3c
 8006774:	3304      	adds	r3, #4
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	015a      	lsls	r2, r3, #5
 800677e:	69bb      	ldr	r3, [r7, #24]
 8006780:	4413      	add	r3, r2
 8006782:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006786:	689b      	ldr	r3, [r3, #8]
 8006788:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	799b      	ldrb	r3, [r3, #6]
 800678e:	2b01      	cmp	r3, #1
 8006790:	d17b      	bne.n	800688a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	f003 0308 	and.w	r3, r3, #8
 8006798:	2b00      	cmp	r3, #0
 800679a:	d015      	beq.n	80067c8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	4a61      	ldr	r2, [pc, #388]	@ (8006924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067a0:	4293      	cmp	r3, r2
 80067a2:	f240 80b9 	bls.w	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	f000 80b3 	beq.w	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	015a      	lsls	r2, r3, #5
 80067b6:	69bb      	ldr	r3, [r7, #24]
 80067b8:	4413      	add	r3, r2
 80067ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067be:	461a      	mov	r2, r3
 80067c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80067c4:	6093      	str	r3, [r2, #8]
 80067c6:	e0a7      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	f003 0320 	and.w	r3, r3, #32
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d009      	beq.n	80067e6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	015a      	lsls	r2, r3, #5
 80067d6:	69bb      	ldr	r3, [r7, #24]
 80067d8:	4413      	add	r3, r2
 80067da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80067de:	461a      	mov	r2, r3
 80067e0:	2320      	movs	r3, #32
 80067e2:	6093      	str	r3, [r2, #8]
 80067e4:	e098      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	f040 8093 	bne.w	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	4a4b      	ldr	r2, [pc, #300]	@ (8006924 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d90f      	bls.n	800681a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00a      	beq.n	800681a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	015a      	lsls	r2, r3, #5
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	4413      	add	r3, r2
 800680c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006810:	461a      	mov	r2, r3
 8006812:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006816:	6093      	str	r3, [r2, #8]
 8006818:	e07e      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800681a:	683a      	ldr	r2, [r7, #0]
 800681c:	4613      	mov	r3, r2
 800681e:	00db      	lsls	r3, r3, #3
 8006820:	4413      	add	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006828:	687a      	ldr	r2, [r7, #4]
 800682a:	4413      	add	r3, r2
 800682c:	3304      	adds	r3, #4
 800682e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	6a1a      	ldr	r2, [r3, #32]
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	0159      	lsls	r1, r3, #5
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	440b      	add	r3, r1
 800683c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006846:	1ad2      	subs	r2, r2, r3
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d114      	bne.n	800687c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	691b      	ldr	r3, [r3, #16]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006864:	461a      	mov	r2, r3
 8006866:	2101      	movs	r1, #1
 8006868:	f003 ffde 	bl	800a828 <USB_EP0_OutStart>
 800686c:	e006      	b.n	800687c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	68da      	ldr	r2, [r3, #12]
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	695b      	ldr	r3, [r3, #20]
 8006876:	441a      	add	r2, r3
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	b2db      	uxtb	r3, r3
 8006880:	4619      	mov	r1, r3
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f008 fc90 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
 8006888:	e046      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4a26      	ldr	r2, [pc, #152]	@ (8006928 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d124      	bne.n	80068dc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8006892:	693b      	ldr	r3, [r7, #16]
 8006894:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006898:	2b00      	cmp	r3, #0
 800689a:	d00a      	beq.n	80068b2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800689c:	683b      	ldr	r3, [r7, #0]
 800689e:	015a      	lsls	r2, r3, #5
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	4413      	add	r3, r2
 80068a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068a8:	461a      	mov	r2, r3
 80068aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80068ae:	6093      	str	r3, [r2, #8]
 80068b0:	e032      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80068b2:	693b      	ldr	r3, [r7, #16]
 80068b4:	f003 0320 	and.w	r3, r3, #32
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d008      	beq.n	80068ce <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	015a      	lsls	r2, r3, #5
 80068c0:	69bb      	ldr	r3, [r7, #24]
 80068c2:	4413      	add	r3, r2
 80068c4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80068c8:	461a      	mov	r2, r3
 80068ca:	2320      	movs	r3, #32
 80068cc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	b2db      	uxtb	r3, r3
 80068d2:	4619      	mov	r1, r3
 80068d4:	6878      	ldr	r0, [r7, #4]
 80068d6:	f008 fc67 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
 80068da:	e01d      	b.n	8006918 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d114      	bne.n	800690c <PCD_EP_OutXfrComplete_int+0x1b0>
 80068e2:	6879      	ldr	r1, [r7, #4]
 80068e4:	683a      	ldr	r2, [r7, #0]
 80068e6:	4613      	mov	r3, r2
 80068e8:	00db      	lsls	r3, r3, #3
 80068ea:	4413      	add	r3, r2
 80068ec:	009b      	lsls	r3, r3, #2
 80068ee:	440b      	add	r3, r1
 80068f0:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d108      	bne.n	800690c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6818      	ldr	r0, [r3, #0]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006904:	461a      	mov	r2, r3
 8006906:	2100      	movs	r1, #0
 8006908:	f003 ff8e 	bl	800a828 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f008 fc48 	bl	800f1a8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006918:	2300      	movs	r3, #0
}
 800691a:	4618      	mov	r0, r3
 800691c:	3720      	adds	r7, #32
 800691e:	46bd      	mov	sp, r7
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	4f54300a 	.word	0x4f54300a
 8006928:	4f54310a 	.word	0x4f54310a

0800692c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af00      	add	r7, sp, #0
 8006932:	6078      	str	r0, [r7, #4]
 8006934:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800693c:	697b      	ldr	r3, [r7, #20]
 800693e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	333c      	adds	r3, #60	@ 0x3c
 8006944:	3304      	adds	r3, #4
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800694a:	683b      	ldr	r3, [r7, #0]
 800694c:	015a      	lsls	r2, r3, #5
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	4413      	add	r3, r2
 8006952:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	4a15      	ldr	r2, [pc, #84]	@ (80069b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d90e      	bls.n	8006980 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006968:	2b00      	cmp	r3, #0
 800696a:	d009      	beq.n	8006980 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	015a      	lsls	r2, r3, #5
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	4413      	add	r3, r2
 8006974:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006978:	461a      	mov	r2, r3
 800697a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800697e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8006980:	6878      	ldr	r0, [r7, #4]
 8006982:	f008 fbff 	bl	800f184 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	4a0a      	ldr	r2, [pc, #40]	@ (80069b4 <PCD_EP_OutSetupPacket_int+0x88>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d90c      	bls.n	80069a8 <PCD_EP_OutSetupPacket_int+0x7c>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	799b      	ldrb	r3, [r3, #6]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d108      	bne.n	80069a8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	6818      	ldr	r0, [r3, #0]
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80069a0:	461a      	mov	r2, r3
 80069a2:	2101      	movs	r1, #1
 80069a4:	f003 ff40 	bl	800a828 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80069a8:	2300      	movs	r3, #0
}
 80069aa:	4618      	mov	r0, r3
 80069ac:	3718      	adds	r7, #24
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}
 80069b2:	bf00      	nop
 80069b4:	4f54300a 	.word	0x4f54300a

080069b8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b085      	sub	sp, #20
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	460b      	mov	r3, r1
 80069c2:	70fb      	strb	r3, [r7, #3]
 80069c4:	4613      	mov	r3, r2
 80069c6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ce:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80069d0:	78fb      	ldrb	r3, [r7, #3]
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d107      	bne.n	80069e6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80069d6:	883b      	ldrh	r3, [r7, #0]
 80069d8:	0419      	lsls	r1, r3, #16
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	430a      	orrs	r2, r1
 80069e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80069e4:	e028      	b.n	8006a38 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069ec:	0c1b      	lsrs	r3, r3, #16
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	4413      	add	r3, r2
 80069f2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80069f4:	2300      	movs	r3, #0
 80069f6:	73fb      	strb	r3, [r7, #15]
 80069f8:	e00d      	b.n	8006a16 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	7bfb      	ldrb	r3, [r7, #15]
 8006a00:	3340      	adds	r3, #64	@ 0x40
 8006a02:	009b      	lsls	r3, r3, #2
 8006a04:	4413      	add	r3, r2
 8006a06:	685b      	ldr	r3, [r3, #4]
 8006a08:	0c1b      	lsrs	r3, r3, #16
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	4413      	add	r3, r2
 8006a0e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006a10:	7bfb      	ldrb	r3, [r7, #15]
 8006a12:	3301      	adds	r3, #1
 8006a14:	73fb      	strb	r3, [r7, #15]
 8006a16:	7bfa      	ldrb	r2, [r7, #15]
 8006a18:	78fb      	ldrb	r3, [r7, #3]
 8006a1a:	3b01      	subs	r3, #1
 8006a1c:	429a      	cmp	r2, r3
 8006a1e:	d3ec      	bcc.n	80069fa <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006a20:	883b      	ldrh	r3, [r7, #0]
 8006a22:	0418      	lsls	r0, r3, #16
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6819      	ldr	r1, [r3, #0]
 8006a28:	78fb      	ldrb	r3, [r7, #3]
 8006a2a:	3b01      	subs	r3, #1
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	4302      	orrs	r2, r0
 8006a30:	3340      	adds	r3, #64	@ 0x40
 8006a32:	009b      	lsls	r3, r3, #2
 8006a34:	440b      	add	r3, r1
 8006a36:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006a38:	2300      	movs	r3, #0
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	460b      	mov	r3, r1
 8006a50:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	887a      	ldrh	r2, [r7, #2]
 8006a58:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	370c      	adds	r7, #12
 8006a60:	46bd      	mov	sp, r7
 8006a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a66:	4770      	bx	lr

08006a68 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006a68:	b480      	push	{r7}
 8006a6a:	b083      	sub	sp, #12
 8006a6c:	af00      	add	r7, sp, #0
 8006a6e:	6078      	str	r0, [r7, #4]
 8006a70:	460b      	mov	r3, r1
 8006a72:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8006a74:	bf00      	nop
 8006a76:	370c      	adds	r7, #12
 8006a78:	46bd      	mov	sp, r7
 8006a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7e:	4770      	bx	lr

08006a80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	b086      	sub	sp, #24
 8006a84:	af00      	add	r7, sp, #0
 8006a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d101      	bne.n	8006a92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	e267      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0301 	and.w	r3, r3, #1
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d075      	beq.n	8006b8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006a9e:	4b88      	ldr	r3, [pc, #544]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006aa0:	689b      	ldr	r3, [r3, #8]
 8006aa2:	f003 030c 	and.w	r3, r3, #12
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d00c      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006aaa:	4b85      	ldr	r3, [pc, #532]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006ab2:	2b08      	cmp	r3, #8
 8006ab4:	d112      	bne.n	8006adc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006ab6:	4b82      	ldr	r3, [pc, #520]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006abe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006ac2:	d10b      	bne.n	8006adc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ac4:	4b7e      	ldr	r3, [pc, #504]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d05b      	beq.n	8006b88 <HAL_RCC_OscConfig+0x108>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d157      	bne.n	8006b88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e242      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ae4:	d106      	bne.n	8006af4 <HAL_RCC_OscConfig+0x74>
 8006ae6:	4b76      	ldr	r3, [pc, #472]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a75      	ldr	r2, [pc, #468]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006aec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006af0:	6013      	str	r3, [r2, #0]
 8006af2:	e01d      	b.n	8006b30 <HAL_RCC_OscConfig+0xb0>
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006afc:	d10c      	bne.n	8006b18 <HAL_RCC_OscConfig+0x98>
 8006afe:	4b70      	ldr	r3, [pc, #448]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	4a6f      	ldr	r2, [pc, #444]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006b08:	6013      	str	r3, [r2, #0]
 8006b0a:	4b6d      	ldr	r3, [pc, #436]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	4a6c      	ldr	r2, [pc, #432]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006b14:	6013      	str	r3, [r2, #0]
 8006b16:	e00b      	b.n	8006b30 <HAL_RCC_OscConfig+0xb0>
 8006b18:	4b69      	ldr	r3, [pc, #420]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	4a68      	ldr	r2, [pc, #416]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006b22:	6013      	str	r3, [r2, #0]
 8006b24:	4b66      	ldr	r3, [pc, #408]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	4a65      	ldr	r2, [pc, #404]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d013      	beq.n	8006b60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b38:	f7fd fec6 	bl	80048c8 <HAL_GetTick>
 8006b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3e:	e008      	b.n	8006b52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b40:	f7fd fec2 	bl	80048c8 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	693b      	ldr	r3, [r7, #16]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	2b64      	cmp	r3, #100	@ 0x64
 8006b4c:	d901      	bls.n	8006b52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006b4e:	2303      	movs	r3, #3
 8006b50:	e207      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b52:	4b5b      	ldr	r3, [pc, #364]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d0f0      	beq.n	8006b40 <HAL_RCC_OscConfig+0xc0>
 8006b5e:	e014      	b.n	8006b8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b60:	f7fd feb2 	bl	80048c8 <HAL_GetTick>
 8006b64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b66:	e008      	b.n	8006b7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b68:	f7fd feae 	bl	80048c8 <HAL_GetTick>
 8006b6c:	4602      	mov	r2, r0
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	2b64      	cmp	r3, #100	@ 0x64
 8006b74:	d901      	bls.n	8006b7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006b76:	2303      	movs	r3, #3
 8006b78:	e1f3      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006b7a:	4b51      	ldr	r3, [pc, #324]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d1f0      	bne.n	8006b68 <HAL_RCC_OscConfig+0xe8>
 8006b86:	e000      	b.n	8006b8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0302 	and.w	r3, r3, #2
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d063      	beq.n	8006c5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006b96:	4b4a      	ldr	r3, [pc, #296]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006b98:	689b      	ldr	r3, [r3, #8]
 8006b9a:	f003 030c 	and.w	r3, r3, #12
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d00b      	beq.n	8006bba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006ba2:	4b47      	ldr	r3, [pc, #284]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006ba4:	689b      	ldr	r3, [r3, #8]
 8006ba6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006baa:	2b08      	cmp	r3, #8
 8006bac:	d11c      	bne.n	8006be8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006bae:	4b44      	ldr	r3, [pc, #272]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006bb0:	685b      	ldr	r3, [r3, #4]
 8006bb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d116      	bne.n	8006be8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006bba:	4b41      	ldr	r3, [pc, #260]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 0302 	and.w	r3, r3, #2
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d005      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x152>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	2b01      	cmp	r3, #1
 8006bcc:	d001      	beq.n	8006bd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e1c7      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	691b      	ldr	r3, [r3, #16]
 8006bde:	00db      	lsls	r3, r3, #3
 8006be0:	4937      	ldr	r1, [pc, #220]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006be2:	4313      	orrs	r3, r2
 8006be4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006be6:	e03a      	b.n	8006c5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	68db      	ldr	r3, [r3, #12]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d020      	beq.n	8006c32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bf0:	4b34      	ldr	r3, [pc, #208]	@ (8006cc4 <HAL_RCC_OscConfig+0x244>)
 8006bf2:	2201      	movs	r2, #1
 8006bf4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf6:	f7fd fe67 	bl	80048c8 <HAL_GetTick>
 8006bfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006bfc:	e008      	b.n	8006c10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bfe:	f7fd fe63 	bl	80048c8 <HAL_GetTick>
 8006c02:	4602      	mov	r2, r0
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	1ad3      	subs	r3, r2, r3
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e1a8      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c10:	4b2b      	ldr	r3, [pc, #172]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0f0      	beq.n	8006bfe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006c1c:	4b28      	ldr	r3, [pc, #160]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	00db      	lsls	r3, r3, #3
 8006c2a:	4925      	ldr	r1, [pc, #148]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	600b      	str	r3, [r1, #0]
 8006c30:	e015      	b.n	8006c5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c32:	4b24      	ldr	r3, [pc, #144]	@ (8006cc4 <HAL_RCC_OscConfig+0x244>)
 8006c34:	2200      	movs	r2, #0
 8006c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c38:	f7fd fe46 	bl	80048c8 <HAL_GetTick>
 8006c3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c3e:	e008      	b.n	8006c52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c40:	f7fd fe42 	bl	80048c8 <HAL_GetTick>
 8006c44:	4602      	mov	r2, r0
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	1ad3      	subs	r3, r2, r3
 8006c4a:	2b02      	cmp	r3, #2
 8006c4c:	d901      	bls.n	8006c52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006c4e:	2303      	movs	r3, #3
 8006c50:	e187      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006c52:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f003 0302 	and.w	r3, r3, #2
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d1f0      	bne.n	8006c40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0308 	and.w	r3, r3, #8
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d036      	beq.n	8006cd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	695b      	ldr	r3, [r3, #20]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d016      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c72:	4b15      	ldr	r3, [pc, #84]	@ (8006cc8 <HAL_RCC_OscConfig+0x248>)
 8006c74:	2201      	movs	r2, #1
 8006c76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c78:	f7fd fe26 	bl	80048c8 <HAL_GetTick>
 8006c7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c7e:	e008      	b.n	8006c92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c80:	f7fd fe22 	bl	80048c8 <HAL_GetTick>
 8006c84:	4602      	mov	r2, r0
 8006c86:	693b      	ldr	r3, [r7, #16]
 8006c88:	1ad3      	subs	r3, r2, r3
 8006c8a:	2b02      	cmp	r3, #2
 8006c8c:	d901      	bls.n	8006c92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006c8e:	2303      	movs	r3, #3
 8006c90:	e167      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006c92:	4b0b      	ldr	r3, [pc, #44]	@ (8006cc0 <HAL_RCC_OscConfig+0x240>)
 8006c94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006c96:	f003 0302 	and.w	r3, r3, #2
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d0f0      	beq.n	8006c80 <HAL_RCC_OscConfig+0x200>
 8006c9e:	e01b      	b.n	8006cd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ca0:	4b09      	ldr	r3, [pc, #36]	@ (8006cc8 <HAL_RCC_OscConfig+0x248>)
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ca6:	f7fd fe0f 	bl	80048c8 <HAL_GetTick>
 8006caa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006cac:	e00e      	b.n	8006ccc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006cae:	f7fd fe0b 	bl	80048c8 <HAL_GetTick>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	1ad3      	subs	r3, r2, r3
 8006cb8:	2b02      	cmp	r3, #2
 8006cba:	d907      	bls.n	8006ccc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006cbc:	2303      	movs	r3, #3
 8006cbe:	e150      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
 8006cc0:	40023800 	.word	0x40023800
 8006cc4:	42470000 	.word	0x42470000
 8006cc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006ccc:	4b88      	ldr	r3, [pc, #544]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006cce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006cd0:	f003 0302 	and.w	r3, r3, #2
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1ea      	bne.n	8006cae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f003 0304 	and.w	r3, r3, #4
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f000 8097 	beq.w	8006e14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cea:	4b81      	ldr	r3, [pc, #516]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d10f      	bne.n	8006d16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	60bb      	str	r3, [r7, #8]
 8006cfa:	4b7d      	ldr	r3, [pc, #500]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	4a7c      	ldr	r2, [pc, #496]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006d04:	6413      	str	r3, [r2, #64]	@ 0x40
 8006d06:	4b7a      	ldr	r3, [pc, #488]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006d0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006d0e:	60bb      	str	r3, [r7, #8]
 8006d10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006d12:	2301      	movs	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d16:	4b77      	ldr	r3, [pc, #476]	@ (8006ef4 <HAL_RCC_OscConfig+0x474>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d118      	bne.n	8006d54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006d22:	4b74      	ldr	r3, [pc, #464]	@ (8006ef4 <HAL_RCC_OscConfig+0x474>)
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	4a73      	ldr	r2, [pc, #460]	@ (8006ef4 <HAL_RCC_OscConfig+0x474>)
 8006d28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d2e:	f7fd fdcb 	bl	80048c8 <HAL_GetTick>
 8006d32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d34:	e008      	b.n	8006d48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d36:	f7fd fdc7 	bl	80048c8 <HAL_GetTick>
 8006d3a:	4602      	mov	r2, r0
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	1ad3      	subs	r3, r2, r3
 8006d40:	2b02      	cmp	r3, #2
 8006d42:	d901      	bls.n	8006d48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006d44:	2303      	movs	r3, #3
 8006d46:	e10c      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006d48:	4b6a      	ldr	r3, [pc, #424]	@ (8006ef4 <HAL_RCC_OscConfig+0x474>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d0f0      	beq.n	8006d36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d106      	bne.n	8006d6a <HAL_RCC_OscConfig+0x2ea>
 8006d5c:	4b64      	ldr	r3, [pc, #400]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d60:	4a63      	ldr	r2, [pc, #396]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d62:	f043 0301 	orr.w	r3, r3, #1
 8006d66:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d68:	e01c      	b.n	8006da4 <HAL_RCC_OscConfig+0x324>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	2b05      	cmp	r3, #5
 8006d70:	d10c      	bne.n	8006d8c <HAL_RCC_OscConfig+0x30c>
 8006d72:	4b5f      	ldr	r3, [pc, #380]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d76:	4a5e      	ldr	r2, [pc, #376]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d78:	f043 0304 	orr.w	r3, r3, #4
 8006d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d7e:	4b5c      	ldr	r3, [pc, #368]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d82:	4a5b      	ldr	r2, [pc, #364]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d84:	f043 0301 	orr.w	r3, r3, #1
 8006d88:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d8a:	e00b      	b.n	8006da4 <HAL_RCC_OscConfig+0x324>
 8006d8c:	4b58      	ldr	r3, [pc, #352]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d90:	4a57      	ldr	r2, [pc, #348]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d92:	f023 0301 	bic.w	r3, r3, #1
 8006d96:	6713      	str	r3, [r2, #112]	@ 0x70
 8006d98:	4b55      	ldr	r3, [pc, #340]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006d9c:	4a54      	ldr	r2, [pc, #336]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006d9e:	f023 0304 	bic.w	r3, r3, #4
 8006da2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d015      	beq.n	8006dd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dac:	f7fd fd8c 	bl	80048c8 <HAL_GetTick>
 8006db0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006db2:	e00a      	b.n	8006dca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db4:	f7fd fd88 	bl	80048c8 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dc2:	4293      	cmp	r3, r2
 8006dc4:	d901      	bls.n	8006dca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e0cb      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006dca:	4b49      	ldr	r3, [pc, #292]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006dcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d0ee      	beq.n	8006db4 <HAL_RCC_OscConfig+0x334>
 8006dd6:	e014      	b.n	8006e02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006dd8:	f7fd fd76 	bl	80048c8 <HAL_GetTick>
 8006ddc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006dde:	e00a      	b.n	8006df6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006de0:	f7fd fd72 	bl	80048c8 <HAL_GetTick>
 8006de4:	4602      	mov	r2, r0
 8006de6:	693b      	ldr	r3, [r7, #16]
 8006de8:	1ad3      	subs	r3, r2, r3
 8006dea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dee:	4293      	cmp	r3, r2
 8006df0:	d901      	bls.n	8006df6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006df2:	2303      	movs	r3, #3
 8006df4:	e0b5      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006df6:	4b3e      	ldr	r3, [pc, #248]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ee      	bne.n	8006de0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006e02:	7dfb      	ldrb	r3, [r7, #23]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e08:	4b39      	ldr	r3, [pc, #228]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e0c:	4a38      	ldr	r2, [pc, #224]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	699b      	ldr	r3, [r3, #24]
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80a1 	beq.w	8006f60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006e1e:	4b34      	ldr	r3, [pc, #208]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006e20:	689b      	ldr	r3, [r3, #8]
 8006e22:	f003 030c 	and.w	r3, r3, #12
 8006e26:	2b08      	cmp	r3, #8
 8006e28:	d05c      	beq.n	8006ee4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	699b      	ldr	r3, [r3, #24]
 8006e2e:	2b02      	cmp	r3, #2
 8006e30:	d141      	bne.n	8006eb6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006e32:	4b31      	ldr	r3, [pc, #196]	@ (8006ef8 <HAL_RCC_OscConfig+0x478>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e38:	f7fd fd46 	bl	80048c8 <HAL_GetTick>
 8006e3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e3e:	e008      	b.n	8006e52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e40:	f7fd fd42 	bl	80048c8 <HAL_GetTick>
 8006e44:	4602      	mov	r2, r0
 8006e46:	693b      	ldr	r3, [r7, #16]
 8006e48:	1ad3      	subs	r3, r2, r3
 8006e4a:	2b02      	cmp	r3, #2
 8006e4c:	d901      	bls.n	8006e52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006e4e:	2303      	movs	r3, #3
 8006e50:	e087      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006e52:	4b27      	ldr	r3, [pc, #156]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d1f0      	bne.n	8006e40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69da      	ldr	r2, [r3, #28]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6c:	019b      	lsls	r3, r3, #6
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	3b01      	subs	r3, #1
 8006e78:	041b      	lsls	r3, r3, #16
 8006e7a:	431a      	orrs	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e80:	061b      	lsls	r3, r3, #24
 8006e82:	491b      	ldr	r1, [pc, #108]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006e84:	4313      	orrs	r3, r2
 8006e86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006e88:	4b1b      	ldr	r3, [pc, #108]	@ (8006ef8 <HAL_RCC_OscConfig+0x478>)
 8006e8a:	2201      	movs	r2, #1
 8006e8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006e8e:	f7fd fd1b 	bl	80048c8 <HAL_GetTick>
 8006e92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e94:	e008      	b.n	8006ea8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006e96:	f7fd fd17 	bl	80048c8 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	693b      	ldr	r3, [r7, #16]
 8006e9e:	1ad3      	subs	r3, r2, r3
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d901      	bls.n	8006ea8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e05c      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ea8:	4b11      	ldr	r3, [pc, #68]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d0f0      	beq.n	8006e96 <HAL_RCC_OscConfig+0x416>
 8006eb4:	e054      	b.n	8006f60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006eb6:	4b10      	ldr	r3, [pc, #64]	@ (8006ef8 <HAL_RCC_OscConfig+0x478>)
 8006eb8:	2200      	movs	r2, #0
 8006eba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ebc:	f7fd fd04 	bl	80048c8 <HAL_GetTick>
 8006ec0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ec2:	e008      	b.n	8006ed6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ec4:	f7fd fd00 	bl	80048c8 <HAL_GetTick>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	1ad3      	subs	r3, r2, r3
 8006ece:	2b02      	cmp	r3, #2
 8006ed0:	d901      	bls.n	8006ed6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006ed2:	2303      	movs	r3, #3
 8006ed4:	e045      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ed6:	4b06      	ldr	r3, [pc, #24]	@ (8006ef0 <HAL_RCC_OscConfig+0x470>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1f0      	bne.n	8006ec4 <HAL_RCC_OscConfig+0x444>
 8006ee2:	e03d      	b.n	8006f60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	699b      	ldr	r3, [r3, #24]
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d107      	bne.n	8006efc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006eec:	2301      	movs	r3, #1
 8006eee:	e038      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40007000 	.word	0x40007000
 8006ef8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006efc:	4b1b      	ldr	r3, [pc, #108]	@ (8006f6c <HAL_RCC_OscConfig+0x4ec>)
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	699b      	ldr	r3, [r3, #24]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d028      	beq.n	8006f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d121      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d11a      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006f2c:	4013      	ands	r3, r2
 8006f2e:	687a      	ldr	r2, [r7, #4]
 8006f30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006f32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d111      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006f42:	085b      	lsrs	r3, r3, #1
 8006f44:	3b01      	subs	r3, #1
 8006f46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	d107      	bne.n	8006f5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006f58:	429a      	cmp	r2, r3
 8006f5a:	d001      	beq.n	8006f60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006f5c:	2301      	movs	r3, #1
 8006f5e:	e000      	b.n	8006f62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006f60:	2300      	movs	r3, #0
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3718      	adds	r7, #24
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800

08006f70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d101      	bne.n	8006f84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006f80:	2301      	movs	r3, #1
 8006f82:	e0cc      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006f84:	4b68      	ldr	r3, [pc, #416]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f003 0307 	and.w	r3, r3, #7
 8006f8c:	683a      	ldr	r2, [r7, #0]
 8006f8e:	429a      	cmp	r2, r3
 8006f90:	d90c      	bls.n	8006fac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006f92:	4b65      	ldr	r3, [pc, #404]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 8006f94:	683a      	ldr	r2, [r7, #0]
 8006f96:	b2d2      	uxtb	r2, r2
 8006f98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006f9a:	4b63      	ldr	r3, [pc, #396]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f003 0307 	and.w	r3, r3, #7
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d001      	beq.n	8006fac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006fa8:	2301      	movs	r3, #1
 8006faa:	e0b8      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 0302 	and.w	r3, r3, #2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d020      	beq.n	8006ffa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f003 0304 	and.w	r3, r3, #4
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d005      	beq.n	8006fd0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006fc4:	4b59      	ldr	r3, [pc, #356]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	4a58      	ldr	r2, [pc, #352]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006fca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006fce:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f003 0308 	and.w	r3, r3, #8
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d005      	beq.n	8006fe8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006fdc:	4b53      	ldr	r3, [pc, #332]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	4a52      	ldr	r2, [pc, #328]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006fe2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006fe6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006fe8:	4b50      	ldr	r3, [pc, #320]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006fea:	689b      	ldr	r3, [r3, #8]
 8006fec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	689b      	ldr	r3, [r3, #8]
 8006ff4:	494d      	ldr	r1, [pc, #308]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d044      	beq.n	8007090 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	685b      	ldr	r3, [r3, #4]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d107      	bne.n	800701e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800700e:	4b47      	ldr	r3, [pc, #284]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007016:	2b00      	cmp	r3, #0
 8007018:	d119      	bne.n	800704e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800701a:	2301      	movs	r3, #1
 800701c:	e07f      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	2b02      	cmp	r3, #2
 8007024:	d003      	beq.n	800702e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800702a:	2b03      	cmp	r3, #3
 800702c:	d107      	bne.n	800703e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800702e:	4b3f      	ldr	r3, [pc, #252]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007036:	2b00      	cmp	r3, #0
 8007038:	d109      	bne.n	800704e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800703a:	2301      	movs	r3, #1
 800703c:	e06f      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800703e:	4b3b      	ldr	r3, [pc, #236]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	f003 0302 	and.w	r3, r3, #2
 8007046:	2b00      	cmp	r3, #0
 8007048:	d101      	bne.n	800704e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800704a:	2301      	movs	r3, #1
 800704c:	e067      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800704e:	4b37      	ldr	r3, [pc, #220]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f023 0203 	bic.w	r2, r3, #3
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	4934      	ldr	r1, [pc, #208]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 800705c:	4313      	orrs	r3, r2
 800705e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007060:	f7fd fc32 	bl	80048c8 <HAL_GetTick>
 8007064:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007066:	e00a      	b.n	800707e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007068:	f7fd fc2e 	bl	80048c8 <HAL_GetTick>
 800706c:	4602      	mov	r2, r0
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	1ad3      	subs	r3, r2, r3
 8007072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007076:	4293      	cmp	r3, r2
 8007078:	d901      	bls.n	800707e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800707a:	2303      	movs	r3, #3
 800707c:	e04f      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800707e:	4b2b      	ldr	r3, [pc, #172]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	f003 020c 	and.w	r2, r3, #12
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	685b      	ldr	r3, [r3, #4]
 800708a:	009b      	lsls	r3, r3, #2
 800708c:	429a      	cmp	r2, r3
 800708e:	d1eb      	bne.n	8007068 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007090:	4b25      	ldr	r3, [pc, #148]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f003 0307 	and.w	r3, r3, #7
 8007098:	683a      	ldr	r2, [r7, #0]
 800709a:	429a      	cmp	r2, r3
 800709c:	d20c      	bcs.n	80070b8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800709e:	4b22      	ldr	r3, [pc, #136]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 80070a0:	683a      	ldr	r2, [r7, #0]
 80070a2:	b2d2      	uxtb	r2, r2
 80070a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80070a6:	4b20      	ldr	r3, [pc, #128]	@ (8007128 <HAL_RCC_ClockConfig+0x1b8>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	f003 0307 	and.w	r3, r3, #7
 80070ae:	683a      	ldr	r2, [r7, #0]
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d001      	beq.n	80070b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	e032      	b.n	800711e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0304 	and.w	r3, r3, #4
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d008      	beq.n	80070d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80070c4:	4b19      	ldr	r3, [pc, #100]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	4916      	ldr	r1, [pc, #88]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 80070d2:	4313      	orrs	r3, r2
 80070d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f003 0308 	and.w	r3, r3, #8
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d009      	beq.n	80070f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80070e2:	4b12      	ldr	r3, [pc, #72]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 80070e4:	689b      	ldr	r3, [r3, #8]
 80070e6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	00db      	lsls	r3, r3, #3
 80070f0:	490e      	ldr	r1, [pc, #56]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 80070f2:	4313      	orrs	r3, r2
 80070f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80070f6:	f000 f821 	bl	800713c <HAL_RCC_GetSysClockFreq>
 80070fa:	4602      	mov	r2, r0
 80070fc:	4b0b      	ldr	r3, [pc, #44]	@ (800712c <HAL_RCC_ClockConfig+0x1bc>)
 80070fe:	689b      	ldr	r3, [r3, #8]
 8007100:	091b      	lsrs	r3, r3, #4
 8007102:	f003 030f 	and.w	r3, r3, #15
 8007106:	490a      	ldr	r1, [pc, #40]	@ (8007130 <HAL_RCC_ClockConfig+0x1c0>)
 8007108:	5ccb      	ldrb	r3, [r1, r3]
 800710a:	fa22 f303 	lsr.w	r3, r2, r3
 800710e:	4a09      	ldr	r2, [pc, #36]	@ (8007134 <HAL_RCC_ClockConfig+0x1c4>)
 8007110:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8007112:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <HAL_RCC_ClockConfig+0x1c8>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4618      	mov	r0, r3
 8007118:	f7fd fb92 	bl	8004840 <HAL_InitTick>

  return HAL_OK;
 800711c:	2300      	movs	r3, #0
}
 800711e:	4618      	mov	r0, r3
 8007120:	3710      	adds	r7, #16
 8007122:	46bd      	mov	sp, r7
 8007124:	bd80      	pop	{r7, pc}
 8007126:	bf00      	nop
 8007128:	40023c00 	.word	0x40023c00
 800712c:	40023800 	.word	0x40023800
 8007130:	08010474 	.word	0x08010474
 8007134:	20000004 	.word	0x20000004
 8007138:	2000002c 	.word	0x2000002c

0800713c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800713c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007140:	b090      	sub	sp, #64	@ 0x40
 8007142:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8007144:	2300      	movs	r3, #0
 8007146:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8007150:	2300      	movs	r3, #0
 8007152:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007154:	4b59      	ldr	r3, [pc, #356]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 030c 	and.w	r3, r3, #12
 800715c:	2b08      	cmp	r3, #8
 800715e:	d00d      	beq.n	800717c <HAL_RCC_GetSysClockFreq+0x40>
 8007160:	2b08      	cmp	r3, #8
 8007162:	f200 80a1 	bhi.w	80072a8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007166:	2b00      	cmp	r3, #0
 8007168:	d002      	beq.n	8007170 <HAL_RCC_GetSysClockFreq+0x34>
 800716a:	2b04      	cmp	r3, #4
 800716c:	d003      	beq.n	8007176 <HAL_RCC_GetSysClockFreq+0x3a>
 800716e:	e09b      	b.n	80072a8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007170:	4b53      	ldr	r3, [pc, #332]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x184>)
 8007172:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8007174:	e09b      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007176:	4b53      	ldr	r3, [pc, #332]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x188>)
 8007178:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800717a:	e098      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800717c:	4b4f      	ldr	r3, [pc, #316]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007184:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007186:	4b4d      	ldr	r3, [pc, #308]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007188:	685b      	ldr	r3, [r3, #4]
 800718a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800718e:	2b00      	cmp	r3, #0
 8007190:	d028      	beq.n	80071e4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007192:	4b4a      	ldr	r3, [pc, #296]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 8007194:	685b      	ldr	r3, [r3, #4]
 8007196:	099b      	lsrs	r3, r3, #6
 8007198:	2200      	movs	r2, #0
 800719a:	623b      	str	r3, [r7, #32]
 800719c:	627a      	str	r2, [r7, #36]	@ 0x24
 800719e:	6a3b      	ldr	r3, [r7, #32]
 80071a0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80071a4:	2100      	movs	r1, #0
 80071a6:	4b47      	ldr	r3, [pc, #284]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80071a8:	fb03 f201 	mul.w	r2, r3, r1
 80071ac:	2300      	movs	r3, #0
 80071ae:	fb00 f303 	mul.w	r3, r0, r3
 80071b2:	4413      	add	r3, r2
 80071b4:	4a43      	ldr	r2, [pc, #268]	@ (80072c4 <HAL_RCC_GetSysClockFreq+0x188>)
 80071b6:	fba0 1202 	umull	r1, r2, r0, r2
 80071ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80071bc:	460a      	mov	r2, r1
 80071be:	62ba      	str	r2, [r7, #40]	@ 0x28
 80071c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071c2:	4413      	add	r3, r2
 80071c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	2200      	movs	r2, #0
 80071ca:	61bb      	str	r3, [r7, #24]
 80071cc:	61fa      	str	r2, [r7, #28]
 80071ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80071d2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80071d6:	f7f9 f85b 	bl	8000290 <__aeabi_uldivmod>
 80071da:	4602      	mov	r2, r0
 80071dc:	460b      	mov	r3, r1
 80071de:	4613      	mov	r3, r2
 80071e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071e2:	e053      	b.n	800728c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80071e4:	4b35      	ldr	r3, [pc, #212]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	099b      	lsrs	r3, r3, #6
 80071ea:	2200      	movs	r2, #0
 80071ec:	613b      	str	r3, [r7, #16]
 80071ee:	617a      	str	r2, [r7, #20]
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80071f6:	f04f 0b00 	mov.w	fp, #0
 80071fa:	4652      	mov	r2, sl
 80071fc:	465b      	mov	r3, fp
 80071fe:	f04f 0000 	mov.w	r0, #0
 8007202:	f04f 0100 	mov.w	r1, #0
 8007206:	0159      	lsls	r1, r3, #5
 8007208:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800720c:	0150      	lsls	r0, r2, #5
 800720e:	4602      	mov	r2, r0
 8007210:	460b      	mov	r3, r1
 8007212:	ebb2 080a 	subs.w	r8, r2, sl
 8007216:	eb63 090b 	sbc.w	r9, r3, fp
 800721a:	f04f 0200 	mov.w	r2, #0
 800721e:	f04f 0300 	mov.w	r3, #0
 8007222:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007226:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800722a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800722e:	ebb2 0408 	subs.w	r4, r2, r8
 8007232:	eb63 0509 	sbc.w	r5, r3, r9
 8007236:	f04f 0200 	mov.w	r2, #0
 800723a:	f04f 0300 	mov.w	r3, #0
 800723e:	00eb      	lsls	r3, r5, #3
 8007240:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007244:	00e2      	lsls	r2, r4, #3
 8007246:	4614      	mov	r4, r2
 8007248:	461d      	mov	r5, r3
 800724a:	eb14 030a 	adds.w	r3, r4, sl
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	eb45 030b 	adc.w	r3, r5, fp
 8007254:	607b      	str	r3, [r7, #4]
 8007256:	f04f 0200 	mov.w	r2, #0
 800725a:	f04f 0300 	mov.w	r3, #0
 800725e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007262:	4629      	mov	r1, r5
 8007264:	028b      	lsls	r3, r1, #10
 8007266:	4621      	mov	r1, r4
 8007268:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800726c:	4621      	mov	r1, r4
 800726e:	028a      	lsls	r2, r1, #10
 8007270:	4610      	mov	r0, r2
 8007272:	4619      	mov	r1, r3
 8007274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007276:	2200      	movs	r2, #0
 8007278:	60bb      	str	r3, [r7, #8]
 800727a:	60fa      	str	r2, [r7, #12]
 800727c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007280:	f7f9 f806 	bl	8000290 <__aeabi_uldivmod>
 8007284:	4602      	mov	r2, r0
 8007286:	460b      	mov	r3, r1
 8007288:	4613      	mov	r3, r2
 800728a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800728c:	4b0b      	ldr	r3, [pc, #44]	@ (80072bc <HAL_RCC_GetSysClockFreq+0x180>)
 800728e:	685b      	ldr	r3, [r3, #4]
 8007290:	0c1b      	lsrs	r3, r3, #16
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	3301      	adds	r3, #1
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 800729c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800729e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80072a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80072a4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072a6:	e002      	b.n	80072ae <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80072a8:	4b05      	ldr	r3, [pc, #20]	@ (80072c0 <HAL_RCC_GetSysClockFreq+0x184>)
 80072aa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80072ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80072ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80072b0:	4618      	mov	r0, r3
 80072b2:	3740      	adds	r7, #64	@ 0x40
 80072b4:	46bd      	mov	sp, r7
 80072b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80072ba:	bf00      	nop
 80072bc:	40023800 	.word	0x40023800
 80072c0:	00f42400 	.word	0x00f42400
 80072c4:	017d7840 	.word	0x017d7840

080072c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80072c8:	b480      	push	{r7}
 80072ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80072cc:	4b03      	ldr	r3, [pc, #12]	@ (80072dc <HAL_RCC_GetHCLKFreq+0x14>)
 80072ce:	681b      	ldr	r3, [r3, #0]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	46bd      	mov	sp, r7
 80072d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop
 80072dc:	20000004 	.word	0x20000004

080072e0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b082      	sub	sp, #8
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d101      	bne.n	80072f2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80072ee:	2301      	movs	r3, #1
 80072f0:	e07b      	b.n	80073ea <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d108      	bne.n	800730c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	685b      	ldr	r3, [r3, #4]
 80072fe:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007302:	d009      	beq.n	8007318 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2200      	movs	r2, #0
 8007308:	61da      	str	r2, [r3, #28]
 800730a:	e005      	b.n	8007318 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007324:	b2db      	uxtb	r3, r3
 8007326:	2b00      	cmp	r3, #0
 8007328:	d106      	bne.n	8007338 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f7fa fd3c 	bl	8001db0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2202      	movs	r2, #2
 800733c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800734e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	685b      	ldr	r3, [r3, #4]
 8007354:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007360:	431a      	orrs	r2, r3
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800736a:	431a      	orrs	r2, r3
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	691b      	ldr	r3, [r3, #16]
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	431a      	orrs	r2, r3
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	695b      	ldr	r3, [r3, #20]
 800737a:	f003 0301 	and.w	r3, r3, #1
 800737e:	431a      	orrs	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	699b      	ldr	r3, [r3, #24]
 8007384:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007388:	431a      	orrs	r2, r3
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	69db      	ldr	r3, [r3, #28]
 800738e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007392:	431a      	orrs	r2, r3
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6a1b      	ldr	r3, [r3, #32]
 8007398:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800739c:	ea42 0103 	orr.w	r1, r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073a4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	430a      	orrs	r2, r1
 80073ae:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	699b      	ldr	r3, [r3, #24]
 80073b4:	0c1b      	lsrs	r3, r3, #16
 80073b6:	f003 0104 	and.w	r1, r3, #4
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073be:	f003 0210 	and.w	r2, r3, #16
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	430a      	orrs	r2, r1
 80073c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	69da      	ldr	r2, [r3, #28]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2201      	movs	r2, #1
 80073e4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80073e8:	2300      	movs	r3, #0
}
 80073ea:	4618      	mov	r0, r3
 80073ec:	3708      	adds	r7, #8
 80073ee:	46bd      	mov	sp, r7
 80073f0:	bd80      	pop	{r7, pc}

080073f2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80073f2:	b580      	push	{r7, lr}
 80073f4:	b088      	sub	sp, #32
 80073f6:	af00      	add	r7, sp, #0
 80073f8:	60f8      	str	r0, [r7, #12]
 80073fa:	60b9      	str	r1, [r7, #8]
 80073fc:	603b      	str	r3, [r7, #0]
 80073fe:	4613      	mov	r3, r2
 8007400:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007402:	f7fd fa61 	bl	80048c8 <HAL_GetTick>
 8007406:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007408:	88fb      	ldrh	r3, [r7, #6]
 800740a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007412:	b2db      	uxtb	r3, r3
 8007414:	2b01      	cmp	r3, #1
 8007416:	d001      	beq.n	800741c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007418:	2302      	movs	r3, #2
 800741a:	e12a      	b.n	8007672 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800741c:	68bb      	ldr	r3, [r7, #8]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d002      	beq.n	8007428 <HAL_SPI_Transmit+0x36>
 8007422:	88fb      	ldrh	r3, [r7, #6]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e122      	b.n	8007672 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007432:	2b01      	cmp	r3, #1
 8007434:	d101      	bne.n	800743a <HAL_SPI_Transmit+0x48>
 8007436:	2302      	movs	r3, #2
 8007438:	e11b      	b.n	8007672 <HAL_SPI_Transmit+0x280>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	2201      	movs	r2, #1
 800743e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2203      	movs	r2, #3
 8007446:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2200      	movs	r2, #0
 800744e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	88fa      	ldrh	r2, [r7, #6]
 800745a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	88fa      	ldrh	r2, [r7, #6]
 8007460:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	2200      	movs	r2, #0
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2200      	movs	r2, #0
 800746c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	2200      	movs	r2, #0
 8007472:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2200      	movs	r2, #0
 800747e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	689b      	ldr	r3, [r3, #8]
 8007484:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007488:	d10f      	bne.n	80074aa <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007498:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	681a      	ldr	r2, [r3, #0]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80074a8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074b4:	2b40      	cmp	r3, #64	@ 0x40
 80074b6:	d007      	beq.n	80074c8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	681a      	ldr	r2, [r3, #0]
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074c6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68db      	ldr	r3, [r3, #12]
 80074cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074d0:	d152      	bne.n	8007578 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	685b      	ldr	r3, [r3, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d002      	beq.n	80074e0 <HAL_SPI_Transmit+0xee>
 80074da:	8b7b      	ldrh	r3, [r7, #26]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d145      	bne.n	800756c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e4:	881a      	ldrh	r2, [r3, #0]
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074f0:	1c9a      	adds	r2, r3, #2
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074fa:	b29b      	uxth	r3, r3
 80074fc:	3b01      	subs	r3, #1
 80074fe:	b29a      	uxth	r2, r3
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007504:	e032      	b.n	800756c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	689b      	ldr	r3, [r3, #8]
 800750c:	f003 0302 	and.w	r3, r3, #2
 8007510:	2b02      	cmp	r3, #2
 8007512:	d112      	bne.n	800753a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007518:	881a      	ldrh	r2, [r3, #0]
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007524:	1c9a      	adds	r2, r3, #2
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800752e:	b29b      	uxth	r3, r3
 8007530:	3b01      	subs	r3, #1
 8007532:	b29a      	uxth	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007538:	e018      	b.n	800756c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800753a:	f7fd f9c5 	bl	80048c8 <HAL_GetTick>
 800753e:	4602      	mov	r2, r0
 8007540:	69fb      	ldr	r3, [r7, #28]
 8007542:	1ad3      	subs	r3, r2, r3
 8007544:	683a      	ldr	r2, [r7, #0]
 8007546:	429a      	cmp	r2, r3
 8007548:	d803      	bhi.n	8007552 <HAL_SPI_Transmit+0x160>
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007550:	d102      	bne.n	8007558 <HAL_SPI_Transmit+0x166>
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d109      	bne.n	800756c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2201      	movs	r2, #1
 800755c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2200      	movs	r2, #0
 8007564:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e082      	b.n	8007672 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007570:	b29b      	uxth	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d1c7      	bne.n	8007506 <HAL_SPI_Transmit+0x114>
 8007576:	e053      	b.n	8007620 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	2b00      	cmp	r3, #0
 800757e:	d002      	beq.n	8007586 <HAL_SPI_Transmit+0x194>
 8007580:	8b7b      	ldrh	r3, [r7, #26]
 8007582:	2b01      	cmp	r3, #1
 8007584:	d147      	bne.n	8007616 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	7812      	ldrb	r2, [r2, #0]
 8007592:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007598:	1c5a      	adds	r2, r3, #1
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	3b01      	subs	r3, #1
 80075a6:	b29a      	uxth	r2, r3
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80075ac:	e033      	b.n	8007616 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	689b      	ldr	r3, [r3, #8]
 80075b4:	f003 0302 	and.w	r3, r3, #2
 80075b8:	2b02      	cmp	r3, #2
 80075ba:	d113      	bne.n	80075e4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	7812      	ldrb	r2, [r2, #0]
 80075c8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075ce:	1c5a      	adds	r2, r3, #1
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075d8:	b29b      	uxth	r3, r3
 80075da:	3b01      	subs	r3, #1
 80075dc:	b29a      	uxth	r2, r3
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80075e2:	e018      	b.n	8007616 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075e4:	f7fd f970 	bl	80048c8 <HAL_GetTick>
 80075e8:	4602      	mov	r2, r0
 80075ea:	69fb      	ldr	r3, [r7, #28]
 80075ec:	1ad3      	subs	r3, r2, r3
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	429a      	cmp	r2, r3
 80075f2:	d803      	bhi.n	80075fc <HAL_SPI_Transmit+0x20a>
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075fa:	d102      	bne.n	8007602 <HAL_SPI_Transmit+0x210>
 80075fc:	683b      	ldr	r3, [r7, #0]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d109      	bne.n	8007616 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2201      	movs	r2, #1
 8007606:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007612:	2303      	movs	r3, #3
 8007614:	e02d      	b.n	8007672 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1c6      	bne.n	80075ae <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007620:	69fa      	ldr	r2, [r7, #28]
 8007622:	6839      	ldr	r1, [r7, #0]
 8007624:	68f8      	ldr	r0, [r7, #12]
 8007626:	f000 fd21 	bl	800806c <SPI_EndRxTxTransaction>
 800762a:	4603      	mov	r3, r0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d002      	beq.n	8007636 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	2220      	movs	r2, #32
 8007634:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	689b      	ldr	r3, [r3, #8]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d10a      	bne.n	8007654 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68db      	ldr	r3, [r3, #12]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2201      	movs	r2, #1
 8007658:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2200      	movs	r2, #0
 8007660:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007668:	2b00      	cmp	r3, #0
 800766a:	d001      	beq.n	8007670 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
 800766e:	e000      	b.n	8007672 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8007670:	2300      	movs	r3, #0
  }
}
 8007672:	4618      	mov	r0, r3
 8007674:	3720      	adds	r7, #32
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800767a:	b580      	push	{r7, lr}
 800767c:	b088      	sub	sp, #32
 800767e:	af02      	add	r7, sp, #8
 8007680:	60f8      	str	r0, [r7, #12]
 8007682:	60b9      	str	r1, [r7, #8]
 8007684:	603b      	str	r3, [r7, #0]
 8007686:	4613      	mov	r3, r2
 8007688:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007690:	b2db      	uxtb	r3, r3
 8007692:	2b01      	cmp	r3, #1
 8007694:	d001      	beq.n	800769a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007696:	2302      	movs	r3, #2
 8007698:	e104      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076a2:	d112      	bne.n	80076ca <HAL_SPI_Receive+0x50>
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	689b      	ldr	r3, [r3, #8]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d10e      	bne.n	80076ca <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2204      	movs	r2, #4
 80076b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80076b4:	88fa      	ldrh	r2, [r7, #6]
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	4613      	mov	r3, r2
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	68b9      	ldr	r1, [r7, #8]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f8f3 	bl	80078ac <HAL_SPI_TransmitReceive>
 80076c6:	4603      	mov	r3, r0
 80076c8:	e0ec      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80076ca:	f7fd f8fd 	bl	80048c8 <HAL_GetTick>
 80076ce:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <HAL_SPI_Receive+0x62>
 80076d6:	88fb      	ldrh	r3, [r7, #6]
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d101      	bne.n	80076e0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e0e1      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80076e6:	2b01      	cmp	r3, #1
 80076e8:	d101      	bne.n	80076ee <HAL_SPI_Receive+0x74>
 80076ea:	2302      	movs	r3, #2
 80076ec:	e0da      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2204      	movs	r2, #4
 80076fa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2200      	movs	r2, #0
 8007702:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	88fa      	ldrh	r2, [r7, #6]
 800770e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	88fa      	ldrh	r2, [r7, #6]
 8007714:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2200      	movs	r2, #0
 800771a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	2200      	movs	r2, #0
 8007720:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	2200      	movs	r2, #0
 8007726:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	2200      	movs	r2, #0
 800772c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2200      	movs	r2, #0
 8007732:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	689b      	ldr	r3, [r3, #8]
 8007738:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800773c:	d10f      	bne.n	800775e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	681a      	ldr	r2, [r3, #0]
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800774c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800775c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007768:	2b40      	cmp	r3, #64	@ 0x40
 800776a:	d007      	beq.n	800777c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800777a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d170      	bne.n	8007866 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007784:	e035      	b.n	80077f2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	689b      	ldr	r3, [r3, #8]
 800778c:	f003 0301 	and.w	r3, r3, #1
 8007790:	2b01      	cmp	r3, #1
 8007792:	d115      	bne.n	80077c0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	f103 020c 	add.w	r2, r3, #12
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077a0:	7812      	ldrb	r2, [r2, #0]
 80077a2:	b2d2      	uxtb	r2, r2
 80077a4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80077aa:	1c5a      	adds	r2, r3, #1
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077b4:	b29b      	uxth	r3, r3
 80077b6:	3b01      	subs	r3, #1
 80077b8:	b29a      	uxth	r2, r3
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80077be:	e018      	b.n	80077f2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80077c0:	f7fd f882 	bl	80048c8 <HAL_GetTick>
 80077c4:	4602      	mov	r2, r0
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	1ad3      	subs	r3, r2, r3
 80077ca:	683a      	ldr	r2, [r7, #0]
 80077cc:	429a      	cmp	r2, r3
 80077ce:	d803      	bhi.n	80077d8 <HAL_SPI_Receive+0x15e>
 80077d0:	683b      	ldr	r3, [r7, #0]
 80077d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077d6:	d102      	bne.n	80077de <HAL_SPI_Receive+0x164>
 80077d8:	683b      	ldr	r3, [r7, #0]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d109      	bne.n	80077f2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80077ee:	2303      	movs	r3, #3
 80077f0:	e058      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1c4      	bne.n	8007786 <HAL_SPI_Receive+0x10c>
 80077fc:	e038      	b.n	8007870 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689b      	ldr	r3, [r3, #8]
 8007804:	f003 0301 	and.w	r3, r3, #1
 8007808:	2b01      	cmp	r3, #1
 800780a:	d113      	bne.n	8007834 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	68da      	ldr	r2, [r3, #12]
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007816:	b292      	uxth	r2, r2
 8007818:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800781e:	1c9a      	adds	r2, r3, #2
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007828:	b29b      	uxth	r3, r3
 800782a:	3b01      	subs	r3, #1
 800782c:	b29a      	uxth	r2, r3
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007832:	e018      	b.n	8007866 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007834:	f7fd f848 	bl	80048c8 <HAL_GetTick>
 8007838:	4602      	mov	r2, r0
 800783a:	697b      	ldr	r3, [r7, #20]
 800783c:	1ad3      	subs	r3, r2, r3
 800783e:	683a      	ldr	r2, [r7, #0]
 8007840:	429a      	cmp	r2, r3
 8007842:	d803      	bhi.n	800784c <HAL_SPI_Receive+0x1d2>
 8007844:	683b      	ldr	r3, [r7, #0]
 8007846:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800784a:	d102      	bne.n	8007852 <HAL_SPI_Receive+0x1d8>
 800784c:	683b      	ldr	r3, [r7, #0]
 800784e:	2b00      	cmp	r3, #0
 8007850:	d109      	bne.n	8007866 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	2201      	movs	r2, #1
 8007856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2200      	movs	r2, #0
 800785e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007862:	2303      	movs	r3, #3
 8007864:	e01e      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800786a:	b29b      	uxth	r3, r3
 800786c:	2b00      	cmp	r3, #0
 800786e:	d1c6      	bne.n	80077fe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007870:	697a      	ldr	r2, [r7, #20]
 8007872:	6839      	ldr	r1, [r7, #0]
 8007874:	68f8      	ldr	r0, [r7, #12]
 8007876:	f000 fb93 	bl	8007fa0 <SPI_EndRxTransaction>
 800787a:	4603      	mov	r3, r0
 800787c:	2b00      	cmp	r3, #0
 800787e:	d002      	beq.n	8007886 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2220      	movs	r2, #32
 8007884:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	2201      	movs	r2, #1
 800788a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2200      	movs	r2, #0
 8007892:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800789e:	2301      	movs	r3, #1
 80078a0:	e000      	b.n	80078a4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80078a2:	2300      	movs	r3, #0
  }
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	3718      	adds	r7, #24
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b08a      	sub	sp, #40	@ 0x28
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	60f8      	str	r0, [r7, #12]
 80078b4:	60b9      	str	r1, [r7, #8]
 80078b6:	607a      	str	r2, [r7, #4]
 80078b8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80078ba:	2301      	movs	r3, #1
 80078bc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078be:	f7fd f803 	bl	80048c8 <HAL_GetTick>
 80078c2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80078ca:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	685b      	ldr	r3, [r3, #4]
 80078d0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80078d2:	887b      	ldrh	r3, [r7, #2]
 80078d4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80078d6:	7ffb      	ldrb	r3, [r7, #31]
 80078d8:	2b01      	cmp	r3, #1
 80078da:	d00c      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x4a>
 80078dc:	69bb      	ldr	r3, [r7, #24]
 80078de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80078e2:	d106      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	689b      	ldr	r3, [r3, #8]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d102      	bne.n	80078f2 <HAL_SPI_TransmitReceive+0x46>
 80078ec:	7ffb      	ldrb	r3, [r7, #31]
 80078ee:	2b04      	cmp	r3, #4
 80078f0:	d001      	beq.n	80078f6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80078f2:	2302      	movs	r3, #2
 80078f4:	e17f      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d005      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x5c>
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d002      	beq.n	8007908 <HAL_SPI_TransmitReceive+0x5c>
 8007902:	887b      	ldrh	r3, [r7, #2]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d101      	bne.n	800790c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e174      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007912:	2b01      	cmp	r3, #1
 8007914:	d101      	bne.n	800791a <HAL_SPI_TransmitReceive+0x6e>
 8007916:	2302      	movs	r3, #2
 8007918:	e16d      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2201      	movs	r2, #1
 800791e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007928:	b2db      	uxtb	r3, r3
 800792a:	2b04      	cmp	r3, #4
 800792c:	d003      	beq.n	8007936 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	2205      	movs	r2, #5
 8007932:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	2200      	movs	r2, #0
 800793a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007942:	68fb      	ldr	r3, [r7, #12]
 8007944:	887a      	ldrh	r2, [r7, #2]
 8007946:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	887a      	ldrh	r2, [r7, #2]
 800794c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	68ba      	ldr	r2, [r7, #8]
 8007952:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	887a      	ldrh	r2, [r7, #2]
 8007958:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	887a      	ldrh	r2, [r7, #2]
 800795e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2200      	movs	r2, #0
 8007964:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2200      	movs	r2, #0
 800796a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007976:	2b40      	cmp	r3, #64	@ 0x40
 8007978:	d007      	beq.n	800798a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	681a      	ldr	r2, [r3, #0]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007988:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007992:	d17e      	bne.n	8007a92 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	685b      	ldr	r3, [r3, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <HAL_SPI_TransmitReceive+0xf6>
 800799c:	8afb      	ldrh	r3, [r7, #22]
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d16c      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079a6:	881a      	ldrh	r2, [r3, #0]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079b2:	1c9a      	adds	r2, r3, #2
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079bc:	b29b      	uxth	r3, r3
 80079be:	3b01      	subs	r3, #1
 80079c0:	b29a      	uxth	r2, r3
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80079c6:	e059      	b.n	8007a7c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	689b      	ldr	r3, [r3, #8]
 80079ce:	f003 0302 	and.w	r3, r3, #2
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d11b      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x162>
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80079da:	b29b      	uxth	r3, r3
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d016      	beq.n	8007a0e <HAL_SPI_TransmitReceive+0x162>
 80079e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079e2:	2b01      	cmp	r3, #1
 80079e4:	d113      	bne.n	8007a0e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079ea:	881a      	ldrh	r2, [r3, #0]
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80079f6:	1c9a      	adds	r2, r3, #2
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29a      	uxth	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	689b      	ldr	r3, [r3, #8]
 8007a14:	f003 0301 	and.w	r3, r3, #1
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	d119      	bne.n	8007a50 <HAL_SPI_TransmitReceive+0x1a4>
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d014      	beq.n	8007a50 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68da      	ldr	r2, [r3, #12]
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a30:	b292      	uxth	r2, r2
 8007a32:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a38:	1c9a      	adds	r2, r3, #2
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a42:	b29b      	uxth	r3, r3
 8007a44:	3b01      	subs	r3, #1
 8007a46:	b29a      	uxth	r2, r3
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007a4c:	2301      	movs	r3, #1
 8007a4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007a50:	f7fc ff3a 	bl	80048c8 <HAL_GetTick>
 8007a54:	4602      	mov	r2, r0
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	1ad3      	subs	r3, r2, r3
 8007a5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007a5c:	429a      	cmp	r2, r3
 8007a5e:	d80d      	bhi.n	8007a7c <HAL_SPI_TransmitReceive+0x1d0>
 8007a60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a66:	d009      	beq.n	8007a7c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	2201      	movs	r2, #1
 8007a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2200      	movs	r2, #0
 8007a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e0bc      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1a0      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x11c>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007a8a:	b29b      	uxth	r3, r3
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d19b      	bne.n	80079c8 <HAL_SPI_TransmitReceive+0x11c>
 8007a90:	e082      	b.n	8007b98 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <HAL_SPI_TransmitReceive+0x1f4>
 8007a9a:	8afb      	ldrh	r3, [r7, #22]
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d171      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	330c      	adds	r3, #12
 8007aaa:	7812      	ldrb	r2, [r2, #0]
 8007aac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ab2:	1c5a      	adds	r2, r3, #1
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007abc:	b29b      	uxth	r3, r3
 8007abe:	3b01      	subs	r3, #1
 8007ac0:	b29a      	uxth	r2, r3
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007ac6:	e05d      	b.n	8007b84 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	f003 0302 	and.w	r3, r3, #2
 8007ad2:	2b02      	cmp	r3, #2
 8007ad4:	d11c      	bne.n	8007b10 <HAL_SPI_TransmitReceive+0x264>
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d017      	beq.n	8007b10 <HAL_SPI_TransmitReceive+0x264>
 8007ae0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	d114      	bne.n	8007b10 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	7812      	ldrb	r2, [r2, #0]
 8007af2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007af8:	1c5a      	adds	r2, r3, #1
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	3b01      	subs	r3, #1
 8007b06:	b29a      	uxth	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	f003 0301 	and.w	r3, r3, #1
 8007b1a:	2b01      	cmp	r3, #1
 8007b1c:	d119      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x2a6>
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b22:	b29b      	uxth	r3, r3
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d014      	beq.n	8007b52 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	68da      	ldr	r2, [r3, #12]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b32:	b2d2      	uxtb	r2, r2
 8007b34:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b3a:	1c5a      	adds	r2, r3, #1
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b44:	b29b      	uxth	r3, r3
 8007b46:	3b01      	subs	r3, #1
 8007b48:	b29a      	uxth	r2, r3
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007b52:	f7fc feb9 	bl	80048c8 <HAL_GetTick>
 8007b56:	4602      	mov	r2, r0
 8007b58:	6a3b      	ldr	r3, [r7, #32]
 8007b5a:	1ad3      	subs	r3, r2, r3
 8007b5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5e:	429a      	cmp	r2, r3
 8007b60:	d803      	bhi.n	8007b6a <HAL_SPI_TransmitReceive+0x2be>
 8007b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007b68:	d102      	bne.n	8007b70 <HAL_SPI_TransmitReceive+0x2c4>
 8007b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d109      	bne.n	8007b84 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	2201      	movs	r2, #1
 8007b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007b80:	2303      	movs	r3, #3
 8007b82:	e038      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d19c      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x21c>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d197      	bne.n	8007ac8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007b98:	6a3a      	ldr	r2, [r7, #32]
 8007b9a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007b9c:	68f8      	ldr	r0, [r7, #12]
 8007b9e:	f000 fa65 	bl	800806c <SPI_EndRxTxTransaction>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d008      	beq.n	8007bba <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	2220      	movs	r2, #32
 8007bac:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	2200      	movs	r2, #0
 8007bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e01d      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	689b      	ldr	r3, [r3, #8]
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d10a      	bne.n	8007bd8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007bc2:	2300      	movs	r3, #0
 8007bc4:	613b      	str	r3, [r7, #16]
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689b      	ldr	r3, [r3, #8]
 8007bd4:	613b      	str	r3, [r7, #16]
 8007bd6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	2200      	movs	r2, #0
 8007be4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d001      	beq.n	8007bf4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	e000      	b.n	8007bf6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007bf4:	2300      	movs	r3, #0
  }
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3728      	adds	r7, #40	@ 0x28
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	4613      	mov	r3, r2
 8007c0c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007c14:	b2db      	uxtb	r3, r3
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d001      	beq.n	8007c1e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 8007c1a:	2302      	movs	r3, #2
 8007c1c:	e097      	b.n	8007d4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_SPI_Transmit_DMA+0x2a>
 8007c24:	88fb      	ldrh	r3, [r7, #6]
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d101      	bne.n	8007c2e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	e08f      	b.n	8007d4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007c34:	2b01      	cmp	r3, #1
 8007c36:	d101      	bne.n	8007c3c <HAL_SPI_Transmit_DMA+0x3c>
 8007c38:	2302      	movs	r3, #2
 8007c3a:	e088      	b.n	8007d4e <HAL_SPI_Transmit_DMA+0x14e>
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2201      	movs	r2, #1
 8007c40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	2203      	movs	r2, #3
 8007c48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2200      	movs	r2, #0
 8007c50:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	88fa      	ldrh	r2, [r7, #6]
 8007c5c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	88fa      	ldrh	r2, [r7, #6]
 8007c62:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2200      	movs	r2, #0
 8007c74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	2200      	movs	r2, #0
 8007c80:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007c8a:	d10f      	bne.n	8007cac <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007c9a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007caa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb0:	4a29      	ldr	r2, [pc, #164]	@ (8007d58 <HAL_SPI_Transmit_DMA+0x158>)
 8007cb2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cb8:	4a28      	ldr	r2, [pc, #160]	@ (8007d5c <HAL_SPI_Transmit_DMA+0x15c>)
 8007cba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc0:	4a27      	ldr	r2, [pc, #156]	@ (8007d60 <HAL_SPI_Transmit_DMA+0x160>)
 8007cc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007cc8:	2200      	movs	r2, #0
 8007cca:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	330c      	adds	r3, #12
 8007cdc:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007ce2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007ce4:	f7fc ffe0 	bl	8004ca8 <HAL_DMA_Start_IT>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d00b      	beq.n	8007d06 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007cf2:	f043 0210 	orr.w	r2, r3, #16
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2200      	movs	r2, #0
 8007cfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e023      	b.n	8007d4e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d10:	2b40      	cmp	r3, #64	@ 0x40
 8007d12:	d007      	beq.n	8007d24 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007d22:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	2200      	movs	r2, #0
 8007d28:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	685a      	ldr	r2, [r3, #4]
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f042 0220 	orr.w	r2, r2, #32
 8007d3a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	685a      	ldr	r2, [r3, #4]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	f042 0202 	orr.w	r2, r2, #2
 8007d4a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8007d4c:	2300      	movs	r3, #0
}
 8007d4e:	4618      	mov	r0, r3
 8007d50:	3710      	adds	r7, #16
 8007d52:	46bd      	mov	sp, r7
 8007d54:	bd80      	pop	{r7, pc}
 8007d56:	bf00      	nop
 8007d58:	08007e35 	.word	0x08007e35
 8007d5c:	08007d8d 	.word	0x08007d8d
 8007d60:	08007e51 	.word	0x08007e51

08007d64 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d98:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007d9a:	f7fc fd95 	bl	80048c8 <HAL_GetTick>
 8007d9e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007daa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007dae:	d03b      	beq.n	8007e28 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007db0:	697b      	ldr	r3, [r7, #20]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	685a      	ldr	r2, [r3, #4]
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f022 0220 	bic.w	r2, r2, #32
 8007dbe:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007dc0:	697b      	ldr	r3, [r7, #20]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	685a      	ldr	r2, [r3, #4]
 8007dc6:	697b      	ldr	r3, [r7, #20]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f022 0202 	bic.w	r2, r2, #2
 8007dce:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007dd0:	693a      	ldr	r2, [r7, #16]
 8007dd2:	2164      	movs	r1, #100	@ 0x64
 8007dd4:	6978      	ldr	r0, [r7, #20]
 8007dd6:	f000 f949 	bl	800806c <SPI_EndRxTxTransaction>
 8007dda:	4603      	mov	r3, r0
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007de0:	697b      	ldr	r3, [r7, #20]
 8007de2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007de4:	f043 0220 	orr.w	r2, r3, #32
 8007de8:	697b      	ldr	r3, [r7, #20]
 8007dea:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	689b      	ldr	r3, [r3, #8]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d10a      	bne.n	8007e0a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007df4:	2300      	movs	r3, #0
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	697b      	ldr	r3, [r7, #20]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	68db      	ldr	r3, [r3, #12]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	697b      	ldr	r3, [r7, #20]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	689b      	ldr	r3, [r3, #8]
 8007e06:	60fb      	str	r3, [r7, #12]
 8007e08:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007e10:	697b      	ldr	r3, [r7, #20]
 8007e12:	2201      	movs	r2, #1
 8007e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d003      	beq.n	8007e28 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007e20:	6978      	ldr	r0, [r7, #20]
 8007e22:	f7ff ffa9 	bl	8007d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007e26:	e002      	b.n	8007e2e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007e28:	6978      	ldr	r0, [r7, #20]
 8007e2a:	f7fa fae3 	bl	80023f4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e2e:	3718      	adds	r7, #24
 8007e30:	46bd      	mov	sp, r7
 8007e32:	bd80      	pop	{r7, pc}

08007e34 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b084      	sub	sp, #16
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e40:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	f7ff ff8e 	bl	8007d64 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e48:	bf00      	nop
 8007e4a:	3710      	adds	r7, #16
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	bd80      	pop	{r7, pc}

08007e50 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e5c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0203 	bic.w	r2, r2, #3
 8007e6c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007e72:	f043 0210 	orr.w	r2, r3, #16
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	2201      	movs	r2, #1
 8007e7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f7ff ff78 	bl	8007d78 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007e88:	bf00      	nop
 8007e8a:	3710      	adds	r7, #16
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	bd80      	pop	{r7, pc}

08007e90 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007e90:	b580      	push	{r7, lr}
 8007e92:	b088      	sub	sp, #32
 8007e94:	af00      	add	r7, sp, #0
 8007e96:	60f8      	str	r0, [r7, #12]
 8007e98:	60b9      	str	r1, [r7, #8]
 8007e9a:	603b      	str	r3, [r7, #0]
 8007e9c:	4613      	mov	r3, r2
 8007e9e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007ea0:	f7fc fd12 	bl	80048c8 <HAL_GetTick>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ea8:	1a9b      	subs	r3, r3, r2
 8007eaa:	683a      	ldr	r2, [r7, #0]
 8007eac:	4413      	add	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007eb0:	f7fc fd0a 	bl	80048c8 <HAL_GetTick>
 8007eb4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007eb6:	4b39      	ldr	r3, [pc, #228]	@ (8007f9c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	015b      	lsls	r3, r3, #5
 8007ebc:	0d1b      	lsrs	r3, r3, #20
 8007ebe:	69fa      	ldr	r2, [r7, #28]
 8007ec0:	fb02 f303 	mul.w	r3, r2, r3
 8007ec4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007ec6:	e054      	b.n	8007f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ece:	d050      	beq.n	8007f72 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007ed0:	f7fc fcfa 	bl	80048c8 <HAL_GetTick>
 8007ed4:	4602      	mov	r2, r0
 8007ed6:	69bb      	ldr	r3, [r7, #24]
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d902      	bls.n	8007ee6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007ee0:	69fb      	ldr	r3, [r7, #28]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d13d      	bne.n	8007f62 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007ef4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	685b      	ldr	r3, [r3, #4]
 8007efa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007efe:	d111      	bne.n	8007f24 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	689b      	ldr	r3, [r3, #8]
 8007f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007f08:	d004      	beq.n	8007f14 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f12:	d107      	bne.n	8007f24 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007f22:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007f2c:	d10f      	bne.n	8007f4e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	681a      	ldr	r2, [r3, #0]
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007f3c:	601a      	str	r2, [r3, #0]
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	681a      	ldr	r2, [r3, #0]
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007f4c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	2201      	movs	r2, #1
 8007f52:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007f5e:	2303      	movs	r3, #3
 8007f60:	e017      	b.n	8007f92 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007f62:	697b      	ldr	r3, [r7, #20]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007f68:	2300      	movs	r3, #0
 8007f6a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	3b01      	subs	r3, #1
 8007f70:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	689a      	ldr	r2, [r3, #8]
 8007f78:	68bb      	ldr	r3, [r7, #8]
 8007f7a:	4013      	ands	r3, r2
 8007f7c:	68ba      	ldr	r2, [r7, #8]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	bf0c      	ite	eq
 8007f82:	2301      	moveq	r3, #1
 8007f84:	2300      	movne	r3, #0
 8007f86:	b2db      	uxtb	r3, r3
 8007f88:	461a      	mov	r2, r3
 8007f8a:	79fb      	ldrb	r3, [r7, #7]
 8007f8c:	429a      	cmp	r2, r3
 8007f8e:	d19b      	bne.n	8007ec8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007f90:	2300      	movs	r3, #0
}
 8007f92:	4618      	mov	r0, r3
 8007f94:	3720      	adds	r7, #32
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	20000004 	.word	0x20000004

08007fa0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007fa0:	b580      	push	{r7, lr}
 8007fa2:	b086      	sub	sp, #24
 8007fa4:	af02      	add	r7, sp, #8
 8007fa6:	60f8      	str	r0, [r7, #12]
 8007fa8:	60b9      	str	r1, [r7, #8]
 8007faa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	685b      	ldr	r3, [r3, #4]
 8007fb0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fb4:	d111      	bne.n	8007fda <SPI_EndRxTransaction+0x3a>
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	689b      	ldr	r3, [r3, #8]
 8007fba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fbe:	d004      	beq.n	8007fca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	689b      	ldr	r3, [r3, #8]
 8007fc4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fc8:	d107      	bne.n	8007fda <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fd8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	685b      	ldr	r3, [r3, #4]
 8007fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fe2:	d12a      	bne.n	800803a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007fec:	d012      	beq.n	8008014 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	9300      	str	r3, [sp, #0]
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	2180      	movs	r1, #128	@ 0x80
 8007ff8:	68f8      	ldr	r0, [r7, #12]
 8007ffa:	f7ff ff49 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 8007ffe:	4603      	mov	r3, r0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d02d      	beq.n	8008060 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008008:	f043 0220 	orr.w	r2, r3, #32
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e026      	b.n	8008062 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	9300      	str	r3, [sp, #0]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	2200      	movs	r2, #0
 800801c:	2101      	movs	r1, #1
 800801e:	68f8      	ldr	r0, [r7, #12]
 8008020:	f7ff ff36 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d01a      	beq.n	8008060 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800802e:	f043 0220 	orr.w	r2, r3, #32
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8008036:	2303      	movs	r3, #3
 8008038:	e013      	b.n	8008062 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	2200      	movs	r2, #0
 8008042:	2101      	movs	r1, #1
 8008044:	68f8      	ldr	r0, [r7, #12]
 8008046:	f7ff ff23 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 800804a:	4603      	mov	r3, r0
 800804c:	2b00      	cmp	r3, #0
 800804e:	d007      	beq.n	8008060 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008054:	f043 0220 	orr.w	r2, r3, #32
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800805c:	2303      	movs	r3, #3
 800805e:	e000      	b.n	8008062 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8008060:	2300      	movs	r3, #0
}
 8008062:	4618      	mov	r0, r3
 8008064:	3710      	adds	r7, #16
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
	...

0800806c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800806c:	b580      	push	{r7, lr}
 800806e:	b088      	sub	sp, #32
 8008070:	af02      	add	r7, sp, #8
 8008072:	60f8      	str	r0, [r7, #12]
 8008074:	60b9      	str	r1, [r7, #8]
 8008076:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	9300      	str	r3, [sp, #0]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	2201      	movs	r2, #1
 8008080:	2102      	movs	r1, #2
 8008082:	68f8      	ldr	r0, [r7, #12]
 8008084:	f7ff ff04 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d007      	beq.n	800809e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008092:	f043 0220 	orr.w	r2, r3, #32
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e032      	b.n	8008104 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800809e:	4b1b      	ldr	r3, [pc, #108]	@ (800810c <SPI_EndRxTxTransaction+0xa0>)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	4a1b      	ldr	r2, [pc, #108]	@ (8008110 <SPI_EndRxTxTransaction+0xa4>)
 80080a4:	fba2 2303 	umull	r2, r3, r2, r3
 80080a8:	0d5b      	lsrs	r3, r3, #21
 80080aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80080ae:	fb02 f303 	mul.w	r3, r2, r3
 80080b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80080b4:	68fb      	ldr	r3, [r7, #12]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80080bc:	d112      	bne.n	80080e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	9300      	str	r3, [sp, #0]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	2200      	movs	r2, #0
 80080c6:	2180      	movs	r1, #128	@ 0x80
 80080c8:	68f8      	ldr	r0, [r7, #12]
 80080ca:	f7ff fee1 	bl	8007e90 <SPI_WaitFlagStateUntilTimeout>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d016      	beq.n	8008102 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80080d8:	f043 0220 	orr.w	r2, r3, #32
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80080e0:	2303      	movs	r3, #3
 80080e2:	e00f      	b.n	8008104 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80080e4:	697b      	ldr	r3, [r7, #20]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	3b01      	subs	r3, #1
 80080ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	689b      	ldr	r3, [r3, #8]
 80080f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80080fa:	2b80      	cmp	r3, #128	@ 0x80
 80080fc:	d0f2      	beq.n	80080e4 <SPI_EndRxTxTransaction+0x78>
 80080fe:	e000      	b.n	8008102 <SPI_EndRxTxTransaction+0x96>
        break;
 8008100:	bf00      	nop
  }

  return HAL_OK;
 8008102:	2300      	movs	r3, #0
}
 8008104:	4618      	mov	r0, r3
 8008106:	3718      	adds	r7, #24
 8008108:	46bd      	mov	sp, r7
 800810a:	bd80      	pop	{r7, pc}
 800810c:	20000004 	.word	0x20000004
 8008110:	165e9f81 	.word	0x165e9f81

08008114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008114:	b580      	push	{r7, lr}
 8008116:	b082      	sub	sp, #8
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	e041      	b.n	80081aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b00      	cmp	r3, #0
 8008130:	d106      	bne.n	8008140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800813a:	6878      	ldr	r0, [r7, #4]
 800813c:	f7fa f892 	bl	8002264 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	2202      	movs	r2, #2
 8008144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	3304      	adds	r3, #4
 8008150:	4619      	mov	r1, r3
 8008152:	4610      	mov	r0, r2
 8008154:	f000 fd6a 	bl	8008c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	2201      	movs	r2, #1
 800815c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	2201      	movs	r2, #1
 8008164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2201      	movs	r2, #1
 800816c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	2201      	movs	r2, #1
 8008174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2201      	movs	r2, #1
 800817c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	2201      	movs	r2, #1
 8008184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2201      	movs	r2, #1
 800818c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2201      	movs	r2, #1
 8008194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2201      	movs	r2, #1
 800819c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2201      	movs	r2, #1
 80081a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80081a8:	2300      	movs	r3, #0
}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3708      	adds	r7, #8
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b082      	sub	sp, #8
 80081b6:	af00      	add	r7, sp, #0
 80081b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d101      	bne.n	80081c4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80081c0:	2301      	movs	r3, #1
 80081c2:	e041      	b.n	8008248 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80081ca:	b2db      	uxtb	r3, r3
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d106      	bne.n	80081de <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f000 f839 	bl	8008250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2202      	movs	r2, #2
 80081e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681a      	ldr	r2, [r3, #0]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	3304      	adds	r3, #4
 80081ee:	4619      	mov	r1, r3
 80081f0:	4610      	mov	r0, r2
 80081f2:	f000 fd1b 	bl	8008c2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2201      	movs	r2, #1
 80081fa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2201      	movs	r2, #1
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2201      	movs	r2, #1
 800820a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	2201      	movs	r2, #1
 8008212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	2201      	movs	r2, #1
 800821a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	2201      	movs	r2, #1
 8008222:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	2201      	movs	r2, #1
 800822a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2201      	movs	r2, #1
 8008232:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2201      	movs	r2, #1
 800823a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008246:	2300      	movs	r3, #0
}
 8008248:	4618      	mov	r0, r3
 800824a:	3708      	adds	r7, #8
 800824c:	46bd      	mov	sp, r7
 800824e:	bd80      	pop	{r7, pc}

08008250 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8008250:	b480      	push	{r7}
 8008252:	b083      	sub	sp, #12
 8008254:	af00      	add	r7, sp, #0
 8008256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8008258:	bf00      	nop
 800825a:	370c      	adds	r7, #12
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b086      	sub	sp, #24
 8008268:	af00      	add	r7, sp, #0
 800826a:	60f8      	str	r0, [r7, #12]
 800826c:	60b9      	str	r1, [r7, #8]
 800826e:	607a      	str	r2, [r7, #4]
 8008270:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8008272:	2300      	movs	r3, #0
 8008274:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <HAL_TIM_PWM_Start_DMA+0x2c>
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8008282:	b2db      	uxtb	r3, r3
 8008284:	2b02      	cmp	r3, #2
 8008286:	bf0c      	ite	eq
 8008288:	2301      	moveq	r3, #1
 800828a:	2300      	movne	r3, #0
 800828c:	b2db      	uxtb	r3, r3
 800828e:	e022      	b.n	80082d6 <HAL_TIM_PWM_Start_DMA+0x72>
 8008290:	68bb      	ldr	r3, [r7, #8]
 8008292:	2b04      	cmp	r3, #4
 8008294:	d109      	bne.n	80082aa <HAL_TIM_PWM_Start_DMA+0x46>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800829c:	b2db      	uxtb	r3, r3
 800829e:	2b02      	cmp	r3, #2
 80082a0:	bf0c      	ite	eq
 80082a2:	2301      	moveq	r3, #1
 80082a4:	2300      	movne	r3, #0
 80082a6:	b2db      	uxtb	r3, r3
 80082a8:	e015      	b.n	80082d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b08      	cmp	r3, #8
 80082ae:	d109      	bne.n	80082c4 <HAL_TIM_PWM_Start_DMA+0x60>
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80082b6:	b2db      	uxtb	r3, r3
 80082b8:	2b02      	cmp	r3, #2
 80082ba:	bf0c      	ite	eq
 80082bc:	2301      	moveq	r3, #1
 80082be:	2300      	movne	r3, #0
 80082c0:	b2db      	uxtb	r3, r3
 80082c2:	e008      	b.n	80082d6 <HAL_TIM_PWM_Start_DMA+0x72>
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	2b02      	cmp	r3, #2
 80082ce:	bf0c      	ite	eq
 80082d0:	2301      	moveq	r3, #1
 80082d2:	2300      	movne	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d001      	beq.n	80082de <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 80082da:	2302      	movs	r3, #2
 80082dc:	e15d      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d109      	bne.n	80082f8 <HAL_TIM_PWM_Start_DMA+0x94>
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b01      	cmp	r3, #1
 80082ee:	bf0c      	ite	eq
 80082f0:	2301      	moveq	r3, #1
 80082f2:	2300      	movne	r3, #0
 80082f4:	b2db      	uxtb	r3, r3
 80082f6:	e022      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0xda>
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	2b04      	cmp	r3, #4
 80082fc:	d109      	bne.n	8008312 <HAL_TIM_PWM_Start_DMA+0xae>
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8008304:	b2db      	uxtb	r3, r3
 8008306:	2b01      	cmp	r3, #1
 8008308:	bf0c      	ite	eq
 800830a:	2301      	moveq	r3, #1
 800830c:	2300      	movne	r3, #0
 800830e:	b2db      	uxtb	r3, r3
 8008310:	e015      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0xda>
 8008312:	68bb      	ldr	r3, [r7, #8]
 8008314:	2b08      	cmp	r3, #8
 8008316:	d109      	bne.n	800832c <HAL_TIM_PWM_Start_DMA+0xc8>
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800831e:	b2db      	uxtb	r3, r3
 8008320:	2b01      	cmp	r3, #1
 8008322:	bf0c      	ite	eq
 8008324:	2301      	moveq	r3, #1
 8008326:	2300      	movne	r3, #0
 8008328:	b2db      	uxtb	r3, r3
 800832a:	e008      	b.n	800833e <HAL_TIM_PWM_Start_DMA+0xda>
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008332:	b2db      	uxtb	r3, r3
 8008334:	2b01      	cmp	r3, #1
 8008336:	bf0c      	ite	eq
 8008338:	2301      	moveq	r3, #1
 800833a:	2300      	movne	r3, #0
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	d024      	beq.n	800838c <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2b00      	cmp	r3, #0
 8008346:	d002      	beq.n	800834e <HAL_TIM_PWM_Start_DMA+0xea>
 8008348:	887b      	ldrh	r3, [r7, #2]
 800834a:	2b00      	cmp	r3, #0
 800834c:	d101      	bne.n	8008352 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 800834e:	2301      	movs	r3, #1
 8008350:	e123      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_TIM_PWM_Start_DMA+0xfe>
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008360:	e016      	b.n	8008390 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	2b04      	cmp	r3, #4
 8008366:	d104      	bne.n	8008372 <HAL_TIM_PWM_Start_DMA+0x10e>
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	2202      	movs	r2, #2
 800836c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008370:	e00e      	b.n	8008390 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b08      	cmp	r3, #8
 8008376:	d104      	bne.n	8008382 <HAL_TIM_PWM_Start_DMA+0x11e>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2202      	movs	r2, #2
 800837c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008380:	e006      	b.n	8008390 <HAL_TIM_PWM_Start_DMA+0x12c>
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	2202      	movs	r2, #2
 8008386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800838a:	e001      	b.n	8008390 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 800838c:	2301      	movs	r3, #1
 800838e:	e104      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8008390:	68bb      	ldr	r3, [r7, #8]
 8008392:	2b0c      	cmp	r3, #12
 8008394:	f200 80ae 	bhi.w	80084f4 <HAL_TIM_PWM_Start_DMA+0x290>
 8008398:	a201      	add	r2, pc, #4	@ (adr r2, 80083a0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 800839a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800839e:	bf00      	nop
 80083a0:	080083d5 	.word	0x080083d5
 80083a4:	080084f5 	.word	0x080084f5
 80083a8:	080084f5 	.word	0x080084f5
 80083ac:	080084f5 	.word	0x080084f5
 80083b0:	0800841d 	.word	0x0800841d
 80083b4:	080084f5 	.word	0x080084f5
 80083b8:	080084f5 	.word	0x080084f5
 80083bc:	080084f5 	.word	0x080084f5
 80083c0:	08008465 	.word	0x08008465
 80083c4:	080084f5 	.word	0x080084f5
 80083c8:	080084f5 	.word	0x080084f5
 80083cc:	080084f5 	.word	0x080084f5
 80083d0:	080084ad 	.word	0x080084ad
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083d8:	4a72      	ldr	r2, [pc, #456]	@ (80085a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80083da:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	4a71      	ldr	r2, [pc, #452]	@ (80085a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80083e2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e8:	4a70      	ldr	r2, [pc, #448]	@ (80085ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80083ea:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 80083f0:	6879      	ldr	r1, [r7, #4]
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	681b      	ldr	r3, [r3, #0]
 80083f6:	3334      	adds	r3, #52	@ 0x34
 80083f8:	461a      	mov	r2, r3
 80083fa:	887b      	ldrh	r3, [r7, #2]
 80083fc:	f7fc fc54 	bl	8004ca8 <HAL_DMA_Start_IT>
 8008400:	4603      	mov	r3, r0
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008406:	2301      	movs	r3, #1
 8008408:	e0c7      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	68da      	ldr	r2, [r3, #12]
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8008418:	60da      	str	r2, [r3, #12]
      break;
 800841a:	e06e      	b.n	80084fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008420:	4a60      	ldr	r2, [pc, #384]	@ (80085a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8008422:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008428:	4a5f      	ldr	r2, [pc, #380]	@ (80085a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 800842a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008430:	4a5e      	ldr	r2, [pc, #376]	@ (80085ac <HAL_TIM_PWM_Start_DMA+0x348>)
 8008432:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8008438:	6879      	ldr	r1, [r7, #4]
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	3338      	adds	r3, #56	@ 0x38
 8008440:	461a      	mov	r2, r3
 8008442:	887b      	ldrh	r3, [r7, #2]
 8008444:	f7fc fc30 	bl	8004ca8 <HAL_DMA_Start_IT>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d001      	beq.n	8008452 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e0a3      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68da      	ldr	r2, [r3, #12]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8008460:	60da      	str	r2, [r3, #12]
      break;
 8008462:	e04a      	b.n	80084fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008468:	4a4e      	ldr	r2, [pc, #312]	@ (80085a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 800846a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008470:	4a4d      	ldr	r2, [pc, #308]	@ (80085a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8008472:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008478:	4a4c      	ldr	r2, [pc, #304]	@ (80085ac <HAL_TIM_PWM_Start_DMA+0x348>)
 800847a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8008480:	6879      	ldr	r1, [r7, #4]
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	333c      	adds	r3, #60	@ 0x3c
 8008488:	461a      	mov	r2, r3
 800848a:	887b      	ldrh	r3, [r7, #2]
 800848c:	f7fc fc0c 	bl	8004ca8 <HAL_DMA_Start_IT>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8008496:	2301      	movs	r3, #1
 8008498:	e07f      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80084a8:	60da      	str	r2, [r3, #12]
      break;
 80084aa:	e026      	b.n	80084fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b0:	4a3c      	ldr	r2, [pc, #240]	@ (80085a4 <HAL_TIM_PWM_Start_DMA+0x340>)
 80084b2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084b8:	4a3b      	ldr	r2, [pc, #236]	@ (80085a8 <HAL_TIM_PWM_Start_DMA+0x344>)
 80084ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c0:	4a3a      	ldr	r2, [pc, #232]	@ (80085ac <HAL_TIM_PWM_Start_DMA+0x348>)
 80084c2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80084c8:	6879      	ldr	r1, [r7, #4]
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	3340      	adds	r3, #64	@ 0x40
 80084d0:	461a      	mov	r2, r3
 80084d2:	887b      	ldrh	r3, [r7, #2]
 80084d4:	f7fc fbe8 	bl	8004ca8 <HAL_DMA_Start_IT>
 80084d8:	4603      	mov	r3, r0
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d001      	beq.n	80084e2 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80084de:	2301      	movs	r3, #1
 80084e0:	e05b      	b.n	800859a <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	68da      	ldr	r2, [r3, #12]
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80084f0:	60da      	str	r2, [r3, #12]
      break;
 80084f2:	e002      	b.n	80084fa <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	75fb      	strb	r3, [r7, #23]
      break;
 80084f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80084fa:	7dfb      	ldrb	r3, [r7, #23]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d14b      	bne.n	8008598 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2201      	movs	r2, #1
 8008506:	68b9      	ldr	r1, [r7, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f000 fe41 	bl	8009190 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	4a27      	ldr	r2, [pc, #156]	@ (80085b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d107      	bne.n	8008528 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008526:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	4a20      	ldr	r2, [pc, #128]	@ (80085b0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d018      	beq.n	8008564 <HAL_TIM_PWM_Start_DMA+0x300>
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853a:	d013      	beq.n	8008564 <HAL_TIM_PWM_Start_DMA+0x300>
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	4a1c      	ldr	r2, [pc, #112]	@ (80085b4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008542:	4293      	cmp	r3, r2
 8008544:	d00e      	beq.n	8008564 <HAL_TIM_PWM_Start_DMA+0x300>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4a1b      	ldr	r2, [pc, #108]	@ (80085b8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800854c:	4293      	cmp	r3, r2
 800854e:	d009      	beq.n	8008564 <HAL_TIM_PWM_Start_DMA+0x300>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	4a19      	ldr	r2, [pc, #100]	@ (80085bc <HAL_TIM_PWM_Start_DMA+0x358>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d004      	beq.n	8008564 <HAL_TIM_PWM_Start_DMA+0x300>
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	4a18      	ldr	r2, [pc, #96]	@ (80085c0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008560:	4293      	cmp	r3, r2
 8008562:	d111      	bne.n	8008588 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	689b      	ldr	r3, [r3, #8]
 800856a:	f003 0307 	and.w	r3, r3, #7
 800856e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008570:	693b      	ldr	r3, [r7, #16]
 8008572:	2b06      	cmp	r3, #6
 8008574:	d010      	beq.n	8008598 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	681a      	ldr	r2, [r3, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f042 0201 	orr.w	r2, r2, #1
 8008584:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008586:	e007      	b.n	8008598 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	681a      	ldr	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f042 0201 	orr.w	r2, r2, #1
 8008596:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8008598:	7dfb      	ldrb	r3, [r7, #23]
}
 800859a:	4618      	mov	r0, r3
 800859c:	3718      	adds	r7, #24
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	08008b1d 	.word	0x08008b1d
 80085a8:	08008bc5 	.word	0x08008bc5
 80085ac:	08008a8b 	.word	0x08008a8b
 80085b0:	40010000 	.word	0x40010000
 80085b4:	40000400 	.word	0x40000400
 80085b8:	40000800 	.word	0x40000800
 80085bc:	40000c00 	.word	0x40000c00
 80085c0:	40014000 	.word	0x40014000

080085c4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b084      	sub	sp, #16
 80085c8:	af00      	add	r7, sp, #0
 80085ca:	6078      	str	r0, [r7, #4]
 80085cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ce:	2300      	movs	r3, #0
 80085d0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	2b0c      	cmp	r3, #12
 80085d6:	d855      	bhi.n	8008684 <HAL_TIM_PWM_Stop_DMA+0xc0>
 80085d8:	a201      	add	r2, pc, #4	@ (adr r2, 80085e0 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 80085da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085de:	bf00      	nop
 80085e0:	08008615 	.word	0x08008615
 80085e4:	08008685 	.word	0x08008685
 80085e8:	08008685 	.word	0x08008685
 80085ec:	08008685 	.word	0x08008685
 80085f0:	08008631 	.word	0x08008631
 80085f4:	08008685 	.word	0x08008685
 80085f8:	08008685 	.word	0x08008685
 80085fc:	08008685 	.word	0x08008685
 8008600:	0800864d 	.word	0x0800864d
 8008604:	08008685 	.word	0x08008685
 8008608:	08008685 	.word	0x08008685
 800860c:	08008685 	.word	0x08008685
 8008610:	08008669 	.word	0x08008669
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68da      	ldr	r2, [r3, #12]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008622:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008628:	4618      	mov	r0, r3
 800862a:	f7fc fb95 	bl	8004d58 <HAL_DMA_Abort_IT>
      break;
 800862e:	e02c      	b.n	800868a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	68da      	ldr	r2, [r3, #12]
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800863e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008644:	4618      	mov	r0, r3
 8008646:	f7fc fb87 	bl	8004d58 <HAL_DMA_Abort_IT>
      break;
 800864a:	e01e      	b.n	800868a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	68da      	ldr	r2, [r3, #12]
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800865a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008660:	4618      	mov	r0, r3
 8008662:	f7fc fb79 	bl	8004d58 <HAL_DMA_Abort_IT>
      break;
 8008666:	e010      	b.n	800868a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	68da      	ldr	r2, [r3, #12]
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8008676:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800867c:	4618      	mov	r0, r3
 800867e:	f7fc fb6b 	bl	8004d58 <HAL_DMA_Abort_IT>
      break;
 8008682:	e002      	b.n	800868a <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8008684:	2301      	movs	r3, #1
 8008686:	73fb      	strb	r3, [r7, #15]
      break;
 8008688:	bf00      	nop
  }

  if (status == HAL_OK)
 800868a:	7bfb      	ldrb	r3, [r7, #15]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d157      	bne.n	8008740 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	2200      	movs	r2, #0
 8008696:	6839      	ldr	r1, [r7, #0]
 8008698:	4618      	mov	r0, r3
 800869a:	f000 fd79 	bl	8009190 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	4a2a      	ldr	r2, [pc, #168]	@ (800874c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d117      	bne.n	80086d8 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	6a1a      	ldr	r2, [r3, #32]
 80086ae:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086b2:	4013      	ands	r3, r2
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d10f      	bne.n	80086d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	6a1a      	ldr	r2, [r3, #32]
 80086be:	f240 4344 	movw	r3, #1092	@ 0x444
 80086c2:	4013      	ands	r3, r2
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	d107      	bne.n	80086d8 <HAL_TIM_PWM_Stop_DMA+0x114>
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80086d6:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	6a1a      	ldr	r2, [r3, #32]
 80086de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80086e2:	4013      	ands	r3, r2
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d10f      	bne.n	8008708 <HAL_TIM_PWM_Stop_DMA+0x144>
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	6a1a      	ldr	r2, [r3, #32]
 80086ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80086f2:	4013      	ands	r3, r2
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d107      	bne.n	8008708 <HAL_TIM_PWM_Stop_DMA+0x144>
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	681a      	ldr	r2, [r3, #0]
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	681b      	ldr	r3, [r3, #0]
 8008702:	f022 0201 	bic.w	r2, r2, #1
 8008706:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d104      	bne.n	8008718 <HAL_TIM_PWM_Stop_DMA+0x154>
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2201      	movs	r2, #1
 8008712:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008716:	e013      	b.n	8008740 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008718:	683b      	ldr	r3, [r7, #0]
 800871a:	2b04      	cmp	r3, #4
 800871c:	d104      	bne.n	8008728 <HAL_TIM_PWM_Stop_DMA+0x164>
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2201      	movs	r2, #1
 8008722:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008726:	e00b      	b.n	8008740 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008728:	683b      	ldr	r3, [r7, #0]
 800872a:	2b08      	cmp	r3, #8
 800872c:	d104      	bne.n	8008738 <HAL_TIM_PWM_Stop_DMA+0x174>
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2201      	movs	r2, #1
 8008732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008736:	e003      	b.n	8008740 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	2201      	movs	r2, #1
 800873c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008740:	7bfb      	ldrb	r3, [r7, #15]
}
 8008742:	4618      	mov	r0, r3
 8008744:	3710      	adds	r7, #16
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop
 800874c:	40010000 	.word	0x40010000

08008750 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b086      	sub	sp, #24
 8008754:	af00      	add	r7, sp, #0
 8008756:	60f8      	str	r0, [r7, #12]
 8008758:	60b9      	str	r1, [r7, #8]
 800875a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800875c:	2300      	movs	r3, #0
 800875e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008766:	2b01      	cmp	r3, #1
 8008768:	d101      	bne.n	800876e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800876a:	2302      	movs	r3, #2
 800876c:	e0ae      	b.n	80088cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	2201      	movs	r2, #1
 8008772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	2b0c      	cmp	r3, #12
 800877a:	f200 809f 	bhi.w	80088bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800877e:	a201      	add	r2, pc, #4	@ (adr r2, 8008784 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008780:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008784:	080087b9 	.word	0x080087b9
 8008788:	080088bd 	.word	0x080088bd
 800878c:	080088bd 	.word	0x080088bd
 8008790:	080088bd 	.word	0x080088bd
 8008794:	080087f9 	.word	0x080087f9
 8008798:	080088bd 	.word	0x080088bd
 800879c:	080088bd 	.word	0x080088bd
 80087a0:	080088bd 	.word	0x080088bd
 80087a4:	0800883b 	.word	0x0800883b
 80087a8:	080088bd 	.word	0x080088bd
 80087ac:	080088bd 	.word	0x080088bd
 80087b0:	080088bd 	.word	0x080088bd
 80087b4:	0800887b 	.word	0x0800887b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	68b9      	ldr	r1, [r7, #8]
 80087be:	4618      	mov	r0, r3
 80087c0:	f000 fac0 	bl	8008d44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	699a      	ldr	r2, [r3, #24]
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f042 0208 	orr.w	r2, r2, #8
 80087d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	699a      	ldr	r2, [r3, #24]
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	f022 0204 	bic.w	r2, r2, #4
 80087e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6999      	ldr	r1, [r3, #24]
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	691a      	ldr	r2, [r3, #16]
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	430a      	orrs	r2, r1
 80087f4:	619a      	str	r2, [r3, #24]
      break;
 80087f6:	e064      	b.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	68b9      	ldr	r1, [r7, #8]
 80087fe:	4618      	mov	r0, r3
 8008800:	f000 fb06 	bl	8008e10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	699a      	ldr	r2, [r3, #24]
 800880a:	68fb      	ldr	r3, [r7, #12]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008812:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	699a      	ldr	r2, [r3, #24]
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008822:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	6999      	ldr	r1, [r3, #24]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	691b      	ldr	r3, [r3, #16]
 800882e:	021a      	lsls	r2, r3, #8
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	430a      	orrs	r2, r1
 8008836:	619a      	str	r2, [r3, #24]
      break;
 8008838:	e043      	b.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68b9      	ldr	r1, [r7, #8]
 8008840:	4618      	mov	r0, r3
 8008842:	f000 fb51 	bl	8008ee8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	69da      	ldr	r2, [r3, #28]
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f042 0208 	orr.w	r2, r2, #8
 8008854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	f022 0204 	bic.w	r2, r2, #4
 8008864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	69d9      	ldr	r1, [r3, #28]
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	691a      	ldr	r2, [r3, #16]
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	430a      	orrs	r2, r1
 8008876:	61da      	str	r2, [r3, #28]
      break;
 8008878:	e023      	b.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	68b9      	ldr	r1, [r7, #8]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 fb9b 	bl	8008fbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	69da      	ldr	r2, [r3, #28]
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008894:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	69da      	ldr	r2, [r3, #28]
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80088a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	69d9      	ldr	r1, [r3, #28]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	691b      	ldr	r3, [r3, #16]
 80088b0:	021a      	lsls	r2, r3, #8
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	430a      	orrs	r2, r1
 80088b8:	61da      	str	r2, [r3, #28]
      break;
 80088ba:	e002      	b.n	80088c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80088bc:	2301      	movs	r3, #1
 80088be:	75fb      	strb	r3, [r7, #23]
      break;
 80088c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80088ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80088cc:	4618      	mov	r0, r3
 80088ce:	3718      	adds	r7, #24
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
 80088dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80088de:	2300      	movs	r3, #0
 80088e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80088e8:	2b01      	cmp	r3, #1
 80088ea:	d101      	bne.n	80088f0 <HAL_TIM_ConfigClockSource+0x1c>
 80088ec:	2302      	movs	r3, #2
 80088ee:	e0b4      	b.n	8008a5a <HAL_TIM_ConfigClockSource+0x186>
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2201      	movs	r2, #1
 80088f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2202      	movs	r2, #2
 80088fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	689b      	ldr	r3, [r3, #8]
 8008906:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008908:	68bb      	ldr	r3, [r7, #8]
 800890a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800890e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008910:	68bb      	ldr	r3, [r7, #8]
 8008912:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008916:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	68ba      	ldr	r2, [r7, #8]
 800891e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008928:	d03e      	beq.n	80089a8 <HAL_TIM_ConfigClockSource+0xd4>
 800892a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800892e:	f200 8087 	bhi.w	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008932:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008936:	f000 8086 	beq.w	8008a46 <HAL_TIM_ConfigClockSource+0x172>
 800893a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800893e:	d87f      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008940:	2b70      	cmp	r3, #112	@ 0x70
 8008942:	d01a      	beq.n	800897a <HAL_TIM_ConfigClockSource+0xa6>
 8008944:	2b70      	cmp	r3, #112	@ 0x70
 8008946:	d87b      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008948:	2b60      	cmp	r3, #96	@ 0x60
 800894a:	d050      	beq.n	80089ee <HAL_TIM_ConfigClockSource+0x11a>
 800894c:	2b60      	cmp	r3, #96	@ 0x60
 800894e:	d877      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008950:	2b50      	cmp	r3, #80	@ 0x50
 8008952:	d03c      	beq.n	80089ce <HAL_TIM_ConfigClockSource+0xfa>
 8008954:	2b50      	cmp	r3, #80	@ 0x50
 8008956:	d873      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008958:	2b40      	cmp	r3, #64	@ 0x40
 800895a:	d058      	beq.n	8008a0e <HAL_TIM_ConfigClockSource+0x13a>
 800895c:	2b40      	cmp	r3, #64	@ 0x40
 800895e:	d86f      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008960:	2b30      	cmp	r3, #48	@ 0x30
 8008962:	d064      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x15a>
 8008964:	2b30      	cmp	r3, #48	@ 0x30
 8008966:	d86b      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008968:	2b20      	cmp	r3, #32
 800896a:	d060      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x15a>
 800896c:	2b20      	cmp	r3, #32
 800896e:	d867      	bhi.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
 8008970:	2b00      	cmp	r3, #0
 8008972:	d05c      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x15a>
 8008974:	2b10      	cmp	r3, #16
 8008976:	d05a      	beq.n	8008a2e <HAL_TIM_ConfigClockSource+0x15a>
 8008978:	e062      	b.n	8008a40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800897e:	683b      	ldr	r3, [r7, #0]
 8008980:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800898a:	f000 fbe1 	bl	8009150 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	681b      	ldr	r3, [r3, #0]
 8008992:	689b      	ldr	r3, [r3, #8]
 8008994:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800899c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68ba      	ldr	r2, [r7, #8]
 80089a4:	609a      	str	r2, [r3, #8]
      break;
 80089a6:	e04f      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80089b0:	683b      	ldr	r3, [r7, #0]
 80089b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80089b4:	683b      	ldr	r3, [r7, #0]
 80089b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80089b8:	f000 fbca 	bl	8009150 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	689a      	ldr	r2, [r3, #8]
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80089ca:	609a      	str	r2, [r3, #8]
      break;
 80089cc:	e03c      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089d2:	683b      	ldr	r3, [r7, #0]
 80089d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089d6:	683b      	ldr	r3, [r7, #0]
 80089d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80089da:	461a      	mov	r2, r3
 80089dc:	f000 fb3e 	bl	800905c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2150      	movs	r1, #80	@ 0x50
 80089e6:	4618      	mov	r0, r3
 80089e8:	f000 fb97 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 80089ec:	e02c      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80089f2:	683b      	ldr	r3, [r7, #0]
 80089f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80089f6:	683b      	ldr	r3, [r7, #0]
 80089f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80089fa:	461a      	mov	r2, r3
 80089fc:	f000 fb5d 	bl	80090ba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	2160      	movs	r1, #96	@ 0x60
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 fb87 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008a0c:	e01c      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008a1a:	461a      	mov	r2, r3
 8008a1c:	f000 fb1e 	bl	800905c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2140      	movs	r1, #64	@ 0x40
 8008a26:	4618      	mov	r0, r3
 8008a28:	f000 fb77 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008a2c:	e00c      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681a      	ldr	r2, [r3, #0]
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	4619      	mov	r1, r3
 8008a38:	4610      	mov	r0, r2
 8008a3a:	f000 fb6e 	bl	800911a <TIM_ITRx_SetConfig>
      break;
 8008a3e:	e003      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	73fb      	strb	r3, [r7, #15]
      break;
 8008a44:	e000      	b.n	8008a48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008a46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008a48:	687b      	ldr	r3, [r7, #4]
 8008a4a:	2201      	movs	r2, #1
 8008a4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	2200      	movs	r2, #0
 8008a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008a62:	b480      	push	{r7}
 8008a64:	b083      	sub	sp, #12
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8008a6a:	bf00      	nop
 8008a6c:	370c      	adds	r7, #12
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr

08008a76 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8008a76:	b480      	push	{r7}
 8008a78:	b083      	sub	sp, #12
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8008a7e:	bf00      	nop
 8008a80:	370c      	adds	r7, #12
 8008a82:	46bd      	mov	sp, r7
 8008a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a88:	4770      	bx	lr

08008a8a <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a96:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9c:	687a      	ldr	r2, [r7, #4]
 8008a9e:	429a      	cmp	r2, r3
 8008aa0:	d107      	bne.n	8008ab2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ab0:	e02a      	b.n	8008b08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008ab6:	687a      	ldr	r2, [r7, #4]
 8008ab8:	429a      	cmp	r2, r3
 8008aba:	d107      	bne.n	8008acc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	2202      	movs	r2, #2
 8008ac0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	2201      	movs	r2, #1
 8008ac6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008aca:	e01d      	b.n	8008b08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ad0:	687a      	ldr	r2, [r7, #4]
 8008ad2:	429a      	cmp	r2, r3
 8008ad4:	d107      	bne.n	8008ae6 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2204      	movs	r2, #4
 8008ada:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	2201      	movs	r2, #1
 8008ae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008ae4:	e010      	b.n	8008b08 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008aea:	687a      	ldr	r2, [r7, #4]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d107      	bne.n	8008b00 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2208      	movs	r2, #8
 8008af4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	2201      	movs	r2, #1
 8008afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008afe:	e003      	b.n	8008b08 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2201      	movs	r2, #1
 8008b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff ffb4 	bl	8008a76 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	771a      	strb	r2, [r3, #28]
}
 8008b14:	bf00      	nop
 8008b16:	3710      	adds	r7, #16
 8008b18:	46bd      	mov	sp, r7
 8008b1a:	bd80      	pop	{r7, pc}

08008b1c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8008b1c:	b580      	push	{r7, lr}
 8008b1e:	b084      	sub	sp, #16
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b2e:	687a      	ldr	r2, [r7, #4]
 8008b30:	429a      	cmp	r2, r3
 8008b32:	d10b      	bne.n	8008b4c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2201      	movs	r2, #1
 8008b38:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	69db      	ldr	r3, [r3, #28]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d136      	bne.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	2201      	movs	r2, #1
 8008b46:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008b4a:	e031      	b.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	429a      	cmp	r2, r3
 8008b54:	d10b      	bne.n	8008b6e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	2202      	movs	r2, #2
 8008b5a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	69db      	ldr	r3, [r3, #28]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d125      	bne.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	2201      	movs	r2, #1
 8008b68:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008b6c:	e020      	b.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008b6e:	68fb      	ldr	r3, [r7, #12]
 8008b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b72:	687a      	ldr	r2, [r7, #4]
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d10b      	bne.n	8008b90 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2204      	movs	r2, #4
 8008b7c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	69db      	ldr	r3, [r3, #28]
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d114      	bne.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008b8e:	e00f      	b.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b94:	687a      	ldr	r2, [r7, #4]
 8008b96:	429a      	cmp	r2, r3
 8008b98:	d10a      	bne.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008b9a:	68fb      	ldr	r3, [r7, #12]
 8008b9c:	2208      	movs	r2, #8
 8008b9e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	69db      	ldr	r3, [r3, #28]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d103      	bne.n	8008bb0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008bb0:	68f8      	ldr	r0, [r7, #12]
 8008bb2:	f7f8 ff4b 	bl	8001a4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	2200      	movs	r2, #0
 8008bba:	771a      	strb	r2, [r3, #28]
}
 8008bbc:	bf00      	nop
 8008bbe:	3710      	adds	r7, #16
 8008bc0:	46bd      	mov	sp, r7
 8008bc2:	bd80      	pop	{r7, pc}

08008bc4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b084      	sub	sp, #16
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008bd0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bd6:	687a      	ldr	r2, [r7, #4]
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d103      	bne.n	8008be4 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2201      	movs	r2, #1
 8008be0:	771a      	strb	r2, [r3, #28]
 8008be2:	e019      	b.n	8008c18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d103      	bne.n	8008bf6 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	2202      	movs	r2, #2
 8008bf2:	771a      	strb	r2, [r3, #28]
 8008bf4:	e010      	b.n	8008c18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bfa:	687a      	ldr	r2, [r7, #4]
 8008bfc:	429a      	cmp	r2, r3
 8008bfe:	d103      	bne.n	8008c08 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	2204      	movs	r2, #4
 8008c04:	771a      	strb	r2, [r3, #28]
 8008c06:	e007      	b.n	8008c18 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008c0c:	687a      	ldr	r2, [r7, #4]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d102      	bne.n	8008c18 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2208      	movs	r2, #8
 8008c16:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008c18:	68f8      	ldr	r0, [r7, #12]
 8008c1a:	f7ff ff22 	bl	8008a62 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	771a      	strb	r2, [r3, #28]
}
 8008c24:	bf00      	nop
 8008c26:	3710      	adds	r7, #16
 8008c28:	46bd      	mov	sp, r7
 8008c2a:	bd80      	pop	{r7, pc}

08008c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008c2c:	b480      	push	{r7}
 8008c2e:	b085      	sub	sp, #20
 8008c30:	af00      	add	r7, sp, #0
 8008c32:	6078      	str	r0, [r7, #4]
 8008c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	4a3a      	ldr	r2, [pc, #232]	@ (8008d28 <TIM_Base_SetConfig+0xfc>)
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d00f      	beq.n	8008c64 <TIM_Base_SetConfig+0x38>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c4a:	d00b      	beq.n	8008c64 <TIM_Base_SetConfig+0x38>
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	4a37      	ldr	r2, [pc, #220]	@ (8008d2c <TIM_Base_SetConfig+0x100>)
 8008c50:	4293      	cmp	r3, r2
 8008c52:	d007      	beq.n	8008c64 <TIM_Base_SetConfig+0x38>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	4a36      	ldr	r2, [pc, #216]	@ (8008d30 <TIM_Base_SetConfig+0x104>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d003      	beq.n	8008c64 <TIM_Base_SetConfig+0x38>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	4a35      	ldr	r2, [pc, #212]	@ (8008d34 <TIM_Base_SetConfig+0x108>)
 8008c60:	4293      	cmp	r3, r2
 8008c62:	d108      	bne.n	8008c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	4313      	orrs	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	4a2b      	ldr	r2, [pc, #172]	@ (8008d28 <TIM_Base_SetConfig+0xfc>)
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d01b      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c84:	d017      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	4a28      	ldr	r2, [pc, #160]	@ (8008d2c <TIM_Base_SetConfig+0x100>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d013      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	4a27      	ldr	r2, [pc, #156]	@ (8008d30 <TIM_Base_SetConfig+0x104>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d00f      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	4a26      	ldr	r2, [pc, #152]	@ (8008d34 <TIM_Base_SetConfig+0x108>)
 8008c9a:	4293      	cmp	r3, r2
 8008c9c:	d00b      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4a25      	ldr	r2, [pc, #148]	@ (8008d38 <TIM_Base_SetConfig+0x10c>)
 8008ca2:	4293      	cmp	r3, r2
 8008ca4:	d007      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	4a24      	ldr	r2, [pc, #144]	@ (8008d3c <TIM_Base_SetConfig+0x110>)
 8008caa:	4293      	cmp	r3, r2
 8008cac:	d003      	beq.n	8008cb6 <TIM_Base_SetConfig+0x8a>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	4a23      	ldr	r2, [pc, #140]	@ (8008d40 <TIM_Base_SetConfig+0x114>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d108      	bne.n	8008cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	68db      	ldr	r3, [r3, #12]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008cce:	683b      	ldr	r3, [r7, #0]
 8008cd0:	695b      	ldr	r3, [r3, #20]
 8008cd2:	4313      	orrs	r3, r2
 8008cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ce4:	683b      	ldr	r3, [r7, #0]
 8008ce6:	681a      	ldr	r2, [r3, #0]
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	4a0e      	ldr	r2, [pc, #56]	@ (8008d28 <TIM_Base_SetConfig+0xfc>)
 8008cf0:	4293      	cmp	r3, r2
 8008cf2:	d103      	bne.n	8008cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	691a      	ldr	r2, [r3, #16]
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	691b      	ldr	r3, [r3, #16]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d105      	bne.n	8008d1a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	691b      	ldr	r3, [r3, #16]
 8008d12:	f023 0201 	bic.w	r2, r3, #1
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	611a      	str	r2, [r3, #16]
  }
}
 8008d1a:	bf00      	nop
 8008d1c:	3714      	adds	r7, #20
 8008d1e:	46bd      	mov	sp, r7
 8008d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d24:	4770      	bx	lr
 8008d26:	bf00      	nop
 8008d28:	40010000 	.word	0x40010000
 8008d2c:	40000400 	.word	0x40000400
 8008d30:	40000800 	.word	0x40000800
 8008d34:	40000c00 	.word	0x40000c00
 8008d38:	40014000 	.word	0x40014000
 8008d3c:	40014400 	.word	0x40014400
 8008d40:	40014800 	.word	0x40014800

08008d44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b087      	sub	sp, #28
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6a1b      	ldr	r3, [r3, #32]
 8008d52:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	6a1b      	ldr	r3, [r3, #32]
 8008d58:	f023 0201 	bic.w	r2, r3, #1
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	699b      	ldr	r3, [r3, #24]
 8008d6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008d74:	68fb      	ldr	r3, [r7, #12]
 8008d76:	f023 0303 	bic.w	r3, r3, #3
 8008d7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	68fa      	ldr	r2, [r7, #12]
 8008d82:	4313      	orrs	r3, r2
 8008d84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008d86:	697b      	ldr	r3, [r7, #20]
 8008d88:	f023 0302 	bic.w	r3, r3, #2
 8008d8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	689b      	ldr	r3, [r3, #8]
 8008d92:	697a      	ldr	r2, [r7, #20]
 8008d94:	4313      	orrs	r3, r2
 8008d96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	4a1c      	ldr	r2, [pc, #112]	@ (8008e0c <TIM_OC1_SetConfig+0xc8>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d10c      	bne.n	8008dba <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	f023 0308 	bic.w	r3, r3, #8
 8008da6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	68db      	ldr	r3, [r3, #12]
 8008dac:	697a      	ldr	r2, [r7, #20]
 8008dae:	4313      	orrs	r3, r2
 8008db0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008db2:	697b      	ldr	r3, [r7, #20]
 8008db4:	f023 0304 	bic.w	r3, r3, #4
 8008db8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	4a13      	ldr	r2, [pc, #76]	@ (8008e0c <TIM_OC1_SetConfig+0xc8>)
 8008dbe:	4293      	cmp	r3, r2
 8008dc0:	d111      	bne.n	8008de6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008dc8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008dd0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	695b      	ldr	r3, [r3, #20]
 8008dd6:	693a      	ldr	r2, [r7, #16]
 8008dd8:	4313      	orrs	r3, r2
 8008dda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	699b      	ldr	r3, [r3, #24]
 8008de0:	693a      	ldr	r2, [r7, #16]
 8008de2:	4313      	orrs	r3, r2
 8008de4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	693a      	ldr	r2, [r7, #16]
 8008dea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	68fa      	ldr	r2, [r7, #12]
 8008df0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008df2:	683b      	ldr	r3, [r7, #0]
 8008df4:	685a      	ldr	r2, [r3, #4]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	697a      	ldr	r2, [r7, #20]
 8008dfe:	621a      	str	r2, [r3, #32]
}
 8008e00:	bf00      	nop
 8008e02:	371c      	adds	r7, #28
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr
 8008e0c:	40010000 	.word	0x40010000

08008e10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b087      	sub	sp, #28
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	6078      	str	r0, [r7, #4]
 8008e18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
 8008e1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	6a1b      	ldr	r3, [r3, #32]
 8008e24:	f023 0210 	bic.w	r2, r3, #16
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	699b      	ldr	r3, [r3, #24]
 8008e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008e3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008e46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008e48:	683b      	ldr	r3, [r7, #0]
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	021b      	lsls	r3, r3, #8
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	f023 0320 	bic.w	r3, r3, #32
 8008e5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008e5c:	683b      	ldr	r3, [r7, #0]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	011b      	lsls	r3, r3, #4
 8008e62:	697a      	ldr	r2, [r7, #20]
 8008e64:	4313      	orrs	r3, r2
 8008e66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	4a1e      	ldr	r2, [pc, #120]	@ (8008ee4 <TIM_OC2_SetConfig+0xd4>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d10d      	bne.n	8008e8c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008e70:	697b      	ldr	r3, [r7, #20]
 8008e72:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008e76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008e78:	683b      	ldr	r3, [r7, #0]
 8008e7a:	68db      	ldr	r3, [r3, #12]
 8008e7c:	011b      	lsls	r3, r3, #4
 8008e7e:	697a      	ldr	r2, [r7, #20]
 8008e80:	4313      	orrs	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008e84:	697b      	ldr	r3, [r7, #20]
 8008e86:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e8a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <TIM_OC2_SetConfig+0xd4>)
 8008e90:	4293      	cmp	r3, r2
 8008e92:	d113      	bne.n	8008ebc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008e9a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008e9c:	693b      	ldr	r3, [r7, #16]
 8008e9e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008ea2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008ea4:	683b      	ldr	r3, [r7, #0]
 8008ea6:	695b      	ldr	r3, [r3, #20]
 8008ea8:	009b      	lsls	r3, r3, #2
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	4313      	orrs	r3, r2
 8008eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	699b      	ldr	r3, [r3, #24]
 8008eb4:	009b      	lsls	r3, r3, #2
 8008eb6:	693a      	ldr	r2, [r7, #16]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	693a      	ldr	r2, [r7, #16]
 8008ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	68fa      	ldr	r2, [r7, #12]
 8008ec6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	685a      	ldr	r2, [r3, #4]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	697a      	ldr	r2, [r7, #20]
 8008ed4:	621a      	str	r2, [r3, #32]
}
 8008ed6:	bf00      	nop
 8008ed8:	371c      	adds	r7, #28
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	40010000 	.word	0x40010000

08008ee8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b087      	sub	sp, #28
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
 8008ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6a1b      	ldr	r3, [r3, #32]
 8008ef6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	6a1b      	ldr	r3, [r3, #32]
 8008efc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	685b      	ldr	r3, [r3, #4]
 8008f08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	69db      	ldr	r3, [r3, #28]
 8008f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	f023 0303 	bic.w	r3, r3, #3
 8008f1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68fa      	ldr	r2, [r7, #12]
 8008f26:	4313      	orrs	r3, r2
 8008f28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008f30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	021b      	lsls	r3, r3, #8
 8008f38:	697a      	ldr	r2, [r7, #20]
 8008f3a:	4313      	orrs	r3, r2
 8008f3c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	4a1d      	ldr	r2, [pc, #116]	@ (8008fb8 <TIM_OC3_SetConfig+0xd0>)
 8008f42:	4293      	cmp	r3, r2
 8008f44:	d10d      	bne.n	8008f62 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008f4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	021b      	lsls	r3, r3, #8
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	4313      	orrs	r3, r2
 8008f58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008f5a:	697b      	ldr	r3, [r7, #20]
 8008f5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008f60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a14      	ldr	r2, [pc, #80]	@ (8008fb8 <TIM_OC3_SetConfig+0xd0>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d113      	bne.n	8008f92 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008f6a:	693b      	ldr	r3, [r7, #16]
 8008f6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008f70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008f72:	693b      	ldr	r3, [r7, #16]
 8008f74:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008f78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	695b      	ldr	r3, [r3, #20]
 8008f7e:	011b      	lsls	r3, r3, #4
 8008f80:	693a      	ldr	r2, [r7, #16]
 8008f82:	4313      	orrs	r3, r2
 8008f84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008f86:	683b      	ldr	r3, [r7, #0]
 8008f88:	699b      	ldr	r3, [r3, #24]
 8008f8a:	011b      	lsls	r3, r3, #4
 8008f8c:	693a      	ldr	r2, [r7, #16]
 8008f8e:	4313      	orrs	r3, r2
 8008f90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	693a      	ldr	r2, [r7, #16]
 8008f96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	68fa      	ldr	r2, [r7, #12]
 8008f9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008f9e:	683b      	ldr	r3, [r7, #0]
 8008fa0:	685a      	ldr	r2, [r3, #4]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	697a      	ldr	r2, [r7, #20]
 8008faa:	621a      	str	r2, [r3, #32]
}
 8008fac:	bf00      	nop
 8008fae:	371c      	adds	r7, #28
 8008fb0:	46bd      	mov	sp, r7
 8008fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fb6:	4770      	bx	lr
 8008fb8:	40010000 	.word	0x40010000

08008fbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008fbc:	b480      	push	{r7}
 8008fbe:	b087      	sub	sp, #28
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6a1b      	ldr	r3, [r3, #32]
 8008fca:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	6a1b      	ldr	r3, [r3, #32]
 8008fd0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	685b      	ldr	r3, [r3, #4]
 8008fdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	69db      	ldr	r3, [r3, #28]
 8008fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	021b      	lsls	r3, r3, #8
 8008ffa:	68fa      	ldr	r2, [r7, #12]
 8008ffc:	4313      	orrs	r3, r2
 8008ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	031b      	lsls	r3, r3, #12
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	4313      	orrs	r3, r2
 8009012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009014:	687b      	ldr	r3, [r7, #4]
 8009016:	4a10      	ldr	r2, [pc, #64]	@ (8009058 <TIM_OC4_SetConfig+0x9c>)
 8009018:	4293      	cmp	r3, r2
 800901a:	d109      	bne.n	8009030 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800901c:	697b      	ldr	r3, [r7, #20]
 800901e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009022:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	695b      	ldr	r3, [r3, #20]
 8009028:	019b      	lsls	r3, r3, #6
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	4313      	orrs	r3, r2
 800902e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	697a      	ldr	r2, [r7, #20]
 8009034:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	68fa      	ldr	r2, [r7, #12]
 800903a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	685a      	ldr	r2, [r3, #4]
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	693a      	ldr	r2, [r7, #16]
 8009048:	621a      	str	r2, [r3, #32]
}
 800904a:	bf00      	nop
 800904c:	371c      	adds	r7, #28
 800904e:	46bd      	mov	sp, r7
 8009050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009054:	4770      	bx	lr
 8009056:	bf00      	nop
 8009058:	40010000 	.word	0x40010000

0800905c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800905c:	b480      	push	{r7}
 800905e:	b087      	sub	sp, #28
 8009060:	af00      	add	r7, sp, #0
 8009062:	60f8      	str	r0, [r7, #12]
 8009064:	60b9      	str	r1, [r7, #8]
 8009066:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	6a1b      	ldr	r3, [r3, #32]
 8009072:	f023 0201 	bic.w	r2, r3, #1
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009086:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	011b      	lsls	r3, r3, #4
 800908c:	693a      	ldr	r2, [r7, #16]
 800908e:	4313      	orrs	r3, r2
 8009090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	f023 030a 	bic.w	r3, r3, #10
 8009098:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	621a      	str	r2, [r3, #32]
}
 80090ae:	bf00      	nop
 80090b0:	371c      	adds	r7, #28
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr

080090ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80090ba:	b480      	push	{r7}
 80090bc:	b087      	sub	sp, #28
 80090be:	af00      	add	r7, sp, #0
 80090c0:	60f8      	str	r0, [r7, #12]
 80090c2:	60b9      	str	r1, [r7, #8]
 80090c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6a1b      	ldr	r3, [r3, #32]
 80090ca:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	6a1b      	ldr	r3, [r3, #32]
 80090d0:	f023 0210 	bic.w	r2, r3, #16
 80090d4:	68fb      	ldr	r3, [r7, #12]
 80090d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	699b      	ldr	r3, [r3, #24]
 80090dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80090e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	031b      	lsls	r3, r3, #12
 80090ea:	693a      	ldr	r2, [r7, #16]
 80090ec:	4313      	orrs	r3, r2
 80090ee:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80090f0:	697b      	ldr	r3, [r7, #20]
 80090f2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80090f6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	011b      	lsls	r3, r3, #4
 80090fc:	697a      	ldr	r2, [r7, #20]
 80090fe:	4313      	orrs	r3, r2
 8009100:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009102:	68fb      	ldr	r3, [r7, #12]
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	697a      	ldr	r2, [r7, #20]
 800910c:	621a      	str	r2, [r3, #32]
}
 800910e:	bf00      	nop
 8009110:	371c      	adds	r7, #28
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr

0800911a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800911a:	b480      	push	{r7}
 800911c:	b085      	sub	sp, #20
 800911e:	af00      	add	r7, sp, #0
 8009120:	6078      	str	r0, [r7, #4]
 8009122:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009130:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009132:	683a      	ldr	r2, [r7, #0]
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	4313      	orrs	r3, r2
 8009138:	f043 0307 	orr.w	r3, r3, #7
 800913c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	68fa      	ldr	r2, [r7, #12]
 8009142:	609a      	str	r2, [r3, #8]
}
 8009144:	bf00      	nop
 8009146:	3714      	adds	r7, #20
 8009148:	46bd      	mov	sp, r7
 800914a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800914e:	4770      	bx	lr

08009150 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009150:	b480      	push	{r7}
 8009152:	b087      	sub	sp, #28
 8009154:	af00      	add	r7, sp, #0
 8009156:	60f8      	str	r0, [r7, #12]
 8009158:	60b9      	str	r1, [r7, #8]
 800915a:	607a      	str	r2, [r7, #4]
 800915c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009164:	697b      	ldr	r3, [r7, #20]
 8009166:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800916a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800916c:	683b      	ldr	r3, [r7, #0]
 800916e:	021a      	lsls	r2, r3, #8
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	431a      	orrs	r2, r3
 8009174:	68bb      	ldr	r3, [r7, #8]
 8009176:	4313      	orrs	r3, r2
 8009178:	697a      	ldr	r2, [r7, #20]
 800917a:	4313      	orrs	r3, r2
 800917c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	609a      	str	r2, [r3, #8]
}
 8009184:	bf00      	nop
 8009186:	371c      	adds	r7, #28
 8009188:	46bd      	mov	sp, r7
 800918a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918e:	4770      	bx	lr

08009190 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8009190:	b480      	push	{r7}
 8009192:	b087      	sub	sp, #28
 8009194:	af00      	add	r7, sp, #0
 8009196:	60f8      	str	r0, [r7, #12]
 8009198:	60b9      	str	r1, [r7, #8]
 800919a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	f003 031f 	and.w	r3, r3, #31
 80091a2:	2201      	movs	r2, #1
 80091a4:	fa02 f303 	lsl.w	r3, r2, r3
 80091a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1a      	ldr	r2, [r3, #32]
 80091ae:	697b      	ldr	r3, [r7, #20]
 80091b0:	43db      	mvns	r3, r3
 80091b2:	401a      	ands	r2, r3
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	6a1a      	ldr	r2, [r3, #32]
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f003 031f 	and.w	r3, r3, #31
 80091c2:	6879      	ldr	r1, [r7, #4]
 80091c4:	fa01 f303 	lsl.w	r3, r1, r3
 80091c8:	431a      	orrs	r2, r3
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	621a      	str	r2, [r3, #32]
}
 80091ce:	bf00      	nop
 80091d0:	371c      	adds	r7, #28
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
	...

080091dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80091dc:	b480      	push	{r7}
 80091de:	b085      	sub	sp, #20
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	6078      	str	r0, [r7, #4]
 80091e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d101      	bne.n	80091f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80091f0:	2302      	movs	r3, #2
 80091f2:	e050      	b.n	8009296 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2201      	movs	r2, #1
 80091f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	2202      	movs	r2, #2
 8009200:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	689b      	ldr	r3, [r3, #8]
 8009212:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800921a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	68fa      	ldr	r2, [r7, #12]
 8009222:	4313      	orrs	r3, r2
 8009224:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	4a1c      	ldr	r2, [pc, #112]	@ (80092a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009234:	4293      	cmp	r3, r2
 8009236:	d018      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009240:	d013      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	4a18      	ldr	r2, [pc, #96]	@ (80092a8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8009248:	4293      	cmp	r3, r2
 800924a:	d00e      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	4a16      	ldr	r2, [pc, #88]	@ (80092ac <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8009252:	4293      	cmp	r3, r2
 8009254:	d009      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	4a15      	ldr	r2, [pc, #84]	@ (80092b0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800925c:	4293      	cmp	r3, r2
 800925e:	d004      	beq.n	800926a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	4a13      	ldr	r2, [pc, #76]	@ (80092b4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8009266:	4293      	cmp	r3, r2
 8009268:	d10c      	bne.n	8009284 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800926a:	68bb      	ldr	r3, [r7, #8]
 800926c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009270:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009272:	683b      	ldr	r3, [r7, #0]
 8009274:	685b      	ldr	r3, [r3, #4]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	4313      	orrs	r3, r2
 800927a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	68ba      	ldr	r2, [r7, #8]
 8009282:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2201      	movs	r2, #1
 8009288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	2200      	movs	r2, #0
 8009290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009294:	2300      	movs	r3, #0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3714      	adds	r7, #20
 800929a:	46bd      	mov	sp, r7
 800929c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a0:	4770      	bx	lr
 80092a2:	bf00      	nop
 80092a4:	40010000 	.word	0x40010000
 80092a8:	40000400 	.word	0x40000400
 80092ac:	40000800 	.word	0x40000800
 80092b0:	40000c00 	.word	0x40000c00
 80092b4:	40014000 	.word	0x40014000

080092b8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80092b8:	b084      	sub	sp, #16
 80092ba:	b580      	push	{r7, lr}
 80092bc:	b084      	sub	sp, #16
 80092be:	af00      	add	r7, sp, #0
 80092c0:	6078      	str	r0, [r7, #4]
 80092c2:	f107 001c 	add.w	r0, r7, #28
 80092c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80092ca:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80092ce:	2b01      	cmp	r3, #1
 80092d0:	d123      	bne.n	800931a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80092e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80092ea:	687a      	ldr	r2, [r7, #4]
 80092ec:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	68db      	ldr	r3, [r3, #12]
 80092f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80092fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092fe:	2b01      	cmp	r3, #1
 8009300:	d105      	bne.n	800930e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800930e:	6878      	ldr	r0, [r7, #4]
 8009310:	f001 fae8 	bl	800a8e4 <USB_CoreReset>
 8009314:	4603      	mov	r3, r0
 8009316:	73fb      	strb	r3, [r7, #15]
 8009318:	e01b      	b.n	8009352 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	68db      	ldr	r3, [r3, #12]
 800931e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009326:	6878      	ldr	r0, [r7, #4]
 8009328:	f001 fadc 	bl	800a8e4 <USB_CoreReset>
 800932c:	4603      	mov	r3, r0
 800932e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009330:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009334:	2b00      	cmp	r3, #0
 8009336:	d106      	bne.n	8009346 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800933c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	639a      	str	r2, [r3, #56]	@ 0x38
 8009344:	e005      	b.n	8009352 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800934a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009352:	7fbb      	ldrb	r3, [r7, #30]
 8009354:	2b01      	cmp	r3, #1
 8009356:	d10b      	bne.n	8009370 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	689b      	ldr	r3, [r3, #8]
 800935c:	f043 0206 	orr.w	r2, r3, #6
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f043 0220 	orr.w	r2, r3, #32
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009370:	7bfb      	ldrb	r3, [r7, #15]
}
 8009372:	4618      	mov	r0, r3
 8009374:	3710      	adds	r7, #16
 8009376:	46bd      	mov	sp, r7
 8009378:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800937c:	b004      	add	sp, #16
 800937e:	4770      	bx	lr

08009380 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8009380:	b480      	push	{r7}
 8009382:	b087      	sub	sp, #28
 8009384:	af00      	add	r7, sp, #0
 8009386:	60f8      	str	r0, [r7, #12]
 8009388:	60b9      	str	r1, [r7, #8]
 800938a:	4613      	mov	r3, r2
 800938c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800938e:	79fb      	ldrb	r3, [r7, #7]
 8009390:	2b02      	cmp	r3, #2
 8009392:	d165      	bne.n	8009460 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8009394:	68bb      	ldr	r3, [r7, #8]
 8009396:	4a41      	ldr	r2, [pc, #260]	@ (800949c <USB_SetTurnaroundTime+0x11c>)
 8009398:	4293      	cmp	r3, r2
 800939a:	d906      	bls.n	80093aa <USB_SetTurnaroundTime+0x2a>
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	4a40      	ldr	r2, [pc, #256]	@ (80094a0 <USB_SetTurnaroundTime+0x120>)
 80093a0:	4293      	cmp	r3, r2
 80093a2:	d202      	bcs.n	80093aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80093a4:	230f      	movs	r3, #15
 80093a6:	617b      	str	r3, [r7, #20]
 80093a8:	e062      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	4a3c      	ldr	r2, [pc, #240]	@ (80094a0 <USB_SetTurnaroundTime+0x120>)
 80093ae:	4293      	cmp	r3, r2
 80093b0:	d306      	bcc.n	80093c0 <USB_SetTurnaroundTime+0x40>
 80093b2:	68bb      	ldr	r3, [r7, #8]
 80093b4:	4a3b      	ldr	r2, [pc, #236]	@ (80094a4 <USB_SetTurnaroundTime+0x124>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d202      	bcs.n	80093c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80093ba:	230e      	movs	r3, #14
 80093bc:	617b      	str	r3, [r7, #20]
 80093be:	e057      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80093c0:	68bb      	ldr	r3, [r7, #8]
 80093c2:	4a38      	ldr	r2, [pc, #224]	@ (80094a4 <USB_SetTurnaroundTime+0x124>)
 80093c4:	4293      	cmp	r3, r2
 80093c6:	d306      	bcc.n	80093d6 <USB_SetTurnaroundTime+0x56>
 80093c8:	68bb      	ldr	r3, [r7, #8]
 80093ca:	4a37      	ldr	r2, [pc, #220]	@ (80094a8 <USB_SetTurnaroundTime+0x128>)
 80093cc:	4293      	cmp	r3, r2
 80093ce:	d202      	bcs.n	80093d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80093d0:	230d      	movs	r3, #13
 80093d2:	617b      	str	r3, [r7, #20]
 80093d4:	e04c      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	4a33      	ldr	r2, [pc, #204]	@ (80094a8 <USB_SetTurnaroundTime+0x128>)
 80093da:	4293      	cmp	r3, r2
 80093dc:	d306      	bcc.n	80093ec <USB_SetTurnaroundTime+0x6c>
 80093de:	68bb      	ldr	r3, [r7, #8]
 80093e0:	4a32      	ldr	r2, [pc, #200]	@ (80094ac <USB_SetTurnaroundTime+0x12c>)
 80093e2:	4293      	cmp	r3, r2
 80093e4:	d802      	bhi.n	80093ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80093e6:	230c      	movs	r3, #12
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	e041      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80093ec:	68bb      	ldr	r3, [r7, #8]
 80093ee:	4a2f      	ldr	r2, [pc, #188]	@ (80094ac <USB_SetTurnaroundTime+0x12c>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d906      	bls.n	8009402 <USB_SetTurnaroundTime+0x82>
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	4a2e      	ldr	r2, [pc, #184]	@ (80094b0 <USB_SetTurnaroundTime+0x130>)
 80093f8:	4293      	cmp	r3, r2
 80093fa:	d802      	bhi.n	8009402 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80093fc:	230b      	movs	r3, #11
 80093fe:	617b      	str	r3, [r7, #20]
 8009400:	e036      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4a2a      	ldr	r2, [pc, #168]	@ (80094b0 <USB_SetTurnaroundTime+0x130>)
 8009406:	4293      	cmp	r3, r2
 8009408:	d906      	bls.n	8009418 <USB_SetTurnaroundTime+0x98>
 800940a:	68bb      	ldr	r3, [r7, #8]
 800940c:	4a29      	ldr	r2, [pc, #164]	@ (80094b4 <USB_SetTurnaroundTime+0x134>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d802      	bhi.n	8009418 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8009412:	230a      	movs	r3, #10
 8009414:	617b      	str	r3, [r7, #20]
 8009416:	e02b      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	4a26      	ldr	r2, [pc, #152]	@ (80094b4 <USB_SetTurnaroundTime+0x134>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d906      	bls.n	800942e <USB_SetTurnaroundTime+0xae>
 8009420:	68bb      	ldr	r3, [r7, #8]
 8009422:	4a25      	ldr	r2, [pc, #148]	@ (80094b8 <USB_SetTurnaroundTime+0x138>)
 8009424:	4293      	cmp	r3, r2
 8009426:	d202      	bcs.n	800942e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8009428:	2309      	movs	r3, #9
 800942a:	617b      	str	r3, [r7, #20]
 800942c:	e020      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800942e:	68bb      	ldr	r3, [r7, #8]
 8009430:	4a21      	ldr	r2, [pc, #132]	@ (80094b8 <USB_SetTurnaroundTime+0x138>)
 8009432:	4293      	cmp	r3, r2
 8009434:	d306      	bcc.n	8009444 <USB_SetTurnaroundTime+0xc4>
 8009436:	68bb      	ldr	r3, [r7, #8]
 8009438:	4a20      	ldr	r2, [pc, #128]	@ (80094bc <USB_SetTurnaroundTime+0x13c>)
 800943a:	4293      	cmp	r3, r2
 800943c:	d802      	bhi.n	8009444 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800943e:	2308      	movs	r3, #8
 8009440:	617b      	str	r3, [r7, #20]
 8009442:	e015      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8009444:	68bb      	ldr	r3, [r7, #8]
 8009446:	4a1d      	ldr	r2, [pc, #116]	@ (80094bc <USB_SetTurnaroundTime+0x13c>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d906      	bls.n	800945a <USB_SetTurnaroundTime+0xda>
 800944c:	68bb      	ldr	r3, [r7, #8]
 800944e:	4a1c      	ldr	r2, [pc, #112]	@ (80094c0 <USB_SetTurnaroundTime+0x140>)
 8009450:	4293      	cmp	r3, r2
 8009452:	d202      	bcs.n	800945a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8009454:	2307      	movs	r3, #7
 8009456:	617b      	str	r3, [r7, #20]
 8009458:	e00a      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800945a:	2306      	movs	r3, #6
 800945c:	617b      	str	r3, [r7, #20]
 800945e:	e007      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8009460:	79fb      	ldrb	r3, [r7, #7]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d102      	bne.n	800946c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8009466:	2309      	movs	r3, #9
 8009468:	617b      	str	r3, [r7, #20]
 800946a:	e001      	b.n	8009470 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800946c:	2309      	movs	r3, #9
 800946e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68db      	ldr	r3, [r3, #12]
 8009474:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	68da      	ldr	r2, [r3, #12]
 8009480:	697b      	ldr	r3, [r7, #20]
 8009482:	029b      	lsls	r3, r3, #10
 8009484:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8009488:	431a      	orrs	r2, r3
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800948e:	2300      	movs	r3, #0
}
 8009490:	4618      	mov	r0, r3
 8009492:	371c      	adds	r7, #28
 8009494:	46bd      	mov	sp, r7
 8009496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949a:	4770      	bx	lr
 800949c:	00d8acbf 	.word	0x00d8acbf
 80094a0:	00e4e1c0 	.word	0x00e4e1c0
 80094a4:	00f42400 	.word	0x00f42400
 80094a8:	01067380 	.word	0x01067380
 80094ac:	011a499f 	.word	0x011a499f
 80094b0:	01312cff 	.word	0x01312cff
 80094b4:	014ca43f 	.word	0x014ca43f
 80094b8:	016e3600 	.word	0x016e3600
 80094bc:	01a6ab1f 	.word	0x01a6ab1f
 80094c0:	01e84800 	.word	0x01e84800

080094c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b083      	sub	sp, #12
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	689b      	ldr	r3, [r3, #8]
 80094d0:	f043 0201 	orr.w	r2, r3, #1
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094d8:	2300      	movs	r3, #0
}
 80094da:	4618      	mov	r0, r3
 80094dc:	370c      	adds	r7, #12
 80094de:	46bd      	mov	sp, r7
 80094e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e4:	4770      	bx	lr

080094e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80094e6:	b480      	push	{r7}
 80094e8:	b083      	sub	sp, #12
 80094ea:	af00      	add	r7, sp, #0
 80094ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	689b      	ldr	r3, [r3, #8]
 80094f2:	f023 0201 	bic.w	r2, r3, #1
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	370c      	adds	r7, #12
 8009500:	46bd      	mov	sp, r7
 8009502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009506:	4770      	bx	lr

08009508 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009508:	b580      	push	{r7, lr}
 800950a:	b084      	sub	sp, #16
 800950c:	af00      	add	r7, sp, #0
 800950e:	6078      	str	r0, [r7, #4]
 8009510:	460b      	mov	r3, r1
 8009512:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009514:	2300      	movs	r3, #0
 8009516:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68db      	ldr	r3, [r3, #12]
 800951c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009524:	78fb      	ldrb	r3, [r7, #3]
 8009526:	2b01      	cmp	r3, #1
 8009528:	d115      	bne.n	8009556 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	68db      	ldr	r3, [r3, #12]
 800952e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009536:	200a      	movs	r0, #10
 8009538:	f7fb f9d2 	bl	80048e0 <HAL_Delay>
      ms += 10U;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	330a      	adds	r3, #10
 8009540:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 f93f 	bl	800a7c6 <USB_GetMode>
 8009548:	4603      	mov	r3, r0
 800954a:	2b01      	cmp	r3, #1
 800954c:	d01e      	beq.n	800958c <USB_SetCurrentMode+0x84>
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	2bc7      	cmp	r3, #199	@ 0xc7
 8009552:	d9f0      	bls.n	8009536 <USB_SetCurrentMode+0x2e>
 8009554:	e01a      	b.n	800958c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009556:	78fb      	ldrb	r3, [r7, #3]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d115      	bne.n	8009588 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	68db      	ldr	r3, [r3, #12]
 8009560:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009568:	200a      	movs	r0, #10
 800956a:	f7fb f9b9 	bl	80048e0 <HAL_Delay>
      ms += 10U;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	330a      	adds	r3, #10
 8009572:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009574:	6878      	ldr	r0, [r7, #4]
 8009576:	f001 f926 	bl	800a7c6 <USB_GetMode>
 800957a:	4603      	mov	r3, r0
 800957c:	2b00      	cmp	r3, #0
 800957e:	d005      	beq.n	800958c <USB_SetCurrentMode+0x84>
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	2bc7      	cmp	r3, #199	@ 0xc7
 8009584:	d9f0      	bls.n	8009568 <USB_SetCurrentMode+0x60>
 8009586:	e001      	b.n	800958c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8009588:	2301      	movs	r3, #1
 800958a:	e005      	b.n	8009598 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2bc8      	cmp	r3, #200	@ 0xc8
 8009590:	d101      	bne.n	8009596 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e000      	b.n	8009598 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009596:	2300      	movs	r3, #0
}
 8009598:	4618      	mov	r0, r3
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095a0:	b084      	sub	sp, #16
 80095a2:	b580      	push	{r7, lr}
 80095a4:	b086      	sub	sp, #24
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
 80095aa:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80095ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80095ba:	2300      	movs	r3, #0
 80095bc:	613b      	str	r3, [r7, #16]
 80095be:	e009      	b.n	80095d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80095c0:	687a      	ldr	r2, [r7, #4]
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	3340      	adds	r3, #64	@ 0x40
 80095c6:	009b      	lsls	r3, r3, #2
 80095c8:	4413      	add	r3, r2
 80095ca:	2200      	movs	r2, #0
 80095cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80095ce:	693b      	ldr	r3, [r7, #16]
 80095d0:	3301      	adds	r3, #1
 80095d2:	613b      	str	r3, [r7, #16]
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	2b0e      	cmp	r3, #14
 80095d8:	d9f2      	bls.n	80095c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80095da:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80095de:	2b00      	cmp	r3, #0
 80095e0:	d11c      	bne.n	800961c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80095e2:	68fb      	ldr	r3, [r7, #12]
 80095e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095e8:	685b      	ldr	r3, [r3, #4]
 80095ea:	68fa      	ldr	r2, [r7, #12]
 80095ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095f0:	f043 0302 	orr.w	r3, r3, #2
 80095f4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009606:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009612:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	639a      	str	r2, [r3, #56]	@ 0x38
 800961a:	e00b      	b.n	8009634 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009620:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800962c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800963a:	461a      	mov	r2, r3
 800963c:	2300      	movs	r3, #0
 800963e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009640:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009644:	2b01      	cmp	r3, #1
 8009646:	d10d      	bne.n	8009664 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800964c:	2b00      	cmp	r3, #0
 800964e:	d104      	bne.n	800965a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009650:	2100      	movs	r1, #0
 8009652:	6878      	ldr	r0, [r7, #4]
 8009654:	f000 f968 	bl	8009928 <USB_SetDevSpeed>
 8009658:	e008      	b.n	800966c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800965a:	2101      	movs	r1, #1
 800965c:	6878      	ldr	r0, [r7, #4]
 800965e:	f000 f963 	bl	8009928 <USB_SetDevSpeed>
 8009662:	e003      	b.n	800966c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009664:	2103      	movs	r1, #3
 8009666:	6878      	ldr	r0, [r7, #4]
 8009668:	f000 f95e 	bl	8009928 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800966c:	2110      	movs	r1, #16
 800966e:	6878      	ldr	r0, [r7, #4]
 8009670:	f000 f8fa 	bl	8009868 <USB_FlushTxFifo>
 8009674:	4603      	mov	r3, r0
 8009676:	2b00      	cmp	r3, #0
 8009678:	d001      	beq.n	800967e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800967a:	2301      	movs	r3, #1
 800967c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800967e:	6878      	ldr	r0, [r7, #4]
 8009680:	f000 f924 	bl	80098cc <USB_FlushRxFifo>
 8009684:	4603      	mov	r3, r0
 8009686:	2b00      	cmp	r3, #0
 8009688:	d001      	beq.n	800968e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800968a:	2301      	movs	r3, #1
 800968c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009694:	461a      	mov	r2, r3
 8009696:	2300      	movs	r3, #0
 8009698:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a0:	461a      	mov	r2, r3
 80096a2:	2300      	movs	r3, #0
 80096a4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096ac:	461a      	mov	r2, r3
 80096ae:	2300      	movs	r3, #0
 80096b0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80096b2:	2300      	movs	r3, #0
 80096b4:	613b      	str	r3, [r7, #16]
 80096b6:	e043      	b.n	8009740 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	015a      	lsls	r2, r3, #5
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	4413      	add	r3, r2
 80096c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096ca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096ce:	d118      	bne.n	8009702 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80096d0:	693b      	ldr	r3, [r7, #16]
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d10a      	bne.n	80096ec <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80096d6:	693b      	ldr	r3, [r7, #16]
 80096d8:	015a      	lsls	r2, r3, #5
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	4413      	add	r3, r2
 80096de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096e2:	461a      	mov	r2, r3
 80096e4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80096e8:	6013      	str	r3, [r2, #0]
 80096ea:	e013      	b.n	8009714 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80096ec:	693b      	ldr	r3, [r7, #16]
 80096ee:	015a      	lsls	r2, r3, #5
 80096f0:	68fb      	ldr	r3, [r7, #12]
 80096f2:	4413      	add	r3, r2
 80096f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096f8:	461a      	mov	r2, r3
 80096fa:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80096fe:	6013      	str	r3, [r2, #0]
 8009700:	e008      	b.n	8009714 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	015a      	lsls	r2, r3, #5
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4413      	add	r3, r2
 800970a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800970e:	461a      	mov	r2, r3
 8009710:	2300      	movs	r3, #0
 8009712:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	015a      	lsls	r2, r3, #5
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	4413      	add	r3, r2
 800971c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009720:	461a      	mov	r2, r3
 8009722:	2300      	movs	r3, #0
 8009724:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	015a      	lsls	r2, r3, #5
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	4413      	add	r3, r2
 800972e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009732:	461a      	mov	r2, r3
 8009734:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009738:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	3301      	adds	r3, #1
 800973e:	613b      	str	r3, [r7, #16]
 8009740:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009744:	461a      	mov	r2, r3
 8009746:	693b      	ldr	r3, [r7, #16]
 8009748:	4293      	cmp	r3, r2
 800974a:	d3b5      	bcc.n	80096b8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800974c:	2300      	movs	r3, #0
 800974e:	613b      	str	r3, [r7, #16]
 8009750:	e043      	b.n	80097da <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	015a      	lsls	r2, r3, #5
 8009756:	68fb      	ldr	r3, [r7, #12]
 8009758:	4413      	add	r3, r2
 800975a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009764:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009768:	d118      	bne.n	800979c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d10a      	bne.n	8009786 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	015a      	lsls	r2, r3, #5
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	4413      	add	r3, r2
 8009778:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977c:	461a      	mov	r2, r3
 800977e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009782:	6013      	str	r3, [r2, #0]
 8009784:	e013      	b.n	80097ae <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	015a      	lsls	r2, r3, #5
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	4413      	add	r3, r2
 800978e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009792:	461a      	mov	r2, r3
 8009794:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8009798:	6013      	str	r3, [r2, #0]
 800979a:	e008      	b.n	80097ae <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a8:	461a      	mov	r2, r3
 80097aa:	2300      	movs	r3, #0
 80097ac:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80097ae:	693b      	ldr	r3, [r7, #16]
 80097b0:	015a      	lsls	r2, r3, #5
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	4413      	add	r3, r2
 80097b6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ba:	461a      	mov	r2, r3
 80097bc:	2300      	movs	r3, #0
 80097be:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80097c0:	693b      	ldr	r3, [r7, #16]
 80097c2:	015a      	lsls	r2, r3, #5
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	4413      	add	r3, r2
 80097c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097cc:	461a      	mov	r2, r3
 80097ce:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80097d2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	3301      	adds	r3, #1
 80097d8:	613b      	str	r3, [r7, #16]
 80097da:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80097de:	461a      	mov	r2, r3
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	4293      	cmp	r3, r2
 80097e4:	d3b5      	bcc.n	8009752 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097ec:	691b      	ldr	r3, [r3, #16]
 80097ee:	68fa      	ldr	r2, [r7, #12]
 80097f0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80097f8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009806:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009808:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800980c:	2b00      	cmp	r3, #0
 800980e:	d105      	bne.n	800981c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	699b      	ldr	r3, [r3, #24]
 8009814:	f043 0210 	orr.w	r2, r3, #16
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	699a      	ldr	r2, [r3, #24]
 8009820:	4b10      	ldr	r3, [pc, #64]	@ (8009864 <USB_DevInit+0x2c4>)
 8009822:	4313      	orrs	r3, r2
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009828:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800982c:	2b00      	cmp	r3, #0
 800982e:	d005      	beq.n	800983c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	699b      	ldr	r3, [r3, #24]
 8009834:	f043 0208 	orr.w	r2, r3, #8
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800983c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009840:	2b01      	cmp	r3, #1
 8009842:	d107      	bne.n	8009854 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	699b      	ldr	r3, [r3, #24]
 8009848:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800984c:	f043 0304 	orr.w	r3, r3, #4
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009854:	7dfb      	ldrb	r3, [r7, #23]
}
 8009856:	4618      	mov	r0, r3
 8009858:	3718      	adds	r7, #24
 800985a:	46bd      	mov	sp, r7
 800985c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009860:	b004      	add	sp, #16
 8009862:	4770      	bx	lr
 8009864:	803c3800 	.word	0x803c3800

08009868 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009868:	b480      	push	{r7}
 800986a:	b085      	sub	sp, #20
 800986c:	af00      	add	r7, sp, #0
 800986e:	6078      	str	r0, [r7, #4]
 8009870:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009872:	2300      	movs	r3, #0
 8009874:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009876:	68fb      	ldr	r3, [r7, #12]
 8009878:	3301      	adds	r3, #1
 800987a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009882:	d901      	bls.n	8009888 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8009884:	2303      	movs	r3, #3
 8009886:	e01b      	b.n	80098c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	691b      	ldr	r3, [r3, #16]
 800988c:	2b00      	cmp	r3, #0
 800988e:	daf2      	bge.n	8009876 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8009890:	2300      	movs	r3, #0
 8009892:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	019b      	lsls	r3, r3, #6
 8009898:	f043 0220 	orr.w	r2, r3, #32
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098a0:	68fb      	ldr	r3, [r7, #12]
 80098a2:	3301      	adds	r3, #1
 80098a4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098a6:	68fb      	ldr	r3, [r7, #12]
 80098a8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098ac:	d901      	bls.n	80098b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80098ae:	2303      	movs	r3, #3
 80098b0:	e006      	b.n	80098c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	691b      	ldr	r3, [r3, #16]
 80098b6:	f003 0320 	and.w	r3, r3, #32
 80098ba:	2b20      	cmp	r3, #32
 80098bc:	d0f0      	beq.n	80098a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3714      	adds	r7, #20
 80098c4:	46bd      	mov	sp, r7
 80098c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ca:	4770      	bx	lr

080098cc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80098cc:	b480      	push	{r7}
 80098ce:	b085      	sub	sp, #20
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098d4:	2300      	movs	r3, #0
 80098d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	3301      	adds	r3, #1
 80098dc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098de:	68fb      	ldr	r3, [r7, #12]
 80098e0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098e4:	d901      	bls.n	80098ea <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80098e6:	2303      	movs	r3, #3
 80098e8:	e018      	b.n	800991c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	691b      	ldr	r3, [r3, #16]
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	daf2      	bge.n	80098d8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80098f2:	2300      	movs	r3, #0
 80098f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2210      	movs	r2, #16
 80098fa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	3301      	adds	r3, #1
 8009900:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009908:	d901      	bls.n	800990e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e006      	b.n	800991c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	691b      	ldr	r3, [r3, #16]
 8009912:	f003 0310 	and.w	r3, r3, #16
 8009916:	2b10      	cmp	r3, #16
 8009918:	d0f0      	beq.n	80098fc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	3714      	adds	r7, #20
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr

08009928 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009928:	b480      	push	{r7}
 800992a:	b085      	sub	sp, #20
 800992c:	af00      	add	r7, sp, #0
 800992e:	6078      	str	r0, [r7, #4]
 8009930:	460b      	mov	r3, r1
 8009932:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800993e:	681a      	ldr	r2, [r3, #0]
 8009940:	78fb      	ldrb	r3, [r7, #3]
 8009942:	68f9      	ldr	r1, [r7, #12]
 8009944:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009948:	4313      	orrs	r3, r2
 800994a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800994c:	2300      	movs	r3, #0
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800995a:	b480      	push	{r7}
 800995c:	b087      	sub	sp, #28
 800995e:	af00      	add	r7, sp, #0
 8009960:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800996c:	689b      	ldr	r3, [r3, #8]
 800996e:	f003 0306 	and.w	r3, r3, #6
 8009972:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2b00      	cmp	r3, #0
 8009978:	d102      	bne.n	8009980 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800997a:	2300      	movs	r3, #0
 800997c:	75fb      	strb	r3, [r7, #23]
 800997e:	e00a      	b.n	8009996 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d002      	beq.n	800998c <USB_GetDevSpeed+0x32>
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2b06      	cmp	r3, #6
 800998a:	d102      	bne.n	8009992 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800998c:	2302      	movs	r3, #2
 800998e:	75fb      	strb	r3, [r7, #23]
 8009990:	e001      	b.n	8009996 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8009992:	230f      	movs	r3, #15
 8009994:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8009996:	7dfb      	ldrb	r3, [r7, #23]
}
 8009998:	4618      	mov	r0, r3
 800999a:	371c      	adds	r7, #28
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr

080099a4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80099a4:	b480      	push	{r7}
 80099a6:	b085      	sub	sp, #20
 80099a8:	af00      	add	r7, sp, #0
 80099aa:	6078      	str	r0, [r7, #4]
 80099ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80099b2:	683b      	ldr	r3, [r7, #0]
 80099b4:	781b      	ldrb	r3, [r3, #0]
 80099b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80099b8:	683b      	ldr	r3, [r7, #0]
 80099ba:	785b      	ldrb	r3, [r3, #1]
 80099bc:	2b01      	cmp	r3, #1
 80099be:	d13a      	bne.n	8009a36 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80099c6:	69da      	ldr	r2, [r3, #28]
 80099c8:	683b      	ldr	r3, [r7, #0]
 80099ca:	781b      	ldrb	r3, [r3, #0]
 80099cc:	f003 030f 	and.w	r3, r3, #15
 80099d0:	2101      	movs	r1, #1
 80099d2:	fa01 f303 	lsl.w	r3, r1, r3
 80099d6:	b29b      	uxth	r3, r3
 80099d8:	68f9      	ldr	r1, [r7, #12]
 80099da:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80099de:	4313      	orrs	r3, r2
 80099e0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	015a      	lsls	r2, r3, #5
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	4413      	add	r3, r2
 80099ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d155      	bne.n	8009aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80099f8:	68bb      	ldr	r3, [r7, #8]
 80099fa:	015a      	lsls	r2, r3, #5
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	4413      	add	r3, r2
 8009a00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a04:	681a      	ldr	r2, [r3, #0]
 8009a06:	683b      	ldr	r3, [r7, #0]
 8009a08:	689b      	ldr	r3, [r3, #8]
 8009a0a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a0e:	683b      	ldr	r3, [r7, #0]
 8009a10:	791b      	ldrb	r3, [r3, #4]
 8009a12:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a14:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009a16:	68bb      	ldr	r3, [r7, #8]
 8009a18:	059b      	lsls	r3, r3, #22
 8009a1a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009a1c:	4313      	orrs	r3, r2
 8009a1e:	68ba      	ldr	r2, [r7, #8]
 8009a20:	0151      	lsls	r1, r2, #5
 8009a22:	68fa      	ldr	r2, [r7, #12]
 8009a24:	440a      	add	r2, r1
 8009a26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009a32:	6013      	str	r3, [r2, #0]
 8009a34:	e036      	b.n	8009aa4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a3c:	69da      	ldr	r2, [r3, #28]
 8009a3e:	683b      	ldr	r3, [r7, #0]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 030f 	and.w	r3, r3, #15
 8009a46:	2101      	movs	r1, #1
 8009a48:	fa01 f303 	lsl.w	r3, r1, r3
 8009a4c:	041b      	lsls	r3, r3, #16
 8009a4e:	68f9      	ldr	r1, [r7, #12]
 8009a50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a54:	4313      	orrs	r3, r2
 8009a56:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	015a      	lsls	r2, r3, #5
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	4413      	add	r3, r2
 8009a60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009a6a:	2b00      	cmp	r3, #0
 8009a6c:	d11a      	bne.n	8009aa4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	015a      	lsls	r2, r3, #5
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	4413      	add	r3, r2
 8009a76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	683b      	ldr	r3, [r7, #0]
 8009a7e:	689b      	ldr	r3, [r3, #8]
 8009a80:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8009a84:	683b      	ldr	r3, [r7, #0]
 8009a86:	791b      	ldrb	r3, [r3, #4]
 8009a88:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8009a8a:	430b      	orrs	r3, r1
 8009a8c:	4313      	orrs	r3, r2
 8009a8e:	68ba      	ldr	r2, [r7, #8]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	68fa      	ldr	r2, [r7, #12]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a9e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009aa2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8009aa4:	2300      	movs	r3, #0
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3714      	adds	r7, #20
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab0:	4770      	bx	lr
	...

08009ab4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b085      	sub	sp, #20
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	6078      	str	r0, [r7, #4]
 8009abc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009ac2:	683b      	ldr	r3, [r7, #0]
 8009ac4:	781b      	ldrb	r3, [r3, #0]
 8009ac6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009ac8:	683b      	ldr	r3, [r7, #0]
 8009aca:	785b      	ldrb	r3, [r3, #1]
 8009acc:	2b01      	cmp	r3, #1
 8009ace:	d161      	bne.n	8009b94 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	015a      	lsls	r2, r3, #5
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	4413      	add	r3, r2
 8009ad8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009ae6:	d11f      	bne.n	8009b28 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	015a      	lsls	r2, r3, #5
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	4413      	add	r3, r2
 8009af0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	0151      	lsls	r1, r2, #5
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	440a      	add	r2, r1
 8009afe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b02:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009b06:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009b08:	68bb      	ldr	r3, [r7, #8]
 8009b0a:	015a      	lsls	r2, r3, #5
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	4413      	add	r3, r2
 8009b10:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	68ba      	ldr	r2, [r7, #8]
 8009b18:	0151      	lsls	r1, r2, #5
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	440a      	add	r2, r1
 8009b1e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009b22:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009b26:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009b30:	683b      	ldr	r3, [r7, #0]
 8009b32:	781b      	ldrb	r3, [r3, #0]
 8009b34:	f003 030f 	and.w	r3, r3, #15
 8009b38:	2101      	movs	r1, #1
 8009b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	43db      	mvns	r3, r3
 8009b42:	68f9      	ldr	r1, [r7, #12]
 8009b44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b48:	4013      	ands	r3, r2
 8009b4a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009b52:	69da      	ldr	r2, [r3, #28]
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	781b      	ldrb	r3, [r3, #0]
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	2101      	movs	r1, #1
 8009b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8009b62:	b29b      	uxth	r3, r3
 8009b64:	43db      	mvns	r3, r3
 8009b66:	68f9      	ldr	r1, [r7, #12]
 8009b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009b6c:	4013      	ands	r3, r2
 8009b6e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8009b70:	68bb      	ldr	r3, [r7, #8]
 8009b72:	015a      	lsls	r2, r3, #5
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	4413      	add	r3, r2
 8009b78:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b7c:	681a      	ldr	r2, [r3, #0]
 8009b7e:	68bb      	ldr	r3, [r7, #8]
 8009b80:	0159      	lsls	r1, r3, #5
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	440b      	add	r3, r1
 8009b86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009b8a:	4619      	mov	r1, r3
 8009b8c:	4b35      	ldr	r3, [pc, #212]	@ (8009c64 <USB_DeactivateEndpoint+0x1b0>)
 8009b8e:	4013      	ands	r3, r2
 8009b90:	600b      	str	r3, [r1, #0]
 8009b92:	e060      	b.n	8009c56 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	015a      	lsls	r2, r3, #5
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	4413      	add	r3, r2
 8009b9c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009ba6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009baa:	d11f      	bne.n	8009bec <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	015a      	lsls	r2, r3, #5
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	4413      	add	r3, r2
 8009bb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	68ba      	ldr	r2, [r7, #8]
 8009bbc:	0151      	lsls	r1, r2, #5
 8009bbe:	68fa      	ldr	r2, [r7, #12]
 8009bc0:	440a      	add	r2, r1
 8009bc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bc6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009bca:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009bcc:	68bb      	ldr	r3, [r7, #8]
 8009bce:	015a      	lsls	r2, r3, #5
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	4413      	add	r3, r2
 8009bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68ba      	ldr	r2, [r7, #8]
 8009bdc:	0151      	lsls	r1, r2, #5
 8009bde:	68fa      	ldr	r2, [r7, #12]
 8009be0:	440a      	add	r2, r1
 8009be2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009be6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009bea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009bf2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009bf4:	683b      	ldr	r3, [r7, #0]
 8009bf6:	781b      	ldrb	r3, [r3, #0]
 8009bf8:	f003 030f 	and.w	r3, r3, #15
 8009bfc:	2101      	movs	r1, #1
 8009bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	43db      	mvns	r3, r3
 8009c06:	68f9      	ldr	r1, [r7, #12]
 8009c08:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c0c:	4013      	ands	r3, r2
 8009c0e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c16:	69da      	ldr	r2, [r3, #28]
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	f003 030f 	and.w	r3, r3, #15
 8009c20:	2101      	movs	r1, #1
 8009c22:	fa01 f303 	lsl.w	r3, r1, r3
 8009c26:	041b      	lsls	r3, r3, #16
 8009c28:	43db      	mvns	r3, r3
 8009c2a:	68f9      	ldr	r1, [r7, #12]
 8009c2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009c30:	4013      	ands	r3, r2
 8009c32:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009c34:	68bb      	ldr	r3, [r7, #8]
 8009c36:	015a      	lsls	r2, r3, #5
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4413      	add	r3, r2
 8009c3c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c40:	681a      	ldr	r2, [r3, #0]
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	0159      	lsls	r1, r3, #5
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	440b      	add	r3, r1
 8009c4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4e:	4619      	mov	r1, r3
 8009c50:	4b05      	ldr	r3, [pc, #20]	@ (8009c68 <USB_DeactivateEndpoint+0x1b4>)
 8009c52:	4013      	ands	r3, r2
 8009c54:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009c56:	2300      	movs	r3, #0
}
 8009c58:	4618      	mov	r0, r3
 8009c5a:	3714      	adds	r7, #20
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c62:	4770      	bx	lr
 8009c64:	ec337800 	.word	0xec337800
 8009c68:	eff37800 	.word	0xeff37800

08009c6c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b08a      	sub	sp, #40	@ 0x28
 8009c70:	af02      	add	r7, sp, #8
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	4613      	mov	r3, r2
 8009c78:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	785b      	ldrb	r3, [r3, #1]
 8009c88:	2b01      	cmp	r3, #1
 8009c8a:	f040 817f 	bne.w	8009f8c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8009c8e:	68bb      	ldr	r3, [r7, #8]
 8009c90:	691b      	ldr	r3, [r3, #16]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d132      	bne.n	8009cfc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009c96:	69bb      	ldr	r3, [r7, #24]
 8009c98:	015a      	lsls	r2, r3, #5
 8009c9a:	69fb      	ldr	r3, [r7, #28]
 8009c9c:	4413      	add	r3, r2
 8009c9e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ca2:	691b      	ldr	r3, [r3, #16]
 8009ca4:	69ba      	ldr	r2, [r7, #24]
 8009ca6:	0151      	lsls	r1, r2, #5
 8009ca8:	69fa      	ldr	r2, [r7, #28]
 8009caa:	440a      	add	r2, r1
 8009cac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cb0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009cb4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009cb8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009cba:	69bb      	ldr	r3, [r7, #24]
 8009cbc:	015a      	lsls	r2, r3, #5
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cc6:	691b      	ldr	r3, [r3, #16]
 8009cc8:	69ba      	ldr	r2, [r7, #24]
 8009cca:	0151      	lsls	r1, r2, #5
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	440a      	add	r2, r1
 8009cd0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009cd8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cda:	69bb      	ldr	r3, [r7, #24]
 8009cdc:	015a      	lsls	r2, r3, #5
 8009cde:	69fb      	ldr	r3, [r7, #28]
 8009ce0:	4413      	add	r3, r2
 8009ce2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ce6:	691b      	ldr	r3, [r3, #16]
 8009ce8:	69ba      	ldr	r2, [r7, #24]
 8009cea:	0151      	lsls	r1, r2, #5
 8009cec:	69fa      	ldr	r2, [r7, #28]
 8009cee:	440a      	add	r2, r1
 8009cf0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cf4:	0cdb      	lsrs	r3, r3, #19
 8009cf6:	04db      	lsls	r3, r3, #19
 8009cf8:	6113      	str	r3, [r2, #16]
 8009cfa:	e097      	b.n	8009e2c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	015a      	lsls	r2, r3, #5
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	4413      	add	r3, r2
 8009d04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	69ba      	ldr	r2, [r7, #24]
 8009d0c:	0151      	lsls	r1, r2, #5
 8009d0e:	69fa      	ldr	r2, [r7, #28]
 8009d10:	440a      	add	r2, r1
 8009d12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d16:	0cdb      	lsrs	r3, r3, #19
 8009d18:	04db      	lsls	r3, r3, #19
 8009d1a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009d1c:	69bb      	ldr	r3, [r7, #24]
 8009d1e:	015a      	lsls	r2, r3, #5
 8009d20:	69fb      	ldr	r3, [r7, #28]
 8009d22:	4413      	add	r3, r2
 8009d24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d28:	691b      	ldr	r3, [r3, #16]
 8009d2a:	69ba      	ldr	r2, [r7, #24]
 8009d2c:	0151      	lsls	r1, r2, #5
 8009d2e:	69fa      	ldr	r2, [r7, #28]
 8009d30:	440a      	add	r2, r1
 8009d32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d36:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009d3a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009d3e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009d40:	69bb      	ldr	r3, [r7, #24]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d11a      	bne.n	8009d7c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	691a      	ldr	r2, [r3, #16]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	689b      	ldr	r3, [r3, #8]
 8009d4e:	429a      	cmp	r2, r3
 8009d50:	d903      	bls.n	8009d5a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009d52:	68bb      	ldr	r3, [r7, #8]
 8009d54:	689a      	ldr	r2, [r3, #8]
 8009d56:	68bb      	ldr	r3, [r7, #8]
 8009d58:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009d5a:	69bb      	ldr	r3, [r7, #24]
 8009d5c:	015a      	lsls	r2, r3, #5
 8009d5e:	69fb      	ldr	r3, [r7, #28]
 8009d60:	4413      	add	r3, r2
 8009d62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d66:	691b      	ldr	r3, [r3, #16]
 8009d68:	69ba      	ldr	r2, [r7, #24]
 8009d6a:	0151      	lsls	r1, r2, #5
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	440a      	add	r2, r1
 8009d70:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d74:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009d78:	6113      	str	r3, [r2, #16]
 8009d7a:	e044      	b.n	8009e06 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009d7c:	68bb      	ldr	r3, [r7, #8]
 8009d7e:	691a      	ldr	r2, [r3, #16]
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	689b      	ldr	r3, [r3, #8]
 8009d84:	4413      	add	r3, r2
 8009d86:	1e5a      	subs	r2, r3, #1
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	689b      	ldr	r3, [r3, #8]
 8009d8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009d90:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 8009d92:	69bb      	ldr	r3, [r7, #24]
 8009d94:	015a      	lsls	r2, r3, #5
 8009d96:	69fb      	ldr	r3, [r7, #28]
 8009d98:	4413      	add	r3, r2
 8009d9a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d9e:	691a      	ldr	r2, [r3, #16]
 8009da0:	8afb      	ldrh	r3, [r7, #22]
 8009da2:	04d9      	lsls	r1, r3, #19
 8009da4:	4ba4      	ldr	r3, [pc, #656]	@ (800a038 <USB_EPStartXfer+0x3cc>)
 8009da6:	400b      	ands	r3, r1
 8009da8:	69b9      	ldr	r1, [r7, #24]
 8009daa:	0148      	lsls	r0, r1, #5
 8009dac:	69f9      	ldr	r1, [r7, #28]
 8009dae:	4401      	add	r1, r0
 8009db0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009db4:	4313      	orrs	r3, r2
 8009db6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009db8:	68bb      	ldr	r3, [r7, #8]
 8009dba:	791b      	ldrb	r3, [r3, #4]
 8009dbc:	2b01      	cmp	r3, #1
 8009dbe:	d122      	bne.n	8009e06 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009dc0:	69bb      	ldr	r3, [r7, #24]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	69fb      	ldr	r3, [r7, #28]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dcc:	691b      	ldr	r3, [r3, #16]
 8009dce:	69ba      	ldr	r2, [r7, #24]
 8009dd0:	0151      	lsls	r1, r2, #5
 8009dd2:	69fa      	ldr	r2, [r7, #28]
 8009dd4:	440a      	add	r2, r1
 8009dd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009dda:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009dde:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009de0:	69bb      	ldr	r3, [r7, #24]
 8009de2:	015a      	lsls	r2, r3, #5
 8009de4:	69fb      	ldr	r3, [r7, #28]
 8009de6:	4413      	add	r3, r2
 8009de8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009dec:	691a      	ldr	r2, [r3, #16]
 8009dee:	8afb      	ldrh	r3, [r7, #22]
 8009df0:	075b      	lsls	r3, r3, #29
 8009df2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009df6:	69b9      	ldr	r1, [r7, #24]
 8009df8:	0148      	lsls	r0, r1, #5
 8009dfa:	69f9      	ldr	r1, [r7, #28]
 8009dfc:	4401      	add	r1, r0
 8009dfe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e02:	4313      	orrs	r3, r2
 8009e04:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009e06:	69bb      	ldr	r3, [r7, #24]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	69fb      	ldr	r3, [r7, #28]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e12:	691a      	ldr	r2, [r3, #16]
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	691b      	ldr	r3, [r3, #16]
 8009e18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009e1c:	69b9      	ldr	r1, [r7, #24]
 8009e1e:	0148      	lsls	r0, r1, #5
 8009e20:	69f9      	ldr	r1, [r7, #28]
 8009e22:	4401      	add	r1, r0
 8009e24:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009e28:	4313      	orrs	r3, r2
 8009e2a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009e2c:	79fb      	ldrb	r3, [r7, #7]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	d14b      	bne.n	8009eca <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009e32:	68bb      	ldr	r3, [r7, #8]
 8009e34:	69db      	ldr	r3, [r3, #28]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d009      	beq.n	8009e4e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009e3a:	69bb      	ldr	r3, [r7, #24]
 8009e3c:	015a      	lsls	r2, r3, #5
 8009e3e:	69fb      	ldr	r3, [r7, #28]
 8009e40:	4413      	add	r3, r2
 8009e42:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e46:	461a      	mov	r2, r3
 8009e48:	68bb      	ldr	r3, [r7, #8]
 8009e4a:	69db      	ldr	r3, [r3, #28]
 8009e4c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009e4e:	68bb      	ldr	r3, [r7, #8]
 8009e50:	791b      	ldrb	r3, [r3, #4]
 8009e52:	2b01      	cmp	r3, #1
 8009e54:	d128      	bne.n	8009ea8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009e56:	69fb      	ldr	r3, [r7, #28]
 8009e58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e5c:	689b      	ldr	r3, [r3, #8]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d110      	bne.n	8009e88 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009e66:	69bb      	ldr	r3, [r7, #24]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	69fb      	ldr	r3, [r7, #28]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	69ba      	ldr	r2, [r7, #24]
 8009e76:	0151      	lsls	r1, r2, #5
 8009e78:	69fa      	ldr	r2, [r7, #28]
 8009e7a:	440a      	add	r2, r1
 8009e7c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009e80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009e84:	6013      	str	r3, [r2, #0]
 8009e86:	e00f      	b.n	8009ea8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009e88:	69bb      	ldr	r3, [r7, #24]
 8009e8a:	015a      	lsls	r2, r3, #5
 8009e8c:	69fb      	ldr	r3, [r7, #28]
 8009e8e:	4413      	add	r3, r2
 8009e90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	69ba      	ldr	r2, [r7, #24]
 8009e98:	0151      	lsls	r1, r2, #5
 8009e9a:	69fa      	ldr	r2, [r7, #28]
 8009e9c:	440a      	add	r2, r1
 8009e9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ea2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ea6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009ea8:	69bb      	ldr	r3, [r7, #24]
 8009eaa:	015a      	lsls	r2, r3, #5
 8009eac:	69fb      	ldr	r3, [r7, #28]
 8009eae:	4413      	add	r3, r2
 8009eb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	69ba      	ldr	r2, [r7, #24]
 8009eb8:	0151      	lsls	r1, r2, #5
 8009eba:	69fa      	ldr	r2, [r7, #28]
 8009ebc:	440a      	add	r2, r1
 8009ebe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ec2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ec6:	6013      	str	r3, [r2, #0]
 8009ec8:	e166      	b.n	800a198 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009eca:	69bb      	ldr	r3, [r7, #24]
 8009ecc:	015a      	lsls	r2, r3, #5
 8009ece:	69fb      	ldr	r3, [r7, #28]
 8009ed0:	4413      	add	r3, r2
 8009ed2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	69ba      	ldr	r2, [r7, #24]
 8009eda:	0151      	lsls	r1, r2, #5
 8009edc:	69fa      	ldr	r2, [r7, #28]
 8009ede:	440a      	add	r2, r1
 8009ee0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009ee4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009ee8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	791b      	ldrb	r3, [r3, #4]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d015      	beq.n	8009f1e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009ef2:	68bb      	ldr	r3, [r7, #8]
 8009ef4:	691b      	ldr	r3, [r3, #16]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	f000 814e 	beq.w	800a198 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009efc:	69fb      	ldr	r3, [r7, #28]
 8009efe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	f003 030f 	and.w	r3, r3, #15
 8009f0c:	2101      	movs	r1, #1
 8009f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009f12:	69f9      	ldr	r1, [r7, #28]
 8009f14:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009f1c:	e13c      	b.n	800a198 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009f1e:	69fb      	ldr	r3, [r7, #28]
 8009f20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f24:	689b      	ldr	r3, [r3, #8]
 8009f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d110      	bne.n	8009f50 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009f2e:	69bb      	ldr	r3, [r7, #24]
 8009f30:	015a      	lsls	r2, r3, #5
 8009f32:	69fb      	ldr	r3, [r7, #28]
 8009f34:	4413      	add	r3, r2
 8009f36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	69ba      	ldr	r2, [r7, #24]
 8009f3e:	0151      	lsls	r1, r2, #5
 8009f40:	69fa      	ldr	r2, [r7, #28]
 8009f42:	440a      	add	r2, r1
 8009f44:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f48:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009f4c:	6013      	str	r3, [r2, #0]
 8009f4e:	e00f      	b.n	8009f70 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009f50:	69bb      	ldr	r3, [r7, #24]
 8009f52:	015a      	lsls	r2, r3, #5
 8009f54:	69fb      	ldr	r3, [r7, #28]
 8009f56:	4413      	add	r3, r2
 8009f58:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	69ba      	ldr	r2, [r7, #24]
 8009f60:	0151      	lsls	r1, r2, #5
 8009f62:	69fa      	ldr	r2, [r7, #28]
 8009f64:	440a      	add	r2, r1
 8009f66:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f6a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009f6e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	68d9      	ldr	r1, [r3, #12]
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	781a      	ldrb	r2, [r3, #0]
 8009f78:	68bb      	ldr	r3, [r7, #8]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	b298      	uxth	r0, r3
 8009f7e:	79fb      	ldrb	r3, [r7, #7]
 8009f80:	9300      	str	r3, [sp, #0]
 8009f82:	4603      	mov	r3, r0
 8009f84:	68f8      	ldr	r0, [r7, #12]
 8009f86:	f000 f9b9 	bl	800a2fc <USB_WritePacket>
 8009f8a:	e105      	b.n	800a198 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009f8c:	69bb      	ldr	r3, [r7, #24]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009f98:	691b      	ldr	r3, [r3, #16]
 8009f9a:	69ba      	ldr	r2, [r7, #24]
 8009f9c:	0151      	lsls	r1, r2, #5
 8009f9e:	69fa      	ldr	r2, [r7, #28]
 8009fa0:	440a      	add	r2, r1
 8009fa2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fa6:	0cdb      	lsrs	r3, r3, #19
 8009fa8:	04db      	lsls	r3, r3, #19
 8009faa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009fac:	69bb      	ldr	r3, [r7, #24]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	69fb      	ldr	r3, [r7, #28]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	69ba      	ldr	r2, [r7, #24]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	69fa      	ldr	r2, [r7, #28]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fc6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009fca:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009fce:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d132      	bne.n	800a03c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d003      	beq.n	8009fe6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	689a      	ldr	r2, [r3, #8]
 8009fe2:	68bb      	ldr	r3, [r7, #8]
 8009fe4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	689a      	ldr	r2, [r3, #8]
 8009fea:	68bb      	ldr	r3, [r7, #8]
 8009fec:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009fee:	69bb      	ldr	r3, [r7, #24]
 8009ff0:	015a      	lsls	r2, r3, #5
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	4413      	add	r3, r2
 8009ff6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ffa:	691a      	ldr	r2, [r3, #16]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6a1b      	ldr	r3, [r3, #32]
 800a000:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a004:	69b9      	ldr	r1, [r7, #24]
 800a006:	0148      	lsls	r0, r1, #5
 800a008:	69f9      	ldr	r1, [r7, #28]
 800a00a:	4401      	add	r1, r0
 800a00c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a010:	4313      	orrs	r3, r2
 800a012:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a014:	69bb      	ldr	r3, [r7, #24]
 800a016:	015a      	lsls	r2, r3, #5
 800a018:	69fb      	ldr	r3, [r7, #28]
 800a01a:	4413      	add	r3, r2
 800a01c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a020:	691b      	ldr	r3, [r3, #16]
 800a022:	69ba      	ldr	r2, [r7, #24]
 800a024:	0151      	lsls	r1, r2, #5
 800a026:	69fa      	ldr	r2, [r7, #28]
 800a028:	440a      	add	r2, r1
 800a02a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a02e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a032:	6113      	str	r3, [r2, #16]
 800a034:	e062      	b.n	800a0fc <USB_EPStartXfer+0x490>
 800a036:	bf00      	nop
 800a038:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	691b      	ldr	r3, [r3, #16]
 800a040:	2b00      	cmp	r3, #0
 800a042:	d123      	bne.n	800a08c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	015a      	lsls	r2, r3, #5
 800a048:	69fb      	ldr	r3, [r7, #28]
 800a04a:	4413      	add	r3, r2
 800a04c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a050:	691a      	ldr	r2, [r3, #16]
 800a052:	68bb      	ldr	r3, [r7, #8]
 800a054:	689b      	ldr	r3, [r3, #8]
 800a056:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a05a:	69b9      	ldr	r1, [r7, #24]
 800a05c:	0148      	lsls	r0, r1, #5
 800a05e:	69f9      	ldr	r1, [r7, #28]
 800a060:	4401      	add	r1, r0
 800a062:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a066:	4313      	orrs	r3, r2
 800a068:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a06a:	69bb      	ldr	r3, [r7, #24]
 800a06c:	015a      	lsls	r2, r3, #5
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	4413      	add	r3, r2
 800a072:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	69ba      	ldr	r2, [r7, #24]
 800a07a:	0151      	lsls	r1, r2, #5
 800a07c:	69fa      	ldr	r2, [r7, #28]
 800a07e:	440a      	add	r2, r1
 800a080:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a084:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a088:	6113      	str	r3, [r2, #16]
 800a08a:	e037      	b.n	800a0fc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	691a      	ldr	r2, [r3, #16]
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	689b      	ldr	r3, [r3, #8]
 800a094:	4413      	add	r3, r2
 800a096:	1e5a      	subs	r2, r3, #1
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	689b      	ldr	r3, [r3, #8]
 800a09c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a0a0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	689b      	ldr	r3, [r3, #8]
 800a0a6:	8afa      	ldrh	r2, [r7, #22]
 800a0a8:	fb03 f202 	mul.w	r2, r3, r2
 800a0ac:	68bb      	ldr	r3, [r7, #8]
 800a0ae:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800a0b0:	69bb      	ldr	r3, [r7, #24]
 800a0b2:	015a      	lsls	r2, r3, #5
 800a0b4:	69fb      	ldr	r3, [r7, #28]
 800a0b6:	4413      	add	r3, r2
 800a0b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0bc:	691a      	ldr	r2, [r3, #16]
 800a0be:	8afb      	ldrh	r3, [r7, #22]
 800a0c0:	04d9      	lsls	r1, r3, #19
 800a0c2:	4b38      	ldr	r3, [pc, #224]	@ (800a1a4 <USB_EPStartXfer+0x538>)
 800a0c4:	400b      	ands	r3, r1
 800a0c6:	69b9      	ldr	r1, [r7, #24]
 800a0c8:	0148      	lsls	r0, r1, #5
 800a0ca:	69f9      	ldr	r1, [r7, #28]
 800a0cc:	4401      	add	r1, r0
 800a0ce:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800a0d6:	69bb      	ldr	r3, [r7, #24]
 800a0d8:	015a      	lsls	r2, r3, #5
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	4413      	add	r3, r2
 800a0de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0e2:	691a      	ldr	r2, [r3, #16]
 800a0e4:	68bb      	ldr	r3, [r7, #8]
 800a0e6:	6a1b      	ldr	r3, [r3, #32]
 800a0e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800a0ec:	69b9      	ldr	r1, [r7, #24]
 800a0ee:	0148      	lsls	r0, r1, #5
 800a0f0:	69f9      	ldr	r1, [r7, #28]
 800a0f2:	4401      	add	r1, r0
 800a0f4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800a0fc:	79fb      	ldrb	r3, [r7, #7]
 800a0fe:	2b01      	cmp	r3, #1
 800a100:	d10d      	bne.n	800a11e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800a102:	68bb      	ldr	r3, [r7, #8]
 800a104:	68db      	ldr	r3, [r3, #12]
 800a106:	2b00      	cmp	r3, #0
 800a108:	d009      	beq.n	800a11e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800a10a:	68bb      	ldr	r3, [r7, #8]
 800a10c:	68d9      	ldr	r1, [r3, #12]
 800a10e:	69bb      	ldr	r3, [r7, #24]
 800a110:	015a      	lsls	r2, r3, #5
 800a112:	69fb      	ldr	r3, [r7, #28]
 800a114:	4413      	add	r3, r2
 800a116:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a11a:	460a      	mov	r2, r1
 800a11c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	791b      	ldrb	r3, [r3, #4]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d128      	bne.n	800a178 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12c:	689b      	ldr	r3, [r3, #8]
 800a12e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a132:	2b00      	cmp	r3, #0
 800a134:	d110      	bne.n	800a158 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	015a      	lsls	r2, r3, #5
 800a13a:	69fb      	ldr	r3, [r7, #28]
 800a13c:	4413      	add	r3, r2
 800a13e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	69ba      	ldr	r2, [r7, #24]
 800a146:	0151      	lsls	r1, r2, #5
 800a148:	69fa      	ldr	r2, [r7, #28]
 800a14a:	440a      	add	r2, r1
 800a14c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a150:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a154:	6013      	str	r3, [r2, #0]
 800a156:	e00f      	b.n	800a178 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800a158:	69bb      	ldr	r3, [r7, #24]
 800a15a:	015a      	lsls	r2, r3, #5
 800a15c:	69fb      	ldr	r3, [r7, #28]
 800a15e:	4413      	add	r3, r2
 800a160:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	69ba      	ldr	r2, [r7, #24]
 800a168:	0151      	lsls	r1, r2, #5
 800a16a:	69fa      	ldr	r2, [r7, #28]
 800a16c:	440a      	add	r2, r1
 800a16e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a176:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800a178:	69bb      	ldr	r3, [r7, #24]
 800a17a:	015a      	lsls	r2, r3, #5
 800a17c:	69fb      	ldr	r3, [r7, #28]
 800a17e:	4413      	add	r3, r2
 800a180:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	69ba      	ldr	r2, [r7, #24]
 800a188:	0151      	lsls	r1, r2, #5
 800a18a:	69fa      	ldr	r2, [r7, #28]
 800a18c:	440a      	add	r2, r1
 800a18e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a192:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800a196:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a198:	2300      	movs	r3, #0
}
 800a19a:	4618      	mov	r0, r3
 800a19c:	3720      	adds	r7, #32
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	bd80      	pop	{r7, pc}
 800a1a2:	bf00      	nop
 800a1a4:	1ff80000 	.word	0x1ff80000

0800a1a8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	6078      	str	r0, [r7, #4]
 800a1b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800a1be:	683b      	ldr	r3, [r7, #0]
 800a1c0:	785b      	ldrb	r3, [r3, #1]
 800a1c2:	2b01      	cmp	r3, #1
 800a1c4:	d14a      	bne.n	800a25c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800a1c6:	683b      	ldr	r3, [r7, #0]
 800a1c8:	781b      	ldrb	r3, [r3, #0]
 800a1ca:	015a      	lsls	r2, r3, #5
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	4413      	add	r3, r2
 800a1d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a1da:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a1de:	f040 8086 	bne.w	800a2ee <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	781b      	ldrb	r3, [r3, #0]
 800a1e6:	015a      	lsls	r2, r3, #5
 800a1e8:	693b      	ldr	r3, [r7, #16]
 800a1ea:	4413      	add	r3, r2
 800a1ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	683a      	ldr	r2, [r7, #0]
 800a1f4:	7812      	ldrb	r2, [r2, #0]
 800a1f6:	0151      	lsls	r1, r2, #5
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	440a      	add	r2, r1
 800a1fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a200:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a204:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	781b      	ldrb	r3, [r3, #0]
 800a20a:	015a      	lsls	r2, r3, #5
 800a20c:	693b      	ldr	r3, [r7, #16]
 800a20e:	4413      	add	r3, r2
 800a210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	683a      	ldr	r2, [r7, #0]
 800a218:	7812      	ldrb	r2, [r2, #0]
 800a21a:	0151      	lsls	r1, r2, #5
 800a21c:	693a      	ldr	r2, [r7, #16]
 800a21e:	440a      	add	r2, r1
 800a220:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a224:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a228:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	3301      	adds	r3, #1
 800a22e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a236:	4293      	cmp	r3, r2
 800a238:	d902      	bls.n	800a240 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800a23a:	2301      	movs	r3, #1
 800a23c:	75fb      	strb	r3, [r7, #23]
          break;
 800a23e:	e056      	b.n	800a2ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	015a      	lsls	r2, r3, #5
 800a246:	693b      	ldr	r3, [r7, #16]
 800a248:	4413      	add	r3, r2
 800a24a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a254:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a258:	d0e7      	beq.n	800a22a <USB_EPStopXfer+0x82>
 800a25a:	e048      	b.n	800a2ee <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a25c:	683b      	ldr	r3, [r7, #0]
 800a25e:	781b      	ldrb	r3, [r3, #0]
 800a260:	015a      	lsls	r2, r3, #5
 800a262:	693b      	ldr	r3, [r7, #16]
 800a264:	4413      	add	r3, r2
 800a266:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a274:	d13b      	bne.n	800a2ee <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800a276:	683b      	ldr	r3, [r7, #0]
 800a278:	781b      	ldrb	r3, [r3, #0]
 800a27a:	015a      	lsls	r2, r3, #5
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4413      	add	r3, r2
 800a280:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	683a      	ldr	r2, [r7, #0]
 800a288:	7812      	ldrb	r2, [r2, #0]
 800a28a:	0151      	lsls	r1, r2, #5
 800a28c:	693a      	ldr	r2, [r7, #16]
 800a28e:	440a      	add	r2, r1
 800a290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a294:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800a298:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	015a      	lsls	r2, r3, #5
 800a2a0:	693b      	ldr	r3, [r7, #16]
 800a2a2:	4413      	add	r3, r2
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	683a      	ldr	r2, [r7, #0]
 800a2ac:	7812      	ldrb	r2, [r2, #0]
 800a2ae:	0151      	lsls	r1, r2, #5
 800a2b0:	693a      	ldr	r2, [r7, #16]
 800a2b2:	440a      	add	r2, r1
 800a2b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a2b8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a2bc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	3301      	adds	r3, #1
 800a2c2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	f242 7210 	movw	r2, #10000	@ 0x2710
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d902      	bls.n	800a2d4 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	75fb      	strb	r3, [r7, #23]
          break;
 800a2d2:	e00c      	b.n	800a2ee <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	015a      	lsls	r2, r3, #5
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	4413      	add	r3, r2
 800a2de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a2e8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a2ec:	d0e7      	beq.n	800a2be <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800a2ee:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	371c      	adds	r7, #28
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2fa:	4770      	bx	lr

0800a2fc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b089      	sub	sp, #36	@ 0x24
 800a300:	af00      	add	r7, sp, #0
 800a302:	60f8      	str	r0, [r7, #12]
 800a304:	60b9      	str	r1, [r7, #8]
 800a306:	4611      	mov	r1, r2
 800a308:	461a      	mov	r2, r3
 800a30a:	460b      	mov	r3, r1
 800a30c:	71fb      	strb	r3, [r7, #7]
 800a30e:	4613      	mov	r3, r2
 800a310:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800a316:	68bb      	ldr	r3, [r7, #8]
 800a318:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800a31a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d123      	bne.n	800a36a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800a322:	88bb      	ldrh	r3, [r7, #4]
 800a324:	3303      	adds	r3, #3
 800a326:	089b      	lsrs	r3, r3, #2
 800a328:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800a32a:	2300      	movs	r3, #0
 800a32c:	61bb      	str	r3, [r7, #24]
 800a32e:	e018      	b.n	800a362 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800a330:	79fb      	ldrb	r3, [r7, #7]
 800a332:	031a      	lsls	r2, r3, #12
 800a334:	697b      	ldr	r3, [r7, #20]
 800a336:	4413      	add	r3, r2
 800a338:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a33c:	461a      	mov	r2, r3
 800a33e:	69fb      	ldr	r3, [r7, #28]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	6013      	str	r3, [r2, #0]
      pSrc++;
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	3301      	adds	r3, #1
 800a348:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a34a:	69fb      	ldr	r3, [r7, #28]
 800a34c:	3301      	adds	r3, #1
 800a34e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a350:	69fb      	ldr	r3, [r7, #28]
 800a352:	3301      	adds	r3, #1
 800a354:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800a356:	69fb      	ldr	r3, [r7, #28]
 800a358:	3301      	adds	r3, #1
 800a35a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800a35c:	69bb      	ldr	r3, [r7, #24]
 800a35e:	3301      	adds	r3, #1
 800a360:	61bb      	str	r3, [r7, #24]
 800a362:	69ba      	ldr	r2, [r7, #24]
 800a364:	693b      	ldr	r3, [r7, #16]
 800a366:	429a      	cmp	r2, r3
 800a368:	d3e2      	bcc.n	800a330 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3724      	adds	r7, #36	@ 0x24
 800a370:	46bd      	mov	sp, r7
 800a372:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a376:	4770      	bx	lr

0800a378 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800a378:	b480      	push	{r7}
 800a37a:	b08b      	sub	sp, #44	@ 0x2c
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	4613      	mov	r3, r2
 800a384:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a386:	68fb      	ldr	r3, [r7, #12]
 800a388:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800a38a:	68bb      	ldr	r3, [r7, #8]
 800a38c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800a38e:	88fb      	ldrh	r3, [r7, #6]
 800a390:	089b      	lsrs	r3, r3, #2
 800a392:	b29b      	uxth	r3, r3
 800a394:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800a396:	88fb      	ldrh	r3, [r7, #6]
 800a398:	f003 0303 	and.w	r3, r3, #3
 800a39c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800a39e:	2300      	movs	r3, #0
 800a3a0:	623b      	str	r3, [r7, #32]
 800a3a2:	e014      	b.n	800a3ce <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800a3a4:	69bb      	ldr	r3, [r7, #24]
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3aa:	681a      	ldr	r2, [r3, #0]
 800a3ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ae:	601a      	str	r2, [r3, #0]
    pDest++;
 800a3b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b2:	3301      	adds	r3, #1
 800a3b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a3b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3b8:	3301      	adds	r3, #1
 800a3ba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a3bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3be:	3301      	adds	r3, #1
 800a3c0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800a3c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800a3c8:	6a3b      	ldr	r3, [r7, #32]
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	623b      	str	r3, [r7, #32]
 800a3ce:	6a3a      	ldr	r2, [r7, #32]
 800a3d0:	697b      	ldr	r3, [r7, #20]
 800a3d2:	429a      	cmp	r2, r3
 800a3d4:	d3e6      	bcc.n	800a3a4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800a3d6:	8bfb      	ldrh	r3, [r7, #30]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d01e      	beq.n	800a41a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800a3dc:	2300      	movs	r3, #0
 800a3de:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800a3e0:	69bb      	ldr	r3, [r7, #24]
 800a3e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	f107 0310 	add.w	r3, r7, #16
 800a3ec:	6812      	ldr	r2, [r2, #0]
 800a3ee:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800a3f0:	693a      	ldr	r2, [r7, #16]
 800a3f2:	6a3b      	ldr	r3, [r7, #32]
 800a3f4:	b2db      	uxtb	r3, r3
 800a3f6:	00db      	lsls	r3, r3, #3
 800a3f8:	fa22 f303 	lsr.w	r3, r2, r3
 800a3fc:	b2da      	uxtb	r2, r3
 800a3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a400:	701a      	strb	r2, [r3, #0]
      i++;
 800a402:	6a3b      	ldr	r3, [r7, #32]
 800a404:	3301      	adds	r3, #1
 800a406:	623b      	str	r3, [r7, #32]
      pDest++;
 800a408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a40a:	3301      	adds	r3, #1
 800a40c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800a40e:	8bfb      	ldrh	r3, [r7, #30]
 800a410:	3b01      	subs	r3, #1
 800a412:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800a414:	8bfb      	ldrh	r3, [r7, #30]
 800a416:	2b00      	cmp	r3, #0
 800a418:	d1ea      	bne.n	800a3f0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800a41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a41c:	4618      	mov	r0, r3
 800a41e:	372c      	adds	r7, #44	@ 0x2c
 800a420:	46bd      	mov	sp, r7
 800a422:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a426:	4770      	bx	lr

0800a428 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	781b      	ldrb	r3, [r3, #0]
 800a43a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a43c:	683b      	ldr	r3, [r7, #0]
 800a43e:	785b      	ldrb	r3, [r3, #1]
 800a440:	2b01      	cmp	r3, #1
 800a442:	d12c      	bne.n	800a49e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a444:	68bb      	ldr	r3, [r7, #8]
 800a446:	015a      	lsls	r2, r3, #5
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	4413      	add	r3, r2
 800a44c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	db12      	blt.n	800a47c <USB_EPSetStall+0x54>
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d00f      	beq.n	800a47c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800a45c:	68bb      	ldr	r3, [r7, #8]
 800a45e:	015a      	lsls	r2, r3, #5
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	4413      	add	r3, r2
 800a464:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	68ba      	ldr	r2, [r7, #8]
 800a46c:	0151      	lsls	r1, r2, #5
 800a46e:	68fa      	ldr	r2, [r7, #12]
 800a470:	440a      	add	r2, r1
 800a472:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a476:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a47a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800a47c:	68bb      	ldr	r3, [r7, #8]
 800a47e:	015a      	lsls	r2, r3, #5
 800a480:	68fb      	ldr	r3, [r7, #12]
 800a482:	4413      	add	r3, r2
 800a484:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	0151      	lsls	r1, r2, #5
 800a48e:	68fa      	ldr	r2, [r7, #12]
 800a490:	440a      	add	r2, r1
 800a492:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a496:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a49a:	6013      	str	r3, [r2, #0]
 800a49c:	e02b      	b.n	800a4f6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	015a      	lsls	r2, r3, #5
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	4413      	add	r3, r2
 800a4a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4aa:	681b      	ldr	r3, [r3, #0]
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	db12      	blt.n	800a4d6 <USB_EPSetStall+0xae>
 800a4b0:	68bb      	ldr	r3, [r7, #8]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d00f      	beq.n	800a4d6 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800a4b6:	68bb      	ldr	r3, [r7, #8]
 800a4b8:	015a      	lsls	r2, r3, #5
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	0151      	lsls	r1, r2, #5
 800a4c8:	68fa      	ldr	r2, [r7, #12]
 800a4ca:	440a      	add	r2, r1
 800a4cc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4d0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a4d4:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	015a      	lsls	r2, r3, #5
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	4413      	add	r3, r2
 800a4de:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	0151      	lsls	r1, r2, #5
 800a4e8:	68fa      	ldr	r2, [r7, #12]
 800a4ea:	440a      	add	r2, r1
 800a4ec:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a4f0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a4f4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a4f6:	2300      	movs	r3, #0
}
 800a4f8:	4618      	mov	r0, r3
 800a4fa:	3714      	adds	r7, #20
 800a4fc:	46bd      	mov	sp, r7
 800a4fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a502:	4770      	bx	lr

0800a504 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a504:	b480      	push	{r7}
 800a506:	b085      	sub	sp, #20
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
 800a50c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	781b      	ldrb	r3, [r3, #0]
 800a516:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a518:	683b      	ldr	r3, [r7, #0]
 800a51a:	785b      	ldrb	r3, [r3, #1]
 800a51c:	2b01      	cmp	r3, #1
 800a51e:	d128      	bne.n	800a572 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a520:	68bb      	ldr	r3, [r7, #8]
 800a522:	015a      	lsls	r2, r3, #5
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	4413      	add	r3, r2
 800a528:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	68ba      	ldr	r2, [r7, #8]
 800a530:	0151      	lsls	r1, r2, #5
 800a532:	68fa      	ldr	r2, [r7, #12]
 800a534:	440a      	add	r2, r1
 800a536:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a53a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a53e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	791b      	ldrb	r3, [r3, #4]
 800a544:	2b03      	cmp	r3, #3
 800a546:	d003      	beq.n	800a550 <USB_EPClearStall+0x4c>
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	791b      	ldrb	r3, [r3, #4]
 800a54c:	2b02      	cmp	r3, #2
 800a54e:	d138      	bne.n	800a5c2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a550:	68bb      	ldr	r3, [r7, #8]
 800a552:	015a      	lsls	r2, r3, #5
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	4413      	add	r3, r2
 800a558:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	68ba      	ldr	r2, [r7, #8]
 800a560:	0151      	lsls	r1, r2, #5
 800a562:	68fa      	ldr	r2, [r7, #12]
 800a564:	440a      	add	r2, r1
 800a566:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a56a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a56e:	6013      	str	r3, [r2, #0]
 800a570:	e027      	b.n	800a5c2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a572:	68bb      	ldr	r3, [r7, #8]
 800a574:	015a      	lsls	r2, r3, #5
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	4413      	add	r3, r2
 800a57a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	0151      	lsls	r1, r2, #5
 800a584:	68fa      	ldr	r2, [r7, #12]
 800a586:	440a      	add	r2, r1
 800a588:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a58c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a590:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a592:	683b      	ldr	r3, [r7, #0]
 800a594:	791b      	ldrb	r3, [r3, #4]
 800a596:	2b03      	cmp	r3, #3
 800a598:	d003      	beq.n	800a5a2 <USB_EPClearStall+0x9e>
 800a59a:	683b      	ldr	r3, [r7, #0]
 800a59c:	791b      	ldrb	r3, [r3, #4]
 800a59e:	2b02      	cmp	r3, #2
 800a5a0:	d10f      	bne.n	800a5c2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a5a2:	68bb      	ldr	r3, [r7, #8]
 800a5a4:	015a      	lsls	r2, r3, #5
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	4413      	add	r3, r2
 800a5aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	68ba      	ldr	r2, [r7, #8]
 800a5b2:	0151      	lsls	r1, r2, #5
 800a5b4:	68fa      	ldr	r2, [r7, #12]
 800a5b6:	440a      	add	r2, r1
 800a5b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a5bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a5c0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a5c2:	2300      	movs	r3, #0
}
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	3714      	adds	r7, #20
 800a5c8:	46bd      	mov	sp, r7
 800a5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ce:	4770      	bx	lr

0800a5d0 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a5d0:	b480      	push	{r7}
 800a5d2:	b085      	sub	sp, #20
 800a5d4:	af00      	add	r7, sp, #0
 800a5d6:	6078      	str	r0, [r7, #4]
 800a5d8:	460b      	mov	r3, r1
 800a5da:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	68fa      	ldr	r2, [r7, #12]
 800a5ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a5ee:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a5f2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a5fa:	681a      	ldr	r2, [r3, #0]
 800a5fc:	78fb      	ldrb	r3, [r7, #3]
 800a5fe:	011b      	lsls	r3, r3, #4
 800a600:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a604:	68f9      	ldr	r1, [r7, #12]
 800a606:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a60a:	4313      	orrs	r3, r2
 800a60c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a60e:	2300      	movs	r3, #0
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr

0800a61c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a61c:	b480      	push	{r7}
 800a61e:	b085      	sub	sp, #20
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	68fa      	ldr	r2, [r7, #12]
 800a632:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a636:	f023 0303 	bic.w	r3, r3, #3
 800a63a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a642:	685b      	ldr	r3, [r3, #4]
 800a644:	68fa      	ldr	r2, [r7, #12]
 800a646:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a64a:	f023 0302 	bic.w	r3, r3, #2
 800a64e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a650:	2300      	movs	r3, #0
}
 800a652:	4618      	mov	r0, r3
 800a654:	3714      	adds	r7, #20
 800a656:	46bd      	mov	sp, r7
 800a658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a65c:	4770      	bx	lr

0800a65e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a65e:	b480      	push	{r7}
 800a660:	b085      	sub	sp, #20
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	68fa      	ldr	r2, [r7, #12]
 800a674:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a678:	f023 0303 	bic.w	r3, r3, #3
 800a67c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a684:	685b      	ldr	r3, [r3, #4]
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a68c:	f043 0302 	orr.w	r3, r3, #2
 800a690:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a692:	2300      	movs	r3, #0
}
 800a694:	4618      	mov	r0, r3
 800a696:	3714      	adds	r7, #20
 800a698:	46bd      	mov	sp, r7
 800a69a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69e:	4770      	bx	lr

0800a6a0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a6a0:	b480      	push	{r7}
 800a6a2:	b085      	sub	sp, #20
 800a6a4:	af00      	add	r7, sp, #0
 800a6a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	695b      	ldr	r3, [r3, #20]
 800a6ac:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	699b      	ldr	r3, [r3, #24]
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	4013      	ands	r3, r2
 800a6b6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a6b8:	68fb      	ldr	r3, [r7, #12]
}
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	3714      	adds	r7, #20
 800a6be:	46bd      	mov	sp, r7
 800a6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c4:	4770      	bx	lr

0800a6c6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6c6:	b480      	push	{r7}
 800a6c8:	b085      	sub	sp, #20
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6d8:	699b      	ldr	r3, [r3, #24]
 800a6da:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a6e2:	69db      	ldr	r3, [r3, #28]
 800a6e4:	68ba      	ldr	r2, [r7, #8]
 800a6e6:	4013      	ands	r3, r2
 800a6e8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	0c1b      	lsrs	r3, r3, #16
}
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	3714      	adds	r7, #20
 800a6f2:	46bd      	mov	sp, r7
 800a6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f8:	4770      	bx	lr

0800a6fa <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a6fa:	b480      	push	{r7}
 800a6fc:	b085      	sub	sp, #20
 800a6fe:	af00      	add	r7, sp, #0
 800a700:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a70c:	699b      	ldr	r3, [r3, #24]
 800a70e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a716:	69db      	ldr	r3, [r3, #28]
 800a718:	68ba      	ldr	r2, [r7, #8]
 800a71a:	4013      	ands	r3, r2
 800a71c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	b29b      	uxth	r3, r3
}
 800a722:	4618      	mov	r0, r3
 800a724:	3714      	adds	r7, #20
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr

0800a72e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a72e:	b480      	push	{r7}
 800a730:	b085      	sub	sp, #20
 800a732:	af00      	add	r7, sp, #0
 800a734:	6078      	str	r0, [r7, #4]
 800a736:	460b      	mov	r3, r1
 800a738:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a73e:	78fb      	ldrb	r3, [r7, #3]
 800a740:	015a      	lsls	r2, r3, #5
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	4413      	add	r3, r2
 800a746:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a74e:	68fb      	ldr	r3, [r7, #12]
 800a750:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a754:	695b      	ldr	r3, [r3, #20]
 800a756:	68ba      	ldr	r2, [r7, #8]
 800a758:	4013      	ands	r3, r2
 800a75a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a75c:	68bb      	ldr	r3, [r7, #8]
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3714      	adds	r7, #20
 800a762:	46bd      	mov	sp, r7
 800a764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a768:	4770      	bx	lr

0800a76a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a76a:	b480      	push	{r7}
 800a76c:	b087      	sub	sp, #28
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
 800a772:	460b      	mov	r3, r1
 800a774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a78a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a78c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a78e:	78fb      	ldrb	r3, [r7, #3]
 800a790:	f003 030f 	and.w	r3, r3, #15
 800a794:	68fa      	ldr	r2, [r7, #12]
 800a796:	fa22 f303 	lsr.w	r3, r2, r3
 800a79a:	01db      	lsls	r3, r3, #7
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	693a      	ldr	r2, [r7, #16]
 800a7a0:	4313      	orrs	r3, r2
 800a7a2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a7a4:	78fb      	ldrb	r3, [r7, #3]
 800a7a6:	015a      	lsls	r2, r3, #5
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7b0:	689b      	ldr	r3, [r3, #8]
 800a7b2:	693a      	ldr	r2, [r7, #16]
 800a7b4:	4013      	ands	r3, r2
 800a7b6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a7b8:	68bb      	ldr	r3, [r7, #8]
}
 800a7ba:	4618      	mov	r0, r3
 800a7bc:	371c      	adds	r7, #28
 800a7be:	46bd      	mov	sp, r7
 800a7c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c4:	4770      	bx	lr

0800a7c6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7c6:	b480      	push	{r7}
 800a7c8:	b083      	sub	sp, #12
 800a7ca:	af00      	add	r7, sp, #0
 800a7cc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	695b      	ldr	r3, [r3, #20]
 800a7d2:	f003 0301 	and.w	r3, r3, #1
}
 800a7d6:	4618      	mov	r0, r3
 800a7d8:	370c      	adds	r7, #12
 800a7da:	46bd      	mov	sp, r7
 800a7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e0:	4770      	bx	lr

0800a7e2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a7e2:	b480      	push	{r7}
 800a7e4:	b085      	sub	sp, #20
 800a7e6:	af00      	add	r7, sp, #0
 800a7e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68fa      	ldr	r2, [r7, #12]
 800a7f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a7fc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a800:	f023 0307 	bic.w	r3, r3, #7
 800a804:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a80c:	685b      	ldr	r3, [r3, #4]
 800a80e:	68fa      	ldr	r2, [r7, #12]
 800a810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a814:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a818:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a81a:	2300      	movs	r3, #0
}
 800a81c:	4618      	mov	r0, r3
 800a81e:	3714      	adds	r7, #20
 800a820:	46bd      	mov	sp, r7
 800a822:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a826:	4770      	bx	lr

0800a828 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a828:	b480      	push	{r7}
 800a82a:	b087      	sub	sp, #28
 800a82c:	af00      	add	r7, sp, #0
 800a82e:	60f8      	str	r0, [r7, #12]
 800a830:	460b      	mov	r3, r1
 800a832:	607a      	str	r2, [r7, #4]
 800a834:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a836:	68fb      	ldr	r3, [r7, #12]
 800a838:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	333c      	adds	r3, #60	@ 0x3c
 800a83e:	3304      	adds	r3, #4
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	4a26      	ldr	r2, [pc, #152]	@ (800a8e0 <USB_EP0_OutStart+0xb8>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d90a      	bls.n	800a862 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a84c:	697b      	ldr	r3, [r7, #20]
 800a84e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a858:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a85c:	d101      	bne.n	800a862 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a85e:	2300      	movs	r3, #0
 800a860:	e037      	b.n	800a8d2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a868:	461a      	mov	r2, r3
 800a86a:	2300      	movs	r3, #0
 800a86c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a874:	691b      	ldr	r3, [r3, #16]
 800a876:	697a      	ldr	r2, [r7, #20]
 800a878:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a87c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a880:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a888:	691b      	ldr	r3, [r3, #16]
 800a88a:	697a      	ldr	r2, [r7, #20]
 800a88c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a890:	f043 0318 	orr.w	r3, r3, #24
 800a894:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a896:	697b      	ldr	r3, [r7, #20]
 800a898:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a89c:	691b      	ldr	r3, [r3, #16]
 800a89e:	697a      	ldr	r2, [r7, #20]
 800a8a0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8a4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a8a8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a8aa:	7afb      	ldrb	r3, [r7, #11]
 800a8ac:	2b01      	cmp	r3, #1
 800a8ae:	d10f      	bne.n	800a8d0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a8b0:	697b      	ldr	r3, [r7, #20]
 800a8b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8b6:	461a      	mov	r2, r3
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	697a      	ldr	r2, [r7, #20]
 800a8c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a8ca:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a8ce:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	371c      	adds	r7, #28
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8dc:	4770      	bx	lr
 800a8de:	bf00      	nop
 800a8e0:	4f54300a 	.word	0x4f54300a

0800a8e4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b085      	sub	sp, #20
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	3301      	adds	r3, #1
 800a8f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a8fc:	d901      	bls.n	800a902 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a8fe:	2303      	movs	r3, #3
 800a900:	e01b      	b.n	800a93a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	691b      	ldr	r3, [r3, #16]
 800a906:	2b00      	cmp	r3, #0
 800a908:	daf2      	bge.n	800a8f0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a90a:	2300      	movs	r3, #0
 800a90c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	691b      	ldr	r3, [r3, #16]
 800a912:	f043 0201 	orr.w	r2, r3, #1
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	3301      	adds	r3, #1
 800a91e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a926:	d901      	bls.n	800a92c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a928:	2303      	movs	r3, #3
 800a92a:	e006      	b.n	800a93a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	691b      	ldr	r3, [r3, #16]
 800a930:	f003 0301 	and.w	r3, r3, #1
 800a934:	2b01      	cmp	r3, #1
 800a936:	d0f0      	beq.n	800a91a <USB_CoreReset+0x36>

  return HAL_OK;
 800a938:	2300      	movs	r3, #0
}
 800a93a:	4618      	mov	r0, r3
 800a93c:	3714      	adds	r7, #20
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr
	...

0800a948 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a94c:	4904      	ldr	r1, [pc, #16]	@ (800a960 <MX_FATFS_Init+0x18>)
 800a94e:	4805      	ldr	r0, [pc, #20]	@ (800a964 <MX_FATFS_Init+0x1c>)
 800a950:	f004 f9ae 	bl	800ecb0 <FATFS_LinkDriver>
 800a954:	4603      	mov	r3, r0
 800a956:	461a      	mov	r2, r3
 800a958:	4b03      	ldr	r3, [pc, #12]	@ (800a968 <MX_FATFS_Init+0x20>)
 800a95a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
<<<<<<< HEAD
 800a95c:	bf00      	nop
 800a95e:	bd80      	pop	{r7, pc}
 800a960:	20000414 	.word	0x20000414
 800a964:	20000034 	.word	0x20000034
 800a968:	20000410 	.word	0x20000410
=======
 800a97c:	bf00      	nop
 800a97e:	bd80      	pop	{r7, pc}
 800a980:	20000418 	.word	0x20000418
 800a984:	20000034 	.word	0x20000034
 800a988:	20000414 	.word	0x20000414
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800a96c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a96c:	b480      	push	{r7}
 800a96e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a970:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a972:	4618      	mov	r0, r3
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b082      	sub	sp, #8
 800a980:	af00      	add	r7, sp, #0
 800a982:	4603      	mov	r3, r0
 800a984:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a986:	79fb      	ldrb	r3, [r7, #7]
 800a988:	4618      	mov	r0, r3
 800a98a:	f7f6 f801 	bl	8000990 <SD_disk_initialize>
 800a98e:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a990:	4618      	mov	r0, r3
 800a992:	3708      	adds	r7, #8
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b082      	sub	sp, #8
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	4603      	mov	r3, r0
 800a9a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a9a2:	79fb      	ldrb	r3, [r7, #7]
 800a9a4:	4618      	mov	r0, r3
 800a9a6:	f7f6 f8d9 	bl	8000b5c <SD_disk_status>
 800a9aa:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3708      	adds	r7, #8
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	bd80      	pop	{r7, pc}

0800a9b4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a9b4:	b580      	push	{r7, lr}
 800a9b6:	b084      	sub	sp, #16
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	60b9      	str	r1, [r7, #8]
 800a9bc:	607a      	str	r2, [r7, #4]
 800a9be:	603b      	str	r3, [r7, #0]
 800a9c0:	4603      	mov	r3, r0
 800a9c2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a9c4:	7bf8      	ldrb	r0, [r7, #15]
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	687a      	ldr	r2, [r7, #4]
 800a9ca:	68b9      	ldr	r1, [r7, #8]
 800a9cc:	f7f6 f8dc 	bl	8000b88 <SD_disk_read>
 800a9d0:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}

0800a9da <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a9da:	b580      	push	{r7, lr}
 800a9dc:	b084      	sub	sp, #16
 800a9de:	af00      	add	r7, sp, #0
 800a9e0:	60b9      	str	r1, [r7, #8]
 800a9e2:	607a      	str	r2, [r7, #4]
 800a9e4:	603b      	str	r3, [r7, #0]
 800a9e6:	4603      	mov	r3, r0
 800a9e8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a9ea:	7bf8      	ldrb	r0, [r7, #15]
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	687a      	ldr	r2, [r7, #4]
 800a9f0:	68b9      	ldr	r1, [r7, #8]
 800a9f2:	f7f6 f933 	bl	8000c5c <SD_disk_write>
 800a9f6:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800a9f8:	4618      	mov	r0, r3
 800a9fa:	3710      	adds	r7, #16
 800a9fc:	46bd      	mov	sp, r7
 800a9fe:	bd80      	pop	{r7, pc}

0800aa00 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800aa00:	b580      	push	{r7, lr}
 800aa02:	b082      	sub	sp, #8
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	4603      	mov	r3, r0
 800aa08:	603a      	str	r2, [r7, #0]
 800aa0a:	71fb      	strb	r3, [r7, #7]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800aa10:	79b9      	ldrb	r1, [r7, #6]
 800aa12:	79fb      	ldrb	r3, [r7, #7]
 800aa14:	683a      	ldr	r2, [r7, #0]
 800aa16:	4618      	mov	r0, r3
 800aa18:	f7f6 f9a4 	bl	8000d64 <SD_disk_ioctl>
 800aa1c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800aa1e:	4618      	mov	r0, r3
 800aa20:	3708      	adds	r7, #8
 800aa22:	46bd      	mov	sp, r7
 800aa24:	bd80      	pop	{r7, pc}
	...

0800aa28 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aa28:	b580      	push	{r7, lr}
 800aa2a:	b084      	sub	sp, #16
 800aa2c:	af00      	add	r7, sp, #0
 800aa2e:	6078      	str	r0, [r7, #4]
 800aa30:	460b      	mov	r3, r1
 800aa32:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800aa34:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800aa38:	f004 fe16 	bl	800f668 <USBD_static_malloc>
 800aa3c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d109      	bne.n	800aa58 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	32b0      	adds	r2, #176	@ 0xb0
 800aa4e:	2100      	movs	r1, #0
 800aa50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800aa54:	2302      	movs	r3, #2
 800aa56:	e0d4      	b.n	800ac02 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800aa58:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	68f8      	ldr	r0, [r7, #12]
 800aa60:	f004 ffc2 	bl	800f9e8 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	32b0      	adds	r2, #176	@ 0xb0
 800aa6e:	68f9      	ldr	r1, [r7, #12]
 800aa70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	32b0      	adds	r2, #176	@ 0xb0
 800aa7e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	7c1b      	ldrb	r3, [r3, #16]
 800aa8c:	2b00      	cmp	r3, #0
 800aa8e:	d138      	bne.n	800ab02 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800aa90:	4b5e      	ldr	r3, [pc, #376]	@ (800ac0c <USBD_CDC_Init+0x1e4>)
 800aa92:	7819      	ldrb	r1, [r3, #0]
 800aa94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa98:	2202      	movs	r2, #2
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f004 fcc1 	bl	800f422 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800aaa0:	4b5a      	ldr	r3, [pc, #360]	@ (800ac0c <USBD_CDC_Init+0x1e4>)
 800aaa2:	781b      	ldrb	r3, [r3, #0]
 800aaa4:	f003 020f 	and.w	r2, r3, #15
 800aaa8:	6879      	ldr	r1, [r7, #4]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	009b      	lsls	r3, r3, #2
 800aaae:	4413      	add	r3, r2
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	440b      	add	r3, r1
 800aab4:	3324      	adds	r3, #36	@ 0x24
 800aab6:	2201      	movs	r2, #1
 800aab8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800aaba:	4b55      	ldr	r3, [pc, #340]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800aabc:	7819      	ldrb	r1, [r3, #0]
 800aabe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aac2:	2202      	movs	r2, #2
 800aac4:	6878      	ldr	r0, [r7, #4]
 800aac6:	f004 fcac 	bl	800f422 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800aaca:	4b51      	ldr	r3, [pc, #324]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800aacc:	781b      	ldrb	r3, [r3, #0]
 800aace:	f003 020f 	and.w	r2, r3, #15
 800aad2:	6879      	ldr	r1, [r7, #4]
 800aad4:	4613      	mov	r3, r2
 800aad6:	009b      	lsls	r3, r3, #2
 800aad8:	4413      	add	r3, r2
 800aada:	009b      	lsls	r3, r3, #2
 800aadc:	440b      	add	r3, r1
 800aade:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800aae2:	2201      	movs	r2, #1
 800aae4:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800aae6:	4b4b      	ldr	r3, [pc, #300]	@ (800ac14 <USBD_CDC_Init+0x1ec>)
 800aae8:	781b      	ldrb	r3, [r3, #0]
 800aaea:	f003 020f 	and.w	r2, r3, #15
 800aaee:	6879      	ldr	r1, [r7, #4]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	009b      	lsls	r3, r3, #2
 800aaf4:	4413      	add	r3, r2
 800aaf6:	009b      	lsls	r3, r3, #2
 800aaf8:	440b      	add	r3, r1
 800aafa:	3326      	adds	r3, #38	@ 0x26
 800aafc:	2210      	movs	r2, #16
 800aafe:	801a      	strh	r2, [r3, #0]
 800ab00:	e035      	b.n	800ab6e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800ab02:	4b42      	ldr	r3, [pc, #264]	@ (800ac0c <USBD_CDC_Init+0x1e4>)
 800ab04:	7819      	ldrb	r1, [r3, #0]
 800ab06:	2340      	movs	r3, #64	@ 0x40
 800ab08:	2202      	movs	r2, #2
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	f004 fc89 	bl	800f422 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800ab10:	4b3e      	ldr	r3, [pc, #248]	@ (800ac0c <USBD_CDC_Init+0x1e4>)
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	f003 020f 	and.w	r2, r3, #15
 800ab18:	6879      	ldr	r1, [r7, #4]
 800ab1a:	4613      	mov	r3, r2
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	009b      	lsls	r3, r3, #2
 800ab22:	440b      	add	r3, r1
 800ab24:	3324      	adds	r3, #36	@ 0x24
 800ab26:	2201      	movs	r2, #1
 800ab28:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800ab2a:	4b39      	ldr	r3, [pc, #228]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800ab2c:	7819      	ldrb	r1, [r3, #0]
 800ab2e:	2340      	movs	r3, #64	@ 0x40
 800ab30:	2202      	movs	r2, #2
 800ab32:	6878      	ldr	r0, [r7, #4]
 800ab34:	f004 fc75 	bl	800f422 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800ab38:	4b35      	ldr	r3, [pc, #212]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	f003 020f 	and.w	r2, r3, #15
 800ab40:	6879      	ldr	r1, [r7, #4]
 800ab42:	4613      	mov	r3, r2
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	4413      	add	r3, r2
 800ab48:	009b      	lsls	r3, r3, #2
 800ab4a:	440b      	add	r3, r1
 800ab4c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ab50:	2201      	movs	r2, #1
 800ab52:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800ab54:	4b2f      	ldr	r3, [pc, #188]	@ (800ac14 <USBD_CDC_Init+0x1ec>)
 800ab56:	781b      	ldrb	r3, [r3, #0]
 800ab58:	f003 020f 	and.w	r2, r3, #15
 800ab5c:	6879      	ldr	r1, [r7, #4]
 800ab5e:	4613      	mov	r3, r2
 800ab60:	009b      	lsls	r3, r3, #2
 800ab62:	4413      	add	r3, r2
 800ab64:	009b      	lsls	r3, r3, #2
 800ab66:	440b      	add	r3, r1
 800ab68:	3326      	adds	r3, #38	@ 0x26
 800ab6a:	2210      	movs	r2, #16
 800ab6c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800ab6e:	4b29      	ldr	r3, [pc, #164]	@ (800ac14 <USBD_CDC_Init+0x1ec>)
 800ab70:	7819      	ldrb	r1, [r3, #0]
 800ab72:	2308      	movs	r3, #8
 800ab74:	2203      	movs	r2, #3
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f004 fc53 	bl	800f422 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800ab7c:	4b25      	ldr	r3, [pc, #148]	@ (800ac14 <USBD_CDC_Init+0x1ec>)
 800ab7e:	781b      	ldrb	r3, [r3, #0]
 800ab80:	f003 020f 	and.w	r2, r3, #15
 800ab84:	6879      	ldr	r1, [r7, #4]
 800ab86:	4613      	mov	r3, r2
 800ab88:	009b      	lsls	r3, r3, #2
 800ab8a:	4413      	add	r3, r2
 800ab8c:	009b      	lsls	r3, r3, #2
 800ab8e:	440b      	add	r3, r1
 800ab90:	3324      	adds	r3, #36	@ 0x24
 800ab92:	2201      	movs	r2, #1
 800ab94:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	33b0      	adds	r3, #176	@ 0xb0
 800aba8:	009b      	lsls	r3, r3, #2
 800abaa:	4413      	add	r3, r2
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	681b      	ldr	r3, [r3, #0]
 800abb0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	2200      	movs	r2, #0
 800abb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	2200      	movs	r2, #0
 800abbe:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d101      	bne.n	800abd0 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800abcc:	2302      	movs	r3, #2
 800abce:	e018      	b.n	800ac02 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	7c1b      	ldrb	r3, [r3, #16]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d10a      	bne.n	800abee <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abd8:	4b0d      	ldr	r3, [pc, #52]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800abda:	7819      	ldrb	r1, [r3, #0]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abe2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800abe6:	6878      	ldr	r0, [r7, #4]
 800abe8:	f004 fd0a 	bl	800f600 <USBD_LL_PrepareReceive>
 800abec:	e008      	b.n	800ac00 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800abee:	4b08      	ldr	r3, [pc, #32]	@ (800ac10 <USBD_CDC_Init+0x1e8>)
 800abf0:	7819      	ldrb	r1, [r3, #0]
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800abf8:	2340      	movs	r3, #64	@ 0x40
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f004 fd00 	bl	800f600 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ac00:	2300      	movs	r3, #0
}
 800ac02:	4618      	mov	r0, r3
 800ac04:	3710      	adds	r7, #16
 800ac06:	46bd      	mov	sp, r7
 800ac08:	bd80      	pop	{r7, pc}
 800ac0a:	bf00      	nop
 800ac0c:	200000cf 	.word	0x200000cf
 800ac10:	200000d0 	.word	0x200000d0
 800ac14:	200000d1 	.word	0x200000d1

0800ac18 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
 800ac20:	460b      	mov	r3, r1
 800ac22:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800ac24:	4b3a      	ldr	r3, [pc, #232]	@ (800ad10 <USBD_CDC_DeInit+0xf8>)
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	4619      	mov	r1, r3
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f004 fc1f 	bl	800f46e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800ac30:	4b37      	ldr	r3, [pc, #220]	@ (800ad10 <USBD_CDC_DeInit+0xf8>)
 800ac32:	781b      	ldrb	r3, [r3, #0]
 800ac34:	f003 020f 	and.w	r2, r3, #15
 800ac38:	6879      	ldr	r1, [r7, #4]
 800ac3a:	4613      	mov	r3, r2
 800ac3c:	009b      	lsls	r3, r3, #2
 800ac3e:	4413      	add	r3, r2
 800ac40:	009b      	lsls	r3, r3, #2
 800ac42:	440b      	add	r3, r1
 800ac44:	3324      	adds	r3, #36	@ 0x24
 800ac46:	2200      	movs	r2, #0
 800ac48:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800ac4a:	4b32      	ldr	r3, [pc, #200]	@ (800ad14 <USBD_CDC_DeInit+0xfc>)
 800ac4c:	781b      	ldrb	r3, [r3, #0]
 800ac4e:	4619      	mov	r1, r3
 800ac50:	6878      	ldr	r0, [r7, #4]
 800ac52:	f004 fc0c 	bl	800f46e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800ac56:	4b2f      	ldr	r3, [pc, #188]	@ (800ad14 <USBD_CDC_DeInit+0xfc>)
 800ac58:	781b      	ldrb	r3, [r3, #0]
 800ac5a:	f003 020f 	and.w	r2, r3, #15
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4613      	mov	r3, r2
 800ac62:	009b      	lsls	r3, r3, #2
 800ac64:	4413      	add	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800ac6e:	2200      	movs	r2, #0
 800ac70:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800ac72:	4b29      	ldr	r3, [pc, #164]	@ (800ad18 <USBD_CDC_DeInit+0x100>)
 800ac74:	781b      	ldrb	r3, [r3, #0]
 800ac76:	4619      	mov	r1, r3
 800ac78:	6878      	ldr	r0, [r7, #4]
 800ac7a:	f004 fbf8 	bl	800f46e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800ac7e:	4b26      	ldr	r3, [pc, #152]	@ (800ad18 <USBD_CDC_DeInit+0x100>)
 800ac80:	781b      	ldrb	r3, [r3, #0]
 800ac82:	f003 020f 	and.w	r2, r3, #15
 800ac86:	6879      	ldr	r1, [r7, #4]
 800ac88:	4613      	mov	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4413      	add	r3, r2
 800ac8e:	009b      	lsls	r3, r3, #2
 800ac90:	440b      	add	r3, r1
 800ac92:	3324      	adds	r3, #36	@ 0x24
 800ac94:	2200      	movs	r2, #0
 800ac96:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800ac98:	4b1f      	ldr	r3, [pc, #124]	@ (800ad18 <USBD_CDC_DeInit+0x100>)
 800ac9a:	781b      	ldrb	r3, [r3, #0]
 800ac9c:	f003 020f 	and.w	r2, r3, #15
 800aca0:	6879      	ldr	r1, [r7, #4]
 800aca2:	4613      	mov	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	4413      	add	r3, r2
 800aca8:	009b      	lsls	r3, r3, #2
 800acaa:	440b      	add	r3, r1
 800acac:	3326      	adds	r3, #38	@ 0x26
 800acae:	2200      	movs	r2, #0
 800acb0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	32b0      	adds	r2, #176	@ 0xb0
 800acbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d01f      	beq.n	800ad04 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800acca:	687a      	ldr	r2, [r7, #4]
 800accc:	33b0      	adds	r3, #176	@ 0xb0
 800acce:	009b      	lsls	r3, r3, #2
 800acd0:	4413      	add	r3, r2
 800acd2:	685b      	ldr	r3, [r3, #4]
 800acd4:	685b      	ldr	r3, [r3, #4]
 800acd6:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	32b0      	adds	r2, #176	@ 0xb0
 800ace2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ace6:	4618      	mov	r0, r3
 800ace8:	f004 fccc 	bl	800f684 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	32b0      	adds	r2, #176	@ 0xb0
 800acf6:	2100      	movs	r1, #0
 800acf8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	2200      	movs	r2, #0
 800ad00:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800ad04:	2300      	movs	r3, #0
}
 800ad06:	4618      	mov	r0, r3
 800ad08:	3708      	adds	r7, #8
 800ad0a:	46bd      	mov	sp, r7
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	200000cf 	.word	0x200000cf
 800ad14:	200000d0 	.word	0x200000d0
 800ad18:	200000d1 	.word	0x200000d1

0800ad1c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b086      	sub	sp, #24
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	32b0      	adds	r2, #176	@ 0xb0
 800ad30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad34:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800ad36:	2300      	movs	r3, #0
 800ad38:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad3e:	2300      	movs	r3, #0
 800ad40:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800ad42:	693b      	ldr	r3, [r7, #16]
 800ad44:	2b00      	cmp	r3, #0
 800ad46:	d101      	bne.n	800ad4c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800ad48:	2303      	movs	r3, #3
 800ad4a:	e0bf      	b.n	800aecc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	781b      	ldrb	r3, [r3, #0]
 800ad50:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d050      	beq.n	800adfa <USBD_CDC_Setup+0xde>
 800ad58:	2b20      	cmp	r3, #32
 800ad5a:	f040 80af 	bne.w	800aebc <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	88db      	ldrh	r3, [r3, #6]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d03a      	beq.n	800addc <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	781b      	ldrb	r3, [r3, #0]
 800ad6a:	b25b      	sxtb	r3, r3
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	da1b      	bge.n	800ada8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad76:	687a      	ldr	r2, [r7, #4]
 800ad78:	33b0      	adds	r3, #176	@ 0xb0
 800ad7a:	009b      	lsls	r3, r3, #2
 800ad7c:	4413      	add	r3, r2
 800ad7e:	685b      	ldr	r3, [r3, #4]
 800ad80:	689b      	ldr	r3, [r3, #8]
 800ad82:	683a      	ldr	r2, [r7, #0]
 800ad84:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800ad86:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800ad88:	683a      	ldr	r2, [r7, #0]
 800ad8a:	88d2      	ldrh	r2, [r2, #6]
 800ad8c:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	88db      	ldrh	r3, [r3, #6]
 800ad92:	2b07      	cmp	r3, #7
 800ad94:	bf28      	it	cs
 800ad96:	2307      	movcs	r3, #7
 800ad98:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800ad9a:	693b      	ldr	r3, [r7, #16]
 800ad9c:	89fa      	ldrh	r2, [r7, #14]
 800ad9e:	4619      	mov	r1, r3
 800ada0:	6878      	ldr	r0, [r7, #4]
 800ada2:	f001 fd93 	bl	800c8cc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800ada6:	e090      	b.n	800aeca <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800ada8:	683b      	ldr	r3, [r7, #0]
 800adaa:	785a      	ldrb	r2, [r3, #1]
 800adac:	693b      	ldr	r3, [r7, #16]
 800adae:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	88db      	ldrh	r3, [r3, #6]
 800adb6:	2b3f      	cmp	r3, #63	@ 0x3f
 800adb8:	d803      	bhi.n	800adc2 <USBD_CDC_Setup+0xa6>
 800adba:	683b      	ldr	r3, [r7, #0]
 800adbc:	88db      	ldrh	r3, [r3, #6]
 800adbe:	b2da      	uxtb	r2, r3
 800adc0:	e000      	b.n	800adc4 <USBD_CDC_Setup+0xa8>
 800adc2:	2240      	movs	r2, #64	@ 0x40
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800adca:	6939      	ldr	r1, [r7, #16]
 800adcc:	693b      	ldr	r3, [r7, #16]
 800adce:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800add2:	461a      	mov	r2, r3
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f001 fda5 	bl	800c924 <USBD_CtlPrepareRx>
      break;
 800adda:	e076      	b.n	800aeca <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ade2:	687a      	ldr	r2, [r7, #4]
 800ade4:	33b0      	adds	r3, #176	@ 0xb0
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	685b      	ldr	r3, [r3, #4]
 800adec:	689b      	ldr	r3, [r3, #8]
 800adee:	683a      	ldr	r2, [r7, #0]
 800adf0:	7850      	ldrb	r0, [r2, #1]
 800adf2:	2200      	movs	r2, #0
 800adf4:	6839      	ldr	r1, [r7, #0]
 800adf6:	4798      	blx	r3
      break;
 800adf8:	e067      	b.n	800aeca <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	785b      	ldrb	r3, [r3, #1]
 800adfe:	2b0b      	cmp	r3, #11
 800ae00:	d851      	bhi.n	800aea6 <USBD_CDC_Setup+0x18a>
 800ae02:	a201      	add	r2, pc, #4	@ (adr r2, 800ae08 <USBD_CDC_Setup+0xec>)
 800ae04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae08:	0800ae39 	.word	0x0800ae39
 800ae0c:	0800aeb5 	.word	0x0800aeb5
 800ae10:	0800aea7 	.word	0x0800aea7
 800ae14:	0800aea7 	.word	0x0800aea7
 800ae18:	0800aea7 	.word	0x0800aea7
 800ae1c:	0800aea7 	.word	0x0800aea7
 800ae20:	0800aea7 	.word	0x0800aea7
 800ae24:	0800aea7 	.word	0x0800aea7
 800ae28:	0800aea7 	.word	0x0800aea7
 800ae2c:	0800aea7 	.word	0x0800aea7
 800ae30:	0800ae63 	.word	0x0800ae63
 800ae34:	0800ae8d 	.word	0x0800ae8d
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae3e:	b2db      	uxtb	r3, r3
 800ae40:	2b03      	cmp	r3, #3
 800ae42:	d107      	bne.n	800ae54 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800ae44:	f107 030a 	add.w	r3, r7, #10
 800ae48:	2202      	movs	r2, #2
 800ae4a:	4619      	mov	r1, r3
 800ae4c:	6878      	ldr	r0, [r7, #4]
 800ae4e:	f001 fd3d 	bl	800c8cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae52:	e032      	b.n	800aeba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae54:	6839      	ldr	r1, [r7, #0]
 800ae56:	6878      	ldr	r0, [r7, #4]
 800ae58:	f001 fcbb 	bl	800c7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae5c:	2303      	movs	r3, #3
 800ae5e:	75fb      	strb	r3, [r7, #23]
          break;
 800ae60:	e02b      	b.n	800aeba <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b03      	cmp	r3, #3
 800ae6c:	d107      	bne.n	800ae7e <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800ae6e:	f107 030d 	add.w	r3, r7, #13
 800ae72:	2201      	movs	r2, #1
 800ae74:	4619      	mov	r1, r3
 800ae76:	6878      	ldr	r0, [r7, #4]
 800ae78:	f001 fd28 	bl	800c8cc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800ae7c:	e01d      	b.n	800aeba <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800ae7e:	6839      	ldr	r1, [r7, #0]
 800ae80:	6878      	ldr	r0, [r7, #4]
 800ae82:	f001 fca6 	bl	800c7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800ae86:	2303      	movs	r3, #3
 800ae88:	75fb      	strb	r3, [r7, #23]
          break;
 800ae8a:	e016      	b.n	800aeba <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2b03      	cmp	r3, #3
 800ae96:	d00f      	beq.n	800aeb8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800ae98:	6839      	ldr	r1, [r7, #0]
 800ae9a:	6878      	ldr	r0, [r7, #4]
 800ae9c:	f001 fc99 	bl	800c7d2 <USBD_CtlError>
            ret = USBD_FAIL;
 800aea0:	2303      	movs	r3, #3
 800aea2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800aea4:	e008      	b.n	800aeb8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f001 fc92 	bl	800c7d2 <USBD_CtlError>
          ret = USBD_FAIL;
 800aeae:	2303      	movs	r3, #3
 800aeb0:	75fb      	strb	r3, [r7, #23]
          break;
 800aeb2:	e002      	b.n	800aeba <USBD_CDC_Setup+0x19e>
          break;
 800aeb4:	bf00      	nop
 800aeb6:	e008      	b.n	800aeca <USBD_CDC_Setup+0x1ae>
          break;
 800aeb8:	bf00      	nop
      }
      break;
 800aeba:	e006      	b.n	800aeca <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800aebc:	6839      	ldr	r1, [r7, #0]
 800aebe:	6878      	ldr	r0, [r7, #4]
 800aec0:	f001 fc87 	bl	800c7d2 <USBD_CtlError>
      ret = USBD_FAIL;
 800aec4:	2303      	movs	r3, #3
 800aec6:	75fb      	strb	r3, [r7, #23]
      break;
 800aec8:	bf00      	nop
  }

  return (uint8_t)ret;
 800aeca:	7dfb      	ldrb	r3, [r7, #23]
}
 800aecc:	4618      	mov	r0, r3
 800aece:	3718      	adds	r7, #24
 800aed0:	46bd      	mov	sp, r7
 800aed2:	bd80      	pop	{r7, pc}

0800aed4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aed4:	b580      	push	{r7, lr}
 800aed6:	b084      	sub	sp, #16
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	460b      	mov	r3, r1
 800aede:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aee6:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	32b0      	adds	r2, #176	@ 0xb0
 800aef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d101      	bne.n	800aefe <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aefa:	2303      	movs	r3, #3
 800aefc:	e065      	b.n	800afca <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	32b0      	adds	r2, #176	@ 0xb0
 800af08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af0c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af0e:	78fb      	ldrb	r3, [r7, #3]
 800af10:	f003 020f 	and.w	r2, r3, #15
 800af14:	6879      	ldr	r1, [r7, #4]
 800af16:	4613      	mov	r3, r2
 800af18:	009b      	lsls	r3, r3, #2
 800af1a:	4413      	add	r3, r2
 800af1c:	009b      	lsls	r3, r3, #2
 800af1e:	440b      	add	r3, r1
 800af20:	3318      	adds	r3, #24
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	2b00      	cmp	r3, #0
 800af26:	d02f      	beq.n	800af88 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800af28:	78fb      	ldrb	r3, [r7, #3]
 800af2a:	f003 020f 	and.w	r2, r3, #15
 800af2e:	6879      	ldr	r1, [r7, #4]
 800af30:	4613      	mov	r3, r2
 800af32:	009b      	lsls	r3, r3, #2
 800af34:	4413      	add	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	440b      	add	r3, r1
 800af3a:	3318      	adds	r3, #24
 800af3c:	681a      	ldr	r2, [r3, #0]
 800af3e:	78fb      	ldrb	r3, [r7, #3]
 800af40:	f003 010f 	and.w	r1, r3, #15
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	460b      	mov	r3, r1
 800af48:	00db      	lsls	r3, r3, #3
 800af4a:	440b      	add	r3, r1
 800af4c:	009b      	lsls	r3, r3, #2
 800af4e:	4403      	add	r3, r0
 800af50:	331c      	adds	r3, #28
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	fbb2 f1f3 	udiv	r1, r2, r3
 800af58:	fb01 f303 	mul.w	r3, r1, r3
 800af5c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d112      	bne.n	800af88 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	f003 020f 	and.w	r2, r3, #15
 800af68:	6879      	ldr	r1, [r7, #4]
 800af6a:	4613      	mov	r3, r2
 800af6c:	009b      	lsls	r3, r3, #2
 800af6e:	4413      	add	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	440b      	add	r3, r1
 800af74:	3318      	adds	r3, #24
 800af76:	2200      	movs	r2, #0
 800af78:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800af7a:	78f9      	ldrb	r1, [r7, #3]
 800af7c:	2300      	movs	r3, #0
 800af7e:	2200      	movs	r2, #0
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f004 fb1c 	bl	800f5be <USBD_LL_Transmit>
 800af86:	e01f      	b.n	800afc8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800af88:	68bb      	ldr	r3, [r7, #8]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800af96:	687a      	ldr	r2, [r7, #4]
 800af98:	33b0      	adds	r3, #176	@ 0xb0
 800af9a:	009b      	lsls	r3, r3, #2
 800af9c:	4413      	add	r3, r2
 800af9e:	685b      	ldr	r3, [r3, #4]
 800afa0:	691b      	ldr	r3, [r3, #16]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d010      	beq.n	800afc8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800afac:	687a      	ldr	r2, [r7, #4]
 800afae:	33b0      	adds	r3, #176	@ 0xb0
 800afb0:	009b      	lsls	r3, r3, #2
 800afb2:	4413      	add	r3, r2
 800afb4:	685b      	ldr	r3, [r3, #4]
 800afb6:	691b      	ldr	r3, [r3, #16]
 800afb8:	68ba      	ldr	r2, [r7, #8]
 800afba:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800afbe:	68ba      	ldr	r2, [r7, #8]
 800afc0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800afc4:	78fa      	ldrb	r2, [r7, #3]
 800afc6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800afc8:	2300      	movs	r3, #0
}
 800afca:	4618      	mov	r0, r3
 800afcc:	3710      	adds	r7, #16
 800afce:	46bd      	mov	sp, r7
 800afd0:	bd80      	pop	{r7, pc}

0800afd2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800afd2:	b580      	push	{r7, lr}
 800afd4:	b084      	sub	sp, #16
 800afd6:	af00      	add	r7, sp, #0
 800afd8:	6078      	str	r0, [r7, #4]
 800afda:	460b      	mov	r3, r1
 800afdc:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	32b0      	adds	r2, #176	@ 0xb0
 800afe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800afec:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	32b0      	adds	r2, #176	@ 0xb0
 800aff8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800affc:	2b00      	cmp	r3, #0
 800affe:	d101      	bne.n	800b004 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800b000:	2303      	movs	r3, #3
 800b002:	e01a      	b.n	800b03a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800b004:	78fb      	ldrb	r3, [r7, #3]
 800b006:	4619      	mov	r1, r3
 800b008:	6878      	ldr	r0, [r7, #4]
 800b00a:	f004 fb1a 	bl	800f642 <USBD_LL_GetRxDataSize>
 800b00e:	4602      	mov	r2, r0
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b01c:	687a      	ldr	r2, [r7, #4]
 800b01e:	33b0      	adds	r3, #176	@ 0xb0
 800b020:	009b      	lsls	r3, r3, #2
 800b022:	4413      	add	r3, r2
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	68db      	ldr	r3, [r3, #12]
 800b028:	68fa      	ldr	r2, [r7, #12]
 800b02a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800b02e:	68fa      	ldr	r2, [r7, #12]
 800b030:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800b034:	4611      	mov	r1, r2
 800b036:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800b038:	2300      	movs	r3, #0
}
 800b03a:	4618      	mov	r0, r3
 800b03c:	3710      	adds	r7, #16
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}

0800b042 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800b042:	b580      	push	{r7, lr}
 800b044:	b084      	sub	sp, #16
 800b046:	af00      	add	r7, sp, #0
 800b048:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	32b0      	adds	r2, #176	@ 0xb0
 800b054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b058:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d101      	bne.n	800b064 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800b060:	2303      	movs	r3, #3
 800b062:	e024      	b.n	800b0ae <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b06a:	687a      	ldr	r2, [r7, #4]
 800b06c:	33b0      	adds	r3, #176	@ 0xb0
 800b06e:	009b      	lsls	r3, r3, #2
 800b070:	4413      	add	r3, r2
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d019      	beq.n	800b0ac <USBD_CDC_EP0_RxReady+0x6a>
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800b07e:	2bff      	cmp	r3, #255	@ 0xff
 800b080:	d014      	beq.n	800b0ac <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b088:	687a      	ldr	r2, [r7, #4]
 800b08a:	33b0      	adds	r3, #176	@ 0xb0
 800b08c:	009b      	lsls	r3, r3, #2
 800b08e:	4413      	add	r3, r2
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	689b      	ldr	r3, [r3, #8]
 800b094:	68fa      	ldr	r2, [r7, #12]
 800b096:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800b09a:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800b09c:	68fa      	ldr	r2, [r7, #12]
 800b09e:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800b0a2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	22ff      	movs	r2, #255	@ 0xff
 800b0a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800b0ac:	2300      	movs	r3, #0
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3710      	adds	r7, #16
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
	...

0800b0b8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b086      	sub	sp, #24
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b0c0:	2182      	movs	r1, #130	@ 0x82
 800b0c2:	4818      	ldr	r0, [pc, #96]	@ (800b124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0c4:	f000 fd4f 	bl	800bb66 <USBD_GetEpDesc>
 800b0c8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b0ca:	2101      	movs	r1, #1
 800b0cc:	4815      	ldr	r0, [pc, #84]	@ (800b124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0ce:	f000 fd4a 	bl	800bb66 <USBD_GetEpDesc>
 800b0d2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b0d4:	2181      	movs	r1, #129	@ 0x81
 800b0d6:	4813      	ldr	r0, [pc, #76]	@ (800b124 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800b0d8:	f000 fd45 	bl	800bb66 <USBD_GetEpDesc>
 800b0dc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b0de:	697b      	ldr	r3, [r7, #20]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d002      	beq.n	800b0ea <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b0e4:	697b      	ldr	r3, [r7, #20]
 800b0e6:	2210      	movs	r2, #16
 800b0e8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b0ea:	693b      	ldr	r3, [r7, #16]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d006      	beq.n	800b0fe <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b0f0:	693b      	ldr	r3, [r7, #16]
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b0f8:	711a      	strb	r2, [r3, #4]
 800b0fa:	2200      	movs	r2, #0
 800b0fc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2b00      	cmp	r3, #0
 800b102:	d006      	beq.n	800b112 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	2200      	movs	r2, #0
 800b108:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b10c:	711a      	strb	r2, [r3, #4]
 800b10e:	2200      	movs	r2, #0
 800b110:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	2243      	movs	r2, #67	@ 0x43
 800b116:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b118:	4b02      	ldr	r3, [pc, #8]	@ (800b124 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800b11a:	4618      	mov	r0, r3
 800b11c:	3718      	adds	r7, #24
 800b11e:	46bd      	mov	sp, r7
 800b120:	bd80      	pop	{r7, pc}
 800b122:	bf00      	nop
 800b124:	2000008c 	.word	0x2000008c

0800b128 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800b128:	b580      	push	{r7, lr}
 800b12a:	b086      	sub	sp, #24
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b130:	2182      	movs	r1, #130	@ 0x82
 800b132:	4818      	ldr	r0, [pc, #96]	@ (800b194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b134:	f000 fd17 	bl	800bb66 <USBD_GetEpDesc>
 800b138:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b13a:	2101      	movs	r1, #1
 800b13c:	4815      	ldr	r0, [pc, #84]	@ (800b194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b13e:	f000 fd12 	bl	800bb66 <USBD_GetEpDesc>
 800b142:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b144:	2181      	movs	r1, #129	@ 0x81
 800b146:	4813      	ldr	r0, [pc, #76]	@ (800b194 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800b148:	f000 fd0d 	bl	800bb66 <USBD_GetEpDesc>
 800b14c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b14e:	697b      	ldr	r3, [r7, #20]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d002      	beq.n	800b15a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800b154:	697b      	ldr	r3, [r7, #20]
 800b156:	2210      	movs	r2, #16
 800b158:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b15a:	693b      	ldr	r3, [r7, #16]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d006      	beq.n	800b16e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	2200      	movs	r2, #0
 800b164:	711a      	strb	r2, [r3, #4]
 800b166:	2200      	movs	r2, #0
 800b168:	f042 0202 	orr.w	r2, r2, #2
 800b16c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2b00      	cmp	r3, #0
 800b172:	d006      	beq.n	800b182 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	711a      	strb	r2, [r3, #4]
 800b17a:	2200      	movs	r2, #0
 800b17c:	f042 0202 	orr.w	r2, r2, #2
 800b180:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2243      	movs	r2, #67	@ 0x43
 800b186:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b188:	4b02      	ldr	r3, [pc, #8]	@ (800b194 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	3718      	adds	r7, #24
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	2000008c 	.word	0x2000008c

0800b198 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b086      	sub	sp, #24
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800b1a0:	2182      	movs	r1, #130	@ 0x82
 800b1a2:	4818      	ldr	r0, [pc, #96]	@ (800b204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1a4:	f000 fcdf 	bl	800bb66 <USBD_GetEpDesc>
 800b1a8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800b1aa:	2101      	movs	r1, #1
 800b1ac:	4815      	ldr	r0, [pc, #84]	@ (800b204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1ae:	f000 fcda 	bl	800bb66 <USBD_GetEpDesc>
 800b1b2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800b1b4:	2181      	movs	r1, #129	@ 0x81
 800b1b6:	4813      	ldr	r0, [pc, #76]	@ (800b204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800b1b8:	f000 fcd5 	bl	800bb66 <USBD_GetEpDesc>
 800b1bc:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d002      	beq.n	800b1ca <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800b1c4:	697b      	ldr	r3, [r7, #20]
 800b1c6:	2210      	movs	r2, #16
 800b1c8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d006      	beq.n	800b1de <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1d0:	693b      	ldr	r3, [r7, #16]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1d8:	711a      	strb	r2, [r3, #4]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	d006      	beq.n	800b1f2 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800b1ec:	711a      	strb	r2, [r3, #4]
 800b1ee:	2200      	movs	r2, #0
 800b1f0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	2243      	movs	r2, #67	@ 0x43
 800b1f6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800b1f8:	4b02      	ldr	r3, [pc, #8]	@ (800b204 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800b1fa:	4618      	mov	r0, r3
 800b1fc:	3718      	adds	r7, #24
 800b1fe:	46bd      	mov	sp, r7
 800b200:	bd80      	pop	{r7, pc}
 800b202:	bf00      	nop
 800b204:	2000008c 	.word	0x2000008c

0800b208 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800b210:	687b      	ldr	r3, [r7, #4]
 800b212:	220a      	movs	r2, #10
 800b214:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800b216:	4b03      	ldr	r3, [pc, #12]	@ (800b224 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800b218:	4618      	mov	r0, r3
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr
 800b224:	20000048 	.word	0x20000048

0800b228 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800b228:	b480      	push	{r7}
 800b22a:	b083      	sub	sp, #12
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800b232:	683b      	ldr	r3, [r7, #0]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d101      	bne.n	800b23c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800b238:	2303      	movs	r3, #3
 800b23a:	e009      	b.n	800b250 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800b242:	687a      	ldr	r2, [r7, #4]
 800b244:	33b0      	adds	r3, #176	@ 0xb0
 800b246:	009b      	lsls	r3, r3, #2
 800b248:	4413      	add	r3, r2
 800b24a:	683a      	ldr	r2, [r7, #0]
 800b24c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800b24e:	2300      	movs	r3, #0
}
 800b250:	4618      	mov	r0, r3
 800b252:	370c      	adds	r7, #12
 800b254:	46bd      	mov	sp, r7
 800b256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25a:	4770      	bx	lr

0800b25c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800b25c:	b480      	push	{r7}
 800b25e:	b087      	sub	sp, #28
 800b260:	af00      	add	r7, sp, #0
 800b262:	60f8      	str	r0, [r7, #12]
 800b264:	60b9      	str	r1, [r7, #8]
 800b266:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b268:	68fb      	ldr	r3, [r7, #12]
 800b26a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	32b0      	adds	r2, #176	@ 0xb0
 800b272:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b276:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b278:	697b      	ldr	r3, [r7, #20]
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d101      	bne.n	800b282 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b27e:	2303      	movs	r3, #3
 800b280:	e008      	b.n	800b294 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	68ba      	ldr	r2, [r7, #8]
 800b286:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800b28a:	697b      	ldr	r3, [r7, #20]
 800b28c:	687a      	ldr	r2, [r7, #4]
 800b28e:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800b292:	2300      	movs	r3, #0
}
 800b294:	4618      	mov	r0, r3
 800b296:	371c      	adds	r7, #28
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	32b0      	adds	r2, #176	@ 0xb0
 800b2b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2b8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d101      	bne.n	800b2c4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800b2c0:	2303      	movs	r3, #3
 800b2c2:	e004      	b.n	800b2ce <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800b2c4:	68fb      	ldr	r3, [r7, #12]
 800b2c6:	683a      	ldr	r2, [r7, #0]
 800b2c8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800b2cc:	2300      	movs	r3, #0
}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3714      	adds	r7, #20
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d8:	4770      	bx	lr
	...

0800b2dc <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	32b0      	adds	r2, #176	@ 0xb0
 800b2ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b2f2:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800b2f8:	68bb      	ldr	r3, [r7, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800b2fe:	2303      	movs	r3, #3
 800b300:	e025      	b.n	800b34e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800b302:	68bb      	ldr	r3, [r7, #8]
 800b304:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800b308:	2b00      	cmp	r3, #0
 800b30a:	d11f      	bne.n	800b34c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	2201      	movs	r2, #1
 800b310:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800b314:	4b10      	ldr	r3, [pc, #64]	@ (800b358 <USBD_CDC_TransmitPacket+0x7c>)
 800b316:	781b      	ldrb	r3, [r3, #0]
 800b318:	f003 020f 	and.w	r2, r3, #15
 800b31c:	68bb      	ldr	r3, [r7, #8]
 800b31e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800b322:	6878      	ldr	r0, [r7, #4]
 800b324:	4613      	mov	r3, r2
 800b326:	009b      	lsls	r3, r3, #2
 800b328:	4413      	add	r3, r2
 800b32a:	009b      	lsls	r3, r3, #2
 800b32c:	4403      	add	r3, r0
 800b32e:	3318      	adds	r3, #24
 800b330:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800b332:	4b09      	ldr	r3, [pc, #36]	@ (800b358 <USBD_CDC_TransmitPacket+0x7c>)
 800b334:	7819      	ldrb	r1, [r3, #0]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800b33c:	68bb      	ldr	r3, [r7, #8]
 800b33e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800b342:	6878      	ldr	r0, [r7, #4]
 800b344:	f004 f93b 	bl	800f5be <USBD_LL_Transmit>

    ret = USBD_OK;
 800b348:	2300      	movs	r3, #0
 800b34a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800b34c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b34e:	4618      	mov	r0, r3
 800b350:	3710      	adds	r7, #16
 800b352:	46bd      	mov	sp, r7
 800b354:	bd80      	pop	{r7, pc}
 800b356:	bf00      	nop
 800b358:	200000cf 	.word	0x200000cf

0800b35c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b084      	sub	sp, #16
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	32b0      	adds	r2, #176	@ 0xb0
 800b36e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b372:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	32b0      	adds	r2, #176	@ 0xb0
 800b37e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d101      	bne.n	800b38a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800b386:	2303      	movs	r3, #3
 800b388:	e018      	b.n	800b3bc <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	7c1b      	ldrb	r3, [r3, #16]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d10a      	bne.n	800b3a8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b392:	4b0c      	ldr	r3, [pc, #48]	@ (800b3c4 <USBD_CDC_ReceivePacket+0x68>)
 800b394:	7819      	ldrb	r1, [r3, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b39c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800b3a0:	6878      	ldr	r0, [r7, #4]
 800b3a2:	f004 f92d 	bl	800f600 <USBD_LL_PrepareReceive>
 800b3a6:	e008      	b.n	800b3ba <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800b3a8:	4b06      	ldr	r3, [pc, #24]	@ (800b3c4 <USBD_CDC_ReceivePacket+0x68>)
 800b3aa:	7819      	ldrb	r1, [r3, #0]
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800b3b2:	2340      	movs	r3, #64	@ 0x40
 800b3b4:	6878      	ldr	r0, [r7, #4]
 800b3b6:	f004 f923 	bl	800f600 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800b3ba:	2300      	movs	r3, #0
}
 800b3bc:	4618      	mov	r0, r3
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	200000d0 	.word	0x200000d0

0800b3c8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800b3c8:	b580      	push	{r7, lr}
 800b3ca:	b086      	sub	sp, #24
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	4613      	mov	r3, r2
 800b3d4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d101      	bne.n	800b3e0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b3dc:	2303      	movs	r3, #3
 800b3de:	e01f      	b.n	800b420 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	2200      	movs	r2, #0
 800b3e4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	2200      	movs	r2, #0
 800b3f4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800b3f8:	68bb      	ldr	r3, [r7, #8]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d003      	beq.n	800b406 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	68ba      	ldr	r2, [r7, #8]
 800b402:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	2201      	movs	r2, #1
 800b40a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	79fa      	ldrb	r2, [r7, #7]
 800b412:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800b414:	68f8      	ldr	r0, [r7, #12]
 800b416:	f003 ff9d 	bl	800f354 <USBD_LL_Init>
 800b41a:	4603      	mov	r3, r0
 800b41c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800b41e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3718      	adds	r7, #24
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}

0800b428 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800b428:	b580      	push	{r7, lr}
 800b42a:	b084      	sub	sp, #16
 800b42c:	af00      	add	r7, sp, #0
 800b42e:	6078      	str	r0, [r7, #4]
 800b430:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b432:	2300      	movs	r3, #0
 800b434:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800b436:	683b      	ldr	r3, [r7, #0]
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d101      	bne.n	800b440 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e025      	b.n	800b48c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	683a      	ldr	r2, [r7, #0]
 800b444:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	32ae      	adds	r2, #174	@ 0xae
 800b452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d00f      	beq.n	800b47c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	32ae      	adds	r2, #174	@ 0xae
 800b466:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b46a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b46c:	f107 020e 	add.w	r2, r7, #14
 800b470:	4610      	mov	r0, r2
 800b472:	4798      	blx	r3
 800b474:	4602      	mov	r2, r0
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800b482:	1c5a      	adds	r2, r3, #1
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800b48a:	2300      	movs	r3, #0
}
 800b48c:	4618      	mov	r0, r3
 800b48e:	3710      	adds	r7, #16
 800b490:	46bd      	mov	sp, r7
 800b492:	bd80      	pop	{r7, pc}

0800b494 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
 800b49a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800b49c:	6878      	ldr	r0, [r7, #4]
 800b49e:	f003 ffa5 	bl	800f3ec <USBD_LL_Start>
 800b4a2:	4603      	mov	r3, r0
}
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	3708      	adds	r7, #8
 800b4a8:	46bd      	mov	sp, r7
 800b4aa:	bd80      	pop	{r7, pc}

0800b4ac <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800b4ac:	b480      	push	{r7}
 800b4ae:	b083      	sub	sp, #12
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b4b4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800b4b6:	4618      	mov	r0, r3
 800b4b8:	370c      	adds	r7, #12
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr

0800b4c2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4c2:	b580      	push	{r7, lr}
 800b4c4:	b084      	sub	sp, #16
 800b4c6:	af00      	add	r7, sp, #0
 800b4c8:	6078      	str	r0, [r7, #4]
 800b4ca:	460b      	mov	r3, r1
 800b4cc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d009      	beq.n	800b4f0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b4e2:	681b      	ldr	r3, [r3, #0]
 800b4e4:	78fa      	ldrb	r2, [r7, #3]
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	4798      	blx	r3
 800b4ec:	4603      	mov	r3, r0
 800b4ee:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b4f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	3710      	adds	r7, #16
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	bd80      	pop	{r7, pc}

0800b4fa <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b4fa:	b580      	push	{r7, lr}
 800b4fc:	b084      	sub	sp, #16
 800b4fe:	af00      	add	r7, sp, #0
 800b500:	6078      	str	r0, [r7, #4]
 800b502:	460b      	mov	r3, r1
 800b504:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b506:	2300      	movs	r3, #0
 800b508:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	78fa      	ldrb	r2, [r7, #3]
 800b514:	4611      	mov	r1, r2
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	4798      	blx	r3
 800b51a:	4603      	mov	r3, r0
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d001      	beq.n	800b524 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b520:	2303      	movs	r3, #3
 800b522:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b524:	7bfb      	ldrb	r3, [r7, #15]
}
 800b526:	4618      	mov	r0, r3
 800b528:	3710      	adds	r7, #16
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b084      	sub	sp, #16
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
 800b536:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b538:	687b      	ldr	r3, [r7, #4]
 800b53a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b53e:	6839      	ldr	r1, [r7, #0]
 800b540:	4618      	mov	r0, r3
 800b542:	f001 f90c 	bl	800c75e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	2201      	movs	r2, #1
 800b54a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b554:	461a      	mov	r2, r3
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b562:	f003 031f 	and.w	r3, r3, #31
 800b566:	2b02      	cmp	r3, #2
 800b568:	d01a      	beq.n	800b5a0 <USBD_LL_SetupStage+0x72>
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d822      	bhi.n	800b5b4 <USBD_LL_SetupStage+0x86>
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d002      	beq.n	800b578 <USBD_LL_SetupStage+0x4a>
 800b572:	2b01      	cmp	r3, #1
 800b574:	d00a      	beq.n	800b58c <USBD_LL_SetupStage+0x5e>
 800b576:	e01d      	b.n	800b5b4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b57e:	4619      	mov	r1, r3
 800b580:	6878      	ldr	r0, [r7, #4]
 800b582:	f000 fb63 	bl	800bc4c <USBD_StdDevReq>
 800b586:	4603      	mov	r3, r0
 800b588:	73fb      	strb	r3, [r7, #15]
      break;
 800b58a:	e020      	b.n	800b5ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b592:	4619      	mov	r1, r3
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	f000 fbcb 	bl	800bd30 <USBD_StdItfReq>
 800b59a:	4603      	mov	r3, r0
 800b59c:	73fb      	strb	r3, [r7, #15]
      break;
 800b59e:	e016      	b.n	800b5ce <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6878      	ldr	r0, [r7, #4]
 800b5aa:	f000 fc2d 	bl	800be08 <USBD_StdEPReq>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	73fb      	strb	r3, [r7, #15]
      break;
 800b5b2:	e00c      	b.n	800b5ce <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b5ba:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	f003 ff72 	bl	800f4ac <USBD_LL_StallEP>
 800b5c8:	4603      	mov	r3, r0
 800b5ca:	73fb      	strb	r3, [r7, #15]
      break;
 800b5cc:	bf00      	nop
  }

  return ret;
 800b5ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	3710      	adds	r7, #16
 800b5d4:	46bd      	mov	sp, r7
 800b5d6:	bd80      	pop	{r7, pc}

0800b5d8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b086      	sub	sp, #24
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	460b      	mov	r3, r1
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b5e6:	2300      	movs	r3, #0
 800b5e8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b5ea:	7afb      	ldrb	r3, [r7, #11]
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d16e      	bne.n	800b6ce <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b5f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b5fe:	2b03      	cmp	r3, #3
 800b600:	f040 8098 	bne.w	800b734 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b604:	693b      	ldr	r3, [r7, #16]
 800b606:	689a      	ldr	r2, [r3, #8]
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	68db      	ldr	r3, [r3, #12]
 800b60c:	429a      	cmp	r2, r3
 800b60e:	d913      	bls.n	800b638 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	689a      	ldr	r2, [r3, #8]
 800b614:	693b      	ldr	r3, [r7, #16]
 800b616:	68db      	ldr	r3, [r3, #12]
 800b618:	1ad2      	subs	r2, r2, r3
 800b61a:	693b      	ldr	r3, [r7, #16]
 800b61c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b61e:	693b      	ldr	r3, [r7, #16]
 800b620:	68da      	ldr	r2, [r3, #12]
 800b622:	693b      	ldr	r3, [r7, #16]
 800b624:	689b      	ldr	r3, [r3, #8]
 800b626:	4293      	cmp	r3, r2
 800b628:	bf28      	it	cs
 800b62a:	4613      	movcs	r3, r2
 800b62c:	461a      	mov	r2, r3
 800b62e:	6879      	ldr	r1, [r7, #4]
 800b630:	68f8      	ldr	r0, [r7, #12]
 800b632:	f001 f994 	bl	800c95e <USBD_CtlContinueRx>
 800b636:	e07d      	b.n	800b734 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b63e:	f003 031f 	and.w	r3, r3, #31
 800b642:	2b02      	cmp	r3, #2
 800b644:	d014      	beq.n	800b670 <USBD_LL_DataOutStage+0x98>
 800b646:	2b02      	cmp	r3, #2
 800b648:	d81d      	bhi.n	800b686 <USBD_LL_DataOutStage+0xae>
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <USBD_LL_DataOutStage+0x7c>
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d003      	beq.n	800b65a <USBD_LL_DataOutStage+0x82>
 800b652:	e018      	b.n	800b686 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b654:	2300      	movs	r3, #0
 800b656:	75bb      	strb	r3, [r7, #22]
            break;
 800b658:	e018      	b.n	800b68c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b660:	b2db      	uxtb	r3, r3
 800b662:	4619      	mov	r1, r3
 800b664:	68f8      	ldr	r0, [r7, #12]
 800b666:	f000 fa64 	bl	800bb32 <USBD_CoreFindIF>
 800b66a:	4603      	mov	r3, r0
 800b66c:	75bb      	strb	r3, [r7, #22]
            break;
 800b66e:	e00d      	b.n	800b68c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b676:	b2db      	uxtb	r3, r3
 800b678:	4619      	mov	r1, r3
 800b67a:	68f8      	ldr	r0, [r7, #12]
 800b67c:	f000 fa66 	bl	800bb4c <USBD_CoreFindEP>
 800b680:	4603      	mov	r3, r0
 800b682:	75bb      	strb	r3, [r7, #22]
            break;
 800b684:	e002      	b.n	800b68c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b686:	2300      	movs	r3, #0
 800b688:	75bb      	strb	r3, [r7, #22]
            break;
 800b68a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b68c:	7dbb      	ldrb	r3, [r7, #22]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d119      	bne.n	800b6c6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b698:	b2db      	uxtb	r3, r3
 800b69a:	2b03      	cmp	r3, #3
 800b69c:	d113      	bne.n	800b6c6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b69e:	7dba      	ldrb	r2, [r7, #22]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	32ae      	adds	r2, #174	@ 0xae
 800b6a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6a8:	691b      	ldr	r3, [r3, #16]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	d00b      	beq.n	800b6c6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b6ae:	7dba      	ldrb	r2, [r7, #22]
 800b6b0:	68fb      	ldr	r3, [r7, #12]
 800b6b2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b6b6:	7dba      	ldrb	r2, [r7, #22]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	32ae      	adds	r2, #174	@ 0xae
 800b6bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b6c0:	691b      	ldr	r3, [r3, #16]
 800b6c2:	68f8      	ldr	r0, [r7, #12]
 800b6c4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b6c6:	68f8      	ldr	r0, [r7, #12]
 800b6c8:	f001 f95a 	bl	800c980 <USBD_CtlSendStatus>
 800b6cc:	e032      	b.n	800b734 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b6ce:	7afb      	ldrb	r3, [r7, #11]
 800b6d0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b6d4:	b2db      	uxtb	r3, r3
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	68f8      	ldr	r0, [r7, #12]
 800b6da:	f000 fa37 	bl	800bb4c <USBD_CoreFindEP>
 800b6de:	4603      	mov	r3, r0
 800b6e0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b6e2:	7dbb      	ldrb	r3, [r7, #22]
 800b6e4:	2bff      	cmp	r3, #255	@ 0xff
 800b6e6:	d025      	beq.n	800b734 <USBD_LL_DataOutStage+0x15c>
 800b6e8:	7dbb      	ldrb	r3, [r7, #22]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d122      	bne.n	800b734 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b6f4:	b2db      	uxtb	r3, r3
 800b6f6:	2b03      	cmp	r3, #3
 800b6f8:	d117      	bne.n	800b72a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b6fa:	7dba      	ldrb	r2, [r7, #22]
 800b6fc:	68fb      	ldr	r3, [r7, #12]
 800b6fe:	32ae      	adds	r2, #174	@ 0xae
 800b700:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b704:	699b      	ldr	r3, [r3, #24]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d00f      	beq.n	800b72a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b70a:	7dba      	ldrb	r2, [r7, #22]
 800b70c:	68fb      	ldr	r3, [r7, #12]
 800b70e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b712:	7dba      	ldrb	r2, [r7, #22]
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	32ae      	adds	r2, #174	@ 0xae
 800b718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b71c:	699b      	ldr	r3, [r3, #24]
 800b71e:	7afa      	ldrb	r2, [r7, #11]
 800b720:	4611      	mov	r1, r2
 800b722:	68f8      	ldr	r0, [r7, #12]
 800b724:	4798      	blx	r3
 800b726:	4603      	mov	r3, r0
 800b728:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b72a:	7dfb      	ldrb	r3, [r7, #23]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	d001      	beq.n	800b734 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b730:	7dfb      	ldrb	r3, [r7, #23]
 800b732:	e000      	b.n	800b736 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b734:	2300      	movs	r3, #0
}
 800b736:	4618      	mov	r0, r3
 800b738:	3718      	adds	r7, #24
 800b73a:	46bd      	mov	sp, r7
 800b73c:	bd80      	pop	{r7, pc}

0800b73e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b73e:	b580      	push	{r7, lr}
 800b740:	b086      	sub	sp, #24
 800b742:	af00      	add	r7, sp, #0
 800b744:	60f8      	str	r0, [r7, #12]
 800b746:	460b      	mov	r3, r1
 800b748:	607a      	str	r2, [r7, #4]
 800b74a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b74c:	7afb      	ldrb	r3, [r7, #11]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d16f      	bne.n	800b832 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b752:	68fb      	ldr	r3, [r7, #12]
 800b754:	3314      	adds	r3, #20
 800b756:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b75e:	2b02      	cmp	r3, #2
 800b760:	d15a      	bne.n	800b818 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b762:	693b      	ldr	r3, [r7, #16]
 800b764:	689a      	ldr	r2, [r3, #8]
 800b766:	693b      	ldr	r3, [r7, #16]
 800b768:	68db      	ldr	r3, [r3, #12]
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d914      	bls.n	800b798 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b76e:	693b      	ldr	r3, [r7, #16]
 800b770:	689a      	ldr	r2, [r3, #8]
 800b772:	693b      	ldr	r3, [r7, #16]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	1ad2      	subs	r2, r2, r3
 800b778:	693b      	ldr	r3, [r7, #16]
 800b77a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b77c:	693b      	ldr	r3, [r7, #16]
 800b77e:	689b      	ldr	r3, [r3, #8]
 800b780:	461a      	mov	r2, r3
 800b782:	6879      	ldr	r1, [r7, #4]
 800b784:	68f8      	ldr	r0, [r7, #12]
 800b786:	f001 f8bc 	bl	800c902 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b78a:	2300      	movs	r3, #0
 800b78c:	2200      	movs	r2, #0
 800b78e:	2100      	movs	r1, #0
 800b790:	68f8      	ldr	r0, [r7, #12]
 800b792:	f003 ff35 	bl	800f600 <USBD_LL_PrepareReceive>
 800b796:	e03f      	b.n	800b818 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b798:	693b      	ldr	r3, [r7, #16]
 800b79a:	68da      	ldr	r2, [r3, #12]
 800b79c:	693b      	ldr	r3, [r7, #16]
 800b79e:	689b      	ldr	r3, [r3, #8]
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d11c      	bne.n	800b7de <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	685a      	ldr	r2, [r3, #4]
 800b7a8:	693b      	ldr	r3, [r7, #16]
 800b7aa:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b7ac:	429a      	cmp	r2, r3
 800b7ae:	d316      	bcc.n	800b7de <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b7b0:	693b      	ldr	r3, [r7, #16]
 800b7b2:	685a      	ldr	r2, [r3, #4]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b7ba:	429a      	cmp	r2, r3
 800b7bc:	d20f      	bcs.n	800b7de <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b7be:	2200      	movs	r2, #0
 800b7c0:	2100      	movs	r1, #0
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f001 f89d 	bl	800c902 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b7c8:	68fb      	ldr	r3, [r7, #12]
 800b7ca:	2200      	movs	r2, #0
 800b7cc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	2100      	movs	r1, #0
 800b7d6:	68f8      	ldr	r0, [r7, #12]
 800b7d8:	f003 ff12 	bl	800f600 <USBD_LL_PrepareReceive>
 800b7dc:	e01c      	b.n	800b818 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b7de:	68fb      	ldr	r3, [r7, #12]
 800b7e0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b7e4:	b2db      	uxtb	r3, r3
 800b7e6:	2b03      	cmp	r3, #3
 800b7e8:	d10f      	bne.n	800b80a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b7f0:	68db      	ldr	r3, [r3, #12]
 800b7f2:	2b00      	cmp	r3, #0
 800b7f4:	d009      	beq.n	800b80a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b7f6:	68fb      	ldr	r3, [r7, #12]
 800b7f8:	2200      	movs	r2, #0
 800b7fa:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b80a:	2180      	movs	r1, #128	@ 0x80
 800b80c:	68f8      	ldr	r0, [r7, #12]
 800b80e:	f003 fe4d 	bl	800f4ac <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b812:	68f8      	ldr	r0, [r7, #12]
 800b814:	f001 f8c7 	bl	800c9a6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b818:	68fb      	ldr	r3, [r7, #12]
 800b81a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b81e:	2b00      	cmp	r3, #0
 800b820:	d03a      	beq.n	800b898 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b822:	68f8      	ldr	r0, [r7, #12]
 800b824:	f7ff fe42 	bl	800b4ac <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b830:	e032      	b.n	800b898 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b832:	7afb      	ldrb	r3, [r7, #11]
 800b834:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b838:	b2db      	uxtb	r3, r3
 800b83a:	4619      	mov	r1, r3
 800b83c:	68f8      	ldr	r0, [r7, #12]
 800b83e:	f000 f985 	bl	800bb4c <USBD_CoreFindEP>
 800b842:	4603      	mov	r3, r0
 800b844:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b846:	7dfb      	ldrb	r3, [r7, #23]
 800b848:	2bff      	cmp	r3, #255	@ 0xff
 800b84a:	d025      	beq.n	800b898 <USBD_LL_DataInStage+0x15a>
 800b84c:	7dfb      	ldrb	r3, [r7, #23]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d122      	bne.n	800b898 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b852:	68fb      	ldr	r3, [r7, #12]
 800b854:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b858:	b2db      	uxtb	r3, r3
 800b85a:	2b03      	cmp	r3, #3
 800b85c:	d11c      	bne.n	800b898 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b85e:	7dfa      	ldrb	r2, [r7, #23]
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	32ae      	adds	r2, #174	@ 0xae
 800b864:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b868:	695b      	ldr	r3, [r3, #20]
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d014      	beq.n	800b898 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b86e:	7dfa      	ldrb	r2, [r7, #23]
 800b870:	68fb      	ldr	r3, [r7, #12]
 800b872:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b876:	7dfa      	ldrb	r2, [r7, #23]
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	32ae      	adds	r2, #174	@ 0xae
 800b87c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b880:	695b      	ldr	r3, [r3, #20]
 800b882:	7afa      	ldrb	r2, [r7, #11]
 800b884:	4611      	mov	r1, r2
 800b886:	68f8      	ldr	r0, [r7, #12]
 800b888:	4798      	blx	r3
 800b88a:	4603      	mov	r3, r0
 800b88c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b88e:	7dbb      	ldrb	r3, [r7, #22]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d001      	beq.n	800b898 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b894:	7dbb      	ldrb	r3, [r7, #22]
 800b896:	e000      	b.n	800b89a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3718      	adds	r7, #24
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b8a2:	b580      	push	{r7, lr}
 800b8a4:	b084      	sub	sp, #16
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8aa:	2300      	movs	r3, #0
 800b8ac:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2201      	movs	r2, #1
 800b8b2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2200      	movs	r2, #0
 800b8c8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d014      	beq.n	800b908 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8e4:	685b      	ldr	r3, [r3, #4]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d00e      	beq.n	800b908 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b8f0:	685b      	ldr	r3, [r3, #4]
 800b8f2:	687a      	ldr	r2, [r7, #4]
 800b8f4:	6852      	ldr	r2, [r2, #4]
 800b8f6:	b2d2      	uxtb	r2, r2
 800b8f8:	4611      	mov	r1, r2
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	4798      	blx	r3
 800b8fe:	4603      	mov	r3, r0
 800b900:	2b00      	cmp	r3, #0
 800b902:	d001      	beq.n	800b908 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b904:	2303      	movs	r3, #3
 800b906:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b908:	2340      	movs	r3, #64	@ 0x40
 800b90a:	2200      	movs	r2, #0
 800b90c:	2100      	movs	r1, #0
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f003 fd87 	bl	800f422 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2201      	movs	r2, #1
 800b918:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2240      	movs	r2, #64	@ 0x40
 800b920:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b924:	2340      	movs	r3, #64	@ 0x40
 800b926:	2200      	movs	r2, #0
 800b928:	2180      	movs	r1, #128	@ 0x80
 800b92a:	6878      	ldr	r0, [r7, #4]
 800b92c:	f003 fd79 	bl	800f422 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	2201      	movs	r2, #1
 800b934:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	2240      	movs	r2, #64	@ 0x40
 800b93a:	621a      	str	r2, [r3, #32]

  return ret;
 800b93c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}

0800b946 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b946:	b480      	push	{r7}
 800b948:	b083      	sub	sp, #12
 800b94a:	af00      	add	r7, sp, #0
 800b94c:	6078      	str	r0, [r7, #4]
 800b94e:	460b      	mov	r3, r1
 800b950:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	78fa      	ldrb	r2, [r7, #3]
 800b956:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b958:	2300      	movs	r3, #0
}
 800b95a:	4618      	mov	r0, r3
 800b95c:	370c      	adds	r7, #12
 800b95e:	46bd      	mov	sp, r7
 800b960:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b964:	4770      	bx	lr

0800b966 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b966:	b480      	push	{r7}
 800b968:	b083      	sub	sp, #12
 800b96a:	af00      	add	r7, sp, #0
 800b96c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b974:	b2db      	uxtb	r3, r3
 800b976:	2b04      	cmp	r3, #4
 800b978:	d006      	beq.n	800b988 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b980:	b2da      	uxtb	r2, r3
 800b982:	687b      	ldr	r3, [r7, #4]
 800b984:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	2204      	movs	r2, #4
 800b98c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b990:	2300      	movs	r3, #0
}
 800b992:	4618      	mov	r0, r3
 800b994:	370c      	adds	r7, #12
 800b996:	46bd      	mov	sp, r7
 800b998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99c:	4770      	bx	lr

0800b99e <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b99e:	b480      	push	{r7}
 800b9a0:	b083      	sub	sp, #12
 800b9a2:	af00      	add	r7, sp, #0
 800b9a4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9ac:	b2db      	uxtb	r3, r3
 800b9ae:	2b04      	cmp	r3, #4
 800b9b0:	d106      	bne.n	800b9c0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b9b8:	b2da      	uxtb	r2, r3
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b9c0:	2300      	movs	r3, #0
}
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	370c      	adds	r7, #12
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9cc:	4770      	bx	lr

0800b9ce <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b9ce:	b580      	push	{r7, lr}
 800b9d0:	b082      	sub	sp, #8
 800b9d2:	af00      	add	r7, sp, #0
 800b9d4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9dc:	b2db      	uxtb	r3, r3
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d110      	bne.n	800ba04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00b      	beq.n	800ba04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b9ec:	687b      	ldr	r3, [r7, #4]
 800b9ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9f2:	69db      	ldr	r3, [r3, #28]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d005      	beq.n	800ba04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b9fe:	69db      	ldr	r3, [r3, #28]
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ba04:	2300      	movs	r3, #0
}
 800ba06:	4618      	mov	r0, r3
 800ba08:	3708      	adds	r7, #8
 800ba0a:	46bd      	mov	sp, r7
 800ba0c:	bd80      	pop	{r7, pc}

0800ba0e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ba0e:	b580      	push	{r7, lr}
 800ba10:	b082      	sub	sp, #8
 800ba12:	af00      	add	r7, sp, #0
 800ba14:	6078      	str	r0, [r7, #4]
 800ba16:	460b      	mov	r3, r1
 800ba18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	32ae      	adds	r2, #174	@ 0xae
 800ba24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d101      	bne.n	800ba30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba2c:	2303      	movs	r3, #3
 800ba2e:	e01c      	b.n	800ba6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba30:	687b      	ldr	r3, [r7, #4]
 800ba32:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba36:	b2db      	uxtb	r3, r3
 800ba38:	2b03      	cmp	r3, #3
 800ba3a:	d115      	bne.n	800ba68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	32ae      	adds	r2, #174	@ 0xae
 800ba46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba4a:	6a1b      	ldr	r3, [r3, #32]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d00b      	beq.n	800ba68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba56:	687b      	ldr	r3, [r7, #4]
 800ba58:	32ae      	adds	r2, #174	@ 0xae
 800ba5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba5e:	6a1b      	ldr	r3, [r3, #32]
 800ba60:	78fa      	ldrb	r2, [r7, #3]
 800ba62:	4611      	mov	r1, r2
 800ba64:	6878      	ldr	r0, [r7, #4]
 800ba66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ba68:	2300      	movs	r3, #0
}
 800ba6a:	4618      	mov	r0, r3
 800ba6c:	3708      	adds	r7, #8
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}

0800ba72 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ba72:	b580      	push	{r7, lr}
 800ba74:	b082      	sub	sp, #8
 800ba76:	af00      	add	r7, sp, #0
 800ba78:	6078      	str	r0, [r7, #4]
 800ba7a:	460b      	mov	r3, r1
 800ba7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	32ae      	adds	r2, #174	@ 0xae
 800ba88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d101      	bne.n	800ba94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ba90:	2303      	movs	r3, #3
 800ba92:	e01c      	b.n	800bace <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba9a:	b2db      	uxtb	r3, r3
 800ba9c:	2b03      	cmp	r3, #3
 800ba9e:	d115      	bne.n	800bacc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	32ae      	adds	r2, #174	@ 0xae
 800baaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800baae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d00b      	beq.n	800bacc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	32ae      	adds	r2, #174	@ 0xae
 800babe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bac4:	78fa      	ldrb	r2, [r7, #3]
 800bac6:	4611      	mov	r1, r2
 800bac8:	6878      	ldr	r0, [r7, #4]
 800baca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800bacc:	2300      	movs	r3, #0
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3708      	adds	r7, #8
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}

0800bad6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800bad6:	b480      	push	{r7}
 800bad8:	b083      	sub	sp, #12
 800bada:	af00      	add	r7, sp, #0
 800badc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b084      	sub	sp, #16
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800baf4:	2300      	movs	r3, #0
 800baf6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2201      	movs	r2, #1
 800bafc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d00e      	beq.n	800bb28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bb10:	685b      	ldr	r3, [r3, #4]
 800bb12:	687a      	ldr	r2, [r7, #4]
 800bb14:	6852      	ldr	r2, [r2, #4]
 800bb16:	b2d2      	uxtb	r2, r2
 800bb18:	4611      	mov	r1, r2
 800bb1a:	6878      	ldr	r0, [r7, #4]
 800bb1c:	4798      	blx	r3
 800bb1e:	4603      	mov	r3, r0
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d001      	beq.n	800bb28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800bb24:	2303      	movs	r3, #3
 800bb26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800bb28:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3710      	adds	r7, #16
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	bd80      	pop	{r7, pc}

0800bb32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb32:	b480      	push	{r7}
 800bb34:	b083      	sub	sp, #12
 800bb36:	af00      	add	r7, sp, #0
 800bb38:	6078      	str	r0, [r7, #4]
 800bb3a:	460b      	mov	r3, r1
 800bb3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb40:	4618      	mov	r0, r3
 800bb42:	370c      	adds	r7, #12
 800bb44:	46bd      	mov	sp, r7
 800bb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb4a:	4770      	bx	lr

0800bb4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800bb4c:	b480      	push	{r7}
 800bb4e:	b083      	sub	sp, #12
 800bb50:	af00      	add	r7, sp, #0
 800bb52:	6078      	str	r0, [r7, #4]
 800bb54:	460b      	mov	r3, r1
 800bb56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800bb58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800bb5a:	4618      	mov	r0, r3
 800bb5c:	370c      	adds	r7, #12
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb64:	4770      	bx	lr

0800bb66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800bb66:	b580      	push	{r7, lr}
 800bb68:	b086      	sub	sp, #24
 800bb6a:	af00      	add	r7, sp, #0
 800bb6c:	6078      	str	r0, [r7, #4]
 800bb6e:	460b      	mov	r3, r1
 800bb70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	885b      	ldrh	r3, [r3, #2]
 800bb82:	b29b      	uxth	r3, r3
 800bb84:	68fa      	ldr	r2, [r7, #12]
 800bb86:	7812      	ldrb	r2, [r2, #0]
 800bb88:	4293      	cmp	r3, r2
 800bb8a:	d91f      	bls.n	800bbcc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800bb8c:	68fb      	ldr	r3, [r7, #12]
 800bb8e:	781b      	ldrb	r3, [r3, #0]
 800bb90:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800bb92:	e013      	b.n	800bbbc <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800bb94:	f107 030a 	add.w	r3, r7, #10
 800bb98:	4619      	mov	r1, r3
 800bb9a:	6978      	ldr	r0, [r7, #20]
 800bb9c:	f000 f81b 	bl	800bbd6 <USBD_GetNextDesc>
 800bba0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800bba2:	697b      	ldr	r3, [r7, #20]
 800bba4:	785b      	ldrb	r3, [r3, #1]
 800bba6:	2b05      	cmp	r3, #5
 800bba8:	d108      	bne.n	800bbbc <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800bbaa:	697b      	ldr	r3, [r7, #20]
 800bbac:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	789b      	ldrb	r3, [r3, #2]
 800bbb2:	78fa      	ldrb	r2, [r7, #3]
 800bbb4:	429a      	cmp	r2, r3
 800bbb6:	d008      	beq.n	800bbca <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800bbb8:	2300      	movs	r3, #0
 800bbba:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800bbbc:	68fb      	ldr	r3, [r7, #12]
 800bbbe:	885b      	ldrh	r3, [r3, #2]
 800bbc0:	b29a      	uxth	r2, r3
 800bbc2:	897b      	ldrh	r3, [r7, #10]
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	d8e5      	bhi.n	800bb94 <USBD_GetEpDesc+0x2e>
 800bbc8:	e000      	b.n	800bbcc <USBD_GetEpDesc+0x66>
          break;
 800bbca:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800bbcc:	693b      	ldr	r3, [r7, #16]
}
 800bbce:	4618      	mov	r0, r3
 800bbd0:	3718      	adds	r7, #24
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800bbd6:	b480      	push	{r7}
 800bbd8:	b085      	sub	sp, #20
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	881b      	ldrh	r3, [r3, #0]
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	7812      	ldrb	r2, [r2, #0]
 800bbec:	4413      	add	r3, r2
 800bbee:	b29a      	uxth	r2, r3
 800bbf0:	683b      	ldr	r3, [r7, #0]
 800bbf2:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	781b      	ldrb	r3, [r3, #0]
 800bbf8:	461a      	mov	r2, r3
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	4413      	add	r3, r2
 800bbfe:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800bc00:	68fb      	ldr	r3, [r7, #12]
}
 800bc02:	4618      	mov	r0, r3
 800bc04:	3714      	adds	r7, #20
 800bc06:	46bd      	mov	sp, r7
 800bc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc0c:	4770      	bx	lr

0800bc0e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800bc0e:	b480      	push	{r7}
 800bc10:	b087      	sub	sp, #28
 800bc12:	af00      	add	r7, sp, #0
 800bc14:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800bc1a:	697b      	ldr	r3, [r7, #20]
 800bc1c:	781b      	ldrb	r3, [r3, #0]
 800bc1e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800bc20:	697b      	ldr	r3, [r7, #20]
 800bc22:	3301      	adds	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800bc26:	697b      	ldr	r3, [r7, #20]
 800bc28:	781b      	ldrb	r3, [r3, #0]
 800bc2a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800bc2c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800bc30:	021b      	lsls	r3, r3, #8
 800bc32:	b21a      	sxth	r2, r3
 800bc34:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	b21b      	sxth	r3, r3
 800bc3c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800bc3e:	89fb      	ldrh	r3, [r7, #14]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	371c      	adds	r7, #28
 800bc44:	46bd      	mov	sp, r7
 800bc46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc4a:	4770      	bx	lr

0800bc4c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b084      	sub	sp, #16
 800bc50:	af00      	add	r7, sp, #0
 800bc52:	6078      	str	r0, [r7, #4]
 800bc54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bc56:	2300      	movs	r3, #0
 800bc58:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bc5a:	683b      	ldr	r3, [r7, #0]
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bc62:	2b40      	cmp	r3, #64	@ 0x40
 800bc64:	d005      	beq.n	800bc72 <USBD_StdDevReq+0x26>
 800bc66:	2b40      	cmp	r3, #64	@ 0x40
 800bc68:	d857      	bhi.n	800bd1a <USBD_StdDevReq+0xce>
 800bc6a:	2b00      	cmp	r3, #0
 800bc6c:	d00f      	beq.n	800bc8e <USBD_StdDevReq+0x42>
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d153      	bne.n	800bd1a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800bc72:	687b      	ldr	r3, [r7, #4]
 800bc74:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	32ae      	adds	r2, #174	@ 0xae
 800bc7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc80:	689b      	ldr	r3, [r3, #8]
 800bc82:	6839      	ldr	r1, [r7, #0]
 800bc84:	6878      	ldr	r0, [r7, #4]
 800bc86:	4798      	blx	r3
 800bc88:	4603      	mov	r3, r0
 800bc8a:	73fb      	strb	r3, [r7, #15]
      break;
 800bc8c:	e04a      	b.n	800bd24 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800bc8e:	683b      	ldr	r3, [r7, #0]
 800bc90:	785b      	ldrb	r3, [r3, #1]
 800bc92:	2b09      	cmp	r3, #9
 800bc94:	d83b      	bhi.n	800bd0e <USBD_StdDevReq+0xc2>
 800bc96:	a201      	add	r2, pc, #4	@ (adr r2, 800bc9c <USBD_StdDevReq+0x50>)
 800bc98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc9c:	0800bcf1 	.word	0x0800bcf1
 800bca0:	0800bd05 	.word	0x0800bd05
 800bca4:	0800bd0f 	.word	0x0800bd0f
 800bca8:	0800bcfb 	.word	0x0800bcfb
 800bcac:	0800bd0f 	.word	0x0800bd0f
 800bcb0:	0800bccf 	.word	0x0800bccf
 800bcb4:	0800bcc5 	.word	0x0800bcc5
 800bcb8:	0800bd0f 	.word	0x0800bd0f
 800bcbc:	0800bce7 	.word	0x0800bce7
 800bcc0:	0800bcd9 	.word	0x0800bcd9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800bcc4:	6839      	ldr	r1, [r7, #0]
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa3c 	bl	800c144 <USBD_GetDescriptor>
          break;
 800bccc:	e024      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800bcce:	6839      	ldr	r1, [r7, #0]
 800bcd0:	6878      	ldr	r0, [r7, #4]
 800bcd2:	f000 fba1 	bl	800c418 <USBD_SetAddress>
          break;
 800bcd6:	e01f      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800bcd8:	6839      	ldr	r1, [r7, #0]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	f000 fbe0 	bl	800c4a0 <USBD_SetConfig>
 800bce0:	4603      	mov	r3, r0
 800bce2:	73fb      	strb	r3, [r7, #15]
          break;
 800bce4:	e018      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800bce6:	6839      	ldr	r1, [r7, #0]
 800bce8:	6878      	ldr	r0, [r7, #4]
 800bcea:	f000 fc83 	bl	800c5f4 <USBD_GetConfig>
          break;
 800bcee:	e013      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800bcf0:	6839      	ldr	r1, [r7, #0]
 800bcf2:	6878      	ldr	r0, [r7, #4]
 800bcf4:	f000 fcb4 	bl	800c660 <USBD_GetStatus>
          break;
 800bcf8:	e00e      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800bcfa:	6839      	ldr	r1, [r7, #0]
 800bcfc:	6878      	ldr	r0, [r7, #4]
 800bcfe:	f000 fce3 	bl	800c6c8 <USBD_SetFeature>
          break;
 800bd02:	e009      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800bd04:	6839      	ldr	r1, [r7, #0]
 800bd06:	6878      	ldr	r0, [r7, #4]
 800bd08:	f000 fd07 	bl	800c71a <USBD_ClrFeature>
          break;
 800bd0c:	e004      	b.n	800bd18 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800bd0e:	6839      	ldr	r1, [r7, #0]
 800bd10:	6878      	ldr	r0, [r7, #4]
 800bd12:	f000 fd5e 	bl	800c7d2 <USBD_CtlError>
          break;
 800bd16:	bf00      	nop
      }
      break;
 800bd18:	e004      	b.n	800bd24 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800bd1a:	6839      	ldr	r1, [r7, #0]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f000 fd58 	bl	800c7d2 <USBD_CtlError>
      break;
 800bd22:	bf00      	nop
  }

  return ret;
 800bd24:	7bfb      	ldrb	r3, [r7, #15]
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3710      	adds	r7, #16
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	bd80      	pop	{r7, pc}
 800bd2e:	bf00      	nop

0800bd30 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd30:	b580      	push	{r7, lr}
 800bd32:	b084      	sub	sp, #16
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
 800bd38:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800bd3e:	683b      	ldr	r3, [r7, #0]
 800bd40:	781b      	ldrb	r3, [r3, #0]
 800bd42:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800bd46:	2b40      	cmp	r3, #64	@ 0x40
 800bd48:	d005      	beq.n	800bd56 <USBD_StdItfReq+0x26>
 800bd4a:	2b40      	cmp	r3, #64	@ 0x40
 800bd4c:	d852      	bhi.n	800bdf4 <USBD_StdItfReq+0xc4>
 800bd4e:	2b00      	cmp	r3, #0
 800bd50:	d001      	beq.n	800bd56 <USBD_StdItfReq+0x26>
 800bd52:	2b20      	cmp	r3, #32
 800bd54:	d14e      	bne.n	800bdf4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd5c:	b2db      	uxtb	r3, r3
 800bd5e:	3b01      	subs	r3, #1
 800bd60:	2b02      	cmp	r3, #2
 800bd62:	d840      	bhi.n	800bde6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	889b      	ldrh	r3, [r3, #4]
 800bd68:	b2db      	uxtb	r3, r3
 800bd6a:	2b01      	cmp	r3, #1
 800bd6c:	d836      	bhi.n	800bddc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800bd6e:	683b      	ldr	r3, [r7, #0]
 800bd70:	889b      	ldrh	r3, [r3, #4]
 800bd72:	b2db      	uxtb	r3, r3
 800bd74:	4619      	mov	r1, r3
 800bd76:	6878      	ldr	r0, [r7, #4]
 800bd78:	f7ff fedb 	bl	800bb32 <USBD_CoreFindIF>
 800bd7c:	4603      	mov	r3, r0
 800bd7e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bd80:	7bbb      	ldrb	r3, [r7, #14]
 800bd82:	2bff      	cmp	r3, #255	@ 0xff
 800bd84:	d01d      	beq.n	800bdc2 <USBD_StdItfReq+0x92>
 800bd86:	7bbb      	ldrb	r3, [r7, #14]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d11a      	bne.n	800bdc2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800bd8c:	7bba      	ldrb	r2, [r7, #14]
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	32ae      	adds	r2, #174	@ 0xae
 800bd92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd96:	689b      	ldr	r3, [r3, #8]
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d00f      	beq.n	800bdbc <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800bd9c:	7bba      	ldrb	r2, [r7, #14]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bda4:	7bba      	ldrb	r2, [r7, #14]
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	32ae      	adds	r2, #174	@ 0xae
 800bdaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bdae:	689b      	ldr	r3, [r3, #8]
 800bdb0:	6839      	ldr	r1, [r7, #0]
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	4798      	blx	r3
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bdba:	e004      	b.n	800bdc6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800bdbc:	2303      	movs	r3, #3
 800bdbe:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800bdc0:	e001      	b.n	800bdc6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800bdc2:	2303      	movs	r3, #3
 800bdc4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800bdc6:	683b      	ldr	r3, [r7, #0]
 800bdc8:	88db      	ldrh	r3, [r3, #6]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d110      	bne.n	800bdf0 <USBD_StdItfReq+0xc0>
 800bdce:	7bfb      	ldrb	r3, [r7, #15]
 800bdd0:	2b00      	cmp	r3, #0
 800bdd2:	d10d      	bne.n	800bdf0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800bdd4:	6878      	ldr	r0, [r7, #4]
 800bdd6:	f000 fdd3 	bl	800c980 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800bdda:	e009      	b.n	800bdf0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800bddc:	6839      	ldr	r1, [r7, #0]
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	f000 fcf7 	bl	800c7d2 <USBD_CtlError>
          break;
 800bde4:	e004      	b.n	800bdf0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800bde6:	6839      	ldr	r1, [r7, #0]
 800bde8:	6878      	ldr	r0, [r7, #4]
 800bdea:	f000 fcf2 	bl	800c7d2 <USBD_CtlError>
          break;
 800bdee:	e000      	b.n	800bdf2 <USBD_StdItfReq+0xc2>
          break;
 800bdf0:	bf00      	nop
      }
      break;
 800bdf2:	e004      	b.n	800bdfe <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800bdf4:	6839      	ldr	r1, [r7, #0]
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fceb 	bl	800c7d2 <USBD_CtlError>
      break;
 800bdfc:	bf00      	nop
  }

  return ret;
 800bdfe:	7bfb      	ldrb	r3, [r7, #15]
}
 800be00:	4618      	mov	r0, r3
 800be02:	3710      	adds	r7, #16
 800be04:	46bd      	mov	sp, r7
 800be06:	bd80      	pop	{r7, pc}

0800be08 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be08:	b580      	push	{r7, lr}
 800be0a:	b084      	sub	sp, #16
 800be0c:	af00      	add	r7, sp, #0
 800be0e:	6078      	str	r0, [r7, #4]
 800be10:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800be12:	2300      	movs	r3, #0
 800be14:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800be16:	683b      	ldr	r3, [r7, #0]
 800be18:	889b      	ldrh	r3, [r3, #4]
 800be1a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800be1c:	683b      	ldr	r3, [r7, #0]
 800be1e:	781b      	ldrb	r3, [r3, #0]
 800be20:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800be24:	2b40      	cmp	r3, #64	@ 0x40
 800be26:	d007      	beq.n	800be38 <USBD_StdEPReq+0x30>
 800be28:	2b40      	cmp	r3, #64	@ 0x40
 800be2a:	f200 817f 	bhi.w	800c12c <USBD_StdEPReq+0x324>
 800be2e:	2b00      	cmp	r3, #0
 800be30:	d02a      	beq.n	800be88 <USBD_StdEPReq+0x80>
 800be32:	2b20      	cmp	r3, #32
 800be34:	f040 817a 	bne.w	800c12c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800be38:	7bbb      	ldrb	r3, [r7, #14]
 800be3a:	4619      	mov	r1, r3
 800be3c:	6878      	ldr	r0, [r7, #4]
 800be3e:	f7ff fe85 	bl	800bb4c <USBD_CoreFindEP>
 800be42:	4603      	mov	r3, r0
 800be44:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800be46:	7b7b      	ldrb	r3, [r7, #13]
 800be48:	2bff      	cmp	r3, #255	@ 0xff
 800be4a:	f000 8174 	beq.w	800c136 <USBD_StdEPReq+0x32e>
 800be4e:	7b7b      	ldrb	r3, [r7, #13]
 800be50:	2b00      	cmp	r3, #0
 800be52:	f040 8170 	bne.w	800c136 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800be56:	7b7a      	ldrb	r2, [r7, #13]
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800be5e:	7b7a      	ldrb	r2, [r7, #13]
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	32ae      	adds	r2, #174	@ 0xae
 800be64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be68:	689b      	ldr	r3, [r3, #8]
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	f000 8163 	beq.w	800c136 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800be70:	7b7a      	ldrb	r2, [r7, #13]
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	32ae      	adds	r2, #174	@ 0xae
 800be76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	6839      	ldr	r1, [r7, #0]
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	4798      	blx	r3
 800be82:	4603      	mov	r3, r0
 800be84:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800be86:	e156      	b.n	800c136 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800be88:	683b      	ldr	r3, [r7, #0]
 800be8a:	785b      	ldrb	r3, [r3, #1]
 800be8c:	2b03      	cmp	r3, #3
 800be8e:	d008      	beq.n	800bea2 <USBD_StdEPReq+0x9a>
 800be90:	2b03      	cmp	r3, #3
 800be92:	f300 8145 	bgt.w	800c120 <USBD_StdEPReq+0x318>
 800be96:	2b00      	cmp	r3, #0
 800be98:	f000 809b 	beq.w	800bfd2 <USBD_StdEPReq+0x1ca>
 800be9c:	2b01      	cmp	r3, #1
 800be9e:	d03c      	beq.n	800bf1a <USBD_StdEPReq+0x112>
 800bea0:	e13e      	b.n	800c120 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bea8:	b2db      	uxtb	r3, r3
 800beaa:	2b02      	cmp	r3, #2
 800beac:	d002      	beq.n	800beb4 <USBD_StdEPReq+0xac>
 800beae:	2b03      	cmp	r3, #3
 800beb0:	d016      	beq.n	800bee0 <USBD_StdEPReq+0xd8>
 800beb2:	e02c      	b.n	800bf0e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800beb4:	7bbb      	ldrb	r3, [r7, #14]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d00d      	beq.n	800bed6 <USBD_StdEPReq+0xce>
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b80      	cmp	r3, #128	@ 0x80
 800bebe:	d00a      	beq.n	800bed6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bec0:	7bbb      	ldrb	r3, [r7, #14]
 800bec2:	4619      	mov	r1, r3
 800bec4:	6878      	ldr	r0, [r7, #4]
 800bec6:	f003 faf1 	bl	800f4ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800beca:	2180      	movs	r1, #128	@ 0x80
 800becc:	6878      	ldr	r0, [r7, #4]
 800bece:	f003 faed 	bl	800f4ac <USBD_LL_StallEP>
 800bed2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bed4:	e020      	b.n	800bf18 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800bed6:	6839      	ldr	r1, [r7, #0]
 800bed8:	6878      	ldr	r0, [r7, #4]
 800beda:	f000 fc7a 	bl	800c7d2 <USBD_CtlError>
              break;
 800bede:	e01b      	b.n	800bf18 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	885b      	ldrh	r3, [r3, #2]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d10e      	bne.n	800bf06 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800bee8:	7bbb      	ldrb	r3, [r7, #14]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d00b      	beq.n	800bf06 <USBD_StdEPReq+0xfe>
 800beee:	7bbb      	ldrb	r3, [r7, #14]
 800bef0:	2b80      	cmp	r3, #128	@ 0x80
 800bef2:	d008      	beq.n	800bf06 <USBD_StdEPReq+0xfe>
 800bef4:	683b      	ldr	r3, [r7, #0]
 800bef6:	88db      	ldrh	r3, [r3, #6]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d104      	bne.n	800bf06 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800befc:	7bbb      	ldrb	r3, [r7, #14]
 800befe:	4619      	mov	r1, r3
 800bf00:	6878      	ldr	r0, [r7, #4]
 800bf02:	f003 fad3 	bl	800f4ac <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800bf06:	6878      	ldr	r0, [r7, #4]
 800bf08:	f000 fd3a 	bl	800c980 <USBD_CtlSendStatus>

              break;
 800bf0c:	e004      	b.n	800bf18 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800bf0e:	6839      	ldr	r1, [r7, #0]
 800bf10:	6878      	ldr	r0, [r7, #4]
 800bf12:	f000 fc5e 	bl	800c7d2 <USBD_CtlError>
              break;
 800bf16:	bf00      	nop
          }
          break;
 800bf18:	e107      	b.n	800c12a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b02      	cmp	r3, #2
 800bf24:	d002      	beq.n	800bf2c <USBD_StdEPReq+0x124>
 800bf26:	2b03      	cmp	r3, #3
 800bf28:	d016      	beq.n	800bf58 <USBD_StdEPReq+0x150>
 800bf2a:	e04b      	b.n	800bfc4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bf2c:	7bbb      	ldrb	r3, [r7, #14]
 800bf2e:	2b00      	cmp	r3, #0
 800bf30:	d00d      	beq.n	800bf4e <USBD_StdEPReq+0x146>
 800bf32:	7bbb      	ldrb	r3, [r7, #14]
 800bf34:	2b80      	cmp	r3, #128	@ 0x80
 800bf36:	d00a      	beq.n	800bf4e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800bf38:	7bbb      	ldrb	r3, [r7, #14]
 800bf3a:	4619      	mov	r1, r3
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	f003 fab5 	bl	800f4ac <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800bf42:	2180      	movs	r1, #128	@ 0x80
 800bf44:	6878      	ldr	r0, [r7, #4]
 800bf46:	f003 fab1 	bl	800f4ac <USBD_LL_StallEP>
 800bf4a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800bf4c:	e040      	b.n	800bfd0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800bf4e:	6839      	ldr	r1, [r7, #0]
 800bf50:	6878      	ldr	r0, [r7, #4]
 800bf52:	f000 fc3e 	bl	800c7d2 <USBD_CtlError>
              break;
 800bf56:	e03b      	b.n	800bfd0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800bf58:	683b      	ldr	r3, [r7, #0]
 800bf5a:	885b      	ldrh	r3, [r3, #2]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d136      	bne.n	800bfce <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800bf60:	7bbb      	ldrb	r3, [r7, #14]
 800bf62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf66:	2b00      	cmp	r3, #0
 800bf68:	d004      	beq.n	800bf74 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800bf6a:	7bbb      	ldrb	r3, [r7, #14]
 800bf6c:	4619      	mov	r1, r3
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f003 fabb 	bl	800f4ea <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800bf74:	6878      	ldr	r0, [r7, #4]
 800bf76:	f000 fd03 	bl	800c980 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800bf7a:	7bbb      	ldrb	r3, [r7, #14]
 800bf7c:	4619      	mov	r1, r3
 800bf7e:	6878      	ldr	r0, [r7, #4]
 800bf80:	f7ff fde4 	bl	800bb4c <USBD_CoreFindEP>
 800bf84:	4603      	mov	r3, r0
 800bf86:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bf88:	7b7b      	ldrb	r3, [r7, #13]
 800bf8a:	2bff      	cmp	r3, #255	@ 0xff
 800bf8c:	d01f      	beq.n	800bfce <USBD_StdEPReq+0x1c6>
 800bf8e:	7b7b      	ldrb	r3, [r7, #13]
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	d11c      	bne.n	800bfce <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bf94:	7b7a      	ldrb	r2, [r7, #13]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bf9c:	7b7a      	ldrb	r2, [r7, #13]
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	32ae      	adds	r2, #174	@ 0xae
 800bfa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	2b00      	cmp	r3, #0
 800bfaa:	d010      	beq.n	800bfce <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800bfac:	7b7a      	ldrb	r2, [r7, #13]
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	32ae      	adds	r2, #174	@ 0xae
 800bfb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bfb6:	689b      	ldr	r3, [r3, #8]
 800bfb8:	6839      	ldr	r1, [r7, #0]
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	4798      	blx	r3
 800bfbe:	4603      	mov	r3, r0
 800bfc0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800bfc2:	e004      	b.n	800bfce <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800bfc4:	6839      	ldr	r1, [r7, #0]
 800bfc6:	6878      	ldr	r0, [r7, #4]
 800bfc8:	f000 fc03 	bl	800c7d2 <USBD_CtlError>
              break;
 800bfcc:	e000      	b.n	800bfd0 <USBD_StdEPReq+0x1c8>
              break;
 800bfce:	bf00      	nop
          }
          break;
 800bfd0:	e0ab      	b.n	800c12a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bfd8:	b2db      	uxtb	r3, r3
 800bfda:	2b02      	cmp	r3, #2
 800bfdc:	d002      	beq.n	800bfe4 <USBD_StdEPReq+0x1dc>
 800bfde:	2b03      	cmp	r3, #3
 800bfe0:	d032      	beq.n	800c048 <USBD_StdEPReq+0x240>
 800bfe2:	e097      	b.n	800c114 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bfe4:	7bbb      	ldrb	r3, [r7, #14]
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d007      	beq.n	800bffa <USBD_StdEPReq+0x1f2>
 800bfea:	7bbb      	ldrb	r3, [r7, #14]
 800bfec:	2b80      	cmp	r3, #128	@ 0x80
 800bfee:	d004      	beq.n	800bffa <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 fbed 	bl	800c7d2 <USBD_CtlError>
                break;
 800bff8:	e091      	b.n	800c11e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bffa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bffe:	2b00      	cmp	r3, #0
 800c000:	da0b      	bge.n	800c01a <USBD_StdEPReq+0x212>
 800c002:	7bbb      	ldrb	r3, [r7, #14]
 800c004:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c008:	4613      	mov	r3, r2
 800c00a:	009b      	lsls	r3, r3, #2
 800c00c:	4413      	add	r3, r2
 800c00e:	009b      	lsls	r3, r3, #2
 800c010:	3310      	adds	r3, #16
 800c012:	687a      	ldr	r2, [r7, #4]
 800c014:	4413      	add	r3, r2
 800c016:	3304      	adds	r3, #4
 800c018:	e00b      	b.n	800c032 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c01a:	7bbb      	ldrb	r3, [r7, #14]
 800c01c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c020:	4613      	mov	r3, r2
 800c022:	009b      	lsls	r3, r3, #2
 800c024:	4413      	add	r3, r2
 800c026:	009b      	lsls	r3, r3, #2
 800c028:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c02c:	687a      	ldr	r2, [r7, #4]
 800c02e:	4413      	add	r3, r2
 800c030:	3304      	adds	r3, #4
 800c032:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800c034:	68bb      	ldr	r3, [r7, #8]
 800c036:	2200      	movs	r2, #0
 800c038:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c03a:	68bb      	ldr	r3, [r7, #8]
 800c03c:	2202      	movs	r2, #2
 800c03e:	4619      	mov	r1, r3
 800c040:	6878      	ldr	r0, [r7, #4]
 800c042:	f000 fc43 	bl	800c8cc <USBD_CtlSendData>
              break;
 800c046:	e06a      	b.n	800c11e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800c048:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	da11      	bge.n	800c074 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800c050:	7bbb      	ldrb	r3, [r7, #14]
 800c052:	f003 020f 	and.w	r2, r3, #15
 800c056:	6879      	ldr	r1, [r7, #4]
 800c058:	4613      	mov	r3, r2
 800c05a:	009b      	lsls	r3, r3, #2
 800c05c:	4413      	add	r3, r2
 800c05e:	009b      	lsls	r3, r3, #2
 800c060:	440b      	add	r3, r1
 800c062:	3324      	adds	r3, #36	@ 0x24
 800c064:	881b      	ldrh	r3, [r3, #0]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d117      	bne.n	800c09a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c06a:	6839      	ldr	r1, [r7, #0]
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	f000 fbb0 	bl	800c7d2 <USBD_CtlError>
                  break;
 800c072:	e054      	b.n	800c11e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800c074:	7bbb      	ldrb	r3, [r7, #14]
 800c076:	f003 020f 	and.w	r2, r3, #15
 800c07a:	6879      	ldr	r1, [r7, #4]
 800c07c:	4613      	mov	r3, r2
 800c07e:	009b      	lsls	r3, r3, #2
 800c080:	4413      	add	r3, r2
 800c082:	009b      	lsls	r3, r3, #2
 800c084:	440b      	add	r3, r1
 800c086:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800c08a:	881b      	ldrh	r3, [r3, #0]
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d104      	bne.n	800c09a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800c090:	6839      	ldr	r1, [r7, #0]
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 fb9d 	bl	800c7d2 <USBD_CtlError>
                  break;
 800c098:	e041      	b.n	800c11e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c09a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	da0b      	bge.n	800c0ba <USBD_StdEPReq+0x2b2>
 800c0a2:	7bbb      	ldrb	r3, [r7, #14]
 800c0a4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c0a8:	4613      	mov	r3, r2
 800c0aa:	009b      	lsls	r3, r3, #2
 800c0ac:	4413      	add	r3, r2
 800c0ae:	009b      	lsls	r3, r3, #2
 800c0b0:	3310      	adds	r3, #16
 800c0b2:	687a      	ldr	r2, [r7, #4]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	3304      	adds	r3, #4
 800c0b8:	e00b      	b.n	800c0d2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800c0ba:	7bbb      	ldrb	r3, [r7, #14]
 800c0bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800c0c0:	4613      	mov	r3, r2
 800c0c2:	009b      	lsls	r3, r3, #2
 800c0c4:	4413      	add	r3, r2
 800c0c6:	009b      	lsls	r3, r3, #2
 800c0c8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800c0cc:	687a      	ldr	r2, [r7, #4]
 800c0ce:	4413      	add	r3, r2
 800c0d0:	3304      	adds	r3, #4
 800c0d2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800c0d4:	7bbb      	ldrb	r3, [r7, #14]
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d002      	beq.n	800c0e0 <USBD_StdEPReq+0x2d8>
 800c0da:	7bbb      	ldrb	r3, [r7, #14]
 800c0dc:	2b80      	cmp	r3, #128	@ 0x80
 800c0de:	d103      	bne.n	800c0e8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	601a      	str	r2, [r3, #0]
 800c0e6:	e00e      	b.n	800c106 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800c0e8:	7bbb      	ldrb	r3, [r7, #14]
 800c0ea:	4619      	mov	r1, r3
 800c0ec:	6878      	ldr	r0, [r7, #4]
 800c0ee:	f003 fa1b 	bl	800f528 <USBD_LL_IsStallEP>
 800c0f2:	4603      	mov	r3, r0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d003      	beq.n	800c100 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800c0f8:	68bb      	ldr	r3, [r7, #8]
 800c0fa:	2201      	movs	r2, #1
 800c0fc:	601a      	str	r2, [r3, #0]
 800c0fe:	e002      	b.n	800c106 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800c100:	68bb      	ldr	r3, [r7, #8]
 800c102:	2200      	movs	r2, #0
 800c104:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800c106:	68bb      	ldr	r3, [r7, #8]
 800c108:	2202      	movs	r2, #2
 800c10a:	4619      	mov	r1, r3
 800c10c:	6878      	ldr	r0, [r7, #4]
 800c10e:	f000 fbdd 	bl	800c8cc <USBD_CtlSendData>
              break;
 800c112:	e004      	b.n	800c11e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800c114:	6839      	ldr	r1, [r7, #0]
 800c116:	6878      	ldr	r0, [r7, #4]
 800c118:	f000 fb5b 	bl	800c7d2 <USBD_CtlError>
              break;
 800c11c:	bf00      	nop
          }
          break;
 800c11e:	e004      	b.n	800c12a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800c120:	6839      	ldr	r1, [r7, #0]
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 fb55 	bl	800c7d2 <USBD_CtlError>
          break;
 800c128:	bf00      	nop
      }
      break;
 800c12a:	e005      	b.n	800c138 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800c12c:	6839      	ldr	r1, [r7, #0]
 800c12e:	6878      	ldr	r0, [r7, #4]
 800c130:	f000 fb4f 	bl	800c7d2 <USBD_CtlError>
      break;
 800c134:	e000      	b.n	800c138 <USBD_StdEPReq+0x330>
      break;
 800c136:	bf00      	nop
  }

  return ret;
 800c138:	7bfb      	ldrb	r3, [r7, #15]
}
 800c13a:	4618      	mov	r0, r3
 800c13c:	3710      	adds	r7, #16
 800c13e:	46bd      	mov	sp, r7
 800c140:	bd80      	pop	{r7, pc}
	...

0800c144 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c144:	b580      	push	{r7, lr}
 800c146:	b084      	sub	sp, #16
 800c148:	af00      	add	r7, sp, #0
 800c14a:	6078      	str	r0, [r7, #4]
 800c14c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800c152:	2300      	movs	r3, #0
 800c154:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800c156:	2300      	movs	r3, #0
 800c158:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800c15a:	683b      	ldr	r3, [r7, #0]
 800c15c:	885b      	ldrh	r3, [r3, #2]
 800c15e:	0a1b      	lsrs	r3, r3, #8
 800c160:	b29b      	uxth	r3, r3
 800c162:	3b01      	subs	r3, #1
 800c164:	2b06      	cmp	r3, #6
 800c166:	f200 8128 	bhi.w	800c3ba <USBD_GetDescriptor+0x276>
 800c16a:	a201      	add	r2, pc, #4	@ (adr r2, 800c170 <USBD_GetDescriptor+0x2c>)
 800c16c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c170:	0800c18d 	.word	0x0800c18d
 800c174:	0800c1a5 	.word	0x0800c1a5
 800c178:	0800c1e5 	.word	0x0800c1e5
 800c17c:	0800c3bb 	.word	0x0800c3bb
 800c180:	0800c3bb 	.word	0x0800c3bb
 800c184:	0800c35b 	.word	0x0800c35b
 800c188:	0800c387 	.word	0x0800c387
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	687a      	ldr	r2, [r7, #4]
 800c196:	7c12      	ldrb	r2, [r2, #16]
 800c198:	f107 0108 	add.w	r1, r7, #8
 800c19c:	4610      	mov	r0, r2
 800c19e:	4798      	blx	r3
 800c1a0:	60f8      	str	r0, [r7, #12]
      break;
 800c1a2:	e112      	b.n	800c3ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c1a4:	687b      	ldr	r3, [r7, #4]
 800c1a6:	7c1b      	ldrb	r3, [r3, #16]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d10d      	bne.n	800c1c8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b4:	f107 0208 	add.w	r2, r7, #8
 800c1b8:	4610      	mov	r0, r2
 800c1ba:	4798      	blx	r3
 800c1bc:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	3301      	adds	r3, #1
 800c1c2:	2202      	movs	r2, #2
 800c1c4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800c1c6:	e100      	b.n	800c3ca <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c1ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c1d0:	f107 0208 	add.w	r2, r7, #8
 800c1d4:	4610      	mov	r0, r2
 800c1d6:	4798      	blx	r3
 800c1d8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800c1da:	68fb      	ldr	r3, [r7, #12]
 800c1dc:	3301      	adds	r3, #1
 800c1de:	2202      	movs	r2, #2
 800c1e0:	701a      	strb	r2, [r3, #0]
      break;
 800c1e2:	e0f2      	b.n	800c3ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800c1e4:	683b      	ldr	r3, [r7, #0]
 800c1e6:	885b      	ldrh	r3, [r3, #2]
 800c1e8:	b2db      	uxtb	r3, r3
 800c1ea:	2b05      	cmp	r3, #5
 800c1ec:	f200 80ac 	bhi.w	800c348 <USBD_GetDescriptor+0x204>
 800c1f0:	a201      	add	r2, pc, #4	@ (adr r2, 800c1f8 <USBD_GetDescriptor+0xb4>)
 800c1f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1f6:	bf00      	nop
 800c1f8:	0800c211 	.word	0x0800c211
 800c1fc:	0800c245 	.word	0x0800c245
 800c200:	0800c279 	.word	0x0800c279
 800c204:	0800c2ad 	.word	0x0800c2ad
 800c208:	0800c2e1 	.word	0x0800c2e1
 800c20c:	0800c315 	.word	0x0800c315
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c216:	685b      	ldr	r3, [r3, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d00b      	beq.n	800c234 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c222:	685b      	ldr	r3, [r3, #4]
 800c224:	687a      	ldr	r2, [r7, #4]
 800c226:	7c12      	ldrb	r2, [r2, #16]
 800c228:	f107 0108 	add.w	r1, r7, #8
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c232:	e091      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c234:	6839      	ldr	r1, [r7, #0]
 800c236:	6878      	ldr	r0, [r7, #4]
 800c238:	f000 facb 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c23c:	7afb      	ldrb	r3, [r7, #11]
 800c23e:	3301      	adds	r3, #1
 800c240:	72fb      	strb	r3, [r7, #11]
          break;
 800c242:	e089      	b.n	800c358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c24a:	689b      	ldr	r3, [r3, #8]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d00b      	beq.n	800c268 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	687a      	ldr	r2, [r7, #4]
 800c25a:	7c12      	ldrb	r2, [r2, #16]
 800c25c:	f107 0108 	add.w	r1, r7, #8
 800c260:	4610      	mov	r0, r2
 800c262:	4798      	blx	r3
 800c264:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c266:	e077      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c268:	6839      	ldr	r1, [r7, #0]
 800c26a:	6878      	ldr	r0, [r7, #4]
 800c26c:	f000 fab1 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c270:	7afb      	ldrb	r3, [r7, #11]
 800c272:	3301      	adds	r3, #1
 800c274:	72fb      	strb	r3, [r7, #11]
          break;
 800c276:	e06f      	b.n	800c358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c27e:	68db      	ldr	r3, [r3, #12]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d00b      	beq.n	800c29c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c28a:	68db      	ldr	r3, [r3, #12]
 800c28c:	687a      	ldr	r2, [r7, #4]
 800c28e:	7c12      	ldrb	r2, [r2, #16]
 800c290:	f107 0108 	add.w	r1, r7, #8
 800c294:	4610      	mov	r0, r2
 800c296:	4798      	blx	r3
 800c298:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c29a:	e05d      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c29c:	6839      	ldr	r1, [r7, #0]
 800c29e:	6878      	ldr	r0, [r7, #4]
 800c2a0:	f000 fa97 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c2a4:	7afb      	ldrb	r3, [r7, #11]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	72fb      	strb	r3, [r7, #11]
          break;
 800c2aa:	e055      	b.n	800c358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2b2:	691b      	ldr	r3, [r3, #16]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d00b      	beq.n	800c2d0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2be:	691b      	ldr	r3, [r3, #16]
 800c2c0:	687a      	ldr	r2, [r7, #4]
 800c2c2:	7c12      	ldrb	r2, [r2, #16]
 800c2c4:	f107 0108 	add.w	r1, r7, #8
 800c2c8:	4610      	mov	r0, r2
 800c2ca:	4798      	blx	r3
 800c2cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c2ce:	e043      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c2d0:	6839      	ldr	r1, [r7, #0]
 800c2d2:	6878      	ldr	r0, [r7, #4]
 800c2d4:	f000 fa7d 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c2d8:	7afb      	ldrb	r3, [r7, #11]
 800c2da:	3301      	adds	r3, #1
 800c2dc:	72fb      	strb	r3, [r7, #11]
          break;
 800c2de:	e03b      	b.n	800c358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2e6:	695b      	ldr	r3, [r3, #20]
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d00b      	beq.n	800c304 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c2f2:	695b      	ldr	r3, [r3, #20]
 800c2f4:	687a      	ldr	r2, [r7, #4]
 800c2f6:	7c12      	ldrb	r2, [r2, #16]
 800c2f8:	f107 0108 	add.w	r1, r7, #8
 800c2fc:	4610      	mov	r0, r2
 800c2fe:	4798      	blx	r3
 800c300:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c302:	e029      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c304:	6839      	ldr	r1, [r7, #0]
 800c306:	6878      	ldr	r0, [r7, #4]
 800c308:	f000 fa63 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c30c:	7afb      	ldrb	r3, [r7, #11]
 800c30e:	3301      	adds	r3, #1
 800c310:	72fb      	strb	r3, [r7, #11]
          break;
 800c312:	e021      	b.n	800c358 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c31a:	699b      	ldr	r3, [r3, #24]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d00b      	beq.n	800c338 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800c326:	699b      	ldr	r3, [r3, #24]
 800c328:	687a      	ldr	r2, [r7, #4]
 800c32a:	7c12      	ldrb	r2, [r2, #16]
 800c32c:	f107 0108 	add.w	r1, r7, #8
 800c330:	4610      	mov	r0, r2
 800c332:	4798      	blx	r3
 800c334:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800c336:	e00f      	b.n	800c358 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800c338:	6839      	ldr	r1, [r7, #0]
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f000 fa49 	bl	800c7d2 <USBD_CtlError>
            err++;
 800c340:	7afb      	ldrb	r3, [r7, #11]
 800c342:	3301      	adds	r3, #1
 800c344:	72fb      	strb	r3, [r7, #11]
          break;
 800c346:	e007      	b.n	800c358 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800c348:	6839      	ldr	r1, [r7, #0]
 800c34a:	6878      	ldr	r0, [r7, #4]
 800c34c:	f000 fa41 	bl	800c7d2 <USBD_CtlError>
          err++;
 800c350:	7afb      	ldrb	r3, [r7, #11]
 800c352:	3301      	adds	r3, #1
 800c354:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800c356:	bf00      	nop
      }
      break;
 800c358:	e037      	b.n	800c3ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	7c1b      	ldrb	r3, [r3, #16]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d109      	bne.n	800c376 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c368:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c36a:	f107 0208 	add.w	r2, r7, #8
 800c36e:	4610      	mov	r0, r2
 800c370:	4798      	blx	r3
 800c372:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c374:	e029      	b.n	800c3ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c376:	6839      	ldr	r1, [r7, #0]
 800c378:	6878      	ldr	r0, [r7, #4]
 800c37a:	f000 fa2a 	bl	800c7d2 <USBD_CtlError>
        err++;
 800c37e:	7afb      	ldrb	r3, [r7, #11]
 800c380:	3301      	adds	r3, #1
 800c382:	72fb      	strb	r3, [r7, #11]
      break;
 800c384:	e021      	b.n	800c3ca <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	7c1b      	ldrb	r3, [r3, #16]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d10d      	bne.n	800c3aa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800c394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c396:	f107 0208 	add.w	r2, r7, #8
 800c39a:	4610      	mov	r0, r2
 800c39c:	4798      	blx	r3
 800c39e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800c3a0:	68fb      	ldr	r3, [r7, #12]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	2207      	movs	r2, #7
 800c3a6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800c3a8:	e00f      	b.n	800c3ca <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800c3aa:	6839      	ldr	r1, [r7, #0]
 800c3ac:	6878      	ldr	r0, [r7, #4]
 800c3ae:	f000 fa10 	bl	800c7d2 <USBD_CtlError>
        err++;
 800c3b2:	7afb      	ldrb	r3, [r7, #11]
 800c3b4:	3301      	adds	r3, #1
 800c3b6:	72fb      	strb	r3, [r7, #11]
      break;
 800c3b8:	e007      	b.n	800c3ca <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800c3ba:	6839      	ldr	r1, [r7, #0]
 800c3bc:	6878      	ldr	r0, [r7, #4]
 800c3be:	f000 fa08 	bl	800c7d2 <USBD_CtlError>
      err++;
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	72fb      	strb	r3, [r7, #11]
      break;
 800c3c8:	bf00      	nop
  }

  if (err != 0U)
 800c3ca:	7afb      	ldrb	r3, [r7, #11]
 800c3cc:	2b00      	cmp	r3, #0
 800c3ce:	d11e      	bne.n	800c40e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800c3d0:	683b      	ldr	r3, [r7, #0]
 800c3d2:	88db      	ldrh	r3, [r3, #6]
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d016      	beq.n	800c406 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800c3d8:	893b      	ldrh	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00e      	beq.n	800c3fc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800c3de:	683b      	ldr	r3, [r7, #0]
 800c3e0:	88da      	ldrh	r2, [r3, #6]
 800c3e2:	893b      	ldrh	r3, [r7, #8]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	bf28      	it	cs
 800c3e8:	4613      	movcs	r3, r2
 800c3ea:	b29b      	uxth	r3, r3
 800c3ec:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800c3ee:	893b      	ldrh	r3, [r7, #8]
 800c3f0:	461a      	mov	r2, r3
 800c3f2:	68f9      	ldr	r1, [r7, #12]
 800c3f4:	6878      	ldr	r0, [r7, #4]
 800c3f6:	f000 fa69 	bl	800c8cc <USBD_CtlSendData>
 800c3fa:	e009      	b.n	800c410 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800c3fc:	6839      	ldr	r1, [r7, #0]
 800c3fe:	6878      	ldr	r0, [r7, #4]
 800c400:	f000 f9e7 	bl	800c7d2 <USBD_CtlError>
 800c404:	e004      	b.n	800c410 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800c406:	6878      	ldr	r0, [r7, #4]
 800c408:	f000 faba 	bl	800c980 <USBD_CtlSendStatus>
 800c40c:	e000      	b.n	800c410 <USBD_GetDescriptor+0x2cc>
    return;
 800c40e:	bf00      	nop
  }
}
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}
 800c416:	bf00      	nop

0800c418 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c418:	b580      	push	{r7, lr}
 800c41a:	b084      	sub	sp, #16
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	6078      	str	r0, [r7, #4]
 800c420:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800c422:	683b      	ldr	r3, [r7, #0]
 800c424:	889b      	ldrh	r3, [r3, #4]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d131      	bne.n	800c48e <USBD_SetAddress+0x76>
 800c42a:	683b      	ldr	r3, [r7, #0]
 800c42c:	88db      	ldrh	r3, [r3, #6]
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d12d      	bne.n	800c48e <USBD_SetAddress+0x76>
 800c432:	683b      	ldr	r3, [r7, #0]
 800c434:	885b      	ldrh	r3, [r3, #2]
 800c436:	2b7f      	cmp	r3, #127	@ 0x7f
 800c438:	d829      	bhi.n	800c48e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800c43a:	683b      	ldr	r3, [r7, #0]
 800c43c:	885b      	ldrh	r3, [r3, #2]
 800c43e:	b2db      	uxtb	r3, r3
 800c440:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800c444:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c44c:	b2db      	uxtb	r3, r3
 800c44e:	2b03      	cmp	r3, #3
 800c450:	d104      	bne.n	800c45c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800c452:	6839      	ldr	r1, [r7, #0]
 800c454:	6878      	ldr	r0, [r7, #4]
 800c456:	f000 f9bc 	bl	800c7d2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c45a:	e01d      	b.n	800c498 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	7bfa      	ldrb	r2, [r7, #15]
 800c460:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800c464:	7bfb      	ldrb	r3, [r7, #15]
 800c466:	4619      	mov	r1, r3
 800c468:	6878      	ldr	r0, [r7, #4]
 800c46a:	f003 f889 	bl	800f580 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800c46e:	6878      	ldr	r0, [r7, #4]
 800c470:	f000 fa86 	bl	800c980 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800c474:	7bfb      	ldrb	r3, [r7, #15]
 800c476:	2b00      	cmp	r3, #0
 800c478:	d004      	beq.n	800c484 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2202      	movs	r2, #2
 800c47e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c482:	e009      	b.n	800c498 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	2201      	movs	r2, #1
 800c488:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c48c:	e004      	b.n	800c498 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800c48e:	6839      	ldr	r1, [r7, #0]
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 f99e 	bl	800c7d2 <USBD_CtlError>
  }
}
 800c496:	bf00      	nop
 800c498:	bf00      	nop
 800c49a:	3710      	adds	r7, #16
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b084      	sub	sp, #16
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800c4ae:	683b      	ldr	r3, [r7, #0]
 800c4b0:	885b      	ldrh	r3, [r3, #2]
 800c4b2:	b2da      	uxtb	r2, r3
 800c4b4:	4b4e      	ldr	r3, [pc, #312]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c4b6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800c4b8:	4b4d      	ldr	r3, [pc, #308]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c4ba:	781b      	ldrb	r3, [r3, #0]
 800c4bc:	2b01      	cmp	r3, #1
 800c4be:	d905      	bls.n	800c4cc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800c4c0:	6839      	ldr	r1, [r7, #0]
 800c4c2:	6878      	ldr	r0, [r7, #4]
 800c4c4:	f000 f985 	bl	800c7d2 <USBD_CtlError>
    return USBD_FAIL;
 800c4c8:	2303      	movs	r3, #3
 800c4ca:	e08c      	b.n	800c5e6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	2b02      	cmp	r3, #2
 800c4d6:	d002      	beq.n	800c4de <USBD_SetConfig+0x3e>
 800c4d8:	2b03      	cmp	r3, #3
 800c4da:	d029      	beq.n	800c530 <USBD_SetConfig+0x90>
 800c4dc:	e075      	b.n	800c5ca <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c4de:	4b44      	ldr	r3, [pc, #272]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c4e0:	781b      	ldrb	r3, [r3, #0]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d020      	beq.n	800c528 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c4e6:	4b42      	ldr	r3, [pc, #264]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c4e8:	781b      	ldrb	r3, [r3, #0]
 800c4ea:	461a      	mov	r2, r3
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c4f0:	4b3f      	ldr	r3, [pc, #252]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c4f2:	781b      	ldrb	r3, [r3, #0]
 800c4f4:	4619      	mov	r1, r3
 800c4f6:	6878      	ldr	r0, [r7, #4]
 800c4f8:	f7fe ffe3 	bl	800b4c2 <USBD_SetClassConfig>
 800c4fc:	4603      	mov	r3, r0
 800c4fe:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c500:	7bfb      	ldrb	r3, [r7, #15]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d008      	beq.n	800c518 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c506:	6839      	ldr	r1, [r7, #0]
 800c508:	6878      	ldr	r0, [r7, #4]
 800c50a:	f000 f962 	bl	800c7d2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2202      	movs	r2, #2
 800c512:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c516:	e065      	b.n	800c5e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c518:	6878      	ldr	r0, [r7, #4]
 800c51a:	f000 fa31 	bl	800c980 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	2203      	movs	r2, #3
 800c522:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c526:	e05d      	b.n	800c5e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c528:	6878      	ldr	r0, [r7, #4]
 800c52a:	f000 fa29 	bl	800c980 <USBD_CtlSendStatus>
      break;
 800c52e:	e059      	b.n	800c5e4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c530:	4b2f      	ldr	r3, [pc, #188]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c532:	781b      	ldrb	r3, [r3, #0]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d112      	bne.n	800c55e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	2202      	movs	r2, #2
 800c53c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c540:	4b2b      	ldr	r3, [pc, #172]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c542:	781b      	ldrb	r3, [r3, #0]
 800c544:	461a      	mov	r2, r3
 800c546:	687b      	ldr	r3, [r7, #4]
 800c548:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c54a:	4b29      	ldr	r3, [pc, #164]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c54c:	781b      	ldrb	r3, [r3, #0]
 800c54e:	4619      	mov	r1, r3
 800c550:	6878      	ldr	r0, [r7, #4]
 800c552:	f7fe ffd2 	bl	800b4fa <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c556:	6878      	ldr	r0, [r7, #4]
 800c558:	f000 fa12 	bl	800c980 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c55c:	e042      	b.n	800c5e4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c55e:	4b24      	ldr	r3, [pc, #144]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c560:	781b      	ldrb	r3, [r3, #0]
 800c562:	461a      	mov	r2, r3
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	685b      	ldr	r3, [r3, #4]
 800c568:	429a      	cmp	r2, r3
 800c56a:	d02a      	beq.n	800c5c2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	685b      	ldr	r3, [r3, #4]
 800c570:	b2db      	uxtb	r3, r3
 800c572:	4619      	mov	r1, r3
 800c574:	6878      	ldr	r0, [r7, #4]
 800c576:	f7fe ffc0 	bl	800b4fa <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c57a:	4b1d      	ldr	r3, [pc, #116]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c57c:	781b      	ldrb	r3, [r3, #0]
 800c57e:	461a      	mov	r2, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c584:	4b1a      	ldr	r3, [pc, #104]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c586:	781b      	ldrb	r3, [r3, #0]
 800c588:	4619      	mov	r1, r3
 800c58a:	6878      	ldr	r0, [r7, #4]
 800c58c:	f7fe ff99 	bl	800b4c2 <USBD_SetClassConfig>
 800c590:	4603      	mov	r3, r0
 800c592:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c594:	7bfb      	ldrb	r3, [r7, #15]
 800c596:	2b00      	cmp	r3, #0
 800c598:	d00f      	beq.n	800c5ba <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c59a:	6839      	ldr	r1, [r7, #0]
 800c59c:	6878      	ldr	r0, [r7, #4]
 800c59e:	f000 f918 	bl	800c7d2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	685b      	ldr	r3, [r3, #4]
 800c5a6:	b2db      	uxtb	r3, r3
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	6878      	ldr	r0, [r7, #4]
 800c5ac:	f7fe ffa5 	bl	800b4fa <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	2202      	movs	r2, #2
 800c5b4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c5b8:	e014      	b.n	800c5e4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c5ba:	6878      	ldr	r0, [r7, #4]
 800c5bc:	f000 f9e0 	bl	800c980 <USBD_CtlSendStatus>
      break;
 800c5c0:	e010      	b.n	800c5e4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c5c2:	6878      	ldr	r0, [r7, #4]
 800c5c4:	f000 f9dc 	bl	800c980 <USBD_CtlSendStatus>
      break;
 800c5c8:	e00c      	b.n	800c5e4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c5ca:	6839      	ldr	r1, [r7, #0]
 800c5cc:	6878      	ldr	r0, [r7, #4]
 800c5ce:	f000 f900 	bl	800c7d2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c5d2:	4b07      	ldr	r3, [pc, #28]	@ (800c5f0 <USBD_SetConfig+0x150>)
 800c5d4:	781b      	ldrb	r3, [r3, #0]
 800c5d6:	4619      	mov	r1, r3
 800c5d8:	6878      	ldr	r0, [r7, #4]
 800c5da:	f7fe ff8e 	bl	800b4fa <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	73fb      	strb	r3, [r7, #15]
      break;
 800c5e2:	bf00      	nop
  }

  return ret;
 800c5e4:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3710      	adds	r7, #16
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	20000418 	.word	0x20000418
=======
 800c606:	4618      	mov	r0, r3
 800c608:	3710      	adds	r7, #16
 800c60a:	46bd      	mov	sp, r7
 800c60c:	bd80      	pop	{r7, pc}
 800c60e:	bf00      	nop
 800c610:	2000041c 	.word	0x2000041c
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800c5f4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b082      	sub	sp, #8
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	6078      	str	r0, [r7, #4]
 800c5fc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	88db      	ldrh	r3, [r3, #6]
 800c602:	2b01      	cmp	r3, #1
 800c604:	d004      	beq.n	800c610 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c606:	6839      	ldr	r1, [r7, #0]
 800c608:	6878      	ldr	r0, [r7, #4]
 800c60a:	f000 f8e2 	bl	800c7d2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c60e:	e023      	b.n	800c658 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c616:	b2db      	uxtb	r3, r3
 800c618:	2b02      	cmp	r3, #2
 800c61a:	dc02      	bgt.n	800c622 <USBD_GetConfig+0x2e>
 800c61c:	2b00      	cmp	r3, #0
 800c61e:	dc03      	bgt.n	800c628 <USBD_GetConfig+0x34>
 800c620:	e015      	b.n	800c64e <USBD_GetConfig+0x5a>
 800c622:	2b03      	cmp	r3, #3
 800c624:	d00b      	beq.n	800c63e <USBD_GetConfig+0x4a>
 800c626:	e012      	b.n	800c64e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	2200      	movs	r2, #0
 800c62c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	3308      	adds	r3, #8
 800c632:	2201      	movs	r2, #1
 800c634:	4619      	mov	r1, r3
 800c636:	6878      	ldr	r0, [r7, #4]
 800c638:	f000 f948 	bl	800c8cc <USBD_CtlSendData>
        break;
 800c63c:	e00c      	b.n	800c658 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c63e:	687b      	ldr	r3, [r7, #4]
 800c640:	3304      	adds	r3, #4
 800c642:	2201      	movs	r2, #1
 800c644:	4619      	mov	r1, r3
 800c646:	6878      	ldr	r0, [r7, #4]
 800c648:	f000 f940 	bl	800c8cc <USBD_CtlSendData>
        break;
 800c64c:	e004      	b.n	800c658 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c64e:	6839      	ldr	r1, [r7, #0]
 800c650:	6878      	ldr	r0, [r7, #4]
 800c652:	f000 f8be 	bl	800c7d2 <USBD_CtlError>
        break;
 800c656:	bf00      	nop
}
 800c658:	bf00      	nop
 800c65a:	3708      	adds	r7, #8
 800c65c:	46bd      	mov	sp, r7
 800c65e:	bd80      	pop	{r7, pc}

0800c660 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c660:	b580      	push	{r7, lr}
 800c662:	b082      	sub	sp, #8
 800c664:	af00      	add	r7, sp, #0
 800c666:	6078      	str	r0, [r7, #4]
 800c668:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c670:	b2db      	uxtb	r3, r3
 800c672:	3b01      	subs	r3, #1
 800c674:	2b02      	cmp	r3, #2
 800c676:	d81e      	bhi.n	800c6b6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c678:	683b      	ldr	r3, [r7, #0]
 800c67a:	88db      	ldrh	r3, [r3, #6]
 800c67c:	2b02      	cmp	r3, #2
 800c67e:	d004      	beq.n	800c68a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c680:	6839      	ldr	r1, [r7, #0]
 800c682:	6878      	ldr	r0, [r7, #4]
 800c684:	f000 f8a5 	bl	800c7d2 <USBD_CtlError>
        break;
 800c688:	e01a      	b.n	800c6c0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	2201      	movs	r2, #1
 800c68e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c696:	2b00      	cmp	r3, #0
 800c698:	d005      	beq.n	800c6a6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	68db      	ldr	r3, [r3, #12]
 800c69e:	f043 0202 	orr.w	r2, r3, #2
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	330c      	adds	r3, #12
 800c6aa:	2202      	movs	r2, #2
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	6878      	ldr	r0, [r7, #4]
 800c6b0:	f000 f90c 	bl	800c8cc <USBD_CtlSendData>
      break;
 800c6b4:	e004      	b.n	800c6c0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c6b6:	6839      	ldr	r1, [r7, #0]
 800c6b8:	6878      	ldr	r0, [r7, #4]
 800c6ba:	f000 f88a 	bl	800c7d2 <USBD_CtlError>
      break;
 800c6be:	bf00      	nop
  }
}
 800c6c0:	bf00      	nop
 800c6c2:	3708      	adds	r7, #8
 800c6c4:	46bd      	mov	sp, r7
 800c6c6:	bd80      	pop	{r7, pc}

0800c6c8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c6c8:	b580      	push	{r7, lr}
 800c6ca:	b082      	sub	sp, #8
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
 800c6d0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c6d2:	683b      	ldr	r3, [r7, #0]
 800c6d4:	885b      	ldrh	r3, [r3, #2]
 800c6d6:	2b01      	cmp	r3, #1
 800c6d8:	d107      	bne.n	800c6ea <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2201      	movs	r2, #1
 800c6de:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f94c 	bl	800c980 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c6e8:	e013      	b.n	800c712 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c6ea:	683b      	ldr	r3, [r7, #0]
 800c6ec:	885b      	ldrh	r3, [r3, #2]
 800c6ee:	2b02      	cmp	r3, #2
 800c6f0:	d10b      	bne.n	800c70a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c6f2:	683b      	ldr	r3, [r7, #0]
 800c6f4:	889b      	ldrh	r3, [r3, #4]
 800c6f6:	0a1b      	lsrs	r3, r3, #8
 800c6f8:	b29b      	uxth	r3, r3
 800c6fa:	b2da      	uxtb	r2, r3
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c702:	6878      	ldr	r0, [r7, #4]
 800c704:	f000 f93c 	bl	800c980 <USBD_CtlSendStatus>
}
 800c708:	e003      	b.n	800c712 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c70a:	6839      	ldr	r1, [r7, #0]
 800c70c:	6878      	ldr	r0, [r7, #4]
 800c70e:	f000 f860 	bl	800c7d2 <USBD_CtlError>
}
 800c712:	bf00      	nop
 800c714:	3708      	adds	r7, #8
 800c716:	46bd      	mov	sp, r7
 800c718:	bd80      	pop	{r7, pc}

0800c71a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c71a:	b580      	push	{r7, lr}
 800c71c:	b082      	sub	sp, #8
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
 800c722:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c72a:	b2db      	uxtb	r3, r3
 800c72c:	3b01      	subs	r3, #1
 800c72e:	2b02      	cmp	r3, #2
 800c730:	d80b      	bhi.n	800c74a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c732:	683b      	ldr	r3, [r7, #0]
 800c734:	885b      	ldrh	r3, [r3, #2]
 800c736:	2b01      	cmp	r3, #1
 800c738:	d10c      	bne.n	800c754 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c742:	6878      	ldr	r0, [r7, #4]
 800c744:	f000 f91c 	bl	800c980 <USBD_CtlSendStatus>
      }
      break;
 800c748:	e004      	b.n	800c754 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c74a:	6839      	ldr	r1, [r7, #0]
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f000 f840 	bl	800c7d2 <USBD_CtlError>
      break;
 800c752:	e000      	b.n	800c756 <USBD_ClrFeature+0x3c>
      break;
 800c754:	bf00      	nop
  }
}
 800c756:	bf00      	nop
 800c758:	3708      	adds	r7, #8
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}

0800c75e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c75e:	b580      	push	{r7, lr}
 800c760:	b084      	sub	sp, #16
 800c762:	af00      	add	r7, sp, #0
 800c764:	6078      	str	r0, [r7, #4]
 800c766:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c768:	683b      	ldr	r3, [r7, #0]
 800c76a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c76c:	68fb      	ldr	r3, [r7, #12]
 800c76e:	781a      	ldrb	r2, [r3, #0]
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	3301      	adds	r3, #1
 800c778:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	781a      	ldrb	r2, [r3, #0]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c782:	68fb      	ldr	r3, [r7, #12]
 800c784:	3301      	adds	r3, #1
 800c786:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f7ff fa40 	bl	800bc0e <SWAPBYTE>
 800c78e:	4603      	mov	r3, r0
 800c790:	461a      	mov	r2, r3
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	3301      	adds	r3, #1
 800c79a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c79c:	68fb      	ldr	r3, [r7, #12]
 800c79e:	3301      	adds	r3, #1
 800c7a0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c7a2:	68f8      	ldr	r0, [r7, #12]
 800c7a4:	f7ff fa33 	bl	800bc0e <SWAPBYTE>
 800c7a8:	4603      	mov	r3, r0
 800c7aa:	461a      	mov	r2, r3
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c7b0:	68fb      	ldr	r3, [r7, #12]
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	3301      	adds	r3, #1
 800c7ba:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c7bc:	68f8      	ldr	r0, [r7, #12]
 800c7be:	f7ff fa26 	bl	800bc0e <SWAPBYTE>
 800c7c2:	4603      	mov	r3, r0
 800c7c4:	461a      	mov	r2, r3
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	80da      	strh	r2, [r3, #6]
}
 800c7ca:	bf00      	nop
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b082      	sub	sp, #8
 800c7d6:	af00      	add	r7, sp, #0
 800c7d8:	6078      	str	r0, [r7, #4]
 800c7da:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c7dc:	2180      	movs	r1, #128	@ 0x80
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f002 fe64 	bl	800f4ac <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c7e4:	2100      	movs	r1, #0
 800c7e6:	6878      	ldr	r0, [r7, #4]
 800c7e8:	f002 fe60 	bl	800f4ac <USBD_LL_StallEP>
}
 800c7ec:	bf00      	nop
 800c7ee:	3708      	adds	r7, #8
 800c7f0:	46bd      	mov	sp, r7
 800c7f2:	bd80      	pop	{r7, pc}

0800c7f4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c7f4:	b580      	push	{r7, lr}
 800c7f6:	b086      	sub	sp, #24
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	60f8      	str	r0, [r7, #12]
 800c7fc:	60b9      	str	r1, [r7, #8]
 800c7fe:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c800:	2300      	movs	r3, #0
 800c802:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d042      	beq.n	800c890 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c80e:	6938      	ldr	r0, [r7, #16]
 800c810:	f000 f842 	bl	800c898 <USBD_GetLen>
 800c814:	4603      	mov	r3, r0
 800c816:	3301      	adds	r3, #1
 800c818:	005b      	lsls	r3, r3, #1
 800c81a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c81e:	d808      	bhi.n	800c832 <USBD_GetString+0x3e>
 800c820:	6938      	ldr	r0, [r7, #16]
 800c822:	f000 f839 	bl	800c898 <USBD_GetLen>
 800c826:	4603      	mov	r3, r0
 800c828:	3301      	adds	r3, #1
 800c82a:	b29b      	uxth	r3, r3
 800c82c:	005b      	lsls	r3, r3, #1
 800c82e:	b29a      	uxth	r2, r3
 800c830:	e001      	b.n	800c836 <USBD_GetString+0x42>
 800c832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c83a:	7dfb      	ldrb	r3, [r7, #23]
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	4413      	add	r3, r2
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	7812      	ldrb	r2, [r2, #0]
 800c844:	701a      	strb	r2, [r3, #0]
  idx++;
 800c846:	7dfb      	ldrb	r3, [r7, #23]
 800c848:	3301      	adds	r3, #1
 800c84a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c84c:	7dfb      	ldrb	r3, [r7, #23]
 800c84e:	68ba      	ldr	r2, [r7, #8]
 800c850:	4413      	add	r3, r2
 800c852:	2203      	movs	r2, #3
 800c854:	701a      	strb	r2, [r3, #0]
  idx++;
 800c856:	7dfb      	ldrb	r3, [r7, #23]
 800c858:	3301      	adds	r3, #1
 800c85a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c85c:	e013      	b.n	800c886 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c85e:	7dfb      	ldrb	r3, [r7, #23]
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	4413      	add	r3, r2
 800c864:	693a      	ldr	r2, [r7, #16]
 800c866:	7812      	ldrb	r2, [r2, #0]
 800c868:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c86a:	693b      	ldr	r3, [r7, #16]
 800c86c:	3301      	adds	r3, #1
 800c86e:	613b      	str	r3, [r7, #16]
    idx++;
 800c870:	7dfb      	ldrb	r3, [r7, #23]
 800c872:	3301      	adds	r3, #1
 800c874:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c876:	7dfb      	ldrb	r3, [r7, #23]
 800c878:	68ba      	ldr	r2, [r7, #8]
 800c87a:	4413      	add	r3, r2
 800c87c:	2200      	movs	r2, #0
 800c87e:	701a      	strb	r2, [r3, #0]
    idx++;
 800c880:	7dfb      	ldrb	r3, [r7, #23]
 800c882:	3301      	adds	r3, #1
 800c884:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c886:	693b      	ldr	r3, [r7, #16]
 800c888:	781b      	ldrb	r3, [r3, #0]
 800c88a:	2b00      	cmp	r3, #0
 800c88c:	d1e7      	bne.n	800c85e <USBD_GetString+0x6a>
 800c88e:	e000      	b.n	800c892 <USBD_GetString+0x9e>
    return;
 800c890:	bf00      	nop
  }
}
 800c892:	3718      	adds	r7, #24
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}

0800c898 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c898:	b480      	push	{r7}
 800c89a:	b085      	sub	sp, #20
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c8a0:	2300      	movs	r3, #0
 800c8a2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c8a8:	e005      	b.n	800c8b6 <USBD_GetLen+0x1e>
  {
    len++;
 800c8aa:	7bfb      	ldrb	r3, [r7, #15]
 800c8ac:	3301      	adds	r3, #1
 800c8ae:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c8b0:	68bb      	ldr	r3, [r7, #8]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c8b6:	68bb      	ldr	r3, [r7, #8]
 800c8b8:	781b      	ldrb	r3, [r3, #0]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d1f5      	bne.n	800c8aa <USBD_GetLen+0x12>
  }

  return len;
 800c8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	3714      	adds	r7, #20
 800c8c4:	46bd      	mov	sp, r7
 800c8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8ca:	4770      	bx	lr

0800c8cc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b084      	sub	sp, #16
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	60f8      	str	r0, [r7, #12]
 800c8d4:	60b9      	str	r1, [r7, #8]
 800c8d6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2202      	movs	r2, #2
 800c8dc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	687a      	ldr	r2, [r7, #4]
 800c8e4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c8e6:	68fb      	ldr	r3, [r7, #12]
 800c8e8:	687a      	ldr	r2, [r7, #4]
 800c8ea:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c8ec:	687b      	ldr	r3, [r7, #4]
 800c8ee:	68ba      	ldr	r2, [r7, #8]
 800c8f0:	2100      	movs	r1, #0
 800c8f2:	68f8      	ldr	r0, [r7, #12]
 800c8f4:	f002 fe63 	bl	800f5be <USBD_LL_Transmit>

  return USBD_OK;
 800c8f8:	2300      	movs	r3, #0
}
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	3710      	adds	r7, #16
 800c8fe:	46bd      	mov	sp, r7
 800c900:	bd80      	pop	{r7, pc}

0800c902 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c902:	b580      	push	{r7, lr}
 800c904:	b084      	sub	sp, #16
 800c906:	af00      	add	r7, sp, #0
 800c908:	60f8      	str	r0, [r7, #12]
 800c90a:	60b9      	str	r1, [r7, #8]
 800c90c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	68ba      	ldr	r2, [r7, #8]
 800c912:	2100      	movs	r1, #0
 800c914:	68f8      	ldr	r0, [r7, #12]
 800c916:	f002 fe52 	bl	800f5be <USBD_LL_Transmit>

  return USBD_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3710      	adds	r7, #16
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	2203      	movs	r2, #3
 800c934:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c938:	68fb      	ldr	r3, [r7, #12]
 800c93a:	687a      	ldr	r2, [r7, #4]
 800c93c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	687a      	ldr	r2, [r7, #4]
 800c944:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	68ba      	ldr	r2, [r7, #8]
 800c94c:	2100      	movs	r1, #0
 800c94e:	68f8      	ldr	r0, [r7, #12]
 800c950:	f002 fe56 	bl	800f600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c954:	2300      	movs	r3, #0
}
 800c956:	4618      	mov	r0, r3
 800c958:	3710      	adds	r7, #16
 800c95a:	46bd      	mov	sp, r7
 800c95c:	bd80      	pop	{r7, pc}

0800c95e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c95e:	b580      	push	{r7, lr}
 800c960:	b084      	sub	sp, #16
 800c962:	af00      	add	r7, sp, #0
 800c964:	60f8      	str	r0, [r7, #12]
 800c966:	60b9      	str	r1, [r7, #8]
 800c968:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	68ba      	ldr	r2, [r7, #8]
 800c96e:	2100      	movs	r1, #0
 800c970:	68f8      	ldr	r0, [r7, #12]
 800c972:	f002 fe45 	bl	800f600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c976:	2300      	movs	r3, #0
}
 800c978:	4618      	mov	r0, r3
 800c97a:	3710      	adds	r7, #16
 800c97c:	46bd      	mov	sp, r7
 800c97e:	bd80      	pop	{r7, pc}

0800c980 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
 800c986:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2204      	movs	r2, #4
 800c98c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c990:	2300      	movs	r3, #0
 800c992:	2200      	movs	r2, #0
 800c994:	2100      	movs	r1, #0
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f002 fe11 	bl	800f5be <USBD_LL_Transmit>

  return USBD_OK;
 800c99c:	2300      	movs	r3, #0
}
 800c99e:	4618      	mov	r0, r3
 800c9a0:	3708      	adds	r7, #8
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	bd80      	pop	{r7, pc}

0800c9a6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c9a6:	b580      	push	{r7, lr}
 800c9a8:	b082      	sub	sp, #8
 800c9aa:	af00      	add	r7, sp, #0
 800c9ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2205      	movs	r2, #5
 800c9b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	2200      	movs	r2, #0
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f002 fe1f 	bl	800f600 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c9c2:	2300      	movs	r3, #0
}
 800c9c4:	4618      	mov	r0, r3
 800c9c6:	3708      	adds	r7, #8
 800c9c8:	46bd      	mov	sp, r7
 800c9ca:	bd80      	pop	{r7, pc}

0800c9cc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	4603      	mov	r3, r0
 800c9d4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c9d6:	79fb      	ldrb	r3, [r7, #7]
 800c9d8:	4a08      	ldr	r2, [pc, #32]	@ (800c9fc <disk_status+0x30>)
 800c9da:	009b      	lsls	r3, r3, #2
 800c9dc:	4413      	add	r3, r2
 800c9de:	685b      	ldr	r3, [r3, #4]
 800c9e0:	685b      	ldr	r3, [r3, #4]
 800c9e2:	79fa      	ldrb	r2, [r7, #7]
 800c9e4:	4905      	ldr	r1, [pc, #20]	@ (800c9fc <disk_status+0x30>)
 800c9e6:	440a      	add	r2, r1
 800c9e8:	7a12      	ldrb	r2, [r2, #8]
 800c9ea:	4610      	mov	r0, r2
 800c9ec:	4798      	blx	r3
 800c9ee:	4603      	mov	r3, r0
 800c9f0:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c9f2:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 800c9f4:	4618      	mov	r0, r3
 800c9f6:	3710      	adds	r7, #16
 800c9f8:	46bd      	mov	sp, r7
 800c9fa:	bd80      	pop	{r7, pc}
 800c9fc:	20000444 	.word	0x20000444
=======
 800ca14:	4618      	mov	r0, r3
 800ca16:	3710      	adds	r7, #16
 800ca18:	46bd      	mov	sp, r7
 800ca1a:	bd80      	pop	{r7, pc}
 800ca1c:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ca00 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b084      	sub	sp, #16
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	4603      	mov	r3, r0
 800ca08:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800ca0a:	2300      	movs	r3, #0
 800ca0c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800ca0e:	79fb      	ldrb	r3, [r7, #7]
 800ca10:	4a0e      	ldr	r2, [pc, #56]	@ (800ca4c <disk_initialize+0x4c>)
 800ca12:	5cd3      	ldrb	r3, [r2, r3]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d114      	bne.n	800ca42 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800ca18:	79fb      	ldrb	r3, [r7, #7]
 800ca1a:	4a0c      	ldr	r2, [pc, #48]	@ (800ca4c <disk_initialize+0x4c>)
 800ca1c:	009b      	lsls	r3, r3, #2
 800ca1e:	4413      	add	r3, r2
 800ca20:	685b      	ldr	r3, [r3, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	79fa      	ldrb	r2, [r7, #7]
 800ca26:	4909      	ldr	r1, [pc, #36]	@ (800ca4c <disk_initialize+0x4c>)
 800ca28:	440a      	add	r2, r1
 800ca2a:	7a12      	ldrb	r2, [r2, #8]
 800ca2c:	4610      	mov	r0, r2
 800ca2e:	4798      	blx	r3
 800ca30:	4603      	mov	r3, r0
 800ca32:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800ca34:	7bfb      	ldrb	r3, [r7, #15]
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	d103      	bne.n	800ca42 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800ca3a:	79fb      	ldrb	r3, [r7, #7]
 800ca3c:	4a03      	ldr	r2, [pc, #12]	@ (800ca4c <disk_initialize+0x4c>)
 800ca3e:	2101      	movs	r1, #1
 800ca40:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800ca42:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 800ca44:	4618      	mov	r0, r3
 800ca46:	3710      	adds	r7, #16
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	20000444 	.word	0x20000444
=======
 800ca64:	4618      	mov	r0, r3
 800ca66:	3710      	adds	r7, #16
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	bd80      	pop	{r7, pc}
 800ca6c:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ca50 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ca50:	b590      	push	{r4, r7, lr}
 800ca52:	b087      	sub	sp, #28
 800ca54:	af00      	add	r7, sp, #0
 800ca56:	60b9      	str	r1, [r7, #8]
 800ca58:	607a      	str	r2, [r7, #4]
 800ca5a:	603b      	str	r3, [r7, #0]
 800ca5c:	4603      	mov	r3, r0
 800ca5e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ca60:	7bfb      	ldrb	r3, [r7, #15]
 800ca62:	4a0a      	ldr	r2, [pc, #40]	@ (800ca8c <disk_read+0x3c>)
 800ca64:	009b      	lsls	r3, r3, #2
 800ca66:	4413      	add	r3, r2
 800ca68:	685b      	ldr	r3, [r3, #4]
 800ca6a:	689c      	ldr	r4, [r3, #8]
 800ca6c:	7bfb      	ldrb	r3, [r7, #15]
 800ca6e:	4a07      	ldr	r2, [pc, #28]	@ (800ca8c <disk_read+0x3c>)
 800ca70:	4413      	add	r3, r2
 800ca72:	7a18      	ldrb	r0, [r3, #8]
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	687a      	ldr	r2, [r7, #4]
 800ca78:	68b9      	ldr	r1, [r7, #8]
 800ca7a:	47a0      	blx	r4
 800ca7c:	4603      	mov	r3, r0
 800ca7e:	75fb      	strb	r3, [r7, #23]
  return res;
 800ca80:	7dfb      	ldrb	r3, [r7, #23]
}
<<<<<<< HEAD
 800ca82:	4618      	mov	r0, r3
 800ca84:	371c      	adds	r7, #28
 800ca86:	46bd      	mov	sp, r7
 800ca88:	bd90      	pop	{r4, r7, pc}
 800ca8a:	bf00      	nop
 800ca8c:	20000444 	.word	0x20000444
=======
 800caa2:	4618      	mov	r0, r3
 800caa4:	371c      	adds	r7, #28
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd90      	pop	{r4, r7, pc}
 800caaa:	bf00      	nop
 800caac:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ca90 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ca90:	b590      	push	{r4, r7, lr}
 800ca92:	b087      	sub	sp, #28
 800ca94:	af00      	add	r7, sp, #0
 800ca96:	60b9      	str	r1, [r7, #8]
 800ca98:	607a      	str	r2, [r7, #4]
 800ca9a:	603b      	str	r3, [r7, #0]
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800caa0:	7bfb      	ldrb	r3, [r7, #15]
 800caa2:	4a0a      	ldr	r2, [pc, #40]	@ (800cacc <disk_write+0x3c>)
 800caa4:	009b      	lsls	r3, r3, #2
 800caa6:	4413      	add	r3, r2
 800caa8:	685b      	ldr	r3, [r3, #4]
 800caaa:	68dc      	ldr	r4, [r3, #12]
 800caac:	7bfb      	ldrb	r3, [r7, #15]
 800caae:	4a07      	ldr	r2, [pc, #28]	@ (800cacc <disk_write+0x3c>)
 800cab0:	4413      	add	r3, r2
 800cab2:	7a18      	ldrb	r0, [r3, #8]
 800cab4:	683b      	ldr	r3, [r7, #0]
 800cab6:	687a      	ldr	r2, [r7, #4]
 800cab8:	68b9      	ldr	r1, [r7, #8]
 800caba:	47a0      	blx	r4
 800cabc:	4603      	mov	r3, r0
 800cabe:	75fb      	strb	r3, [r7, #23]
  return res;
 800cac0:	7dfb      	ldrb	r3, [r7, #23]
}
<<<<<<< HEAD
 800cac2:	4618      	mov	r0, r3
 800cac4:	371c      	adds	r7, #28
 800cac6:	46bd      	mov	sp, r7
 800cac8:	bd90      	pop	{r4, r7, pc}
 800caca:	bf00      	nop
 800cacc:	20000444 	.word	0x20000444
=======
 800cae2:	4618      	mov	r0, r3
 800cae4:	371c      	adds	r7, #28
 800cae6:	46bd      	mov	sp, r7
 800cae8:	bd90      	pop	{r4, r7, pc}
 800caea:	bf00      	nop
 800caec:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cad0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800cad0:	b580      	push	{r7, lr}
 800cad2:	b084      	sub	sp, #16
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	4603      	mov	r3, r0
 800cad8:	603a      	str	r2, [r7, #0]
 800cada:	71fb      	strb	r3, [r7, #7]
 800cadc:	460b      	mov	r3, r1
 800cade:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800cae0:	79fb      	ldrb	r3, [r7, #7]
 800cae2:	4a09      	ldr	r2, [pc, #36]	@ (800cb08 <disk_ioctl+0x38>)
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	4413      	add	r3, r2
 800cae8:	685b      	ldr	r3, [r3, #4]
 800caea:	691b      	ldr	r3, [r3, #16]
 800caec:	79fa      	ldrb	r2, [r7, #7]
 800caee:	4906      	ldr	r1, [pc, #24]	@ (800cb08 <disk_ioctl+0x38>)
 800caf0:	440a      	add	r2, r1
 800caf2:	7a10      	ldrb	r0, [r2, #8]
 800caf4:	79b9      	ldrb	r1, [r7, #6]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	4798      	blx	r3
 800cafa:	4603      	mov	r3, r0
 800cafc:	73fb      	strb	r3, [r7, #15]
  return res;
 800cafe:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 800cb00:	4618      	mov	r0, r3
 800cb02:	3710      	adds	r7, #16
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	20000444 	.word	0x20000444
=======
 800cb20:	4618      	mov	r0, r3
 800cb22:	3710      	adds	r7, #16
 800cb24:	46bd      	mov	sp, r7
 800cb26:	bd80      	pop	{r7, pc}
 800cb28:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cb0c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800cb0c:	b480      	push	{r7}
 800cb0e:	b085      	sub	sp, #20
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	3301      	adds	r3, #1
 800cb18:	781b      	ldrb	r3, [r3, #0]
 800cb1a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800cb1c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800cb20:	021b      	lsls	r3, r3, #8
 800cb22:	b21a      	sxth	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	b21b      	sxth	r3, r3
 800cb2a:	4313      	orrs	r3, r2
 800cb2c:	b21b      	sxth	r3, r3
 800cb2e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800cb30:	89fb      	ldrh	r3, [r7, #14]
}
 800cb32:	4618      	mov	r0, r3
 800cb34:	3714      	adds	r7, #20
 800cb36:	46bd      	mov	sp, r7
 800cb38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb3c:	4770      	bx	lr

0800cb3e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800cb3e:	b480      	push	{r7}
 800cb40:	b085      	sub	sp, #20
 800cb42:	af00      	add	r7, sp, #0
 800cb44:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800cb46:	687b      	ldr	r3, [r7, #4]
 800cb48:	3303      	adds	r3, #3
 800cb4a:	781b      	ldrb	r3, [r3, #0]
 800cb4c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	021b      	lsls	r3, r3, #8
 800cb52:	687a      	ldr	r2, [r7, #4]
 800cb54:	3202      	adds	r2, #2
 800cb56:	7812      	ldrb	r2, [r2, #0]
 800cb58:	4313      	orrs	r3, r2
 800cb5a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800cb5c:	68fb      	ldr	r3, [r7, #12]
 800cb5e:	021b      	lsls	r3, r3, #8
 800cb60:	687a      	ldr	r2, [r7, #4]
 800cb62:	3201      	adds	r2, #1
 800cb64:	7812      	ldrb	r2, [r2, #0]
 800cb66:	4313      	orrs	r3, r2
 800cb68:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	021b      	lsls	r3, r3, #8
 800cb6e:	687a      	ldr	r2, [r7, #4]
 800cb70:	7812      	ldrb	r2, [r2, #0]
 800cb72:	4313      	orrs	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]
	return rv;
 800cb76:	68fb      	ldr	r3, [r7, #12]
}
 800cb78:	4618      	mov	r0, r3
 800cb7a:	3714      	adds	r7, #20
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800cb84:	b480      	push	{r7}
 800cb86:	b083      	sub	sp, #12
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	460b      	mov	r3, r1
 800cb8e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	1c5a      	adds	r2, r3, #1
 800cb94:	607a      	str	r2, [r7, #4]
 800cb96:	887a      	ldrh	r2, [r7, #2]
 800cb98:	b2d2      	uxtb	r2, r2
 800cb9a:	701a      	strb	r2, [r3, #0]
 800cb9c:	887b      	ldrh	r3, [r7, #2]
 800cb9e:	0a1b      	lsrs	r3, r3, #8
 800cba0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800cba2:	687b      	ldr	r3, [r7, #4]
 800cba4:	1c5a      	adds	r2, r3, #1
 800cba6:	607a      	str	r2, [r7, #4]
 800cba8:	887a      	ldrh	r2, [r7, #2]
 800cbaa:	b2d2      	uxtb	r2, r2
 800cbac:	701a      	strb	r2, [r3, #0]
}
 800cbae:	bf00      	nop
 800cbb0:	370c      	adds	r7, #12
 800cbb2:	46bd      	mov	sp, r7
 800cbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb8:	4770      	bx	lr

0800cbba <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800cbba:	b480      	push	{r7}
 800cbbc:	b083      	sub	sp, #12
 800cbbe:	af00      	add	r7, sp, #0
 800cbc0:	6078      	str	r0, [r7, #4]
 800cbc2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbc4:	687b      	ldr	r3, [r7, #4]
 800cbc6:	1c5a      	adds	r2, r3, #1
 800cbc8:	607a      	str	r2, [r7, #4]
 800cbca:	683a      	ldr	r2, [r7, #0]
 800cbcc:	b2d2      	uxtb	r2, r2
 800cbce:	701a      	strb	r2, [r3, #0]
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	0a1b      	lsrs	r3, r3, #8
 800cbd4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	1c5a      	adds	r2, r3, #1
 800cbda:	607a      	str	r2, [r7, #4]
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	b2d2      	uxtb	r2, r2
 800cbe0:	701a      	strb	r2, [r3, #0]
 800cbe2:	683b      	ldr	r3, [r7, #0]
 800cbe4:	0a1b      	lsrs	r3, r3, #8
 800cbe6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	1c5a      	adds	r2, r3, #1
 800cbec:	607a      	str	r2, [r7, #4]
 800cbee:	683a      	ldr	r2, [r7, #0]
 800cbf0:	b2d2      	uxtb	r2, r2
 800cbf2:	701a      	strb	r2, [r3, #0]
 800cbf4:	683b      	ldr	r3, [r7, #0]
 800cbf6:	0a1b      	lsrs	r3, r3, #8
 800cbf8:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	1c5a      	adds	r2, r3, #1
 800cbfe:	607a      	str	r2, [r7, #4]
 800cc00:	683a      	ldr	r2, [r7, #0]
 800cc02:	b2d2      	uxtb	r2, r2
 800cc04:	701a      	strb	r2, [r3, #0]
}
 800cc06:	bf00      	nop
 800cc08:	370c      	adds	r7, #12
 800cc0a:	46bd      	mov	sp, r7
 800cc0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc10:	4770      	bx	lr

0800cc12 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800cc12:	b480      	push	{r7}
 800cc14:	b087      	sub	sp, #28
 800cc16:	af00      	add	r7, sp, #0
 800cc18:	60f8      	str	r0, [r7, #12]
 800cc1a:	60b9      	str	r1, [r7, #8]
 800cc1c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800cc22:	68bb      	ldr	r3, [r7, #8]
 800cc24:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	d00d      	beq.n	800cc48 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800cc2c:	693a      	ldr	r2, [r7, #16]
 800cc2e:	1c53      	adds	r3, r2, #1
 800cc30:	613b      	str	r3, [r7, #16]
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	1c59      	adds	r1, r3, #1
 800cc36:	6179      	str	r1, [r7, #20]
 800cc38:	7812      	ldrb	r2, [r2, #0]
 800cc3a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	3b01      	subs	r3, #1
 800cc40:	607b      	str	r3, [r7, #4]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	2b00      	cmp	r3, #0
 800cc46:	d1f1      	bne.n	800cc2c <mem_cpy+0x1a>
	}
}
 800cc48:	bf00      	nop
 800cc4a:	371c      	adds	r7, #28
 800cc4c:	46bd      	mov	sp, r7
 800cc4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc52:	4770      	bx	lr

0800cc54 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800cc54:	b480      	push	{r7}
 800cc56:	b087      	sub	sp, #28
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800cc64:	697b      	ldr	r3, [r7, #20]
 800cc66:	1c5a      	adds	r2, r3, #1
 800cc68:	617a      	str	r2, [r7, #20]
 800cc6a:	68ba      	ldr	r2, [r7, #8]
 800cc6c:	b2d2      	uxtb	r2, r2
 800cc6e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	3b01      	subs	r3, #1
 800cc74:	607b      	str	r3, [r7, #4]
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	2b00      	cmp	r3, #0
 800cc7a:	d1f3      	bne.n	800cc64 <mem_set+0x10>
}
 800cc7c:	bf00      	nop
 800cc7e:	bf00      	nop
 800cc80:	371c      	adds	r7, #28
 800cc82:	46bd      	mov	sp, r7
 800cc84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc88:	4770      	bx	lr

0800cc8a <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800cc8a:	b480      	push	{r7}
 800cc8c:	b089      	sub	sp, #36	@ 0x24
 800cc8e:	af00      	add	r7, sp, #0
 800cc90:	60f8      	str	r0, [r7, #12]
 800cc92:	60b9      	str	r1, [r7, #8]
 800cc94:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	61fb      	str	r3, [r7, #28]
 800cc9a:	68bb      	ldr	r3, [r7, #8]
 800cc9c:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800cc9e:	2300      	movs	r3, #0
 800cca0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800cca2:	69fb      	ldr	r3, [r7, #28]
 800cca4:	1c5a      	adds	r2, r3, #1
 800cca6:	61fa      	str	r2, [r7, #28]
 800cca8:	781b      	ldrb	r3, [r3, #0]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	1c5a      	adds	r2, r3, #1
 800ccb0:	61ba      	str	r2, [r7, #24]
 800ccb2:	781b      	ldrb	r3, [r3, #0]
 800ccb4:	1acb      	subs	r3, r1, r3
 800ccb6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	3b01      	subs	r3, #1
 800ccbc:	607b      	str	r3, [r7, #4]
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2b00      	cmp	r3, #0
 800ccc2:	d002      	beq.n	800ccca <mem_cmp+0x40>
 800ccc4:	697b      	ldr	r3, [r7, #20]
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d0eb      	beq.n	800cca2 <mem_cmp+0x18>

	return r;
 800ccca:	697b      	ldr	r3, [r7, #20]
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3724      	adds	r7, #36	@ 0x24
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccd6:	4770      	bx	lr

0800ccd8 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800cce2:	e002      	b.n	800ccea <chk_chr+0x12>
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	3301      	adds	r3, #1
 800cce8:	607b      	str	r3, [r7, #4]
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	781b      	ldrb	r3, [r3, #0]
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	d005      	beq.n	800ccfe <chk_chr+0x26>
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	781b      	ldrb	r3, [r3, #0]
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	4293      	cmp	r3, r2
 800ccfc:	d1f2      	bne.n	800cce4 <chk_chr+0xc>
	return *str;
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	781b      	ldrb	r3, [r3, #0]
}
 800cd02:	4618      	mov	r0, r3
 800cd04:	370c      	adds	r7, #12
 800cd06:	46bd      	mov	sp, r7
 800cd08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd0c:	4770      	bx	lr
	...

0800cd10 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800cd10:	b480      	push	{r7}
 800cd12:	b085      	sub	sp, #20
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	6078      	str	r0, [r7, #4]
 800cd18:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	60bb      	str	r3, [r7, #8]
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	60fb      	str	r3, [r7, #12]
 800cd22:	e029      	b.n	800cd78 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800cd24:	4a27      	ldr	r2, [pc, #156]	@ (800cdc4 <chk_lock+0xb4>)
 800cd26:	68fb      	ldr	r3, [r7, #12]
 800cd28:	011b      	lsls	r3, r3, #4
 800cd2a:	4413      	add	r3, r2
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d01d      	beq.n	800cd6e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd32:	4a24      	ldr	r2, [pc, #144]	@ (800cdc4 <chk_lock+0xb4>)
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	011b      	lsls	r3, r3, #4
 800cd38:	4413      	add	r3, r2
 800cd3a:	681a      	ldr	r2, [r3, #0]
 800cd3c:	687b      	ldr	r3, [r7, #4]
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	429a      	cmp	r2, r3
 800cd42:	d116      	bne.n	800cd72 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800cd44:	4a1f      	ldr	r2, [pc, #124]	@ (800cdc4 <chk_lock+0xb4>)
 800cd46:	68fb      	ldr	r3, [r7, #12]
 800cd48:	011b      	lsls	r3, r3, #4
 800cd4a:	4413      	add	r3, r2
 800cd4c:	3304      	adds	r3, #4
 800cd4e:	681a      	ldr	r2, [r3, #0]
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800cd54:	429a      	cmp	r2, r3
 800cd56:	d10c      	bne.n	800cd72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd58:	4a1a      	ldr	r2, [pc, #104]	@ (800cdc4 <chk_lock+0xb4>)
 800cd5a:	68fb      	ldr	r3, [r7, #12]
 800cd5c:	011b      	lsls	r3, r3, #4
 800cd5e:	4413      	add	r3, r2
 800cd60:	3308      	adds	r3, #8
 800cd62:	681a      	ldr	r2, [r3, #0]
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800cd68:	429a      	cmp	r2, r3
 800cd6a:	d102      	bne.n	800cd72 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800cd6c:	e007      	b.n	800cd7e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800cd6e:	2301      	movs	r3, #1
 800cd70:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800cd72:	68fb      	ldr	r3, [r7, #12]
 800cd74:	3301      	adds	r3, #1
 800cd76:	60fb      	str	r3, [r7, #12]
 800cd78:	68fb      	ldr	r3, [r7, #12]
 800cd7a:	2b01      	cmp	r3, #1
 800cd7c:	d9d2      	bls.n	800cd24 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	2b02      	cmp	r3, #2
 800cd82:	d109      	bne.n	800cd98 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800cd84:	68bb      	ldr	r3, [r7, #8]
 800cd86:	2b00      	cmp	r3, #0
 800cd88:	d102      	bne.n	800cd90 <chk_lock+0x80>
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	2b02      	cmp	r3, #2
 800cd8e:	d101      	bne.n	800cd94 <chk_lock+0x84>
 800cd90:	2300      	movs	r3, #0
 800cd92:	e010      	b.n	800cdb6 <chk_lock+0xa6>
 800cd94:	2312      	movs	r3, #18
 800cd96:	e00e      	b.n	800cdb6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d108      	bne.n	800cdb0 <chk_lock+0xa0>
 800cd9e:	4a09      	ldr	r2, [pc, #36]	@ (800cdc4 <chk_lock+0xb4>)
 800cda0:	68fb      	ldr	r3, [r7, #12]
 800cda2:	011b      	lsls	r3, r3, #4
 800cda4:	4413      	add	r3, r2
 800cda6:	330c      	adds	r3, #12
 800cda8:	881b      	ldrh	r3, [r3, #0]
 800cdaa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdae:	d101      	bne.n	800cdb4 <chk_lock+0xa4>
 800cdb0:	2310      	movs	r3, #16
 800cdb2:	e000      	b.n	800cdb6 <chk_lock+0xa6>
 800cdb4:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 800cdb6:	4618      	mov	r0, r3
 800cdb8:	3714      	adds	r7, #20
 800cdba:	46bd      	mov	sp, r7
 800cdbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc0:	4770      	bx	lr
 800cdc2:	bf00      	nop
 800cdc4:	20000424 	.word	0x20000424
=======
 800cdd2:	4618      	mov	r0, r3
 800cdd4:	3714      	adds	r7, #20
 800cdd6:	46bd      	mov	sp, r7
 800cdd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cddc:	4770      	bx	lr
 800cdde:	bf00      	nop
 800cde0:	20000428 	.word	0x20000428
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cdc8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800cdc8:	b480      	push	{r7}
 800cdca:	b083      	sub	sp, #12
 800cdcc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	607b      	str	r3, [r7, #4]
 800cdd2:	e002      	b.n	800cdda <enq_lock+0x12>
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	3301      	adds	r3, #1
 800cdd8:	607b      	str	r3, [r7, #4]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d806      	bhi.n	800cdee <enq_lock+0x26>
 800cde0:	4a09      	ldr	r2, [pc, #36]	@ (800ce08 <enq_lock+0x40>)
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	011b      	lsls	r3, r3, #4
 800cde6:	4413      	add	r3, r2
 800cde8:	681b      	ldr	r3, [r3, #0]
 800cdea:	2b00      	cmp	r3, #0
 800cdec:	d1f2      	bne.n	800cdd4 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	2b02      	cmp	r3, #2
 800cdf2:	bf14      	ite	ne
 800cdf4:	2301      	movne	r3, #1
 800cdf6:	2300      	moveq	r3, #0
 800cdf8:	b2db      	uxtb	r3, r3
}
<<<<<<< HEAD
 800cdfa:	4618      	mov	r0, r3
 800cdfc:	370c      	adds	r7, #12
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce04:	4770      	bx	lr
 800ce06:	bf00      	nop
 800ce08:	20000424 	.word	0x20000424
=======
 800ce16:	4618      	mov	r0, r3
 800ce18:	370c      	adds	r7, #12
 800ce1a:	46bd      	mov	sp, r7
 800ce1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce20:	4770      	bx	lr
 800ce22:	bf00      	nop
 800ce24:	20000428 	.word	0x20000428
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ce0c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800ce0c:	b480      	push	{r7}
 800ce0e:	b085      	sub	sp, #20
 800ce10:	af00      	add	r7, sp, #0
 800ce12:	6078      	str	r0, [r7, #4]
 800ce14:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce16:	2300      	movs	r3, #0
 800ce18:	60fb      	str	r3, [r7, #12]
 800ce1a:	e01f      	b.n	800ce5c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800ce1c:	4a41      	ldr	r2, [pc, #260]	@ (800cf24 <inc_lock+0x118>)
 800ce1e:	68fb      	ldr	r3, [r7, #12]
 800ce20:	011b      	lsls	r3, r3, #4
 800ce22:	4413      	add	r3, r2
 800ce24:	681a      	ldr	r2, [r3, #0]
 800ce26:	687b      	ldr	r3, [r7, #4]
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d113      	bne.n	800ce56 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800ce2e:	4a3d      	ldr	r2, [pc, #244]	@ (800cf24 <inc_lock+0x118>)
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	011b      	lsls	r3, r3, #4
 800ce34:	4413      	add	r3, r2
 800ce36:	3304      	adds	r3, #4
 800ce38:	681a      	ldr	r2, [r3, #0]
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800ce3e:	429a      	cmp	r2, r3
 800ce40:	d109      	bne.n	800ce56 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800ce42:	4a38      	ldr	r2, [pc, #224]	@ (800cf24 <inc_lock+0x118>)
 800ce44:	68fb      	ldr	r3, [r7, #12]
 800ce46:	011b      	lsls	r3, r3, #4
 800ce48:	4413      	add	r3, r2
 800ce4a:	3308      	adds	r3, #8
 800ce4c:	681a      	ldr	r2, [r3, #0]
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800ce52:	429a      	cmp	r2, r3
 800ce54:	d006      	beq.n	800ce64 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800ce56:	68fb      	ldr	r3, [r7, #12]
 800ce58:	3301      	adds	r3, #1
 800ce5a:	60fb      	str	r3, [r7, #12]
 800ce5c:	68fb      	ldr	r3, [r7, #12]
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d9dc      	bls.n	800ce1c <inc_lock+0x10>
 800ce62:	e000      	b.n	800ce66 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800ce64:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800ce66:	68fb      	ldr	r3, [r7, #12]
 800ce68:	2b02      	cmp	r3, #2
 800ce6a:	d132      	bne.n	800ced2 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	60fb      	str	r3, [r7, #12]
 800ce70:	e002      	b.n	800ce78 <inc_lock+0x6c>
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3301      	adds	r3, #1
 800ce76:	60fb      	str	r3, [r7, #12]
 800ce78:	68fb      	ldr	r3, [r7, #12]
 800ce7a:	2b01      	cmp	r3, #1
 800ce7c:	d806      	bhi.n	800ce8c <inc_lock+0x80>
 800ce7e:	4a29      	ldr	r2, [pc, #164]	@ (800cf24 <inc_lock+0x118>)
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	011b      	lsls	r3, r3, #4
 800ce84:	4413      	add	r3, r2
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1f2      	bne.n	800ce72 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800ce8c:	68fb      	ldr	r3, [r7, #12]
 800ce8e:	2b02      	cmp	r3, #2
 800ce90:	d101      	bne.n	800ce96 <inc_lock+0x8a>
 800ce92:	2300      	movs	r3, #0
 800ce94:	e040      	b.n	800cf18 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	681a      	ldr	r2, [r3, #0]
 800ce9a:	4922      	ldr	r1, [pc, #136]	@ (800cf24 <inc_lock+0x118>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	011b      	lsls	r3, r3, #4
 800cea0:	440b      	add	r3, r1
 800cea2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	689a      	ldr	r2, [r3, #8]
 800cea8:	491e      	ldr	r1, [pc, #120]	@ (800cf24 <inc_lock+0x118>)
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	011b      	lsls	r3, r3, #4
 800ceae:	440b      	add	r3, r1
 800ceb0:	3304      	adds	r3, #4
 800ceb2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800ceb4:	687b      	ldr	r3, [r7, #4]
 800ceb6:	695a      	ldr	r2, [r3, #20]
 800ceb8:	491a      	ldr	r1, [pc, #104]	@ (800cf24 <inc_lock+0x118>)
 800ceba:	68fb      	ldr	r3, [r7, #12]
 800cebc:	011b      	lsls	r3, r3, #4
 800cebe:	440b      	add	r3, r1
 800cec0:	3308      	adds	r3, #8
 800cec2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800cec4:	4a17      	ldr	r2, [pc, #92]	@ (800cf24 <inc_lock+0x118>)
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	011b      	lsls	r3, r3, #4
 800ceca:	4413      	add	r3, r2
 800cecc:	330c      	adds	r3, #12
 800cece:	2200      	movs	r2, #0
 800ced0:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d009      	beq.n	800ceec <inc_lock+0xe0>
 800ced8:	4a12      	ldr	r2, [pc, #72]	@ (800cf24 <inc_lock+0x118>)
 800ceda:	68fb      	ldr	r3, [r7, #12]
 800cedc:	011b      	lsls	r3, r3, #4
 800cede:	4413      	add	r3, r2
 800cee0:	330c      	adds	r3, #12
 800cee2:	881b      	ldrh	r3, [r3, #0]
 800cee4:	2b00      	cmp	r3, #0
 800cee6:	d001      	beq.n	800ceec <inc_lock+0xe0>
 800cee8:	2300      	movs	r3, #0
 800ceea:	e015      	b.n	800cf18 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ceec:	683b      	ldr	r3, [r7, #0]
 800ceee:	2b00      	cmp	r3, #0
 800cef0:	d108      	bne.n	800cf04 <inc_lock+0xf8>
 800cef2:	4a0c      	ldr	r2, [pc, #48]	@ (800cf24 <inc_lock+0x118>)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	011b      	lsls	r3, r3, #4
 800cef8:	4413      	add	r3, r2
 800cefa:	330c      	adds	r3, #12
 800cefc:	881b      	ldrh	r3, [r3, #0]
 800cefe:	3301      	adds	r3, #1
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	e001      	b.n	800cf08 <inc_lock+0xfc>
 800cf04:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800cf08:	4906      	ldr	r1, [pc, #24]	@ (800cf24 <inc_lock+0x118>)
 800cf0a:	68fb      	ldr	r3, [r7, #12]
 800cf0c:	011b      	lsls	r3, r3, #4
 800cf0e:	440b      	add	r3, r1
 800cf10:	330c      	adds	r3, #12
 800cf12:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	3301      	adds	r3, #1
}
<<<<<<< HEAD
 800cf18:	4618      	mov	r0, r3
 800cf1a:	3714      	adds	r7, #20
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr
 800cf24:	20000424 	.word	0x20000424
=======
 800cf34:	4618      	mov	r0, r3
 800cf36:	3714      	adds	r7, #20
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf3e:	4770      	bx	lr
 800cf40:	20000428 	.word	0x20000428
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cf28 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800cf28:	b480      	push	{r7}
 800cf2a:	b085      	sub	sp, #20
 800cf2c:	af00      	add	r7, sp, #0
 800cf2e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	3b01      	subs	r3, #1
 800cf34:	607b      	str	r3, [r7, #4]
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b01      	cmp	r3, #1
 800cf3a:	d825      	bhi.n	800cf88 <dec_lock+0x60>
		n = Files[i].ctr;
 800cf3c:	4a17      	ldr	r2, [pc, #92]	@ (800cf9c <dec_lock+0x74>)
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	011b      	lsls	r3, r3, #4
 800cf42:	4413      	add	r3, r2
 800cf44:	330c      	adds	r3, #12
 800cf46:	881b      	ldrh	r3, [r3, #0]
 800cf48:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800cf4a:	89fb      	ldrh	r3, [r7, #14]
 800cf4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cf50:	d101      	bne.n	800cf56 <dec_lock+0x2e>
 800cf52:	2300      	movs	r3, #0
 800cf54:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800cf56:	89fb      	ldrh	r3, [r7, #14]
 800cf58:	2b00      	cmp	r3, #0
 800cf5a:	d002      	beq.n	800cf62 <dec_lock+0x3a>
 800cf5c:	89fb      	ldrh	r3, [r7, #14]
 800cf5e:	3b01      	subs	r3, #1
 800cf60:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800cf62:	4a0e      	ldr	r2, [pc, #56]	@ (800cf9c <dec_lock+0x74>)
 800cf64:	687b      	ldr	r3, [r7, #4]
 800cf66:	011b      	lsls	r3, r3, #4
 800cf68:	4413      	add	r3, r2
 800cf6a:	330c      	adds	r3, #12
 800cf6c:	89fa      	ldrh	r2, [r7, #14]
 800cf6e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800cf70:	89fb      	ldrh	r3, [r7, #14]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d105      	bne.n	800cf82 <dec_lock+0x5a>
 800cf76:	4a09      	ldr	r2, [pc, #36]	@ (800cf9c <dec_lock+0x74>)
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	011b      	lsls	r3, r3, #4
 800cf7c:	4413      	add	r3, r2
 800cf7e:	2200      	movs	r2, #0
 800cf80:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cf82:	2300      	movs	r3, #0
 800cf84:	737b      	strb	r3, [r7, #13]
 800cf86:	e001      	b.n	800cf8c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cf88:	2302      	movs	r3, #2
 800cf8a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cf8c:	7b7b      	ldrb	r3, [r7, #13]
}
<<<<<<< HEAD
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3714      	adds	r7, #20
 800cf92:	46bd      	mov	sp, r7
 800cf94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf98:	4770      	bx	lr
 800cf9a:	bf00      	nop
 800cf9c:	20000424 	.word	0x20000424
=======
 800cfaa:	4618      	mov	r0, r3
 800cfac:	3714      	adds	r7, #20
 800cfae:	46bd      	mov	sp, r7
 800cfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb4:	4770      	bx	lr
 800cfb6:	bf00      	nop
 800cfb8:	20000428 	.word	0x20000428
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cfa0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b085      	sub	sp, #20
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	60fb      	str	r3, [r7, #12]
 800cfac:	e010      	b.n	800cfd0 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cfae:	4a0d      	ldr	r2, [pc, #52]	@ (800cfe4 <clear_lock+0x44>)
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	011b      	lsls	r3, r3, #4
 800cfb4:	4413      	add	r3, r2
 800cfb6:	681b      	ldr	r3, [r3, #0]
 800cfb8:	687a      	ldr	r2, [r7, #4]
 800cfba:	429a      	cmp	r2, r3
 800cfbc:	d105      	bne.n	800cfca <clear_lock+0x2a>
 800cfbe:	4a09      	ldr	r2, [pc, #36]	@ (800cfe4 <clear_lock+0x44>)
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	011b      	lsls	r3, r3, #4
 800cfc4:	4413      	add	r3, r2
 800cfc6:	2200      	movs	r2, #0
 800cfc8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	3301      	adds	r3, #1
 800cfce:	60fb      	str	r3, [r7, #12]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	2b01      	cmp	r3, #1
 800cfd4:	d9eb      	bls.n	800cfae <clear_lock+0xe>
	}
}
<<<<<<< HEAD
 800cfd6:	bf00      	nop
 800cfd8:	bf00      	nop
 800cfda:	3714      	adds	r7, #20
 800cfdc:	46bd      	mov	sp, r7
 800cfde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfe2:	4770      	bx	lr
 800cfe4:	20000424 	.word	0x20000424
=======
 800cff2:	bf00      	nop
 800cff4:	bf00      	nop
 800cff6:	3714      	adds	r7, #20
 800cff8:	46bd      	mov	sp, r7
 800cffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cffe:	4770      	bx	lr
 800d000:	20000428 	.word	0x20000428
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800cfe8 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b086      	sub	sp, #24
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cff0:	2300      	movs	r3, #0
 800cff2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	78db      	ldrb	r3, [r3, #3]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d034      	beq.n	800d066 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d000:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	7858      	ldrb	r0, [r3, #1]
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d00c:	2301      	movs	r3, #1
 800d00e:	697a      	ldr	r2, [r7, #20]
 800d010:	f7ff fd3e 	bl	800ca90 <disk_write>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d002      	beq.n	800d020 <sync_window+0x38>
			res = FR_DISK_ERR;
 800d01a:	2301      	movs	r3, #1
 800d01c:	73fb      	strb	r3, [r7, #15]
 800d01e:	e022      	b.n	800d066 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800d020:	687b      	ldr	r3, [r7, #4]
 800d022:	2200      	movs	r2, #0
 800d024:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	6a1b      	ldr	r3, [r3, #32]
 800d02a:	697a      	ldr	r2, [r7, #20]
 800d02c:	1ad2      	subs	r2, r2, r3
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	699b      	ldr	r3, [r3, #24]
 800d032:	429a      	cmp	r2, r3
 800d034:	d217      	bcs.n	800d066 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	789b      	ldrb	r3, [r3, #2]
 800d03a:	613b      	str	r3, [r7, #16]
 800d03c:	e010      	b.n	800d060 <sync_window+0x78>
					wsect += fs->fsize;
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	699b      	ldr	r3, [r3, #24]
 800d042:	697a      	ldr	r2, [r7, #20]
 800d044:	4413      	add	r3, r2
 800d046:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	7858      	ldrb	r0, [r3, #1]
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d052:	2301      	movs	r3, #1
 800d054:	697a      	ldr	r2, [r7, #20]
 800d056:	f7ff fd1b 	bl	800ca90 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800d05a:	693b      	ldr	r3, [r7, #16]
 800d05c:	3b01      	subs	r3, #1
 800d05e:	613b      	str	r3, [r7, #16]
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d8eb      	bhi.n	800d03e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800d066:	7bfb      	ldrb	r3, [r7, #15]
}
 800d068:	4618      	mov	r0, r3
 800d06a:	3718      	adds	r7, #24
 800d06c:	46bd      	mov	sp, r7
 800d06e:	bd80      	pop	{r7, pc}

0800d070 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800d070:	b580      	push	{r7, lr}
 800d072:	b084      	sub	sp, #16
 800d074:	af00      	add	r7, sp, #0
 800d076:	6078      	str	r0, [r7, #4]
 800d078:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800d07a:	2300      	movs	r3, #0
 800d07c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d082:	683a      	ldr	r2, [r7, #0]
 800d084:	429a      	cmp	r2, r3
 800d086:	d01b      	beq.n	800d0c0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800d088:	6878      	ldr	r0, [r7, #4]
 800d08a:	f7ff ffad 	bl	800cfe8 <sync_window>
 800d08e:	4603      	mov	r3, r0
 800d090:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800d092:	7bfb      	ldrb	r3, [r7, #15]
 800d094:	2b00      	cmp	r3, #0
 800d096:	d113      	bne.n	800d0c0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	7858      	ldrb	r0, [r3, #1]
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	683a      	ldr	r2, [r7, #0]
 800d0a6:	f7ff fcd3 	bl	800ca50 <disk_read>
 800d0aa:	4603      	mov	r3, r0
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d004      	beq.n	800d0ba <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800d0b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d0b4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800d0b6:	2301      	movs	r3, #1
 800d0b8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	683a      	ldr	r2, [r7, #0]
 800d0be:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800d0c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	3710      	adds	r7, #16
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	bd80      	pop	{r7, pc}
	...

0800d0cc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800d0cc:	b580      	push	{r7, lr}
 800d0ce:	b084      	sub	sp, #16
 800d0d0:	af00      	add	r7, sp, #0
 800d0d2:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800d0d4:	6878      	ldr	r0, [r7, #4]
 800d0d6:	f7ff ff87 	bl	800cfe8 <sync_window>
 800d0da:	4603      	mov	r3, r0
 800d0dc:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800d0de:	7bfb      	ldrb	r3, [r7, #15]
 800d0e0:	2b00      	cmp	r3, #0
 800d0e2:	d158      	bne.n	800d196 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	781b      	ldrb	r3, [r3, #0]
 800d0e8:	2b03      	cmp	r3, #3
 800d0ea:	d148      	bne.n	800d17e <sync_fs+0xb2>
 800d0ec:	687b      	ldr	r3, [r7, #4]
 800d0ee:	791b      	ldrb	r3, [r3, #4]
 800d0f0:	2b01      	cmp	r3, #1
 800d0f2:	d144      	bne.n	800d17e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	3330      	adds	r3, #48	@ 0x30
 800d0f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d0fc:	2100      	movs	r1, #0
 800d0fe:	4618      	mov	r0, r3
 800d100:	f7ff fda8 	bl	800cc54 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	3330      	adds	r3, #48	@ 0x30
 800d108:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d10c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800d110:	4618      	mov	r0, r3
 800d112:	f7ff fd37 	bl	800cb84 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	3330      	adds	r3, #48	@ 0x30
 800d11a:	4921      	ldr	r1, [pc, #132]	@ (800d1a0 <sync_fs+0xd4>)
 800d11c:	4618      	mov	r0, r3
 800d11e:	f7ff fd4c 	bl	800cbba <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	3330      	adds	r3, #48	@ 0x30
 800d126:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800d12a:	491e      	ldr	r1, [pc, #120]	@ (800d1a4 <sync_fs+0xd8>)
 800d12c:	4618      	mov	r0, r3
 800d12e:	f7ff fd44 	bl	800cbba <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	3330      	adds	r3, #48	@ 0x30
 800d136:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	691b      	ldr	r3, [r3, #16]
 800d13e:	4619      	mov	r1, r3
 800d140:	4610      	mov	r0, r2
 800d142:	f7ff fd3a 	bl	800cbba <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	3330      	adds	r3, #48	@ 0x30
 800d14a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	68db      	ldr	r3, [r3, #12]
 800d152:	4619      	mov	r1, r3
 800d154:	4610      	mov	r0, r2
 800d156:	f7ff fd30 	bl	800cbba <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	69db      	ldr	r3, [r3, #28]
 800d15e:	1c5a      	adds	r2, r3, #1
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	7858      	ldrb	r0, [r3, #1]
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d172:	2301      	movs	r3, #1
 800d174:	f7ff fc8c 	bl	800ca90 <disk_write>
			fs->fsi_flag = 0;
 800d178:	687b      	ldr	r3, [r7, #4]
 800d17a:	2200      	movs	r2, #0
 800d17c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	785b      	ldrb	r3, [r3, #1]
 800d182:	2200      	movs	r2, #0
 800d184:	2100      	movs	r1, #0
 800d186:	4618      	mov	r0, r3
 800d188:	f7ff fca2 	bl	800cad0 <disk_ioctl>
 800d18c:	4603      	mov	r3, r0
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d001      	beq.n	800d196 <sync_fs+0xca>
 800d192:	2301      	movs	r3, #1
 800d194:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800d196:	7bfb      	ldrb	r3, [r7, #15]
}
 800d198:	4618      	mov	r0, r3
 800d19a:	3710      	adds	r7, #16
 800d19c:	46bd      	mov	sp, r7
 800d19e:	bd80      	pop	{r7, pc}
 800d1a0:	41615252 	.word	0x41615252
 800d1a4:	61417272 	.word	0x61417272

0800d1a8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800d1a8:	b480      	push	{r7}
 800d1aa:	b083      	sub	sp, #12
 800d1ac:	af00      	add	r7, sp, #0
 800d1ae:	6078      	str	r0, [r7, #4]
 800d1b0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	3b02      	subs	r3, #2
 800d1b6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	695b      	ldr	r3, [r3, #20]
 800d1bc:	3b02      	subs	r3, #2
 800d1be:	683a      	ldr	r2, [r7, #0]
 800d1c0:	429a      	cmp	r2, r3
 800d1c2:	d301      	bcc.n	800d1c8 <clust2sect+0x20>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e008      	b.n	800d1da <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800d1c8:	687b      	ldr	r3, [r7, #4]
 800d1ca:	895b      	ldrh	r3, [r3, #10]
 800d1cc:	461a      	mov	r2, r3
 800d1ce:	683b      	ldr	r3, [r7, #0]
 800d1d0:	fb03 f202 	mul.w	r2, r3, r2
 800d1d4:	687b      	ldr	r3, [r7, #4]
 800d1d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d1d8:	4413      	add	r3, r2
}
 800d1da:	4618      	mov	r0, r3
 800d1dc:	370c      	adds	r7, #12
 800d1de:	46bd      	mov	sp, r7
 800d1e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e4:	4770      	bx	lr

0800d1e6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800d1e6:	b580      	push	{r7, lr}
 800d1e8:	b086      	sub	sp, #24
 800d1ea:	af00      	add	r7, sp, #0
 800d1ec:	6078      	str	r0, [r7, #4]
 800d1ee:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	2b01      	cmp	r3, #1
 800d1fa:	d904      	bls.n	800d206 <get_fat+0x20>
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	695b      	ldr	r3, [r3, #20]
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	429a      	cmp	r2, r3
 800d204:	d302      	bcc.n	800d20c <get_fat+0x26>
		val = 1;	/* Internal error */
 800d206:	2301      	movs	r3, #1
 800d208:	617b      	str	r3, [r7, #20]
 800d20a:	e08e      	b.n	800d32a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800d20c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d210:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	781b      	ldrb	r3, [r3, #0]
 800d216:	2b03      	cmp	r3, #3
 800d218:	d061      	beq.n	800d2de <get_fat+0xf8>
 800d21a:	2b03      	cmp	r3, #3
 800d21c:	dc7b      	bgt.n	800d316 <get_fat+0x130>
 800d21e:	2b01      	cmp	r3, #1
 800d220:	d002      	beq.n	800d228 <get_fat+0x42>
 800d222:	2b02      	cmp	r3, #2
 800d224:	d041      	beq.n	800d2aa <get_fat+0xc4>
 800d226:	e076      	b.n	800d316 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	60fb      	str	r3, [r7, #12]
 800d22c:	68fb      	ldr	r3, [r7, #12]
 800d22e:	085b      	lsrs	r3, r3, #1
 800d230:	68fa      	ldr	r2, [r7, #12]
 800d232:	4413      	add	r3, r2
 800d234:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d236:	693b      	ldr	r3, [r7, #16]
 800d238:	6a1a      	ldr	r2, [r3, #32]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	0a5b      	lsrs	r3, r3, #9
 800d23e:	4413      	add	r3, r2
 800d240:	4619      	mov	r1, r3
 800d242:	6938      	ldr	r0, [r7, #16]
 800d244:	f7ff ff14 	bl	800d070 <move_window>
 800d248:	4603      	mov	r3, r0
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d166      	bne.n	800d31c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	1c5a      	adds	r2, r3, #1
 800d252:	60fa      	str	r2, [r7, #12]
 800d254:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d258:	693a      	ldr	r2, [r7, #16]
 800d25a:	4413      	add	r3, r2
 800d25c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d260:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d262:	693b      	ldr	r3, [r7, #16]
 800d264:	6a1a      	ldr	r2, [r3, #32]
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	0a5b      	lsrs	r3, r3, #9
 800d26a:	4413      	add	r3, r2
 800d26c:	4619      	mov	r1, r3
 800d26e:	6938      	ldr	r0, [r7, #16]
 800d270:	f7ff fefe 	bl	800d070 <move_window>
 800d274:	4603      	mov	r3, r0
 800d276:	2b00      	cmp	r3, #0
 800d278:	d152      	bne.n	800d320 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d280:	693a      	ldr	r2, [r7, #16]
 800d282:	4413      	add	r3, r2
 800d284:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800d288:	021b      	lsls	r3, r3, #8
 800d28a:	68ba      	ldr	r2, [r7, #8]
 800d28c:	4313      	orrs	r3, r2
 800d28e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800d290:	683b      	ldr	r3, [r7, #0]
 800d292:	f003 0301 	and.w	r3, r3, #1
 800d296:	2b00      	cmp	r3, #0
 800d298:	d002      	beq.n	800d2a0 <get_fat+0xba>
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	091b      	lsrs	r3, r3, #4
 800d29e:	e002      	b.n	800d2a6 <get_fat+0xc0>
 800d2a0:	68bb      	ldr	r3, [r7, #8]
 800d2a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d2a6:	617b      	str	r3, [r7, #20]
			break;
 800d2a8:	e03f      	b.n	800d32a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d2aa:	693b      	ldr	r3, [r7, #16]
 800d2ac:	6a1a      	ldr	r2, [r3, #32]
 800d2ae:	683b      	ldr	r3, [r7, #0]
 800d2b0:	0a1b      	lsrs	r3, r3, #8
 800d2b2:	4413      	add	r3, r2
 800d2b4:	4619      	mov	r1, r3
 800d2b6:	6938      	ldr	r0, [r7, #16]
 800d2b8:	f7ff feda 	bl	800d070 <move_window>
 800d2bc:	4603      	mov	r3, r0
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d130      	bne.n	800d324 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d2c8:	683b      	ldr	r3, [r7, #0]
 800d2ca:	005b      	lsls	r3, r3, #1
 800d2cc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d2d0:	4413      	add	r3, r2
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f7ff fc1a 	bl	800cb0c <ld_word>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	617b      	str	r3, [r7, #20]
			break;
 800d2dc:	e025      	b.n	800d32a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d2de:	693b      	ldr	r3, [r7, #16]
 800d2e0:	6a1a      	ldr	r2, [r3, #32]
 800d2e2:	683b      	ldr	r3, [r7, #0]
 800d2e4:	09db      	lsrs	r3, r3, #7
 800d2e6:	4413      	add	r3, r2
 800d2e8:	4619      	mov	r1, r3
 800d2ea:	6938      	ldr	r0, [r7, #16]
 800d2ec:	f7ff fec0 	bl	800d070 <move_window>
 800d2f0:	4603      	mov	r3, r0
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d118      	bne.n	800d328 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d2fc:	683b      	ldr	r3, [r7, #0]
 800d2fe:	009b      	lsls	r3, r3, #2
 800d300:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d304:	4413      	add	r3, r2
 800d306:	4618      	mov	r0, r3
 800d308:	f7ff fc19 	bl	800cb3e <ld_dword>
 800d30c:	4603      	mov	r3, r0
 800d30e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800d312:	617b      	str	r3, [r7, #20]
			break;
 800d314:	e009      	b.n	800d32a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800d316:	2301      	movs	r3, #1
 800d318:	617b      	str	r3, [r7, #20]
 800d31a:	e006      	b.n	800d32a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d31c:	bf00      	nop
 800d31e:	e004      	b.n	800d32a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800d320:	bf00      	nop
 800d322:	e002      	b.n	800d32a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800d324:	bf00      	nop
 800d326:	e000      	b.n	800d32a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800d328:	bf00      	nop
		}
	}

	return val;
 800d32a:	697b      	ldr	r3, [r7, #20]
}
 800d32c:	4618      	mov	r0, r3
 800d32e:	3718      	adds	r7, #24
 800d330:	46bd      	mov	sp, r7
 800d332:	bd80      	pop	{r7, pc}

0800d334 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800d334:	b590      	push	{r4, r7, lr}
 800d336:	b089      	sub	sp, #36	@ 0x24
 800d338:	af00      	add	r7, sp, #0
 800d33a:	60f8      	str	r0, [r7, #12]
 800d33c:	60b9      	str	r1, [r7, #8]
 800d33e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800d340:	2302      	movs	r3, #2
 800d342:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800d344:	68bb      	ldr	r3, [r7, #8]
 800d346:	2b01      	cmp	r3, #1
 800d348:	f240 80d9 	bls.w	800d4fe <put_fat+0x1ca>
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	695b      	ldr	r3, [r3, #20]
 800d350:	68ba      	ldr	r2, [r7, #8]
 800d352:	429a      	cmp	r2, r3
 800d354:	f080 80d3 	bcs.w	800d4fe <put_fat+0x1ca>
		switch (fs->fs_type) {
 800d358:	68fb      	ldr	r3, [r7, #12]
 800d35a:	781b      	ldrb	r3, [r3, #0]
 800d35c:	2b03      	cmp	r3, #3
 800d35e:	f000 8096 	beq.w	800d48e <put_fat+0x15a>
 800d362:	2b03      	cmp	r3, #3
 800d364:	f300 80cb 	bgt.w	800d4fe <put_fat+0x1ca>
 800d368:	2b01      	cmp	r3, #1
 800d36a:	d002      	beq.n	800d372 <put_fat+0x3e>
 800d36c:	2b02      	cmp	r3, #2
 800d36e:	d06e      	beq.n	800d44e <put_fat+0x11a>
 800d370:	e0c5      	b.n	800d4fe <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800d372:	68bb      	ldr	r3, [r7, #8]
 800d374:	61bb      	str	r3, [r7, #24]
 800d376:	69bb      	ldr	r3, [r7, #24]
 800d378:	085b      	lsrs	r3, r3, #1
 800d37a:	69ba      	ldr	r2, [r7, #24]
 800d37c:	4413      	add	r3, r2
 800d37e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	6a1a      	ldr	r2, [r3, #32]
 800d384:	69bb      	ldr	r3, [r7, #24]
 800d386:	0a5b      	lsrs	r3, r3, #9
 800d388:	4413      	add	r3, r2
 800d38a:	4619      	mov	r1, r3
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	f7ff fe6f 	bl	800d070 <move_window>
 800d392:	4603      	mov	r3, r0
 800d394:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d396:	7ffb      	ldrb	r3, [r7, #31]
 800d398:	2b00      	cmp	r3, #0
 800d39a:	f040 80a9 	bne.w	800d4f0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d3a4:	69bb      	ldr	r3, [r7, #24]
 800d3a6:	1c59      	adds	r1, r3, #1
 800d3a8:	61b9      	str	r1, [r7, #24]
 800d3aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3ae:	4413      	add	r3, r2
 800d3b0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	f003 0301 	and.w	r3, r3, #1
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d00d      	beq.n	800d3d8 <put_fat+0xa4>
 800d3bc:	697b      	ldr	r3, [r7, #20]
 800d3be:	781b      	ldrb	r3, [r3, #0]
 800d3c0:	b25b      	sxtb	r3, r3
 800d3c2:	f003 030f 	and.w	r3, r3, #15
 800d3c6:	b25a      	sxtb	r2, r3
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	b25b      	sxtb	r3, r3
 800d3cc:	011b      	lsls	r3, r3, #4
 800d3ce:	b25b      	sxtb	r3, r3
 800d3d0:	4313      	orrs	r3, r2
 800d3d2:	b25b      	sxtb	r3, r3
 800d3d4:	b2db      	uxtb	r3, r3
 800d3d6:	e001      	b.n	800d3dc <put_fat+0xa8>
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	b2db      	uxtb	r3, r3
 800d3dc:	697a      	ldr	r2, [r7, #20]
 800d3de:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	2201      	movs	r2, #1
 800d3e4:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800d3e6:	68fb      	ldr	r3, [r7, #12]
 800d3e8:	6a1a      	ldr	r2, [r3, #32]
 800d3ea:	69bb      	ldr	r3, [r7, #24]
 800d3ec:	0a5b      	lsrs	r3, r3, #9
 800d3ee:	4413      	add	r3, r2
 800d3f0:	4619      	mov	r1, r3
 800d3f2:	68f8      	ldr	r0, [r7, #12]
 800d3f4:	f7ff fe3c 	bl	800d070 <move_window>
 800d3f8:	4603      	mov	r3, r0
 800d3fa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d3fc:	7ffb      	ldrb	r3, [r7, #31]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d178      	bne.n	800d4f4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800d402:	68fb      	ldr	r3, [r7, #12]
 800d404:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d408:	69bb      	ldr	r3, [r7, #24]
 800d40a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d40e:	4413      	add	r3, r2
 800d410:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800d412:	68bb      	ldr	r3, [r7, #8]
 800d414:	f003 0301 	and.w	r3, r3, #1
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d003      	beq.n	800d424 <put_fat+0xf0>
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	091b      	lsrs	r3, r3, #4
 800d420:	b2db      	uxtb	r3, r3
 800d422:	e00e      	b.n	800d442 <put_fat+0x10e>
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	781b      	ldrb	r3, [r3, #0]
 800d428:	b25b      	sxtb	r3, r3
 800d42a:	f023 030f 	bic.w	r3, r3, #15
 800d42e:	b25a      	sxtb	r2, r3
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	0a1b      	lsrs	r3, r3, #8
 800d434:	b25b      	sxtb	r3, r3
 800d436:	f003 030f 	and.w	r3, r3, #15
 800d43a:	b25b      	sxtb	r3, r3
 800d43c:	4313      	orrs	r3, r2
 800d43e:	b25b      	sxtb	r3, r3
 800d440:	b2db      	uxtb	r3, r3
 800d442:	697a      	ldr	r2, [r7, #20]
 800d444:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800d446:	68fb      	ldr	r3, [r7, #12]
 800d448:	2201      	movs	r2, #1
 800d44a:	70da      	strb	r2, [r3, #3]
			break;
 800d44c:	e057      	b.n	800d4fe <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	6a1a      	ldr	r2, [r3, #32]
 800d452:	68bb      	ldr	r3, [r7, #8]
 800d454:	0a1b      	lsrs	r3, r3, #8
 800d456:	4413      	add	r3, r2
 800d458:	4619      	mov	r1, r3
 800d45a:	68f8      	ldr	r0, [r7, #12]
 800d45c:	f7ff fe08 	bl	800d070 <move_window>
 800d460:	4603      	mov	r3, r0
 800d462:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d464:	7ffb      	ldrb	r3, [r7, #31]
 800d466:	2b00      	cmp	r3, #0
 800d468:	d146      	bne.n	800d4f8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800d46a:	68fb      	ldr	r3, [r7, #12]
 800d46c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	005b      	lsls	r3, r3, #1
 800d474:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800d478:	4413      	add	r3, r2
 800d47a:	687a      	ldr	r2, [r7, #4]
 800d47c:	b292      	uxth	r2, r2
 800d47e:	4611      	mov	r1, r2
 800d480:	4618      	mov	r0, r3
 800d482:	f7ff fb7f 	bl	800cb84 <st_word>
			fs->wflag = 1;
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	2201      	movs	r2, #1
 800d48a:	70da      	strb	r2, [r3, #3]
			break;
 800d48c:	e037      	b.n	800d4fe <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	6a1a      	ldr	r2, [r3, #32]
 800d492:	68bb      	ldr	r3, [r7, #8]
 800d494:	09db      	lsrs	r3, r3, #7
 800d496:	4413      	add	r3, r2
 800d498:	4619      	mov	r1, r3
 800d49a:	68f8      	ldr	r0, [r7, #12]
 800d49c:	f7ff fde8 	bl	800d070 <move_window>
 800d4a0:	4603      	mov	r3, r0
 800d4a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800d4a4:	7ffb      	ldrb	r3, [r7, #31]
 800d4a6:	2b00      	cmp	r3, #0
 800d4a8:	d128      	bne.n	800d4fc <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4b6:	68bb      	ldr	r3, [r7, #8]
 800d4b8:	009b      	lsls	r3, r3, #2
 800d4ba:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4be:	4413      	add	r3, r2
 800d4c0:	4618      	mov	r0, r3
 800d4c2:	f7ff fb3c 	bl	800cb3e <ld_dword>
 800d4c6:	4603      	mov	r3, r0
 800d4c8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800d4cc:	4323      	orrs	r3, r4
 800d4ce:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d4d6:	68bb      	ldr	r3, [r7, #8]
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d4de:	4413      	add	r3, r2
 800d4e0:	6879      	ldr	r1, [r7, #4]
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7ff fb69 	bl	800cbba <st_dword>
			fs->wflag = 1;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	2201      	movs	r2, #1
 800d4ec:	70da      	strb	r2, [r3, #3]
			break;
 800d4ee:	e006      	b.n	800d4fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4f0:	bf00      	nop
 800d4f2:	e004      	b.n	800d4fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4f4:	bf00      	nop
 800d4f6:	e002      	b.n	800d4fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4f8:	bf00      	nop
 800d4fa:	e000      	b.n	800d4fe <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d4fc:	bf00      	nop
		}
	}
	return res;
 800d4fe:	7ffb      	ldrb	r3, [r7, #31]
}
 800d500:	4618      	mov	r0, r3
 800d502:	3724      	adds	r7, #36	@ 0x24
 800d504:	46bd      	mov	sp, r7
 800d506:	bd90      	pop	{r4, r7, pc}

0800d508 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d508:	b580      	push	{r7, lr}
 800d50a:	b088      	sub	sp, #32
 800d50c:	af00      	add	r7, sp, #0
 800d50e:	60f8      	str	r0, [r7, #12]
 800d510:	60b9      	str	r1, [r7, #8]
 800d512:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d514:	2300      	movs	r3, #0
 800d516:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	681b      	ldr	r3, [r3, #0]
 800d51c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d51e:	68bb      	ldr	r3, [r7, #8]
 800d520:	2b01      	cmp	r3, #1
 800d522:	d904      	bls.n	800d52e <remove_chain+0x26>
 800d524:	69bb      	ldr	r3, [r7, #24]
 800d526:	695b      	ldr	r3, [r3, #20]
 800d528:	68ba      	ldr	r2, [r7, #8]
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d301      	bcc.n	800d532 <remove_chain+0x2a>
 800d52e:	2302      	movs	r3, #2
 800d530:	e04b      	b.n	800d5ca <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d00c      	beq.n	800d552 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d538:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d53c:	6879      	ldr	r1, [r7, #4]
 800d53e:	69b8      	ldr	r0, [r7, #24]
 800d540:	f7ff fef8 	bl	800d334 <put_fat>
 800d544:	4603      	mov	r3, r0
 800d546:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d548:	7ffb      	ldrb	r3, [r7, #31]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d001      	beq.n	800d552 <remove_chain+0x4a>
 800d54e:	7ffb      	ldrb	r3, [r7, #31]
 800d550:	e03b      	b.n	800d5ca <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d552:	68b9      	ldr	r1, [r7, #8]
 800d554:	68f8      	ldr	r0, [r7, #12]
 800d556:	f7ff fe46 	bl	800d1e6 <get_fat>
 800d55a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	2b00      	cmp	r3, #0
 800d560:	d031      	beq.n	800d5c6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d562:	697b      	ldr	r3, [r7, #20]
 800d564:	2b01      	cmp	r3, #1
 800d566:	d101      	bne.n	800d56c <remove_chain+0x64>
 800d568:	2302      	movs	r3, #2
 800d56a:	e02e      	b.n	800d5ca <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d56c:	697b      	ldr	r3, [r7, #20]
 800d56e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d572:	d101      	bne.n	800d578 <remove_chain+0x70>
 800d574:	2301      	movs	r3, #1
 800d576:	e028      	b.n	800d5ca <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d578:	2200      	movs	r2, #0
 800d57a:	68b9      	ldr	r1, [r7, #8]
 800d57c:	69b8      	ldr	r0, [r7, #24]
 800d57e:	f7ff fed9 	bl	800d334 <put_fat>
 800d582:	4603      	mov	r3, r0
 800d584:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d586:	7ffb      	ldrb	r3, [r7, #31]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d001      	beq.n	800d590 <remove_chain+0x88>
 800d58c:	7ffb      	ldrb	r3, [r7, #31]
 800d58e:	e01c      	b.n	800d5ca <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d590:	69bb      	ldr	r3, [r7, #24]
 800d592:	691a      	ldr	r2, [r3, #16]
 800d594:	69bb      	ldr	r3, [r7, #24]
 800d596:	695b      	ldr	r3, [r3, #20]
 800d598:	3b02      	subs	r3, #2
 800d59a:	429a      	cmp	r2, r3
 800d59c:	d20b      	bcs.n	800d5b6 <remove_chain+0xae>
			fs->free_clst++;
 800d59e:	69bb      	ldr	r3, [r7, #24]
 800d5a0:	691b      	ldr	r3, [r3, #16]
 800d5a2:	1c5a      	adds	r2, r3, #1
 800d5a4:	69bb      	ldr	r3, [r7, #24]
 800d5a6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d5a8:	69bb      	ldr	r3, [r7, #24]
 800d5aa:	791b      	ldrb	r3, [r3, #4]
 800d5ac:	f043 0301 	orr.w	r3, r3, #1
 800d5b0:	b2da      	uxtb	r2, r3
 800d5b2:	69bb      	ldr	r3, [r7, #24]
 800d5b4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d5b6:	697b      	ldr	r3, [r7, #20]
 800d5b8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d5ba:	69bb      	ldr	r3, [r7, #24]
 800d5bc:	695b      	ldr	r3, [r3, #20]
 800d5be:	68ba      	ldr	r2, [r7, #8]
 800d5c0:	429a      	cmp	r2, r3
 800d5c2:	d3c6      	bcc.n	800d552 <remove_chain+0x4a>
 800d5c4:	e000      	b.n	800d5c8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d5c6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	3720      	adds	r7, #32
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bd80      	pop	{r7, pc}

0800d5d2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d5d2:	b580      	push	{r7, lr}
 800d5d4:	b088      	sub	sp, #32
 800d5d6:	af00      	add	r7, sp, #0
 800d5d8:	6078      	str	r0, [r7, #4]
 800d5da:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d10d      	bne.n	800d604 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	68db      	ldr	r3, [r3, #12]
 800d5ec:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d5ee:	69bb      	ldr	r3, [r7, #24]
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d004      	beq.n	800d5fe <create_chain+0x2c>
 800d5f4:	693b      	ldr	r3, [r7, #16]
 800d5f6:	695b      	ldr	r3, [r3, #20]
 800d5f8:	69ba      	ldr	r2, [r7, #24]
 800d5fa:	429a      	cmp	r2, r3
 800d5fc:	d31b      	bcc.n	800d636 <create_chain+0x64>
 800d5fe:	2301      	movs	r3, #1
 800d600:	61bb      	str	r3, [r7, #24]
 800d602:	e018      	b.n	800d636 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d604:	6839      	ldr	r1, [r7, #0]
 800d606:	6878      	ldr	r0, [r7, #4]
 800d608:	f7ff fded 	bl	800d1e6 <get_fat>
 800d60c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d60e:	68fb      	ldr	r3, [r7, #12]
 800d610:	2b01      	cmp	r3, #1
 800d612:	d801      	bhi.n	800d618 <create_chain+0x46>
 800d614:	2301      	movs	r3, #1
 800d616:	e070      	b.n	800d6fa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d61e:	d101      	bne.n	800d624 <create_chain+0x52>
 800d620:	68fb      	ldr	r3, [r7, #12]
 800d622:	e06a      	b.n	800d6fa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d624:	693b      	ldr	r3, [r7, #16]
 800d626:	695b      	ldr	r3, [r3, #20]
 800d628:	68fa      	ldr	r2, [r7, #12]
 800d62a:	429a      	cmp	r2, r3
 800d62c:	d201      	bcs.n	800d632 <create_chain+0x60>
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	e063      	b.n	800d6fa <create_chain+0x128>
		scl = clst;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d636:	69bb      	ldr	r3, [r7, #24]
 800d638:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d63a:	69fb      	ldr	r3, [r7, #28]
 800d63c:	3301      	adds	r3, #1
 800d63e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d640:	693b      	ldr	r3, [r7, #16]
 800d642:	695b      	ldr	r3, [r3, #20]
 800d644:	69fa      	ldr	r2, [r7, #28]
 800d646:	429a      	cmp	r2, r3
 800d648:	d307      	bcc.n	800d65a <create_chain+0x88>
				ncl = 2;
 800d64a:	2302      	movs	r3, #2
 800d64c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d64e:	69fa      	ldr	r2, [r7, #28]
 800d650:	69bb      	ldr	r3, [r7, #24]
 800d652:	429a      	cmp	r2, r3
 800d654:	d901      	bls.n	800d65a <create_chain+0x88>
 800d656:	2300      	movs	r3, #0
 800d658:	e04f      	b.n	800d6fa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d65a:	69f9      	ldr	r1, [r7, #28]
 800d65c:	6878      	ldr	r0, [r7, #4]
 800d65e:	f7ff fdc2 	bl	800d1e6 <get_fat>
 800d662:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d664:	68fb      	ldr	r3, [r7, #12]
 800d666:	2b00      	cmp	r3, #0
 800d668:	d00e      	beq.n	800d688 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2b01      	cmp	r3, #1
 800d66e:	d003      	beq.n	800d678 <create_chain+0xa6>
 800d670:	68fb      	ldr	r3, [r7, #12]
 800d672:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d676:	d101      	bne.n	800d67c <create_chain+0xaa>
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	e03e      	b.n	800d6fa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d67c:	69fa      	ldr	r2, [r7, #28]
 800d67e:	69bb      	ldr	r3, [r7, #24]
 800d680:	429a      	cmp	r2, r3
 800d682:	d1da      	bne.n	800d63a <create_chain+0x68>
 800d684:	2300      	movs	r3, #0
 800d686:	e038      	b.n	800d6fa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d688:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d68a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d68e:	69f9      	ldr	r1, [r7, #28]
 800d690:	6938      	ldr	r0, [r7, #16]
 800d692:	f7ff fe4f 	bl	800d334 <put_fat>
 800d696:	4603      	mov	r3, r0
 800d698:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d69a:	7dfb      	ldrb	r3, [r7, #23]
 800d69c:	2b00      	cmp	r3, #0
 800d69e:	d109      	bne.n	800d6b4 <create_chain+0xe2>
 800d6a0:	683b      	ldr	r3, [r7, #0]
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d006      	beq.n	800d6b4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d6a6:	69fa      	ldr	r2, [r7, #28]
 800d6a8:	6839      	ldr	r1, [r7, #0]
 800d6aa:	6938      	ldr	r0, [r7, #16]
 800d6ac:	f7ff fe42 	bl	800d334 <put_fat>
 800d6b0:	4603      	mov	r3, r0
 800d6b2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d6b4:	7dfb      	ldrb	r3, [r7, #23]
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d116      	bne.n	800d6e8 <create_chain+0x116>
		fs->last_clst = ncl;
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	69fa      	ldr	r2, [r7, #28]
 800d6be:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	691a      	ldr	r2, [r3, #16]
 800d6c4:	693b      	ldr	r3, [r7, #16]
 800d6c6:	695b      	ldr	r3, [r3, #20]
 800d6c8:	3b02      	subs	r3, #2
 800d6ca:	429a      	cmp	r2, r3
 800d6cc:	d804      	bhi.n	800d6d8 <create_chain+0x106>
 800d6ce:	693b      	ldr	r3, [r7, #16]
 800d6d0:	691b      	ldr	r3, [r3, #16]
 800d6d2:	1e5a      	subs	r2, r3, #1
 800d6d4:	693b      	ldr	r3, [r7, #16]
 800d6d6:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d6d8:	693b      	ldr	r3, [r7, #16]
 800d6da:	791b      	ldrb	r3, [r3, #4]
 800d6dc:	f043 0301 	orr.w	r3, r3, #1
 800d6e0:	b2da      	uxtb	r2, r3
 800d6e2:	693b      	ldr	r3, [r7, #16]
 800d6e4:	711a      	strb	r2, [r3, #4]
 800d6e6:	e007      	b.n	800d6f8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d6e8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ea:	2b01      	cmp	r3, #1
 800d6ec:	d102      	bne.n	800d6f4 <create_chain+0x122>
 800d6ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d6f2:	e000      	b.n	800d6f6 <create_chain+0x124>
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d6f8:	69fb      	ldr	r3, [r7, #28]
}
 800d6fa:	4618      	mov	r0, r3
 800d6fc:	3720      	adds	r7, #32
 800d6fe:	46bd      	mov	sp, r7
 800d700:	bd80      	pop	{r7, pc}

0800d702 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d702:	b480      	push	{r7}
 800d704:	b087      	sub	sp, #28
 800d706:	af00      	add	r7, sp, #0
 800d708:	6078      	str	r0, [r7, #4]
 800d70a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d712:	687b      	ldr	r3, [r7, #4]
 800d714:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d716:	3304      	adds	r3, #4
 800d718:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d71a:	683b      	ldr	r3, [r7, #0]
 800d71c:	0a5b      	lsrs	r3, r3, #9
 800d71e:	68fa      	ldr	r2, [r7, #12]
 800d720:	8952      	ldrh	r2, [r2, #10]
 800d722:	fbb3 f3f2 	udiv	r3, r3, r2
 800d726:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d728:	693b      	ldr	r3, [r7, #16]
 800d72a:	1d1a      	adds	r2, r3, #4
 800d72c:	613a      	str	r2, [r7, #16]
 800d72e:	681b      	ldr	r3, [r3, #0]
 800d730:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d732:	68bb      	ldr	r3, [r7, #8]
 800d734:	2b00      	cmp	r3, #0
 800d736:	d101      	bne.n	800d73c <clmt_clust+0x3a>
 800d738:	2300      	movs	r3, #0
 800d73a:	e010      	b.n	800d75e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d73c:	697a      	ldr	r2, [r7, #20]
 800d73e:	68bb      	ldr	r3, [r7, #8]
 800d740:	429a      	cmp	r2, r3
 800d742:	d307      	bcc.n	800d754 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d744:	697a      	ldr	r2, [r7, #20]
 800d746:	68bb      	ldr	r3, [r7, #8]
 800d748:	1ad3      	subs	r3, r2, r3
 800d74a:	617b      	str	r3, [r7, #20]
 800d74c:	693b      	ldr	r3, [r7, #16]
 800d74e:	3304      	adds	r3, #4
 800d750:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d752:	e7e9      	b.n	800d728 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d754:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	681a      	ldr	r2, [r3, #0]
 800d75a:	697b      	ldr	r3, [r7, #20]
 800d75c:	4413      	add	r3, r2
}
 800d75e:	4618      	mov	r0, r3
 800d760:	371c      	adds	r7, #28
 800d762:	46bd      	mov	sp, r7
 800d764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d768:	4770      	bx	lr

0800d76a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d76a:	b580      	push	{r7, lr}
 800d76c:	b086      	sub	sp, #24
 800d76e:	af00      	add	r7, sp, #0
 800d770:	6078      	str	r0, [r7, #4]
 800d772:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d77a:	683b      	ldr	r3, [r7, #0]
 800d77c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d780:	d204      	bcs.n	800d78c <dir_sdi+0x22>
 800d782:	683b      	ldr	r3, [r7, #0]
 800d784:	f003 031f 	and.w	r3, r3, #31
 800d788:	2b00      	cmp	r3, #0
 800d78a:	d001      	beq.n	800d790 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d78c:	2302      	movs	r3, #2
 800d78e:	e063      	b.n	800d858 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d79c:	697b      	ldr	r3, [r7, #20]
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d106      	bne.n	800d7b0 <dir_sdi+0x46>
 800d7a2:	693b      	ldr	r3, [r7, #16]
 800d7a4:	781b      	ldrb	r3, [r3, #0]
 800d7a6:	2b02      	cmp	r3, #2
 800d7a8:	d902      	bls.n	800d7b0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7ae:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	2b00      	cmp	r3, #0
 800d7b4:	d10c      	bne.n	800d7d0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d7b6:	683b      	ldr	r3, [r7, #0]
 800d7b8:	095b      	lsrs	r3, r3, #5
 800d7ba:	693a      	ldr	r2, [r7, #16]
 800d7bc:	8912      	ldrh	r2, [r2, #8]
 800d7be:	4293      	cmp	r3, r2
 800d7c0:	d301      	bcc.n	800d7c6 <dir_sdi+0x5c>
 800d7c2:	2302      	movs	r3, #2
 800d7c4:	e048      	b.n	800d858 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d7c6:	693b      	ldr	r3, [r7, #16]
 800d7c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	61da      	str	r2, [r3, #28]
 800d7ce:	e029      	b.n	800d824 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	895b      	ldrh	r3, [r3, #10]
 800d7d4:	025b      	lsls	r3, r3, #9
 800d7d6:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d7d8:	e019      	b.n	800d80e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	6979      	ldr	r1, [r7, #20]
 800d7de:	4618      	mov	r0, r3
 800d7e0:	f7ff fd01 	bl	800d1e6 <get_fat>
 800d7e4:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d7e6:	697b      	ldr	r3, [r7, #20]
 800d7e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d7ec:	d101      	bne.n	800d7f2 <dir_sdi+0x88>
 800d7ee:	2301      	movs	r3, #1
 800d7f0:	e032      	b.n	800d858 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	2b01      	cmp	r3, #1
 800d7f6:	d904      	bls.n	800d802 <dir_sdi+0x98>
 800d7f8:	693b      	ldr	r3, [r7, #16]
 800d7fa:	695b      	ldr	r3, [r3, #20]
 800d7fc:	697a      	ldr	r2, [r7, #20]
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d301      	bcc.n	800d806 <dir_sdi+0x9c>
 800d802:	2302      	movs	r3, #2
 800d804:	e028      	b.n	800d858 <dir_sdi+0xee>
			ofs -= csz;
 800d806:	683a      	ldr	r2, [r7, #0]
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	1ad3      	subs	r3, r2, r3
 800d80c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d80e:	683a      	ldr	r2, [r7, #0]
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	429a      	cmp	r2, r3
 800d814:	d2e1      	bcs.n	800d7da <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d816:	6979      	ldr	r1, [r7, #20]
 800d818:	6938      	ldr	r0, [r7, #16]
 800d81a:	f7ff fcc5 	bl	800d1a8 <clust2sect>
 800d81e:	4602      	mov	r2, r0
 800d820:	687b      	ldr	r3, [r7, #4]
 800d822:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	697a      	ldr	r2, [r7, #20]
 800d828:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	69db      	ldr	r3, [r3, #28]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d101      	bne.n	800d836 <dir_sdi+0xcc>
 800d832:	2302      	movs	r3, #2
 800d834:	e010      	b.n	800d858 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	69da      	ldr	r2, [r3, #28]
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	0a5b      	lsrs	r3, r3, #9
 800d83e:	441a      	add	r2, r3
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d844:	693b      	ldr	r3, [r7, #16]
 800d846:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d84a:	683b      	ldr	r3, [r7, #0]
 800d84c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d850:	441a      	add	r2, r3
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d856:	2300      	movs	r3, #0
}
 800d858:	4618      	mov	r0, r3
 800d85a:	3718      	adds	r7, #24
 800d85c:	46bd      	mov	sp, r7
 800d85e:	bd80      	pop	{r7, pc}

0800d860 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b086      	sub	sp, #24
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	695b      	ldr	r3, [r3, #20]
 800d874:	3320      	adds	r3, #32
 800d876:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	69db      	ldr	r3, [r3, #28]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d003      	beq.n	800d888 <dir_next+0x28>
 800d880:	68bb      	ldr	r3, [r7, #8]
 800d882:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d886:	d301      	bcc.n	800d88c <dir_next+0x2c>
 800d888:	2304      	movs	r3, #4
 800d88a:	e0aa      	b.n	800d9e2 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d88c:	68bb      	ldr	r3, [r7, #8]
 800d88e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d892:	2b00      	cmp	r3, #0
 800d894:	f040 8098 	bne.w	800d9c8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	69db      	ldr	r3, [r3, #28]
 800d89c:	1c5a      	adds	r2, r3, #1
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d10b      	bne.n	800d8c2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d8aa:	68bb      	ldr	r3, [r7, #8]
 800d8ac:	095b      	lsrs	r3, r3, #5
 800d8ae:	68fa      	ldr	r2, [r7, #12]
 800d8b0:	8912      	ldrh	r2, [r2, #8]
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	f0c0 8088 	bcc.w	800d9c8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	2200      	movs	r2, #0
 800d8bc:	61da      	str	r2, [r3, #28]
 800d8be:	2304      	movs	r3, #4
 800d8c0:	e08f      	b.n	800d9e2 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d8c2:	68bb      	ldr	r3, [r7, #8]
 800d8c4:	0a5b      	lsrs	r3, r3, #9
 800d8c6:	68fa      	ldr	r2, [r7, #12]
 800d8c8:	8952      	ldrh	r2, [r2, #10]
 800d8ca:	3a01      	subs	r2, #1
 800d8cc:	4013      	ands	r3, r2
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d17a      	bne.n	800d9c8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d8d2:	687a      	ldr	r2, [r7, #4]
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	699b      	ldr	r3, [r3, #24]
 800d8d8:	4619      	mov	r1, r3
 800d8da:	4610      	mov	r0, r2
 800d8dc:	f7ff fc83 	bl	800d1e6 <get_fat>
 800d8e0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d8e2:	697b      	ldr	r3, [r7, #20]
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d801      	bhi.n	800d8ec <dir_next+0x8c>
 800d8e8:	2302      	movs	r3, #2
 800d8ea:	e07a      	b.n	800d9e2 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d8ec:	697b      	ldr	r3, [r7, #20]
 800d8ee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d8f2:	d101      	bne.n	800d8f8 <dir_next+0x98>
 800d8f4:	2301      	movs	r3, #1
 800d8f6:	e074      	b.n	800d9e2 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d8f8:	68fb      	ldr	r3, [r7, #12]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	697a      	ldr	r2, [r7, #20]
 800d8fe:	429a      	cmp	r2, r3
 800d900:	d358      	bcc.n	800d9b4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d902:	683b      	ldr	r3, [r7, #0]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d104      	bne.n	800d912 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d908:	687b      	ldr	r3, [r7, #4]
 800d90a:	2200      	movs	r2, #0
 800d90c:	61da      	str	r2, [r3, #28]
 800d90e:	2304      	movs	r3, #4
 800d910:	e067      	b.n	800d9e2 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d912:	687a      	ldr	r2, [r7, #4]
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	699b      	ldr	r3, [r3, #24]
 800d918:	4619      	mov	r1, r3
 800d91a:	4610      	mov	r0, r2
 800d91c:	f7ff fe59 	bl	800d5d2 <create_chain>
 800d920:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d922:	697b      	ldr	r3, [r7, #20]
 800d924:	2b00      	cmp	r3, #0
 800d926:	d101      	bne.n	800d92c <dir_next+0xcc>
 800d928:	2307      	movs	r3, #7
 800d92a:	e05a      	b.n	800d9e2 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d92c:	697b      	ldr	r3, [r7, #20]
 800d92e:	2b01      	cmp	r3, #1
 800d930:	d101      	bne.n	800d936 <dir_next+0xd6>
 800d932:	2302      	movs	r3, #2
 800d934:	e055      	b.n	800d9e2 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d93c:	d101      	bne.n	800d942 <dir_next+0xe2>
 800d93e:	2301      	movs	r3, #1
 800d940:	e04f      	b.n	800d9e2 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d942:	68f8      	ldr	r0, [r7, #12]
 800d944:	f7ff fb50 	bl	800cfe8 <sync_window>
 800d948:	4603      	mov	r3, r0
 800d94a:	2b00      	cmp	r3, #0
 800d94c:	d001      	beq.n	800d952 <dir_next+0xf2>
 800d94e:	2301      	movs	r3, #1
 800d950:	e047      	b.n	800d9e2 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d952:	68fb      	ldr	r3, [r7, #12]
 800d954:	3330      	adds	r3, #48	@ 0x30
 800d956:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d95a:	2100      	movs	r1, #0
 800d95c:	4618      	mov	r0, r3
 800d95e:	f7ff f979 	bl	800cc54 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d962:	2300      	movs	r3, #0
 800d964:	613b      	str	r3, [r7, #16]
 800d966:	6979      	ldr	r1, [r7, #20]
 800d968:	68f8      	ldr	r0, [r7, #12]
 800d96a:	f7ff fc1d 	bl	800d1a8 <clust2sect>
 800d96e:	4602      	mov	r2, r0
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d974:	e012      	b.n	800d99c <dir_next+0x13c>
						fs->wflag = 1;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2201      	movs	r2, #1
 800d97a:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d97c:	68f8      	ldr	r0, [r7, #12]
 800d97e:	f7ff fb33 	bl	800cfe8 <sync_window>
 800d982:	4603      	mov	r3, r0
 800d984:	2b00      	cmp	r3, #0
 800d986:	d001      	beq.n	800d98c <dir_next+0x12c>
 800d988:	2301      	movs	r3, #1
 800d98a:	e02a      	b.n	800d9e2 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d98c:	693b      	ldr	r3, [r7, #16]
 800d98e:	3301      	adds	r3, #1
 800d990:	613b      	str	r3, [r7, #16]
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d996:	1c5a      	adds	r2, r3, #1
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	895b      	ldrh	r3, [r3, #10]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	4293      	cmp	r3, r2
 800d9a6:	d3e6      	bcc.n	800d976 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	1ad2      	subs	r2, r2, r3
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d9b4:	687b      	ldr	r3, [r7, #4]
 800d9b6:	697a      	ldr	r2, [r7, #20]
 800d9b8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d9ba:	6979      	ldr	r1, [r7, #20]
 800d9bc:	68f8      	ldr	r0, [r7, #12]
 800d9be:	f7ff fbf3 	bl	800d1a8 <clust2sect>
 800d9c2:	4602      	mov	r2, r0
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d9c8:	687b      	ldr	r3, [r7, #4]
 800d9ca:	68ba      	ldr	r2, [r7, #8]
 800d9cc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d9ce:	68fb      	ldr	r3, [r7, #12]
 800d9d0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9da:	441a      	add	r2, r3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d9e0:	2300      	movs	r3, #0
}
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	3718      	adds	r7, #24
 800d9e6:	46bd      	mov	sp, r7
 800d9e8:	bd80      	pop	{r7, pc}

0800d9ea <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d9ea:	b580      	push	{r7, lr}
 800d9ec:	b086      	sub	sp, #24
 800d9ee:	af00      	add	r7, sp, #0
 800d9f0:	6078      	str	r0, [r7, #4]
 800d9f2:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	681b      	ldr	r3, [r3, #0]
 800d9f8:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d9fa:	2100      	movs	r1, #0
 800d9fc:	6878      	ldr	r0, [r7, #4]
 800d9fe:	f7ff feb4 	bl	800d76a <dir_sdi>
 800da02:	4603      	mov	r3, r0
 800da04:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800da06:	7dfb      	ldrb	r3, [r7, #23]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d12b      	bne.n	800da64 <dir_alloc+0x7a>
		n = 0;
 800da0c:	2300      	movs	r3, #0
 800da0e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	69db      	ldr	r3, [r3, #28]
 800da14:	4619      	mov	r1, r3
 800da16:	68f8      	ldr	r0, [r7, #12]
 800da18:	f7ff fb2a 	bl	800d070 <move_window>
 800da1c:	4603      	mov	r3, r0
 800da1e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800da20:	7dfb      	ldrb	r3, [r7, #23]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d11d      	bne.n	800da62 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	6a1b      	ldr	r3, [r3, #32]
 800da2a:	781b      	ldrb	r3, [r3, #0]
 800da2c:	2be5      	cmp	r3, #229	@ 0xe5
 800da2e:	d004      	beq.n	800da3a <dir_alloc+0x50>
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	6a1b      	ldr	r3, [r3, #32]
 800da34:	781b      	ldrb	r3, [r3, #0]
 800da36:	2b00      	cmp	r3, #0
 800da38:	d107      	bne.n	800da4a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800da3a:	693b      	ldr	r3, [r7, #16]
 800da3c:	3301      	adds	r3, #1
 800da3e:	613b      	str	r3, [r7, #16]
 800da40:	693a      	ldr	r2, [r7, #16]
 800da42:	683b      	ldr	r3, [r7, #0]
 800da44:	429a      	cmp	r2, r3
 800da46:	d102      	bne.n	800da4e <dir_alloc+0x64>
 800da48:	e00c      	b.n	800da64 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800da4a:	2300      	movs	r3, #0
 800da4c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800da4e:	2101      	movs	r1, #1
 800da50:	6878      	ldr	r0, [r7, #4]
 800da52:	f7ff ff05 	bl	800d860 <dir_next>
 800da56:	4603      	mov	r3, r0
 800da58:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800da5a:	7dfb      	ldrb	r3, [r7, #23]
 800da5c:	2b00      	cmp	r3, #0
 800da5e:	d0d7      	beq.n	800da10 <dir_alloc+0x26>
 800da60:	e000      	b.n	800da64 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800da62:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800da64:	7dfb      	ldrb	r3, [r7, #23]
 800da66:	2b04      	cmp	r3, #4
 800da68:	d101      	bne.n	800da6e <dir_alloc+0x84>
 800da6a:	2307      	movs	r3, #7
 800da6c:	75fb      	strb	r3, [r7, #23]
	return res;
 800da6e:	7dfb      	ldrb	r3, [r7, #23]
}
 800da70:	4618      	mov	r0, r3
 800da72:	3718      	adds	r7, #24
 800da74:	46bd      	mov	sp, r7
 800da76:	bd80      	pop	{r7, pc}

0800da78 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	331a      	adds	r3, #26
 800da86:	4618      	mov	r0, r3
 800da88:	f7ff f840 	bl	800cb0c <ld_word>
 800da8c:	4603      	mov	r3, r0
 800da8e:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	781b      	ldrb	r3, [r3, #0]
 800da94:	2b03      	cmp	r3, #3
 800da96:	d109      	bne.n	800daac <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	3314      	adds	r3, #20
 800da9c:	4618      	mov	r0, r3
 800da9e:	f7ff f835 	bl	800cb0c <ld_word>
 800daa2:	4603      	mov	r3, r0
 800daa4:	041b      	lsls	r3, r3, #16
 800daa6:	68fa      	ldr	r2, [r7, #12]
 800daa8:	4313      	orrs	r3, r2
 800daaa:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800daac:	68fb      	ldr	r3, [r7, #12]
}
 800daae:	4618      	mov	r0, r3
 800dab0:	3710      	adds	r7, #16
 800dab2:	46bd      	mov	sp, r7
 800dab4:	bd80      	pop	{r7, pc}

0800dab6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800dab6:	b580      	push	{r7, lr}
 800dab8:	b084      	sub	sp, #16
 800daba:	af00      	add	r7, sp, #0
 800dabc:	60f8      	str	r0, [r7, #12]
 800dabe:	60b9      	str	r1, [r7, #8]
 800dac0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800dac2:	68bb      	ldr	r3, [r7, #8]
 800dac4:	331a      	adds	r3, #26
 800dac6:	687a      	ldr	r2, [r7, #4]
 800dac8:	b292      	uxth	r2, r2
 800daca:	4611      	mov	r1, r2
 800dacc:	4618      	mov	r0, r3
 800dace:	f7ff f859 	bl	800cb84 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d109      	bne.n	800daee <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800dada:	68bb      	ldr	r3, [r7, #8]
 800dadc:	f103 0214 	add.w	r2, r3, #20
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	0c1b      	lsrs	r3, r3, #16
 800dae4:	b29b      	uxth	r3, r3
 800dae6:	4619      	mov	r1, r3
 800dae8:	4610      	mov	r0, r2
 800daea:	f7ff f84b 	bl	800cb84 <st_word>
	}
}
 800daee:	bf00      	nop
 800daf0:	3710      	adds	r7, #16
 800daf2:	46bd      	mov	sp, r7
 800daf4:	bd80      	pop	{r7, pc}

0800daf6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800daf6:	b580      	push	{r7, lr}
 800daf8:	b086      	sub	sp, #24
 800dafa:	af00      	add	r7, sp, #0
 800dafc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800db04:	2100      	movs	r1, #0
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	f7ff fe2f 	bl	800d76a <dir_sdi>
 800db0c:	4603      	mov	r3, r0
 800db0e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800db10:	7dfb      	ldrb	r3, [r7, #23]
 800db12:	2b00      	cmp	r3, #0
 800db14:	d001      	beq.n	800db1a <dir_find+0x24>
 800db16:	7dfb      	ldrb	r3, [r7, #23]
 800db18:	e03e      	b.n	800db98 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	69db      	ldr	r3, [r3, #28]
 800db1e:	4619      	mov	r1, r3
 800db20:	6938      	ldr	r0, [r7, #16]
 800db22:	f7ff faa5 	bl	800d070 <move_window>
 800db26:	4603      	mov	r3, r0
 800db28:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800db2a:	7dfb      	ldrb	r3, [r7, #23]
 800db2c:	2b00      	cmp	r3, #0
 800db2e:	d12f      	bne.n	800db90 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	6a1b      	ldr	r3, [r3, #32]
 800db34:	781b      	ldrb	r3, [r3, #0]
 800db36:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800db38:	7bfb      	ldrb	r3, [r7, #15]
 800db3a:	2b00      	cmp	r3, #0
 800db3c:	d102      	bne.n	800db44 <dir_find+0x4e>
 800db3e:	2304      	movs	r3, #4
 800db40:	75fb      	strb	r3, [r7, #23]
 800db42:	e028      	b.n	800db96 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	330b      	adds	r3, #11
 800db4a:	781b      	ldrb	r3, [r3, #0]
 800db4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800db50:	b2da      	uxtb	r2, r3
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	6a1b      	ldr	r3, [r3, #32]
 800db5a:	330b      	adds	r3, #11
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	f003 0308 	and.w	r3, r3, #8
 800db62:	2b00      	cmp	r3, #0
 800db64:	d10a      	bne.n	800db7c <dir_find+0x86>
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	6a18      	ldr	r0, [r3, #32]
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	3324      	adds	r3, #36	@ 0x24
 800db6e:	220b      	movs	r2, #11
 800db70:	4619      	mov	r1, r3
 800db72:	f7ff f88a 	bl	800cc8a <mem_cmp>
 800db76:	4603      	mov	r3, r0
 800db78:	2b00      	cmp	r3, #0
 800db7a:	d00b      	beq.n	800db94 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800db7c:	2100      	movs	r1, #0
 800db7e:	6878      	ldr	r0, [r7, #4]
 800db80:	f7ff fe6e 	bl	800d860 <dir_next>
 800db84:	4603      	mov	r3, r0
 800db86:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800db88:	7dfb      	ldrb	r3, [r7, #23]
 800db8a:	2b00      	cmp	r3, #0
 800db8c:	d0c5      	beq.n	800db1a <dir_find+0x24>
 800db8e:	e002      	b.n	800db96 <dir_find+0xa0>
		if (res != FR_OK) break;
 800db90:	bf00      	nop
 800db92:	e000      	b.n	800db96 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800db94:	bf00      	nop

	return res;
 800db96:	7dfb      	ldrb	r3, [r7, #23]
}
 800db98:	4618      	mov	r0, r3
 800db9a:	3718      	adds	r7, #24
 800db9c:	46bd      	mov	sp, r7
 800db9e:	bd80      	pop	{r7, pc}

0800dba0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800dba0:	b580      	push	{r7, lr}
 800dba2:	b084      	sub	sp, #16
 800dba4:	af00      	add	r7, sp, #0
 800dba6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800dbae:	2101      	movs	r1, #1
 800dbb0:	6878      	ldr	r0, [r7, #4]
 800dbb2:	f7ff ff1a 	bl	800d9ea <dir_alloc>
 800dbb6:	4603      	mov	r3, r0
 800dbb8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800dbba:	7bfb      	ldrb	r3, [r7, #15]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	d11c      	bne.n	800dbfa <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	69db      	ldr	r3, [r3, #28]
 800dbc4:	4619      	mov	r1, r3
 800dbc6:	68b8      	ldr	r0, [r7, #8]
 800dbc8:	f7ff fa52 	bl	800d070 <move_window>
 800dbcc:	4603      	mov	r3, r0
 800dbce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800dbd0:	7bfb      	ldrb	r3, [r7, #15]
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	d111      	bne.n	800dbfa <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800dbd6:	687b      	ldr	r3, [r7, #4]
 800dbd8:	6a1b      	ldr	r3, [r3, #32]
 800dbda:	2220      	movs	r2, #32
 800dbdc:	2100      	movs	r1, #0
 800dbde:	4618      	mov	r0, r3
 800dbe0:	f7ff f838 	bl	800cc54 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800dbe4:	687b      	ldr	r3, [r7, #4]
 800dbe6:	6a18      	ldr	r0, [r3, #32]
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	3324      	adds	r3, #36	@ 0x24
 800dbec:	220b      	movs	r2, #11
 800dbee:	4619      	mov	r1, r3
 800dbf0:	f7ff f80f 	bl	800cc12 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800dbf4:	68bb      	ldr	r3, [r7, #8]
 800dbf6:	2201      	movs	r2, #1
 800dbf8:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800dbfa:	7bfb      	ldrb	r3, [r7, #15]
}
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	3710      	adds	r7, #16
 800dc00:	46bd      	mov	sp, r7
 800dc02:	bd80      	pop	{r7, pc}

0800dc04 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800dc04:	b580      	push	{r7, lr}
 800dc06:	b088      	sub	sp, #32
 800dc08:	af00      	add	r7, sp, #0
 800dc0a:	6078      	str	r0, [r7, #4]
 800dc0c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800dc0e:	683b      	ldr	r3, [r7, #0]
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	60fb      	str	r3, [r7, #12]
 800dc14:	687b      	ldr	r3, [r7, #4]
 800dc16:	3324      	adds	r3, #36	@ 0x24
 800dc18:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800dc1a:	220b      	movs	r2, #11
 800dc1c:	2120      	movs	r1, #32
 800dc1e:	68b8      	ldr	r0, [r7, #8]
 800dc20:	f7ff f818 	bl	800cc54 <mem_set>
	si = i = 0; ni = 8;
 800dc24:	2300      	movs	r3, #0
 800dc26:	613b      	str	r3, [r7, #16]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	61fb      	str	r3, [r7, #28]
 800dc2c:	2308      	movs	r3, #8
 800dc2e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800dc30:	69fb      	ldr	r3, [r7, #28]
 800dc32:	1c5a      	adds	r2, r3, #1
 800dc34:	61fa      	str	r2, [r7, #28]
 800dc36:	68fa      	ldr	r2, [r7, #12]
 800dc38:	4413      	add	r3, r2
 800dc3a:	781b      	ldrb	r3, [r3, #0]
 800dc3c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dc3e:	7efb      	ldrb	r3, [r7, #27]
 800dc40:	2b20      	cmp	r3, #32
 800dc42:	d94e      	bls.n	800dce2 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800dc44:	7efb      	ldrb	r3, [r7, #27]
 800dc46:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc48:	d006      	beq.n	800dc58 <create_name+0x54>
 800dc4a:	7efb      	ldrb	r3, [r7, #27]
 800dc4c:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc4e:	d110      	bne.n	800dc72 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800dc50:	e002      	b.n	800dc58 <create_name+0x54>
 800dc52:	69fb      	ldr	r3, [r7, #28]
 800dc54:	3301      	adds	r3, #1
 800dc56:	61fb      	str	r3, [r7, #28]
 800dc58:	68fa      	ldr	r2, [r7, #12]
 800dc5a:	69fb      	ldr	r3, [r7, #28]
 800dc5c:	4413      	add	r3, r2
 800dc5e:	781b      	ldrb	r3, [r3, #0]
 800dc60:	2b2f      	cmp	r3, #47	@ 0x2f
 800dc62:	d0f6      	beq.n	800dc52 <create_name+0x4e>
 800dc64:	68fa      	ldr	r2, [r7, #12]
 800dc66:	69fb      	ldr	r3, [r7, #28]
 800dc68:	4413      	add	r3, r2
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	2b5c      	cmp	r3, #92	@ 0x5c
 800dc6e:	d0f0      	beq.n	800dc52 <create_name+0x4e>
			break;
 800dc70:	e038      	b.n	800dce4 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800dc72:	7efb      	ldrb	r3, [r7, #27]
 800dc74:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc76:	d003      	beq.n	800dc80 <create_name+0x7c>
 800dc78:	693a      	ldr	r2, [r7, #16]
 800dc7a:	697b      	ldr	r3, [r7, #20]
 800dc7c:	429a      	cmp	r2, r3
 800dc7e:	d30c      	bcc.n	800dc9a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800dc80:	697b      	ldr	r3, [r7, #20]
 800dc82:	2b0b      	cmp	r3, #11
 800dc84:	d002      	beq.n	800dc8c <create_name+0x88>
 800dc86:	7efb      	ldrb	r3, [r7, #27]
 800dc88:	2b2e      	cmp	r3, #46	@ 0x2e
 800dc8a:	d001      	beq.n	800dc90 <create_name+0x8c>
 800dc8c:	2306      	movs	r3, #6
 800dc8e:	e044      	b.n	800dd1a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800dc90:	2308      	movs	r3, #8
 800dc92:	613b      	str	r3, [r7, #16]
 800dc94:	230b      	movs	r3, #11
 800dc96:	617b      	str	r3, [r7, #20]
			continue;
 800dc98:	e022      	b.n	800dce0 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800dc9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800dc9e:	2b00      	cmp	r3, #0
 800dca0:	da04      	bge.n	800dcac <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800dca2:	7efb      	ldrb	r3, [r7, #27]
 800dca4:	3b80      	subs	r3, #128	@ 0x80
 800dca6:	4a1f      	ldr	r2, [pc, #124]	@ (800dd24 <create_name+0x120>)
 800dca8:	5cd3      	ldrb	r3, [r2, r3]
 800dcaa:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800dcac:	7efb      	ldrb	r3, [r7, #27]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	481d      	ldr	r0, [pc, #116]	@ (800dd28 <create_name+0x124>)
 800dcb2:	f7ff f811 	bl	800ccd8 <chk_chr>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d001      	beq.n	800dcc0 <create_name+0xbc>
 800dcbc:	2306      	movs	r3, #6
 800dcbe:	e02c      	b.n	800dd1a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800dcc0:	7efb      	ldrb	r3, [r7, #27]
 800dcc2:	2b60      	cmp	r3, #96	@ 0x60
 800dcc4:	d905      	bls.n	800dcd2 <create_name+0xce>
 800dcc6:	7efb      	ldrb	r3, [r7, #27]
 800dcc8:	2b7a      	cmp	r3, #122	@ 0x7a
 800dcca:	d802      	bhi.n	800dcd2 <create_name+0xce>
 800dccc:	7efb      	ldrb	r3, [r7, #27]
 800dcce:	3b20      	subs	r3, #32
 800dcd0:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800dcd2:	693b      	ldr	r3, [r7, #16]
 800dcd4:	1c5a      	adds	r2, r3, #1
 800dcd6:	613a      	str	r2, [r7, #16]
 800dcd8:	68ba      	ldr	r2, [r7, #8]
 800dcda:	4413      	add	r3, r2
 800dcdc:	7efa      	ldrb	r2, [r7, #27]
 800dcde:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800dce0:	e7a6      	b.n	800dc30 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800dce2:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800dce4:	68fa      	ldr	r2, [r7, #12]
 800dce6:	69fb      	ldr	r3, [r7, #28]
 800dce8:	441a      	add	r2, r3
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800dcee:	693b      	ldr	r3, [r7, #16]
 800dcf0:	2b00      	cmp	r3, #0
 800dcf2:	d101      	bne.n	800dcf8 <create_name+0xf4>
 800dcf4:	2306      	movs	r3, #6
 800dcf6:	e010      	b.n	800dd1a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800dcf8:	68bb      	ldr	r3, [r7, #8]
 800dcfa:	781b      	ldrb	r3, [r3, #0]
 800dcfc:	2be5      	cmp	r3, #229	@ 0xe5
 800dcfe:	d102      	bne.n	800dd06 <create_name+0x102>
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	2205      	movs	r2, #5
 800dd04:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800dd06:	7efb      	ldrb	r3, [r7, #27]
 800dd08:	2b20      	cmp	r3, #32
 800dd0a:	d801      	bhi.n	800dd10 <create_name+0x10c>
 800dd0c:	2204      	movs	r2, #4
 800dd0e:	e000      	b.n	800dd12 <create_name+0x10e>
 800dd10:	2200      	movs	r2, #0
 800dd12:	68bb      	ldr	r3, [r7, #8]
 800dd14:	330b      	adds	r3, #11
 800dd16:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800dd18:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
<<<<<<< HEAD
 800dd1a:	4618      	mov	r0, r3
 800dd1c:	3720      	adds	r7, #32
 800dd1e:	46bd      	mov	sp, r7
 800dd20:	bd80      	pop	{r7, pc}
 800dd22:	bf00      	nop
 800dd24:	08017e60 	.word	0x08017e60
 800dd28:	080103e8 	.word	0x080103e8
=======
 800dd36:	4618      	mov	r0, r3
 800dd38:	3720      	adds	r7, #32
 800dd3a:	46bd      	mov	sp, r7
 800dd3c:	bd80      	pop	{r7, pc}
 800dd3e:	bf00      	nop
 800dd40:	08017e14 	.word	0x08017e14
 800dd44:	08010418 	.word	0x08010418
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800dd2c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800dd2c:	b580      	push	{r7, lr}
 800dd2e:	b086      	sub	sp, #24
 800dd30:	af00      	add	r7, sp, #0
 800dd32:	6078      	str	r0, [r7, #4]
 800dd34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800dd40:	e002      	b.n	800dd48 <follow_path+0x1c>
 800dd42:	683b      	ldr	r3, [r7, #0]
 800dd44:	3301      	adds	r3, #1
 800dd46:	603b      	str	r3, [r7, #0]
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	781b      	ldrb	r3, [r3, #0]
 800dd4c:	2b2f      	cmp	r3, #47	@ 0x2f
 800dd4e:	d0f8      	beq.n	800dd42 <follow_path+0x16>
 800dd50:	683b      	ldr	r3, [r7, #0]
 800dd52:	781b      	ldrb	r3, [r3, #0]
 800dd54:	2b5c      	cmp	r3, #92	@ 0x5c
 800dd56:	d0f4      	beq.n	800dd42 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800dd58:	693b      	ldr	r3, [r7, #16]
 800dd5a:	2200      	movs	r2, #0
 800dd5c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800dd5e:	683b      	ldr	r3, [r7, #0]
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	2b1f      	cmp	r3, #31
 800dd64:	d80a      	bhi.n	800dd7c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	2280      	movs	r2, #128	@ 0x80
 800dd6a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800dd6e:	2100      	movs	r1, #0
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7ff fcfa 	bl	800d76a <dir_sdi>
 800dd76:	4603      	mov	r3, r0
 800dd78:	75fb      	strb	r3, [r7, #23]
 800dd7a:	e043      	b.n	800de04 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800dd7c:	463b      	mov	r3, r7
 800dd7e:	4619      	mov	r1, r3
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f7ff ff3f 	bl	800dc04 <create_name>
 800dd86:	4603      	mov	r3, r0
 800dd88:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800dd8a:	7dfb      	ldrb	r3, [r7, #23]
 800dd8c:	2b00      	cmp	r3, #0
 800dd8e:	d134      	bne.n	800ddfa <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff feb0 	bl	800daf6 <dir_find>
 800dd96:	4603      	mov	r3, r0
 800dd98:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800dda0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800dda2:	7dfb      	ldrb	r3, [r7, #23]
 800dda4:	2b00      	cmp	r3, #0
 800dda6:	d00a      	beq.n	800ddbe <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800dda8:	7dfb      	ldrb	r3, [r7, #23]
 800ddaa:	2b04      	cmp	r3, #4
 800ddac:	d127      	bne.n	800ddfe <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800ddae:	7afb      	ldrb	r3, [r7, #11]
 800ddb0:	f003 0304 	and.w	r3, r3, #4
 800ddb4:	2b00      	cmp	r3, #0
 800ddb6:	d122      	bne.n	800ddfe <follow_path+0xd2>
 800ddb8:	2305      	movs	r3, #5
 800ddba:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800ddbc:	e01f      	b.n	800ddfe <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800ddbe:	7afb      	ldrb	r3, [r7, #11]
 800ddc0:	f003 0304 	and.w	r3, r3, #4
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d11c      	bne.n	800de02 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800ddc8:	693b      	ldr	r3, [r7, #16]
 800ddca:	799b      	ldrb	r3, [r3, #6]
 800ddcc:	f003 0310 	and.w	r3, r3, #16
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d102      	bne.n	800ddda <follow_path+0xae>
				res = FR_NO_PATH; break;
 800ddd4:	2305      	movs	r3, #5
 800ddd6:	75fb      	strb	r3, [r7, #23]
 800ddd8:	e014      	b.n	800de04 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800ddda:	68fb      	ldr	r3, [r7, #12]
 800dddc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	695b      	ldr	r3, [r3, #20]
 800dde4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dde8:	4413      	add	r3, r2
 800ddea:	4619      	mov	r1, r3
 800ddec:	68f8      	ldr	r0, [r7, #12]
 800ddee:	f7ff fe43 	bl	800da78 <ld_clust>
 800ddf2:	4602      	mov	r2, r0
 800ddf4:	693b      	ldr	r3, [r7, #16]
 800ddf6:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800ddf8:	e7c0      	b.n	800dd7c <follow_path+0x50>
			if (res != FR_OK) break;
 800ddfa:	bf00      	nop
 800ddfc:	e002      	b.n	800de04 <follow_path+0xd8>
				break;
 800ddfe:	bf00      	nop
 800de00:	e000      	b.n	800de04 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800de02:	bf00      	nop
			}
		}
	}

	return res;
 800de04:	7dfb      	ldrb	r3, [r7, #23]
}
 800de06:	4618      	mov	r0, r3
 800de08:	3718      	adds	r7, #24
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800de0e:	b480      	push	{r7}
 800de10:	b087      	sub	sp, #28
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800de16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800de1a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	681b      	ldr	r3, [r3, #0]
 800de20:	2b00      	cmp	r3, #0
 800de22:	d031      	beq.n	800de88 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800de24:	687b      	ldr	r3, [r7, #4]
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	617b      	str	r3, [r7, #20]
 800de2a:	e002      	b.n	800de32 <get_ldnumber+0x24>
 800de2c:	697b      	ldr	r3, [r7, #20]
 800de2e:	3301      	adds	r3, #1
 800de30:	617b      	str	r3, [r7, #20]
 800de32:	697b      	ldr	r3, [r7, #20]
 800de34:	781b      	ldrb	r3, [r3, #0]
 800de36:	2b20      	cmp	r3, #32
 800de38:	d903      	bls.n	800de42 <get_ldnumber+0x34>
 800de3a:	697b      	ldr	r3, [r7, #20]
 800de3c:	781b      	ldrb	r3, [r3, #0]
 800de3e:	2b3a      	cmp	r3, #58	@ 0x3a
 800de40:	d1f4      	bne.n	800de2c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800de42:	697b      	ldr	r3, [r7, #20]
 800de44:	781b      	ldrb	r3, [r3, #0]
 800de46:	2b3a      	cmp	r3, #58	@ 0x3a
 800de48:	d11c      	bne.n	800de84 <get_ldnumber+0x76>
			tp = *path;
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	681b      	ldr	r3, [r3, #0]
 800de4e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800de50:	68fb      	ldr	r3, [r7, #12]
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	60fa      	str	r2, [r7, #12]
 800de56:	781b      	ldrb	r3, [r3, #0]
 800de58:	3b30      	subs	r3, #48	@ 0x30
 800de5a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800de5c:	68bb      	ldr	r3, [r7, #8]
 800de5e:	2b09      	cmp	r3, #9
 800de60:	d80e      	bhi.n	800de80 <get_ldnumber+0x72>
 800de62:	68fa      	ldr	r2, [r7, #12]
 800de64:	697b      	ldr	r3, [r7, #20]
 800de66:	429a      	cmp	r2, r3
 800de68:	d10a      	bne.n	800de80 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2b00      	cmp	r3, #0
 800de6e:	d107      	bne.n	800de80 <get_ldnumber+0x72>
					vol = (int)i;
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800de74:	697b      	ldr	r3, [r7, #20]
 800de76:	3301      	adds	r3, #1
 800de78:	617b      	str	r3, [r7, #20]
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	697a      	ldr	r2, [r7, #20]
 800de7e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800de80:	693b      	ldr	r3, [r7, #16]
 800de82:	e002      	b.n	800de8a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800de84:	2300      	movs	r3, #0
 800de86:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800de88:	693b      	ldr	r3, [r7, #16]
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	371c      	adds	r7, #28
 800de8e:	46bd      	mov	sp, r7
 800de90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de94:	4770      	bx	lr
	...

0800de98 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800de98:	b580      	push	{r7, lr}
 800de9a:	b082      	sub	sp, #8
 800de9c:	af00      	add	r7, sp, #0
 800de9e:	6078      	str	r0, [r7, #4]
 800dea0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2200      	movs	r2, #0
 800dea6:	70da      	strb	r2, [r3, #3]
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800deae:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800deb0:	6839      	ldr	r1, [r7, #0]
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f7ff f8dc 	bl	800d070 <move_window>
 800deb8:	4603      	mov	r3, r0
 800deba:	2b00      	cmp	r3, #0
 800debc:	d001      	beq.n	800dec2 <check_fs+0x2a>
 800debe:	2304      	movs	r3, #4
 800dec0:	e038      	b.n	800df34 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	3330      	adds	r3, #48	@ 0x30
 800dec6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800deca:	4618      	mov	r0, r3
 800decc:	f7fe fe1e 	bl	800cb0c <ld_word>
 800ded0:	4603      	mov	r3, r0
 800ded2:	461a      	mov	r2, r3
 800ded4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800ded8:	429a      	cmp	r2, r3
 800deda:	d001      	beq.n	800dee0 <check_fs+0x48>
 800dedc:	2303      	movs	r3, #3
 800dede:	e029      	b.n	800df34 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800dee6:	2be9      	cmp	r3, #233	@ 0xe9
 800dee8:	d009      	beq.n	800defe <check_fs+0x66>
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800def0:	2beb      	cmp	r3, #235	@ 0xeb
 800def2:	d11e      	bne.n	800df32 <check_fs+0x9a>
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800defa:	2b90      	cmp	r3, #144	@ 0x90
 800defc:	d119      	bne.n	800df32 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	3330      	adds	r3, #48	@ 0x30
 800df02:	3336      	adds	r3, #54	@ 0x36
 800df04:	4618      	mov	r0, r3
 800df06:	f7fe fe1a 	bl	800cb3e <ld_dword>
 800df0a:	4603      	mov	r3, r0
 800df0c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800df10:	4a0a      	ldr	r2, [pc, #40]	@ (800df3c <check_fs+0xa4>)
 800df12:	4293      	cmp	r3, r2
 800df14:	d101      	bne.n	800df1a <check_fs+0x82>
 800df16:	2300      	movs	r3, #0
 800df18:	e00c      	b.n	800df34 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	3330      	adds	r3, #48	@ 0x30
 800df1e:	3352      	adds	r3, #82	@ 0x52
 800df20:	4618      	mov	r0, r3
 800df22:	f7fe fe0c 	bl	800cb3e <ld_dword>
 800df26:	4603      	mov	r3, r0
 800df28:	4a05      	ldr	r2, [pc, #20]	@ (800df40 <check_fs+0xa8>)
 800df2a:	4293      	cmp	r3, r2
 800df2c:	d101      	bne.n	800df32 <check_fs+0x9a>
 800df2e:	2300      	movs	r3, #0
 800df30:	e000      	b.n	800df34 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800df32:	2302      	movs	r3, #2
}
 800df34:	4618      	mov	r0, r3
 800df36:	3708      	adds	r7, #8
 800df38:	46bd      	mov	sp, r7
 800df3a:	bd80      	pop	{r7, pc}
 800df3c:	00544146 	.word	0x00544146
 800df40:	33544146 	.word	0x33544146

0800df44 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800df44:	b580      	push	{r7, lr}
 800df46:	b096      	sub	sp, #88	@ 0x58
 800df48:	af00      	add	r7, sp, #0
 800df4a:	60f8      	str	r0, [r7, #12]
 800df4c:	60b9      	str	r1, [r7, #8]
 800df4e:	4613      	mov	r3, r2
 800df50:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	2200      	movs	r2, #0
 800df56:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800df58:	68f8      	ldr	r0, [r7, #12]
 800df5a:	f7ff ff58 	bl	800de0e <get_ldnumber>
 800df5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800df60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df62:	2b00      	cmp	r3, #0
 800df64:	da01      	bge.n	800df6a <find_volume+0x26>
 800df66:	230b      	movs	r3, #11
 800df68:	e22d      	b.n	800e3c6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800df6a:	4aa1      	ldr	r2, [pc, #644]	@ (800e1f0 <find_volume+0x2ac>)
 800df6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800df6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800df72:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800df74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df76:	2b00      	cmp	r3, #0
 800df78:	d101      	bne.n	800df7e <find_volume+0x3a>
 800df7a:	230c      	movs	r3, #12
 800df7c:	e223      	b.n	800e3c6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800df7e:	68bb      	ldr	r3, [r7, #8]
 800df80:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800df82:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800df84:	79fb      	ldrb	r3, [r7, #7]
 800df86:	f023 0301 	bic.w	r3, r3, #1
 800df8a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800df8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df8e:	781b      	ldrb	r3, [r3, #0]
 800df90:	2b00      	cmp	r3, #0
 800df92:	d01a      	beq.n	800dfca <find_volume+0x86>
		stat = disk_status(fs->drv);
 800df94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800df96:	785b      	ldrb	r3, [r3, #1]
 800df98:	4618      	mov	r0, r3
 800df9a:	f7fe fd17 	bl	800c9cc <disk_status>
 800df9e:	4603      	mov	r3, r0
 800dfa0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dfa4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfa8:	f003 0301 	and.w	r3, r3, #1
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d10c      	bne.n	800dfca <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dfb0:	79fb      	ldrb	r3, [r7, #7]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d007      	beq.n	800dfc6 <find_volume+0x82>
 800dfb6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfba:	f003 0304 	and.w	r3, r3, #4
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d001      	beq.n	800dfc6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800dfc2:	230a      	movs	r3, #10
 800dfc4:	e1ff      	b.n	800e3c6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	e1fd      	b.n	800e3c6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dfca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfcc:	2200      	movs	r2, #0
 800dfce:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800dfd0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dfd2:	b2da      	uxtb	r2, r3
 800dfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfd6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800dfd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfda:	785b      	ldrb	r3, [r3, #1]
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f7fe fd0f 	bl	800ca00 <disk_initialize>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800dfe8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dfec:	f003 0301 	and.w	r3, r3, #1
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d001      	beq.n	800dff8 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800dff4:	2303      	movs	r3, #3
 800dff6:	e1e6      	b.n	800e3c6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800dff8:	79fb      	ldrb	r3, [r7, #7]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d007      	beq.n	800e00e <find_volume+0xca>
 800dffe:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e002:	f003 0304 	and.w	r3, r3, #4
 800e006:	2b00      	cmp	r3, #0
 800e008:	d001      	beq.n	800e00e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800e00a:	230a      	movs	r3, #10
 800e00c:	e1db      	b.n	800e3c6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800e00e:	2300      	movs	r3, #0
 800e010:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800e012:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e014:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e016:	f7ff ff3f 	bl	800de98 <check_fs>
 800e01a:	4603      	mov	r3, r0
 800e01c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800e020:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e024:	2b02      	cmp	r3, #2
 800e026:	d149      	bne.n	800e0bc <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e028:	2300      	movs	r3, #0
 800e02a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e02c:	e01e      	b.n	800e06c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800e02e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e030:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e034:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e036:	011b      	lsls	r3, r3, #4
 800e038:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800e03c:	4413      	add	r3, r2
 800e03e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800e040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e042:	3304      	adds	r3, #4
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	2b00      	cmp	r3, #0
 800e048:	d006      	beq.n	800e058 <find_volume+0x114>
 800e04a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e04c:	3308      	adds	r3, #8
 800e04e:	4618      	mov	r0, r3
 800e050:	f7fe fd75 	bl	800cb3e <ld_dword>
 800e054:	4602      	mov	r2, r0
 800e056:	e000      	b.n	800e05a <find_volume+0x116>
 800e058:	2200      	movs	r2, #0
 800e05a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e05c:	009b      	lsls	r3, r3, #2
 800e05e:	3358      	adds	r3, #88	@ 0x58
 800e060:	443b      	add	r3, r7
 800e062:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800e066:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e068:	3301      	adds	r3, #1
 800e06a:	643b      	str	r3, [r7, #64]	@ 0x40
 800e06c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e06e:	2b03      	cmp	r3, #3
 800e070:	d9dd      	bls.n	800e02e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800e072:	2300      	movs	r3, #0
 800e074:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800e076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e078:	2b00      	cmp	r3, #0
 800e07a:	d002      	beq.n	800e082 <find_volume+0x13e>
 800e07c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e07e:	3b01      	subs	r3, #1
 800e080:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800e082:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e084:	009b      	lsls	r3, r3, #2
 800e086:	3358      	adds	r3, #88	@ 0x58
 800e088:	443b      	add	r3, r7
 800e08a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800e08e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800e090:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e092:	2b00      	cmp	r3, #0
 800e094:	d005      	beq.n	800e0a2 <find_volume+0x15e>
 800e096:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e098:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e09a:	f7ff fefd 	bl	800de98 <check_fs>
 800e09e:	4603      	mov	r3, r0
 800e0a0:	e000      	b.n	800e0a4 <find_volume+0x160>
 800e0a2:	2303      	movs	r3, #3
 800e0a4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800e0a8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0ac:	2b01      	cmp	r3, #1
 800e0ae:	d905      	bls.n	800e0bc <find_volume+0x178>
 800e0b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b2:	3301      	adds	r3, #1
 800e0b4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e0b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e0b8:	2b03      	cmp	r3, #3
 800e0ba:	d9e2      	bls.n	800e082 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800e0bc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0c0:	2b04      	cmp	r3, #4
 800e0c2:	d101      	bne.n	800e0c8 <find_volume+0x184>
 800e0c4:	2301      	movs	r3, #1
 800e0c6:	e17e      	b.n	800e3c6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800e0c8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d901      	bls.n	800e0d4 <find_volume+0x190>
 800e0d0:	230d      	movs	r3, #13
 800e0d2:	e178      	b.n	800e3c6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800e0d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0d6:	3330      	adds	r3, #48	@ 0x30
 800e0d8:	330b      	adds	r3, #11
 800e0da:	4618      	mov	r0, r3
 800e0dc:	f7fe fd16 	bl	800cb0c <ld_word>
 800e0e0:	4603      	mov	r3, r0
 800e0e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e0e6:	d001      	beq.n	800e0ec <find_volume+0x1a8>
 800e0e8:	230d      	movs	r3, #13
 800e0ea:	e16c      	b.n	800e3c6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800e0ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0ee:	3330      	adds	r3, #48	@ 0x30
 800e0f0:	3316      	adds	r3, #22
 800e0f2:	4618      	mov	r0, r3
 800e0f4:	f7fe fd0a 	bl	800cb0c <ld_word>
 800e0f8:	4603      	mov	r3, r0
 800e0fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800e0fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d106      	bne.n	800e110 <find_volume+0x1cc>
 800e102:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e104:	3330      	adds	r3, #48	@ 0x30
 800e106:	3324      	adds	r3, #36	@ 0x24
 800e108:	4618      	mov	r0, r3
 800e10a:	f7fe fd18 	bl	800cb3e <ld_dword>
 800e10e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800e110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e112:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e114:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800e116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e118:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800e11c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e11e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800e120:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e122:	789b      	ldrb	r3, [r3, #2]
 800e124:	2b01      	cmp	r3, #1
 800e126:	d005      	beq.n	800e134 <find_volume+0x1f0>
 800e128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12a:	789b      	ldrb	r3, [r3, #2]
 800e12c:	2b02      	cmp	r3, #2
 800e12e:	d001      	beq.n	800e134 <find_volume+0x1f0>
 800e130:	230d      	movs	r3, #13
 800e132:	e148      	b.n	800e3c6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800e134:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e136:	789b      	ldrb	r3, [r3, #2]
 800e138:	461a      	mov	r2, r3
 800e13a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e13c:	fb02 f303 	mul.w	r3, r2, r3
 800e140:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800e142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e144:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800e148:	461a      	mov	r2, r3
 800e14a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800e14e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e150:	895b      	ldrh	r3, [r3, #10]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d008      	beq.n	800e168 <find_volume+0x224>
 800e156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e158:	895b      	ldrh	r3, [r3, #10]
 800e15a:	461a      	mov	r2, r3
 800e15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e15e:	895b      	ldrh	r3, [r3, #10]
 800e160:	3b01      	subs	r3, #1
 800e162:	4013      	ands	r3, r2
 800e164:	2b00      	cmp	r3, #0
 800e166:	d001      	beq.n	800e16c <find_volume+0x228>
 800e168:	230d      	movs	r3, #13
 800e16a:	e12c      	b.n	800e3c6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800e16c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16e:	3330      	adds	r3, #48	@ 0x30
 800e170:	3311      	adds	r3, #17
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe fcca 	bl	800cb0c <ld_word>
 800e178:	4603      	mov	r3, r0
 800e17a:	461a      	mov	r2, r3
 800e17c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17e:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800e180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e182:	891b      	ldrh	r3, [r3, #8]
 800e184:	f003 030f 	and.w	r3, r3, #15
 800e188:	b29b      	uxth	r3, r3
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d001      	beq.n	800e192 <find_volume+0x24e>
 800e18e:	230d      	movs	r3, #13
 800e190:	e119      	b.n	800e3c6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800e192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e194:	3330      	adds	r3, #48	@ 0x30
 800e196:	3313      	adds	r3, #19
 800e198:	4618      	mov	r0, r3
 800e19a:	f7fe fcb7 	bl	800cb0c <ld_word>
 800e19e:	4603      	mov	r3, r0
 800e1a0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800e1a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d106      	bne.n	800e1b6 <find_volume+0x272>
 800e1a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1aa:	3330      	adds	r3, #48	@ 0x30
 800e1ac:	3320      	adds	r3, #32
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	f7fe fcc5 	bl	800cb3e <ld_dword>
 800e1b4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800e1b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e1b8:	3330      	adds	r3, #48	@ 0x30
 800e1ba:	330e      	adds	r3, #14
 800e1bc:	4618      	mov	r0, r3
 800e1be:	f7fe fca5 	bl	800cb0c <ld_word>
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800e1c6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d101      	bne.n	800e1d0 <find_volume+0x28c>
 800e1cc:	230d      	movs	r3, #13
 800e1ce:	e0fa      	b.n	800e3c6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800e1d0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e1d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e1d4:	4413      	add	r3, r2
 800e1d6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1d8:	8912      	ldrh	r2, [r2, #8]
 800e1da:	0912      	lsrs	r2, r2, #4
 800e1dc:	b292      	uxth	r2, r2
 800e1de:	4413      	add	r3, r2
 800e1e0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
<<<<<<< HEAD
 800e1e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1e6:	429a      	cmp	r2, r3
 800e1e8:	d204      	bcs.n	800e1f4 <find_volume+0x2b0>
 800e1ea:	230d      	movs	r3, #13
 800e1ec:	e0eb      	b.n	800e3c6 <find_volume+0x482>
 800e1ee:	bf00      	nop
 800e1f0:	2000041c 	.word	0x2000041c
=======
 800e1fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e202:	429a      	cmp	r2, r3
 800e204:	d204      	bcs.n	800e210 <find_volume+0x2b0>
 800e206:	230d      	movs	r3, #13
 800e208:	e0eb      	b.n	800e3e2 <find_volume+0x482>
 800e20a:	bf00      	nop
 800e20c:	20000420 	.word	0x20000420
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800e1f4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800e1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e1f8:	1ad3      	subs	r3, r2, r3
 800e1fa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800e1fc:	8952      	ldrh	r2, [r2, #10]
 800e1fe:	fbb3 f3f2 	udiv	r3, r3, r2
 800e202:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800e204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e206:	2b00      	cmp	r3, #0
 800e208:	d101      	bne.n	800e20e <find_volume+0x2ca>
 800e20a:	230d      	movs	r3, #13
 800e20c:	e0db      	b.n	800e3c6 <find_volume+0x482>
		fmt = FS_FAT32;
 800e20e:	2303      	movs	r3, #3
 800e210:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800e214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e216:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800e21a:	4293      	cmp	r3, r2
 800e21c:	d802      	bhi.n	800e224 <find_volume+0x2e0>
 800e21e:	2302      	movs	r3, #2
 800e220:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800e224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e226:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d802      	bhi.n	800e234 <find_volume+0x2f0>
 800e22e:	2301      	movs	r3, #1
 800e230:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800e234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e236:	1c9a      	adds	r2, r3, #2
 800e238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800e23c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e23e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e240:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800e242:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800e244:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e246:	441a      	add	r2, r3
 800e248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e24a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800e24c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800e24e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e250:	441a      	add	r2, r3
 800e252:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e254:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800e256:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e25a:	2b03      	cmp	r3, #3
 800e25c:	d11e      	bne.n	800e29c <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800e25e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e260:	3330      	adds	r3, #48	@ 0x30
 800e262:	332a      	adds	r3, #42	@ 0x2a
 800e264:	4618      	mov	r0, r3
 800e266:	f7fe fc51 	bl	800cb0c <ld_word>
 800e26a:	4603      	mov	r3, r0
 800e26c:	2b00      	cmp	r3, #0
 800e26e:	d001      	beq.n	800e274 <find_volume+0x330>
 800e270:	230d      	movs	r3, #13
 800e272:	e0a8      	b.n	800e3c6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800e274:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e276:	891b      	ldrh	r3, [r3, #8]
 800e278:	2b00      	cmp	r3, #0
 800e27a:	d001      	beq.n	800e280 <find_volume+0x33c>
 800e27c:	230d      	movs	r3, #13
 800e27e:	e0a2      	b.n	800e3c6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800e280:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e282:	3330      	adds	r3, #48	@ 0x30
 800e284:	332c      	adds	r3, #44	@ 0x2c
 800e286:	4618      	mov	r0, r3
 800e288:	f7fe fc59 	bl	800cb3e <ld_dword>
 800e28c:	4602      	mov	r2, r0
 800e28e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e290:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800e292:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e294:	695b      	ldr	r3, [r3, #20]
 800e296:	009b      	lsls	r3, r3, #2
 800e298:	647b      	str	r3, [r7, #68]	@ 0x44
 800e29a:	e01f      	b.n	800e2dc <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800e29c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e29e:	891b      	ldrh	r3, [r3, #8]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d101      	bne.n	800e2a8 <find_volume+0x364>
 800e2a4:	230d      	movs	r3, #13
 800e2a6:	e08e      	b.n	800e3c6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800e2a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2aa:	6a1a      	ldr	r2, [r3, #32]
 800e2ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e2ae:	441a      	add	r2, r3
 800e2b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2b2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800e2b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e2b8:	2b02      	cmp	r3, #2
 800e2ba:	d103      	bne.n	800e2c4 <find_volume+0x380>
 800e2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2be:	695b      	ldr	r3, [r3, #20]
 800e2c0:	005b      	lsls	r3, r3, #1
 800e2c2:	e00a      	b.n	800e2da <find_volume+0x396>
 800e2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2c6:	695a      	ldr	r2, [r3, #20]
 800e2c8:	4613      	mov	r3, r2
 800e2ca:	005b      	lsls	r3, r3, #1
 800e2cc:	4413      	add	r3, r2
 800e2ce:	085a      	lsrs	r2, r3, #1
 800e2d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2d2:	695b      	ldr	r3, [r3, #20]
 800e2d4:	f003 0301 	and.w	r3, r3, #1
 800e2d8:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800e2da:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800e2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2de:	699a      	ldr	r2, [r3, #24]
 800e2e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e2e2:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800e2e6:	0a5b      	lsrs	r3, r3, #9
 800e2e8:	429a      	cmp	r2, r3
 800e2ea:	d201      	bcs.n	800e2f0 <find_volume+0x3ac>
 800e2ec:	230d      	movs	r3, #13
 800e2ee:	e06a      	b.n	800e3c6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800e2f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e2f6:	611a      	str	r2, [r3, #16]
 800e2f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fa:	691a      	ldr	r2, [r3, #16]
 800e2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e2fe:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800e300:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e302:	2280      	movs	r2, #128	@ 0x80
 800e304:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800e306:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800e30a:	2b03      	cmp	r3, #3
 800e30c:	d149      	bne.n	800e3a2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800e30e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e310:	3330      	adds	r3, #48	@ 0x30
 800e312:	3330      	adds	r3, #48	@ 0x30
 800e314:	4618      	mov	r0, r3
 800e316:	f7fe fbf9 	bl	800cb0c <ld_word>
 800e31a:	4603      	mov	r3, r0
 800e31c:	2b01      	cmp	r3, #1
 800e31e:	d140      	bne.n	800e3a2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800e320:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e322:	3301      	adds	r3, #1
 800e324:	4619      	mov	r1, r3
 800e326:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e328:	f7fe fea2 	bl	800d070 <move_window>
 800e32c:	4603      	mov	r3, r0
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d137      	bne.n	800e3a2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800e332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e334:	2200      	movs	r2, #0
 800e336:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800e338:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e33a:	3330      	adds	r3, #48	@ 0x30
 800e33c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800e340:	4618      	mov	r0, r3
 800e342:	f7fe fbe3 	bl	800cb0c <ld_word>
 800e346:	4603      	mov	r3, r0
 800e348:	461a      	mov	r2, r3
 800e34a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800e34e:	429a      	cmp	r2, r3
 800e350:	d127      	bne.n	800e3a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800e352:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e354:	3330      	adds	r3, #48	@ 0x30
 800e356:	4618      	mov	r0, r3
 800e358:	f7fe fbf1 	bl	800cb3e <ld_dword>
 800e35c:	4603      	mov	r3, r0
 800e35e:	4a1c      	ldr	r2, [pc, #112]	@ (800e3d0 <find_volume+0x48c>)
 800e360:	4293      	cmp	r3, r2
 800e362:	d11e      	bne.n	800e3a2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800e364:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e366:	3330      	adds	r3, #48	@ 0x30
 800e368:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800e36c:	4618      	mov	r0, r3
 800e36e:	f7fe fbe6 	bl	800cb3e <ld_dword>
 800e372:	4603      	mov	r3, r0
 800e374:	4a17      	ldr	r2, [pc, #92]	@ (800e3d4 <find_volume+0x490>)
 800e376:	4293      	cmp	r3, r2
 800e378:	d113      	bne.n	800e3a2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800e37a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e37c:	3330      	adds	r3, #48	@ 0x30
 800e37e:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800e382:	4618      	mov	r0, r3
 800e384:	f7fe fbdb 	bl	800cb3e <ld_dword>
 800e388:	4602      	mov	r2, r0
 800e38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e38c:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800e38e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e390:	3330      	adds	r3, #48	@ 0x30
 800e392:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800e396:	4618      	mov	r0, r3
 800e398:	f7fe fbd1 	bl	800cb3e <ld_dword>
 800e39c:	4602      	mov	r2, r0
 800e39e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800e3a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3a4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800e3a8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800e3aa:	4b0b      	ldr	r3, [pc, #44]	@ (800e3d8 <find_volume+0x494>)
 800e3ac:	881b      	ldrh	r3, [r3, #0]
 800e3ae:	3301      	adds	r3, #1
 800e3b0:	b29a      	uxth	r2, r3
 800e3b2:	4b09      	ldr	r3, [pc, #36]	@ (800e3d8 <find_volume+0x494>)
 800e3b4:	801a      	strh	r2, [r3, #0]
 800e3b6:	4b08      	ldr	r3, [pc, #32]	@ (800e3d8 <find_volume+0x494>)
 800e3b8:	881a      	ldrh	r2, [r3, #0]
 800e3ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e3bc:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800e3be:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800e3c0:	f7fe fdee 	bl	800cfa0 <clear_lock>
#endif
	return FR_OK;
 800e3c4:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	3758      	adds	r7, #88	@ 0x58
 800e3ca:	46bd      	mov	sp, r7
 800e3cc:	bd80      	pop	{r7, pc}
 800e3ce:	bf00      	nop
 800e3d0:	41615252 	.word	0x41615252
 800e3d4:	61417272 	.word	0x61417272
 800e3d8:	20000420 	.word	0x20000420
=======
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3758      	adds	r7, #88	@ 0x58
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}
 800e3ea:	bf00      	nop
 800e3ec:	41615252 	.word	0x41615252
 800e3f0:	61417272 	.word	0x61417272
 800e3f4:	20000424 	.word	0x20000424
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800e3dc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800e3dc:	b580      	push	{r7, lr}
 800e3de:	b084      	sub	sp, #16
 800e3e0:	af00      	add	r7, sp, #0
 800e3e2:	6078      	str	r0, [r7, #4]
 800e3e4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800e3e6:	2309      	movs	r3, #9
 800e3e8:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	2b00      	cmp	r3, #0
 800e3ee:	d01c      	beq.n	800e42a <validate+0x4e>
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	681b      	ldr	r3, [r3, #0]
 800e3f4:	2b00      	cmp	r3, #0
 800e3f6:	d018      	beq.n	800e42a <validate+0x4e>
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	781b      	ldrb	r3, [r3, #0]
 800e3fe:	2b00      	cmp	r3, #0
 800e400:	d013      	beq.n	800e42a <validate+0x4e>
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	889a      	ldrh	r2, [r3, #4]
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	681b      	ldr	r3, [r3, #0]
 800e40a:	88db      	ldrh	r3, [r3, #6]
 800e40c:	429a      	cmp	r2, r3
 800e40e:	d10c      	bne.n	800e42a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800e410:	687b      	ldr	r3, [r7, #4]
 800e412:	681b      	ldr	r3, [r3, #0]
 800e414:	785b      	ldrb	r3, [r3, #1]
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe fad8 	bl	800c9cc <disk_status>
 800e41c:	4603      	mov	r3, r0
 800e41e:	f003 0301 	and.w	r3, r3, #1
 800e422:	2b00      	cmp	r3, #0
 800e424:	d101      	bne.n	800e42a <validate+0x4e>
			res = FR_OK;
 800e426:	2300      	movs	r3, #0
 800e428:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800e42a:	7bfb      	ldrb	r3, [r7, #15]
 800e42c:	2b00      	cmp	r3, #0
 800e42e:	d102      	bne.n	800e436 <validate+0x5a>
 800e430:	687b      	ldr	r3, [r7, #4]
 800e432:	681b      	ldr	r3, [r3, #0]
 800e434:	e000      	b.n	800e438 <validate+0x5c>
 800e436:	2300      	movs	r3, #0
 800e438:	683a      	ldr	r2, [r7, #0]
 800e43a:	6013      	str	r3, [r2, #0]
	return res;
 800e43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e43e:	4618      	mov	r0, r3
 800e440:	3710      	adds	r7, #16
 800e442:	46bd      	mov	sp, r7
 800e444:	bd80      	pop	{r7, pc}
	...

0800e448 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b088      	sub	sp, #32
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	60f8      	str	r0, [r7, #12]
 800e450:	60b9      	str	r1, [r7, #8]
 800e452:	4613      	mov	r3, r2
 800e454:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800e456:	68bb      	ldr	r3, [r7, #8]
 800e458:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800e45a:	f107 0310 	add.w	r3, r7, #16
 800e45e:	4618      	mov	r0, r3
 800e460:	f7ff fcd5 	bl	800de0e <get_ldnumber>
 800e464:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800e466:	69fb      	ldr	r3, [r7, #28]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	da01      	bge.n	800e470 <f_mount+0x28>
 800e46c:	230b      	movs	r3, #11
 800e46e:	e02b      	b.n	800e4c8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800e470:	4a17      	ldr	r2, [pc, #92]	@ (800e4d0 <f_mount+0x88>)
 800e472:	69fb      	ldr	r3, [r7, #28]
 800e474:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e478:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800e47a:	69bb      	ldr	r3, [r7, #24]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d005      	beq.n	800e48c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800e480:	69b8      	ldr	r0, [r7, #24]
 800e482:	f7fe fd8d 	bl	800cfa0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	2200      	movs	r2, #0
 800e48a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800e48c:	68fb      	ldr	r3, [r7, #12]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d002      	beq.n	800e498 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800e492:	68fb      	ldr	r3, [r7, #12]
 800e494:	2200      	movs	r2, #0
 800e496:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800e498:	68fa      	ldr	r2, [r7, #12]
 800e49a:	490d      	ldr	r1, [pc, #52]	@ (800e4d0 <f_mount+0x88>)
 800e49c:	69fb      	ldr	r3, [r7, #28]
 800e49e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800e4a2:	68fb      	ldr	r3, [r7, #12]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d002      	beq.n	800e4ae <f_mount+0x66>
 800e4a8:	79fb      	ldrb	r3, [r7, #7]
 800e4aa:	2b01      	cmp	r3, #1
 800e4ac:	d001      	beq.n	800e4b2 <f_mount+0x6a>
 800e4ae:	2300      	movs	r3, #0
 800e4b0:	e00a      	b.n	800e4c8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800e4b2:	f107 010c 	add.w	r1, r7, #12
 800e4b6:	f107 0308 	add.w	r3, r7, #8
 800e4ba:	2200      	movs	r2, #0
 800e4bc:	4618      	mov	r0, r3
 800e4be:	f7ff fd41 	bl	800df44 <find_volume>
 800e4c2:	4603      	mov	r3, r0
 800e4c4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800e4c6:	7dfb      	ldrb	r3, [r7, #23]
}
<<<<<<< HEAD
 800e4c8:	4618      	mov	r0, r3
 800e4ca:	3720      	adds	r7, #32
 800e4cc:	46bd      	mov	sp, r7
 800e4ce:	bd80      	pop	{r7, pc}
 800e4d0:	2000041c 	.word	0x2000041c
=======
 800e4e4:	4618      	mov	r0, r3
 800e4e6:	3720      	adds	r7, #32
 800e4e8:	46bd      	mov	sp, r7
 800e4ea:	bd80      	pop	{r7, pc}
 800e4ec:	20000420 	.word	0x20000420
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800e4d4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b098      	sub	sp, #96	@ 0x60
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	4613      	mov	r3, r2
 800e4e0:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	d101      	bne.n	800e4ec <f_open+0x18>
 800e4e8:	2309      	movs	r3, #9
 800e4ea:	e1a9      	b.n	800e840 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e4ec:	79fb      	ldrb	r3, [r7, #7]
 800e4ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e4f2:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e4f4:	79fa      	ldrb	r2, [r7, #7]
 800e4f6:	f107 0110 	add.w	r1, r7, #16
 800e4fa:	f107 0308 	add.w	r3, r7, #8
 800e4fe:	4618      	mov	r0, r3
 800e500:	f7ff fd20 	bl	800df44 <find_volume>
 800e504:	4603      	mov	r3, r0
 800e506:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e50a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e50e:	2b00      	cmp	r3, #0
 800e510:	f040 818d 	bne.w	800e82e <f_open+0x35a>
		dj.obj.fs = fs;
 800e514:	693b      	ldr	r3, [r7, #16]
 800e516:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e518:	68ba      	ldr	r2, [r7, #8]
 800e51a:	f107 0314 	add.w	r3, r7, #20
 800e51e:	4611      	mov	r1, r2
 800e520:	4618      	mov	r0, r3
 800e522:	f7ff fc03 	bl	800dd2c <follow_path>
 800e526:	4603      	mov	r3, r0
 800e528:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e52c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e530:	2b00      	cmp	r3, #0
 800e532:	d118      	bne.n	800e566 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e534:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e538:	b25b      	sxtb	r3, r3
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	da03      	bge.n	800e546 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e53e:	2306      	movs	r3, #6
 800e540:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e544:	e00f      	b.n	800e566 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e546:	79fb      	ldrb	r3, [r7, #7]
 800e548:	2b01      	cmp	r3, #1
 800e54a:	bf8c      	ite	hi
 800e54c:	2301      	movhi	r3, #1
 800e54e:	2300      	movls	r3, #0
 800e550:	b2db      	uxtb	r3, r3
 800e552:	461a      	mov	r2, r3
 800e554:	f107 0314 	add.w	r3, r7, #20
 800e558:	4611      	mov	r1, r2
 800e55a:	4618      	mov	r0, r3
 800e55c:	f7fe fbd8 	bl	800cd10 <chk_lock>
 800e560:	4603      	mov	r3, r0
 800e562:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e566:	79fb      	ldrb	r3, [r7, #7]
 800e568:	f003 031c 	and.w	r3, r3, #28
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	d07f      	beq.n	800e670 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e570:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e574:	2b00      	cmp	r3, #0
 800e576:	d017      	beq.n	800e5a8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e578:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e57c:	2b04      	cmp	r3, #4
 800e57e:	d10e      	bne.n	800e59e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e580:	f7fe fc22 	bl	800cdc8 <enq_lock>
 800e584:	4603      	mov	r3, r0
 800e586:	2b00      	cmp	r3, #0
 800e588:	d006      	beq.n	800e598 <f_open+0xc4>
 800e58a:	f107 0314 	add.w	r3, r7, #20
 800e58e:	4618      	mov	r0, r3
 800e590:	f7ff fb06 	bl	800dba0 <dir_register>
 800e594:	4603      	mov	r3, r0
 800e596:	e000      	b.n	800e59a <f_open+0xc6>
 800e598:	2312      	movs	r3, #18
 800e59a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e59e:	79fb      	ldrb	r3, [r7, #7]
 800e5a0:	f043 0308 	orr.w	r3, r3, #8
 800e5a4:	71fb      	strb	r3, [r7, #7]
 800e5a6:	e010      	b.n	800e5ca <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e5a8:	7ebb      	ldrb	r3, [r7, #26]
 800e5aa:	f003 0311 	and.w	r3, r3, #17
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d003      	beq.n	800e5ba <f_open+0xe6>
					res = FR_DENIED;
 800e5b2:	2307      	movs	r3, #7
 800e5b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e5b8:	e007      	b.n	800e5ca <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e5ba:	79fb      	ldrb	r3, [r7, #7]
 800e5bc:	f003 0304 	and.w	r3, r3, #4
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d002      	beq.n	800e5ca <f_open+0xf6>
 800e5c4:	2308      	movs	r3, #8
 800e5c6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e5ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d168      	bne.n	800e6a4 <f_open+0x1d0>
 800e5d2:	79fb      	ldrb	r3, [r7, #7]
 800e5d4:	f003 0308 	and.w	r3, r3, #8
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d063      	beq.n	800e6a4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e5dc:	f7fc f9c6 	bl	800a96c <get_fattime>
 800e5e0:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e5e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5e4:	330e      	adds	r3, #14
 800e5e6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e5e8:	4618      	mov	r0, r3
 800e5ea:	f7fe fae6 	bl	800cbba <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e5ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5f0:	3316      	adds	r3, #22
 800e5f2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e5f4:	4618      	mov	r0, r3
 800e5f6:	f7fe fae0 	bl	800cbba <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e5fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5fc:	330b      	adds	r3, #11
 800e5fe:	2220      	movs	r2, #32
 800e600:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e602:	693b      	ldr	r3, [r7, #16]
 800e604:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e606:	4611      	mov	r1, r2
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff fa35 	bl	800da78 <ld_clust>
 800e60e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e610:	693b      	ldr	r3, [r7, #16]
 800e612:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e614:	2200      	movs	r2, #0
 800e616:	4618      	mov	r0, r3
 800e618:	f7ff fa4d 	bl	800dab6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e61c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e61e:	331c      	adds	r3, #28
 800e620:	2100      	movs	r1, #0
 800e622:	4618      	mov	r0, r3
 800e624:	f7fe fac9 	bl	800cbba <st_dword>
					fs->wflag = 1;
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	2201      	movs	r2, #1
 800e62c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e62e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e630:	2b00      	cmp	r3, #0
 800e632:	d037      	beq.n	800e6a4 <f_open+0x1d0>
						dw = fs->winsect;
 800e634:	693b      	ldr	r3, [r7, #16]
 800e636:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e638:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e63a:	f107 0314 	add.w	r3, r7, #20
 800e63e:	2200      	movs	r2, #0
 800e640:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e642:	4618      	mov	r0, r3
 800e644:	f7fe ff60 	bl	800d508 <remove_chain>
 800e648:	4603      	mov	r3, r0
 800e64a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e64e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e652:	2b00      	cmp	r3, #0
 800e654:	d126      	bne.n	800e6a4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e656:	693b      	ldr	r3, [r7, #16]
 800e658:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e65a:	4618      	mov	r0, r3
 800e65c:	f7fe fd08 	bl	800d070 <move_window>
 800e660:	4603      	mov	r3, r0
 800e662:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e66a:	3a01      	subs	r2, #1
 800e66c:	60da      	str	r2, [r3, #12]
 800e66e:	e019      	b.n	800e6a4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e670:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e674:	2b00      	cmp	r3, #0
 800e676:	d115      	bne.n	800e6a4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e678:	7ebb      	ldrb	r3, [r7, #26]
 800e67a:	f003 0310 	and.w	r3, r3, #16
 800e67e:	2b00      	cmp	r3, #0
 800e680:	d003      	beq.n	800e68a <f_open+0x1b6>
					res = FR_NO_FILE;
 800e682:	2304      	movs	r3, #4
 800e684:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e688:	e00c      	b.n	800e6a4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e68a:	79fb      	ldrb	r3, [r7, #7]
 800e68c:	f003 0302 	and.w	r3, r3, #2
 800e690:	2b00      	cmp	r3, #0
 800e692:	d007      	beq.n	800e6a4 <f_open+0x1d0>
 800e694:	7ebb      	ldrb	r3, [r7, #26]
 800e696:	f003 0301 	and.w	r3, r3, #1
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	d002      	beq.n	800e6a4 <f_open+0x1d0>
						res = FR_DENIED;
 800e69e:	2307      	movs	r3, #7
 800e6a0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e6a4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6a8:	2b00      	cmp	r3, #0
 800e6aa:	d126      	bne.n	800e6fa <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e6ac:	79fb      	ldrb	r3, [r7, #7]
 800e6ae:	f003 0308 	and.w	r3, r3, #8
 800e6b2:	2b00      	cmp	r3, #0
 800e6b4:	d003      	beq.n	800e6be <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e6b6:	79fb      	ldrb	r3, [r7, #7]
 800e6b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6bc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e6be:	693b      	ldr	r3, [r7, #16]
 800e6c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e6c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e6cc:	79fb      	ldrb	r3, [r7, #7]
 800e6ce:	2b01      	cmp	r3, #1
 800e6d0:	bf8c      	ite	hi
 800e6d2:	2301      	movhi	r3, #1
 800e6d4:	2300      	movls	r3, #0
 800e6d6:	b2db      	uxtb	r3, r3
 800e6d8:	461a      	mov	r2, r3
 800e6da:	f107 0314 	add.w	r3, r7, #20
 800e6de:	4611      	mov	r1, r2
 800e6e0:	4618      	mov	r0, r3
 800e6e2:	f7fe fb93 	bl	800ce0c <inc_lock>
 800e6e6:	4602      	mov	r2, r0
 800e6e8:	68fb      	ldr	r3, [r7, #12]
 800e6ea:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e6ec:	68fb      	ldr	r3, [r7, #12]
 800e6ee:	691b      	ldr	r3, [r3, #16]
 800e6f0:	2b00      	cmp	r3, #0
 800e6f2:	d102      	bne.n	800e6fa <f_open+0x226>
 800e6f4:	2302      	movs	r3, #2
 800e6f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e6fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e6fe:	2b00      	cmp	r3, #0
 800e700:	f040 8095 	bne.w	800e82e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e704:	693b      	ldr	r3, [r7, #16]
 800e706:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e708:	4611      	mov	r1, r2
 800e70a:	4618      	mov	r0, r3
 800e70c:	f7ff f9b4 	bl	800da78 <ld_clust>
 800e710:	4602      	mov	r2, r0
 800e712:	68fb      	ldr	r3, [r7, #12]
 800e714:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e716:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e718:	331c      	adds	r3, #28
 800e71a:	4618      	mov	r0, r3
 800e71c:	f7fe fa0f 	bl	800cb3e <ld_dword>
 800e720:	4602      	mov	r2, r0
 800e722:	68fb      	ldr	r3, [r7, #12]
 800e724:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e726:	68fb      	ldr	r3, [r7, #12]
 800e728:	2200      	movs	r2, #0
 800e72a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e72c:	693a      	ldr	r2, [r7, #16]
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e732:	693b      	ldr	r3, [r7, #16]
 800e734:	88da      	ldrh	r2, [r3, #6]
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	79fa      	ldrb	r2, [r7, #7]
 800e73e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e740:	68fb      	ldr	r3, [r7, #12]
 800e742:	2200      	movs	r2, #0
 800e744:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2200      	movs	r2, #0
 800e74a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e74c:	68fb      	ldr	r3, [r7, #12]
 800e74e:	2200      	movs	r2, #0
 800e750:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e752:	68fb      	ldr	r3, [r7, #12]
 800e754:	3330      	adds	r3, #48	@ 0x30
 800e756:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e75a:	2100      	movs	r1, #0
 800e75c:	4618      	mov	r0, r3
 800e75e:	f7fe fa79 	bl	800cc54 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e762:	79fb      	ldrb	r3, [r7, #7]
 800e764:	f003 0320 	and.w	r3, r3, #32
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d060      	beq.n	800e82e <f_open+0x35a>
 800e76c:	68fb      	ldr	r3, [r7, #12]
 800e76e:	68db      	ldr	r3, [r3, #12]
 800e770:	2b00      	cmp	r3, #0
 800e772:	d05c      	beq.n	800e82e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	68da      	ldr	r2, [r3, #12]
 800e778:	68fb      	ldr	r3, [r7, #12]
 800e77a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	895b      	ldrh	r3, [r3, #10]
 800e780:	025b      	lsls	r3, r3, #9
 800e782:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e784:	68fb      	ldr	r3, [r7, #12]
 800e786:	689b      	ldr	r3, [r3, #8]
 800e788:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e78a:	68fb      	ldr	r3, [r7, #12]
 800e78c:	68db      	ldr	r3, [r3, #12]
 800e78e:	657b      	str	r3, [r7, #84]	@ 0x54
 800e790:	e016      	b.n	800e7c0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e792:	68fb      	ldr	r3, [r7, #12]
 800e794:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e796:	4618      	mov	r0, r3
 800e798:	f7fe fd25 	bl	800d1e6 <get_fat>
 800e79c:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e79e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7a0:	2b01      	cmp	r3, #1
 800e7a2:	d802      	bhi.n	800e7aa <f_open+0x2d6>
 800e7a4:	2302      	movs	r3, #2
 800e7a6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e7aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e7ac:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7b0:	d102      	bne.n	800e7b8 <f_open+0x2e4>
 800e7b2:	2301      	movs	r3, #1
 800e7b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e7b8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e7ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	657b      	str	r3, [r7, #84]	@ 0x54
 800e7c0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d103      	bne.n	800e7d0 <f_open+0x2fc>
 800e7c8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e7ca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e7cc:	429a      	cmp	r2, r3
 800e7ce:	d8e0      	bhi.n	800e792 <f_open+0x2be>
				}
				fp->clust = clst;
 800e7d0:	68fb      	ldr	r3, [r7, #12]
 800e7d2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e7d4:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e7d6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e7da:	2b00      	cmp	r3, #0
 800e7dc:	d127      	bne.n	800e82e <f_open+0x35a>
 800e7de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e7e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7e4:	2b00      	cmp	r3, #0
 800e7e6:	d022      	beq.n	800e82e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e7e8:	693b      	ldr	r3, [r7, #16]
 800e7ea:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e7ec:	4618      	mov	r0, r3
 800e7ee:	f7fe fcdb 	bl	800d1a8 <clust2sect>
 800e7f2:	6478      	str	r0, [r7, #68]	@ 0x44
 800e7f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d103      	bne.n	800e802 <f_open+0x32e>
						res = FR_INT_ERR;
 800e7fa:	2302      	movs	r3, #2
 800e7fc:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e800:	e015      	b.n	800e82e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e802:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e804:	0a5a      	lsrs	r2, r3, #9
 800e806:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e808:	441a      	add	r2, r3
 800e80a:	68fb      	ldr	r3, [r7, #12]
 800e80c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e80e:	693b      	ldr	r3, [r7, #16]
 800e810:	7858      	ldrb	r0, [r3, #1]
 800e812:	68fb      	ldr	r3, [r7, #12]
 800e814:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	6a1a      	ldr	r2, [r3, #32]
 800e81c:	2301      	movs	r3, #1
 800e81e:	f7fe f917 	bl	800ca50 <disk_read>
 800e822:	4603      	mov	r3, r0
 800e824:	2b00      	cmp	r3, #0
 800e826:	d002      	beq.n	800e82e <f_open+0x35a>
 800e828:	2301      	movs	r3, #1
 800e82a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e82e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e832:	2b00      	cmp	r3, #0
 800e834:	d002      	beq.n	800e83c <f_open+0x368>
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	2200      	movs	r2, #0
 800e83a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e83c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e840:	4618      	mov	r0, r3
 800e842:	3760      	adds	r7, #96	@ 0x60
 800e844:	46bd      	mov	sp, r7
 800e846:	bd80      	pop	{r7, pc}

0800e848 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e848:	b580      	push	{r7, lr}
 800e84a:	b08e      	sub	sp, #56	@ 0x38
 800e84c:	af00      	add	r7, sp, #0
 800e84e:	60f8      	str	r0, [r7, #12]
 800e850:	60b9      	str	r1, [r7, #8]
 800e852:	607a      	str	r2, [r7, #4]
 800e854:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e856:	68bb      	ldr	r3, [r7, #8]
 800e858:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e85a:	683b      	ldr	r3, [r7, #0]
 800e85c:	2200      	movs	r2, #0
 800e85e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e860:	68fb      	ldr	r3, [r7, #12]
 800e862:	f107 0214 	add.w	r2, r7, #20
 800e866:	4611      	mov	r1, r2
 800e868:	4618      	mov	r0, r3
 800e86a:	f7ff fdb7 	bl	800e3dc <validate>
 800e86e:	4603      	mov	r3, r0
 800e870:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e874:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e878:	2b00      	cmp	r3, #0
 800e87a:	d107      	bne.n	800e88c <f_read+0x44>
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	7d5b      	ldrb	r3, [r3, #21]
 800e880:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e884:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d002      	beq.n	800e892 <f_read+0x4a>
 800e88c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e890:	e115      	b.n	800eabe <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	7d1b      	ldrb	r3, [r3, #20]
 800e896:	f003 0301 	and.w	r3, r3, #1
 800e89a:	2b00      	cmp	r3, #0
 800e89c:	d101      	bne.n	800e8a2 <f_read+0x5a>
 800e89e:	2307      	movs	r3, #7
 800e8a0:	e10d      	b.n	800eabe <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	68da      	ldr	r2, [r3, #12]
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	699b      	ldr	r3, [r3, #24]
 800e8aa:	1ad3      	subs	r3, r2, r3
 800e8ac:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e8ae:	687a      	ldr	r2, [r7, #4]
 800e8b0:	6a3b      	ldr	r3, [r7, #32]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	f240 80fe 	bls.w	800eab4 <f_read+0x26c>
 800e8b8:	6a3b      	ldr	r3, [r7, #32]
 800e8ba:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e8bc:	e0fa      	b.n	800eab4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e8be:	68fb      	ldr	r3, [r7, #12]
 800e8c0:	699b      	ldr	r3, [r3, #24]
 800e8c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8c6:	2b00      	cmp	r3, #0
 800e8c8:	f040 80c6 	bne.w	800ea58 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e8cc:	68fb      	ldr	r3, [r7, #12]
 800e8ce:	699b      	ldr	r3, [r3, #24]
 800e8d0:	0a5b      	lsrs	r3, r3, #9
 800e8d2:	697a      	ldr	r2, [r7, #20]
 800e8d4:	8952      	ldrh	r2, [r2, #10]
 800e8d6:	3a01      	subs	r2, #1
 800e8d8:	4013      	ands	r3, r2
 800e8da:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e8dc:	69fb      	ldr	r3, [r7, #28]
 800e8de:	2b00      	cmp	r3, #0
 800e8e0:	d12f      	bne.n	800e942 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e8e2:	68fb      	ldr	r3, [r7, #12]
 800e8e4:	699b      	ldr	r3, [r3, #24]
 800e8e6:	2b00      	cmp	r3, #0
 800e8e8:	d103      	bne.n	800e8f2 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e8ea:	68fb      	ldr	r3, [r7, #12]
 800e8ec:	689b      	ldr	r3, [r3, #8]
 800e8ee:	633b      	str	r3, [r7, #48]	@ 0x30
 800e8f0:	e013      	b.n	800e91a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	d007      	beq.n	800e90a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e8fa:	68fb      	ldr	r3, [r7, #12]
 800e8fc:	699b      	ldr	r3, [r3, #24]
 800e8fe:	4619      	mov	r1, r3
 800e900:	68f8      	ldr	r0, [r7, #12]
 800e902:	f7fe fefe 	bl	800d702 <clmt_clust>
 800e906:	6338      	str	r0, [r7, #48]	@ 0x30
 800e908:	e007      	b.n	800e91a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e90a:	68fa      	ldr	r2, [r7, #12]
 800e90c:	68fb      	ldr	r3, [r7, #12]
 800e90e:	69db      	ldr	r3, [r3, #28]
 800e910:	4619      	mov	r1, r3
 800e912:	4610      	mov	r0, r2
 800e914:	f7fe fc67 	bl	800d1e6 <get_fat>
 800e918:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e91a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e91c:	2b01      	cmp	r3, #1
 800e91e:	d804      	bhi.n	800e92a <f_read+0xe2>
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	2202      	movs	r2, #2
 800e924:	755a      	strb	r2, [r3, #21]
 800e926:	2302      	movs	r3, #2
 800e928:	e0c9      	b.n	800eabe <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e92a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e92c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e930:	d104      	bne.n	800e93c <f_read+0xf4>
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	2201      	movs	r2, #1
 800e936:	755a      	strb	r2, [r3, #21]
 800e938:	2301      	movs	r3, #1
 800e93a:	e0c0      	b.n	800eabe <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e940:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e942:	697a      	ldr	r2, [r7, #20]
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	69db      	ldr	r3, [r3, #28]
 800e948:	4619      	mov	r1, r3
 800e94a:	4610      	mov	r0, r2
 800e94c:	f7fe fc2c 	bl	800d1a8 <clust2sect>
 800e950:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e952:	69bb      	ldr	r3, [r7, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	d104      	bne.n	800e962 <f_read+0x11a>
 800e958:	68fb      	ldr	r3, [r7, #12]
 800e95a:	2202      	movs	r2, #2
 800e95c:	755a      	strb	r2, [r3, #21]
 800e95e:	2302      	movs	r3, #2
 800e960:	e0ad      	b.n	800eabe <f_read+0x276>
			sect += csect;
 800e962:	69ba      	ldr	r2, [r7, #24]
 800e964:	69fb      	ldr	r3, [r7, #28]
 800e966:	4413      	add	r3, r2
 800e968:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	0a5b      	lsrs	r3, r3, #9
 800e96e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e970:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e972:	2b00      	cmp	r3, #0
 800e974:	d039      	beq.n	800e9ea <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e976:	69fa      	ldr	r2, [r7, #28]
 800e978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e97a:	4413      	add	r3, r2
 800e97c:	697a      	ldr	r2, [r7, #20]
 800e97e:	8952      	ldrh	r2, [r2, #10]
 800e980:	4293      	cmp	r3, r2
 800e982:	d905      	bls.n	800e990 <f_read+0x148>
					cc = fs->csize - csect;
 800e984:	697b      	ldr	r3, [r7, #20]
 800e986:	895b      	ldrh	r3, [r3, #10]
 800e988:	461a      	mov	r2, r3
 800e98a:	69fb      	ldr	r3, [r7, #28]
 800e98c:	1ad3      	subs	r3, r2, r3
 800e98e:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	7858      	ldrb	r0, [r3, #1]
 800e994:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e996:	69ba      	ldr	r2, [r7, #24]
 800e998:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e99a:	f7fe f859 	bl	800ca50 <disk_read>
 800e99e:	4603      	mov	r3, r0
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d004      	beq.n	800e9ae <f_read+0x166>
 800e9a4:	68fb      	ldr	r3, [r7, #12]
 800e9a6:	2201      	movs	r2, #1
 800e9a8:	755a      	strb	r2, [r3, #21]
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	e087      	b.n	800eabe <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	7d1b      	ldrb	r3, [r3, #20]
 800e9b2:	b25b      	sxtb	r3, r3
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	da14      	bge.n	800e9e2 <f_read+0x19a>
 800e9b8:	68fb      	ldr	r3, [r7, #12]
 800e9ba:	6a1a      	ldr	r2, [r3, #32]
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	1ad3      	subs	r3, r2, r3
 800e9c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d90d      	bls.n	800e9e2 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	6a1a      	ldr	r2, [r3, #32]
 800e9ca:	69bb      	ldr	r3, [r7, #24]
 800e9cc:	1ad3      	subs	r3, r2, r3
 800e9ce:	025b      	lsls	r3, r3, #9
 800e9d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e9d2:	18d0      	adds	r0, r2, r3
 800e9d4:	68fb      	ldr	r3, [r7, #12]
 800e9d6:	3330      	adds	r3, #48	@ 0x30
 800e9d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9dc:	4619      	mov	r1, r3
 800e9de:	f7fe f918 	bl	800cc12 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e9e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9e4:	025b      	lsls	r3, r3, #9
 800e9e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e9e8:	e050      	b.n	800ea8c <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e9ea:	68fb      	ldr	r3, [r7, #12]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	69ba      	ldr	r2, [r7, #24]
 800e9f0:	429a      	cmp	r2, r3
 800e9f2:	d02e      	beq.n	800ea52 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	7d1b      	ldrb	r3, [r3, #20]
 800e9f8:	b25b      	sxtb	r3, r3
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	da18      	bge.n	800ea30 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e9fe:	697b      	ldr	r3, [r7, #20]
 800ea00:	7858      	ldrb	r0, [r3, #1]
 800ea02:	68fb      	ldr	r3, [r7, #12]
 800ea04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	6a1a      	ldr	r2, [r3, #32]
 800ea0c:	2301      	movs	r3, #1
 800ea0e:	f7fe f83f 	bl	800ca90 <disk_write>
 800ea12:	4603      	mov	r3, r0
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	d004      	beq.n	800ea22 <f_read+0x1da>
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	2201      	movs	r2, #1
 800ea1c:	755a      	strb	r2, [r3, #21]
 800ea1e:	2301      	movs	r3, #1
 800ea20:	e04d      	b.n	800eabe <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	7d1b      	ldrb	r3, [r3, #20]
 800ea26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ea2a:	b2da      	uxtb	r2, r3
 800ea2c:	68fb      	ldr	r3, [r7, #12]
 800ea2e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ea30:	697b      	ldr	r3, [r7, #20]
 800ea32:	7858      	ldrb	r0, [r3, #1]
 800ea34:	68fb      	ldr	r3, [r7, #12]
 800ea36:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800ea3a:	2301      	movs	r3, #1
 800ea3c:	69ba      	ldr	r2, [r7, #24]
 800ea3e:	f7fe f807 	bl	800ca50 <disk_read>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d004      	beq.n	800ea52 <f_read+0x20a>
 800ea48:	68fb      	ldr	r3, [r7, #12]
 800ea4a:	2201      	movs	r2, #1
 800ea4c:	755a      	strb	r2, [r3, #21]
 800ea4e:	2301      	movs	r3, #1
 800ea50:	e035      	b.n	800eabe <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800ea52:	68fb      	ldr	r3, [r7, #12]
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ea58:	68fb      	ldr	r3, [r7, #12]
 800ea5a:	699b      	ldr	r3, [r3, #24]
 800ea5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea60:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800ea64:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800ea66:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d901      	bls.n	800ea72 <f_read+0x22a>
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800ea72:	68fb      	ldr	r3, [r7, #12]
 800ea74:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ea78:	68fb      	ldr	r3, [r7, #12]
 800ea7a:	699b      	ldr	r3, [r3, #24]
 800ea7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea80:	4413      	add	r3, r2
 800ea82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ea84:	4619      	mov	r1, r3
 800ea86:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ea88:	f7fe f8c3 	bl	800cc12 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800ea8c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ea8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea90:	4413      	add	r3, r2
 800ea92:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea94:	68fb      	ldr	r3, [r7, #12]
 800ea96:	699a      	ldr	r2, [r3, #24]
 800ea98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea9a:	441a      	add	r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	619a      	str	r2, [r3, #24]
 800eaa0:	683b      	ldr	r3, [r7, #0]
 800eaa2:	681a      	ldr	r2, [r3, #0]
 800eaa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaa6:	441a      	add	r2, r3
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	601a      	str	r2, [r3, #0]
 800eaac:	687a      	ldr	r2, [r7, #4]
 800eaae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eab0:	1ad3      	subs	r3, r2, r3
 800eab2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2b00      	cmp	r3, #0
 800eab8:	f47f af01 	bne.w	800e8be <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800eabc:	2300      	movs	r3, #0
}
 800eabe:	4618      	mov	r0, r3
 800eac0:	3738      	adds	r7, #56	@ 0x38
 800eac2:	46bd      	mov	sp, r7
 800eac4:	bd80      	pop	{r7, pc}

0800eac6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800eac6:	b580      	push	{r7, lr}
 800eac8:	b086      	sub	sp, #24
 800eaca:	af00      	add	r7, sp, #0
 800eacc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f107 0208 	add.w	r2, r7, #8
 800ead4:	4611      	mov	r1, r2
 800ead6:	4618      	mov	r0, r3
 800ead8:	f7ff fc80 	bl	800e3dc <validate>
 800eadc:	4603      	mov	r3, r0
 800eade:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800eae0:	7dfb      	ldrb	r3, [r7, #23]
 800eae2:	2b00      	cmp	r3, #0
 800eae4:	d168      	bne.n	800ebb8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800eae6:	687b      	ldr	r3, [r7, #4]
 800eae8:	7d1b      	ldrb	r3, [r3, #20]
 800eaea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d062      	beq.n	800ebb8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	7d1b      	ldrb	r3, [r3, #20]
 800eaf6:	b25b      	sxtb	r3, r3
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	da15      	bge.n	800eb28 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800eafc:	68bb      	ldr	r3, [r7, #8]
 800eafe:	7858      	ldrb	r0, [r3, #1]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	6a1a      	ldr	r2, [r3, #32]
 800eb0a:	2301      	movs	r3, #1
 800eb0c:	f7fd ffc0 	bl	800ca90 <disk_write>
 800eb10:	4603      	mov	r3, r0
 800eb12:	2b00      	cmp	r3, #0
 800eb14:	d001      	beq.n	800eb1a <f_sync+0x54>
 800eb16:	2301      	movs	r3, #1
 800eb18:	e04f      	b.n	800ebba <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	7d1b      	ldrb	r3, [r3, #20]
 800eb1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800eb22:	b2da      	uxtb	r2, r3
 800eb24:	687b      	ldr	r3, [r7, #4]
 800eb26:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800eb28:	f7fb ff20 	bl	800a96c <get_fattime>
 800eb2c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800eb2e:	68ba      	ldr	r2, [r7, #8]
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb34:	4619      	mov	r1, r3
 800eb36:	4610      	mov	r0, r2
 800eb38:	f7fe fa9a 	bl	800d070 <move_window>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800eb40:	7dfb      	ldrb	r3, [r7, #23]
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d138      	bne.n	800ebb8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800eb46:	687b      	ldr	r3, [r7, #4]
 800eb48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eb4a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	330b      	adds	r3, #11
 800eb50:	781a      	ldrb	r2, [r3, #0]
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	330b      	adds	r3, #11
 800eb56:	f042 0220 	orr.w	r2, r2, #32
 800eb5a:	b2d2      	uxtb	r2, r2
 800eb5c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6818      	ldr	r0, [r3, #0]
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	689b      	ldr	r3, [r3, #8]
 800eb66:	461a      	mov	r2, r3
 800eb68:	68f9      	ldr	r1, [r7, #12]
 800eb6a:	f7fe ffa4 	bl	800dab6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800eb6e:	68fb      	ldr	r3, [r7, #12]
 800eb70:	f103 021c 	add.w	r2, r3, #28
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	68db      	ldr	r3, [r3, #12]
 800eb78:	4619      	mov	r1, r3
 800eb7a:	4610      	mov	r0, r2
 800eb7c:	f7fe f81d 	bl	800cbba <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800eb80:	68fb      	ldr	r3, [r7, #12]
 800eb82:	3316      	adds	r3, #22
 800eb84:	6939      	ldr	r1, [r7, #16]
 800eb86:	4618      	mov	r0, r3
 800eb88:	f7fe f817 	bl	800cbba <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800eb8c:	68fb      	ldr	r3, [r7, #12]
 800eb8e:	3312      	adds	r3, #18
 800eb90:	2100      	movs	r1, #0
 800eb92:	4618      	mov	r0, r3
 800eb94:	f7fd fff6 	bl	800cb84 <st_word>
					fs->wflag = 1;
 800eb98:	68bb      	ldr	r3, [r7, #8]
 800eb9a:	2201      	movs	r2, #1
 800eb9c:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800eb9e:	68bb      	ldr	r3, [r7, #8]
 800eba0:	4618      	mov	r0, r3
 800eba2:	f7fe fa93 	bl	800d0cc <sync_fs>
 800eba6:	4603      	mov	r3, r0
 800eba8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ebaa:	687b      	ldr	r3, [r7, #4]
 800ebac:	7d1b      	ldrb	r3, [r3, #20]
 800ebae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800ebb2:	b2da      	uxtb	r2, r3
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ebb8:	7dfb      	ldrb	r3, [r7, #23]
}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3718      	adds	r7, #24
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b084      	sub	sp, #16
 800ebc6:	af00      	add	r7, sp, #0
 800ebc8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ebca:	6878      	ldr	r0, [r7, #4]
 800ebcc:	f7ff ff7b 	bl	800eac6 <f_sync>
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ebd4:	7bfb      	ldrb	r3, [r7, #15]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d118      	bne.n	800ec0c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ebda:	687b      	ldr	r3, [r7, #4]
 800ebdc:	f107 0208 	add.w	r2, r7, #8
 800ebe0:	4611      	mov	r1, r2
 800ebe2:	4618      	mov	r0, r3
 800ebe4:	f7ff fbfa 	bl	800e3dc <validate>
 800ebe8:	4603      	mov	r3, r0
 800ebea:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800ebec:	7bfb      	ldrb	r3, [r7, #15]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10c      	bne.n	800ec0c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	691b      	ldr	r3, [r3, #16]
 800ebf6:	4618      	mov	r0, r3
 800ebf8:	f7fe f996 	bl	800cf28 <dec_lock>
 800ebfc:	4603      	mov	r3, r0
 800ebfe:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800ec00:	7bfb      	ldrb	r3, [r7, #15]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d102      	bne.n	800ec0c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800ec06:	687b      	ldr	r3, [r7, #4]
 800ec08:	2200      	movs	r2, #0
 800ec0a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800ec0c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ec0e:	4618      	mov	r0, r3
 800ec10:	3710      	adds	r7, #16
 800ec12:	46bd      	mov	sp, r7
 800ec14:	bd80      	pop	{r7, pc}
	...

0800ec18 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	b087      	sub	sp, #28
 800ec1c:	af00      	add	r7, sp, #0
 800ec1e:	60f8      	str	r0, [r7, #12]
 800ec20:	60b9      	str	r1, [r7, #8]
 800ec22:	4613      	mov	r3, r2
 800ec24:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800ec26:	2301      	movs	r3, #1
 800ec28:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800ec2a:	2300      	movs	r3, #0
 800ec2c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800ec2e:	4b1f      	ldr	r3, [pc, #124]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec30:	7a5b      	ldrb	r3, [r3, #9]
 800ec32:	b2db      	uxtb	r3, r3
 800ec34:	2b00      	cmp	r3, #0
 800ec36:	d131      	bne.n	800ec9c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800ec38:	4b1c      	ldr	r3, [pc, #112]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec3a:	7a5b      	ldrb	r3, [r3, #9]
 800ec3c:	b2db      	uxtb	r3, r3
 800ec3e:	461a      	mov	r2, r3
 800ec40:	4b1a      	ldr	r3, [pc, #104]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec42:	2100      	movs	r1, #0
 800ec44:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800ec46:	4b19      	ldr	r3, [pc, #100]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec48:	7a5b      	ldrb	r3, [r3, #9]
 800ec4a:	b2db      	uxtb	r3, r3
 800ec4c:	4a17      	ldr	r2, [pc, #92]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec4e:	009b      	lsls	r3, r3, #2
 800ec50:	4413      	add	r3, r2
 800ec52:	68fa      	ldr	r2, [r7, #12]
 800ec54:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800ec56:	4b15      	ldr	r3, [pc, #84]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec58:	7a5b      	ldrb	r3, [r3, #9]
 800ec5a:	b2db      	uxtb	r3, r3
 800ec5c:	461a      	mov	r2, r3
 800ec5e:	4b13      	ldr	r3, [pc, #76]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec60:	4413      	add	r3, r2
 800ec62:	79fa      	ldrb	r2, [r7, #7]
 800ec64:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800ec66:	4b11      	ldr	r3, [pc, #68]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec68:	7a5b      	ldrb	r3, [r3, #9]
 800ec6a:	b2db      	uxtb	r3, r3
 800ec6c:	1c5a      	adds	r2, r3, #1
 800ec6e:	b2d1      	uxtb	r1, r2
 800ec70:	4a0e      	ldr	r2, [pc, #56]	@ (800ecac <FATFS_LinkDriverEx+0x94>)
 800ec72:	7251      	strb	r1, [r2, #9]
 800ec74:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800ec76:	7dbb      	ldrb	r3, [r7, #22]
 800ec78:	3330      	adds	r3, #48	@ 0x30
 800ec7a:	b2da      	uxtb	r2, r3
 800ec7c:	68bb      	ldr	r3, [r7, #8]
 800ec7e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800ec80:	68bb      	ldr	r3, [r7, #8]
 800ec82:	3301      	adds	r3, #1
 800ec84:	223a      	movs	r2, #58	@ 0x3a
 800ec86:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800ec88:	68bb      	ldr	r3, [r7, #8]
 800ec8a:	3302      	adds	r3, #2
 800ec8c:	222f      	movs	r2, #47	@ 0x2f
 800ec8e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800ec90:	68bb      	ldr	r3, [r7, #8]
 800ec92:	3303      	adds	r3, #3
 800ec94:	2200      	movs	r2, #0
 800ec96:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800ec9c:	7dfb      	ldrb	r3, [r7, #23]
}
<<<<<<< HEAD
 800ec9e:	4618      	mov	r0, r3
 800eca0:	371c      	adds	r7, #28
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	20000444 	.word	0x20000444
=======
 800ecba:	4618      	mov	r0, r3
 800ecbc:	371c      	adds	r7, #28
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	20000448 	.word	0x20000448
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ecb0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b082      	sub	sp, #8
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
 800ecb8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800ecba:	2200      	movs	r2, #0
 800ecbc:	6839      	ldr	r1, [r7, #0]
 800ecbe:	6878      	ldr	r0, [r7, #4]
 800ecc0:	f7ff ffaa 	bl	800ec18 <FATFS_LinkDriverEx>
 800ecc4:	4603      	mov	r3, r0
}
 800ecc6:	4618      	mov	r0, r3
 800ecc8:	3708      	adds	r7, #8
 800ecca:	46bd      	mov	sp, r7
 800eccc:	bd80      	pop	{r7, pc}
	...

0800ecd0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ecd4:	2200      	movs	r2, #0
 800ecd6:	4912      	ldr	r1, [pc, #72]	@ (800ed20 <MX_USB_DEVICE_Init+0x50>)
 800ecd8:	4812      	ldr	r0, [pc, #72]	@ (800ed24 <MX_USB_DEVICE_Init+0x54>)
 800ecda:	f7fc fb75 	bl	800b3c8 <USBD_Init>
 800ecde:	4603      	mov	r3, r0
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	d001      	beq.n	800ece8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ece4:	f7f2 fd78 	bl	80017d8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ece8:	490f      	ldr	r1, [pc, #60]	@ (800ed28 <MX_USB_DEVICE_Init+0x58>)
 800ecea:	480e      	ldr	r0, [pc, #56]	@ (800ed24 <MX_USB_DEVICE_Init+0x54>)
 800ecec:	f7fc fb9c 	bl	800b428 <USBD_RegisterClass>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ecf6:	f7f2 fd6f 	bl	80017d8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ecfa:	490c      	ldr	r1, [pc, #48]	@ (800ed2c <MX_USB_DEVICE_Init+0x5c>)
 800ecfc:	4809      	ldr	r0, [pc, #36]	@ (800ed24 <MX_USB_DEVICE_Init+0x54>)
 800ecfe:	f7fc fa93 	bl	800b228 <USBD_CDC_RegisterInterface>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d001      	beq.n	800ed0c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ed08:	f7f2 fd66 	bl	80017d8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ed0c:	4805      	ldr	r0, [pc, #20]	@ (800ed24 <MX_USB_DEVICE_Init+0x54>)
 800ed0e:	f7fc fbc1 	bl	800b494 <USBD_Start>
 800ed12:	4603      	mov	r3, r0
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d001      	beq.n	800ed1c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ed18:	f7f2 fd5e 	bl	80017d8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
<<<<<<< HEAD
 800ed1c:	bf00      	nop
 800ed1e:	bd80      	pop	{r7, pc}
 800ed20:	200000e8 	.word	0x200000e8
 800ed24:	20000450 	.word	0x20000450
 800ed28:	20000054 	.word	0x20000054
 800ed2c:	200000d4 	.word	0x200000d4
=======
 800ed38:	bf00      	nop
 800ed3a:	bd80      	pop	{r7, pc}
 800ed3c:	200000e8 	.word	0x200000e8
 800ed40:	20000454 	.word	0x20000454
 800ed44:	20000054 	.word	0x20000054
 800ed48:	200000d4 	.word	0x200000d4
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ed30 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ed30:	b580      	push	{r7, lr}
 800ed32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ed34:	2200      	movs	r2, #0
 800ed36:	4905      	ldr	r1, [pc, #20]	@ (800ed4c <CDC_Init_FS+0x1c>)
 800ed38:	4805      	ldr	r0, [pc, #20]	@ (800ed50 <CDC_Init_FS+0x20>)
 800ed3a:	f7fc fa8f 	bl	800b25c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ed3e:	4905      	ldr	r1, [pc, #20]	@ (800ed54 <CDC_Init_FS+0x24>)
 800ed40:	4803      	ldr	r0, [pc, #12]	@ (800ed50 <CDC_Init_FS+0x20>)
 800ed42:	f7fc faad 	bl	800b2a0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ed46:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
<<<<<<< HEAD
 800ed48:	4618      	mov	r0, r3
 800ed4a:	bd80      	pop	{r7, pc}
 800ed4c:	20000b2c 	.word	0x20000b2c
 800ed50:	20000450 	.word	0x20000450
 800ed54:	2000072c 	.word	0x2000072c
=======
 800ed64:	4618      	mov	r0, r3
 800ed66:	bd80      	pop	{r7, pc}
 800ed68:	20000b30 	.word	0x20000b30
 800ed6c:	20000454 	.word	0x20000454
 800ed70:	20000730 	.word	0x20000730
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ed58 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ed58:	b480      	push	{r7}
 800ed5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800ed5c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800ed5e:	4618      	mov	r0, r3
 800ed60:	46bd      	mov	sp, r7
 800ed62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed66:	4770      	bx	lr

0800ed68 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800ed68:	b480      	push	{r7}
 800ed6a:	b083      	sub	sp, #12
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	4603      	mov	r3, r0
 800ed70:	6039      	str	r1, [r7, #0]
 800ed72:	71fb      	strb	r3, [r7, #7]
 800ed74:	4613      	mov	r3, r2
 800ed76:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800ed78:	79fb      	ldrb	r3, [r7, #7]
 800ed7a:	2b23      	cmp	r3, #35	@ 0x23
 800ed7c:	d84a      	bhi.n	800ee14 <CDC_Control_FS+0xac>
 800ed7e:	a201      	add	r2, pc, #4	@ (adr r2, 800ed84 <CDC_Control_FS+0x1c>)
 800ed80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ed84:	0800ee15 	.word	0x0800ee15
 800ed88:	0800ee15 	.word	0x0800ee15
 800ed8c:	0800ee15 	.word	0x0800ee15
 800ed90:	0800ee15 	.word	0x0800ee15
 800ed94:	0800ee15 	.word	0x0800ee15
 800ed98:	0800ee15 	.word	0x0800ee15
 800ed9c:	0800ee15 	.word	0x0800ee15
 800eda0:	0800ee15 	.word	0x0800ee15
 800eda4:	0800ee15 	.word	0x0800ee15
 800eda8:	0800ee15 	.word	0x0800ee15
 800edac:	0800ee15 	.word	0x0800ee15
 800edb0:	0800ee15 	.word	0x0800ee15
 800edb4:	0800ee15 	.word	0x0800ee15
 800edb8:	0800ee15 	.word	0x0800ee15
 800edbc:	0800ee15 	.word	0x0800ee15
 800edc0:	0800ee15 	.word	0x0800ee15
 800edc4:	0800ee15 	.word	0x0800ee15
 800edc8:	0800ee15 	.word	0x0800ee15
 800edcc:	0800ee15 	.word	0x0800ee15
 800edd0:	0800ee15 	.word	0x0800ee15
 800edd4:	0800ee15 	.word	0x0800ee15
 800edd8:	0800ee15 	.word	0x0800ee15
 800eddc:	0800ee15 	.word	0x0800ee15
 800ede0:	0800ee15 	.word	0x0800ee15
 800ede4:	0800ee15 	.word	0x0800ee15
 800ede8:	0800ee15 	.word	0x0800ee15
 800edec:	0800ee15 	.word	0x0800ee15
 800edf0:	0800ee15 	.word	0x0800ee15
 800edf4:	0800ee15 	.word	0x0800ee15
 800edf8:	0800ee15 	.word	0x0800ee15
 800edfc:	0800ee15 	.word	0x0800ee15
 800ee00:	0800ee15 	.word	0x0800ee15
 800ee04:	0800ee15 	.word	0x0800ee15
 800ee08:	0800ee15 	.word	0x0800ee15
 800ee0c:	0800ee15 	.word	0x0800ee15
 800ee10:	0800ee15 	.word	0x0800ee15
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ee14:	bf00      	nop
  }

  return (USBD_OK);
 800ee16:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ee18:	4618      	mov	r0, r3
 800ee1a:	370c      	adds	r7, #12
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee22:	4770      	bx	lr

0800ee24 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ee24:	b580      	push	{r7, lr}
 800ee26:	b082      	sub	sp, #8
 800ee28:	af00      	add	r7, sp, #0
 800ee2a:	6078      	str	r0, [r7, #4]
 800ee2c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ee2e:	6879      	ldr	r1, [r7, #4]
 800ee30:	4805      	ldr	r0, [pc, #20]	@ (800ee48 <CDC_Receive_FS+0x24>)
 800ee32:	f7fc fa35 	bl	800b2a0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ee36:	4804      	ldr	r0, [pc, #16]	@ (800ee48 <CDC_Receive_FS+0x24>)
 800ee38:	f7fc fa90 	bl	800b35c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ee3c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
<<<<<<< HEAD
 800ee3e:	4618      	mov	r0, r3
 800ee40:	3708      	adds	r7, #8
 800ee42:	46bd      	mov	sp, r7
 800ee44:	bd80      	pop	{r7, pc}
 800ee46:	bf00      	nop
 800ee48:	20000450 	.word	0x20000450
=======
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	3708      	adds	r7, #8
 800ee5e:	46bd      	mov	sp, r7
 800ee60:	bd80      	pop	{r7, pc}
 800ee62:	bf00      	nop
 800ee64:	20000454 	.word	0x20000454
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ee4c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b084      	sub	sp, #16
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
 800ee54:	460b      	mov	r3, r1
 800ee56:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ee58:	2300      	movs	r3, #0
 800ee5a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ee5c:	4b0d      	ldr	r3, [pc, #52]	@ (800ee94 <CDC_Transmit_FS+0x48>)
 800ee5e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ee62:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ee64:	68bb      	ldr	r3, [r7, #8]
 800ee66:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d001      	beq.n	800ee72 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ee6e:	2301      	movs	r3, #1
 800ee70:	e00b      	b.n	800ee8a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ee72:	887b      	ldrh	r3, [r7, #2]
 800ee74:	461a      	mov	r2, r3
 800ee76:	6879      	ldr	r1, [r7, #4]
 800ee78:	4806      	ldr	r0, [pc, #24]	@ (800ee94 <CDC_Transmit_FS+0x48>)
 800ee7a:	f7fc f9ef 	bl	800b25c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ee7e:	4805      	ldr	r0, [pc, #20]	@ (800ee94 <CDC_Transmit_FS+0x48>)
 800ee80:	f7fc fa2c 	bl	800b2dc <USBD_CDC_TransmitPacket>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ee88:	7bfb      	ldrb	r3, [r7, #15]
}
<<<<<<< HEAD
 800ee8a:	4618      	mov	r0, r3
 800ee8c:	3710      	adds	r7, #16
 800ee8e:	46bd      	mov	sp, r7
 800ee90:	bd80      	pop	{r7, pc}
 800ee92:	bf00      	nop
 800ee94:	20000450 	.word	0x20000450
=======
 800eea6:	4618      	mov	r0, r3
 800eea8:	3710      	adds	r7, #16
 800eeaa:	46bd      	mov	sp, r7
 800eeac:	bd80      	pop	{r7, pc}
 800eeae:	bf00      	nop
 800eeb0:	20000454 	.word	0x20000454
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ee98 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ee98:	b480      	push	{r7}
 800ee9a:	b087      	sub	sp, #28
 800ee9c:	af00      	add	r7, sp, #0
 800ee9e:	60f8      	str	r0, [r7, #12]
 800eea0:	60b9      	str	r1, [r7, #8]
 800eea2:	4613      	mov	r3, r2
 800eea4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800eea6:	2300      	movs	r3, #0
 800eea8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800eeaa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800eeae:	4618      	mov	r0, r3
 800eeb0:	371c      	adds	r7, #28
 800eeb2:	46bd      	mov	sp, r7
 800eeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeb8:	4770      	bx	lr
	...

0800eebc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b083      	sub	sp, #12
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	4603      	mov	r3, r0
 800eec4:	6039      	str	r1, [r7, #0]
 800eec6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800eec8:	683b      	ldr	r3, [r7, #0]
 800eeca:	2212      	movs	r2, #18
 800eecc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800eece:	4b03      	ldr	r3, [pc, #12]	@ (800eedc <USBD_FS_DeviceDescriptor+0x20>)
}
 800eed0:	4618      	mov	r0, r3
 800eed2:	370c      	adds	r7, #12
 800eed4:	46bd      	mov	sp, r7
 800eed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eeda:	4770      	bx	lr
 800eedc:	20000104 	.word	0x20000104

0800eee0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b083      	sub	sp, #12
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	4603      	mov	r3, r0
 800eee8:	6039      	str	r1, [r7, #0]
 800eeea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800eeec:	683b      	ldr	r3, [r7, #0]
 800eeee:	2204      	movs	r2, #4
 800eef0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800eef2:	4b03      	ldr	r3, [pc, #12]	@ (800ef00 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800eef4:	4618      	mov	r0, r3
 800eef6:	370c      	adds	r7, #12
 800eef8:	46bd      	mov	sp, r7
 800eefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eefe:	4770      	bx	lr
 800ef00:	20000118 	.word	0x20000118

0800ef04 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef04:	b580      	push	{r7, lr}
 800ef06:	b082      	sub	sp, #8
 800ef08:	af00      	add	r7, sp, #0
 800ef0a:	4603      	mov	r3, r0
 800ef0c:	6039      	str	r1, [r7, #0]
 800ef0e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ef10:	79fb      	ldrb	r3, [r7, #7]
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d105      	bne.n	800ef22 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef16:	683a      	ldr	r2, [r7, #0]
 800ef18:	4907      	ldr	r1, [pc, #28]	@ (800ef38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef1a:	4808      	ldr	r0, [pc, #32]	@ (800ef3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef1c:	f7fd fc6a 	bl	800c7f4 <USBD_GetString>
 800ef20:	e004      	b.n	800ef2c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ef22:	683a      	ldr	r2, [r7, #0]
 800ef24:	4904      	ldr	r1, [pc, #16]	@ (800ef38 <USBD_FS_ProductStrDescriptor+0x34>)
 800ef26:	4805      	ldr	r0, [pc, #20]	@ (800ef3c <USBD_FS_ProductStrDescriptor+0x38>)
 800ef28:	f7fd fc64 	bl	800c7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ef2c:	4b02      	ldr	r3, [pc, #8]	@ (800ef38 <USBD_FS_ProductStrDescriptor+0x34>)
}
<<<<<<< HEAD
 800ef2e:	4618      	mov	r0, r3
 800ef30:	3708      	adds	r7, #8
 800ef32:	46bd      	mov	sp, r7
 800ef34:	bd80      	pop	{r7, pc}
 800ef36:	bf00      	nop
 800ef38:	20000f2c 	.word	0x20000f2c
 800ef3c:	0801042c 	.word	0x0801042c
=======
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3708      	adds	r7, #8
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}
 800ef52:	bf00      	nop
 800ef54:	20000f30 	.word	0x20000f30
 800ef58:	0801045c 	.word	0x0801045c
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ef40 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef40:	b580      	push	{r7, lr}
 800ef42:	b082      	sub	sp, #8
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	4603      	mov	r3, r0
 800ef48:	6039      	str	r1, [r7, #0]
 800ef4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ef4c:	683a      	ldr	r2, [r7, #0]
 800ef4e:	4904      	ldr	r1, [pc, #16]	@ (800ef60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ef50:	4804      	ldr	r0, [pc, #16]	@ (800ef64 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ef52:	f7fd fc4f 	bl	800c7f4 <USBD_GetString>
  return USBD_StrDesc;
 800ef56:	4b02      	ldr	r3, [pc, #8]	@ (800ef60 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
<<<<<<< HEAD
 800ef58:	4618      	mov	r0, r3
 800ef5a:	3708      	adds	r7, #8
 800ef5c:	46bd      	mov	sp, r7
 800ef5e:	bd80      	pop	{r7, pc}
 800ef60:	20000f2c 	.word	0x20000f2c
 800ef64:	08010444 	.word	0x08010444
=======
 800ef74:	4618      	mov	r0, r3
 800ef76:	3708      	adds	r7, #8
 800ef78:	46bd      	mov	sp, r7
 800ef7a:	bd80      	pop	{r7, pc}
 800ef7c:	20000f30 	.word	0x20000f30
 800ef80:	08010474 	.word	0x08010474
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800ef68 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef68:	b580      	push	{r7, lr}
 800ef6a:	b082      	sub	sp, #8
 800ef6c:	af00      	add	r7, sp, #0
 800ef6e:	4603      	mov	r3, r0
 800ef70:	6039      	str	r1, [r7, #0]
 800ef72:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ef74:	683b      	ldr	r3, [r7, #0]
 800ef76:	221a      	movs	r2, #26
 800ef78:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ef7a:	f000 f843 	bl	800f004 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ef7e:	4b02      	ldr	r3, [pc, #8]	@ (800ef88 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ef80:	4618      	mov	r0, r3
 800ef82:	3708      	adds	r7, #8
 800ef84:	46bd      	mov	sp, r7
 800ef86:	bd80      	pop	{r7, pc}
 800ef88:	2000011c 	.word	0x2000011c

0800ef8c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	4603      	mov	r3, r0
 800ef94:	6039      	str	r1, [r7, #0]
 800ef96:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ef98:	79fb      	ldrb	r3, [r7, #7]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	d105      	bne.n	800efaa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ef9e:	683a      	ldr	r2, [r7, #0]
 800efa0:	4907      	ldr	r1, [pc, #28]	@ (800efc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efa2:	4808      	ldr	r0, [pc, #32]	@ (800efc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efa4:	f7fd fc26 	bl	800c7f4 <USBD_GetString>
 800efa8:	e004      	b.n	800efb4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800efaa:	683a      	ldr	r2, [r7, #0]
 800efac:	4904      	ldr	r1, [pc, #16]	@ (800efc0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800efae:	4805      	ldr	r0, [pc, #20]	@ (800efc4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800efb0:	f7fd fc20 	bl	800c7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800efb4:	4b02      	ldr	r3, [pc, #8]	@ (800efc0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
<<<<<<< HEAD
 800efb6:	4618      	mov	r0, r3
 800efb8:	3708      	adds	r7, #8
 800efba:	46bd      	mov	sp, r7
 800efbc:	bd80      	pop	{r7, pc}
 800efbe:	bf00      	nop
 800efc0:	20000f2c 	.word	0x20000f2c
 800efc4:	08010458 	.word	0x08010458
=======
 800efd2:	4618      	mov	r0, r3
 800efd4:	3708      	adds	r7, #8
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	20000f30 	.word	0x20000f30
 800efe0:	08010488 	.word	0x08010488
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800efc8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800efc8:	b580      	push	{r7, lr}
 800efca:	b082      	sub	sp, #8
 800efcc:	af00      	add	r7, sp, #0
 800efce:	4603      	mov	r3, r0
 800efd0:	6039      	str	r1, [r7, #0]
 800efd2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800efd4:	79fb      	ldrb	r3, [r7, #7]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d105      	bne.n	800efe6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800efda:	683a      	ldr	r2, [r7, #0]
 800efdc:	4907      	ldr	r1, [pc, #28]	@ (800effc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800efde:	4808      	ldr	r0, [pc, #32]	@ (800f000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800efe0:	f7fd fc08 	bl	800c7f4 <USBD_GetString>
 800efe4:	e004      	b.n	800eff0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800efe6:	683a      	ldr	r2, [r7, #0]
 800efe8:	4904      	ldr	r1, [pc, #16]	@ (800effc <USBD_FS_InterfaceStrDescriptor+0x34>)
 800efea:	4805      	ldr	r0, [pc, #20]	@ (800f000 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800efec:	f7fd fc02 	bl	800c7f4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eff0:	4b02      	ldr	r3, [pc, #8]	@ (800effc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
<<<<<<< HEAD
 800eff2:	4618      	mov	r0, r3
 800eff4:	3708      	adds	r7, #8
 800eff6:	46bd      	mov	sp, r7
 800eff8:	bd80      	pop	{r7, pc}
 800effa:	bf00      	nop
 800effc:	20000f2c 	.word	0x20000f2c
 800f000:	08010464 	.word	0x08010464
=======
 800f00e:	4618      	mov	r0, r3
 800f010:	3708      	adds	r7, #8
 800f012:	46bd      	mov	sp, r7
 800f014:	bd80      	pop	{r7, pc}
 800f016:	bf00      	nop
 800f018:	20000f30 	.word	0x20000f30
 800f01c:	08010494 	.word	0x08010494
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f004 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800f00a:	4b0f      	ldr	r3, [pc, #60]	@ (800f048 <Get_SerialNum+0x44>)
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800f010:	4b0e      	ldr	r3, [pc, #56]	@ (800f04c <Get_SerialNum+0x48>)
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800f016:	4b0e      	ldr	r3, [pc, #56]	@ (800f050 <Get_SerialNum+0x4c>)
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800f01c:	68fa      	ldr	r2, [r7, #12]
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	4413      	add	r3, r2
 800f022:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800f024:	68fb      	ldr	r3, [r7, #12]
 800f026:	2b00      	cmp	r3, #0
 800f028:	d009      	beq.n	800f03e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800f02a:	2208      	movs	r2, #8
 800f02c:	4909      	ldr	r1, [pc, #36]	@ (800f054 <Get_SerialNum+0x50>)
 800f02e:	68f8      	ldr	r0, [r7, #12]
 800f030:	f000 f814 	bl	800f05c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800f034:	2204      	movs	r2, #4
 800f036:	4908      	ldr	r1, [pc, #32]	@ (800f058 <Get_SerialNum+0x54>)
 800f038:	68b8      	ldr	r0, [r7, #8]
 800f03a:	f000 f80f 	bl	800f05c <IntToUnicode>
  }
}
 800f03e:	bf00      	nop
 800f040:	3710      	adds	r7, #16
 800f042:	46bd      	mov	sp, r7
 800f044:	bd80      	pop	{r7, pc}
 800f046:	bf00      	nop
 800f048:	1fff7a10 	.word	0x1fff7a10
 800f04c:	1fff7a14 	.word	0x1fff7a14
 800f050:	1fff7a18 	.word	0x1fff7a18
 800f054:	2000011e 	.word	0x2000011e
 800f058:	2000012e 	.word	0x2000012e

0800f05c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b087      	sub	sp, #28
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	4613      	mov	r3, r2
 800f068:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800f06a:	2300      	movs	r3, #0
 800f06c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800f06e:	2300      	movs	r3, #0
 800f070:	75fb      	strb	r3, [r7, #23]
 800f072:	e027      	b.n	800f0c4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800f074:	68fb      	ldr	r3, [r7, #12]
 800f076:	0f1b      	lsrs	r3, r3, #28
 800f078:	2b09      	cmp	r3, #9
 800f07a:	d80b      	bhi.n	800f094 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	0f1b      	lsrs	r3, r3, #28
 800f080:	b2da      	uxtb	r2, r3
 800f082:	7dfb      	ldrb	r3, [r7, #23]
 800f084:	005b      	lsls	r3, r3, #1
 800f086:	4619      	mov	r1, r3
 800f088:	68bb      	ldr	r3, [r7, #8]
 800f08a:	440b      	add	r3, r1
 800f08c:	3230      	adds	r2, #48	@ 0x30
 800f08e:	b2d2      	uxtb	r2, r2
 800f090:	701a      	strb	r2, [r3, #0]
 800f092:	e00a      	b.n	800f0aa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	0f1b      	lsrs	r3, r3, #28
 800f098:	b2da      	uxtb	r2, r3
 800f09a:	7dfb      	ldrb	r3, [r7, #23]
 800f09c:	005b      	lsls	r3, r3, #1
 800f09e:	4619      	mov	r1, r3
 800f0a0:	68bb      	ldr	r3, [r7, #8]
 800f0a2:	440b      	add	r3, r1
 800f0a4:	3237      	adds	r2, #55	@ 0x37
 800f0a6:	b2d2      	uxtb	r2, r2
 800f0a8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	011b      	lsls	r3, r3, #4
 800f0ae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800f0b0:	7dfb      	ldrb	r3, [r7, #23]
 800f0b2:	005b      	lsls	r3, r3, #1
 800f0b4:	3301      	adds	r3, #1
 800f0b6:	68ba      	ldr	r2, [r7, #8]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800f0be:	7dfb      	ldrb	r3, [r7, #23]
 800f0c0:	3301      	adds	r3, #1
 800f0c2:	75fb      	strb	r3, [r7, #23]
 800f0c4:	7dfa      	ldrb	r2, [r7, #23]
 800f0c6:	79fb      	ldrb	r3, [r7, #7]
 800f0c8:	429a      	cmp	r2, r3
 800f0ca:	d3d3      	bcc.n	800f074 <IntToUnicode+0x18>
  }
}
 800f0cc:	bf00      	nop
 800f0ce:	bf00      	nop
 800f0d0:	371c      	adds	r7, #28
 800f0d2:	46bd      	mov	sp, r7
 800f0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d8:	4770      	bx	lr
	...

0800f0dc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800f0dc:	b580      	push	{r7, lr}
 800f0de:	b08a      	sub	sp, #40	@ 0x28
 800f0e0:	af00      	add	r7, sp, #0
 800f0e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f0e4:	f107 0314 	add.w	r3, r7, #20
 800f0e8:	2200      	movs	r2, #0
 800f0ea:	601a      	str	r2, [r3, #0]
 800f0ec:	605a      	str	r2, [r3, #4]
 800f0ee:	609a      	str	r2, [r3, #8]
 800f0f0:	60da      	str	r2, [r3, #12]
 800f0f2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f0fc:	d13a      	bne.n	800f174 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f0fe:	2300      	movs	r3, #0
 800f100:	613b      	str	r3, [r7, #16]
 800f102:	4b1e      	ldr	r3, [pc, #120]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f106:	4a1d      	ldr	r2, [pc, #116]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f108:	f043 0301 	orr.w	r3, r3, #1
 800f10c:	6313      	str	r3, [r2, #48]	@ 0x30
 800f10e:	4b1b      	ldr	r3, [pc, #108]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f112:	f003 0301 	and.w	r3, r3, #1
 800f116:	613b      	str	r3, [r7, #16]
 800f118:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f11a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f11e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f120:	2302      	movs	r3, #2
 800f122:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f124:	2300      	movs	r3, #0
 800f126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f128:	2303      	movs	r3, #3
 800f12a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f12c:	230a      	movs	r3, #10
 800f12e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f130:	f107 0314 	add.w	r3, r7, #20
 800f134:	4619      	mov	r1, r3
 800f136:	4812      	ldr	r0, [pc, #72]	@ (800f180 <HAL_PCD_MspInit+0xa4>)
 800f138:	f7f6 f89a 	bl	8005270 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f13c:	4b0f      	ldr	r3, [pc, #60]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f13e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f140:	4a0e      	ldr	r2, [pc, #56]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f146:	6353      	str	r3, [r2, #52]	@ 0x34
 800f148:	2300      	movs	r3, #0
 800f14a:	60fb      	str	r3, [r7, #12]
 800f14c:	4b0b      	ldr	r3, [pc, #44]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f14e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f150:	4a0a      	ldr	r2, [pc, #40]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f152:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f156:	6453      	str	r3, [r2, #68]	@ 0x44
 800f158:	4b08      	ldr	r3, [pc, #32]	@ (800f17c <HAL_PCD_MspInit+0xa0>)
 800f15a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f15c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f160:	60fb      	str	r3, [r7, #12]
 800f162:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f164:	2200      	movs	r2, #0
 800f166:	2100      	movs	r1, #0
 800f168:	2043      	movs	r0, #67	@ 0x43
 800f16a:	f7f5 fcb8 	bl	8004ade <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f16e:	2043      	movs	r0, #67	@ 0x43
 800f170:	f7f5 fcd1 	bl	8004b16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f174:	bf00      	nop
 800f176:	3728      	adds	r7, #40	@ 0x28
 800f178:	46bd      	mov	sp, r7
 800f17a:	bd80      	pop	{r7, pc}
 800f17c:	40023800 	.word	0x40023800
 800f180:	40020000 	.word	0x40020000

0800f184 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f184:	b580      	push	{r7, lr}
 800f186:	b082      	sub	sp, #8
 800f188:	af00      	add	r7, sp, #0
 800f18a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800f192:	687b      	ldr	r3, [r7, #4]
 800f194:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800f198:	4619      	mov	r1, r3
 800f19a:	4610      	mov	r0, r2
 800f19c:	f7fc f9c7 	bl	800b52e <USBD_LL_SetupStage>
}
 800f1a0:	bf00      	nop
 800f1a2:	3708      	adds	r7, #8
 800f1a4:	46bd      	mov	sp, r7
 800f1a6:	bd80      	pop	{r7, pc}

0800f1a8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b082      	sub	sp, #8
 800f1ac:	af00      	add	r7, sp, #0
 800f1ae:	6078      	str	r0, [r7, #4]
 800f1b0:	460b      	mov	r3, r1
 800f1b2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f1ba:	78fa      	ldrb	r2, [r7, #3]
 800f1bc:	6879      	ldr	r1, [r7, #4]
 800f1be:	4613      	mov	r3, r2
 800f1c0:	00db      	lsls	r3, r3, #3
 800f1c2:	4413      	add	r3, r2
 800f1c4:	009b      	lsls	r3, r3, #2
 800f1c6:	440b      	add	r3, r1
 800f1c8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800f1cc:	681a      	ldr	r2, [r3, #0]
 800f1ce:	78fb      	ldrb	r3, [r7, #3]
 800f1d0:	4619      	mov	r1, r3
 800f1d2:	f7fc fa01 	bl	800b5d8 <USBD_LL_DataOutStage>
}
 800f1d6:	bf00      	nop
 800f1d8:	3708      	adds	r7, #8
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}

0800f1de <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f1de:	b580      	push	{r7, lr}
 800f1e0:	b082      	sub	sp, #8
 800f1e2:	af00      	add	r7, sp, #0
 800f1e4:	6078      	str	r0, [r7, #4]
 800f1e6:	460b      	mov	r3, r1
 800f1e8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800f1f0:	78fa      	ldrb	r2, [r7, #3]
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	4613      	mov	r3, r2
 800f1f6:	00db      	lsls	r3, r3, #3
 800f1f8:	4413      	add	r3, r2
 800f1fa:	009b      	lsls	r3, r3, #2
 800f1fc:	440b      	add	r3, r1
 800f1fe:	3320      	adds	r3, #32
 800f200:	681a      	ldr	r2, [r3, #0]
 800f202:	78fb      	ldrb	r3, [r7, #3]
 800f204:	4619      	mov	r1, r3
 800f206:	f7fc fa9a 	bl	800b73e <USBD_LL_DataInStage>
}
 800f20a:	bf00      	nop
 800f20c:	3708      	adds	r7, #8
 800f20e:	46bd      	mov	sp, r7
 800f210:	bd80      	pop	{r7, pc}

0800f212 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f212:	b580      	push	{r7, lr}
 800f214:	b082      	sub	sp, #8
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800f21a:	687b      	ldr	r3, [r7, #4]
 800f21c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f220:	4618      	mov	r0, r3
 800f222:	f7fc fbd4 	bl	800b9ce <USBD_LL_SOF>
}
 800f226:	bf00      	nop
 800f228:	3708      	adds	r7, #8
 800f22a:	46bd      	mov	sp, r7
 800f22c:	bd80      	pop	{r7, pc}

0800f22e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f22e:	b580      	push	{r7, lr}
 800f230:	b084      	sub	sp, #16
 800f232:	af00      	add	r7, sp, #0
 800f234:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800f236:	2301      	movs	r3, #1
 800f238:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	79db      	ldrb	r3, [r3, #7]
 800f23e:	2b02      	cmp	r3, #2
 800f240:	d001      	beq.n	800f246 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800f242:	f7f2 fac9 	bl	80017d8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f24c:	7bfa      	ldrb	r2, [r7, #15]
 800f24e:	4611      	mov	r1, r2
 800f250:	4618      	mov	r0, r3
 800f252:	f7fc fb78 	bl	800b946 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f25c:	4618      	mov	r0, r3
 800f25e:	f7fc fb20 	bl	800b8a2 <USBD_LL_Reset>
}
 800f262:	bf00      	nop
 800f264:	3710      	adds	r7, #16
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}
	...

0800f26c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f26c:	b580      	push	{r7, lr}
 800f26e:	b082      	sub	sp, #8
 800f270:	af00      	add	r7, sp, #0
 800f272:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7fc fb73 	bl	800b966 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	687a      	ldr	r2, [r7, #4]
 800f28c:	6812      	ldr	r2, [r2, #0]
 800f28e:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800f292:	f043 0301 	orr.w	r3, r3, #1
 800f296:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	7adb      	ldrb	r3, [r3, #11]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d005      	beq.n	800f2ac <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f2a0:	4b04      	ldr	r3, [pc, #16]	@ (800f2b4 <HAL_PCD_SuspendCallback+0x48>)
 800f2a2:	691b      	ldr	r3, [r3, #16]
 800f2a4:	4a03      	ldr	r2, [pc, #12]	@ (800f2b4 <HAL_PCD_SuspendCallback+0x48>)
 800f2a6:	f043 0306 	orr.w	r3, r3, #6
 800f2aa:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f2ac:	bf00      	nop
 800f2ae:	3708      	adds	r7, #8
 800f2b0:	46bd      	mov	sp, r7
 800f2b2:	bd80      	pop	{r7, pc}
 800f2b4:	e000ed00 	.word	0xe000ed00

0800f2b8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f2c0:	687b      	ldr	r3, [r7, #4]
 800f2c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2c6:	4618      	mov	r0, r3
 800f2c8:	f7fc fb69 	bl	800b99e <USBD_LL_Resume>
}
 800f2cc:	bf00      	nop
 800f2ce:	3708      	adds	r7, #8
 800f2d0:	46bd      	mov	sp, r7
 800f2d2:	bd80      	pop	{r7, pc}

0800f2d4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b082      	sub	sp, #8
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	460b      	mov	r3, r1
 800f2de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f2e6:	78fa      	ldrb	r2, [r7, #3]
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	f7fc fbc1 	bl	800ba72 <USBD_LL_IsoOUTIncomplete>
}
 800f2f0:	bf00      	nop
 800f2f2:	3708      	adds	r7, #8
 800f2f4:	46bd      	mov	sp, r7
 800f2f6:	bd80      	pop	{r7, pc}

0800f2f8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f2f8:	b580      	push	{r7, lr}
 800f2fa:	b082      	sub	sp, #8
 800f2fc:	af00      	add	r7, sp, #0
 800f2fe:	6078      	str	r0, [r7, #4]
 800f300:	460b      	mov	r3, r1
 800f302:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f30a:	78fa      	ldrb	r2, [r7, #3]
 800f30c:	4611      	mov	r1, r2
 800f30e:	4618      	mov	r0, r3
 800f310:	f7fc fb7d 	bl	800ba0e <USBD_LL_IsoINIncomplete>
}
 800f314:	bf00      	nop
 800f316:	3708      	adds	r7, #8
 800f318:	46bd      	mov	sp, r7
 800f31a:	bd80      	pop	{r7, pc}

0800f31c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f31c:	b580      	push	{r7, lr}
 800f31e:	b082      	sub	sp, #8
 800f320:	af00      	add	r7, sp, #0
 800f322:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f32a:	4618      	mov	r0, r3
 800f32c:	f7fc fbd3 	bl	800bad6 <USBD_LL_DevConnected>
}
 800f330:	bf00      	nop
 800f332:	3708      	adds	r7, #8
 800f334:	46bd      	mov	sp, r7
 800f336:	bd80      	pop	{r7, pc}

0800f338 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f338:	b580      	push	{r7, lr}
 800f33a:	b082      	sub	sp, #8
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800f346:	4618      	mov	r0, r3
 800f348:	f7fc fbd0 	bl	800baec <USBD_LL_DevDisconnected>
}
 800f34c:	bf00      	nop
 800f34e:	3708      	adds	r7, #8
 800f350:	46bd      	mov	sp, r7
 800f352:	bd80      	pop	{r7, pc}

0800f354 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f354:	b580      	push	{r7, lr}
 800f356:	b082      	sub	sp, #8
 800f358:	af00      	add	r7, sp, #0
 800f35a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	781b      	ldrb	r3, [r3, #0]
 800f360:	2b00      	cmp	r3, #0
 800f362:	d13c      	bne.n	800f3de <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f364:	4a20      	ldr	r2, [pc, #128]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f366:	687b      	ldr	r3, [r7, #4]
 800f368:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800f36c:	687b      	ldr	r3, [r7, #4]
 800f36e:	4a1e      	ldr	r2, [pc, #120]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f370:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f374:	4b1c      	ldr	r3, [pc, #112]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f376:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f37a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800f37c:	4b1a      	ldr	r3, [pc, #104]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f37e:	2204      	movs	r2, #4
 800f380:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f382:	4b19      	ldr	r3, [pc, #100]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f384:	2202      	movs	r2, #2
 800f386:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f388:	4b17      	ldr	r3, [pc, #92]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f38a:	2200      	movs	r2, #0
 800f38c:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f38e:	4b16      	ldr	r3, [pc, #88]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f390:	2202      	movs	r2, #2
 800f392:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f394:	4b14      	ldr	r3, [pc, #80]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f396:	2200      	movs	r2, #0
 800f398:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f39a:	4b13      	ldr	r3, [pc, #76]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f39c:	2200      	movs	r2, #0
 800f39e:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f3a0:	4b11      	ldr	r3, [pc, #68]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3a2:	2200      	movs	r2, #0
 800f3a4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f3a6:	4b10      	ldr	r3, [pc, #64]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3a8:	2200      	movs	r2, #0
 800f3aa:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f3ac:	4b0e      	ldr	r3, [pc, #56]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f3b2:	480d      	ldr	r0, [pc, #52]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3b4:	f7f6 f912 	bl	80055dc <HAL_PCD_Init>
 800f3b8:	4603      	mov	r3, r0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d001      	beq.n	800f3c2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800f3be:	f7f2 fa0b 	bl	80017d8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f3c2:	2180      	movs	r1, #128	@ 0x80
 800f3c4:	4808      	ldr	r0, [pc, #32]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3c6:	f7f7 fb3e 	bl	8006a46 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f3ca:	2240      	movs	r2, #64	@ 0x40
 800f3cc:	2100      	movs	r1, #0
 800f3ce:	4806      	ldr	r0, [pc, #24]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3d0:	f7f7 faf2 	bl	80069b8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f3d4:	2280      	movs	r2, #128	@ 0x80
 800f3d6:	2101      	movs	r1, #1
 800f3d8:	4803      	ldr	r0, [pc, #12]	@ (800f3e8 <USBD_LL_Init+0x94>)
 800f3da:	f7f7 faed 	bl	80069b8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800f3de:	2300      	movs	r3, #0
}
<<<<<<< HEAD
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	3708      	adds	r7, #8
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	bd80      	pop	{r7, pc}
 800f3e8:	2000112c 	.word	0x2000112c
=======
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3708      	adds	r7, #8
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	20001130 	.word	0x20001130
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f3ec <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b084      	sub	sp, #16
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3f4:	2300      	movs	r3, #0
 800f3f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f402:	4618      	mov	r0, r3
 800f404:	f7f6 f9f9 	bl	80057fa <HAL_PCD_Start>
 800f408:	4603      	mov	r3, r0
 800f40a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
 800f40e:	4618      	mov	r0, r3
 800f410:	f000 f942 	bl	800f698 <USBD_Get_USB_Status>
 800f414:	4603      	mov	r3, r0
 800f416:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f418:	7bbb      	ldrb	r3, [r7, #14]
}
 800f41a:	4618      	mov	r0, r3
 800f41c:	3710      	adds	r7, #16
 800f41e:	46bd      	mov	sp, r7
 800f420:	bd80      	pop	{r7, pc}

0800f422 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f422:	b580      	push	{r7, lr}
 800f424:	b084      	sub	sp, #16
 800f426:	af00      	add	r7, sp, #0
 800f428:	6078      	str	r0, [r7, #4]
 800f42a:	4608      	mov	r0, r1
 800f42c:	4611      	mov	r1, r2
 800f42e:	461a      	mov	r2, r3
 800f430:	4603      	mov	r3, r0
 800f432:	70fb      	strb	r3, [r7, #3]
 800f434:	460b      	mov	r3, r1
 800f436:	70bb      	strb	r3, [r7, #2]
 800f438:	4613      	mov	r3, r2
 800f43a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f43c:	2300      	movs	r3, #0
 800f43e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f440:	2300      	movs	r3, #0
 800f442:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f44a:	78bb      	ldrb	r3, [r7, #2]
 800f44c:	883a      	ldrh	r2, [r7, #0]
 800f44e:	78f9      	ldrb	r1, [r7, #3]
 800f450:	f7f6 fecd 	bl	80061ee <HAL_PCD_EP_Open>
 800f454:	4603      	mov	r3, r0
 800f456:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f458:	7bfb      	ldrb	r3, [r7, #15]
 800f45a:	4618      	mov	r0, r3
 800f45c:	f000 f91c 	bl	800f698 <USBD_Get_USB_Status>
 800f460:	4603      	mov	r3, r0
 800f462:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f464:	7bbb      	ldrb	r3, [r7, #14]
}
 800f466:	4618      	mov	r0, r3
 800f468:	3710      	adds	r7, #16
 800f46a:	46bd      	mov	sp, r7
 800f46c:	bd80      	pop	{r7, pc}

0800f46e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f46e:	b580      	push	{r7, lr}
 800f470:	b084      	sub	sp, #16
 800f472:	af00      	add	r7, sp, #0
 800f474:	6078      	str	r0, [r7, #4]
 800f476:	460b      	mov	r3, r1
 800f478:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f47a:	2300      	movs	r3, #0
 800f47c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f47e:	2300      	movs	r3, #0
 800f480:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f482:	687b      	ldr	r3, [r7, #4]
 800f484:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f488:	78fa      	ldrb	r2, [r7, #3]
 800f48a:	4611      	mov	r1, r2
 800f48c:	4618      	mov	r0, r3
 800f48e:	f7f6 ff18 	bl	80062c2 <HAL_PCD_EP_Close>
 800f492:	4603      	mov	r3, r0
 800f494:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f496:	7bfb      	ldrb	r3, [r7, #15]
 800f498:	4618      	mov	r0, r3
 800f49a:	f000 f8fd 	bl	800f698 <USBD_Get_USB_Status>
 800f49e:	4603      	mov	r3, r0
 800f4a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4a2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4a4:	4618      	mov	r0, r3
 800f4a6:	3710      	adds	r7, #16
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}

0800f4ac <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ac:	b580      	push	{r7, lr}
 800f4ae:	b084      	sub	sp, #16
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4bc:	2300      	movs	r3, #0
 800f4be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f4c6:	78fa      	ldrb	r2, [r7, #3]
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7f6 ffd0 	bl	8006470 <HAL_PCD_EP_SetStall>
 800f4d0:	4603      	mov	r3, r0
 800f4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f4d4:	7bfb      	ldrb	r3, [r7, #15]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f000 f8de 	bl	800f698 <USBD_Get_USB_Status>
 800f4dc:	4603      	mov	r3, r0
 800f4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800f4e2:	4618      	mov	r0, r3
 800f4e4:	3710      	adds	r7, #16
 800f4e6:	46bd      	mov	sp, r7
 800f4e8:	bd80      	pop	{r7, pc}

0800f4ea <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f4ea:	b580      	push	{r7, lr}
 800f4ec:	b084      	sub	sp, #16
 800f4ee:	af00      	add	r7, sp, #0
 800f4f0:	6078      	str	r0, [r7, #4]
 800f4f2:	460b      	mov	r3, r1
 800f4f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f4f6:	2300      	movs	r3, #0
 800f4f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f4fa:	2300      	movs	r3, #0
 800f4fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f504:	78fa      	ldrb	r2, [r7, #3]
 800f506:	4611      	mov	r1, r2
 800f508:	4618      	mov	r0, r3
 800f50a:	f7f7 f814 	bl	8006536 <HAL_PCD_EP_ClrStall>
 800f50e:	4603      	mov	r3, r0
 800f510:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f512:	7bfb      	ldrb	r3, [r7, #15]
 800f514:	4618      	mov	r0, r3
 800f516:	f000 f8bf 	bl	800f698 <USBD_Get_USB_Status>
 800f51a:	4603      	mov	r3, r0
 800f51c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f51e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f520:	4618      	mov	r0, r3
 800f522:	3710      	adds	r7, #16
 800f524:	46bd      	mov	sp, r7
 800f526:	bd80      	pop	{r7, pc}

0800f528 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f528:	b480      	push	{r7}
 800f52a:	b085      	sub	sp, #20
 800f52c:	af00      	add	r7, sp, #0
 800f52e:	6078      	str	r0, [r7, #4]
 800f530:	460b      	mov	r3, r1
 800f532:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f53a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f53c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f540:	2b00      	cmp	r3, #0
 800f542:	da0b      	bge.n	800f55c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f544:	78fb      	ldrb	r3, [r7, #3]
 800f546:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f54a:	68f9      	ldr	r1, [r7, #12]
 800f54c:	4613      	mov	r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	4413      	add	r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	440b      	add	r3, r1
 800f556:	3316      	adds	r3, #22
 800f558:	781b      	ldrb	r3, [r3, #0]
 800f55a:	e00b      	b.n	800f574 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f55c:	78fb      	ldrb	r3, [r7, #3]
 800f55e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f562:	68f9      	ldr	r1, [r7, #12]
 800f564:	4613      	mov	r3, r2
 800f566:	00db      	lsls	r3, r3, #3
 800f568:	4413      	add	r3, r2
 800f56a:	009b      	lsls	r3, r3, #2
 800f56c:	440b      	add	r3, r1
 800f56e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f572:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f574:	4618      	mov	r0, r3
 800f576:	3714      	adds	r7, #20
 800f578:	46bd      	mov	sp, r7
 800f57a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f57e:	4770      	bx	lr

0800f580 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f580:	b580      	push	{r7, lr}
 800f582:	b084      	sub	sp, #16
 800f584:	af00      	add	r7, sp, #0
 800f586:	6078      	str	r0, [r7, #4]
 800f588:	460b      	mov	r3, r1
 800f58a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f58c:	2300      	movs	r3, #0
 800f58e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f590:	2300      	movs	r3, #0
 800f592:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f594:	687b      	ldr	r3, [r7, #4]
 800f596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f59a:	78fa      	ldrb	r2, [r7, #3]
 800f59c:	4611      	mov	r1, r2
 800f59e:	4618      	mov	r0, r3
 800f5a0:	f7f6 fe01 	bl	80061a6 <HAL_PCD_SetAddress>
 800f5a4:	4603      	mov	r3, r0
 800f5a6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5a8:	7bfb      	ldrb	r3, [r7, #15]
 800f5aa:	4618      	mov	r0, r3
 800f5ac:	f000 f874 	bl	800f698 <USBD_Get_USB_Status>
 800f5b0:	4603      	mov	r3, r0
 800f5b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f5b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f5b6:	4618      	mov	r0, r3
 800f5b8:	3710      	adds	r7, #16
 800f5ba:	46bd      	mov	sp, r7
 800f5bc:	bd80      	pop	{r7, pc}

0800f5be <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f5be:	b580      	push	{r7, lr}
 800f5c0:	b086      	sub	sp, #24
 800f5c2:	af00      	add	r7, sp, #0
 800f5c4:	60f8      	str	r0, [r7, #12]
 800f5c6:	607a      	str	r2, [r7, #4]
 800f5c8:	603b      	str	r3, [r7, #0]
 800f5ca:	460b      	mov	r3, r1
 800f5cc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f5d2:	2300      	movs	r3, #0
 800f5d4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f5d6:	68fb      	ldr	r3, [r7, #12]
 800f5d8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f5dc:	7af9      	ldrb	r1, [r7, #11]
 800f5de:	683b      	ldr	r3, [r7, #0]
 800f5e0:	687a      	ldr	r2, [r7, #4]
 800f5e2:	f7f6 ff0b 	bl	80063fc <HAL_PCD_EP_Transmit>
 800f5e6:	4603      	mov	r3, r0
 800f5e8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f5ea:	7dfb      	ldrb	r3, [r7, #23]
 800f5ec:	4618      	mov	r0, r3
 800f5ee:	f000 f853 	bl	800f698 <USBD_Get_USB_Status>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f5f6:	7dbb      	ldrb	r3, [r7, #22]
}
 800f5f8:	4618      	mov	r0, r3
 800f5fa:	3718      	adds	r7, #24
 800f5fc:	46bd      	mov	sp, r7
 800f5fe:	bd80      	pop	{r7, pc}

0800f600 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f600:	b580      	push	{r7, lr}
 800f602:	b086      	sub	sp, #24
 800f604:	af00      	add	r7, sp, #0
 800f606:	60f8      	str	r0, [r7, #12]
 800f608:	607a      	str	r2, [r7, #4]
 800f60a:	603b      	str	r3, [r7, #0]
 800f60c:	460b      	mov	r3, r1
 800f60e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f610:	2300      	movs	r3, #0
 800f612:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f614:	2300      	movs	r3, #0
 800f616:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f61e:	7af9      	ldrb	r1, [r7, #11]
 800f620:	683b      	ldr	r3, [r7, #0]
 800f622:	687a      	ldr	r2, [r7, #4]
 800f624:	f7f6 fe97 	bl	8006356 <HAL_PCD_EP_Receive>
 800f628:	4603      	mov	r3, r0
 800f62a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f62c:	7dfb      	ldrb	r3, [r7, #23]
 800f62e:	4618      	mov	r0, r3
 800f630:	f000 f832 	bl	800f698 <USBD_Get_USB_Status>
 800f634:	4603      	mov	r3, r0
 800f636:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f638:	7dbb      	ldrb	r3, [r7, #22]
}
 800f63a:	4618      	mov	r0, r3
 800f63c:	3718      	adds	r7, #24
 800f63e:	46bd      	mov	sp, r7
 800f640:	bd80      	pop	{r7, pc}

0800f642 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f642:	b580      	push	{r7, lr}
 800f644:	b082      	sub	sp, #8
 800f646:	af00      	add	r7, sp, #0
 800f648:	6078      	str	r0, [r7, #4]
 800f64a:	460b      	mov	r3, r1
 800f64c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f64e:	687b      	ldr	r3, [r7, #4]
 800f650:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f654:	78fa      	ldrb	r2, [r7, #3]
 800f656:	4611      	mov	r1, r2
 800f658:	4618      	mov	r0, r3
 800f65a:	f7f6 feb7 	bl	80063cc <HAL_PCD_EP_GetRxCount>
 800f65e:	4603      	mov	r3, r0
}
 800f660:	4618      	mov	r0, r3
 800f662:	3708      	adds	r7, #8
 800f664:	46bd      	mov	sp, r7
 800f666:	bd80      	pop	{r7, pc}

0800f668 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f668:	b480      	push	{r7}
 800f66a:	b083      	sub	sp, #12
 800f66c:	af00      	add	r7, sp, #0
 800f66e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f670:	4b03      	ldr	r3, [pc, #12]	@ (800f680 <USBD_static_malloc+0x18>)
}
<<<<<<< HEAD
 800f672:	4618      	mov	r0, r3
 800f674:	370c      	adds	r7, #12
 800f676:	46bd      	mov	sp, r7
 800f678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f67c:	4770      	bx	lr
 800f67e:	bf00      	nop
 800f680:	20001610 	.word	0x20001610
=======
 800f68e:	4618      	mov	r0, r3
 800f690:	370c      	adds	r7, #12
 800f692:	46bd      	mov	sp, r7
 800f694:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f698:	4770      	bx	lr
 800f69a:	bf00      	nop
 800f69c:	20001614 	.word	0x20001614
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f684 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f684:	b480      	push	{r7}
 800f686:	b083      	sub	sp, #12
 800f688:	af00      	add	r7, sp, #0
 800f68a:	6078      	str	r0, [r7, #4]

}
 800f68c:	bf00      	nop
 800f68e:	370c      	adds	r7, #12
 800f690:	46bd      	mov	sp, r7
 800f692:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f696:	4770      	bx	lr

0800f698 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f698:	b480      	push	{r7}
 800f69a:	b085      	sub	sp, #20
 800f69c:	af00      	add	r7, sp, #0
 800f69e:	4603      	mov	r3, r0
 800f6a0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f6a6:	79fb      	ldrb	r3, [r7, #7]
 800f6a8:	2b03      	cmp	r3, #3
 800f6aa:	d817      	bhi.n	800f6dc <USBD_Get_USB_Status+0x44>
 800f6ac:	a201      	add	r2, pc, #4	@ (adr r2, 800f6b4 <USBD_Get_USB_Status+0x1c>)
 800f6ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b2:	bf00      	nop
 800f6b4:	0800f6c5 	.word	0x0800f6c5
 800f6b8:	0800f6cb 	.word	0x0800f6cb
 800f6bc:	0800f6d1 	.word	0x0800f6d1
 800f6c0:	0800f6d7 	.word	0x0800f6d7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	73fb      	strb	r3, [r7, #15]
    break;
 800f6c8:	e00b      	b.n	800f6e2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f6ca:	2303      	movs	r3, #3
 800f6cc:	73fb      	strb	r3, [r7, #15]
    break;
 800f6ce:	e008      	b.n	800f6e2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f6d0:	2301      	movs	r3, #1
 800f6d2:	73fb      	strb	r3, [r7, #15]
    break;
 800f6d4:	e005      	b.n	800f6e2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f6d6:	2303      	movs	r3, #3
 800f6d8:	73fb      	strb	r3, [r7, #15]
    break;
 800f6da:	e002      	b.n	800f6e2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f6dc:	2303      	movs	r3, #3
 800f6de:	73fb      	strb	r3, [r7, #15]
    break;
 800f6e0:	bf00      	nop
  }
  return usb_status;
 800f6e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6e4:	4618      	mov	r0, r3
 800f6e6:	3714      	adds	r7, #20
 800f6e8:	46bd      	mov	sp, r7
 800f6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6ee:	4770      	bx	lr

0800f6f0 <_ZdlPvj>:
 800f6f0:	f000 b811 	b.w	800f716 <_ZdlPv>

0800f6f4 <_Znwj>:
 800f6f4:	2801      	cmp	r0, #1
 800f6f6:	bf38      	it	cc
 800f6f8:	2001      	movcc	r0, #1
 800f6fa:	b510      	push	{r4, lr}
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	4620      	mov	r0, r4
 800f700:	f000 f836 	bl	800f770 <malloc>
 800f704:	b100      	cbz	r0, 800f708 <_Znwj+0x14>
 800f706:	bd10      	pop	{r4, pc}
 800f708:	f000 f808 	bl	800f71c <_ZSt15get_new_handlerv>
 800f70c:	b908      	cbnz	r0, 800f712 <_Znwj+0x1e>
 800f70e:	f000 f80d 	bl	800f72c <abort>
 800f712:	4780      	blx	r0
 800f714:	e7f3      	b.n	800f6fe <_Znwj+0xa>

0800f716 <_ZdlPv>:
 800f716:	f000 b833 	b.w	800f780 <free>
	...

<<<<<<< HEAD
0800f71c <_ZSt15get_new_handlerv>:
 800f71c:	4b02      	ldr	r3, [pc, #8]	@ (800f728 <_ZSt15get_new_handlerv+0xc>)
 800f71e:	6818      	ldr	r0, [r3, #0]
 800f720:	f3bf 8f5b 	dmb	ish
 800f724:	4770      	bx	lr
 800f726:	bf00      	nop
 800f728:	20001830 	.word	0x20001830
=======
0800f738 <_ZSt15get_new_handlerv>:
 800f738:	4b02      	ldr	r3, [pc, #8]	@ (800f744 <_ZSt15get_new_handlerv+0xc>)
 800f73a:	6818      	ldr	r0, [r3, #0]
 800f73c:	f3bf 8f5b 	dmb	ish
 800f740:	4770      	bx	lr
 800f742:	bf00      	nop
 800f744:	20001834 	.word	0x20001834
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f72c <abort>:
 800f72c:	b508      	push	{r3, lr}
 800f72e:	2006      	movs	r0, #6
 800f730:	f000 f9b0 	bl	800fa94 <raise>
 800f734:	2001      	movs	r0, #1
 800f736:	f7f2 fccb 	bl	80020d0 <_exit>

0800f73a <__itoa>:
 800f73a:	1e93      	subs	r3, r2, #2
 800f73c:	2b22      	cmp	r3, #34	@ 0x22
 800f73e:	b510      	push	{r4, lr}
 800f740:	460c      	mov	r4, r1
 800f742:	d904      	bls.n	800f74e <__itoa+0x14>
 800f744:	2300      	movs	r3, #0
 800f746:	700b      	strb	r3, [r1, #0]
 800f748:	461c      	mov	r4, r3
 800f74a:	4620      	mov	r0, r4
 800f74c:	bd10      	pop	{r4, pc}
 800f74e:	2a0a      	cmp	r2, #10
 800f750:	d109      	bne.n	800f766 <__itoa+0x2c>
 800f752:	2800      	cmp	r0, #0
 800f754:	da07      	bge.n	800f766 <__itoa+0x2c>
 800f756:	232d      	movs	r3, #45	@ 0x2d
 800f758:	700b      	strb	r3, [r1, #0]
 800f75a:	4240      	negs	r0, r0
 800f75c:	2101      	movs	r1, #1
 800f75e:	4421      	add	r1, r4
 800f760:	f000 f8c4 	bl	800f8ec <__utoa>
 800f764:	e7f1      	b.n	800f74a <__itoa+0x10>
 800f766:	2100      	movs	r1, #0
 800f768:	e7f9      	b.n	800f75e <__itoa+0x24>

0800f76a <itoa>:
 800f76a:	f7ff bfe6 	b.w	800f73a <__itoa>
	...

0800f770 <malloc>:
 800f770:	4b02      	ldr	r3, [pc, #8]	@ (800f77c <malloc+0xc>)
 800f772:	4601      	mov	r1, r0
 800f774:	6818      	ldr	r0, [r3, #0]
 800f776:	f000 b82d 	b.w	800f7d4 <_malloc_r>
 800f77a:	bf00      	nop
 800f77c:	20000138 	.word	0x20000138

0800f780 <free>:
 800f780:	4b02      	ldr	r3, [pc, #8]	@ (800f78c <free+0xc>)
 800f782:	4601      	mov	r1, r0
 800f784:	6818      	ldr	r0, [r3, #0]
 800f786:	f000 b9eb 	b.w	800fb60 <_free_r>
 800f78a:	bf00      	nop
 800f78c:	20000138 	.word	0x20000138

<<<<<<< HEAD
0800f790 <sbrk_aligned>:
 800f790:	b570      	push	{r4, r5, r6, lr}
 800f792:	4e0f      	ldr	r6, [pc, #60]	@ (800f7d0 <sbrk_aligned+0x40>)
 800f794:	460c      	mov	r4, r1
 800f796:	6831      	ldr	r1, [r6, #0]
 800f798:	4605      	mov	r5, r0
 800f79a:	b911      	cbnz	r1, 800f7a2 <sbrk_aligned+0x12>
 800f79c:	f000 f996 	bl	800facc <_sbrk_r>
 800f7a0:	6030      	str	r0, [r6, #0]
 800f7a2:	4621      	mov	r1, r4
 800f7a4:	4628      	mov	r0, r5
 800f7a6:	f000 f991 	bl	800facc <_sbrk_r>
 800f7aa:	1c43      	adds	r3, r0, #1
 800f7ac:	d103      	bne.n	800f7b6 <sbrk_aligned+0x26>
 800f7ae:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	bd70      	pop	{r4, r5, r6, pc}
 800f7b6:	1cc4      	adds	r4, r0, #3
 800f7b8:	f024 0403 	bic.w	r4, r4, #3
 800f7bc:	42a0      	cmp	r0, r4
 800f7be:	d0f8      	beq.n	800f7b2 <sbrk_aligned+0x22>
 800f7c0:	1a21      	subs	r1, r4, r0
 800f7c2:	4628      	mov	r0, r5
 800f7c4:	f000 f982 	bl	800facc <_sbrk_r>
 800f7c8:	3001      	adds	r0, #1
 800f7ca:	d1f2      	bne.n	800f7b2 <sbrk_aligned+0x22>
 800f7cc:	e7ef      	b.n	800f7ae <sbrk_aligned+0x1e>
 800f7ce:	bf00      	nop
 800f7d0:	20001834 	.word	0x20001834
=======
0800f7ac <sbrk_aligned>:
 800f7ac:	b570      	push	{r4, r5, r6, lr}
 800f7ae:	4e0f      	ldr	r6, [pc, #60]	@ (800f7ec <sbrk_aligned+0x40>)
 800f7b0:	460c      	mov	r4, r1
 800f7b2:	6831      	ldr	r1, [r6, #0]
 800f7b4:	4605      	mov	r5, r0
 800f7b6:	b911      	cbnz	r1, 800f7be <sbrk_aligned+0x12>
 800f7b8:	f000 f994 	bl	800fae4 <_sbrk_r>
 800f7bc:	6030      	str	r0, [r6, #0]
 800f7be:	4621      	mov	r1, r4
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	f000 f98f 	bl	800fae4 <_sbrk_r>
 800f7c6:	1c43      	adds	r3, r0, #1
 800f7c8:	d103      	bne.n	800f7d2 <sbrk_aligned+0x26>
 800f7ca:	f04f 34ff 	mov.w	r4, #4294967295
 800f7ce:	4620      	mov	r0, r4
 800f7d0:	bd70      	pop	{r4, r5, r6, pc}
 800f7d2:	1cc4      	adds	r4, r0, #3
 800f7d4:	f024 0403 	bic.w	r4, r4, #3
 800f7d8:	42a0      	cmp	r0, r4
 800f7da:	d0f8      	beq.n	800f7ce <sbrk_aligned+0x22>
 800f7dc:	1a21      	subs	r1, r4, r0
 800f7de:	4628      	mov	r0, r5
 800f7e0:	f000 f980 	bl	800fae4 <_sbrk_r>
 800f7e4:	3001      	adds	r0, #1
 800f7e6:	d1f2      	bne.n	800f7ce <sbrk_aligned+0x22>
 800f7e8:	e7ef      	b.n	800f7ca <sbrk_aligned+0x1e>
 800f7ea:	bf00      	nop
 800f7ec:	20001838 	.word	0x20001838
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f7d4 <_malloc_r>:
 800f7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f7d8:	1ccd      	adds	r5, r1, #3
 800f7da:	f025 0503 	bic.w	r5, r5, #3
 800f7de:	3508      	adds	r5, #8
 800f7e0:	2d0c      	cmp	r5, #12
 800f7e2:	bf38      	it	cc
 800f7e4:	250c      	movcc	r5, #12
 800f7e6:	2d00      	cmp	r5, #0
 800f7e8:	4606      	mov	r6, r0
 800f7ea:	db01      	blt.n	800f7f0 <_malloc_r+0x1c>
 800f7ec:	42a9      	cmp	r1, r5
 800f7ee:	d904      	bls.n	800f7fa <_malloc_r+0x26>
 800f7f0:	230c      	movs	r3, #12
 800f7f2:	6033      	str	r3, [r6, #0]
 800f7f4:	2000      	movs	r0, #0
 800f7f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f7fa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f8d0 <_malloc_r+0xfc>
 800f7fe:	f000 f869 	bl	800f8d4 <__malloc_lock>
 800f802:	f8d8 3000 	ldr.w	r3, [r8]
 800f806:	461c      	mov	r4, r3
 800f808:	bb44      	cbnz	r4, 800f85c <_malloc_r+0x88>
 800f80a:	4629      	mov	r1, r5
 800f80c:	4630      	mov	r0, r6
 800f80e:	f7ff ffbf 	bl	800f790 <sbrk_aligned>
 800f812:	1c43      	adds	r3, r0, #1
 800f814:	4604      	mov	r4, r0
 800f816:	d158      	bne.n	800f8ca <_malloc_r+0xf6>
 800f818:	f8d8 4000 	ldr.w	r4, [r8]
 800f81c:	4627      	mov	r7, r4
 800f81e:	2f00      	cmp	r7, #0
 800f820:	d143      	bne.n	800f8aa <_malloc_r+0xd6>
 800f822:	2c00      	cmp	r4, #0
 800f824:	d04b      	beq.n	800f8be <_malloc_r+0xea>
 800f826:	6823      	ldr	r3, [r4, #0]
 800f828:	4639      	mov	r1, r7
 800f82a:	4630      	mov	r0, r6
 800f82c:	eb04 0903 	add.w	r9, r4, r3
 800f830:	f000 f94c 	bl	800facc <_sbrk_r>
 800f834:	4581      	cmp	r9, r0
 800f836:	d142      	bne.n	800f8be <_malloc_r+0xea>
 800f838:	6821      	ldr	r1, [r4, #0]
 800f83a:	1a6d      	subs	r5, r5, r1
 800f83c:	4629      	mov	r1, r5
 800f83e:	4630      	mov	r0, r6
 800f840:	f7ff ffa6 	bl	800f790 <sbrk_aligned>
 800f844:	3001      	adds	r0, #1
 800f846:	d03a      	beq.n	800f8be <_malloc_r+0xea>
 800f848:	6823      	ldr	r3, [r4, #0]
 800f84a:	442b      	add	r3, r5
 800f84c:	6023      	str	r3, [r4, #0]
 800f84e:	f8d8 3000 	ldr.w	r3, [r8]
 800f852:	685a      	ldr	r2, [r3, #4]
 800f854:	bb62      	cbnz	r2, 800f8b0 <_malloc_r+0xdc>
 800f856:	f8c8 7000 	str.w	r7, [r8]
 800f85a:	e00f      	b.n	800f87c <_malloc_r+0xa8>
 800f85c:	6822      	ldr	r2, [r4, #0]
 800f85e:	1b52      	subs	r2, r2, r5
 800f860:	d420      	bmi.n	800f8a4 <_malloc_r+0xd0>
 800f862:	2a0b      	cmp	r2, #11
 800f864:	d917      	bls.n	800f896 <_malloc_r+0xc2>
 800f866:	1961      	adds	r1, r4, r5
 800f868:	42a3      	cmp	r3, r4
 800f86a:	6025      	str	r5, [r4, #0]
 800f86c:	bf18      	it	ne
 800f86e:	6059      	strne	r1, [r3, #4]
 800f870:	6863      	ldr	r3, [r4, #4]
 800f872:	bf08      	it	eq
 800f874:	f8c8 1000 	streq.w	r1, [r8]
 800f878:	5162      	str	r2, [r4, r5]
 800f87a:	604b      	str	r3, [r1, #4]
 800f87c:	4630      	mov	r0, r6
 800f87e:	f000 f82f 	bl	800f8e0 <__malloc_unlock>
 800f882:	f104 000b 	add.w	r0, r4, #11
 800f886:	1d23      	adds	r3, r4, #4
 800f888:	f020 0007 	bic.w	r0, r0, #7
 800f88c:	1ac2      	subs	r2, r0, r3
 800f88e:	bf1c      	itt	ne
 800f890:	1a1b      	subne	r3, r3, r0
 800f892:	50a3      	strne	r3, [r4, r2]
 800f894:	e7af      	b.n	800f7f6 <_malloc_r+0x22>
 800f896:	6862      	ldr	r2, [r4, #4]
 800f898:	42a3      	cmp	r3, r4
 800f89a:	bf0c      	ite	eq
 800f89c:	f8c8 2000 	streq.w	r2, [r8]
 800f8a0:	605a      	strne	r2, [r3, #4]
 800f8a2:	e7eb      	b.n	800f87c <_malloc_r+0xa8>
 800f8a4:	4623      	mov	r3, r4
 800f8a6:	6864      	ldr	r4, [r4, #4]
 800f8a8:	e7ae      	b.n	800f808 <_malloc_r+0x34>
 800f8aa:	463c      	mov	r4, r7
 800f8ac:	687f      	ldr	r7, [r7, #4]
 800f8ae:	e7b6      	b.n	800f81e <_malloc_r+0x4a>
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	685b      	ldr	r3, [r3, #4]
 800f8b4:	42a3      	cmp	r3, r4
<<<<<<< HEAD
 800f8b6:	d1fb      	bne.n	800f8b0 <_malloc_r+0xdc>
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	6053      	str	r3, [r2, #4]
 800f8bc:	e7de      	b.n	800f87c <_malloc_r+0xa8>
 800f8be:	230c      	movs	r3, #12
 800f8c0:	6033      	str	r3, [r6, #0]
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f000 f80c 	bl	800f8e0 <__malloc_unlock>
 800f8c8:	e794      	b.n	800f7f4 <_malloc_r+0x20>
 800f8ca:	6005      	str	r5, [r0, #0]
 800f8cc:	e7d6      	b.n	800f87c <_malloc_r+0xa8>
 800f8ce:	bf00      	nop
 800f8d0:	20001838 	.word	0x20001838

0800f8d4 <__malloc_lock>:
 800f8d4:	4801      	ldr	r0, [pc, #4]	@ (800f8dc <__malloc_lock+0x8>)
 800f8d6:	f000 b933 	b.w	800fb40 <__retarget_lock_acquire_recursive>
 800f8da:	bf00      	nop
 800f8dc:	20001978 	.word	0x20001978

0800f8e0 <__malloc_unlock>:
 800f8e0:	4801      	ldr	r0, [pc, #4]	@ (800f8e8 <__malloc_unlock+0x8>)
 800f8e2:	f000 b92e 	b.w	800fb42 <__retarget_lock_release_recursive>
 800f8e6:	bf00      	nop
 800f8e8:	20001978 	.word	0x20001978

0800f8ec <__utoa>:
 800f8ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f8ee:	4c1f      	ldr	r4, [pc, #124]	@ (800f96c <__utoa+0x80>)
 800f8f0:	b08b      	sub	sp, #44	@ 0x2c
 800f8f2:	4605      	mov	r5, r0
 800f8f4:	460b      	mov	r3, r1
 800f8f6:	466e      	mov	r6, sp
 800f8f8:	f104 0c20 	add.w	ip, r4, #32
 800f8fc:	6820      	ldr	r0, [r4, #0]
 800f8fe:	6861      	ldr	r1, [r4, #4]
 800f900:	4637      	mov	r7, r6
 800f902:	c703      	stmia	r7!, {r0, r1}
 800f904:	3408      	adds	r4, #8
 800f906:	4564      	cmp	r4, ip
 800f908:	463e      	mov	r6, r7
 800f90a:	d1f7      	bne.n	800f8fc <__utoa+0x10>
 800f90c:	7921      	ldrb	r1, [r4, #4]
 800f90e:	7139      	strb	r1, [r7, #4]
 800f910:	1e91      	subs	r1, r2, #2
 800f912:	6820      	ldr	r0, [r4, #0]
 800f914:	6038      	str	r0, [r7, #0]
 800f916:	2922      	cmp	r1, #34	@ 0x22
 800f918:	f04f 0100 	mov.w	r1, #0
 800f91c:	d904      	bls.n	800f928 <__utoa+0x3c>
 800f91e:	7019      	strb	r1, [r3, #0]
 800f920:	460b      	mov	r3, r1
 800f922:	4618      	mov	r0, r3
 800f924:	b00b      	add	sp, #44	@ 0x2c
 800f926:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f928:	1e58      	subs	r0, r3, #1
 800f92a:	4684      	mov	ip, r0
 800f92c:	fbb5 f7f2 	udiv	r7, r5, r2
 800f930:	fb02 5617 	mls	r6, r2, r7, r5
 800f934:	3628      	adds	r6, #40	@ 0x28
 800f936:	446e      	add	r6, sp
 800f938:	460c      	mov	r4, r1
 800f93a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f93e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f942:	462e      	mov	r6, r5
 800f944:	42b2      	cmp	r2, r6
 800f946:	f101 0101 	add.w	r1, r1, #1
 800f94a:	463d      	mov	r5, r7
 800f94c:	d9ee      	bls.n	800f92c <__utoa+0x40>
 800f94e:	2200      	movs	r2, #0
 800f950:	545a      	strb	r2, [r3, r1]
 800f952:	1919      	adds	r1, r3, r4
 800f954:	1aa5      	subs	r5, r4, r2
 800f956:	42aa      	cmp	r2, r5
 800f958:	dae3      	bge.n	800f922 <__utoa+0x36>
 800f95a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f95e:	780e      	ldrb	r6, [r1, #0]
 800f960:	7006      	strb	r6, [r0, #0]
 800f962:	3201      	adds	r2, #1
 800f964:	f801 5901 	strb.w	r5, [r1], #-1
 800f968:	e7f4      	b.n	800f954 <__utoa+0x68>
 800f96a:	bf00      	nop
 800f96c:	08017ee0 	.word	0x08017ee0
=======
 800f8b6:	bf0c      	ite	eq
 800f8b8:	f8c8 2000 	streq.w	r2, [r8]
 800f8bc:	605a      	strne	r2, [r3, #4]
 800f8be:	e7eb      	b.n	800f898 <_malloc_r+0xa8>
 800f8c0:	4623      	mov	r3, r4
 800f8c2:	6864      	ldr	r4, [r4, #4]
 800f8c4:	e7ae      	b.n	800f824 <_malloc_r+0x34>
 800f8c6:	463c      	mov	r4, r7
 800f8c8:	687f      	ldr	r7, [r7, #4]
 800f8ca:	e7b6      	b.n	800f83a <_malloc_r+0x4a>
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	685b      	ldr	r3, [r3, #4]
 800f8d0:	42a3      	cmp	r3, r4
 800f8d2:	d1fb      	bne.n	800f8cc <_malloc_r+0xdc>
 800f8d4:	2300      	movs	r3, #0
 800f8d6:	6053      	str	r3, [r2, #4]
 800f8d8:	e7de      	b.n	800f898 <_malloc_r+0xa8>
 800f8da:	230c      	movs	r3, #12
 800f8dc:	6033      	str	r3, [r6, #0]
 800f8de:	4630      	mov	r0, r6
 800f8e0:	f000 f80c 	bl	800f8fc <__malloc_unlock>
 800f8e4:	e794      	b.n	800f810 <_malloc_r+0x20>
 800f8e6:	6005      	str	r5, [r0, #0]
 800f8e8:	e7d6      	b.n	800f898 <_malloc_r+0xa8>
 800f8ea:	bf00      	nop
 800f8ec:	2000183c 	.word	0x2000183c

0800f8f0 <__malloc_lock>:
 800f8f0:	4801      	ldr	r0, [pc, #4]	@ (800f8f8 <__malloc_lock+0x8>)
 800f8f2:	f000 b931 	b.w	800fb58 <__retarget_lock_acquire_recursive>
 800f8f6:	bf00      	nop
 800f8f8:	2000197c 	.word	0x2000197c

0800f8fc <__malloc_unlock>:
 800f8fc:	4801      	ldr	r0, [pc, #4]	@ (800f904 <__malloc_unlock+0x8>)
 800f8fe:	f000 b92c 	b.w	800fb5a <__retarget_lock_release_recursive>
 800f902:	bf00      	nop
 800f904:	2000197c 	.word	0x2000197c

0800f908 <__utoa>:
 800f908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f90a:	4c1f      	ldr	r4, [pc, #124]	@ (800f988 <__utoa+0x80>)
 800f90c:	b08b      	sub	sp, #44	@ 0x2c
 800f90e:	4605      	mov	r5, r0
 800f910:	460b      	mov	r3, r1
 800f912:	466e      	mov	r6, sp
 800f914:	f104 0c20 	add.w	ip, r4, #32
 800f918:	6820      	ldr	r0, [r4, #0]
 800f91a:	6861      	ldr	r1, [r4, #4]
 800f91c:	4637      	mov	r7, r6
 800f91e:	c703      	stmia	r7!, {r0, r1}
 800f920:	3408      	adds	r4, #8
 800f922:	4564      	cmp	r4, ip
 800f924:	463e      	mov	r6, r7
 800f926:	d1f7      	bne.n	800f918 <__utoa+0x10>
 800f928:	7921      	ldrb	r1, [r4, #4]
 800f92a:	7139      	strb	r1, [r7, #4]
 800f92c:	1e91      	subs	r1, r2, #2
 800f92e:	6820      	ldr	r0, [r4, #0]
 800f930:	6038      	str	r0, [r7, #0]
 800f932:	2922      	cmp	r1, #34	@ 0x22
 800f934:	f04f 0100 	mov.w	r1, #0
 800f938:	d904      	bls.n	800f944 <__utoa+0x3c>
 800f93a:	7019      	strb	r1, [r3, #0]
 800f93c:	460b      	mov	r3, r1
 800f93e:	4618      	mov	r0, r3
 800f940:	b00b      	add	sp, #44	@ 0x2c
 800f942:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f944:	1e58      	subs	r0, r3, #1
 800f946:	4684      	mov	ip, r0
 800f948:	fbb5 f7f2 	udiv	r7, r5, r2
 800f94c:	fb02 5617 	mls	r6, r2, r7, r5
 800f950:	3628      	adds	r6, #40	@ 0x28
 800f952:	446e      	add	r6, sp
 800f954:	460c      	mov	r4, r1
 800f956:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f95a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f95e:	462e      	mov	r6, r5
 800f960:	42b2      	cmp	r2, r6
 800f962:	f101 0101 	add.w	r1, r1, #1
 800f966:	463d      	mov	r5, r7
 800f968:	d9ee      	bls.n	800f948 <__utoa+0x40>
 800f96a:	2200      	movs	r2, #0
 800f96c:	545a      	strb	r2, [r3, r1]
 800f96e:	1919      	adds	r1, r3, r4
 800f970:	1aa5      	subs	r5, r4, r2
 800f972:	42aa      	cmp	r2, r5
 800f974:	dae3      	bge.n	800f93e <__utoa+0x36>
 800f976:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f97a:	780e      	ldrb	r6, [r1, #0]
 800f97c:	7006      	strb	r6, [r0, #0]
 800f97e:	3201      	adds	r2, #1
 800f980:	f801 5901 	strb.w	r5, [r1], #-1
 800f984:	e7f4      	b.n	800f970 <__utoa+0x68>
 800f986:	bf00      	nop
 800f988:	08017e94 	.word	0x08017e94
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0800f970 <_vsniprintf_r>:
 800f970:	b530      	push	{r4, r5, lr}
 800f972:	4614      	mov	r4, r2
 800f974:	2c00      	cmp	r4, #0
 800f976:	b09b      	sub	sp, #108	@ 0x6c
 800f978:	4605      	mov	r5, r0
 800f97a:	461a      	mov	r2, r3
 800f97c:	da05      	bge.n	800f98a <_vsniprintf_r+0x1a>
 800f97e:	238b      	movs	r3, #139	@ 0x8b
 800f980:	6003      	str	r3, [r0, #0]
 800f982:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f986:	b01b      	add	sp, #108	@ 0x6c
 800f988:	bd30      	pop	{r4, r5, pc}
 800f98a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f98e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f992:	f04f 0300 	mov.w	r3, #0
 800f996:	9319      	str	r3, [sp, #100]	@ 0x64
 800f998:	bf14      	ite	ne
 800f99a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f99e:	4623      	moveq	r3, r4
 800f9a0:	9302      	str	r3, [sp, #8]
 800f9a2:	9305      	str	r3, [sp, #20]
 800f9a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9a8:	9100      	str	r1, [sp, #0]
 800f9aa:	9104      	str	r1, [sp, #16]
 800f9ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f9b0:	4669      	mov	r1, sp
 800f9b2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f9b4:	f000 f97a 	bl	800fcac <_svfiprintf_r>
 800f9b8:	1c43      	adds	r3, r0, #1
 800f9ba:	bfbc      	itt	lt
 800f9bc:	238b      	movlt	r3, #139	@ 0x8b
 800f9be:	602b      	strlt	r3, [r5, #0]
 800f9c0:	2c00      	cmp	r4, #0
 800f9c2:	d0e0      	beq.n	800f986 <_vsniprintf_r+0x16>
 800f9c4:	9b00      	ldr	r3, [sp, #0]
 800f9c6:	2200      	movs	r2, #0
 800f9c8:	701a      	strb	r2, [r3, #0]
 800f9ca:	e7dc      	b.n	800f986 <_vsniprintf_r+0x16>

0800f9cc <vsniprintf>:
 800f9cc:	b507      	push	{r0, r1, r2, lr}
 800f9ce:	9300      	str	r3, [sp, #0]
 800f9d0:	4613      	mov	r3, r2
 800f9d2:	460a      	mov	r2, r1
 800f9d4:	4601      	mov	r1, r0
 800f9d6:	4803      	ldr	r0, [pc, #12]	@ (800f9e4 <vsniprintf+0x18>)
 800f9d8:	6800      	ldr	r0, [r0, #0]
 800f9da:	f7ff ffc9 	bl	800f970 <_vsniprintf_r>
 800f9de:	b003      	add	sp, #12
 800f9e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9e4:	20000138 	.word	0x20000138

0800f9e8 <memset>:
 800f9e8:	4402      	add	r2, r0
 800f9ea:	4603      	mov	r3, r0
 800f9ec:	4293      	cmp	r3, r2
 800f9ee:	d100      	bne.n	800f9f2 <memset+0xa>
 800f9f0:	4770      	bx	lr
 800f9f2:	f803 1b01 	strb.w	r1, [r3], #1
 800f9f6:	e7f9      	b.n	800f9ec <memset+0x4>

0800f9f8 <strncat>:
 800f9f8:	b530      	push	{r4, r5, lr}
 800f9fa:	4604      	mov	r4, r0
 800f9fc:	7825      	ldrb	r5, [r4, #0]
 800f9fe:	4623      	mov	r3, r4
 800fa00:	3401      	adds	r4, #1
 800fa02:	2d00      	cmp	r5, #0
 800fa04:	d1fa      	bne.n	800f9fc <strncat+0x4>
 800fa06:	3a01      	subs	r2, #1
 800fa08:	d304      	bcc.n	800fa14 <strncat+0x1c>
 800fa0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa0e:	f803 4b01 	strb.w	r4, [r3], #1
 800fa12:	b904      	cbnz	r4, 800fa16 <strncat+0x1e>
 800fa14:	bd30      	pop	{r4, r5, pc}
 800fa16:	2a00      	cmp	r2, #0
 800fa18:	d1f5      	bne.n	800fa06 <strncat+0xe>
 800fa1a:	701a      	strb	r2, [r3, #0]
 800fa1c:	e7f3      	b.n	800fa06 <strncat+0xe>

0800fa1e <strncpy>:
 800fa1e:	b510      	push	{r4, lr}
 800fa20:	3901      	subs	r1, #1
 800fa22:	4603      	mov	r3, r0
 800fa24:	b132      	cbz	r2, 800fa34 <strncpy+0x16>
 800fa26:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa2a:	f803 4b01 	strb.w	r4, [r3], #1
 800fa2e:	3a01      	subs	r2, #1
 800fa30:	2c00      	cmp	r4, #0
 800fa32:	d1f7      	bne.n	800fa24 <strncpy+0x6>
 800fa34:	441a      	add	r2, r3
 800fa36:	2100      	movs	r1, #0
 800fa38:	4293      	cmp	r3, r2
 800fa3a:	d100      	bne.n	800fa3e <strncpy+0x20>
 800fa3c:	bd10      	pop	{r4, pc}
 800fa3e:	f803 1b01 	strb.w	r1, [r3], #1
 800fa42:	e7f9      	b.n	800fa38 <strncpy+0x1a>

0800fa44 <_raise_r>:
 800fa44:	291f      	cmp	r1, #31
 800fa46:	b538      	push	{r3, r4, r5, lr}
 800fa48:	4605      	mov	r5, r0
 800fa4a:	460c      	mov	r4, r1
 800fa4c:	d904      	bls.n	800fa58 <_raise_r+0x14>
 800fa4e:	2316      	movs	r3, #22
 800fa50:	6003      	str	r3, [r0, #0]
 800fa52:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa5a:	b112      	cbz	r2, 800fa62 <_raise_r+0x1e>
 800fa5c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa60:	b94b      	cbnz	r3, 800fa76 <_raise_r+0x32>
 800fa62:	4628      	mov	r0, r5
 800fa64:	f000 f830 	bl	800fac8 <_getpid_r>
 800fa68:	4622      	mov	r2, r4
 800fa6a:	4601      	mov	r1, r0
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa72:	f000 b817 	b.w	800faa4 <_kill_r>
 800fa76:	2b01      	cmp	r3, #1
 800fa78:	d00a      	beq.n	800fa90 <_raise_r+0x4c>
 800fa7a:	1c59      	adds	r1, r3, #1
 800fa7c:	d103      	bne.n	800fa86 <_raise_r+0x42>
 800fa7e:	2316      	movs	r3, #22
 800fa80:	6003      	str	r3, [r0, #0]
 800fa82:	2001      	movs	r0, #1
 800fa84:	e7e7      	b.n	800fa56 <_raise_r+0x12>
 800fa86:	2100      	movs	r1, #0
 800fa88:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4798      	blx	r3
 800fa90:	2000      	movs	r0, #0
 800fa92:	e7e0      	b.n	800fa56 <_raise_r+0x12>

0800fa94 <raise>:
 800fa94:	4b02      	ldr	r3, [pc, #8]	@ (800faa0 <raise+0xc>)
 800fa96:	4601      	mov	r1, r0
 800fa98:	6818      	ldr	r0, [r3, #0]
 800fa9a:	f7ff bfd3 	b.w	800fa44 <_raise_r>
 800fa9e:	bf00      	nop
 800faa0:	20000138 	.word	0x20000138

0800faa4 <_kill_r>:
 800faa4:	b538      	push	{r3, r4, r5, lr}
 800faa6:	4d07      	ldr	r5, [pc, #28]	@ (800fac4 <_kill_r+0x20>)
 800faa8:	2300      	movs	r3, #0
 800faaa:	4604      	mov	r4, r0
 800faac:	4608      	mov	r0, r1
 800faae:	4611      	mov	r1, r2
 800fab0:	602b      	str	r3, [r5, #0]
 800fab2:	f7f2 fafd 	bl	80020b0 <_kill>
 800fab6:	1c43      	adds	r3, r0, #1
 800fab8:	d102      	bne.n	800fac0 <_kill_r+0x1c>
 800faba:	682b      	ldr	r3, [r5, #0]
 800fabc:	b103      	cbz	r3, 800fac0 <_kill_r+0x1c>
 800fabe:	6023      	str	r3, [r4, #0]
 800fac0:	bd38      	pop	{r3, r4, r5, pc}
 800fac2:	bf00      	nop
 800fac4:	20001974 	.word	0x20001974

0800fac8 <_getpid_r>:
 800fac8:	f7f2 baea 	b.w	80020a0 <_getpid>

0800facc <_sbrk_r>:
 800facc:	b538      	push	{r3, r4, r5, lr}
 800face:	4d06      	ldr	r5, [pc, #24]	@ (800fae8 <_sbrk_r+0x1c>)
 800fad0:	2300      	movs	r3, #0
 800fad2:	4604      	mov	r4, r0
 800fad4:	4608      	mov	r0, r1
 800fad6:	602b      	str	r3, [r5, #0]
 800fad8:	f7f2 fb06 	bl	80020e8 <_sbrk>
 800fadc:	1c43      	adds	r3, r0, #1
 800fade:	d102      	bne.n	800fae6 <_sbrk_r+0x1a>
 800fae0:	682b      	ldr	r3, [r5, #0]
 800fae2:	b103      	cbz	r3, 800fae6 <_sbrk_r+0x1a>
 800fae4:	6023      	str	r3, [r4, #0]
 800fae6:	bd38      	pop	{r3, r4, r5, pc}
 800fae8:	20001974 	.word	0x20001974

0800faec <__errno>:
 800faec:	4b01      	ldr	r3, [pc, #4]	@ (800faf4 <__errno+0x8>)
 800faee:	6818      	ldr	r0, [r3, #0]
 800faf0:	4770      	bx	lr
 800faf2:	bf00      	nop
 800faf4:	20000138 	.word	0x20000138

0800faf8 <__libc_init_array>:
 800faf8:	b570      	push	{r4, r5, r6, lr}
 800fafa:	4d0d      	ldr	r5, [pc, #52]	@ (800fb30 <__libc_init_array+0x38>)
 800fafc:	4c0d      	ldr	r4, [pc, #52]	@ (800fb34 <__libc_init_array+0x3c>)
 800fafe:	1b64      	subs	r4, r4, r5
 800fb00:	10a4      	asrs	r4, r4, #2
 800fb02:	2600      	movs	r6, #0
 800fb04:	42a6      	cmp	r6, r4
 800fb06:	d109      	bne.n	800fb1c <__libc_init_array+0x24>
 800fb08:	4d0b      	ldr	r5, [pc, #44]	@ (800fb38 <__libc_init_array+0x40>)
 800fb0a:	4c0c      	ldr	r4, [pc, #48]	@ (800fb3c <__libc_init_array+0x44>)
 800fb0c:	f000 fba6 	bl	801025c <_init>
 800fb10:	1b64      	subs	r4, r4, r5
 800fb12:	10a4      	asrs	r4, r4, #2
 800fb14:	2600      	movs	r6, #0
 800fb16:	42a6      	cmp	r6, r4
 800fb18:	d105      	bne.n	800fb26 <__libc_init_array+0x2e>
 800fb1a:	bd70      	pop	{r4, r5, r6, pc}
 800fb1c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb20:	4798      	blx	r3
 800fb22:	3601      	adds	r6, #1
 800fb24:	e7ee      	b.n	800fb04 <__libc_init_array+0xc>
 800fb26:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb2a:	4798      	blx	r3
 800fb2c:	3601      	adds	r6, #1
 800fb2e:	e7f2      	b.n	800fb16 <__libc_init_array+0x1e>
 800fb30:	08017f40 	.word	0x08017f40
 800fb34:	08017f40 	.word	0x08017f40
 800fb38:	08017f40 	.word	0x08017f40
 800fb3c:	08017f4c 	.word	0x08017f4c

0800fb40 <__retarget_lock_acquire_recursive>:
 800fb40:	4770      	bx	lr

0800fb42 <__retarget_lock_release_recursive>:
 800fb42:	4770      	bx	lr

0800fb44 <memcpy>:
 800fb44:	440a      	add	r2, r1
 800fb46:	4291      	cmp	r1, r2
 800fb48:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800fb4c:	d100      	bne.n	800fb50 <memcpy+0xc>
 800fb4e:	4770      	bx	lr
 800fb50:	b510      	push	{r4, lr}
 800fb52:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb56:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb5a:	4291      	cmp	r1, r2
 800fb5c:	d1f9      	bne.n	800fb52 <memcpy+0xe>
 800fb5e:	bd10      	pop	{r4, pc}

0800fb60 <_free_r>:
 800fb60:	b538      	push	{r3, r4, r5, lr}
 800fb62:	4605      	mov	r5, r0
 800fb64:	2900      	cmp	r1, #0
 800fb66:	d041      	beq.n	800fbec <_free_r+0x8c>
 800fb68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb6c:	1f0c      	subs	r4, r1, #4
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	bfb8      	it	lt
 800fb72:	18e4      	addlt	r4, r4, r3
 800fb74:	f7ff feae 	bl	800f8d4 <__malloc_lock>
 800fb78:	4a1d      	ldr	r2, [pc, #116]	@ (800fbf0 <_free_r+0x90>)
 800fb7a:	6813      	ldr	r3, [r2, #0]
 800fb7c:	b933      	cbnz	r3, 800fb8c <_free_r+0x2c>
 800fb7e:	6063      	str	r3, [r4, #4]
 800fb80:	6014      	str	r4, [r2, #0]
 800fb82:	4628      	mov	r0, r5
 800fb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb88:	f7ff beaa 	b.w	800f8e0 <__malloc_unlock>
 800fb8c:	42a3      	cmp	r3, r4
 800fb8e:	d908      	bls.n	800fba2 <_free_r+0x42>
 800fb90:	6820      	ldr	r0, [r4, #0]
 800fb92:	1821      	adds	r1, r4, r0
 800fb94:	428b      	cmp	r3, r1
 800fb96:	bf01      	itttt	eq
 800fb98:	6819      	ldreq	r1, [r3, #0]
 800fb9a:	685b      	ldreq	r3, [r3, #4]
 800fb9c:	1809      	addeq	r1, r1, r0
 800fb9e:	6021      	streq	r1, [r4, #0]
 800fba0:	e7ed      	b.n	800fb7e <_free_r+0x1e>
 800fba2:	461a      	mov	r2, r3
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	b10b      	cbz	r3, 800fbac <_free_r+0x4c>
 800fba8:	42a3      	cmp	r3, r4
 800fbaa:	d9fa      	bls.n	800fba2 <_free_r+0x42>
 800fbac:	6811      	ldr	r1, [r2, #0]
 800fbae:	1850      	adds	r0, r2, r1
 800fbb0:	42a0      	cmp	r0, r4
 800fbb2:	d10b      	bne.n	800fbcc <_free_r+0x6c>
 800fbb4:	6820      	ldr	r0, [r4, #0]
 800fbb6:	4401      	add	r1, r0
 800fbb8:	1850      	adds	r0, r2, r1
 800fbba:	4283      	cmp	r3, r0
 800fbbc:	6011      	str	r1, [r2, #0]
 800fbbe:	d1e0      	bne.n	800fb82 <_free_r+0x22>
 800fbc0:	6818      	ldr	r0, [r3, #0]
 800fbc2:	685b      	ldr	r3, [r3, #4]
 800fbc4:	6053      	str	r3, [r2, #4]
 800fbc6:	4408      	add	r0, r1
 800fbc8:	6010      	str	r0, [r2, #0]
 800fbca:	e7da      	b.n	800fb82 <_free_r+0x22>
 800fbcc:	d902      	bls.n	800fbd4 <_free_r+0x74>
 800fbce:	230c      	movs	r3, #12
 800fbd0:	602b      	str	r3, [r5, #0]
 800fbd2:	e7d6      	b.n	800fb82 <_free_r+0x22>
 800fbd4:	6820      	ldr	r0, [r4, #0]
 800fbd6:	1821      	adds	r1, r4, r0
 800fbd8:	428b      	cmp	r3, r1
 800fbda:	bf04      	itt	eq
 800fbdc:	6819      	ldreq	r1, [r3, #0]
 800fbde:	685b      	ldreq	r3, [r3, #4]
 800fbe0:	6063      	str	r3, [r4, #4]
 800fbe2:	bf04      	itt	eq
 800fbe4:	1809      	addeq	r1, r1, r0
 800fbe6:	6021      	streq	r1, [r4, #0]
 800fbe8:	6054      	str	r4, [r2, #4]
 800fbea:	e7ca      	b.n	800fb82 <_free_r+0x22>
 800fbec:	bd38      	pop	{r3, r4, r5, pc}
 800fbee:	bf00      	nop
 800fbf0:	20001838 	.word	0x20001838

0800fbf4 <__ssputs_r>:
 800fbf4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fbf8:	688e      	ldr	r6, [r1, #8]
 800fbfa:	461f      	mov	r7, r3
 800fbfc:	42be      	cmp	r6, r7
 800fbfe:	680b      	ldr	r3, [r1, #0]
 800fc00:	4682      	mov	sl, r0
 800fc02:	460c      	mov	r4, r1
 800fc04:	4690      	mov	r8, r2
 800fc06:	d82d      	bhi.n	800fc64 <__ssputs_r+0x70>
 800fc08:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc0c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc10:	d026      	beq.n	800fc60 <__ssputs_r+0x6c>
 800fc12:	6965      	ldr	r5, [r4, #20]
 800fc14:	6909      	ldr	r1, [r1, #16]
 800fc16:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc1a:	eba3 0901 	sub.w	r9, r3, r1
 800fc1e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc22:	1c7b      	adds	r3, r7, #1
 800fc24:	444b      	add	r3, r9
 800fc26:	106d      	asrs	r5, r5, #1
 800fc28:	429d      	cmp	r5, r3
 800fc2a:	bf38      	it	cc
 800fc2c:	461d      	movcc	r5, r3
 800fc2e:	0553      	lsls	r3, r2, #21
 800fc30:	d527      	bpl.n	800fc82 <__ssputs_r+0x8e>
 800fc32:	4629      	mov	r1, r5
 800fc34:	f7ff fdce 	bl	800f7d4 <_malloc_r>
 800fc38:	4606      	mov	r6, r0
 800fc3a:	b360      	cbz	r0, 800fc96 <__ssputs_r+0xa2>
 800fc3c:	6921      	ldr	r1, [r4, #16]
 800fc3e:	464a      	mov	r2, r9
 800fc40:	f7ff ff80 	bl	800fb44 <memcpy>
 800fc44:	89a3      	ldrh	r3, [r4, #12]
 800fc46:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc4a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc4e:	81a3      	strh	r3, [r4, #12]
 800fc50:	6126      	str	r6, [r4, #16]
 800fc52:	6165      	str	r5, [r4, #20]
 800fc54:	444e      	add	r6, r9
 800fc56:	eba5 0509 	sub.w	r5, r5, r9
 800fc5a:	6026      	str	r6, [r4, #0]
 800fc5c:	60a5      	str	r5, [r4, #8]
 800fc5e:	463e      	mov	r6, r7
 800fc60:	42be      	cmp	r6, r7
 800fc62:	d900      	bls.n	800fc66 <__ssputs_r+0x72>
 800fc64:	463e      	mov	r6, r7
 800fc66:	6820      	ldr	r0, [r4, #0]
 800fc68:	4632      	mov	r2, r6
 800fc6a:	4641      	mov	r1, r8
 800fc6c:	f000 faa6 	bl	80101bc <memmove>
 800fc70:	68a3      	ldr	r3, [r4, #8]
 800fc72:	1b9b      	subs	r3, r3, r6
 800fc74:	60a3      	str	r3, [r4, #8]
 800fc76:	6823      	ldr	r3, [r4, #0]
 800fc78:	4433      	add	r3, r6
 800fc7a:	6023      	str	r3, [r4, #0]
 800fc7c:	2000      	movs	r0, #0
 800fc7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc82:	462a      	mov	r2, r5
 800fc84:	f000 fab4 	bl	80101f0 <_realloc_r>
 800fc88:	4606      	mov	r6, r0
 800fc8a:	2800      	cmp	r0, #0
 800fc8c:	d1e0      	bne.n	800fc50 <__ssputs_r+0x5c>
 800fc8e:	6921      	ldr	r1, [r4, #16]
 800fc90:	4650      	mov	r0, sl
 800fc92:	f7ff ff65 	bl	800fb60 <_free_r>
 800fc96:	230c      	movs	r3, #12
 800fc98:	f8ca 3000 	str.w	r3, [sl]
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fca2:	81a3      	strh	r3, [r4, #12]
 800fca4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fca8:	e7e9      	b.n	800fc7e <__ssputs_r+0x8a>
	...

0800fcac <_svfiprintf_r>:
 800fcac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcb0:	4698      	mov	r8, r3
 800fcb2:	898b      	ldrh	r3, [r1, #12]
 800fcb4:	061b      	lsls	r3, r3, #24
 800fcb6:	b09d      	sub	sp, #116	@ 0x74
 800fcb8:	4607      	mov	r7, r0
 800fcba:	460d      	mov	r5, r1
 800fcbc:	4614      	mov	r4, r2
 800fcbe:	d510      	bpl.n	800fce2 <_svfiprintf_r+0x36>
 800fcc0:	690b      	ldr	r3, [r1, #16]
 800fcc2:	b973      	cbnz	r3, 800fce2 <_svfiprintf_r+0x36>
 800fcc4:	2140      	movs	r1, #64	@ 0x40
 800fcc6:	f7ff fd85 	bl	800f7d4 <_malloc_r>
 800fcca:	6028      	str	r0, [r5, #0]
 800fccc:	6128      	str	r0, [r5, #16]
 800fcce:	b930      	cbnz	r0, 800fcde <_svfiprintf_r+0x32>
 800fcd0:	230c      	movs	r3, #12
 800fcd2:	603b      	str	r3, [r7, #0]
 800fcd4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fcd8:	b01d      	add	sp, #116	@ 0x74
 800fcda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcde:	2340      	movs	r3, #64	@ 0x40
 800fce0:	616b      	str	r3, [r5, #20]
 800fce2:	2300      	movs	r3, #0
 800fce4:	9309      	str	r3, [sp, #36]	@ 0x24
 800fce6:	2320      	movs	r3, #32
 800fce8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fcec:	f8cd 800c 	str.w	r8, [sp, #12]
 800fcf0:	2330      	movs	r3, #48	@ 0x30
 800fcf2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fe90 <_svfiprintf_r+0x1e4>
 800fcf6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fcfa:	f04f 0901 	mov.w	r9, #1
 800fcfe:	4623      	mov	r3, r4
 800fd00:	469a      	mov	sl, r3
 800fd02:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd06:	b10a      	cbz	r2, 800fd0c <_svfiprintf_r+0x60>
 800fd08:	2a25      	cmp	r2, #37	@ 0x25
 800fd0a:	d1f9      	bne.n	800fd00 <_svfiprintf_r+0x54>
 800fd0c:	ebba 0b04 	subs.w	fp, sl, r4
 800fd10:	d00b      	beq.n	800fd2a <_svfiprintf_r+0x7e>
 800fd12:	465b      	mov	r3, fp
 800fd14:	4622      	mov	r2, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	4638      	mov	r0, r7
 800fd1a:	f7ff ff6b 	bl	800fbf4 <__ssputs_r>
 800fd1e:	3001      	adds	r0, #1
 800fd20:	f000 80a7 	beq.w	800fe72 <_svfiprintf_r+0x1c6>
 800fd24:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd26:	445a      	add	r2, fp
 800fd28:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd2a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd2e:	2b00      	cmp	r3, #0
 800fd30:	f000 809f 	beq.w	800fe72 <_svfiprintf_r+0x1c6>
 800fd34:	2300      	movs	r3, #0
 800fd36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800fd3a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd3e:	f10a 0a01 	add.w	sl, sl, #1
 800fd42:	9304      	str	r3, [sp, #16]
 800fd44:	9307      	str	r3, [sp, #28]
 800fd46:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd4a:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd4c:	4654      	mov	r4, sl
 800fd4e:	2205      	movs	r2, #5
 800fd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd54:	484e      	ldr	r0, [pc, #312]	@ (800fe90 <_svfiprintf_r+0x1e4>)
 800fd56:	f7f0 fa4b 	bl	80001f0 <memchr>
 800fd5a:	9a04      	ldr	r2, [sp, #16]
 800fd5c:	b9d8      	cbnz	r0, 800fd96 <_svfiprintf_r+0xea>
 800fd5e:	06d0      	lsls	r0, r2, #27
 800fd60:	bf44      	itt	mi
 800fd62:	2320      	movmi	r3, #32
 800fd64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd68:	0711      	lsls	r1, r2, #28
 800fd6a:	bf44      	itt	mi
 800fd6c:	232b      	movmi	r3, #43	@ 0x2b
 800fd6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd72:	f89a 3000 	ldrb.w	r3, [sl]
 800fd76:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd78:	d015      	beq.n	800fda6 <_svfiprintf_r+0xfa>
 800fd7a:	9a07      	ldr	r2, [sp, #28]
 800fd7c:	4654      	mov	r4, sl
 800fd7e:	2000      	movs	r0, #0
 800fd80:	f04f 0c0a 	mov.w	ip, #10
 800fd84:	4621      	mov	r1, r4
 800fd86:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fd8a:	3b30      	subs	r3, #48	@ 0x30
 800fd8c:	2b09      	cmp	r3, #9
 800fd8e:	d94b      	bls.n	800fe28 <_svfiprintf_r+0x17c>
 800fd90:	b1b0      	cbz	r0, 800fdc0 <_svfiprintf_r+0x114>
 800fd92:	9207      	str	r2, [sp, #28]
 800fd94:	e014      	b.n	800fdc0 <_svfiprintf_r+0x114>
 800fd96:	eba0 0308 	sub.w	r3, r0, r8
 800fd9a:	fa09 f303 	lsl.w	r3, r9, r3
 800fd9e:	4313      	orrs	r3, r2
 800fda0:	9304      	str	r3, [sp, #16]
 800fda2:	46a2      	mov	sl, r4
 800fda4:	e7d2      	b.n	800fd4c <_svfiprintf_r+0xa0>
 800fda6:	9b03      	ldr	r3, [sp, #12]
 800fda8:	1d19      	adds	r1, r3, #4
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	9103      	str	r1, [sp, #12]
 800fdae:	2b00      	cmp	r3, #0
 800fdb0:	bfbb      	ittet	lt
 800fdb2:	425b      	neglt	r3, r3
 800fdb4:	f042 0202 	orrlt.w	r2, r2, #2
 800fdb8:	9307      	strge	r3, [sp, #28]
 800fdba:	9307      	strlt	r3, [sp, #28]
 800fdbc:	bfb8      	it	lt
 800fdbe:	9204      	strlt	r2, [sp, #16]
 800fdc0:	7823      	ldrb	r3, [r4, #0]
 800fdc2:	2b2e      	cmp	r3, #46	@ 0x2e
 800fdc4:	d10a      	bne.n	800fddc <_svfiprintf_r+0x130>
 800fdc6:	7863      	ldrb	r3, [r4, #1]
 800fdc8:	2b2a      	cmp	r3, #42	@ 0x2a
 800fdca:	d132      	bne.n	800fe32 <_svfiprintf_r+0x186>
 800fdcc:	9b03      	ldr	r3, [sp, #12]
 800fdce:	1d1a      	adds	r2, r3, #4
 800fdd0:	681b      	ldr	r3, [r3, #0]
 800fdd2:	9203      	str	r2, [sp, #12]
 800fdd4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdd8:	3402      	adds	r4, #2
 800fdda:	9305      	str	r3, [sp, #20]
 800fddc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800fea0 <_svfiprintf_r+0x1f4>
 800fde0:	7821      	ldrb	r1, [r4, #0]
 800fde2:	2203      	movs	r2, #3
 800fde4:	4650      	mov	r0, sl
 800fde6:	f7f0 fa03 	bl	80001f0 <memchr>
 800fdea:	b138      	cbz	r0, 800fdfc <_svfiprintf_r+0x150>
 800fdec:	9b04      	ldr	r3, [sp, #16]
 800fdee:	eba0 000a 	sub.w	r0, r0, sl
 800fdf2:	2240      	movs	r2, #64	@ 0x40
 800fdf4:	4082      	lsls	r2, r0
 800fdf6:	4313      	orrs	r3, r2
 800fdf8:	3401      	adds	r4, #1
 800fdfa:	9304      	str	r3, [sp, #16]
 800fdfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe00:	4824      	ldr	r0, [pc, #144]	@ (800fe94 <_svfiprintf_r+0x1e8>)
 800fe02:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe06:	2206      	movs	r2, #6
 800fe08:	f7f0 f9f2 	bl	80001f0 <memchr>
 800fe0c:	2800      	cmp	r0, #0
 800fe0e:	d036      	beq.n	800fe7e <_svfiprintf_r+0x1d2>
 800fe10:	4b21      	ldr	r3, [pc, #132]	@ (800fe98 <_svfiprintf_r+0x1ec>)
 800fe12:	bb1b      	cbnz	r3, 800fe5c <_svfiprintf_r+0x1b0>
 800fe14:	9b03      	ldr	r3, [sp, #12]
 800fe16:	3307      	adds	r3, #7
 800fe18:	f023 0307 	bic.w	r3, r3, #7
 800fe1c:	3308      	adds	r3, #8
 800fe1e:	9303      	str	r3, [sp, #12]
 800fe20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe22:	4433      	add	r3, r6
 800fe24:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe26:	e76a      	b.n	800fcfe <_svfiprintf_r+0x52>
 800fe28:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe2c:	460c      	mov	r4, r1
 800fe2e:	2001      	movs	r0, #1
 800fe30:	e7a8      	b.n	800fd84 <_svfiprintf_r+0xd8>
 800fe32:	2300      	movs	r3, #0
 800fe34:	3401      	adds	r4, #1
 800fe36:	9305      	str	r3, [sp, #20]
 800fe38:	4619      	mov	r1, r3
 800fe3a:	f04f 0c0a 	mov.w	ip, #10
 800fe3e:	4620      	mov	r0, r4
 800fe40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe44:	3a30      	subs	r2, #48	@ 0x30
 800fe46:	2a09      	cmp	r2, #9
 800fe48:	d903      	bls.n	800fe52 <_svfiprintf_r+0x1a6>
 800fe4a:	2b00      	cmp	r3, #0
 800fe4c:	d0c6      	beq.n	800fddc <_svfiprintf_r+0x130>
 800fe4e:	9105      	str	r1, [sp, #20]
 800fe50:	e7c4      	b.n	800fddc <_svfiprintf_r+0x130>
 800fe52:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe56:	4604      	mov	r4, r0
 800fe58:	2301      	movs	r3, #1
 800fe5a:	e7f0      	b.n	800fe3e <_svfiprintf_r+0x192>
 800fe5c:	ab03      	add	r3, sp, #12
 800fe5e:	9300      	str	r3, [sp, #0]
 800fe60:	462a      	mov	r2, r5
 800fe62:	4b0e      	ldr	r3, [pc, #56]	@ (800fe9c <_svfiprintf_r+0x1f0>)
 800fe64:	a904      	add	r1, sp, #16
 800fe66:	4638      	mov	r0, r7
 800fe68:	f3af 8000 	nop.w
 800fe6c:	1c42      	adds	r2, r0, #1
 800fe6e:	4606      	mov	r6, r0
 800fe70:	d1d6      	bne.n	800fe20 <_svfiprintf_r+0x174>
 800fe72:	89ab      	ldrh	r3, [r5, #12]
 800fe74:	065b      	lsls	r3, r3, #25
 800fe76:	f53f af2d 	bmi.w	800fcd4 <_svfiprintf_r+0x28>
 800fe7a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe7c:	e72c      	b.n	800fcd8 <_svfiprintf_r+0x2c>
 800fe7e:	ab03      	add	r3, sp, #12
 800fe80:	9300      	str	r3, [sp, #0]
 800fe82:	462a      	mov	r2, r5
 800fe84:	4b05      	ldr	r3, [pc, #20]	@ (800fe9c <_svfiprintf_r+0x1f0>)
 800fe86:	a904      	add	r1, sp, #16
 800fe88:	4638      	mov	r0, r7
 800fe8a:	f000 f879 	bl	800ff80 <_printf_i>
 800fe8e:	e7ed      	b.n	800fe6c <_svfiprintf_r+0x1c0>
 800fe90:	08017f05 	.word	0x08017f05
 800fe94:	08017f0f 	.word	0x08017f0f
 800fe98:	00000000 	.word	0x00000000
 800fe9c:	0800fbf5 	.word	0x0800fbf5
 800fea0:	08017f0b 	.word	0x08017f0b

<<<<<<< HEAD
0800fea4 <_printf_common>:
 800fea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fea8:	4616      	mov	r6, r2
 800feaa:	4698      	mov	r8, r3
 800feac:	688a      	ldr	r2, [r1, #8]
 800feae:	690b      	ldr	r3, [r1, #16]
 800feb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800feb4:	4293      	cmp	r3, r2
 800feb6:	bfb8      	it	lt
 800feb8:	4613      	movlt	r3, r2
 800feba:	6033      	str	r3, [r6, #0]
 800febc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800fec0:	4607      	mov	r7, r0
 800fec2:	460c      	mov	r4, r1
 800fec4:	b10a      	cbz	r2, 800feca <_printf_common+0x26>
 800fec6:	3301      	adds	r3, #1
 800fec8:	6033      	str	r3, [r6, #0]
 800feca:	6823      	ldr	r3, [r4, #0]
 800fecc:	0699      	lsls	r1, r3, #26
 800fece:	bf42      	ittt	mi
 800fed0:	6833      	ldrmi	r3, [r6, #0]
 800fed2:	3302      	addmi	r3, #2
 800fed4:	6033      	strmi	r3, [r6, #0]
 800fed6:	6825      	ldr	r5, [r4, #0]
 800fed8:	f015 0506 	ands.w	r5, r5, #6
 800fedc:	d106      	bne.n	800feec <_printf_common+0x48>
 800fede:	f104 0a19 	add.w	sl, r4, #25
 800fee2:	68e3      	ldr	r3, [r4, #12]
 800fee4:	6832      	ldr	r2, [r6, #0]
 800fee6:	1a9b      	subs	r3, r3, r2
 800fee8:	42ab      	cmp	r3, r5
 800feea:	dc26      	bgt.n	800ff3a <_printf_common+0x96>
 800feec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fef0:	6822      	ldr	r2, [r4, #0]
 800fef2:	3b00      	subs	r3, #0
 800fef4:	bf18      	it	ne
 800fef6:	2301      	movne	r3, #1
 800fef8:	0692      	lsls	r2, r2, #26
 800fefa:	d42b      	bmi.n	800ff54 <_printf_common+0xb0>
 800fefc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ff00:	4641      	mov	r1, r8
 800ff02:	4638      	mov	r0, r7
 800ff04:	47c8      	blx	r9
 800ff06:	3001      	adds	r0, #1
 800ff08:	d01e      	beq.n	800ff48 <_printf_common+0xa4>
 800ff0a:	6823      	ldr	r3, [r4, #0]
 800ff0c:	6922      	ldr	r2, [r4, #16]
 800ff0e:	f003 0306 	and.w	r3, r3, #6
 800ff12:	2b04      	cmp	r3, #4
 800ff14:	bf02      	ittt	eq
 800ff16:	68e5      	ldreq	r5, [r4, #12]
 800ff18:	6833      	ldreq	r3, [r6, #0]
 800ff1a:	1aed      	subeq	r5, r5, r3
 800ff1c:	68a3      	ldr	r3, [r4, #8]
 800ff1e:	bf0c      	ite	eq
 800ff20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ff24:	2500      	movne	r5, #0
 800ff26:	4293      	cmp	r3, r2
 800ff28:	bfc4      	itt	gt
 800ff2a:	1a9b      	subgt	r3, r3, r2
 800ff2c:	18ed      	addgt	r5, r5, r3
 800ff2e:	2600      	movs	r6, #0
 800ff30:	341a      	adds	r4, #26
 800ff32:	42b5      	cmp	r5, r6
 800ff34:	d11a      	bne.n	800ff6c <_printf_common+0xc8>
 800ff36:	2000      	movs	r0, #0
 800ff38:	e008      	b.n	800ff4c <_printf_common+0xa8>
 800ff3a:	2301      	movs	r3, #1
 800ff3c:	4652      	mov	r2, sl
 800ff3e:	4641      	mov	r1, r8
 800ff40:	4638      	mov	r0, r7
 800ff42:	47c8      	blx	r9
 800ff44:	3001      	adds	r0, #1
 800ff46:	d103      	bne.n	800ff50 <_printf_common+0xac>
 800ff48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ff4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ff50:	3501      	adds	r5, #1
 800ff52:	e7c6      	b.n	800fee2 <_printf_common+0x3e>
 800ff54:	18e1      	adds	r1, r4, r3
 800ff56:	1c5a      	adds	r2, r3, #1
 800ff58:	2030      	movs	r0, #48	@ 0x30
 800ff5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800ff5e:	4422      	add	r2, r4
 800ff60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800ff64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800ff68:	3302      	adds	r3, #2
 800ff6a:	e7c7      	b.n	800fefc <_printf_common+0x58>
 800ff6c:	2301      	movs	r3, #1
 800ff6e:	4622      	mov	r2, r4
 800ff70:	4641      	mov	r1, r8
 800ff72:	4638      	mov	r0, r7
 800ff74:	47c8      	blx	r9
 800ff76:	3001      	adds	r0, #1
 800ff78:	d0e6      	beq.n	800ff48 <_printf_common+0xa4>
 800ff7a:	3601      	adds	r6, #1
 800ff7c:	e7d9      	b.n	800ff32 <_printf_common+0x8e>
	...

0800ff80 <_printf_i>:
 800ff80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff84:	7e0f      	ldrb	r7, [r1, #24]
 800ff86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ff88:	2f78      	cmp	r7, #120	@ 0x78
 800ff8a:	4691      	mov	r9, r2
 800ff8c:	4680      	mov	r8, r0
 800ff8e:	460c      	mov	r4, r1
 800ff90:	469a      	mov	sl, r3
 800ff92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ff96:	d807      	bhi.n	800ffa8 <_printf_i+0x28>
 800ff98:	2f62      	cmp	r7, #98	@ 0x62
 800ff9a:	d80a      	bhi.n	800ffb2 <_printf_i+0x32>
 800ff9c:	2f00      	cmp	r7, #0
 800ff9e:	f000 80d1 	beq.w	8010144 <_printf_i+0x1c4>
 800ffa2:	2f58      	cmp	r7, #88	@ 0x58
 800ffa4:	f000 80b8 	beq.w	8010118 <_printf_i+0x198>
 800ffa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffb0:	e03a      	b.n	8010028 <_printf_i+0xa8>
 800ffb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffb6:	2b15      	cmp	r3, #21
 800ffb8:	d8f6      	bhi.n	800ffa8 <_printf_i+0x28>
 800ffba:	a101      	add	r1, pc, #4	@ (adr r1, 800ffc0 <_printf_i+0x40>)
 800ffbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffc0:	08010019 	.word	0x08010019
 800ffc4:	0801002d 	.word	0x0801002d
 800ffc8:	0800ffa9 	.word	0x0800ffa9
 800ffcc:	0800ffa9 	.word	0x0800ffa9
 800ffd0:	0800ffa9 	.word	0x0800ffa9
 800ffd4:	0800ffa9 	.word	0x0800ffa9
 800ffd8:	0801002d 	.word	0x0801002d
 800ffdc:	0800ffa9 	.word	0x0800ffa9
 800ffe0:	0800ffa9 	.word	0x0800ffa9
 800ffe4:	0800ffa9 	.word	0x0800ffa9
 800ffe8:	0800ffa9 	.word	0x0800ffa9
 800ffec:	0801012b 	.word	0x0801012b
 800fff0:	08010057 	.word	0x08010057
 800fff4:	080100e5 	.word	0x080100e5
 800fff8:	0800ffa9 	.word	0x0800ffa9
 800fffc:	0800ffa9 	.word	0x0800ffa9
 8010000:	0801014d 	.word	0x0801014d
 8010004:	0800ffa9 	.word	0x0800ffa9
 8010008:	08010057 	.word	0x08010057
 801000c:	0800ffa9 	.word	0x0800ffa9
 8010010:	0800ffa9 	.word	0x0800ffa9
 8010014:	080100ed 	.word	0x080100ed
 8010018:	6833      	ldr	r3, [r6, #0]
 801001a:	1d1a      	adds	r2, r3, #4
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	6032      	str	r2, [r6, #0]
 8010020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010028:	2301      	movs	r3, #1
 801002a:	e09c      	b.n	8010166 <_printf_i+0x1e6>
 801002c:	6833      	ldr	r3, [r6, #0]
 801002e:	6820      	ldr	r0, [r4, #0]
 8010030:	1d19      	adds	r1, r3, #4
 8010032:	6031      	str	r1, [r6, #0]
 8010034:	0606      	lsls	r6, r0, #24
 8010036:	d501      	bpl.n	801003c <_printf_i+0xbc>
 8010038:	681d      	ldr	r5, [r3, #0]
 801003a:	e003      	b.n	8010044 <_printf_i+0xc4>
 801003c:	0645      	lsls	r5, r0, #25
 801003e:	d5fb      	bpl.n	8010038 <_printf_i+0xb8>
 8010040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010044:	2d00      	cmp	r5, #0
 8010046:	da03      	bge.n	8010050 <_printf_i+0xd0>
 8010048:	232d      	movs	r3, #45	@ 0x2d
 801004a:	426d      	negs	r5, r5
 801004c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010050:	4858      	ldr	r0, [pc, #352]	@ (80101b4 <_printf_i+0x234>)
 8010052:	230a      	movs	r3, #10
 8010054:	e011      	b.n	801007a <_printf_i+0xfa>
 8010056:	6821      	ldr	r1, [r4, #0]
 8010058:	6833      	ldr	r3, [r6, #0]
 801005a:	0608      	lsls	r0, r1, #24
 801005c:	f853 5b04 	ldr.w	r5, [r3], #4
 8010060:	d402      	bmi.n	8010068 <_printf_i+0xe8>
 8010062:	0649      	lsls	r1, r1, #25
 8010064:	bf48      	it	mi
 8010066:	b2ad      	uxthmi	r5, r5
 8010068:	2f6f      	cmp	r7, #111	@ 0x6f
 801006a:	4852      	ldr	r0, [pc, #328]	@ (80101b4 <_printf_i+0x234>)
 801006c:	6033      	str	r3, [r6, #0]
 801006e:	bf14      	ite	ne
 8010070:	230a      	movne	r3, #10
 8010072:	2308      	moveq	r3, #8
 8010074:	2100      	movs	r1, #0
 8010076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801007a:	6866      	ldr	r6, [r4, #4]
 801007c:	60a6      	str	r6, [r4, #8]
 801007e:	2e00      	cmp	r6, #0
 8010080:	db05      	blt.n	801008e <_printf_i+0x10e>
 8010082:	6821      	ldr	r1, [r4, #0]
 8010084:	432e      	orrs	r6, r5
 8010086:	f021 0104 	bic.w	r1, r1, #4
 801008a:	6021      	str	r1, [r4, #0]
 801008c:	d04b      	beq.n	8010126 <_printf_i+0x1a6>
 801008e:	4616      	mov	r6, r2
 8010090:	fbb5 f1f3 	udiv	r1, r5, r3
 8010094:	fb03 5711 	mls	r7, r3, r1, r5
 8010098:	5dc7      	ldrb	r7, [r0, r7]
 801009a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801009e:	462f      	mov	r7, r5
 80100a0:	42bb      	cmp	r3, r7
 80100a2:	460d      	mov	r5, r1
 80100a4:	d9f4      	bls.n	8010090 <_printf_i+0x110>
 80100a6:	2b08      	cmp	r3, #8
 80100a8:	d10b      	bne.n	80100c2 <_printf_i+0x142>
 80100aa:	6823      	ldr	r3, [r4, #0]
 80100ac:	07df      	lsls	r7, r3, #31
 80100ae:	d508      	bpl.n	80100c2 <_printf_i+0x142>
 80100b0:	6923      	ldr	r3, [r4, #16]
 80100b2:	6861      	ldr	r1, [r4, #4]
 80100b4:	4299      	cmp	r1, r3
 80100b6:	bfde      	ittt	le
 80100b8:	2330      	movle	r3, #48	@ 0x30
 80100ba:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100be:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80100c2:	1b92      	subs	r2, r2, r6
 80100c4:	6122      	str	r2, [r4, #16]
 80100c6:	f8cd a000 	str.w	sl, [sp]
 80100ca:	464b      	mov	r3, r9
 80100cc:	aa03      	add	r2, sp, #12
 80100ce:	4621      	mov	r1, r4
 80100d0:	4640      	mov	r0, r8
 80100d2:	f7ff fee7 	bl	800fea4 <_printf_common>
 80100d6:	3001      	adds	r0, #1
 80100d8:	d14a      	bne.n	8010170 <_printf_i+0x1f0>
 80100da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80100de:	b004      	add	sp, #16
 80100e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100e4:	6823      	ldr	r3, [r4, #0]
 80100e6:	f043 0320 	orr.w	r3, r3, #32
 80100ea:	6023      	str	r3, [r4, #0]
 80100ec:	4832      	ldr	r0, [pc, #200]	@ (80101b8 <_printf_i+0x238>)
 80100ee:	2778      	movs	r7, #120	@ 0x78
 80100f0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80100f4:	6823      	ldr	r3, [r4, #0]
 80100f6:	6831      	ldr	r1, [r6, #0]
 80100f8:	061f      	lsls	r7, r3, #24
 80100fa:	f851 5b04 	ldr.w	r5, [r1], #4
 80100fe:	d402      	bmi.n	8010106 <_printf_i+0x186>
 8010100:	065f      	lsls	r7, r3, #25
 8010102:	bf48      	it	mi
 8010104:	b2ad      	uxthmi	r5, r5
 8010106:	6031      	str	r1, [r6, #0]
 8010108:	07d9      	lsls	r1, r3, #31
 801010a:	bf44      	itt	mi
 801010c:	f043 0320 	orrmi.w	r3, r3, #32
 8010110:	6023      	strmi	r3, [r4, #0]
 8010112:	b11d      	cbz	r5, 801011c <_printf_i+0x19c>
 8010114:	2310      	movs	r3, #16
 8010116:	e7ad      	b.n	8010074 <_printf_i+0xf4>
 8010118:	4826      	ldr	r0, [pc, #152]	@ (80101b4 <_printf_i+0x234>)
 801011a:	e7e9      	b.n	80100f0 <_printf_i+0x170>
 801011c:	6823      	ldr	r3, [r4, #0]
 801011e:	f023 0320 	bic.w	r3, r3, #32
 8010122:	6023      	str	r3, [r4, #0]
 8010124:	e7f6      	b.n	8010114 <_printf_i+0x194>
 8010126:	4616      	mov	r6, r2
 8010128:	e7bd      	b.n	80100a6 <_printf_i+0x126>
 801012a:	6833      	ldr	r3, [r6, #0]
 801012c:	6825      	ldr	r5, [r4, #0]
 801012e:	6961      	ldr	r1, [r4, #20]
 8010130:	1d18      	adds	r0, r3, #4
 8010132:	6030      	str	r0, [r6, #0]
 8010134:	062e      	lsls	r6, r5, #24
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	d501      	bpl.n	801013e <_printf_i+0x1be>
 801013a:	6019      	str	r1, [r3, #0]
 801013c:	e002      	b.n	8010144 <_printf_i+0x1c4>
 801013e:	0668      	lsls	r0, r5, #25
 8010140:	d5fb      	bpl.n	801013a <_printf_i+0x1ba>
 8010142:	8019      	strh	r1, [r3, #0]
 8010144:	2300      	movs	r3, #0
 8010146:	6123      	str	r3, [r4, #16]
 8010148:	4616      	mov	r6, r2
 801014a:	e7bc      	b.n	80100c6 <_printf_i+0x146>
 801014c:	6833      	ldr	r3, [r6, #0]
 801014e:	1d1a      	adds	r2, r3, #4
 8010150:	6032      	str	r2, [r6, #0]
 8010152:	681e      	ldr	r6, [r3, #0]
 8010154:	6862      	ldr	r2, [r4, #4]
 8010156:	2100      	movs	r1, #0
 8010158:	4630      	mov	r0, r6
 801015a:	f7f0 f849 	bl	80001f0 <memchr>
 801015e:	b108      	cbz	r0, 8010164 <_printf_i+0x1e4>
 8010160:	1b80      	subs	r0, r0, r6
 8010162:	6060      	str	r0, [r4, #4]
 8010164:	6863      	ldr	r3, [r4, #4]
 8010166:	6123      	str	r3, [r4, #16]
 8010168:	2300      	movs	r3, #0
 801016a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801016e:	e7aa      	b.n	80100c6 <_printf_i+0x146>
 8010170:	6923      	ldr	r3, [r4, #16]
 8010172:	4632      	mov	r2, r6
 8010174:	4649      	mov	r1, r9
 8010176:	4640      	mov	r0, r8
 8010178:	47d0      	blx	sl
 801017a:	3001      	adds	r0, #1
 801017c:	d0ad      	beq.n	80100da <_printf_i+0x15a>
 801017e:	6823      	ldr	r3, [r4, #0]
 8010180:	079b      	lsls	r3, r3, #30
 8010182:	d413      	bmi.n	80101ac <_printf_i+0x22c>
 8010184:	68e0      	ldr	r0, [r4, #12]
 8010186:	9b03      	ldr	r3, [sp, #12]
 8010188:	4298      	cmp	r0, r3
 801018a:	bfb8      	it	lt
 801018c:	4618      	movlt	r0, r3
 801018e:	e7a6      	b.n	80100de <_printf_i+0x15e>
 8010190:	2301      	movs	r3, #1
 8010192:	4632      	mov	r2, r6
 8010194:	4649      	mov	r1, r9
 8010196:	4640      	mov	r0, r8
 8010198:	47d0      	blx	sl
 801019a:	3001      	adds	r0, #1
 801019c:	d09d      	beq.n	80100da <_printf_i+0x15a>
 801019e:	3501      	adds	r5, #1
 80101a0:	68e3      	ldr	r3, [r4, #12]
 80101a2:	9903      	ldr	r1, [sp, #12]
 80101a4:	1a5b      	subs	r3, r3, r1
 80101a6:	42ab      	cmp	r3, r5
 80101a8:	dcf2      	bgt.n	8010190 <_printf_i+0x210>
 80101aa:	e7eb      	b.n	8010184 <_printf_i+0x204>
 80101ac:	2500      	movs	r5, #0
 80101ae:	f104 0619 	add.w	r6, r4, #25
 80101b2:	e7f5      	b.n	80101a0 <_printf_i+0x220>
 80101b4:	08017f16 	.word	0x08017f16
 80101b8:	08017f27 	.word	0x08017f27
=======
0800fa00 <memset>:
 800fa00:	4402      	add	r2, r0
 800fa02:	4603      	mov	r3, r0
 800fa04:	4293      	cmp	r3, r2
 800fa06:	d100      	bne.n	800fa0a <memset+0xa>
 800fa08:	4770      	bx	lr
 800fa0a:	f803 1b01 	strb.w	r1, [r3], #1
 800fa0e:	e7f9      	b.n	800fa04 <memset+0x4>

0800fa10 <strncat>:
 800fa10:	b530      	push	{r4, r5, lr}
 800fa12:	4604      	mov	r4, r0
 800fa14:	7825      	ldrb	r5, [r4, #0]
 800fa16:	4623      	mov	r3, r4
 800fa18:	3401      	adds	r4, #1
 800fa1a:	2d00      	cmp	r5, #0
 800fa1c:	d1fa      	bne.n	800fa14 <strncat+0x4>
 800fa1e:	3a01      	subs	r2, #1
 800fa20:	d304      	bcc.n	800fa2c <strncat+0x1c>
 800fa22:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fa26:	f803 4b01 	strb.w	r4, [r3], #1
 800fa2a:	b904      	cbnz	r4, 800fa2e <strncat+0x1e>
 800fa2c:	bd30      	pop	{r4, r5, pc}
 800fa2e:	2a00      	cmp	r2, #0
 800fa30:	d1f5      	bne.n	800fa1e <strncat+0xe>
 800fa32:	701a      	strb	r2, [r3, #0]
 800fa34:	e7f3      	b.n	800fa1e <strncat+0xe>

0800fa36 <strncpy>:
 800fa36:	b510      	push	{r4, lr}
 800fa38:	3901      	subs	r1, #1
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	b132      	cbz	r2, 800fa4c <strncpy+0x16>
 800fa3e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fa42:	f803 4b01 	strb.w	r4, [r3], #1
 800fa46:	3a01      	subs	r2, #1
 800fa48:	2c00      	cmp	r4, #0
 800fa4a:	d1f7      	bne.n	800fa3c <strncpy+0x6>
 800fa4c:	441a      	add	r2, r3
 800fa4e:	2100      	movs	r1, #0
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d100      	bne.n	800fa56 <strncpy+0x20>
 800fa54:	bd10      	pop	{r4, pc}
 800fa56:	f803 1b01 	strb.w	r1, [r3], #1
 800fa5a:	e7f9      	b.n	800fa50 <strncpy+0x1a>

0800fa5c <_raise_r>:
 800fa5c:	291f      	cmp	r1, #31
 800fa5e:	b538      	push	{r3, r4, r5, lr}
 800fa60:	4605      	mov	r5, r0
 800fa62:	460c      	mov	r4, r1
 800fa64:	d904      	bls.n	800fa70 <_raise_r+0x14>
 800fa66:	2316      	movs	r3, #22
 800fa68:	6003      	str	r3, [r0, #0]
 800fa6a:	f04f 30ff 	mov.w	r0, #4294967295
 800fa6e:	bd38      	pop	{r3, r4, r5, pc}
 800fa70:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fa72:	b112      	cbz	r2, 800fa7a <_raise_r+0x1e>
 800fa74:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fa78:	b94b      	cbnz	r3, 800fa8e <_raise_r+0x32>
 800fa7a:	4628      	mov	r0, r5
 800fa7c:	f000 f830 	bl	800fae0 <_getpid_r>
 800fa80:	4622      	mov	r2, r4
 800fa82:	4601      	mov	r1, r0
 800fa84:	4628      	mov	r0, r5
 800fa86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa8a:	f000 b817 	b.w	800fabc <_kill_r>
 800fa8e:	2b01      	cmp	r3, #1
 800fa90:	d00a      	beq.n	800faa8 <_raise_r+0x4c>
 800fa92:	1c59      	adds	r1, r3, #1
 800fa94:	d103      	bne.n	800fa9e <_raise_r+0x42>
 800fa96:	2316      	movs	r3, #22
 800fa98:	6003      	str	r3, [r0, #0]
 800fa9a:	2001      	movs	r0, #1
 800fa9c:	e7e7      	b.n	800fa6e <_raise_r+0x12>
 800fa9e:	2100      	movs	r1, #0
 800faa0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800faa4:	4620      	mov	r0, r4
 800faa6:	4798      	blx	r3
 800faa8:	2000      	movs	r0, #0
 800faaa:	e7e0      	b.n	800fa6e <_raise_r+0x12>

0800faac <raise>:
 800faac:	4b02      	ldr	r3, [pc, #8]	@ (800fab8 <raise+0xc>)
 800faae:	4601      	mov	r1, r0
 800fab0:	6818      	ldr	r0, [r3, #0]
 800fab2:	f7ff bfd3 	b.w	800fa5c <_raise_r>
 800fab6:	bf00      	nop
 800fab8:	20000138 	.word	0x20000138

0800fabc <_kill_r>:
 800fabc:	b538      	push	{r3, r4, r5, lr}
 800fabe:	4d07      	ldr	r5, [pc, #28]	@ (800fadc <_kill_r+0x20>)
 800fac0:	2300      	movs	r3, #0
 800fac2:	4604      	mov	r4, r0
 800fac4:	4608      	mov	r0, r1
 800fac6:	4611      	mov	r1, r2
 800fac8:	602b      	str	r3, [r5, #0]
 800faca:	f7f2 faf3 	bl	80020b4 <_kill>
 800face:	1c43      	adds	r3, r0, #1
 800fad0:	d102      	bne.n	800fad8 <_kill_r+0x1c>
 800fad2:	682b      	ldr	r3, [r5, #0]
 800fad4:	b103      	cbz	r3, 800fad8 <_kill_r+0x1c>
 800fad6:	6023      	str	r3, [r4, #0]
 800fad8:	bd38      	pop	{r3, r4, r5, pc}
 800fada:	bf00      	nop
 800fadc:	20001978 	.word	0x20001978

0800fae0 <_getpid_r>:
 800fae0:	f7f2 bae0 	b.w	80020a4 <_getpid>

0800fae4 <_sbrk_r>:
 800fae4:	b538      	push	{r3, r4, r5, lr}
 800fae6:	4d06      	ldr	r5, [pc, #24]	@ (800fb00 <_sbrk_r+0x1c>)
 800fae8:	2300      	movs	r3, #0
 800faea:	4604      	mov	r4, r0
 800faec:	4608      	mov	r0, r1
 800faee:	602b      	str	r3, [r5, #0]
 800faf0:	f7f2 fafc 	bl	80020ec <_sbrk>
 800faf4:	1c43      	adds	r3, r0, #1
 800faf6:	d102      	bne.n	800fafe <_sbrk_r+0x1a>
 800faf8:	682b      	ldr	r3, [r5, #0]
 800fafa:	b103      	cbz	r3, 800fafe <_sbrk_r+0x1a>
 800fafc:	6023      	str	r3, [r4, #0]
 800fafe:	bd38      	pop	{r3, r4, r5, pc}
 800fb00:	20001978 	.word	0x20001978

0800fb04 <__errno>:
 800fb04:	4b01      	ldr	r3, [pc, #4]	@ (800fb0c <__errno+0x8>)
 800fb06:	6818      	ldr	r0, [r3, #0]
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	20000138 	.word	0x20000138

0800fb10 <__libc_init_array>:
 800fb10:	b570      	push	{r4, r5, r6, lr}
 800fb12:	4d0d      	ldr	r5, [pc, #52]	@ (800fb48 <__libc_init_array+0x38>)
 800fb14:	4c0d      	ldr	r4, [pc, #52]	@ (800fb4c <__libc_init_array+0x3c>)
 800fb16:	1b64      	subs	r4, r4, r5
 800fb18:	10a4      	asrs	r4, r4, #2
 800fb1a:	2600      	movs	r6, #0
 800fb1c:	42a6      	cmp	r6, r4
 800fb1e:	d109      	bne.n	800fb34 <__libc_init_array+0x24>
 800fb20:	4d0b      	ldr	r5, [pc, #44]	@ (800fb50 <__libc_init_array+0x40>)
 800fb22:	4c0c      	ldr	r4, [pc, #48]	@ (800fb54 <__libc_init_array+0x44>)
 800fb24:	f000 fba8 	bl	8010278 <_init>
 800fb28:	1b64      	subs	r4, r4, r5
 800fb2a:	10a4      	asrs	r4, r4, #2
 800fb2c:	2600      	movs	r6, #0
 800fb2e:	42a6      	cmp	r6, r4
 800fb30:	d105      	bne.n	800fb3e <__libc_init_array+0x2e>
 800fb32:	bd70      	pop	{r4, r5, r6, pc}
 800fb34:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb38:	4798      	blx	r3
 800fb3a:	3601      	adds	r6, #1
 800fb3c:	e7ee      	b.n	800fb1c <__libc_init_array+0xc>
 800fb3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800fb42:	4798      	blx	r3
 800fb44:	3601      	adds	r6, #1
 800fb46:	e7f2      	b.n	800fb2e <__libc_init_array+0x1e>
 800fb48:	08017ef4 	.word	0x08017ef4
 800fb4c:	08017ef4 	.word	0x08017ef4
 800fb50:	08017ef4 	.word	0x08017ef4
 800fb54:	08017f00 	.word	0x08017f00

0800fb58 <__retarget_lock_acquire_recursive>:
 800fb58:	4770      	bx	lr

0800fb5a <__retarget_lock_release_recursive>:
 800fb5a:	4770      	bx	lr

0800fb5c <memcpy>:
 800fb5c:	440a      	add	r2, r1
 800fb5e:	4291      	cmp	r1, r2
 800fb60:	f100 33ff 	add.w	r3, r0, #4294967295
 800fb64:	d100      	bne.n	800fb68 <memcpy+0xc>
 800fb66:	4770      	bx	lr
 800fb68:	b510      	push	{r4, lr}
 800fb6a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fb6e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fb72:	4291      	cmp	r1, r2
 800fb74:	d1f9      	bne.n	800fb6a <memcpy+0xe>
 800fb76:	bd10      	pop	{r4, pc}

0800fb78 <_free_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4605      	mov	r5, r0
 800fb7c:	2900      	cmp	r1, #0
 800fb7e:	d041      	beq.n	800fc04 <_free_r+0x8c>
 800fb80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb84:	1f0c      	subs	r4, r1, #4
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	bfb8      	it	lt
 800fb8a:	18e4      	addlt	r4, r4, r3
 800fb8c:	f7ff feb0 	bl	800f8f0 <__malloc_lock>
 800fb90:	4a1d      	ldr	r2, [pc, #116]	@ (800fc08 <_free_r+0x90>)
 800fb92:	6813      	ldr	r3, [r2, #0]
 800fb94:	b933      	cbnz	r3, 800fba4 <_free_r+0x2c>
 800fb96:	6063      	str	r3, [r4, #4]
 800fb98:	6014      	str	r4, [r2, #0]
 800fb9a:	4628      	mov	r0, r5
 800fb9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fba0:	f7ff beac 	b.w	800f8fc <__malloc_unlock>
 800fba4:	42a3      	cmp	r3, r4
 800fba6:	d908      	bls.n	800fbba <_free_r+0x42>
 800fba8:	6820      	ldr	r0, [r4, #0]
 800fbaa:	1821      	adds	r1, r4, r0
 800fbac:	428b      	cmp	r3, r1
 800fbae:	bf01      	itttt	eq
 800fbb0:	6819      	ldreq	r1, [r3, #0]
 800fbb2:	685b      	ldreq	r3, [r3, #4]
 800fbb4:	1809      	addeq	r1, r1, r0
 800fbb6:	6021      	streq	r1, [r4, #0]
 800fbb8:	e7ed      	b.n	800fb96 <_free_r+0x1e>
 800fbba:	461a      	mov	r2, r3
 800fbbc:	685b      	ldr	r3, [r3, #4]
 800fbbe:	b10b      	cbz	r3, 800fbc4 <_free_r+0x4c>
 800fbc0:	42a3      	cmp	r3, r4
 800fbc2:	d9fa      	bls.n	800fbba <_free_r+0x42>
 800fbc4:	6811      	ldr	r1, [r2, #0]
 800fbc6:	1850      	adds	r0, r2, r1
 800fbc8:	42a0      	cmp	r0, r4
 800fbca:	d10b      	bne.n	800fbe4 <_free_r+0x6c>
 800fbcc:	6820      	ldr	r0, [r4, #0]
 800fbce:	4401      	add	r1, r0
 800fbd0:	1850      	adds	r0, r2, r1
 800fbd2:	4283      	cmp	r3, r0
 800fbd4:	6011      	str	r1, [r2, #0]
 800fbd6:	d1e0      	bne.n	800fb9a <_free_r+0x22>
 800fbd8:	6818      	ldr	r0, [r3, #0]
 800fbda:	685b      	ldr	r3, [r3, #4]
 800fbdc:	6053      	str	r3, [r2, #4]
 800fbde:	4408      	add	r0, r1
 800fbe0:	6010      	str	r0, [r2, #0]
 800fbe2:	e7da      	b.n	800fb9a <_free_r+0x22>
 800fbe4:	d902      	bls.n	800fbec <_free_r+0x74>
 800fbe6:	230c      	movs	r3, #12
 800fbe8:	602b      	str	r3, [r5, #0]
 800fbea:	e7d6      	b.n	800fb9a <_free_r+0x22>
 800fbec:	6820      	ldr	r0, [r4, #0]
 800fbee:	1821      	adds	r1, r4, r0
 800fbf0:	428b      	cmp	r3, r1
 800fbf2:	bf04      	itt	eq
 800fbf4:	6819      	ldreq	r1, [r3, #0]
 800fbf6:	685b      	ldreq	r3, [r3, #4]
 800fbf8:	6063      	str	r3, [r4, #4]
 800fbfa:	bf04      	itt	eq
 800fbfc:	1809      	addeq	r1, r1, r0
 800fbfe:	6021      	streq	r1, [r4, #0]
 800fc00:	6054      	str	r4, [r2, #4]
 800fc02:	e7ca      	b.n	800fb9a <_free_r+0x22>
 800fc04:	bd38      	pop	{r3, r4, r5, pc}
 800fc06:	bf00      	nop
 800fc08:	2000183c 	.word	0x2000183c

0800fc0c <__ssputs_r>:
 800fc0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fc10:	688e      	ldr	r6, [r1, #8]
 800fc12:	461f      	mov	r7, r3
 800fc14:	42be      	cmp	r6, r7
 800fc16:	680b      	ldr	r3, [r1, #0]
 800fc18:	4682      	mov	sl, r0
 800fc1a:	460c      	mov	r4, r1
 800fc1c:	4690      	mov	r8, r2
 800fc1e:	d82d      	bhi.n	800fc7c <__ssputs_r+0x70>
 800fc20:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fc24:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fc28:	d026      	beq.n	800fc78 <__ssputs_r+0x6c>
 800fc2a:	6965      	ldr	r5, [r4, #20]
 800fc2c:	6909      	ldr	r1, [r1, #16]
 800fc2e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fc32:	eba3 0901 	sub.w	r9, r3, r1
 800fc36:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fc3a:	1c7b      	adds	r3, r7, #1
 800fc3c:	444b      	add	r3, r9
 800fc3e:	106d      	asrs	r5, r5, #1
 800fc40:	429d      	cmp	r5, r3
 800fc42:	bf38      	it	cc
 800fc44:	461d      	movcc	r5, r3
 800fc46:	0553      	lsls	r3, r2, #21
 800fc48:	d527      	bpl.n	800fc9a <__ssputs_r+0x8e>
 800fc4a:	4629      	mov	r1, r5
 800fc4c:	f7ff fdd0 	bl	800f7f0 <_malloc_r>
 800fc50:	4606      	mov	r6, r0
 800fc52:	b360      	cbz	r0, 800fcae <__ssputs_r+0xa2>
 800fc54:	6921      	ldr	r1, [r4, #16]
 800fc56:	464a      	mov	r2, r9
 800fc58:	f7ff ff80 	bl	800fb5c <memcpy>
 800fc5c:	89a3      	ldrh	r3, [r4, #12]
 800fc5e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fc62:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc66:	81a3      	strh	r3, [r4, #12]
 800fc68:	6126      	str	r6, [r4, #16]
 800fc6a:	6165      	str	r5, [r4, #20]
 800fc6c:	444e      	add	r6, r9
 800fc6e:	eba5 0509 	sub.w	r5, r5, r9
 800fc72:	6026      	str	r6, [r4, #0]
 800fc74:	60a5      	str	r5, [r4, #8]
 800fc76:	463e      	mov	r6, r7
 800fc78:	42be      	cmp	r6, r7
 800fc7a:	d900      	bls.n	800fc7e <__ssputs_r+0x72>
 800fc7c:	463e      	mov	r6, r7
 800fc7e:	6820      	ldr	r0, [r4, #0]
 800fc80:	4632      	mov	r2, r6
 800fc82:	4641      	mov	r1, r8
 800fc84:	f000 faa8 	bl	80101d8 <memmove>
 800fc88:	68a3      	ldr	r3, [r4, #8]
 800fc8a:	1b9b      	subs	r3, r3, r6
 800fc8c:	60a3      	str	r3, [r4, #8]
 800fc8e:	6823      	ldr	r3, [r4, #0]
 800fc90:	4433      	add	r3, r6
 800fc92:	6023      	str	r3, [r4, #0]
 800fc94:	2000      	movs	r0, #0
 800fc96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc9a:	462a      	mov	r2, r5
 800fc9c:	f000 fab6 	bl	801020c <_realloc_r>
 800fca0:	4606      	mov	r6, r0
 800fca2:	2800      	cmp	r0, #0
 800fca4:	d1e0      	bne.n	800fc68 <__ssputs_r+0x5c>
 800fca6:	6921      	ldr	r1, [r4, #16]
 800fca8:	4650      	mov	r0, sl
 800fcaa:	f7ff ff65 	bl	800fb78 <_free_r>
 800fcae:	230c      	movs	r3, #12
 800fcb0:	f8ca 3000 	str.w	r3, [sl]
 800fcb4:	89a3      	ldrh	r3, [r4, #12]
 800fcb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fcba:	81a3      	strh	r3, [r4, #12]
 800fcbc:	f04f 30ff 	mov.w	r0, #4294967295
 800fcc0:	e7e9      	b.n	800fc96 <__ssputs_r+0x8a>
	...

0800fcc4 <_svfiprintf_r>:
 800fcc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fcc8:	4698      	mov	r8, r3
 800fcca:	898b      	ldrh	r3, [r1, #12]
 800fccc:	061b      	lsls	r3, r3, #24
 800fcce:	b09d      	sub	sp, #116	@ 0x74
 800fcd0:	4607      	mov	r7, r0
 800fcd2:	460d      	mov	r5, r1
 800fcd4:	4614      	mov	r4, r2
 800fcd6:	d510      	bpl.n	800fcfa <_svfiprintf_r+0x36>
 800fcd8:	690b      	ldr	r3, [r1, #16]
 800fcda:	b973      	cbnz	r3, 800fcfa <_svfiprintf_r+0x36>
 800fcdc:	2140      	movs	r1, #64	@ 0x40
 800fcde:	f7ff fd87 	bl	800f7f0 <_malloc_r>
 800fce2:	6028      	str	r0, [r5, #0]
 800fce4:	6128      	str	r0, [r5, #16]
 800fce6:	b930      	cbnz	r0, 800fcf6 <_svfiprintf_r+0x32>
 800fce8:	230c      	movs	r3, #12
 800fcea:	603b      	str	r3, [r7, #0]
 800fcec:	f04f 30ff 	mov.w	r0, #4294967295
 800fcf0:	b01d      	add	sp, #116	@ 0x74
 800fcf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fcf6:	2340      	movs	r3, #64	@ 0x40
 800fcf8:	616b      	str	r3, [r5, #20]
 800fcfa:	2300      	movs	r3, #0
 800fcfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800fcfe:	2320      	movs	r3, #32
 800fd00:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fd04:	f8cd 800c 	str.w	r8, [sp, #12]
 800fd08:	2330      	movs	r3, #48	@ 0x30
 800fd0a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800fea8 <_svfiprintf_r+0x1e4>
 800fd0e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fd12:	f04f 0901 	mov.w	r9, #1
 800fd16:	4623      	mov	r3, r4
 800fd18:	469a      	mov	sl, r3
 800fd1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fd1e:	b10a      	cbz	r2, 800fd24 <_svfiprintf_r+0x60>
 800fd20:	2a25      	cmp	r2, #37	@ 0x25
 800fd22:	d1f9      	bne.n	800fd18 <_svfiprintf_r+0x54>
 800fd24:	ebba 0b04 	subs.w	fp, sl, r4
 800fd28:	d00b      	beq.n	800fd42 <_svfiprintf_r+0x7e>
 800fd2a:	465b      	mov	r3, fp
 800fd2c:	4622      	mov	r2, r4
 800fd2e:	4629      	mov	r1, r5
 800fd30:	4638      	mov	r0, r7
 800fd32:	f7ff ff6b 	bl	800fc0c <__ssputs_r>
 800fd36:	3001      	adds	r0, #1
 800fd38:	f000 80a7 	beq.w	800fe8a <_svfiprintf_r+0x1c6>
 800fd3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fd3e:	445a      	add	r2, fp
 800fd40:	9209      	str	r2, [sp, #36]	@ 0x24
 800fd42:	f89a 3000 	ldrb.w	r3, [sl]
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	f000 809f 	beq.w	800fe8a <_svfiprintf_r+0x1c6>
 800fd4c:	2300      	movs	r3, #0
 800fd4e:	f04f 32ff 	mov.w	r2, #4294967295
 800fd52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fd56:	f10a 0a01 	add.w	sl, sl, #1
 800fd5a:	9304      	str	r3, [sp, #16]
 800fd5c:	9307      	str	r3, [sp, #28]
 800fd5e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fd62:	931a      	str	r3, [sp, #104]	@ 0x68
 800fd64:	4654      	mov	r4, sl
 800fd66:	2205      	movs	r2, #5
 800fd68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fd6c:	484e      	ldr	r0, [pc, #312]	@ (800fea8 <_svfiprintf_r+0x1e4>)
 800fd6e:	f7f0 fa3f 	bl	80001f0 <memchr>
 800fd72:	9a04      	ldr	r2, [sp, #16]
 800fd74:	b9d8      	cbnz	r0, 800fdae <_svfiprintf_r+0xea>
 800fd76:	06d0      	lsls	r0, r2, #27
 800fd78:	bf44      	itt	mi
 800fd7a:	2320      	movmi	r3, #32
 800fd7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd80:	0711      	lsls	r1, r2, #28
 800fd82:	bf44      	itt	mi
 800fd84:	232b      	movmi	r3, #43	@ 0x2b
 800fd86:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800fd8a:	f89a 3000 	ldrb.w	r3, [sl]
 800fd8e:	2b2a      	cmp	r3, #42	@ 0x2a
 800fd90:	d015      	beq.n	800fdbe <_svfiprintf_r+0xfa>
 800fd92:	9a07      	ldr	r2, [sp, #28]
 800fd94:	4654      	mov	r4, sl
 800fd96:	2000      	movs	r0, #0
 800fd98:	f04f 0c0a 	mov.w	ip, #10
 800fd9c:	4621      	mov	r1, r4
 800fd9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fda2:	3b30      	subs	r3, #48	@ 0x30
 800fda4:	2b09      	cmp	r3, #9
 800fda6:	d94b      	bls.n	800fe40 <_svfiprintf_r+0x17c>
 800fda8:	b1b0      	cbz	r0, 800fdd8 <_svfiprintf_r+0x114>
 800fdaa:	9207      	str	r2, [sp, #28]
 800fdac:	e014      	b.n	800fdd8 <_svfiprintf_r+0x114>
 800fdae:	eba0 0308 	sub.w	r3, r0, r8
 800fdb2:	fa09 f303 	lsl.w	r3, r9, r3
 800fdb6:	4313      	orrs	r3, r2
 800fdb8:	9304      	str	r3, [sp, #16]
 800fdba:	46a2      	mov	sl, r4
 800fdbc:	e7d2      	b.n	800fd64 <_svfiprintf_r+0xa0>
 800fdbe:	9b03      	ldr	r3, [sp, #12]
 800fdc0:	1d19      	adds	r1, r3, #4
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	9103      	str	r1, [sp, #12]
 800fdc6:	2b00      	cmp	r3, #0
 800fdc8:	bfbb      	ittet	lt
 800fdca:	425b      	neglt	r3, r3
 800fdcc:	f042 0202 	orrlt.w	r2, r2, #2
 800fdd0:	9307      	strge	r3, [sp, #28]
 800fdd2:	9307      	strlt	r3, [sp, #28]
 800fdd4:	bfb8      	it	lt
 800fdd6:	9204      	strlt	r2, [sp, #16]
 800fdd8:	7823      	ldrb	r3, [r4, #0]
 800fdda:	2b2e      	cmp	r3, #46	@ 0x2e
 800fddc:	d10a      	bne.n	800fdf4 <_svfiprintf_r+0x130>
 800fdde:	7863      	ldrb	r3, [r4, #1]
 800fde0:	2b2a      	cmp	r3, #42	@ 0x2a
 800fde2:	d132      	bne.n	800fe4a <_svfiprintf_r+0x186>
 800fde4:	9b03      	ldr	r3, [sp, #12]
 800fde6:	1d1a      	adds	r2, r3, #4
 800fde8:	681b      	ldr	r3, [r3, #0]
 800fdea:	9203      	str	r2, [sp, #12]
 800fdec:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800fdf0:	3402      	adds	r4, #2
 800fdf2:	9305      	str	r3, [sp, #20]
 800fdf4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800feb8 <_svfiprintf_r+0x1f4>
 800fdf8:	7821      	ldrb	r1, [r4, #0]
 800fdfa:	2203      	movs	r2, #3
 800fdfc:	4650      	mov	r0, sl
 800fdfe:	f7f0 f9f7 	bl	80001f0 <memchr>
 800fe02:	b138      	cbz	r0, 800fe14 <_svfiprintf_r+0x150>
 800fe04:	9b04      	ldr	r3, [sp, #16]
 800fe06:	eba0 000a 	sub.w	r0, r0, sl
 800fe0a:	2240      	movs	r2, #64	@ 0x40
 800fe0c:	4082      	lsls	r2, r0
 800fe0e:	4313      	orrs	r3, r2
 800fe10:	3401      	adds	r4, #1
 800fe12:	9304      	str	r3, [sp, #16]
 800fe14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fe18:	4824      	ldr	r0, [pc, #144]	@ (800feac <_svfiprintf_r+0x1e8>)
 800fe1a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800fe1e:	2206      	movs	r2, #6
 800fe20:	f7f0 f9e6 	bl	80001f0 <memchr>
 800fe24:	2800      	cmp	r0, #0
 800fe26:	d036      	beq.n	800fe96 <_svfiprintf_r+0x1d2>
 800fe28:	4b21      	ldr	r3, [pc, #132]	@ (800feb0 <_svfiprintf_r+0x1ec>)
 800fe2a:	bb1b      	cbnz	r3, 800fe74 <_svfiprintf_r+0x1b0>
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	3307      	adds	r3, #7
 800fe30:	f023 0307 	bic.w	r3, r3, #7
 800fe34:	3308      	adds	r3, #8
 800fe36:	9303      	str	r3, [sp, #12]
 800fe38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fe3a:	4433      	add	r3, r6
 800fe3c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe3e:	e76a      	b.n	800fd16 <_svfiprintf_r+0x52>
 800fe40:	fb0c 3202 	mla	r2, ip, r2, r3
 800fe44:	460c      	mov	r4, r1
 800fe46:	2001      	movs	r0, #1
 800fe48:	e7a8      	b.n	800fd9c <_svfiprintf_r+0xd8>
 800fe4a:	2300      	movs	r3, #0
 800fe4c:	3401      	adds	r4, #1
 800fe4e:	9305      	str	r3, [sp, #20]
 800fe50:	4619      	mov	r1, r3
 800fe52:	f04f 0c0a 	mov.w	ip, #10
 800fe56:	4620      	mov	r0, r4
 800fe58:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fe5c:	3a30      	subs	r2, #48	@ 0x30
 800fe5e:	2a09      	cmp	r2, #9
 800fe60:	d903      	bls.n	800fe6a <_svfiprintf_r+0x1a6>
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d0c6      	beq.n	800fdf4 <_svfiprintf_r+0x130>
 800fe66:	9105      	str	r1, [sp, #20]
 800fe68:	e7c4      	b.n	800fdf4 <_svfiprintf_r+0x130>
 800fe6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fe6e:	4604      	mov	r4, r0
 800fe70:	2301      	movs	r3, #1
 800fe72:	e7f0      	b.n	800fe56 <_svfiprintf_r+0x192>
 800fe74:	ab03      	add	r3, sp, #12
 800fe76:	9300      	str	r3, [sp, #0]
 800fe78:	462a      	mov	r2, r5
 800fe7a:	4b0e      	ldr	r3, [pc, #56]	@ (800feb4 <_svfiprintf_r+0x1f0>)
 800fe7c:	a904      	add	r1, sp, #16
 800fe7e:	4638      	mov	r0, r7
 800fe80:	f3af 8000 	nop.w
 800fe84:	1c42      	adds	r2, r0, #1
 800fe86:	4606      	mov	r6, r0
 800fe88:	d1d6      	bne.n	800fe38 <_svfiprintf_r+0x174>
 800fe8a:	89ab      	ldrh	r3, [r5, #12]
 800fe8c:	065b      	lsls	r3, r3, #25
 800fe8e:	f53f af2d 	bmi.w	800fcec <_svfiprintf_r+0x28>
 800fe92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800fe94:	e72c      	b.n	800fcf0 <_svfiprintf_r+0x2c>
 800fe96:	ab03      	add	r3, sp, #12
 800fe98:	9300      	str	r3, [sp, #0]
 800fe9a:	462a      	mov	r2, r5
 800fe9c:	4b05      	ldr	r3, [pc, #20]	@ (800feb4 <_svfiprintf_r+0x1f0>)
 800fe9e:	a904      	add	r1, sp, #16
 800fea0:	4638      	mov	r0, r7
 800fea2:	f000 f879 	bl	800ff98 <_printf_i>
 800fea6:	e7ed      	b.n	800fe84 <_svfiprintf_r+0x1c0>
 800fea8:	08017eb9 	.word	0x08017eb9
 800feac:	08017ec3 	.word	0x08017ec3
 800feb0:	00000000 	.word	0x00000000
 800feb4:	0800fc0d 	.word	0x0800fc0d
 800feb8:	08017ebf 	.word	0x08017ebf
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

080101bc <memmove>:
 80101bc:	4288      	cmp	r0, r1
 80101be:	b510      	push	{r4, lr}
 80101c0:	eb01 0402 	add.w	r4, r1, r2
 80101c4:	d902      	bls.n	80101cc <memmove+0x10>
 80101c6:	4284      	cmp	r4, r0
 80101c8:	4623      	mov	r3, r4
 80101ca:	d807      	bhi.n	80101dc <memmove+0x20>
 80101cc:	1e43      	subs	r3, r0, #1
 80101ce:	42a1      	cmp	r1, r4
 80101d0:	d008      	beq.n	80101e4 <memmove+0x28>
 80101d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80101d6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80101da:	e7f8      	b.n	80101ce <memmove+0x12>
 80101dc:	4402      	add	r2, r0
 80101de:	4601      	mov	r1, r0
 80101e0:	428a      	cmp	r2, r1
 80101e2:	d100      	bne.n	80101e6 <memmove+0x2a>
 80101e4:	bd10      	pop	{r4, pc}
 80101e6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80101ea:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80101ee:	e7f7      	b.n	80101e0 <memmove+0x24>

<<<<<<< HEAD
080101f0 <_realloc_r>:
 80101f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80101f4:	4607      	mov	r7, r0
 80101f6:	4614      	mov	r4, r2
 80101f8:	460d      	mov	r5, r1
 80101fa:	b921      	cbnz	r1, 8010206 <_realloc_r+0x16>
 80101fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010200:	4611      	mov	r1, r2
 8010202:	f7ff bae7 	b.w	800f7d4 <_malloc_r>
 8010206:	b92a      	cbnz	r2, 8010214 <_realloc_r+0x24>
 8010208:	f7ff fcaa 	bl	800fb60 <_free_r>
 801020c:	4625      	mov	r5, r4
 801020e:	4628      	mov	r0, r5
 8010210:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010214:	f000 f81a 	bl	801024c <_malloc_usable_size_r>
 8010218:	4284      	cmp	r4, r0
 801021a:	4606      	mov	r6, r0
 801021c:	d802      	bhi.n	8010224 <_realloc_r+0x34>
 801021e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010222:	d8f4      	bhi.n	801020e <_realloc_r+0x1e>
 8010224:	4621      	mov	r1, r4
 8010226:	4638      	mov	r0, r7
 8010228:	f7ff fad4 	bl	800f7d4 <_malloc_r>
 801022c:	4680      	mov	r8, r0
 801022e:	b908      	cbnz	r0, 8010234 <_realloc_r+0x44>
 8010230:	4645      	mov	r5, r8
 8010232:	e7ec      	b.n	801020e <_realloc_r+0x1e>
 8010234:	42b4      	cmp	r4, r6
 8010236:	4622      	mov	r2, r4
 8010238:	4629      	mov	r1, r5
 801023a:	bf28      	it	cs
 801023c:	4632      	movcs	r2, r6
 801023e:	f7ff fc81 	bl	800fb44 <memcpy>
 8010242:	4629      	mov	r1, r5
 8010244:	4638      	mov	r0, r7
 8010246:	f7ff fc8b 	bl	800fb60 <_free_r>
 801024a:	e7f1      	b.n	8010230 <_realloc_r+0x40>
=======
0800ff98 <_printf_i>:
 800ff98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ff9c:	7e0f      	ldrb	r7, [r1, #24]
 800ff9e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ffa0:	2f78      	cmp	r7, #120	@ 0x78
 800ffa2:	4691      	mov	r9, r2
 800ffa4:	4680      	mov	r8, r0
 800ffa6:	460c      	mov	r4, r1
 800ffa8:	469a      	mov	sl, r3
 800ffaa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ffae:	d807      	bhi.n	800ffc0 <_printf_i+0x28>
 800ffb0:	2f62      	cmp	r7, #98	@ 0x62
 800ffb2:	d80a      	bhi.n	800ffca <_printf_i+0x32>
 800ffb4:	2f00      	cmp	r7, #0
 800ffb6:	f000 80d2 	beq.w	801015e <_printf_i+0x1c6>
 800ffba:	2f58      	cmp	r7, #88	@ 0x58
 800ffbc:	f000 80b9 	beq.w	8010132 <_printf_i+0x19a>
 800ffc0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ffc4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ffc8:	e03a      	b.n	8010040 <_printf_i+0xa8>
 800ffca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ffce:	2b15      	cmp	r3, #21
 800ffd0:	d8f6      	bhi.n	800ffc0 <_printf_i+0x28>
 800ffd2:	a101      	add	r1, pc, #4	@ (adr r1, 800ffd8 <_printf_i+0x40>)
 800ffd4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ffd8:	08010031 	.word	0x08010031
 800ffdc:	08010045 	.word	0x08010045
 800ffe0:	0800ffc1 	.word	0x0800ffc1
 800ffe4:	0800ffc1 	.word	0x0800ffc1
 800ffe8:	0800ffc1 	.word	0x0800ffc1
 800ffec:	0800ffc1 	.word	0x0800ffc1
 800fff0:	08010045 	.word	0x08010045
 800fff4:	0800ffc1 	.word	0x0800ffc1
 800fff8:	0800ffc1 	.word	0x0800ffc1
 800fffc:	0800ffc1 	.word	0x0800ffc1
 8010000:	0800ffc1 	.word	0x0800ffc1
 8010004:	08010145 	.word	0x08010145
 8010008:	0801006f 	.word	0x0801006f
 801000c:	080100ff 	.word	0x080100ff
 8010010:	0800ffc1 	.word	0x0800ffc1
 8010014:	0800ffc1 	.word	0x0800ffc1
 8010018:	08010167 	.word	0x08010167
 801001c:	0800ffc1 	.word	0x0800ffc1
 8010020:	0801006f 	.word	0x0801006f
 8010024:	0800ffc1 	.word	0x0800ffc1
 8010028:	0800ffc1 	.word	0x0800ffc1
 801002c:	08010107 	.word	0x08010107
 8010030:	6833      	ldr	r3, [r6, #0]
 8010032:	1d1a      	adds	r2, r3, #4
 8010034:	681b      	ldr	r3, [r3, #0]
 8010036:	6032      	str	r2, [r6, #0]
 8010038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801003c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010040:	2301      	movs	r3, #1
 8010042:	e09d      	b.n	8010180 <_printf_i+0x1e8>
 8010044:	6833      	ldr	r3, [r6, #0]
 8010046:	6820      	ldr	r0, [r4, #0]
 8010048:	1d19      	adds	r1, r3, #4
 801004a:	6031      	str	r1, [r6, #0]
 801004c:	0606      	lsls	r6, r0, #24
 801004e:	d501      	bpl.n	8010054 <_printf_i+0xbc>
 8010050:	681d      	ldr	r5, [r3, #0]
 8010052:	e003      	b.n	801005c <_printf_i+0xc4>
 8010054:	0645      	lsls	r5, r0, #25
 8010056:	d5fb      	bpl.n	8010050 <_printf_i+0xb8>
 8010058:	f9b3 5000 	ldrsh.w	r5, [r3]
 801005c:	2d00      	cmp	r5, #0
 801005e:	da03      	bge.n	8010068 <_printf_i+0xd0>
 8010060:	232d      	movs	r3, #45	@ 0x2d
 8010062:	426d      	negs	r5, r5
 8010064:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010068:	4859      	ldr	r0, [pc, #356]	@ (80101d0 <_printf_i+0x238>)
 801006a:	230a      	movs	r3, #10
 801006c:	e011      	b.n	8010092 <_printf_i+0xfa>
 801006e:	6821      	ldr	r1, [r4, #0]
 8010070:	6833      	ldr	r3, [r6, #0]
 8010072:	0608      	lsls	r0, r1, #24
 8010074:	f853 5b04 	ldr.w	r5, [r3], #4
 8010078:	d402      	bmi.n	8010080 <_printf_i+0xe8>
 801007a:	0649      	lsls	r1, r1, #25
 801007c:	bf48      	it	mi
 801007e:	b2ad      	uxthmi	r5, r5
 8010080:	2f6f      	cmp	r7, #111	@ 0x6f
 8010082:	4853      	ldr	r0, [pc, #332]	@ (80101d0 <_printf_i+0x238>)
 8010084:	6033      	str	r3, [r6, #0]
 8010086:	bf14      	ite	ne
 8010088:	230a      	movne	r3, #10
 801008a:	2308      	moveq	r3, #8
 801008c:	2100      	movs	r1, #0
 801008e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010092:	6866      	ldr	r6, [r4, #4]
 8010094:	60a6      	str	r6, [r4, #8]
 8010096:	2e00      	cmp	r6, #0
 8010098:	bfa2      	ittt	ge
 801009a:	6821      	ldrge	r1, [r4, #0]
 801009c:	f021 0104 	bicge.w	r1, r1, #4
 80100a0:	6021      	strge	r1, [r4, #0]
 80100a2:	b90d      	cbnz	r5, 80100a8 <_printf_i+0x110>
 80100a4:	2e00      	cmp	r6, #0
 80100a6:	d04b      	beq.n	8010140 <_printf_i+0x1a8>
 80100a8:	4616      	mov	r6, r2
 80100aa:	fbb5 f1f3 	udiv	r1, r5, r3
 80100ae:	fb03 5711 	mls	r7, r3, r1, r5
 80100b2:	5dc7      	ldrb	r7, [r0, r7]
 80100b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80100b8:	462f      	mov	r7, r5
 80100ba:	42bb      	cmp	r3, r7
 80100bc:	460d      	mov	r5, r1
 80100be:	d9f4      	bls.n	80100aa <_printf_i+0x112>
 80100c0:	2b08      	cmp	r3, #8
 80100c2:	d10b      	bne.n	80100dc <_printf_i+0x144>
 80100c4:	6823      	ldr	r3, [r4, #0]
 80100c6:	07df      	lsls	r7, r3, #31
 80100c8:	d508      	bpl.n	80100dc <_printf_i+0x144>
 80100ca:	6923      	ldr	r3, [r4, #16]
 80100cc:	6861      	ldr	r1, [r4, #4]
 80100ce:	4299      	cmp	r1, r3
 80100d0:	bfde      	ittt	le
 80100d2:	2330      	movle	r3, #48	@ 0x30
 80100d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80100d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80100dc:	1b92      	subs	r2, r2, r6
 80100de:	6122      	str	r2, [r4, #16]
 80100e0:	f8cd a000 	str.w	sl, [sp]
 80100e4:	464b      	mov	r3, r9
 80100e6:	aa03      	add	r2, sp, #12
 80100e8:	4621      	mov	r1, r4
 80100ea:	4640      	mov	r0, r8
 80100ec:	f7ff fee6 	bl	800febc <_printf_common>
 80100f0:	3001      	adds	r0, #1
 80100f2:	d14a      	bne.n	801018a <_printf_i+0x1f2>
 80100f4:	f04f 30ff 	mov.w	r0, #4294967295
 80100f8:	b004      	add	sp, #16
 80100fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100fe:	6823      	ldr	r3, [r4, #0]
 8010100:	f043 0320 	orr.w	r3, r3, #32
 8010104:	6023      	str	r3, [r4, #0]
 8010106:	4833      	ldr	r0, [pc, #204]	@ (80101d4 <_printf_i+0x23c>)
 8010108:	2778      	movs	r7, #120	@ 0x78
 801010a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801010e:	6823      	ldr	r3, [r4, #0]
 8010110:	6831      	ldr	r1, [r6, #0]
 8010112:	061f      	lsls	r7, r3, #24
 8010114:	f851 5b04 	ldr.w	r5, [r1], #4
 8010118:	d402      	bmi.n	8010120 <_printf_i+0x188>
 801011a:	065f      	lsls	r7, r3, #25
 801011c:	bf48      	it	mi
 801011e:	b2ad      	uxthmi	r5, r5
 8010120:	6031      	str	r1, [r6, #0]
 8010122:	07d9      	lsls	r1, r3, #31
 8010124:	bf44      	itt	mi
 8010126:	f043 0320 	orrmi.w	r3, r3, #32
 801012a:	6023      	strmi	r3, [r4, #0]
 801012c:	b11d      	cbz	r5, 8010136 <_printf_i+0x19e>
 801012e:	2310      	movs	r3, #16
 8010130:	e7ac      	b.n	801008c <_printf_i+0xf4>
 8010132:	4827      	ldr	r0, [pc, #156]	@ (80101d0 <_printf_i+0x238>)
 8010134:	e7e9      	b.n	801010a <_printf_i+0x172>
 8010136:	6823      	ldr	r3, [r4, #0]
 8010138:	f023 0320 	bic.w	r3, r3, #32
 801013c:	6023      	str	r3, [r4, #0]
 801013e:	e7f6      	b.n	801012e <_printf_i+0x196>
 8010140:	4616      	mov	r6, r2
 8010142:	e7bd      	b.n	80100c0 <_printf_i+0x128>
 8010144:	6833      	ldr	r3, [r6, #0]
 8010146:	6825      	ldr	r5, [r4, #0]
 8010148:	6961      	ldr	r1, [r4, #20]
 801014a:	1d18      	adds	r0, r3, #4
 801014c:	6030      	str	r0, [r6, #0]
 801014e:	062e      	lsls	r6, r5, #24
 8010150:	681b      	ldr	r3, [r3, #0]
 8010152:	d501      	bpl.n	8010158 <_printf_i+0x1c0>
 8010154:	6019      	str	r1, [r3, #0]
 8010156:	e002      	b.n	801015e <_printf_i+0x1c6>
 8010158:	0668      	lsls	r0, r5, #25
 801015a:	d5fb      	bpl.n	8010154 <_printf_i+0x1bc>
 801015c:	8019      	strh	r1, [r3, #0]
 801015e:	2300      	movs	r3, #0
 8010160:	6123      	str	r3, [r4, #16]
 8010162:	4616      	mov	r6, r2
 8010164:	e7bc      	b.n	80100e0 <_printf_i+0x148>
 8010166:	6833      	ldr	r3, [r6, #0]
 8010168:	1d1a      	adds	r2, r3, #4
 801016a:	6032      	str	r2, [r6, #0]
 801016c:	681e      	ldr	r6, [r3, #0]
 801016e:	6862      	ldr	r2, [r4, #4]
 8010170:	2100      	movs	r1, #0
 8010172:	4630      	mov	r0, r6
 8010174:	f7f0 f83c 	bl	80001f0 <memchr>
 8010178:	b108      	cbz	r0, 801017e <_printf_i+0x1e6>
 801017a:	1b80      	subs	r0, r0, r6
 801017c:	6060      	str	r0, [r4, #4]
 801017e:	6863      	ldr	r3, [r4, #4]
 8010180:	6123      	str	r3, [r4, #16]
 8010182:	2300      	movs	r3, #0
 8010184:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8010188:	e7aa      	b.n	80100e0 <_printf_i+0x148>
 801018a:	6923      	ldr	r3, [r4, #16]
 801018c:	4632      	mov	r2, r6
 801018e:	4649      	mov	r1, r9
 8010190:	4640      	mov	r0, r8
 8010192:	47d0      	blx	sl
 8010194:	3001      	adds	r0, #1
 8010196:	d0ad      	beq.n	80100f4 <_printf_i+0x15c>
 8010198:	6823      	ldr	r3, [r4, #0]
 801019a:	079b      	lsls	r3, r3, #30
 801019c:	d413      	bmi.n	80101c6 <_printf_i+0x22e>
 801019e:	68e0      	ldr	r0, [r4, #12]
 80101a0:	9b03      	ldr	r3, [sp, #12]
 80101a2:	4298      	cmp	r0, r3
 80101a4:	bfb8      	it	lt
 80101a6:	4618      	movlt	r0, r3
 80101a8:	e7a6      	b.n	80100f8 <_printf_i+0x160>
 80101aa:	2301      	movs	r3, #1
 80101ac:	4632      	mov	r2, r6
 80101ae:	4649      	mov	r1, r9
 80101b0:	4640      	mov	r0, r8
 80101b2:	47d0      	blx	sl
 80101b4:	3001      	adds	r0, #1
 80101b6:	d09d      	beq.n	80100f4 <_printf_i+0x15c>
 80101b8:	3501      	adds	r5, #1
 80101ba:	68e3      	ldr	r3, [r4, #12]
 80101bc:	9903      	ldr	r1, [sp, #12]
 80101be:	1a5b      	subs	r3, r3, r1
 80101c0:	42ab      	cmp	r3, r5
 80101c2:	dcf2      	bgt.n	80101aa <_printf_i+0x212>
 80101c4:	e7eb      	b.n	801019e <_printf_i+0x206>
 80101c6:	2500      	movs	r5, #0
 80101c8:	f104 0619 	add.w	r6, r4, #25
 80101cc:	e7f5      	b.n	80101ba <_printf_i+0x222>
 80101ce:	bf00      	nop
 80101d0:	08017eca 	.word	0x08017eca
 80101d4:	08017edb 	.word	0x08017edb
>>>>>>> 077d995dd96f008800e51a124ac7966a93523b37

0801024c <_malloc_usable_size_r>:
 801024c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010250:	1f18      	subs	r0, r3, #4
 8010252:	2b00      	cmp	r3, #0
 8010254:	bfbc      	itt	lt
 8010256:	580b      	ldrlt	r3, [r1, r0]
 8010258:	18c0      	addlt	r0, r0, r3
 801025a:	4770      	bx	lr

0801025c <_init>:
 801025c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801025e:	bf00      	nop
 8010260:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010262:	bc08      	pop	{r3}
 8010264:	469e      	mov	lr, r3
 8010266:	4770      	bx	lr

08010268 <_fini>:
 8010268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801026a:	bf00      	nop
 801026c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801026e:	bc08      	pop	{r3}
 8010270:	469e      	mov	lr, r3
 8010272:	4770      	bx	lr
