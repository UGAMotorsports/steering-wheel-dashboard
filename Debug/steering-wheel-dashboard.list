
steering-wheel-dashboard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fc04  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007bd4  0800fda4  0800fda4  00010da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017978  08017978  00019184  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08017978  08017978  00018978  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017980  08017980  00019184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   0000000c  08017980  08017980  00018980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801798c  0801798c  0001898c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000184  20000000  08017990  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000184  08017b14  00019184  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001958  08017b14  00019958  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00019184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023bfa  00000000  00000000  000191b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005f65  00000000  00000000  0003cdae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d90  00000000  00000000  00042d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001674  00000000  00000000  00044aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205fd  00000000  00000000  0004611c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000254f5  00000000  00000000  00066719  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ad2b  00000000  00000000  0008bc0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00126939  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000080f4  00000000  00000000  0012697c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  0012ea70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000184 	.word	0x20000184
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800fd8c 	.word	0x0800fd8c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000188 	.word	0x20000188
 80001dc:	0800fd8c 	.word	0x0800fd8c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_DMA_Init+0x68>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a16      	ldr	r2, [pc, #88]	@ (8000624 <MX_DMA_Init+0x68>)
 80005cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b14      	ldr	r3, [pc, #80]	@ (8000624 <MX_DMA_Init+0x68>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80005da:	607b      	str	r3, [r7, #4]
 80005dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
 80005e2:	4b10      	ldr	r3, [pc, #64]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000624 <MX_DMA_Init+0x68>)
 80005e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80005ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000624 <MX_DMA_Init+0x68>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80005f6:	603b      	str	r3, [r7, #0]
 80005f8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2100      	movs	r1, #0
 80005fe:	200b      	movs	r0, #11
 8000600:	f004 f805 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000604:	200b      	movs	r0, #11
 8000606:	f004 f81e 	bl	8004646 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 0, 0);
 800060a:	2200      	movs	r2, #0
 800060c:	2100      	movs	r1, #0
 800060e:	203b      	movs	r0, #59	@ 0x3b
 8000610:	f003 fffd 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000614:	203b      	movs	r0, #59	@ 0x3b
 8000616:	f004 f816 	bl	8004646 <HAL_NVIC_EnableIRQ>

}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40023800 	.word	0x40023800

08000628 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	2101      	movs	r1, #1
 8000630:	4803      	ldr	r0, [pc, #12]	@ (8000640 <SELECT+0x18>)
 8000632:	f004 fd39 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000636:	2001      	movs	r0, #1
 8000638:	f003 feea 	bl	8004410 <HAL_Delay>
}
 800063c:	bf00      	nop
 800063e:	bd80      	pop	{r7, pc}
 8000640:	40020400 	.word	0x40020400

08000644 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000648:	2201      	movs	r2, #1
 800064a:	2101      	movs	r1, #1
 800064c:	4803      	ldr	r0, [pc, #12]	@ (800065c <DESELECT+0x18>)
 800064e:	f004 fd2b 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000652:	2001      	movs	r0, #1
 8000654:	f003 fedc 	bl	8004410 <HAL_Delay>
}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020400 	.word	0x40020400

08000660 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800066a:	bf00      	nop
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <SPI_TxByte+0x30>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	689b      	ldr	r3, [r3, #8]
 8000672:	f003 0302 	and.w	r3, r3, #2
 8000676:	2b02      	cmp	r3, #2
 8000678:	d1f8      	bne.n	800066c <SPI_TxByte+0xc>
	HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 800067a:	1df9      	adds	r1, r7, #7
 800067c:	2364      	movs	r3, #100	@ 0x64
 800067e:	2201      	movs	r2, #1
 8000680:	4803      	ldr	r0, [pc, #12]	@ (8000690 <SPI_TxByte+0x30>)
 8000682:	f006 fc4e 	bl	8006f22 <HAL_SPI_Transmit>
}
 8000686:	bf00      	nop
 8000688:	3708      	adds	r7, #8
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	20000214 	.word	0x20000214

08000694 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b082      	sub	sp, #8
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
 800069c:	460b      	mov	r3, r1
 800069e:	807b      	strh	r3, [r7, #2]
	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006a0:	bf00      	nop
 80006a2:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	689b      	ldr	r3, [r3, #8]
 80006a8:	f003 0302 	and.w	r3, r3, #2
 80006ac:	2b02      	cmp	r3, #2
 80006ae:	d1f8      	bne.n	80006a2 <SPI_TxBuffer+0xe>
	HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 80006b0:	887a      	ldrh	r2, [r7, #2]
 80006b2:	2364      	movs	r3, #100	@ 0x64
 80006b4:	6879      	ldr	r1, [r7, #4]
 80006b6:	4803      	ldr	r0, [pc, #12]	@ (80006c4 <SPI_TxBuffer+0x30>)
 80006b8:	f006 fc33 	bl	8006f22 <HAL_SPI_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000214 	.word	0x20000214

080006c8 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af02      	add	r7, sp, #8
	uint8_t dummy, data;
	dummy = 0xFF;
 80006ce:	23ff      	movs	r3, #255	@ 0xff
 80006d0:	71fb      	strb	r3, [r7, #7]

	while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80006d2:	bf00      	nop
 80006d4:	4b09      	ldr	r3, [pc, #36]	@ (80006fc <SPI_RxByte+0x34>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	689b      	ldr	r3, [r3, #8]
 80006da:	f003 0302 	and.w	r3, r3, #2
 80006de:	2b02      	cmp	r3, #2
 80006e0:	d1f8      	bne.n	80006d4 <SPI_RxByte+0xc>
	HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 80006e2:	1dba      	adds	r2, r7, #6
 80006e4:	1df9      	adds	r1, r7, #7
 80006e6:	2364      	movs	r3, #100	@ 0x64
 80006e8:	9300      	str	r3, [sp, #0]
 80006ea:	2301      	movs	r3, #1
 80006ec:	4803      	ldr	r0, [pc, #12]	@ (80006fc <SPI_RxByte+0x34>)
 80006ee:	f006 fe75 	bl	80073dc <HAL_SPI_TransmitReceive>

	return data;
 80006f2:	79bb      	ldrb	r3, [r7, #6]
}
 80006f4:	4618      	mov	r0, r3
 80006f6:	3708      	adds	r7, #8
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000214 	.word	0x20000214

08000700 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	*buff = SPI_RxByte();
 8000708:	f7ff ffde 	bl	80006c8 <SPI_RxByte>
 800070c:	4603      	mov	r3, r0
 800070e:	461a      	mov	r2, r3
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	701a      	strb	r2, [r3, #0]
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
	uint8_t res;

	/* timeout 500ms */
	Timer2 = 500;
 8000722:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <SD_ReadyWait+0x30>)
 8000724:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000728:	801a      	strh	r2, [r3, #0]

	/* if SD goes ready, receives 0xFF */
	do {
		res = SPI_RxByte();
 800072a:	f7ff ffcd 	bl	80006c8 <SPI_RxByte>
 800072e:	4603      	mov	r3, r0
 8000730:	71fb      	strb	r3, [r7, #7]
	} while ((res != 0xFF) && Timer2);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	2bff      	cmp	r3, #255	@ 0xff
 8000736:	d003      	beq.n	8000740 <SD_ReadyWait+0x24>
 8000738:	4b04      	ldr	r3, [pc, #16]	@ (800074c <SD_ReadyWait+0x30>)
 800073a:	881b      	ldrh	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d1f4      	bne.n	800072a <SD_ReadyWait+0xe>

	return res;
 8000740:	79fb      	ldrb	r3, [r7, #7]
}
 8000742:	4618      	mov	r0, r3
 8000744:	3708      	adds	r7, #8
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	200001a2 	.word	0x200001a2

08000750 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void) 
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b084      	sub	sp, #16
 8000754:	af00      	add	r7, sp, #0
	uint8_t args[6];
	uint32_t cnt = 0x1FFF;
 8000756:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 800075a:	60fb      	str	r3, [r7, #12]

	/* transmit bytes to wake up */
	DESELECT();
 800075c:	f7ff ff72 	bl	8000644 <DESELECT>
	for(int i = 0; i < 10; i++)
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
 8000764:	e005      	b.n	8000772 <SD_PowerOn+0x22>
	{
		SPI_TxByte(0xFF);
 8000766:	20ff      	movs	r0, #255	@ 0xff
 8000768:	f7ff ff7a 	bl	8000660 <SPI_TxByte>
	for(int i = 0; i < 10; i++)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	3301      	adds	r3, #1
 8000770:	60bb      	str	r3, [r7, #8]
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	2b09      	cmp	r3, #9
 8000776:	ddf6      	ble.n	8000766 <SD_PowerOn+0x16>
	}

	/* slave select */
	SELECT();
 8000778:	f7ff ff56 	bl	8000628 <SELECT>

	/* make idle state */
	args[0] = CMD0;		/* CMD0:GO_IDLE_STATE */
 800077c:	2340      	movs	r3, #64	@ 0x40
 800077e:	703b      	strb	r3, [r7, #0]
	args[1] = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	707b      	strb	r3, [r7, #1]
	args[2] = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	70bb      	strb	r3, [r7, #2]
	args[3] = 0;
 8000788:	2300      	movs	r3, #0
 800078a:	70fb      	strb	r3, [r7, #3]
	args[4] = 0;
 800078c:	2300      	movs	r3, #0
 800078e:	713b      	strb	r3, [r7, #4]
	args[5] = 0x95;		/* CRC */
 8000790:	2395      	movs	r3, #149	@ 0x95
 8000792:	717b      	strb	r3, [r7, #5]

	SPI_TxBuffer(args, sizeof(args));
 8000794:	463b      	mov	r3, r7
 8000796:	2106      	movs	r1, #6
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff7b 	bl	8000694 <SPI_TxBuffer>

	/* wait response */
	while ((SPI_RxByte() != 0x01) && cnt)
 800079e:	e002      	b.n	80007a6 <SD_PowerOn+0x56>
	{
		cnt--;
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	3b01      	subs	r3, #1
 80007a4:	60fb      	str	r3, [r7, #12]
	while ((SPI_RxByte() != 0x01) && cnt)
 80007a6:	f7ff ff8f 	bl	80006c8 <SPI_RxByte>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b01      	cmp	r3, #1
 80007ae:	d002      	beq.n	80007b6 <SD_PowerOn+0x66>
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d1f4      	bne.n	80007a0 <SD_PowerOn+0x50>
	}

	DESELECT();
 80007b6:	f7ff ff45 	bl	8000644 <DESELECT>
	SPI_TxByte(0XFF);
 80007ba:	20ff      	movs	r0, #255	@ 0xff
 80007bc:	f7ff ff50 	bl	8000660 <SPI_TxByte>

	PowerFlag = 1;
 80007c0:	4b03      	ldr	r3, [pc, #12]	@ (80007d0 <SD_PowerOn+0x80>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
}
 80007c6:	bf00      	nop
 80007c8:	3710      	adds	r7, #16
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	200001a5 	.word	0x200001a5

080007d4 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void) 
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
	PowerFlag = 0;
 80007d8:	4b03      	ldr	r3, [pc, #12]	@ (80007e8 <SD_PowerOff+0x14>)
 80007da:	2200      	movs	r2, #0
 80007dc:	701a      	strb	r2, [r3, #0]
}
 80007de:	bf00      	nop
 80007e0:	46bd      	mov	sp, r7
 80007e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e6:	4770      	bx	lr
 80007e8:	200001a5 	.word	0x200001a5

080007ec <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void) 
{
 80007ec:	b480      	push	{r7}
 80007ee:	af00      	add	r7, sp, #0
	return PowerFlag;
 80007f0:	4b03      	ldr	r3, [pc, #12]	@ (8000800 <SD_CheckPower+0x14>)
 80007f2:	781b      	ldrb	r3, [r3, #0]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr
 80007fe:	bf00      	nop
 8000800:	200001a5 	.word	0x200001a5

08000804 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
 800080c:	6039      	str	r1, [r7, #0]
	uint8_t token;

	/* timeout 200ms */
	Timer1 = 200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <SD_RxDataBlock+0x58>)
 8000810:	22c8      	movs	r2, #200	@ 0xc8
 8000812:	801a      	strh	r2, [r3, #0]

	/* loop until receive a response or timeout */
	do {
		token = SPI_RxByte();
 8000814:	f7ff ff58 	bl	80006c8 <SPI_RxByte>
 8000818:	4603      	mov	r3, r0
 800081a:	73fb      	strb	r3, [r7, #15]
	} while((token == 0xFF) && Timer1);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2bff      	cmp	r3, #255	@ 0xff
 8000820:	d103      	bne.n	800082a <SD_RxDataBlock+0x26>
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <SD_RxDataBlock+0x58>)
 8000824:	881b      	ldrh	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d1f4      	bne.n	8000814 <SD_RxDataBlock+0x10>

	/* invalid response */
	if(token != 0xFE) return FALSE;
 800082a:	7bfb      	ldrb	r3, [r7, #15]
 800082c:	2bfe      	cmp	r3, #254	@ 0xfe
 800082e:	d001      	beq.n	8000834 <SD_RxDataBlock+0x30>
 8000830:	2300      	movs	r3, #0
 8000832:	e00f      	b.n	8000854 <SD_RxDataBlock+0x50>

	/* receive data */
	do {
		SPI_RxBytePtr(buff++);
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	1c5a      	adds	r2, r3, #1
 8000838:	607a      	str	r2, [r7, #4]
 800083a:	4618      	mov	r0, r3
 800083c:	f7ff ff60 	bl	8000700 <SPI_RxBytePtr>
	} while(len--);
 8000840:	683b      	ldr	r3, [r7, #0]
 8000842:	1e5a      	subs	r2, r3, #1
 8000844:	603a      	str	r2, [r7, #0]
 8000846:	2b00      	cmp	r3, #0
 8000848:	d1f4      	bne.n	8000834 <SD_RxDataBlock+0x30>

	/* discard CRC */
	SPI_RxByte();
 800084a:	f7ff ff3d 	bl	80006c8 <SPI_RxByte>
	SPI_RxByte();
 800084e:	f7ff ff3b 	bl	80006c8 <SPI_RxByte>

	return TRUE;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3710      	adds	r7, #16
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	200001a0 	.word	0x200001a0

08000860 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
 8000868:	460b      	mov	r3, r1
 800086a:	70fb      	strb	r3, [r7, #3]
	uint8_t resp;
	uint8_t i = 0;
 800086c:	2300      	movs	r3, #0
 800086e:	73bb      	strb	r3, [r7, #14]

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return FALSE;
 8000870:	f7ff ff54 	bl	800071c <SD_ReadyWait>
 8000874:	4603      	mov	r3, r0
 8000876:	2bff      	cmp	r3, #255	@ 0xff
 8000878:	d001      	beq.n	800087e <SD_TxDataBlock+0x1e>
 800087a:	2300      	movs	r3, #0
 800087c:	e02f      	b.n	80008de <SD_TxDataBlock+0x7e>

	/* transmit token */
	SPI_TxByte(token);
 800087e:	78fb      	ldrb	r3, [r7, #3]
 8000880:	4618      	mov	r0, r3
 8000882:	f7ff feed 	bl	8000660 <SPI_TxByte>

	/* if it's not STOP token, transmit data */
	if (token != 0xFD)
 8000886:	78fb      	ldrb	r3, [r7, #3]
 8000888:	2bfd      	cmp	r3, #253	@ 0xfd
 800088a:	d020      	beq.n	80008ce <SD_TxDataBlock+0x6e>
	{
		SPI_TxBuffer((uint8_t*)buff, 512);
 800088c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff feff 	bl	8000694 <SPI_TxBuffer>

		/* discard CRC */
		SPI_RxByte();
 8000896:	f7ff ff17 	bl	80006c8 <SPI_RxByte>
		SPI_RxByte();
 800089a:	f7ff ff15 	bl	80006c8 <SPI_RxByte>

		/* receive response */
		while (i <= 64)
 800089e:	e00b      	b.n	80008b8 <SD_TxDataBlock+0x58>
		{
			resp = SPI_RxByte();
 80008a0:	f7ff ff12 	bl	80006c8 <SPI_RxByte>
 80008a4:	4603      	mov	r3, r0
 80008a6:	73fb      	strb	r3, [r7, #15]

			/* transmit 0x05 accepted */
			if ((resp & 0x1F) == 0x05) break;
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	f003 031f 	and.w	r3, r3, #31
 80008ae:	2b05      	cmp	r3, #5
 80008b0:	d006      	beq.n	80008c0 <SD_TxDataBlock+0x60>
			i++;
 80008b2:	7bbb      	ldrb	r3, [r7, #14]
 80008b4:	3301      	adds	r3, #1
 80008b6:	73bb      	strb	r3, [r7, #14]
		while (i <= 64)
 80008b8:	7bbb      	ldrb	r3, [r7, #14]
 80008ba:	2b40      	cmp	r3, #64	@ 0x40
 80008bc:	d9f0      	bls.n	80008a0 <SD_TxDataBlock+0x40>
 80008be:	e000      	b.n	80008c2 <SD_TxDataBlock+0x62>
			if ((resp & 0x1F) == 0x05) break;
 80008c0:	bf00      	nop
		}

		/* recv buffer clear */
		while (SPI_RxByte() == 0);
 80008c2:	bf00      	nop
 80008c4:	f7ff ff00 	bl	80006c8 <SPI_RxByte>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d0fa      	beq.n	80008c4 <SD_TxDataBlock+0x64>
	}

	/* transmit 0x05 accepted */
	if ((resp & 0x1F) == 0x05) return TRUE;
 80008ce:	7bfb      	ldrb	r3, [r7, #15]
 80008d0:	f003 031f 	and.w	r3, r3, #31
 80008d4:	2b05      	cmp	r3, #5
 80008d6:	d101      	bne.n	80008dc <SD_TxDataBlock+0x7c>
 80008d8:	2301      	movs	r3, #1
 80008da:	e000      	b.n	80008de <SD_TxDataBlock+0x7e>

	return FALSE;
 80008dc:	2300      	movs	r3, #0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}

080008e6 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 80008e6:	b580      	push	{r7, lr}
 80008e8:	b084      	sub	sp, #16
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	4603      	mov	r3, r0
 80008ee:	6039      	str	r1, [r7, #0]
 80008f0:	71fb      	strb	r3, [r7, #7]
	uint8_t crc, res;

	/* wait SD ready */
	if (SD_ReadyWait() != 0xFF) return 0xFF;
 80008f2:	f7ff ff13 	bl	800071c <SD_ReadyWait>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2bff      	cmp	r3, #255	@ 0xff
 80008fa:	d001      	beq.n	8000900 <SD_SendCmd+0x1a>
 80008fc:	23ff      	movs	r3, #255	@ 0xff
 80008fe:	e042      	b.n	8000986 <SD_SendCmd+0xa0>

	/* transmit command */
	SPI_TxByte(cmd); 					/* Command */
 8000900:	79fb      	ldrb	r3, [r7, #7]
 8000902:	4618      	mov	r0, r3
 8000904:	f7ff feac 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 24)); 	/* Argument[31..24] */
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	0e1b      	lsrs	r3, r3, #24
 800090c:	b2db      	uxtb	r3, r3
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff fea6 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 16)); 	/* Argument[23..16] */
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	0c1b      	lsrs	r3, r3, #16
 8000918:	b2db      	uxtb	r3, r3
 800091a:	4618      	mov	r0, r3
 800091c:	f7ff fea0 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)(arg >> 8)); 	/* Argument[15..8] */
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	0a1b      	lsrs	r3, r3, #8
 8000924:	b2db      	uxtb	r3, r3
 8000926:	4618      	mov	r0, r3
 8000928:	f7ff fe9a 	bl	8000660 <SPI_TxByte>
	SPI_TxByte((uint8_t)arg); 			/* Argument[7..0] */
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	b2db      	uxtb	r3, r3
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff fe95 	bl	8000660 <SPI_TxByte>

	/* prepare CRC */
	if(cmd == CMD0) crc = 0x95;	/* CRC for CMD0(0) */
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	2b40      	cmp	r3, #64	@ 0x40
 800093a:	d102      	bne.n	8000942 <SD_SendCmd+0x5c>
 800093c:	2395      	movs	r3, #149	@ 0x95
 800093e:	73fb      	strb	r3, [r7, #15]
 8000940:	e007      	b.n	8000952 <SD_SendCmd+0x6c>
	else if(cmd == CMD8) crc = 0x87;	/* CRC for CMD8(0x1AA) */
 8000942:	79fb      	ldrb	r3, [r7, #7]
 8000944:	2b48      	cmp	r3, #72	@ 0x48
 8000946:	d102      	bne.n	800094e <SD_SendCmd+0x68>
 8000948:	2387      	movs	r3, #135	@ 0x87
 800094a:	73fb      	strb	r3, [r7, #15]
 800094c:	e001      	b.n	8000952 <SD_SendCmd+0x6c>
	else crc = 1;
 800094e:	2301      	movs	r3, #1
 8000950:	73fb      	strb	r3, [r7, #15]

	/* transmit CRC */
	SPI_TxByte(crc);
 8000952:	7bfb      	ldrb	r3, [r7, #15]
 8000954:	4618      	mov	r0, r3
 8000956:	f7ff fe83 	bl	8000660 <SPI_TxByte>

	/* Skip a stuff byte when STOP_TRANSMISSION */
	if (cmd == CMD12) SPI_RxByte();
 800095a:	79fb      	ldrb	r3, [r7, #7]
 800095c:	2b4c      	cmp	r3, #76	@ 0x4c
 800095e:	d101      	bne.n	8000964 <SD_SendCmd+0x7e>
 8000960:	f7ff feb2 	bl	80006c8 <SPI_RxByte>

	/* receive response */
	uint8_t n = 10;
 8000964:	230a      	movs	r3, #10
 8000966:	73bb      	strb	r3, [r7, #14]
	do {
		res = SPI_RxByte();
 8000968:	f7ff feae 	bl	80006c8 <SPI_RxByte>
 800096c:	4603      	mov	r3, r0
 800096e:	737b      	strb	r3, [r7, #13]
	} while ((res & 0x80) && --n);
 8000970:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000974:	2b00      	cmp	r3, #0
 8000976:	da05      	bge.n	8000984 <SD_SendCmd+0x9e>
 8000978:	7bbb      	ldrb	r3, [r7, #14]
 800097a:	3b01      	subs	r3, #1
 800097c:	73bb      	strb	r3, [r7, #14]
 800097e:	7bbb      	ldrb	r3, [r7, #14]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d1f1      	bne.n	8000968 <SD_SendCmd+0x82>

	return res;
 8000984:	7b7b      	ldrb	r3, [r7, #13]
}
 8000986:	4618      	mov	r0, r3
 8000988:	3710      	adds	r7, #16
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
	...

08000990 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8000990:	b590      	push	{r4, r7, lr}
 8000992:	b085      	sub	sp, #20
 8000994:	af00      	add	r7, sp, #0
 8000996:	4603      	mov	r3, r0
 8000998:	71fb      	strb	r3, [r7, #7]
	uint8_t n, type, ocr[4];

	/* single drive, drv should be 0 */
	if(drv) return STA_NOINIT;
 800099a:	79fb      	ldrb	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <SD_disk_initialize+0x14>
 80009a0:	2301      	movs	r3, #1
 80009a2:	e0d1      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* no disk */
	if(Stat & STA_NODISK) return Stat;
 80009a4:	4b6a      	ldr	r3, [pc, #424]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b2db      	uxtb	r3, r3
 80009aa:	f003 0302 	and.w	r3, r3, #2
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d003      	beq.n	80009ba <SD_disk_initialize+0x2a>
 80009b2:	4b67      	ldr	r3, [pc, #412]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	e0c6      	b.n	8000b48 <SD_disk_initialize+0x1b8>

	/* power on */
	SD_PowerOn();
 80009ba:	f7ff fec9 	bl	8000750 <SD_PowerOn>

	/* slave select */
	SELECT();
 80009be:	f7ff fe33 	bl	8000628 <SELECT>

	/* check disk type */
	type = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	73bb      	strb	r3, [r7, #14]

	/* send GO_IDLE_STATE command */
	if (SD_SendCmd(CMD0, 0) == 1)
 80009c6:	2100      	movs	r1, #0
 80009c8:	2040      	movs	r0, #64	@ 0x40
 80009ca:	f7ff ff8c 	bl	80008e6 <SD_SendCmd>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b01      	cmp	r3, #1
 80009d2:	f040 80a1 	bne.w	8000b18 <SD_disk_initialize+0x188>
	{
		/* timeout 1 sec */
		Timer1 = 1000;
 80009d6:	4b5f      	ldr	r3, [pc, #380]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 80009d8:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80009dc:	801a      	strh	r2, [r3, #0]

		/* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
		if (SD_SendCmd(CMD8, 0x1AA) == 1)
 80009de:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 80009e2:	2048      	movs	r0, #72	@ 0x48
 80009e4:	f7ff ff7f 	bl	80008e6 <SD_SendCmd>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b01      	cmp	r3, #1
 80009ec:	d155      	bne.n	8000a9a <SD_disk_initialize+0x10a>
		{
			/* operation condition register */
			for (n = 0; n < 4; n++)
 80009ee:	2300      	movs	r3, #0
 80009f0:	73fb      	strb	r3, [r7, #15]
 80009f2:	e00c      	b.n	8000a0e <SD_disk_initialize+0x7e>
			{
				ocr[n] = SPI_RxByte();
 80009f4:	7bfc      	ldrb	r4, [r7, #15]
 80009f6:	f7ff fe67 	bl	80006c8 <SPI_RxByte>
 80009fa:	4603      	mov	r3, r0
 80009fc:	461a      	mov	r2, r3
 80009fe:	f104 0310 	add.w	r3, r4, #16
 8000a02:	443b      	add	r3, r7
 8000a04:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8000a08:	7bfb      	ldrb	r3, [r7, #15]
 8000a0a:	3301      	adds	r3, #1
 8000a0c:	73fb      	strb	r3, [r7, #15]
 8000a0e:	7bfb      	ldrb	r3, [r7, #15]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	d9ef      	bls.n	80009f4 <SD_disk_initialize+0x64>
			}

			/* voltage range 2.7-3.6V */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000a14:	7abb      	ldrb	r3, [r7, #10]
 8000a16:	2b01      	cmp	r3, #1
 8000a18:	d17e      	bne.n	8000b18 <SD_disk_initialize+0x188>
 8000a1a:	7afb      	ldrb	r3, [r7, #11]
 8000a1c:	2baa      	cmp	r3, #170	@ 0xaa
 8000a1e:	d17b      	bne.n	8000b18 <SD_disk_initialize+0x188>
			{
				/* ACMD41 with HCS bit */
				do {
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a20:	2100      	movs	r1, #0
 8000a22:	2077      	movs	r0, #119	@ 0x77
 8000a24:	f7ff ff5f 	bl	80008e6 <SD_SendCmd>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d807      	bhi.n	8000a3e <SD_disk_initialize+0xae>
 8000a2e:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000a32:	2069      	movs	r0, #105	@ 0x69
 8000a34:	f7ff ff57 	bl	80008e6 <SD_SendCmd>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d004      	beq.n	8000a48 <SD_disk_initialize+0xb8>
				} while (Timer1);
 8000a3e:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a40:	881b      	ldrh	r3, [r3, #0]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d1ec      	bne.n	8000a20 <SD_disk_initialize+0x90>
 8000a46:	e000      	b.n	8000a4a <SD_disk_initialize+0xba>
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000a48:	bf00      	nop

				/* READ_OCR */
				if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000a4a:	4b42      	ldr	r3, [pc, #264]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000a4c:	881b      	ldrh	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d062      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000a52:	2100      	movs	r1, #0
 8000a54:	207a      	movs	r0, #122	@ 0x7a
 8000a56:	f7ff ff46 	bl	80008e6 <SD_SendCmd>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d15b      	bne.n	8000b18 <SD_disk_initialize+0x188>
				{
					/* Check CCS bit */
					for (n = 0; n < 4; n++)
 8000a60:	2300      	movs	r3, #0
 8000a62:	73fb      	strb	r3, [r7, #15]
 8000a64:	e00c      	b.n	8000a80 <SD_disk_initialize+0xf0>
					{
						ocr[n] = SPI_RxByte();
 8000a66:	7bfc      	ldrb	r4, [r7, #15]
 8000a68:	f7ff fe2e 	bl	80006c8 <SPI_RxByte>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	461a      	mov	r2, r3
 8000a70:	f104 0310 	add.w	r3, r4, #16
 8000a74:	443b      	add	r3, r7
 8000a76:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
 8000a7c:	3301      	adds	r3, #1
 8000a7e:	73fb      	strb	r3, [r7, #15]
 8000a80:	7bfb      	ldrb	r3, [r7, #15]
 8000a82:	2b03      	cmp	r3, #3
 8000a84:	d9ef      	bls.n	8000a66 <SD_disk_initialize+0xd6>
					}

					/* SDv2 (HC or SC) */
					type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8000a86:	7a3b      	ldrb	r3, [r7, #8]
 8000a88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <SD_disk_initialize+0x104>
 8000a90:	230c      	movs	r3, #12
 8000a92:	e000      	b.n	8000a96 <SD_disk_initialize+0x106>
 8000a94:	2304      	movs	r3, #4
 8000a96:	73bb      	strb	r3, [r7, #14]
 8000a98:	e03e      	b.n	8000b18 <SD_disk_initialize+0x188>
			}
		}
		else
		{
			/* SDC V1 or MMC */
			type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	2077      	movs	r0, #119	@ 0x77
 8000a9e:	f7ff ff22 	bl	80008e6 <SD_SendCmd>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d808      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2069      	movs	r0, #105	@ 0x69
 8000aac:	f7ff ff1b 	bl	80008e6 <SD_SendCmd>
 8000ab0:	4603      	mov	r3, r0
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d801      	bhi.n	8000aba <SD_disk_initialize+0x12a>
 8000ab6:	2302      	movs	r3, #2
 8000ab8:	e000      	b.n	8000abc <SD_disk_initialize+0x12c>
 8000aba:	2301      	movs	r3, #1
 8000abc:	73bb      	strb	r3, [r7, #14]

			do
			{
				if (type == CT_SD1)
 8000abe:	7bbb      	ldrb	r3, [r7, #14]
 8000ac0:	2b02      	cmp	r3, #2
 8000ac2:	d10e      	bne.n	8000ae2 <SD_disk_initialize+0x152>
				{
					if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	2077      	movs	r0, #119	@ 0x77
 8000ac8:	f7ff ff0d 	bl	80008e6 <SD_SendCmd>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d80e      	bhi.n	8000af0 <SD_disk_initialize+0x160>
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	2069      	movs	r0, #105	@ 0x69
 8000ad6:	f7ff ff06 	bl	80008e6 <SD_SendCmd>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d107      	bne.n	8000af0 <SD_disk_initialize+0x160>
 8000ae0:	e00c      	b.n	8000afc <SD_disk_initialize+0x16c>
				}
				else
				{
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2041      	movs	r0, #65	@ 0x41
 8000ae6:	f7ff fefe 	bl	80008e6 <SD_SendCmd>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d004      	beq.n	8000afa <SD_disk_initialize+0x16a>
				}

			} while (Timer1);
 8000af0:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d1e2      	bne.n	8000abe <SD_disk_initialize+0x12e>
 8000af8:	e000      	b.n	8000afc <SD_disk_initialize+0x16c>
					if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000afa:	bf00      	nop

			/* SET_BLOCKLEN */
			if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000afc:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <SD_disk_initialize+0x1c4>)
 8000afe:	881b      	ldrh	r3, [r3, #0]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d007      	beq.n	8000b14 <SD_disk_initialize+0x184>
 8000b04:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b08:	2050      	movs	r0, #80	@ 0x50
 8000b0a:	f7ff feec 	bl	80008e6 <SD_SendCmd>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SD_disk_initialize+0x188>
 8000b14:	2300      	movs	r3, #0
 8000b16:	73bb      	strb	r3, [r7, #14]
		}
	}

	CardType = type;
 8000b18:	4a0f      	ldr	r2, [pc, #60]	@ (8000b58 <SD_disk_initialize+0x1c8>)
 8000b1a:	7bbb      	ldrb	r3, [r7, #14]
 8000b1c:	7013      	strb	r3, [r2, #0]

	/* Idle */
	DESELECT();
 8000b1e:	f7ff fd91 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000b22:	f7ff fdd1 	bl	80006c8 <SPI_RxByte>

	/* Clear STA_NOINIT */
	if (type)
 8000b26:	7bbb      	ldrb	r3, [r7, #14]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d008      	beq.n	8000b3e <SD_disk_initialize+0x1ae>
	{
		Stat &= ~STA_NOINIT;
 8000b2c:	4b08      	ldr	r3, [pc, #32]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f023 0301 	bic.w	r3, r3, #1
 8000b36:	b2da      	uxtb	r2, r3
 8000b38:	4b05      	ldr	r3, [pc, #20]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e001      	b.n	8000b42 <SD_disk_initialize+0x1b2>
	}
	else
	{
		/* Initialization failed */
		SD_PowerOff();
 8000b3e:	f7ff fe49 	bl	80007d4 <SD_PowerOff>
	}

	return Stat;
 8000b42:	4b03      	ldr	r3, [pc, #12]	@ (8000b50 <SD_disk_initialize+0x1c0>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	b2db      	uxtb	r3, r3
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3714      	adds	r7, #20
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd90      	pop	{r4, r7, pc}
 8000b50:	20000000 	.word	0x20000000
 8000b54:	200001a0 	.word	0x200001a0
 8000b58:	200001a4 	.word	0x200001a4

08000b5c <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv) 
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	4603      	mov	r3, r0
 8000b64:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <SD_disk_status+0x14>
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	e002      	b.n	8000b76 <SD_disk_status+0x1a>
	return Stat;
 8000b70:	4b04      	ldr	r3, [pc, #16]	@ (8000b84 <SD_disk_status+0x28>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	b2db      	uxtb	r3, r3
}
 8000b76:	4618      	mov	r0, r3
 8000b78:	370c      	adds	r7, #12
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b80:	4770      	bx	lr
 8000b82:	bf00      	nop
 8000b84:	20000000 	.word	0x20000000

08000b88 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	603b      	str	r3, [r7, #0]
 8000b94:	4603      	mov	r3, r0
 8000b96:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000b98:	7bfb      	ldrb	r3, [r7, #15]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d102      	bne.n	8000ba4 <SD_disk_read+0x1c>
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <SD_disk_read+0x20>
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	e051      	b.n	8000c4c <SD_disk_read+0xc4>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000ba8:	4b2a      	ldr	r3, [pc, #168]	@ (8000c54 <SD_disk_read+0xcc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	b2db      	uxtb	r3, r3
 8000bae:	f003 0301 	and.w	r3, r3, #1
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SD_disk_read+0x32>
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	e048      	b.n	8000c4c <SD_disk_read+0xc4>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000bba:	4b27      	ldr	r3, [pc, #156]	@ (8000c58 <SD_disk_read+0xd0>)
 8000bbc:	781b      	ldrb	r3, [r3, #0]
 8000bbe:	f003 0304 	and.w	r3, r3, #4
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d102      	bne.n	8000bcc <SD_disk_read+0x44>
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	025b      	lsls	r3, r3, #9
 8000bca:	607b      	str	r3, [r7, #4]

	SELECT();
 8000bcc:	f7ff fd2c 	bl	8000628 <SELECT>

	if (count == 1)
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d111      	bne.n	8000bfa <SD_disk_read+0x72>
	{
		/* READ_SINGLE_BLOCK */
		if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f7ff fe84 	bl	80008e6 <SD_SendCmd>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d129      	bne.n	8000c38 <SD_disk_read+0xb0>
 8000be4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000be8:	68b8      	ldr	r0, [r7, #8]
 8000bea:	f7ff fe0b 	bl	8000804 <SD_RxDataBlock>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d021      	beq.n	8000c38 <SD_disk_read+0xb0>
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	603b      	str	r3, [r7, #0]
 8000bf8:	e01e      	b.n	8000c38 <SD_disk_read+0xb0>
	}
	else
	{
		/* READ_MULTIPLE_BLOCK */
		if (SD_SendCmd(CMD18, sector) == 0)
 8000bfa:	6879      	ldr	r1, [r7, #4]
 8000bfc:	2052      	movs	r0, #82	@ 0x52
 8000bfe:	f7ff fe72 	bl	80008e6 <SD_SendCmd>
 8000c02:	4603      	mov	r3, r0
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d117      	bne.n	8000c38 <SD_disk_read+0xb0>
		{
			do {
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c0c:	68b8      	ldr	r0, [r7, #8]
 8000c0e:	f7ff fdf9 	bl	8000804 <SD_RxDataBlock>
 8000c12:	4603      	mov	r3, r0
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d00a      	beq.n	8000c2e <SD_disk_read+0xa6>
				buff += 512;
 8000c18:	68bb      	ldr	r3, [r7, #8]
 8000c1a:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c1e:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	3b01      	subs	r3, #1
 8000c24:	603b      	str	r3, [r7, #0]
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d1ed      	bne.n	8000c08 <SD_disk_read+0x80>
 8000c2c:	e000      	b.n	8000c30 <SD_disk_read+0xa8>
				if (!SD_RxDataBlock(buff, 512)) break;
 8000c2e:	bf00      	nop

			/* STOP_TRANSMISSION */
			SD_SendCmd(CMD12, 0);
 8000c30:	2100      	movs	r1, #0
 8000c32:	204c      	movs	r0, #76	@ 0x4c
 8000c34:	f7ff fe57 	bl	80008e6 <SD_SendCmd>
		}
	}

	/* Idle */
	DESELECT();
 8000c38:	f7ff fd04 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000c3c:	f7ff fd44 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	bf14      	ite	ne
 8000c46:	2301      	movne	r3, #1
 8000c48:	2300      	moveq	r3, #0
 8000c4a:	b2db      	uxtb	r3, r3
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3710      	adds	r7, #16
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	20000000 	.word	0x20000000
 8000c58:	200001a4 	.word	0x200001a4

08000c5c <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	60b9      	str	r1, [r7, #8]
 8000c64:	607a      	str	r2, [r7, #4]
 8000c66:	603b      	str	r3, [r7, #0]
 8000c68:	4603      	mov	r3, r0
 8000c6a:	73fb      	strb	r3, [r7, #15]
	/* pdrv should be 0 */
	if (pdrv || !count) return RES_PARERR;
 8000c6c:	7bfb      	ldrb	r3, [r7, #15]
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d102      	bne.n	8000c78 <SD_disk_write+0x1c>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d101      	bne.n	8000c7c <SD_disk_write+0x20>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	e06b      	b.n	8000d54 <SD_disk_write+0xf8>

	/* no disk */
	if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000c7c:	4b37      	ldr	r3, [pc, #220]	@ (8000d5c <SD_disk_write+0x100>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	b2db      	uxtb	r3, r3
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d001      	beq.n	8000c8e <SD_disk_write+0x32>
 8000c8a:	2303      	movs	r3, #3
 8000c8c:	e062      	b.n	8000d54 <SD_disk_write+0xf8>

	/* write protection */
	if (Stat & STA_PROTECT) return RES_WRPRT;
 8000c8e:	4b33      	ldr	r3, [pc, #204]	@ (8000d5c <SD_disk_write+0x100>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	f003 0304 	and.w	r3, r3, #4
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SD_disk_write+0x44>
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	e059      	b.n	8000d54 <SD_disk_write+0xf8>

	/* convert to byte address */
	if (!(CardType & CT_SD2)) sector *= 512;
 8000ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8000d60 <SD_disk_write+0x104>)
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	f003 0304 	and.w	r3, r3, #4
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d102      	bne.n	8000cb2 <SD_disk_write+0x56>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	025b      	lsls	r3, r3, #9
 8000cb0:	607b      	str	r3, [r7, #4]

	SELECT();
 8000cb2:	f7ff fcb9 	bl	8000628 <SELECT>

	if (count == 1)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b01      	cmp	r3, #1
 8000cba:	d110      	bne.n	8000cde <SD_disk_write+0x82>
	{
		/* WRITE_BLOCK */
		if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000cbc:	6879      	ldr	r1, [r7, #4]
 8000cbe:	2058      	movs	r0, #88	@ 0x58
 8000cc0:	f7ff fe11 	bl	80008e6 <SD_SendCmd>
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d13a      	bne.n	8000d40 <SD_disk_write+0xe4>
 8000cca:	21fe      	movs	r1, #254	@ 0xfe
 8000ccc:	68b8      	ldr	r0, [r7, #8]
 8000cce:	f7ff fdc7 	bl	8000860 <SD_TxDataBlock>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d033      	beq.n	8000d40 <SD_disk_write+0xe4>
			count = 0;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	603b      	str	r3, [r7, #0]
 8000cdc:	e030      	b.n	8000d40 <SD_disk_write+0xe4>
	}
	else
	{
		/* WRITE_MULTIPLE_BLOCK */
		if (CardType & CT_SD1)
 8000cde:	4b20      	ldr	r3, [pc, #128]	@ (8000d60 <SD_disk_write+0x104>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d007      	beq.n	8000cfa <SD_disk_write+0x9e>
		{
			SD_SendCmd(CMD55, 0);
 8000cea:	2100      	movs	r1, #0
 8000cec:	2077      	movs	r0, #119	@ 0x77
 8000cee:	f7ff fdfa 	bl	80008e6 <SD_SendCmd>
			SD_SendCmd(CMD23, count); /* ACMD23 */
 8000cf2:	6839      	ldr	r1, [r7, #0]
 8000cf4:	2057      	movs	r0, #87	@ 0x57
 8000cf6:	f7ff fdf6 	bl	80008e6 <SD_SendCmd>
		}

		if (SD_SendCmd(CMD25, sector) == 0)
 8000cfa:	6879      	ldr	r1, [r7, #4]
 8000cfc:	2059      	movs	r0, #89	@ 0x59
 8000cfe:	f7ff fdf2 	bl	80008e6 <SD_SendCmd>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <SD_disk_write+0xe4>
		{
			do {
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d08:	21fc      	movs	r1, #252	@ 0xfc
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff fda8 	bl	8000860 <SD_TxDataBlock>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d00a      	beq.n	8000d2c <SD_disk_write+0xd0>
				buff += 512;
 8000d16:	68bb      	ldr	r3, [r7, #8]
 8000d18:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000d1c:	60bb      	str	r3, [r7, #8]
			} while (--count);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	603b      	str	r3, [r7, #0]
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d1ee      	bne.n	8000d08 <SD_disk_write+0xac>
 8000d2a:	e000      	b.n	8000d2e <SD_disk_write+0xd2>
				if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000d2c:	bf00      	nop

			/* STOP_TRAN token */
			if(!SD_TxDataBlock(0, 0xFD))
 8000d2e:	21fd      	movs	r1, #253	@ 0xfd
 8000d30:	2000      	movs	r0, #0
 8000d32:	f7ff fd95 	bl	8000860 <SD_TxDataBlock>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d101      	bne.n	8000d40 <SD_disk_write+0xe4>
			{
				count = 1;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	603b      	str	r3, [r7, #0]
			}
		}
	}

	/* Idle */
	DESELECT();
 8000d40:	f7ff fc80 	bl	8000644 <DESELECT>
	SPI_RxByte();
 8000d44:	f7ff fcc0 	bl	80006c8 <SPI_RxByte>

	return count ? RES_ERROR : RES_OK;
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	bf14      	ite	ne
 8000d4e:	2301      	movne	r3, #1
 8000d50:	2300      	moveq	r3, #0
 8000d52:	b2db      	uxtb	r3, r3
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	3710      	adds	r7, #16
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	20000000 	.word	0x20000000
 8000d60:	200001a4 	.word	0x200001a4

08000d64 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b08b      	sub	sp, #44	@ 0x2c
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	603a      	str	r2, [r7, #0]
 8000d6e:	71fb      	strb	r3, [r7, #7]
 8000d70:	460b      	mov	r3, r1
 8000d72:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	uint8_t n, csd[16], *ptr = buff;
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	623b      	str	r3, [r7, #32]
	WORD csize;

	/* pdrv should be 0 */
	if (drv) return RES_PARERR;
 8000d78:	79fb      	ldrb	r3, [r7, #7]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <SD_disk_ioctl+0x1e>
 8000d7e:	2304      	movs	r3, #4
 8000d80:	e113      	b.n	8000faa <SD_disk_ioctl+0x246>
	res = RES_ERROR;
 8000d82:	2301      	movs	r3, #1
 8000d84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	if (ctrl == CTRL_POWER)
 8000d88:	79bb      	ldrb	r3, [r7, #6]
 8000d8a:	2b05      	cmp	r3, #5
 8000d8c:	d124      	bne.n	8000dd8 <SD_disk_ioctl+0x74>
	{
		switch (*ptr)
 8000d8e:	6a3b      	ldr	r3, [r7, #32]
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d012      	beq.n	8000dbc <SD_disk_ioctl+0x58>
 8000d96:	2b02      	cmp	r3, #2
 8000d98:	dc1a      	bgt.n	8000dd0 <SD_disk_ioctl+0x6c>
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d002      	beq.n	8000da4 <SD_disk_ioctl+0x40>
 8000d9e:	2b01      	cmp	r3, #1
 8000da0:	d006      	beq.n	8000db0 <SD_disk_ioctl+0x4c>
 8000da2:	e015      	b.n	8000dd0 <SD_disk_ioctl+0x6c>
		{
		case 0:
			SD_PowerOff();		/* Power Off */
 8000da4:	f7ff fd16 	bl	80007d4 <SD_PowerOff>
			res = RES_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dae:	e0fa      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 1:
			SD_PowerOn();		/* Power On */
 8000db0:	f7ff fcce 	bl	8000750 <SD_PowerOn>
			res = RES_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dba:	e0f4      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		case 2:
			*(ptr + 1) = SD_CheckPower();
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	1c5c      	adds	r4, r3, #1
 8000dc0:	f7ff fd14 	bl	80007ec <SD_CheckPower>
 8000dc4:	4603      	mov	r3, r0
 8000dc6:	7023      	strb	r3, [r4, #0]
			res = RES_OK;		/* Power Check */
 8000dc8:	2300      	movs	r3, #0
 8000dca:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000dce:	e0ea      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		default:
			res = RES_PARERR;
 8000dd0:	2304      	movs	r3, #4
 8000dd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000dd6:	e0e6      	b.n	8000fa6 <SD_disk_ioctl+0x242>
		}
	}
	else
	{
		/* no disk */
		if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000dd8:	4b76      	ldr	r3, [pc, #472]	@ (8000fb4 <SD_disk_ioctl+0x250>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	b2db      	uxtb	r3, r3
 8000dde:	f003 0301 	and.w	r3, r3, #1
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SD_disk_ioctl+0x86>
 8000de6:	2303      	movs	r3, #3
 8000de8:	e0df      	b.n	8000faa <SD_disk_ioctl+0x246>

		SELECT();
 8000dea:	f7ff fc1d 	bl	8000628 <SELECT>

		switch (ctrl)
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	2b0d      	cmp	r3, #13
 8000df2:	f200 80c9 	bhi.w	8000f88 <SD_disk_ioctl+0x224>
 8000df6:	a201      	add	r2, pc, #4	@ (adr r2, 8000dfc <SD_disk_ioctl+0x98>)
 8000df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000dfc:	08000ef3 	.word	0x08000ef3
 8000e00:	08000e35 	.word	0x08000e35
 8000e04:	08000ee3 	.word	0x08000ee3
 8000e08:	08000f89 	.word	0x08000f89
 8000e0c:	08000f89 	.word	0x08000f89
 8000e10:	08000f89 	.word	0x08000f89
 8000e14:	08000f89 	.word	0x08000f89
 8000e18:	08000f89 	.word	0x08000f89
 8000e1c:	08000f89 	.word	0x08000f89
 8000e20:	08000f89 	.word	0x08000f89
 8000e24:	08000f89 	.word	0x08000f89
 8000e28:	08000f05 	.word	0x08000f05
 8000e2c:	08000f29 	.word	0x08000f29
 8000e30:	08000f4d 	.word	0x08000f4d
		{
		case GET_SECTOR_COUNT:
			/* SEND_CSD */
			if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000e34:	2100      	movs	r1, #0
 8000e36:	2049      	movs	r0, #73	@ 0x49
 8000e38:	f7ff fd55 	bl	80008e6 <SD_SendCmd>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	f040 80a6 	bne.w	8000f90 <SD_disk_ioctl+0x22c>
 8000e44:	f107 030c 	add.w	r3, r7, #12
 8000e48:	2110      	movs	r1, #16
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f7ff fcda 	bl	8000804 <SD_RxDataBlock>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	f000 809c 	beq.w	8000f90 <SD_disk_ioctl+0x22c>
			{
				if ((csd[0] >> 6) == 1)
 8000e58:	7b3b      	ldrb	r3, [r7, #12]
 8000e5a:	099b      	lsrs	r3, r3, #6
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d10d      	bne.n	8000e7e <SD_disk_ioctl+0x11a>
				{
					/* SDC V2 */
					csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000e62:	7d7b      	ldrb	r3, [r7, #21]
 8000e64:	461a      	mov	r2, r3
 8000e66:	7d3b      	ldrb	r3, [r7, #20]
 8000e68:	021b      	lsls	r3, r3, #8
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	4413      	add	r3, r2
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3301      	adds	r3, #1
 8000e72:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << 10;
 8000e74:	8bfb      	ldrh	r3, [r7, #30]
 8000e76:	029a      	lsls	r2, r3, #10
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	e02d      	b.n	8000eda <SD_disk_ioctl+0x176>
				}
				else
				{
					/* MMC or SDC V1 */
					n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000e7e:	7c7b      	ldrb	r3, [r7, #17]
 8000e80:	f003 030f 	and.w	r3, r3, #15
 8000e84:	b2da      	uxtb	r2, r3
 8000e86:	7dbb      	ldrb	r3, [r7, #22]
 8000e88:	09db      	lsrs	r3, r3, #7
 8000e8a:	b2db      	uxtb	r3, r3
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b2da      	uxtb	r2, r3
 8000e90:	7d7b      	ldrb	r3, [r7, #21]
 8000e92:	005b      	lsls	r3, r3, #1
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0306 	and.w	r3, r3, #6
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4413      	add	r3, r2
 8000e9e:	b2db      	uxtb	r3, r3
 8000ea0:	3302      	adds	r3, #2
 8000ea2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
					csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000ea6:	7d3b      	ldrb	r3, [r7, #20]
 8000ea8:	099b      	lsrs	r3, r3, #6
 8000eaa:	b2db      	uxtb	r3, r3
 8000eac:	461a      	mov	r2, r3
 8000eae:	7cfb      	ldrb	r3, [r7, #19]
 8000eb0:	009b      	lsls	r3, r3, #2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	4413      	add	r3, r2
 8000eb6:	b29a      	uxth	r2, r3
 8000eb8:	7cbb      	ldrb	r3, [r7, #18]
 8000eba:	029b      	lsls	r3, r3, #10
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000ec2:	b29b      	uxth	r3, r3
 8000ec4:	4413      	add	r3, r2
 8000ec6:	b29b      	uxth	r3, r3
 8000ec8:	3301      	adds	r3, #1
 8000eca:	83fb      	strh	r3, [r7, #30]
					*(DWORD*) buff = (DWORD) csize << (n - 9);
 8000ecc:	8bfa      	ldrh	r2, [r7, #30]
 8000ece:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	3b09      	subs	r3, #9
 8000ed4:	409a      	lsls	r2, r3
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
				}
				res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
			break;
 8000ee0:	e056      	b.n	8000f90 <SD_disk_ioctl+0x22c>
		case GET_SECTOR_SIZE:
			*(WORD*) buff = 512;
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ee8:	801a      	strh	r2, [r3, #0]
			res = RES_OK;
 8000eea:	2300      	movs	r3, #0
 8000eec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000ef0:	e055      	b.n	8000f9e <SD_disk_ioctl+0x23a>
		case CTRL_SYNC:
			if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000ef2:	f7ff fc13 	bl	800071c <SD_ReadyWait>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	2bff      	cmp	r3, #255	@ 0xff
 8000efa:	d14b      	bne.n	8000f94 <SD_disk_ioctl+0x230>
 8000efc:	2300      	movs	r3, #0
 8000efe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f02:	e047      	b.n	8000f94 <SD_disk_ioctl+0x230>
		case MMC_GET_CSD:
			/* SEND_CSD */
			if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f04:	2100      	movs	r1, #0
 8000f06:	2049      	movs	r0, #73	@ 0x49
 8000f08:	f7ff fced 	bl	80008e6 <SD_SendCmd>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d142      	bne.n	8000f98 <SD_disk_ioctl+0x234>
 8000f12:	2110      	movs	r1, #16
 8000f14:	6a38      	ldr	r0, [r7, #32]
 8000f16:	f7ff fc75 	bl	8000804 <SD_RxDataBlock>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d03b      	beq.n	8000f98 <SD_disk_ioctl+0x234>
 8000f20:	2300      	movs	r3, #0
 8000f22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f26:	e037      	b.n	8000f98 <SD_disk_ioctl+0x234>
		case MMC_GET_CID:
			/* SEND_CID */
			if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000f28:	2100      	movs	r1, #0
 8000f2a:	204a      	movs	r0, #74	@ 0x4a
 8000f2c:	f7ff fcdb 	bl	80008e6 <SD_SendCmd>
 8000f30:	4603      	mov	r3, r0
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d132      	bne.n	8000f9c <SD_disk_ioctl+0x238>
 8000f36:	2110      	movs	r1, #16
 8000f38:	6a38      	ldr	r0, [r7, #32]
 8000f3a:	f7ff fc63 	bl	8000804 <SD_RxDataBlock>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d02b      	beq.n	8000f9c <SD_disk_ioctl+0x238>
 8000f44:	2300      	movs	r3, #0
 8000f46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			break;
 8000f4a:	e027      	b.n	8000f9c <SD_disk_ioctl+0x238>
		case MMC_GET_OCR:
			/* READ_OCR */
			if (SD_SendCmd(CMD58, 0) == 0)
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	207a      	movs	r0, #122	@ 0x7a
 8000f50:	f7ff fcc9 	bl	80008e6 <SD_SendCmd>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d116      	bne.n	8000f88 <SD_disk_ioctl+0x224>
			{
				for (n = 0; n < 4; n++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f60:	e00b      	b.n	8000f7a <SD_disk_ioctl+0x216>
				{
					*ptr++ = SPI_RxByte();
 8000f62:	6a3c      	ldr	r4, [r7, #32]
 8000f64:	1c63      	adds	r3, r4, #1
 8000f66:	623b      	str	r3, [r7, #32]
 8000f68:	f7ff fbae 	bl	80006c8 <SPI_RxByte>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	7023      	strb	r3, [r4, #0]
				for (n = 0; n < 4; n++)
 8000f70:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f74:	3301      	adds	r3, #1
 8000f76:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000f7a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000f7e:	2b03      	cmp	r3, #3
 8000f80:	d9ef      	bls.n	8000f62 <SD_disk_ioctl+0x1fe>
				}
				res = RES_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			}
		default:
			res = RES_PARERR;
 8000f88:	2304      	movs	r3, #4
 8000f8a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000f8e:	e006      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f90:	bf00      	nop
 8000f92:	e004      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f94:	bf00      	nop
 8000f96:	e002      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f98:	bf00      	nop
 8000f9a:	e000      	b.n	8000f9e <SD_disk_ioctl+0x23a>
			break;
 8000f9c:	bf00      	nop
		}

		DESELECT();
 8000f9e:	f7ff fb51 	bl	8000644 <DESELECT>
		SPI_RxByte();
 8000fa2:	f7ff fb91 	bl	80006c8 <SPI_RxByte>
	}

	return res;
 8000fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	372c      	adds	r7, #44	@ 0x2c
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd90      	pop	{r4, r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	20000000 	.word	0x20000000

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b08a      	sub	sp, #40	@ 0x28
 8000fbc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	f107 0314 	add.w	r3, r7, #20
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
 8000fc6:	605a      	str	r2, [r3, #4]
 8000fc8:	609a      	str	r2, [r3, #8]
 8000fca:	60da      	str	r2, [r3, #12]
 8000fcc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	4b5d      	ldr	r3, [pc, #372]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd6:	4a5c      	ldr	r2, [pc, #368]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fd8:	f043 0304 	orr.w	r3, r3, #4
 8000fdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fde:	4b5a      	ldr	r3, [pc, #360]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe2:	f003 0304 	and.w	r3, r3, #4
 8000fe6:	613b      	str	r3, [r7, #16]
 8000fe8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	60fb      	str	r3, [r7, #12]
 8000fee:	4b56      	ldr	r3, [pc, #344]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff2:	4a55      	ldr	r2, [pc, #340]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ff4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ff8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ffa:	4b53      	ldr	r3, [pc, #332]	@ (8001148 <MX_GPIO_Init+0x190>)
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001002:	60fb      	str	r3, [r7, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	4b4f      	ldr	r3, [pc, #316]	@ (8001148 <MX_GPIO_Init+0x190>)
 800100c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800100e:	4a4e      	ldr	r2, [pc, #312]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001010:	f043 0301 	orr.w	r3, r3, #1
 8001014:	6313      	str	r3, [r2, #48]	@ 0x30
 8001016:	4b4c      	ldr	r3, [pc, #304]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101a:	f003 0301 	and.w	r3, r3, #1
 800101e:	60bb      	str	r3, [r7, #8]
 8001020:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001022:	2300      	movs	r3, #0
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	4b48      	ldr	r3, [pc, #288]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	4a47      	ldr	r2, [pc, #284]	@ (8001148 <MX_GPIO_Init+0x190>)
 800102c:	f043 0302 	orr.w	r3, r3, #2
 8001030:	6313      	str	r3, [r2, #48]	@ 0x30
 8001032:	4b45      	ldr	r3, [pc, #276]	@ (8001148 <MX_GPIO_Init+0x190>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001036:	f003 0302 	and.w	r3, r3, #2
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_heartbeat_GPIO_Port, led_heartbeat_Pin, GPIO_PIN_RESET);
 800103e:	2200      	movs	r2, #0
 8001040:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001044:	4841      	ldr	r0, [pc, #260]	@ (800114c <MX_GPIO_Init+0x194>)
 8001046:	f004 f82f 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CANBUS_CS_GPIO_Port, CANBUS_CS_Pin, GPIO_PIN_RESET);
 800104a:	2200      	movs	r2, #0
 800104c:	2110      	movs	r1, #16
 800104e:	4840      	ldr	r0, [pc, #256]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001050:	f004 f82a 	bl	80050a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 8001054:	2200      	movs	r2, #0
 8001056:	213b      	movs	r1, #59	@ 0x3b
 8001058:	483e      	ldr	r0, [pc, #248]	@ (8001154 <MX_GPIO_Init+0x19c>)
 800105a:	f004 f825 	bl	80050a8 <HAL_GPIO_WritePin>
                          |LCDRESET_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : led_heartbeat_Pin */
  GPIO_InitStruct.Pin = led_heartbeat_Pin;
 800105e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001062:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	2301      	movs	r3, #1
 8001066:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001068:	2300      	movs	r3, #0
 800106a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800106c:	2300      	movs	r3, #0
 800106e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(led_heartbeat_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0314 	add.w	r3, r7, #20
 8001074:	4619      	mov	r1, r3
 8001076:	4835      	ldr	r0, [pc, #212]	@ (800114c <MX_GPIO_Init+0x194>)
 8001078:	f003 fe92 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PADDLE_PLUS_Pin PADDLE_MINUS_Pin */
  GPIO_InitStruct.Pin = PADDLE_PLUS_Pin|PADDLE_MINUS_Pin;
 800107c:	2306      	movs	r3, #6
 800107e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001080:	2300      	movs	r3, #0
 8001082:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001084:	2300      	movs	r3, #0
 8001086:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4619      	mov	r1, r3
 800108e:	4830      	ldr	r0, [pc, #192]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001090:	f003 fe86 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CANBUS_CS_Pin */
  GPIO_InitStruct.Pin = CANBUS_CS_Pin;
 8001094:	2310      	movs	r3, #16
 8001096:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001098:	2301      	movs	r3, #1
 800109a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109c:	2300      	movs	r3, #0
 800109e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a0:	2300      	movs	r3, #0
 80010a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CANBUS_CS_GPIO_Port, &GPIO_InitStruct);
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	4619      	mov	r1, r3
 80010aa:	4829      	ldr	r0, [pc, #164]	@ (8001150 <MX_GPIO_Init+0x198>)
 80010ac:	f003 fe78 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCARD_CS_Pin TOUCHSCREEN_CS_Pin LCDCS_Pin LCDRS_Pin
                           LCDRESET_Pin */
  GPIO_InitStruct.Pin = SDCARD_CS_Pin|TOUCHSCREEN_CS_Pin|LCDCS_Pin|LCDRS_Pin
 80010b0:	233b      	movs	r3, #59	@ 0x3b
 80010b2:	617b      	str	r3, [r7, #20]
                          |LCDRESET_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b4:	2301      	movs	r3, #1
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4619      	mov	r1, r3
 80010c6:	4823      	ldr	r0, [pc, #140]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010c8:	f003 fe6a 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button4INT_Pin */
  GPIO_InitStruct.Pin = button4INT_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010d2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80010d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button4INT_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	4619      	mov	r1, r3
 80010e2:	481c      	ldr	r0, [pc, #112]	@ (8001154 <MX_GPIO_Init+0x19c>)
 80010e4:	f003 fe5c 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : button1INT_Pin button2INT_Pin */
  GPIO_InitStruct.Pin = button1INT_Pin|button2INT_Pin;
 80010e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010ee:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80010f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f4:	2300      	movs	r3, #0
 80010f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010f8:	f107 0314 	add.w	r3, r7, #20
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	@ (8001150 <MX_GPIO_Init+0x198>)
 8001100:	f003 fe4e 	bl	8004da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : button3INT_Pin */
  GPIO_InitStruct.Pin = button3INT_Pin;
 8001104:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001108:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800110a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800110e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(button3INT_GPIO_Port, &GPIO_InitStruct);
 8001114:	f107 0314 	add.w	r3, r7, #20
 8001118:	4619      	mov	r1, r3
 800111a:	480d      	ldr	r0, [pc, #52]	@ (8001150 <MX_GPIO_Init+0x198>)
 800111c:	f003 fe40 	bl	8004da0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001120:	2200      	movs	r2, #0
 8001122:	2100      	movs	r1, #0
 8001124:	2017      	movs	r0, #23
 8001126:	f003 fa72 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800112a:	2017      	movs	r0, #23
 800112c:	f003 fa8b 	bl	8004646 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2028      	movs	r0, #40	@ 0x28
 8001136:	f003 fa6a 	bl	800460e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800113a:	2028      	movs	r0, #40	@ 0x28
 800113c:	f003 fa83 	bl	8004646 <HAL_NVIC_EnableIRQ>

}
 8001140:	bf00      	nop
 8001142:	3728      	adds	r7, #40	@ 0x28
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	40023800 	.word	0x40023800
 800114c:	40020800 	.word	0x40020800
 8001150:	40020000 	.word	0x40020000
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == button1INT_Pin) {
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x1a>
	  USB_Println("button 1 was pressed\n");
 800116a:	4812      	ldr	r0, [pc, #72]	@ (80011b4 <HAL_GPIO_EXTI_Callback+0x5c>)
 800116c:	f001 f892 	bl	8002294 <USB_Println>
  } else if (GPIO_Pin == button4INT_Pin) {
	  USB_Println("button 4 was pressed\n");
  } else {
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
  }
}
 8001170:	e01c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button2INT_Pin) {
 8001172:	88fb      	ldrh	r3, [r7, #6]
 8001174:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001178:	d103      	bne.n	8001182 <HAL_GPIO_EXTI_Callback+0x2a>
	  USB_Println("button 2 was pressed\n");
 800117a:	480f      	ldr	r0, [pc, #60]	@ (80011b8 <HAL_GPIO_EXTI_Callback+0x60>)
 800117c:	f001 f88a 	bl	8002294 <USB_Println>
}
 8001180:	e014      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button3INT_Pin ) {
 8001182:	88fb      	ldrh	r3, [r7, #6]
 8001184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001188:	d103      	bne.n	8001192 <HAL_GPIO_EXTI_Callback+0x3a>
	  USB_Println("button 3 was pressed\n");
 800118a:	480c      	ldr	r0, [pc, #48]	@ (80011bc <HAL_GPIO_EXTI_Callback+0x64>)
 800118c:	f001 f882 	bl	8002294 <USB_Println>
}
 8001190:	e00c      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
  } else if (GPIO_Pin == button4INT_Pin) {
 8001192:	88fb      	ldrh	r3, [r7, #6]
 8001194:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001198:	d103      	bne.n	80011a2 <HAL_GPIO_EXTI_Callback+0x4a>
	  USB_Println("button 4 was pressed\n");
 800119a:	4809      	ldr	r0, [pc, #36]	@ (80011c0 <HAL_GPIO_EXTI_Callback+0x68>)
 800119c:	f001 f87a 	bl	8002294 <USB_Println>
}
 80011a0:	e004      	b.n	80011ac <HAL_GPIO_EXTI_Callback+0x54>
      USB_Println("unknown button pressed: 0x%x", GPIO_Pin);
 80011a2:	88fb      	ldrh	r3, [r7, #6]
 80011a4:	4619      	mov	r1, r3
 80011a6:	4807      	ldr	r0, [pc, #28]	@ (80011c4 <HAL_GPIO_EXTI_Callback+0x6c>)
 80011a8:	f001 f874 	bl	8002294 <USB_Println>
}
 80011ac:	bf00      	nop
 80011ae:	3708      	adds	r7, #8
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	0800fda4 	.word	0x0800fda4
 80011b8:	0800fdbc 	.word	0x0800fdbc
 80011bc:	0800fdd4 	.word	0x0800fdd4
 80011c0:	0800fdec 	.word	0x0800fdec
 80011c4:	0800fe04 	.word	0x0800fe04

080011c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c8:	b5b0      	push	{r4, r5, r7, lr}
 80011ca:	f5ad 6deb 	sub.w	sp, sp, #1880	@ 0x758
 80011ce:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d0:	f003 f8ac 	bl	800432c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d4:	f000 fa1e 	bl	8001614 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011d8:	f7ff feee 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80011dc:	f7ff f9ee 	bl	80005bc <MX_DMA_Init>
  MX_SPI1_Init();
 80011e0:	f000 fd02 	bl	8001be8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80011e4:	f00d fb0c 	bl	800e800 <MX_USB_DEVICE_Init>
  MX_SPI2_Init();
 80011e8:	f000 fd36 	bl	8001c58 <MX_SPI2_Init>
  MX_TIM4_Init();
 80011ec:	f000 ff4e 	bl	800208c <MX_TIM4_Init>
  MX_FATFS_Init();
 80011f0:	f009 f942 	bl	800a478 <MX_FATFS_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  FATFS fs;
  FRESULT fresult = f_mount(&fs, "/", 1);
 80011f4:	f207 5304 	addw	r3, r7, #1284	@ 0x504
 80011f8:	2201      	movs	r2, #1
 80011fa:	49ba      	ldr	r1, [pc, #744]	@ (80014e4 <main+0x31c>)
 80011fc:	4618      	mov	r0, r3
 80011fe:	f00c febb 	bl	800df78 <f_mount>
 8001202:	4603      	mov	r3, r0
 8001204:	f887 3747 	strb.w	r3, [r7, #1863]	@ 0x747
  if (fresult != FR_OK) {
 8001208:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800120c:	2b00      	cmp	r3, #0
 800120e:	d00a      	beq.n	8001226 <main+0x5e>
	  HAL_Delay(1000);
 8001210:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001214:	f003 f8fc 	bl	8004410 <HAL_Delay>
	  USB_Println("There was an error: %d\n", fresult);
 8001218:	f897 3747 	ldrb.w	r3, [r7, #1863]	@ 0x747
 800121c:	4619      	mov	r1, r3
 800121e:	48b2      	ldr	r0, [pc, #712]	@ (80014e8 <main+0x320>)
 8001220:	f001 f838 	bl	8002294 <USB_Println>
 8001224:	e006      	b.n	8001234 <main+0x6c>
  } else {
	  HAL_Delay(1000);
 8001226:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800122a:	f003 f8f1 	bl	8004410 <HAL_Delay>
	  USB_Println("the sdcard is mounted\n");
 800122e:	48af      	ldr	r0, [pc, #700]	@ (80014ec <main+0x324>)
 8001230:	f001 f830 	bl	8002294 <USB_Println>
  }

  initializeMCP2515();
 8001234:	f000 fa60 	bl	80016f8 <initializeMCP2515>
  uint8_t ledcolors[3 * 16];
  uint16_t ledbytes[(16 * 24) + 150];
  int G1[12] = {500, 2500, 4000, 5000, 6000, 7000, 8000, 8500, 9000, 9500,
 8001238:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 800123c:	f5a3 63da 	sub.w	r3, r3, #1744	@ 0x6d0
 8001240:	4aab      	ldr	r2, [pc, #684]	@ (80014f0 <main+0x328>)
 8001242:	461c      	mov	r4, r3
 8001244:	4615      	mov	r5, r2
 8001246:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800124c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800124e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001252:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  10000, 10500};
  shiftLightsInit(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 8001256:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800125a:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 800125e:	2100      	movs	r1, #0
 8001260:	48a4      	ldr	r0, [pc, #656]	@ (80014f4 <main+0x32c>)
 8001262:	f000 fb01 	bl	8001868 <shiftLightsInit>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001266:	2300      	movs	r3, #0
 8001268:	9303      	str	r3, [sp, #12]
 800126a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	2300      	movs	r3, #0
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2300      	movs	r3, #0
 800127c:	2200      	movs	r2, #0
 800127e:	2100      	movs	r1, #0
 8001280:	489c      	ldr	r0, [pc, #624]	@ (80014f4 <main+0x32c>)
 8001282:	f000 fa75 	bl	8001770 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001286:	2301      	movs	r3, #1
 8001288:	9303      	str	r3, [sp, #12]
 800128a:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 800128e:	9302      	str	r3, [sp, #8]
 8001290:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	2300      	movs	r3, #0
 8001298:	9300      	str	r3, [sp, #0]
 800129a:	2300      	movs	r3, #0
 800129c:	2200      	movs	r2, #0
 800129e:	2100      	movs	r1, #0
 80012a0:	4894      	ldr	r0, [pc, #592]	@ (80014f4 <main+0x32c>)
 80012a2:	f000 fa65 	bl	8001770 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 80012a6:	230e      	movs	r3, #14
 80012a8:	9303      	str	r3, [sp, #12]
 80012aa:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012ae:	9302      	str	r3, [sp, #8]
 80012b0:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	2300      	movs	r3, #0
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	2300      	movs	r3, #0
 80012bc:	2200      	movs	r2, #0
 80012be:	2100      	movs	r1, #0
 80012c0:	488c      	ldr	r0, [pc, #560]	@ (80014f4 <main+0x32c>)
 80012c2:	f000 fa55 	bl	8001770 <setColor>
  setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 80012c6:	230f      	movs	r3, #15
 80012c8:	9303      	str	r3, [sp, #12]
 80012ca:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 80012d4:	9301      	str	r3, [sp, #4]
 80012d6:	2300      	movs	r3, #0
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2300      	movs	r3, #0
 80012dc:	2200      	movs	r2, #0
 80012de:	2100      	movs	r1, #0
 80012e0:	4884      	ldr	r0, [pc, #528]	@ (80014f4 <main+0x32c>)
 80012e2:	f000 fa45 	bl	8001770 <setColor>

  resetScreen();\
 80012e6:	f001 fc57 	bl	8002b98 <resetScreen>
  initializeScreen();
 80012ea:	f001 fc73 	bl	8002bd4 <initializeScreen>
  //dosplashscene();
  startUp(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes);
 80012ee:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80012f2:	f207 42d4 	addw	r2, r7, #1236	@ 0x4d4
 80012f6:	2100      	movs	r1, #0
 80012f8:	487e      	ldr	r0, [pc, #504]	@ (80014f4 <main+0x32c>)
 80012fa:	f000 fc0d 	bl	8001b18 <startUp>
  HAL_Delay(200);
 80012fe:	20c8      	movs	r0, #200	@ 0xc8
 8001300:	f003 f886 	bl	8004410 <HAL_Delay>

  char result[20] = "null"; //rpm
 8001304:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001308:	f2a3 63e4 	subw	r3, r3, #1764	@ 0x6e4
 800130c:	4a7a      	ldr	r2, [pc, #488]	@ (80014f8 <main+0x330>)
 800130e:	601a      	str	r2, [r3, #0]
 8001310:	3304      	adds	r3, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  char result2[20] = "null";//temp
 800131c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001320:	f5a3 63df 	sub.w	r3, r3, #1784	@ 0x6f8
 8001324:	4a74      	ldr	r2, [pc, #464]	@ (80014f8 <main+0x330>)
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	3304      	adds	r3, #4
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
  char result3[20] = "8";//gear
 8001334:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001338:	f2a3 730c 	subw	r3, r3, #1804	@ 0x70c
 800133c:	2238      	movs	r2, #56	@ 0x38
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	3304      	adds	r3, #4
 8001342:	2200      	movs	r2, #0
 8001344:	601a      	str	r2, [r3, #0]
 8001346:	605a      	str	r2, [r3, #4]
 8001348:	609a      	str	r2, [r3, #8]
 800134a:	60da      	str	r2, [r3, #12]
  char result4[20] = "null"; //battery volt
 800134c:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001350:	f5a3 63e4 	sub.w	r3, r3, #1824	@ 0x720
 8001354:	4a68      	ldr	r2, [pc, #416]	@ (80014f8 <main+0x330>)
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	3304      	adds	r3, #4
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
  settempdata(result2);
 8001364:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8001368:	4618      	mov	r0, r3
 800136a:	f002 f8d9 	bl	8003520 <settempdata>
  setgeardata(result3);
 800136e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001372:	4618      	mov	r0, r3
 8001374:	f002 f900 	bl	8003578 <setgeardata>
  setrpmdata(result);
 8001378:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800137c:	4618      	mov	r0, r3
 800137e:	f002 f897 	bl	80034b0 <setrpmdata>
  setbattdata(result4);
 8001382:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001386:	4618      	mov	r0, r3
 8001388:	f002 f920 	bl	80035cc <setbattdata>
  domainscreen();
 800138c:	f002 f94a 	bl	8003624 <domainscreen>

  struct can_frame frame;

  while (1)
  {
	  int canresult = readMessage(&frame);
 8001390:	f107 0318 	add.w	r3, r7, #24
 8001394:	4618      	mov	r0, r3
 8001396:	f000 f9c1 	bl	800171c <readMessage>
 800139a:	f8c7 0740 	str.w	r0, [r7, #1856]	@ 0x740
	  if (canresult == 0) {
 800139e:	f8d7 3740 	ldr.w	r3, [r7, #1856]	@ 0x740
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f040 812b 	bne.w	80015fe <main+0x436>
		  if (frame.can_id == 1512) {
 80013a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013ac:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f5b3 6fbd 	cmp.w	r3, #1512	@ 0x5e8
 80013b6:	d177      	bne.n	80014a8 <main+0x2e0>
			  uint16_t rpm = (((uint16_t)frame.data[2]) << 8) + frame.data[3];
 80013b8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80013bc:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80013c0:	7a9b      	ldrb	r3, [r3, #10]
 80013c2:	021b      	lsls	r3, r3, #8
 80013c4:	b29b      	uxth	r3, r3
 80013c6:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 80013ca:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 80013ce:	7ad2      	ldrb	r2, [r2, #11]
 80013d0:	4413      	add	r3, r2
 80013d2:	f8a7 3738 	strh.w	r3, [r7, #1848]	@ 0x738
			  UpdateShiftLights(&htim4, TIM_CHANNEL_1, ledcolors, ledbytes, rpm, G1);
 80013d6:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013da:	f107 00a8 	add.w	r0, r7, #168	@ 0xa8
 80013de:	f207 41d4 	addw	r1, r7, #1236	@ 0x4d4
 80013e2:	f107 0278 	add.w	r2, r7, #120	@ 0x78
 80013e6:	9201      	str	r2, [sp, #4]
 80013e8:	9300      	str	r3, [sp, #0]
 80013ea:	4603      	mov	r3, r0
 80013ec:	460a      	mov	r2, r1
 80013ee:	2100      	movs	r1, #0
 80013f0:	4840      	ldr	r0, [pc, #256]	@ (80014f4 <main+0x32c>)
 80013f2:	f000 fac9 	bl	8001988 <UpdateShiftLights>

			  itoa(rpm, (char*)(result), 10);
 80013f6:	f8b7 3738 	ldrh.w	r3, [r7, #1848]	@ 0x738
 80013fa:	f107 0164 	add.w	r1, r7, #100	@ 0x64
 80013fe:	220a      	movs	r2, #10
 8001400:	4618      	mov	r0, r3
 8001402:	f00d ff4a 	bl	800f29a <itoa>
			  setrpmdata(result);
 8001406:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800140a:	4618      	mov	r0, r3
 800140c:	f002 f850 	bl	80034b0 <setrpmdata>
			  uint16_t temp = (((uint16_t)frame.data[4]) << 8) + frame.data[5];
 8001410:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001414:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001418:	7b1b      	ldrb	r3, [r3, #12]
 800141a:	021b      	lsls	r3, r3, #8
 800141c:	b29b      	uxth	r3, r3
 800141e:	f507 62e9 	add.w	r2, r7, #1864	@ 0x748
 8001422:	f5a2 62e6 	sub.w	r2, r2, #1840	@ 0x730
 8001426:	7b52      	ldrb	r2, [r2, #13]
 8001428:	4413      	add	r3, r2
 800142a:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  if (temp > 2150) {
 800142e:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001432:	f640 0266 	movw	r2, #2150	@ 0x866
 8001436:	4293      	cmp	r3, r2
 8001438:	d910      	bls.n	800145c <main+0x294>
				setColor(&htim4, TIM_CHANNEL_1, 0, 255, 0, ledcolors, ledbytes, 15);
 800143a:	230f      	movs	r3, #15
 800143c:	9303      	str	r3, [sp, #12]
 800143e:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001442:	9302      	str	r3, [sp, #8]
 8001444:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 8001448:	9301      	str	r3, [sp, #4]
 800144a:	2300      	movs	r3, #0
 800144c:	9300      	str	r3, [sp, #0]
 800144e:	23ff      	movs	r3, #255	@ 0xff
 8001450:	2200      	movs	r2, #0
 8001452:	2100      	movs	r1, #0
 8001454:	4827      	ldr	r0, [pc, #156]	@ (80014f4 <main+0x32c>)
 8001456:	f000 f98b 	bl	8001770 <setColor>
 800145a:	e00f      	b.n	800147c <main+0x2b4>
			  } else {
				setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 800145c:	230f      	movs	r3, #15
 800145e:	9303      	str	r3, [sp, #12]
 8001460:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001464:	9302      	str	r3, [sp, #8]
 8001466:	f207 43d4 	addw	r3, r7, #1236	@ 0x4d4
 800146a:	9301      	str	r3, [sp, #4]
 800146c:	2300      	movs	r3, #0
 800146e:	9300      	str	r3, [sp, #0]
 8001470:	2300      	movs	r3, #0
 8001472:	2200      	movs	r2, #0
 8001474:	2100      	movs	r1, #0
 8001476:	481f      	ldr	r0, [pc, #124]	@ (80014f4 <main+0x32c>)
 8001478:	f000 f97a 	bl	8001770 <setColor>
			  }
			  temp /= 10;
 800147c:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001480:	4a1e      	ldr	r2, [pc, #120]	@ (80014fc <main+0x334>)
 8001482:	fba2 2303 	umull	r2, r3, r2, r3
 8001486:	08db      	lsrs	r3, r3, #3
 8001488:	f8a7 3736 	strh.w	r3, [r7, #1846]	@ 0x736
			  itoa(temp, result2, 10);
 800148c:	f8b7 3736 	ldrh.w	r3, [r7, #1846]	@ 0x736
 8001490:	f107 0150 	add.w	r1, r7, #80	@ 0x50
 8001494:	220a      	movs	r2, #10
 8001496:	4618      	mov	r0, r3
 8001498:	f00d feff 	bl	800f29a <itoa>
			  settempdata(result2);
 800149c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80014a0:	4618      	mov	r0, r3
 80014a2:	f002 f83d 	bl	8003520 <settempdata>
 80014a6:	e0aa      	b.n	80015fe <main+0x436>
		  } else if (frame.can_id == 1520 + 33) {
 80014a8:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014ac:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f240 6211 	movw	r2, #1553	@ 0x611
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d122      	bne.n	8001500 <main+0x338>
			  uint8_t gear = ((uint8_t)frame.data[6]);
 80014ba:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80014be:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80014c2:	7b9b      	ldrb	r3, [r3, #14]
 80014c4:	f887 373a 	strb.w	r3, [r7, #1850]	@ 0x73a
			  itoa(gear, result3, 10);
 80014c8:	f897 373a 	ldrb.w	r3, [r7, #1850]	@ 0x73a
 80014cc:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 80014d0:	220a      	movs	r2, #10
 80014d2:	4618      	mov	r0, r3
 80014d4:	f00d fee1 	bl	800f29a <itoa>
			  setgeardata(result3);
 80014d8:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80014dc:	4618      	mov	r0, r3
 80014de:	f002 f84b 	bl	8003578 <setgeardata>
 80014e2:	e08c      	b.n	80015fe <main+0x436>
 80014e4:	0800fe24 	.word	0x0800fe24
 80014e8:	0800fe28 	.word	0x0800fe28
 80014ec:	0800fe40 	.word	0x0800fe40
 80014f0:	0800fe80 	.word	0x0800fe80
 80014f4:	200002d4 	.word	0x200002d4
 80014f8:	6c6c756e 	.word	0x6c6c756e
 80014fc:	cccccccd 	.word	0xcccccccd
		  } else if (frame.can_id == 1515) {
 8001500:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001504:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f240 52eb 	movw	r2, #1515	@ 0x5eb
 800150e:	4293      	cmp	r3, r2
 8001510:	d155      	bne.n	80015be <main+0x3f6>
			  uint8_t battvalue = (((uint16_t)frame.data[0]) << 8) + frame.data[1];
 8001512:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 8001516:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 800151a:	7a5b      	ldrb	r3, [r3, #9]
 800151c:	f887 373d 	strb.w	r3, [r7, #1853]	@ 0x73d
			  uint8_t batIntPart = battvalue / 10;
 8001520:	f897 373d 	ldrb.w	r3, [r7, #1853]	@ 0x73d
 8001524:	4a37      	ldr	r2, [pc, #220]	@ (8001604 <main+0x43c>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	08db      	lsrs	r3, r3, #3
 800152c:	f887 373c 	strb.w	r3, [r7, #1852]	@ 0x73c
			  uint8_t batDecimalPart = battvalue % 10;
 8001530:	f897 273d 	ldrb.w	r2, [r7, #1853]	@ 0x73d
 8001534:	4b33      	ldr	r3, [pc, #204]	@ (8001604 <main+0x43c>)
 8001536:	fba3 1302 	umull	r1, r3, r3, r2
 800153a:	08d9      	lsrs	r1, r3, #3
 800153c:	460b      	mov	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	440b      	add	r3, r1
 8001542:	005b      	lsls	r3, r3, #1
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	f887 373b 	strb.w	r3, [r7, #1851]	@ 0x73b
			  char batint[10];
			  char batdec[10];
			  itoa(batIntPart, batint, 10);
 800154a:	f897 373c 	ldrb.w	r3, [r7, #1852]	@ 0x73c
 800154e:	f107 010c 	add.w	r1, r7, #12
 8001552:	220a      	movs	r2, #10
 8001554:	4618      	mov	r0, r3
 8001556:	f00d fea0 	bl	800f29a <itoa>
			  itoa(batDecimalPart, batdec, 10);
 800155a:	f897 373b 	ldrb.w	r3, [r7, #1851]	@ 0x73b
 800155e:	4639      	mov	r1, r7
 8001560:	220a      	movs	r2, #10
 8001562:	4618      	mov	r0, r3
 8001564:	f00d fe99 	bl	800f29a <itoa>
			  strncpy(result4, "", 20);
 8001568:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800156c:	2214      	movs	r2, #20
 800156e:	4926      	ldr	r1, [pc, #152]	@ (8001608 <main+0x440>)
 8001570:	4618      	mov	r0, r3
 8001572:	f00d ffec 	bl	800f54e <strncpy>
			  strncat(result4, batint, 5);
 8001576:	f107 010c 	add.w	r1, r7, #12
 800157a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800157e:	2205      	movs	r2, #5
 8001580:	4618      	mov	r0, r3
 8001582:	f00d ffd1 	bl	800f528 <strncat>
			  strncat(result4, ".", 5);
 8001586:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800158a:	4618      	mov	r0, r3
 800158c:	f7fe fe28 	bl	80001e0 <strlen>
 8001590:	4603      	mov	r3, r0
 8001592:	461a      	mov	r2, r3
 8001594:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001598:	4413      	add	r3, r2
 800159a:	491c      	ldr	r1, [pc, #112]	@ (800160c <main+0x444>)
 800159c:	461a      	mov	r2, r3
 800159e:	460b      	mov	r3, r1
 80015a0:	881b      	ldrh	r3, [r3, #0]
 80015a2:	8013      	strh	r3, [r2, #0]
			  strncat(result4, batdec, 1);
 80015a4:	4639      	mov	r1, r7
 80015a6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015aa:	2201      	movs	r2, #1
 80015ac:	4618      	mov	r0, r3
 80015ae:	f00d ffbb 	bl	800f528 <strncat>
			  setbattdata(result4);
 80015b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015b6:	4618      	mov	r0, r3
 80015b8:	f002 f808 	bl	80035cc <setbattdata>
 80015bc:	e01f      	b.n	80015fe <main+0x436>
		  } else if (frame.can_id == 504) {
 80015be:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015c2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f5b3 7ffc 	cmp.w	r3, #504	@ 0x1f8
 80015cc:	d117      	bne.n	80015fe <main+0x436>
			  uint16_t neutrallight = (uint16_t)((frame.data[6] << 8) | (frame.data[7]));
 80015ce:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015d2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015d6:	7b9b      	ldrb	r3, [r3, #14]
 80015d8:	b21b      	sxth	r3, r3
 80015da:	021b      	lsls	r3, r3, #8
 80015dc:	b21a      	sxth	r2, r3
 80015de:	f507 63e9 	add.w	r3, r7, #1864	@ 0x748
 80015e2:	f5a3 63e6 	sub.w	r3, r3, #1840	@ 0x730
 80015e6:	7bdb      	ldrb	r3, [r3, #15]
 80015e8:	b21b      	sxth	r3, r3
 80015ea:	4313      	orrs	r3, r2
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	f8a7 373e 	strh.w	r3, [r7, #1854]	@ 0x73e
			  USB_Println("the neutral light value is %d\n", neutrallight);
 80015f2:	f8b7 373e 	ldrh.w	r3, [r7, #1854]	@ 0x73e
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	@ (8001610 <main+0x448>)
 80015fa:	f000 fe4b 	bl	8002294 <USB_Println>
		  }
	  }

	  domainscreen();
 80015fe:	f002 f811 	bl	8003624 <domainscreen>
  {
 8001602:	e6c5      	b.n	8001390 <main+0x1c8>
 8001604:	cccccccd 	.word	0xcccccccd
 8001608:	0800fe58 	.word	0x0800fe58
 800160c:	0800fe5c 	.word	0x0800fe5c
 8001610:	0800fe60 	.word	0x0800fe60

08001614 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b094      	sub	sp, #80	@ 0x50
 8001618:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	2230      	movs	r2, #48	@ 0x30
 8001620:	2100      	movs	r1, #0
 8001622:	4618      	mov	r0, r3
 8001624:	f00d ff78 	bl	800f518 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001628:	f107 030c 	add.w	r3, r7, #12
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001638:	2300      	movs	r3, #0
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	4b29      	ldr	r3, [pc, #164]	@ (80016e4 <SystemClock_Config+0xd0>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	4a28      	ldr	r2, [pc, #160]	@ (80016e4 <SystemClock_Config+0xd0>)
 8001642:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001646:	6413      	str	r3, [r2, #64]	@ 0x40
 8001648:	4b26      	ldr	r3, [pc, #152]	@ (80016e4 <SystemClock_Config+0xd0>)
 800164a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001650:	60bb      	str	r3, [r7, #8]
 8001652:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001654:	2300      	movs	r3, #0
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	4b23      	ldr	r3, [pc, #140]	@ (80016e8 <SystemClock_Config+0xd4>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001660:	4a21      	ldr	r2, [pc, #132]	@ (80016e8 <SystemClock_Config+0xd4>)
 8001662:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001666:	6013      	str	r3, [r2, #0]
 8001668:	4b1f      	ldr	r3, [pc, #124]	@ (80016e8 <SystemClock_Config+0xd4>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001670:	607b      	str	r3, [r7, #4]
 8001672:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001674:	2301      	movs	r3, #1
 8001676:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001678:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800167c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800167e:	2302      	movs	r3, #2
 8001680:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001682:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001686:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001688:	2319      	movs	r3, #25
 800168a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800168c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001690:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001692:	2304      	movs	r3, #4
 8001694:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001696:	2307      	movs	r3, #7
 8001698:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169a:	f107 0320 	add.w	r3, r7, #32
 800169e:	4618      	mov	r0, r3
 80016a0:	f004 ff86 	bl	80065b0 <HAL_RCC_OscConfig>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80016aa:	f000 f81f 	bl	80016ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016ae:	230f      	movs	r3, #15
 80016b0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016b2:	2302      	movs	r3, #2
 80016b4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016b6:	2300      	movs	r3, #0
 80016b8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80016ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016be:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016c0:	2300      	movs	r3, #0
 80016c2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80016c4:	f107 030c 	add.w	r3, r7, #12
 80016c8:	2102      	movs	r1, #2
 80016ca:	4618      	mov	r0, r3
 80016cc:	f005 f9e8 	bl	8006aa0 <HAL_RCC_ClockConfig>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80016d6:	f000 f809 	bl	80016ec <Error_Handler>
  }
}
 80016da:	bf00      	nop
 80016dc:	3750      	adds	r7, #80	@ 0x50
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	bf00      	nop
 80016e4:	40023800 	.word	0x40023800
 80016e8:	40007000 	.word	0x40007000

080016ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016f0:	b672      	cpsid	i
}
 80016f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016f4:	bf00      	nop
 80016f6:	e7fd      	b.n	80016f4 <Error_Handler+0x8>

080016f8 <initializeMCP2515>:
#include "spi.h"
#include "gpio.h"


MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
void initializeMCP2515() {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	myMCP.reset();
 80016fc:	4806      	ldr	r0, [pc, #24]	@ (8001718 <initializeMCP2515+0x20>)
 80016fe:	f002 f8d5 	bl	80038ac <_ZN7MCP25155resetEv>
	myMCP.setBitrate(CAN_500KBPS, MCP_8MHZ);
 8001702:	2202      	movs	r2, #2
 8001704:	210e      	movs	r1, #14
 8001706:	4804      	ldr	r0, [pc, #16]	@ (8001718 <initializeMCP2515+0x20>)
 8001708:	f002 faa2 	bl	8003c50 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>
	myMCP.setNormalMode();
 800170c:	4802      	ldr	r0, [pc, #8]	@ (8001718 <initializeMCP2515+0x20>)
 800170e:	f002 fa53 	bl	8003bb8 <_ZN7MCP251513setNormalModeEv>
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001a8 	.word	0x200001a8

0800171c <readMessage>:

int sendMessage(struct can_frame *frame) {
	return myMCP.sendMessage(frame);
}

int readMessage(struct can_frame *frame) {
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
	return myMCP.readMessage(frame);
 8001724:	6879      	ldr	r1, [r7, #4]
 8001726:	4804      	ldr	r0, [pc, #16]	@ (8001738 <readMessage+0x1c>)
 8001728:	f002 fdaa 	bl	8004280 <_ZN7MCP251511readMessageEP9can_frame>
 800172c:	4603      	mov	r3, r0
}
 800172e:	4618      	mov	r0, r3
 8001730:	3708      	adds	r7, #8
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}
 8001736:	bf00      	nop
 8001738:	200001a8 	.word	0x200001a8

0800173c <_Z41__static_initialization_and_destruction_0v>:
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af02      	add	r7, sp, #8
MCP2515 myMCP(&hspi2, 10, GPIOA, GPIO_PIN_4);
 8001742:	2310      	movs	r3, #16
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	4b04      	ldr	r3, [pc, #16]	@ (8001758 <_Z41__static_initialization_and_destruction_0v+0x1c>)
 8001748:	220a      	movs	r2, #10
 800174a:	4904      	ldr	r1, [pc, #16]	@ (800175c <_Z41__static_initialization_and_destruction_0v+0x20>)
 800174c:	4804      	ldr	r0, [pc, #16]	@ (8001760 <_Z41__static_initialization_and_destruction_0v+0x24>)
 800174e:	f002 f84e 	bl	80037ee <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>
}
 8001752:	bf00      	nop
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	40020000 	.word	0x40020000
 800175c:	20000214 	.word	0x20000214
 8001760:	200001a8 	.word	0x200001a8

08001764 <_GLOBAL__sub_I_myMCP>:
 8001764:	b580      	push	{r7, lr}
 8001766:	af00      	add	r7, sp, #0
 8001768:	f7ff ffe8 	bl	800173c <_Z41__static_initialization_and_destruction_0v>
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <setColor>:
volatile int datasentflag;
extern TIM_HandleTypeDef htim4;


void setColor(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t green, uint8_t red,
		uint8_t blue, uint8_t *ledcolors, uint16_t *ledbytes, int ledIndex) {
 8001770:	b580      	push	{r7, lr}
 8001772:	b088      	sub	sp, #32
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	4611      	mov	r1, r2
 800177c:	461a      	mov	r2, r3
 800177e:	460b      	mov	r3, r1
 8001780:	71fb      	strb	r3, [r7, #7]
 8001782:	4613      	mov	r3, r2
 8001784:	71bb      	strb	r3, [r7, #6]

	int index = (ledIndex * 3);
 8001786:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8001788:	4613      	mov	r3, r2
 800178a:	005b      	lsls	r3, r3, #1
 800178c:	4413      	add	r3, r2
 800178e:	613b      	str	r3, [r7, #16]
	ledcolors[index] = green;
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001794:	4413      	add	r3, r2
 8001796:	79fa      	ldrb	r2, [r7, #7]
 8001798:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 1] = red;
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	3301      	adds	r3, #1
 800179e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017a0:	4413      	add	r3, r2
 80017a2:	79ba      	ldrb	r2, [r7, #6]
 80017a4:	701a      	strb	r2, [r3, #0]
    ledcolors[index + 2] = blue;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	3302      	adds	r3, #2
 80017aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017ac:	4413      	add	r3, r2
 80017ae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80017b2:	701a      	strb	r2, [r3, #0]

    for (int i = index; i < (index + 3); i++) {
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	61fb      	str	r3, [r7, #28]
 80017b8:	e02a      	b.n	8001810 <setColor+0xa0>
    	for (int j = 0; j < 8; j++) {
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
 80017be:	e021      	b.n	8001804 <setColor+0x94>
    		if ((ledcolors[i] << j) & 128) {
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80017c4:	4413      	add	r3, r2
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	461a      	mov	r2, r3
 80017ca:	69bb      	ldr	r3, [r7, #24]
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d009      	beq.n	80017ec <setColor+0x7c>
    			ledbytes[(i * 8) + j] = 70;
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	00da      	lsls	r2, r3, #3
 80017dc:	69bb      	ldr	r3, [r7, #24]
 80017de:	4413      	add	r3, r2
 80017e0:	005b      	lsls	r3, r3, #1
 80017e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017e4:	4413      	add	r3, r2
 80017e6:	2246      	movs	r2, #70	@ 0x46
 80017e8:	801a      	strh	r2, [r3, #0]
 80017ea:	e008      	b.n	80017fe <setColor+0x8e>
    		} else {
   			ledbytes[(i * 8) + j] = 35;
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	00da      	lsls	r2, r3, #3
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	4413      	add	r3, r2
 80017f4:	005b      	lsls	r3, r3, #1
 80017f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80017f8:	4413      	add	r3, r2
 80017fa:	2223      	movs	r2, #35	@ 0x23
 80017fc:	801a      	strh	r2, [r3, #0]
    	for (int j = 0; j < 8; j++) {
 80017fe:	69bb      	ldr	r3, [r7, #24]
 8001800:	3301      	adds	r3, #1
 8001802:	61bb      	str	r3, [r7, #24]
 8001804:	69bb      	ldr	r3, [r7, #24]
 8001806:	2b07      	cmp	r3, #7
 8001808:	ddda      	ble.n	80017c0 <setColor+0x50>
    for (int i = index; i < (index + 3); i++) {
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	3301      	adds	r3, #1
 800180e:	61fb      	str	r3, [r7, #28]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	3302      	adds	r3, #2
 8001814:	69fa      	ldr	r2, [r7, #28]
 8001816:	429a      	cmp	r2, r3
 8001818:	ddcf      	ble.n	80017ba <setColor+0x4a>
    		}
    	}
    }
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800181a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800181e:	617b      	str	r3, [r7, #20]
 8001820:	e008      	b.n	8001834 <setColor+0xc4>
    	ledbytes[i] = 0;
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001828:	4413      	add	r3, r2
 800182a:	2200      	movs	r2, #0
 800182c:	801a      	strh	r2, [r3, #0]
    for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	3301      	adds	r3, #1
 8001832:	617b      	str	r3, [r7, #20]
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	f240 2215 	movw	r2, #533	@ 0x215
 800183a:	4293      	cmp	r3, r2
 800183c:	ddf1      	ble.n	8001822 <setColor+0xb2>
    }
    HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 800183e:	f240 2316 	movw	r3, #534	@ 0x216
 8001842:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001844:	68b9      	ldr	r1, [r7, #8]
 8001846:	68f8      	ldr	r0, [r7, #12]
 8001848:	f006 faa4 	bl	8007d94 <HAL_TIM_PWM_Start_DMA>
    while (!datasentflag) {};
 800184c:	bf00      	nop
 800184e:	4b05      	ldr	r3, [pc, #20]	@ (8001864 <setColor+0xf4>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0fb      	beq.n	800184e <setColor+0xde>
    datasentflag = 0;
 8001856:	4b03      	ldr	r3, [pc, #12]	@ (8001864 <setColor+0xf4>)
 8001858:	2200      	movs	r2, #0
 800185a:	601a      	str	r2, [r3, #0]
}
 800185c:	bf00      	nop
 800185e:	3720      	adds	r7, #32
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	200001b8 	.word	0x200001b8

08001868 <shiftLightsInit>:

void shiftLightsInit(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001868:	b580      	push	{r7, lr}
 800186a:	b088      	sub	sp, #32
 800186c:	af00      	add	r7, sp, #0
 800186e:	60f8      	str	r0, [r7, #12]
 8001870:	60b9      	str	r1, [r7, #8]
 8001872:	607a      	str	r2, [r7, #4]
 8001874:	603b      	str	r3, [r7, #0]
	for (int i = 0; i < 48; i += 3) {
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
 800187a:	e013      	b.n	80018a4 <shiftLightsInit+0x3c>
		ledcolors[i] = 0;
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	4413      	add	r3, r2
 8001882:	2200      	movs	r2, #0
 8001884:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 1] = 0;
 8001886:	69fb      	ldr	r3, [r7, #28]
 8001888:	3301      	adds	r3, #1
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	4413      	add	r3, r2
 800188e:	2200      	movs	r2, #0
 8001890:	701a      	strb	r2, [r3, #0]
		ledcolors[i + 2] = 255;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	3302      	adds	r3, #2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	4413      	add	r3, r2
 800189a:	22ff      	movs	r2, #255	@ 0xff
 800189c:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < 48; i += 3) {
 800189e:	69fb      	ldr	r3, [r7, #28]
 80018a0:	3303      	adds	r3, #3
 80018a2:	61fb      	str	r3, [r7, #28]
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	2b2f      	cmp	r3, #47	@ 0x2f
 80018a8:	dde8      	ble.n	800187c <shiftLightsInit+0x14>
	}
	for (int i = 0; i < 48; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	61bb      	str	r3, [r7, #24]
 80018ae:	e02a      	b.n	8001906 <shiftLightsInit+0x9e>
		for (int j = 0; j < 8; j++) {
 80018b0:	2300      	movs	r3, #0
 80018b2:	617b      	str	r3, [r7, #20]
 80018b4:	e021      	b.n	80018fa <shiftLightsInit+0x92>
			if ((ledcolors[i] << j) & 128) {
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	687a      	ldr	r2, [r7, #4]
 80018ba:	4413      	add	r3, r2
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d009      	beq.n	80018e2 <shiftLightsInit+0x7a>
				ledbytes[(i * 8) + j] = 70;
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	00da      	lsls	r2, r3, #3
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	4413      	add	r3, r2
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	683a      	ldr	r2, [r7, #0]
 80018da:	4413      	add	r3, r2
 80018dc:	2246      	movs	r2, #70	@ 0x46
 80018de:	801a      	strh	r2, [r3, #0]
 80018e0:	e008      	b.n	80018f4 <shiftLightsInit+0x8c>
			} else {
				ledbytes[(i * 8) + j] = 35;
 80018e2:	69bb      	ldr	r3, [r7, #24]
 80018e4:	00da      	lsls	r2, r3, #3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	683a      	ldr	r2, [r7, #0]
 80018ee:	4413      	add	r3, r2
 80018f0:	2223      	movs	r2, #35	@ 0x23
 80018f2:	801a      	strh	r2, [r3, #0]
		for (int j = 0; j < 8; j++) {
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3301      	adds	r3, #1
 80018f8:	617b      	str	r3, [r7, #20]
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b07      	cmp	r3, #7
 80018fe:	ddda      	ble.n	80018b6 <shiftLightsInit+0x4e>
	for (int i = 0; i < 48; i++) {
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	3301      	adds	r3, #1
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
 8001908:	2b2f      	cmp	r3, #47	@ 0x2f
 800190a:	ddd1      	ble.n	80018b0 <shiftLightsInit+0x48>
			}
		}
	}
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 800190c:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001910:	613b      	str	r3, [r7, #16]
 8001912:	e008      	b.n	8001926 <shiftLightsInit+0xbe>
		ledbytes[i] = 0;
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	683a      	ldr	r2, [r7, #0]
 800191a:	4413      	add	r3, r2
 800191c:	2200      	movs	r2, #0
 800191e:	801a      	strh	r2, [r3, #0]
	for (int i = PWM_BUFFER_SIZE; i < (PWM_BUFFER_SIZE + 150); i++) {
 8001920:	693b      	ldr	r3, [r7, #16]
 8001922:	3301      	adds	r3, #1
 8001924:	613b      	str	r3, [r7, #16]
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	f240 2215 	movw	r2, #533	@ 0x215
 800192c:	4293      	cmp	r3, r2
 800192e:	ddf1      	ble.n	8001914 <shiftLightsInit+0xac>
	}
	HAL_TIM_PWM_Start_DMA(htim, Channel, (uint32_t *)ledbytes, PWM_BUFFER_SIZE + 150);
 8001930:	f240 2316 	movw	r3, #534	@ 0x216
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	68b9      	ldr	r1, [r7, #8]
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f006 fa2b 	bl	8007d94 <HAL_TIM_PWM_Start_DMA>
	while(!datasentflag) {};
 800193e:	bf00      	nop
 8001940:	4b06      	ldr	r3, [pc, #24]	@ (800195c <shiftLightsInit+0xf4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0fb      	beq.n	8001940 <shiftLightsInit+0xd8>
	datasentflag = 0;
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <shiftLightsInit+0xf4>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]

	ledbytes = 0;
 800194e:	2300      	movs	r3, #0
 8001950:	603b      	str	r3, [r7, #0]
}
 8001952:	bf00      	nop
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	200001b8 	.word	0x200001b8

08001960 <HAL_TIM_PWM_PulseFinishedCallback>:

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop_DMA(&htim4, TIM_CHANNEL_1);
 8001968:	2100      	movs	r1, #0
 800196a:	4805      	ldr	r0, [pc, #20]	@ (8001980 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 800196c:	f006 fbc2 	bl	80080f4 <HAL_TIM_PWM_Stop_DMA>
	datasentflag = 1;
 8001970:	4b04      	ldr	r3, [pc, #16]	@ (8001984 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8001972:	2201      	movs	r2, #1
 8001974:	601a      	str	r2, [r3, #0]
}
 8001976:	bf00      	nop
 8001978:	3708      	adds	r7, #8
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	200002d4 	.word	0x200002d4
 8001984:	200001b8 	.word	0x200001b8

08001988 <UpdateShiftLights>:


void UpdateShiftLights(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes, int current_rpm, int * RPM_thresholds) {
 8001988:	b580      	push	{r7, lr}
 800198a:	b08a      	sub	sp, #40	@ 0x28
 800198c:	af04      	add	r7, sp, #16
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	60b9      	str	r1, [r7, #8]
 8001992:	607a      	str	r2, [r7, #4]
 8001994:	603b      	str	r3, [r7, #0]
  if (current_rpm > 13000) {
 8001996:	6a3b      	ldr	r3, [r7, #32]
 8001998:	f243 22c8 	movw	r2, #13000	@ 0x32c8
 800199c:	4293      	cmp	r3, r2
 800199e:	dd06      	ble.n	80019ae <UpdateShiftLights+0x26>
	  startUp(htim, Channel, ledcolors, ledbytes);
 80019a0:	683b      	ldr	r3, [r7, #0]
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	68b9      	ldr	r1, [r7, #8]
 80019a6:	68f8      	ldr	r0, [r7, #12]
 80019a8:	f000 f8b6 	bl	8001b18 <startUp>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
	    }
    }
  }

}
 80019ac:	e02a      	b.n	8001a04 <UpdateShiftLights+0x7c>
	for (int i = 2; i < 14; i++) {
 80019ae:	2302      	movs	r3, #2
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e024      	b.n	80019fe <UpdateShiftLights+0x76>
	    if (current_rpm >= RPM_thresholds[i - 2]) {
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80019ba:	3b02      	subs	r3, #2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80019c0:	4413      	add	r3, r2
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6a3a      	ldr	r2, [r7, #32]
 80019c6:	429a      	cmp	r2, r3
 80019c8:	db08      	blt.n	80019dc <UpdateShiftLights+0x54>
	    	lightOn(htim, Channel,ledcolors, ledbytes, i);
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	687a      	ldr	r2, [r7, #4]
 80019d2:	68b9      	ldr	r1, [r7, #8]
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	f000 f819 	bl	8001a0c <lightOn>
 80019da:	e00d      	b.n	80019f8 <UpdateShiftLights+0x70>
	    	setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, i);
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	9303      	str	r3, [sp, #12]
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	9302      	str	r3, [sp, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	9301      	str	r3, [sp, #4]
 80019e8:	2300      	movs	r3, #0
 80019ea:	9300      	str	r3, [sp, #0]
 80019ec:	2300      	movs	r3, #0
 80019ee:	2200      	movs	r2, #0
 80019f0:	68b9      	ldr	r1, [r7, #8]
 80019f2:	68f8      	ldr	r0, [r7, #12]
 80019f4:	f7ff febc 	bl	8001770 <setColor>
	for (int i = 2; i < 14; i++) {
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	3301      	adds	r3, #1
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	697b      	ldr	r3, [r7, #20]
 8001a00:	2b0d      	cmp	r3, #13
 8001a02:	ddd7      	ble.n	80019b4 <UpdateShiftLights+0x2c>
}
 8001a04:	bf00      	nop
 8001a06:	3718      	adds	r7, #24
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <lightOn>:

void lightOn(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors,
		uint16_t *ledbytes,int index) {
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b088      	sub	sp, #32
 8001a10:	af04      	add	r7, sp, #16
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	60b9      	str	r1, [r7, #8]
 8001a16:	607a      	str	r2, [r7, #4]
 8001a18:	603b      	str	r3, [r7, #0]
	if (index == 13) {
 8001a1a:	69bb      	ldr	r3, [r7, #24]
 8001a1c:	2b0d      	cmp	r3, #13
 8001a1e:	d140      	bne.n	8001aa2 <lightOn+0x96>
		shiftLightsInit(htim, Channel, ledcolors, ledbytes);
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f7ff ff1e 	bl	8001868 <shiftLightsInit>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 0);
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	9303      	str	r3, [sp, #12]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	9302      	str	r3, [sp, #8]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	9301      	str	r3, [sp, #4]
 8001a38:	2300      	movs	r3, #0
 8001a3a:	9300      	str	r3, [sp, #0]
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	2200      	movs	r2, #0
 8001a40:	2100      	movs	r1, #0
 8001a42:	4834      	ldr	r0, [pc, #208]	@ (8001b14 <lightOn+0x108>)
 8001a44:	f7ff fe94 	bl	8001770 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 1);
 8001a48:	2301      	movs	r3, #1
 8001a4a:	9303      	str	r3, [sp, #12]
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	9302      	str	r3, [sp, #8]
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	9301      	str	r3, [sp, #4]
 8001a54:	2300      	movs	r3, #0
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	2300      	movs	r3, #0
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	482d      	ldr	r0, [pc, #180]	@ (8001b14 <lightOn+0x108>)
 8001a60:	f7ff fe86 	bl	8001770 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 14);
 8001a64:	230e      	movs	r3, #14
 8001a66:	9303      	str	r3, [sp, #12]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	9302      	str	r3, [sp, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	9301      	str	r3, [sp, #4]
 8001a70:	2300      	movs	r3, #0
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4826      	ldr	r0, [pc, #152]	@ (8001b14 <lightOn+0x108>)
 8001a7c:	f7ff fe78 	bl	8001770 <setColor>
		setColor(&htim4, TIM_CHANNEL_1, 0, 0, 0, ledcolors, ledbytes, 15);
 8001a80:	230f      	movs	r3, #15
 8001a82:	9303      	str	r3, [sp, #12]
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	9302      	str	r3, [sp, #8]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	9301      	str	r3, [sp, #4]
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	9300      	str	r3, [sp, #0]
 8001a90:	2300      	movs	r3, #0
 8001a92:	2200      	movs	r2, #0
 8001a94:	2100      	movs	r1, #0
 8001a96:	481f      	ldr	r0, [pc, #124]	@ (8001b14 <lightOn+0x108>)
 8001a98:	f7ff fe6a 	bl	8001770 <setColor>
		HAL_Delay(5);
 8001a9c:	2005      	movs	r0, #5
 8001a9e:	f002 fcb7 	bl	8004410 <HAL_Delay>
	}
	if (index < 6) {
 8001aa2:	69bb      	ldr	r3, [r7, #24]
 8001aa4:	2b05      	cmp	r3, #5
 8001aa6:	dc0e      	bgt.n	8001ac6 <lightOn+0xba>
		setColor(htim, Channel, 255, 0, 0, ledcolors, ledbytes, index);
 8001aa8:	69bb      	ldr	r3, [r7, #24]
 8001aaa:	9303      	str	r3, [sp, #12]
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	9302      	str	r3, [sp, #8]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	9301      	str	r3, [sp, #4]
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	9300      	str	r3, [sp, #0]
 8001ab8:	2300      	movs	r3, #0
 8001aba:	22ff      	movs	r2, #255	@ 0xff
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	68f8      	ldr	r0, [r7, #12]
 8001ac0:	f7ff fe56 	bl	8001770 <setColor>
	} else if (index < 10) {
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
	} else if (index < 14){
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
	}
}
 8001ac4:	e022      	b.n	8001b0c <lightOn+0x100>
	} else if (index < 10) {
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b09      	cmp	r3, #9
 8001aca:	dc0e      	bgt.n	8001aea <lightOn+0xde>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, index);
 8001acc:	69bb      	ldr	r3, [r7, #24]
 8001ace:	9303      	str	r3, [sp, #12]
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	9302      	str	r3, [sp, #8]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	9301      	str	r3, [sp, #4]
 8001ad8:	2300      	movs	r3, #0
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	23ff      	movs	r3, #255	@ 0xff
 8001ade:	2200      	movs	r2, #0
 8001ae0:	68b9      	ldr	r1, [r7, #8]
 8001ae2:	68f8      	ldr	r0, [r7, #12]
 8001ae4:	f7ff fe44 	bl	8001770 <setColor>
}
 8001ae8:	e010      	b.n	8001b0c <lightOn+0x100>
	} else if (index < 14){
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	2b0d      	cmp	r3, #13
 8001aee:	dc0d      	bgt.n	8001b0c <lightOn+0x100>
		setColor(htim, Channel, 0, 0, 255, ledcolors, ledbytes, index);
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	9303      	str	r3, [sp, #12]
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	9302      	str	r3, [sp, #8]
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	9301      	str	r3, [sp, #4]
 8001afc:	23ff      	movs	r3, #255	@ 0xff
 8001afe:	9300      	str	r3, [sp, #0]
 8001b00:	2300      	movs	r3, #0
 8001b02:	2200      	movs	r2, #0
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	68f8      	ldr	r0, [r7, #12]
 8001b08:	f7ff fe32 	bl	8001770 <setColor>
}
 8001b0c:	bf00      	nop
 8001b0e:	3710      	adds	r7, #16
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200002d4 	.word	0x200002d4

08001b18 <startUp>:

void startUp(TIM_HandleTypeDef *htim, uint32_t Channel, uint8_t *ledcolors, uint16_t *ledbytes) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b08c      	sub	sp, #48	@ 0x30
 8001b1c:	af04      	add	r7, sp, #16
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	60b9      	str	r1, [r7, #8]
 8001b22:	607a      	str	r2, [r7, #4]
 8001b24:	603b      	str	r3, [r7, #0]
	int middle = 7;
 8001b26:	2307      	movs	r3, #7
 8001b28:	617b      	str	r3, [r7, #20]
	for (int i = 0; i < 6; i++) {
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	61fb      	str	r3, [r7, #28]
 8001b2e:	e026      	b.n	8001b7e <startUp+0x66>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle - i);
 8001b30:	697a      	ldr	r2, [r7, #20]
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	9303      	str	r3, [sp, #12]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	9302      	str	r3, [sp, #8]
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	9301      	str	r3, [sp, #4]
 8001b40:	2300      	movs	r3, #0
 8001b42:	9300      	str	r3, [sp, #0]
 8001b44:	23ff      	movs	r3, #255	@ 0xff
 8001b46:	2200      	movs	r2, #0
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f7ff fe10 	bl	8001770 <setColor>
		setColor(htim, Channel, 0, 255, 0, ledcolors, ledbytes, middle + i + 1);
 8001b50:	697a      	ldr	r2, [r7, #20]
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	4413      	add	r3, r2
 8001b56:	3301      	adds	r3, #1
 8001b58:	9303      	str	r3, [sp, #12]
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	9302      	str	r3, [sp, #8]
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	9301      	str	r3, [sp, #4]
 8001b62:	2300      	movs	r3, #0
 8001b64:	9300      	str	r3, [sp, #0]
 8001b66:	23ff      	movs	r3, #255	@ 0xff
 8001b68:	2200      	movs	r2, #0
 8001b6a:	68b9      	ldr	r1, [r7, #8]
 8001b6c:	68f8      	ldr	r0, [r7, #12]
 8001b6e:	f7ff fdff 	bl	8001770 <setColor>
		HAL_Delay(20);
 8001b72:	2014      	movs	r0, #20
 8001b74:	f002 fc4c 	bl	8004410 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	69fb      	ldr	r3, [r7, #28]
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	ddd5      	ble.n	8001b30 <startUp+0x18>
	}
	for (int i = 0; i < 6; i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	61bb      	str	r3, [r7, #24]
 8001b88:	e026      	b.n	8001bd8 <startUp+0xc0>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle - i);
 8001b8a:	697a      	ldr	r2, [r7, #20]
 8001b8c:	69bb      	ldr	r3, [r7, #24]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	9303      	str	r3, [sp, #12]
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	9302      	str	r3, [sp, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	9301      	str	r3, [sp, #4]
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	9300      	str	r3, [sp, #0]
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	68f8      	ldr	r0, [r7, #12]
 8001ba6:	f7ff fde3 	bl	8001770 <setColor>
		setColor(htim, Channel, 0, 0, 0, ledcolors, ledbytes, middle + i + 1);
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	4413      	add	r3, r2
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	9303      	str	r3, [sp, #12]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	9302      	str	r3, [sp, #8]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	68b9      	ldr	r1, [r7, #8]
 8001bc6:	68f8      	ldr	r0, [r7, #12]
 8001bc8:	f7ff fdd2 	bl	8001770 <setColor>
		HAL_Delay(20);
 8001bcc:	2014      	movs	r0, #20
 8001bce:	f002 fc1f 	bl	8004410 <HAL_Delay>
	for (int i = 0; i < 6; i++) {
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	61bb      	str	r3, [r7, #24]
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	2b05      	cmp	r3, #5
 8001bdc:	ddd5      	ble.n	8001b8a <startUp+0x72>
	}
}
 8001bde:	bf00      	nop
 8001be0:	bf00      	nop
 8001be2:	3720      	adds	r7, #32
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <MX_SPI1_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi1_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001bec:	4b18      	ldr	r3, [pc, #96]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001bee:	4a19      	ldr	r2, [pc, #100]	@ (8001c54 <MX_SPI1_Init+0x6c>)
 8001bf0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001bf2:	4b17      	ldr	r3, [pc, #92]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001bf4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001bf8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001bfa:	4b15      	ldr	r3, [pc, #84]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001c00:	4b13      	ldr	r3, [pc, #76]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c02:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c06:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c08:	4b11      	ldr	r3, [pc, #68]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001c14:	4b0e      	ldr	r3, [pc, #56]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c16:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c1a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c1e:	2208      	movs	r2, #8
 8001c20:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c22:	4b0b      	ldr	r3, [pc, #44]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c24:	2200      	movs	r2, #0
 8001c26:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c28:	4b09      	ldr	r3, [pc, #36]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c2e:	4b08      	ldr	r3, [pc, #32]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001c34:	4b06      	ldr	r3, [pc, #24]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c36:	220a      	movs	r2, #10
 8001c38:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001c3a:	4805      	ldr	r0, [pc, #20]	@ (8001c50 <MX_SPI1_Init+0x68>)
 8001c3c:	f005 f8e8 	bl	8006e10 <HAL_SPI_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_SPI1_Init+0x62>
  {
    Error_Handler();
 8001c46:	f7ff fd51 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001c4a:	bf00      	nop
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	200001bc 	.word	0x200001bc
 8001c54:	40013000 	.word	0x40013000

08001c58 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001c5c:	4b17      	ldr	r3, [pc, #92]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <MX_SPI2_Init+0x68>)
 8001c60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001c62:	4b16      	ldr	r3, [pc, #88]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c64:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001c68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001c6a:	4b14      	ldr	r3, [pc, #80]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001c70:	4b12      	ldr	r3, [pc, #72]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001c76:	4b11      	ldr	r3, [pc, #68]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001c7c:	4b0f      	ldr	r3, [pc, #60]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001c82:	4b0e      	ldr	r3, [pc, #56]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001c88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001c8a:	4b0c      	ldr	r3, [pc, #48]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c8c:	2220      	movs	r2, #32
 8001c8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001c90:	4b0a      	ldr	r3, [pc, #40]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001c96:	4b09      	ldr	r3, [pc, #36]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c9c:	4b07      	ldr	r3, [pc, #28]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001ca2:	4b06      	ldr	r3, [pc, #24]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001ca4:	220a      	movs	r2, #10
 8001ca6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ca8:	4804      	ldr	r0, [pc, #16]	@ (8001cbc <MX_SPI2_Init+0x64>)
 8001caa:	f005 f8b1 	bl	8006e10 <HAL_SPI_Init>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001cb4:	f7ff fd1a 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001cb8:	bf00      	nop
 8001cba:	bd80      	pop	{r7, pc}
 8001cbc:	20000214 	.word	0x20000214
 8001cc0:	40003800 	.word	0x40003800

08001cc4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	@ 0x30
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ccc:	f107 031c 	add.w	r3, r7, #28
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	605a      	str	r2, [r3, #4]
 8001cd6:	609a      	str	r2, [r3, #8]
 8001cd8:	60da      	str	r2, [r3, #12]
 8001cda:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	4a4a      	ldr	r2, [pc, #296]	@ (8001e0c <HAL_SPI_MspInit+0x148>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d15c      	bne.n	8001da0 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
 8001cea:	4b49      	ldr	r3, [pc, #292]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cee:	4a48      	ldr	r2, [pc, #288]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001cf0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001cf4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cf6:	4b46      	ldr	r3, [pc, #280]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cfe:	61bb      	str	r3, [r7, #24]
 8001d00:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	617b      	str	r3, [r7, #20]
 8001d06:	4b42      	ldr	r3, [pc, #264]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d0a:	4a41      	ldr	r2, [pc, #260]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d12:	4b3f      	ldr	r3, [pc, #252]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d16:	f003 0301 	and.w	r3, r3, #1
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001d1e:	23a0      	movs	r3, #160	@ 0xa0
 8001d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d22:	2302      	movs	r3, #2
 8001d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d26:	2300      	movs	r3, #0
 8001d28:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d2e:	2305      	movs	r3, #5
 8001d30:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d32:	f107 031c 	add.w	r3, r7, #28
 8001d36:	4619      	mov	r1, r3
 8001d38:	4836      	ldr	r0, [pc, #216]	@ (8001e14 <HAL_SPI_MspInit+0x150>)
 8001d3a:	f003 f831 	bl	8004da0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001d3e:	4b36      	ldr	r3, [pc, #216]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d40:	4a36      	ldr	r2, [pc, #216]	@ (8001e1c <HAL_SPI_MspInit+0x158>)
 8001d42:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001d44:	4b34      	ldr	r3, [pc, #208]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d46:	f04f 62c0 	mov.w	r2, #100663296	@ 0x6000000
 8001d4a:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d4c:	4b32      	ldr	r3, [pc, #200]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d4e:	2240      	movs	r2, #64	@ 0x40
 8001d50:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d52:	4b31      	ldr	r3, [pc, #196]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d58:	4b2f      	ldr	r3, [pc, #188]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5e:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d60:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d62:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d66:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d68:	4b2b      	ldr	r3, [pc, #172]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d6a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001d70:	4b29      	ldr	r3, [pc, #164]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d76:	4b28      	ldr	r3, [pc, #160]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7c:	4b26      	ldr	r3, [pc, #152]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001d82:	4825      	ldr	r0, [pc, #148]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d84:	f002 fc7a 	bl	800467c <HAL_DMA_Init>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8001d8e:	f7ff fcad 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	4a20      	ldr	r2, [pc, #128]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d96:	649a      	str	r2, [r3, #72]	@ 0x48
 8001d98:	4a1f      	ldr	r2, [pc, #124]	@ (8001e18 <HAL_SPI_MspInit+0x154>)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001d9e:	e031      	b.n	8001e04 <HAL_SPI_MspInit+0x140>
  else if(spiHandle->Instance==SPI2)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_SPI_MspInit+0x15c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d12c      	bne.n	8001e04 <HAL_SPI_MspInit+0x140>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
 8001dae:	4b18      	ldr	r3, [pc, #96]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001db0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db2:	4a17      	ldr	r2, [pc, #92]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001db8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dba:	4b15      	ldr	r3, [pc, #84]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dc2:	613b      	str	r3, [r7, #16]
 8001dc4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	60fb      	str	r3, [r7, #12]
 8001dca:	4b11      	ldr	r3, [pc, #68]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dce:	4a10      	ldr	r2, [pc, #64]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001dd0:	f043 0302 	orr.w	r3, r3, #2
 8001dd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8001e10 <HAL_SPI_MspInit+0x14c>)
 8001dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dda:	f003 0302 	and.w	r3, r3, #2
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001de2:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de8:	2302      	movs	r3, #2
 8001dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001df4:	2305      	movs	r3, #5
 8001df6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4619      	mov	r1, r3
 8001dfe:	4809      	ldr	r0, [pc, #36]	@ (8001e24 <HAL_SPI_MspInit+0x160>)
 8001e00:	f002 ffce 	bl	8004da0 <HAL_GPIO_Init>
}
 8001e04:	bf00      	nop
 8001e06:	3730      	adds	r7, #48	@ 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	40013000 	.word	0x40013000
 8001e10:	40023800 	.word	0x40023800
 8001e14:	40020000 	.word	0x40020000
 8001e18:	2000026c 	.word	0x2000026c
 8001e1c:	40026458 	.word	0x40026458
 8001e20:	40003800 	.word	0x40003800
 8001e24:	40020400 	.word	0x40020400

08001e28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	607b      	str	r3, [r7, #4]
 8001e32:	4b10      	ldr	r3, [pc, #64]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e36:	4a0f      	ldr	r2, [pc, #60]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e46:	607b      	str	r3, [r7, #4]
 8001e48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	603b      	str	r3, [r7, #0]
 8001e4e:	4b09      	ldr	r3, [pc, #36]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e52:	4a08      	ldr	r2, [pc, #32]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e58:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e5a:	4b06      	ldr	r3, [pc, #24]	@ (8001e74 <HAL_MspInit+0x4c>)
 8001e5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e62:	603b      	str	r3, [r7, #0]
 8001e64:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e66:	bf00      	nop
 8001e68:	370c      	adds	r7, #12
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40023800 	.word	0x40023800

08001e78 <SDTimer_Handler>:
extern volatile uint16_t Timer1, Timer2;
volatile uint8_t FatFsCnt = 0;


void SDTimer_Handler(void)
{
 8001e78:	b480      	push	{r7}
 8001e7a:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 8001e7c:	4b0e      	ldr	r3, [pc, #56]	@ (8001eb8 <SDTimer_Handler+0x40>)
 8001e7e:	881b      	ldrh	r3, [r3, #0]
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d006      	beq.n	8001e94 <SDTimer_Handler+0x1c>
    Timer1--;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	@ (8001eb8 <SDTimer_Handler+0x40>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	b29b      	uxth	r3, r3
 8001e8c:	3b01      	subs	r3, #1
 8001e8e:	b29a      	uxth	r2, r3
 8001e90:	4b09      	ldr	r3, [pc, #36]	@ (8001eb8 <SDTimer_Handler+0x40>)
 8001e92:	801a      	strh	r2, [r3, #0]

  if(Timer2 > 0)
 8001e94:	4b09      	ldr	r3, [pc, #36]	@ (8001ebc <SDTimer_Handler+0x44>)
 8001e96:	881b      	ldrh	r3, [r3, #0]
 8001e98:	b29b      	uxth	r3, r3
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <SDTimer_Handler+0x34>
    Timer2--;
 8001e9e:	4b07      	ldr	r3, [pc, #28]	@ (8001ebc <SDTimer_Handler+0x44>)
 8001ea0:	881b      	ldrh	r3, [r3, #0]
 8001ea2:	b29b      	uxth	r3, r3
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b04      	ldr	r3, [pc, #16]	@ (8001ebc <SDTimer_Handler+0x44>)
 8001eaa:	801a      	strh	r2, [r3, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	200001a0 	.word	0x200001a0
 8001ebc:	200001a2 	.word	0x200001a2

08001ec0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ec4:	bf00      	nop
 8001ec6:	e7fd      	b.n	8001ec4 <NMI_Handler+0x4>

08001ec8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ecc:	bf00      	nop
 8001ece:	e7fd      	b.n	8001ecc <HardFault_Handler+0x4>

08001ed0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ed4:	bf00      	nop
 8001ed6:	e7fd      	b.n	8001ed4 <MemManage_Handler+0x4>

08001ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001edc:	bf00      	nop
 8001ede:	e7fd      	b.n	8001edc <BusFault_Handler+0x4>

08001ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ee4:	bf00      	nop
 8001ee6:	e7fd      	b.n	8001ee4 <UsageFault_Handler+0x4>

08001ee8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ee8:	b480      	push	{r7}
 8001eea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001eec:	bf00      	nop
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr

08001ef6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ef6:	b480      	push	{r7}
 8001ef8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f08:	bf00      	nop
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	FatFsCnt++;
 8001f18:	4b0a      	ldr	r3, [pc, #40]	@ (8001f44 <SysTick_Handler+0x30>)
 8001f1a:	781b      	ldrb	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4b08      	ldr	r3, [pc, #32]	@ (8001f44 <SysTick_Handler+0x30>)
 8001f24:	701a      	strb	r2, [r3, #0]
	if(FatFsCnt >= 10)
 8001f26:	4b07      	ldr	r3, [pc, #28]	@ (8001f44 <SysTick_Handler+0x30>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	b2db      	uxtb	r3, r3
 8001f2c:	2b09      	cmp	r3, #9
 8001f2e:	d904      	bls.n	8001f3a <SysTick_Handler+0x26>
	{
		FatFsCnt = 0;
 8001f30:	4b04      	ldr	r3, [pc, #16]	@ (8001f44 <SysTick_Handler+0x30>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	701a      	strb	r2, [r3, #0]
		SDTimer_Handler();
 8001f36:	f7ff ff9f 	bl	8001e78 <SDTimer_Handler>
	}

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f3a:	f002 fa49 	bl	80043d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200002cc 	.word	0x200002cc

08001f48 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_ch1);
 8001f4c:	4802      	ldr	r0, [pc, #8]	@ (8001f58 <DMA1_Stream0_IRQHandler+0x10>)
 8001f4e:	f002 fcbd 	bl	80048cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f52:	bf00      	nop
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	2000031c 	.word	0x2000031c

08001f5c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button1INT_Pin);
 8001f60:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8001f64:	f003 f8ba 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button2INT_Pin);
 8001f68:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001f6c:	f003 f8b6 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(button3INT_Pin);
 8001f78:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8001f7c:	f003 f8ae 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(button4INT_Pin);
 8001f80:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001f84:	f003 f8aa 	bl	80050dc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001f88:	bf00      	nop
 8001f8a:	bd80      	pop	{r7, pc}

08001f8c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f90:	4802      	ldr	r0, [pc, #8]	@ (8001f9c <DMA2_Stream3_IRQHandler+0x10>)
 8001f92:	f002 fc9b 	bl	80048cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	2000026c 	.word	0x2000026c

08001fa0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001fa4:	4802      	ldr	r0, [pc, #8]	@ (8001fb0 <OTG_FS_IRQHandler+0x10>)
 8001fa6:	f003 f9f5 	bl	8005394 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001faa:	bf00      	nop
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	20001108 	.word	0x20001108

08001fb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  return 1;
 8001fb8:	2301      	movs	r3, #1
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr

08001fc4 <_kill>:

int _kill(int pid, int sig)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fce:	f00d fb25 	bl	800f61c <__errno>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	2216      	movs	r2, #22
 8001fd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3708      	adds	r7, #8
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd80      	pop	{r7, pc}

08001fe4 <_exit>:

void _exit (int status)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b082      	sub	sp, #8
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f7ff ffe7 	bl	8001fc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001ff6:	bf00      	nop
 8001ff8:	e7fd      	b.n	8001ff6 <_exit+0x12>
	...

08001ffc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b086      	sub	sp, #24
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002004:	4a14      	ldr	r2, [pc, #80]	@ (8002058 <_sbrk+0x5c>)
 8002006:	4b15      	ldr	r3, [pc, #84]	@ (800205c <_sbrk+0x60>)
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800200c:	697b      	ldr	r3, [r7, #20]
 800200e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002010:	4b13      	ldr	r3, [pc, #76]	@ (8002060 <_sbrk+0x64>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d102      	bne.n	800201e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002018:	4b11      	ldr	r3, [pc, #68]	@ (8002060 <_sbrk+0x64>)
 800201a:	4a12      	ldr	r2, [pc, #72]	@ (8002064 <_sbrk+0x68>)
 800201c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800201e:	4b10      	ldr	r3, [pc, #64]	@ (8002060 <_sbrk+0x64>)
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	4413      	add	r3, r2
 8002026:	693a      	ldr	r2, [r7, #16]
 8002028:	429a      	cmp	r2, r3
 800202a:	d207      	bcs.n	800203c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800202c:	f00d faf6 	bl	800f61c <__errno>
 8002030:	4603      	mov	r3, r0
 8002032:	220c      	movs	r2, #12
 8002034:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002036:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800203a:	e009      	b.n	8002050 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800203c:	4b08      	ldr	r3, [pc, #32]	@ (8002060 <_sbrk+0x64>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <_sbrk+0x64>)
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4413      	add	r3, r2
 800204a:	4a05      	ldr	r2, [pc, #20]	@ (8002060 <_sbrk+0x64>)
 800204c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3718      	adds	r7, #24
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	20010000 	.word	0x20010000
 800205c:	00000400 	.word	0x00000400
 8002060:	200002d0 	.word	0x200002d0
 8002064:	20001958 	.word	0x20001958

08002068 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800206c:	4b06      	ldr	r3, [pc, #24]	@ (8002088 <SystemInit+0x20>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	4a05      	ldr	r2, [pc, #20]	@ (8002088 <SystemInit+0x20>)
 8002074:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002078:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800207c:	bf00      	nop
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <MX_TIM4_Init>:
TIM_HandleTypeDef htim4;
DMA_HandleTypeDef hdma_tim4_ch1;

/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08e      	sub	sp, #56	@ 0x38
 8002090:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002092:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020a0:	f107 0320 	add.w	r3, r7, #32
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]
 80020a8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020aa:	1d3b      	adds	r3, r7, #4
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
 80020b8:	615a      	str	r2, [r3, #20]
 80020ba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80020bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020be:	4a2d      	ldr	r2, [pc, #180]	@ (8002174 <MX_TIM4_Init+0xe8>)
 80020c0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80020c2:	4b2b      	ldr	r3, [pc, #172]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80020c8:	4b29      	ldr	r3, [pc, #164]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 105;
 80020ce:	4b28      	ldr	r3, [pc, #160]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020d0:	2269      	movs	r2, #105	@ 0x69
 80020d2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80020d4:	4b26      	ldr	r3, [pc, #152]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80020da:	4b25      	ldr	r3, [pc, #148]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020dc:	2200      	movs	r2, #0
 80020de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80020e0:	4823      	ldr	r0, [pc, #140]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020e2:	f005 fdaf 	bl	8007c44 <HAL_TIM_Base_Init>
 80020e6:	4603      	mov	r3, r0
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d001      	beq.n	80020f0 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80020ec:	f7ff fafe 	bl	80016ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80020f0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80020f4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80020f6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80020fa:	4619      	mov	r1, r3
 80020fc:	481c      	ldr	r0, [pc, #112]	@ (8002170 <MX_TIM4_Init+0xe4>)
 80020fe:	f006 f981 	bl	8008404 <HAL_TIM_ConfigClockSource>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 8002108:	f7ff faf0 	bl	80016ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800210c:	4818      	ldr	r0, [pc, #96]	@ (8002170 <MX_TIM4_Init+0xe4>)
 800210e:	f005 fde8 	bl	8007ce2 <HAL_TIM_PWM_Init>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 8002118:	f7ff fae8 	bl	80016ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800211c:	2300      	movs	r3, #0
 800211e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002120:	2300      	movs	r3, #0
 8002122:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002124:	f107 0320 	add.w	r3, r7, #32
 8002128:	4619      	mov	r1, r3
 800212a:	4811      	ldr	r0, [pc, #68]	@ (8002170 <MX_TIM4_Init+0xe4>)
 800212c:	f006 fdee 	bl	8008d0c <HAL_TIMEx_MasterConfigSynchronization>
 8002130:	4603      	mov	r3, r0
 8002132:	2b00      	cmp	r3, #0
 8002134:	d001      	beq.n	800213a <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 8002136:	f7ff fad9 	bl	80016ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800213a:	2360      	movs	r3, #96	@ 0x60
 800213c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002142:	2300      	movs	r3, #0
 8002144:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002146:	2300      	movs	r3, #0
 8002148:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	2200      	movs	r2, #0
 800214e:	4619      	mov	r1, r3
 8002150:	4807      	ldr	r0, [pc, #28]	@ (8002170 <MX_TIM4_Init+0xe4>)
 8002152:	f006 f895 	bl	8008280 <HAL_TIM_PWM_ConfigChannel>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 800215c:	f7ff fac6 	bl	80016ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8002160:	4803      	ldr	r0, [pc, #12]	@ (8002170 <MX_TIM4_Init+0xe4>)
 8002162:	f000 f85d 	bl	8002220 <HAL_TIM_MspPostInit>

}
 8002166:	bf00      	nop
 8002168:	3738      	adds	r7, #56	@ 0x38
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}
 800216e:	bf00      	nop
 8002170:	200002d4 	.word	0x200002d4
 8002174:	40000800 	.word	0x40000800

08002178 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b084      	sub	sp, #16
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a22      	ldr	r2, [pc, #136]	@ (8002210 <HAL_TIM_Base_MspInit+0x98>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d13d      	bne.n	8002206 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800218a:	2300      	movs	r3, #0
 800218c:	60fb      	str	r3, [r7, #12]
 800218e:	4b21      	ldr	r3, [pc, #132]	@ (8002214 <HAL_TIM_Base_MspInit+0x9c>)
 8002190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002192:	4a20      	ldr	r2, [pc, #128]	@ (8002214 <HAL_TIM_Base_MspInit+0x9c>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6413      	str	r3, [r2, #64]	@ 0x40
 800219a:	4b1e      	ldr	r3, [pc, #120]	@ (8002214 <HAL_TIM_Base_MspInit+0x9c>)
 800219c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800219e:	f003 0304 	and.w	r3, r3, #4
 80021a2:	60fb      	str	r3, [r7, #12]
 80021a4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 DMA Init */
    /* TIM4_CH1 Init */
    hdma_tim4_ch1.Instance = DMA1_Stream0;
 80021a6:	4b1c      	ldr	r3, [pc, #112]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021a8:	4a1c      	ldr	r2, [pc, #112]	@ (800221c <HAL_TIM_Base_MspInit+0xa4>)
 80021aa:	601a      	str	r2, [r3, #0]
    hdma_tim4_ch1.Init.Channel = DMA_CHANNEL_2;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021ae:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80021b2:	605a      	str	r2, [r3, #4]
    hdma_tim4_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021b4:	4b18      	ldr	r3, [pc, #96]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021b6:	2240      	movs	r2, #64	@ 0x40
 80021b8:	609a      	str	r2, [r3, #8]
    hdma_tim4_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021ba:	4b17      	ldr	r3, [pc, #92]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021bc:	2200      	movs	r2, #0
 80021be:	60da      	str	r2, [r3, #12]
    hdma_tim4_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80021c0:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021c2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80021c6:	611a      	str	r2, [r3, #16]
    hdma_tim4_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80021c8:	4b13      	ldr	r3, [pc, #76]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021ca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80021ce:	615a      	str	r2, [r3, #20]
    hdma_tim4_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80021d0:	4b11      	ldr	r3, [pc, #68]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021d6:	619a      	str	r2, [r3, #24]
    hdma_tim4_ch1.Init.Mode = DMA_NORMAL;
 80021d8:	4b0f      	ldr	r3, [pc, #60]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021da:	2200      	movs	r2, #0
 80021dc:	61da      	str	r2, [r3, #28]
    hdma_tim4_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	621a      	str	r2, [r3, #32]
    hdma_tim4_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021e4:	4b0c      	ldr	r3, [pc, #48]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim4_ch1) != HAL_OK)
 80021ea:	480b      	ldr	r0, [pc, #44]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021ec:	f002 fa46 	bl	800467c <HAL_DMA_Init>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 80021f6:	f7ff fa79 	bl	80016ec <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim4_ch1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	4a06      	ldr	r2, [pc, #24]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 80021fe:	625a      	str	r2, [r3, #36]	@ 0x24
 8002200:	4a05      	ldr	r2, [pc, #20]	@ (8002218 <HAL_TIM_Base_MspInit+0xa0>)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002206:	bf00      	nop
 8002208:	3710      	adds	r7, #16
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40000800 	.word	0x40000800
 8002214:	40023800 	.word	0x40023800
 8002218:	2000031c 	.word	0x2000031c
 800221c:	40026010 	.word	0x40026010

08002220 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b088      	sub	sp, #32
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002228:	f107 030c 	add.w	r3, r7, #12
 800222c:	2200      	movs	r2, #0
 800222e:	601a      	str	r2, [r3, #0]
 8002230:	605a      	str	r2, [r3, #4]
 8002232:	609a      	str	r2, [r3, #8]
 8002234:	60da      	str	r2, [r3, #12]
 8002236:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a12      	ldr	r2, [pc, #72]	@ (8002288 <HAL_TIM_MspPostInit+0x68>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d11d      	bne.n	800227e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002242:	2300      	movs	r3, #0
 8002244:	60bb      	str	r3, [r7, #8]
 8002246:	4b11      	ldr	r3, [pc, #68]	@ (800228c <HAL_TIM_MspPostInit+0x6c>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800224a:	4a10      	ldr	r2, [pc, #64]	@ (800228c <HAL_TIM_MspPostInit+0x6c>)
 800224c:	f043 0302 	orr.w	r3, r3, #2
 8002250:	6313      	str	r3, [r2, #48]	@ 0x30
 8002252:	4b0e      	ldr	r3, [pc, #56]	@ (800228c <HAL_TIM_MspPostInit+0x6c>)
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	60bb      	str	r3, [r7, #8]
 800225c:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800225e:	2340      	movs	r3, #64	@ 0x40
 8002260:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002262:	2302      	movs	r3, #2
 8002264:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002266:	2300      	movs	r3, #0
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800226e:	2302      	movs	r3, #2
 8002270:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002272:	f107 030c 	add.w	r3, r7, #12
 8002276:	4619      	mov	r1, r3
 8002278:	4805      	ldr	r0, [pc, #20]	@ (8002290 <HAL_TIM_MspPostInit+0x70>)
 800227a:	f002 fd91 	bl	8004da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3720      	adds	r7, #32
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40000800 	.word	0x40000800
 800228c:	40023800 	.word	0x40023800
 8002290:	40020400 	.word	0x40020400

08002294 <USB_Println>:
#include "usb_device.h"
#include <stdarg.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);

void USB_Println(const char *format, ...) {
 8002294:	b40f      	push	{r0, r1, r2, r3}
 8002296:	b580      	push	{r7, lr}
 8002298:	b0a2      	sub	sp, #136	@ 0x88
 800229a:	af00      	add	r7, sp, #0
    char buffer[128];  // Adjust size as needed
    va_list args;
    va_start(args, format);
 800229c:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80022a0:	607b      	str	r3, [r7, #4]
    vsnprintf(buffer, sizeof(buffer), format, args);
 80022a2:	f107 0008 	add.w	r0, r7, #8
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 80022ac:	2180      	movs	r1, #128	@ 0x80
 80022ae:	f00d f925 	bl	800f4fc <vsniprintf>
    va_end(args);

    CDC_Transmit_FS((uint8_t*)buffer, strlen(buffer));
 80022b2:	f107 0308 	add.w	r3, r7, #8
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7fd ff92 	bl	80001e0 <strlen>
 80022bc:	4603      	mov	r3, r0
 80022be:	b29a      	uxth	r2, r3
 80022c0:	f107 0308 	add.w	r3, r7, #8
 80022c4:	4611      	mov	r1, r2
 80022c6:	4618      	mov	r0, r3
 80022c8:	f00c fb58 	bl	800e97c <CDC_Transmit_FS>
}
 80022cc:	bf00      	nop
 80022ce:	3788      	adds	r7, #136	@ 0x88
 80022d0:	46bd      	mov	sp, r7
 80022d2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80022d6:	b004      	add	sp, #16
 80022d8:	4770      	bx	lr
	...

080022dc <transmitdma>:

#include "dmatransmitter.h"

volatile uint8_t spidatasentflag = 0;

void transmitdma(SPI_HandleTypeDef *hspi, uint16_t* buffer1, uint16_t size) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b084      	sub	sp, #16
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	80fb      	strh	r3, [r7, #6]
	spidatasentflag = 0;
 80022ea:	4b06      	ldr	r3, [pc, #24]	@ (8002304 <transmitdma+0x28>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
	HAL_SPI_Transmit_DMA(hspi, (uint8_t*)buffer1, size);
 80022f0:	88fb      	ldrh	r3, [r7, #6]
 80022f2:	461a      	mov	r2, r3
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f005 fa1a 	bl	8007730 <HAL_SPI_Transmit_DMA>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}
 8002304:	2000037c 	.word	0x2000037c

08002308 <HAL_SPI_TxCpltCallback>:

void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) {
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
	if (hspi->Instance == SPI1) {
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a05      	ldr	r2, [pc, #20]	@ (800232c <HAL_SPI_TxCpltCallback+0x24>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d102      	bne.n	8002320 <HAL_SPI_TxCpltCallback+0x18>
		spidatasentflag = 1;
 800231a:	4b05      	ldr	r3, [pc, #20]	@ (8002330 <HAL_SPI_TxCpltCallback+0x28>)
 800231c:	2201      	movs	r2, #1
 800231e:	701a      	strb	r2, [r3, #0]
	}
}
 8002320:	bf00      	nop
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr
 800232c:	40013000 	.word	0x40013000
 8002330:	2000037c 	.word	0x2000037c

08002334 <_ZN5SceneC1EPP13DisplayObjecth>:

/*
 * the following are Scene method definitions
 */

Scene::Scene(DisplayObject** objects, uint8_t count) {
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
 800233a:	60f8      	str	r0, [r7, #12]
 800233c:	60b9      	str	r1, [r7, #8]
 800233e:	4613      	mov	r3, r2
 8002340:	71fb      	strb	r3, [r7, #7]
	this->setScene(objects, count);
 8002342:	79fb      	ldrb	r3, [r7, #7]
 8002344:	461a      	mov	r2, r3
 8002346:	68b9      	ldr	r1, [r7, #8]
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f805 	bl	8002358 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	4618      	mov	r0, r3
 8002352:	3710      	adds	r7, #16
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <_ZN5Scene8setSceneEPP13DisplayObjecth>:

void Scene::setScene(DisplayObject** objects, uint8_t count) {
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	71fb      	strb	r3, [r7, #7]
	this->objects = objects;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	68ba      	ldr	r2, [r7, #8]
 800236a:	601a      	str	r2, [r3, #0]
	this->objectcount = count;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	79fa      	ldrb	r2, [r7, #7]
 8002370:	711a      	strb	r2, [r3, #4]
	this->changed = 1;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2201      	movs	r2, #1
 8002376:	715a      	strb	r2, [r3, #5]
	this->maxpriority = 0;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2200      	movs	r2, #0
 800237c:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 800237e:	2300      	movs	r3, #0
 8002380:	617b      	str	r3, [r7, #20]
 8002382:	e014      	b.n	80023ae <_ZN5Scene8setSceneEPP13DisplayObjecth+0x56>
		uint8_t objectpriority = objects[i]->getpriority();
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	68ba      	ldr	r2, [r7, #8]
 800238a:	4413      	add	r3, r2
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f9da 	bl	8002748 <_ZN13DisplayObject11getpriorityEv>
 8002394:	4603      	mov	r3, r0
 8002396:	74fb      	strb	r3, [r7, #19]
		if (objectpriority > this->maxpriority) {
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	799b      	ldrb	r3, [r3, #6]
 800239c:	7cfa      	ldrb	r2, [r7, #19]
 800239e:	429a      	cmp	r2, r3
 80023a0:	d902      	bls.n	80023a8 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x50>
			this->maxpriority = objectpriority;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	7cfa      	ldrb	r2, [r7, #19]
 80023a6:	719a      	strb	r2, [r3, #6]
	for (int i = 0; i < count; i++) {
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	79fb      	ldrb	r3, [r7, #7]
 80023b0:	697a      	ldr	r2, [r7, #20]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbe6      	blt.n	8002384 <_ZN5Scene8setSceneEPP13DisplayObjecth+0x2c>
		}
	}
}
 80023b6:	bf00      	nop
 80023b8:	bf00      	nop
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_ZN5Scene9drawSceneEv>:

void Scene::drawScene() {
 80023c0:	b590      	push	{r4, r7, lr}
 80023c2:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 80023c6:	b089      	sub	sp, #36	@ 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80023ce:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80023d2:	6018      	str	r0, [r3, #0]
	if (this->changed) {
 80023d4:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80023d8:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	795b      	ldrb	r3, [r3, #5]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	f000 813e 	beq.w	8002662 <_ZN5Scene9drawSceneEv+0x2a2>
		modifySpace(0, 0, SCREEN_WIDTH - 1, SCREEN_HEIGHT - 1);
 80023e6:	f240 133f 	movw	r3, #319	@ 0x13f
 80023ea:	f240 12df 	movw	r2, #479	@ 0x1df
 80023ee:	2100      	movs	r1, #0
 80023f0:	2000      	movs	r0, #0
 80023f2:	f000 fca8 	bl	8002d46 <modifySpace>
		startCommand(WRITE_COMMAND);
 80023f6:	202c      	movs	r0, #44	@ 0x2c
 80023f8:	f000 fbb2 	bl	8002b60 <startCommand>
		dataOrRegister(1);
 80023fc:	2001      	movs	r0, #1
 80023fe:	f000 fb6d 	bl	8002adc <dataOrRegister>
		uint8_t anychanges = 0;
 8002402:	2300      	movs	r3, #0
 8002404:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002408:	f102 021f 	add.w	r2, r2, #31
 800240c:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 800240e:	2300      	movs	r3, #0
 8002410:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002414:	f102 0218 	add.w	r2, r2, #24
 8002418:	6013      	str	r3, [r2, #0]
 800241a:	e028      	b.n	800246e <_ZN5Scene9drawSceneEv+0xae>
			anychanges += this->objects[i]->getChangeFlag();
 800241c:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002420:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800242c:	f103 0318 	add.w	r3, r3, #24
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4413      	add	r3, r2
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4618      	mov	r0, r3
 800243a:	f000 f9a0 	bl	800277e <_ZN13DisplayObject13getChangeFlagEv>
 800243e:	4603      	mov	r3, r0
 8002440:	461a      	mov	r2, r3
 8002442:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002446:	f103 031f 	add.w	r3, r3, #31
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	4413      	add	r3, r2
 800244e:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002452:	f102 021f 	add.w	r2, r2, #31
 8002456:	7013      	strb	r3, [r2, #0]
		for (int i = 0; i < this->objectcount; i++) {
 8002458:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800245c:	f103 0318 	add.w	r3, r3, #24
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	3301      	adds	r3, #1
 8002464:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002468:	f102 0218 	add.w	r2, r2, #24
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002472:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	791b      	ldrb	r3, [r3, #4]
 800247a:	461a      	mov	r2, r3
 800247c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002480:	f103 0318 	add.w	r3, r3, #24
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4293      	cmp	r3, r2
 8002488:	dbc8      	blt.n	800241c <_ZN5Scene9drawSceneEv+0x5c>
		}
		if (!anychanges) {
 800248a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800248e:	f103 031f 	add.w	r3, r3, #31
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80ec 	beq.w	8002672 <_ZN5Scene9drawSceneEv+0x2b2>
			return;
		}
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 800249a:	2300      	movs	r3, #0
 800249c:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024a0:	f102 0214 	add.w	r2, r2, #20
 80024a4:	6013      	str	r3, [r2, #0]
 80024a6:	e0d2      	b.n	800264e <_ZN5Scene9drawSceneEv+0x28e>
			uint16_t buffer[FRAMEBUFFER_SIZE] = { 0 };
 80024a8:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024ac:	f6a3 0318 	subw	r3, r3, #2072	@ 0x818
 80024b0:	4618      	mov	r0, r3
 80024b2:	f44f 4348 	mov.w	r3, #51200	@ 0xc800
 80024b6:	461a      	mov	r2, r3
 80024b8:	2100      	movs	r1, #0
 80024ba:	f00d f82d 	bl	800f518 <memset>
			const int startx = i * FRAMEBUFFER_WIDTH;
 80024be:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80024c2:	f103 0314 	add.w	r3, r3, #20
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	009b      	lsls	r3, r3, #2
 80024cc:	4413      	add	r3, r2
 80024ce:	011b      	lsls	r3, r3, #4
 80024d0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024d4:	f102 0208 	add.w	r2, r2, #8
 80024d8:	6013      	str	r3, [r2, #0]
			for (int j = 0; j <= this->maxpriority; j++) {
 80024da:	2300      	movs	r3, #0
 80024dc:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024e0:	f102 0210 	add.w	r2, r2, #16
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e084      	b.n	80025f2 <_ZN5Scene9drawSceneEv+0x232>
				for (int k = 0; k < this->objectcount; k++) {
 80024e8:	2300      	movs	r3, #0
 80024ea:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80024ee:	f102 020c 	add.w	r2, r2, #12
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	e064      	b.n	80025c0 <_ZN5Scene9drawSceneEv+0x200>
					if (objects[k]->getpriority() == j) {
 80024f6:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80024fa:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002506:	f103 030c 	add.w	r3, r3, #12
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f000 f918 	bl	8002748 <_ZN13DisplayObject11getpriorityEv>
 8002518:	4603      	mov	r3, r0
 800251a:	461a      	mov	r2, r3
 800251c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002520:	f103 0310 	add.w	r3, r3, #16
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4293      	cmp	r3, r2
 8002528:	bf0c      	ite	eq
 800252a:	2301      	moveq	r3, #1
 800252c:	2300      	movne	r3, #0
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b00      	cmp	r3, #0
 8002532:	d03a      	beq.n	80025aa <_ZN5Scene9drawSceneEv+0x1ea>
						objects[k]->drawIntoFramebuffer(buffer, FRAMEBUFFER_WIDTH, startx);
 8002534:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002538:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	681a      	ldr	r2, [r3, #0]
 8002540:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002544:	f103 030c 	add.w	r3, r3, #12
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	4413      	add	r3, r2
 800254e:	6818      	ldr	r0, [r3, #0]
 8002550:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002554:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002560:	f103 030c 	add.w	r3, r3, #12
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	3308      	adds	r3, #8
 8002570:	681c      	ldr	r4, [r3, #0]
 8002572:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002576:	f103 0308 	add.w	r3, r3, #8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	b29b      	uxth	r3, r3
 800257e:	f107 0120 	add.w	r1, r7, #32
 8002582:	3918      	subs	r1, #24
 8002584:	2250      	movs	r2, #80	@ 0x50
 8002586:	47a0      	blx	r4
						objects[k]->resetChangeFlag();
 8002588:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 800258c:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002598:	f103 030c 	add.w	r3, r3, #12
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4618      	mov	r0, r3
 80025a6:	f000 f87f 	bl	80026a8 <_ZN13DisplayObject15resetChangeFlagEv>
				for (int k = 0; k < this->objectcount; k++) {
 80025aa:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025ae:	f103 030c 	add.w	r3, r3, #12
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	3301      	adds	r3, #1
 80025b6:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025ba:	f102 020c 	add.w	r2, r2, #12
 80025be:	6013      	str	r3, [r2, #0]
 80025c0:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025c4:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	791b      	ldrb	r3, [r3, #4]
 80025cc:	461a      	mov	r2, r3
 80025ce:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025d2:	f103 030c 	add.w	r3, r3, #12
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4293      	cmp	r3, r2
 80025da:	db8c      	blt.n	80024f6 <_ZN5Scene9drawSceneEv+0x136>
			for (int j = 0; j <= this->maxpriority; j++) {
 80025dc:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 80025e0:	f103 0310 	add.w	r3, r3, #16
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	3301      	adds	r3, #1
 80025e8:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 80025ec:	f102 0210 	add.w	r2, r2, #16
 80025f0:	6013      	str	r3, [r2, #0]
 80025f2:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 80025f6:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	799b      	ldrb	r3, [r3, #6]
 80025fe:	461a      	mov	r2, r3
 8002600:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002604:	f103 0310 	add.w	r3, r3, #16
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4293      	cmp	r3, r2
 800260c:	f77f af6c 	ble.w	80024e8 <_ZN5Scene9drawSceneEv+0x128>
					}
				}
			}
			transmitdma(&hspi1, buffer, FRAMEBUFFER_SIZE);
 8002610:	f107 0320 	add.w	r3, r7, #32
 8002614:	3b18      	subs	r3, #24
 8002616:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 800261a:	4619      	mov	r1, r3
 800261c:	4818      	ldr	r0, [pc, #96]	@ (8002680 <_ZN5Scene9drawSceneEv+0x2c0>)
 800261e:	f7ff fe5d 	bl	80022dc <transmitdma>
			while(!spidatasentflag) {}
 8002622:	bf00      	nop
 8002624:	4b17      	ldr	r3, [pc, #92]	@ (8002684 <_ZN5Scene9drawSceneEv+0x2c4>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	bf0c      	ite	eq
 800262e:	2301      	moveq	r3, #1
 8002630:	2300      	movne	r3, #0
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b00      	cmp	r3, #0
 8002636:	d1f5      	bne.n	8002624 <_ZN5Scene9drawSceneEv+0x264>
		for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002638:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 800263c:	f103 0314 	add.w	r3, r3, #20
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	3301      	adds	r3, #1
 8002644:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002648:	f102 0214 	add.w	r2, r2, #20
 800264c:	6013      	str	r3, [r2, #0]
 800264e:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002652:	f103 0314 	add.w	r3, r3, #20
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2b05      	cmp	r3, #5
 800265a:	f77f af25 	ble.w	80024a8 <_ZN5Scene9drawSceneEv+0xe8>
		}
		endCommand();
 800265e:	f000 fa95 	bl	8002b8c <endCommand>
	}
	this->changed = 0;
 8002662:	f507 6302 	add.w	r3, r7, #2080	@ 0x820
 8002666:	f6a3 031c 	subw	r3, r3, #2076	@ 0x81c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	2200      	movs	r2, #0
 800266e:	715a      	strb	r2, [r3, #5]
 8002670:	e000      	b.n	8002674 <_ZN5Scene9drawSceneEv+0x2b4>
			return;
 8002672:	bf00      	nop
}
 8002674:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002678:	3724      	adds	r7, #36	@ 0x24
 800267a:	46bd      	mov	sp, r7
 800267c:	bd90      	pop	{r4, r7, pc}
 800267e:	bf00      	nop
 8002680:	200001bc 	.word	0x200001bc
 8002684:	2000037c 	.word	0x2000037c

08002688 <_ZN13DisplayObjectD1Ev>:

/*
 * the following are DisplayObject method definitions
 */

DisplayObject::~DisplayObject() {}
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
 8002690:	4a04      	ldr	r2, [pc, #16]	@ (80026a4 <_ZN13DisplayObjectD1Ev+0x1c>)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4618      	mov	r0, r3
 800269a:	370c      	adds	r7, #12
 800269c:	46bd      	mov	sp, r7
 800269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a2:	4770      	bx	lr
 80026a4:	08010030 	.word	0x08010030

080026a8 <_ZN13DisplayObject15resetChangeFlagEv>:

void DisplayObject::resetChangeFlag() {
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
	this->changed = 0;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2200      	movs	r2, #0
 80026b4:	715a      	strb	r2, [r3, #5]
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <_ZN13DisplayObject12redrawObjectEv>:

void DisplayObject::redrawObject() {
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
	this->changed = 1;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	715a      	strb	r2, [r3, #5]
}
 80026d0:	bf00      	nop
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_ZN13DisplayObject7getxposEv>:

uint16_t DisplayObject::getxpos() {
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
	return this->xpos;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	88db      	ldrh	r3, [r3, #6]
}
 80026e8:	4618      	mov	r0, r3
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <_ZN13DisplayObject7setxposEt>:

void DisplayObject::setxpos(uint16_t xpos) {
 80026f4:	b480      	push	{r7}
 80026f6:	b083      	sub	sp, #12
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	460b      	mov	r3, r1
 80026fe:	807b      	strh	r3, [r7, #2]
	this->xpos = xpos;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	887a      	ldrh	r2, [r7, #2]
 8002704:	80da      	strh	r2, [r3, #6]
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <_ZN13DisplayObject7getyposEv>:

uint16_t DisplayObject::getypos() {
 8002712:	b480      	push	{r7}
 8002714:	b083      	sub	sp, #12
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
	return this->ypos;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	891b      	ldrh	r3, [r3, #8]
}
 800271e:	4618      	mov	r0, r3
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr

0800272a <_ZN13DisplayObject7setyposEt>:

void DisplayObject::setypos(uint16_t ypos) {
 800272a:	b480      	push	{r7}
 800272c:	b083      	sub	sp, #12
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
 8002732:	460b      	mov	r3, r1
 8002734:	807b      	strh	r3, [r7, #2]
	this->ypos = ypos;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	887a      	ldrh	r2, [r7, #2]
 800273a:	811a      	strh	r2, [r3, #8]
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_ZN13DisplayObject11getpriorityEv>:

uint8_t DisplayObject::getpriority() {
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
	return this->priority;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	791b      	ldrb	r3, [r3, #4]
}
 8002754:	4618      	mov	r0, r3
 8002756:	370c      	adds	r7, #12
 8002758:	46bd      	mov	sp, r7
 800275a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275e:	4770      	bx	lr

08002760 <_ZN13DisplayObject11setpriorityEh>:

void DisplayObject::setpriority(uint8_t priority) {
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	70fb      	strb	r3, [r7, #3]
	this->priority = priority;
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	78fa      	ldrb	r2, [r7, #3]
 8002770:	711a      	strb	r2, [r3, #4]
}
 8002772:	bf00      	nop
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_ZN13DisplayObject13getChangeFlagEv>:

uint8_t DisplayObject::getChangeFlag() {
 800277e:	b480      	push	{r7}
 8002780:	b083      	sub	sp, #12
 8002782:	af00      	add	r7, sp, #0
 8002784:	6078      	str	r0, [r7, #4]
	return this->changed;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	795b      	ldrb	r3, [r3, #5]
}
 800278a:	4618      	mov	r0, r3
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
	...

08002798 <_ZN13DisplayObjectC1Ev>:
#define SRC_RPI_DISPLAY_RPIDISPLAYSCENEBUILDER_H_

#include <stdint.h>
#include "rpiDisplayShapes.h"

class DisplayObject {
 8002798:	b480      	push	{r7}
 800279a:	b083      	sub	sp, #12
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
 80027a0:	4a04      	ldr	r2, [pc, #16]	@ (80027b4 <_ZN13DisplayObjectC1Ev+0x1c>)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4618      	mov	r0, r3
 80027aa:	370c      	adds	r7, #12
 80027ac:	46bd      	mov	sp, r7
 80027ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b2:	4770      	bx	lr
 80027b4:	08010030 	.word	0x08010030

080027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>:

/*
 * the following are StringObject method dofinitions
 */

StringObject::StringObject(uint16_t xpos, uint16_t ypos, uint16_t colorvalue, const GFXfont *font, uint8_t positioning, char* buffer, uint8_t priority) {
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	4608      	mov	r0, r1
 80027c2:	4611      	mov	r1, r2
 80027c4:	461a      	mov	r2, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	817b      	strh	r3, [r7, #10]
 80027ca:	460b      	mov	r3, r1
 80027cc:	813b      	strh	r3, [r7, #8]
 80027ce:	4613      	mov	r3, r2
 80027d0:	80fb      	strh	r3, [r7, #6]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff ffdf 	bl	8002798 <_ZN13DisplayObjectC1Ev>
 80027da:	4a15      	ldr	r2, [pc, #84]	@ (8002830 <_ZN12StringObjectC1EtttPK7GFXfonthPch+0x78>)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	601a      	str	r2, [r3, #0]
	this->buffer = buffer;
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	6a3a      	ldr	r2, [r7, #32]
 80027e4:	60da      	str	r2, [r3, #12]
	this->setxpos(xpos);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	897a      	ldrh	r2, [r7, #10]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff81 	bl	80026f4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	893a      	ldrh	r2, [r7, #8]
 80027f6:	4611      	mov	r1, r2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f7ff ff96 	bl	800272a <_ZN13DisplayObject7setyposEt>
	this->colorvalue = colorvalue;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	88fa      	ldrh	r2, [r7, #6]
 8002802:	815a      	strh	r2, [r3, #10]
	this->positioning = positioning;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	7f3a      	ldrb	r2, [r7, #28]
 8002808:	751a      	strb	r2, [r3, #20]
	this->font = font;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	69ba      	ldr	r2, [r7, #24]
 800280e:	611a      	str	r2, [r3, #16]
	this->setpriority(priority);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ffa1 	bl	8002760 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	4618      	mov	r0, r3
 8002822:	f7ff ff4e 	bl	80026c2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	4618      	mov	r0, r3
 800282a:	3710      	adds	r7, #16
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	0801001c 	.word	0x0801001c

08002834 <_ZN12StringObject19drawIntoFramebufferEPttt>:

uint16_t StringObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002834:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002838:	b08a      	sub	sp, #40	@ 0x28
 800283a:	af06      	add	r7, sp, #24
 800283c:	60f8      	str	r0, [r7, #12]
 800283e:	60b9      	str	r1, [r7, #8]
 8002840:	4611      	mov	r1, r2
 8002842:	461a      	mov	r2, r3
 8002844:	460b      	mov	r3, r1
 8002846:	80fb      	strh	r3, [r7, #6]
 8002848:	4613      	mov	r3, r2
 800284a:	80bb      	strh	r3, [r7, #4]
	return drawStringIntoFramebuffer(this->buffer, font, this->colorvalue, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	68dc      	ldr	r4, [r3, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	691d      	ldr	r5, [r3, #16]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	895e      	ldrh	r6, [r3, #10]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	4618      	mov	r0, r3
 800285c:	f7ff ff3e 	bl	80026dc <_ZN13DisplayObject7getxposEv>
 8002860:	4603      	mov	r3, r0
 8002862:	4698      	mov	r8, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	4618      	mov	r0, r3
 8002868:	f7ff ff53 	bl	8002712 <_ZN13DisplayObject7getyposEv>
 800286c:	4603      	mov	r3, r0
 800286e:	4619      	mov	r1, r3
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	7d1b      	ldrb	r3, [r3, #20]
 8002874:	88ba      	ldrh	r2, [r7, #4]
 8002876:	9204      	str	r2, [sp, #16]
 8002878:	88fa      	ldrh	r2, [r7, #6]
 800287a:	9203      	str	r2, [sp, #12]
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	9202      	str	r2, [sp, #8]
 8002880:	9301      	str	r3, [sp, #4]
 8002882:	9100      	str	r1, [sp, #0]
 8002884:	4643      	mov	r3, r8
 8002886:	4632      	mov	r2, r6
 8002888:	4629      	mov	r1, r5
 800288a:	4620      	mov	r0, r4
 800288c:	f000 fc57 	bl	800313e <drawStringIntoFramebuffer>
 8002890:	4603      	mov	r3, r0
}
 8002892:	4618      	mov	r0, r3
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800289c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>:

void StringObject::updateString(char* buffer, uint8_t positioning, uint16_t colorvalue, const GFXfont *font, uint16_t xpos, uint16_t ypos, uint8_t priority) {
 800289c:	b580      	push	{r7, lr}
 800289e:	b084      	sub	sp, #16
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	60f8      	str	r0, [r7, #12]
 80028a4:	60b9      	str	r1, [r7, #8]
 80028a6:	4611      	mov	r1, r2
 80028a8:	461a      	mov	r2, r3
 80028aa:	460b      	mov	r3, r1
 80028ac:	71fb      	strb	r3, [r7, #7]
 80028ae:	4613      	mov	r3, r2
 80028b0:	80bb      	strh	r3, [r7, #4]
	this->buffer = buffer;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	60da      	str	r2, [r3, #12]
	this->positioning = positioning;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	79fa      	ldrb	r2, [r7, #7]
 80028bc:	751a      	strb	r2, [r3, #20]
	this->colorvalue = colorvalue;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	88ba      	ldrh	r2, [r7, #4]
 80028c2:	815a      	strh	r2, [r3, #10]
	this->font = font;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	69ba      	ldr	r2, [r7, #24]
 80028c8:	611a      	str	r2, [r3, #16]
	this->setxpos(xpos);
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	8bba      	ldrh	r2, [r7, #28]
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7ff ff0f 	bl	80026f4 <_ZN13DisplayObject7setxposEt>
	this->setypos(ypos);
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	8c3a      	ldrh	r2, [r7, #32]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f7ff ff24 	bl	800272a <_ZN13DisplayObject7setyposEt>
	this->setpriority(priority);
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 80028e8:	4611      	mov	r1, r2
 80028ea:	4618      	mov	r0, r3
 80028ec:	f7ff ff38 	bl	8002760 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f7ff fee5 	bl	80026c2 <_ZN13DisplayObject12redrawObjectEv>
}
 80028f8:	bf00      	nop
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <_ZN11ImageObjectC1EPctttthh>:

/*
 * the following below are for the imageobject method definitions
 */

ImageObject::ImageObject(char* image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 8002900:	b580      	push	{r7, lr}
 8002902:	b088      	sub	sp, #32
 8002904:	af04      	add	r7, sp, #16
 8002906:	60f8      	str	r0, [r7, #12]
 8002908:	60b9      	str	r1, [r7, #8]
 800290a:	4611      	mov	r1, r2
 800290c:	461a      	mov	r2, r3
 800290e:	460b      	mov	r3, r1
 8002910:	80fb      	strh	r3, [r7, #6]
 8002912:	4613      	mov	r3, r2
 8002914:	80bb      	strh	r3, [r7, #4]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ff3d 	bl	8002798 <_ZN13DisplayObjectC1Ev>
 800291e:	4a0c      	ldr	r2, [pc, #48]	@ (8002950 <_ZN11ImageObjectC1EPctttthh+0x50>)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	601a      	str	r2, [r3, #0]
	this->updateImage(image, length, height, x, y, positioning, priority);
 8002924:	88b9      	ldrh	r1, [r7, #4]
 8002926:	88fa      	ldrh	r2, [r7, #6]
 8002928:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800292c:	9303      	str	r3, [sp, #12]
 800292e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002932:	9302      	str	r3, [sp, #8]
 8002934:	8bbb      	ldrh	r3, [r7, #28]
 8002936:	9301      	str	r3, [sp, #4]
 8002938:	8b3b      	ldrh	r3, [r7, #24]
 800293a:	9300      	str	r3, [sp, #0]
 800293c:	460b      	mov	r3, r1
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f000 f83b 	bl	80029bc <_ZN11ImageObject11updateImageEPctttthh>
}
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	08010008 	.word	0x08010008

08002954 <_ZN11ImageObject19drawIntoFramebufferEPttt>:

uint16_t ImageObject::drawIntoFramebuffer(uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002954:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002958:	b08a      	sub	sp, #40	@ 0x28
 800295a:	af06      	add	r7, sp, #24
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	4611      	mov	r1, r2
 8002962:	461a      	mov	r2, r3
 8002964:	460b      	mov	r3, r1
 8002966:	80fb      	strh	r3, [r7, #6]
 8002968:	4613      	mov	r3, r2
 800296a:	80bb      	strh	r3, [r7, #4]
	drawImageIntoFramebuffer(this->image, this->length, this->height, this->getxpos(), this->getypos(), this->positioning, framebuffer, framewidth, xstart);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	691c      	ldr	r4, [r3, #16]
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	895d      	ldrh	r5, [r3, #10]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	899e      	ldrh	r6, [r3, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4618      	mov	r0, r3
 800297c:	f7ff feae 	bl	80026dc <_ZN13DisplayObject7getxposEv>
 8002980:	4603      	mov	r3, r0
 8002982:	4698      	mov	r8, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff fec3 	bl	8002712 <_ZN13DisplayObject7getyposEv>
 800298c:	4603      	mov	r3, r0
 800298e:	4619      	mov	r1, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	7b9b      	ldrb	r3, [r3, #14]
 8002994:	88ba      	ldrh	r2, [r7, #4]
 8002996:	9204      	str	r2, [sp, #16]
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	9203      	str	r2, [sp, #12]
 800299c:	68ba      	ldr	r2, [r7, #8]
 800299e:	9202      	str	r2, [sp, #8]
 80029a0:	9301      	str	r3, [sp, #4]
 80029a2:	9100      	str	r1, [sp, #0]
 80029a4:	4643      	mov	r3, r8
 80029a6:	4632      	mov	r2, r6
 80029a8:	4629      	mov	r1, r5
 80029aa:	4620      	mov	r0, r4
 80029ac:	f000 fc28 	bl	8003200 <drawImageIntoFramebuffer>
	return 0;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080029bc <_ZN11ImageObject11updateImageEPctttthh>:

void ImageObject::updateImage(char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y, uint8_t positioning, uint8_t priority) {
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	4611      	mov	r1, r2
 80029c8:	461a      	mov	r2, r3
 80029ca:	460b      	mov	r3, r1
 80029cc:	80fb      	strh	r3, [r7, #6]
 80029ce:	4613      	mov	r3, r2
 80029d0:	80bb      	strh	r3, [r7, #4]
	this->setxpos(x);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	8b3a      	ldrh	r2, [r7, #24]
 80029d6:	4611      	mov	r1, r2
 80029d8:	4618      	mov	r0, r3
 80029da:	f7ff fe8b 	bl	80026f4 <_ZN13DisplayObject7setxposEt>
	this->setypos(y);
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8bba      	ldrh	r2, [r7, #28]
 80029e2:	4611      	mov	r1, r2
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7ff fea0 	bl	800272a <_ZN13DisplayObject7setyposEt>
	this->image = image;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	611a      	str	r2, [r3, #16]
	this->length = length;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	88fa      	ldrh	r2, [r7, #6]
 80029f4:	815a      	strh	r2, [r3, #10]
	this->height = height;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	88ba      	ldrh	r2, [r7, #4]
 80029fa:	819a      	strh	r2, [r3, #12]
	this->positioning = positioning;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002a02:	739a      	strb	r2, [r3, #14]
	this->setpriority(priority);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8002a0a:	4611      	mov	r1, r2
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7ff fea7 	bl	8002760 <_ZN13DisplayObject11setpriorityEh>
	this->redrawObject();
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	4618      	mov	r0, r3
 8002a16:	f7ff fe54 	bl	80026c2 <_ZN13DisplayObject12redrawObjectEv>
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <_ZN11ImageObjectD1Ev>:
	void updatePoint(uint16_t xpos, uint16_t ypos, uint16_t color, uint8_t priority);
private:
	uint16_t colorvalue;
};

class ImageObject : public DisplayObject {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	4a05      	ldr	r2, [pc, #20]	@ (8002a44 <_ZN11ImageObjectD1Ev+0x20>)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	601a      	str	r2, [r3, #0]
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7ff fe27 	bl	8002688 <_ZN13DisplayObjectD1Ev>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3708      	adds	r7, #8
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}
 8002a44:	08010008 	.word	0x08010008

08002a48 <_ZN11ImageObjectD0Ev>:
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	f7ff ffe7 	bl	8002a24 <_ZN11ImageObjectD1Ev>
 8002a56:	2114      	movs	r1, #20
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f00c fbe1 	bl	800f220 <_ZdlPvj>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_ZN12StringObjectD1Ev>:
class StringObject : public DisplayObject {
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	4a05      	ldr	r2, [pc, #20]	@ (8002a88 <_ZN12StringObjectD1Ev+0x20>)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4618      	mov	r0, r3
 8002a7a:	f7ff fe05 	bl	8002688 <_ZN13DisplayObjectD1Ev>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	4618      	mov	r0, r3
 8002a82:	3708      	adds	r7, #8
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}
 8002a88:	0801001c 	.word	0x0801001c

08002a8c <_ZN12StringObjectD0Ev>:
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f7ff ffe7 	bl	8002a68 <_ZN12StringObjectD1Ev>
 8002a9a:	2118      	movs	r1, #24
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f00c fbbf 	bl	800f220 <_ZdlPvj>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}

08002aac <startTransaction>:
#include <string.h>

extern uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len);


void startTransaction() {
 8002aac:	b580      	push	{r7, lr}
 8002aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	2108      	movs	r1, #8
 8002ab4:	4802      	ldr	r0, [pc, #8]	@ (8002ac0 <startTransaction+0x14>)
 8002ab6:	f002 faf7 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	40020400 	.word	0x40020400

08002ac4 <endTransaction>:

void endTransaction() {
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8002ac8:	2201      	movs	r2, #1
 8002aca:	2108      	movs	r1, #8
 8002acc:	4802      	ldr	r0, [pc, #8]	@ (8002ad8 <endTransaction+0x14>)
 8002ace:	f002 faeb 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8002ad2:	bf00      	nop
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	40020400 	.word	0x40020400

08002adc <dataOrRegister>:

void dataOrRegister(uint8_t data) {
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b082      	sub	sp, #8
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
	if (data) {
 8002ae6:	79fb      	ldrb	r3, [r7, #7]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d005      	beq.n	8002af8 <dataOrRegister+0x1c>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_SET);
 8002aec:	2201      	movs	r2, #1
 8002aee:	2110      	movs	r1, #16
 8002af0:	4806      	ldr	r0, [pc, #24]	@ (8002b0c <dataOrRegister+0x30>)
 8002af2:	f002 fad9 	bl	80050a8 <HAL_GPIO_WritePin>
	} else {
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
	}
}
 8002af6:	e004      	b.n	8002b02 <dataOrRegister+0x26>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2110      	movs	r1, #16
 8002afc:	4803      	ldr	r0, [pc, #12]	@ (8002b0c <dataOrRegister+0x30>)
 8002afe:	f002 fad3 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40020400 	.word	0x40020400

08002b10 <commandAndData>:

void commandAndData(uint16_t command, uint16_t* data, unsigned int size) {
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	4603      	mov	r3, r0
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
 8002b1c:	81fb      	strh	r3, [r7, #14]
	startTransaction();
 8002b1e:	f7ff ffc5 	bl	8002aac <startTransaction>

	dataOrRegister(0);
 8002b22:	2000      	movs	r0, #0
 8002b24:	f7ff ffda 	bl	8002adc <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002b28:	f107 010e 	add.w	r1, r7, #14
 8002b2c:	230a      	movs	r3, #10
 8002b2e:	2201      	movs	r2, #1
 8002b30:	480a      	ldr	r0, [pc, #40]	@ (8002b5c <commandAndData+0x4c>)
 8002b32:	f004 f9f6 	bl	8006f22 <HAL_SPI_Transmit>

	if (size) {
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <commandAndData+0x40>
		dataOrRegister(1);
 8002b3c:	2001      	movs	r0, #1
 8002b3e:	f7ff ffcd 	bl	8002adc <dataOrRegister>
		HAL_SPI_Transmit(&hspi1, (uint8_t*)data, size, 10);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	b29a      	uxth	r2, r3
 8002b46:	230a      	movs	r3, #10
 8002b48:	68b9      	ldr	r1, [r7, #8]
 8002b4a:	4804      	ldr	r0, [pc, #16]	@ (8002b5c <commandAndData+0x4c>)
 8002b4c:	f004 f9e9 	bl	8006f22 <HAL_SPI_Transmit>
	}

	endTransaction();
 8002b50:	f7ff ffb8 	bl	8002ac4 <endTransaction>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	200001bc 	.word	0x200001bc

08002b60 <startCommand>:

void startCommand(uint16_t command) {
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	4603      	mov	r3, r0
 8002b68:	80fb      	strh	r3, [r7, #6]
	startTransaction();
 8002b6a:	f7ff ff9f 	bl	8002aac <startTransaction>
	dataOrRegister(0);
 8002b6e:	2000      	movs	r0, #0
 8002b70:	f7ff ffb4 	bl	8002adc <dataOrRegister>
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&command), 1, 10);
 8002b74:	1db9      	adds	r1, r7, #6
 8002b76:	230a      	movs	r3, #10
 8002b78:	2201      	movs	r2, #1
 8002b7a:	4803      	ldr	r0, [pc, #12]	@ (8002b88 <startCommand+0x28>)
 8002b7c:	f004 f9d1 	bl	8006f22 <HAL_SPI_Transmit>
}
 8002b80:	bf00      	nop
 8002b82:	3708      	adds	r7, #8
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	200001bc 	.word	0x200001bc

08002b8c <endCommand>:
void transmitSingleData(uint16_t data16) {
	dataOrRegister(1);
	HAL_SPI_Transmit(&hspi1, (uint8_t*)(&data16), 1, 10);
}

void endCommand() {
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	endTransaction();
 8002b90:	f7ff ff98 	bl	8002ac4 <endTransaction>
}
 8002b94:	bf00      	nop
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <resetScreen>:

void resetScreen() {
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	2120      	movs	r1, #32
 8002ba0:	480b      	ldr	r0, [pc, #44]	@ (8002bd0 <resetScreen+0x38>)
 8002ba2:	f002 fa81 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002ba6:	2014      	movs	r0, #20
 8002ba8:	f001 fc32 	bl	8004410 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8002bac:	2200      	movs	r2, #0
 8002bae:	2120      	movs	r1, #32
 8002bb0:	4807      	ldr	r0, [pc, #28]	@ (8002bd0 <resetScreen+0x38>)
 8002bb2:	f002 fa79 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 8002bb6:	2014      	movs	r0, #20
 8002bb8:	f001 fc2a 	bl	8004410 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	2120      	movs	r1, #32
 8002bc0:	4803      	ldr	r0, [pc, #12]	@ (8002bd0 <resetScreen+0x38>)
 8002bc2:	f002 fa71 	bl	80050a8 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8002bc6:	2064      	movs	r0, #100	@ 0x64
 8002bc8:	f001 fc22 	bl	8004410 <HAL_Delay>
}
 8002bcc:	bf00      	nop
 8002bce:	bd80      	pop	{r7, pc}
 8002bd0:	40020400 	.word	0x40020400

08002bd4 <initializeScreen>:

void initializeScreen() {
 8002bd4:	b5b0      	push	{r4, r5, r7, lr}
 8002bd6:	b09c      	sub	sp, #112	@ 0x70
 8002bd8:	af00      	add	r7, sp, #0
	commandAndData(0x01, NULL, 0);
 8002bda:	2200      	movs	r2, #0
 8002bdc:	2100      	movs	r1, #0
 8002bde:	2001      	movs	r0, #1
 8002be0:	f7ff ff96 	bl	8002b10 <commandAndData>
	commandAndData(0x11, NULL, 0);
 8002be4:	2200      	movs	r2, #0
 8002be6:	2100      	movs	r1, #0
 8002be8:	2011      	movs	r0, #17
 8002bea:	f7ff ff91 	bl	8002b10 <commandAndData>
	{
		uint16_t data[] = {0x0055};
 8002bee:	2355      	movs	r3, #85	@ 0x55
 8002bf0:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
		commandAndData(0x3A, data, sizeof(data));
 8002bf4:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8002bf8:	2202      	movs	r2, #2
 8002bfa:	4619      	mov	r1, r3
 8002bfc:	203a      	movs	r0, #58	@ 0x3a
 8002bfe:	f7ff ff87 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0019, 0x001a};
 8002c02:	4b47      	ldr	r3, [pc, #284]	@ (8002d20 <initializeScreen+0x14c>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	66bb      	str	r3, [r7, #104]	@ 0x68
		commandAndData(0xC0, data, sizeof(data));
 8002c08:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8002c0c:	2204      	movs	r2, #4
 8002c0e:	4619      	mov	r1, r3
 8002c10:	20c0      	movs	r0, #192	@ 0xc0
 8002c12:	f7ff ff7d 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0045, 0x0000};
 8002c16:	2345      	movs	r3, #69	@ 0x45
 8002c18:	f8a7 3064 	strh.w	r3, [r7, #100]	@ 0x64
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
		commandAndData(0xC1, data, sizeof(data));
 8002c22:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002c26:	2204      	movs	r2, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	20c1      	movs	r0, #193	@ 0xc1
 8002c2c:	f7ff ff70 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0033};
 8002c30:	2333      	movs	r3, #51	@ 0x33
 8002c32:	f8a7 3060 	strh.w	r3, [r7, #96]	@ 0x60
		commandAndData(0xC2, data, sizeof(data));
 8002c36:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	20c2      	movs	r0, #194	@ 0xc2
 8002c40:	f7ff ff66 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0028};
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8a7 305c 	strh.w	r3, [r7, #92]	@ 0x5c
 8002c4a:	2328      	movs	r3, #40	@ 0x28
 8002c4c:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
		commandAndData(0xC5, data, sizeof(data));
 8002c50:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8002c54:	2204      	movs	r2, #4
 8002c56:	4619      	mov	r1, r3
 8002c58:	20c5      	movs	r0, #197	@ 0xc5
 8002c5a:	f7ff ff59 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x00A0, 0x0011};
 8002c5e:	4b31      	ldr	r3, [pc, #196]	@ (8002d24 <initializeScreen+0x150>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	65bb      	str	r3, [r7, #88]	@ 0x58
		commandAndData(0xB1, data, sizeof(data));
 8002c64:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8002c68:	2204      	movs	r2, #4
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	20b1      	movs	r0, #177	@ 0xb1
 8002c6e:	f7ff ff4f 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0002};
 8002c72:	2302      	movs	r3, #2
 8002c74:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
		commandAndData(0xB4, data, sizeof(data));
 8002c78:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	4619      	mov	r1, r3
 8002c80:	20b4      	movs	r0, #180	@ 0xb4
 8002c82:	f7ff ff45 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0042, 0x003B};
 8002c86:	4a28      	ldr	r2, [pc, #160]	@ (8002d28 <initializeScreen+0x154>)
 8002c88:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c90:	6018      	str	r0, [r3, #0]
 8002c92:	3304      	adds	r3, #4
 8002c94:	8019      	strh	r1, [r3, #0]
		commandAndData(0xB6, data, sizeof(data));
 8002c96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8002c9a:	2206      	movs	r2, #6
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	20b6      	movs	r0, #182	@ 0xb6
 8002ca0:	f7ff ff36 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x0025, 0x0022, 0x000B, 0x0006, 0x000A, 0x004E, 0x00C6, 0x0039, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000, 0x0000};
 8002ca4:	4b21      	ldr	r3, [pc, #132]	@ (8002d2c <initializeScreen+0x158>)
 8002ca6:	f107 042c 	add.w	r4, r7, #44	@ 0x2c
 8002caa:	461d      	mov	r5, r3
 8002cac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cb0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cb4:	c407      	stmia	r4!, {r0, r1, r2}
 8002cb6:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE0, data, sizeof(data));
 8002cb8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002cbc:	221e      	movs	r2, #30
 8002cbe:	4619      	mov	r1, r3
 8002cc0:	20e0      	movs	r0, #224	@ 0xe0
 8002cc2:	f7ff ff25 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x001F, 0x003F, 0x003F, 0x000F, 0x001F, 0x000F, 0x0046, 0x0049, 0x0031, 0x0005, 0x0009, 0x0003, 0x001C, 0x001A, 0x0000};
 8002cc6:	4b1a      	ldr	r3, [pc, #104]	@ (8002d30 <initializeScreen+0x15c>)
 8002cc8:	f107 040c 	add.w	r4, r7, #12
 8002ccc:	461d      	mov	r5, r3
 8002cce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002cd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002cd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002cd6:	c407      	stmia	r4!, {r0, r1, r2}
 8002cd8:	8023      	strh	r3, [r4, #0]
		commandAndData(0xE1, data, sizeof(data));
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	221e      	movs	r2, #30
 8002ce0:	4619      	mov	r1, r3
 8002ce2:	20e1      	movs	r0, #225	@ 0xe1
 8002ce4:	f7ff ff14 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0000, 0x0022};
 8002ce8:	2300      	movs	r3, #0
 8002cea:	813b      	strh	r3, [r7, #8]
 8002cec:	2322      	movs	r3, #34	@ 0x22
 8002cee:	817b      	strh	r3, [r7, #10]
		commandAndData(0xB6, data, sizeof(data));
 8002cf0:	f107 0308 	add.w	r3, r7, #8
 8002cf4:	2204      	movs	r2, #4
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	20b6      	movs	r0, #182	@ 0xb6
 8002cfa:	f7ff ff09 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {0x0008}; //CHANGE THIS TO FLIP SCREEN (0x0008 for steering wheel, 0x0088 for test screen)
 8002cfe:	2308      	movs	r3, #8
 8002d00:	80bb      	strh	r3, [r7, #4]
		commandAndData(0x36, data, sizeof(data));
 8002d02:	1d3b      	adds	r3, r7, #4
 8002d04:	2202      	movs	r2, #2
 8002d06:	4619      	mov	r1, r3
 8002d08:	2036      	movs	r0, #54	@ 0x36
 8002d0a:	f7ff ff01 	bl	8002b10 <commandAndData>
	}
	clearScreenfast(0x0000);
 8002d0e:	2000      	movs	r0, #0
 8002d10:	f000 f85a 	bl	8002dc8 <clearScreenfast>
	displayOn();
 8002d14:	f000 f80e 	bl	8002d34 <displayOn>
}
 8002d18:	bf00      	nop
 8002d1a:	3770      	adds	r7, #112	@ 0x70
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d20:	0800feb0 	.word	0x0800feb0
 8002d24:	0800feb4 	.word	0x0800feb4
 8002d28:	0800feb8 	.word	0x0800feb8
 8002d2c:	0800fec0 	.word	0x0800fec0
 8002d30:	0800fee0 	.word	0x0800fee0

08002d34 <displayOn>:

void displayOn() {
 8002d34:	b580      	push	{r7, lr}
 8002d36:	af00      	add	r7, sp, #0
	commandAndData(0x29, NULL, 0);
 8002d38:	2200      	movs	r2, #0
 8002d3a:	2100      	movs	r1, #0
 8002d3c:	2029      	movs	r0, #41	@ 0x29
 8002d3e:	f7ff fee7 	bl	8002b10 <commandAndData>
}
 8002d42:	bf00      	nop
 8002d44:	bd80      	pop	{r7, pc}

08002d46 <modifySpace>:
}

/**
 * x2 and y2 are included in the pixels, (ex: 0 to 8 includes 0 and 8 so this is 9 pixels)
 */
void modifySpace(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002d46:	b590      	push	{r4, r7, lr}
 8002d48:	b087      	sub	sp, #28
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	4604      	mov	r4, r0
 8002d4e:	4608      	mov	r0, r1
 8002d50:	4611      	mov	r1, r2
 8002d52:	461a      	mov	r2, r3
 8002d54:	4623      	mov	r3, r4
 8002d56:	80fb      	strh	r3, [r7, #6]
 8002d58:	4603      	mov	r3, r0
 8002d5a:	80bb      	strh	r3, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	803b      	strh	r3, [r7, #0]
	{
		uint16_t data[] = {(y1 >> 8) & 0x00FF, y1 & 0x00FF, (y2 >> 8) & 0x00FF, y2 & 0x00FF};
 8002d64:	88bb      	ldrh	r3, [r7, #4]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	823b      	strh	r3, [r7, #16]
 8002d6c:	88bb      	ldrh	r3, [r7, #4]
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	b29b      	uxth	r3, r3
 8002d72:	827b      	strh	r3, [r7, #18]
 8002d74:	883b      	ldrh	r3, [r7, #0]
 8002d76:	0a1b      	lsrs	r3, r3, #8
 8002d78:	b29b      	uxth	r3, r3
 8002d7a:	82bb      	strh	r3, [r7, #20]
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	b29b      	uxth	r3, r3
 8002d82:	82fb      	strh	r3, [r7, #22]
		commandAndData(0x2A, data, sizeof(data));
 8002d84:	f107 0310 	add.w	r3, r7, #16
 8002d88:	2208      	movs	r2, #8
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	202a      	movs	r0, #42	@ 0x2a
 8002d8e:	f7ff febf 	bl	8002b10 <commandAndData>
	}
	{
		uint16_t data[] = {(x1 >> 8) & 0x00FF, x1 & 0x00FF, (x2 >> 8) & 0x00FF, x2 & 0x00FF};
 8002d92:	88fb      	ldrh	r3, [r7, #6]
 8002d94:	0a1b      	lsrs	r3, r3, #8
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	813b      	strh	r3, [r7, #8]
 8002d9a:	88fb      	ldrh	r3, [r7, #6]
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	817b      	strh	r3, [r7, #10]
 8002da2:	887b      	ldrh	r3, [r7, #2]
 8002da4:	0a1b      	lsrs	r3, r3, #8
 8002da6:	b29b      	uxth	r3, r3
 8002da8:	81bb      	strh	r3, [r7, #12]
 8002daa:	887b      	ldrh	r3, [r7, #2]
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	81fb      	strh	r3, [r7, #14]
		commandAndData(0x2B, data, sizeof(data));
 8002db2:	f107 0308 	add.w	r3, r7, #8
 8002db6:	2208      	movs	r2, #8
 8002db8:	4619      	mov	r1, r3
 8002dba:	202b      	movs	r0, #43	@ 0x2b
 8002dbc:	f7ff fea8 	bl	8002b10 <commandAndData>
	}
}
 8002dc0:	bf00      	nop
 8002dc2:	371c      	adds	r7, #28
 8002dc4:	46bd      	mov	sp, r7
 8002dc6:	bd90      	pop	{r4, r7, pc}

08002dc8 <clearScreenfast>:

void clearScreenfast(uint16_t color) {
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	f5ad 4d48 	sub.w	sp, sp, #51200	@ 0xc800
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002dd8:	f6a3 030a 	subw	r3, r3, #2058	@ 0x80a
 8002ddc:	801a      	strh	r2, [r3, #0]
	uint16_t buffer1[FRAMEBUFFER_SIZE];
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002dde:	2300      	movs	r3, #0
 8002de0:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002de4:	f102 020c 	add.w	r2, r2, #12
 8002de8:	6013      	str	r3, [r2, #0]
 8002dea:	e01a      	b.n	8002e22 <clearScreenfast+0x5a>
		buffer1[i] = color;
 8002dec:	f507 6301 	add.w	r3, r7, #2064	@ 0x810
 8002df0:	f6a3 0308 	subw	r3, r3, #2056	@ 0x808
 8002df4:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002df8:	f102 020c 	add.w	r2, r2, #12
 8002dfc:	6812      	ldr	r2, [r2, #0]
 8002dfe:	f507 6101 	add.w	r1, r7, #2064	@ 0x810
 8002e02:	f6a1 010a 	subw	r1, r1, #2058	@ 0x80a
 8002e06:	8809      	ldrh	r1, [r1, #0]
 8002e08:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int i = 0; i < FRAMEBUFFER_SIZE; i++) {
 8002e0c:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002e10:	f103 030c 	add.w	r3, r3, #12
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3301      	adds	r3, #1
 8002e18:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002e1c:	f102 020c 	add.w	r2, r2, #12
 8002e20:	6013      	str	r3, [r2, #0]
 8002e22:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002e26:	f103 030c 	add.w	r3, r3, #12
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f5b3 4fc8 	cmp.w	r3, #25600	@ 0x6400
 8002e30:	dbdc      	blt.n	8002dec <clearScreenfast+0x24>
	}
	modifySpace(0, 0, 479, 319);
 8002e32:	f240 133f 	movw	r3, #319	@ 0x13f
 8002e36:	f240 12df 	movw	r2, #479	@ 0x1df
 8002e3a:	2100      	movs	r1, #0
 8002e3c:	2000      	movs	r0, #0
 8002e3e:	f7ff ff82 	bl	8002d46 <modifySpace>
	startCommand(0x2C);
 8002e42:	202c      	movs	r0, #44	@ 0x2c
 8002e44:	f7ff fe8c 	bl	8002b60 <startCommand>
	dataOrRegister(1);
 8002e48:	2001      	movs	r0, #1
 8002e4a:	f7ff fe47 	bl	8002adc <dataOrRegister>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002e4e:	2300      	movs	r3, #0
 8002e50:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002e54:	f102 0208 	add.w	r2, r2, #8
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	e019      	b.n	8002e90 <clearScreenfast+0xc8>
		transmitdma(&hspi1, buffer1, FRAMEBUFFER_SIZE);
 8002e5c:	f107 0310 	add.w	r3, r7, #16
 8002e60:	3b08      	subs	r3, #8
 8002e62:	f44f 42c8 	mov.w	r2, #25600	@ 0x6400
 8002e66:	4619      	mov	r1, r3
 8002e68:	4811      	ldr	r0, [pc, #68]	@ (8002eb0 <clearScreenfast+0xe8>)
 8002e6a:	f7ff fa37 	bl	80022dc <transmitdma>
		while (!spidatasentflag) {}
 8002e6e:	bf00      	nop
 8002e70:	4b10      	ldr	r3, [pc, #64]	@ (8002eb4 <clearScreenfast+0xec>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d0fa      	beq.n	8002e70 <clearScreenfast+0xa8>
	for (int i = 0; i < FRAMEBUFFERS_PER_FRAME; i++) {
 8002e7a:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002e7e:	f103 0308 	add.w	r3, r3, #8
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	3301      	adds	r3, #1
 8002e86:	f507 4248 	add.w	r2, r7, #51200	@ 0xc800
 8002e8a:	f102 0208 	add.w	r2, r2, #8
 8002e8e:	6013      	str	r3, [r2, #0]
 8002e90:	f507 4348 	add.w	r3, r7, #51200	@ 0xc800
 8002e94:	f103 0308 	add.w	r3, r3, #8
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	2b05      	cmp	r3, #5
 8002e9c:	ddde      	ble.n	8002e5c <clearScreenfast+0x94>
	}
	endCommand();
 8002e9e:	f7ff fe75 	bl	8002b8c <endCommand>
}
 8002ea2:	bf00      	nop
 8002ea4:	f507 4748 	add.w	r7, r7, #51200	@ 0xc800
 8002ea8:	3710      	adds	r7, #16
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	200001bc 	.word	0x200001bc
 8002eb4:	2000037c 	.word	0x2000037c

08002eb8 <getRectCenter>:
	if ((x >= xstart) && (x < (xstart + framewidth))) {
		framebuffer[(x - xstart) * SCREEN_HEIGHT + y] = color;
	}
}

void getRectCenter(uint16_t *xpos, uint16_t *ypos, uint16_t length, uint16_t height) {
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	4611      	mov	r1, r2
 8002ec4:	461a      	mov	r2, r3
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	80fb      	strh	r3, [r7, #6]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	80bb      	strh	r3, [r7, #4]
	*xpos -= (length >> 1);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	881a      	ldrh	r2, [r3, #0]
 8002ed2:	88fb      	ldrh	r3, [r7, #6]
 8002ed4:	085b      	lsrs	r3, r3, #1
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	b29a      	uxth	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	801a      	strh	r2, [r3, #0]
	*ypos -= (height >> 1);
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	881a      	ldrh	r2, [r3, #0]
 8002ee4:	88bb      	ldrh	r3, [r7, #4]
 8002ee6:	085b      	lsrs	r3, r3, #1
 8002ee8:	b29b      	uxth	r3, r3
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	b29a      	uxth	r2, r3
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	801a      	strh	r2, [r3, #0]
}
 8002ef2:	bf00      	nop
 8002ef4:	3714      	adds	r7, #20
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efc:	4770      	bx	lr

08002efe <getStringCenter>:
		}
	}
}


void getStringCenter(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8002efe:	b480      	push	{r7}
 8002f00:	b089      	sub	sp, #36	@ 0x24
 8002f02:	af00      	add	r7, sp, #0
 8002f04:	60f8      	str	r0, [r7, #12]
 8002f06:	60b9      	str	r1, [r7, #8]
 8002f08:	607a      	str	r2, [r7, #4]
 8002f0a:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8002f14:	e015      	b.n	8002f42 <getStringCenter+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	685a      	ldr	r2, [r3, #4]
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	781b      	ldrb	r3, [r3, #0]
 8002f1e:	4619      	mov	r1, r3
 8002f20:	460b      	mov	r3, r1
 8002f22:	009b      	lsls	r3, r3, #2
 8002f24:	440b      	add	r3, r1
 8002f26:	005b      	lsls	r3, r3, #1
 8002f28:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f2c:	4413      	add	r3, r2
 8002f2e:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	791b      	ldrb	r3, [r3, #4]
 8002f34:	461a      	mov	r2, r3
 8002f36:	8b7b      	ldrh	r3, [r7, #26]
 8002f38:	4413      	add	r3, r2
 8002f3a:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8002f3c:	69fb      	ldr	r3, [r7, #28]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	781b      	ldrb	r3, [r3, #0]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1e5      	bne.n	8002f16 <getStringCenter+0x18>
	}
	*currentx -= totallength / 2;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	881a      	ldrh	r2, [r3, #0]
 8002f4e:	8b7b      	ldrh	r3, [r7, #26]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	b29a      	uxth	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8002f5c:	bf00      	nop
 8002f5e:	3724      	adds	r7, #36	@ 0x24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f66:	4770      	bx	lr

08002f68 <getStringLeft>:

void getStringLeft(uint16_t *currentx, uint16_t *currenty, char *buffer, const GFXfont *font) {
 8002f68:	b480      	push	{r7}
 8002f6a:	b089      	sub	sp, #36	@ 0x24
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	60f8      	str	r0, [r7, #12]
 8002f70:	60b9      	str	r1, [r7, #8]
 8002f72:	607a      	str	r2, [r7, #4]
 8002f74:	603b      	str	r3, [r7, #0]
	char *currentletter = buffer;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	61fb      	str	r3, [r7, #28]

	uint16_t totallength = 0;
 8002f7a:	2300      	movs	r3, #0
 8002f7c:	837b      	strh	r3, [r7, #26]
	while (*(currentletter)) {
 8002f7e:	e015      	b.n	8002fac <getStringLeft+0x44>
		GFXglyph *letter = &((font->glyph)[*currentletter - 32]);
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	685a      	ldr	r2, [r3, #4]
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	4619      	mov	r1, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002f96:	4413      	add	r3, r2
 8002f98:	617b      	str	r3, [r7, #20]
		totallength += (uint16_t)(letter->xAdvance);
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	791b      	ldrb	r3, [r3, #4]
 8002f9e:	461a      	mov	r2, r3
 8002fa0:	8b7b      	ldrh	r3, [r7, #26]
 8002fa2:	4413      	add	r3, r2
 8002fa4:	837b      	strh	r3, [r7, #26]
		currentletter++;
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3301      	adds	r3, #1
 8002faa:	61fb      	str	r3, [r7, #28]
	while (*(currentletter)) {
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e5      	bne.n	8002f80 <getStringLeft+0x18>
	}
	*currentx -= totallength;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	881a      	ldrh	r2, [r3, #0]
 8002fb8:	8b7b      	ldrh	r3, [r7, #26]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	801a      	strh	r2, [r3, #0]
	//*currenty += font->yAdvance / 2;
}
 8002fc2:	bf00      	nop
 8002fc4:	3724      	adds	r7, #36	@ 0x24
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fcc:	4770      	bx	lr

08002fce <drawCharIntoFramebuffer>:

	return (uint16_t)xadv;
}

uint16_t drawCharIntoFramebuffer(char letter, const GFXfont *font, uint16_t color, uint16_t xpos, uint16_t ypos, uint8_t positioning,
		uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8002fce:	b480      	push	{r7}
 8002fd0:	b08d      	sub	sp, #52	@ 0x34
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	60b9      	str	r1, [r7, #8]
 8002fd6:	4611      	mov	r1, r2
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4603      	mov	r3, r0
 8002fdc:	73fb      	strb	r3, [r7, #15]
 8002fde:	460b      	mov	r3, r1
 8002fe0:	81bb      	strh	r3, [r7, #12]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	80fb      	strh	r3, [r7, #6]
	GFXglyph *toDraw = &((font->glyph)[letter - 32]);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	6859      	ldr	r1, [r3, #4]
 8002fea:	7bfa      	ldrb	r2, [r7, #15]
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002ff8:	440b      	add	r3, r1
 8002ffa:	627b      	str	r3, [r7, #36]	@ 0x24
	int16_t width = toDraw->width, height = toDraw->height;
 8002ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ffe:	789b      	ldrb	r3, [r3, #2]
 8003000:	847b      	strh	r3, [r7, #34]	@ 0x22
 8003002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003004:	78db      	ldrb	r3, [r3, #3]
 8003006:	843b      	strh	r3, [r7, #32]
	int8_t xo = toDraw->xOffset, yo = toDraw->yOffset;
 8003008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800300a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 800300e:	77fb      	strb	r3, [r7, #31]
 8003010:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003012:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003016:	77bb      	strb	r3, [r7, #30]
	int8_t xadv = (int8_t)toDraw->xAdvance;
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800301a:	791b      	ldrb	r3, [r3, #4]
 800301c:	777b      	strb	r3, [r7, #29]
	uint8_t *bitlist = font->bitmap;
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	61bb      	str	r3, [r7, #24]
	uint16_t bo = toDraw->bitmapOffset;
 8003024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003026:	881b      	ldrh	r3, [r3, #0]
 8003028:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	uint8_t bits = 0;
 800302a:	2300      	movs	r3, #0
 800302c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
	uint8_t bit = 0;
 8003030:	2300      	movs	r3, #0
 8003032:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

	for (int16_t yy = 0; yy < height; yy++) {
 8003036:	2300      	movs	r3, #0
 8003038:	857b      	strh	r3, [r7, #42]	@ 0x2a
 800303a:	e071      	b.n	8003120 <drawCharIntoFramebuffer+0x152>
		for (int16_t xx = 0; xx < width; xx++) {
 800303c:	2300      	movs	r3, #0
 800303e:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003040:	e062      	b.n	8003108 <drawCharIntoFramebuffer+0x13a>
			if (!(bit++ & 7)) {
 8003042:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003046:	1c5a      	adds	r2, r3, #1
 8003048:	f887 202c 	strb.w	r2, [r7, #44]	@ 0x2c
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	2b00      	cmp	r3, #0
 8003052:	d108      	bne.n	8003066 <drawCharIntoFramebuffer+0x98>
				bits = bitlist[bo++];
 8003054:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	85fa      	strh	r2, [r7, #46]	@ 0x2e
 800305a:	461a      	mov	r2, r3
 800305c:	69bb      	ldr	r3, [r7, #24]
 800305e:	4413      	add	r3, r2
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
			}
			if (bits & 0b10000000) {
 8003066:	f997 302d 	ldrsb.w	r3, [r7, #45]	@ 0x2d
 800306a:	2b00      	cmp	r3, #0
 800306c:	da41      	bge.n	80030f2 <drawCharIntoFramebuffer+0x124>
				uint16_t pointx = (uint16_t)((int16_t)xpos + xadv - xo - xx);
 800306e:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003072:	b29a      	uxth	r2, r3
 8003074:	88fb      	ldrh	r3, [r7, #6]
 8003076:	4413      	add	r3, r2
 8003078:	b29a      	uxth	r2, r3
 800307a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800307e:	b29b      	uxth	r3, r3
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	b29a      	uxth	r2, r3
 8003084:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8003086:	1ad3      	subs	r3, r2, r3
 8003088:	82fb      	strh	r3, [r7, #22]
				uint16_t pointy = (uint16_t)((int16_t)ypos - yy - yo);
 800308a:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 800308c:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	b29a      	uxth	r2, r3
 8003092:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8003096:	b29b      	uxth	r3, r3
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	82bb      	strh	r3, [r7, #20]
				if ((pointx >= xstart) & (pointx < (xstart + framewidth))) {
 800309c:	8afa      	ldrh	r2, [r7, #22]
 800309e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030a2:	429a      	cmp	r2, r3
 80030a4:	bf2c      	ite	cs
 80030a6:	2301      	movcs	r3, #1
 80030a8:	2300      	movcc	r3, #0
 80030aa:	b2da      	uxtb	r2, r3
 80030ac:	8af9      	ldrh	r1, [r7, #22]
 80030ae:	f8b7 0048 	ldrh.w	r0, [r7, #72]	@ 0x48
 80030b2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	@ 0x44
 80030b6:	4403      	add	r3, r0
 80030b8:	4299      	cmp	r1, r3
 80030ba:	bfb4      	ite	lt
 80030bc:	2301      	movlt	r3, #1
 80030be:	2300      	movge	r3, #0
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	4013      	ands	r3, r2
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d013      	beq.n	80030f2 <drawCharIntoFramebuffer+0x124>
					if ((pointy < SCREEN_HEIGHT) & (pointy >= 0)) {
 80030ca:	8abb      	ldrh	r3, [r7, #20]
 80030cc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80030d0:	d20f      	bcs.n	80030f2 <drawCharIntoFramebuffer+0x124>
						framebuffer[(pointx - xstart) * SCREEN_HEIGHT + pointy] = color;
 80030d2:	8afa      	ldrh	r2, [r7, #22]
 80030d4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 80030d8:	1ad2      	subs	r2, r2, r3
 80030da:	4613      	mov	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	4413      	add	r3, r2
 80030e0:	019b      	lsls	r3, r3, #6
 80030e2:	461a      	mov	r2, r3
 80030e4:	8abb      	ldrh	r3, [r7, #20]
 80030e6:	4413      	add	r3, r2
 80030e8:	005b      	lsls	r3, r3, #1
 80030ea:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80030ec:	4413      	add	r3, r2
 80030ee:	89ba      	ldrh	r2, [r7, #12]
 80030f0:	801a      	strh	r2, [r3, #0]
					}
				}
			}
			bits <<= 1;
 80030f2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80030f6:	005b      	lsls	r3, r3, #1
 80030f8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
		for (int16_t xx = 0; xx < width; xx++) {
 80030fc:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8003100:	b29b      	uxth	r3, r3
 8003102:	3301      	adds	r3, #1
 8003104:	b29b      	uxth	r3, r3
 8003106:	853b      	strh	r3, [r7, #40]	@ 0x28
 8003108:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 800310c:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8003110:	429a      	cmp	r2, r3
 8003112:	db96      	blt.n	8003042 <drawCharIntoFramebuffer+0x74>
	for (int16_t yy = 0; yy < height; yy++) {
 8003114:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8003118:	b29b      	uxth	r3, r3
 800311a:	3301      	adds	r3, #1
 800311c:	b29b      	uxth	r3, r3
 800311e:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8003120:	f9b7 202a 	ldrsh.w	r2, [r7, #42]	@ 0x2a
 8003124:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003128:	429a      	cmp	r2, r3
 800312a:	db87      	blt.n	800303c <drawCharIntoFramebuffer+0x6e>
		}
	}

	return (uint16_t)xadv;
 800312c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003130:	b29b      	uxth	r3, r3
}
 8003132:	4618      	mov	r0, r3
 8003134:	3734      	adds	r7, #52	@ 0x34
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <drawStringIntoFramebuffer>:
	}
	return font->yAdvance;
}

uint16_t drawStringIntoFramebuffer(char* buffer, const GFXfont *font, uint16_t color, uint16_t stringxpos, uint16_t stringypos,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 800313e:	b590      	push	{r4, r7, lr}
 8003140:	b08d      	sub	sp, #52	@ 0x34
 8003142:	af06      	add	r7, sp, #24
 8003144:	60f8      	str	r0, [r7, #12]
 8003146:	60b9      	str	r1, [r7, #8]
 8003148:	4611      	mov	r1, r2
 800314a:	461a      	mov	r2, r3
 800314c:	460b      	mov	r3, r1
 800314e:	80fb      	strh	r3, [r7, #6]
 8003150:	4613      	mov	r3, r2
 8003152:	80bb      	strh	r3, [r7, #4]
	if (positioning & CENTER_OBJECT) {
 8003154:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003158:	f003 0302 	and.w	r3, r3, #2
 800315c:	2b00      	cmp	r3, #0
 800315e:	d007      	beq.n	8003170 <drawStringIntoFramebuffer+0x32>
		getStringCenter(&stringxpos, &stringypos, buffer, font);
 8003160:	1d38      	adds	r0, r7, #4
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	68fa      	ldr	r2, [r7, #12]
 8003166:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800316a:	f7ff fec8 	bl	8002efe <getStringCenter>
 800316e:	e00c      	b.n	800318a <drawStringIntoFramebuffer+0x4c>
	} else if (positioning & LEFTDRAW_OBJECT) {
 8003170:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8003174:	f003 0301 	and.w	r3, r3, #1
 8003178:	2b00      	cmp	r3, #0
 800317a:	d006      	beq.n	800318a <drawStringIntoFramebuffer+0x4c>
		getStringLeft(&stringxpos, &stringypos, buffer, font);
 800317c:	1d38      	adds	r0, r7, #4
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	68fa      	ldr	r2, [r7, #12]
 8003182:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8003186:	f7ff feef 	bl	8002f68 <getStringLeft>
	}
	uint16_t xAdvance = 0;
 800318a:	2300      	movs	r3, #0
 800318c:	82fb      	strh	r3, [r7, #22]
	uint16_t buffersize = 0;
 800318e:	2300      	movs	r3, #0
 8003190:	82bb      	strh	r3, [r7, #20]
	while (buffer[++buffersize]) {};
 8003192:	bf00      	nop
 8003194:	8abb      	ldrh	r3, [r7, #20]
 8003196:	3301      	adds	r3, #1
 8003198:	82bb      	strh	r3, [r7, #20]
 800319a:	8abb      	ldrh	r3, [r7, #20]
 800319c:	68fa      	ldr	r2, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1f6      	bne.n	8003194 <drawStringIntoFramebuffer+0x56>
	for (int i = buffersize - 1; i >= 0; i--) {
 80031a6:	8abb      	ldrh	r3, [r7, #20]
 80031a8:	3b01      	subs	r3, #1
 80031aa:	613b      	str	r3, [r7, #16]
 80031ac:	e01f      	b.n	80031ee <drawStringIntoFramebuffer+0xb0>
		xAdvance += drawCharIntoFramebuffer(buffer[i], font, color, stringxpos + xAdvance, stringypos, NO_CENTER_OBJECT, framebuffer, framewidth, xstart);
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	68fa      	ldr	r2, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	7818      	ldrb	r0, [r3, #0]
 80031b6:	88ba      	ldrh	r2, [r7, #4]
 80031b8:	8afb      	ldrh	r3, [r7, #22]
 80031ba:	4413      	add	r3, r2
 80031bc:	b29c      	uxth	r4, r3
 80031be:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80031c0:	88f9      	ldrh	r1, [r7, #6]
 80031c2:	8f3a      	ldrh	r2, [r7, #56]	@ 0x38
 80031c4:	9204      	str	r2, [sp, #16]
 80031c6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80031c8:	9203      	str	r2, [sp, #12]
 80031ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80031cc:	9202      	str	r2, [sp, #8]
 80031ce:	2200      	movs	r2, #0
 80031d0:	9201      	str	r2, [sp, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	4623      	mov	r3, r4
 80031d6:	460a      	mov	r2, r1
 80031d8:	68b9      	ldr	r1, [r7, #8]
 80031da:	f7ff fef8 	bl	8002fce <drawCharIntoFramebuffer>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	8afb      	ldrh	r3, [r7, #22]
 80031e4:	4413      	add	r3, r2
 80031e6:	82fb      	strh	r3, [r7, #22]
	for (int i = buffersize - 1; i >= 0; i--) {
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	613b      	str	r3, [r7, #16]
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	dadc      	bge.n	80031ae <drawStringIntoFramebuffer+0x70>
	}
	return font->yAdvance;
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	7b1b      	ldrb	r3, [r3, #12]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	371c      	adds	r7, #28
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd90      	pop	{r4, r7, pc}

08003200 <drawImageIntoFramebuffer>:

void drawImageIntoFramebuffer(const char *image, uint16_t length, uint16_t height, uint16_t x, uint16_t y,
		uint8_t positioning, uint16_t *framebuffer, uint16_t framewidth, uint16_t xstart) {
 8003200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003204:	f5ad 7d1c 	sub.w	sp, sp, #624	@ 0x270
 8003208:	af00      	add	r7, sp, #0
 800320a:	f507 761c 	add.w	r6, r7, #624	@ 0x270
 800320e:	f5a6 7619 	sub.w	r6, r6, #612	@ 0x264
 8003212:	6030      	str	r0, [r6, #0]
 8003214:	460e      	mov	r6, r1
 8003216:	4610      	mov	r0, r2
 8003218:	4619      	mov	r1, r3
 800321a:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800321e:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 8003222:	4632      	mov	r2, r6
 8003224:	801a      	strh	r2, [r3, #0]
 8003226:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800322a:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 800322e:	4602      	mov	r2, r0
 8003230:	801a      	strh	r2, [r3, #0]
 8003232:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003236:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800323a:	460a      	mov	r2, r1
 800323c:	801a      	strh	r2, [r3, #0]
 800323e:	466b      	mov	r3, sp
 8003240:	469a      	mov	sl, r3
	length = 400;
 8003242:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003246:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800324a:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800324e:	801a      	strh	r2, [r3, #0]
	height = 215;
 8003250:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003254:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003258:	22d7      	movs	r2, #215	@ 0xd7
 800325a:	801a      	strh	r2, [r3, #0]
	if (positioning & CENTER_OBJECT) {
 800325c:	f897 3294 	ldrb.w	r3, [r7, #660]	@ 0x294
 8003260:	f003 0302 	and.w	r3, r3, #2
 8003264:	2b00      	cmp	r3, #0
 8003266:	d00f      	beq.n	8003288 <drawImageIntoFramebuffer+0x88>
		 getRectCenter(&x, &y, length, height);
 8003268:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800326c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003270:	8819      	ldrh	r1, [r3, #0]
 8003272:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003276:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800327a:	881a      	ldrh	r2, [r3, #0]
 800327c:	1db8      	adds	r0, r7, #6
 800327e:	460b      	mov	r3, r1
 8003280:	f507 7124 	add.w	r1, r7, #656	@ 0x290
 8003284:	f7ff fe18 	bl	8002eb8 <getRectCenter>
	}
	FIL newfile;
	FRESULT fresult = f_open(&newfile, image, FA_READ);
 8003288:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800328c:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 8003290:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 8003294:	2201      	movs	r2, #1
 8003296:	6819      	ldr	r1, [r3, #0]
 8003298:	f00a feb4 	bl	800e004 <f_open>
 800329c:	4603      	mov	r3, r0
 800329e:	f887 3267 	strb.w	r3, [r7, #615]	@ 0x267
	if (fresult == FR_OK) {
 80032a2:	f897 3267 	ldrb.w	r3, [r7, #615]	@ 0x267
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d103      	bne.n	80032b2 <drawImageIntoFramebuffer+0xb2>
		USB_Println("the file was opened good\n");
 80032aa:	487e      	ldr	r0, [pc, #504]	@ (80034a4 <drawImageIntoFramebuffer+0x2a4>)
 80032ac:	f7fe fff2 	bl	8002294 <USB_Println>
 80032b0:	e007      	b.n	80032c2 <drawImageIntoFramebuffer+0xc2>
	} else {
		USB_Println("failure to open %s\n", image);
 80032b2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032b6:	f5a3 7319 	sub.w	r3, r3, #612	@ 0x264
 80032ba:	6819      	ldr	r1, [r3, #0]
 80032bc:	487a      	ldr	r0, [pc, #488]	@ (80034a8 <drawImageIntoFramebuffer+0x2a8>)
 80032be:	f7fe ffe9 	bl	8002294 <USB_Println>
	}
	uint16_t readbuffer[height];
 80032c2:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 80032c6:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 80032ca:	881e      	ldrh	r6, [r3, #0]
 80032cc:	4633      	mov	r3, r6
 80032ce:	3b01      	subs	r3, #1
 80032d0:	f8c7 3260 	str.w	r3, [r7, #608]	@ 0x260
 80032d4:	b2b3      	uxth	r3, r6
 80032d6:	2200      	movs	r2, #0
 80032d8:	4698      	mov	r8, r3
 80032da:	4691      	mov	r9, r2
 80032dc:	f04f 0200 	mov.w	r2, #0
 80032e0:	f04f 0300 	mov.w	r3, #0
 80032e4:	ea4f 1309 	mov.w	r3, r9, lsl #4
 80032e8:	ea43 7318 	orr.w	r3, r3, r8, lsr #28
 80032ec:	ea4f 1208 	mov.w	r2, r8, lsl #4
 80032f0:	b2b3      	uxth	r3, r6
 80032f2:	2200      	movs	r2, #0
 80032f4:	461c      	mov	r4, r3
 80032f6:	4615      	mov	r5, r2
 80032f8:	f04f 0200 	mov.w	r2, #0
 80032fc:	f04f 0300 	mov.w	r3, #0
 8003300:	012b      	lsls	r3, r5, #4
 8003302:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003306:	0122      	lsls	r2, r4, #4
 8003308:	4633      	mov	r3, r6
 800330a:	005b      	lsls	r3, r3, #1
 800330c:	3307      	adds	r3, #7
 800330e:	08db      	lsrs	r3, r3, #3
 8003310:	00db      	lsls	r3, r3, #3
 8003312:	ebad 0d03 	sub.w	sp, sp, r3
 8003316:	466b      	mov	r3, sp
 8003318:	3301      	adds	r3, #1
 800331a:	085b      	lsrs	r3, r3, #1
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	f8c7 325c 	str.w	r3, [r7, #604]	@ 0x25c
	unsigned int br = 0;
 8003322:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003326:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 800332a:	2200      	movs	r2, #0
 800332c:	601a      	str	r2, [r3, #0]
	for (int xx = x; xx < x + length; xx++) {
 800332e:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003332:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 8003336:	881b      	ldrh	r3, [r3, #0]
 8003338:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 800333c:	e093      	b.n	8003466 <drawImageIntoFramebuffer+0x266>
		f_read(&newfile, (void*)readbuffer, sizeof(readbuffer), &br);
 800333e:	4633      	mov	r3, r6
 8003340:	005a      	lsls	r2, r3, #1
 8003342:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003346:	f107 0028 	add.w	r0, r7, #40	@ 0x28
 800334a:	f8d7 125c 	ldr.w	r1, [r7, #604]	@ 0x25c
 800334e:	f00b f813 	bl	800e378 <f_read>
		if ((xx >= xstart) & (xx < (xstart + framewidth))) {
 8003352:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003356:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 800335a:	429a      	cmp	r2, r3
 800335c:	bfac      	ite	ge
 800335e:	2301      	movge	r3, #1
 8003360:	2300      	movlt	r3, #0
 8003362:	b2da      	uxtb	r2, r3
 8003364:	f8b7 12a0 	ldrh.w	r1, [r7, #672]	@ 0x2a0
 8003368:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 800336c:	440b      	add	r3, r1
 800336e:	f8d7 126c 	ldr.w	r1, [r7, #620]	@ 0x26c
 8003372:	4299      	cmp	r1, r3
 8003374:	bfb4      	ite	lt
 8003376:	2301      	movlt	r3, #1
 8003378:	2300      	movge	r3, #0
 800337a:	b2db      	uxtb	r3, r3
 800337c:	4013      	ands	r3, r2
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b00      	cmp	r3, #0
 8003382:	d062      	beq.n	800344a <drawImageIntoFramebuffer+0x24a>
			for (int i = 0; i < height; i++) {
 8003384:	2300      	movs	r3, #0
 8003386:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 800338a:	e055      	b.n	8003438 <drawImageIntoFramebuffer+0x238>
				//USB_Println("writing to screen, x:%d, y:%d\n",xx, y + i);
				int coordinate = ((xx - xstart) * SCREEN_HEIGHT) + y + i;
 800338c:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 8003390:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003394:	1ad2      	subs	r2, r2, r3
 8003396:	4613      	mov	r3, r2
 8003398:	009b      	lsls	r3, r3, #2
 800339a:	4413      	add	r3, r2
 800339c:	019b      	lsls	r3, r3, #6
 800339e:	461a      	mov	r2, r3
 80033a0:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 80033a4:	4413      	add	r3, r2
 80033a6:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 80033aa:	4413      	add	r3, r2
 80033ac:	f8c7 3258 	str.w	r3, [r7, #600]	@ 0x258
				char whatbuffer[20];
				itoa(coordinate, whatbuffer, 10);
 80033b0:	f107 0310 	add.w	r3, r7, #16
 80033b4:	220a      	movs	r2, #10
 80033b6:	4619      	mov	r1, r3
 80033b8:	f8d7 0258 	ldr.w	r0, [r7, #600]	@ 0x258
 80033bc:	f00b ff6d 	bl	800f29a <itoa>
				strncat(whatbuffer, "\n", 10);
 80033c0:	f107 0310 	add.w	r3, r7, #16
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fc ff0b 	bl	80001e0 <strlen>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	f107 0310 	add.w	r3, r7, #16
 80033d2:	4413      	add	r3, r2
 80033d4:	4935      	ldr	r1, [pc, #212]	@ (80034ac <drawImageIntoFramebuffer+0x2ac>)
 80033d6:	461a      	mov	r2, r3
 80033d8:	460b      	mov	r3, r1
 80033da:	881b      	ldrh	r3, [r3, #0]
 80033dc:	8013      	strh	r3, [r2, #0]
				CDC_Transmit_FS((uint8_t*)whatbuffer, strlen(whatbuffer));
 80033de:	f107 0310 	add.w	r3, r7, #16
 80033e2:	4618      	mov	r0, r3
 80033e4:	f7fc fefc 	bl	80001e0 <strlen>
 80033e8:	4603      	mov	r3, r0
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	f107 0310 	add.w	r3, r7, #16
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f00b fac2 	bl	800e97c <CDC_Transmit_FS>
				framebuffer[(xx - xstart) * SCREEN_HEIGHT + y + i] = readbuffer[i];
 80033f8:	f8b7 32a0 	ldrh.w	r3, [r7, #672]	@ 0x2a0
 80033fc:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003400:	1ad2      	subs	r2, r2, r3
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	019b      	lsls	r3, r3, #6
 800340a:	461a      	mov	r2, r3
 800340c:	f8b7 3290 	ldrh.w	r3, [r7, #656]	@ 0x290
 8003410:	441a      	add	r2, r3
 8003412:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003416:	4413      	add	r3, r2
 8003418:	005b      	lsls	r3, r3, #1
 800341a:	f8d7 2298 	ldr.w	r2, [r7, #664]	@ 0x298
 800341e:	4413      	add	r3, r2
 8003420:	f8d7 225c 	ldr.w	r2, [r7, #604]	@ 0x25c
 8003424:	f8d7 1268 	ldr.w	r1, [r7, #616]	@ 0x268
 8003428:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 800342c:	801a      	strh	r2, [r3, #0]
			for (int i = 0; i < height; i++) {
 800342e:	f8d7 3268 	ldr.w	r3, [r7, #616]	@ 0x268
 8003432:	3301      	adds	r3, #1
 8003434:	f8c7 3268 	str.w	r3, [r7, #616]	@ 0x268
 8003438:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800343c:	f5a3 731a 	sub.w	r3, r3, #616	@ 0x268
 8003440:	881b      	ldrh	r3, [r3, #0]
 8003442:	f8d7 2268 	ldr.w	r2, [r7, #616]	@ 0x268
 8003446:	429a      	cmp	r2, r3
 8003448:	dba0      	blt.n	800338c <drawImageIntoFramebuffer+0x18c>
			}
		}
		if (xx > (xstart + framewidth)) {
 800344a:	f8b7 22a0 	ldrh.w	r2, [r7, #672]	@ 0x2a0
 800344e:	f8b7 329c 	ldrh.w	r3, [r7, #668]	@ 0x29c
 8003452:	4413      	add	r3, r2
 8003454:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003458:	429a      	cmp	r2, r3
 800345a:	dc16      	bgt.n	800348a <drawImageIntoFramebuffer+0x28a>
	for (int xx = x; xx < x + length; xx++) {
 800345c:	f8d7 326c 	ldr.w	r3, [r7, #620]	@ 0x26c
 8003460:	3301      	adds	r3, #1
 8003462:	f8c7 326c 	str.w	r3, [r7, #620]	@ 0x26c
 8003466:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 800346a:	f2a3 236a 	subw	r3, r3, #618	@ 0x26a
 800346e:	881b      	ldrh	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	f507 731c 	add.w	r3, r7, #624	@ 0x270
 8003476:	f2a3 2366 	subw	r3, r3, #614	@ 0x266
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	4413      	add	r3, r2
 800347e:	f8d7 226c 	ldr.w	r2, [r7, #620]	@ 0x26c
 8003482:	429a      	cmp	r2, r3
 8003484:	f6ff af5b 	blt.w	800333e <drawImageIntoFramebuffer+0x13e>
 8003488:	e000      	b.n	800348c <drawImageIntoFramebuffer+0x28c>
			break;
 800348a:	bf00      	nop
		}
	}
	f_close(&newfile);
 800348c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8003490:	4618      	mov	r0, r3
 8003492:	f00b f92e 	bl	800e6f2 <f_close>
 8003496:	46d5      	mov	sp, sl
}
 8003498:	bf00      	nop
 800349a:	f507 771c 	add.w	r7, r7, #624	@ 0x270
 800349e:	46bd      	mov	sp, r7
 80034a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80034a4:	0800ff10 	.word	0x0800ff10
 80034a8:	0800ff2c 	.word	0x0800ff2c
 80034ac:	0800ff40 	.word	0x0800ff40

080034b0 <setrpmdata>:
DisplayObject* splashobjects[1] = {
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
};
Scene splashScene(splashobjects, 1);

void setrpmdata(char *rpmvalue) {
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b086      	sub	sp, #24
 80034b4:	af04      	add	r7, sp, #16
 80034b6:	6078      	str	r0, [r7, #4]
	strncpy(rpmresult, "", 10);
 80034b8:	220a      	movs	r2, #10
 80034ba:	4914      	ldr	r1, [pc, #80]	@ (800350c <setrpmdata+0x5c>)
 80034bc:	4814      	ldr	r0, [pc, #80]	@ (8003510 <setrpmdata+0x60>)
 80034be:	f00c f846 	bl	800f54e <strncpy>
	strncat(rpmresult, rpmvalue, 10);
 80034c2:	220a      	movs	r2, #10
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4812      	ldr	r0, [pc, #72]	@ (8003510 <setrpmdata+0x60>)
 80034c8:	f00c f82e 	bl	800f528 <strncat>
	strncat(rpmresult, "RPM", 10);
 80034cc:	4810      	ldr	r0, [pc, #64]	@ (8003510 <setrpmdata+0x60>)
 80034ce:	f7fc fe87 	bl	80001e0 <strlen>
 80034d2:	4603      	mov	r3, r0
 80034d4:	461a      	mov	r2, r3
 80034d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003510 <setrpmdata+0x60>)
 80034d8:	4413      	add	r3, r2
 80034da:	4a0e      	ldr	r2, [pc, #56]	@ (8003514 <setrpmdata+0x64>)
 80034dc:	6810      	ldr	r0, [r2, #0]
 80034de:	6018      	str	r0, [r3, #0]
	((StringObject*)otherobjects[0])->updateString(rpmresult, LEFTDRAW_OBJECT, 0xFFFF, FREE_MONO_BOLD_24PT7B, 420, 260, 1);
 80034e0:	4b0d      	ldr	r3, [pc, #52]	@ (8003518 <setrpmdata+0x68>)
 80034e2:	6818      	ldr	r0, [r3, #0]
 80034e4:	2301      	movs	r3, #1
 80034e6:	9303      	str	r3, [sp, #12]
 80034e8:	f44f 7382 	mov.w	r3, #260	@ 0x104
 80034ec:	9302      	str	r3, [sp, #8]
 80034ee:	f44f 73d2 	mov.w	r3, #420	@ 0x1a4
 80034f2:	9301      	str	r3, [sp, #4]
 80034f4:	4b09      	ldr	r3, [pc, #36]	@ (800351c <setrpmdata+0x6c>)
 80034f6:	9300      	str	r3, [sp, #0]
 80034f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80034fc:	2201      	movs	r2, #1
 80034fe:	4904      	ldr	r1, [pc, #16]	@ (8003510 <setrpmdata+0x60>)
 8003500:	f7ff f9cc 	bl	800289c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 8003504:	bf00      	nop
 8003506:	3708      	adds	r7, #8
 8003508:	46bd      	mov	sp, r7
 800350a:	bd80      	pop	{r7, pc}
 800350c:	0800ff50 	.word	0x0800ff50
 8003510:	20000380 	.word	0x20000380
 8003514:	0800ff54 	.word	0x0800ff54
 8003518:	200003bc 	.word	0x200003bc
 800351c:	0801328c 	.word	0x0801328c

08003520 <settempdata>:

void settempdata(char *tempvalue) {
 8003520:	b580      	push	{r7, lr}
 8003522:	b086      	sub	sp, #24
 8003524:	af04      	add	r7, sp, #16
 8003526:	6078      	str	r0, [r7, #4]
	strncpy(tempresult, "", 10);
 8003528:	220a      	movs	r2, #10
 800352a:	490f      	ldr	r1, [pc, #60]	@ (8003568 <settempdata+0x48>)
 800352c:	480f      	ldr	r0, [pc, #60]	@ (800356c <settempdata+0x4c>)
 800352e:	f00c f80e 	bl	800f54e <strncpy>
	strncat(tempresult, tempvalue, 10);
 8003532:	220a      	movs	r2, #10
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	480d      	ldr	r0, [pc, #52]	@ (800356c <settempdata+0x4c>)
 8003538:	f00b fff6 	bl	800f528 <strncat>
	((StringObject*)otherobjects[1])->updateString(tempresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 100, 3);
 800353c:	4b0c      	ldr	r3, [pc, #48]	@ (8003570 <settempdata+0x50>)
 800353e:	6858      	ldr	r0, [r3, #4]
 8003540:	2303      	movs	r3, #3
 8003542:	9303      	str	r3, [sp, #12]
 8003544:	2364      	movs	r3, #100	@ 0x64
 8003546:	9302      	str	r3, [sp, #8]
 8003548:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 800354c:	9301      	str	r3, [sp, #4]
 800354e:	4b09      	ldr	r3, [pc, #36]	@ (8003574 <settempdata+0x54>)
 8003550:	9300      	str	r3, [sp, #0]
 8003552:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003556:	2202      	movs	r2, #2
 8003558:	4904      	ldr	r1, [pc, #16]	@ (800356c <settempdata+0x4c>)
 800355a:	f7ff f99f 	bl	800289c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>

}
 800355e:	bf00      	nop
 8003560:	3708      	adds	r7, #8
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	0800ff50 	.word	0x0800ff50
 800356c:	20000394 	.word	0x20000394
 8003570:	200003bc 	.word	0x200003bc
 8003574:	08011434 	.word	0x08011434

08003578 <setgeardata>:

void setgeardata(char *gearvalue) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af04      	add	r7, sp, #16
 800357e:	6078      	str	r0, [r7, #4]
	strncpy(gearresult, "", 10);
 8003580:	220a      	movs	r2, #10
 8003582:	490e      	ldr	r1, [pc, #56]	@ (80035bc <setgeardata+0x44>)
 8003584:	480e      	ldr	r0, [pc, #56]	@ (80035c0 <setgeardata+0x48>)
 8003586:	f00b ffe2 	bl	800f54e <strncpy>
	strncat(gearresult, gearvalue, 10);
 800358a:	220a      	movs	r2, #10
 800358c:	6879      	ldr	r1, [r7, #4]
 800358e:	480c      	ldr	r0, [pc, #48]	@ (80035c0 <setgeardata+0x48>)
 8003590:	f00b ffca 	bl	800f528 <strncat>
	((StringObject*)otherobjects[3])->updateString(gearresult, CENTER_OBJECT, 0xFFFF, GEARFONT, 100, 240, 2);
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <setgeardata+0x4c>)
 8003596:	68d8      	ldr	r0, [r3, #12]
 8003598:	2302      	movs	r3, #2
 800359a:	9303      	str	r3, [sp, #12]
 800359c:	23f0      	movs	r3, #240	@ 0xf0
 800359e:	9302      	str	r3, [sp, #8]
 80035a0:	2364      	movs	r3, #100	@ 0x64
 80035a2:	9301      	str	r3, [sp, #4]
 80035a4:	4b08      	ldr	r3, [pc, #32]	@ (80035c8 <setgeardata+0x50>)
 80035a6:	9300      	str	r3, [sp, #0]
 80035a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80035ac:	2202      	movs	r2, #2
 80035ae:	4904      	ldr	r1, [pc, #16]	@ (80035c0 <setgeardata+0x48>)
 80035b0:	f7ff f974 	bl	800289c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 80035b4:	bf00      	nop
 80035b6:	3708      	adds	r7, #8
 80035b8:	46bd      	mov	sp, r7
 80035ba:	bd80      	pop	{r7, pc}
 80035bc:	0800ff50 	.word	0x0800ff50
 80035c0:	20000008 	.word	0x20000008
 80035c4:	200003bc 	.word	0x200003bc
 80035c8:	08017698 	.word	0x08017698

080035cc <setbattdata>:

void setbattdata(char *battvalue) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b086      	sub	sp, #24
 80035d0:	af04      	add	r7, sp, #16
 80035d2:	6078      	str	r0, [r7, #4]
	strncpy(battresult, "", 10);
 80035d4:	220a      	movs	r2, #10
 80035d6:	490f      	ldr	r1, [pc, #60]	@ (8003614 <setbattdata+0x48>)
 80035d8:	480f      	ldr	r0, [pc, #60]	@ (8003618 <setbattdata+0x4c>)
 80035da:	f00b ffb8 	bl	800f54e <strncpy>
	strncat(battresult, battvalue, 10);
 80035de:	220a      	movs	r2, #10
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	480d      	ldr	r0, [pc, #52]	@ (8003618 <setbattdata+0x4c>)
 80035e4:	f00b ffa0 	bl	800f528 <strncat>
	((StringObject*)otherobjects[2])->updateString(battresult, CENTER_OBJECT, 0xFFFF, FREE_SANS_18PT7B, 350, 60, 6);
 80035e8:	4b0c      	ldr	r3, [pc, #48]	@ (800361c <setbattdata+0x50>)
 80035ea:	6898      	ldr	r0, [r3, #8]
 80035ec:	2306      	movs	r3, #6
 80035ee:	9303      	str	r3, [sp, #12]
 80035f0:	233c      	movs	r3, #60	@ 0x3c
 80035f2:	9302      	str	r3, [sp, #8]
 80035f4:	f44f 73af 	mov.w	r3, #350	@ 0x15e
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	4b09      	ldr	r3, [pc, #36]	@ (8003620 <setbattdata+0x54>)
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003602:	2202      	movs	r2, #2
 8003604:	4904      	ldr	r1, [pc, #16]	@ (8003618 <setbattdata+0x4c>)
 8003606:	f7ff f949 	bl	800289c <_ZN12StringObject12updateStringEPchtPK7GFXfonttth>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	0800ff50 	.word	0x0800ff50
 8003618:	200003a8 	.word	0x200003a8
 800361c:	200003bc 	.word	0x200003bc
 8003620:	08011434 	.word	0x08011434

08003624 <domainscreen>:

void domainscreen() {
 8003624:	b580      	push	{r7, lr}
 8003626:	af00      	add	r7, sp, #0
	myScene2.drawScene();
 8003628:	4804      	ldr	r0, [pc, #16]	@ (800363c <domainscreen+0x18>)
 800362a:	f7fe fec9 	bl	80023c0 <_ZN5Scene9drawSceneEv>
	myScene2.setScene(otherobjects, 6);
 800362e:	2206      	movs	r2, #6
 8003630:	4903      	ldr	r1, [pc, #12]	@ (8003640 <domainscreen+0x1c>)
 8003632:	4802      	ldr	r0, [pc, #8]	@ (800363c <domainscreen+0x18>)
 8003634:	f7fe fe90 	bl	8002358 <_ZN5Scene8setSceneEPP13DisplayObjecth>
}
 8003638:	bf00      	nop
 800363a:	bd80      	pop	{r7, pc}
 800363c:	200003d4 	.word	0x200003d4
 8003640:	200003bc 	.word	0x200003bc

08003644 <_Z41__static_initialization_and_destruction_0v>:

void dosplashscene() {
	splashScene.drawScene();
	splashScene.setScene(splashobjects, 1);
}
 8003644:	b590      	push	{r4, r7, lr}
 8003646:	b085      	sub	sp, #20
 8003648:	af04      	add	r7, sp, #16
		new StringObject(420, 260, 0xFFFF, FREE_MONO_BOLD_24PT7B, LEFTDRAW_OBJECT, rpmresult, 1),
 800364a:	2018      	movs	r0, #24
 800364c:	f00b fdea 	bl	800f224 <_Znwj>
 8003650:	4603      	mov	r3, r0
 8003652:	461c      	mov	r4, r3
 8003654:	2301      	movs	r3, #1
 8003656:	9303      	str	r3, [sp, #12]
 8003658:	4b53      	ldr	r3, [pc, #332]	@ (80037a8 <_Z41__static_initialization_and_destruction_0v+0x164>)
 800365a:	9302      	str	r3, [sp, #8]
 800365c:	2301      	movs	r3, #1
 800365e:	9301      	str	r3, [sp, #4]
 8003660:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <_Z41__static_initialization_and_destruction_0v+0x168>)
 8003662:	9300      	str	r3, [sp, #0]
 8003664:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003668:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800366c:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8003670:	4620      	mov	r0, r4
 8003672:	f7ff f8a1 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 8003676:	4b4e      	ldr	r3, [pc, #312]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003678:	601c      	str	r4, [r3, #0]
		new StringObject(350, 100, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, tempresult, 3),
 800367a:	2018      	movs	r0, #24
 800367c:	f00b fdd2 	bl	800f224 <_Znwj>
 8003680:	4603      	mov	r3, r0
 8003682:	461c      	mov	r4, r3
 8003684:	2303      	movs	r3, #3
 8003686:	9303      	str	r3, [sp, #12]
 8003688:	4b4a      	ldr	r3, [pc, #296]	@ (80037b4 <_Z41__static_initialization_and_destruction_0v+0x170>)
 800368a:	9302      	str	r3, [sp, #8]
 800368c:	2302      	movs	r3, #2
 800368e:	9301      	str	r3, [sp, #4]
 8003690:	4b49      	ldr	r3, [pc, #292]	@ (80037b8 <_Z41__static_initialization_and_destruction_0v+0x174>)
 8003692:	9300      	str	r3, [sp, #0]
 8003694:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003698:	2264      	movs	r2, #100	@ 0x64
 800369a:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800369e:	4620      	mov	r0, r4
 80036a0:	f7ff f88a 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80036a4:	4b42      	ldr	r3, [pc, #264]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 80036a6:	605c      	str	r4, [r3, #4]
		new StringObject(350, 60, 0xFFFF, FREE_SANS_18PT7B, CENTER_OBJECT, battresult, 6),
 80036a8:	2018      	movs	r0, #24
 80036aa:	f00b fdbb 	bl	800f224 <_Znwj>
 80036ae:	4603      	mov	r3, r0
 80036b0:	461c      	mov	r4, r3
 80036b2:	2306      	movs	r3, #6
 80036b4:	9303      	str	r3, [sp, #12]
 80036b6:	4b41      	ldr	r3, [pc, #260]	@ (80037bc <_Z41__static_initialization_and_destruction_0v+0x178>)
 80036b8:	9302      	str	r3, [sp, #8]
 80036ba:	2302      	movs	r3, #2
 80036bc:	9301      	str	r3, [sp, #4]
 80036be:	4b3e      	ldr	r3, [pc, #248]	@ (80037b8 <_Z41__static_initialization_and_destruction_0v+0x174>)
 80036c0:	9300      	str	r3, [sp, #0]
 80036c2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036c6:	223c      	movs	r2, #60	@ 0x3c
 80036c8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80036cc:	4620      	mov	r0, r4
 80036ce:	f7ff f873 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80036d2:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 80036d4:	609c      	str	r4, [r3, #8]
		new StringObject(100, 240, 0xFFFF, GEARFONT, CENTER_OBJECT, gearresult, 2),
 80036d6:	2018      	movs	r0, #24
 80036d8:	f00b fda4 	bl	800f224 <_Znwj>
 80036dc:	4603      	mov	r3, r0
 80036de:	461c      	mov	r4, r3
 80036e0:	2302      	movs	r3, #2
 80036e2:	9303      	str	r3, [sp, #12]
 80036e4:	4b36      	ldr	r3, [pc, #216]	@ (80037c0 <_Z41__static_initialization_and_destruction_0v+0x17c>)
 80036e6:	9302      	str	r3, [sp, #8]
 80036e8:	2302      	movs	r3, #2
 80036ea:	9301      	str	r3, [sp, #4]
 80036ec:	4b35      	ldr	r3, [pc, #212]	@ (80037c4 <_Z41__static_initialization_and_destruction_0v+0x180>)
 80036ee:	9300      	str	r3, [sp, #0]
 80036f0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036f4:	22f0      	movs	r2, #240	@ 0xf0
 80036f6:	2164      	movs	r1, #100	@ 0x64
 80036f8:	4620      	mov	r0, r4
 80036fa:	f7ff f85d 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 80036fe:	4b2c      	ldr	r3, [pc, #176]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003700:	60dc      	str	r4, [r3, #12]
		new StringObject(395, 130, 0xFFFF, ICONFONT, CENTER_OBJECT, tempicon, 4),
 8003702:	2018      	movs	r0, #24
 8003704:	f00b fd8e 	bl	800f224 <_Znwj>
 8003708:	4603      	mov	r3, r0
 800370a:	461c      	mov	r4, r3
 800370c:	2304      	movs	r3, #4
 800370e:	9303      	str	r3, [sp, #12]
 8003710:	4b2d      	ldr	r3, [pc, #180]	@ (80037c8 <_Z41__static_initialization_and_destruction_0v+0x184>)
 8003712:	9302      	str	r3, [sp, #8]
 8003714:	2302      	movs	r3, #2
 8003716:	9301      	str	r3, [sp, #4]
 8003718:	4b2c      	ldr	r3, [pc, #176]	@ (80037cc <_Z41__static_initialization_and_destruction_0v+0x188>)
 800371a:	9300      	str	r3, [sp, #0]
 800371c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003720:	2282      	movs	r2, #130	@ 0x82
 8003722:	f240 118b 	movw	r1, #395	@ 0x18b
 8003726:	4620      	mov	r0, r4
 8003728:	f7ff f846 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800372c:	4b20      	ldr	r3, [pc, #128]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 800372e:	611c      	str	r4, [r3, #16]
		new StringObject(400, 90, 0xFFFF, ICONFONT, CENTER_OBJECT, batticon, 5)
 8003730:	2018      	movs	r0, #24
 8003732:	f00b fd77 	bl	800f224 <_Znwj>
 8003736:	4603      	mov	r3, r0
 8003738:	461c      	mov	r4, r3
 800373a:	2305      	movs	r3, #5
 800373c:	9303      	str	r3, [sp, #12]
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <_Z41__static_initialization_and_destruction_0v+0x18c>)
 8003740:	9302      	str	r3, [sp, #8]
 8003742:	2302      	movs	r3, #2
 8003744:	9301      	str	r3, [sp, #4]
 8003746:	4b21      	ldr	r3, [pc, #132]	@ (80037cc <_Z41__static_initialization_and_destruction_0v+0x188>)
 8003748:	9300      	str	r3, [sp, #0]
 800374a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800374e:	225a      	movs	r2, #90	@ 0x5a
 8003750:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003754:	4620      	mov	r0, r4
 8003756:	f7ff f82f 	bl	80027b8 <_ZN12StringObjectC1EtttPK7GFXfonthPch>
};
 800375a:	4b15      	ldr	r3, [pc, #84]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 800375c:	615c      	str	r4, [r3, #20]
Scene myScene2(otherobjects, 5);
 800375e:	2205      	movs	r2, #5
 8003760:	4913      	ldr	r1, [pc, #76]	@ (80037b0 <_Z41__static_initialization_and_destruction_0v+0x16c>)
 8003762:	481c      	ldr	r0, [pc, #112]	@ (80037d4 <_Z41__static_initialization_and_destruction_0v+0x190>)
 8003764:	f7fe fde6 	bl	8002334 <_ZN5SceneC1EPP13DisplayObjecth>
		new ImageObject(image, SPLASH_LENGTH, SPLASH_HEIGHT, 240, 160, CENTER_OBJECT, 2)
 8003768:	2014      	movs	r0, #20
 800376a:	f00b fd5b 	bl	800f224 <_Znwj>
 800376e:	4603      	mov	r3, r0
 8003770:	461c      	mov	r4, r3
 8003772:	4b19      	ldr	r3, [pc, #100]	@ (80037d8 <_Z41__static_initialization_and_destruction_0v+0x194>)
 8003774:	6819      	ldr	r1, [r3, #0]
 8003776:	2302      	movs	r3, #2
 8003778:	9303      	str	r3, [sp, #12]
 800377a:	2302      	movs	r3, #2
 800377c:	9302      	str	r3, [sp, #8]
 800377e:	23a0      	movs	r3, #160	@ 0xa0
 8003780:	9301      	str	r3, [sp, #4]
 8003782:	23f0      	movs	r3, #240	@ 0xf0
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	23d7      	movs	r3, #215	@ 0xd7
 8003788:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 800378c:	4620      	mov	r0, r4
 800378e:	f7ff f8b7 	bl	8002900 <_ZN11ImageObjectC1EPctttthh>
};
 8003792:	4b12      	ldr	r3, [pc, #72]	@ (80037dc <_Z41__static_initialization_and_destruction_0v+0x198>)
 8003794:	601c      	str	r4, [r3, #0]
Scene splashScene(splashobjects, 1);
 8003796:	2201      	movs	r2, #1
 8003798:	4910      	ldr	r1, [pc, #64]	@ (80037dc <_Z41__static_initialization_and_destruction_0v+0x198>)
 800379a:	4811      	ldr	r0, [pc, #68]	@ (80037e0 <_Z41__static_initialization_and_destruction_0v+0x19c>)
 800379c:	f7fe fdca 	bl	8002334 <_ZN5SceneC1EPP13DisplayObjecth>
}
 80037a0:	bf00      	nop
 80037a2:	3704      	adds	r7, #4
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bd90      	pop	{r4, r7, pc}
 80037a8:	20000380 	.word	0x20000380
 80037ac:	0801328c 	.word	0x0801328c
 80037b0:	200003bc 	.word	0x200003bc
 80037b4:	20000394 	.word	0x20000394
 80037b8:	08011434 	.word	0x08011434
 80037bc:	200003a8 	.word	0x200003a8
 80037c0:	20000008 	.word	0x20000008
 80037c4:	08017698 	.word	0x08017698
 80037c8:	2000001c 	.word	0x2000001c
 80037cc:	08017880 	.word	0x08017880
 80037d0:	20000020 	.word	0x20000020
 80037d4:	200003d4 	.word	0x200003d4
 80037d8:	20000024 	.word	0x20000024
 80037dc:	200003dc 	.word	0x200003dc
 80037e0:	200003e0 	.word	0x200003e0

080037e4 <_GLOBAL__sub_I_epd_bitmap_allArray>:
 80037e4:	b580      	push	{r7, lr}
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	f7ff ff2c 	bl	8003644 <_Z41__static_initialization_and_destruction_0v>
 80037ec:	bd80      	pop	{r7, pc}

080037ee <_ZN7MCP2515C1EP19__SPI_HandleTypeDefmP12GPIO_TypeDefh>:
const struct MCP2515::RXBn_REGS MCP2515::RXB[N_RXBUFFERS] = {
    {MCP_RXB0CTRL, MCP_RXB0SIDH, MCP_RXB0DATA, CANINTF_RX0IF},
    {MCP_RXB1CTRL, MCP_RXB1SIDH, MCP_RXB1DATA, CANINTF_RX1IF}
};

MCP2515::MCP2515(SPI_HandleTypeDef* _SPI_CAN, const  uint32_t _SPI_TIMEOUT, GPIO_TypeDef* _CS_Port, const uint8_t _CS_Pin)
 80037ee:	b580      	push	{r7, lr}
 80037f0:	b084      	sub	sp, #16
 80037f2:	af00      	add	r7, sp, #0
 80037f4:	60f8      	str	r0, [r7, #12]
 80037f6:	60b9      	str	r1, [r7, #8]
 80037f8:	607a      	str	r2, [r7, #4]
 80037fa:	603b      	str	r3, [r7, #0]
{
	SPI_CS_PORT 	= _CS_Port;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	683a      	ldr	r2, [r7, #0]
 8003800:	609a      	str	r2, [r3, #8]
    SPI_CS_PIN 		= _CS_Pin;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	7e3a      	ldrb	r2, [r7, #24]
 8003806:	731a      	strb	r2, [r3, #12]
    SPI_CAN 		= _SPI_CAN;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	68ba      	ldr	r2, [r7, #8]
 800380c:	601a      	str	r2, [r3, #0]
    SPI_TIMEOUT		= _SPI_TIMEOUT;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	605a      	str	r2, [r3, #4]
    endSPI();
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f000 f839 	bl	800388c <_ZN7MCP25156endSPIEv>
}
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <_ZN7MCP25156SPI_TxEh>:



/* SPI Tx */
void MCP2515::SPI_Tx(uint8_t data)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	460b      	mov	r3, r1
 800382e:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6818      	ldr	r0, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	1cf9      	adds	r1, r7, #3
 800383a:	2201      	movs	r2, #1
 800383c:	f003 fb71 	bl	8006f22 <HAL_SPI_Transmit>
}
 8003840:	bf00      	nop
 8003842:	3708      	adds	r7, #8
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <_ZN7MCP25156SPI_RxEv>:

/* SPI Rx */
uint8_t MCP2515::SPI_Rx(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	b084      	sub	sp, #16
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6818      	ldr	r0, [r3, #0]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f107 010f 	add.w	r1, r7, #15
 800385c:	2201      	movs	r2, #1
 800385e:	f003 fca4 	bl	80071aa <HAL_SPI_Receive>
	return retVal;
 8003862:	7bfb      	ldrb	r3, [r7, #15]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <_ZN7MCP25158startSPIEv>:

void MCP2515::startSPI() {
 800386c:	b580      	push	{r7, lr}
 800386e:	b082      	sub	sp, #8
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_RESET);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6898      	ldr	r0, [r3, #8]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	7b1b      	ldrb	r3, [r3, #12]
 800387c:	2200      	movs	r2, #0
 800387e:	4619      	mov	r1, r3
 8003880:	f001 fc12 	bl	80050a8 <HAL_GPIO_WritePin>
}
 8003884:	bf00      	nop
 8003886:	3708      	adds	r7, #8
 8003888:	46bd      	mov	sp, r7
 800388a:	bd80      	pop	{r7, pc}

0800388c <_ZN7MCP25156endSPIEv>:

void MCP2515::endSPI() {
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SPI_CS_PORT, SPI_CS_PIN, GPIO_PIN_SET);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6898      	ldr	r0, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	7b1b      	ldrb	r3, [r3, #12]
 800389c:	2201      	movs	r2, #1
 800389e:	4619      	mov	r1, r3
 80038a0:	f001 fc02 	bl	80050a8 <HAL_GPIO_WritePin>
}
 80038a4:	bf00      	nop
 80038a6:	3708      	adds	r7, #8
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <_ZN7MCP25155resetEv>:

MCP2515::ERROR MCP2515::reset(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b08c      	sub	sp, #48	@ 0x30
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
	startSPI();
 80038b4:	6878      	ldr	r0, [r7, #4]
 80038b6:	f7ff ffd9 	bl	800386c <_ZN7MCP25158startSPIEv>
	SPI_Tx(INSTRUCTION_RESET);
 80038ba:	21c0      	movs	r1, #192	@ 0xc0
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	f7ff ffb1 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
	endSPI();
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f7ff ffe2 	bl	800388c <_ZN7MCP25156endSPIEv>

    uint8_t zeros[14];
    memset(zeros, 0, sizeof(zeros));
 80038c8:	f107 0314 	add.w	r3, r7, #20
 80038cc:	220e      	movs	r2, #14
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f00b fe21 	bl	800f518 <memset>

    setRegisters(MCP_TXB0CTRL, zeros, 14);
 80038d6:	f107 0214 	add.w	r2, r7, #20
 80038da:	230e      	movs	r3, #14
 80038dc:	2130      	movs	r1, #48	@ 0x30
 80038de:	6878      	ldr	r0, [r7, #4]
 80038e0:	f000 f8ec 	bl	8003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB1CTRL, zeros, 14);
 80038e4:	f107 0214 	add.w	r2, r7, #20
 80038e8:	230e      	movs	r3, #14
 80038ea:	2140      	movs	r1, #64	@ 0x40
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8e5 	bl	8003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>
    setRegisters(MCP_TXB2CTRL, zeros, 14);
 80038f2:	f107 0214 	add.w	r2, r7, #20
 80038f6:	230e      	movs	r3, #14
 80038f8:	2150      	movs	r1, #80	@ 0x50
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f000 f8de 	bl	8003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    setRegister(MCP_RXB0CTRL, 0);
 8003900:	2200      	movs	r2, #0
 8003902:	2160      	movs	r1, #96	@ 0x60
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	f000 f8b9 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
    setRegister(MCP_RXB1CTRL, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2170      	movs	r1, #112	@ 0x70
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f8b4 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    setRegister(MCP_CANINTE, CANINTF_RX0IF | CANINTF_RX1IF | CANINTF_ERRIF | CANINTF_MERRF);
 8003914:	22a3      	movs	r2, #163	@ 0xa3
 8003916:	212b      	movs	r1, #43	@ 0x2b
 8003918:	6878      	ldr	r0, [r7, #4]
 800391a:	f000 f8af 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>

    // receives all valid messages using either Standard or Extended Identifiers that
    // meet filter criteria. RXF0 is applied for RXB0, RXF1 is applied for RXB1
    modifyRegister(MCP_RXB0CTRL,
 800391e:	2304      	movs	r3, #4
 8003920:	2267      	movs	r2, #103	@ 0x67
 8003922:	2160      	movs	r1, #96	@ 0x60
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 f8f8 	bl	8003b1a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_MASK | RXB0CTRL_BUKT | RXB0CTRL_FILHIT_MASK,
                   RXBnCTRL_RXM_STDEXT | RXB0CTRL_BUKT | RXB0CTRL_FILHIT);
    modifyRegister(MCP_RXB1CTRL,
 800392a:	2301      	movs	r3, #1
 800392c:	2267      	movs	r2, #103	@ 0x67
 800392e:	2170      	movs	r1, #112	@ 0x70
 8003930:	6878      	ldr	r0, [r7, #4]
 8003932:	f000 f8f2 	bl	8003b1a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>
                   RXBnCTRL_RXM_STDEXT | RXB1CTRL_FILHIT);

    // clear filters and masks
    // do not filter any standard frames for RXF0 used by RXB0
    // do not filter any extended frames for RXF1 used by RXB1
    RXF filters[] = {RXF0, RXF1, RXF2, RXF3, RXF4, RXF5};
 8003936:	4a29      	ldr	r2, [pc, #164]	@ (80039dc <_ZN7MCP25155resetEv+0x130>)
 8003938:	f107 030c 	add.w	r3, r7, #12
 800393c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003940:	6018      	str	r0, [r3, #0]
 8003942:	3304      	adds	r3, #4
 8003944:	8019      	strh	r1, [r3, #0]
    for (int i=0; i<6; i++) {
 8003946:	2300      	movs	r3, #0
 8003948:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800394a:	e01e      	b.n	800398a <_ZN7MCP25155resetEv+0xde>
        bool ext = (i == 1);
 800394c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800394e:	2b01      	cmp	r3, #1
 8003950:	bf0c      	ite	eq
 8003952:	2301      	moveq	r3, #1
 8003954:	2300      	movne	r3, #0
 8003956:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        ERROR result = setFilter(filters[i], ext, 0);
 800395a:	f107 020c 	add.w	r2, r7, #12
 800395e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003960:	4413      	add	r3, r2
 8003962:	7819      	ldrb	r1, [r3, #0]
 8003964:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8003968:	2300      	movs	r3, #0
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	f000 fbce 	bl	800410c <_ZN7MCP25159setFilterENS_3RXFEbm>
 8003970:	4603      	mov	r3, r0
 8003972:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        if (result != ERROR_OK) {
 8003976:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800397a:	2b00      	cmp	r3, #0
 800397c:	d002      	beq.n	8003984 <_ZN7MCP25155resetEv+0xd8>
            return result;
 800397e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8003982:	e027      	b.n	80039d4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<6; i++) {
 8003984:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003986:	3301      	adds	r3, #1
 8003988:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800398a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800398c:	2b05      	cmp	r3, #5
 800398e:	dddd      	ble.n	800394c <_ZN7MCP25155resetEv+0xa0>
        }
    }

    MASK masks[] = {MASK0, MASK1};
 8003990:	2300      	movs	r3, #0
 8003992:	723b      	strb	r3, [r7, #8]
 8003994:	2301      	movs	r3, #1
 8003996:	727b      	strb	r3, [r7, #9]
    for (int i=0; i<2; i++) {
 8003998:	2300      	movs	r3, #0
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800399c:	e016      	b.n	80039cc <_ZN7MCP25155resetEv+0x120>
        ERROR result = setFilterMask(masks[i], true, 0);
 800399e:	f107 0208 	add.w	r2, r7, #8
 80039a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039a4:	4413      	add	r3, r2
 80039a6:	7819      	ldrb	r1, [r3, #0]
 80039a8:	2300      	movs	r3, #0
 80039aa:	2201      	movs	r2, #1
 80039ac:	6878      	ldr	r0, [r7, #4]
 80039ae:	f000 fb79 	bl	80040a4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>
 80039b2:	4603      	mov	r3, r0
 80039b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        if (result != ERROR_OK) {
 80039b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d002      	beq.n	80039c6 <_ZN7MCP25155resetEv+0x11a>
            return result;
 80039c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80039c4:	e006      	b.n	80039d4 <_ZN7MCP25155resetEv+0x128>
    for (int i=0; i<2; i++) {
 80039c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039c8:	3301      	adds	r3, #1
 80039ca:	62bb      	str	r3, [r7, #40]	@ 0x28
 80039cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	dde5      	ble.n	800399e <_ZN7MCP25155resetEv+0xf2>
        }
    }

    return ERROR_OK;
 80039d2:	2300      	movs	r3, #0
}
 80039d4:	4618      	mov	r0, r3
 80039d6:	3730      	adds	r7, #48	@ 0x30
 80039d8:	46bd      	mov	sp, r7
 80039da:	bd80      	pop	{r7, pc}
 80039dc:	0800ff58 	.word	0x0800ff58

080039e0 <_ZN7MCP251512readRegisterENS_8REGISTERE>:

uint8_t MCP2515::readRegister(const REGISTER reg)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	70fb      	strb	r3, [r7, #3]
    startSPI();
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ff3d 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 80039f2:	2103      	movs	r1, #3
 80039f4:	6878      	ldr	r0, [r7, #4]
 80039f6:	f7ff ff15 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 80039fa:	78fb      	ldrb	r3, [r7, #3]
 80039fc:	4619      	mov	r1, r3
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f7ff ff10 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    uint8_t ret = SPI_Rx();
 8003a04:	6878      	ldr	r0, [r7, #4]
 8003a06:	f7ff ff1f 	bl	8003848 <_ZN7MCP25156SPI_RxEv>
 8003a0a:	4603      	mov	r3, r0
 8003a0c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f7ff ff3c 	bl	800388c <_ZN7MCP25156endSPIEv>

    return ret;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>:

void MCP2515::readRegisters(const REGISTER reg, uint8_t values[], const uint8_t n)
{
 8003a1e:	b590      	push	{r4, r7, lr}
 8003a20:	b087      	sub	sp, #28
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	60f8      	str	r0, [r7, #12]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	461a      	mov	r2, r3
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	72fb      	strb	r3, [r7, #11]
 8003a2e:	4613      	mov	r3, r2
 8003a30:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003a32:	68f8      	ldr	r0, [r7, #12]
 8003a34:	f7ff ff1a 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ);
 8003a38:	2103      	movs	r1, #3
 8003a3a:	68f8      	ldr	r0, [r7, #12]
 8003a3c:	f7ff fef2 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	4619      	mov	r1, r3
 8003a44:	68f8      	ldr	r0, [r7, #12]
 8003a46:	f7ff feed 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    // ms_mcp2515 has auto-increment of address-pointer
    for (uint8_t i=0; i<n; i++) {
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]
 8003a4e:	e00a      	b.n	8003a66 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x48>
        values[i] =  SPI_Rx();
 8003a50:	7dfb      	ldrb	r3, [r7, #23]
 8003a52:	687a      	ldr	r2, [r7, #4]
 8003a54:	18d4      	adds	r4, r2, r3
 8003a56:	68f8      	ldr	r0, [r7, #12]
 8003a58:	f7ff fef6 	bl	8003848 <_ZN7MCP25156SPI_RxEv>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	7023      	strb	r3, [r4, #0]
    for (uint8_t i=0; i<n; i++) {
 8003a60:	7dfb      	ldrb	r3, [r7, #23]
 8003a62:	3301      	adds	r3, #1
 8003a64:	75fb      	strb	r3, [r7, #23]
 8003a66:	7dfa      	ldrb	r2, [r7, #23]
 8003a68:	7abb      	ldrb	r3, [r7, #10]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d3f0      	bcc.n	8003a50 <_ZN7MCP251513readRegistersENS_8REGISTEREPhh+0x32>
    }
    endSPI();
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f7ff ff0c 	bl	800388c <_ZN7MCP25156endSPIEv>
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd90      	pop	{r4, r7, pc}

08003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>:

void MCP2515::setRegister(const REGISTER reg, const uint8_t value)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	460b      	mov	r3, r1
 8003a86:	70fb      	strb	r3, [r7, #3]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	70bb      	strb	r3, [r7, #2]
    startSPI();
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f7ff feed 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003a92:	2102      	movs	r1, #2
 8003a94:	6878      	ldr	r0, [r7, #4]
 8003a96:	f7ff fec5 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff fec0 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(value);
 8003aa4:	78bb      	ldrb	r3, [r7, #2]
 8003aa6:	4619      	mov	r1, r3
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff febb 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f7ff feec 	bl	800388c <_ZN7MCP25156endSPIEv>
}
 8003ab4:	bf00      	nop
 8003ab6:	3708      	adds	r7, #8
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>:

void MCP2515::setRegisters(const REGISTER reg, const uint8_t values[], const uint8_t n)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b086      	sub	sp, #24
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	607a      	str	r2, [r7, #4]
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	460b      	mov	r3, r1
 8003aca:	72fb      	strb	r3, [r7, #11]
 8003acc:	4613      	mov	r3, r2
 8003ace:	72bb      	strb	r3, [r7, #10]
    startSPI();
 8003ad0:	68f8      	ldr	r0, [r7, #12]
 8003ad2:	f7ff fecb 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_WRITE);
 8003ad6:	2102      	movs	r1, #2
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7ff fea3 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003ade:	7afb      	ldrb	r3, [r7, #11]
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	68f8      	ldr	r0, [r7, #12]
 8003ae4:	f7ff fe9e 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003ae8:	2300      	movs	r3, #0
 8003aea:	75fb      	strb	r3, [r7, #23]
 8003aec:	e00a      	b.n	8003b04 <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x48>
        SPI_Tx(values[i]);
 8003aee:	7dfb      	ldrb	r3, [r7, #23]
 8003af0:	687a      	ldr	r2, [r7, #4]
 8003af2:	4413      	add	r3, r2
 8003af4:	781b      	ldrb	r3, [r3, #0]
 8003af6:	4619      	mov	r1, r3
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f7ff fe93 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    for (uint8_t i=0; i<n; i++) {
 8003afe:	7dfb      	ldrb	r3, [r7, #23]
 8003b00:	3301      	adds	r3, #1
 8003b02:	75fb      	strb	r3, [r7, #23]
 8003b04:	7dfa      	ldrb	r2, [r7, #23]
 8003b06:	7abb      	ldrb	r3, [r7, #10]
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d3f0      	bcc.n	8003aee <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh+0x32>
    }
    endSPI();
 8003b0c:	68f8      	ldr	r0, [r7, #12]
 8003b0e:	f7ff febd 	bl	800388c <_ZN7MCP25156endSPIEv>
}
 8003b12:	bf00      	nop
 8003b14:	3718      	adds	r7, #24
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}

08003b1a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>:

void MCP2515::modifyRegister(const REGISTER reg, const uint8_t mask, const uint8_t data)
{
 8003b1a:	b580      	push	{r7, lr}
 8003b1c:	b082      	sub	sp, #8
 8003b1e:	af00      	add	r7, sp, #0
 8003b20:	6078      	str	r0, [r7, #4]
 8003b22:	4608      	mov	r0, r1
 8003b24:	4611      	mov	r1, r2
 8003b26:	461a      	mov	r2, r3
 8003b28:	4603      	mov	r3, r0
 8003b2a:	70fb      	strb	r3, [r7, #3]
 8003b2c:	460b      	mov	r3, r1
 8003b2e:	70bb      	strb	r3, [r7, #2]
 8003b30:	4613      	mov	r3, r2
 8003b32:	707b      	strb	r3, [r7, #1]
    startSPI();
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7ff fe99 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_BITMOD);
 8003b3a:	2105      	movs	r1, #5
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	f7ff fe71 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(reg);
 8003b42:	78fb      	ldrb	r3, [r7, #3]
 8003b44:	4619      	mov	r1, r3
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fe6c 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(mask);
 8003b4c:	78bb      	ldrb	r3, [r7, #2]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff fe67 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    SPI_Tx(data);
 8003b56:	787b      	ldrb	r3, [r7, #1]
 8003b58:	4619      	mov	r1, r3
 8003b5a:	6878      	ldr	r0, [r7, #4]
 8003b5c:	f7ff fe62 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    endSPI();
 8003b60:	6878      	ldr	r0, [r7, #4]
 8003b62:	f7ff fe93 	bl	800388c <_ZN7MCP25156endSPIEv>
}
 8003b66:	bf00      	nop
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <_ZN7MCP25159getStatusEv>:

uint8_t MCP2515::getStatus(void)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
    startSPI();
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fe78 	bl	800386c <_ZN7MCP25158startSPIEv>
    SPI_Tx(INSTRUCTION_READ_STATUS);
 8003b7c:	21a0      	movs	r1, #160	@ 0xa0
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f7ff fe50 	bl	8003824 <_ZN7MCP25156SPI_TxEh>
    uint8_t i =  SPI_Rx();
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff fe5f 	bl	8003848 <_ZN7MCP25156SPI_RxEv>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	73fb      	strb	r3, [r7, #15]
    endSPI();
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f7ff fe7c 	bl	800388c <_ZN7MCP25156endSPIEv>

    return i;
 8003b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b96:	4618      	mov	r0, r3
 8003b98:	3710      	adds	r7, #16
 8003b9a:	46bd      	mov	sp, r7
 8003b9c:	bd80      	pop	{r7, pc}

08003b9e <_ZN7MCP251513setConfigModeEv>:

MCP2515::ERROR MCP2515::setConfigMode()
{
 8003b9e:	b580      	push	{r7, lr}
 8003ba0:	b082      	sub	sp, #8
 8003ba2:	af00      	add	r7, sp, #0
 8003ba4:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_CONFIG);
 8003ba6:	2180      	movs	r1, #128	@ 0x80
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f812 	bl	8003bd2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003bae:	4603      	mov	r3, r0
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3708      	adds	r7, #8
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZN7MCP251513setNormalModeEv>:
{
    return setMode(CANCTRL_REQOP_LOOPBACK);
}

MCP2515::ERROR MCP2515::setNormalMode()
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b082      	sub	sp, #8
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
    return setMode(CANCTRL_REQOP_NORMAL);
 8003bc0:	2100      	movs	r1, #0
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f805 	bl	8003bd2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>
 8003bc8:	4603      	mov	r3, r0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3708      	adds	r7, #8
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}

08003bd2 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE>:

MCP2515::ERROR MCP2515::setMode(const CANCTRL_REQOP_MODE mode)
{
 8003bd2:	b580      	push	{r7, lr}
 8003bd4:	b086      	sub	sp, #24
 8003bd6:	af00      	add	r7, sp, #0
 8003bd8:	6078      	str	r0, [r7, #4]
 8003bda:	460b      	mov	r3, r1
 8003bdc:	70fb      	strb	r3, [r7, #3]
    modifyRegister(MCP_CANCTRL, CANCTRL_REQOP, mode);
 8003bde:	78fb      	ldrb	r3, [r7, #3]
 8003be0:	22e0      	movs	r2, #224	@ 0xe0
 8003be2:	210f      	movs	r1, #15
 8003be4:	6878      	ldr	r0, [r7, #4]
 8003be6:	f7ff ff98 	bl	8003b1a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    unsigned long endTime = HAL_GetTick() + 10;
 8003bea:	f000 fc05 	bl	80043f8 <HAL_GetTick>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	330a      	adds	r3, #10
 8003bf2:	613b      	str	r3, [r7, #16]
    bool modeMatch = false;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	75fb      	strb	r3, [r7, #23]
    while (HAL_GetTick() < endTime) {
 8003bf8:	e013      	b.n	8003c22 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x50>
        uint8_t newmode = readRegister(MCP_CANSTAT);
 8003bfa:	210e      	movs	r1, #14
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7ff feef 	bl	80039e0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8003c02:	4603      	mov	r3, r0
 8003c04:	73fb      	strb	r3, [r7, #15]
        newmode &= CANSTAT_OPMOD;
 8003c06:	7bfb      	ldrb	r3, [r7, #15]
 8003c08:	f023 031f 	bic.w	r3, r3, #31
 8003c0c:	73fb      	strb	r3, [r7, #15]

        modeMatch = newmode == mode;
 8003c0e:	7bfa      	ldrb	r2, [r7, #15]
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	bf0c      	ite	eq
 8003c16:	2301      	moveq	r3, #1
 8003c18:	2300      	movne	r3, #0
 8003c1a:	75fb      	strb	r3, [r7, #23]

        if (modeMatch) {
 8003c1c:	7dfb      	ldrb	r3, [r7, #23]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10b      	bne.n	8003c3a <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x68>
    while (HAL_GetTick() < endTime) {
 8003c22:	f000 fbe9 	bl	80043f8 <HAL_GetTick>
 8003c26:	4602      	mov	r2, r0
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	bf8c      	ite	hi
 8003c2e:	2301      	movhi	r3, #1
 8003c30:	2300      	movls	r3, #0
 8003c32:	b2db      	uxtb	r3, r3
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1e0      	bne.n	8003bfa <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x28>
 8003c38:	e000      	b.n	8003c3c <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x6a>
            break;
 8003c3a:	bf00      	nop
        }
    }

    return modeMatch ? ERROR_OK : ERROR_FAIL;
 8003c3c:	7dfb      	ldrb	r3, [r7, #23]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d001      	beq.n	8003c46 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x74>
 8003c42:	2300      	movs	r3, #0
 8003c44:	e000      	b.n	8003c48 <_ZN7MCP25157setModeENS_18CANCTRL_REQOP_MODEE+0x76>
 8003c46:	2301      	movs	r3, #1

}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3718      	adds	r7, #24
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}

08003c50 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK>:
{
    return setBitrate(canSpeed, MCP_16MHZ);
}

MCP2515::ERROR MCP2515::setBitrate(const CAN_SPEED canSpeed, CAN_CLOCK canClock)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b084      	sub	sp, #16
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	70fb      	strb	r3, [r7, #3]
 8003c5c:	4613      	mov	r3, r2
 8003c5e:	70bb      	strb	r3, [r7, #2]
    ERROR error = setConfigMode();
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f7ff ff9c 	bl	8003b9e <_ZN7MCP251513setConfigModeEv>
 8003c66:	4603      	mov	r3, r0
 8003c68:	72fb      	strb	r3, [r7, #11]
    if (error != ERROR_OK) {
 8003c6a:	7afb      	ldrb	r3, [r7, #11]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x24>
        return error;
 8003c70:	7afb      	ldrb	r3, [r7, #11]
 8003c72:	e1b5      	b.n	8003fe0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }

    uint8_t set, cfg1, cfg2, cfg3;
    set = 1;
 8003c74:	2301      	movs	r3, #1
 8003c76:	73fb      	strb	r3, [r7, #15]
    switch (canClock)
 8003c78:	78bb      	ldrb	r3, [r7, #2]
 8003c7a:	2b02      	cmp	r3, #2
 8003c7c:	d009      	beq.n	8003c92 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x42>
 8003c7e:	2b02      	cmp	r3, #2
 8003c80:	f300 8193 	bgt.w	8003faa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	f000 811f 	beq.w	8003ec8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x278>
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	f000 808e 	beq.w	8003dac <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15c>
 8003c90:	e18b      	b.n	8003faa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x35a>
    {
        case (MCP_8MHZ):
        switch (canSpeed)
 8003c92:	78fb      	ldrb	r3, [r7, #3]
 8003c94:	2b0f      	cmp	r3, #15
 8003c96:	f200 8085 	bhi.w	8003da4 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x154>
 8003c9a:	a201      	add	r2, pc, #4	@ (adr r2, 8003ca0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x50>)
 8003c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca0:	08003ce1 	.word	0x08003ce1
 8003ca4:	08003cef 	.word	0x08003cef
 8003ca8:	08003cfd 	.word	0x08003cfd
 8003cac:	08003d0b 	.word	0x08003d0b
 8003cb0:	08003d19 	.word	0x08003d19
 8003cb4:	08003d27 	.word	0x08003d27
 8003cb8:	08003d35 	.word	0x08003d35
 8003cbc:	08003d43 	.word	0x08003d43
 8003cc0:	08003da5 	.word	0x08003da5
 8003cc4:	08003da5 	.word	0x08003da5
 8003cc8:	08003d51 	.word	0x08003d51
 8003ccc:	08003d5f 	.word	0x08003d5f
 8003cd0:	08003d6d 	.word	0x08003d6d
 8003cd4:	08003d7b 	.word	0x08003d7b
 8003cd8:	08003d89 	.word	0x08003d89
 8003cdc:	08003d97 	.word	0x08003d97
        {
            case (CAN_5KBPS):                                               //   5KBPS
            cfg1 = MCP_8MHz_5kBPS_CFG1;
 8003ce0:	231f      	movs	r3, #31
 8003ce2:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_5kBPS_CFG2;
 8003ce4:	23bf      	movs	r3, #191	@ 0xbf
 8003ce6:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_5kBPS_CFG3;
 8003ce8:	2387      	movs	r3, #135	@ 0x87
 8003cea:	733b      	strb	r3, [r7, #12]
            break;
 8003cec:	e05d      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_10KBPS):                                              //  10KBPS
            cfg1 = MCP_8MHz_10kBPS_CFG1;
 8003cee:	230f      	movs	r3, #15
 8003cf0:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_10kBPS_CFG2;
 8003cf2:	23bf      	movs	r3, #191	@ 0xbf
 8003cf4:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_10kBPS_CFG3;
 8003cf6:	2387      	movs	r3, #135	@ 0x87
 8003cf8:	733b      	strb	r3, [r7, #12]
            break;
 8003cfa:	e056      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_20KBPS):                                              //  20KBPS
            cfg1 = MCP_8MHz_20kBPS_CFG1;
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_20kBPS_CFG2;
 8003d00:	23bf      	movs	r3, #191	@ 0xbf
 8003d02:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_20kBPS_CFG3;
 8003d04:	2387      	movs	r3, #135	@ 0x87
 8003d06:	733b      	strb	r3, [r7, #12]
            break;
 8003d08:	e04f      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_31K25BPS):                                            //  31.25KBPS
            cfg1 = MCP_8MHz_31k25BPS_CFG1;
 8003d0a:	2307      	movs	r3, #7
 8003d0c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_31k25BPS_CFG2;
 8003d0e:	23a4      	movs	r3, #164	@ 0xa4
 8003d10:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_31k25BPS_CFG3;
 8003d12:	2384      	movs	r3, #132	@ 0x84
 8003d14:	733b      	strb	r3, [r7, #12]
            break;
 8003d16:	e048      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_33KBPS):                                              //  33.333KBPS
            cfg1 = MCP_8MHz_33k3BPS_CFG1;
 8003d18:	2347      	movs	r3, #71	@ 0x47
 8003d1a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_33k3BPS_CFG2;
 8003d1c:	23e2      	movs	r3, #226	@ 0xe2
 8003d1e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_33k3BPS_CFG3;
 8003d20:	2385      	movs	r3, #133	@ 0x85
 8003d22:	733b      	strb	r3, [r7, #12]
            break;
 8003d24:	e041      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_8MHz_40kBPS_CFG1;
 8003d26:	2303      	movs	r3, #3
 8003d28:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_40kBPS_CFG2;
 8003d2a:	23bf      	movs	r3, #191	@ 0xbf
 8003d2c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_40kBPS_CFG3;
 8003d2e:	2387      	movs	r3, #135	@ 0x87
 8003d30:	733b      	strb	r3, [r7, #12]
            break;
 8003d32:	e03a      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_8MHz_50kBPS_CFG1;
 8003d34:	2303      	movs	r3, #3
 8003d36:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_50kBPS_CFG2;
 8003d38:	23b4      	movs	r3, #180	@ 0xb4
 8003d3a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_50kBPS_CFG3;
 8003d3c:	2386      	movs	r3, #134	@ 0x86
 8003d3e:	733b      	strb	r3, [r7, #12]
            break;
 8003d40:	e033      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_8MHz_80kBPS_CFG1;
 8003d42:	2301      	movs	r3, #1
 8003d44:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_80kBPS_CFG2;
 8003d46:	23bf      	movs	r3, #191	@ 0xbf
 8003d48:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_80kBPS_CFG3;
 8003d4a:	2387      	movs	r3, #135	@ 0x87
 8003d4c:	733b      	strb	r3, [r7, #12]
            break;
 8003d4e:	e02c      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_8MHz_100kBPS_CFG1;
 8003d50:	2301      	movs	r3, #1
 8003d52:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_100kBPS_CFG2;
 8003d54:	23b4      	movs	r3, #180	@ 0xb4
 8003d56:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_100kBPS_CFG3;
 8003d58:	2386      	movs	r3, #134	@ 0x86
 8003d5a:	733b      	strb	r3, [r7, #12]
            break;
 8003d5c:	e025      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_8MHz_125kBPS_CFG1;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_125kBPS_CFG2;
 8003d62:	23b1      	movs	r3, #177	@ 0xb1
 8003d64:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_125kBPS_CFG3;
 8003d66:	2385      	movs	r3, #133	@ 0x85
 8003d68:	733b      	strb	r3, [r7, #12]
            break;
 8003d6a:	e01e      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_8MHz_200kBPS_CFG1;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_200kBPS_CFG2;
 8003d70:	23b4      	movs	r3, #180	@ 0xb4
 8003d72:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_200kBPS_CFG3;
 8003d74:	2386      	movs	r3, #134	@ 0x86
 8003d76:	733b      	strb	r3, [r7, #12]
            break;
 8003d78:	e017      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_8MHz_250kBPS_CFG1;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_250kBPS_CFG2;
 8003d7e:	23b1      	movs	r3, #177	@ 0xb1
 8003d80:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_250kBPS_CFG3;
 8003d82:	2385      	movs	r3, #133	@ 0x85
 8003d84:	733b      	strb	r3, [r7, #12]
            break;
 8003d86:	e010      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_8MHz_500kBPS_CFG1;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_500kBPS_CFG2;
 8003d8c:	2390      	movs	r3, #144	@ 0x90
 8003d8e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_500kBPS_CFG3;
 8003d90:	2382      	movs	r3, #130	@ 0x82
 8003d92:	733b      	strb	r3, [r7, #12]
            break;
 8003d94:	e009      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_8MHz_1000kBPS_CFG1;
 8003d96:	2300      	movs	r3, #0
 8003d98:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_8MHz_1000kBPS_CFG2;
 8003d9a:	2380      	movs	r3, #128	@ 0x80
 8003d9c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_8MHz_1000kBPS_CFG3;
 8003d9e:	2380      	movs	r3, #128	@ 0x80
 8003da0:	733b      	strb	r3, [r7, #12]
            break;
 8003da2:	e002      	b.n	8003daa <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x15a>

            default:
            set = 0;
 8003da4:	2300      	movs	r3, #0
 8003da6:	73fb      	strb	r3, [r7, #15]
            break;
 8003da8:	bf00      	nop
        }
        break;
 8003daa:	e101      	b.n	8003fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_16MHZ):
        switch (canSpeed)
 8003dac:	78fb      	ldrb	r3, [r7, #3]
 8003dae:	2b0f      	cmp	r3, #15
 8003db0:	f200 8086 	bhi.w	8003ec0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x270>
 8003db4:	a201      	add	r2, pc, #4	@ (adr r2, 8003dbc <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x16c>)
 8003db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dba:	bf00      	nop
 8003dbc:	08003dfd 	.word	0x08003dfd
 8003dc0:	08003e0b 	.word	0x08003e0b
 8003dc4:	08003e19 	.word	0x08003e19
 8003dc8:	08003ec1 	.word	0x08003ec1
 8003dcc:	08003e27 	.word	0x08003e27
 8003dd0:	08003e35 	.word	0x08003e35
 8003dd4:	08003e43 	.word	0x08003e43
 8003dd8:	08003e51 	.word	0x08003e51
 8003ddc:	08003e5f 	.word	0x08003e5f
 8003de0:	08003ec1 	.word	0x08003ec1
 8003de4:	08003e6d 	.word	0x08003e6d
 8003de8:	08003e7b 	.word	0x08003e7b
 8003dec:	08003e89 	.word	0x08003e89
 8003df0:	08003e97 	.word	0x08003e97
 8003df4:	08003ea5 	.word	0x08003ea5
 8003df8:	08003eb3 	.word	0x08003eb3
        {
            case (CAN_5KBPS):                                               //   5Kbps
            cfg1 = MCP_16MHz_5kBPS_CFG1;
 8003dfc:	233f      	movs	r3, #63	@ 0x3f
 8003dfe:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_5kBPS_CFG2;
 8003e00:	23ff      	movs	r3, #255	@ 0xff
 8003e02:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_5kBPS_CFG3;
 8003e04:	2387      	movs	r3, #135	@ 0x87
 8003e06:	733b      	strb	r3, [r7, #12]
            break;
 8003e08:	e05d      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_10KBPS):                                              //  10Kbps
            cfg1 = MCP_16MHz_10kBPS_CFG1;
 8003e0a:	231f      	movs	r3, #31
 8003e0c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_10kBPS_CFG2;
 8003e0e:	23ff      	movs	r3, #255	@ 0xff
 8003e10:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_10kBPS_CFG3;
 8003e12:	2387      	movs	r3, #135	@ 0x87
 8003e14:	733b      	strb	r3, [r7, #12]
            break;
 8003e16:	e056      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_20KBPS):                                              //  20Kbps
            cfg1 = MCP_16MHz_20kBPS_CFG1;
 8003e18:	230f      	movs	r3, #15
 8003e1a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_20kBPS_CFG2;
 8003e1c:	23ff      	movs	r3, #255	@ 0xff
 8003e1e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_20kBPS_CFG3;
 8003e20:	2387      	movs	r3, #135	@ 0x87
 8003e22:	733b      	strb	r3, [r7, #12]
            break;
 8003e24:	e04f      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_16MHz_33k3BPS_CFG1;
 8003e26:	234e      	movs	r3, #78	@ 0x4e
 8003e28:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_33k3BPS_CFG2;
 8003e2a:	23f1      	movs	r3, #241	@ 0xf1
 8003e2c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_33k3BPS_CFG3;
 8003e2e:	2385      	movs	r3, #133	@ 0x85
 8003e30:	733b      	strb	r3, [r7, #12]
            break;
 8003e32:	e048      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_16MHz_40kBPS_CFG1;
 8003e34:	2307      	movs	r3, #7
 8003e36:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_40kBPS_CFG2;
 8003e38:	23ff      	movs	r3, #255	@ 0xff
 8003e3a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_40kBPS_CFG3;
 8003e3c:	2387      	movs	r3, #135	@ 0x87
 8003e3e:	733b      	strb	r3, [r7, #12]
            break;
 8003e40:	e041      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_16MHz_50kBPS_CFG1;
 8003e42:	2307      	movs	r3, #7
 8003e44:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_50kBPS_CFG2;
 8003e46:	23fa      	movs	r3, #250	@ 0xfa
 8003e48:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_50kBPS_CFG3;
 8003e4a:	2387      	movs	r3, #135	@ 0x87
 8003e4c:	733b      	strb	r3, [r7, #12]
            break;
 8003e4e:	e03a      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_16MHz_80kBPS_CFG1;
 8003e50:	2303      	movs	r3, #3
 8003e52:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_80kBPS_CFG2;
 8003e54:	23ff      	movs	r3, #255	@ 0xff
 8003e56:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_80kBPS_CFG3;
 8003e58:	2387      	movs	r3, #135	@ 0x87
 8003e5a:	733b      	strb	r3, [r7, #12]
            break;
 8003e5c:	e033      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_16MHz_83k3BPS_CFG1;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_83k3BPS_CFG2;
 8003e62:	23be      	movs	r3, #190	@ 0xbe
 8003e64:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_83k3BPS_CFG3;
 8003e66:	2307      	movs	r3, #7
 8003e68:	733b      	strb	r3, [r7, #12]
            break;
 8003e6a:	e02c      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_16MHz_100kBPS_CFG1;
 8003e6c:	2303      	movs	r3, #3
 8003e6e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_100kBPS_CFG2;
 8003e70:	23fa      	movs	r3, #250	@ 0xfa
 8003e72:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_100kBPS_CFG3;
 8003e74:	2387      	movs	r3, #135	@ 0x87
 8003e76:	733b      	strb	r3, [r7, #12]
            break;
 8003e78:	e025      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_16MHz_125kBPS_CFG1;
 8003e7a:	2303      	movs	r3, #3
 8003e7c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_125kBPS_CFG2;
 8003e7e:	23f0      	movs	r3, #240	@ 0xf0
 8003e80:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_125kBPS_CFG3;
 8003e82:	2386      	movs	r3, #134	@ 0x86
 8003e84:	733b      	strb	r3, [r7, #12]
            break;
 8003e86:	e01e      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_16MHz_200kBPS_CFG1;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_200kBPS_CFG2;
 8003e8c:	23fa      	movs	r3, #250	@ 0xfa
 8003e8e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_200kBPS_CFG3;
 8003e90:	2387      	movs	r3, #135	@ 0x87
 8003e92:	733b      	strb	r3, [r7, #12]
            break;
 8003e94:	e017      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_16MHz_250kBPS_CFG1;
 8003e96:	2341      	movs	r3, #65	@ 0x41
 8003e98:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_250kBPS_CFG2;
 8003e9a:	23f1      	movs	r3, #241	@ 0xf1
 8003e9c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_250kBPS_CFG3;
 8003e9e:	2385      	movs	r3, #133	@ 0x85
 8003ea0:	733b      	strb	r3, [r7, #12]
            break;
 8003ea2:	e010      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_16MHz_500kBPS_CFG1;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_500kBPS_CFG2;
 8003ea8:	23f0      	movs	r3, #240	@ 0xf0
 8003eaa:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_500kBPS_CFG3;
 8003eac:	2386      	movs	r3, #134	@ 0x86
 8003eae:	733b      	strb	r3, [r7, #12]
            break;
 8003eb0:	e009      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_16MHz_1000kBPS_CFG1;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_16MHz_1000kBPS_CFG2;
 8003eb6:	23d0      	movs	r3, #208	@ 0xd0
 8003eb8:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_16MHz_1000kBPS_CFG3;
 8003eba:	2382      	movs	r3, #130	@ 0x82
 8003ebc:	733b      	strb	r3, [r7, #12]
            break;
 8003ebe:	e002      	b.n	8003ec6 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x276>

            default:
            set = 0;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	73fb      	strb	r3, [r7, #15]
            break;
 8003ec4:	bf00      	nop
        }
        break;
 8003ec6:	e073      	b.n	8003fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        case (MCP_20MHZ):
        switch (canSpeed)
 8003ec8:	78fb      	ldrb	r3, [r7, #3]
 8003eca:	3b04      	subs	r3, #4
 8003ecc:	2b0b      	cmp	r3, #11
 8003ece:	d868      	bhi.n	8003fa2 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x352>
 8003ed0:	a201      	add	r2, pc, #4	@ (adr r2, 8003ed8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x288>)
 8003ed2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed6:	bf00      	nop
 8003ed8:	08003f09 	.word	0x08003f09
 8003edc:	08003f17 	.word	0x08003f17
 8003ee0:	08003f25 	.word	0x08003f25
 8003ee4:	08003f33 	.word	0x08003f33
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003fa3 	.word	0x08003fa3
 8003ef0:	08003f4f 	.word	0x08003f4f
 8003ef4:	08003f5d 	.word	0x08003f5d
 8003ef8:	08003f6b 	.word	0x08003f6b
 8003efc:	08003f79 	.word	0x08003f79
 8003f00:	08003f87 	.word	0x08003f87
 8003f04:	08003f95 	.word	0x08003f95
        {
            case (CAN_33KBPS):                                              //  33.333Kbps
            cfg1 = MCP_20MHz_33k3BPS_CFG1;
 8003f08:	230b      	movs	r3, #11
 8003f0a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_33k3BPS_CFG2;
 8003f0c:	23ff      	movs	r3, #255	@ 0xff
 8003f0e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_33k3BPS_CFG3;
 8003f10:	2387      	movs	r3, #135	@ 0x87
 8003f12:	733b      	strb	r3, [r7, #12]
	    break;
 8003f14:	e048      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_40KBPS):                                              //  40Kbps
            cfg1 = MCP_20MHz_40kBPS_CFG1;
 8003f16:	2309      	movs	r3, #9
 8003f18:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_40kBPS_CFG2;
 8003f1a:	23ff      	movs	r3, #255	@ 0xff
 8003f1c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_40kBPS_CFG3;
 8003f1e:	2387      	movs	r3, #135	@ 0x87
 8003f20:	733b      	strb	r3, [r7, #12]
            break;
 8003f22:	e041      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_50KBPS):                                              //  50Kbps
            cfg1 = MCP_20MHz_50kBPS_CFG1;
 8003f24:	2309      	movs	r3, #9
 8003f26:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_50kBPS_CFG2;
 8003f28:	23fa      	movs	r3, #250	@ 0xfa
 8003f2a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_50kBPS_CFG3;
 8003f2c:	2387      	movs	r3, #135	@ 0x87
 8003f2e:	733b      	strb	r3, [r7, #12]
            break;
 8003f30:	e03a      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_80KBPS):                                              //  80Kbps
            cfg1 = MCP_20MHz_80kBPS_CFG1;
 8003f32:	2304      	movs	r3, #4
 8003f34:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_80kBPS_CFG2;
 8003f36:	23ff      	movs	r3, #255	@ 0xff
 8003f38:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_80kBPS_CFG3;
 8003f3a:	2387      	movs	r3, #135	@ 0x87
 8003f3c:	733b      	strb	r3, [r7, #12]
            break;
 8003f3e:	e033      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_83K3BPS):                                             //  83.333Kbps
            cfg1 = MCP_20MHz_83k3BPS_CFG1;
 8003f40:	2304      	movs	r3, #4
 8003f42:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_83k3BPS_CFG2;
 8003f44:	23fe      	movs	r3, #254	@ 0xfe
 8003f46:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_83k3BPS_CFG3;
 8003f48:	2387      	movs	r3, #135	@ 0x87
 8003f4a:	733b      	strb	r3, [r7, #12]
	    break;
 8003f4c:	e02c      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_100KBPS):                                             // 100Kbps
            cfg1 = MCP_20MHz_100kBPS_CFG1;
 8003f4e:	2304      	movs	r3, #4
 8003f50:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_100kBPS_CFG2;
 8003f52:	23fa      	movs	r3, #250	@ 0xfa
 8003f54:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_100kBPS_CFG3;
 8003f56:	2387      	movs	r3, #135	@ 0x87
 8003f58:	733b      	strb	r3, [r7, #12]
            break;
 8003f5a:	e025      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_125KBPS):                                             // 125Kbps
            cfg1 = MCP_20MHz_125kBPS_CFG1;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_125kBPS_CFG2;
 8003f60:	23fa      	movs	r3, #250	@ 0xfa
 8003f62:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_125kBPS_CFG3;
 8003f64:	2387      	movs	r3, #135	@ 0x87
 8003f66:	733b      	strb	r3, [r7, #12]
            break;
 8003f68:	e01e      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_200KBPS):                                             // 200Kbps
            cfg1 = MCP_20MHz_200kBPS_CFG1;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_200kBPS_CFG2;
 8003f6e:	23ff      	movs	r3, #255	@ 0xff
 8003f70:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_200kBPS_CFG3;
 8003f72:	2387      	movs	r3, #135	@ 0x87
 8003f74:	733b      	strb	r3, [r7, #12]
            break;
 8003f76:	e017      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_250KBPS):                                             // 250Kbps
            cfg1 = MCP_20MHz_250kBPS_CFG1;
 8003f78:	2341      	movs	r3, #65	@ 0x41
 8003f7a:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_250kBPS_CFG2;
 8003f7c:	23fb      	movs	r3, #251	@ 0xfb
 8003f7e:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_250kBPS_CFG3;
 8003f80:	2386      	movs	r3, #134	@ 0x86
 8003f82:	733b      	strb	r3, [r7, #12]
            break;
 8003f84:	e010      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_500KBPS):                                             // 500Kbps
            cfg1 = MCP_20MHz_500kBPS_CFG1;
 8003f86:	2300      	movs	r3, #0
 8003f88:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_500kBPS_CFG2;
 8003f8a:	23fa      	movs	r3, #250	@ 0xfa
 8003f8c:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_500kBPS_CFG3;
 8003f8e:	2387      	movs	r3, #135	@ 0x87
 8003f90:	733b      	strb	r3, [r7, #12]
            break;
 8003f92:	e009      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            case (CAN_1000KBPS):                                            //   1Mbps
            cfg1 = MCP_20MHz_1000kBPS_CFG1;
 8003f94:	2300      	movs	r3, #0
 8003f96:	73bb      	strb	r3, [r7, #14]
            cfg2 = MCP_20MHz_1000kBPS_CFG2;
 8003f98:	23d9      	movs	r3, #217	@ 0xd9
 8003f9a:	737b      	strb	r3, [r7, #13]
            cfg3 = MCP_20MHz_1000kBPS_CFG3;
 8003f9c:	2382      	movs	r3, #130	@ 0x82
 8003f9e:	733b      	strb	r3, [r7, #12]
            break;
 8003fa0:	e002      	b.n	8003fa8 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x358>

            default:
            set = 0;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	73fb      	strb	r3, [r7, #15]
            break;
 8003fa6:	bf00      	nop
        }
        break;
 8003fa8:	e002      	b.n	8003fb0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x360>

        default:
        set = 0;
 8003faa:	2300      	movs	r3, #0
 8003fac:	73fb      	strb	r3, [r7, #15]
        break;
 8003fae:	bf00      	nop
    }

    if (set) {
 8003fb0:	7bfb      	ldrb	r3, [r7, #15]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d013      	beq.n	8003fde <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x38e>
        setRegister(MCP_CNF1, cfg1);
 8003fb6:	7bbb      	ldrb	r3, [r7, #14]
 8003fb8:	461a      	mov	r2, r3
 8003fba:	212a      	movs	r1, #42	@ 0x2a
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f7ff fd5d 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF2, cfg2);
 8003fc2:	7b7b      	ldrb	r3, [r7, #13]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	2129      	movs	r1, #41	@ 0x29
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff fd57 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        setRegister(MCP_CNF3, cfg3);
 8003fce:	7b3b      	ldrb	r3, [r7, #12]
 8003fd0:	461a      	mov	r2, r3
 8003fd2:	2128      	movs	r1, #40	@ 0x28
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f7ff fd51 	bl	8003a7c <_ZN7MCP251511setRegisterENS_8REGISTEREh>
        return ERROR_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	e000      	b.n	8003fe0 <_ZN7MCP251510setBitrateE9CAN_SPEED9CAN_CLOCK+0x390>
    }
    else {
        return ERROR_FAIL;
 8003fde:	2301      	movs	r3, #1
    }
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3710      	adds	r7, #16
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <_ZN7MCP25159prepareIdEPhbm>:
    modifyRegister(MCP_CNF3, CNF3_SOF, 0x00);
    return ERROR_OK;
}

void MCP2515::prepareId(uint8_t *buffer, const bool ext, const uint32_t id)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	603b      	str	r3, [r7, #0]
 8003ff4:	4613      	mov	r3, r2
 8003ff6:	71fb      	strb	r3, [r7, #7]
    uint16_t canid = (uint16_t)(id & 0x0FFFF);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	82fb      	strh	r3, [r7, #22]

    if (ext) {
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d035      	beq.n	800406e <_ZN7MCP25159prepareIdEPhbm+0x86>
        buffer[MCP_EID0] = (uint8_t) (canid & 0xFF);
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	3303      	adds	r3, #3
 8004006:	8afa      	ldrh	r2, [r7, #22]
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = (uint8_t) (canid >> 8);
 800400c:	8afb      	ldrh	r3, [r7, #22]
 800400e:	0a1b      	lsrs	r3, r3, #8
 8004010:	b29a      	uxth	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	3302      	adds	r3, #2
 8004016:	b2d2      	uxtb	r2, r2
 8004018:	701a      	strb	r2, [r3, #0]
        canid = (uint16_t)(id >> 16);
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	0c1b      	lsrs	r3, r3, #16
 800401e:	82fb      	strh	r3, [r7, #22]
        buffer[MCP_SIDL] = (uint8_t) (canid & 0x03);
 8004020:	8afb      	ldrh	r3, [r7, #22]
 8004022:	b2da      	uxtb	r2, r3
 8004024:	68bb      	ldr	r3, [r7, #8]
 8004026:	3301      	adds	r3, #1
 8004028:	f002 0203 	and.w	r2, r2, #3
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] += (uint8_t) ((canid & 0x1C) << 3);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	3301      	adds	r3, #1
 8004034:	7819      	ldrb	r1, [r3, #0]
 8004036:	8afb      	ldrh	r3, [r7, #22]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	00db      	lsls	r3, r3, #3
 800403c:	b2db      	uxtb	r3, r3
 800403e:	f023 031f 	bic.w	r3, r3, #31
 8004042:	b2da      	uxtb	r2, r3
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	3301      	adds	r3, #1
 8004048:	440a      	add	r2, r1
 800404a:	b2d2      	uxtb	r2, r2
 800404c:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] |= TXB_EXIDE_MASK;
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	3301      	adds	r3, #1
 8004052:	781a      	ldrb	r2, [r3, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	3301      	adds	r3, #1
 8004058:	f042 0208 	orr.w	r2, r2, #8
 800405c:	b2d2      	uxtb	r2, r2
 800405e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 5);
 8004060:	8afb      	ldrh	r3, [r7, #22]
 8004062:	095b      	lsrs	r3, r3, #5
 8004064:	b29b      	uxth	r3, r3
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
        buffer[MCP_EID0] = 0;
        buffer[MCP_EID8] = 0;
    }
}
 800406c:	e014      	b.n	8004098 <_ZN7MCP25159prepareIdEPhbm+0xb0>
        buffer[MCP_SIDH] = (uint8_t) (canid >> 3);
 800406e:	8afb      	ldrh	r3, [r7, #22]
 8004070:	08db      	lsrs	r3, r3, #3
 8004072:	b29b      	uxth	r3, r3
 8004074:	b2da      	uxtb	r2, r3
 8004076:	68bb      	ldr	r3, [r7, #8]
 8004078:	701a      	strb	r2, [r3, #0]
        buffer[MCP_SIDL] = (uint8_t) ((canid & 0x07 ) << 5);
 800407a:	8afb      	ldrh	r3, [r7, #22]
 800407c:	b2da      	uxtb	r2, r3
 800407e:	68bb      	ldr	r3, [r7, #8]
 8004080:	3301      	adds	r3, #1
 8004082:	0152      	lsls	r2, r2, #5
 8004084:	b2d2      	uxtb	r2, r2
 8004086:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID0] = 0;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	3303      	adds	r3, #3
 800408c:	2200      	movs	r2, #0
 800408e:	701a      	strb	r2, [r3, #0]
        buffer[MCP_EID8] = 0;
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	3302      	adds	r3, #2
 8004094:	2200      	movs	r2, #0
 8004096:	701a      	strb	r2, [r3, #0]
}
 8004098:	bf00      	nop
 800409a:	371c      	adds	r7, #28
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm>:

MCP2515::ERROR MCP2515::setFilterMask(const MASK mask, const bool ext, const uint32_t ulData)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b086      	sub	sp, #24
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	607b      	str	r3, [r7, #4]
 80040ae:	460b      	mov	r3, r1
 80040b0:	72fb      	strb	r3, [r7, #11]
 80040b2:	4613      	mov	r3, r2
 80040b4:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 80040b6:	68f8      	ldr	r0, [r7, #12]
 80040b8:	f7ff fd71 	bl	8003b9e <_ZN7MCP251513setConfigModeEv>
 80040bc:	4603      	mov	r3, r0
 80040be:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 80040c0:	7dbb      	ldrb	r3, [r7, #22]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d001      	beq.n	80040ca <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x26>
        return res;
 80040c6:	7dbb      	ldrb	r3, [r7, #22]
 80040c8:	e01c      	b.n	8004104 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 80040ca:	7aba      	ldrb	r2, [r7, #10]
 80040cc:	f107 0110 	add.w	r1, r7, #16
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	68f8      	ldr	r0, [r7, #12]
 80040d4:	f7ff ff88 	bl	8003fe8 <_ZN7MCP25159prepareIdEPhbm>

    REGISTER reg;
    switch (mask) {
 80040d8:	7afb      	ldrb	r3, [r7, #11]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d002      	beq.n	80040e4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x40>
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d003      	beq.n	80040ea <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x46>
 80040e2:	e005      	b.n	80040f0 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x4c>
        case MASK0: reg = MCP_RXM0SIDH; break;
 80040e4:	2320      	movs	r3, #32
 80040e6:	75fb      	strb	r3, [r7, #23]
 80040e8:	e004      	b.n	80040f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        case MASK1: reg = MCP_RXM1SIDH; break;
 80040ea:	2324      	movs	r3, #36	@ 0x24
 80040ec:	75fb      	strb	r3, [r7, #23]
 80040ee:	e001      	b.n	80040f4 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x50>
        default:
            return ERROR_FAIL;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e007      	b.n	8004104 <_ZN7MCP251513setFilterMaskENS_4MASKEbm+0x60>
    }

    setRegisters(reg, tbufdata, 4);
 80040f4:	f107 0210 	add.w	r2, r7, #16
 80040f8:	7df9      	ldrb	r1, [r7, #23]
 80040fa:	2304      	movs	r3, #4
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7ff fcdd 	bl	8003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 8004102:	2300      	movs	r3, #0
}
 8004104:	4618      	mov	r0, r3
 8004106:	3718      	adds	r7, #24
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}

0800410c <_ZN7MCP25159setFilterENS_3RXFEbm>:

MCP2515::ERROR MCP2515::setFilter(const RXF num, const bool ext, const uint32_t ulData)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	607b      	str	r3, [r7, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	72fb      	strb	r3, [r7, #11]
 800411a:	4613      	mov	r3, r2
 800411c:	72bb      	strb	r3, [r7, #10]
    ERROR res = setConfigMode();
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f7ff fd3d 	bl	8003b9e <_ZN7MCP251513setConfigModeEv>
 8004124:	4603      	mov	r3, r0
 8004126:	75bb      	strb	r3, [r7, #22]
    if (res != ERROR_OK) {
 8004128:	7dbb      	ldrb	r3, [r7, #22]
 800412a:	2b00      	cmp	r3, #0
 800412c:	d001      	beq.n	8004132 <_ZN7MCP25159setFilterENS_3RXFEbm+0x26>
        return res;
 800412e:	7dbb      	ldrb	r3, [r7, #22]
 8004130:	e035      	b.n	800419e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    REGISTER reg;

    switch (num) {
 8004132:	7afb      	ldrb	r3, [r7, #11]
 8004134:	2b05      	cmp	r3, #5
 8004136:	d821      	bhi.n	800417c <_ZN7MCP25159setFilterENS_3RXFEbm+0x70>
 8004138:	a201      	add	r2, pc, #4	@ (adr r2, 8004140 <_ZN7MCP25159setFilterENS_3RXFEbm+0x34>)
 800413a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800413e:	bf00      	nop
 8004140:	08004159 	.word	0x08004159
 8004144:	0800415f 	.word	0x0800415f
 8004148:	08004165 	.word	0x08004165
 800414c:	0800416b 	.word	0x0800416b
 8004150:	08004171 	.word	0x08004171
 8004154:	08004177 	.word	0x08004177
        case RXF0: reg = MCP_RXF0SIDH; break;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
 800415c:	e010      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF1: reg = MCP_RXF1SIDH; break;
 800415e:	2304      	movs	r3, #4
 8004160:	75fb      	strb	r3, [r7, #23]
 8004162:	e00d      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF2: reg = MCP_RXF2SIDH; break;
 8004164:	2308      	movs	r3, #8
 8004166:	75fb      	strb	r3, [r7, #23]
 8004168:	e00a      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF3: reg = MCP_RXF3SIDH; break;
 800416a:	2310      	movs	r3, #16
 800416c:	75fb      	strb	r3, [r7, #23]
 800416e:	e007      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF4: reg = MCP_RXF4SIDH; break;
 8004170:	2314      	movs	r3, #20
 8004172:	75fb      	strb	r3, [r7, #23]
 8004174:	e004      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        case RXF5: reg = MCP_RXF5SIDH; break;
 8004176:	2318      	movs	r3, #24
 8004178:	75fb      	strb	r3, [r7, #23]
 800417a:	e001      	b.n	8004180 <_ZN7MCP25159setFilterENS_3RXFEbm+0x74>
        default:
            return ERROR_FAIL;
 800417c:	2301      	movs	r3, #1
 800417e:	e00e      	b.n	800419e <_ZN7MCP25159setFilterENS_3RXFEbm+0x92>
    }

    uint8_t tbufdata[4];
    prepareId(tbufdata, ext, ulData);
 8004180:	7aba      	ldrb	r2, [r7, #10]
 8004182:	f107 0110 	add.w	r1, r7, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	68f8      	ldr	r0, [r7, #12]
 800418a:	f7ff ff2d 	bl	8003fe8 <_ZN7MCP25159prepareIdEPhbm>
    setRegisters(reg, tbufdata, 4);
 800418e:	f107 0210 	add.w	r2, r7, #16
 8004192:	7df9      	ldrb	r1, [r7, #23]
 8004194:	2304      	movs	r3, #4
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7ff fc90 	bl	8003abc <_ZN7MCP251512setRegistersENS_8REGISTEREPKhh>

    return ERROR_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3718      	adds	r7, #24
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop

080041a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>:

    return ERROR_ALLTXBUSY;
}

MCP2515::ERROR MCP2515::readMessage(const RXBn rxbn, struct can_frame *frame)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b088      	sub	sp, #32
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	460b      	mov	r3, r1
 80041b2:	607a      	str	r2, [r7, #4]
 80041b4:	72fb      	strb	r3, [r7, #11]
    const struct RXBn_REGS *rxb = &RXB[rxbn];
 80041b6:	7afb      	ldrb	r3, [r7, #11]
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	4a30      	ldr	r2, [pc, #192]	@ (800427c <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xd4>)
 80041bc:	4413      	add	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]

    uint8_t tbufdata[5];

    readRegisters(rxb->SIDH, tbufdata, 5);
 80041c0:	69bb      	ldr	r3, [r7, #24]
 80041c2:	7859      	ldrb	r1, [r3, #1]
 80041c4:	f107 0210 	add.w	r2, r7, #16
 80041c8:	2305      	movs	r3, #5
 80041ca:	68f8      	ldr	r0, [r7, #12]
 80041cc:	f7ff fc27 	bl	8003a1e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    uint32_t id = (tbufdata[MCP_SIDH]<<3) + (tbufdata[MCP_SIDL]>>5);
 80041d0:	7c3b      	ldrb	r3, [r7, #16]
 80041d2:	00db      	lsls	r3, r3, #3
 80041d4:	7c7a      	ldrb	r2, [r7, #17]
 80041d6:	0952      	lsrs	r2, r2, #5
 80041d8:	b2d2      	uxtb	r2, r2
 80041da:	4413      	add	r3, r2
 80041dc:	61fb      	str	r3, [r7, #28]

    if ( (tbufdata[MCP_SIDL] & TXB_EXIDE_MASK) ==  TXB_EXIDE_MASK ) {
 80041de:	7c7b      	ldrb	r3, [r7, #17]
 80041e0:	f003 0308 	and.w	r3, r3, #8
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d014      	beq.n	8004212 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x6a>
        id = (id<<2) + (tbufdata[MCP_SIDL] & 0x03);
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	7c7b      	ldrb	r3, [r7, #17]
 80041ee:	f003 0303 	and.w	r3, r3, #3
 80041f2:	4413      	add	r3, r2
 80041f4:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID8];
 80041f6:	69fb      	ldr	r3, [r7, #28]
 80041f8:	021b      	lsls	r3, r3, #8
 80041fa:	7cba      	ldrb	r2, [r7, #18]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
        id = (id<<8) + tbufdata[MCP_EID0];
 8004200:	69fb      	ldr	r3, [r7, #28]
 8004202:	021b      	lsls	r3, r3, #8
 8004204:	7cfa      	ldrb	r2, [r7, #19]
 8004206:	4413      	add	r3, r2
 8004208:	61fb      	str	r3, [r7, #28]
        id |= CAN_EFF_FLAG;
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004210:	61fb      	str	r3, [r7, #28]
    }

    uint8_t dlc = (tbufdata[MCP_DLC] & DLC_MASK);
 8004212:	7d3b      	ldrb	r3, [r7, #20]
 8004214:	f003 030f 	and.w	r3, r3, #15
 8004218:	75fb      	strb	r3, [r7, #23]
    if (dlc > CAN_MAX_DLEN) {
 800421a:	7dfb      	ldrb	r3, [r7, #23]
 800421c:	2b08      	cmp	r3, #8
 800421e:	d901      	bls.n	8004224 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x7c>
        return ERROR_FAIL;
 8004220:	2301      	movs	r3, #1
 8004222:	e027      	b.n	8004274 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0xcc>
    }

    uint8_t ctrl = readRegister(rxb->CTRL);
 8004224:	69bb      	ldr	r3, [r7, #24]
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	4619      	mov	r1, r3
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fbd8 	bl	80039e0 <_ZN7MCP251512readRegisterENS_8REGISTERE>
 8004230:	4603      	mov	r3, r0
 8004232:	75bb      	strb	r3, [r7, #22]
    if (ctrl & RXBnCTRL_RTR) {
 8004234:	7dbb      	ldrb	r3, [r7, #22]
 8004236:	f003 0308 	and.w	r3, r3, #8
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame+0x9e>
        id |= CAN_RTR_FLAG;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004244:	61fb      	str	r3, [r7, #28]
    }

    frame->can_id = id;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	69fa      	ldr	r2, [r7, #28]
 800424a:	601a      	str	r2, [r3, #0]
    frame->can_dlc = dlc;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7dfa      	ldrb	r2, [r7, #23]
 8004250:	711a      	strb	r2, [r3, #4]

    readRegisters(rxb->DATA, frame->data, dlc);
 8004252:	69bb      	ldr	r3, [r7, #24]
 8004254:	7899      	ldrb	r1, [r3, #2]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f103 0208 	add.w	r2, r3, #8
 800425c:	7dfb      	ldrb	r3, [r7, #23]
 800425e:	68f8      	ldr	r0, [r7, #12]
 8004260:	f7ff fbdd 	bl	8003a1e <_ZN7MCP251513readRegistersENS_8REGISTEREPhh>

    modifyRegister(MCP_CANINTF, rxb->CANINTF_RXnIF, 0);
 8004264:	69bb      	ldr	r3, [r7, #24]
 8004266:	78da      	ldrb	r2, [r3, #3]
 8004268:	2300      	movs	r3, #0
 800426a:	212c      	movs	r1, #44	@ 0x2c
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f7ff fc54 	bl	8003b1a <_ZN7MCP251514modifyRegisterENS_8REGISTEREhh>

    return ERROR_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3720      	adds	r7, #32
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}
 800427c:	08017890 	.word	0x08017890

08004280 <_ZN7MCP251511readMessageEP9can_frame>:

MCP2515::ERROR MCP2515::readMessage(struct can_frame *frame)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
    ERROR rc;
    uint8_t stat = getStatus();
 800428a:	6878      	ldr	r0, [r7, #4]
 800428c:	f7ff fc6f 	bl	8003b6e <_ZN7MCP25159getStatusEv>
 8004290:	4603      	mov	r3, r0
 8004292:	73bb      	strb	r3, [r7, #14]

    if ( stat & STAT_RX0IF ) {
 8004294:	7bbb      	ldrb	r3, [r7, #14]
 8004296:	f003 0301 	and.w	r3, r3, #1
 800429a:	2b00      	cmp	r3, #0
 800429c:	d007      	beq.n	80042ae <_ZN7MCP251511readMessageEP9can_frame+0x2e>
        rc = readMessage(RXB0, frame);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	2100      	movs	r1, #0
 80042a2:	6878      	ldr	r0, [r7, #4]
 80042a4:	f7ff ff80 	bl	80041a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80042a8:	4603      	mov	r3, r0
 80042aa:	73fb      	strb	r3, [r7, #15]
 80042ac:	e00e      	b.n	80042cc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else if ( stat & STAT_RX1IF ) {
 80042ae:	7bbb      	ldrb	r3, [r7, #14]
 80042b0:	f003 0302 	and.w	r3, r3, #2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d007      	beq.n	80042c8 <_ZN7MCP251511readMessageEP9can_frame+0x48>
        rc = readMessage(RXB1, frame);
 80042b8:	683a      	ldr	r2, [r7, #0]
 80042ba:	2101      	movs	r1, #1
 80042bc:	6878      	ldr	r0, [r7, #4]
 80042be:	f7ff ff73 	bl	80041a8 <_ZN7MCP251511readMessageENS_4RXBnEP9can_frame>
 80042c2:	4603      	mov	r3, r0
 80042c4:	73fb      	strb	r3, [r7, #15]
 80042c6:	e001      	b.n	80042cc <_ZN7MCP251511readMessageEP9can_frame+0x4c>
    } else {
        rc = ERROR_NOMSG;
 80042c8:	2305      	movs	r3, #5
 80042ca:	73fb      	strb	r3, [r7, #15]
    }

    return rc;
 80042cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}
	...

080042d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80042d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004310 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80042dc:	f7fd fec4 	bl	8002068 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80042e0:	480c      	ldr	r0, [pc, #48]	@ (8004314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80042e2:	490d      	ldr	r1, [pc, #52]	@ (8004318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80042e4:	4a0d      	ldr	r2, [pc, #52]	@ (800431c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80042e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80042e8:	e002      	b.n	80042f0 <LoopCopyDataInit>

080042ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80042ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80042ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80042ee:	3304      	adds	r3, #4

080042f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80042f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80042f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80042f4:	d3f9      	bcc.n	80042ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80042f6:	4a0a      	ldr	r2, [pc, #40]	@ (8004320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80042f8:	4c0a      	ldr	r4, [pc, #40]	@ (8004324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80042fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80042fc:	e001      	b.n	8004302 <LoopFillZerobss>

080042fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80042fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004300:	3204      	adds	r2, #4

08004302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004304:	d3fb      	bcc.n	80042fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004306:	f00b f98f 	bl	800f628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800430a:	f7fc ff5d 	bl	80011c8 <main>
  bx  lr    
 800430e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004310:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8004314:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004318:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 800431c:	08017990 	.word	0x08017990
  ldr r2, =_sbss
 8004320:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8004324:	20001958 	.word	0x20001958

08004328 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004328:	e7fe      	b.n	8004328 <ADC_IRQHandler>
	...

0800432c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004330:	4b0e      	ldr	r3, [pc, #56]	@ (800436c <HAL_Init+0x40>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a0d      	ldr	r2, [pc, #52]	@ (800436c <HAL_Init+0x40>)
 8004336:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800433a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800433c:	4b0b      	ldr	r3, [pc, #44]	@ (800436c <HAL_Init+0x40>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <HAL_Init+0x40>)
 8004342:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004346:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004348:	4b08      	ldr	r3, [pc, #32]	@ (800436c <HAL_Init+0x40>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a07      	ldr	r2, [pc, #28]	@ (800436c <HAL_Init+0x40>)
 800434e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004354:	2003      	movs	r0, #3
 8004356:	f000 f94f 	bl	80045f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800435a:	200f      	movs	r0, #15
 800435c:	f000 f808 	bl	8004370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004360:	f7fd fd62 	bl	8001e28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004364:	2300      	movs	r3, #0
}
 8004366:	4618      	mov	r0, r3
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00

08004370 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004378:	4b12      	ldr	r3, [pc, #72]	@ (80043c4 <HAL_InitTick+0x54>)
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	4b12      	ldr	r3, [pc, #72]	@ (80043c8 <HAL_InitTick+0x58>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	4619      	mov	r1, r3
 8004382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004386:	fbb3 f3f1 	udiv	r3, r3, r1
 800438a:	fbb2 f3f3 	udiv	r3, r2, r3
 800438e:	4618      	mov	r0, r3
 8004390:	f000 f967 	bl	8004662 <HAL_SYSTICK_Config>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d001      	beq.n	800439e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800439a:	2301      	movs	r3, #1
 800439c:	e00e      	b.n	80043bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2b0f      	cmp	r3, #15
 80043a2:	d80a      	bhi.n	80043ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80043a4:	2200      	movs	r2, #0
 80043a6:	6879      	ldr	r1, [r7, #4]
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043ac:	f000 f92f 	bl	800460e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80043b0:	4a06      	ldr	r2, [pc, #24]	@ (80043cc <HAL_InitTick+0x5c>)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e000      	b.n	80043bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80043ba:	2301      	movs	r3, #1
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3708      	adds	r7, #8
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}
 80043c4:	20000004 	.word	0x20000004
 80043c8:	2000002c 	.word	0x2000002c
 80043cc:	20000028 	.word	0x20000028

080043d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80043d0:	b480      	push	{r7}
 80043d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80043d4:	4b06      	ldr	r3, [pc, #24]	@ (80043f0 <HAL_IncTick+0x20>)
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	461a      	mov	r2, r3
 80043da:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <HAL_IncTick+0x24>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4413      	add	r3, r2
 80043e0:	4a04      	ldr	r2, [pc, #16]	@ (80043f4 <HAL_IncTick+0x24>)
 80043e2:	6013      	str	r3, [r2, #0]
}
 80043e4:	bf00      	nop
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr
 80043ee:	bf00      	nop
 80043f0:	2000002c 	.word	0x2000002c
 80043f4:	200003e8 	.word	0x200003e8

080043f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return uwTick;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_GetTick+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	200003e8 	.word	0x200003e8

08004410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004418:	f7ff ffee 	bl	80043f8 <HAL_GetTick>
 800441c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004428:	d005      	beq.n	8004436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800442a:	4b0a      	ldr	r3, [pc, #40]	@ (8004454 <HAL_Delay+0x44>)
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	461a      	mov	r2, r3
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	4413      	add	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004436:	bf00      	nop
 8004438:	f7ff ffde 	bl	80043f8 <HAL_GetTick>
 800443c:	4602      	mov	r2, r0
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	68fa      	ldr	r2, [r7, #12]
 8004444:	429a      	cmp	r2, r3
 8004446:	d8f7      	bhi.n	8004438 <HAL_Delay+0x28>
  {
  }
}
 8004448:	bf00      	nop
 800444a:	bf00      	nop
 800444c:	3710      	adds	r7, #16
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	2000002c 	.word	0x2000002c

08004458 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004458:	b480      	push	{r7}
 800445a:	b085      	sub	sp, #20
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004468:	4b0c      	ldr	r3, [pc, #48]	@ (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800446e:	68ba      	ldr	r2, [r7, #8]
 8004470:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004474:	4013      	ands	r3, r2
 8004476:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800447c:	68bb      	ldr	r3, [r7, #8]
 800447e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004480:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004488:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800448a:	4a04      	ldr	r2, [pc, #16]	@ (800449c <__NVIC_SetPriorityGrouping+0x44>)
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	60d3      	str	r3, [r2, #12]
}
 8004490:	bf00      	nop
 8004492:	3714      	adds	r7, #20
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr
 800449c:	e000ed00 	.word	0xe000ed00

080044a0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044a4:	4b04      	ldr	r3, [pc, #16]	@ (80044b8 <__NVIC_GetPriorityGrouping+0x18>)
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	0a1b      	lsrs	r3, r3, #8
 80044aa:	f003 0307 	and.w	r3, r3, #7
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b6:	4770      	bx	lr
 80044b8:	e000ed00 	.word	0xe000ed00

080044bc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	4603      	mov	r3, r0
 80044c4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80044c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	db0b      	blt.n	80044e6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80044ce:	79fb      	ldrb	r3, [r7, #7]
 80044d0:	f003 021f 	and.w	r2, r3, #31
 80044d4:	4907      	ldr	r1, [pc, #28]	@ (80044f4 <__NVIC_EnableIRQ+0x38>)
 80044d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	2001      	movs	r0, #1
 80044de:	fa00 f202 	lsl.w	r2, r0, r2
 80044e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	e000e100 	.word	0xe000e100

080044f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80044f8:	b480      	push	{r7}
 80044fa:	b083      	sub	sp, #12
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	4603      	mov	r3, r0
 8004500:	6039      	str	r1, [r7, #0]
 8004502:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004504:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004508:	2b00      	cmp	r3, #0
 800450a:	db0a      	blt.n	8004522 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	b2da      	uxtb	r2, r3
 8004510:	490c      	ldr	r1, [pc, #48]	@ (8004544 <__NVIC_SetPriority+0x4c>)
 8004512:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004516:	0112      	lsls	r2, r2, #4
 8004518:	b2d2      	uxtb	r2, r2
 800451a:	440b      	add	r3, r1
 800451c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004520:	e00a      	b.n	8004538 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	b2da      	uxtb	r2, r3
 8004526:	4908      	ldr	r1, [pc, #32]	@ (8004548 <__NVIC_SetPriority+0x50>)
 8004528:	79fb      	ldrb	r3, [r7, #7]
 800452a:	f003 030f 	and.w	r3, r3, #15
 800452e:	3b04      	subs	r3, #4
 8004530:	0112      	lsls	r2, r2, #4
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	440b      	add	r3, r1
 8004536:	761a      	strb	r2, [r3, #24]
}
 8004538:	bf00      	nop
 800453a:	370c      	adds	r7, #12
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr
 8004544:	e000e100 	.word	0xe000e100
 8004548:	e000ed00 	.word	0xe000ed00

0800454c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800454c:	b480      	push	{r7}
 800454e:	b089      	sub	sp, #36	@ 0x24
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f003 0307 	and.w	r3, r3, #7
 800455e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f1c3 0307 	rsb	r3, r3, #7
 8004566:	2b04      	cmp	r3, #4
 8004568:	bf28      	it	cs
 800456a:	2304      	movcs	r3, #4
 800456c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	3304      	adds	r3, #4
 8004572:	2b06      	cmp	r3, #6
 8004574:	d902      	bls.n	800457c <NVIC_EncodePriority+0x30>
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	3b03      	subs	r3, #3
 800457a:	e000      	b.n	800457e <NVIC_EncodePriority+0x32>
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004580:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	fa02 f303 	lsl.w	r3, r2, r3
 800458a:	43da      	mvns	r2, r3
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	401a      	ands	r2, r3
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004594:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004598:	697b      	ldr	r3, [r7, #20]
 800459a:	fa01 f303 	lsl.w	r3, r1, r3
 800459e:	43d9      	mvns	r1, r3
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045a4:	4313      	orrs	r3, r2
         );
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3724      	adds	r7, #36	@ 0x24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b0:	4770      	bx	lr
	...

080045b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b082      	sub	sp, #8
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	3b01      	subs	r3, #1
 80045c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80045c4:	d301      	bcc.n	80045ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80045c6:	2301      	movs	r3, #1
 80045c8:	e00f      	b.n	80045ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80045ca:	4a0a      	ldr	r2, [pc, #40]	@ (80045f4 <SysTick_Config+0x40>)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	3b01      	subs	r3, #1
 80045d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80045d2:	210f      	movs	r1, #15
 80045d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045d8:	f7ff ff8e 	bl	80044f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80045dc:	4b05      	ldr	r3, [pc, #20]	@ (80045f4 <SysTick_Config+0x40>)
 80045de:	2200      	movs	r2, #0
 80045e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80045e2:	4b04      	ldr	r3, [pc, #16]	@ (80045f4 <SysTick_Config+0x40>)
 80045e4:	2207      	movs	r2, #7
 80045e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80045e8:	2300      	movs	r3, #0
}
 80045ea:	4618      	mov	r0, r3
 80045ec:	3708      	adds	r7, #8
 80045ee:	46bd      	mov	sp, r7
 80045f0:	bd80      	pop	{r7, pc}
 80045f2:	bf00      	nop
 80045f4:	e000e010 	.word	0xe000e010

080045f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f7ff ff29 	bl	8004458 <__NVIC_SetPriorityGrouping>
}
 8004606:	bf00      	nop
 8004608:	3708      	adds	r7, #8
 800460a:	46bd      	mov	sp, r7
 800460c:	bd80      	pop	{r7, pc}

0800460e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800460e:	b580      	push	{r7, lr}
 8004610:	b086      	sub	sp, #24
 8004612:	af00      	add	r7, sp, #0
 8004614:	4603      	mov	r3, r0
 8004616:	60b9      	str	r1, [r7, #8]
 8004618:	607a      	str	r2, [r7, #4]
 800461a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800461c:	2300      	movs	r3, #0
 800461e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004620:	f7ff ff3e 	bl	80044a0 <__NVIC_GetPriorityGrouping>
 8004624:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	68b9      	ldr	r1, [r7, #8]
 800462a:	6978      	ldr	r0, [r7, #20]
 800462c:	f7ff ff8e 	bl	800454c <NVIC_EncodePriority>
 8004630:	4602      	mov	r2, r0
 8004632:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004636:	4611      	mov	r1, r2
 8004638:	4618      	mov	r0, r3
 800463a:	f7ff ff5d 	bl	80044f8 <__NVIC_SetPriority>
}
 800463e:	bf00      	nop
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b082      	sub	sp, #8
 800464a:	af00      	add	r7, sp, #0
 800464c:	4603      	mov	r3, r0
 800464e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004654:	4618      	mov	r0, r3
 8004656:	f7ff ff31 	bl	80044bc <__NVIC_EnableIRQ>
}
 800465a:	bf00      	nop
 800465c:	3708      	adds	r7, #8
 800465e:	46bd      	mov	sp, r7
 8004660:	bd80      	pop	{r7, pc}

08004662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004662:	b580      	push	{r7, lr}
 8004664:	b082      	sub	sp, #8
 8004666:	af00      	add	r7, sp, #0
 8004668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800466a:	6878      	ldr	r0, [r7, #4]
 800466c:	f7ff ffa2 	bl	80045b4 <SysTick_Config>
 8004670:	4603      	mov	r3, r0
}
 8004672:	4618      	mov	r0, r3
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
	...

0800467c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004684:	2300      	movs	r3, #0
 8004686:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004688:	f7ff feb6 	bl	80043f8 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e099      	b.n	80047cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2202      	movs	r2, #2
 800469c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f022 0201 	bic.w	r2, r2, #1
 80046b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046b8:	e00f      	b.n	80046da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80046ba:	f7ff fe9d 	bl	80043f8 <HAL_GetTick>
 80046be:	4602      	mov	r2, r0
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	1ad3      	subs	r3, r2, r3
 80046c4:	2b05      	cmp	r3, #5
 80046c6:	d908      	bls.n	80046da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2220      	movs	r2, #32
 80046cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2203      	movs	r2, #3
 80046d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e078      	b.n	80047cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0301 	and.w	r3, r3, #1
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d1e8      	bne.n	80046ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80046f0:	697a      	ldr	r2, [r7, #20]
 80046f2:	4b38      	ldr	r3, [pc, #224]	@ (80047d4 <HAL_DMA_Init+0x158>)
 80046f4:	4013      	ands	r3, r2
 80046f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	685a      	ldr	r2, [r3, #4]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004706:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004712:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800471e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a1b      	ldr	r3, [r3, #32]
 8004724:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	4313      	orrs	r3, r2
 800472a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	2b04      	cmp	r3, #4
 8004732:	d107      	bne.n	8004744 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473c:	4313      	orrs	r3, r2
 800473e:	697a      	ldr	r2, [r7, #20]
 8004740:	4313      	orrs	r3, r2
 8004742:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	697a      	ldr	r2, [r7, #20]
 800474a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	695b      	ldr	r3, [r3, #20]
 8004752:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	f023 0307 	bic.w	r3, r3, #7
 800475a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800476a:	2b04      	cmp	r3, #4
 800476c:	d117      	bne.n	800479e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	4313      	orrs	r3, r2
 8004776:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800477c:	2b00      	cmp	r3, #0
 800477e:	d00e      	beq.n	800479e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 fa91 	bl	8004ca8 <DMA_CheckFifoParam>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d008      	beq.n	800479e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2240      	movs	r2, #64	@ 0x40
 8004790:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2201      	movs	r2, #1
 8004796:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800479a:	2301      	movs	r3, #1
 800479c:	e016      	b.n	80047cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 fa48 	bl	8004c3c <DMA_CalcBaseAndBitshift>
 80047ac:	4603      	mov	r3, r0
 80047ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047b4:	223f      	movs	r2, #63	@ 0x3f
 80047b6:	409a      	lsls	r2, r3
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2201      	movs	r2, #1
 80047c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}
 80047d4:	f010803f 	.word	0xf010803f

080047d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b086      	sub	sp, #24
 80047dc:	af00      	add	r7, sp, #0
 80047de:	60f8      	str	r0, [r7, #12]
 80047e0:	60b9      	str	r1, [r7, #8]
 80047e2:	607a      	str	r2, [r7, #4]
 80047e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047e6:	2300      	movs	r3, #0
 80047e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80047f6:	2b01      	cmp	r3, #1
 80047f8:	d101      	bne.n	80047fe <HAL_DMA_Start_IT+0x26>
 80047fa:	2302      	movs	r3, #2
 80047fc:	e040      	b.n	8004880 <HAL_DMA_Start_IT+0xa8>
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	2201      	movs	r2, #1
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b01      	cmp	r3, #1
 8004810:	d12f      	bne.n	8004872 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	2202      	movs	r2, #2
 8004816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	2200      	movs	r2, #0
 800481e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	68b9      	ldr	r1, [r7, #8]
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 f9da 	bl	8004be0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004830:	223f      	movs	r2, #63	@ 0x3f
 8004832:	409a      	lsls	r2, r3
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	681a      	ldr	r2, [r3, #0]
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f042 0216 	orr.w	r2, r2, #22
 8004846:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484c:	2b00      	cmp	r3, #0
 800484e:	d007      	beq.n	8004860 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f042 0208 	orr.w	r2, r2, #8
 800485e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f042 0201 	orr.w	r2, r2, #1
 800486e:	601a      	str	r2, [r3, #0]
 8004870:	e005      	b.n	800487e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800487a:	2302      	movs	r3, #2
 800487c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800487e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004880:	4618      	mov	r0, r3
 8004882:	3718      	adds	r7, #24
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004896:	b2db      	uxtb	r3, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d004      	beq.n	80048a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2280      	movs	r2, #128	@ 0x80
 80048a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80048a2:	2301      	movs	r3, #1
 80048a4:	e00c      	b.n	80048c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2205      	movs	r2, #5
 80048aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	681a      	ldr	r2, [r3, #0]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 0201 	bic.w	r2, r2, #1
 80048bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80048be:	2300      	movs	r3, #0
}
 80048c0:	4618      	mov	r0, r3
 80048c2:	370c      	adds	r7, #12
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b086      	sub	sp, #24
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80048d4:	2300      	movs	r3, #0
 80048d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80048d8:	4b8e      	ldr	r3, [pc, #568]	@ (8004b14 <HAL_DMA_IRQHandler+0x248>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a8e      	ldr	r2, [pc, #568]	@ (8004b18 <HAL_DMA_IRQHandler+0x24c>)
 80048de:	fba2 2303 	umull	r2, r3, r2, r3
 80048e2:	0a9b      	lsrs	r3, r3, #10
 80048e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80048ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048f6:	2208      	movs	r2, #8
 80048f8:	409a      	lsls	r2, r3
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	4013      	ands	r3, r2
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d01a      	beq.n	8004938 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d013      	beq.n	8004938 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0204 	bic.w	r2, r2, #4
 800491e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004924:	2208      	movs	r2, #8
 8004926:	409a      	lsls	r2, r3
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004930:	f043 0201 	orr.w	r2, r3, #1
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800493c:	2201      	movs	r2, #1
 800493e:	409a      	lsls	r2, r3
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	4013      	ands	r3, r2
 8004944:	2b00      	cmp	r3, #0
 8004946:	d012      	beq.n	800496e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00b      	beq.n	800496e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800495a:	2201      	movs	r2, #1
 800495c:	409a      	lsls	r2, r3
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004966:	f043 0202 	orr.w	r2, r3, #2
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004972:	2204      	movs	r2, #4
 8004974:	409a      	lsls	r2, r3
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	4013      	ands	r3, r2
 800497a:	2b00      	cmp	r3, #0
 800497c:	d012      	beq.n	80049a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 0302 	and.w	r3, r3, #2
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004990:	2204      	movs	r2, #4
 8004992:	409a      	lsls	r2, r3
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800499c:	f043 0204 	orr.w	r2, r3, #4
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049a8:	2210      	movs	r2, #16
 80049aa:	409a      	lsls	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	4013      	ands	r3, r2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d043      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 0308 	and.w	r3, r3, #8
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d03c      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049c6:	2210      	movs	r2, #16
 80049c8:	409a      	lsls	r2, r3
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d018      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d108      	bne.n	80049fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d024      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	4798      	blx	r3
 80049fa:	e01f      	b.n	8004a3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d01b      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	4798      	blx	r3
 8004a0c:	e016      	b.n	8004a3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d107      	bne.n	8004a2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0208 	bic.w	r2, r2, #8
 8004a2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a38:	6878      	ldr	r0, [r7, #4]
 8004a3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a40:	2220      	movs	r2, #32
 8004a42:	409a      	lsls	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4013      	ands	r3, r2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 808f 	beq.w	8004b6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0310 	and.w	r3, r3, #16
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	f000 8087 	beq.w	8004b6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004a62:	2220      	movs	r2, #32
 8004a64:	409a      	lsls	r2, r3
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a70:	b2db      	uxtb	r3, r3
 8004a72:	2b05      	cmp	r3, #5
 8004a74:	d136      	bne.n	8004ae4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f022 0216 	bic.w	r2, r2, #22
 8004a84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	695a      	ldr	r2, [r3, #20]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <HAL_DMA_IRQHandler+0x1da>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d007      	beq.n	8004ab6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0208 	bic.w	r2, r2, #8
 8004ab4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004aba:	223f      	movs	r2, #63	@ 0x3f
 8004abc:	409a      	lsls	r2, r3
 8004abe:	693b      	ldr	r3, [r7, #16]
 8004ac0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d07e      	beq.n	8004bd8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	4798      	blx	r3
        }
        return;
 8004ae2:	e079      	b.n	8004bd8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d01d      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d031      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	4798      	blx	r3
 8004b10:	e02c      	b.n	8004b6c <HAL_DMA_IRQHandler+0x2a0>
 8004b12:	bf00      	nop
 8004b14:	20000004 	.word	0x20000004
 8004b18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d023      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
 8004b2c:	e01e      	b.n	8004b6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d10f      	bne.n	8004b5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f022 0210 	bic.w	r2, r2, #16
 8004b4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d003      	beq.n	8004b6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b68:	6878      	ldr	r0, [r7, #4]
 8004b6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d032      	beq.n	8004bda <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d022      	beq.n	8004bc6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2205      	movs	r2, #5
 8004b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f022 0201 	bic.w	r2, r2, #1
 8004b96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	60bb      	str	r3, [r7, #8]
 8004b9e:	697a      	ldr	r2, [r7, #20]
 8004ba0:	429a      	cmp	r2, r3
 8004ba2:	d307      	bcc.n	8004bb4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 0301 	and.w	r3, r3, #1
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f2      	bne.n	8004b98 <HAL_DMA_IRQHandler+0x2cc>
 8004bb2:	e000      	b.n	8004bb6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004bb4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2201      	movs	r2, #1
 8004bba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d005      	beq.n	8004bda <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bd2:	6878      	ldr	r0, [r7, #4]
 8004bd4:	4798      	blx	r3
 8004bd6:	e000      	b.n	8004bda <HAL_DMA_IRQHandler+0x30e>
        return;
 8004bd8:	bf00      	nop
    }
  }
}
 8004bda:	3718      	adds	r7, #24
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004be0:	b480      	push	{r7}
 8004be2:	b085      	sub	sp, #20
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	60f8      	str	r0, [r7, #12]
 8004be8:	60b9      	str	r1, [r7, #8]
 8004bea:	607a      	str	r2, [r7, #4]
 8004bec:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004bfc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	683a      	ldr	r2, [r7, #0]
 8004c04:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	2b40      	cmp	r3, #64	@ 0x40
 8004c0c:	d108      	bne.n	8004c20 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	687a      	ldr	r2, [r7, #4]
 8004c14:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68ba      	ldr	r2, [r7, #8]
 8004c1c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004c1e:	e007      	b.n	8004c30 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68ba      	ldr	r2, [r7, #8]
 8004c26:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	60da      	str	r2, [r3, #12]
}
 8004c30:	bf00      	nop
 8004c32:	3714      	adds	r7, #20
 8004c34:	46bd      	mov	sp, r7
 8004c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3a:	4770      	bx	lr

08004c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	b2db      	uxtb	r3, r3
 8004c4a:	3b10      	subs	r3, #16
 8004c4c:	4a14      	ldr	r2, [pc, #80]	@ (8004ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8004c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c52:	091b      	lsrs	r3, r3, #4
 8004c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004c56:	4a13      	ldr	r2, [pc, #76]	@ (8004ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b03      	cmp	r3, #3
 8004c68:	d909      	bls.n	8004c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	1d1a      	adds	r2, r3, #4
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	659a      	str	r2, [r3, #88]	@ 0x58
 8004c7c:	e007      	b.n	8004c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004c86:	f023 0303 	bic.w	r3, r3, #3
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	3714      	adds	r7, #20
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
 8004c9e:	bf00      	nop
 8004ca0:	aaaaaaab 	.word	0xaaaaaaab
 8004ca4:	08017898 	.word	0x08017898

08004ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d11f      	bne.n	8004d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d856      	bhi.n	8004d76 <DMA_CheckFifoParam+0xce>
 8004cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd0 <DMA_CheckFifoParam+0x28>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004cf3 	.word	0x08004cf3
 8004cd8:	08004ce1 	.word	0x08004ce1
 8004cdc:	08004d77 	.word	0x08004d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ce4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d046      	beq.n	8004d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cf0:	e043      	b.n	8004d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004cfa:	d140      	bne.n	8004d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004cfc:	2301      	movs	r3, #1
 8004cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d00:	e03d      	b.n	8004d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004d0a:	d121      	bne.n	8004d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d837      	bhi.n	8004d82 <DMA_CheckFifoParam+0xda>
 8004d12:	a201      	add	r2, pc, #4	@ (adr r2, 8004d18 <DMA_CheckFifoParam+0x70>)
 8004d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d18:	08004d29 	.word	0x08004d29
 8004d1c:	08004d2f 	.word	0x08004d2f
 8004d20:	08004d29 	.word	0x08004d29
 8004d24:	08004d41 	.word	0x08004d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004d28:	2301      	movs	r3, #1
 8004d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d2c:	e030      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d32:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d025      	beq.n	8004d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d3e:	e022      	b.n	8004d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004d48:	d11f      	bne.n	8004d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004d4e:	e01c      	b.n	8004d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d903      	bls.n	8004d5e <DMA_CheckFifoParam+0xb6>
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	2b03      	cmp	r3, #3
 8004d5a:	d003      	beq.n	8004d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d5c:	e018      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	73fb      	strb	r3, [r7, #15]
      break;
 8004d62:	e015      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d68:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d00e      	beq.n	8004d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d70:	2301      	movs	r3, #1
 8004d72:	73fb      	strb	r3, [r7, #15]
      break;
 8004d74:	e00b      	b.n	8004d8e <DMA_CheckFifoParam+0xe6>
      break;
 8004d76:	bf00      	nop
 8004d78:	e00a      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7a:	bf00      	nop
 8004d7c:	e008      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;
 8004d7e:	bf00      	nop
 8004d80:	e006      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;
 8004d82:	bf00      	nop
 8004d84:	e004      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;
 8004d86:	bf00      	nop
 8004d88:	e002      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <DMA_CheckFifoParam+0xe8>
      break;
 8004d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8004d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr
 8004d9e:	bf00      	nop

08004da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b089      	sub	sp, #36	@ 0x24
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004dae:	2300      	movs	r3, #0
 8004db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004db6:	2300      	movs	r3, #0
 8004db8:	61fb      	str	r3, [r7, #28]
 8004dba:	e159      	b.n	8005070 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	697a      	ldr	r2, [r7, #20]
 8004dcc:	4013      	ands	r3, r2
 8004dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	f040 8148 	bne.w	800506a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f003 0303 	and.w	r3, r3, #3
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d005      	beq.n	8004df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d130      	bne.n	8004e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004df8:	69fb      	ldr	r3, [r7, #28]
 8004dfa:	005b      	lsls	r3, r3, #1
 8004dfc:	2203      	movs	r2, #3
 8004dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8004e02:	43db      	mvns	r3, r3
 8004e04:	69ba      	ldr	r2, [r7, #24]
 8004e06:	4013      	ands	r3, r2
 8004e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	68da      	ldr	r2, [r3, #12]
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004e28:	2201      	movs	r2, #1
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e30:	43db      	mvns	r3, r3
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	4013      	ands	r3, r2
 8004e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	091b      	lsrs	r3, r3, #4
 8004e3e:	f003 0201 	and.w	r2, r3, #1
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	fa02 f303 	lsl.w	r3, r2, r3
 8004e48:	69ba      	ldr	r2, [r7, #24]
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	69ba      	ldr	r2, [r7, #24]
 8004e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	f003 0303 	and.w	r3, r3, #3
 8004e5c:	2b03      	cmp	r3, #3
 8004e5e:	d017      	beq.n	8004e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	005b      	lsls	r3, r3, #1
 8004e6a:	2203      	movs	r2, #3
 8004e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e70:	43db      	mvns	r3, r3
 8004e72:	69ba      	ldr	r2, [r7, #24]
 8004e74:	4013      	ands	r3, r2
 8004e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	689a      	ldr	r2, [r3, #8]
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	005b      	lsls	r3, r3, #1
 8004e80:	fa02 f303 	lsl.w	r3, r2, r3
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	69ba      	ldr	r2, [r7, #24]
 8004e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	f003 0303 	and.w	r3, r3, #3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d123      	bne.n	8004ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e9c:	69fb      	ldr	r3, [r7, #28]
 8004e9e:	08da      	lsrs	r2, r3, #3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3208      	adds	r2, #8
 8004ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f003 0307 	and.w	r3, r3, #7
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	220f      	movs	r2, #15
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	69ba      	ldr	r2, [r7, #24]
 8004ebc:	4013      	ands	r3, r2
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	691a      	ldr	r2, [r3, #16]
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	f003 0307 	and.w	r3, r3, #7
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4313      	orrs	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	08da      	lsrs	r2, r3, #3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	3208      	adds	r2, #8
 8004ede:	69b9      	ldr	r1, [r7, #24]
 8004ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	005b      	lsls	r3, r3, #1
 8004eee:	2203      	movs	r2, #3
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	f003 0203 	and.w	r2, r3, #3
 8004f04:	69fb      	ldr	r3, [r7, #28]
 8004f06:	005b      	lsls	r3, r3, #1
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a2 	beq.w	800506a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f26:	2300      	movs	r3, #0
 8004f28:	60fb      	str	r3, [r7, #12]
 8004f2a:	4b57      	ldr	r3, [pc, #348]	@ (8005088 <HAL_GPIO_Init+0x2e8>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f2e:	4a56      	ldr	r2, [pc, #344]	@ (8005088 <HAL_GPIO_Init+0x2e8>)
 8004f30:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004f34:	6453      	str	r3, [r2, #68]	@ 0x44
 8004f36:	4b54      	ldr	r3, [pc, #336]	@ (8005088 <HAL_GPIO_Init+0x2e8>)
 8004f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004f3a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004f3e:	60fb      	str	r3, [r7, #12]
 8004f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f42:	4a52      	ldr	r2, [pc, #328]	@ (800508c <HAL_GPIO_Init+0x2ec>)
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	089b      	lsrs	r3, r3, #2
 8004f48:	3302      	adds	r3, #2
 8004f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004f50:	69fb      	ldr	r3, [r7, #28]
 8004f52:	f003 0303 	and.w	r3, r3, #3
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	220f      	movs	r2, #15
 8004f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	4a49      	ldr	r2, [pc, #292]	@ (8005090 <HAL_GPIO_Init+0x2f0>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d019      	beq.n	8004fa2 <HAL_GPIO_Init+0x202>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	4a48      	ldr	r2, [pc, #288]	@ (8005094 <HAL_GPIO_Init+0x2f4>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d013      	beq.n	8004f9e <HAL_GPIO_Init+0x1fe>
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a47      	ldr	r2, [pc, #284]	@ (8005098 <HAL_GPIO_Init+0x2f8>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00d      	beq.n	8004f9a <HAL_GPIO_Init+0x1fa>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	4a46      	ldr	r2, [pc, #280]	@ (800509c <HAL_GPIO_Init+0x2fc>)
 8004f82:	4293      	cmp	r3, r2
 8004f84:	d007      	beq.n	8004f96 <HAL_GPIO_Init+0x1f6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a45      	ldr	r2, [pc, #276]	@ (80050a0 <HAL_GPIO_Init+0x300>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d101      	bne.n	8004f92 <HAL_GPIO_Init+0x1f2>
 8004f8e:	2304      	movs	r3, #4
 8004f90:	e008      	b.n	8004fa4 <HAL_GPIO_Init+0x204>
 8004f92:	2307      	movs	r3, #7
 8004f94:	e006      	b.n	8004fa4 <HAL_GPIO_Init+0x204>
 8004f96:	2303      	movs	r3, #3
 8004f98:	e004      	b.n	8004fa4 <HAL_GPIO_Init+0x204>
 8004f9a:	2302      	movs	r3, #2
 8004f9c:	e002      	b.n	8004fa4 <HAL_GPIO_Init+0x204>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <HAL_GPIO_Init+0x204>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	69fa      	ldr	r2, [r7, #28]
 8004fa6:	f002 0203 	and.w	r2, r2, #3
 8004faa:	0092      	lsls	r2, r2, #2
 8004fac:	4093      	lsls	r3, r2
 8004fae:	69ba      	ldr	r2, [r7, #24]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fb4:	4935      	ldr	r1, [pc, #212]	@ (800508c <HAL_GPIO_Init+0x2ec>)
 8004fb6:	69fb      	ldr	r3, [r7, #28]
 8004fb8:	089b      	lsrs	r3, r3, #2
 8004fba:	3302      	adds	r3, #2
 8004fbc:	69ba      	ldr	r2, [r7, #24]
 8004fbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fc2:	4b38      	ldr	r3, [pc, #224]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	43db      	mvns	r3, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4013      	ands	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d003      	beq.n	8004fe6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	693b      	ldr	r3, [r7, #16]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fe6:	4a2f      	ldr	r2, [pc, #188]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fec:	4b2d      	ldr	r3, [pc, #180]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	43db      	mvns	r3, r3
 8004ff6:	69ba      	ldr	r2, [r7, #24]
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	685b      	ldr	r3, [r3, #4]
 8005000:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005004:	2b00      	cmp	r3, #0
 8005006:	d003      	beq.n	8005010 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	4313      	orrs	r3, r2
 800500e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005010:	4a24      	ldr	r2, [pc, #144]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005016:	4b23      	ldr	r3, [pc, #140]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	43db      	mvns	r3, r3
 8005020:	69ba      	ldr	r2, [r7, #24]
 8005022:	4013      	ands	r3, r2
 8005024:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d003      	beq.n	800503a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005032:	69ba      	ldr	r2, [r7, #24]
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800503a:	4a1a      	ldr	r2, [pc, #104]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 800503c:	69bb      	ldr	r3, [r7, #24]
 800503e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005040:	4b18      	ldr	r3, [pc, #96]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	43db      	mvns	r3, r3
 800504a:	69ba      	ldr	r2, [r7, #24]
 800504c:	4013      	ands	r3, r2
 800504e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005058:	2b00      	cmp	r3, #0
 800505a:	d003      	beq.n	8005064 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005064:	4a0f      	ldr	r2, [pc, #60]	@ (80050a4 <HAL_GPIO_Init+0x304>)
 8005066:	69bb      	ldr	r3, [r7, #24]
 8005068:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	3301      	adds	r3, #1
 800506e:	61fb      	str	r3, [r7, #28]
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	2b0f      	cmp	r3, #15
 8005074:	f67f aea2 	bls.w	8004dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005078:	bf00      	nop
 800507a:	bf00      	nop
 800507c:	3724      	adds	r7, #36	@ 0x24
 800507e:	46bd      	mov	sp, r7
 8005080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005084:	4770      	bx	lr
 8005086:	bf00      	nop
 8005088:	40023800 	.word	0x40023800
 800508c:	40013800 	.word	0x40013800
 8005090:	40020000 	.word	0x40020000
 8005094:	40020400 	.word	0x40020400
 8005098:	40020800 	.word	0x40020800
 800509c:	40020c00 	.word	0x40020c00
 80050a0:	40021000 	.word	0x40021000
 80050a4:	40013c00 	.word	0x40013c00

080050a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b083      	sub	sp, #12
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	460b      	mov	r3, r1
 80050b2:	807b      	strh	r3, [r7, #2]
 80050b4:	4613      	mov	r3, r2
 80050b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80050b8:	787b      	ldrb	r3, [r7, #1]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80050be:	887a      	ldrh	r2, [r7, #2]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80050c4:	e003      	b.n	80050ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80050c6:	887b      	ldrh	r3, [r7, #2]
 80050c8:	041a      	lsls	r2, r3, #16
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	619a      	str	r2, [r3, #24]
}
 80050ce:	bf00      	nop
 80050d0:	370c      	adds	r7, #12
 80050d2:	46bd      	mov	sp, r7
 80050d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d8:	4770      	bx	lr
	...

080050dc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	4603      	mov	r3, r0
 80050e4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80050e6:	4b08      	ldr	r3, [pc, #32]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050e8:	695a      	ldr	r2, [r3, #20]
 80050ea:	88fb      	ldrh	r3, [r7, #6]
 80050ec:	4013      	ands	r3, r2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d006      	beq.n	8005100 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80050f2:	4a05      	ldr	r2, [pc, #20]	@ (8005108 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80050f8:	88fb      	ldrh	r3, [r7, #6]
 80050fa:	4618      	mov	r0, r3
 80050fc:	f7fc f82c 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 8005100:	bf00      	nop
 8005102:	3708      	adds	r7, #8
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40013c00 	.word	0x40013c00

0800510c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800510c:	b580      	push	{r7, lr}
 800510e:	b086      	sub	sp, #24
 8005110:	af02      	add	r7, sp, #8
 8005112:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e101      	b.n	8005322 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b00      	cmp	r3, #0
 800512e:	d106      	bne.n	800513e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2200      	movs	r2, #0
 8005134:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005138:	6878      	ldr	r0, [r7, #4]
 800513a:	f009 fd67 	bl	800ec0c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	2203      	movs	r2, #3
 8005142:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800514c:	d102      	bne.n	8005154 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2200      	movs	r2, #0
 8005152:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4618      	mov	r0, r3
 800515a:	f003 ff5c 	bl	8009016 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	7c1a      	ldrb	r2, [r3, #16]
 8005166:	f88d 2000 	strb.w	r2, [sp]
 800516a:	3304      	adds	r3, #4
 800516c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800516e:	f003 fe3b 	bl	8008de8 <USB_CoreInit>
 8005172:	4603      	mov	r3, r0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d005      	beq.n	8005184 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2202      	movs	r2, #2
 800517c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005180:	2301      	movs	r3, #1
 8005182:	e0ce      	b.n	8005322 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2100      	movs	r1, #0
 800518a:	4618      	mov	r0, r3
 800518c:	f003 ff54 	bl	8009038 <USB_SetCurrentMode>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e0bf      	b.n	8005322 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051a2:	2300      	movs	r3, #0
 80051a4:	73fb      	strb	r3, [r7, #15]
 80051a6:	e04a      	b.n	800523e <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80051a8:	7bfa      	ldrb	r2, [r7, #15]
 80051aa:	6879      	ldr	r1, [r7, #4]
 80051ac:	4613      	mov	r3, r2
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4413      	add	r3, r2
 80051b2:	009b      	lsls	r3, r3, #2
 80051b4:	440b      	add	r3, r1
 80051b6:	3315      	adds	r3, #21
 80051b8:	2201      	movs	r2, #1
 80051ba:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80051bc:	7bfa      	ldrb	r2, [r7, #15]
 80051be:	6879      	ldr	r1, [r7, #4]
 80051c0:	4613      	mov	r3, r2
 80051c2:	00db      	lsls	r3, r3, #3
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	440b      	add	r3, r1
 80051ca:	3314      	adds	r3, #20
 80051cc:	7bfa      	ldrb	r2, [r7, #15]
 80051ce:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80051d0:	7bfa      	ldrb	r2, [r7, #15]
 80051d2:	7bfb      	ldrb	r3, [r7, #15]
 80051d4:	b298      	uxth	r0, r3
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4413      	add	r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	332e      	adds	r3, #46	@ 0x2e
 80051e4:	4602      	mov	r2, r0
 80051e6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80051e8:	7bfa      	ldrb	r2, [r7, #15]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	00db      	lsls	r3, r3, #3
 80051f0:	4413      	add	r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3318      	adds	r3, #24
 80051f8:	2200      	movs	r2, #0
 80051fa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80051fc:	7bfa      	ldrb	r2, [r7, #15]
 80051fe:	6879      	ldr	r1, [r7, #4]
 8005200:	4613      	mov	r3, r2
 8005202:	00db      	lsls	r3, r3, #3
 8005204:	4413      	add	r3, r2
 8005206:	009b      	lsls	r3, r3, #2
 8005208:	440b      	add	r3, r1
 800520a:	331c      	adds	r3, #28
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005210:	7bfa      	ldrb	r2, [r7, #15]
 8005212:	6879      	ldr	r1, [r7, #4]
 8005214:	4613      	mov	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	4413      	add	r3, r2
 800521a:	009b      	lsls	r3, r3, #2
 800521c:	440b      	add	r3, r1
 800521e:	3320      	adds	r3, #32
 8005220:	2200      	movs	r2, #0
 8005222:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005224:	7bfa      	ldrb	r2, [r7, #15]
 8005226:	6879      	ldr	r1, [r7, #4]
 8005228:	4613      	mov	r3, r2
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	440b      	add	r3, r1
 8005232:	3324      	adds	r3, #36	@ 0x24
 8005234:	2200      	movs	r2, #0
 8005236:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005238:	7bfb      	ldrb	r3, [r7, #15]
 800523a:	3301      	adds	r3, #1
 800523c:	73fb      	strb	r3, [r7, #15]
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	791b      	ldrb	r3, [r3, #4]
 8005242:	7bfa      	ldrb	r2, [r7, #15]
 8005244:	429a      	cmp	r2, r3
 8005246:	d3af      	bcc.n	80051a8 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005248:	2300      	movs	r3, #0
 800524a:	73fb      	strb	r3, [r7, #15]
 800524c:	e044      	b.n	80052d8 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800524e:	7bfa      	ldrb	r2, [r7, #15]
 8005250:	6879      	ldr	r1, [r7, #4]
 8005252:	4613      	mov	r3, r2
 8005254:	00db      	lsls	r3, r3, #3
 8005256:	4413      	add	r3, r2
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	440b      	add	r3, r1
 800525c:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8005260:	2200      	movs	r2, #0
 8005262:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005264:	7bfa      	ldrb	r2, [r7, #15]
 8005266:	6879      	ldr	r1, [r7, #4]
 8005268:	4613      	mov	r3, r2
 800526a:	00db      	lsls	r3, r3, #3
 800526c:	4413      	add	r3, r2
 800526e:	009b      	lsls	r3, r3, #2
 8005270:	440b      	add	r3, r1
 8005272:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8005276:	7bfa      	ldrb	r2, [r7, #15]
 8005278:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800527a:	7bfa      	ldrb	r2, [r7, #15]
 800527c:	6879      	ldr	r1, [r7, #4]
 800527e:	4613      	mov	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	4413      	add	r3, r2
 8005284:	009b      	lsls	r3, r3, #2
 8005286:	440b      	add	r3, r1
 8005288:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 800528c:	2200      	movs	r2, #0
 800528e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005290:	7bfa      	ldrb	r2, [r7, #15]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	00db      	lsls	r3, r3, #3
 8005298:	4413      	add	r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80052a6:	7bfa      	ldrb	r2, [r7, #15]
 80052a8:	6879      	ldr	r1, [r7, #4]
 80052aa:	4613      	mov	r3, r2
 80052ac:	00db      	lsls	r3, r3, #3
 80052ae:	4413      	add	r3, r2
 80052b0:	009b      	lsls	r3, r3, #2
 80052b2:	440b      	add	r3, r1
 80052b4:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80052b8:	2200      	movs	r2, #0
 80052ba:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80052bc:	7bfa      	ldrb	r2, [r7, #15]
 80052be:	6879      	ldr	r1, [r7, #4]
 80052c0:	4613      	mov	r3, r2
 80052c2:	00db      	lsls	r3, r3, #3
 80052c4:	4413      	add	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	440b      	add	r3, r1
 80052ca:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80052ce:	2200      	movs	r2, #0
 80052d0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80052d2:	7bfb      	ldrb	r3, [r7, #15]
 80052d4:	3301      	adds	r3, #1
 80052d6:	73fb      	strb	r3, [r7, #15]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	791b      	ldrb	r3, [r3, #4]
 80052dc:	7bfa      	ldrb	r2, [r7, #15]
 80052de:	429a      	cmp	r2, r3
 80052e0:	d3b5      	bcc.n	800524e <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6818      	ldr	r0, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	7c1a      	ldrb	r2, [r3, #16]
 80052ea:	f88d 2000 	strb.w	r2, [sp]
 80052ee:	3304      	adds	r3, #4
 80052f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052f2:	f003 feed 	bl	80090d0 <USB_DevInit>
 80052f6:	4603      	mov	r3, r0
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2202      	movs	r2, #2
 8005300:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e00c      	b.n	8005322 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	2201      	movs	r2, #1
 8005312:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	4618      	mov	r0, r3
 800531c:	f004 ff37 	bl	800a18e <USB_DevDisconnect>

  return HAL_OK;
 8005320:	2300      	movs	r3, #0
}
 8005322:	4618      	mov	r0, r3
 8005324:	3710      	adds	r7, #16
 8005326:	46bd      	mov	sp, r7
 8005328:	bd80      	pop	{r7, pc}

0800532a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800532a:	b580      	push	{r7, lr}
 800532c:	b084      	sub	sp, #16
 800532e:	af00      	add	r7, sp, #0
 8005330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800533e:	2b01      	cmp	r3, #1
 8005340:	d101      	bne.n	8005346 <HAL_PCD_Start+0x1c>
 8005342:	2302      	movs	r3, #2
 8005344:	e022      	b.n	800538c <HAL_PCD_Start+0x62>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2201      	movs	r2, #1
 800534a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	68db      	ldr	r3, [r3, #12]
 8005352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d009      	beq.n	800536e <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 800535e:	2b01      	cmp	r3, #1
 8005360:	d105      	bne.n	800536e <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005366:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4618      	mov	r0, r3
 8005374:	f003 fe3e 	bl	8008ff4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f004 fee5 	bl	800a14c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2200      	movs	r2, #0
 8005386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800538a:	2300      	movs	r3, #0
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005394:	b590      	push	{r4, r7, lr}
 8005396:	b08d      	sub	sp, #52	@ 0x34
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	6a3b      	ldr	r3, [r7, #32]
 80053a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f004 ffa3 	bl	800a2f6 <USB_GetMode>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	f040 848c 	bne.w	8005cd0 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	4618      	mov	r0, r3
 80053be:	f004 ff07 	bl	800a1d0 <USB_ReadInterrupts>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 8482 	beq.w	8005cce <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80053ca:	69fb      	ldr	r3, [r7, #28]
 80053cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053d0:	689b      	ldr	r3, [r3, #8]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4618      	mov	r0, r3
 80053e4:	f004 fef4 	bl	800a1d0 <USB_ReadInterrupts>
 80053e8:	4603      	mov	r3, r0
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	2b02      	cmp	r3, #2
 80053f0:	d107      	bne.n	8005402 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	695a      	ldr	r2, [r3, #20]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f002 0202 	and.w	r2, r2, #2
 8005400:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4618      	mov	r0, r3
 8005408:	f004 fee2 	bl	800a1d0 <USB_ReadInterrupts>
 800540c:	4603      	mov	r3, r0
 800540e:	f003 0310 	and.w	r3, r3, #16
 8005412:	2b10      	cmp	r3, #16
 8005414:	d161      	bne.n	80054da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	699a      	ldr	r2, [r3, #24]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 0210 	bic.w	r2, r2, #16
 8005424:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005426:	6a3b      	ldr	r3, [r7, #32]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	f003 020f 	and.w	r2, r3, #15
 8005432:	4613      	mov	r3, r2
 8005434:	00db      	lsls	r3, r3, #3
 8005436:	4413      	add	r3, r2
 8005438:	009b      	lsls	r3, r3, #2
 800543a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800543e:	687a      	ldr	r2, [r7, #4]
 8005440:	4413      	add	r3, r2
 8005442:	3304      	adds	r3, #4
 8005444:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005446:	69bb      	ldr	r3, [r7, #24]
 8005448:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800544c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005450:	d124      	bne.n	800549c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8005458:	4013      	ands	r3, r2
 800545a:	2b00      	cmp	r3, #0
 800545c:	d035      	beq.n	80054ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800545e:	697b      	ldr	r3, [r7, #20]
 8005460:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005462:	69bb      	ldr	r3, [r7, #24]
 8005464:	091b      	lsrs	r3, r3, #4
 8005466:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005468:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800546c:	b29b      	uxth	r3, r3
 800546e:	461a      	mov	r2, r3
 8005470:	6a38      	ldr	r0, [r7, #32]
 8005472:	f004 fd19 	bl	8009ea8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	68da      	ldr	r2, [r3, #12]
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	091b      	lsrs	r3, r3, #4
 800547e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005482:	441a      	add	r2, r3
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	695a      	ldr	r2, [r3, #20]
 800548c:	69bb      	ldr	r3, [r7, #24]
 800548e:	091b      	lsrs	r3, r3, #4
 8005490:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005494:	441a      	add	r2, r3
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	615a      	str	r2, [r3, #20]
 800549a:	e016      	b.n	80054ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800549c:	69bb      	ldr	r3, [r7, #24]
 800549e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80054a2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80054a6:	d110      	bne.n	80054ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80054ae:	2208      	movs	r2, #8
 80054b0:	4619      	mov	r1, r3
 80054b2:	6a38      	ldr	r0, [r7, #32]
 80054b4:	f004 fcf8 	bl	8009ea8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	695a      	ldr	r2, [r3, #20]
 80054bc:	69bb      	ldr	r3, [r7, #24]
 80054be:	091b      	lsrs	r3, r3, #4
 80054c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80054c4:	441a      	add	r2, r3
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	699a      	ldr	r2, [r3, #24]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0210 	orr.w	r2, r2, #16
 80054d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f004 fe76 	bl	800a1d0 <USB_ReadInterrupts>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054ea:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80054ee:	f040 80a7 	bne.w	8005640 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80054f2:	2300      	movs	r3, #0
 80054f4:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4618      	mov	r0, r3
 80054fc:	f004 fe7b 	bl	800a1f6 <USB_ReadDevAllOutEpInterrupt>
 8005500:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005502:	e099      	b.n	8005638 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005506:	f003 0301 	and.w	r3, r3, #1
 800550a:	2b00      	cmp	r3, #0
 800550c:	f000 808e 	beq.w	800562c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	4611      	mov	r1, r2
 800551a:	4618      	mov	r0, r3
 800551c:	f004 fe9f 	bl	800a25e <USB_ReadDevOutEPInterrupt>
 8005520:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	f003 0301 	and.w	r3, r3, #1
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00c      	beq.n	8005546 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800552c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800552e:	015a      	lsls	r2, r3, #5
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	4413      	add	r3, r2
 8005534:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005538:	461a      	mov	r2, r3
 800553a:	2301      	movs	r3, #1
 800553c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800553e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005540:	6878      	ldr	r0, [r7, #4]
 8005542:	f000 fea3 	bl	800628c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	f003 0308 	and.w	r3, r3, #8
 800554c:	2b00      	cmp	r3, #0
 800554e:	d00c      	beq.n	800556a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005552:	015a      	lsls	r2, r3, #5
 8005554:	69fb      	ldr	r3, [r7, #28]
 8005556:	4413      	add	r3, r2
 8005558:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800555c:	461a      	mov	r2, r3
 800555e:	2308      	movs	r3, #8
 8005560:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005562:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005564:	6878      	ldr	r0, [r7, #4]
 8005566:	f000 ff79 	bl	800645c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	f003 0310 	and.w	r3, r3, #16
 8005570:	2b00      	cmp	r3, #0
 8005572:	d008      	beq.n	8005586 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005574:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005576:	015a      	lsls	r2, r3, #5
 8005578:	69fb      	ldr	r3, [r7, #28]
 800557a:	4413      	add	r3, r2
 800557c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005580:	461a      	mov	r2, r3
 8005582:	2310      	movs	r3, #16
 8005584:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	f003 0302 	and.w	r3, r3, #2
 800558c:	2b00      	cmp	r3, #0
 800558e:	d030      	beq.n	80055f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005590:	6a3b      	ldr	r3, [r7, #32]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005598:	2b80      	cmp	r3, #128	@ 0x80
 800559a:	d109      	bne.n	80055b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800559c:	69fb      	ldr	r3, [r7, #28]
 800559e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80055aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80055b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b2:	4613      	mov	r3, r2
 80055b4:	00db      	lsls	r3, r3, #3
 80055b6:	4413      	add	r3, r2
 80055b8:	009b      	lsls	r3, r3, #2
 80055ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055be:	687a      	ldr	r2, [r7, #4]
 80055c0:	4413      	add	r3, r2
 80055c2:	3304      	adds	r3, #4
 80055c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80055c6:	697b      	ldr	r3, [r7, #20]
 80055c8:	78db      	ldrb	r3, [r3, #3]
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d108      	bne.n	80055e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80055ce:	697b      	ldr	r3, [r7, #20]
 80055d0:	2200      	movs	r2, #0
 80055d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	4619      	mov	r1, r3
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f009 fc12 	bl	800ee04 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80055ec:	461a      	mov	r2, r3
 80055ee:	2302      	movs	r3, #2
 80055f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f003 0320 	and.w	r3, r3, #32
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d008      	beq.n	800560e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80055fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055fe:	015a      	lsls	r2, r3, #5
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	4413      	add	r3, r2
 8005604:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005608:	461a      	mov	r2, r3
 800560a:	2320      	movs	r3, #32
 800560c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005614:	2b00      	cmp	r3, #0
 8005616:	d009      	beq.n	800562c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800561a:	015a      	lsls	r2, r3, #5
 800561c:	69fb      	ldr	r3, [r7, #28]
 800561e:	4413      	add	r3, r2
 8005620:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005624:	461a      	mov	r2, r3
 8005626:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800562a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005632:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005634:	085b      	lsrs	r3, r3, #1
 8005636:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005638:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800563a:	2b00      	cmp	r3, #0
 800563c:	f47f af62 	bne.w	8005504 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4618      	mov	r0, r3
 8005646:	f004 fdc3 	bl	800a1d0 <USB_ReadInterrupts>
 800564a:	4603      	mov	r3, r0
 800564c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005650:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005654:	f040 80db 	bne.w	800580e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4618      	mov	r0, r3
 800565e:	f004 fde4 	bl	800a22a <USB_ReadDevAllInEpInterrupt>
 8005662:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8005664:	2300      	movs	r3, #0
 8005666:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8005668:	e0cd      	b.n	8005806 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800566a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800566c:	f003 0301 	and.w	r3, r3, #1
 8005670:	2b00      	cmp	r3, #0
 8005672:	f000 80c2 	beq.w	80057fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800567c:	b2d2      	uxtb	r2, r2
 800567e:	4611      	mov	r1, r2
 8005680:	4618      	mov	r0, r3
 8005682:	f004 fe0a 	bl	800a29a <USB_ReadDevInEPInterrupt>
 8005686:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f003 0301 	and.w	r3, r3, #1
 800568e:	2b00      	cmp	r3, #0
 8005690:	d057      	beq.n	8005742 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005694:	f003 030f 	and.w	r3, r3, #15
 8005698:	2201      	movs	r2, #1
 800569a:	fa02 f303 	lsl.w	r3, r2, r3
 800569e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80056a0:	69fb      	ldr	r3, [r7, #28]
 80056a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056a6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	43db      	mvns	r3, r3
 80056ac:	69f9      	ldr	r1, [r7, #28]
 80056ae:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056b2:	4013      	ands	r3, r2
 80056b4:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80056b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	69fb      	ldr	r3, [r7, #28]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056c2:	461a      	mov	r2, r3
 80056c4:	2301      	movs	r3, #1
 80056c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	799b      	ldrb	r3, [r3, #6]
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d132      	bne.n	8005736 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80056d0:	6879      	ldr	r1, [r7, #4]
 80056d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056d4:	4613      	mov	r3, r2
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	4413      	add	r3, r2
 80056da:	009b      	lsls	r3, r3, #2
 80056dc:	440b      	add	r3, r1
 80056de:	3320      	adds	r3, #32
 80056e0:	6819      	ldr	r1, [r3, #0]
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056e6:	4613      	mov	r3, r2
 80056e8:	00db      	lsls	r3, r3, #3
 80056ea:	4413      	add	r3, r2
 80056ec:	009b      	lsls	r3, r3, #2
 80056ee:	4403      	add	r3, r0
 80056f0:	331c      	adds	r3, #28
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4419      	add	r1, r3
 80056f6:	6878      	ldr	r0, [r7, #4]
 80056f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056fa:	4613      	mov	r3, r2
 80056fc:	00db      	lsls	r3, r3, #3
 80056fe:	4413      	add	r3, r2
 8005700:	009b      	lsls	r3, r3, #2
 8005702:	4403      	add	r3, r0
 8005704:	3320      	adds	r3, #32
 8005706:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570a:	2b00      	cmp	r3, #0
 800570c:	d113      	bne.n	8005736 <HAL_PCD_IRQHandler+0x3a2>
 800570e:	6879      	ldr	r1, [r7, #4]
 8005710:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005712:	4613      	mov	r3, r2
 8005714:	00db      	lsls	r3, r3, #3
 8005716:	4413      	add	r3, r2
 8005718:	009b      	lsls	r3, r3, #2
 800571a:	440b      	add	r3, r1
 800571c:	3324      	adds	r3, #36	@ 0x24
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d108      	bne.n	8005736 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800572e:	461a      	mov	r2, r3
 8005730:	2101      	movs	r1, #1
 8005732:	f004 fe11 	bl	800a358 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005736:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005738:	b2db      	uxtb	r3, r3
 800573a:	4619      	mov	r1, r3
 800573c:	6878      	ldr	r0, [r7, #4]
 800573e:	f009 fae6 	bl	800ed0e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	f003 0308 	and.w	r3, r3, #8
 8005748:	2b00      	cmp	r3, #0
 800574a:	d008      	beq.n	800575e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800574c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005758:	461a      	mov	r2, r3
 800575a:	2308      	movs	r3, #8
 800575c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	f003 0310 	and.w	r3, r3, #16
 8005764:	2b00      	cmp	r3, #0
 8005766:	d008      	beq.n	800577a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005774:	461a      	mov	r2, r3
 8005776:	2310      	movs	r3, #16
 8005778:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800577a:	693b      	ldr	r3, [r7, #16]
 800577c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005780:	2b00      	cmp	r3, #0
 8005782:	d008      	beq.n	8005796 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005784:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	4413      	add	r3, r2
 800578c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005790:	461a      	mov	r2, r3
 8005792:	2340      	movs	r3, #64	@ 0x40
 8005794:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005796:	693b      	ldr	r3, [r7, #16]
 8005798:	f003 0302 	and.w	r3, r3, #2
 800579c:	2b00      	cmp	r3, #0
 800579e:	d023      	beq.n	80057e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80057a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057a2:	6a38      	ldr	r0, [r7, #32]
 80057a4:	f003 fdf8 	bl	8009398 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80057a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057aa:	4613      	mov	r3, r2
 80057ac:	00db      	lsls	r3, r3, #3
 80057ae:	4413      	add	r3, r2
 80057b0:	009b      	lsls	r3, r3, #2
 80057b2:	3310      	adds	r3, #16
 80057b4:	687a      	ldr	r2, [r7, #4]
 80057b6:	4413      	add	r3, r2
 80057b8:	3304      	adds	r3, #4
 80057ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	78db      	ldrb	r3, [r3, #3]
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	d108      	bne.n	80057d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	2200      	movs	r2, #0
 80057c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	b2db      	uxtb	r3, r3
 80057ce:	4619      	mov	r1, r3
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f009 fb29 	bl	800ee28 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80057d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057d8:	015a      	lsls	r2, r3, #5
 80057da:	69fb      	ldr	r3, [r7, #28]
 80057dc:	4413      	add	r3, r2
 80057de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80057e2:	461a      	mov	r2, r3
 80057e4:	2302      	movs	r3, #2
 80057e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d003      	beq.n	80057fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80057f2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fcbd 	bl	8006174 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80057fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057fc:	3301      	adds	r3, #1
 80057fe:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	085b      	lsrs	r3, r3, #1
 8005804:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	2b00      	cmp	r3, #0
 800580a:	f47f af2e 	bne.w	800566a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	4618      	mov	r0, r3
 8005814:	f004 fcdc 	bl	800a1d0 <USB_ReadInterrupts>
 8005818:	4603      	mov	r3, r0
 800581a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800581e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005822:	d122      	bne.n	800586a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	69fa      	ldr	r2, [r7, #28]
 800582e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005832:	f023 0301 	bic.w	r3, r3, #1
 8005836:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 800583e:	2b01      	cmp	r3, #1
 8005840:	d108      	bne.n	8005854 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2200      	movs	r2, #0
 8005846:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800584a:	2100      	movs	r1, #0
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fea3 	bl	8006598 <HAL_PCDEx_LPM_Callback>
 8005852:	e002      	b.n	800585a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	f009 fac7 	bl	800ede8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	695a      	ldr	r2, [r3, #20]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8005868:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	4618      	mov	r0, r3
 8005870:	f004 fcae 	bl	800a1d0 <USB_ReadInterrupts>
 8005874:	4603      	mov	r3, r0
 8005876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800587e:	d112      	bne.n	80058a6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005880:	69fb      	ldr	r3, [r7, #28]
 8005882:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005886:	689b      	ldr	r3, [r3, #8]
 8005888:	f003 0301 	and.w	r3, r3, #1
 800588c:	2b01      	cmp	r3, #1
 800588e:	d102      	bne.n	8005896 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005890:	6878      	ldr	r0, [r7, #4]
 8005892:	f009 fa83 	bl	800ed9c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	695a      	ldr	r2, [r3, #20]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80058a4:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	4618      	mov	r0, r3
 80058ac:	f004 fc90 	bl	800a1d0 <USB_ReadInterrupts>
 80058b0:	4603      	mov	r3, r0
 80058b2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80058b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80058ba:	f040 80b7 	bne.w	8005a2c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80058be:	69fb      	ldr	r3, [r7, #28]
 80058c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058cc:	f023 0301 	bic.w	r3, r3, #1
 80058d0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	2110      	movs	r1, #16
 80058d8:	4618      	mov	r0, r3
 80058da:	f003 fd5d 	bl	8009398 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80058de:	2300      	movs	r3, #0
 80058e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058e2:	e046      	b.n	8005972 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80058e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e6:	015a      	lsls	r2, r3, #5
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	4413      	add	r3, r2
 80058ec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058f0:	461a      	mov	r2, r3
 80058f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80058f6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80058f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fa:	015a      	lsls	r2, r3, #5
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	4413      	add	r3, r2
 8005900:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005908:	0151      	lsls	r1, r2, #5
 800590a:	69fa      	ldr	r2, [r7, #28]
 800590c:	440a      	add	r2, r1
 800590e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005912:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005916:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005918:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005924:	461a      	mov	r2, r3
 8005926:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800592a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800592c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	69fb      	ldr	r3, [r7, #28]
 8005932:	4413      	add	r3, r2
 8005934:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800593c:	0151      	lsls	r1, r2, #5
 800593e:	69fa      	ldr	r2, [r7, #28]
 8005940:	440a      	add	r2, r1
 8005942:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005946:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800594a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800594c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800595c:	0151      	lsls	r1, r2, #5
 800595e:	69fa      	ldr	r2, [r7, #28]
 8005960:	440a      	add	r2, r1
 8005962:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005966:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800596a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800596c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596e:	3301      	adds	r3, #1
 8005970:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	791b      	ldrb	r3, [r3, #4]
 8005976:	461a      	mov	r2, r3
 8005978:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597a:	4293      	cmp	r3, r2
 800597c:	d3b2      	bcc.n	80058e4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800597e:	69fb      	ldr	r3, [r7, #28]
 8005980:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005984:	69db      	ldr	r3, [r3, #28]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800598c:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8005990:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	7bdb      	ldrb	r3, [r3, #15]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d016      	beq.n	80059c8 <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059a4:	69fa      	ldr	r2, [r7, #28]
 80059a6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059aa:	f043 030b 	orr.w	r3, r3, #11
 80059ae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80059b2:	69fb      	ldr	r3, [r7, #28]
 80059b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80059ba:	69fa      	ldr	r2, [r7, #28]
 80059bc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059c0:	f043 030b 	orr.w	r3, r3, #11
 80059c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80059c6:	e015      	b.n	80059f4 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80059c8:	69fb      	ldr	r3, [r7, #28]
 80059ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	69fa      	ldr	r2, [r7, #28]
 80059d2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059d6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80059da:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 80059de:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80059e0:	69fb      	ldr	r3, [r7, #28]
 80059e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	69fa      	ldr	r2, [r7, #28]
 80059ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80059ee:	f043 030b 	orr.w	r3, r3, #11
 80059f2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69fa      	ldr	r2, [r7, #28]
 80059fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a02:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005a06:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6818      	ldr	r0, [r3, #0]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005a16:	461a      	mov	r2, r3
 8005a18:	f004 fc9e 	bl	800a358 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	695a      	ldr	r2, [r3, #20]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005a2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4618      	mov	r0, r3
 8005a32:	f004 fbcd 	bl	800a1d0 <USB_ReadInterrupts>
 8005a36:	4603      	mov	r3, r0
 8005a38:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005a3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a40:	d123      	bne.n	8005a8a <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4618      	mov	r0, r3
 8005a48:	f004 fc63 	bl	800a312 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4618      	mov	r0, r3
 8005a52:	f003 fd1a 	bl	800948a <USB_GetDevSpeed>
 8005a56:	4603      	mov	r3, r0
 8005a58:	461a      	mov	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681c      	ldr	r4, [r3, #0]
 8005a62:	f001 f9c9 	bl	8006df8 <HAL_RCC_GetHCLKFreq>
 8005a66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4620      	mov	r0, r4
 8005a70:	f003 fa1e 	bl	8008eb0 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f009 f972 	bl	800ed5e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	695a      	ldr	r2, [r3, #20]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8005a88:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	4618      	mov	r0, r3
 8005a90:	f004 fb9e 	bl	800a1d0 <USB_ReadInterrupts>
 8005a94:	4603      	mov	r3, r0
 8005a96:	f003 0308 	and.w	r3, r3, #8
 8005a9a:	2b08      	cmp	r3, #8
 8005a9c:	d10a      	bne.n	8005ab4 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f009 f94f 	bl	800ed42 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	695a      	ldr	r2, [r3, #20]
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f002 0208 	and.w	r2, r2, #8
 8005ab2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f004 fb89 	bl	800a1d0 <USB_ReadInterrupts>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac4:	2b80      	cmp	r3, #128	@ 0x80
 8005ac6:	d123      	bne.n	8005b10 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005ac8:	6a3b      	ldr	r3, [r7, #32]
 8005aca:	699b      	ldr	r3, [r3, #24]
 8005acc:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ad8:	e014      	b.n	8005b04 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005ada:	6879      	ldr	r1, [r7, #4]
 8005adc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ade:	4613      	mov	r3, r2
 8005ae0:	00db      	lsls	r3, r3, #3
 8005ae2:	4413      	add	r3, r2
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	440b      	add	r3, r1
 8005ae8:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af4:	b2db      	uxtb	r3, r3
 8005af6:	4619      	mov	r1, r3
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fb0a 	bl	8006112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b00:	3301      	adds	r3, #1
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	791b      	ldrb	r3, [r3, #4]
 8005b08:	461a      	mov	r2, r3
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d3e4      	bcc.n	8005ada <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4618      	mov	r0, r3
 8005b16:	f004 fb5b 	bl	800a1d0 <USB_ReadInterrupts>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005b20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005b24:	d13c      	bne.n	8005ba0 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b26:	2301      	movs	r3, #1
 8005b28:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b2a:	e02b      	b.n	8005b84 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b3c:	6879      	ldr	r1, [r7, #4]
 8005b3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b40:	4613      	mov	r3, r2
 8005b42:	00db      	lsls	r3, r3, #3
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3318      	adds	r3, #24
 8005b4c:	781b      	ldrb	r3, [r3, #0]
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d115      	bne.n	8005b7e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005b52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	da12      	bge.n	8005b7e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005b58:	6879      	ldr	r1, [r7, #4]
 8005b5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	00db      	lsls	r3, r3, #3
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	3317      	adds	r3, #23
 8005b68:	2201      	movs	r2, #1
 8005b6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	4619      	mov	r1, r3
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 faca 	bl	8006112 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005b7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b80:	3301      	adds	r3, #1
 8005b82:	627b      	str	r3, [r7, #36]	@ 0x24
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	791b      	ldrb	r3, [r3, #4]
 8005b88:	461a      	mov	r2, r3
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d3cd      	bcc.n	8005b2c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	695a      	ldr	r2, [r3, #20]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 8005b9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f004 fb13 	bl	800a1d0 <USB_ReadInterrupts>
 8005baa:	4603      	mov	r3, r0
 8005bac:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005bb0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8005bb4:	d156      	bne.n	8005c64 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bba:	e045      	b.n	8005c48 <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005bbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bbe:	015a      	lsls	r2, r3, #5
 8005bc0:	69fb      	ldr	r3, [r7, #28]
 8005bc2:	4413      	add	r3, r2
 8005bc4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005bcc:	6879      	ldr	r1, [r7, #4]
 8005bce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bd0:	4613      	mov	r3, r2
 8005bd2:	00db      	lsls	r3, r3, #3
 8005bd4:	4413      	add	r3, r2
 8005bd6:	009b      	lsls	r3, r3, #2
 8005bd8:	440b      	add	r3, r1
 8005bda:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d12e      	bne.n	8005c42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005be4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	da2b      	bge.n	8005c42 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005bea:	69bb      	ldr	r3, [r7, #24]
 8005bec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005bf6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005bfa:	429a      	cmp	r2, r3
 8005bfc:	d121      	bne.n	8005c42 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005bfe:	6879      	ldr	r1, [r7, #4]
 8005c00:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c02:	4613      	mov	r3, r2
 8005c04:	00db      	lsls	r3, r3, #3
 8005c06:	4413      	add	r3, r2
 8005c08:	009b      	lsls	r3, r3, #2
 8005c0a:	440b      	add	r3, r1
 8005c0c:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005c10:	2201      	movs	r2, #1
 8005c12:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005c14:	6a3b      	ldr	r3, [r7, #32]
 8005c16:	699b      	ldr	r3, [r3, #24]
 8005c18:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005c1c:	6a3b      	ldr	r3, [r7, #32]
 8005c1e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005c20:	6a3b      	ldr	r3, [r7, #32]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d10a      	bne.n	8005c42 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	69fa      	ldr	r2, [r7, #28]
 8005c36:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005c3e:	6053      	str	r3, [r2, #4]
            break;
 8005c40:	e008      	b.n	8005c54 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c44:	3301      	adds	r3, #1
 8005c46:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	791b      	ldrb	r3, [r3, #4]
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d3b3      	bcc.n	8005bbc <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695a      	ldr	r2, [r3, #20]
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005c62:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4618      	mov	r0, r3
 8005c6a:	f004 fab1 	bl	800a1d0 <USB_ReadInterrupts>
 8005c6e:	4603      	mov	r3, r0
 8005c70:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8005c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c78:	d10a      	bne.n	8005c90 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005c7a:	6878      	ldr	r0, [r7, #4]
 8005c7c:	f009 f8e6 	bl	800ee4c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695a      	ldr	r2, [r3, #20]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8005c8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f004 fa9b 	bl	800a1d0 <USB_ReadInterrupts>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	f003 0304 	and.w	r3, r3, #4
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d115      	bne.n	8005cd0 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 0304 	and.w	r3, r3, #4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f009 f8d6 	bl	800ee68 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	69ba      	ldr	r2, [r7, #24]
 8005cc8:	430a      	orrs	r2, r1
 8005cca:	605a      	str	r2, [r3, #4]
 8005ccc:	e000      	b.n	8005cd0 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005cce:	bf00      	nop
    }
  }
}
 8005cd0:	3734      	adds	r7, #52	@ 0x34
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd90      	pop	{r4, r7, pc}

08005cd6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b082      	sub	sp, #8
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d101      	bne.n	8005cf0 <HAL_PCD_SetAddress+0x1a>
 8005cec:	2302      	movs	r3, #2
 8005cee:	e012      	b.n	8005d16 <HAL_PCD_SetAddress+0x40>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	78fa      	ldrb	r2, [r7, #3]
 8005cfc:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	78fa      	ldrb	r2, [r7, #3]
 8005d04:	4611      	mov	r1, r2
 8005d06:	4618      	mov	r0, r3
 8005d08:	f004 f9fa 	bl	800a100 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d14:	2300      	movs	r3, #0
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	3708      	adds	r7, #8
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	bd80      	pop	{r7, pc}

08005d1e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005d1e:	b580      	push	{r7, lr}
 8005d20:	b084      	sub	sp, #16
 8005d22:	af00      	add	r7, sp, #0
 8005d24:	6078      	str	r0, [r7, #4]
 8005d26:	4608      	mov	r0, r1
 8005d28:	4611      	mov	r1, r2
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	70fb      	strb	r3, [r7, #3]
 8005d30:	460b      	mov	r3, r1
 8005d32:	803b      	strh	r3, [r7, #0]
 8005d34:	4613      	mov	r3, r2
 8005d36:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005d38:	2300      	movs	r3, #0
 8005d3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005d3c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	da0f      	bge.n	8005d64 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	f003 020f 	and.w	r2, r3, #15
 8005d4a:	4613      	mov	r3, r2
 8005d4c:	00db      	lsls	r3, r3, #3
 8005d4e:	4413      	add	r3, r2
 8005d50:	009b      	lsls	r3, r3, #2
 8005d52:	3310      	adds	r3, #16
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	4413      	add	r3, r2
 8005d58:	3304      	adds	r3, #4
 8005d5a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2201      	movs	r2, #1
 8005d60:	705a      	strb	r2, [r3, #1]
 8005d62:	e00f      	b.n	8005d84 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005d64:	78fb      	ldrb	r3, [r7, #3]
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	00db      	lsls	r3, r3, #3
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d76:	687a      	ldr	r2, [r7, #4]
 8005d78:	4413      	add	r3, r2
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005d84:	78fb      	ldrb	r3, [r7, #3]
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	b2da      	uxtb	r2, r3
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005d90:	883b      	ldrh	r3, [r7, #0]
 8005d92:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	78ba      	ldrb	r2, [r7, #2]
 8005d9e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	785b      	ldrb	r3, [r3, #1]
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d004      	beq.n	8005db2 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	461a      	mov	r2, r3
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005db2:	78bb      	ldrb	r3, [r7, #2]
 8005db4:	2b02      	cmp	r3, #2
 8005db6:	d102      	bne.n	8005dbe <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2200      	movs	r2, #0
 8005dbc:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d101      	bne.n	8005dcc <HAL_PCD_EP_Open+0xae>
 8005dc8:	2302      	movs	r3, #2
 8005dca:	e00e      	b.n	8005dea <HAL_PCD_EP_Open+0xcc>
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2201      	movs	r2, #1
 8005dd0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	68f9      	ldr	r1, [r7, #12]
 8005dda:	4618      	mov	r0, r3
 8005ddc:	f003 fb7a 	bl	80094d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005de8:	7afb      	ldrb	r3, [r7, #11]
}
 8005dea:	4618      	mov	r0, r3
 8005dec:	3710      	adds	r7, #16
 8005dee:	46bd      	mov	sp, r7
 8005df0:	bd80      	pop	{r7, pc}

08005df2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005df2:	b580      	push	{r7, lr}
 8005df4:	b084      	sub	sp, #16
 8005df6:	af00      	add	r7, sp, #0
 8005df8:	6078      	str	r0, [r7, #4]
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005dfe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	da0f      	bge.n	8005e26 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e06:	78fb      	ldrb	r3, [r7, #3]
 8005e08:	f003 020f 	and.w	r2, r3, #15
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4413      	add	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	3310      	adds	r3, #16
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	4413      	add	r3, r2
 8005e1a:	3304      	adds	r3, #4
 8005e1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2201      	movs	r2, #1
 8005e22:	705a      	strb	r2, [r3, #1]
 8005e24:	e00f      	b.n	8005e46 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e26:	78fb      	ldrb	r3, [r7, #3]
 8005e28:	f003 020f 	and.w	r2, r3, #15
 8005e2c:	4613      	mov	r3, r2
 8005e2e:	00db      	lsls	r3, r3, #3
 8005e30:	4413      	add	r3, r2
 8005e32:	009b      	lsls	r3, r3, #2
 8005e34:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e38:	687a      	ldr	r2, [r7, #4]
 8005e3a:	4413      	add	r3, r2
 8005e3c:	3304      	adds	r3, #4
 8005e3e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e46:	78fb      	ldrb	r3, [r7, #3]
 8005e48:	f003 030f 	and.w	r3, r3, #15
 8005e4c:	b2da      	uxtb	r2, r3
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d101      	bne.n	8005e60 <HAL_PCD_EP_Close+0x6e>
 8005e5c:	2302      	movs	r3, #2
 8005e5e:	e00e      	b.n	8005e7e <HAL_PCD_EP_Close+0x8c>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68f9      	ldr	r1, [r7, #12]
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f003 fbb8 	bl	80095e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2200      	movs	r2, #0
 8005e78:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b086      	sub	sp, #24
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	60f8      	str	r0, [r7, #12]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
 8005e92:	460b      	mov	r3, r1
 8005e94:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e96:	7afb      	ldrb	r3, [r7, #11]
 8005e98:	f003 020f 	and.w	r2, r3, #15
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	00db      	lsls	r3, r3, #3
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	4413      	add	r3, r2
 8005eac:	3304      	adds	r3, #4
 8005eae:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	687a      	ldr	r2, [r7, #4]
 8005eb4:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	683a      	ldr	r2, [r7, #0]
 8005eba:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ec8:	7afb      	ldrb	r3, [r7, #11]
 8005eca:	f003 030f 	and.w	r3, r3, #15
 8005ece:	b2da      	uxtb	r2, r3
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	799b      	ldrb	r3, [r3, #6]
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d102      	bne.n	8005ee2 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	697b      	ldr	r3, [r7, #20]
 8005ee0:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	799b      	ldrb	r3, [r3, #6]
 8005eea:	461a      	mov	r2, r3
 8005eec:	6979      	ldr	r1, [r7, #20]
 8005eee:	f003 fc55 	bl	800979c <USB_EPStartXfer>

  return HAL_OK;
 8005ef2:	2300      	movs	r3, #0
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3718      	adds	r7, #24
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bd80      	pop	{r7, pc}

08005efc <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b083      	sub	sp, #12
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	460b      	mov	r3, r1
 8005f06:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005f08:	78fb      	ldrb	r3, [r7, #3]
 8005f0a:	f003 020f 	and.w	r2, r3, #15
 8005f0e:	6879      	ldr	r1, [r7, #4]
 8005f10:	4613      	mov	r3, r2
 8005f12:	00db      	lsls	r3, r3, #3
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	440b      	add	r3, r1
 8005f1a:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005f1e:	681b      	ldr	r3, [r3, #0]
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	60f8      	str	r0, [r7, #12]
 8005f34:	607a      	str	r2, [r7, #4]
 8005f36:	603b      	str	r3, [r7, #0]
 8005f38:	460b      	mov	r3, r1
 8005f3a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f3c:	7afb      	ldrb	r3, [r7, #11]
 8005f3e:	f003 020f 	and.w	r2, r3, #15
 8005f42:	4613      	mov	r3, r2
 8005f44:	00db      	lsls	r3, r3, #3
 8005f46:	4413      	add	r3, r2
 8005f48:	009b      	lsls	r3, r3, #2
 8005f4a:	3310      	adds	r3, #16
 8005f4c:	68fa      	ldr	r2, [r7, #12]
 8005f4e:	4413      	add	r3, r2
 8005f50:	3304      	adds	r3, #4
 8005f52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005f54:	697b      	ldr	r3, [r7, #20]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	683a      	ldr	r2, [r7, #0]
 8005f5e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	2200      	movs	r2, #0
 8005f64:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	2201      	movs	r2, #1
 8005f6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005f6c:	7afb      	ldrb	r3, [r7, #11]
 8005f6e:	f003 030f 	and.w	r3, r3, #15
 8005f72:	b2da      	uxtb	r2, r3
 8005f74:	697b      	ldr	r3, [r7, #20]
 8005f76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	799b      	ldrb	r3, [r3, #6]
 8005f7c:	2b01      	cmp	r3, #1
 8005f7e:	d102      	bne.n	8005f86 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005f80:	687a      	ldr	r2, [r7, #4]
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6818      	ldr	r0, [r3, #0]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	799b      	ldrb	r3, [r3, #6]
 8005f8e:	461a      	mov	r2, r3
 8005f90:	6979      	ldr	r1, [r7, #20]
 8005f92:	f003 fc03 	bl	800979c <USB_EPStartXfer>

  return HAL_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	3718      	adds	r7, #24
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd80      	pop	{r7, pc}

08005fa0 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	460b      	mov	r3, r1
 8005faa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005fac:	78fb      	ldrb	r3, [r7, #3]
 8005fae:	f003 030f 	and.w	r3, r3, #15
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	7912      	ldrb	r2, [r2, #4]
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d901      	bls.n	8005fbe <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e04f      	b.n	800605e <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005fbe:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	da0f      	bge.n	8005fe6 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005fc6:	78fb      	ldrb	r3, [r7, #3]
 8005fc8:	f003 020f 	and.w	r2, r3, #15
 8005fcc:	4613      	mov	r3, r2
 8005fce:	00db      	lsls	r3, r3, #3
 8005fd0:	4413      	add	r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	3310      	adds	r3, #16
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4413      	add	r3, r2
 8005fda:	3304      	adds	r3, #4
 8005fdc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	2201      	movs	r2, #1
 8005fe2:	705a      	strb	r2, [r3, #1]
 8005fe4:	e00d      	b.n	8006002 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005fe6:	78fa      	ldrb	r2, [r7, #3]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	00db      	lsls	r3, r3, #3
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2200      	movs	r2, #0
 8006000:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006008:	78fb      	ldrb	r3, [r7, #3]
 800600a:	f003 030f 	and.w	r3, r3, #15
 800600e:	b2da      	uxtb	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800601a:	2b01      	cmp	r3, #1
 800601c:	d101      	bne.n	8006022 <HAL_PCD_EP_SetStall+0x82>
 800601e:	2302      	movs	r3, #2
 8006020:	e01d      	b.n	800605e <HAL_PCD_EP_SetStall+0xbe>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68f9      	ldr	r1, [r7, #12]
 8006030:	4618      	mov	r0, r3
 8006032:	f003 ff91 	bl	8009f58 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006036:	78fb      	ldrb	r3, [r7, #3]
 8006038:	f003 030f 	and.w	r3, r3, #15
 800603c:	2b00      	cmp	r3, #0
 800603e:	d109      	bne.n	8006054 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6818      	ldr	r0, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	7999      	ldrb	r1, [r3, #6]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800604e:	461a      	mov	r2, r3
 8006050:	f004 f982 	bl	800a358 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	3710      	adds	r7, #16
 8006062:	46bd      	mov	sp, r7
 8006064:	bd80      	pop	{r7, pc}

08006066 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006066:	b580      	push	{r7, lr}
 8006068:	b084      	sub	sp, #16
 800606a:	af00      	add	r7, sp, #0
 800606c:	6078      	str	r0, [r7, #4]
 800606e:	460b      	mov	r3, r1
 8006070:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006072:	78fb      	ldrb	r3, [r7, #3]
 8006074:	f003 030f 	and.w	r3, r3, #15
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	7912      	ldrb	r2, [r2, #4]
 800607c:	4293      	cmp	r3, r2
 800607e:	d901      	bls.n	8006084 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8006080:	2301      	movs	r3, #1
 8006082:	e042      	b.n	800610a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006084:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006088:	2b00      	cmp	r3, #0
 800608a:	da0f      	bge.n	80060ac <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800608c:	78fb      	ldrb	r3, [r7, #3]
 800608e:	f003 020f 	and.w	r2, r3, #15
 8006092:	4613      	mov	r3, r2
 8006094:	00db      	lsls	r3, r3, #3
 8006096:	4413      	add	r3, r2
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	3310      	adds	r3, #16
 800609c:	687a      	ldr	r2, [r7, #4]
 800609e:	4413      	add	r3, r2
 80060a0:	3304      	adds	r3, #4
 80060a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2201      	movs	r2, #1
 80060a8:	705a      	strb	r2, [r3, #1]
 80060aa:	e00f      	b.n	80060cc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80060ac:	78fb      	ldrb	r3, [r7, #3]
 80060ae:	f003 020f 	and.w	r2, r3, #15
 80060b2:	4613      	mov	r3, r2
 80060b4:	00db      	lsls	r3, r3, #3
 80060b6:	4413      	add	r3, r2
 80060b8:	009b      	lsls	r3, r3, #2
 80060ba:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	4413      	add	r3, r2
 80060c2:	3304      	adds	r3, #4
 80060c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	2200      	movs	r2, #0
 80060ca:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	2200      	movs	r2, #0
 80060d0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060d2:	78fb      	ldrb	r3, [r7, #3]
 80060d4:	f003 030f 	and.w	r3, r3, #15
 80060d8:	b2da      	uxtb	r2, r3
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80060e4:	2b01      	cmp	r3, #1
 80060e6:	d101      	bne.n	80060ec <HAL_PCD_EP_ClrStall+0x86>
 80060e8:	2302      	movs	r3, #2
 80060ea:	e00e      	b.n	800610a <HAL_PCD_EP_ClrStall+0xa4>
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	2201      	movs	r2, #1
 80060f0:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	68f9      	ldr	r1, [r7, #12]
 80060fa:	4618      	mov	r0, r3
 80060fc:	f003 ff9a 	bl	800a034 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2200      	movs	r2, #0
 8006104:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006112:	b580      	push	{r7, lr}
 8006114:	b084      	sub	sp, #16
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	460b      	mov	r3, r1
 800611c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800611e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006122:	2b00      	cmp	r3, #0
 8006124:	da0c      	bge.n	8006140 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006126:	78fb      	ldrb	r3, [r7, #3]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	3310      	adds	r3, #16
 8006136:	687a      	ldr	r2, [r7, #4]
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	60fb      	str	r3, [r7, #12]
 800613e:	e00c      	b.n	800615a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006140:	78fb      	ldrb	r3, [r7, #3]
 8006142:	f003 020f 	and.w	r2, r3, #15
 8006146:	4613      	mov	r3, r2
 8006148:	00db      	lsls	r3, r3, #3
 800614a:	4413      	add	r3, r2
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	4413      	add	r3, r2
 8006156:	3304      	adds	r3, #4
 8006158:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	68f9      	ldr	r1, [r7, #12]
 8006160:	4618      	mov	r0, r3
 8006162:	f003 fdb9 	bl	8009cd8 <USB_EPStopXfer>
 8006166:	4603      	mov	r3, r0
 8006168:	72fb      	strb	r3, [r7, #11]

  return ret;
 800616a:	7afb      	ldrb	r3, [r7, #11]
}
 800616c:	4618      	mov	r0, r3
 800616e:	3710      	adds	r7, #16
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	@ 0x28
 8006178:	af02      	add	r7, sp, #8
 800617a:	6078      	str	r0, [r7, #4]
 800617c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006184:	697b      	ldr	r3, [r7, #20]
 8006186:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006188:	683a      	ldr	r2, [r7, #0]
 800618a:	4613      	mov	r3, r2
 800618c:	00db      	lsls	r3, r3, #3
 800618e:	4413      	add	r3, r2
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	3310      	adds	r3, #16
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	4413      	add	r3, r2
 8006198:	3304      	adds	r3, #4
 800619a:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	695a      	ldr	r2, [r3, #20]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	691b      	ldr	r3, [r3, #16]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d901      	bls.n	80061ac <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80061a8:	2301      	movs	r3, #1
 80061aa:	e06b      	b.n	8006284 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	691a      	ldr	r2, [r3, #16]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	695b      	ldr	r3, [r3, #20]
 80061b4:	1ad3      	subs	r3, r2, r3
 80061b6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d902      	bls.n	80061c8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	689b      	ldr	r3, [r3, #8]
 80061c6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3303      	adds	r3, #3
 80061cc:	089b      	lsrs	r3, r3, #2
 80061ce:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80061d0:	e02a      	b.n	8006228 <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	691a      	ldr	r2, [r3, #16]
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	695b      	ldr	r3, [r3, #20]
 80061da:	1ad3      	subs	r3, r2, r3
 80061dc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	689b      	ldr	r3, [r3, #8]
 80061e2:	69fa      	ldr	r2, [r7, #28]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d902      	bls.n	80061ee <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	3303      	adds	r3, #3
 80061f2:	089b      	lsrs	r3, r3, #2
 80061f4:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	68d9      	ldr	r1, [r3, #12]
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	b2da      	uxtb	r2, r3
 80061fe:	69fb      	ldr	r3, [r7, #28]
 8006200:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006206:	9300      	str	r3, [sp, #0]
 8006208:	4603      	mov	r3, r0
 800620a:	6978      	ldr	r0, [r7, #20]
 800620c:	f003 fe0e 	bl	8009e2c <USB_WritePacket>

    ep->xfer_buff  += len;
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	68da      	ldr	r2, [r3, #12]
 8006214:	69fb      	ldr	r3, [r7, #28]
 8006216:	441a      	add	r2, r3
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	695a      	ldr	r2, [r3, #20]
 8006220:	69fb      	ldr	r3, [r7, #28]
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	015a      	lsls	r2, r3, #5
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4413      	add	r3, r2
 8006230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006234:	699b      	ldr	r3, [r3, #24]
 8006236:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	429a      	cmp	r2, r3
 800623c:	d809      	bhi.n	8006252 <PCD_WriteEmptyTxFifo+0xde>
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	695a      	ldr	r2, [r3, #20]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006246:	429a      	cmp	r2, r3
 8006248:	d203      	bcs.n	8006252 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	691b      	ldr	r3, [r3, #16]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d1bf      	bne.n	80061d2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	691a      	ldr	r2, [r3, #16]
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	695b      	ldr	r3, [r3, #20]
 800625a:	429a      	cmp	r2, r3
 800625c:	d811      	bhi.n	8006282 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	f003 030f 	and.w	r3, r3, #15
 8006264:	2201      	movs	r2, #1
 8006266:	fa02 f303 	lsl.w	r3, r2, r3
 800626a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006274:	68bb      	ldr	r3, [r7, #8]
 8006276:	43db      	mvns	r3, r3
 8006278:	6939      	ldr	r1, [r7, #16]
 800627a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800627e:	4013      	ands	r3, r2
 8006280:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3720      	adds	r7, #32
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b088      	sub	sp, #32
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
 8006294:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629c:	69fb      	ldr	r3, [r7, #28]
 800629e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80062a0:	69fb      	ldr	r3, [r7, #28]
 80062a2:	333c      	adds	r3, #60	@ 0x3c
 80062a4:	3304      	adds	r3, #4
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	015a      	lsls	r2, r3, #5
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	4413      	add	r3, r2
 80062b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	799b      	ldrb	r3, [r3, #6]
 80062be:	2b01      	cmp	r3, #1
 80062c0:	d17b      	bne.n	80063ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	f003 0308 	and.w	r3, r3, #8
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d015      	beq.n	80062f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	4a61      	ldr	r2, [pc, #388]	@ (8006454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	f240 80b9 	bls.w	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80b3 	beq.w	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	015a      	lsls	r2, r3, #5
 80062e6:	69bb      	ldr	r3, [r7, #24]
 80062e8:	4413      	add	r3, r2
 80062ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80062ee:	461a      	mov	r2, r3
 80062f0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80062f4:	6093      	str	r3, [r2, #8]
 80062f6:	e0a7      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	f003 0320 	and.w	r3, r3, #32
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d009      	beq.n	8006316 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	015a      	lsls	r2, r3, #5
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	4413      	add	r3, r2
 800630a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800630e:	461a      	mov	r2, r3
 8006310:	2320      	movs	r3, #32
 8006312:	6093      	str	r3, [r2, #8]
 8006314:	e098      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800631c:	2b00      	cmp	r3, #0
 800631e:	f040 8093 	bne.w	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	4a4b      	ldr	r2, [pc, #300]	@ (8006454 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d90f      	bls.n	800634a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006330:	2b00      	cmp	r3, #0
 8006332:	d00a      	beq.n	800634a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	015a      	lsls	r2, r3, #5
 8006338:	69bb      	ldr	r3, [r7, #24]
 800633a:	4413      	add	r3, r2
 800633c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006340:	461a      	mov	r2, r3
 8006342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006346:	6093      	str	r3, [r2, #8]
 8006348:	e07e      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800634a:	683a      	ldr	r2, [r7, #0]
 800634c:	4613      	mov	r3, r2
 800634e:	00db      	lsls	r3, r3, #3
 8006350:	4413      	add	r3, r2
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	4413      	add	r3, r2
 800635c:	3304      	adds	r3, #4
 800635e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	6a1a      	ldr	r2, [r3, #32]
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	0159      	lsls	r1, r3, #5
 8006368:	69bb      	ldr	r3, [r7, #24]
 800636a:	440b      	add	r3, r1
 800636c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006376:	1ad2      	subs	r2, r2, r3
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d114      	bne.n	80063ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	691b      	ldr	r3, [r3, #16]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d109      	bne.n	800639e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006394:	461a      	mov	r2, r3
 8006396:	2101      	movs	r1, #1
 8006398:	f003 ffde 	bl	800a358 <USB_EP0_OutStart>
 800639c:	e006      	b.n	80063ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	695b      	ldr	r3, [r3, #20]
 80063a6:	441a      	add	r2, r3
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	4619      	mov	r1, r3
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f008 fc90 	bl	800ecd8 <HAL_PCD_DataOutStageCallback>
 80063b8:	e046      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	4a26      	ldr	r2, [pc, #152]	@ (8006458 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d124      	bne.n	800640c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d00a      	beq.n	80063e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80063cc:	683b      	ldr	r3, [r7, #0]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	69bb      	ldr	r3, [r7, #24]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063d8:	461a      	mov	r2, r3
 80063da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80063de:	6093      	str	r3, [r2, #8]
 80063e0:	e032      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	f003 0320 	and.w	r3, r3, #32
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	015a      	lsls	r2, r3, #5
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	4413      	add	r3, r2
 80063f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80063f8:	461a      	mov	r2, r3
 80063fa:	2320      	movs	r3, #32
 80063fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	b2db      	uxtb	r3, r3
 8006402:	4619      	mov	r1, r3
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f008 fc67 	bl	800ecd8 <HAL_PCD_DataOutStageCallback>
 800640a:	e01d      	b.n	8006448 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d114      	bne.n	800643c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006412:	6879      	ldr	r1, [r7, #4]
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	4613      	mov	r3, r2
 8006418:	00db      	lsls	r3, r3, #3
 800641a:	4413      	add	r3, r2
 800641c:	009b      	lsls	r3, r3, #2
 800641e:	440b      	add	r3, r1
 8006420:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d108      	bne.n	800643c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6818      	ldr	r0, [r3, #0]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006434:	461a      	mov	r2, r3
 8006436:	2100      	movs	r1, #0
 8006438:	f003 ff8e 	bl	800a358 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	b2db      	uxtb	r3, r3
 8006440:	4619      	mov	r1, r3
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f008 fc48 	bl	800ecd8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006448:	2300      	movs	r3, #0
}
 800644a:	4618      	mov	r0, r3
 800644c:	3720      	adds	r7, #32
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}
 8006452:	bf00      	nop
 8006454:	4f54300a 	.word	0x4f54300a
 8006458:	4f54310a 	.word	0x4f54310a

0800645c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b086      	sub	sp, #24
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	333c      	adds	r3, #60	@ 0x3c
 8006474:	3304      	adds	r3, #4
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	015a      	lsls	r2, r3, #5
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	4413      	add	r3, r2
 8006482:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006486:	689b      	ldr	r3, [r3, #8]
 8006488:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	4a15      	ldr	r2, [pc, #84]	@ (80064e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800648e:	4293      	cmp	r3, r2
 8006490:	d90e      	bls.n	80064b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006498:	2b00      	cmp	r3, #0
 800649a:	d009      	beq.n	80064b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	015a      	lsls	r2, r3, #5
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	4413      	add	r3, r2
 80064a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064a8:	461a      	mov	r2, r3
 80064aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f008 fbff 	bl	800ecb4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4a0a      	ldr	r2, [pc, #40]	@ (80064e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d90c      	bls.n	80064d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	799b      	ldrb	r3, [r3, #6]
 80064c2:	2b01      	cmp	r3, #1
 80064c4:	d108      	bne.n	80064d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	6818      	ldr	r0, [r3, #0]
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80064d0:	461a      	mov	r2, r3
 80064d2:	2101      	movs	r1, #1
 80064d4:	f003 ff40 	bl	800a358 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3718      	adds	r7, #24
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	4f54300a 	.word	0x4f54300a

080064e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
 80064f4:	4613      	mov	r3, r2
 80064f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006500:	78fb      	ldrb	r3, [r7, #3]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d107      	bne.n	8006516 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006506:	883b      	ldrh	r3, [r7, #0]
 8006508:	0419      	lsls	r1, r3, #16
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	430a      	orrs	r2, r1
 8006512:	629a      	str	r2, [r3, #40]	@ 0x28
 8006514:	e028      	b.n	8006568 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651c:	0c1b      	lsrs	r3, r3, #16
 800651e:	68ba      	ldr	r2, [r7, #8]
 8006520:	4413      	add	r3, r2
 8006522:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006524:	2300      	movs	r3, #0
 8006526:	73fb      	strb	r3, [r7, #15]
 8006528:	e00d      	b.n	8006546 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	7bfb      	ldrb	r3, [r7, #15]
 8006530:	3340      	adds	r3, #64	@ 0x40
 8006532:	009b      	lsls	r3, r3, #2
 8006534:	4413      	add	r3, r2
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	0c1b      	lsrs	r3, r3, #16
 800653a:	68ba      	ldr	r2, [r7, #8]
 800653c:	4413      	add	r3, r2
 800653e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006540:	7bfb      	ldrb	r3, [r7, #15]
 8006542:	3301      	adds	r3, #1
 8006544:	73fb      	strb	r3, [r7, #15]
 8006546:	7bfa      	ldrb	r2, [r7, #15]
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	3b01      	subs	r3, #1
 800654c:	429a      	cmp	r2, r3
 800654e:	d3ec      	bcc.n	800652a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006550:	883b      	ldrh	r3, [r7, #0]
 8006552:	0418      	lsls	r0, r3, #16
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6819      	ldr	r1, [r3, #0]
 8006558:	78fb      	ldrb	r3, [r7, #3]
 800655a:	3b01      	subs	r3, #1
 800655c:	68ba      	ldr	r2, [r7, #8]
 800655e:	4302      	orrs	r2, r0
 8006560:	3340      	adds	r3, #64	@ 0x40
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	440b      	add	r3, r1
 8006566:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006568:	2300      	movs	r3, #0
}
 800656a:	4618      	mov	r0, r3
 800656c:	3714      	adds	r7, #20
 800656e:	46bd      	mov	sp, r7
 8006570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006574:	4770      	bx	lr

08006576 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006576:	b480      	push	{r7}
 8006578:	b083      	sub	sp, #12
 800657a:	af00      	add	r7, sp, #0
 800657c:	6078      	str	r0, [r7, #4]
 800657e:	460b      	mov	r3, r1
 8006580:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	887a      	ldrh	r2, [r7, #2]
 8006588:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800658a:	2300      	movs	r3, #0
}
 800658c:	4618      	mov	r0, r3
 800658e:	370c      	adds	r7, #12
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr

08006598 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8006598:	b480      	push	{r7}
 800659a:	b083      	sub	sp, #12
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
 80065a0:	460b      	mov	r3, r1
 80065a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e267      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d075      	beq.n	80066ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065ce:	4b88      	ldr	r3, [pc, #544]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f003 030c 	and.w	r3, r3, #12
 80065d6:	2b04      	cmp	r3, #4
 80065d8:	d00c      	beq.n	80065f4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065da:	4b85      	ldr	r3, [pc, #532]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065dc:	689b      	ldr	r3, [r3, #8]
 80065de:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80065e2:	2b08      	cmp	r3, #8
 80065e4:	d112      	bne.n	800660c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80065e6:	4b82      	ldr	r3, [pc, #520]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80065ee:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065f2:	d10b      	bne.n	800660c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80065f4:	4b7e      	ldr	r3, [pc, #504]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d05b      	beq.n	80066b8 <HAL_RCC_OscConfig+0x108>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d157      	bne.n	80066b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e242      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	685b      	ldr	r3, [r3, #4]
 8006610:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006614:	d106      	bne.n	8006624 <HAL_RCC_OscConfig+0x74>
 8006616:	4b76      	ldr	r3, [pc, #472]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a75      	ldr	r2, [pc, #468]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800661c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006620:	6013      	str	r3, [r2, #0]
 8006622:	e01d      	b.n	8006660 <HAL_RCC_OscConfig+0xb0>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	685b      	ldr	r3, [r3, #4]
 8006628:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800662c:	d10c      	bne.n	8006648 <HAL_RCC_OscConfig+0x98>
 800662e:	4b70      	ldr	r3, [pc, #448]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a6f      	ldr	r2, [pc, #444]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006634:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	4b6d      	ldr	r3, [pc, #436]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4a6c      	ldr	r2, [pc, #432]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006640:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006644:	6013      	str	r3, [r2, #0]
 8006646:	e00b      	b.n	8006660 <HAL_RCC_OscConfig+0xb0>
 8006648:	4b69      	ldr	r3, [pc, #420]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	4a68      	ldr	r2, [pc, #416]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800664e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006652:	6013      	str	r3, [r2, #0]
 8006654:	4b66      	ldr	r3, [pc, #408]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a65      	ldr	r2, [pc, #404]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800665a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800665e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	685b      	ldr	r3, [r3, #4]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d013      	beq.n	8006690 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006668:	f7fd fec6 	bl	80043f8 <HAL_GetTick>
 800666c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666e:	e008      	b.n	8006682 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006670:	f7fd fec2 	bl	80043f8 <HAL_GetTick>
 8006674:	4602      	mov	r2, r0
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	1ad3      	subs	r3, r2, r3
 800667a:	2b64      	cmp	r3, #100	@ 0x64
 800667c:	d901      	bls.n	8006682 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800667e:	2303      	movs	r3, #3
 8006680:	e207      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006682:	4b5b      	ldr	r3, [pc, #364]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800668a:	2b00      	cmp	r3, #0
 800668c:	d0f0      	beq.n	8006670 <HAL_RCC_OscConfig+0xc0>
 800668e:	e014      	b.n	80066ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006690:	f7fd feb2 	bl	80043f8 <HAL_GetTick>
 8006694:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006696:	e008      	b.n	80066aa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006698:	f7fd feae 	bl	80043f8 <HAL_GetTick>
 800669c:	4602      	mov	r2, r0
 800669e:	693b      	ldr	r3, [r7, #16]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	2b64      	cmp	r3, #100	@ 0x64
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e1f3      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066aa:	4b51      	ldr	r3, [pc, #324]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1f0      	bne.n	8006698 <HAL_RCC_OscConfig+0xe8>
 80066b6:	e000      	b.n	80066ba <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 0302 	and.w	r3, r3, #2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d063      	beq.n	800678e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066c6:	4b4a      	ldr	r3, [pc, #296]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	f003 030c 	and.w	r3, r3, #12
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00b      	beq.n	80066ea <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066d2:	4b47      	ldr	r3, [pc, #284]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d11c      	bne.n	8006718 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80066de:	4b44      	ldr	r3, [pc, #272]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066e0:	685b      	ldr	r3, [r3, #4]
 80066e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d116      	bne.n	8006718 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80066ea:	4b41      	ldr	r3, [pc, #260]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f003 0302 	and.w	r3, r3, #2
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d005      	beq.n	8006702 <HAL_RCC_OscConfig+0x152>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	68db      	ldr	r3, [r3, #12]
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	d001      	beq.n	8006702 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	e1c7      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006702:	4b3b      	ldr	r3, [pc, #236]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	00db      	lsls	r3, r3, #3
 8006710:	4937      	ldr	r1, [pc, #220]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006712:	4313      	orrs	r3, r2
 8006714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006716:	e03a      	b.n	800678e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d020      	beq.n	8006762 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006720:	4b34      	ldr	r3, [pc, #208]	@ (80067f4 <HAL_RCC_OscConfig+0x244>)
 8006722:	2201      	movs	r2, #1
 8006724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006726:	f7fd fe67 	bl	80043f8 <HAL_GetTick>
 800672a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800672c:	e008      	b.n	8006740 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800672e:	f7fd fe63 	bl	80043f8 <HAL_GetTick>
 8006732:	4602      	mov	r2, r0
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	1ad3      	subs	r3, r2, r3
 8006738:	2b02      	cmp	r3, #2
 800673a:	d901      	bls.n	8006740 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800673c:	2303      	movs	r3, #3
 800673e:	e1a8      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006740:	4b2b      	ldr	r3, [pc, #172]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f003 0302 	and.w	r3, r3, #2
 8006748:	2b00      	cmp	r3, #0
 800674a:	d0f0      	beq.n	800672e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800674c:	4b28      	ldr	r3, [pc, #160]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	691b      	ldr	r3, [r3, #16]
 8006758:	00db      	lsls	r3, r3, #3
 800675a:	4925      	ldr	r1, [pc, #148]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 800675c:	4313      	orrs	r3, r2
 800675e:	600b      	str	r3, [r1, #0]
 8006760:	e015      	b.n	800678e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006762:	4b24      	ldr	r3, [pc, #144]	@ (80067f4 <HAL_RCC_OscConfig+0x244>)
 8006764:	2200      	movs	r2, #0
 8006766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006768:	f7fd fe46 	bl	80043f8 <HAL_GetTick>
 800676c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800676e:	e008      	b.n	8006782 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006770:	f7fd fe42 	bl	80043f8 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	1ad3      	subs	r3, r2, r3
 800677a:	2b02      	cmp	r3, #2
 800677c:	d901      	bls.n	8006782 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800677e:	2303      	movs	r3, #3
 8006780:	e187      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006782:	4b1b      	ldr	r3, [pc, #108]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f003 0302 	and.w	r3, r3, #2
 800678a:	2b00      	cmp	r3, #0
 800678c:	d1f0      	bne.n	8006770 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f003 0308 	and.w	r3, r3, #8
 8006796:	2b00      	cmp	r3, #0
 8006798:	d036      	beq.n	8006808 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	695b      	ldr	r3, [r3, #20]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d016      	beq.n	80067d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067a2:	4b15      	ldr	r3, [pc, #84]	@ (80067f8 <HAL_RCC_OscConfig+0x248>)
 80067a4:	2201      	movs	r2, #1
 80067a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067a8:	f7fd fe26 	bl	80043f8 <HAL_GetTick>
 80067ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067ae:	e008      	b.n	80067c2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067b0:	f7fd fe22 	bl	80043f8 <HAL_GetTick>
 80067b4:	4602      	mov	r2, r0
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	2b02      	cmp	r3, #2
 80067bc:	d901      	bls.n	80067c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067be:	2303      	movs	r3, #3
 80067c0:	e167      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067c2:	4b0b      	ldr	r3, [pc, #44]	@ (80067f0 <HAL_RCC_OscConfig+0x240>)
 80067c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067c6:	f003 0302 	and.w	r3, r3, #2
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d0f0      	beq.n	80067b0 <HAL_RCC_OscConfig+0x200>
 80067ce:	e01b      	b.n	8006808 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80067d0:	4b09      	ldr	r3, [pc, #36]	@ (80067f8 <HAL_RCC_OscConfig+0x248>)
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80067d6:	f7fd fe0f 	bl	80043f8 <HAL_GetTick>
 80067da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067dc:	e00e      	b.n	80067fc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067de:	f7fd fe0b 	bl	80043f8 <HAL_GetTick>
 80067e2:	4602      	mov	r2, r0
 80067e4:	693b      	ldr	r3, [r7, #16]
 80067e6:	1ad3      	subs	r3, r2, r3
 80067e8:	2b02      	cmp	r3, #2
 80067ea:	d907      	bls.n	80067fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80067ec:	2303      	movs	r3, #3
 80067ee:	e150      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
 80067f0:	40023800 	.word	0x40023800
 80067f4:	42470000 	.word	0x42470000
 80067f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80067fc:	4b88      	ldr	r3, [pc, #544]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80067fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006800:	f003 0302 	and.w	r3, r3, #2
 8006804:	2b00      	cmp	r3, #0
 8006806:	d1ea      	bne.n	80067de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f003 0304 	and.w	r3, r3, #4
 8006810:	2b00      	cmp	r3, #0
 8006812:	f000 8097 	beq.w	8006944 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006816:	2300      	movs	r3, #0
 8006818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800681a:	4b81      	ldr	r3, [pc, #516]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 800681c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800681e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006822:	2b00      	cmp	r3, #0
 8006824:	d10f      	bne.n	8006846 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
 800682a:	4b7d      	ldr	r3, [pc, #500]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 800682c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800682e:	4a7c      	ldr	r2, [pc, #496]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006834:	6413      	str	r3, [r2, #64]	@ 0x40
 8006836:	4b7a      	ldr	r3, [pc, #488]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800683a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683e:	60bb      	str	r3, [r7, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006842:	2301      	movs	r3, #1
 8006844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006846:	4b77      	ldr	r3, [pc, #476]	@ (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800684e:	2b00      	cmp	r3, #0
 8006850:	d118      	bne.n	8006884 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006852:	4b74      	ldr	r3, [pc, #464]	@ (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4a73      	ldr	r2, [pc, #460]	@ (8006a24 <HAL_RCC_OscConfig+0x474>)
 8006858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800685c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800685e:	f7fd fdcb 	bl	80043f8 <HAL_GetTick>
 8006862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006864:	e008      	b.n	8006878 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006866:	f7fd fdc7 	bl	80043f8 <HAL_GetTick>
 800686a:	4602      	mov	r2, r0
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	1ad3      	subs	r3, r2, r3
 8006870:	2b02      	cmp	r3, #2
 8006872:	d901      	bls.n	8006878 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006874:	2303      	movs	r3, #3
 8006876:	e10c      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006878:	4b6a      	ldr	r3, [pc, #424]	@ (8006a24 <HAL_RCC_OscConfig+0x474>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006880:	2b00      	cmp	r3, #0
 8006882:	d0f0      	beq.n	8006866 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	2b01      	cmp	r3, #1
 800688a:	d106      	bne.n	800689a <HAL_RCC_OscConfig+0x2ea>
 800688c:	4b64      	ldr	r3, [pc, #400]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006890:	4a63      	ldr	r2, [pc, #396]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006892:	f043 0301 	orr.w	r3, r3, #1
 8006896:	6713      	str	r3, [r2, #112]	@ 0x70
 8006898:	e01c      	b.n	80068d4 <HAL_RCC_OscConfig+0x324>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	689b      	ldr	r3, [r3, #8]
 800689e:	2b05      	cmp	r3, #5
 80068a0:	d10c      	bne.n	80068bc <HAL_RCC_OscConfig+0x30c>
 80068a2:	4b5f      	ldr	r3, [pc, #380]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068a6:	4a5e      	ldr	r2, [pc, #376]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068a8:	f043 0304 	orr.w	r3, r3, #4
 80068ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ae:	4b5c      	ldr	r3, [pc, #368]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068b2:	4a5b      	ldr	r2, [pc, #364]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068b4:	f043 0301 	orr.w	r3, r3, #1
 80068b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ba:	e00b      	b.n	80068d4 <HAL_RCC_OscConfig+0x324>
 80068bc:	4b58      	ldr	r3, [pc, #352]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c0:	4a57      	ldr	r2, [pc, #348]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068c2:	f023 0301 	bic.w	r3, r3, #1
 80068c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80068c8:	4b55      	ldr	r3, [pc, #340]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068cc:	4a54      	ldr	r2, [pc, #336]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068ce:	f023 0304 	bic.w	r3, r3, #4
 80068d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068dc:	f7fd fd8c 	bl	80043f8 <HAL_GetTick>
 80068e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068e2:	e00a      	b.n	80068fa <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80068e4:	f7fd fd88 	bl	80043f8 <HAL_GetTick>
 80068e8:	4602      	mov	r2, r0
 80068ea:	693b      	ldr	r3, [r7, #16]
 80068ec:	1ad3      	subs	r3, r2, r3
 80068ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e0cb      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068fa:	4b49      	ldr	r3, [pc, #292]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80068fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d0ee      	beq.n	80068e4 <HAL_RCC_OscConfig+0x334>
 8006906:	e014      	b.n	8006932 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006908:	f7fd fd76 	bl	80043f8 <HAL_GetTick>
 800690c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800690e:	e00a      	b.n	8006926 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006910:	f7fd fd72 	bl	80043f8 <HAL_GetTick>
 8006914:	4602      	mov	r2, r0
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	1ad3      	subs	r3, r2, r3
 800691a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800691e:	4293      	cmp	r3, r2
 8006920:	d901      	bls.n	8006926 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e0b5      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006926:	4b3e      	ldr	r3, [pc, #248]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800692a:	f003 0302 	and.w	r3, r3, #2
 800692e:	2b00      	cmp	r3, #0
 8006930:	d1ee      	bne.n	8006910 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006932:	7dfb      	ldrb	r3, [r7, #23]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d105      	bne.n	8006944 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006938:	4b39      	ldr	r3, [pc, #228]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 800693a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800693c:	4a38      	ldr	r2, [pc, #224]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 800693e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	f000 80a1 	beq.w	8006a90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800694e:	4b34      	ldr	r3, [pc, #208]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006950:	689b      	ldr	r3, [r3, #8]
 8006952:	f003 030c 	and.w	r3, r3, #12
 8006956:	2b08      	cmp	r3, #8
 8006958:	d05c      	beq.n	8006a14 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	2b02      	cmp	r3, #2
 8006960:	d141      	bne.n	80069e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006962:	4b31      	ldr	r3, [pc, #196]	@ (8006a28 <HAL_RCC_OscConfig+0x478>)
 8006964:	2200      	movs	r2, #0
 8006966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006968:	f7fd fd46 	bl	80043f8 <HAL_GetTick>
 800696c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800696e:	e008      	b.n	8006982 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006970:	f7fd fd42 	bl	80043f8 <HAL_GetTick>
 8006974:	4602      	mov	r2, r0
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	1ad3      	subs	r3, r2, r3
 800697a:	2b02      	cmp	r3, #2
 800697c:	d901      	bls.n	8006982 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800697e:	2303      	movs	r3, #3
 8006980:	e087      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006982:	4b27      	ldr	r3, [pc, #156]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800698a:	2b00      	cmp	r3, #0
 800698c:	d1f0      	bne.n	8006970 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	69da      	ldr	r2, [r3, #28]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6a1b      	ldr	r3, [r3, #32]
 8006996:	431a      	orrs	r2, r3
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800699c:	019b      	lsls	r3, r3, #6
 800699e:	431a      	orrs	r2, r3
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069a4:	085b      	lsrs	r3, r3, #1
 80069a6:	3b01      	subs	r3, #1
 80069a8:	041b      	lsls	r3, r3, #16
 80069aa:	431a      	orrs	r2, r3
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	061b      	lsls	r3, r3, #24
 80069b2:	491b      	ldr	r1, [pc, #108]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80069b4:	4313      	orrs	r3, r2
 80069b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006a28 <HAL_RCC_OscConfig+0x478>)
 80069ba:	2201      	movs	r2, #1
 80069bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069be:	f7fd fd1b 	bl	80043f8 <HAL_GetTick>
 80069c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069c4:	e008      	b.n	80069d8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069c6:	f7fd fd17 	bl	80043f8 <HAL_GetTick>
 80069ca:	4602      	mov	r2, r0
 80069cc:	693b      	ldr	r3, [r7, #16]
 80069ce:	1ad3      	subs	r3, r2, r3
 80069d0:	2b02      	cmp	r3, #2
 80069d2:	d901      	bls.n	80069d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80069d4:	2303      	movs	r3, #3
 80069d6:	e05c      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069d8:	4b11      	ldr	r3, [pc, #68]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d0f0      	beq.n	80069c6 <HAL_RCC_OscConfig+0x416>
 80069e4:	e054      	b.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80069e6:	4b10      	ldr	r3, [pc, #64]	@ (8006a28 <HAL_RCC_OscConfig+0x478>)
 80069e8:	2200      	movs	r2, #0
 80069ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069ec:	f7fd fd04 	bl	80043f8 <HAL_GetTick>
 80069f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069f2:	e008      	b.n	8006a06 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069f4:	f7fd fd00 	bl	80043f8 <HAL_GetTick>
 80069f8:	4602      	mov	r2, r0
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	1ad3      	subs	r3, r2, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d901      	bls.n	8006a06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a02:	2303      	movs	r3, #3
 8006a04:	e045      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a06:	4b06      	ldr	r3, [pc, #24]	@ (8006a20 <HAL_RCC_OscConfig+0x470>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d1f0      	bne.n	80069f4 <HAL_RCC_OscConfig+0x444>
 8006a12:	e03d      	b.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	699b      	ldr	r3, [r3, #24]
 8006a18:	2b01      	cmp	r3, #1
 8006a1a:	d107      	bne.n	8006a2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e038      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
 8006a20:	40023800 	.word	0x40023800
 8006a24:	40007000 	.word	0x40007000
 8006a28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a2c:	4b1b      	ldr	r3, [pc, #108]	@ (8006a9c <HAL_RCC_OscConfig+0x4ec>)
 8006a2e:	685b      	ldr	r3, [r3, #4]
 8006a30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	699b      	ldr	r3, [r3, #24]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d028      	beq.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a44:	429a      	cmp	r2, r3
 8006a46:	d121      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a52:	429a      	cmp	r2, r3
 8006a54:	d11a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a56:	68fa      	ldr	r2, [r7, #12]
 8006a58:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a5c:	4013      	ands	r3, r2
 8006a5e:	687a      	ldr	r2, [r7, #4]
 8006a60:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d111      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a72:	085b      	lsrs	r3, r3, #1
 8006a74:	3b01      	subs	r3, #1
 8006a76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d107      	bne.n	8006a8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d001      	beq.n	8006a90 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	e000      	b.n	8006a92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3718      	adds	r7, #24
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	40023800 	.word	0x40023800

08006aa0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b084      	sub	sp, #16
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
 8006aa8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d101      	bne.n	8006ab4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ab0:	2301      	movs	r3, #1
 8006ab2:	e0cc      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ab4:	4b68      	ldr	r3, [pc, #416]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f003 0307 	and.w	r3, r3, #7
 8006abc:	683a      	ldr	r2, [r7, #0]
 8006abe:	429a      	cmp	r2, r3
 8006ac0:	d90c      	bls.n	8006adc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ac2:	4b65      	ldr	r3, [pc, #404]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006ac4:	683a      	ldr	r2, [r7, #0]
 8006ac6:	b2d2      	uxtb	r2, r2
 8006ac8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006aca:	4b63      	ldr	r3, [pc, #396]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	f003 0307 	and.w	r3, r3, #7
 8006ad2:	683a      	ldr	r2, [r7, #0]
 8006ad4:	429a      	cmp	r2, r3
 8006ad6:	d001      	beq.n	8006adc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0b8      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d020      	beq.n	8006b2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 0304 	and.w	r3, r3, #4
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d005      	beq.n	8006b00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006af4:	4b59      	ldr	r3, [pc, #356]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	4a58      	ldr	r2, [pc, #352]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006afa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006afe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d005      	beq.n	8006b18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b0c:	4b53      	ldr	r3, [pc, #332]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b0e:	689b      	ldr	r3, [r3, #8]
 8006b10:	4a52      	ldr	r2, [pc, #328]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b12:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b18:	4b50      	ldr	r3, [pc, #320]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	494d      	ldr	r1, [pc, #308]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b26:	4313      	orrs	r3, r2
 8006b28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d044      	beq.n	8006bc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d107      	bne.n	8006b4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b3e:	4b47      	ldr	r3, [pc, #284]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d119      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e07f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	2b02      	cmp	r3, #2
 8006b54:	d003      	beq.n	8006b5e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b5a:	2b03      	cmp	r3, #3
 8006b5c:	d107      	bne.n	8006b6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b5e:	4b3f      	ldr	r3, [pc, #252]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d109      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e06f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006b6e:	4b3b      	ldr	r3, [pc, #236]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	f003 0302 	and.w	r3, r3, #2
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d101      	bne.n	8006b7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	e067      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006b7e:	4b37      	ldr	r3, [pc, #220]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f023 0203 	bic.w	r2, r3, #3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	685b      	ldr	r3, [r3, #4]
 8006b8a:	4934      	ldr	r1, [pc, #208]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006b90:	f7fd fc32 	bl	80043f8 <HAL_GetTick>
 8006b94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006b96:	e00a      	b.n	8006bae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006b98:	f7fd fc2e 	bl	80043f8 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d901      	bls.n	8006bae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006baa:	2303      	movs	r3, #3
 8006bac:	e04f      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bae:	4b2b      	ldr	r3, [pc, #172]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 020c 	and.w	r2, r3, #12
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d1eb      	bne.n	8006b98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b25      	ldr	r3, [pc, #148]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d20c      	bcs.n	8006be8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b22      	ldr	r3, [pc, #136]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd6:	4b20      	ldr	r3, [pc, #128]	@ (8006c58 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e032      	b.n	8006c4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d008      	beq.n	8006c06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006bf4:	4b19      	ldr	r3, [pc, #100]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	68db      	ldr	r3, [r3, #12]
 8006c00:	4916      	ldr	r1, [pc, #88]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	4313      	orrs	r3, r2
 8006c04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 0308 	and.w	r3, r3, #8
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d009      	beq.n	8006c26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c12:	4b12      	ldr	r3, [pc, #72]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	691b      	ldr	r3, [r3, #16]
 8006c1e:	00db      	lsls	r3, r3, #3
 8006c20:	490e      	ldr	r1, [pc, #56]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c22:	4313      	orrs	r3, r2
 8006c24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c26:	f000 f821 	bl	8006c6c <HAL_RCC_GetSysClockFreq>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	4b0b      	ldr	r3, [pc, #44]	@ (8006c5c <HAL_RCC_ClockConfig+0x1bc>)
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	091b      	lsrs	r3, r3, #4
 8006c32:	f003 030f 	and.w	r3, r3, #15
 8006c36:	490a      	ldr	r1, [pc, #40]	@ (8006c60 <HAL_RCC_ClockConfig+0x1c0>)
 8006c38:	5ccb      	ldrb	r3, [r1, r3]
 8006c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8006c3e:	4a09      	ldr	r2, [pc, #36]	@ (8006c64 <HAL_RCC_ClockConfig+0x1c4>)
 8006c40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c42:	4b09      	ldr	r3, [pc, #36]	@ (8006c68 <HAL_RCC_ClockConfig+0x1c8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4618      	mov	r0, r3
 8006c48:	f7fd fb92 	bl	8004370 <HAL_InitTick>

  return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3710      	adds	r7, #16
 8006c52:	46bd      	mov	sp, r7
 8006c54:	bd80      	pop	{r7, pc}
 8006c56:	bf00      	nop
 8006c58:	40023c00 	.word	0x40023c00
 8006c5c:	40023800 	.word	0x40023800
 8006c60:	0800fff0 	.word	0x0800fff0
 8006c64:	20000004 	.word	0x20000004
 8006c68:	20000028 	.word	0x20000028

08006c6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006c6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c70:	b090      	sub	sp, #64	@ 0x40
 8006c72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006c74:	2300      	movs	r3, #0
 8006c76:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006c80:	2300      	movs	r3, #0
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006c84:	4b59      	ldr	r3, [pc, #356]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	f003 030c 	and.w	r3, r3, #12
 8006c8c:	2b08      	cmp	r3, #8
 8006c8e:	d00d      	beq.n	8006cac <HAL_RCC_GetSysClockFreq+0x40>
 8006c90:	2b08      	cmp	r3, #8
 8006c92:	f200 80a1 	bhi.w	8006dd8 <HAL_RCC_GetSysClockFreq+0x16c>
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d002      	beq.n	8006ca0 <HAL_RCC_GetSysClockFreq+0x34>
 8006c9a:	2b04      	cmp	r3, #4
 8006c9c:	d003      	beq.n	8006ca6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006c9e:	e09b      	b.n	8006dd8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ca0:	4b53      	ldr	r3, [pc, #332]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006ca2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ca4:	e09b      	b.n	8006dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ca6:	4b53      	ldr	r3, [pc, #332]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ca8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006caa:	e098      	b.n	8006dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006cac:	4b4f      	ldr	r3, [pc, #316]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006cb4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cb6:	4b4d      	ldr	r3, [pc, #308]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006cb8:	685b      	ldr	r3, [r3, #4]
 8006cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d028      	beq.n	8006d14 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cc2:	4b4a      	ldr	r3, [pc, #296]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	099b      	lsrs	r3, r3, #6
 8006cc8:	2200      	movs	r2, #0
 8006cca:	623b      	str	r3, [r7, #32]
 8006ccc:	627a      	str	r2, [r7, #36]	@ 0x24
 8006cce:	6a3b      	ldr	r3, [r7, #32]
 8006cd0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	4b47      	ldr	r3, [pc, #284]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006cd8:	fb03 f201 	mul.w	r2, r3, r1
 8006cdc:	2300      	movs	r3, #0
 8006cde:	fb00 f303 	mul.w	r3, r0, r3
 8006ce2:	4413      	add	r3, r2
 8006ce4:	4a43      	ldr	r2, [pc, #268]	@ (8006df4 <HAL_RCC_GetSysClockFreq+0x188>)
 8006ce6:	fba0 1202 	umull	r1, r2, r0, r2
 8006cea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cec:	460a      	mov	r2, r1
 8006cee:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006cf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cf2:	4413      	add	r3, r2
 8006cf4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006cf6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	61bb      	str	r3, [r7, #24]
 8006cfc:	61fa      	str	r2, [r7, #28]
 8006cfe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d02:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006d06:	f7f9 fac3 	bl	8000290 <__aeabi_uldivmod>
 8006d0a:	4602      	mov	r2, r0
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	4613      	mov	r3, r2
 8006d10:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d12:	e053      	b.n	8006dbc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006d14:	4b35      	ldr	r3, [pc, #212]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	099b      	lsrs	r3, r3, #6
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	613b      	str	r3, [r7, #16]
 8006d1e:	617a      	str	r2, [r7, #20]
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006d26:	f04f 0b00 	mov.w	fp, #0
 8006d2a:	4652      	mov	r2, sl
 8006d2c:	465b      	mov	r3, fp
 8006d2e:	f04f 0000 	mov.w	r0, #0
 8006d32:	f04f 0100 	mov.w	r1, #0
 8006d36:	0159      	lsls	r1, r3, #5
 8006d38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d3c:	0150      	lsls	r0, r2, #5
 8006d3e:	4602      	mov	r2, r0
 8006d40:	460b      	mov	r3, r1
 8006d42:	ebb2 080a 	subs.w	r8, r2, sl
 8006d46:	eb63 090b 	sbc.w	r9, r3, fp
 8006d4a:	f04f 0200 	mov.w	r2, #0
 8006d4e:	f04f 0300 	mov.w	r3, #0
 8006d52:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006d56:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006d5a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006d5e:	ebb2 0408 	subs.w	r4, r2, r8
 8006d62:	eb63 0509 	sbc.w	r5, r3, r9
 8006d66:	f04f 0200 	mov.w	r2, #0
 8006d6a:	f04f 0300 	mov.w	r3, #0
 8006d6e:	00eb      	lsls	r3, r5, #3
 8006d70:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006d74:	00e2      	lsls	r2, r4, #3
 8006d76:	4614      	mov	r4, r2
 8006d78:	461d      	mov	r5, r3
 8006d7a:	eb14 030a 	adds.w	r3, r4, sl
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	eb45 030b 	adc.w	r3, r5, fp
 8006d84:	607b      	str	r3, [r7, #4]
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006d92:	4629      	mov	r1, r5
 8006d94:	028b      	lsls	r3, r1, #10
 8006d96:	4621      	mov	r1, r4
 8006d98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	028a      	lsls	r2, r1, #10
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006da6:	2200      	movs	r2, #0
 8006da8:	60bb      	str	r3, [r7, #8]
 8006daa:	60fa      	str	r2, [r7, #12]
 8006dac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006db0:	f7f9 fa6e 	bl	8000290 <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4613      	mov	r3, r2
 8006dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8006dec <HAL_RCC_GetSysClockFreq+0x180>)
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	0c1b      	lsrs	r3, r3, #16
 8006dc2:	f003 0303 	and.w	r3, r3, #3
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006dcc:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006dd4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006dd6:	e002      	b.n	8006dde <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006dd8:	4b05      	ldr	r3, [pc, #20]	@ (8006df0 <HAL_RCC_GetSysClockFreq+0x184>)
 8006dda:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006ddc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006de0:	4618      	mov	r0, r3
 8006de2:	3740      	adds	r7, #64	@ 0x40
 8006de4:	46bd      	mov	sp, r7
 8006de6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006dea:	bf00      	nop
 8006dec:	40023800 	.word	0x40023800
 8006df0:	00f42400 	.word	0x00f42400
 8006df4:	017d7840 	.word	0x017d7840

08006df8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006dfc:	4b03      	ldr	r3, [pc, #12]	@ (8006e0c <HAL_RCC_GetHCLKFreq+0x14>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000004 	.word	0x20000004

08006e10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b082      	sub	sp, #8
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d101      	bne.n	8006e22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006e1e:	2301      	movs	r3, #1
 8006e20:	e07b      	b.n	8006f1a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e26:	2b00      	cmp	r3, #0
 8006e28:	d108      	bne.n	8006e3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006e32:	d009      	beq.n	8006e48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2200      	movs	r2, #0
 8006e38:	61da      	str	r2, [r3, #28]
 8006e3a:	e005      	b.n	8006e48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2200      	movs	r2, #0
 8006e46:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d106      	bne.n	8006e68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f7fa ff2e 	bl	8001cc4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2202      	movs	r2, #2
 8006e6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	681a      	ldr	r2, [r3, #0]
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006e7e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006e90:	431a      	orrs	r2, r3
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	68db      	ldr	r3, [r3, #12]
 8006e96:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006e9a:	431a      	orrs	r2, r3
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	691b      	ldr	r3, [r3, #16]
 8006ea0:	f003 0302 	and.w	r3, r3, #2
 8006ea4:	431a      	orrs	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	695b      	ldr	r3, [r3, #20]
 8006eaa:	f003 0301 	and.w	r3, r3, #1
 8006eae:	431a      	orrs	r2, r3
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	699b      	ldr	r3, [r3, #24]
 8006eb4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006eb8:	431a      	orrs	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	69db      	ldr	r3, [r3, #28]
 8006ebe:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ec2:	431a      	orrs	r2, r3
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	6a1b      	ldr	r3, [r3, #32]
 8006ec8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ecc:	ea42 0103 	orr.w	r1, r2, r3
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ed4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	430a      	orrs	r2, r1
 8006ede:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	699b      	ldr	r3, [r3, #24]
 8006ee4:	0c1b      	lsrs	r3, r3, #16
 8006ee6:	f003 0104 	and.w	r1, r3, #4
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eee:	f003 0210 	and.w	r2, r3, #16
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	430a      	orrs	r2, r1
 8006ef8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	69da      	ldr	r2, [r3, #28]
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006f08:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006f18:	2300      	movs	r3, #0
}
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bd80      	pop	{r7, pc}

08006f22 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f22:	b580      	push	{r7, lr}
 8006f24:	b088      	sub	sp, #32
 8006f26:	af00      	add	r7, sp, #0
 8006f28:	60f8      	str	r0, [r7, #12]
 8006f2a:	60b9      	str	r1, [r7, #8]
 8006f2c:	603b      	str	r3, [r7, #0]
 8006f2e:	4613      	mov	r3, r2
 8006f30:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f32:	f7fd fa61 	bl	80043f8 <HAL_GetTick>
 8006f36:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006f38:	88fb      	ldrh	r3, [r7, #6]
 8006f3a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	2b01      	cmp	r3, #1
 8006f46:	d001      	beq.n	8006f4c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006f48:	2302      	movs	r3, #2
 8006f4a:	e12a      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f4c:	68bb      	ldr	r3, [r7, #8]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d002      	beq.n	8006f58 <HAL_SPI_Transmit+0x36>
 8006f52:	88fb      	ldrh	r3, [r7, #6]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e122      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f62:	2b01      	cmp	r3, #1
 8006f64:	d101      	bne.n	8006f6a <HAL_SPI_Transmit+0x48>
 8006f66:	2302      	movs	r3, #2
 8006f68:	e11b      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2201      	movs	r2, #1
 8006f6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2203      	movs	r2, #3
 8006f76:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	68ba      	ldr	r2, [r7, #8]
 8006f84:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	88fa      	ldrh	r2, [r7, #6]
 8006f8a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	88fa      	ldrh	r2, [r7, #6]
 8006f90:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	2200      	movs	r2, #0
 8006f96:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	2200      	movs	r2, #0
 8006fae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	689b      	ldr	r3, [r3, #8]
 8006fb4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006fb8:	d10f      	bne.n	8006fda <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	681a      	ldr	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006fc8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fd8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe4:	2b40      	cmp	r3, #64	@ 0x40
 8006fe6:	d007      	beq.n	8006ff8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	681a      	ldr	r2, [r3, #0]
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ff6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	68db      	ldr	r3, [r3, #12]
 8006ffc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007000:	d152      	bne.n	80070a8 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	2b00      	cmp	r3, #0
 8007008:	d002      	beq.n	8007010 <HAL_SPI_Transmit+0xee>
 800700a:	8b7b      	ldrh	r3, [r7, #26]
 800700c:	2b01      	cmp	r3, #1
 800700e:	d145      	bne.n	800709c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007014:	881a      	ldrh	r2, [r3, #0]
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007020:	1c9a      	adds	r2, r3, #2
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800702a:	b29b      	uxth	r3, r3
 800702c:	3b01      	subs	r3, #1
 800702e:	b29a      	uxth	r2, r3
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8007034:	e032      	b.n	800709c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	689b      	ldr	r3, [r3, #8]
 800703c:	f003 0302 	and.w	r3, r3, #2
 8007040:	2b02      	cmp	r3, #2
 8007042:	d112      	bne.n	800706a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007048:	881a      	ldrh	r2, [r3, #0]
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007054:	1c9a      	adds	r2, r3, #2
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800705e:	b29b      	uxth	r3, r3
 8007060:	3b01      	subs	r3, #1
 8007062:	b29a      	uxth	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007068:	e018      	b.n	800709c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800706a:	f7fd f9c5 	bl	80043f8 <HAL_GetTick>
 800706e:	4602      	mov	r2, r0
 8007070:	69fb      	ldr	r3, [r7, #28]
 8007072:	1ad3      	subs	r3, r2, r3
 8007074:	683a      	ldr	r2, [r7, #0]
 8007076:	429a      	cmp	r2, r3
 8007078:	d803      	bhi.n	8007082 <HAL_SPI_Transmit+0x160>
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007080:	d102      	bne.n	8007088 <HAL_SPI_Transmit+0x166>
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d109      	bne.n	800709c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007098:	2303      	movs	r3, #3
 800709a:	e082      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070a0:	b29b      	uxth	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d1c7      	bne.n	8007036 <HAL_SPI_Transmit+0x114>
 80070a6:	e053      	b.n	8007150 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	685b      	ldr	r3, [r3, #4]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d002      	beq.n	80070b6 <HAL_SPI_Transmit+0x194>
 80070b0:	8b7b      	ldrh	r3, [r7, #26]
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d147      	bne.n	8007146 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	330c      	adds	r3, #12
 80070c0:	7812      	ldrb	r2, [r2, #0]
 80070c2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070c8:	1c5a      	adds	r2, r3, #1
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	3b01      	subs	r3, #1
 80070d6:	b29a      	uxth	r2, r3
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80070dc:	e033      	b.n	8007146 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	689b      	ldr	r3, [r3, #8]
 80070e4:	f003 0302 	and.w	r3, r3, #2
 80070e8:	2b02      	cmp	r3, #2
 80070ea:	d113      	bne.n	8007114 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	330c      	adds	r3, #12
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007108:	b29b      	uxth	r3, r3
 800710a:	3b01      	subs	r3, #1
 800710c:	b29a      	uxth	r2, r3
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	86da      	strh	r2, [r3, #54]	@ 0x36
 8007112:	e018      	b.n	8007146 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007114:	f7fd f970 	bl	80043f8 <HAL_GetTick>
 8007118:	4602      	mov	r2, r0
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	1ad3      	subs	r3, r2, r3
 800711e:	683a      	ldr	r2, [r7, #0]
 8007120:	429a      	cmp	r2, r3
 8007122:	d803      	bhi.n	800712c <HAL_SPI_Transmit+0x20a>
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800712a:	d102      	bne.n	8007132 <HAL_SPI_Transmit+0x210>
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d109      	bne.n	8007146 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007142:	2303      	movs	r3, #3
 8007144:	e02d      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1c6      	bne.n	80070de <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007150:	69fa      	ldr	r2, [r7, #28]
 8007152:	6839      	ldr	r1, [r7, #0]
 8007154:	68f8      	ldr	r0, [r7, #12]
 8007156:	f000 fd21 	bl	8007b9c <SPI_EndRxTxTransaction>
 800715a:	4603      	mov	r3, r0
 800715c:	2b00      	cmp	r3, #0
 800715e:	d002      	beq.n	8007166 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2220      	movs	r2, #32
 8007164:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d10a      	bne.n	8007184 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800716e:	2300      	movs	r3, #0
 8007170:	617b      	str	r3, [r7, #20]
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	68db      	ldr	r3, [r3, #12]
 8007178:	617b      	str	r3, [r7, #20]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	617b      	str	r3, [r7, #20]
 8007182:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007198:	2b00      	cmp	r3, #0
 800719a:	d001      	beq.n	80071a0 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e000      	b.n	80071a2 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80071a0:	2300      	movs	r3, #0
  }
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3720      	adds	r7, #32
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b088      	sub	sp, #32
 80071ae:	af02      	add	r7, sp, #8
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4613      	mov	r3, r2
 80071b8:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d001      	beq.n	80071ca <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 80071c6:	2302      	movs	r3, #2
 80071c8:	e104      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	685b      	ldr	r3, [r3, #4]
 80071ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071d2:	d112      	bne.n	80071fa <HAL_SPI_Receive+0x50>
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	689b      	ldr	r3, [r3, #8]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2204      	movs	r2, #4
 80071e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	4613      	mov	r3, r2
 80071ec:	68ba      	ldr	r2, [r7, #8]
 80071ee:	68b9      	ldr	r1, [r7, #8]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f8f3 	bl	80073dc <HAL_SPI_TransmitReceive>
 80071f6:	4603      	mov	r3, r0
 80071f8:	e0ec      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80071fa:	f7fd f8fd 	bl	80043f8 <HAL_GetTick>
 80071fe:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d002      	beq.n	800720c <HAL_SPI_Receive+0x62>
 8007206:	88fb      	ldrh	r3, [r7, #6]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d101      	bne.n	8007210 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800720c:	2301      	movs	r3, #1
 800720e:	e0e1      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007216:	2b01      	cmp	r3, #1
 8007218:	d101      	bne.n	800721e <HAL_SPI_Receive+0x74>
 800721a:	2302      	movs	r3, #2
 800721c:	e0da      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2201      	movs	r2, #1
 8007222:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2204      	movs	r2, #4
 800722a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	68ba      	ldr	r2, [r7, #8]
 8007238:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	88fa      	ldrh	r2, [r7, #6]
 800723e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	88fa      	ldrh	r2, [r7, #6]
 8007244:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2200      	movs	r2, #0
 8007250:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	2200      	movs	r2, #0
 8007256:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2200      	movs	r2, #0
 8007262:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800726c:	d10f      	bne.n	800728e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800727c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681a      	ldr	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800728c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007298:	2b40      	cmp	r3, #64	@ 0x40
 800729a:	d007      	beq.n	80072ac <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	681a      	ldr	r2, [r3, #0]
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80072aa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68db      	ldr	r3, [r3, #12]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d170      	bne.n	8007396 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80072b4:	e035      	b.n	8007322 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	689b      	ldr	r3, [r3, #8]
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d115      	bne.n	80072f0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f103 020c 	add.w	r2, r3, #12
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d0:	7812      	ldrb	r2, [r2, #0]
 80072d2:	b2d2      	uxtb	r2, r2
 80072d4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072da:	1c5a      	adds	r2, r3, #1
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072e4:	b29b      	uxth	r3, r3
 80072e6:	3b01      	subs	r3, #1
 80072e8:	b29a      	uxth	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80072ee:	e018      	b.n	8007322 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80072f0:	f7fd f882 	bl	80043f8 <HAL_GetTick>
 80072f4:	4602      	mov	r2, r0
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	1ad3      	subs	r3, r2, r3
 80072fa:	683a      	ldr	r2, [r7, #0]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d803      	bhi.n	8007308 <HAL_SPI_Receive+0x15e>
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007306:	d102      	bne.n	800730e <HAL_SPI_Receive+0x164>
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d109      	bne.n	8007322 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	2201      	movs	r2, #1
 8007312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800731e:	2303      	movs	r3, #3
 8007320:	e058      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007326:	b29b      	uxth	r3, r3
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1c4      	bne.n	80072b6 <HAL_SPI_Receive+0x10c>
 800732c:	e038      	b.n	80073a0 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	689b      	ldr	r3, [r3, #8]
 8007334:	f003 0301 	and.w	r3, r3, #1
 8007338:	2b01      	cmp	r3, #1
 800733a:	d113      	bne.n	8007364 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007346:	b292      	uxth	r2, r2
 8007348:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800734e:	1c9a      	adds	r2, r3, #2
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007358:	b29b      	uxth	r3, r3
 800735a:	3b01      	subs	r3, #1
 800735c:	b29a      	uxth	r2, r3
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007362:	e018      	b.n	8007396 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007364:	f7fd f848 	bl	80043f8 <HAL_GetTick>
 8007368:	4602      	mov	r2, r0
 800736a:	697b      	ldr	r3, [r7, #20]
 800736c:	1ad3      	subs	r3, r2, r3
 800736e:	683a      	ldr	r2, [r7, #0]
 8007370:	429a      	cmp	r2, r3
 8007372:	d803      	bhi.n	800737c <HAL_SPI_Receive+0x1d2>
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800737a:	d102      	bne.n	8007382 <HAL_SPI_Receive+0x1d8>
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	2b00      	cmp	r3, #0
 8007380:	d109      	bne.n	8007396 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2200      	movs	r2, #0
 800738e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007392:	2303      	movs	r3, #3
 8007394:	e01e      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800739a:	b29b      	uxth	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	d1c6      	bne.n	800732e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	68f8      	ldr	r0, [r7, #12]
 80073a6:	f000 fb93 	bl	8007ad0 <SPI_EndRxTransaction>
 80073aa:	4603      	mov	r3, r0
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d002      	beq.n	80073b6 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	2220      	movs	r2, #32
 80073b4:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2201      	movs	r2, #1
 80073ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d001      	beq.n	80073d2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e000      	b.n	80073d4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 80073d2:	2300      	movs	r3, #0
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3718      	adds	r7, #24
 80073d8:	46bd      	mov	sp, r7
 80073da:	bd80      	pop	{r7, pc}

080073dc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80073dc:	b580      	push	{r7, lr}
 80073de:	b08a      	sub	sp, #40	@ 0x28
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
 80073e8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80073ea:	2301      	movs	r3, #1
 80073ec:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80073ee:	f7fd f803 	bl	80043f8 <HAL_GetTick>
 80073f2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80073fa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	685b      	ldr	r3, [r3, #4]
 8007400:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007402:	887b      	ldrh	r3, [r7, #2]
 8007404:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007406:	7ffb      	ldrb	r3, [r7, #31]
 8007408:	2b01      	cmp	r3, #1
 800740a:	d00c      	beq.n	8007426 <HAL_SPI_TransmitReceive+0x4a>
 800740c:	69bb      	ldr	r3, [r7, #24]
 800740e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007412:	d106      	bne.n	8007422 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d102      	bne.n	8007422 <HAL_SPI_TransmitReceive+0x46>
 800741c:	7ffb      	ldrb	r3, [r7, #31]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d001      	beq.n	8007426 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007422:	2302      	movs	r3, #2
 8007424:	e17f      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007426:	68bb      	ldr	r3, [r7, #8]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x5c>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	d002      	beq.n	8007438 <HAL_SPI_TransmitReceive+0x5c>
 8007432:	887b      	ldrh	r3, [r7, #2]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d101      	bne.n	800743c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e174      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007442:	2b01      	cmp	r3, #1
 8007444:	d101      	bne.n	800744a <HAL_SPI_TransmitReceive+0x6e>
 8007446:	2302      	movs	r3, #2
 8007448:	e16d      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	2201      	movs	r2, #1
 800744e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007458:	b2db      	uxtb	r3, r3
 800745a:	2b04      	cmp	r3, #4
 800745c:	d003      	beq.n	8007466 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2205      	movs	r2, #5
 8007462:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	887a      	ldrh	r2, [r7, #2]
 8007476:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	887a      	ldrh	r2, [r7, #2]
 800747c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	68ba      	ldr	r2, [r7, #8]
 8007482:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	887a      	ldrh	r2, [r7, #2]
 8007488:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	887a      	ldrh	r2, [r7, #2]
 800748e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	2200      	movs	r2, #0
 800749a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074a6:	2b40      	cmp	r3, #64	@ 0x40
 80074a8:	d007      	beq.n	80074ba <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80074b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80074c2:	d17e      	bne.n	80075c2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <HAL_SPI_TransmitReceive+0xf6>
 80074cc:	8afb      	ldrh	r3, [r7, #22]
 80074ce:	2b01      	cmp	r3, #1
 80074d0:	d16c      	bne.n	80075ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074d6:	881a      	ldrh	r2, [r3, #0]
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074e2:	1c9a      	adds	r2, r3, #2
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80074ec:	b29b      	uxth	r3, r3
 80074ee:	3b01      	subs	r3, #1
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80074f6:	e059      	b.n	80075ac <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	689b      	ldr	r3, [r3, #8]
 80074fe:	f003 0302 	and.w	r3, r3, #2
 8007502:	2b02      	cmp	r3, #2
 8007504:	d11b      	bne.n	800753e <HAL_SPI_TransmitReceive+0x162>
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800750a:	b29b      	uxth	r3, r3
 800750c:	2b00      	cmp	r3, #0
 800750e:	d016      	beq.n	800753e <HAL_SPI_TransmitReceive+0x162>
 8007510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007512:	2b01      	cmp	r3, #1
 8007514:	d113      	bne.n	800753e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800751a:	881a      	ldrh	r2, [r3, #0]
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007526:	1c9a      	adds	r2, r3, #2
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800753e:	68fb      	ldr	r3, [r7, #12]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	f003 0301 	and.w	r3, r3, #1
 8007548:	2b01      	cmp	r3, #1
 800754a:	d119      	bne.n	8007580 <HAL_SPI_TransmitReceive+0x1a4>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007550:	b29b      	uxth	r3, r3
 8007552:	2b00      	cmp	r3, #0
 8007554:	d014      	beq.n	8007580 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68da      	ldr	r2, [r3, #12]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007560:	b292      	uxth	r2, r2
 8007562:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007568:	1c9a      	adds	r2, r3, #2
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007572:	b29b      	uxth	r3, r3
 8007574:	3b01      	subs	r3, #1
 8007576:	b29a      	uxth	r2, r3
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800757c:	2301      	movs	r3, #1
 800757e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007580:	f7fc ff3a 	bl	80043f8 <HAL_GetTick>
 8007584:	4602      	mov	r2, r0
 8007586:	6a3b      	ldr	r3, [r7, #32]
 8007588:	1ad3      	subs	r3, r2, r3
 800758a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800758c:	429a      	cmp	r2, r3
 800758e:	d80d      	bhi.n	80075ac <HAL_SPI_TransmitReceive+0x1d0>
 8007590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007596:	d009      	beq.n	80075ac <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2201      	movs	r2, #1
 800759c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80075a8:	2303      	movs	r3, #3
 80075aa:	e0bc      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075b0:	b29b      	uxth	r3, r3
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d1a0      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x11c>
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80075ba:	b29b      	uxth	r3, r3
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d19b      	bne.n	80074f8 <HAL_SPI_TransmitReceive+0x11c>
 80075c0:	e082      	b.n	80076c8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d002      	beq.n	80075d0 <HAL_SPI_TransmitReceive+0x1f4>
 80075ca:	8afb      	ldrh	r3, [r7, #22]
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	d171      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	330c      	adds	r3, #12
 80075da:	7812      	ldrb	r2, [r2, #0]
 80075dc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80075e2:	1c5a      	adds	r2, r3, #1
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	3b01      	subs	r3, #1
 80075f0:	b29a      	uxth	r2, r3
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80075f6:	e05d      	b.n	80076b4 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	689b      	ldr	r3, [r3, #8]
 80075fe:	f003 0302 	and.w	r3, r3, #2
 8007602:	2b02      	cmp	r3, #2
 8007604:	d11c      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x264>
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d017      	beq.n	8007640 <HAL_SPI_TransmitReceive+0x264>
 8007610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007612:	2b01      	cmp	r3, #1
 8007614:	d114      	bne.n	8007640 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	330c      	adds	r3, #12
 8007620:	7812      	ldrb	r2, [r2, #0]
 8007622:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007628:	1c5a      	adds	r2, r3, #1
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007632:	b29b      	uxth	r3, r3
 8007634:	3b01      	subs	r3, #1
 8007636:	b29a      	uxth	r2, r3
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800763c:	2300      	movs	r3, #0
 800763e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	689b      	ldr	r3, [r3, #8]
 8007646:	f003 0301 	and.w	r3, r3, #1
 800764a:	2b01      	cmp	r3, #1
 800764c:	d119      	bne.n	8007682 <HAL_SPI_TransmitReceive+0x2a6>
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007652:	b29b      	uxth	r3, r3
 8007654:	2b00      	cmp	r3, #0
 8007656:	d014      	beq.n	8007682 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	68da      	ldr	r2, [r3, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007662:	b2d2      	uxtb	r2, r2
 8007664:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800766a:	1c5a      	adds	r2, r3, #1
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007674:	b29b      	uxth	r3, r3
 8007676:	3b01      	subs	r3, #1
 8007678:	b29a      	uxth	r2, r3
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800767e:	2301      	movs	r3, #1
 8007680:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007682:	f7fc feb9 	bl	80043f8 <HAL_GetTick>
 8007686:	4602      	mov	r2, r0
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	1ad3      	subs	r3, r2, r3
 800768c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800768e:	429a      	cmp	r2, r3
 8007690:	d803      	bhi.n	800769a <HAL_SPI_TransmitReceive+0x2be>
 8007692:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007698:	d102      	bne.n	80076a0 <HAL_SPI_TransmitReceive+0x2c4>
 800769a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800769c:	2b00      	cmp	r3, #0
 800769e:	d109      	bne.n	80076b4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	2201      	movs	r2, #1
 80076a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2200      	movs	r2, #0
 80076ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80076b0:	2303      	movs	r3, #3
 80076b2:	e038      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d19c      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x21c>
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d197      	bne.n	80075f8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076c8:	6a3a      	ldr	r2, [r7, #32]
 80076ca:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fa65 	bl	8007b9c <SPI_EndRxTxTransaction>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d008      	beq.n	80076ea <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2220      	movs	r2, #32
 80076dc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80076e6:	2301      	movs	r3, #1
 80076e8:	e01d      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	689b      	ldr	r3, [r3, #8]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d10a      	bne.n	8007708 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076f2:	2300      	movs	r3, #0
 80076f4:	613b      	str	r3, [r7, #16]
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	613b      	str	r3, [r7, #16]
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	613b      	str	r3, [r7, #16]
 8007706:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2201      	movs	r2, #1
 800770c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	2200      	movs	r2, #0
 8007714:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800771c:	2b00      	cmp	r3, #0
 800771e:	d001      	beq.n	8007724 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007724:	2300      	movs	r3, #0
  }
}
 8007726:	4618      	mov	r0, r3
 8007728:	3728      	adds	r7, #40	@ 0x28
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}
	...

08007730 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b084      	sub	sp, #16
 8007734:	af00      	add	r7, sp, #0
 8007736:	60f8      	str	r0, [r7, #12]
 8007738:	60b9      	str	r1, [r7, #8]
 800773a:	4613      	mov	r3, r2
 800773c:	80fb      	strh	r3, [r7, #6]
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  if (hspi->State != HAL_SPI_STATE_READY)
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b01      	cmp	r3, #1
 8007748:	d001      	beq.n	800774e <HAL_SPI_Transmit_DMA+0x1e>
  {
    return HAL_BUSY;
 800774a:	2302      	movs	r3, #2
 800774c:	e097      	b.n	800787e <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <HAL_SPI_Transmit_DMA+0x2a>
 8007754:	88fb      	ldrh	r3, [r7, #6]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d101      	bne.n	800775e <HAL_SPI_Transmit_DMA+0x2e>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e08f      	b.n	800787e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007764:	2b01      	cmp	r3, #1
 8007766:	d101      	bne.n	800776c <HAL_SPI_Transmit_DMA+0x3c>
 8007768:	2302      	movs	r3, #2
 800776a:	e088      	b.n	800787e <HAL_SPI_Transmit_DMA+0x14e>
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	2201      	movs	r2, #1
 8007770:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2203      	movs	r2, #3
 8007778:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	68ba      	ldr	r2, [r7, #8]
 8007786:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	88fa      	ldrh	r2, [r7, #6]
 800778c:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	88fa      	ldrh	r2, [r7, #6]
 8007792:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxISR       = NULL;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	2200      	movs	r2, #0
 800779e:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	2200      	movs	r2, #0
 80077a4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2200      	movs	r2, #0
 80077aa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	689b      	ldr	r3, [r3, #8]
 80077b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077ba:	d10f      	bne.n	80077dc <HAL_SPI_Transmit_DMA+0xac>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	681a      	ldr	r2, [r3, #0]
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80077ca:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681a      	ldr	r2, [r3, #0]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80077da:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e0:	4a29      	ldr	r2, [pc, #164]	@ (8007888 <HAL_SPI_Transmit_DMA+0x158>)
 80077e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077e8:	4a28      	ldr	r2, [pc, #160]	@ (800788c <HAL_SPI_Transmit_DMA+0x15c>)
 80077ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f0:	4a27      	ldr	r2, [pc, #156]	@ (8007890 <HAL_SPI_Transmit_DMA+0x160>)
 80077f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80077f8:	2200      	movs	r2, #0
 80077fa:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007804:	4619      	mov	r1, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	330c      	adds	r3, #12
 800780c:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007812:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8007814:	f7fc ffe0 	bl	80047d8 <HAL_DMA_Start_IT>
 8007818:	4603      	mov	r3, r0
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <HAL_SPI_Transmit_DMA+0x106>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007822:	f043 0210 	orr.w	r2, r3, #16
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process Unlocked */
    __HAL_UNLOCK(hspi);
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2200      	movs	r2, #0
 800782e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007832:	2301      	movs	r3, #1
 8007834:	e023      	b.n	800787e <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007840:	2b40      	cmp	r3, #64	@ 0x40
 8007842:	d007      	beq.n	8007854 <HAL_SPI_Transmit_DMA+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007852:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f042 0220 	orr.w	r2, r2, #32
 800786a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	685a      	ldr	r2, [r3, #4]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f042 0202 	orr.w	r2, r2, #2
 800787a:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800787c:	2300      	movs	r3, #0
}
 800787e:	4618      	mov	r0, r3
 8007880:	3710      	adds	r7, #16
 8007882:	46bd      	mov	sp, r7
 8007884:	bd80      	pop	{r7, pc}
 8007886:	bf00      	nop
 8007888:	08007965 	.word	0x08007965
 800788c:	080078bd 	.word	0x080078bd
 8007890:	08007981 	.word	0x08007981

08007894 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8007894:	b480      	push	{r7}
 8007896:	b083      	sub	sp, #12
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800789c:	bf00      	nop
 800789e:	370c      	adds	r7, #12
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80078b0:	bf00      	nop
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80078bc:	b580      	push	{r7, lr}
 80078be:	b086      	sub	sp, #24
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c8:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80078ca:	f7fc fd95 	bl	80043f8 <HAL_GetTick>
 80078ce:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80078da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80078de:	d03b      	beq.n	8007958 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	697b      	ldr	r3, [r7, #20]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	f022 0220 	bic.w	r2, r2, #32
 80078ee:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	685a      	ldr	r2, [r3, #4]
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f022 0202 	bic.w	r2, r2, #2
 80078fe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007900:	693a      	ldr	r2, [r7, #16]
 8007902:	2164      	movs	r1, #100	@ 0x64
 8007904:	6978      	ldr	r0, [r7, #20]
 8007906:	f000 f949 	bl	8007b9c <SPI_EndRxTxTransaction>
 800790a:	4603      	mov	r3, r0
 800790c:	2b00      	cmp	r3, #0
 800790e:	d005      	beq.n	800791c <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007914:	f043 0220 	orr.w	r2, r3, #32
 8007918:	697b      	ldr	r3, [r7, #20]
 800791a:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800791c:	697b      	ldr	r3, [r7, #20]
 800791e:	689b      	ldr	r3, [r3, #8]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d10a      	bne.n	800793a <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007924:	2300      	movs	r3, #0
 8007926:	60fb      	str	r3, [r7, #12]
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	68db      	ldr	r3, [r3, #12]
 800792e:	60fb      	str	r3, [r7, #12]
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	60fb      	str	r3, [r7, #12]
 8007938:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800793a:	697b      	ldr	r3, [r7, #20]
 800793c:	2200      	movs	r2, #0
 800793e:	86da      	strh	r2, [r3, #54]	@ 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8007940:	697b      	ldr	r3, [r7, #20]
 8007942:	2201      	movs	r2, #1
 8007944:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800794c:	2b00      	cmp	r3, #0
 800794e:	d003      	beq.n	8007958 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8007950:	6978      	ldr	r0, [r7, #20]
 8007952:	f7ff ffa9 	bl	80078a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8007956:	e002      	b.n	800795e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8007958:	6978      	ldr	r0, [r7, #20]
 800795a:	f7fa fcd5 	bl	8002308 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800795e:	3718      	adds	r7, #24
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b084      	sub	sp, #16
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007970:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff ff8e 	bl	8007894 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007978:	bf00      	nop
 800797a:	3710      	adds	r7, #16
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b084      	sub	sp, #16
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800798c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	685a      	ldr	r2, [r3, #4]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	f022 0203 	bic.w	r2, r2, #3
 800799c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80079a2:	f043 0210 	orr.w	r2, r3, #16
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	2201      	movs	r2, #1
 80079ae:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80079b2:	68f8      	ldr	r0, [r7, #12]
 80079b4:	f7ff ff78 	bl	80078a8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80079b8:	bf00      	nop
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b088      	sub	sp, #32
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	60f8      	str	r0, [r7, #12]
 80079c8:	60b9      	str	r1, [r7, #8]
 80079ca:	603b      	str	r3, [r7, #0]
 80079cc:	4613      	mov	r3, r2
 80079ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80079d0:	f7fc fd12 	bl	80043f8 <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079d8:	1a9b      	subs	r3, r3, r2
 80079da:	683a      	ldr	r2, [r7, #0]
 80079dc:	4413      	add	r3, r2
 80079de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80079e0:	f7fc fd0a 	bl	80043f8 <HAL_GetTick>
 80079e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80079e6:	4b39      	ldr	r3, [pc, #228]	@ (8007acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	015b      	lsls	r3, r3, #5
 80079ec:	0d1b      	lsrs	r3, r3, #20
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	fb02 f303 	mul.w	r3, r2, r3
 80079f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80079f6:	e054      	b.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80079f8:	683b      	ldr	r3, [r7, #0]
 80079fa:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079fe:	d050      	beq.n	8007aa2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007a00:	f7fc fcfa 	bl	80043f8 <HAL_GetTick>
 8007a04:	4602      	mov	r2, r0
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	69fa      	ldr	r2, [r7, #28]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d902      	bls.n	8007a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d13d      	bne.n	8007a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685a      	ldr	r2, [r3, #4]
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a2e:	d111      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a38:	d004      	beq.n	8007a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	689b      	ldr	r3, [r3, #8]
 8007a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007a42:	d107      	bne.n	8007a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	681a      	ldr	r2, [r3, #0]
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007a5c:	d10f      	bne.n	8007a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	681a      	ldr	r2, [r3, #0]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	681a      	ldr	r2, [r3, #0]
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2200      	movs	r2, #0
 8007a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e017      	b.n	8007ac2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d101      	bne.n	8007a9c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	3b01      	subs	r3, #1
 8007aa0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	689a      	ldr	r2, [r3, #8]
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	4013      	ands	r3, r2
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	429a      	cmp	r2, r3
 8007ab0:	bf0c      	ite	eq
 8007ab2:	2301      	moveq	r3, #1
 8007ab4:	2300      	movne	r3, #0
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	461a      	mov	r2, r3
 8007aba:	79fb      	ldrb	r3, [r7, #7]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d19b      	bne.n	80079f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
}
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	3720      	adds	r7, #32
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	bd80      	pop	{r7, pc}
 8007aca:	bf00      	nop
 8007acc:	20000004 	.word	0x20000004

08007ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b086      	sub	sp, #24
 8007ad4:	af02      	add	r7, sp, #8
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ae4:	d111      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007aee:	d004      	beq.n	8007afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007af8:	d107      	bne.n	8007b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681a      	ldr	r2, [r3, #0]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007b12:	d12a      	bne.n	8007b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	689b      	ldr	r3, [r3, #8]
 8007b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b1c:	d012      	beq.n	8007b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	9300      	str	r3, [sp, #0]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	2200      	movs	r2, #0
 8007b26:	2180      	movs	r1, #128	@ 0x80
 8007b28:	68f8      	ldr	r0, [r7, #12]
 8007b2a:	f7ff ff49 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b2e:	4603      	mov	r3, r0
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d02d      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b38:	f043 0220 	orr.w	r2, r3, #32
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007b40:	2303      	movs	r3, #3
 8007b42:	e026      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	9300      	str	r3, [sp, #0]
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	2101      	movs	r1, #1
 8007b4e:	68f8      	ldr	r0, [r7, #12]
 8007b50:	f7ff ff36 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b54:	4603      	mov	r3, r0
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d01a      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b5e:	f043 0220 	orr.w	r2, r3, #32
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007b66:	2303      	movs	r3, #3
 8007b68:	e013      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	9300      	str	r3, [sp, #0]
 8007b6e:	68bb      	ldr	r3, [r7, #8]
 8007b70:	2200      	movs	r2, #0
 8007b72:	2101      	movs	r1, #1
 8007b74:	68f8      	ldr	r0, [r7, #12]
 8007b76:	f7ff ff23 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d007      	beq.n	8007b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007b84:	f043 0220 	orr.w	r2, r3, #32
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007b8c:	2303      	movs	r3, #3
 8007b8e:	e000      	b.n	8007b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007b90:	2300      	movs	r3, #0
}
 8007b92:	4618      	mov	r0, r3
 8007b94:	3710      	adds	r7, #16
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bd80      	pop	{r7, pc}
	...

08007b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007b9c:	b580      	push	{r7, lr}
 8007b9e:	b088      	sub	sp, #32
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	9300      	str	r3, [sp, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	2201      	movs	r2, #1
 8007bb0:	2102      	movs	r1, #2
 8007bb2:	68f8      	ldr	r0, [r7, #12]
 8007bb4:	f7ff ff04 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d007      	beq.n	8007bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007bc2:	f043 0220 	orr.w	r2, r3, #32
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007bca:	2303      	movs	r3, #3
 8007bcc:	e032      	b.n	8007c34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007bce:	4b1b      	ldr	r3, [pc, #108]	@ (8007c3c <SPI_EndRxTxTransaction+0xa0>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8007c40 <SPI_EndRxTxTransaction+0xa4>)
 8007bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8007bd8:	0d5b      	lsrs	r3, r3, #21
 8007bda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
 8007be2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	685b      	ldr	r3, [r3, #4]
 8007be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007bec:	d112      	bne.n	8007c14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	9300      	str	r3, [sp, #0]
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	2180      	movs	r1, #128	@ 0x80
 8007bf8:	68f8      	ldr	r0, [r7, #12]
 8007bfa:	f7ff fee1 	bl	80079c0 <SPI_WaitFlagStateUntilTimeout>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d016      	beq.n	8007c32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007c08:	f043 0220 	orr.w	r2, r3, #32
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007c10:	2303      	movs	r3, #3
 8007c12:	e00f      	b.n	8007c34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007c14:	697b      	ldr	r3, [r7, #20]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d00a      	beq.n	8007c30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	3b01      	subs	r3, #1
 8007c1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	689b      	ldr	r3, [r3, #8]
 8007c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007c2a:	2b80      	cmp	r3, #128	@ 0x80
 8007c2c:	d0f2      	beq.n	8007c14 <SPI_EndRxTxTransaction+0x78>
 8007c2e:	e000      	b.n	8007c32 <SPI_EndRxTxTransaction+0x96>
        break;
 8007c30:	bf00      	nop
  }

  return HAL_OK;
 8007c32:	2300      	movs	r3, #0
}
 8007c34:	4618      	mov	r0, r3
 8007c36:	3718      	adds	r7, #24
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	bd80      	pop	{r7, pc}
 8007c3c:	20000004 	.word	0x20000004
 8007c40:	165e9f81 	.word	0x165e9f81

08007c44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b082      	sub	sp, #8
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d101      	bne.n	8007c56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007c52:	2301      	movs	r3, #1
 8007c54:	e041      	b.n	8007cda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007c5c:	b2db      	uxtb	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d106      	bne.n	8007c70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2200      	movs	r2, #0
 8007c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007c6a:	6878      	ldr	r0, [r7, #4]
 8007c6c:	f7fa fa84 	bl	8002178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2202      	movs	r2, #2
 8007c74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	4619      	mov	r1, r3
 8007c82:	4610      	mov	r0, r2
 8007c84:	f000 fd6a 	bl	800875c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2201      	movs	r2, #1
 8007c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	2201      	movs	r2, #1
 8007c9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	2201      	movs	r2, #1
 8007ca4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2201      	movs	r2, #1
 8007cac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2201      	movs	r2, #1
 8007cb4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2201      	movs	r2, #1
 8007cbc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2201      	movs	r2, #1
 8007cc4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2201      	movs	r2, #1
 8007ccc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2201      	movs	r2, #1
 8007cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007cd8:	2300      	movs	r3, #0
}
 8007cda:	4618      	mov	r0, r3
 8007cdc:	3708      	adds	r7, #8
 8007cde:	46bd      	mov	sp, r7
 8007ce0:	bd80      	pop	{r7, pc}

08007ce2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007ce2:	b580      	push	{r7, lr}
 8007ce4:	b082      	sub	sp, #8
 8007ce6:	af00      	add	r7, sp, #0
 8007ce8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d101      	bne.n	8007cf4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007cf0:	2301      	movs	r3, #1
 8007cf2:	e041      	b.n	8007d78 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007cfa:	b2db      	uxtb	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d106      	bne.n	8007d0e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	2200      	movs	r2, #0
 8007d04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007d08:	6878      	ldr	r0, [r7, #4]
 8007d0a:	f000 f839 	bl	8007d80 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2202      	movs	r2, #2
 8007d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681a      	ldr	r2, [r3, #0]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	3304      	adds	r3, #4
 8007d1e:	4619      	mov	r1, r3
 8007d20:	4610      	mov	r0, r2
 8007d22:	f000 fd1b 	bl	800875c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2201      	movs	r2, #1
 8007d32:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2201      	movs	r2, #1
 8007d42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	2201      	movs	r2, #1
 8007d4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	2201      	movs	r2, #1
 8007d52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2201      	movs	r2, #1
 8007d62:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2201      	movs	r2, #1
 8007d72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3708      	adds	r7, #8
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_TIM_PWM_Start_DMA>:
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, const uint32_t *pData,
                                        uint16_t Length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	607a      	str	r2, [r7, #4]
 8007da0:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 8007da2:	2300      	movs	r3, #0
 8007da4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d109      	bne.n	8007dc0 <HAL_TIM_PWM_Start_DMA+0x2c>
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007db2:	b2db      	uxtb	r3, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	bf0c      	ite	eq
 8007db8:	2301      	moveq	r3, #1
 8007dba:	2300      	movne	r3, #0
 8007dbc:	b2db      	uxtb	r3, r3
 8007dbe:	e022      	b.n	8007e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	2b04      	cmp	r3, #4
 8007dc4:	d109      	bne.n	8007dda <HAL_TIM_PWM_Start_DMA+0x46>
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007dcc:	b2db      	uxtb	r3, r3
 8007dce:	2b02      	cmp	r3, #2
 8007dd0:	bf0c      	ite	eq
 8007dd2:	2301      	moveq	r3, #1
 8007dd4:	2300      	movne	r3, #0
 8007dd6:	b2db      	uxtb	r3, r3
 8007dd8:	e015      	b.n	8007e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8007dda:	68bb      	ldr	r3, [r7, #8]
 8007ddc:	2b08      	cmp	r3, #8
 8007dde:	d109      	bne.n	8007df4 <HAL_TIM_PWM_Start_DMA+0x60>
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007de6:	b2db      	uxtb	r3, r3
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	bf0c      	ite	eq
 8007dec:	2301      	moveq	r3, #1
 8007dee:	2300      	movne	r3, #0
 8007df0:	b2db      	uxtb	r3, r3
 8007df2:	e008      	b.n	8007e06 <HAL_TIM_PWM_Start_DMA+0x72>
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007dfa:	b2db      	uxtb	r3, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	bf0c      	ite	eq
 8007e00:	2301      	moveq	r3, #1
 8007e02:	2300      	movne	r3, #0
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d001      	beq.n	8007e0e <HAL_TIM_PWM_Start_DMA+0x7a>
  {
    return HAL_BUSY;
 8007e0a:	2302      	movs	r3, #2
 8007e0c:	e15d      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 8007e0e:	68bb      	ldr	r3, [r7, #8]
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d109      	bne.n	8007e28 <HAL_TIM_PWM_Start_DMA+0x94>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007e1a:	b2db      	uxtb	r3, r3
 8007e1c:	2b01      	cmp	r3, #1
 8007e1e:	bf0c      	ite	eq
 8007e20:	2301      	moveq	r3, #1
 8007e22:	2300      	movne	r3, #0
 8007e24:	b2db      	uxtb	r3, r3
 8007e26:	e022      	b.n	8007e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	2b04      	cmp	r3, #4
 8007e2c:	d109      	bne.n	8007e42 <HAL_TIM_PWM_Start_DMA+0xae>
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007e34:	b2db      	uxtb	r3, r3
 8007e36:	2b01      	cmp	r3, #1
 8007e38:	bf0c      	ite	eq
 8007e3a:	2301      	moveq	r3, #1
 8007e3c:	2300      	movne	r3, #0
 8007e3e:	b2db      	uxtb	r3, r3
 8007e40:	e015      	b.n	8007e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	2b08      	cmp	r3, #8
 8007e46:	d109      	bne.n	8007e5c <HAL_TIM_PWM_Start_DMA+0xc8>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007e4e:	b2db      	uxtb	r3, r3
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	bf0c      	ite	eq
 8007e54:	2301      	moveq	r3, #1
 8007e56:	2300      	movne	r3, #0
 8007e58:	b2db      	uxtb	r3, r3
 8007e5a:	e008      	b.n	8007e6e <HAL_TIM_PWM_Start_DMA+0xda>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	2b01      	cmp	r3, #1
 8007e66:	bf0c      	ite	eq
 8007e68:	2301      	moveq	r3, #1
 8007e6a:	2300      	movne	r3, #0
 8007e6c:	b2db      	uxtb	r3, r3
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d024      	beq.n	8007ebc <HAL_TIM_PWM_Start_DMA+0x128>
  {
    if ((pData == NULL) || (Length == 0U))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d002      	beq.n	8007e7e <HAL_TIM_PWM_Start_DMA+0xea>
 8007e78:	887b      	ldrh	r3, [r7, #2]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d101      	bne.n	8007e82 <HAL_TIM_PWM_Start_DMA+0xee>
    {
      return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e123      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d104      	bne.n	8007e92 <HAL_TIM_PWM_Start_DMA+0xfe>
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	2202      	movs	r2, #2
 8007e8c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007e90:	e016      	b.n	8007ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	d104      	bne.n	8007ea2 <HAL_TIM_PWM_Start_DMA+0x10e>
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	2202      	movs	r2, #2
 8007e9c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007ea0:	e00e      	b.n	8007ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007ea2:	68bb      	ldr	r3, [r7, #8]
 8007ea4:	2b08      	cmp	r3, #8
 8007ea6:	d104      	bne.n	8007eb2 <HAL_TIM_PWM_Start_DMA+0x11e>
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	2202      	movs	r2, #2
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007eb0:	e006      	b.n	8007ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	2202      	movs	r2, #2
 8007eb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007eba:	e001      	b.n	8007ec0 <HAL_TIM_PWM_Start_DMA+0x12c>
    }
  }
  else
  {
    return HAL_ERROR;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	e104      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
  }

  switch (Channel)
 8007ec0:	68bb      	ldr	r3, [r7, #8]
 8007ec2:	2b0c      	cmp	r3, #12
 8007ec4:	f200 80ae 	bhi.w	8008024 <HAL_TIM_PWM_Start_DMA+0x290>
 8007ec8:	a201      	add	r2, pc, #4	@ (adr r2, 8007ed0 <HAL_TIM_PWM_Start_DMA+0x13c>)
 8007eca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ece:	bf00      	nop
 8007ed0:	08007f05 	.word	0x08007f05
 8007ed4:	08008025 	.word	0x08008025
 8007ed8:	08008025 	.word	0x08008025
 8007edc:	08008025 	.word	0x08008025
 8007ee0:	08007f4d 	.word	0x08007f4d
 8007ee4:	08008025 	.word	0x08008025
 8007ee8:	08008025 	.word	0x08008025
 8007eec:	08008025 	.word	0x08008025
 8007ef0:	08007f95 	.word	0x08007f95
 8007ef4:	08008025 	.word	0x08008025
 8007ef8:	08008025 	.word	0x08008025
 8007efc:	08008025 	.word	0x08008025
 8007f00:	08007fdd 	.word	0x08007fdd
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f08:	4a72      	ldr	r2, [pc, #456]	@ (80080d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f0a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f10:	4a71      	ldr	r2, [pc, #452]	@ (80080d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8007f14:	68fb      	ldr	r3, [r7, #12]
 8007f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f18:	4a70      	ldr	r2, [pc, #448]	@ (80080dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8007f1a:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007f20:	6879      	ldr	r1, [r7, #4]
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	3334      	adds	r3, #52	@ 0x34
 8007f28:	461a      	mov	r2, r3
 8007f2a:	887b      	ldrh	r3, [r7, #2]
 8007f2c:	f7fc fc54 	bl	80047d8 <HAL_DMA_Start_IT>
 8007f30:	4603      	mov	r3, r0
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <HAL_TIM_PWM_Start_DMA+0x1a6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e0c7      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68da      	ldr	r2, [r3, #12]
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007f48:	60da      	str	r2, [r3, #12]
      break;
 8007f4a:	e06e      	b.n	800802a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f50:	4a60      	ldr	r2, [pc, #384]	@ (80080d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f52:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f58:	4a5f      	ldr	r2, [pc, #380]	@ (80080d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007f5a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f60:	4a5e      	ldr	r2, [pc, #376]	@ (80080dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8007f62:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8007f68:	6879      	ldr	r1, [r7, #4]
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	3338      	adds	r3, #56	@ 0x38
 8007f70:	461a      	mov	r2, r3
 8007f72:	887b      	ldrh	r3, [r7, #2]
 8007f74:	f7fc fc30 	bl	80047d8 <HAL_DMA_Start_IT>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d001      	beq.n	8007f82 <HAL_TIM_PWM_Start_DMA+0x1ee>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e0a3      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	68da      	ldr	r2, [r3, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8007f90:	60da      	str	r2, [r3, #12]
      break;
 8007f92:	e04a      	b.n	800802a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f98:	4a4e      	ldr	r2, [pc, #312]	@ (80080d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007f9a:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa0:	4a4d      	ldr	r2, [pc, #308]	@ (80080d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fa2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fa8:	4a4c      	ldr	r2, [pc, #304]	@ (80080dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8007faa:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	6ad8      	ldr	r0, [r3, #44]	@ 0x2c
 8007fb0:	6879      	ldr	r1, [r7, #4]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	333c      	adds	r3, #60	@ 0x3c
 8007fb8:	461a      	mov	r2, r3
 8007fba:	887b      	ldrh	r3, [r7, #2]
 8007fbc:	f7fc fc0c 	bl	80047d8 <HAL_DMA_Start_IT>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <HAL_TIM_PWM_Start_DMA+0x236>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	e07f      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	68da      	ldr	r2, [r3, #12]
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007fd8:	60da      	str	r2, [r3, #12]
      break;
 8007fda:	e026      	b.n	800802a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe0:	4a3c      	ldr	r2, [pc, #240]	@ (80080d4 <HAL_TIM_PWM_Start_DMA+0x340>)
 8007fe2:	63da      	str	r2, [r3, #60]	@ 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fe8:	4a3b      	ldr	r2, [pc, #236]	@ (80080d8 <HAL_TIM_PWM_Start_DMA+0x344>)
 8007fea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ff0:	4a3a      	ldr	r2, [pc, #232]	@ (80080dc <HAL_TIM_PWM_Start_DMA+0x348>)
 8007ff2:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007ff8:	6879      	ldr	r1, [r7, #4]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3340      	adds	r3, #64	@ 0x40
 8008000:	461a      	mov	r2, r3
 8008002:	887b      	ldrh	r3, [r7, #2]
 8008004:	f7fc fbe8 	bl	80047d8 <HAL_DMA_Start_IT>
 8008008:	4603      	mov	r3, r0
 800800a:	2b00      	cmp	r3, #0
 800800c:	d001      	beq.n	8008012 <HAL_TIM_PWM_Start_DMA+0x27e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800800e:	2301      	movs	r3, #1
 8008010:	e05b      	b.n	80080ca <HAL_TIM_PWM_Start_DMA+0x336>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	68da      	ldr	r2, [r3, #12]
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8008020:	60da      	str	r2, [r3, #12]
      break;
 8008022:	e002      	b.n	800802a <HAL_TIM_PWM_Start_DMA+0x296>
    }

    default:
      status = HAL_ERROR;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
      break;
 8008028:	bf00      	nop
  }

  if (status == HAL_OK)
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b00      	cmp	r3, #0
 800802e:	d14b      	bne.n	80080c8 <HAL_TIM_PWM_Start_DMA+0x334>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	2201      	movs	r2, #1
 8008036:	68b9      	ldr	r1, [r7, #8]
 8008038:	4618      	mov	r0, r3
 800803a:	f000 fe41 	bl	8008cc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	4a27      	ldr	r2, [pc, #156]	@ (80080e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d107      	bne.n	8008058 <HAL_TIM_PWM_Start_DMA+0x2c4>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	681b      	ldr	r3, [r3, #0]
 8008052:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008056:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	4a20      	ldr	r2, [pc, #128]	@ (80080e0 <HAL_TIM_PWM_Start_DMA+0x34c>)
 800805e:	4293      	cmp	r3, r2
 8008060:	d018      	beq.n	8008094 <HAL_TIM_PWM_Start_DMA+0x300>
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800806a:	d013      	beq.n	8008094 <HAL_TIM_PWM_Start_DMA+0x300>
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	4a1c      	ldr	r2, [pc, #112]	@ (80080e4 <HAL_TIM_PWM_Start_DMA+0x350>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d00e      	beq.n	8008094 <HAL_TIM_PWM_Start_DMA+0x300>
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	4a1b      	ldr	r2, [pc, #108]	@ (80080e8 <HAL_TIM_PWM_Start_DMA+0x354>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d009      	beq.n	8008094 <HAL_TIM_PWM_Start_DMA+0x300>
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4a19      	ldr	r2, [pc, #100]	@ (80080ec <HAL_TIM_PWM_Start_DMA+0x358>)
 8008086:	4293      	cmp	r3, r2
 8008088:	d004      	beq.n	8008094 <HAL_TIM_PWM_Start_DMA+0x300>
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	4a18      	ldr	r2, [pc, #96]	@ (80080f0 <HAL_TIM_PWM_Start_DMA+0x35c>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d111      	bne.n	80080b8 <HAL_TIM_PWM_Start_DMA+0x324>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	689b      	ldr	r3, [r3, #8]
 800809a:	f003 0307 	and.w	r3, r3, #7
 800809e:	613b      	str	r3, [r7, #16]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b06      	cmp	r3, #6
 80080a4:	d010      	beq.n	80080c8 <HAL_TIM_PWM_Start_DMA+0x334>
      {
        __HAL_TIM_ENABLE(htim);
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	681a      	ldr	r2, [r3, #0]
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	f042 0201 	orr.w	r2, r2, #1
 80080b4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80080b6:	e007      	b.n	80080c8 <HAL_TIM_PWM_Start_DMA+0x334>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	681a      	ldr	r2, [r3, #0]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80080c8:	7dfb      	ldrb	r3, [r7, #23]
}
 80080ca:	4618      	mov	r0, r3
 80080cc:	3718      	adds	r7, #24
 80080ce:	46bd      	mov	sp, r7
 80080d0:	bd80      	pop	{r7, pc}
 80080d2:	bf00      	nop
 80080d4:	0800864d 	.word	0x0800864d
 80080d8:	080086f5 	.word	0x080086f5
 80080dc:	080085bb 	.word	0x080085bb
 80080e0:	40010000 	.word	0x40010000
 80080e4:	40000400 	.word	0x40000400
 80080e8:	40000800 	.word	0x40000800
 80080ec:	40000c00 	.word	0x40000c00
 80080f0:	40014000 	.word	0x40014000

080080f4 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b084      	sub	sp, #16
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
 80080fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80080fe:	2300      	movs	r3, #0
 8008100:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8008102:	683b      	ldr	r3, [r7, #0]
 8008104:	2b0c      	cmp	r3, #12
 8008106:	d855      	bhi.n	80081b4 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8008108:	a201      	add	r2, pc, #4	@ (adr r2, 8008110 <HAL_TIM_PWM_Stop_DMA+0x1c>)
 800810a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800810e:	bf00      	nop
 8008110:	08008145 	.word	0x08008145
 8008114:	080081b5 	.word	0x080081b5
 8008118:	080081b5 	.word	0x080081b5
 800811c:	080081b5 	.word	0x080081b5
 8008120:	08008161 	.word	0x08008161
 8008124:	080081b5 	.word	0x080081b5
 8008128:	080081b5 	.word	0x080081b5
 800812c:	080081b5 	.word	0x080081b5
 8008130:	0800817d 	.word	0x0800817d
 8008134:	080081b5 	.word	0x080081b5
 8008138:	080081b5 	.word	0x080081b5
 800813c:	080081b5 	.word	0x080081b5
 8008140:	08008199 	.word	0x08008199
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	68da      	ldr	r2, [r3, #12]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8008152:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008158:	4618      	mov	r0, r3
 800815a:	f7fc fb95 	bl	8004888 <HAL_DMA_Abort_IT>
      break;
 800815e:	e02c      	b.n	80081ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	68da      	ldr	r2, [r3, #12]
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800816e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008174:	4618      	mov	r0, r3
 8008176:	f7fc fb87 	bl	8004888 <HAL_DMA_Abort_IT>
      break;
 800817a:	e01e      	b.n	80081ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	68da      	ldr	r2, [r3, #12]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800818a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008190:	4618      	mov	r0, r3
 8008192:	f7fc fb79 	bl	8004888 <HAL_DMA_Abort_IT>
      break;
 8008196:	e010      	b.n	80081ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80081a6:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081ac:	4618      	mov	r0, r3
 80081ae:	f7fc fb6b 	bl	8004888 <HAL_DMA_Abort_IT>
      break;
 80081b2:	e002      	b.n	80081ba <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	73fb      	strb	r3, [r7, #15]
      break;
 80081b8:	bf00      	nop
  }

  if (status == HAL_OK)
 80081ba:	7bfb      	ldrb	r3, [r7, #15]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d157      	bne.n	8008270 <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	2200      	movs	r2, #0
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f000 fd79 	bl	8008cc0 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	4a2a      	ldr	r2, [pc, #168]	@ (800827c <HAL_TIM_PWM_Stop_DMA+0x188>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d117      	bne.n	8008208 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	6a1a      	ldr	r2, [r3, #32]
 80081de:	f241 1311 	movw	r3, #4369	@ 0x1111
 80081e2:	4013      	ands	r3, r2
 80081e4:	2b00      	cmp	r3, #0
 80081e6:	d10f      	bne.n	8008208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	6a1a      	ldr	r2, [r3, #32]
 80081ee:	f240 4344 	movw	r3, #1092	@ 0x444
 80081f2:	4013      	ands	r3, r2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d107      	bne.n	8008208 <HAL_TIM_PWM_Stop_DMA+0x114>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008206:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	6a1a      	ldr	r2, [r3, #32]
 800820e:	f241 1311 	movw	r3, #4369	@ 0x1111
 8008212:	4013      	ands	r3, r2
 8008214:	2b00      	cmp	r3, #0
 8008216:	d10f      	bne.n	8008238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6a1a      	ldr	r2, [r3, #32]
 800821e:	f240 4344 	movw	r3, #1092	@ 0x444
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d107      	bne.n	8008238 <HAL_TIM_PWM_Stop_DMA+0x144>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	681a      	ldr	r2, [r3, #0]
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	681b      	ldr	r3, [r3, #0]
 8008232:	f022 0201 	bic.w	r2, r2, #1
 8008236:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	2b00      	cmp	r3, #0
 800823c:	d104      	bne.n	8008248 <HAL_TIM_PWM_Stop_DMA+0x154>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	2201      	movs	r2, #1
 8008242:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008246:	e013      	b.n	8008270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	2b04      	cmp	r3, #4
 800824c:	d104      	bne.n	8008258 <HAL_TIM_PWM_Stop_DMA+0x164>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2201      	movs	r2, #1
 8008252:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008256:	e00b      	b.n	8008270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b08      	cmp	r3, #8
 800825c:	d104      	bne.n	8008268 <HAL_TIM_PWM_Stop_DMA+0x174>
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2201      	movs	r2, #1
 8008262:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008266:	e003      	b.n	8008270 <HAL_TIM_PWM_Stop_DMA+0x17c>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2201      	movs	r2, #1
 800826c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 8008270:	7bfb      	ldrb	r3, [r7, #15]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
 800827a:	bf00      	nop
 800827c:	40010000 	.word	0x40010000

08008280 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b086      	sub	sp, #24
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800828c:	2300      	movs	r3, #0
 800828e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008296:	2b01      	cmp	r3, #1
 8008298:	d101      	bne.n	800829e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800829a:	2302      	movs	r3, #2
 800829c:	e0ae      	b.n	80083fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	2201      	movs	r2, #1
 80082a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2b0c      	cmp	r3, #12
 80082aa:	f200 809f 	bhi.w	80083ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80082ae:	a201      	add	r2, pc, #4	@ (adr r2, 80082b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80082b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082b4:	080082e9 	.word	0x080082e9
 80082b8:	080083ed 	.word	0x080083ed
 80082bc:	080083ed 	.word	0x080083ed
 80082c0:	080083ed 	.word	0x080083ed
 80082c4:	08008329 	.word	0x08008329
 80082c8:	080083ed 	.word	0x080083ed
 80082cc:	080083ed 	.word	0x080083ed
 80082d0:	080083ed 	.word	0x080083ed
 80082d4:	0800836b 	.word	0x0800836b
 80082d8:	080083ed 	.word	0x080083ed
 80082dc:	080083ed 	.word	0x080083ed
 80082e0:	080083ed 	.word	0x080083ed
 80082e4:	080083ab 	.word	0x080083ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	68b9      	ldr	r1, [r7, #8]
 80082ee:	4618      	mov	r0, r3
 80082f0:	f000 fac0 	bl	8008874 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	699a      	ldr	r2, [r3, #24]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	f042 0208 	orr.w	r2, r2, #8
 8008302:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	699a      	ldr	r2, [r3, #24]
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	f022 0204 	bic.w	r2, r2, #4
 8008312:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	6999      	ldr	r1, [r3, #24]
 800831a:	68bb      	ldr	r3, [r7, #8]
 800831c:	691a      	ldr	r2, [r3, #16]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	430a      	orrs	r2, r1
 8008324:	619a      	str	r2, [r3, #24]
      break;
 8008326:	e064      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	68b9      	ldr	r1, [r7, #8]
 800832e:	4618      	mov	r0, r3
 8008330:	f000 fb06 	bl	8008940 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	699a      	ldr	r2, [r3, #24]
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008342:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699a      	ldr	r2, [r3, #24]
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008352:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	6999      	ldr	r1, [r3, #24]
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	691b      	ldr	r3, [r3, #16]
 800835e:	021a      	lsls	r2, r3, #8
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	430a      	orrs	r2, r1
 8008366:	619a      	str	r2, [r3, #24]
      break;
 8008368:	e043      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	68b9      	ldr	r1, [r7, #8]
 8008370:	4618      	mov	r0, r3
 8008372:	f000 fb51 	bl	8008a18 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	69da      	ldr	r2, [r3, #28]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	f042 0208 	orr.w	r2, r2, #8
 8008384:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	69da      	ldr	r2, [r3, #28]
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f022 0204 	bic.w	r2, r2, #4
 8008394:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008396:	68fb      	ldr	r3, [r7, #12]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	69d9      	ldr	r1, [r3, #28]
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	691a      	ldr	r2, [r3, #16]
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	430a      	orrs	r2, r1
 80083a6:	61da      	str	r2, [r3, #28]
      break;
 80083a8:	e023      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	68b9      	ldr	r1, [r7, #8]
 80083b0:	4618      	mov	r0, r3
 80083b2:	f000 fb9b 	bl	8008aec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	69da      	ldr	r2, [r3, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80083c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	69da      	ldr	r2, [r3, #28]
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80083d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	69d9      	ldr	r1, [r3, #28]
 80083dc:	68bb      	ldr	r3, [r7, #8]
 80083de:	691b      	ldr	r3, [r3, #16]
 80083e0:	021a      	lsls	r2, r3, #8
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	430a      	orrs	r2, r1
 80083e8:	61da      	str	r2, [r3, #28]
      break;
 80083ea:	e002      	b.n	80083f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80083ec:	2301      	movs	r3, #1
 80083ee:	75fb      	strb	r3, [r7, #23]
      break;
 80083f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	2200      	movs	r2, #0
 80083f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80083fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80083fc:	4618      	mov	r0, r3
 80083fe:	3718      	adds	r7, #24
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b084      	sub	sp, #16
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800840e:	2300      	movs	r3, #0
 8008410:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008418:	2b01      	cmp	r3, #1
 800841a:	d101      	bne.n	8008420 <HAL_TIM_ConfigClockSource+0x1c>
 800841c:	2302      	movs	r3, #2
 800841e:	e0b4      	b.n	800858a <HAL_TIM_ConfigClockSource+0x186>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2201      	movs	r2, #1
 8008424:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2202      	movs	r2, #2
 800842c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008438:	68bb      	ldr	r3, [r7, #8]
 800843a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800843e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008446:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	68ba      	ldr	r2, [r7, #8]
 800844e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008458:	d03e      	beq.n	80084d8 <HAL_TIM_ConfigClockSource+0xd4>
 800845a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800845e:	f200 8087 	bhi.w	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008462:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008466:	f000 8086 	beq.w	8008576 <HAL_TIM_ConfigClockSource+0x172>
 800846a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800846e:	d87f      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008470:	2b70      	cmp	r3, #112	@ 0x70
 8008472:	d01a      	beq.n	80084aa <HAL_TIM_ConfigClockSource+0xa6>
 8008474:	2b70      	cmp	r3, #112	@ 0x70
 8008476:	d87b      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008478:	2b60      	cmp	r3, #96	@ 0x60
 800847a:	d050      	beq.n	800851e <HAL_TIM_ConfigClockSource+0x11a>
 800847c:	2b60      	cmp	r3, #96	@ 0x60
 800847e:	d877      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008480:	2b50      	cmp	r3, #80	@ 0x50
 8008482:	d03c      	beq.n	80084fe <HAL_TIM_ConfigClockSource+0xfa>
 8008484:	2b50      	cmp	r3, #80	@ 0x50
 8008486:	d873      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008488:	2b40      	cmp	r3, #64	@ 0x40
 800848a:	d058      	beq.n	800853e <HAL_TIM_ConfigClockSource+0x13a>
 800848c:	2b40      	cmp	r3, #64	@ 0x40
 800848e:	d86f      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008490:	2b30      	cmp	r3, #48	@ 0x30
 8008492:	d064      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x15a>
 8008494:	2b30      	cmp	r3, #48	@ 0x30
 8008496:	d86b      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 8008498:	2b20      	cmp	r3, #32
 800849a:	d060      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x15a>
 800849c:	2b20      	cmp	r3, #32
 800849e:	d867      	bhi.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d05c      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x15a>
 80084a4:	2b10      	cmp	r3, #16
 80084a6:	d05a      	beq.n	800855e <HAL_TIM_ConfigClockSource+0x15a>
 80084a8:	e062      	b.n	8008570 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084b2:	683b      	ldr	r3, [r7, #0]
 80084b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084b6:	683b      	ldr	r3, [r7, #0]
 80084b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084ba:	f000 fbe1 	bl	8008c80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	689b      	ldr	r3, [r3, #8]
 80084c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80084cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	609a      	str	r2, [r3, #8]
      break;
 80084d6:	e04f      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80084e4:	683b      	ldr	r3, [r7, #0]
 80084e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80084e8:	f000 fbca 	bl	8008c80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084fa:	609a      	str	r2, [r3, #8]
      break;
 80084fc:	e03c      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008506:	683b      	ldr	r3, [r7, #0]
 8008508:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800850a:	461a      	mov	r2, r3
 800850c:	f000 fb3e 	bl	8008b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	2150      	movs	r1, #80	@ 0x50
 8008516:	4618      	mov	r0, r3
 8008518:	f000 fb97 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800851c:	e02c      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800852a:	461a      	mov	r2, r3
 800852c:	f000 fb5d 	bl	8008bea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	2160      	movs	r1, #96	@ 0x60
 8008536:	4618      	mov	r0, r3
 8008538:	f000 fb87 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800853c:	e01c      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008542:	683b      	ldr	r3, [r7, #0]
 8008544:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800854a:	461a      	mov	r2, r3
 800854c:	f000 fb1e 	bl	8008b8c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	681b      	ldr	r3, [r3, #0]
 8008554:	2140      	movs	r1, #64	@ 0x40
 8008556:	4618      	mov	r0, r3
 8008558:	f000 fb77 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800855c:	e00c      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681a      	ldr	r2, [r3, #0]
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	4619      	mov	r1, r3
 8008568:	4610      	mov	r0, r2
 800856a:	f000 fb6e 	bl	8008c4a <TIM_ITRx_SetConfig>
      break;
 800856e:	e003      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	73fb      	strb	r3, [r7, #15]
      break;
 8008574:	e000      	b.n	8008578 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008576:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2201      	movs	r2, #1
 800857c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008588:	7bfb      	ldrb	r3, [r7, #15]
}
 800858a:	4618      	mov	r0, r3
 800858c:	3710      	adds	r7, #16
 800858e:	46bd      	mov	sp, r7
 8008590:	bd80      	pop	{r7, pc}

08008592 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8008592:	b480      	push	{r7}
 8008594:	b083      	sub	sp, #12
 8008596:	af00      	add	r7, sp, #0
 8008598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800859a:	bf00      	nop
 800859c:	370c      	adds	r7, #12
 800859e:	46bd      	mov	sp, r7
 80085a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a4:	4770      	bx	lr

080085a6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80085a6:	b480      	push	{r7}
 80085a8:	b083      	sub	sp, #12
 80085aa:	af00      	add	r7, sp, #0
 80085ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80085ae:	bf00      	nop
 80085b0:	370c      	adds	r7, #12
 80085b2:	46bd      	mov	sp, r7
 80085b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b8:	4770      	bx	lr

080085ba <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c6:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085cc:	687a      	ldr	r2, [r7, #4]
 80085ce:	429a      	cmp	r2, r3
 80085d0:	d107      	bne.n	80085e2 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2201      	movs	r2, #1
 80085d6:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085e0:	e02a      	b.n	8008638 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085e6:	687a      	ldr	r2, [r7, #4]
 80085e8:	429a      	cmp	r2, r3
 80085ea:	d107      	bne.n	80085fc <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2202      	movs	r2, #2
 80085f0:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085fa:	e01d      	b.n	8008638 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008600:	687a      	ldr	r2, [r7, #4]
 8008602:	429a      	cmp	r2, r3
 8008604:	d107      	bne.n	8008616 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2204      	movs	r2, #4
 800860a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	2201      	movs	r2, #1
 8008610:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008614:	e010      	b.n	8008638 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008616:	68fb      	ldr	r3, [r7, #12]
 8008618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	429a      	cmp	r2, r3
 800861e:	d107      	bne.n	8008630 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	2208      	movs	r2, #8
 8008624:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2201      	movs	r2, #1
 800862a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800862e:	e003      	b.n	8008638 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8008638:	68f8      	ldr	r0, [r7, #12]
 800863a:	f7ff ffb4 	bl	80085a6 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2200      	movs	r2, #0
 8008642:	771a      	strb	r2, [r3, #28]
}
 8008644:	bf00      	nop
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008658:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865e:	687a      	ldr	r2, [r7, #4]
 8008660:	429a      	cmp	r2, r3
 8008662:	d10b      	bne.n	800867c <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2201      	movs	r2, #1
 8008668:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	69db      	ldr	r3, [r3, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d136      	bne.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	2201      	movs	r2, #1
 8008676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800867a:	e031      	b.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008680:	687a      	ldr	r2, [r7, #4]
 8008682:	429a      	cmp	r2, r3
 8008684:	d10b      	bne.n	800869e <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	2202      	movs	r2, #2
 800868a:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	69db      	ldr	r3, [r3, #28]
 8008690:	2b00      	cmp	r3, #0
 8008692:	d125      	bne.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800869c:	e020      	b.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	429a      	cmp	r2, r3
 80086a6:	d10b      	bne.n	80086c0 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	2204      	movs	r2, #4
 80086ac:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	69db      	ldr	r3, [r3, #28]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d114      	bne.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	2201      	movs	r2, #1
 80086ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80086be:	e00f      	b.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086c4:	687a      	ldr	r2, [r7, #4]
 80086c6:	429a      	cmp	r2, r3
 80086c8:	d10a      	bne.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	2208      	movs	r2, #8
 80086ce:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	69db      	ldr	r3, [r3, #28]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d103      	bne.n	80086e0 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2201      	movs	r2, #1
 80086dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 80086e0:	68f8      	ldr	r0, [r7, #12]
 80086e2:	f7f9 f93d 	bl	8001960 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	2200      	movs	r2, #0
 80086ea:	771a      	strb	r2, [r3, #28]
}
 80086ec:	bf00      	nop
 80086ee:	3710      	adds	r7, #16
 80086f0:	46bd      	mov	sp, r7
 80086f2:	bd80      	pop	{r7, pc}

080086f4 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 80086f4:	b580      	push	{r7, lr}
 80086f6:	b084      	sub	sp, #16
 80086f8:	af00      	add	r7, sp, #0
 80086fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008700:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	429a      	cmp	r2, r3
 800870a:	d103      	bne.n	8008714 <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	2201      	movs	r2, #1
 8008710:	771a      	strb	r2, [r3, #28]
 8008712:	e019      	b.n	8008748 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8008714:	68fb      	ldr	r3, [r7, #12]
 8008716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008718:	687a      	ldr	r2, [r7, #4]
 800871a:	429a      	cmp	r2, r3
 800871c:	d103      	bne.n	8008726 <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2202      	movs	r2, #2
 8008722:	771a      	strb	r2, [r3, #28]
 8008724:	e010      	b.n	8008748 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8008726:	68fb      	ldr	r3, [r7, #12]
 8008728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800872a:	687a      	ldr	r2, [r7, #4]
 800872c:	429a      	cmp	r2, r3
 800872e:	d103      	bne.n	8008738 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2204      	movs	r2, #4
 8008734:	771a      	strb	r2, [r3, #28]
 8008736:	e007      	b.n	8008748 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800873c:	687a      	ldr	r2, [r7, #4]
 800873e:	429a      	cmp	r2, r3
 8008740:	d102      	bne.n	8008748 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2208      	movs	r2, #8
 8008746:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8008748:	68f8      	ldr	r0, [r7, #12]
 800874a:	f7ff ff22 	bl	8008592 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	2200      	movs	r2, #0
 8008752:	771a      	strb	r2, [r3, #28]
}
 8008754:	bf00      	nop
 8008756:	3710      	adds	r7, #16
 8008758:	46bd      	mov	sp, r7
 800875a:	bd80      	pop	{r7, pc}

0800875c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800875c:	b480      	push	{r7}
 800875e:	b085      	sub	sp, #20
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
 8008764:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	4a3a      	ldr	r2, [pc, #232]	@ (8008858 <TIM_Base_SetConfig+0xfc>)
 8008770:	4293      	cmp	r3, r2
 8008772:	d00f      	beq.n	8008794 <TIM_Base_SetConfig+0x38>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800877a:	d00b      	beq.n	8008794 <TIM_Base_SetConfig+0x38>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	4a37      	ldr	r2, [pc, #220]	@ (800885c <TIM_Base_SetConfig+0x100>)
 8008780:	4293      	cmp	r3, r2
 8008782:	d007      	beq.n	8008794 <TIM_Base_SetConfig+0x38>
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	4a36      	ldr	r2, [pc, #216]	@ (8008860 <TIM_Base_SetConfig+0x104>)
 8008788:	4293      	cmp	r3, r2
 800878a:	d003      	beq.n	8008794 <TIM_Base_SetConfig+0x38>
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	4a35      	ldr	r2, [pc, #212]	@ (8008864 <TIM_Base_SetConfig+0x108>)
 8008790:	4293      	cmp	r3, r2
 8008792:	d108      	bne.n	80087a6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800879a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	68fa      	ldr	r2, [r7, #12]
 80087a2:	4313      	orrs	r3, r2
 80087a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	4a2b      	ldr	r2, [pc, #172]	@ (8008858 <TIM_Base_SetConfig+0xfc>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d01b      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087b4:	d017      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	4a28      	ldr	r2, [pc, #160]	@ (800885c <TIM_Base_SetConfig+0x100>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d013      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	4a27      	ldr	r2, [pc, #156]	@ (8008860 <TIM_Base_SetConfig+0x104>)
 80087c2:	4293      	cmp	r3, r2
 80087c4:	d00f      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	4a26      	ldr	r2, [pc, #152]	@ (8008864 <TIM_Base_SetConfig+0x108>)
 80087ca:	4293      	cmp	r3, r2
 80087cc:	d00b      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	4a25      	ldr	r2, [pc, #148]	@ (8008868 <TIM_Base_SetConfig+0x10c>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d007      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	4a24      	ldr	r2, [pc, #144]	@ (800886c <TIM_Base_SetConfig+0x110>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d003      	beq.n	80087e6 <TIM_Base_SetConfig+0x8a>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	4a23      	ldr	r2, [pc, #140]	@ (8008870 <TIM_Base_SetConfig+0x114>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d108      	bne.n	80087f8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80087ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80087ee:	683b      	ldr	r3, [r7, #0]
 80087f0:	68db      	ldr	r3, [r3, #12]
 80087f2:	68fa      	ldr	r2, [r7, #12]
 80087f4:	4313      	orrs	r3, r2
 80087f6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80087fe:	683b      	ldr	r3, [r7, #0]
 8008800:	695b      	ldr	r3, [r3, #20]
 8008802:	4313      	orrs	r3, r2
 8008804:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68fa      	ldr	r2, [r7, #12]
 800880a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	689a      	ldr	r2, [r3, #8]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	4a0e      	ldr	r2, [pc, #56]	@ (8008858 <TIM_Base_SetConfig+0xfc>)
 8008820:	4293      	cmp	r3, r2
 8008822:	d103      	bne.n	800882c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	691a      	ldr	r2, [r3, #16]
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	691b      	ldr	r3, [r3, #16]
 8008836:	f003 0301 	and.w	r3, r3, #1
 800883a:	2b01      	cmp	r3, #1
 800883c:	d105      	bne.n	800884a <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	691b      	ldr	r3, [r3, #16]
 8008842:	f023 0201 	bic.w	r2, r3, #1
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	611a      	str	r2, [r3, #16]
  }
}
 800884a:	bf00      	nop
 800884c:	3714      	adds	r7, #20
 800884e:	46bd      	mov	sp, r7
 8008850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008854:	4770      	bx	lr
 8008856:	bf00      	nop
 8008858:	40010000 	.word	0x40010000
 800885c:	40000400 	.word	0x40000400
 8008860:	40000800 	.word	0x40000800
 8008864:	40000c00 	.word	0x40000c00
 8008868:	40014000 	.word	0x40014000
 800886c:	40014400 	.word	0x40014400
 8008870:	40014800 	.word	0x40014800

08008874 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008874:	b480      	push	{r7}
 8008876:	b087      	sub	sp, #28
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
 800887c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6a1b      	ldr	r3, [r3, #32]
 8008882:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a1b      	ldr	r3, [r3, #32]
 8008888:	f023 0201 	bic.w	r2, r3, #1
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	685b      	ldr	r3, [r3, #4]
 8008894:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	699b      	ldr	r3, [r3, #24]
 800889a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80088a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80088a4:	68fb      	ldr	r3, [r7, #12]
 80088a6:	f023 0303 	bic.w	r3, r3, #3
 80088aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80088ac:	683b      	ldr	r3, [r7, #0]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	68fa      	ldr	r2, [r7, #12]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	f023 0302 	bic.w	r3, r3, #2
 80088bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80088be:	683b      	ldr	r3, [r7, #0]
 80088c0:	689b      	ldr	r3, [r3, #8]
 80088c2:	697a      	ldr	r2, [r7, #20]
 80088c4:	4313      	orrs	r3, r2
 80088c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	4a1c      	ldr	r2, [pc, #112]	@ (800893c <TIM_OC1_SetConfig+0xc8>)
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d10c      	bne.n	80088ea <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	f023 0308 	bic.w	r3, r3, #8
 80088d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	68db      	ldr	r3, [r3, #12]
 80088dc:	697a      	ldr	r2, [r7, #20]
 80088de:	4313      	orrs	r3, r2
 80088e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	f023 0304 	bic.w	r3, r3, #4
 80088e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	4a13      	ldr	r2, [pc, #76]	@ (800893c <TIM_OC1_SetConfig+0xc8>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d111      	bne.n	8008916 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80088f2:	693b      	ldr	r3, [r7, #16]
 80088f4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80088f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008900:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	693a      	ldr	r2, [r7, #16]
 8008908:	4313      	orrs	r3, r2
 800890a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	699b      	ldr	r3, [r3, #24]
 8008910:	693a      	ldr	r2, [r7, #16]
 8008912:	4313      	orrs	r3, r2
 8008914:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	693a      	ldr	r2, [r7, #16]
 800891a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	68fa      	ldr	r2, [r7, #12]
 8008920:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008922:	683b      	ldr	r3, [r7, #0]
 8008924:	685a      	ldr	r2, [r3, #4]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	697a      	ldr	r2, [r7, #20]
 800892e:	621a      	str	r2, [r3, #32]
}
 8008930:	bf00      	nop
 8008932:	371c      	adds	r7, #28
 8008934:	46bd      	mov	sp, r7
 8008936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800893a:	4770      	bx	lr
 800893c:	40010000 	.word	0x40010000

08008940 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008940:	b480      	push	{r7}
 8008942:	b087      	sub	sp, #28
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
 8008948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	6a1b      	ldr	r3, [r3, #32]
 800894e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6a1b      	ldr	r3, [r3, #32]
 8008954:	f023 0210 	bic.w	r2, r3, #16
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	685b      	ldr	r3, [r3, #4]
 8008960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800896e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008976:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	021b      	lsls	r3, r3, #8
 800897e:	68fa      	ldr	r2, [r7, #12]
 8008980:	4313      	orrs	r3, r2
 8008982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008984:	697b      	ldr	r3, [r7, #20]
 8008986:	f023 0320 	bic.w	r3, r3, #32
 800898a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800898c:	683b      	ldr	r3, [r7, #0]
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	011b      	lsls	r3, r3, #4
 8008992:	697a      	ldr	r2, [r7, #20]
 8008994:	4313      	orrs	r3, r2
 8008996:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	4a1e      	ldr	r2, [pc, #120]	@ (8008a14 <TIM_OC2_SetConfig+0xd4>)
 800899c:	4293      	cmp	r3, r2
 800899e:	d10d      	bne.n	80089bc <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80089a0:	697b      	ldr	r3, [r7, #20]
 80089a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80089a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80089a8:	683b      	ldr	r3, [r7, #0]
 80089aa:	68db      	ldr	r3, [r3, #12]
 80089ac:	011b      	lsls	r3, r3, #4
 80089ae:	697a      	ldr	r2, [r7, #20]
 80089b0:	4313      	orrs	r3, r2
 80089b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80089ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	4a15      	ldr	r2, [pc, #84]	@ (8008a14 <TIM_OC2_SetConfig+0xd4>)
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d113      	bne.n	80089ec <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80089c4:	693b      	ldr	r3, [r7, #16]
 80089c6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80089ca:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80089cc:	693b      	ldr	r3, [r7, #16]
 80089ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80089d2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	695b      	ldr	r3, [r3, #20]
 80089d8:	009b      	lsls	r3, r3, #2
 80089da:	693a      	ldr	r2, [r7, #16]
 80089dc:	4313      	orrs	r3, r2
 80089de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80089e0:	683b      	ldr	r3, [r7, #0]
 80089e2:	699b      	ldr	r3, [r3, #24]
 80089e4:	009b      	lsls	r3, r3, #2
 80089e6:	693a      	ldr	r2, [r7, #16]
 80089e8:	4313      	orrs	r3, r2
 80089ea:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	693a      	ldr	r2, [r7, #16]
 80089f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80089f8:	683b      	ldr	r3, [r7, #0]
 80089fa:	685a      	ldr	r2, [r3, #4]
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	697a      	ldr	r2, [r7, #20]
 8008a04:	621a      	str	r2, [r3, #32]
}
 8008a06:	bf00      	nop
 8008a08:	371c      	adds	r7, #28
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a10:	4770      	bx	lr
 8008a12:	bf00      	nop
 8008a14:	40010000 	.word	0x40010000

08008a18 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008a18:	b480      	push	{r7}
 8008a1a:	b087      	sub	sp, #28
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a1b      	ldr	r3, [r3, #32]
 8008a26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	6a1b      	ldr	r3, [r3, #32]
 8008a2c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	69db      	ldr	r3, [r3, #28]
 8008a3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008a46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f023 0303 	bic.w	r3, r3, #3
 8008a4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008a50:	683b      	ldr	r3, [r7, #0]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	68fa      	ldr	r2, [r7, #12]
 8008a56:	4313      	orrs	r3, r2
 8008a58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8008a60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008a62:	683b      	ldr	r3, [r7, #0]
 8008a64:	689b      	ldr	r3, [r3, #8]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ae8 <TIM_OC3_SetConfig+0xd0>)
 8008a72:	4293      	cmp	r3, r2
 8008a74:	d10d      	bne.n	8008a92 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008a76:	697b      	ldr	r3, [r7, #20]
 8008a78:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008a7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008a7e:	683b      	ldr	r3, [r7, #0]
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	021b      	lsls	r3, r3, #8
 8008a84:	697a      	ldr	r2, [r7, #20]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008a8a:	697b      	ldr	r3, [r7, #20]
 8008a8c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8008a90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	4a14      	ldr	r2, [pc, #80]	@ (8008ae8 <TIM_OC3_SetConfig+0xd0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d113      	bne.n	8008ac2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008a9a:	693b      	ldr	r3, [r7, #16]
 8008a9c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008aa2:	693b      	ldr	r3, [r7, #16]
 8008aa4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	695b      	ldr	r3, [r3, #20]
 8008aae:	011b      	lsls	r3, r3, #4
 8008ab0:	693a      	ldr	r2, [r7, #16]
 8008ab2:	4313      	orrs	r3, r2
 8008ab4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008ab6:	683b      	ldr	r3, [r7, #0]
 8008ab8:	699b      	ldr	r3, [r3, #24]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	68fa      	ldr	r2, [r7, #12]
 8008acc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008ace:	683b      	ldr	r3, [r7, #0]
 8008ad0:	685a      	ldr	r2, [r3, #4]
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	697a      	ldr	r2, [r7, #20]
 8008ada:	621a      	str	r2, [r3, #32]
}
 8008adc:	bf00      	nop
 8008ade:	371c      	adds	r7, #28
 8008ae0:	46bd      	mov	sp, r7
 8008ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae6:	4770      	bx	lr
 8008ae8:	40010000 	.word	0x40010000

08008aec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6a1b      	ldr	r3, [r3, #32]
 8008b00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	685b      	ldr	r3, [r3, #4]
 8008b0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	69db      	ldr	r3, [r3, #28]
 8008b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008b24:	683b      	ldr	r3, [r7, #0]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	021b      	lsls	r3, r3, #8
 8008b2a:	68fa      	ldr	r2, [r7, #12]
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008b36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	031b      	lsls	r3, r3, #12
 8008b3e:	693a      	ldr	r2, [r7, #16]
 8008b40:	4313      	orrs	r3, r2
 8008b42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	4a10      	ldr	r2, [pc, #64]	@ (8008b88 <TIM_OC4_SetConfig+0x9c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d109      	bne.n	8008b60 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008b4c:	697b      	ldr	r3, [r7, #20]
 8008b4e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8008b52:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	695b      	ldr	r3, [r3, #20]
 8008b58:	019b      	lsls	r3, r3, #6
 8008b5a:	697a      	ldr	r2, [r7, #20]
 8008b5c:	4313      	orrs	r3, r2
 8008b5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	697a      	ldr	r2, [r7, #20]
 8008b64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008b6c:	683b      	ldr	r3, [r7, #0]
 8008b6e:	685a      	ldr	r2, [r3, #4]
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	693a      	ldr	r2, [r7, #16]
 8008b78:	621a      	str	r2, [r3, #32]
}
 8008b7a:	bf00      	nop
 8008b7c:	371c      	adds	r7, #28
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr
 8008b86:	bf00      	nop
 8008b88:	40010000 	.word	0x40010000

08008b8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b087      	sub	sp, #28
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	60f8      	str	r0, [r7, #12]
 8008b94:	60b9      	str	r1, [r7, #8]
 8008b96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	6a1b      	ldr	r3, [r3, #32]
 8008b9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
 8008ba2:	f023 0201 	bic.w	r2, r3, #1
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	699b      	ldr	r3, [r3, #24]
 8008bae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008bb0:	693b      	ldr	r3, [r7, #16]
 8008bb2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8008bb6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	011b      	lsls	r3, r3, #4
 8008bbc:	693a      	ldr	r2, [r7, #16]
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	f023 030a 	bic.w	r3, r3, #10
 8008bc8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	697a      	ldr	r2, [r7, #20]
 8008bdc:	621a      	str	r2, [r3, #32]
}
 8008bde:	bf00      	nop
 8008be0:	371c      	adds	r7, #28
 8008be2:	46bd      	mov	sp, r7
 8008be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be8:	4770      	bx	lr

08008bea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b087      	sub	sp, #28
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	60f8      	str	r0, [r7, #12]
 8008bf2:	60b9      	str	r1, [r7, #8]
 8008bf4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
 8008bfa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	6a1b      	ldr	r3, [r3, #32]
 8008c00:	f023 0210 	bic.w	r2, r3, #16
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	699b      	ldr	r3, [r3, #24]
 8008c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008c0e:	693b      	ldr	r3, [r7, #16]
 8008c10:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	031b      	lsls	r3, r3, #12
 8008c1a:	693a      	ldr	r2, [r7, #16]
 8008c1c:	4313      	orrs	r3, r2
 8008c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008c20:	697b      	ldr	r3, [r7, #20]
 8008c22:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8008c26:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	011b      	lsls	r3, r3, #4
 8008c2c:	697a      	ldr	r2, [r7, #20]
 8008c2e:	4313      	orrs	r3, r2
 8008c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	693a      	ldr	r2, [r7, #16]
 8008c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	621a      	str	r2, [r3, #32]
}
 8008c3e:	bf00      	nop
 8008c40:	371c      	adds	r7, #28
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr

08008c4a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c4a:	b480      	push	{r7}
 8008c4c:	b085      	sub	sp, #20
 8008c4e:	af00      	add	r7, sp, #0
 8008c50:	6078      	str	r0, [r7, #4]
 8008c52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008c60:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c62:	683a      	ldr	r2, [r7, #0]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	4313      	orrs	r3, r2
 8008c68:	f043 0307 	orr.w	r3, r3, #7
 8008c6c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	68fa      	ldr	r2, [r7, #12]
 8008c72:	609a      	str	r2, [r3, #8]
}
 8008c74:	bf00      	nop
 8008c76:	3714      	adds	r7, #20
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7e:	4770      	bx	lr

08008c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b087      	sub	sp, #28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	60f8      	str	r0, [r7, #12]
 8008c88:	60b9      	str	r1, [r7, #8]
 8008c8a:	607a      	str	r2, [r7, #4]
 8008c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	689b      	ldr	r3, [r3, #8]
 8008c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c94:	697b      	ldr	r3, [r7, #20]
 8008c96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8008c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	021a      	lsls	r2, r3, #8
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	431a      	orrs	r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	4313      	orrs	r3, r2
 8008cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	697a      	ldr	r2, [r7, #20]
 8008cb2:	609a      	str	r2, [r3, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	371c      	adds	r7, #28
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f003 031f 	and.w	r3, r3, #31
 8008cd2:	2201      	movs	r2, #1
 8008cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8008cd8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	6a1a      	ldr	r2, [r3, #32]
 8008cde:	697b      	ldr	r3, [r7, #20]
 8008ce0:	43db      	mvns	r3, r3
 8008ce2:	401a      	ands	r2, r3
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	6a1a      	ldr	r2, [r3, #32]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	f003 031f 	and.w	r3, r3, #31
 8008cf2:	6879      	ldr	r1, [r7, #4]
 8008cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8008cf8:	431a      	orrs	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	621a      	str	r2, [r3, #32]
}
 8008cfe:	bf00      	nop
 8008d00:	371c      	adds	r7, #28
 8008d02:	46bd      	mov	sp, r7
 8008d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d08:	4770      	bx	lr
	...

08008d0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d0c:	b480      	push	{r7}
 8008d0e:	b085      	sub	sp, #20
 8008d10:	af00      	add	r7, sp, #0
 8008d12:	6078      	str	r0, [r7, #4]
 8008d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008d1c:	2b01      	cmp	r3, #1
 8008d1e:	d101      	bne.n	8008d24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d20:	2302      	movs	r3, #2
 8008d22:	e050      	b.n	8008dc6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2201      	movs	r2, #1
 8008d28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	2202      	movs	r2, #2
 8008d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	681b      	ldr	r3, [r3, #0]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008d4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	68fa      	ldr	r2, [r7, #12]
 8008d52:	4313      	orrs	r3, r2
 8008d54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	4a1c      	ldr	r2, [pc, #112]	@ (8008dd4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008d64:	4293      	cmp	r3, r2
 8008d66:	d018      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d70:	d013      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	4a18      	ldr	r2, [pc, #96]	@ (8008dd8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008d78:	4293      	cmp	r3, r2
 8008d7a:	d00e      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	4a16      	ldr	r2, [pc, #88]	@ (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8008d82:	4293      	cmp	r3, r2
 8008d84:	d009      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	4a15      	ldr	r2, [pc, #84]	@ (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d004      	beq.n	8008d9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	4a13      	ldr	r2, [pc, #76]	@ (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8008d96:	4293      	cmp	r3, r2
 8008d98:	d10c      	bne.n	8008db4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008da0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008da2:	683b      	ldr	r3, [r7, #0]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	68ba      	ldr	r2, [r7, #8]
 8008da8:	4313      	orrs	r3, r2
 8008daa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68ba      	ldr	r2, [r7, #8]
 8008db2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2201      	movs	r2, #1
 8008db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8008dc4:	2300      	movs	r3, #0
}
 8008dc6:	4618      	mov	r0, r3
 8008dc8:	3714      	adds	r7, #20
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd0:	4770      	bx	lr
 8008dd2:	bf00      	nop
 8008dd4:	40010000 	.word	0x40010000
 8008dd8:	40000400 	.word	0x40000400
 8008ddc:	40000800 	.word	0x40000800
 8008de0:	40000c00 	.word	0x40000c00
 8008de4:	40014000 	.word	0x40014000

08008de8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008de8:	b084      	sub	sp, #16
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b084      	sub	sp, #16
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
 8008df2:	f107 001c 	add.w	r0, r7, #28
 8008df6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008dfa:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008dfe:	2b01      	cmp	r3, #1
 8008e00:	d123      	bne.n	8008e4a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e06:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	68db      	ldr	r3, [r3, #12]
 8008e12:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008e16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008e1a:	687a      	ldr	r2, [r7, #4]
 8008e1c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	68db      	ldr	r3, [r3, #12]
 8008e22:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008e2a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008e2e:	2b01      	cmp	r3, #1
 8008e30:	d105      	bne.n	8008e3e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	68db      	ldr	r3, [r3, #12]
 8008e36:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f001 fae8 	bl	800a414 <USB_CoreReset>
 8008e44:	4603      	mov	r3, r0
 8008e46:	73fb      	strb	r3, [r7, #15]
 8008e48:	e01b      	b.n	8008e82 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	68db      	ldr	r3, [r3, #12]
 8008e4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f001 fadc 	bl	800a414 <USB_CoreReset>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008e60:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d106      	bne.n	8008e76 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e6c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	639a      	str	r2, [r3, #56]	@ 0x38
 8008e74:	e005      	b.n	8008e82 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e7a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008e82:	7fbb      	ldrb	r3, [r7, #30]
 8008e84:	2b01      	cmp	r3, #1
 8008e86:	d10b      	bne.n	8008ea0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	689b      	ldr	r3, [r3, #8]
 8008e8c:	f043 0206 	orr.w	r2, r3, #6
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	f043 0220 	orr.w	r2, r3, #32
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ea0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3710      	adds	r7, #16
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008eac:	b004      	add	sp, #16
 8008eae:	4770      	bx	lr

08008eb0 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008eb0:	b480      	push	{r7}
 8008eb2:	b087      	sub	sp, #28
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	60f8      	str	r0, [r7, #12]
 8008eb8:	60b9      	str	r1, [r7, #8]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ebe:	79fb      	ldrb	r3, [r7, #7]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d165      	bne.n	8008f90 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	4a41      	ldr	r2, [pc, #260]	@ (8008fcc <USB_SetTurnaroundTime+0x11c>)
 8008ec8:	4293      	cmp	r3, r2
 8008eca:	d906      	bls.n	8008eda <USB_SetTurnaroundTime+0x2a>
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	4a40      	ldr	r2, [pc, #256]	@ (8008fd0 <USB_SetTurnaroundTime+0x120>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d202      	bcs.n	8008eda <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008ed4:	230f      	movs	r3, #15
 8008ed6:	617b      	str	r3, [r7, #20]
 8008ed8:	e062      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	4a3c      	ldr	r2, [pc, #240]	@ (8008fd0 <USB_SetTurnaroundTime+0x120>)
 8008ede:	4293      	cmp	r3, r2
 8008ee0:	d306      	bcc.n	8008ef0 <USB_SetTurnaroundTime+0x40>
 8008ee2:	68bb      	ldr	r3, [r7, #8]
 8008ee4:	4a3b      	ldr	r2, [pc, #236]	@ (8008fd4 <USB_SetTurnaroundTime+0x124>)
 8008ee6:	4293      	cmp	r3, r2
 8008ee8:	d202      	bcs.n	8008ef0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008eea:	230e      	movs	r3, #14
 8008eec:	617b      	str	r3, [r7, #20]
 8008eee:	e057      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	4a38      	ldr	r2, [pc, #224]	@ (8008fd4 <USB_SetTurnaroundTime+0x124>)
 8008ef4:	4293      	cmp	r3, r2
 8008ef6:	d306      	bcc.n	8008f06 <USB_SetTurnaroundTime+0x56>
 8008ef8:	68bb      	ldr	r3, [r7, #8]
 8008efa:	4a37      	ldr	r2, [pc, #220]	@ (8008fd8 <USB_SetTurnaroundTime+0x128>)
 8008efc:	4293      	cmp	r3, r2
 8008efe:	d202      	bcs.n	8008f06 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008f00:	230d      	movs	r3, #13
 8008f02:	617b      	str	r3, [r7, #20]
 8008f04:	e04c      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	4a33      	ldr	r2, [pc, #204]	@ (8008fd8 <USB_SetTurnaroundTime+0x128>)
 8008f0a:	4293      	cmp	r3, r2
 8008f0c:	d306      	bcc.n	8008f1c <USB_SetTurnaroundTime+0x6c>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	4a32      	ldr	r2, [pc, #200]	@ (8008fdc <USB_SetTurnaroundTime+0x12c>)
 8008f12:	4293      	cmp	r3, r2
 8008f14:	d802      	bhi.n	8008f1c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008f16:	230c      	movs	r3, #12
 8008f18:	617b      	str	r3, [r7, #20]
 8008f1a:	e041      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	4a2f      	ldr	r2, [pc, #188]	@ (8008fdc <USB_SetTurnaroundTime+0x12c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d906      	bls.n	8008f32 <USB_SetTurnaroundTime+0x82>
 8008f24:	68bb      	ldr	r3, [r7, #8]
 8008f26:	4a2e      	ldr	r2, [pc, #184]	@ (8008fe0 <USB_SetTurnaroundTime+0x130>)
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d802      	bhi.n	8008f32 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008f2c:	230b      	movs	r3, #11
 8008f2e:	617b      	str	r3, [r7, #20]
 8008f30:	e036      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	4a2a      	ldr	r2, [pc, #168]	@ (8008fe0 <USB_SetTurnaroundTime+0x130>)
 8008f36:	4293      	cmp	r3, r2
 8008f38:	d906      	bls.n	8008f48 <USB_SetTurnaroundTime+0x98>
 8008f3a:	68bb      	ldr	r3, [r7, #8]
 8008f3c:	4a29      	ldr	r2, [pc, #164]	@ (8008fe4 <USB_SetTurnaroundTime+0x134>)
 8008f3e:	4293      	cmp	r3, r2
 8008f40:	d802      	bhi.n	8008f48 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008f42:	230a      	movs	r3, #10
 8008f44:	617b      	str	r3, [r7, #20]
 8008f46:	e02b      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	4a26      	ldr	r2, [pc, #152]	@ (8008fe4 <USB_SetTurnaroundTime+0x134>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d906      	bls.n	8008f5e <USB_SetTurnaroundTime+0xae>
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	4a25      	ldr	r2, [pc, #148]	@ (8008fe8 <USB_SetTurnaroundTime+0x138>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d202      	bcs.n	8008f5e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008f58:	2309      	movs	r3, #9
 8008f5a:	617b      	str	r3, [r7, #20]
 8008f5c:	e020      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	4a21      	ldr	r2, [pc, #132]	@ (8008fe8 <USB_SetTurnaroundTime+0x138>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d306      	bcc.n	8008f74 <USB_SetTurnaroundTime+0xc4>
 8008f66:	68bb      	ldr	r3, [r7, #8]
 8008f68:	4a20      	ldr	r2, [pc, #128]	@ (8008fec <USB_SetTurnaroundTime+0x13c>)
 8008f6a:	4293      	cmp	r3, r2
 8008f6c:	d802      	bhi.n	8008f74 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008f6e:	2308      	movs	r3, #8
 8008f70:	617b      	str	r3, [r7, #20]
 8008f72:	e015      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008f74:	68bb      	ldr	r3, [r7, #8]
 8008f76:	4a1d      	ldr	r2, [pc, #116]	@ (8008fec <USB_SetTurnaroundTime+0x13c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d906      	bls.n	8008f8a <USB_SetTurnaroundTime+0xda>
 8008f7c:	68bb      	ldr	r3, [r7, #8]
 8008f7e:	4a1c      	ldr	r2, [pc, #112]	@ (8008ff0 <USB_SetTurnaroundTime+0x140>)
 8008f80:	4293      	cmp	r3, r2
 8008f82:	d202      	bcs.n	8008f8a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008f84:	2307      	movs	r3, #7
 8008f86:	617b      	str	r3, [r7, #20]
 8008f88:	e00a      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008f8a:	2306      	movs	r3, #6
 8008f8c:	617b      	str	r3, [r7, #20]
 8008f8e:	e007      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008f90:	79fb      	ldrb	r3, [r7, #7]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d102      	bne.n	8008f9c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008f96:	2309      	movs	r3, #9
 8008f98:	617b      	str	r3, [r7, #20]
 8008f9a:	e001      	b.n	8008fa0 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008f9c:	2309      	movs	r3, #9
 8008f9e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	68db      	ldr	r3, [r3, #12]
 8008fa4:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	68da      	ldr	r2, [r3, #12]
 8008fb0:	697b      	ldr	r3, [r7, #20]
 8008fb2:	029b      	lsls	r3, r3, #10
 8008fb4:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008fb8:	431a      	orrs	r2, r3
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	371c      	adds	r7, #28
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr
 8008fcc:	00d8acbf 	.word	0x00d8acbf
 8008fd0:	00e4e1c0 	.word	0x00e4e1c0
 8008fd4:	00f42400 	.word	0x00f42400
 8008fd8:	01067380 	.word	0x01067380
 8008fdc:	011a499f 	.word	0x011a499f
 8008fe0:	01312cff 	.word	0x01312cff
 8008fe4:	014ca43f 	.word	0x014ca43f
 8008fe8:	016e3600 	.word	0x016e3600
 8008fec:	01a6ab1f 	.word	0x01a6ab1f
 8008ff0:	01e84800 	.word	0x01e84800

08008ff4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	f043 0201 	orr.w	r2, r3, #1
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8009008:	2300      	movs	r3, #0
}
 800900a:	4618      	mov	r0, r3
 800900c:	370c      	adds	r7, #12
 800900e:	46bd      	mov	sp, r7
 8009010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009014:	4770      	bx	lr

08009016 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689b      	ldr	r3, [r3, #8]
 8009022:	f023 0201 	bic.w	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800902a:	2300      	movs	r3, #0
}
 800902c:	4618      	mov	r0, r3
 800902e:	370c      	adds	r7, #12
 8009030:	46bd      	mov	sp, r7
 8009032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009036:	4770      	bx	lr

08009038 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8009038:	b580      	push	{r7, lr}
 800903a:	b084      	sub	sp, #16
 800903c:	af00      	add	r7, sp, #0
 800903e:	6078      	str	r0, [r7, #4]
 8009040:	460b      	mov	r3, r1
 8009042:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	68db      	ldr	r3, [r3, #12]
 800904c:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009054:	78fb      	ldrb	r3, [r7, #3]
 8009056:	2b01      	cmp	r3, #1
 8009058:	d115      	bne.n	8009086 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009066:	200a      	movs	r0, #10
 8009068:	f7fb f9d2 	bl	8004410 <HAL_Delay>
      ms += 10U;
 800906c:	68fb      	ldr	r3, [r7, #12]
 800906e:	330a      	adds	r3, #10
 8009070:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f001 f93f 	bl	800a2f6 <USB_GetMode>
 8009078:	4603      	mov	r3, r0
 800907a:	2b01      	cmp	r3, #1
 800907c:	d01e      	beq.n	80090bc <USB_SetCurrentMode+0x84>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	2bc7      	cmp	r3, #199	@ 0xc7
 8009082:	d9f0      	bls.n	8009066 <USB_SetCurrentMode+0x2e>
 8009084:	e01a      	b.n	80090bc <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009086:	78fb      	ldrb	r3, [r7, #3]
 8009088:	2b00      	cmp	r3, #0
 800908a:	d115      	bne.n	80090b8 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	68db      	ldr	r3, [r3, #12]
 8009090:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009098:	200a      	movs	r0, #10
 800909a:	f7fb f9b9 	bl	8004410 <HAL_Delay>
      ms += 10U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	330a      	adds	r3, #10
 80090a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80090a4:	6878      	ldr	r0, [r7, #4]
 80090a6:	f001 f926 	bl	800a2f6 <USB_GetMode>
 80090aa:	4603      	mov	r3, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d005      	beq.n	80090bc <USB_SetCurrentMode+0x84>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	2bc7      	cmp	r3, #199	@ 0xc7
 80090b4:	d9f0      	bls.n	8009098 <USB_SetCurrentMode+0x60>
 80090b6:	e001      	b.n	80090bc <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80090b8:	2301      	movs	r3, #1
 80090ba:	e005      	b.n	80090c8 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80090bc:	68fb      	ldr	r3, [r7, #12]
 80090be:	2bc8      	cmp	r3, #200	@ 0xc8
 80090c0:	d101      	bne.n	80090c6 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80090c2:	2301      	movs	r3, #1
 80090c4:	e000      	b.n	80090c8 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80090c6:	2300      	movs	r3, #0
}
 80090c8:	4618      	mov	r0, r3
 80090ca:	3710      	adds	r7, #16
 80090cc:	46bd      	mov	sp, r7
 80090ce:	bd80      	pop	{r7, pc}

080090d0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090d0:	b084      	sub	sp, #16
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b086      	sub	sp, #24
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80090de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80090e2:	2300      	movs	r3, #0
 80090e4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80090ea:	2300      	movs	r3, #0
 80090ec:	613b      	str	r3, [r7, #16]
 80090ee:	e009      	b.n	8009104 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80090f0:	687a      	ldr	r2, [r7, #4]
 80090f2:	693b      	ldr	r3, [r7, #16]
 80090f4:	3340      	adds	r3, #64	@ 0x40
 80090f6:	009b      	lsls	r3, r3, #2
 80090f8:	4413      	add	r3, r2
 80090fa:	2200      	movs	r2, #0
 80090fc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80090fe:	693b      	ldr	r3, [r7, #16]
 8009100:	3301      	adds	r3, #1
 8009102:	613b      	str	r3, [r7, #16]
 8009104:	693b      	ldr	r3, [r7, #16]
 8009106:	2b0e      	cmp	r3, #14
 8009108:	d9f2      	bls.n	80090f0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800910a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800910e:	2b00      	cmp	r3, #0
 8009110:	d11c      	bne.n	800914c <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009118:	685b      	ldr	r3, [r3, #4]
 800911a:	68fa      	ldr	r2, [r7, #12]
 800911c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009120:	f043 0302 	orr.w	r3, r3, #2
 8009124:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800912a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009136:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009142:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	639a      	str	r2, [r3, #56]	@ 0x38
 800914a:	e00b      	b.n	8009164 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009150:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800915c:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009164:	68fb      	ldr	r3, [r7, #12]
 8009166:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800916a:	461a      	mov	r2, r3
 800916c:	2300      	movs	r3, #0
 800916e:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8009170:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8009174:	2b01      	cmp	r3, #1
 8009176:	d10d      	bne.n	8009194 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8009178:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800917c:	2b00      	cmp	r3, #0
 800917e:	d104      	bne.n	800918a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8009180:	2100      	movs	r1, #0
 8009182:	6878      	ldr	r0, [r7, #4]
 8009184:	f000 f968 	bl	8009458 <USB_SetDevSpeed>
 8009188:	e008      	b.n	800919c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800918a:	2101      	movs	r1, #1
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	f000 f963 	bl	8009458 <USB_SetDevSpeed>
 8009192:	e003      	b.n	800919c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8009194:	2103      	movs	r1, #3
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f95e 	bl	8009458 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800919c:	2110      	movs	r1, #16
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f8fa 	bl	8009398 <USB_FlushTxFifo>
 80091a4:	4603      	mov	r3, r0
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d001      	beq.n	80091ae <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 80091aa:	2301      	movs	r3, #1
 80091ac:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80091ae:	6878      	ldr	r0, [r7, #4]
 80091b0:	f000 f924 	bl	80093fc <USB_FlushRxFifo>
 80091b4:	4603      	mov	r3, r0
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d001      	beq.n	80091be <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80091ba:	2301      	movs	r3, #1
 80091bc:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80091be:	68fb      	ldr	r3, [r7, #12]
 80091c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091c4:	461a      	mov	r2, r3
 80091c6:	2300      	movs	r3, #0
 80091c8:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091d0:	461a      	mov	r2, r3
 80091d2:	2300      	movs	r3, #0
 80091d4:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80091dc:	461a      	mov	r2, r3
 80091de:	2300      	movs	r3, #0
 80091e0:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80091e2:	2300      	movs	r3, #0
 80091e4:	613b      	str	r3, [r7, #16]
 80091e6:	e043      	b.n	8009270 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	015a      	lsls	r2, r3, #5
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	4413      	add	r3, r2
 80091f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80091fa:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80091fe:	d118      	bne.n	8009232 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d10a      	bne.n	800921c <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	015a      	lsls	r2, r3, #5
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	4413      	add	r3, r2
 800920e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009212:	461a      	mov	r2, r3
 8009214:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8009218:	6013      	str	r3, [r2, #0]
 800921a:	e013      	b.n	8009244 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800921c:	693b      	ldr	r3, [r7, #16]
 800921e:	015a      	lsls	r2, r3, #5
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	4413      	add	r3, r2
 8009224:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009228:	461a      	mov	r2, r3
 800922a:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	e008      	b.n	8009244 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8009232:	693b      	ldr	r3, [r7, #16]
 8009234:	015a      	lsls	r2, r3, #5
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	4413      	add	r3, r2
 800923a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800923e:	461a      	mov	r2, r3
 8009240:	2300      	movs	r3, #0
 8009242:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8009244:	693b      	ldr	r3, [r7, #16]
 8009246:	015a      	lsls	r2, r3, #5
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	4413      	add	r3, r2
 800924c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009250:	461a      	mov	r2, r3
 8009252:	2300      	movs	r3, #0
 8009254:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	015a      	lsls	r2, r3, #5
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	4413      	add	r3, r2
 800925e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009262:	461a      	mov	r2, r3
 8009264:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009268:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800926a:	693b      	ldr	r3, [r7, #16]
 800926c:	3301      	adds	r3, #1
 800926e:	613b      	str	r3, [r7, #16]
 8009270:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8009274:	461a      	mov	r2, r3
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	4293      	cmp	r3, r2
 800927a:	d3b5      	bcc.n	80091e8 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800927c:	2300      	movs	r3, #0
 800927e:	613b      	str	r3, [r7, #16]
 8009280:	e043      	b.n	800930a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	015a      	lsls	r2, r3, #5
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	4413      	add	r3, r2
 800928a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009294:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009298:	d118      	bne.n	80092cc <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10a      	bne.n	80092b6 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	015a      	lsls	r2, r3, #5
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	4413      	add	r3, r2
 80092a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ac:	461a      	mov	r2, r3
 80092ae:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80092b2:	6013      	str	r3, [r2, #0]
 80092b4:	e013      	b.n	80092de <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80092b6:	693b      	ldr	r3, [r7, #16]
 80092b8:	015a      	lsls	r2, r3, #5
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	4413      	add	r3, r2
 80092be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092c2:	461a      	mov	r2, r3
 80092c4:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	e008      	b.n	80092de <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80092cc:	693b      	ldr	r3, [r7, #16]
 80092ce:	015a      	lsls	r2, r3, #5
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	4413      	add	r3, r2
 80092d4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092d8:	461a      	mov	r2, r3
 80092da:	2300      	movs	r3, #0
 80092dc:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	015a      	lsls	r2, r3, #5
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	4413      	add	r3, r2
 80092e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092ea:	461a      	mov	r2, r3
 80092ec:	2300      	movs	r3, #0
 80092ee:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80092f0:	693b      	ldr	r3, [r7, #16]
 80092f2:	015a      	lsls	r2, r3, #5
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092fc:	461a      	mov	r2, r3
 80092fe:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8009302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009304:	693b      	ldr	r3, [r7, #16]
 8009306:	3301      	adds	r3, #1
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800930e:	461a      	mov	r2, r3
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	4293      	cmp	r3, r2
 8009314:	d3b5      	bcc.n	8009282 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800931c:	691b      	ldr	r3, [r3, #16]
 800931e:	68fa      	ldr	r2, [r7, #12]
 8009320:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009324:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009328:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2200      	movs	r2, #0
 800932e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8009336:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009338:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800933c:	2b00      	cmp	r3, #0
 800933e:	d105      	bne.n	800934c <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	699b      	ldr	r3, [r3, #24]
 8009344:	f043 0210 	orr.w	r2, r3, #16
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	699a      	ldr	r2, [r3, #24]
 8009350:	4b10      	ldr	r3, [pc, #64]	@ (8009394 <USB_DevInit+0x2c4>)
 8009352:	4313      	orrs	r3, r2
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009358:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800935c:	2b00      	cmp	r3, #0
 800935e:	d005      	beq.n	800936c <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	699b      	ldr	r3, [r3, #24]
 8009364:	f043 0208 	orr.w	r2, r3, #8
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800936c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8009370:	2b01      	cmp	r3, #1
 8009372:	d107      	bne.n	8009384 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	699b      	ldr	r3, [r3, #24]
 8009378:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800937c:	f043 0304 	orr.w	r3, r3, #4
 8009380:	687a      	ldr	r2, [r7, #4]
 8009382:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8009384:	7dfb      	ldrb	r3, [r7, #23]
}
 8009386:	4618      	mov	r0, r3
 8009388:	3718      	adds	r7, #24
 800938a:	46bd      	mov	sp, r7
 800938c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009390:	b004      	add	sp, #16
 8009392:	4770      	bx	lr
 8009394:	803c3800 	.word	0x803c3800

08009398 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009398:	b480      	push	{r7}
 800939a:	b085      	sub	sp, #20
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
 80093a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80093a2:	2300      	movs	r3, #0
 80093a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	3301      	adds	r3, #1
 80093aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093b2:	d901      	bls.n	80093b8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80093b4:	2303      	movs	r3, #3
 80093b6:	e01b      	b.n	80093f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	daf2      	bge.n	80093a6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80093c0:	2300      	movs	r3, #0
 80093c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80093c4:	683b      	ldr	r3, [r7, #0]
 80093c6:	019b      	lsls	r3, r3, #6
 80093c8:	f043 0220 	orr.w	r2, r3, #32
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3301      	adds	r3, #1
 80093d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80093dc:	d901      	bls.n	80093e2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80093de:	2303      	movs	r3, #3
 80093e0:	e006      	b.n	80093f0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	691b      	ldr	r3, [r3, #16]
 80093e6:	f003 0320 	and.w	r3, r3, #32
 80093ea:	2b20      	cmp	r3, #32
 80093ec:	d0f0      	beq.n	80093d0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80093ee:	2300      	movs	r3, #0
}
 80093f0:	4618      	mov	r0, r3
 80093f2:	3714      	adds	r7, #20
 80093f4:	46bd      	mov	sp, r7
 80093f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093fa:	4770      	bx	lr

080093fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b085      	sub	sp, #20
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009404:	2300      	movs	r3, #0
 8009406:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3301      	adds	r3, #1
 800940c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009414:	d901      	bls.n	800941a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009416:	2303      	movs	r3, #3
 8009418:	e018      	b.n	800944c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	691b      	ldr	r3, [r3, #16]
 800941e:	2b00      	cmp	r3, #0
 8009420:	daf2      	bge.n	8009408 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8009422:	2300      	movs	r3, #0
 8009424:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	2210      	movs	r2, #16
 800942a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	3301      	adds	r3, #1
 8009430:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009432:	68fb      	ldr	r3, [r7, #12]
 8009434:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009438:	d901      	bls.n	800943e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800943a:	2303      	movs	r3, #3
 800943c:	e006      	b.n	800944c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0310 	and.w	r3, r3, #16
 8009446:	2b10      	cmp	r3, #16
 8009448:	d0f0      	beq.n	800942c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800944a:	2300      	movs	r3, #0
}
 800944c:	4618      	mov	r0, r3
 800944e:	3714      	adds	r7, #20
 8009450:	46bd      	mov	sp, r7
 8009452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009456:	4770      	bx	lr

08009458 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009458:	b480      	push	{r7}
 800945a:	b085      	sub	sp, #20
 800945c:	af00      	add	r7, sp, #0
 800945e:	6078      	str	r0, [r7, #4]
 8009460:	460b      	mov	r3, r1
 8009462:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800946e:	681a      	ldr	r2, [r3, #0]
 8009470:	78fb      	ldrb	r3, [r7, #3]
 8009472:	68f9      	ldr	r1, [r7, #12]
 8009474:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009478:	4313      	orrs	r3, r2
 800947a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800947c:	2300      	movs	r3, #0
}
 800947e:	4618      	mov	r0, r3
 8009480:	3714      	adds	r7, #20
 8009482:	46bd      	mov	sp, r7
 8009484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009488:	4770      	bx	lr

0800948a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800948a:	b480      	push	{r7}
 800948c:	b087      	sub	sp, #28
 800948e:	af00      	add	r7, sp, #0
 8009490:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009496:	693b      	ldr	r3, [r7, #16]
 8009498:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	f003 0306 	and.w	r3, r3, #6
 80094a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d102      	bne.n	80094b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80094aa:	2300      	movs	r3, #0
 80094ac:	75fb      	strb	r3, [r7, #23]
 80094ae:	e00a      	b.n	80094c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2b02      	cmp	r3, #2
 80094b4:	d002      	beq.n	80094bc <USB_GetDevSpeed+0x32>
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2b06      	cmp	r3, #6
 80094ba:	d102      	bne.n	80094c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80094bc:	2302      	movs	r3, #2
 80094be:	75fb      	strb	r3, [r7, #23]
 80094c0:	e001      	b.n	80094c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80094c2:	230f      	movs	r3, #15
 80094c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80094c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	371c      	adds	r7, #28
 80094cc:	46bd      	mov	sp, r7
 80094ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d2:	4770      	bx	lr

080094d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b085      	sub	sp, #20
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
 80094dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	781b      	ldrb	r3, [r3, #0]
 80094e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094e8:	683b      	ldr	r3, [r7, #0]
 80094ea:	785b      	ldrb	r3, [r3, #1]
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d13a      	bne.n	8009566 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80094f6:	69da      	ldr	r2, [r3, #28]
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	781b      	ldrb	r3, [r3, #0]
 80094fc:	f003 030f 	and.w	r3, r3, #15
 8009500:	2101      	movs	r1, #1
 8009502:	fa01 f303 	lsl.w	r3, r1, r3
 8009506:	b29b      	uxth	r3, r3
 8009508:	68f9      	ldr	r1, [r7, #12]
 800950a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800950e:	4313      	orrs	r3, r2
 8009510:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	015a      	lsls	r2, r3, #5
 8009516:	68fb      	ldr	r3, [r7, #12]
 8009518:	4413      	add	r3, r2
 800951a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009524:	2b00      	cmp	r3, #0
 8009526:	d155      	bne.n	80095d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	015a      	lsls	r2, r3, #5
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	4413      	add	r3, r2
 8009530:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009534:	681a      	ldr	r2, [r3, #0]
 8009536:	683b      	ldr	r3, [r7, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800953e:	683b      	ldr	r3, [r7, #0]
 8009540:	791b      	ldrb	r3, [r3, #4]
 8009542:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009544:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	059b      	lsls	r3, r3, #22
 800954a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800954c:	4313      	orrs	r3, r2
 800954e:	68ba      	ldr	r2, [r7, #8]
 8009550:	0151      	lsls	r1, r2, #5
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	440a      	add	r2, r1
 8009556:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800955a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800955e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8009562:	6013      	str	r3, [r2, #0]
 8009564:	e036      	b.n	80095d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800956c:	69da      	ldr	r2, [r3, #28]
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	781b      	ldrb	r3, [r3, #0]
 8009572:	f003 030f 	and.w	r3, r3, #15
 8009576:	2101      	movs	r1, #1
 8009578:	fa01 f303 	lsl.w	r3, r1, r3
 800957c:	041b      	lsls	r3, r3, #16
 800957e:	68f9      	ldr	r1, [r7, #12]
 8009580:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009584:	4313      	orrs	r3, r2
 8009586:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009588:	68bb      	ldr	r3, [r7, #8]
 800958a:	015a      	lsls	r2, r3, #5
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	4413      	add	r3, r2
 8009590:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800959a:	2b00      	cmp	r3, #0
 800959c:	d11a      	bne.n	80095d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	015a      	lsls	r2, r3, #5
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	4413      	add	r3, r2
 80095a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	689b      	ldr	r3, [r3, #8]
 80095b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80095b4:	683b      	ldr	r3, [r7, #0]
 80095b6:	791b      	ldrb	r3, [r3, #4]
 80095b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80095ba:	430b      	orrs	r3, r1
 80095bc:	4313      	orrs	r3, r2
 80095be:	68ba      	ldr	r2, [r7, #8]
 80095c0:	0151      	lsls	r1, r2, #5
 80095c2:	68fa      	ldr	r2, [r7, #12]
 80095c4:	440a      	add	r2, r1
 80095c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80095ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80095d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3714      	adds	r7, #20
 80095da:	46bd      	mov	sp, r7
 80095dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095e0:	4770      	bx	lr
	...

080095e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80095e4:	b480      	push	{r7}
 80095e6:	b085      	sub	sp, #20
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	6078      	str	r0, [r7, #4]
 80095ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80095f2:	683b      	ldr	r3, [r7, #0]
 80095f4:	781b      	ldrb	r3, [r3, #0]
 80095f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	785b      	ldrb	r3, [r3, #1]
 80095fc:	2b01      	cmp	r3, #1
 80095fe:	d161      	bne.n	80096c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009600:	68bb      	ldr	r3, [r7, #8]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009612:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009616:	d11f      	bne.n	8009658 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009618:	68bb      	ldr	r3, [r7, #8]
 800961a:	015a      	lsls	r2, r3, #5
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	4413      	add	r3, r2
 8009620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	68ba      	ldr	r2, [r7, #8]
 8009628:	0151      	lsls	r1, r2, #5
 800962a:	68fa      	ldr	r2, [r7, #12]
 800962c:	440a      	add	r2, r1
 800962e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009632:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009636:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	015a      	lsls	r2, r3, #5
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	4413      	add	r3, r2
 8009640:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	68ba      	ldr	r2, [r7, #8]
 8009648:	0151      	lsls	r1, r2, #5
 800964a:	68fa      	ldr	r2, [r7, #12]
 800964c:	440a      	add	r2, r1
 800964e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009652:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009656:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	781b      	ldrb	r3, [r3, #0]
 8009664:	f003 030f 	and.w	r3, r3, #15
 8009668:	2101      	movs	r1, #1
 800966a:	fa01 f303 	lsl.w	r3, r1, r3
 800966e:	b29b      	uxth	r3, r3
 8009670:	43db      	mvns	r3, r3
 8009672:	68f9      	ldr	r1, [r7, #12]
 8009674:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009678:	4013      	ands	r3, r2
 800967a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009682:	69da      	ldr	r2, [r3, #28]
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	f003 030f 	and.w	r3, r3, #15
 800968c:	2101      	movs	r1, #1
 800968e:	fa01 f303 	lsl.w	r3, r1, r3
 8009692:	b29b      	uxth	r3, r3
 8009694:	43db      	mvns	r3, r3
 8009696:	68f9      	ldr	r1, [r7, #12]
 8009698:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800969c:	4013      	ands	r3, r2
 800969e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80096a0:	68bb      	ldr	r3, [r7, #8]
 80096a2:	015a      	lsls	r2, r3, #5
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	4413      	add	r3, r2
 80096a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ac:	681a      	ldr	r2, [r3, #0]
 80096ae:	68bb      	ldr	r3, [r7, #8]
 80096b0:	0159      	lsls	r1, r3, #5
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	440b      	add	r3, r1
 80096b6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096ba:	4619      	mov	r1, r3
 80096bc:	4b35      	ldr	r3, [pc, #212]	@ (8009794 <USB_DeactivateEndpoint+0x1b0>)
 80096be:	4013      	ands	r3, r2
 80096c0:	600b      	str	r3, [r1, #0]
 80096c2:	e060      	b.n	8009786 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80096c4:	68bb      	ldr	r3, [r7, #8]
 80096c6:	015a      	lsls	r2, r3, #5
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	4413      	add	r3, r2
 80096cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80096d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80096da:	d11f      	bne.n	800971c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	015a      	lsls	r2, r3, #5
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	4413      	add	r3, r2
 80096e4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	68ba      	ldr	r2, [r7, #8]
 80096ec:	0151      	lsls	r1, r2, #5
 80096ee:	68fa      	ldr	r2, [r7, #12]
 80096f0:	440a      	add	r2, r1
 80096f2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096f6:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80096fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	015a      	lsls	r2, r3, #5
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	4413      	add	r3, r2
 8009704:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	68ba      	ldr	r2, [r7, #8]
 800970c:	0151      	lsls	r1, r2, #5
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	440a      	add	r2, r1
 8009712:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009716:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800971a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009722:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	781b      	ldrb	r3, [r3, #0]
 8009728:	f003 030f 	and.w	r3, r3, #15
 800972c:	2101      	movs	r1, #1
 800972e:	fa01 f303 	lsl.w	r3, r1, r3
 8009732:	041b      	lsls	r3, r3, #16
 8009734:	43db      	mvns	r3, r3
 8009736:	68f9      	ldr	r1, [r7, #12]
 8009738:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800973c:	4013      	ands	r3, r2
 800973e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009746:	69da      	ldr	r2, [r3, #28]
 8009748:	683b      	ldr	r3, [r7, #0]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 030f 	and.w	r3, r3, #15
 8009750:	2101      	movs	r1, #1
 8009752:	fa01 f303 	lsl.w	r3, r1, r3
 8009756:	041b      	lsls	r3, r3, #16
 8009758:	43db      	mvns	r3, r3
 800975a:	68f9      	ldr	r1, [r7, #12]
 800975c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009760:	4013      	ands	r3, r2
 8009762:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009764:	68bb      	ldr	r3, [r7, #8]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009770:	681a      	ldr	r2, [r3, #0]
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	0159      	lsls	r1, r3, #5
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	440b      	add	r3, r1
 800977a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800977e:	4619      	mov	r1, r3
 8009780:	4b05      	ldr	r3, [pc, #20]	@ (8009798 <USB_DeactivateEndpoint+0x1b4>)
 8009782:	4013      	ands	r3, r2
 8009784:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009786:	2300      	movs	r3, #0
}
 8009788:	4618      	mov	r0, r3
 800978a:	3714      	adds	r7, #20
 800978c:	46bd      	mov	sp, r7
 800978e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009792:	4770      	bx	lr
 8009794:	ec337800 	.word	0xec337800
 8009798:	eff37800 	.word	0xeff37800

0800979c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800979c:	b580      	push	{r7, lr}
 800979e:	b08a      	sub	sp, #40	@ 0x28
 80097a0:	af02      	add	r7, sp, #8
 80097a2:	60f8      	str	r0, [r7, #12]
 80097a4:	60b9      	str	r1, [r7, #8]
 80097a6:	4613      	mov	r3, r2
 80097a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80097ae:	68bb      	ldr	r3, [r7, #8]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	785b      	ldrb	r3, [r3, #1]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	f040 817f 	bne.w	8009abc <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	691b      	ldr	r3, [r3, #16]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d132      	bne.n	800982c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80097c6:	69bb      	ldr	r3, [r7, #24]
 80097c8:	015a      	lsls	r2, r3, #5
 80097ca:	69fb      	ldr	r3, [r7, #28]
 80097cc:	4413      	add	r3, r2
 80097ce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097d2:	691b      	ldr	r3, [r3, #16]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	0151      	lsls	r1, r2, #5
 80097d8:	69fa      	ldr	r2, [r7, #28]
 80097da:	440a      	add	r2, r1
 80097dc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097e0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80097e4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80097e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80097ea:	69bb      	ldr	r3, [r7, #24]
 80097ec:	015a      	lsls	r2, r3, #5
 80097ee:	69fb      	ldr	r3, [r7, #28]
 80097f0:	4413      	add	r3, r2
 80097f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	69ba      	ldr	r2, [r7, #24]
 80097fa:	0151      	lsls	r1, r2, #5
 80097fc:	69fa      	ldr	r2, [r7, #28]
 80097fe:	440a      	add	r2, r1
 8009800:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009804:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009808:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800980a:	69bb      	ldr	r3, [r7, #24]
 800980c:	015a      	lsls	r2, r3, #5
 800980e:	69fb      	ldr	r3, [r7, #28]
 8009810:	4413      	add	r3, r2
 8009812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009816:	691b      	ldr	r3, [r3, #16]
 8009818:	69ba      	ldr	r2, [r7, #24]
 800981a:	0151      	lsls	r1, r2, #5
 800981c:	69fa      	ldr	r2, [r7, #28]
 800981e:	440a      	add	r2, r1
 8009820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009824:	0cdb      	lsrs	r3, r3, #19
 8009826:	04db      	lsls	r3, r3, #19
 8009828:	6113      	str	r3, [r2, #16]
 800982a:	e097      	b.n	800995c <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800982c:	69bb      	ldr	r3, [r7, #24]
 800982e:	015a      	lsls	r2, r3, #5
 8009830:	69fb      	ldr	r3, [r7, #28]
 8009832:	4413      	add	r3, r2
 8009834:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009838:	691b      	ldr	r3, [r3, #16]
 800983a:	69ba      	ldr	r2, [r7, #24]
 800983c:	0151      	lsls	r1, r2, #5
 800983e:	69fa      	ldr	r2, [r7, #28]
 8009840:	440a      	add	r2, r1
 8009842:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009846:	0cdb      	lsrs	r3, r3, #19
 8009848:	04db      	lsls	r3, r3, #19
 800984a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800984c:	69bb      	ldr	r3, [r7, #24]
 800984e:	015a      	lsls	r2, r3, #5
 8009850:	69fb      	ldr	r3, [r7, #28]
 8009852:	4413      	add	r3, r2
 8009854:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009858:	691b      	ldr	r3, [r3, #16]
 800985a:	69ba      	ldr	r2, [r7, #24]
 800985c:	0151      	lsls	r1, r2, #5
 800985e:	69fa      	ldr	r2, [r7, #28]
 8009860:	440a      	add	r2, r1
 8009862:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009866:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800986a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800986e:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	2b00      	cmp	r3, #0
 8009874:	d11a      	bne.n	80098ac <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	689b      	ldr	r3, [r3, #8]
 800987e:	429a      	cmp	r2, r3
 8009880:	d903      	bls.n	800988a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800988a:	69bb      	ldr	r3, [r7, #24]
 800988c:	015a      	lsls	r2, r3, #5
 800988e:	69fb      	ldr	r3, [r7, #28]
 8009890:	4413      	add	r3, r2
 8009892:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009896:	691b      	ldr	r3, [r3, #16]
 8009898:	69ba      	ldr	r2, [r7, #24]
 800989a:	0151      	lsls	r1, r2, #5
 800989c:	69fa      	ldr	r2, [r7, #28]
 800989e:	440a      	add	r2, r1
 80098a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80098a4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80098a8:	6113      	str	r3, [r2, #16]
 80098aa:	e044      	b.n	8009936 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80098ac:	68bb      	ldr	r3, [r7, #8]
 80098ae:	691a      	ldr	r2, [r3, #16]
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	689b      	ldr	r3, [r3, #8]
 80098b4:	4413      	add	r3, r2
 80098b6:	1e5a      	subs	r2, r3, #1
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	689b      	ldr	r3, [r3, #8]
 80098bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80098c0:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (pktcnt << 19));
 80098c2:	69bb      	ldr	r3, [r7, #24]
 80098c4:	015a      	lsls	r2, r3, #5
 80098c6:	69fb      	ldr	r3, [r7, #28]
 80098c8:	4413      	add	r3, r2
 80098ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098ce:	691a      	ldr	r2, [r3, #16]
 80098d0:	8afb      	ldrh	r3, [r7, #22]
 80098d2:	04d9      	lsls	r1, r3, #19
 80098d4:	4ba4      	ldr	r3, [pc, #656]	@ (8009b68 <USB_EPStartXfer+0x3cc>)
 80098d6:	400b      	ands	r3, r1
 80098d8:	69b9      	ldr	r1, [r7, #24]
 80098da:	0148      	lsls	r0, r1, #5
 80098dc:	69f9      	ldr	r1, [r7, #28]
 80098de:	4401      	add	r1, r0
 80098e0:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80098e4:	4313      	orrs	r3, r2
 80098e6:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 80098e8:	68bb      	ldr	r3, [r7, #8]
 80098ea:	791b      	ldrb	r3, [r3, #4]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d122      	bne.n	8009936 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80098f0:	69bb      	ldr	r3, [r7, #24]
 80098f2:	015a      	lsls	r2, r3, #5
 80098f4:	69fb      	ldr	r3, [r7, #28]
 80098f6:	4413      	add	r3, r2
 80098f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	69ba      	ldr	r2, [r7, #24]
 8009900:	0151      	lsls	r1, r2, #5
 8009902:	69fa      	ldr	r2, [r7, #28]
 8009904:	440a      	add	r2, r1
 8009906:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800990a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 800990e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (pktcnt << 29));
 8009910:	69bb      	ldr	r3, [r7, #24]
 8009912:	015a      	lsls	r2, r3, #5
 8009914:	69fb      	ldr	r3, [r7, #28]
 8009916:	4413      	add	r3, r2
 8009918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800991c:	691a      	ldr	r2, [r3, #16]
 800991e:	8afb      	ldrh	r3, [r7, #22]
 8009920:	075b      	lsls	r3, r3, #29
 8009922:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8009926:	69b9      	ldr	r1, [r7, #24]
 8009928:	0148      	lsls	r0, r1, #5
 800992a:	69f9      	ldr	r1, [r7, #28]
 800992c:	4401      	add	r1, r0
 800992e:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009932:	4313      	orrs	r3, r2
 8009934:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009936:	69bb      	ldr	r3, [r7, #24]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	69fb      	ldr	r3, [r7, #28]
 800993c:	4413      	add	r3, r2
 800993e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009942:	691a      	ldr	r2, [r3, #16]
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	691b      	ldr	r3, [r3, #16]
 8009948:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800994c:	69b9      	ldr	r1, [r7, #24]
 800994e:	0148      	lsls	r0, r1, #5
 8009950:	69f9      	ldr	r1, [r7, #28]
 8009952:	4401      	add	r1, r0
 8009954:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009958:	4313      	orrs	r3, r2
 800995a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800995c:	79fb      	ldrb	r3, [r7, #7]
 800995e:	2b01      	cmp	r3, #1
 8009960:	d14b      	bne.n	80099fa <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d009      	beq.n	800997e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800996a:	69bb      	ldr	r3, [r7, #24]
 800996c:	015a      	lsls	r2, r3, #5
 800996e:	69fb      	ldr	r3, [r7, #28]
 8009970:	4413      	add	r3, r2
 8009972:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009976:	461a      	mov	r2, r3
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	69db      	ldr	r3, [r3, #28]
 800997c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	791b      	ldrb	r3, [r3, #4]
 8009982:	2b01      	cmp	r3, #1
 8009984:	d128      	bne.n	80099d8 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009986:	69fb      	ldr	r3, [r7, #28]
 8009988:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009992:	2b00      	cmp	r3, #0
 8009994:	d110      	bne.n	80099b8 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009996:	69bb      	ldr	r3, [r7, #24]
 8009998:	015a      	lsls	r2, r3, #5
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	4413      	add	r3, r2
 800999e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	69ba      	ldr	r2, [r7, #24]
 80099a6:	0151      	lsls	r1, r2, #5
 80099a8:	69fa      	ldr	r2, [r7, #28]
 80099aa:	440a      	add	r2, r1
 80099ac:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099b0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80099b4:	6013      	str	r3, [r2, #0]
 80099b6:	e00f      	b.n	80099d8 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80099b8:	69bb      	ldr	r3, [r7, #24]
 80099ba:	015a      	lsls	r2, r3, #5
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	4413      	add	r3, r2
 80099c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	69ba      	ldr	r2, [r7, #24]
 80099c8:	0151      	lsls	r1, r2, #5
 80099ca:	69fa      	ldr	r2, [r7, #28]
 80099cc:	440a      	add	r2, r1
 80099ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80099d6:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099d8:	69bb      	ldr	r3, [r7, #24]
 80099da:	015a      	lsls	r2, r3, #5
 80099dc:	69fb      	ldr	r3, [r7, #28]
 80099de:	4413      	add	r3, r2
 80099e0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	69ba      	ldr	r2, [r7, #24]
 80099e8:	0151      	lsls	r1, r2, #5
 80099ea:	69fa      	ldr	r2, [r7, #28]
 80099ec:	440a      	add	r2, r1
 80099ee:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80099f2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80099f6:	6013      	str	r3, [r2, #0]
 80099f8:	e166      	b.n	8009cc8 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80099fa:	69bb      	ldr	r3, [r7, #24]
 80099fc:	015a      	lsls	r2, r3, #5
 80099fe:	69fb      	ldr	r3, [r7, #28]
 8009a00:	4413      	add	r3, r2
 8009a02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	69ba      	ldr	r2, [r7, #24]
 8009a0a:	0151      	lsls	r1, r2, #5
 8009a0c:	69fa      	ldr	r2, [r7, #28]
 8009a0e:	440a      	add	r2, r1
 8009a10:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a14:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009a18:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a1a:	68bb      	ldr	r3, [r7, #8]
 8009a1c:	791b      	ldrb	r3, [r3, #4]
 8009a1e:	2b01      	cmp	r3, #1
 8009a20:	d015      	beq.n	8009a4e <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8009a22:	68bb      	ldr	r3, [r7, #8]
 8009a24:	691b      	ldr	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	f000 814e 	beq.w	8009cc8 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009a2c:	69fb      	ldr	r3, [r7, #28]
 8009a2e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a32:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	781b      	ldrb	r3, [r3, #0]
 8009a38:	f003 030f 	and.w	r3, r3, #15
 8009a3c:	2101      	movs	r1, #1
 8009a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a42:	69f9      	ldr	r1, [r7, #28]
 8009a44:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009a48:	4313      	orrs	r3, r2
 8009a4a:	634b      	str	r3, [r1, #52]	@ 0x34
 8009a4c:	e13c      	b.n	8009cc8 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009a54:	689b      	ldr	r3, [r3, #8]
 8009a56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d110      	bne.n	8009a80 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009a5e:	69bb      	ldr	r3, [r7, #24]
 8009a60:	015a      	lsls	r2, r3, #5
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	4413      	add	r3, r2
 8009a66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	69ba      	ldr	r2, [r7, #24]
 8009a6e:	0151      	lsls	r1, r2, #5
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	440a      	add	r2, r1
 8009a74:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a78:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009a7c:	6013      	str	r3, [r2, #0]
 8009a7e:	e00f      	b.n	8009aa0 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009a80:	69bb      	ldr	r3, [r7, #24]
 8009a82:	015a      	lsls	r2, r3, #5
 8009a84:	69fb      	ldr	r3, [r7, #28]
 8009a86:	4413      	add	r3, r2
 8009a88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	69ba      	ldr	r2, [r7, #24]
 8009a90:	0151      	lsls	r1, r2, #5
 8009a92:	69fa      	ldr	r2, [r7, #28]
 8009a94:	440a      	add	r2, r1
 8009a96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009a9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009a9e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	68d9      	ldr	r1, [r3, #12]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	781a      	ldrb	r2, [r3, #0]
 8009aa8:	68bb      	ldr	r3, [r7, #8]
 8009aaa:	691b      	ldr	r3, [r3, #16]
 8009aac:	b298      	uxth	r0, r3
 8009aae:	79fb      	ldrb	r3, [r7, #7]
 8009ab0:	9300      	str	r3, [sp, #0]
 8009ab2:	4603      	mov	r3, r0
 8009ab4:	68f8      	ldr	r0, [r7, #12]
 8009ab6:	f000 f9b9 	bl	8009e2c <USB_WritePacket>
 8009aba:	e105      	b.n	8009cc8 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009abc:	69bb      	ldr	r3, [r7, #24]
 8009abe:	015a      	lsls	r2, r3, #5
 8009ac0:	69fb      	ldr	r3, [r7, #28]
 8009ac2:	4413      	add	r3, r2
 8009ac4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	69ba      	ldr	r2, [r7, #24]
 8009acc:	0151      	lsls	r1, r2, #5
 8009ace:	69fa      	ldr	r2, [r7, #28]
 8009ad0:	440a      	add	r2, r1
 8009ad2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ad6:	0cdb      	lsrs	r3, r3, #19
 8009ad8:	04db      	lsls	r3, r3, #19
 8009ada:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009adc:	69bb      	ldr	r3, [r7, #24]
 8009ade:	015a      	lsls	r2, r3, #5
 8009ae0:	69fb      	ldr	r3, [r7, #28]
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ae8:	691b      	ldr	r3, [r3, #16]
 8009aea:	69ba      	ldr	r2, [r7, #24]
 8009aec:	0151      	lsls	r1, r2, #5
 8009aee:	69fa      	ldr	r2, [r7, #28]
 8009af0:	440a      	add	r2, r1
 8009af2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009af6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009afa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009afe:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009b00:	69bb      	ldr	r3, [r7, #24]
 8009b02:	2b00      	cmp	r3, #0
 8009b04:	d132      	bne.n	8009b6c <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	691b      	ldr	r3, [r3, #16]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d003      	beq.n	8009b16 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009b0e:	68bb      	ldr	r3, [r7, #8]
 8009b10:	689a      	ldr	r2, [r3, #8]
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	689a      	ldr	r2, [r3, #8]
 8009b1a:	68bb      	ldr	r3, [r7, #8]
 8009b1c:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b1e:	69bb      	ldr	r3, [r7, #24]
 8009b20:	015a      	lsls	r2, r3, #5
 8009b22:	69fb      	ldr	r3, [r7, #28]
 8009b24:	4413      	add	r3, r2
 8009b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b2a:	691a      	ldr	r2, [r3, #16]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	6a1b      	ldr	r3, [r3, #32]
 8009b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b34:	69b9      	ldr	r1, [r7, #24]
 8009b36:	0148      	lsls	r0, r1, #5
 8009b38:	69f9      	ldr	r1, [r7, #28]
 8009b3a:	4401      	add	r1, r0
 8009b3c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b40:	4313      	orrs	r3, r2
 8009b42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b44:	69bb      	ldr	r3, [r7, #24]
 8009b46:	015a      	lsls	r2, r3, #5
 8009b48:	69fb      	ldr	r3, [r7, #28]
 8009b4a:	4413      	add	r3, r2
 8009b4c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	69ba      	ldr	r2, [r7, #24]
 8009b54:	0151      	lsls	r1, r2, #5
 8009b56:	69fa      	ldr	r2, [r7, #28]
 8009b58:	440a      	add	r2, r1
 8009b5a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009b5e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009b62:	6113      	str	r3, [r2, #16]
 8009b64:	e062      	b.n	8009c2c <USB_EPStartXfer+0x490>
 8009b66:	bf00      	nop
 8009b68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d123      	bne.n	8009bbc <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009b74:	69bb      	ldr	r3, [r7, #24]
 8009b76:	015a      	lsls	r2, r3, #5
 8009b78:	69fb      	ldr	r3, [r7, #28]
 8009b7a:	4413      	add	r3, r2
 8009b7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009b80:	691a      	ldr	r2, [r3, #16]
 8009b82:	68bb      	ldr	r3, [r7, #8]
 8009b84:	689b      	ldr	r3, [r3, #8]
 8009b86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b8a:	69b9      	ldr	r1, [r7, #24]
 8009b8c:	0148      	lsls	r0, r1, #5
 8009b8e:	69f9      	ldr	r1, [r7, #28]
 8009b90:	4401      	add	r1, r0
 8009b92:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009b96:	4313      	orrs	r3, r2
 8009b98:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	015a      	lsls	r2, r3, #5
 8009b9e:	69fb      	ldr	r3, [r7, #28]
 8009ba0:	4413      	add	r3, r2
 8009ba2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ba6:	691b      	ldr	r3, [r3, #16]
 8009ba8:	69ba      	ldr	r2, [r7, #24]
 8009baa:	0151      	lsls	r1, r2, #5
 8009bac:	69fa      	ldr	r2, [r7, #28]
 8009bae:	440a      	add	r2, r1
 8009bb0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009bb4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009bb8:	6113      	str	r3, [r2, #16]
 8009bba:	e037      	b.n	8009c2c <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	691a      	ldr	r2, [r3, #16]
 8009bc0:	68bb      	ldr	r3, [r7, #8]
 8009bc2:	689b      	ldr	r3, [r3, #8]
 8009bc4:	4413      	add	r3, r2
 8009bc6:	1e5a      	subs	r2, r3, #1
 8009bc8:	68bb      	ldr	r3, [r7, #8]
 8009bca:	689b      	ldr	r3, [r3, #8]
 8009bcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8009bd0:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	689b      	ldr	r3, [r3, #8]
 8009bd6:	8afa      	ldrh	r2, [r7, #22]
 8009bd8:	fb03 f202 	mul.w	r2, r3, r2
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009be0:	69bb      	ldr	r3, [r7, #24]
 8009be2:	015a      	lsls	r2, r3, #5
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	4413      	add	r3, r2
 8009be8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009bec:	691a      	ldr	r2, [r3, #16]
 8009bee:	8afb      	ldrh	r3, [r7, #22]
 8009bf0:	04d9      	lsls	r1, r3, #19
 8009bf2:	4b38      	ldr	r3, [pc, #224]	@ (8009cd4 <USB_EPStartXfer+0x538>)
 8009bf4:	400b      	ands	r3, r1
 8009bf6:	69b9      	ldr	r1, [r7, #24]
 8009bf8:	0148      	lsls	r0, r1, #5
 8009bfa:	69f9      	ldr	r1, [r7, #28]
 8009bfc:	4401      	add	r1, r0
 8009bfe:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c02:	4313      	orrs	r3, r2
 8009c04:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009c06:	69bb      	ldr	r3, [r7, #24]
 8009c08:	015a      	lsls	r2, r3, #5
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	4413      	add	r3, r2
 8009c0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c12:	691a      	ldr	r2, [r3, #16]
 8009c14:	68bb      	ldr	r3, [r7, #8]
 8009c16:	6a1b      	ldr	r3, [r3, #32]
 8009c18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009c1c:	69b9      	ldr	r1, [r7, #24]
 8009c1e:	0148      	lsls	r0, r1, #5
 8009c20:	69f9      	ldr	r1, [r7, #28]
 8009c22:	4401      	add	r1, r0
 8009c24:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009c2c:	79fb      	ldrb	r3, [r7, #7]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d10d      	bne.n	8009c4e <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009c32:	68bb      	ldr	r3, [r7, #8]
 8009c34:	68db      	ldr	r3, [r3, #12]
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d009      	beq.n	8009c4e <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
 8009c3c:	68d9      	ldr	r1, [r3, #12]
 8009c3e:	69bb      	ldr	r3, [r7, #24]
 8009c40:	015a      	lsls	r2, r3, #5
 8009c42:	69fb      	ldr	r3, [r7, #28]
 8009c44:	4413      	add	r3, r2
 8009c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c4a:	460a      	mov	r2, r1
 8009c4c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	791b      	ldrb	r3, [r3, #4]
 8009c52:	2b01      	cmp	r3, #1
 8009c54:	d128      	bne.n	8009ca8 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009c56:	69fb      	ldr	r3, [r7, #28]
 8009c58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009c5c:	689b      	ldr	r3, [r3, #8]
 8009c5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009c62:	2b00      	cmp	r3, #0
 8009c64:	d110      	bne.n	8009c88 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8009c66:	69bb      	ldr	r3, [r7, #24]
 8009c68:	015a      	lsls	r2, r3, #5
 8009c6a:	69fb      	ldr	r3, [r7, #28]
 8009c6c:	4413      	add	r3, r2
 8009c6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	69ba      	ldr	r2, [r7, #24]
 8009c76:	0151      	lsls	r1, r2, #5
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	440a      	add	r2, r1
 8009c7c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c80:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009c84:	6013      	str	r3, [r2, #0]
 8009c86:	e00f      	b.n	8009ca8 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009c88:	69bb      	ldr	r3, [r7, #24]
 8009c8a:	015a      	lsls	r2, r3, #5
 8009c8c:	69fb      	ldr	r3, [r7, #28]
 8009c8e:	4413      	add	r3, r2
 8009c90:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	69ba      	ldr	r2, [r7, #24]
 8009c98:	0151      	lsls	r1, r2, #5
 8009c9a:	69fa      	ldr	r2, [r7, #28]
 8009c9c:	440a      	add	r2, r1
 8009c9e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ca2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009ca6:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009ca8:	69bb      	ldr	r3, [r7, #24]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	69fb      	ldr	r3, [r7, #28]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	69ba      	ldr	r2, [r7, #24]
 8009cb8:	0151      	lsls	r1, r2, #5
 8009cba:	69fa      	ldr	r2, [r7, #28]
 8009cbc:	440a      	add	r2, r1
 8009cbe:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009cc2:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009cc6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009cc8:	2300      	movs	r3, #0
}
 8009cca:	4618      	mov	r0, r3
 8009ccc:	3720      	adds	r7, #32
 8009cce:	46bd      	mov	sp, r7
 8009cd0:	bd80      	pop	{r7, pc}
 8009cd2:	bf00      	nop
 8009cd4:	1ff80000 	.word	0x1ff80000

08009cd8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009cd8:	b480      	push	{r7}
 8009cda:	b087      	sub	sp, #28
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	6078      	str	r0, [r7, #4]
 8009ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009ce6:	2300      	movs	r3, #0
 8009ce8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009cee:	683b      	ldr	r3, [r7, #0]
 8009cf0:	785b      	ldrb	r3, [r3, #1]
 8009cf2:	2b01      	cmp	r3, #1
 8009cf4:	d14a      	bne.n	8009d8c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	781b      	ldrb	r3, [r3, #0]
 8009cfa:	015a      	lsls	r2, r3, #5
 8009cfc:	693b      	ldr	r3, [r7, #16]
 8009cfe:	4413      	add	r3, r2
 8009d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d0a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d0e:	f040 8086 	bne.w	8009e1e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009d12:	683b      	ldr	r3, [r7, #0]
 8009d14:	781b      	ldrb	r3, [r3, #0]
 8009d16:	015a      	lsls	r2, r3, #5
 8009d18:	693b      	ldr	r3, [r7, #16]
 8009d1a:	4413      	add	r3, r2
 8009d1c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	683a      	ldr	r2, [r7, #0]
 8009d24:	7812      	ldrb	r2, [r2, #0]
 8009d26:	0151      	lsls	r1, r2, #5
 8009d28:	693a      	ldr	r2, [r7, #16]
 8009d2a:	440a      	add	r2, r1
 8009d2c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d30:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009d34:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	781b      	ldrb	r3, [r3, #0]
 8009d3a:	015a      	lsls	r2, r3, #5
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	4413      	add	r3, r2
 8009d40:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	683a      	ldr	r2, [r7, #0]
 8009d48:	7812      	ldrb	r2, [r2, #0]
 8009d4a:	0151      	lsls	r1, r2, #5
 8009d4c:	693a      	ldr	r2, [r7, #16]
 8009d4e:	440a      	add	r2, r1
 8009d50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009d54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009d58:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009d66:	4293      	cmp	r3, r2
 8009d68:	d902      	bls.n	8009d70 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009d6a:	2301      	movs	r3, #1
 8009d6c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d6e:	e056      	b.n	8009e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	781b      	ldrb	r3, [r3, #0]
 8009d74:	015a      	lsls	r2, r3, #5
 8009d76:	693b      	ldr	r3, [r7, #16]
 8009d78:	4413      	add	r3, r2
 8009d7a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009d84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009d88:	d0e7      	beq.n	8009d5a <USB_EPStopXfer+0x82>
 8009d8a:	e048      	b.n	8009e1e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	781b      	ldrb	r3, [r3, #0]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009da0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009da4:	d13b      	bne.n	8009e1e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009da6:	683b      	ldr	r3, [r7, #0]
 8009da8:	781b      	ldrb	r3, [r3, #0]
 8009daa:	015a      	lsls	r2, r3, #5
 8009dac:	693b      	ldr	r3, [r7, #16]
 8009dae:	4413      	add	r3, r2
 8009db0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	683a      	ldr	r2, [r7, #0]
 8009db8:	7812      	ldrb	r2, [r2, #0]
 8009dba:	0151      	lsls	r1, r2, #5
 8009dbc:	693a      	ldr	r2, [r7, #16]
 8009dbe:	440a      	add	r2, r1
 8009dc0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009dc4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009dc8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009dca:	683b      	ldr	r3, [r7, #0]
 8009dcc:	781b      	ldrb	r3, [r3, #0]
 8009dce:	015a      	lsls	r2, r3, #5
 8009dd0:	693b      	ldr	r3, [r7, #16]
 8009dd2:	4413      	add	r3, r2
 8009dd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009dd8:	681b      	ldr	r3, [r3, #0]
 8009dda:	683a      	ldr	r2, [r7, #0]
 8009ddc:	7812      	ldrb	r2, [r2, #0]
 8009dde:	0151      	lsls	r1, r2, #5
 8009de0:	693a      	ldr	r2, [r7, #16]
 8009de2:	440a      	add	r2, r1
 8009de4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009de8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009dec:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009dee:	68fb      	ldr	r3, [r7, #12]
 8009df0:	3301      	adds	r3, #1
 8009df2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009df4:	68fb      	ldr	r3, [r7, #12]
 8009df6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009dfa:	4293      	cmp	r3, r2
 8009dfc:	d902      	bls.n	8009e04 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009dfe:	2301      	movs	r3, #1
 8009e00:	75fb      	strb	r3, [r7, #23]
          break;
 8009e02:	e00c      	b.n	8009e1e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009e04:	683b      	ldr	r3, [r7, #0]
 8009e06:	781b      	ldrb	r3, [r3, #0]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009e18:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009e1c:	d0e7      	beq.n	8009dee <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009e1e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e20:	4618      	mov	r0, r3
 8009e22:	371c      	adds	r7, #28
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b089      	sub	sp, #36	@ 0x24
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	60f8      	str	r0, [r7, #12]
 8009e34:	60b9      	str	r1, [r7, #8]
 8009e36:	4611      	mov	r1, r2
 8009e38:	461a      	mov	r2, r3
 8009e3a:	460b      	mov	r3, r1
 8009e3c:	71fb      	strb	r3, [r7, #7]
 8009e3e:	4613      	mov	r3, r2
 8009e40:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009e4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d123      	bne.n	8009e9a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009e52:	88bb      	ldrh	r3, [r7, #4]
 8009e54:	3303      	adds	r3, #3
 8009e56:	089b      	lsrs	r3, r3, #2
 8009e58:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	61bb      	str	r3, [r7, #24]
 8009e5e:	e018      	b.n	8009e92 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009e60:	79fb      	ldrb	r3, [r7, #7]
 8009e62:	031a      	lsls	r2, r3, #12
 8009e64:	697b      	ldr	r3, [r7, #20]
 8009e66:	4413      	add	r3, r2
 8009e68:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009e6c:	461a      	mov	r2, r3
 8009e6e:	69fb      	ldr	r3, [r7, #28]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	3301      	adds	r3, #1
 8009e78:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e7a:	69fb      	ldr	r3, [r7, #28]
 8009e7c:	3301      	adds	r3, #1
 8009e7e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e80:	69fb      	ldr	r3, [r7, #28]
 8009e82:	3301      	adds	r3, #1
 8009e84:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009e86:	69fb      	ldr	r3, [r7, #28]
 8009e88:	3301      	adds	r3, #1
 8009e8a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	3301      	adds	r3, #1
 8009e90:	61bb      	str	r3, [r7, #24]
 8009e92:	69ba      	ldr	r2, [r7, #24]
 8009e94:	693b      	ldr	r3, [r7, #16]
 8009e96:	429a      	cmp	r2, r3
 8009e98:	d3e2      	bcc.n	8009e60 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	3724      	adds	r7, #36	@ 0x24
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ea8:	b480      	push	{r7}
 8009eaa:	b08b      	sub	sp, #44	@ 0x2c
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	60f8      	str	r0, [r7, #12]
 8009eb0:	60b9      	str	r1, [r7, #8]
 8009eb2:	4613      	mov	r3, r2
 8009eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009eba:	68bb      	ldr	r3, [r7, #8]
 8009ebc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ebe:	88fb      	ldrh	r3, [r7, #6]
 8009ec0:	089b      	lsrs	r3, r3, #2
 8009ec2:	b29b      	uxth	r3, r3
 8009ec4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009ec6:	88fb      	ldrh	r3, [r7, #6]
 8009ec8:	f003 0303 	and.w	r3, r3, #3
 8009ecc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009ece:	2300      	movs	r3, #0
 8009ed0:	623b      	str	r3, [r7, #32]
 8009ed2:	e014      	b.n	8009efe <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009ed4:	69bb      	ldr	r3, [r7, #24]
 8009ed6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eda:	681a      	ldr	r2, [r3, #0]
 8009edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ede:	601a      	str	r2, [r3, #0]
    pDest++;
 8009ee0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee2:	3301      	adds	r3, #1
 8009ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ee8:	3301      	adds	r3, #1
 8009eea:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009eec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eee:	3301      	adds	r3, #1
 8009ef0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009ef2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ef4:	3301      	adds	r3, #1
 8009ef6:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009ef8:	6a3b      	ldr	r3, [r7, #32]
 8009efa:	3301      	adds	r3, #1
 8009efc:	623b      	str	r3, [r7, #32]
 8009efe:	6a3a      	ldr	r2, [r7, #32]
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	429a      	cmp	r2, r3
 8009f04:	d3e6      	bcc.n	8009ed4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009f06:	8bfb      	ldrh	r3, [r7, #30]
 8009f08:	2b00      	cmp	r3, #0
 8009f0a:	d01e      	beq.n	8009f4a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009f0c:	2300      	movs	r3, #0
 8009f0e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009f10:	69bb      	ldr	r3, [r7, #24]
 8009f12:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f16:	461a      	mov	r2, r3
 8009f18:	f107 0310 	add.w	r3, r7, #16
 8009f1c:	6812      	ldr	r2, [r2, #0]
 8009f1e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009f20:	693a      	ldr	r2, [r7, #16]
 8009f22:	6a3b      	ldr	r3, [r7, #32]
 8009f24:	b2db      	uxtb	r3, r3
 8009f26:	00db      	lsls	r3, r3, #3
 8009f28:	fa22 f303 	lsr.w	r3, r2, r3
 8009f2c:	b2da      	uxtb	r2, r3
 8009f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f30:	701a      	strb	r2, [r3, #0]
      i++;
 8009f32:	6a3b      	ldr	r3, [r7, #32]
 8009f34:	3301      	adds	r3, #1
 8009f36:	623b      	str	r3, [r7, #32]
      pDest++;
 8009f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f3a:	3301      	adds	r3, #1
 8009f3c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009f3e:	8bfb      	ldrh	r3, [r7, #30]
 8009f40:	3b01      	subs	r3, #1
 8009f42:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009f44:	8bfb      	ldrh	r3, [r7, #30]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d1ea      	bne.n	8009f20 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009f4c:	4618      	mov	r0, r3
 8009f4e:	372c      	adds	r7, #44	@ 0x2c
 8009f50:	46bd      	mov	sp, r7
 8009f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f56:	4770      	bx	lr

08009f58 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b085      	sub	sp, #20
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f66:	683b      	ldr	r3, [r7, #0]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	785b      	ldrb	r3, [r3, #1]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d12c      	bne.n	8009fce <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009f74:	68bb      	ldr	r3, [r7, #8]
 8009f76:	015a      	lsls	r2, r3, #5
 8009f78:	68fb      	ldr	r3, [r7, #12]
 8009f7a:	4413      	add	r3, r2
 8009f7c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	db12      	blt.n	8009fac <USB_EPSetStall+0x54>
 8009f86:	68bb      	ldr	r3, [r7, #8]
 8009f88:	2b00      	cmp	r3, #0
 8009f8a:	d00f      	beq.n	8009fac <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009f8c:	68bb      	ldr	r3, [r7, #8]
 8009f8e:	015a      	lsls	r2, r3, #5
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	4413      	add	r3, r2
 8009f94:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	68ba      	ldr	r2, [r7, #8]
 8009f9c:	0151      	lsls	r1, r2, #5
 8009f9e:	68fa      	ldr	r2, [r7, #12]
 8009fa0:	440a      	add	r2, r1
 8009fa2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fa6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009faa:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009fac:	68bb      	ldr	r3, [r7, #8]
 8009fae:	015a      	lsls	r2, r3, #5
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	4413      	add	r3, r2
 8009fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	68ba      	ldr	r2, [r7, #8]
 8009fbc:	0151      	lsls	r1, r2, #5
 8009fbe:	68fa      	ldr	r2, [r7, #12]
 8009fc0:	440a      	add	r2, r1
 8009fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009fc6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009fca:	6013      	str	r3, [r2, #0]
 8009fcc:	e02b      	b.n	800a026 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009fce:	68bb      	ldr	r3, [r7, #8]
 8009fd0:	015a      	lsls	r2, r3, #5
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	4413      	add	r3, r2
 8009fd6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	db12      	blt.n	800a006 <USB_EPSetStall+0xae>
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d00f      	beq.n	800a006 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009fe6:	68bb      	ldr	r3, [r7, #8]
 8009fe8:	015a      	lsls	r2, r3, #5
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	4413      	add	r3, r2
 8009fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	68ba      	ldr	r2, [r7, #8]
 8009ff6:	0151      	lsls	r1, r2, #5
 8009ff8:	68fa      	ldr	r2, [r7, #12]
 8009ffa:	440a      	add	r2, r1
 8009ffc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a000:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a004:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	015a      	lsls	r2, r3, #5
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	4413      	add	r3, r2
 800a00e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	68ba      	ldr	r2, [r7, #8]
 800a016:	0151      	lsls	r1, r2, #5
 800a018:	68fa      	ldr	r2, [r7, #12]
 800a01a:	440a      	add	r2, r1
 800a01c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a020:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800a024:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a026:	2300      	movs	r3, #0
}
 800a028:	4618      	mov	r0, r3
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr

0800a034 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800a034:	b480      	push	{r7}
 800a036:	b085      	sub	sp, #20
 800a038:	af00      	add	r7, sp, #0
 800a03a:	6078      	str	r0, [r7, #4]
 800a03c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	781b      	ldrb	r3, [r3, #0]
 800a046:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800a048:	683b      	ldr	r3, [r7, #0]
 800a04a:	785b      	ldrb	r3, [r3, #1]
 800a04c:	2b01      	cmp	r3, #1
 800a04e:	d128      	bne.n	800a0a2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800a050:	68bb      	ldr	r3, [r7, #8]
 800a052:	015a      	lsls	r2, r3, #5
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	4413      	add	r3, r2
 800a058:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a05c:	681b      	ldr	r3, [r3, #0]
 800a05e:	68ba      	ldr	r2, [r7, #8]
 800a060:	0151      	lsls	r1, r2, #5
 800a062:	68fa      	ldr	r2, [r7, #12]
 800a064:	440a      	add	r2, r1
 800a066:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a06a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a06e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a070:	683b      	ldr	r3, [r7, #0]
 800a072:	791b      	ldrb	r3, [r3, #4]
 800a074:	2b03      	cmp	r3, #3
 800a076:	d003      	beq.n	800a080 <USB_EPClearStall+0x4c>
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	791b      	ldrb	r3, [r3, #4]
 800a07c:	2b02      	cmp	r3, #2
 800a07e:	d138      	bne.n	800a0f2 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	015a      	lsls	r2, r3, #5
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	4413      	add	r3, r2
 800a088:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68ba      	ldr	r2, [r7, #8]
 800a090:	0151      	lsls	r1, r2, #5
 800a092:	68fa      	ldr	r2, [r7, #12]
 800a094:	440a      	add	r2, r1
 800a096:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a09a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a09e:	6013      	str	r3, [r2, #0]
 800a0a0:	e027      	b.n	800a0f2 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800a0a2:	68bb      	ldr	r3, [r7, #8]
 800a0a4:	015a      	lsls	r2, r3, #5
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	4413      	add	r3, r2
 800a0aa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	68ba      	ldr	r2, [r7, #8]
 800a0b2:	0151      	lsls	r1, r2, #5
 800a0b4:	68fa      	ldr	r2, [r7, #12]
 800a0b6:	440a      	add	r2, r1
 800a0b8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0bc:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800a0c0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800a0c2:	683b      	ldr	r3, [r7, #0]
 800a0c4:	791b      	ldrb	r3, [r3, #4]
 800a0c6:	2b03      	cmp	r3, #3
 800a0c8:	d003      	beq.n	800a0d2 <USB_EPClearStall+0x9e>
 800a0ca:	683b      	ldr	r3, [r7, #0]
 800a0cc:	791b      	ldrb	r3, [r3, #4]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	d10f      	bne.n	800a0f2 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800a0d2:	68bb      	ldr	r3, [r7, #8]
 800a0d4:	015a      	lsls	r2, r3, #5
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	4413      	add	r3, r2
 800a0da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	68ba      	ldr	r2, [r7, #8]
 800a0e2:	0151      	lsls	r1, r2, #5
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	440a      	add	r2, r1
 800a0e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a0ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a0f0:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800a0f2:	2300      	movs	r3, #0
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3714      	adds	r7, #20
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fe:	4770      	bx	lr

0800a100 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a100:	b480      	push	{r7}
 800a102:	b085      	sub	sp, #20
 800a104:	af00      	add	r7, sp, #0
 800a106:	6078      	str	r0, [r7, #4]
 800a108:	460b      	mov	r3, r1
 800a10a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a116:	681b      	ldr	r3, [r3, #0]
 800a118:	68fa      	ldr	r2, [r7, #12]
 800a11a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a11e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800a122:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a12a:	681a      	ldr	r2, [r3, #0]
 800a12c:	78fb      	ldrb	r3, [r7, #3]
 800a12e:	011b      	lsls	r3, r3, #4
 800a130:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 800a134:	68f9      	ldr	r1, [r7, #12]
 800a136:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800a13a:	4313      	orrs	r3, r2
 800a13c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a13e:	2300      	movs	r3, #0
}
 800a140:	4618      	mov	r0, r3
 800a142:	3714      	adds	r7, #20
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	68fa      	ldr	r2, [r7, #12]
 800a162:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a166:	f023 0303 	bic.w	r3, r3, #3
 800a16a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a16c:	68fb      	ldr	r3, [r7, #12]
 800a16e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a172:	685b      	ldr	r3, [r3, #4]
 800a174:	68fa      	ldr	r2, [r7, #12]
 800a176:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a17a:	f023 0302 	bic.w	r3, r3, #2
 800a17e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a180:	2300      	movs	r3, #0
}
 800a182:	4618      	mov	r0, r3
 800a184:	3714      	adds	r7, #20
 800a186:	46bd      	mov	sp, r7
 800a188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18c:	4770      	bx	lr

0800a18e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800a18e:	b480      	push	{r7}
 800a190:	b085      	sub	sp, #20
 800a192:	af00      	add	r7, sp, #0
 800a194:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	68fa      	ldr	r2, [r7, #12]
 800a1a4:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800a1a8:	f023 0303 	bic.w	r3, r3, #3
 800a1ac:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a1b4:	685b      	ldr	r3, [r3, #4]
 800a1b6:	68fa      	ldr	r2, [r7, #12]
 800a1b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a1bc:	f043 0302 	orr.w	r3, r3, #2
 800a1c0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a1c2:	2300      	movs	r3, #0
}
 800a1c4:	4618      	mov	r0, r3
 800a1c6:	3714      	adds	r7, #20
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ce:	4770      	bx	lr

0800a1d0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800a1d0:	b480      	push	{r7}
 800a1d2:	b085      	sub	sp, #20
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	695b      	ldr	r3, [r3, #20]
 800a1dc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	699b      	ldr	r3, [r3, #24]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4013      	ands	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
}
 800a1ea:	4618      	mov	r0, r3
 800a1ec:	3714      	adds	r7, #20
 800a1ee:	46bd      	mov	sp, r7
 800a1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f4:	4770      	bx	lr

0800a1f6 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a1f6:	b480      	push	{r7}
 800a1f8:	b085      	sub	sp, #20
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a208:	699b      	ldr	r3, [r3, #24]
 800a20a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a212:	69db      	ldr	r3, [r3, #28]
 800a214:	68ba      	ldr	r2, [r7, #8]
 800a216:	4013      	ands	r3, r2
 800a218:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	0c1b      	lsrs	r3, r3, #16
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a23c:	699b      	ldr	r3, [r3, #24]
 800a23e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a246:	69db      	ldr	r3, [r3, #28]
 800a248:	68ba      	ldr	r2, [r7, #8]
 800a24a:	4013      	ands	r3, r2
 800a24c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a24e:	68bb      	ldr	r3, [r7, #8]
 800a250:	b29b      	uxth	r3, r3
}
 800a252:	4618      	mov	r0, r3
 800a254:	3714      	adds	r7, #20
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr

0800a25e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a25e:	b480      	push	{r7}
 800a260:	b085      	sub	sp, #20
 800a262:	af00      	add	r7, sp, #0
 800a264:	6078      	str	r0, [r7, #4]
 800a266:	460b      	mov	r3, r1
 800a268:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a26e:	78fb      	ldrb	r3, [r7, #3]
 800a270:	015a      	lsls	r2, r3, #5
 800a272:	68fb      	ldr	r3, [r7, #12]
 800a274:	4413      	add	r3, r2
 800a276:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a27a:	689b      	ldr	r3, [r3, #8]
 800a27c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a284:	695b      	ldr	r3, [r3, #20]
 800a286:	68ba      	ldr	r2, [r7, #8]
 800a288:	4013      	ands	r3, r2
 800a28a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a28c:	68bb      	ldr	r3, [r7, #8]
}
 800a28e:	4618      	mov	r0, r3
 800a290:	3714      	adds	r7, #20
 800a292:	46bd      	mov	sp, r7
 800a294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a298:	4770      	bx	lr

0800a29a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a29a:	b480      	push	{r7}
 800a29c:	b087      	sub	sp, #28
 800a29e:	af00      	add	r7, sp, #0
 800a2a0:	6078      	str	r0, [r7, #4]
 800a2a2:	460b      	mov	r3, r1
 800a2a4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a2aa:	697b      	ldr	r3, [r7, #20]
 800a2ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2b0:	691b      	ldr	r3, [r3, #16]
 800a2b2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a2b4:	697b      	ldr	r3, [r7, #20]
 800a2b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a2ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a2bc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a2be:	78fb      	ldrb	r3, [r7, #3]
 800a2c0:	f003 030f 	and.w	r3, r3, #15
 800a2c4:	68fa      	ldr	r2, [r7, #12]
 800a2c6:	fa22 f303 	lsr.w	r3, r2, r3
 800a2ca:	01db      	lsls	r3, r3, #7
 800a2cc:	b2db      	uxtb	r3, r3
 800a2ce:	693a      	ldr	r2, [r7, #16]
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a2d4:	78fb      	ldrb	r3, [r7, #3]
 800a2d6:	015a      	lsls	r2, r3, #5
 800a2d8:	697b      	ldr	r3, [r7, #20]
 800a2da:	4413      	add	r3, r2
 800a2dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a2e0:	689b      	ldr	r3, [r3, #8]
 800a2e2:	693a      	ldr	r2, [r7, #16]
 800a2e4:	4013      	ands	r3, r2
 800a2e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a2e8:	68bb      	ldr	r3, [r7, #8]
}
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	371c      	adds	r7, #28
 800a2ee:	46bd      	mov	sp, r7
 800a2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f4:	4770      	bx	lr

0800a2f6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800a2f6:	b480      	push	{r7}
 800a2f8:	b083      	sub	sp, #12
 800a2fa:	af00      	add	r7, sp, #0
 800a2fc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	695b      	ldr	r3, [r3, #20]
 800a302:	f003 0301 	and.w	r3, r3, #1
}
 800a306:	4618      	mov	r0, r3
 800a308:	370c      	adds	r7, #12
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr

0800a312 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 800a312:	b480      	push	{r7}
 800a314:	b085      	sub	sp, #20
 800a316:	af00      	add	r7, sp, #0
 800a318:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800a32c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800a330:	f023 0307 	bic.w	r3, r3, #7
 800a334:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	68fa      	ldr	r2, [r7, #12]
 800a340:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800a344:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a348:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a34a:	2300      	movs	r3, #0
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3714      	adds	r7, #20
 800a350:	46bd      	mov	sp, r7
 800a352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a356:	4770      	bx	lr

0800a358 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 800a358:	b480      	push	{r7}
 800a35a:	b087      	sub	sp, #28
 800a35c:	af00      	add	r7, sp, #0
 800a35e:	60f8      	str	r0, [r7, #12]
 800a360:	460b      	mov	r3, r1
 800a362:	607a      	str	r2, [r7, #4]
 800a364:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 800a36a:	68fb      	ldr	r3, [r7, #12]
 800a36c:	333c      	adds	r3, #60	@ 0x3c
 800a36e:	3304      	adds	r3, #4
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	4a26      	ldr	r2, [pc, #152]	@ (800a410 <USB_EP0_OutStart+0xb8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d90a      	bls.n	800a392 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a37c:	697b      	ldr	r3, [r7, #20]
 800a37e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a388:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a38c:	d101      	bne.n	800a392 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a38e:	2300      	movs	r3, #0
 800a390:	e037      	b.n	800a402 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a392:	697b      	ldr	r3, [r7, #20]
 800a394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a398:	461a      	mov	r2, r3
 800a39a:	2300      	movs	r3, #0
 800a39c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a39e:	697b      	ldr	r3, [r7, #20]
 800a3a0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3a4:	691b      	ldr	r3, [r3, #16]
 800a3a6:	697a      	ldr	r2, [r7, #20]
 800a3a8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3ac:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800a3b0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	697a      	ldr	r2, [r7, #20]
 800a3bc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3c0:	f043 0318 	orr.w	r3, r3, #24
 800a3c4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a3c6:	697b      	ldr	r3, [r7, #20]
 800a3c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3cc:	691b      	ldr	r3, [r3, #16]
 800a3ce:	697a      	ldr	r2, [r7, #20]
 800a3d0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3d4:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a3d8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a3da:	7afb      	ldrb	r3, [r7, #11]
 800a3dc:	2b01      	cmp	r3, #1
 800a3de:	d10f      	bne.n	800a400 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a3e0:	697b      	ldr	r3, [r7, #20]
 800a3e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3e6:	461a      	mov	r2, r3
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a3ec:	697b      	ldr	r3, [r7, #20]
 800a3ee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	697a      	ldr	r2, [r7, #20]
 800a3f6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a3fa:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a3fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a400:	2300      	movs	r3, #0
}
 800a402:	4618      	mov	r0, r3
 800a404:	371c      	adds	r7, #28
 800a406:	46bd      	mov	sp, r7
 800a408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40c:	4770      	bx	lr
 800a40e:	bf00      	nop
 800a410:	4f54300a 	.word	0x4f54300a

0800a414 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a414:	b480      	push	{r7}
 800a416:	b085      	sub	sp, #20
 800a418:	af00      	add	r7, sp, #0
 800a41a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a41c:	2300      	movs	r3, #0
 800a41e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	3301      	adds	r3, #1
 800a424:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a42c:	d901      	bls.n	800a432 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a42e:	2303      	movs	r3, #3
 800a430:	e01b      	b.n	800a46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	691b      	ldr	r3, [r3, #16]
 800a436:	2b00      	cmp	r3, #0
 800a438:	daf2      	bge.n	800a420 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a43a:	2300      	movs	r3, #0
 800a43c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	691b      	ldr	r3, [r3, #16]
 800a442:	f043 0201 	orr.w	r2, r3, #1
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	3301      	adds	r3, #1
 800a44e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a456:	d901      	bls.n	800a45c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a458:	2303      	movs	r3, #3
 800a45a:	e006      	b.n	800a46a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	691b      	ldr	r3, [r3, #16]
 800a460:	f003 0301 	and.w	r3, r3, #1
 800a464:	2b01      	cmp	r3, #1
 800a466:	d0f0      	beq.n	800a44a <USB_CoreReset+0x36>

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3714      	adds	r7, #20
 800a46e:	46bd      	mov	sp, r7
 800a470:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a474:	4770      	bx	lr
	...

0800a478 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800a478:	b580      	push	{r7, lr}
 800a47a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800a47c:	4904      	ldr	r1, [pc, #16]	@ (800a490 <MX_FATFS_Init+0x18>)
 800a47e:	4805      	ldr	r0, [pc, #20]	@ (800a494 <MX_FATFS_Init+0x1c>)
 800a480:	f004 f9ae 	bl	800e7e0 <FATFS_LinkDriver>
 800a484:	4603      	mov	r3, r0
 800a486:	461a      	mov	r2, r3
 800a488:	4b03      	ldr	r3, [pc, #12]	@ (800a498 <MX_FATFS_Init+0x20>)
 800a48a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800a48c:	bf00      	nop
 800a48e:	bd80      	pop	{r7, pc}
 800a490:	200003f0 	.word	0x200003f0
 800a494:	20000030 	.word	0x20000030
 800a498:	200003ec 	.word	0x200003ec

0800a49c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800a49c:	b480      	push	{r7}
 800a49e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800a4a0:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800a4a2:	4618      	mov	r0, r3
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	4603      	mov	r3, r0
 800a4b4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 800a4b6:	79fb      	ldrb	r3, [r7, #7]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f7f6 fa69 	bl	8000990 <SD_disk_initialize>
 800a4be:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END INIT */
}
 800a4c0:	4618      	mov	r0, r3
 800a4c2:	3708      	adds	r7, #8
 800a4c4:	46bd      	mov	sp, r7
 800a4c6:	bd80      	pop	{r7, pc}

0800a4c8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800a4c8:	b580      	push	{r7, lr}
 800a4ca:	b082      	sub	sp, #8
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	4603      	mov	r3, r0
 800a4d0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	f7f6 fb41 	bl	8000b5c <SD_disk_status>
 800a4da:	4603      	mov	r3, r0
//    Stat = STA_NOINIT;
//    return Stat;
  /* USER CODE END STATUS */
}
 800a4dc:	4618      	mov	r0, r3
 800a4de:	3708      	adds	r7, #8
 800a4e0:	46bd      	mov	sp, r7
 800a4e2:	bd80      	pop	{r7, pc}

0800a4e4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b084      	sub	sp, #16
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	60b9      	str	r1, [r7, #8]
 800a4ec:	607a      	str	r2, [r7, #4]
 800a4ee:	603b      	str	r3, [r7, #0]
 800a4f0:	4603      	mov	r3, r0
 800a4f2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 800a4f4:	7bf8      	ldrb	r0, [r7, #15]
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	687a      	ldr	r2, [r7, #4]
 800a4fa:	68b9      	ldr	r1, [r7, #8]
 800a4fc:	f7f6 fb44 	bl	8000b88 <SD_disk_read>
 800a500:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END READ */
}
 800a502:	4618      	mov	r0, r3
 800a504:	3710      	adds	r7, #16
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}

0800a50a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800a50a:	b580      	push	{r7, lr}
 800a50c:	b084      	sub	sp, #16
 800a50e:	af00      	add	r7, sp, #0
 800a510:	60b9      	str	r1, [r7, #8]
 800a512:	607a      	str	r2, [r7, #4]
 800a514:	603b      	str	r3, [r7, #0]
 800a516:	4603      	mov	r3, r0
 800a518:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 800a51a:	7bf8      	ldrb	r0, [r7, #15]
 800a51c:	683b      	ldr	r3, [r7, #0]
 800a51e:	687a      	ldr	r2, [r7, #4]
 800a520:	68b9      	ldr	r1, [r7, #8]
 800a522:	f7f6 fb9b 	bl	8000c5c <SD_disk_write>
 800a526:	4603      	mov	r3, r0
//    return RES_OK;
  /* USER CODE END WRITE */
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}

0800a530 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	4603      	mov	r3, r0
 800a538:	603a      	str	r2, [r7, #0]
 800a53a:	71fb      	strb	r3, [r7, #7]
 800a53c:	460b      	mov	r3, r1
 800a53e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 800a540:	79b9      	ldrb	r1, [r7, #6]
 800a542:	79fb      	ldrb	r3, [r7, #7]
 800a544:	683a      	ldr	r2, [r7, #0]
 800a546:	4618      	mov	r0, r3
 800a548:	f7f6 fc0c 	bl	8000d64 <SD_disk_ioctl>
 800a54c:	4603      	mov	r3, r0
//    DRESULT res = RES_ERROR;
//    return res;
  /* USER CODE END IOCTL */
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3708      	adds	r7, #8
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
	...

0800a558 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a564:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a568:	f004 fe16 	bl	800f198 <USBD_static_malloc>
 800a56c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	2b00      	cmp	r3, #0
 800a572:	d109      	bne.n	800a588 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	32b0      	adds	r2, #176	@ 0xb0
 800a57e:	2100      	movs	r1, #0
 800a580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a584:	2302      	movs	r3, #2
 800a586:	e0d4      	b.n	800a732 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a588:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a58c:	2100      	movs	r1, #0
 800a58e:	68f8      	ldr	r0, [r7, #12]
 800a590:	f004 ffc2 	bl	800f518 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	32b0      	adds	r2, #176	@ 0xb0
 800a59e:	68f9      	ldr	r1, [r7, #12]
 800a5a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	32b0      	adds	r2, #176	@ 0xb0
 800a5ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	7c1b      	ldrb	r3, [r3, #16]
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d138      	bne.n	800a632 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a5c0:	4b5e      	ldr	r3, [pc, #376]	@ (800a73c <USBD_CDC_Init+0x1e4>)
 800a5c2:	7819      	ldrb	r1, [r3, #0]
 800a5c4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5c8:	2202      	movs	r2, #2
 800a5ca:	6878      	ldr	r0, [r7, #4]
 800a5cc:	f004 fcc1 	bl	800ef52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a5d0:	4b5a      	ldr	r3, [pc, #360]	@ (800a73c <USBD_CDC_Init+0x1e4>)
 800a5d2:	781b      	ldrb	r3, [r3, #0]
 800a5d4:	f003 020f 	and.w	r2, r3, #15
 800a5d8:	6879      	ldr	r1, [r7, #4]
 800a5da:	4613      	mov	r3, r2
 800a5dc:	009b      	lsls	r3, r3, #2
 800a5de:	4413      	add	r3, r2
 800a5e0:	009b      	lsls	r3, r3, #2
 800a5e2:	440b      	add	r3, r1
 800a5e4:	3324      	adds	r3, #36	@ 0x24
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a5ea:	4b55      	ldr	r3, [pc, #340]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a5ec:	7819      	ldrb	r1, [r3, #0]
 800a5ee:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a5f2:	2202      	movs	r2, #2
 800a5f4:	6878      	ldr	r0, [r7, #4]
 800a5f6:	f004 fcac 	bl	800ef52 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a5fa:	4b51      	ldr	r3, [pc, #324]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	f003 020f 	and.w	r2, r3, #15
 800a602:	6879      	ldr	r1, [r7, #4]
 800a604:	4613      	mov	r3, r2
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	4413      	add	r3, r2
 800a60a:	009b      	lsls	r3, r3, #2
 800a60c:	440b      	add	r3, r1
 800a60e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a612:	2201      	movs	r2, #1
 800a614:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a616:	4b4b      	ldr	r3, [pc, #300]	@ (800a744 <USBD_CDC_Init+0x1ec>)
 800a618:	781b      	ldrb	r3, [r3, #0]
 800a61a:	f003 020f 	and.w	r2, r3, #15
 800a61e:	6879      	ldr	r1, [r7, #4]
 800a620:	4613      	mov	r3, r2
 800a622:	009b      	lsls	r3, r3, #2
 800a624:	4413      	add	r3, r2
 800a626:	009b      	lsls	r3, r3, #2
 800a628:	440b      	add	r3, r1
 800a62a:	3326      	adds	r3, #38	@ 0x26
 800a62c:	2210      	movs	r2, #16
 800a62e:	801a      	strh	r2, [r3, #0]
 800a630:	e035      	b.n	800a69e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a632:	4b42      	ldr	r3, [pc, #264]	@ (800a73c <USBD_CDC_Init+0x1e4>)
 800a634:	7819      	ldrb	r1, [r3, #0]
 800a636:	2340      	movs	r3, #64	@ 0x40
 800a638:	2202      	movs	r2, #2
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f004 fc89 	bl	800ef52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a640:	4b3e      	ldr	r3, [pc, #248]	@ (800a73c <USBD_CDC_Init+0x1e4>)
 800a642:	781b      	ldrb	r3, [r3, #0]
 800a644:	f003 020f 	and.w	r2, r3, #15
 800a648:	6879      	ldr	r1, [r7, #4]
 800a64a:	4613      	mov	r3, r2
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4413      	add	r3, r2
 800a650:	009b      	lsls	r3, r3, #2
 800a652:	440b      	add	r3, r1
 800a654:	3324      	adds	r3, #36	@ 0x24
 800a656:	2201      	movs	r2, #1
 800a658:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a65a:	4b39      	ldr	r3, [pc, #228]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a65c:	7819      	ldrb	r1, [r3, #0]
 800a65e:	2340      	movs	r3, #64	@ 0x40
 800a660:	2202      	movs	r2, #2
 800a662:	6878      	ldr	r0, [r7, #4]
 800a664:	f004 fc75 	bl	800ef52 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a668:	4b35      	ldr	r3, [pc, #212]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a66a:	781b      	ldrb	r3, [r3, #0]
 800a66c:	f003 020f 	and.w	r2, r3, #15
 800a670:	6879      	ldr	r1, [r7, #4]
 800a672:	4613      	mov	r3, r2
 800a674:	009b      	lsls	r3, r3, #2
 800a676:	4413      	add	r3, r2
 800a678:	009b      	lsls	r3, r3, #2
 800a67a:	440b      	add	r3, r1
 800a67c:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a680:	2201      	movs	r2, #1
 800a682:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a684:	4b2f      	ldr	r3, [pc, #188]	@ (800a744 <USBD_CDC_Init+0x1ec>)
 800a686:	781b      	ldrb	r3, [r3, #0]
 800a688:	f003 020f 	and.w	r2, r3, #15
 800a68c:	6879      	ldr	r1, [r7, #4]
 800a68e:	4613      	mov	r3, r2
 800a690:	009b      	lsls	r3, r3, #2
 800a692:	4413      	add	r3, r2
 800a694:	009b      	lsls	r3, r3, #2
 800a696:	440b      	add	r3, r1
 800a698:	3326      	adds	r3, #38	@ 0x26
 800a69a:	2210      	movs	r2, #16
 800a69c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a69e:	4b29      	ldr	r3, [pc, #164]	@ (800a744 <USBD_CDC_Init+0x1ec>)
 800a6a0:	7819      	ldrb	r1, [r3, #0]
 800a6a2:	2308      	movs	r3, #8
 800a6a4:	2203      	movs	r2, #3
 800a6a6:	6878      	ldr	r0, [r7, #4]
 800a6a8:	f004 fc53 	bl	800ef52 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a6ac:	4b25      	ldr	r3, [pc, #148]	@ (800a744 <USBD_CDC_Init+0x1ec>)
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	f003 020f 	and.w	r2, r3, #15
 800a6b4:	6879      	ldr	r1, [r7, #4]
 800a6b6:	4613      	mov	r3, r2
 800a6b8:	009b      	lsls	r3, r3, #2
 800a6ba:	4413      	add	r3, r2
 800a6bc:	009b      	lsls	r3, r3, #2
 800a6be:	440b      	add	r3, r1
 800a6c0:	3324      	adds	r3, #36	@ 0x24
 800a6c2:	2201      	movs	r2, #1
 800a6c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2200      	movs	r2, #0
 800a6ca:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	33b0      	adds	r3, #176	@ 0xb0
 800a6d8:	009b      	lsls	r3, r3, #2
 800a6da:	4413      	add	r3, r2
 800a6dc:	685b      	ldr	r3, [r3, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	2200      	movs	r2, #0
 800a6ee:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a6fc:	2302      	movs	r3, #2
 800a6fe:	e018      	b.n	800a732 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	7c1b      	ldrb	r3, [r3, #16]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d10a      	bne.n	800a71e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a708:	4b0d      	ldr	r3, [pc, #52]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a70a:	7819      	ldrb	r1, [r3, #0]
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a716:	6878      	ldr	r0, [r7, #4]
 800a718:	f004 fd0a 	bl	800f130 <USBD_LL_PrepareReceive>
 800a71c:	e008      	b.n	800a730 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a71e:	4b08      	ldr	r3, [pc, #32]	@ (800a740 <USBD_CDC_Init+0x1e8>)
 800a720:	7819      	ldrb	r1, [r3, #0]
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a728:	2340      	movs	r3, #64	@ 0x40
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f004 fd00 	bl	800f130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
 800a73a:	bf00      	nop
 800a73c:	200000cb 	.word	0x200000cb
 800a740:	200000cc 	.word	0x200000cc
 800a744:	200000cd 	.word	0x200000cd

0800a748 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	460b      	mov	r3, r1
 800a752:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a754:	4b3a      	ldr	r3, [pc, #232]	@ (800a840 <USBD_CDC_DeInit+0xf8>)
 800a756:	781b      	ldrb	r3, [r3, #0]
 800a758:	4619      	mov	r1, r3
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	f004 fc1f 	bl	800ef9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a760:	4b37      	ldr	r3, [pc, #220]	@ (800a840 <USBD_CDC_DeInit+0xf8>)
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	f003 020f 	and.w	r2, r3, #15
 800a768:	6879      	ldr	r1, [r7, #4]
 800a76a:	4613      	mov	r3, r2
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	4413      	add	r3, r2
 800a770:	009b      	lsls	r3, r3, #2
 800a772:	440b      	add	r3, r1
 800a774:	3324      	adds	r3, #36	@ 0x24
 800a776:	2200      	movs	r2, #0
 800a778:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a77a:	4b32      	ldr	r3, [pc, #200]	@ (800a844 <USBD_CDC_DeInit+0xfc>)
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	4619      	mov	r1, r3
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f004 fc0c 	bl	800ef9e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a786:	4b2f      	ldr	r3, [pc, #188]	@ (800a844 <USBD_CDC_DeInit+0xfc>)
 800a788:	781b      	ldrb	r3, [r3, #0]
 800a78a:	f003 020f 	and.w	r2, r3, #15
 800a78e:	6879      	ldr	r1, [r7, #4]
 800a790:	4613      	mov	r3, r2
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	4413      	add	r3, r2
 800a796:	009b      	lsls	r3, r3, #2
 800a798:	440b      	add	r3, r1
 800a79a:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800a79e:	2200      	movs	r2, #0
 800a7a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a7a2:	4b29      	ldr	r3, [pc, #164]	@ (800a848 <USBD_CDC_DeInit+0x100>)
 800a7a4:	781b      	ldrb	r3, [r3, #0]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f004 fbf8 	bl	800ef9e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a7ae:	4b26      	ldr	r3, [pc, #152]	@ (800a848 <USBD_CDC_DeInit+0x100>)
 800a7b0:	781b      	ldrb	r3, [r3, #0]
 800a7b2:	f003 020f 	and.w	r2, r3, #15
 800a7b6:	6879      	ldr	r1, [r7, #4]
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	009b      	lsls	r3, r3, #2
 800a7bc:	4413      	add	r3, r2
 800a7be:	009b      	lsls	r3, r3, #2
 800a7c0:	440b      	add	r3, r1
 800a7c2:	3324      	adds	r3, #36	@ 0x24
 800a7c4:	2200      	movs	r2, #0
 800a7c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a7c8:	4b1f      	ldr	r3, [pc, #124]	@ (800a848 <USBD_CDC_DeInit+0x100>)
 800a7ca:	781b      	ldrb	r3, [r3, #0]
 800a7cc:	f003 020f 	and.w	r2, r3, #15
 800a7d0:	6879      	ldr	r1, [r7, #4]
 800a7d2:	4613      	mov	r3, r2
 800a7d4:	009b      	lsls	r3, r3, #2
 800a7d6:	4413      	add	r3, r2
 800a7d8:	009b      	lsls	r3, r3, #2
 800a7da:	440b      	add	r3, r1
 800a7dc:	3326      	adds	r3, #38	@ 0x26
 800a7de:	2200      	movs	r2, #0
 800a7e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	32b0      	adds	r2, #176	@ 0xb0
 800a7ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d01f      	beq.n	800a834 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	33b0      	adds	r3, #176	@ 0xb0
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	4413      	add	r3, r2
 800a802:	685b      	ldr	r3, [r3, #4]
 800a804:	685b      	ldr	r3, [r3, #4]
 800a806:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	32b0      	adds	r2, #176	@ 0xb0
 800a812:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a816:	4618      	mov	r0, r3
 800a818:	f004 fccc 	bl	800f1b4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	32b0      	adds	r2, #176	@ 0xb0
 800a826:	2100      	movs	r1, #0
 800a828:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2200      	movs	r2, #0
 800a830:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a834:	2300      	movs	r3, #0
}
 800a836:	4618      	mov	r0, r3
 800a838:	3708      	adds	r7, #8
 800a83a:	46bd      	mov	sp, r7
 800a83c:	bd80      	pop	{r7, pc}
 800a83e:	bf00      	nop
 800a840:	200000cb 	.word	0x200000cb
 800a844:	200000cc 	.word	0x200000cc
 800a848:	200000cd 	.word	0x200000cd

0800a84c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b086      	sub	sp, #24
 800a850:	af00      	add	r7, sp, #0
 800a852:	6078      	str	r0, [r7, #4]
 800a854:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	32b0      	adds	r2, #176	@ 0xb0
 800a860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a864:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a866:	2300      	movs	r3, #0
 800a868:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a86a:	2300      	movs	r3, #0
 800a86c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a872:	693b      	ldr	r3, [r7, #16]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d101      	bne.n	800a87c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a878:	2303      	movs	r3, #3
 800a87a:	e0bf      	b.n	800a9fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a87c:	683b      	ldr	r3, [r7, #0]
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a884:	2b00      	cmp	r3, #0
 800a886:	d050      	beq.n	800a92a <USBD_CDC_Setup+0xde>
 800a888:	2b20      	cmp	r3, #32
 800a88a:	f040 80af 	bne.w	800a9ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	88db      	ldrh	r3, [r3, #6]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d03a      	beq.n	800a90c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	781b      	ldrb	r3, [r3, #0]
 800a89a:	b25b      	sxtb	r3, r3
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	da1b      	bge.n	800a8d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8a6:	687a      	ldr	r2, [r7, #4]
 800a8a8:	33b0      	adds	r3, #176	@ 0xb0
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	4413      	add	r3, r2
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	689b      	ldr	r3, [r3, #8]
 800a8b2:	683a      	ldr	r2, [r7, #0]
 800a8b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a8b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a8b8:	683a      	ldr	r2, [r7, #0]
 800a8ba:	88d2      	ldrh	r2, [r2, #6]
 800a8bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a8be:	683b      	ldr	r3, [r7, #0]
 800a8c0:	88db      	ldrh	r3, [r3, #6]
 800a8c2:	2b07      	cmp	r3, #7
 800a8c4:	bf28      	it	cs
 800a8c6:	2307      	movcs	r3, #7
 800a8c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a8ca:	693b      	ldr	r3, [r7, #16]
 800a8cc:	89fa      	ldrh	r2, [r7, #14]
 800a8ce:	4619      	mov	r1, r3
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f001 fd93 	bl	800c3fc <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a8d6:	e090      	b.n	800a9fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	785a      	ldrb	r2, [r3, #1]
 800a8dc:	693b      	ldr	r3, [r7, #16]
 800a8de:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	88db      	ldrh	r3, [r3, #6]
 800a8e6:	2b3f      	cmp	r3, #63	@ 0x3f
 800a8e8:	d803      	bhi.n	800a8f2 <USBD_CDC_Setup+0xa6>
 800a8ea:	683b      	ldr	r3, [r7, #0]
 800a8ec:	88db      	ldrh	r3, [r3, #6]
 800a8ee:	b2da      	uxtb	r2, r3
 800a8f0:	e000      	b.n	800a8f4 <USBD_CDC_Setup+0xa8>
 800a8f2:	2240      	movs	r2, #64	@ 0x40
 800a8f4:	693b      	ldr	r3, [r7, #16]
 800a8f6:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a8fa:	6939      	ldr	r1, [r7, #16]
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a902:	461a      	mov	r2, r3
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f001 fda5 	bl	800c454 <USBD_CtlPrepareRx>
      break;
 800a90a:	e076      	b.n	800a9fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a912:	687a      	ldr	r2, [r7, #4]
 800a914:	33b0      	adds	r3, #176	@ 0xb0
 800a916:	009b      	lsls	r3, r3, #2
 800a918:	4413      	add	r3, r2
 800a91a:	685b      	ldr	r3, [r3, #4]
 800a91c:	689b      	ldr	r3, [r3, #8]
 800a91e:	683a      	ldr	r2, [r7, #0]
 800a920:	7850      	ldrb	r0, [r2, #1]
 800a922:	2200      	movs	r2, #0
 800a924:	6839      	ldr	r1, [r7, #0]
 800a926:	4798      	blx	r3
      break;
 800a928:	e067      	b.n	800a9fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	785b      	ldrb	r3, [r3, #1]
 800a92e:	2b0b      	cmp	r3, #11
 800a930:	d851      	bhi.n	800a9d6 <USBD_CDC_Setup+0x18a>
 800a932:	a201      	add	r2, pc, #4	@ (adr r2, 800a938 <USBD_CDC_Setup+0xec>)
 800a934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a938:	0800a969 	.word	0x0800a969
 800a93c:	0800a9e5 	.word	0x0800a9e5
 800a940:	0800a9d7 	.word	0x0800a9d7
 800a944:	0800a9d7 	.word	0x0800a9d7
 800a948:	0800a9d7 	.word	0x0800a9d7
 800a94c:	0800a9d7 	.word	0x0800a9d7
 800a950:	0800a9d7 	.word	0x0800a9d7
 800a954:	0800a9d7 	.word	0x0800a9d7
 800a958:	0800a9d7 	.word	0x0800a9d7
 800a95c:	0800a9d7 	.word	0x0800a9d7
 800a960:	0800a993 	.word	0x0800a993
 800a964:	0800a9bd 	.word	0x0800a9bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a96e:	b2db      	uxtb	r3, r3
 800a970:	2b03      	cmp	r3, #3
 800a972:	d107      	bne.n	800a984 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a974:	f107 030a 	add.w	r3, r7, #10
 800a978:	2202      	movs	r2, #2
 800a97a:	4619      	mov	r1, r3
 800a97c:	6878      	ldr	r0, [r7, #4]
 800a97e:	f001 fd3d 	bl	800c3fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a982:	e032      	b.n	800a9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a984:	6839      	ldr	r1, [r7, #0]
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f001 fcbb 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800a98c:	2303      	movs	r3, #3
 800a98e:	75fb      	strb	r3, [r7, #23]
          break;
 800a990:	e02b      	b.n	800a9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a998:	b2db      	uxtb	r3, r3
 800a99a:	2b03      	cmp	r3, #3
 800a99c:	d107      	bne.n	800a9ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a99e:	f107 030d 	add.w	r3, r7, #13
 800a9a2:	2201      	movs	r2, #1
 800a9a4:	4619      	mov	r1, r3
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	f001 fd28 	bl	800c3fc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a9ac:	e01d      	b.n	800a9ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a9ae:	6839      	ldr	r1, [r7, #0]
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f001 fca6 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9b6:	2303      	movs	r3, #3
 800a9b8:	75fb      	strb	r3, [r7, #23]
          break;
 800a9ba:	e016      	b.n	800a9ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9c2:	b2db      	uxtb	r3, r3
 800a9c4:	2b03      	cmp	r3, #3
 800a9c6:	d00f      	beq.n	800a9e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a9c8:	6839      	ldr	r1, [r7, #0]
 800a9ca:	6878      	ldr	r0, [r7, #4]
 800a9cc:	f001 fc99 	bl	800c302 <USBD_CtlError>
            ret = USBD_FAIL;
 800a9d0:	2303      	movs	r3, #3
 800a9d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a9d4:	e008      	b.n	800a9e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a9d6:	6839      	ldr	r1, [r7, #0]
 800a9d8:	6878      	ldr	r0, [r7, #4]
 800a9da:	f001 fc92 	bl	800c302 <USBD_CtlError>
          ret = USBD_FAIL;
 800a9de:	2303      	movs	r3, #3
 800a9e0:	75fb      	strb	r3, [r7, #23]
          break;
 800a9e2:	e002      	b.n	800a9ea <USBD_CDC_Setup+0x19e>
          break;
 800a9e4:	bf00      	nop
 800a9e6:	e008      	b.n	800a9fa <USBD_CDC_Setup+0x1ae>
          break;
 800a9e8:	bf00      	nop
      }
      break;
 800a9ea:	e006      	b.n	800a9fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a9ec:	6839      	ldr	r1, [r7, #0]
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f001 fc87 	bl	800c302 <USBD_CtlError>
      ret = USBD_FAIL;
 800a9f4:	2303      	movs	r3, #3
 800a9f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a9f8:	bf00      	nop
  }

  return (uint8_t)ret;
 800a9fa:	7dfb      	ldrb	r3, [r7, #23]
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	3718      	adds	r7, #24
 800aa00:	46bd      	mov	sp, r7
 800aa02:	bd80      	pop	{r7, pc}

0800aa04 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800aa04:	b580      	push	{r7, lr}
 800aa06:	b084      	sub	sp, #16
 800aa08:	af00      	add	r7, sp, #0
 800aa0a:	6078      	str	r0, [r7, #4]
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800aa16:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	32b0      	adds	r2, #176	@ 0xb0
 800aa22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d101      	bne.n	800aa2e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800aa2a:	2303      	movs	r3, #3
 800aa2c:	e065      	b.n	800aafa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	32b0      	adds	r2, #176	@ 0xb0
 800aa38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa3c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa3e:	78fb      	ldrb	r3, [r7, #3]
 800aa40:	f003 020f 	and.w	r2, r3, #15
 800aa44:	6879      	ldr	r1, [r7, #4]
 800aa46:	4613      	mov	r3, r2
 800aa48:	009b      	lsls	r3, r3, #2
 800aa4a:	4413      	add	r3, r2
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	440b      	add	r3, r1
 800aa50:	3318      	adds	r3, #24
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d02f      	beq.n	800aab8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800aa58:	78fb      	ldrb	r3, [r7, #3]
 800aa5a:	f003 020f 	and.w	r2, r3, #15
 800aa5e:	6879      	ldr	r1, [r7, #4]
 800aa60:	4613      	mov	r3, r2
 800aa62:	009b      	lsls	r3, r3, #2
 800aa64:	4413      	add	r3, r2
 800aa66:	009b      	lsls	r3, r3, #2
 800aa68:	440b      	add	r3, r1
 800aa6a:	3318      	adds	r3, #24
 800aa6c:	681a      	ldr	r2, [r3, #0]
 800aa6e:	78fb      	ldrb	r3, [r7, #3]
 800aa70:	f003 010f 	and.w	r1, r3, #15
 800aa74:	68f8      	ldr	r0, [r7, #12]
 800aa76:	460b      	mov	r3, r1
 800aa78:	00db      	lsls	r3, r3, #3
 800aa7a:	440b      	add	r3, r1
 800aa7c:	009b      	lsls	r3, r3, #2
 800aa7e:	4403      	add	r3, r0
 800aa80:	331c      	adds	r3, #28
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	fbb2 f1f3 	udiv	r1, r2, r3
 800aa88:	fb01 f303 	mul.w	r3, r1, r3
 800aa8c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d112      	bne.n	800aab8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800aa92:	78fb      	ldrb	r3, [r7, #3]
 800aa94:	f003 020f 	and.w	r2, r3, #15
 800aa98:	6879      	ldr	r1, [r7, #4]
 800aa9a:	4613      	mov	r3, r2
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	4413      	add	r3, r2
 800aaa0:	009b      	lsls	r3, r3, #2
 800aaa2:	440b      	add	r3, r1
 800aaa4:	3318      	adds	r3, #24
 800aaa6:	2200      	movs	r2, #0
 800aaa8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800aaaa:	78f9      	ldrb	r1, [r7, #3]
 800aaac:	2300      	movs	r3, #0
 800aaae:	2200      	movs	r2, #0
 800aab0:	6878      	ldr	r0, [r7, #4]
 800aab2:	f004 fb1c 	bl	800f0ee <USBD_LL_Transmit>
 800aab6:	e01f      	b.n	800aaf8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	2200      	movs	r2, #0
 800aabc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	33b0      	adds	r3, #176	@ 0xb0
 800aaca:	009b      	lsls	r3, r3, #2
 800aacc:	4413      	add	r3, r2
 800aace:	685b      	ldr	r3, [r3, #4]
 800aad0:	691b      	ldr	r3, [r3, #16]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d010      	beq.n	800aaf8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800aadc:	687a      	ldr	r2, [r7, #4]
 800aade:	33b0      	adds	r3, #176	@ 0xb0
 800aae0:	009b      	lsls	r3, r3, #2
 800aae2:	4413      	add	r3, r2
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	691b      	ldr	r3, [r3, #16]
 800aae8:	68ba      	ldr	r2, [r7, #8]
 800aaea:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800aaee:	68ba      	ldr	r2, [r7, #8]
 800aaf0:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800aaf4:	78fa      	ldrb	r2, [r7, #3]
 800aaf6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800aaf8:	2300      	movs	r3, #0
}
 800aafa:	4618      	mov	r0, r3
 800aafc:	3710      	adds	r7, #16
 800aafe:	46bd      	mov	sp, r7
 800ab00:	bd80      	pop	{r7, pc}

0800ab02 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ab02:	b580      	push	{r7, lr}
 800ab04:	b084      	sub	sp, #16
 800ab06:	af00      	add	r7, sp, #0
 800ab08:	6078      	str	r0, [r7, #4]
 800ab0a:	460b      	mov	r3, r1
 800ab0c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	32b0      	adds	r2, #176	@ 0xb0
 800ab18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab1c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	32b0      	adds	r2, #176	@ 0xb0
 800ab28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d101      	bne.n	800ab34 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800ab30:	2303      	movs	r3, #3
 800ab32:	e01a      	b.n	800ab6a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800ab34:	78fb      	ldrb	r3, [r7, #3]
 800ab36:	4619      	mov	r1, r3
 800ab38:	6878      	ldr	r0, [r7, #4]
 800ab3a:	f004 fb1a 	bl	800f172 <USBD_LL_GetRxDataSize>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab4c:	687a      	ldr	r2, [r7, #4]
 800ab4e:	33b0      	adds	r3, #176	@ 0xb0
 800ab50:	009b      	lsls	r3, r3, #2
 800ab52:	4413      	add	r3, r2
 800ab54:	685b      	ldr	r3, [r3, #4]
 800ab56:	68db      	ldr	r3, [r3, #12]
 800ab58:	68fa      	ldr	r2, [r7, #12]
 800ab5a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800ab64:	4611      	mov	r1, r2
 800ab66:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800ab68:	2300      	movs	r3, #0
}
 800ab6a:	4618      	mov	r0, r3
 800ab6c:	3710      	adds	r7, #16
 800ab6e:	46bd      	mov	sp, r7
 800ab70:	bd80      	pop	{r7, pc}

0800ab72 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800ab72:	b580      	push	{r7, lr}
 800ab74:	b084      	sub	sp, #16
 800ab76:	af00      	add	r7, sp, #0
 800ab78:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	32b0      	adds	r2, #176	@ 0xb0
 800ab84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab88:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d101      	bne.n	800ab94 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800ab90:	2303      	movs	r3, #3
 800ab92:	e024      	b.n	800abde <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	33b0      	adds	r3, #176	@ 0xb0
 800ab9e:	009b      	lsls	r3, r3, #2
 800aba0:	4413      	add	r3, r2
 800aba2:	685b      	ldr	r3, [r3, #4]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d019      	beq.n	800abdc <USBD_CDC_EP0_RxReady+0x6a>
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800abae:	2bff      	cmp	r3, #255	@ 0xff
 800abb0:	d014      	beq.n	800abdc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800abb8:	687a      	ldr	r2, [r7, #4]
 800abba:	33b0      	adds	r3, #176	@ 0xb0
 800abbc:	009b      	lsls	r3, r3, #2
 800abbe:	4413      	add	r3, r2
 800abc0:	685b      	ldr	r3, [r3, #4]
 800abc2:	689b      	ldr	r3, [r3, #8]
 800abc4:	68fa      	ldr	r2, [r7, #12]
 800abc6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800abca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800abcc:	68fa      	ldr	r2, [r7, #12]
 800abce:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800abd2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	22ff      	movs	r2, #255	@ 0xff
 800abd8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800abdc:	2300      	movs	r3, #0
}
 800abde:	4618      	mov	r0, r3
 800abe0:	3710      	adds	r7, #16
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd80      	pop	{r7, pc}
	...

0800abe8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800abe8:	b580      	push	{r7, lr}
 800abea:	b086      	sub	sp, #24
 800abec:	af00      	add	r7, sp, #0
 800abee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800abf0:	2182      	movs	r1, #130	@ 0x82
 800abf2:	4818      	ldr	r0, [pc, #96]	@ (800ac54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abf4:	f000 fd4f 	bl	800b696 <USBD_GetEpDesc>
 800abf8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800abfa:	2101      	movs	r1, #1
 800abfc:	4815      	ldr	r0, [pc, #84]	@ (800ac54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800abfe:	f000 fd4a 	bl	800b696 <USBD_GetEpDesc>
 800ac02:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac04:	2181      	movs	r1, #129	@ 0x81
 800ac06:	4813      	ldr	r0, [pc, #76]	@ (800ac54 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ac08:	f000 fd45 	bl	800b696 <USBD_GetEpDesc>
 800ac0c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac0e:	697b      	ldr	r3, [r7, #20]
 800ac10:	2b00      	cmp	r3, #0
 800ac12:	d002      	beq.n	800ac1a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ac14:	697b      	ldr	r3, [r7, #20]
 800ac16:	2210      	movs	r2, #16
 800ac18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac1a:	693b      	ldr	r3, [r7, #16]
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d006      	beq.n	800ac2e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac20:	693b      	ldr	r3, [r7, #16]
 800ac22:	2200      	movs	r2, #0
 800ac24:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac28:	711a      	strb	r2, [r3, #4]
 800ac2a:	2200      	movs	r2, #0
 800ac2c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d006      	beq.n	800ac42 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ac3c:	711a      	strb	r2, [r3, #4]
 800ac3e:	2200      	movs	r2, #0
 800ac40:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	2243      	movs	r2, #67	@ 0x43
 800ac46:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ac48:	4b02      	ldr	r3, [pc, #8]	@ (800ac54 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ac4a:	4618      	mov	r0, r3
 800ac4c:	3718      	adds	r7, #24
 800ac4e:	46bd      	mov	sp, r7
 800ac50:	bd80      	pop	{r7, pc}
 800ac52:	bf00      	nop
 800ac54:	20000088 	.word	0x20000088

0800ac58 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ac58:	b580      	push	{r7, lr}
 800ac5a:	b086      	sub	sp, #24
 800ac5c:	af00      	add	r7, sp, #0
 800ac5e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ac60:	2182      	movs	r1, #130	@ 0x82
 800ac62:	4818      	ldr	r0, [pc, #96]	@ (800acc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac64:	f000 fd17 	bl	800b696 <USBD_GetEpDesc>
 800ac68:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ac6a:	2101      	movs	r1, #1
 800ac6c:	4815      	ldr	r0, [pc, #84]	@ (800acc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac6e:	f000 fd12 	bl	800b696 <USBD_GetEpDesc>
 800ac72:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ac74:	2181      	movs	r1, #129	@ 0x81
 800ac76:	4813      	ldr	r0, [pc, #76]	@ (800acc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ac78:	f000 fd0d 	bl	800b696 <USBD_GetEpDesc>
 800ac7c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d002      	beq.n	800ac8a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ac84:	697b      	ldr	r3, [r7, #20]
 800ac86:	2210      	movs	r2, #16
 800ac88:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ac8a:	693b      	ldr	r3, [r7, #16]
 800ac8c:	2b00      	cmp	r3, #0
 800ac8e:	d006      	beq.n	800ac9e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	2200      	movs	r2, #0
 800ac94:	711a      	strb	r2, [r3, #4]
 800ac96:	2200      	movs	r2, #0
 800ac98:	f042 0202 	orr.w	r2, r2, #2
 800ac9c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ac9e:	68fb      	ldr	r3, [r7, #12]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d006      	beq.n	800acb2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	2200      	movs	r2, #0
 800aca8:	711a      	strb	r2, [r3, #4]
 800acaa:	2200      	movs	r2, #0
 800acac:	f042 0202 	orr.w	r2, r2, #2
 800acb0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2243      	movs	r2, #67	@ 0x43
 800acb6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800acb8:	4b02      	ldr	r3, [pc, #8]	@ (800acc4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3718      	adds	r7, #24
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
 800acc2:	bf00      	nop
 800acc4:	20000088 	.word	0x20000088

0800acc8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b086      	sub	sp, #24
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800acd0:	2182      	movs	r1, #130	@ 0x82
 800acd2:	4818      	ldr	r0, [pc, #96]	@ (800ad34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acd4:	f000 fcdf 	bl	800b696 <USBD_GetEpDesc>
 800acd8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800acda:	2101      	movs	r1, #1
 800acdc:	4815      	ldr	r0, [pc, #84]	@ (800ad34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800acde:	f000 fcda 	bl	800b696 <USBD_GetEpDesc>
 800ace2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ace4:	2181      	movs	r1, #129	@ 0x81
 800ace6:	4813      	ldr	r0, [pc, #76]	@ (800ad34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800ace8:	f000 fcd5 	bl	800b696 <USBD_GetEpDesc>
 800acec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d002      	beq.n	800acfa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800acf4:	697b      	ldr	r3, [r7, #20]
 800acf6:	2210      	movs	r2, #16
 800acf8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d006      	beq.n	800ad0e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad00:	693b      	ldr	r3, [r7, #16]
 800ad02:	2200      	movs	r2, #0
 800ad04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad08:	711a      	strb	r2, [r3, #4]
 800ad0a:	2200      	movs	r2, #0
 800ad0c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d006      	beq.n	800ad22 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2200      	movs	r2, #0
 800ad18:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800ad1c:	711a      	strb	r2, [r3, #4]
 800ad1e:	2200      	movs	r2, #0
 800ad20:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2243      	movs	r2, #67	@ 0x43
 800ad26:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ad28:	4b02      	ldr	r3, [pc, #8]	@ (800ad34 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3718      	adds	r7, #24
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	20000088 	.word	0x20000088

0800ad38 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800ad38:	b480      	push	{r7}
 800ad3a:	b083      	sub	sp, #12
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	220a      	movs	r2, #10
 800ad44:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800ad46:	4b03      	ldr	r3, [pc, #12]	@ (800ad54 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	20000044 	.word	0x20000044

0800ad58 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800ad58:	b480      	push	{r7}
 800ad5a:	b083      	sub	sp, #12
 800ad5c:	af00      	add	r7, sp, #0
 800ad5e:	6078      	str	r0, [r7, #4]
 800ad60:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800ad62:	683b      	ldr	r3, [r7, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d101      	bne.n	800ad6c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800ad68:	2303      	movs	r3, #3
 800ad6a:	e009      	b.n	800ad80 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800ad72:	687a      	ldr	r2, [r7, #4]
 800ad74:	33b0      	adds	r3, #176	@ 0xb0
 800ad76:	009b      	lsls	r3, r3, #2
 800ad78:	4413      	add	r3, r2
 800ad7a:	683a      	ldr	r2, [r7, #0]
 800ad7c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800ad7e:	2300      	movs	r3, #0
}
 800ad80:	4618      	mov	r0, r3
 800ad82:	370c      	adds	r7, #12
 800ad84:	46bd      	mov	sp, r7
 800ad86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad8a:	4770      	bx	lr

0800ad8c <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ad9e:	68fb      	ldr	r3, [r7, #12]
 800ada0:	32b0      	adds	r2, #176	@ 0xb0
 800ada2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ada6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d101      	bne.n	800adb2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800adae:	2303      	movs	r3, #3
 800adb0:	e008      	b.n	800adc4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800adb2:	697b      	ldr	r3, [r7, #20]
 800adb4:	68ba      	ldr	r2, [r7, #8]
 800adb6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800adba:	697b      	ldr	r3, [r7, #20]
 800adbc:	687a      	ldr	r2, [r7, #4]
 800adbe:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800adc2:	2300      	movs	r3, #0
}
 800adc4:	4618      	mov	r0, r3
 800adc6:	371c      	adds	r7, #28
 800adc8:	46bd      	mov	sp, r7
 800adca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adce:	4770      	bx	lr

0800add0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800add0:	b480      	push	{r7}
 800add2:	b085      	sub	sp, #20
 800add4:	af00      	add	r7, sp, #0
 800add6:	6078      	str	r0, [r7, #4]
 800add8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	32b0      	adds	r2, #176	@ 0xb0
 800ade4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ade8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	2b00      	cmp	r3, #0
 800adee:	d101      	bne.n	800adf4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800adf0:	2303      	movs	r3, #3
 800adf2:	e004      	b.n	800adfe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	683a      	ldr	r2, [r7, #0]
 800adf8:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800adfc:	2300      	movs	r3, #0
}
 800adfe:	4618      	mov	r0, r3
 800ae00:	3714      	adds	r7, #20
 800ae02:	46bd      	mov	sp, r7
 800ae04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae08:	4770      	bx	lr
	...

0800ae0c <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ae0c:	b580      	push	{r7, lr}
 800ae0e:	b084      	sub	sp, #16
 800ae10:	af00      	add	r7, sp, #0
 800ae12:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	32b0      	adds	r2, #176	@ 0xb0
 800ae1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae22:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800ae24:	2301      	movs	r3, #1
 800ae26:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800ae28:	68bb      	ldr	r3, [r7, #8]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d101      	bne.n	800ae32 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800ae2e:	2303      	movs	r3, #3
 800ae30:	e025      	b.n	800ae7e <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	d11f      	bne.n	800ae7c <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800ae3c:	68bb      	ldr	r3, [r7, #8]
 800ae3e:	2201      	movs	r2, #1
 800ae40:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800ae44:	4b10      	ldr	r3, [pc, #64]	@ (800ae88 <USBD_CDC_TransmitPacket+0x7c>)
 800ae46:	781b      	ldrb	r3, [r3, #0]
 800ae48:	f003 020f 	and.w	r2, r3, #15
 800ae4c:	68bb      	ldr	r3, [r7, #8]
 800ae4e:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800ae52:	6878      	ldr	r0, [r7, #4]
 800ae54:	4613      	mov	r3, r2
 800ae56:	009b      	lsls	r3, r3, #2
 800ae58:	4413      	add	r3, r2
 800ae5a:	009b      	lsls	r3, r3, #2
 800ae5c:	4403      	add	r3, r0
 800ae5e:	3318      	adds	r3, #24
 800ae60:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800ae62:	4b09      	ldr	r3, [pc, #36]	@ (800ae88 <USBD_CDC_TransmitPacket+0x7c>)
 800ae64:	7819      	ldrb	r1, [r3, #0]
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800ae6c:	68bb      	ldr	r3, [r7, #8]
 800ae6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f004 f93b 	bl	800f0ee <USBD_LL_Transmit>

    ret = USBD_OK;
 800ae78:	2300      	movs	r3, #0
 800ae7a:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800ae7c:	7bfb      	ldrb	r3, [r7, #15]
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3710      	adds	r7, #16
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	200000cb 	.word	0x200000cb

0800ae8c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800ae8c:	b580      	push	{r7, lr}
 800ae8e:	b084      	sub	sp, #16
 800ae90:	af00      	add	r7, sp, #0
 800ae92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	32b0      	adds	r2, #176	@ 0xb0
 800ae9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aea2:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	32b0      	adds	r2, #176	@ 0xb0
 800aeae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d101      	bne.n	800aeba <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aeb6:	2303      	movs	r3, #3
 800aeb8:	e018      	b.n	800aeec <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	7c1b      	ldrb	r3, [r3, #16]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	d10a      	bne.n	800aed8 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aec2:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <USBD_CDC_ReceivePacket+0x68>)
 800aec4:	7819      	ldrb	r1, [r3, #0]
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aecc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aed0:	6878      	ldr	r0, [r7, #4]
 800aed2:	f004 f92d 	bl	800f130 <USBD_LL_PrepareReceive>
 800aed6:	e008      	b.n	800aeea <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aed8:	4b06      	ldr	r3, [pc, #24]	@ (800aef4 <USBD_CDC_ReceivePacket+0x68>)
 800aeda:	7819      	ldrb	r1, [r3, #0]
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aee2:	2340      	movs	r3, #64	@ 0x40
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f004 f923 	bl	800f130 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aeea:	2300      	movs	r3, #0
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3710      	adds	r7, #16
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	200000cc 	.word	0x200000cc

0800aef8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aef8:	b580      	push	{r7, lr}
 800aefa:	b086      	sub	sp, #24
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	60f8      	str	r0, [r7, #12]
 800af00:	60b9      	str	r1, [r7, #8]
 800af02:	4613      	mov	r3, r2
 800af04:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d101      	bne.n	800af10 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af0c:	2303      	movs	r3, #3
 800af0e:	e01f      	b.n	800af50 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	2200      	movs	r2, #0
 800af14:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	2200      	movs	r2, #0
 800af1c:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	2200      	movs	r2, #0
 800af24:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800af28:	68bb      	ldr	r3, [r7, #8]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d003      	beq.n	800af36 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	68ba      	ldr	r2, [r7, #8]
 800af32:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	2201      	movs	r2, #1
 800af3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	79fa      	ldrb	r2, [r7, #7]
 800af42:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800af44:	68f8      	ldr	r0, [r7, #12]
 800af46:	f003 ff9d 	bl	800ee84 <USBD_LL_Init>
 800af4a:	4603      	mov	r3, r0
 800af4c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800af4e:	7dfb      	ldrb	r3, [r7, #23]
}
 800af50:	4618      	mov	r0, r3
 800af52:	3718      	adds	r7, #24
 800af54:	46bd      	mov	sp, r7
 800af56:	bd80      	pop	{r7, pc}

0800af58 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800af58:	b580      	push	{r7, lr}
 800af5a:	b084      	sub	sp, #16
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
 800af60:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800af66:	683b      	ldr	r3, [r7, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d101      	bne.n	800af70 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800af6c:	2303      	movs	r3, #3
 800af6e:	e025      	b.n	800afbc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	683a      	ldr	r2, [r7, #0]
 800af74:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	32ae      	adds	r2, #174	@ 0xae
 800af82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00f      	beq.n	800afac <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	32ae      	adds	r2, #174	@ 0xae
 800af96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af9c:	f107 020e 	add.w	r2, r7, #14
 800afa0:	4610      	mov	r0, r2
 800afa2:	4798      	blx	r3
 800afa4:	4602      	mov	r2, r0
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800afb2:	1c5a      	adds	r2, r3, #1
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800afba:	2300      	movs	r3, #0
}
 800afbc:	4618      	mov	r0, r3
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800afcc:	6878      	ldr	r0, [r7, #4]
 800afce:	f003 ffa5 	bl	800ef1c <USBD_LL_Start>
 800afd2:	4603      	mov	r3, r0
}
 800afd4:	4618      	mov	r0, r3
 800afd6:	3708      	adds	r7, #8
 800afd8:	46bd      	mov	sp, r7
 800afda:	bd80      	pop	{r7, pc}

0800afdc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800afe4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800afe6:	4618      	mov	r0, r3
 800afe8:	370c      	adds	r7, #12
 800afea:	46bd      	mov	sp, r7
 800afec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff0:	4770      	bx	lr

0800aff2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800aff2:	b580      	push	{r7, lr}
 800aff4:	b084      	sub	sp, #16
 800aff6:	af00      	add	r7, sp, #0
 800aff8:	6078      	str	r0, [r7, #4]
 800affa:	460b      	mov	r3, r1
 800affc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800affe:	2300      	movs	r3, #0
 800b000:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b008:	2b00      	cmp	r3, #0
 800b00a:	d009      	beq.n	800b020 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	78fa      	ldrb	r2, [r7, #3]
 800b016:	4611      	mov	r1, r2
 800b018:	6878      	ldr	r0, [r7, #4]
 800b01a:	4798      	blx	r3
 800b01c:	4603      	mov	r3, r0
 800b01e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b020:	7bfb      	ldrb	r3, [r7, #15]
}
 800b022:	4618      	mov	r0, r3
 800b024:	3710      	adds	r7, #16
 800b026:	46bd      	mov	sp, r7
 800b028:	bd80      	pop	{r7, pc}

0800b02a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800b02a:	b580      	push	{r7, lr}
 800b02c:	b084      	sub	sp, #16
 800b02e:	af00      	add	r7, sp, #0
 800b030:	6078      	str	r0, [r7, #4]
 800b032:	460b      	mov	r3, r1
 800b034:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800b036:	2300      	movs	r3, #0
 800b038:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b040:	685b      	ldr	r3, [r3, #4]
 800b042:	78fa      	ldrb	r2, [r7, #3]
 800b044:	4611      	mov	r1, r2
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	4798      	blx	r3
 800b04a:	4603      	mov	r3, r0
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d001      	beq.n	800b054 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800b050:	2303      	movs	r3, #3
 800b052:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b054:	7bfb      	ldrb	r3, [r7, #15]
}
 800b056:	4618      	mov	r0, r3
 800b058:	3710      	adds	r7, #16
 800b05a:	46bd      	mov	sp, r7
 800b05c:	bd80      	pop	{r7, pc}

0800b05e <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800b05e:	b580      	push	{r7, lr}
 800b060:	b084      	sub	sp, #16
 800b062:	af00      	add	r7, sp, #0
 800b064:	6078      	str	r0, [r7, #4]
 800b066:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b06e:	6839      	ldr	r1, [r7, #0]
 800b070:	4618      	mov	r0, r3
 800b072:	f001 f90c 	bl	800c28e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	2201      	movs	r2, #1
 800b07a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800b07e:	687b      	ldr	r3, [r7, #4]
 800b080:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800b084:	461a      	mov	r2, r3
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b092:	f003 031f 	and.w	r3, r3, #31
 800b096:	2b02      	cmp	r3, #2
 800b098:	d01a      	beq.n	800b0d0 <USBD_LL_SetupStage+0x72>
 800b09a:	2b02      	cmp	r3, #2
 800b09c:	d822      	bhi.n	800b0e4 <USBD_LL_SetupStage+0x86>
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d002      	beq.n	800b0a8 <USBD_LL_SetupStage+0x4a>
 800b0a2:	2b01      	cmp	r3, #1
 800b0a4:	d00a      	beq.n	800b0bc <USBD_LL_SetupStage+0x5e>
 800b0a6:	e01d      	b.n	800b0e4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0ae:	4619      	mov	r1, r3
 800b0b0:	6878      	ldr	r0, [r7, #4]
 800b0b2:	f000 fb63 	bl	800b77c <USBD_StdDevReq>
 800b0b6:	4603      	mov	r3, r0
 800b0b8:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ba:	e020      	b.n	800b0fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0c2:	4619      	mov	r1, r3
 800b0c4:	6878      	ldr	r0, [r7, #4]
 800b0c6:	f000 fbcb 	bl	800b860 <USBD_StdItfReq>
 800b0ca:	4603      	mov	r3, r0
 800b0cc:	73fb      	strb	r3, [r7, #15]
      break;
 800b0ce:	e016      	b.n	800b0fe <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800b0d6:	4619      	mov	r1, r3
 800b0d8:	6878      	ldr	r0, [r7, #4]
 800b0da:	f000 fc2d 	bl	800b938 <USBD_StdEPReq>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800b0e2:	e00c      	b.n	800b0fe <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b0ea:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	4619      	mov	r1, r3
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f003 ff72 	bl	800efdc <USBD_LL_StallEP>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]
      break;
 800b0fc:	bf00      	nop
  }

  return ret;
 800b0fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800b108:	b580      	push	{r7, lr}
 800b10a:	b086      	sub	sp, #24
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	60f8      	str	r0, [r7, #12]
 800b110:	460b      	mov	r3, r1
 800b112:	607a      	str	r2, [r7, #4]
 800b114:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800b116:	2300      	movs	r3, #0
 800b118:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800b11a:	7afb      	ldrb	r3, [r7, #11]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d16e      	bne.n	800b1fe <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800b120:	68fb      	ldr	r3, [r7, #12]
 800b122:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b126:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b12e:	2b03      	cmp	r3, #3
 800b130:	f040 8098 	bne.w	800b264 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	689a      	ldr	r2, [r3, #8]
 800b138:	693b      	ldr	r3, [r7, #16]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	429a      	cmp	r2, r3
 800b13e:	d913      	bls.n	800b168 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800b140:	693b      	ldr	r3, [r7, #16]
 800b142:	689a      	ldr	r2, [r3, #8]
 800b144:	693b      	ldr	r3, [r7, #16]
 800b146:	68db      	ldr	r3, [r3, #12]
 800b148:	1ad2      	subs	r2, r2, r3
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800b14e:	693b      	ldr	r3, [r7, #16]
 800b150:	68da      	ldr	r2, [r3, #12]
 800b152:	693b      	ldr	r3, [r7, #16]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	4293      	cmp	r3, r2
 800b158:	bf28      	it	cs
 800b15a:	4613      	movcs	r3, r2
 800b15c:	461a      	mov	r2, r3
 800b15e:	6879      	ldr	r1, [r7, #4]
 800b160:	68f8      	ldr	r0, [r7, #12]
 800b162:	f001 f994 	bl	800c48e <USBD_CtlContinueRx>
 800b166:	e07d      	b.n	800b264 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800b16e:	f003 031f 	and.w	r3, r3, #31
 800b172:	2b02      	cmp	r3, #2
 800b174:	d014      	beq.n	800b1a0 <USBD_LL_DataOutStage+0x98>
 800b176:	2b02      	cmp	r3, #2
 800b178:	d81d      	bhi.n	800b1b6 <USBD_LL_DataOutStage+0xae>
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d002      	beq.n	800b184 <USBD_LL_DataOutStage+0x7c>
 800b17e:	2b01      	cmp	r3, #1
 800b180:	d003      	beq.n	800b18a <USBD_LL_DataOutStage+0x82>
 800b182:	e018      	b.n	800b1b6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800b184:	2300      	movs	r3, #0
 800b186:	75bb      	strb	r3, [r7, #22]
            break;
 800b188:	e018      	b.n	800b1bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b190:	b2db      	uxtb	r3, r3
 800b192:	4619      	mov	r1, r3
 800b194:	68f8      	ldr	r0, [r7, #12]
 800b196:	f000 fa64 	bl	800b662 <USBD_CoreFindIF>
 800b19a:	4603      	mov	r3, r0
 800b19c:	75bb      	strb	r3, [r7, #22]
            break;
 800b19e:	e00d      	b.n	800b1bc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800b1a6:	b2db      	uxtb	r3, r3
 800b1a8:	4619      	mov	r1, r3
 800b1aa:	68f8      	ldr	r0, [r7, #12]
 800b1ac:	f000 fa66 	bl	800b67c <USBD_CoreFindEP>
 800b1b0:	4603      	mov	r3, r0
 800b1b2:	75bb      	strb	r3, [r7, #22]
            break;
 800b1b4:	e002      	b.n	800b1bc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	75bb      	strb	r3, [r7, #22]
            break;
 800b1ba:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800b1bc:	7dbb      	ldrb	r3, [r7, #22]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d119      	bne.n	800b1f6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b1c8:	b2db      	uxtb	r3, r3
 800b1ca:	2b03      	cmp	r3, #3
 800b1cc:	d113      	bne.n	800b1f6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800b1ce:	7dba      	ldrb	r2, [r7, #22]
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	32ae      	adds	r2, #174	@ 0xae
 800b1d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1d8:	691b      	ldr	r3, [r3, #16]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d00b      	beq.n	800b1f6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800b1de:	7dba      	ldrb	r2, [r7, #22]
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800b1e6:	7dba      	ldrb	r2, [r7, #22]
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	32ae      	adds	r2, #174	@ 0xae
 800b1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1f0:	691b      	ldr	r3, [r3, #16]
 800b1f2:	68f8      	ldr	r0, [r7, #12]
 800b1f4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f001 f95a 	bl	800c4b0 <USBD_CtlSendStatus>
 800b1fc:	e032      	b.n	800b264 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800b1fe:	7afb      	ldrb	r3, [r7, #11]
 800b200:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b204:	b2db      	uxtb	r3, r3
 800b206:	4619      	mov	r1, r3
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f000 fa37 	bl	800b67c <USBD_CoreFindEP>
 800b20e:	4603      	mov	r3, r0
 800b210:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b212:	7dbb      	ldrb	r3, [r7, #22]
 800b214:	2bff      	cmp	r3, #255	@ 0xff
 800b216:	d025      	beq.n	800b264 <USBD_LL_DataOutStage+0x15c>
 800b218:	7dbb      	ldrb	r3, [r7, #22]
 800b21a:	2b00      	cmp	r3, #0
 800b21c:	d122      	bne.n	800b264 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b224:	b2db      	uxtb	r3, r3
 800b226:	2b03      	cmp	r3, #3
 800b228:	d117      	bne.n	800b25a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800b22a:	7dba      	ldrb	r2, [r7, #22]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	32ae      	adds	r2, #174	@ 0xae
 800b230:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d00f      	beq.n	800b25a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800b23a:	7dba      	ldrb	r2, [r7, #22]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800b242:	7dba      	ldrb	r2, [r7, #22]
 800b244:	68fb      	ldr	r3, [r7, #12]
 800b246:	32ae      	adds	r2, #174	@ 0xae
 800b248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b24c:	699b      	ldr	r3, [r3, #24]
 800b24e:	7afa      	ldrb	r2, [r7, #11]
 800b250:	4611      	mov	r1, r2
 800b252:	68f8      	ldr	r0, [r7, #12]
 800b254:	4798      	blx	r3
 800b256:	4603      	mov	r3, r0
 800b258:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800b25a:	7dfb      	ldrb	r3, [r7, #23]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d001      	beq.n	800b264 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800b260:	7dfb      	ldrb	r3, [r7, #23]
 800b262:	e000      	b.n	800b266 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800b264:	2300      	movs	r3, #0
}
 800b266:	4618      	mov	r0, r3
 800b268:	3718      	adds	r7, #24
 800b26a:	46bd      	mov	sp, r7
 800b26c:	bd80      	pop	{r7, pc}

0800b26e <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800b26e:	b580      	push	{r7, lr}
 800b270:	b086      	sub	sp, #24
 800b272:	af00      	add	r7, sp, #0
 800b274:	60f8      	str	r0, [r7, #12]
 800b276:	460b      	mov	r3, r1
 800b278:	607a      	str	r2, [r7, #4]
 800b27a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800b27c:	7afb      	ldrb	r3, [r7, #11]
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d16f      	bne.n	800b362 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	3314      	adds	r3, #20
 800b286:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800b28e:	2b02      	cmp	r3, #2
 800b290:	d15a      	bne.n	800b348 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800b292:	693b      	ldr	r3, [r7, #16]
 800b294:	689a      	ldr	r2, [r3, #8]
 800b296:	693b      	ldr	r3, [r7, #16]
 800b298:	68db      	ldr	r3, [r3, #12]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d914      	bls.n	800b2c8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800b29e:	693b      	ldr	r3, [r7, #16]
 800b2a0:	689a      	ldr	r2, [r3, #8]
 800b2a2:	693b      	ldr	r3, [r7, #16]
 800b2a4:	68db      	ldr	r3, [r3, #12]
 800b2a6:	1ad2      	subs	r2, r2, r3
 800b2a8:	693b      	ldr	r3, [r7, #16]
 800b2aa:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800b2ac:	693b      	ldr	r3, [r7, #16]
 800b2ae:	689b      	ldr	r3, [r3, #8]
 800b2b0:	461a      	mov	r2, r3
 800b2b2:	6879      	ldr	r1, [r7, #4]
 800b2b4:	68f8      	ldr	r0, [r7, #12]
 800b2b6:	f001 f8bc 	bl	800c432 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	2200      	movs	r2, #0
 800b2be:	2100      	movs	r1, #0
 800b2c0:	68f8      	ldr	r0, [r7, #12]
 800b2c2:	f003 ff35 	bl	800f130 <USBD_LL_PrepareReceive>
 800b2c6:	e03f      	b.n	800b348 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800b2c8:	693b      	ldr	r3, [r7, #16]
 800b2ca:	68da      	ldr	r2, [r3, #12]
 800b2cc:	693b      	ldr	r3, [r7, #16]
 800b2ce:	689b      	ldr	r3, [r3, #8]
 800b2d0:	429a      	cmp	r2, r3
 800b2d2:	d11c      	bne.n	800b30e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800b2d4:	693b      	ldr	r3, [r7, #16]
 800b2d6:	685a      	ldr	r2, [r3, #4]
 800b2d8:	693b      	ldr	r3, [r7, #16]
 800b2da:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800b2dc:	429a      	cmp	r2, r3
 800b2de:	d316      	bcc.n	800b30e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800b2e0:	693b      	ldr	r3, [r7, #16]
 800b2e2:	685a      	ldr	r2, [r3, #4]
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800b2ea:	429a      	cmp	r2, r3
 800b2ec:	d20f      	bcs.n	800b30e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800b2ee:	2200      	movs	r2, #0
 800b2f0:	2100      	movs	r1, #0
 800b2f2:	68f8      	ldr	r0, [r7, #12]
 800b2f4:	f001 f89d 	bl	800c432 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b300:	2300      	movs	r3, #0
 800b302:	2200      	movs	r2, #0
 800b304:	2100      	movs	r1, #0
 800b306:	68f8      	ldr	r0, [r7, #12]
 800b308:	f003 ff12 	bl	800f130 <USBD_LL_PrepareReceive>
 800b30c:	e01c      	b.n	800b348 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b314:	b2db      	uxtb	r3, r3
 800b316:	2b03      	cmp	r3, #3
 800b318:	d10f      	bne.n	800b33a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b320:	68db      	ldr	r3, [r3, #12]
 800b322:	2b00      	cmp	r3, #0
 800b324:	d009      	beq.n	800b33a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	2200      	movs	r2, #0
 800b32a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b334:	68db      	ldr	r3, [r3, #12]
 800b336:	68f8      	ldr	r0, [r7, #12]
 800b338:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800b33a:	2180      	movs	r1, #128	@ 0x80
 800b33c:	68f8      	ldr	r0, [r7, #12]
 800b33e:	f003 fe4d 	bl	800efdc <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800b342:	68f8      	ldr	r0, [r7, #12]
 800b344:	f001 f8c7 	bl	800c4d6 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800b34e:	2b00      	cmp	r3, #0
 800b350:	d03a      	beq.n	800b3c8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800b352:	68f8      	ldr	r0, [r7, #12]
 800b354:	f7ff fe42 	bl	800afdc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	2200      	movs	r2, #0
 800b35c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800b360:	e032      	b.n	800b3c8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800b362:	7afb      	ldrb	r3, [r7, #11]
 800b364:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800b368:	b2db      	uxtb	r3, r3
 800b36a:	4619      	mov	r1, r3
 800b36c:	68f8      	ldr	r0, [r7, #12]
 800b36e:	f000 f985 	bl	800b67c <USBD_CoreFindEP>
 800b372:	4603      	mov	r3, r0
 800b374:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b376:	7dfb      	ldrb	r3, [r7, #23]
 800b378:	2bff      	cmp	r3, #255	@ 0xff
 800b37a:	d025      	beq.n	800b3c8 <USBD_LL_DataInStage+0x15a>
 800b37c:	7dfb      	ldrb	r3, [r7, #23]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d122      	bne.n	800b3c8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b388:	b2db      	uxtb	r3, r3
 800b38a:	2b03      	cmp	r3, #3
 800b38c:	d11c      	bne.n	800b3c8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800b38e:	7dfa      	ldrb	r2, [r7, #23]
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	32ae      	adds	r2, #174	@ 0xae
 800b394:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b398:	695b      	ldr	r3, [r3, #20]
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d014      	beq.n	800b3c8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800b39e:	7dfa      	ldrb	r2, [r7, #23]
 800b3a0:	68fb      	ldr	r3, [r7, #12]
 800b3a2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800b3a6:	7dfa      	ldrb	r2, [r7, #23]
 800b3a8:	68fb      	ldr	r3, [r7, #12]
 800b3aa:	32ae      	adds	r2, #174	@ 0xae
 800b3ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3b0:	695b      	ldr	r3, [r3, #20]
 800b3b2:	7afa      	ldrb	r2, [r7, #11]
 800b3b4:	4611      	mov	r1, r2
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	4798      	blx	r3
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800b3be:	7dbb      	ldrb	r3, [r7, #22]
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	d001      	beq.n	800b3c8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800b3c4:	7dbb      	ldrb	r3, [r7, #22]
 800b3c6:	e000      	b.n	800b3ca <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800b3c8:	2300      	movs	r3, #0
}
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	3718      	adds	r7, #24
 800b3ce:	46bd      	mov	sp, r7
 800b3d0:	bd80      	pop	{r7, pc}

0800b3d2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800b3d2:	b580      	push	{r7, lr}
 800b3d4:	b084      	sub	sp, #16
 800b3d6:	af00      	add	r7, sp, #0
 800b3d8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	2201      	movs	r2, #1
 800b3e2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	2200      	movs	r2, #0
 800b3ea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2200      	movs	r2, #0
 800b3f2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2200      	movs	r2, #0
 800b400:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	d014      	beq.n	800b438 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b414:	685b      	ldr	r3, [r3, #4]
 800b416:	2b00      	cmp	r3, #0
 800b418:	d00e      	beq.n	800b438 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b420:	685b      	ldr	r3, [r3, #4]
 800b422:	687a      	ldr	r2, [r7, #4]
 800b424:	6852      	ldr	r2, [r2, #4]
 800b426:	b2d2      	uxtb	r2, r2
 800b428:	4611      	mov	r1, r2
 800b42a:	6878      	ldr	r0, [r7, #4]
 800b42c:	4798      	blx	r3
 800b42e:	4603      	mov	r3, r0
 800b430:	2b00      	cmp	r3, #0
 800b432:	d001      	beq.n	800b438 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800b434:	2303      	movs	r3, #3
 800b436:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b438:	2340      	movs	r3, #64	@ 0x40
 800b43a:	2200      	movs	r2, #0
 800b43c:	2100      	movs	r1, #0
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f003 fd87 	bl	800ef52 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2240      	movs	r2, #64	@ 0x40
 800b450:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800b454:	2340      	movs	r3, #64	@ 0x40
 800b456:	2200      	movs	r2, #0
 800b458:	2180      	movs	r1, #128	@ 0x80
 800b45a:	6878      	ldr	r0, [r7, #4]
 800b45c:	f003 fd79 	bl	800ef52 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	2201      	movs	r2, #1
 800b464:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	2240      	movs	r2, #64	@ 0x40
 800b46a:	621a      	str	r2, [r3, #32]

  return ret;
 800b46c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b46e:	4618      	mov	r0, r3
 800b470:	3710      	adds	r7, #16
 800b472:	46bd      	mov	sp, r7
 800b474:	bd80      	pop	{r7, pc}

0800b476 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800b476:	b480      	push	{r7}
 800b478:	b083      	sub	sp, #12
 800b47a:	af00      	add	r7, sp, #0
 800b47c:	6078      	str	r0, [r7, #4]
 800b47e:	460b      	mov	r3, r1
 800b480:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	78fa      	ldrb	r2, [r7, #3]
 800b486:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b488:	2300      	movs	r3, #0
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b496:	b480      	push	{r7}
 800b498:	b083      	sub	sp, #12
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b04      	cmp	r3, #4
 800b4a8:	d006      	beq.n	800b4b8 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4b0:	b2da      	uxtb	r2, r3
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	2204      	movs	r2, #4
 800b4bc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b4c0:	2300      	movs	r3, #0
}
 800b4c2:	4618      	mov	r0, r3
 800b4c4:	370c      	adds	r7, #12
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b083      	sub	sp, #12
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b4dc:	b2db      	uxtb	r3, r3
 800b4de:	2b04      	cmp	r3, #4
 800b4e0:	d106      	bne.n	800b4f0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b4e8:	b2da      	uxtb	r2, r3
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b4f0:	2300      	movs	r3, #0
}
 800b4f2:	4618      	mov	r0, r3
 800b4f4:	370c      	adds	r7, #12
 800b4f6:	46bd      	mov	sp, r7
 800b4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4fc:	4770      	bx	lr

0800b4fe <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b4fe:	b580      	push	{r7, lr}
 800b500:	b082      	sub	sp, #8
 800b502:	af00      	add	r7, sp, #0
 800b504:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	2b03      	cmp	r3, #3
 800b510:	d110      	bne.n	800b534 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b518:	2b00      	cmp	r3, #0
 800b51a:	d00b      	beq.n	800b534 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b522:	69db      	ldr	r3, [r3, #28]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d005      	beq.n	800b534 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b52e:	69db      	ldr	r3, [r3, #28]
 800b530:	6878      	ldr	r0, [r7, #4]
 800b532:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b534:	2300      	movs	r3, #0
}
 800b536:	4618      	mov	r0, r3
 800b538:	3708      	adds	r7, #8
 800b53a:	46bd      	mov	sp, r7
 800b53c:	bd80      	pop	{r7, pc}

0800b53e <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b53e:	b580      	push	{r7, lr}
 800b540:	b082      	sub	sp, #8
 800b542:	af00      	add	r7, sp, #0
 800b544:	6078      	str	r0, [r7, #4]
 800b546:	460b      	mov	r3, r1
 800b548:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	32ae      	adds	r2, #174	@ 0xae
 800b554:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d101      	bne.n	800b560 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b55c:	2303      	movs	r3, #3
 800b55e:	e01c      	b.n	800b59a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b566:	b2db      	uxtb	r3, r3
 800b568:	2b03      	cmp	r3, #3
 800b56a:	d115      	bne.n	800b598 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	32ae      	adds	r2, #174	@ 0xae
 800b576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b57a:	6a1b      	ldr	r3, [r3, #32]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d00b      	beq.n	800b598 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	32ae      	adds	r2, #174	@ 0xae
 800b58a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b58e:	6a1b      	ldr	r3, [r3, #32]
 800b590:	78fa      	ldrb	r2, [r7, #3]
 800b592:	4611      	mov	r1, r2
 800b594:	6878      	ldr	r0, [r7, #4]
 800b596:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b598:	2300      	movs	r3, #0
}
 800b59a:	4618      	mov	r0, r3
 800b59c:	3708      	adds	r7, #8
 800b59e:	46bd      	mov	sp, r7
 800b5a0:	bd80      	pop	{r7, pc}

0800b5a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b5a2:	b580      	push	{r7, lr}
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	af00      	add	r7, sp, #0
 800b5a8:	6078      	str	r0, [r7, #4]
 800b5aa:	460b      	mov	r3, r1
 800b5ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	32ae      	adds	r2, #174	@ 0xae
 800b5b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	d101      	bne.n	800b5c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b5c0:	2303      	movs	r3, #3
 800b5c2:	e01c      	b.n	800b5fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5ca:	b2db      	uxtb	r3, r3
 800b5cc:	2b03      	cmp	r3, #3
 800b5ce:	d115      	bne.n	800b5fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5d6:	687b      	ldr	r3, [r7, #4]
 800b5d8:	32ae      	adds	r2, #174	@ 0xae
 800b5da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d00b      	beq.n	800b5fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	32ae      	adds	r2, #174	@ 0xae
 800b5ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b5f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5f4:	78fa      	ldrb	r2, [r7, #3]
 800b5f6:	4611      	mov	r1, r2
 800b5f8:	6878      	ldr	r0, [r7, #4]
 800b5fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b5fc:	2300      	movs	r3, #0
}
 800b5fe:	4618      	mov	r0, r3
 800b600:	3708      	adds	r7, #8
 800b602:	46bd      	mov	sp, r7
 800b604:	bd80      	pop	{r7, pc}

0800b606 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b606:	b480      	push	{r7}
 800b608:	b083      	sub	sp, #12
 800b60a:	af00      	add	r7, sp, #0
 800b60c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b60e:	2300      	movs	r3, #0
}
 800b610:	4618      	mov	r0, r3
 800b612:	370c      	adds	r7, #12
 800b614:	46bd      	mov	sp, r7
 800b616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b61a:	4770      	bx	lr

0800b61c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b61c:	b580      	push	{r7, lr}
 800b61e:	b084      	sub	sp, #16
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	2201      	movs	r2, #1
 800b62c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d00e      	beq.n	800b658 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b640:	685b      	ldr	r3, [r3, #4]
 800b642:	687a      	ldr	r2, [r7, #4]
 800b644:	6852      	ldr	r2, [r2, #4]
 800b646:	b2d2      	uxtb	r2, r2
 800b648:	4611      	mov	r1, r2
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	4798      	blx	r3
 800b64e:	4603      	mov	r3, r0
 800b650:	2b00      	cmp	r3, #0
 800b652:	d001      	beq.n	800b658 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b654:	2303      	movs	r3, #3
 800b656:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b658:	7bfb      	ldrb	r3, [r7, #15]
}
 800b65a:	4618      	mov	r0, r3
 800b65c:	3710      	adds	r7, #16
 800b65e:	46bd      	mov	sp, r7
 800b660:	bd80      	pop	{r7, pc}

0800b662 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b662:	b480      	push	{r7}
 800b664:	b083      	sub	sp, #12
 800b666:	af00      	add	r7, sp, #0
 800b668:	6078      	str	r0, [r7, #4]
 800b66a:	460b      	mov	r3, r1
 800b66c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b66e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b670:	4618      	mov	r0, r3
 800b672:	370c      	adds	r7, #12
 800b674:	46bd      	mov	sp, r7
 800b676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67a:	4770      	bx	lr

0800b67c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b67c:	b480      	push	{r7}
 800b67e:	b083      	sub	sp, #12
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
 800b684:	460b      	mov	r3, r1
 800b686:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b688:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	370c      	adds	r7, #12
 800b68e:	46bd      	mov	sp, r7
 800b690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b694:	4770      	bx	lr

0800b696 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b696:	b580      	push	{r7, lr}
 800b698:	b086      	sub	sp, #24
 800b69a:	af00      	add	r7, sp, #0
 800b69c:	6078      	str	r0, [r7, #4]
 800b69e:	460b      	mov	r3, r1
 800b6a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	885b      	ldrh	r3, [r3, #2]
 800b6b2:	b29b      	uxth	r3, r3
 800b6b4:	68fa      	ldr	r2, [r7, #12]
 800b6b6:	7812      	ldrb	r2, [r2, #0]
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d91f      	bls.n	800b6fc <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	781b      	ldrb	r3, [r3, #0]
 800b6c0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b6c2:	e013      	b.n	800b6ec <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b6c4:	f107 030a 	add.w	r3, r7, #10
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	6978      	ldr	r0, [r7, #20]
 800b6cc:	f000 f81b 	bl	800b706 <USBD_GetNextDesc>
 800b6d0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	785b      	ldrb	r3, [r3, #1]
 800b6d6:	2b05      	cmp	r3, #5
 800b6d8:	d108      	bne.n	800b6ec <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b6da:	697b      	ldr	r3, [r7, #20]
 800b6dc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b6de:	693b      	ldr	r3, [r7, #16]
 800b6e0:	789b      	ldrb	r3, [r3, #2]
 800b6e2:	78fa      	ldrb	r2, [r7, #3]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d008      	beq.n	800b6fa <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b6e8:	2300      	movs	r3, #0
 800b6ea:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	885b      	ldrh	r3, [r3, #2]
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	897b      	ldrh	r3, [r7, #10]
 800b6f4:	429a      	cmp	r2, r3
 800b6f6:	d8e5      	bhi.n	800b6c4 <USBD_GetEpDesc+0x2e>
 800b6f8:	e000      	b.n	800b6fc <USBD_GetEpDesc+0x66>
          break;
 800b6fa:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b6fc:	693b      	ldr	r3, [r7, #16]
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3718      	adds	r7, #24
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b706:	b480      	push	{r7}
 800b708:	b085      	sub	sp, #20
 800b70a:	af00      	add	r7, sp, #0
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b714:	683b      	ldr	r3, [r7, #0]
 800b716:	881b      	ldrh	r3, [r3, #0]
 800b718:	68fa      	ldr	r2, [r7, #12]
 800b71a:	7812      	ldrb	r2, [r2, #0]
 800b71c:	4413      	add	r3, r2
 800b71e:	b29a      	uxth	r2, r3
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	781b      	ldrb	r3, [r3, #0]
 800b728:	461a      	mov	r2, r3
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	4413      	add	r3, r2
 800b72e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b730:	68fb      	ldr	r3, [r7, #12]
}
 800b732:	4618      	mov	r0, r3
 800b734:	3714      	adds	r7, #20
 800b736:	46bd      	mov	sp, r7
 800b738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73c:	4770      	bx	lr

0800b73e <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b73e:	b480      	push	{r7}
 800b740:	b087      	sub	sp, #28
 800b742:	af00      	add	r7, sp, #0
 800b744:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b74a:	697b      	ldr	r3, [r7, #20]
 800b74c:	781b      	ldrb	r3, [r3, #0]
 800b74e:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b750:	697b      	ldr	r3, [r7, #20]
 800b752:	3301      	adds	r3, #1
 800b754:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b756:	697b      	ldr	r3, [r7, #20]
 800b758:	781b      	ldrb	r3, [r3, #0]
 800b75a:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b75c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b760:	021b      	lsls	r3, r3, #8
 800b762:	b21a      	sxth	r2, r3
 800b764:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b768:	4313      	orrs	r3, r2
 800b76a:	b21b      	sxth	r3, r3
 800b76c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b76e:	89fb      	ldrh	r3, [r7, #14]
}
 800b770:	4618      	mov	r0, r3
 800b772:	371c      	adds	r7, #28
 800b774:	46bd      	mov	sp, r7
 800b776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b77a:	4770      	bx	lr

0800b77c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b77c:	b580      	push	{r7, lr}
 800b77e:	b084      	sub	sp, #16
 800b780:	af00      	add	r7, sp, #0
 800b782:	6078      	str	r0, [r7, #4]
 800b784:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b786:	2300      	movs	r3, #0
 800b788:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b78a:	683b      	ldr	r3, [r7, #0]
 800b78c:	781b      	ldrb	r3, [r3, #0]
 800b78e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b792:	2b40      	cmp	r3, #64	@ 0x40
 800b794:	d005      	beq.n	800b7a2 <USBD_StdDevReq+0x26>
 800b796:	2b40      	cmp	r3, #64	@ 0x40
 800b798:	d857      	bhi.n	800b84a <USBD_StdDevReq+0xce>
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d00f      	beq.n	800b7be <USBD_StdDevReq+0x42>
 800b79e:	2b20      	cmp	r3, #32
 800b7a0:	d153      	bne.n	800b84a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	32ae      	adds	r2, #174	@ 0xae
 800b7ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b7b0:	689b      	ldr	r3, [r3, #8]
 800b7b2:	6839      	ldr	r1, [r7, #0]
 800b7b4:	6878      	ldr	r0, [r7, #4]
 800b7b6:	4798      	blx	r3
 800b7b8:	4603      	mov	r3, r0
 800b7ba:	73fb      	strb	r3, [r7, #15]
      break;
 800b7bc:	e04a      	b.n	800b854 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b7be:	683b      	ldr	r3, [r7, #0]
 800b7c0:	785b      	ldrb	r3, [r3, #1]
 800b7c2:	2b09      	cmp	r3, #9
 800b7c4:	d83b      	bhi.n	800b83e <USBD_StdDevReq+0xc2>
 800b7c6:	a201      	add	r2, pc, #4	@ (adr r2, 800b7cc <USBD_StdDevReq+0x50>)
 800b7c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b7cc:	0800b821 	.word	0x0800b821
 800b7d0:	0800b835 	.word	0x0800b835
 800b7d4:	0800b83f 	.word	0x0800b83f
 800b7d8:	0800b82b 	.word	0x0800b82b
 800b7dc:	0800b83f 	.word	0x0800b83f
 800b7e0:	0800b7ff 	.word	0x0800b7ff
 800b7e4:	0800b7f5 	.word	0x0800b7f5
 800b7e8:	0800b83f 	.word	0x0800b83f
 800b7ec:	0800b817 	.word	0x0800b817
 800b7f0:	0800b809 	.word	0x0800b809
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b7f4:	6839      	ldr	r1, [r7, #0]
 800b7f6:	6878      	ldr	r0, [r7, #4]
 800b7f8:	f000 fa3c 	bl	800bc74 <USBD_GetDescriptor>
          break;
 800b7fc:	e024      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b7fe:	6839      	ldr	r1, [r7, #0]
 800b800:	6878      	ldr	r0, [r7, #4]
 800b802:	f000 fba1 	bl	800bf48 <USBD_SetAddress>
          break;
 800b806:	e01f      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b808:	6839      	ldr	r1, [r7, #0]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fbe0 	bl	800bfd0 <USBD_SetConfig>
 800b810:	4603      	mov	r3, r0
 800b812:	73fb      	strb	r3, [r7, #15]
          break;
 800b814:	e018      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b816:	6839      	ldr	r1, [r7, #0]
 800b818:	6878      	ldr	r0, [r7, #4]
 800b81a:	f000 fc83 	bl	800c124 <USBD_GetConfig>
          break;
 800b81e:	e013      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b820:	6839      	ldr	r1, [r7, #0]
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	f000 fcb4 	bl	800c190 <USBD_GetStatus>
          break;
 800b828:	e00e      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b82a:	6839      	ldr	r1, [r7, #0]
 800b82c:	6878      	ldr	r0, [r7, #4]
 800b82e:	f000 fce3 	bl	800c1f8 <USBD_SetFeature>
          break;
 800b832:	e009      	b.n	800b848 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b834:	6839      	ldr	r1, [r7, #0]
 800b836:	6878      	ldr	r0, [r7, #4]
 800b838:	f000 fd07 	bl	800c24a <USBD_ClrFeature>
          break;
 800b83c:	e004      	b.n	800b848 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b83e:	6839      	ldr	r1, [r7, #0]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	f000 fd5e 	bl	800c302 <USBD_CtlError>
          break;
 800b846:	bf00      	nop
      }
      break;
 800b848:	e004      	b.n	800b854 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b84a:	6839      	ldr	r1, [r7, #0]
 800b84c:	6878      	ldr	r0, [r7, #4]
 800b84e:	f000 fd58 	bl	800c302 <USBD_CtlError>
      break;
 800b852:	bf00      	nop
  }

  return ret;
 800b854:	7bfb      	ldrb	r3, [r7, #15]
}
 800b856:	4618      	mov	r0, r3
 800b858:	3710      	adds	r7, #16
 800b85a:	46bd      	mov	sp, r7
 800b85c:	bd80      	pop	{r7, pc}
 800b85e:	bf00      	nop

0800b860 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b084      	sub	sp, #16
 800b864:	af00      	add	r7, sp, #0
 800b866:	6078      	str	r0, [r7, #4]
 800b868:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b86a:	2300      	movs	r3, #0
 800b86c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	781b      	ldrb	r3, [r3, #0]
 800b872:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b876:	2b40      	cmp	r3, #64	@ 0x40
 800b878:	d005      	beq.n	800b886 <USBD_StdItfReq+0x26>
 800b87a:	2b40      	cmp	r3, #64	@ 0x40
 800b87c:	d852      	bhi.n	800b924 <USBD_StdItfReq+0xc4>
 800b87e:	2b00      	cmp	r3, #0
 800b880:	d001      	beq.n	800b886 <USBD_StdItfReq+0x26>
 800b882:	2b20      	cmp	r3, #32
 800b884:	d14e      	bne.n	800b924 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b88c:	b2db      	uxtb	r3, r3
 800b88e:	3b01      	subs	r3, #1
 800b890:	2b02      	cmp	r3, #2
 800b892:	d840      	bhi.n	800b916 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	889b      	ldrh	r3, [r3, #4]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b01      	cmp	r3, #1
 800b89c:	d836      	bhi.n	800b90c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b89e:	683b      	ldr	r3, [r7, #0]
 800b8a0:	889b      	ldrh	r3, [r3, #4]
 800b8a2:	b2db      	uxtb	r3, r3
 800b8a4:	4619      	mov	r1, r3
 800b8a6:	6878      	ldr	r0, [r7, #4]
 800b8a8:	f7ff fedb 	bl	800b662 <USBD_CoreFindIF>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b8b0:	7bbb      	ldrb	r3, [r7, #14]
 800b8b2:	2bff      	cmp	r3, #255	@ 0xff
 800b8b4:	d01d      	beq.n	800b8f2 <USBD_StdItfReq+0x92>
 800b8b6:	7bbb      	ldrb	r3, [r7, #14]
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	d11a      	bne.n	800b8f2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b8bc:	7bba      	ldrb	r2, [r7, #14]
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	32ae      	adds	r2, #174	@ 0xae
 800b8c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8c6:	689b      	ldr	r3, [r3, #8]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00f      	beq.n	800b8ec <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b8cc:	7bba      	ldrb	r2, [r7, #14]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b8d4:	7bba      	ldrb	r2, [r7, #14]
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	32ae      	adds	r2, #174	@ 0xae
 800b8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b8de:	689b      	ldr	r3, [r3, #8]
 800b8e0:	6839      	ldr	r1, [r7, #0]
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	4798      	blx	r3
 800b8e6:	4603      	mov	r3, r0
 800b8e8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8ea:	e004      	b.n	800b8f6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b8ec:	2303      	movs	r3, #3
 800b8ee:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b8f0:	e001      	b.n	800b8f6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b8f2:	2303      	movs	r3, #3
 800b8f4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b8f6:	683b      	ldr	r3, [r7, #0]
 800b8f8:	88db      	ldrh	r3, [r3, #6]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d110      	bne.n	800b920 <USBD_StdItfReq+0xc0>
 800b8fe:	7bfb      	ldrb	r3, [r7, #15]
 800b900:	2b00      	cmp	r3, #0
 800b902:	d10d      	bne.n	800b920 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b904:	6878      	ldr	r0, [r7, #4]
 800b906:	f000 fdd3 	bl	800c4b0 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b90a:	e009      	b.n	800b920 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b90c:	6839      	ldr	r1, [r7, #0]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 fcf7 	bl	800c302 <USBD_CtlError>
          break;
 800b914:	e004      	b.n	800b920 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b916:	6839      	ldr	r1, [r7, #0]
 800b918:	6878      	ldr	r0, [r7, #4]
 800b91a:	f000 fcf2 	bl	800c302 <USBD_CtlError>
          break;
 800b91e:	e000      	b.n	800b922 <USBD_StdItfReq+0xc2>
          break;
 800b920:	bf00      	nop
      }
      break;
 800b922:	e004      	b.n	800b92e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b924:	6839      	ldr	r1, [r7, #0]
 800b926:	6878      	ldr	r0, [r7, #4]
 800b928:	f000 fceb 	bl	800c302 <USBD_CtlError>
      break;
 800b92c:	bf00      	nop
  }

  return ret;
 800b92e:	7bfb      	ldrb	r3, [r7, #15]
}
 800b930:	4618      	mov	r0, r3
 800b932:	3710      	adds	r7, #16
 800b934:	46bd      	mov	sp, r7
 800b936:	bd80      	pop	{r7, pc}

0800b938 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b942:	2300      	movs	r3, #0
 800b944:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b946:	683b      	ldr	r3, [r7, #0]
 800b948:	889b      	ldrh	r3, [r3, #4]
 800b94a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	781b      	ldrb	r3, [r3, #0]
 800b950:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b954:	2b40      	cmp	r3, #64	@ 0x40
 800b956:	d007      	beq.n	800b968 <USBD_StdEPReq+0x30>
 800b958:	2b40      	cmp	r3, #64	@ 0x40
 800b95a:	f200 817f 	bhi.w	800bc5c <USBD_StdEPReq+0x324>
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d02a      	beq.n	800b9b8 <USBD_StdEPReq+0x80>
 800b962:	2b20      	cmp	r3, #32
 800b964:	f040 817a 	bne.w	800bc5c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b968:	7bbb      	ldrb	r3, [r7, #14]
 800b96a:	4619      	mov	r1, r3
 800b96c:	6878      	ldr	r0, [r7, #4]
 800b96e:	f7ff fe85 	bl	800b67c <USBD_CoreFindEP>
 800b972:	4603      	mov	r3, r0
 800b974:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b976:	7b7b      	ldrb	r3, [r7, #13]
 800b978:	2bff      	cmp	r3, #255	@ 0xff
 800b97a:	f000 8174 	beq.w	800bc66 <USBD_StdEPReq+0x32e>
 800b97e:	7b7b      	ldrb	r3, [r7, #13]
 800b980:	2b00      	cmp	r3, #0
 800b982:	f040 8170 	bne.w	800bc66 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b986:	7b7a      	ldrb	r2, [r7, #13]
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b98e:	7b7a      	ldrb	r2, [r7, #13]
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	32ae      	adds	r2, #174	@ 0xae
 800b994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b998:	689b      	ldr	r3, [r3, #8]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	f000 8163 	beq.w	800bc66 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b9a0:	7b7a      	ldrb	r2, [r7, #13]
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	32ae      	adds	r2, #174	@ 0xae
 800b9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b9aa:	689b      	ldr	r3, [r3, #8]
 800b9ac:	6839      	ldr	r1, [r7, #0]
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	4798      	blx	r3
 800b9b2:	4603      	mov	r3, r0
 800b9b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b9b6:	e156      	b.n	800bc66 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b9b8:	683b      	ldr	r3, [r7, #0]
 800b9ba:	785b      	ldrb	r3, [r3, #1]
 800b9bc:	2b03      	cmp	r3, #3
 800b9be:	d008      	beq.n	800b9d2 <USBD_StdEPReq+0x9a>
 800b9c0:	2b03      	cmp	r3, #3
 800b9c2:	f300 8145 	bgt.w	800bc50 <USBD_StdEPReq+0x318>
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	f000 809b 	beq.w	800bb02 <USBD_StdEPReq+0x1ca>
 800b9cc:	2b01      	cmp	r3, #1
 800b9ce:	d03c      	beq.n	800ba4a <USBD_StdEPReq+0x112>
 800b9d0:	e13e      	b.n	800bc50 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b9d8:	b2db      	uxtb	r3, r3
 800b9da:	2b02      	cmp	r3, #2
 800b9dc:	d002      	beq.n	800b9e4 <USBD_StdEPReq+0xac>
 800b9de:	2b03      	cmp	r3, #3
 800b9e0:	d016      	beq.n	800ba10 <USBD_StdEPReq+0xd8>
 800b9e2:	e02c      	b.n	800ba3e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b9e4:	7bbb      	ldrb	r3, [r7, #14]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d00d      	beq.n	800ba06 <USBD_StdEPReq+0xce>
 800b9ea:	7bbb      	ldrb	r3, [r7, #14]
 800b9ec:	2b80      	cmp	r3, #128	@ 0x80
 800b9ee:	d00a      	beq.n	800ba06 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b9f0:	7bbb      	ldrb	r3, [r7, #14]
 800b9f2:	4619      	mov	r1, r3
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f003 faf1 	bl	800efdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b9fa:	2180      	movs	r1, #128	@ 0x80
 800b9fc:	6878      	ldr	r0, [r7, #4]
 800b9fe:	f003 faed 	bl	800efdc <USBD_LL_StallEP>
 800ba02:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba04:	e020      	b.n	800ba48 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800ba06:	6839      	ldr	r1, [r7, #0]
 800ba08:	6878      	ldr	r0, [r7, #4]
 800ba0a:	f000 fc7a 	bl	800c302 <USBD_CtlError>
              break;
 800ba0e:	e01b      	b.n	800ba48 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba10:	683b      	ldr	r3, [r7, #0]
 800ba12:	885b      	ldrh	r3, [r3, #2]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d10e      	bne.n	800ba36 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800ba18:	7bbb      	ldrb	r3, [r7, #14]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d00b      	beq.n	800ba36 <USBD_StdEPReq+0xfe>
 800ba1e:	7bbb      	ldrb	r3, [r7, #14]
 800ba20:	2b80      	cmp	r3, #128	@ 0x80
 800ba22:	d008      	beq.n	800ba36 <USBD_StdEPReq+0xfe>
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	88db      	ldrh	r3, [r3, #6]
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d104      	bne.n	800ba36 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba2c:	7bbb      	ldrb	r3, [r7, #14]
 800ba2e:	4619      	mov	r1, r3
 800ba30:	6878      	ldr	r0, [r7, #4]
 800ba32:	f003 fad3 	bl	800efdc <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ba36:	6878      	ldr	r0, [r7, #4]
 800ba38:	f000 fd3a 	bl	800c4b0 <USBD_CtlSendStatus>

              break;
 800ba3c:	e004      	b.n	800ba48 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ba3e:	6839      	ldr	r1, [r7, #0]
 800ba40:	6878      	ldr	r0, [r7, #4]
 800ba42:	f000 fc5e 	bl	800c302 <USBD_CtlError>
              break;
 800ba46:	bf00      	nop
          }
          break;
 800ba48:	e107      	b.n	800bc5a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ba50:	b2db      	uxtb	r3, r3
 800ba52:	2b02      	cmp	r3, #2
 800ba54:	d002      	beq.n	800ba5c <USBD_StdEPReq+0x124>
 800ba56:	2b03      	cmp	r3, #3
 800ba58:	d016      	beq.n	800ba88 <USBD_StdEPReq+0x150>
 800ba5a:	e04b      	b.n	800baf4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ba5c:	7bbb      	ldrb	r3, [r7, #14]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d00d      	beq.n	800ba7e <USBD_StdEPReq+0x146>
 800ba62:	7bbb      	ldrb	r3, [r7, #14]
 800ba64:	2b80      	cmp	r3, #128	@ 0x80
 800ba66:	d00a      	beq.n	800ba7e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ba68:	7bbb      	ldrb	r3, [r7, #14]
 800ba6a:	4619      	mov	r1, r3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f003 fab5 	bl	800efdc <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ba72:	2180      	movs	r1, #128	@ 0x80
 800ba74:	6878      	ldr	r0, [r7, #4]
 800ba76:	f003 fab1 	bl	800efdc <USBD_LL_StallEP>
 800ba7a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ba7c:	e040      	b.n	800bb00 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ba7e:	6839      	ldr	r1, [r7, #0]
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	f000 fc3e 	bl	800c302 <USBD_CtlError>
              break;
 800ba86:	e03b      	b.n	800bb00 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ba88:	683b      	ldr	r3, [r7, #0]
 800ba8a:	885b      	ldrh	r3, [r3, #2]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d136      	bne.n	800bafe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ba90:	7bbb      	ldrb	r3, [r7, #14]
 800ba92:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d004      	beq.n	800baa4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ba9a:	7bbb      	ldrb	r3, [r7, #14]
 800ba9c:	4619      	mov	r1, r3
 800ba9e:	6878      	ldr	r0, [r7, #4]
 800baa0:	f003 fabb 	bl	800f01a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fd03 	bl	800c4b0 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800baaa:	7bbb      	ldrb	r3, [r7, #14]
 800baac:	4619      	mov	r1, r3
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f7ff fde4 	bl	800b67c <USBD_CoreFindEP>
 800bab4:	4603      	mov	r3, r0
 800bab6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800bab8:	7b7b      	ldrb	r3, [r7, #13]
 800baba:	2bff      	cmp	r3, #255	@ 0xff
 800babc:	d01f      	beq.n	800bafe <USBD_StdEPReq+0x1c6>
 800babe:	7b7b      	ldrb	r3, [r7, #13]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d11c      	bne.n	800bafe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800bac4:	7b7a      	ldrb	r2, [r7, #13]
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800bacc:	7b7a      	ldrb	r2, [r7, #13]
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	32ae      	adds	r2, #174	@ 0xae
 800bad2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bad6:	689b      	ldr	r3, [r3, #8]
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d010      	beq.n	800bafe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800badc:	7b7a      	ldrb	r2, [r7, #13]
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	32ae      	adds	r2, #174	@ 0xae
 800bae2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bae6:	689b      	ldr	r3, [r3, #8]
 800bae8:	6839      	ldr	r1, [r7, #0]
 800baea:	6878      	ldr	r0, [r7, #4]
 800baec:	4798      	blx	r3
 800baee:	4603      	mov	r3, r0
 800baf0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800baf2:	e004      	b.n	800bafe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800baf4:	6839      	ldr	r1, [r7, #0]
 800baf6:	6878      	ldr	r0, [r7, #4]
 800baf8:	f000 fc03 	bl	800c302 <USBD_CtlError>
              break;
 800bafc:	e000      	b.n	800bb00 <USBD_StdEPReq+0x1c8>
              break;
 800bafe:	bf00      	nop
          }
          break;
 800bb00:	e0ab      	b.n	800bc5a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb08:	b2db      	uxtb	r3, r3
 800bb0a:	2b02      	cmp	r3, #2
 800bb0c:	d002      	beq.n	800bb14 <USBD_StdEPReq+0x1dc>
 800bb0e:	2b03      	cmp	r3, #3
 800bb10:	d032      	beq.n	800bb78 <USBD_StdEPReq+0x240>
 800bb12:	e097      	b.n	800bc44 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800bb14:	7bbb      	ldrb	r3, [r7, #14]
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d007      	beq.n	800bb2a <USBD_StdEPReq+0x1f2>
 800bb1a:	7bbb      	ldrb	r3, [r7, #14]
 800bb1c:	2b80      	cmp	r3, #128	@ 0x80
 800bb1e:	d004      	beq.n	800bb2a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800bb20:	6839      	ldr	r1, [r7, #0]
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fbed 	bl	800c302 <USBD_CtlError>
                break;
 800bb28:	e091      	b.n	800bc4e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb2a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	da0b      	bge.n	800bb4a <USBD_StdEPReq+0x212>
 800bb32:	7bbb      	ldrb	r3, [r7, #14]
 800bb34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bb38:	4613      	mov	r3, r2
 800bb3a:	009b      	lsls	r3, r3, #2
 800bb3c:	4413      	add	r3, r2
 800bb3e:	009b      	lsls	r3, r3, #2
 800bb40:	3310      	adds	r3, #16
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4413      	add	r3, r2
 800bb46:	3304      	adds	r3, #4
 800bb48:	e00b      	b.n	800bb62 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bb4a:	7bbb      	ldrb	r3, [r7, #14]
 800bb4c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bb50:	4613      	mov	r3, r2
 800bb52:	009b      	lsls	r3, r3, #2
 800bb54:	4413      	add	r3, r2
 800bb56:	009b      	lsls	r3, r3, #2
 800bb58:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bb5c:	687a      	ldr	r2, [r7, #4]
 800bb5e:	4413      	add	r3, r2
 800bb60:	3304      	adds	r3, #4
 800bb62:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	2200      	movs	r2, #0
 800bb68:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bb6a:	68bb      	ldr	r3, [r7, #8]
 800bb6c:	2202      	movs	r2, #2
 800bb6e:	4619      	mov	r1, r3
 800bb70:	6878      	ldr	r0, [r7, #4]
 800bb72:	f000 fc43 	bl	800c3fc <USBD_CtlSendData>
              break;
 800bb76:	e06a      	b.n	800bc4e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800bb78:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	da11      	bge.n	800bba4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800bb80:	7bbb      	ldrb	r3, [r7, #14]
 800bb82:	f003 020f 	and.w	r2, r3, #15
 800bb86:	6879      	ldr	r1, [r7, #4]
 800bb88:	4613      	mov	r3, r2
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	009b      	lsls	r3, r3, #2
 800bb90:	440b      	add	r3, r1
 800bb92:	3324      	adds	r3, #36	@ 0x24
 800bb94:	881b      	ldrh	r3, [r3, #0]
 800bb96:	2b00      	cmp	r3, #0
 800bb98:	d117      	bne.n	800bbca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bb9a:	6839      	ldr	r1, [r7, #0]
 800bb9c:	6878      	ldr	r0, [r7, #4]
 800bb9e:	f000 fbb0 	bl	800c302 <USBD_CtlError>
                  break;
 800bba2:	e054      	b.n	800bc4e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800bba4:	7bbb      	ldrb	r3, [r7, #14]
 800bba6:	f003 020f 	and.w	r2, r3, #15
 800bbaa:	6879      	ldr	r1, [r7, #4]
 800bbac:	4613      	mov	r3, r2
 800bbae:	009b      	lsls	r3, r3, #2
 800bbb0:	4413      	add	r3, r2
 800bbb2:	009b      	lsls	r3, r3, #2
 800bbb4:	440b      	add	r3, r1
 800bbb6:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 800bbba:	881b      	ldrh	r3, [r3, #0]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d104      	bne.n	800bbca <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	f000 fb9d 	bl	800c302 <USBD_CtlError>
                  break;
 800bbc8:	e041      	b.n	800bc4e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800bbce:	2b00      	cmp	r3, #0
 800bbd0:	da0b      	bge.n	800bbea <USBD_StdEPReq+0x2b2>
 800bbd2:	7bbb      	ldrb	r3, [r7, #14]
 800bbd4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800bbd8:	4613      	mov	r3, r2
 800bbda:	009b      	lsls	r3, r3, #2
 800bbdc:	4413      	add	r3, r2
 800bbde:	009b      	lsls	r3, r3, #2
 800bbe0:	3310      	adds	r3, #16
 800bbe2:	687a      	ldr	r2, [r7, #4]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	e00b      	b.n	800bc02 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800bbea:	7bbb      	ldrb	r3, [r7, #14]
 800bbec:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800bbfc:	687a      	ldr	r2, [r7, #4]
 800bbfe:	4413      	add	r3, r2
 800bc00:	3304      	adds	r3, #4
 800bc02:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800bc04:	7bbb      	ldrb	r3, [r7, #14]
 800bc06:	2b00      	cmp	r3, #0
 800bc08:	d002      	beq.n	800bc10 <USBD_StdEPReq+0x2d8>
 800bc0a:	7bbb      	ldrb	r3, [r7, #14]
 800bc0c:	2b80      	cmp	r3, #128	@ 0x80
 800bc0e:	d103      	bne.n	800bc18 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	2200      	movs	r2, #0
 800bc14:	601a      	str	r2, [r3, #0]
 800bc16:	e00e      	b.n	800bc36 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800bc18:	7bbb      	ldrb	r3, [r7, #14]
 800bc1a:	4619      	mov	r1, r3
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	f003 fa1b 	bl	800f058 <USBD_LL_IsStallEP>
 800bc22:	4603      	mov	r3, r0
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d003      	beq.n	800bc30 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	601a      	str	r2, [r3, #0]
 800bc2e:	e002      	b.n	800bc36 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800bc30:	68bb      	ldr	r3, [r7, #8]
 800bc32:	2200      	movs	r2, #0
 800bc34:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800bc36:	68bb      	ldr	r3, [r7, #8]
 800bc38:	2202      	movs	r2, #2
 800bc3a:	4619      	mov	r1, r3
 800bc3c:	6878      	ldr	r0, [r7, #4]
 800bc3e:	f000 fbdd 	bl	800c3fc <USBD_CtlSendData>
              break;
 800bc42:	e004      	b.n	800bc4e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800bc44:	6839      	ldr	r1, [r7, #0]
 800bc46:	6878      	ldr	r0, [r7, #4]
 800bc48:	f000 fb5b 	bl	800c302 <USBD_CtlError>
              break;
 800bc4c:	bf00      	nop
          }
          break;
 800bc4e:	e004      	b.n	800bc5a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800bc50:	6839      	ldr	r1, [r7, #0]
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 fb55 	bl	800c302 <USBD_CtlError>
          break;
 800bc58:	bf00      	nop
      }
      break;
 800bc5a:	e005      	b.n	800bc68 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800bc5c:	6839      	ldr	r1, [r7, #0]
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f000 fb4f 	bl	800c302 <USBD_CtlError>
      break;
 800bc64:	e000      	b.n	800bc68 <USBD_StdEPReq+0x330>
      break;
 800bc66:	bf00      	nop
  }

  return ret;
 800bc68:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	3710      	adds	r7, #16
 800bc6e:	46bd      	mov	sp, r7
 800bc70:	bd80      	pop	{r7, pc}
	...

0800bc74 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bc74:	b580      	push	{r7, lr}
 800bc76:	b084      	sub	sp, #16
 800bc78:	af00      	add	r7, sp, #0
 800bc7a:	6078      	str	r0, [r7, #4]
 800bc7c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800bc7e:	2300      	movs	r3, #0
 800bc80:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800bc82:	2300      	movs	r3, #0
 800bc84:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800bc86:	2300      	movs	r3, #0
 800bc88:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800bc8a:	683b      	ldr	r3, [r7, #0]
 800bc8c:	885b      	ldrh	r3, [r3, #2]
 800bc8e:	0a1b      	lsrs	r3, r3, #8
 800bc90:	b29b      	uxth	r3, r3
 800bc92:	3b01      	subs	r3, #1
 800bc94:	2b06      	cmp	r3, #6
 800bc96:	f200 8128 	bhi.w	800beea <USBD_GetDescriptor+0x276>
 800bc9a:	a201      	add	r2, pc, #4	@ (adr r2, 800bca0 <USBD_GetDescriptor+0x2c>)
 800bc9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bca0:	0800bcbd 	.word	0x0800bcbd
 800bca4:	0800bcd5 	.word	0x0800bcd5
 800bca8:	0800bd15 	.word	0x0800bd15
 800bcac:	0800beeb 	.word	0x0800beeb
 800bcb0:	0800beeb 	.word	0x0800beeb
 800bcb4:	0800be8b 	.word	0x0800be8b
 800bcb8:	0800beb7 	.word	0x0800beb7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	687a      	ldr	r2, [r7, #4]
 800bcc6:	7c12      	ldrb	r2, [r2, #16]
 800bcc8:	f107 0108 	add.w	r1, r7, #8
 800bccc:	4610      	mov	r0, r2
 800bcce:	4798      	blx	r3
 800bcd0:	60f8      	str	r0, [r7, #12]
      break;
 800bcd2:	e112      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	7c1b      	ldrb	r3, [r3, #16]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d10d      	bne.n	800bcf8 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bce4:	f107 0208 	add.w	r2, r7, #8
 800bce8:	4610      	mov	r0, r2
 800bcea:	4798      	blx	r3
 800bcec:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	3301      	adds	r3, #1
 800bcf2:	2202      	movs	r2, #2
 800bcf4:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800bcf6:	e100      	b.n	800befa <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bcfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd00:	f107 0208 	add.w	r2, r7, #8
 800bd04:	4610      	mov	r0, r2
 800bd06:	4798      	blx	r3
 800bd08:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3301      	adds	r3, #1
 800bd0e:	2202      	movs	r2, #2
 800bd10:	701a      	strb	r2, [r3, #0]
      break;
 800bd12:	e0f2      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800bd14:	683b      	ldr	r3, [r7, #0]
 800bd16:	885b      	ldrh	r3, [r3, #2]
 800bd18:	b2db      	uxtb	r3, r3
 800bd1a:	2b05      	cmp	r3, #5
 800bd1c:	f200 80ac 	bhi.w	800be78 <USBD_GetDescriptor+0x204>
 800bd20:	a201      	add	r2, pc, #4	@ (adr r2, 800bd28 <USBD_GetDescriptor+0xb4>)
 800bd22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd26:	bf00      	nop
 800bd28:	0800bd41 	.word	0x0800bd41
 800bd2c:	0800bd75 	.word	0x0800bd75
 800bd30:	0800bda9 	.word	0x0800bda9
 800bd34:	0800bddd 	.word	0x0800bddd
 800bd38:	0800be11 	.word	0x0800be11
 800bd3c:	0800be45 	.word	0x0800be45
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d00b      	beq.n	800bd64 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	687a      	ldr	r2, [r7, #4]
 800bd56:	7c12      	ldrb	r2, [r2, #16]
 800bd58:	f107 0108 	add.w	r1, r7, #8
 800bd5c:	4610      	mov	r0, r2
 800bd5e:	4798      	blx	r3
 800bd60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd62:	e091      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd64:	6839      	ldr	r1, [r7, #0]
 800bd66:	6878      	ldr	r0, [r7, #4]
 800bd68:	f000 facb 	bl	800c302 <USBD_CtlError>
            err++;
 800bd6c:	7afb      	ldrb	r3, [r7, #11]
 800bd6e:	3301      	adds	r3, #1
 800bd70:	72fb      	strb	r3, [r7, #11]
          break;
 800bd72:	e089      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd7a:	689b      	ldr	r3, [r3, #8]
 800bd7c:	2b00      	cmp	r3, #0
 800bd7e:	d00b      	beq.n	800bd98 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bd86:	689b      	ldr	r3, [r3, #8]
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	7c12      	ldrb	r2, [r2, #16]
 800bd8c:	f107 0108 	add.w	r1, r7, #8
 800bd90:	4610      	mov	r0, r2
 800bd92:	4798      	blx	r3
 800bd94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bd96:	e077      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bd98:	6839      	ldr	r1, [r7, #0]
 800bd9a:	6878      	ldr	r0, [r7, #4]
 800bd9c:	f000 fab1 	bl	800c302 <USBD_CtlError>
            err++;
 800bda0:	7afb      	ldrb	r3, [r7, #11]
 800bda2:	3301      	adds	r3, #1
 800bda4:	72fb      	strb	r3, [r7, #11]
          break;
 800bda6:	e06f      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdae:	68db      	ldr	r3, [r3, #12]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d00b      	beq.n	800bdcc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdba:	68db      	ldr	r3, [r3, #12]
 800bdbc:	687a      	ldr	r2, [r7, #4]
 800bdbe:	7c12      	ldrb	r2, [r2, #16]
 800bdc0:	f107 0108 	add.w	r1, r7, #8
 800bdc4:	4610      	mov	r0, r2
 800bdc6:	4798      	blx	r3
 800bdc8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdca:	e05d      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800bdcc:	6839      	ldr	r1, [r7, #0]
 800bdce:	6878      	ldr	r0, [r7, #4]
 800bdd0:	f000 fa97 	bl	800c302 <USBD_CtlError>
            err++;
 800bdd4:	7afb      	ldrb	r3, [r7, #11]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	72fb      	strb	r3, [r7, #11]
          break;
 800bdda:	e055      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bde2:	691b      	ldr	r3, [r3, #16]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d00b      	beq.n	800be00 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800bde8:	687b      	ldr	r3, [r7, #4]
 800bdea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800bdee:	691b      	ldr	r3, [r3, #16]
 800bdf0:	687a      	ldr	r2, [r7, #4]
 800bdf2:	7c12      	ldrb	r2, [r2, #16]
 800bdf4:	f107 0108 	add.w	r1, r7, #8
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800bdfe:	e043      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be00:	6839      	ldr	r1, [r7, #0]
 800be02:	6878      	ldr	r0, [r7, #4]
 800be04:	f000 fa7d 	bl	800c302 <USBD_CtlError>
            err++;
 800be08:	7afb      	ldrb	r3, [r7, #11]
 800be0a:	3301      	adds	r3, #1
 800be0c:	72fb      	strb	r3, [r7, #11]
          break;
 800be0e:	e03b      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be16:	695b      	ldr	r3, [r3, #20]
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d00b      	beq.n	800be34 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be22:	695b      	ldr	r3, [r3, #20]
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	7c12      	ldrb	r2, [r2, #16]
 800be28:	f107 0108 	add.w	r1, r7, #8
 800be2c:	4610      	mov	r0, r2
 800be2e:	4798      	blx	r3
 800be30:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be32:	e029      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be34:	6839      	ldr	r1, [r7, #0]
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f000 fa63 	bl	800c302 <USBD_CtlError>
            err++;
 800be3c:	7afb      	ldrb	r3, [r7, #11]
 800be3e:	3301      	adds	r3, #1
 800be40:	72fb      	strb	r3, [r7, #11]
          break;
 800be42:	e021      	b.n	800be88 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be4a:	699b      	ldr	r3, [r3, #24]
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d00b      	beq.n	800be68 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800be56:	699b      	ldr	r3, [r3, #24]
 800be58:	687a      	ldr	r2, [r7, #4]
 800be5a:	7c12      	ldrb	r2, [r2, #16]
 800be5c:	f107 0108 	add.w	r1, r7, #8
 800be60:	4610      	mov	r0, r2
 800be62:	4798      	blx	r3
 800be64:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800be66:	e00f      	b.n	800be88 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800be68:	6839      	ldr	r1, [r7, #0]
 800be6a:	6878      	ldr	r0, [r7, #4]
 800be6c:	f000 fa49 	bl	800c302 <USBD_CtlError>
            err++;
 800be70:	7afb      	ldrb	r3, [r7, #11]
 800be72:	3301      	adds	r3, #1
 800be74:	72fb      	strb	r3, [r7, #11]
          break;
 800be76:	e007      	b.n	800be88 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800be78:	6839      	ldr	r1, [r7, #0]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fa41 	bl	800c302 <USBD_CtlError>
          err++;
 800be80:	7afb      	ldrb	r3, [r7, #11]
 800be82:	3301      	adds	r3, #1
 800be84:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800be86:	bf00      	nop
      }
      break;
 800be88:	e037      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	7c1b      	ldrb	r3, [r3, #16]
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d109      	bne.n	800bea6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800be98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800be9a:	f107 0208 	add.w	r2, r7, #8
 800be9e:	4610      	mov	r0, r2
 800bea0:	4798      	blx	r3
 800bea2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bea4:	e029      	b.n	800befa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800bea6:	6839      	ldr	r1, [r7, #0]
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f000 fa2a 	bl	800c302 <USBD_CtlError>
        err++;
 800beae:	7afb      	ldrb	r3, [r7, #11]
 800beb0:	3301      	adds	r3, #1
 800beb2:	72fb      	strb	r3, [r7, #11]
      break;
 800beb4:	e021      	b.n	800befa <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800beb6:	687b      	ldr	r3, [r7, #4]
 800beb8:	7c1b      	ldrb	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d10d      	bne.n	800beda <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800bec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bec6:	f107 0208 	add.w	r2, r7, #8
 800beca:	4610      	mov	r0, r2
 800becc:	4798      	blx	r3
 800bece:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800bed0:	68fb      	ldr	r3, [r7, #12]
 800bed2:	3301      	adds	r3, #1
 800bed4:	2207      	movs	r2, #7
 800bed6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800bed8:	e00f      	b.n	800befa <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800beda:	6839      	ldr	r1, [r7, #0]
 800bedc:	6878      	ldr	r0, [r7, #4]
 800bede:	f000 fa10 	bl	800c302 <USBD_CtlError>
        err++;
 800bee2:	7afb      	ldrb	r3, [r7, #11]
 800bee4:	3301      	adds	r3, #1
 800bee6:	72fb      	strb	r3, [r7, #11]
      break;
 800bee8:	e007      	b.n	800befa <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800beea:	6839      	ldr	r1, [r7, #0]
 800beec:	6878      	ldr	r0, [r7, #4]
 800beee:	f000 fa08 	bl	800c302 <USBD_CtlError>
      err++;
 800bef2:	7afb      	ldrb	r3, [r7, #11]
 800bef4:	3301      	adds	r3, #1
 800bef6:	72fb      	strb	r3, [r7, #11]
      break;
 800bef8:	bf00      	nop
  }

  if (err != 0U)
 800befa:	7afb      	ldrb	r3, [r7, #11]
 800befc:	2b00      	cmp	r3, #0
 800befe:	d11e      	bne.n	800bf3e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	88db      	ldrh	r3, [r3, #6]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d016      	beq.n	800bf36 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800bf08:	893b      	ldrh	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00e      	beq.n	800bf2c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	88da      	ldrh	r2, [r3, #6]
 800bf12:	893b      	ldrh	r3, [r7, #8]
 800bf14:	4293      	cmp	r3, r2
 800bf16:	bf28      	it	cs
 800bf18:	4613      	movcs	r3, r2
 800bf1a:	b29b      	uxth	r3, r3
 800bf1c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800bf1e:	893b      	ldrh	r3, [r7, #8]
 800bf20:	461a      	mov	r2, r3
 800bf22:	68f9      	ldr	r1, [r7, #12]
 800bf24:	6878      	ldr	r0, [r7, #4]
 800bf26:	f000 fa69 	bl	800c3fc <USBD_CtlSendData>
 800bf2a:	e009      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800bf2c:	6839      	ldr	r1, [r7, #0]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	f000 f9e7 	bl	800c302 <USBD_CtlError>
 800bf34:	e004      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bf36:	6878      	ldr	r0, [r7, #4]
 800bf38:	f000 faba 	bl	800c4b0 <USBD_CtlSendStatus>
 800bf3c:	e000      	b.n	800bf40 <USBD_GetDescriptor+0x2cc>
    return;
 800bf3e:	bf00      	nop
  }
}
 800bf40:	3710      	adds	r7, #16
 800bf42:	46bd      	mov	sp, r7
 800bf44:	bd80      	pop	{r7, pc}
 800bf46:	bf00      	nop

0800bf48 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
 800bf50:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bf52:	683b      	ldr	r3, [r7, #0]
 800bf54:	889b      	ldrh	r3, [r3, #4]
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d131      	bne.n	800bfbe <USBD_SetAddress+0x76>
 800bf5a:	683b      	ldr	r3, [r7, #0]
 800bf5c:	88db      	ldrh	r3, [r3, #6]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d12d      	bne.n	800bfbe <USBD_SetAddress+0x76>
 800bf62:	683b      	ldr	r3, [r7, #0]
 800bf64:	885b      	ldrh	r3, [r3, #2]
 800bf66:	2b7f      	cmp	r3, #127	@ 0x7f
 800bf68:	d829      	bhi.n	800bfbe <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800bf6a:	683b      	ldr	r3, [r7, #0]
 800bf6c:	885b      	ldrh	r3, [r3, #2]
 800bf6e:	b2db      	uxtb	r3, r3
 800bf70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800bf74:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bf7c:	b2db      	uxtb	r3, r3
 800bf7e:	2b03      	cmp	r3, #3
 800bf80:	d104      	bne.n	800bf8c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bf82:	6839      	ldr	r1, [r7, #0]
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f000 f9bc 	bl	800c302 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bf8a:	e01d      	b.n	800bfc8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	7bfa      	ldrb	r2, [r7, #15]
 800bf90:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bf94:	7bfb      	ldrb	r3, [r7, #15]
 800bf96:	4619      	mov	r1, r3
 800bf98:	6878      	ldr	r0, [r7, #4]
 800bf9a:	f003 f889 	bl	800f0b0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 fa86 	bl	800c4b0 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bfa4:	7bfb      	ldrb	r3, [r7, #15]
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d004      	beq.n	800bfb4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	2202      	movs	r2, #2
 800bfae:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfb2:	e009      	b.n	800bfc8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2201      	movs	r2, #1
 800bfb8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bfbc:	e004      	b.n	800bfc8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bfbe:	6839      	ldr	r1, [r7, #0]
 800bfc0:	6878      	ldr	r0, [r7, #4]
 800bfc2:	f000 f99e 	bl	800c302 <USBD_CtlError>
  }
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	3710      	adds	r7, #16
 800bfcc:	46bd      	mov	sp, r7
 800bfce:	bd80      	pop	{r7, pc}

0800bfd0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bfd0:	b580      	push	{r7, lr}
 800bfd2:	b084      	sub	sp, #16
 800bfd4:	af00      	add	r7, sp, #0
 800bfd6:	6078      	str	r0, [r7, #4]
 800bfd8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bfda:	2300      	movs	r3, #0
 800bfdc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bfde:	683b      	ldr	r3, [r7, #0]
 800bfe0:	885b      	ldrh	r3, [r3, #2]
 800bfe2:	b2da      	uxtb	r2, r3
 800bfe4:	4b4e      	ldr	r3, [pc, #312]	@ (800c120 <USBD_SetConfig+0x150>)
 800bfe6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bfe8:	4b4d      	ldr	r3, [pc, #308]	@ (800c120 <USBD_SetConfig+0x150>)
 800bfea:	781b      	ldrb	r3, [r3, #0]
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d905      	bls.n	800bffc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bff0:	6839      	ldr	r1, [r7, #0]
 800bff2:	6878      	ldr	r0, [r7, #4]
 800bff4:	f000 f985 	bl	800c302 <USBD_CtlError>
    return USBD_FAIL;
 800bff8:	2303      	movs	r3, #3
 800bffa:	e08c      	b.n	800c116 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c002:	b2db      	uxtb	r3, r3
 800c004:	2b02      	cmp	r3, #2
 800c006:	d002      	beq.n	800c00e <USBD_SetConfig+0x3e>
 800c008:	2b03      	cmp	r3, #3
 800c00a:	d029      	beq.n	800c060 <USBD_SetConfig+0x90>
 800c00c:	e075      	b.n	800c0fa <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800c00e:	4b44      	ldr	r3, [pc, #272]	@ (800c120 <USBD_SetConfig+0x150>)
 800c010:	781b      	ldrb	r3, [r3, #0]
 800c012:	2b00      	cmp	r3, #0
 800c014:	d020      	beq.n	800c058 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800c016:	4b42      	ldr	r3, [pc, #264]	@ (800c120 <USBD_SetConfig+0x150>)
 800c018:	781b      	ldrb	r3, [r3, #0]
 800c01a:	461a      	mov	r2, r3
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c020:	4b3f      	ldr	r3, [pc, #252]	@ (800c120 <USBD_SetConfig+0x150>)
 800c022:	781b      	ldrb	r3, [r3, #0]
 800c024:	4619      	mov	r1, r3
 800c026:	6878      	ldr	r0, [r7, #4]
 800c028:	f7fe ffe3 	bl	800aff2 <USBD_SetClassConfig>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d008      	beq.n	800c048 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800c036:	6839      	ldr	r1, [r7, #0]
 800c038:	6878      	ldr	r0, [r7, #4]
 800c03a:	f000 f962 	bl	800c302 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2202      	movs	r2, #2
 800c042:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c046:	e065      	b.n	800c114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c048:	6878      	ldr	r0, [r7, #4]
 800c04a:	f000 fa31 	bl	800c4b0 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	2203      	movs	r2, #3
 800c052:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c056:	e05d      	b.n	800c114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c058:	6878      	ldr	r0, [r7, #4]
 800c05a:	f000 fa29 	bl	800c4b0 <USBD_CtlSendStatus>
      break;
 800c05e:	e059      	b.n	800c114 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800c060:	4b2f      	ldr	r3, [pc, #188]	@ (800c120 <USBD_SetConfig+0x150>)
 800c062:	781b      	ldrb	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d112      	bne.n	800c08e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	2202      	movs	r2, #2
 800c06c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800c070:	4b2b      	ldr	r3, [pc, #172]	@ (800c120 <USBD_SetConfig+0x150>)
 800c072:	781b      	ldrb	r3, [r3, #0]
 800c074:	461a      	mov	r2, r3
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c07a:	4b29      	ldr	r3, [pc, #164]	@ (800c120 <USBD_SetConfig+0x150>)
 800c07c:	781b      	ldrb	r3, [r3, #0]
 800c07e:	4619      	mov	r1, r3
 800c080:	6878      	ldr	r0, [r7, #4]
 800c082:	f7fe ffd2 	bl	800b02a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800c086:	6878      	ldr	r0, [r7, #4]
 800c088:	f000 fa12 	bl	800c4b0 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800c08c:	e042      	b.n	800c114 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800c08e:	4b24      	ldr	r3, [pc, #144]	@ (800c120 <USBD_SetConfig+0x150>)
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	461a      	mov	r2, r3
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	429a      	cmp	r2, r3
 800c09a:	d02a      	beq.n	800c0f2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	685b      	ldr	r3, [r3, #4]
 800c0a0:	b2db      	uxtb	r3, r3
 800c0a2:	4619      	mov	r1, r3
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	f7fe ffc0 	bl	800b02a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800c0aa:	4b1d      	ldr	r3, [pc, #116]	@ (800c120 <USBD_SetConfig+0x150>)
 800c0ac:	781b      	ldrb	r3, [r3, #0]
 800c0ae:	461a      	mov	r2, r3
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	@ (800c120 <USBD_SetConfig+0x150>)
 800c0b6:	781b      	ldrb	r3, [r3, #0]
 800c0b8:	4619      	mov	r1, r3
 800c0ba:	6878      	ldr	r0, [r7, #4]
 800c0bc:	f7fe ff99 	bl	800aff2 <USBD_SetClassConfig>
 800c0c0:	4603      	mov	r3, r0
 800c0c2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800c0c4:	7bfb      	ldrb	r3, [r7, #15]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d00f      	beq.n	800c0ea <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800c0ca:	6839      	ldr	r1, [r7, #0]
 800c0cc:	6878      	ldr	r0, [r7, #4]
 800c0ce:	f000 f918 	bl	800c302 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	685b      	ldr	r3, [r3, #4]
 800c0d6:	b2db      	uxtb	r3, r3
 800c0d8:	4619      	mov	r1, r3
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f7fe ffa5 	bl	800b02a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	2202      	movs	r2, #2
 800c0e4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800c0e8:	e014      	b.n	800c114 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800c0ea:	6878      	ldr	r0, [r7, #4]
 800c0ec:	f000 f9e0 	bl	800c4b0 <USBD_CtlSendStatus>
      break;
 800c0f0:	e010      	b.n	800c114 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800c0f2:	6878      	ldr	r0, [r7, #4]
 800c0f4:	f000 f9dc 	bl	800c4b0 <USBD_CtlSendStatus>
      break;
 800c0f8:	e00c      	b.n	800c114 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800c0fa:	6839      	ldr	r1, [r7, #0]
 800c0fc:	6878      	ldr	r0, [r7, #4]
 800c0fe:	f000 f900 	bl	800c302 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800c102:	4b07      	ldr	r3, [pc, #28]	@ (800c120 <USBD_SetConfig+0x150>)
 800c104:	781b      	ldrb	r3, [r3, #0]
 800c106:	4619      	mov	r1, r3
 800c108:	6878      	ldr	r0, [r7, #4]
 800c10a:	f7fe ff8e 	bl	800b02a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800c10e:	2303      	movs	r3, #3
 800c110:	73fb      	strb	r3, [r7, #15]
      break;
 800c112:	bf00      	nop
  }

  return ret;
 800c114:	7bfb      	ldrb	r3, [r7, #15]
}
 800c116:	4618      	mov	r0, r3
 800c118:	3710      	adds	r7, #16
 800c11a:	46bd      	mov	sp, r7
 800c11c:	bd80      	pop	{r7, pc}
 800c11e:	bf00      	nop
 800c120:	200003f4 	.word	0x200003f4

0800c124 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b082      	sub	sp, #8
 800c128:	af00      	add	r7, sp, #0
 800c12a:	6078      	str	r0, [r7, #4]
 800c12c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	88db      	ldrh	r3, [r3, #6]
 800c132:	2b01      	cmp	r3, #1
 800c134:	d004      	beq.n	800c140 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800c136:	6839      	ldr	r1, [r7, #0]
 800c138:	6878      	ldr	r0, [r7, #4]
 800c13a:	f000 f8e2 	bl	800c302 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800c13e:	e023      	b.n	800c188 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c146:	b2db      	uxtb	r3, r3
 800c148:	2b02      	cmp	r3, #2
 800c14a:	dc02      	bgt.n	800c152 <USBD_GetConfig+0x2e>
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	dc03      	bgt.n	800c158 <USBD_GetConfig+0x34>
 800c150:	e015      	b.n	800c17e <USBD_GetConfig+0x5a>
 800c152:	2b03      	cmp	r3, #3
 800c154:	d00b      	beq.n	800c16e <USBD_GetConfig+0x4a>
 800c156:	e012      	b.n	800c17e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	2200      	movs	r2, #0
 800c15c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	3308      	adds	r3, #8
 800c162:	2201      	movs	r2, #1
 800c164:	4619      	mov	r1, r3
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f000 f948 	bl	800c3fc <USBD_CtlSendData>
        break;
 800c16c:	e00c      	b.n	800c188 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	3304      	adds	r3, #4
 800c172:	2201      	movs	r2, #1
 800c174:	4619      	mov	r1, r3
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f940 	bl	800c3fc <USBD_CtlSendData>
        break;
 800c17c:	e004      	b.n	800c188 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800c17e:	6839      	ldr	r1, [r7, #0]
 800c180:	6878      	ldr	r0, [r7, #4]
 800c182:	f000 f8be 	bl	800c302 <USBD_CtlError>
        break;
 800c186:	bf00      	nop
}
 800c188:	bf00      	nop
 800c18a:	3708      	adds	r7, #8
 800c18c:	46bd      	mov	sp, r7
 800c18e:	bd80      	pop	{r7, pc}

0800c190 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c190:	b580      	push	{r7, lr}
 800c192:	b082      	sub	sp, #8
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
 800c198:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c1a0:	b2db      	uxtb	r3, r3
 800c1a2:	3b01      	subs	r3, #1
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d81e      	bhi.n	800c1e6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	88db      	ldrh	r3, [r3, #6]
 800c1ac:	2b02      	cmp	r3, #2
 800c1ae:	d004      	beq.n	800c1ba <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800c1b0:	6839      	ldr	r1, [r7, #0]
 800c1b2:	6878      	ldr	r0, [r7, #4]
 800c1b4:	f000 f8a5 	bl	800c302 <USBD_CtlError>
        break;
 800c1b8:	e01a      	b.n	800c1f0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	2201      	movs	r2, #1
 800c1be:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d005      	beq.n	800c1d6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	f043 0202 	orr.w	r2, r3, #2
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	330c      	adds	r3, #12
 800c1da:	2202      	movs	r2, #2
 800c1dc:	4619      	mov	r1, r3
 800c1de:	6878      	ldr	r0, [r7, #4]
 800c1e0:	f000 f90c 	bl	800c3fc <USBD_CtlSendData>
      break;
 800c1e4:	e004      	b.n	800c1f0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800c1e6:	6839      	ldr	r1, [r7, #0]
 800c1e8:	6878      	ldr	r0, [r7, #4]
 800c1ea:	f000 f88a 	bl	800c302 <USBD_CtlError>
      break;
 800c1ee:	bf00      	nop
  }
}
 800c1f0:	bf00      	nop
 800c1f2:	3708      	adds	r7, #8
 800c1f4:	46bd      	mov	sp, r7
 800c1f6:	bd80      	pop	{r7, pc}

0800c1f8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b082      	sub	sp, #8
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	885b      	ldrh	r3, [r3, #2]
 800c206:	2b01      	cmp	r3, #1
 800c208:	d107      	bne.n	800c21a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2201      	movs	r2, #1
 800c20e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800c212:	6878      	ldr	r0, [r7, #4]
 800c214:	f000 f94c 	bl	800c4b0 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800c218:	e013      	b.n	800c242 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800c21a:	683b      	ldr	r3, [r7, #0]
 800c21c:	885b      	ldrh	r3, [r3, #2]
 800c21e:	2b02      	cmp	r3, #2
 800c220:	d10b      	bne.n	800c23a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	889b      	ldrh	r3, [r3, #4]
 800c226:	0a1b      	lsrs	r3, r3, #8
 800c228:	b29b      	uxth	r3, r3
 800c22a:	b2da      	uxtb	r2, r3
 800c22c:	687b      	ldr	r3, [r7, #4]
 800c22e:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800c232:	6878      	ldr	r0, [r7, #4]
 800c234:	f000 f93c 	bl	800c4b0 <USBD_CtlSendStatus>
}
 800c238:	e003      	b.n	800c242 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800c23a:	6839      	ldr	r1, [r7, #0]
 800c23c:	6878      	ldr	r0, [r7, #4]
 800c23e:	f000 f860 	bl	800c302 <USBD_CtlError>
}
 800c242:	bf00      	nop
 800c244:	3708      	adds	r7, #8
 800c246:	46bd      	mov	sp, r7
 800c248:	bd80      	pop	{r7, pc}

0800c24a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c24a:	b580      	push	{r7, lr}
 800c24c:	b082      	sub	sp, #8
 800c24e:	af00      	add	r7, sp, #0
 800c250:	6078      	str	r0, [r7, #4]
 800c252:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800c25a:	b2db      	uxtb	r3, r3
 800c25c:	3b01      	subs	r3, #1
 800c25e:	2b02      	cmp	r3, #2
 800c260:	d80b      	bhi.n	800c27a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800c262:	683b      	ldr	r3, [r7, #0]
 800c264:	885b      	ldrh	r3, [r3, #2]
 800c266:	2b01      	cmp	r3, #1
 800c268:	d10c      	bne.n	800c284 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	2200      	movs	r2, #0
 800c26e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800c272:	6878      	ldr	r0, [r7, #4]
 800c274:	f000 f91c 	bl	800c4b0 <USBD_CtlSendStatus>
      }
      break;
 800c278:	e004      	b.n	800c284 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800c27a:	6839      	ldr	r1, [r7, #0]
 800c27c:	6878      	ldr	r0, [r7, #4]
 800c27e:	f000 f840 	bl	800c302 <USBD_CtlError>
      break;
 800c282:	e000      	b.n	800c286 <USBD_ClrFeature+0x3c>
      break;
 800c284:	bf00      	nop
  }
}
 800c286:	bf00      	nop
 800c288:	3708      	adds	r7, #8
 800c28a:	46bd      	mov	sp, r7
 800c28c:	bd80      	pop	{r7, pc}

0800c28e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800c28e:	b580      	push	{r7, lr}
 800c290:	b084      	sub	sp, #16
 800c292:	af00      	add	r7, sp, #0
 800c294:	6078      	str	r0, [r7, #4]
 800c296:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800c298:	683b      	ldr	r3, [r7, #0]
 800c29a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	781a      	ldrb	r2, [r3, #0]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800c2a4:	68fb      	ldr	r3, [r7, #12]
 800c2a6:	3301      	adds	r3, #1
 800c2a8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	781a      	ldrb	r2, [r3, #0]
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	3301      	adds	r3, #1
 800c2b6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800c2b8:	68f8      	ldr	r0, [r7, #12]
 800c2ba:	f7ff fa40 	bl	800b73e <SWAPBYTE>
 800c2be:	4603      	mov	r3, r0
 800c2c0:	461a      	mov	r2, r3
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	3301      	adds	r3, #1
 800c2ca:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2cc:	68fb      	ldr	r3, [r7, #12]
 800c2ce:	3301      	adds	r3, #1
 800c2d0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800c2d2:	68f8      	ldr	r0, [r7, #12]
 800c2d4:	f7ff fa33 	bl	800b73e <SWAPBYTE>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	461a      	mov	r2, r3
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	3301      	adds	r3, #1
 800c2e4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	3301      	adds	r3, #1
 800c2ea:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f7ff fa26 	bl	800b73e <SWAPBYTE>
 800c2f2:	4603      	mov	r3, r0
 800c2f4:	461a      	mov	r2, r3
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	80da      	strh	r2, [r3, #6]
}
 800c2fa:	bf00      	nop
 800c2fc:	3710      	adds	r7, #16
 800c2fe:	46bd      	mov	sp, r7
 800c300:	bd80      	pop	{r7, pc}

0800c302 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800c302:	b580      	push	{r7, lr}
 800c304:	b082      	sub	sp, #8
 800c306:	af00      	add	r7, sp, #0
 800c308:	6078      	str	r0, [r7, #4]
 800c30a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800c30c:	2180      	movs	r1, #128	@ 0x80
 800c30e:	6878      	ldr	r0, [r7, #4]
 800c310:	f002 fe64 	bl	800efdc <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f002 fe60 	bl	800efdc <USBD_LL_StallEP>
}
 800c31c:	bf00      	nop
 800c31e:	3708      	adds	r7, #8
 800c320:	46bd      	mov	sp, r7
 800c322:	bd80      	pop	{r7, pc}

0800c324 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b086      	sub	sp, #24
 800c328:	af00      	add	r7, sp, #0
 800c32a:	60f8      	str	r0, [r7, #12]
 800c32c:	60b9      	str	r1, [r7, #8]
 800c32e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800c330:	2300      	movs	r3, #0
 800c332:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800c334:	68fb      	ldr	r3, [r7, #12]
 800c336:	2b00      	cmp	r3, #0
 800c338:	d042      	beq.n	800c3c0 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800c33a:	68fb      	ldr	r3, [r7, #12]
 800c33c:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800c33e:	6938      	ldr	r0, [r7, #16]
 800c340:	f000 f842 	bl	800c3c8 <USBD_GetLen>
 800c344:	4603      	mov	r3, r0
 800c346:	3301      	adds	r3, #1
 800c348:	005b      	lsls	r3, r3, #1
 800c34a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c34e:	d808      	bhi.n	800c362 <USBD_GetString+0x3e>
 800c350:	6938      	ldr	r0, [r7, #16]
 800c352:	f000 f839 	bl	800c3c8 <USBD_GetLen>
 800c356:	4603      	mov	r3, r0
 800c358:	3301      	adds	r3, #1
 800c35a:	b29b      	uxth	r3, r3
 800c35c:	005b      	lsls	r3, r3, #1
 800c35e:	b29a      	uxth	r2, r3
 800c360:	e001      	b.n	800c366 <USBD_GetString+0x42>
 800c362:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c366:	687b      	ldr	r3, [r7, #4]
 800c368:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800c36a:	7dfb      	ldrb	r3, [r7, #23]
 800c36c:	68ba      	ldr	r2, [r7, #8]
 800c36e:	4413      	add	r3, r2
 800c370:	687a      	ldr	r2, [r7, #4]
 800c372:	7812      	ldrb	r2, [r2, #0]
 800c374:	701a      	strb	r2, [r3, #0]
  idx++;
 800c376:	7dfb      	ldrb	r3, [r7, #23]
 800c378:	3301      	adds	r3, #1
 800c37a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800c37c:	7dfb      	ldrb	r3, [r7, #23]
 800c37e:	68ba      	ldr	r2, [r7, #8]
 800c380:	4413      	add	r3, r2
 800c382:	2203      	movs	r2, #3
 800c384:	701a      	strb	r2, [r3, #0]
  idx++;
 800c386:	7dfb      	ldrb	r3, [r7, #23]
 800c388:	3301      	adds	r3, #1
 800c38a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800c38c:	e013      	b.n	800c3b6 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800c38e:	7dfb      	ldrb	r3, [r7, #23]
 800c390:	68ba      	ldr	r2, [r7, #8]
 800c392:	4413      	add	r3, r2
 800c394:	693a      	ldr	r2, [r7, #16]
 800c396:	7812      	ldrb	r2, [r2, #0]
 800c398:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800c39a:	693b      	ldr	r3, [r7, #16]
 800c39c:	3301      	adds	r3, #1
 800c39e:	613b      	str	r3, [r7, #16]
    idx++;
 800c3a0:	7dfb      	ldrb	r3, [r7, #23]
 800c3a2:	3301      	adds	r3, #1
 800c3a4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800c3a6:	7dfb      	ldrb	r3, [r7, #23]
 800c3a8:	68ba      	ldr	r2, [r7, #8]
 800c3aa:	4413      	add	r3, r2
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	701a      	strb	r2, [r3, #0]
    idx++;
 800c3b0:	7dfb      	ldrb	r3, [r7, #23]
 800c3b2:	3301      	adds	r3, #1
 800c3b4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800c3b6:	693b      	ldr	r3, [r7, #16]
 800c3b8:	781b      	ldrb	r3, [r3, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d1e7      	bne.n	800c38e <USBD_GetString+0x6a>
 800c3be:	e000      	b.n	800c3c2 <USBD_GetString+0x9e>
    return;
 800c3c0:	bf00      	nop
  }
}
 800c3c2:	3718      	adds	r7, #24
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800c3c8:	b480      	push	{r7}
 800c3ca:	b085      	sub	sp, #20
 800c3cc:	af00      	add	r7, sp, #0
 800c3ce:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800c3d8:	e005      	b.n	800c3e6 <USBD_GetLen+0x1e>
  {
    len++;
 800c3da:	7bfb      	ldrb	r3, [r7, #15]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800c3e0:	68bb      	ldr	r3, [r7, #8]
 800c3e2:	3301      	adds	r3, #1
 800c3e4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	781b      	ldrb	r3, [r3, #0]
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d1f5      	bne.n	800c3da <USBD_GetLen+0x12>
  }

  return len;
 800c3ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr

0800c3fc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800c3fc:	b580      	push	{r7, lr}
 800c3fe:	b084      	sub	sp, #16
 800c400:	af00      	add	r7, sp, #0
 800c402:	60f8      	str	r0, [r7, #12]
 800c404:	60b9      	str	r1, [r7, #8]
 800c406:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	2202      	movs	r2, #2
 800c40c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800c410:	68fb      	ldr	r3, [r7, #12]
 800c412:	687a      	ldr	r2, [r7, #4]
 800c414:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800c416:	68fb      	ldr	r3, [r7, #12]
 800c418:	687a      	ldr	r2, [r7, #4]
 800c41a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	68ba      	ldr	r2, [r7, #8]
 800c420:	2100      	movs	r1, #0
 800c422:	68f8      	ldr	r0, [r7, #12]
 800c424:	f002 fe63 	bl	800f0ee <USBD_LL_Transmit>

  return USBD_OK;
 800c428:	2300      	movs	r3, #0
}
 800c42a:	4618      	mov	r0, r3
 800c42c:	3710      	adds	r7, #16
 800c42e:	46bd      	mov	sp, r7
 800c430:	bd80      	pop	{r7, pc}

0800c432 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800c432:	b580      	push	{r7, lr}
 800c434:	b084      	sub	sp, #16
 800c436:	af00      	add	r7, sp, #0
 800c438:	60f8      	str	r0, [r7, #12]
 800c43a:	60b9      	str	r1, [r7, #8]
 800c43c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	68ba      	ldr	r2, [r7, #8]
 800c442:	2100      	movs	r1, #0
 800c444:	68f8      	ldr	r0, [r7, #12]
 800c446:	f002 fe52 	bl	800f0ee <USBD_LL_Transmit>

  return USBD_OK;
 800c44a:	2300      	movs	r3, #0
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b084      	sub	sp, #16
 800c458:	af00      	add	r7, sp, #0
 800c45a:	60f8      	str	r0, [r7, #12]
 800c45c:	60b9      	str	r1, [r7, #8]
 800c45e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	2203      	movs	r2, #3
 800c464:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	687a      	ldr	r2, [r7, #4]
 800c46c:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800c470:	68fb      	ldr	r3, [r7, #12]
 800c472:	687a      	ldr	r2, [r7, #4]
 800c474:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c478:	687b      	ldr	r3, [r7, #4]
 800c47a:	68ba      	ldr	r2, [r7, #8]
 800c47c:	2100      	movs	r1, #0
 800c47e:	68f8      	ldr	r0, [r7, #12]
 800c480:	f002 fe56 	bl	800f130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c484:	2300      	movs	r3, #0
}
 800c486:	4618      	mov	r0, r3
 800c488:	3710      	adds	r7, #16
 800c48a:	46bd      	mov	sp, r7
 800c48c:	bd80      	pop	{r7, pc}

0800c48e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c48e:	b580      	push	{r7, lr}
 800c490:	b084      	sub	sp, #16
 800c492:	af00      	add	r7, sp, #0
 800c494:	60f8      	str	r0, [r7, #12]
 800c496:	60b9      	str	r1, [r7, #8]
 800c498:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	68ba      	ldr	r2, [r7, #8]
 800c49e:	2100      	movs	r1, #0
 800c4a0:	68f8      	ldr	r0, [r7, #12]
 800c4a2:	f002 fe45 	bl	800f130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4a6:	2300      	movs	r3, #0
}
 800c4a8:	4618      	mov	r0, r3
 800c4aa:	3710      	adds	r7, #16
 800c4ac:	46bd      	mov	sp, r7
 800c4ae:	bd80      	pop	{r7, pc}

0800c4b0 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b082      	sub	sp, #8
 800c4b4:	af00      	add	r7, sp, #0
 800c4b6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2204      	movs	r2, #4
 800c4bc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c4c0:	2300      	movs	r3, #0
 800c4c2:	2200      	movs	r2, #0
 800c4c4:	2100      	movs	r1, #0
 800c4c6:	6878      	ldr	r0, [r7, #4]
 800c4c8:	f002 fe11 	bl	800f0ee <USBD_LL_Transmit>

  return USBD_OK;
 800c4cc:	2300      	movs	r3, #0
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3708      	adds	r7, #8
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}

0800c4d6 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c4d6:	b580      	push	{r7, lr}
 800c4d8:	b082      	sub	sp, #8
 800c4da:	af00      	add	r7, sp, #0
 800c4dc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	2205      	movs	r2, #5
 800c4e2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c4e6:	2300      	movs	r3, #0
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	2100      	movs	r1, #0
 800c4ec:	6878      	ldr	r0, [r7, #4]
 800c4ee:	f002 fe1f 	bl	800f130 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c4f2:	2300      	movs	r3, #0
}
 800c4f4:	4618      	mov	r0, r3
 800c4f6:	3708      	adds	r7, #8
 800c4f8:	46bd      	mov	sp, r7
 800c4fa:	bd80      	pop	{r7, pc}

0800c4fc <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	b084      	sub	sp, #16
 800c500:	af00      	add	r7, sp, #0
 800c502:	4603      	mov	r3, r0
 800c504:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800c506:	79fb      	ldrb	r3, [r7, #7]
 800c508:	4a08      	ldr	r2, [pc, #32]	@ (800c52c <disk_status+0x30>)
 800c50a:	009b      	lsls	r3, r3, #2
 800c50c:	4413      	add	r3, r2
 800c50e:	685b      	ldr	r3, [r3, #4]
 800c510:	685b      	ldr	r3, [r3, #4]
 800c512:	79fa      	ldrb	r2, [r7, #7]
 800c514:	4905      	ldr	r1, [pc, #20]	@ (800c52c <disk_status+0x30>)
 800c516:	440a      	add	r2, r1
 800c518:	7a12      	ldrb	r2, [r2, #8]
 800c51a:	4610      	mov	r0, r2
 800c51c:	4798      	blx	r3
 800c51e:	4603      	mov	r3, r0
 800c520:	73fb      	strb	r3, [r7, #15]
  return stat;
 800c522:	7bfb      	ldrb	r3, [r7, #15]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3710      	adds	r7, #16
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}
 800c52c:	20000420 	.word	0x20000420

0800c530 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800c530:	b580      	push	{r7, lr}
 800c532:	b084      	sub	sp, #16
 800c534:	af00      	add	r7, sp, #0
 800c536:	4603      	mov	r3, r0
 800c538:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800c53a:	2300      	movs	r3, #0
 800c53c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800c53e:	79fb      	ldrb	r3, [r7, #7]
 800c540:	4a0e      	ldr	r2, [pc, #56]	@ (800c57c <disk_initialize+0x4c>)
 800c542:	5cd3      	ldrb	r3, [r2, r3]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d114      	bne.n	800c572 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	4a0c      	ldr	r2, [pc, #48]	@ (800c57c <disk_initialize+0x4c>)
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4413      	add	r3, r2
 800c550:	685b      	ldr	r3, [r3, #4]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	79fa      	ldrb	r2, [r7, #7]
 800c556:	4909      	ldr	r1, [pc, #36]	@ (800c57c <disk_initialize+0x4c>)
 800c558:	440a      	add	r2, r1
 800c55a:	7a12      	ldrb	r2, [r2, #8]
 800c55c:	4610      	mov	r0, r2
 800c55e:	4798      	blx	r3
 800c560:	4603      	mov	r3, r0
 800c562:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 800c564:	7bfb      	ldrb	r3, [r7, #15]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d103      	bne.n	800c572 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800c56a:	79fb      	ldrb	r3, [r7, #7]
 800c56c:	4a03      	ldr	r2, [pc, #12]	@ (800c57c <disk_initialize+0x4c>)
 800c56e:	2101      	movs	r1, #1
 800c570:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800c572:	7bfb      	ldrb	r3, [r7, #15]
}
 800c574:	4618      	mov	r0, r3
 800c576:	3710      	adds	r7, #16
 800c578:	46bd      	mov	sp, r7
 800c57a:	bd80      	pop	{r7, pc}
 800c57c:	20000420 	.word	0x20000420

0800c580 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800c580:	b590      	push	{r4, r7, lr}
 800c582:	b087      	sub	sp, #28
 800c584:	af00      	add	r7, sp, #0
 800c586:	60b9      	str	r1, [r7, #8]
 800c588:	607a      	str	r2, [r7, #4]
 800c58a:	603b      	str	r3, [r7, #0]
 800c58c:	4603      	mov	r3, r0
 800c58e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800c590:	7bfb      	ldrb	r3, [r7, #15]
 800c592:	4a0a      	ldr	r2, [pc, #40]	@ (800c5bc <disk_read+0x3c>)
 800c594:	009b      	lsls	r3, r3, #2
 800c596:	4413      	add	r3, r2
 800c598:	685b      	ldr	r3, [r3, #4]
 800c59a:	689c      	ldr	r4, [r3, #8]
 800c59c:	7bfb      	ldrb	r3, [r7, #15]
 800c59e:	4a07      	ldr	r2, [pc, #28]	@ (800c5bc <disk_read+0x3c>)
 800c5a0:	4413      	add	r3, r2
 800c5a2:	7a18      	ldrb	r0, [r3, #8]
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	687a      	ldr	r2, [r7, #4]
 800c5a8:	68b9      	ldr	r1, [r7, #8]
 800c5aa:	47a0      	blx	r4
 800c5ac:	4603      	mov	r3, r0
 800c5ae:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5b2:	4618      	mov	r0, r3
 800c5b4:	371c      	adds	r7, #28
 800c5b6:	46bd      	mov	sp, r7
 800c5b8:	bd90      	pop	{r4, r7, pc}
 800c5ba:	bf00      	nop
 800c5bc:	20000420 	.word	0x20000420

0800c5c0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800c5c0:	b590      	push	{r4, r7, lr}
 800c5c2:	b087      	sub	sp, #28
 800c5c4:	af00      	add	r7, sp, #0
 800c5c6:	60b9      	str	r1, [r7, #8]
 800c5c8:	607a      	str	r2, [r7, #4]
 800c5ca:	603b      	str	r3, [r7, #0]
 800c5cc:	4603      	mov	r3, r0
 800c5ce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800c5d0:	7bfb      	ldrb	r3, [r7, #15]
 800c5d2:	4a0a      	ldr	r2, [pc, #40]	@ (800c5fc <disk_write+0x3c>)
 800c5d4:	009b      	lsls	r3, r3, #2
 800c5d6:	4413      	add	r3, r2
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	68dc      	ldr	r4, [r3, #12]
 800c5dc:	7bfb      	ldrb	r3, [r7, #15]
 800c5de:	4a07      	ldr	r2, [pc, #28]	@ (800c5fc <disk_write+0x3c>)
 800c5e0:	4413      	add	r3, r2
 800c5e2:	7a18      	ldrb	r0, [r3, #8]
 800c5e4:	683b      	ldr	r3, [r7, #0]
 800c5e6:	687a      	ldr	r2, [r7, #4]
 800c5e8:	68b9      	ldr	r1, [r7, #8]
 800c5ea:	47a0      	blx	r4
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	75fb      	strb	r3, [r7, #23]
  return res;
 800c5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	371c      	adds	r7, #28
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd90      	pop	{r4, r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	20000420 	.word	0x20000420

0800c600 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800c600:	b580      	push	{r7, lr}
 800c602:	b084      	sub	sp, #16
 800c604:	af00      	add	r7, sp, #0
 800c606:	4603      	mov	r3, r0
 800c608:	603a      	str	r2, [r7, #0]
 800c60a:	71fb      	strb	r3, [r7, #7]
 800c60c:	460b      	mov	r3, r1
 800c60e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800c610:	79fb      	ldrb	r3, [r7, #7]
 800c612:	4a09      	ldr	r2, [pc, #36]	@ (800c638 <disk_ioctl+0x38>)
 800c614:	009b      	lsls	r3, r3, #2
 800c616:	4413      	add	r3, r2
 800c618:	685b      	ldr	r3, [r3, #4]
 800c61a:	691b      	ldr	r3, [r3, #16]
 800c61c:	79fa      	ldrb	r2, [r7, #7]
 800c61e:	4906      	ldr	r1, [pc, #24]	@ (800c638 <disk_ioctl+0x38>)
 800c620:	440a      	add	r2, r1
 800c622:	7a10      	ldrb	r0, [r2, #8]
 800c624:	79b9      	ldrb	r1, [r7, #6]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	4798      	blx	r3
 800c62a:	4603      	mov	r3, r0
 800c62c:	73fb      	strb	r3, [r7, #15]
  return res;
 800c62e:	7bfb      	ldrb	r3, [r7, #15]
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	20000420 	.word	0x20000420

0800c63c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800c63c:	b480      	push	{r7}
 800c63e:	b085      	sub	sp, #20
 800c640:	af00      	add	r7, sp, #0
 800c642:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	3301      	adds	r3, #1
 800c648:	781b      	ldrb	r3, [r3, #0]
 800c64a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800c64c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800c650:	021b      	lsls	r3, r3, #8
 800c652:	b21a      	sxth	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	781b      	ldrb	r3, [r3, #0]
 800c658:	b21b      	sxth	r3, r3
 800c65a:	4313      	orrs	r3, r2
 800c65c:	b21b      	sxth	r3, r3
 800c65e:	81fb      	strh	r3, [r7, #14]
	return rv;
 800c660:	89fb      	ldrh	r3, [r7, #14]
}
 800c662:	4618      	mov	r0, r3
 800c664:	3714      	adds	r7, #20
 800c666:	46bd      	mov	sp, r7
 800c668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c66c:	4770      	bx	lr

0800c66e <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800c66e:	b480      	push	{r7}
 800c670:	b085      	sub	sp, #20
 800c672:	af00      	add	r7, sp, #0
 800c674:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800c676:	687b      	ldr	r3, [r7, #4]
 800c678:	3303      	adds	r3, #3
 800c67a:	781b      	ldrb	r3, [r3, #0]
 800c67c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	021b      	lsls	r3, r3, #8
 800c682:	687a      	ldr	r2, [r7, #4]
 800c684:	3202      	adds	r2, #2
 800c686:	7812      	ldrb	r2, [r2, #0]
 800c688:	4313      	orrs	r3, r2
 800c68a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800c68c:	68fb      	ldr	r3, [r7, #12]
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	687a      	ldr	r2, [r7, #4]
 800c692:	3201      	adds	r2, #1
 800c694:	7812      	ldrb	r2, [r2, #0]
 800c696:	4313      	orrs	r3, r2
 800c698:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	021b      	lsls	r3, r3, #8
 800c69e:	687a      	ldr	r2, [r7, #4]
 800c6a0:	7812      	ldrb	r2, [r2, #0]
 800c6a2:	4313      	orrs	r3, r2
 800c6a4:	60fb      	str	r3, [r7, #12]
	return rv;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3714      	adds	r7, #20
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b2:	4770      	bx	lr

0800c6b4 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800c6b4:	b480      	push	{r7}
 800c6b6:	b083      	sub	sp, #12
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	1c5a      	adds	r2, r3, #1
 800c6c4:	607a      	str	r2, [r7, #4]
 800c6c6:	887a      	ldrh	r2, [r7, #2]
 800c6c8:	b2d2      	uxtb	r2, r2
 800c6ca:	701a      	strb	r2, [r3, #0]
 800c6cc:	887b      	ldrh	r3, [r7, #2]
 800c6ce:	0a1b      	lsrs	r3, r3, #8
 800c6d0:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	607a      	str	r2, [r7, #4]
 800c6d8:	887a      	ldrh	r2, [r7, #2]
 800c6da:	b2d2      	uxtb	r2, r2
 800c6dc:	701a      	strb	r2, [r3, #0]
}
 800c6de:	bf00      	nop
 800c6e0:	370c      	adds	r7, #12
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e8:	4770      	bx	lr

0800c6ea <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800c6ea:	b480      	push	{r7}
 800c6ec:	b083      	sub	sp, #12
 800c6ee:	af00      	add	r7, sp, #0
 800c6f0:	6078      	str	r0, [r7, #4]
 800c6f2:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	1c5a      	adds	r2, r3, #1
 800c6f8:	607a      	str	r2, [r7, #4]
 800c6fa:	683a      	ldr	r2, [r7, #0]
 800c6fc:	b2d2      	uxtb	r2, r2
 800c6fe:	701a      	strb	r2, [r3, #0]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	0a1b      	lsrs	r3, r3, #8
 800c704:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	1c5a      	adds	r2, r3, #1
 800c70a:	607a      	str	r2, [r7, #4]
 800c70c:	683a      	ldr	r2, [r7, #0]
 800c70e:	b2d2      	uxtb	r2, r2
 800c710:	701a      	strb	r2, [r3, #0]
 800c712:	683b      	ldr	r3, [r7, #0]
 800c714:	0a1b      	lsrs	r3, r3, #8
 800c716:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	1c5a      	adds	r2, r3, #1
 800c71c:	607a      	str	r2, [r7, #4]
 800c71e:	683a      	ldr	r2, [r7, #0]
 800c720:	b2d2      	uxtb	r2, r2
 800c722:	701a      	strb	r2, [r3, #0]
 800c724:	683b      	ldr	r3, [r7, #0]
 800c726:	0a1b      	lsrs	r3, r3, #8
 800c728:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	607a      	str	r2, [r7, #4]
 800c730:	683a      	ldr	r2, [r7, #0]
 800c732:	b2d2      	uxtb	r2, r2
 800c734:	701a      	strb	r2, [r3, #0]
}
 800c736:	bf00      	nop
 800c738:	370c      	adds	r7, #12
 800c73a:	46bd      	mov	sp, r7
 800c73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c740:	4770      	bx	lr

0800c742 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800c742:	b480      	push	{r7}
 800c744:	b087      	sub	sp, #28
 800c746:	af00      	add	r7, sp, #0
 800c748:	60f8      	str	r0, [r7, #12]
 800c74a:	60b9      	str	r1, [r7, #8]
 800c74c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800c752:	68bb      	ldr	r3, [r7, #8]
 800c754:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d00d      	beq.n	800c778 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800c75c:	693a      	ldr	r2, [r7, #16]
 800c75e:	1c53      	adds	r3, r2, #1
 800c760:	613b      	str	r3, [r7, #16]
 800c762:	697b      	ldr	r3, [r7, #20]
 800c764:	1c59      	adds	r1, r3, #1
 800c766:	6179      	str	r1, [r7, #20]
 800c768:	7812      	ldrb	r2, [r2, #0]
 800c76a:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	3b01      	subs	r3, #1
 800c770:	607b      	str	r3, [r7, #4]
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d1f1      	bne.n	800c75c <mem_cpy+0x1a>
	}
}
 800c778:	bf00      	nop
 800c77a:	371c      	adds	r7, #28
 800c77c:	46bd      	mov	sp, r7
 800c77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c782:	4770      	bx	lr

0800c784 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800c784:	b480      	push	{r7}
 800c786:	b087      	sub	sp, #28
 800c788:	af00      	add	r7, sp, #0
 800c78a:	60f8      	str	r0, [r7, #12]
 800c78c:	60b9      	str	r1, [r7, #8]
 800c78e:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800c794:	697b      	ldr	r3, [r7, #20]
 800c796:	1c5a      	adds	r2, r3, #1
 800c798:	617a      	str	r2, [r7, #20]
 800c79a:	68ba      	ldr	r2, [r7, #8]
 800c79c:	b2d2      	uxtb	r2, r2
 800c79e:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3b01      	subs	r3, #1
 800c7a4:	607b      	str	r3, [r7, #4]
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d1f3      	bne.n	800c794 <mem_set+0x10>
}
 800c7ac:	bf00      	nop
 800c7ae:	bf00      	nop
 800c7b0:	371c      	adds	r7, #28
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7b8:	4770      	bx	lr

0800c7ba <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800c7ba:	b480      	push	{r7}
 800c7bc:	b089      	sub	sp, #36	@ 0x24
 800c7be:	af00      	add	r7, sp, #0
 800c7c0:	60f8      	str	r0, [r7, #12]
 800c7c2:	60b9      	str	r1, [r7, #8]
 800c7c4:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	61fb      	str	r3, [r7, #28]
 800c7ca:	68bb      	ldr	r3, [r7, #8]
 800c7cc:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800c7d2:	69fb      	ldr	r3, [r7, #28]
 800c7d4:	1c5a      	adds	r2, r3, #1
 800c7d6:	61fa      	str	r2, [r7, #28]
 800c7d8:	781b      	ldrb	r3, [r3, #0]
 800c7da:	4619      	mov	r1, r3
 800c7dc:	69bb      	ldr	r3, [r7, #24]
 800c7de:	1c5a      	adds	r2, r3, #1
 800c7e0:	61ba      	str	r2, [r7, #24]
 800c7e2:	781b      	ldrb	r3, [r3, #0]
 800c7e4:	1acb      	subs	r3, r1, r3
 800c7e6:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	3b01      	subs	r3, #1
 800c7ec:	607b      	str	r3, [r7, #4]
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	d002      	beq.n	800c7fa <mem_cmp+0x40>
 800c7f4:	697b      	ldr	r3, [r7, #20]
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	d0eb      	beq.n	800c7d2 <mem_cmp+0x18>

	return r;
 800c7fa:	697b      	ldr	r3, [r7, #20]
}
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	3724      	adds	r7, #36	@ 0x24
 800c800:	46bd      	mov	sp, r7
 800c802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c806:	4770      	bx	lr

0800c808 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800c808:	b480      	push	{r7}
 800c80a:	b083      	sub	sp, #12
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800c812:	e002      	b.n	800c81a <chk_chr+0x12>
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	3301      	adds	r3, #1
 800c818:	607b      	str	r3, [r7, #4]
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	781b      	ldrb	r3, [r3, #0]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d005      	beq.n	800c82e <chk_chr+0x26>
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	781b      	ldrb	r3, [r3, #0]
 800c826:	461a      	mov	r2, r3
 800c828:	683b      	ldr	r3, [r7, #0]
 800c82a:	4293      	cmp	r3, r2
 800c82c:	d1f2      	bne.n	800c814 <chk_chr+0xc>
	return *str;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	781b      	ldrb	r3, [r3, #0]
}
 800c832:	4618      	mov	r0, r3
 800c834:	370c      	adds	r7, #12
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
	...

0800c840 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c840:	b480      	push	{r7}
 800c842:	b085      	sub	sp, #20
 800c844:	af00      	add	r7, sp, #0
 800c846:	6078      	str	r0, [r7, #4]
 800c848:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c84a:	2300      	movs	r3, #0
 800c84c:	60bb      	str	r3, [r7, #8]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	60fb      	str	r3, [r7, #12]
 800c852:	e029      	b.n	800c8a8 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800c854:	4a27      	ldr	r2, [pc, #156]	@ (800c8f4 <chk_lock+0xb4>)
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	011b      	lsls	r3, r3, #4
 800c85a:	4413      	add	r3, r2
 800c85c:	681b      	ldr	r3, [r3, #0]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d01d      	beq.n	800c89e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c862:	4a24      	ldr	r2, [pc, #144]	@ (800c8f4 <chk_lock+0xb4>)
 800c864:	68fb      	ldr	r3, [r7, #12]
 800c866:	011b      	lsls	r3, r3, #4
 800c868:	4413      	add	r3, r2
 800c86a:	681a      	ldr	r2, [r3, #0]
 800c86c:	687b      	ldr	r3, [r7, #4]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	429a      	cmp	r2, r3
 800c872:	d116      	bne.n	800c8a2 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800c874:	4a1f      	ldr	r2, [pc, #124]	@ (800c8f4 <chk_lock+0xb4>)
 800c876:	68fb      	ldr	r3, [r7, #12]
 800c878:	011b      	lsls	r3, r3, #4
 800c87a:	4413      	add	r3, r2
 800c87c:	3304      	adds	r3, #4
 800c87e:	681a      	ldr	r2, [r3, #0]
 800c880:	687b      	ldr	r3, [r7, #4]
 800c882:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800c884:	429a      	cmp	r2, r3
 800c886:	d10c      	bne.n	800c8a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c888:	4a1a      	ldr	r2, [pc, #104]	@ (800c8f4 <chk_lock+0xb4>)
 800c88a:	68fb      	ldr	r3, [r7, #12]
 800c88c:	011b      	lsls	r3, r3, #4
 800c88e:	4413      	add	r3, r2
 800c890:	3308      	adds	r3, #8
 800c892:	681a      	ldr	r2, [r3, #0]
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800c898:	429a      	cmp	r2, r3
 800c89a:	d102      	bne.n	800c8a2 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800c89c:	e007      	b.n	800c8ae <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800c89e:	2301      	movs	r3, #1
 800c8a0:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800c8a2:	68fb      	ldr	r3, [r7, #12]
 800c8a4:	3301      	adds	r3, #1
 800c8a6:	60fb      	str	r3, [r7, #12]
 800c8a8:	68fb      	ldr	r3, [r7, #12]
 800c8aa:	2b01      	cmp	r3, #1
 800c8ac:	d9d2      	bls.n	800c854 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800c8ae:	68fb      	ldr	r3, [r7, #12]
 800c8b0:	2b02      	cmp	r3, #2
 800c8b2:	d109      	bne.n	800c8c8 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800c8b4:	68bb      	ldr	r3, [r7, #8]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d102      	bne.n	800c8c0 <chk_lock+0x80>
 800c8ba:	683b      	ldr	r3, [r7, #0]
 800c8bc:	2b02      	cmp	r3, #2
 800c8be:	d101      	bne.n	800c8c4 <chk_lock+0x84>
 800c8c0:	2300      	movs	r3, #0
 800c8c2:	e010      	b.n	800c8e6 <chk_lock+0xa6>
 800c8c4:	2312      	movs	r3, #18
 800c8c6:	e00e      	b.n	800c8e6 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800c8c8:	683b      	ldr	r3, [r7, #0]
 800c8ca:	2b00      	cmp	r3, #0
 800c8cc:	d108      	bne.n	800c8e0 <chk_lock+0xa0>
 800c8ce:	4a09      	ldr	r2, [pc, #36]	@ (800c8f4 <chk_lock+0xb4>)
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	011b      	lsls	r3, r3, #4
 800c8d4:	4413      	add	r3, r2
 800c8d6:	330c      	adds	r3, #12
 800c8d8:	881b      	ldrh	r3, [r3, #0]
 800c8da:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c8de:	d101      	bne.n	800c8e4 <chk_lock+0xa4>
 800c8e0:	2310      	movs	r3, #16
 800c8e2:	e000      	b.n	800c8e6 <chk_lock+0xa6>
 800c8e4:	2300      	movs	r3, #0
}
 800c8e6:	4618      	mov	r0, r3
 800c8e8:	3714      	adds	r7, #20
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f0:	4770      	bx	lr
 800c8f2:	bf00      	nop
 800c8f4:	20000400 	.word	0x20000400

0800c8f8 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b083      	sub	sp, #12
 800c8fc:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c8fe:	2300      	movs	r3, #0
 800c900:	607b      	str	r3, [r7, #4]
 800c902:	e002      	b.n	800c90a <enq_lock+0x12>
 800c904:	687b      	ldr	r3, [r7, #4]
 800c906:	3301      	adds	r3, #1
 800c908:	607b      	str	r3, [r7, #4]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	2b01      	cmp	r3, #1
 800c90e:	d806      	bhi.n	800c91e <enq_lock+0x26>
 800c910:	4a09      	ldr	r2, [pc, #36]	@ (800c938 <enq_lock+0x40>)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	011b      	lsls	r3, r3, #4
 800c916:	4413      	add	r3, r2
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d1f2      	bne.n	800c904 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800c91e:	687b      	ldr	r3, [r7, #4]
 800c920:	2b02      	cmp	r3, #2
 800c922:	bf14      	ite	ne
 800c924:	2301      	movne	r3, #1
 800c926:	2300      	moveq	r3, #0
 800c928:	b2db      	uxtb	r3, r3
}
 800c92a:	4618      	mov	r0, r3
 800c92c:	370c      	adds	r7, #12
 800c92e:	46bd      	mov	sp, r7
 800c930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c934:	4770      	bx	lr
 800c936:	bf00      	nop
 800c938:	20000400 	.word	0x20000400

0800c93c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800c93c:	b480      	push	{r7}
 800c93e:	b085      	sub	sp, #20
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c946:	2300      	movs	r3, #0
 800c948:	60fb      	str	r3, [r7, #12]
 800c94a:	e01f      	b.n	800c98c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800c94c:	4a41      	ldr	r2, [pc, #260]	@ (800ca54 <inc_lock+0x118>)
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	011b      	lsls	r3, r3, #4
 800c952:	4413      	add	r3, r2
 800c954:	681a      	ldr	r2, [r3, #0]
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	429a      	cmp	r2, r3
 800c95c:	d113      	bne.n	800c986 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800c95e:	4a3d      	ldr	r2, [pc, #244]	@ (800ca54 <inc_lock+0x118>)
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	011b      	lsls	r3, r3, #4
 800c964:	4413      	add	r3, r2
 800c966:	3304      	adds	r3, #4
 800c968:	681a      	ldr	r2, [r3, #0]
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800c96e:	429a      	cmp	r2, r3
 800c970:	d109      	bne.n	800c986 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800c972:	4a38      	ldr	r2, [pc, #224]	@ (800ca54 <inc_lock+0x118>)
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	011b      	lsls	r3, r3, #4
 800c978:	4413      	add	r3, r2
 800c97a:	3308      	adds	r3, #8
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800c982:	429a      	cmp	r2, r3
 800c984:	d006      	beq.n	800c994 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800c986:	68fb      	ldr	r3, [r7, #12]
 800c988:	3301      	adds	r3, #1
 800c98a:	60fb      	str	r3, [r7, #12]
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2b01      	cmp	r3, #1
 800c990:	d9dc      	bls.n	800c94c <inc_lock+0x10>
 800c992:	e000      	b.n	800c996 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800c994:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2b02      	cmp	r3, #2
 800c99a:	d132      	bne.n	800ca02 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800c99c:	2300      	movs	r3, #0
 800c99e:	60fb      	str	r3, [r7, #12]
 800c9a0:	e002      	b.n	800c9a8 <inc_lock+0x6c>
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	60fb      	str	r3, [r7, #12]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	2b01      	cmp	r3, #1
 800c9ac:	d806      	bhi.n	800c9bc <inc_lock+0x80>
 800c9ae:	4a29      	ldr	r2, [pc, #164]	@ (800ca54 <inc_lock+0x118>)
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	011b      	lsls	r3, r3, #4
 800c9b4:	4413      	add	r3, r2
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d1f2      	bne.n	800c9a2 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d101      	bne.n	800c9c6 <inc_lock+0x8a>
 800c9c2:	2300      	movs	r3, #0
 800c9c4:	e040      	b.n	800ca48 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	4922      	ldr	r1, [pc, #136]	@ (800ca54 <inc_lock+0x118>)
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	011b      	lsls	r3, r3, #4
 800c9d0:	440b      	add	r3, r1
 800c9d2:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	689a      	ldr	r2, [r3, #8]
 800c9d8:	491e      	ldr	r1, [pc, #120]	@ (800ca54 <inc_lock+0x118>)
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	011b      	lsls	r3, r3, #4
 800c9de:	440b      	add	r3, r1
 800c9e0:	3304      	adds	r3, #4
 800c9e2:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	695a      	ldr	r2, [r3, #20]
 800c9e8:	491a      	ldr	r1, [pc, #104]	@ (800ca54 <inc_lock+0x118>)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	011b      	lsls	r3, r3, #4
 800c9ee:	440b      	add	r3, r1
 800c9f0:	3308      	adds	r3, #8
 800c9f2:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800c9f4:	4a17      	ldr	r2, [pc, #92]	@ (800ca54 <inc_lock+0x118>)
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	011b      	lsls	r3, r3, #4
 800c9fa:	4413      	add	r3, r2
 800c9fc:	330c      	adds	r3, #12
 800c9fe:	2200      	movs	r2, #0
 800ca00:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800ca02:	683b      	ldr	r3, [r7, #0]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d009      	beq.n	800ca1c <inc_lock+0xe0>
 800ca08:	4a12      	ldr	r2, [pc, #72]	@ (800ca54 <inc_lock+0x118>)
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	011b      	lsls	r3, r3, #4
 800ca0e:	4413      	add	r3, r2
 800ca10:	330c      	adds	r3, #12
 800ca12:	881b      	ldrh	r3, [r3, #0]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d001      	beq.n	800ca1c <inc_lock+0xe0>
 800ca18:	2300      	movs	r3, #0
 800ca1a:	e015      	b.n	800ca48 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d108      	bne.n	800ca34 <inc_lock+0xf8>
 800ca22:	4a0c      	ldr	r2, [pc, #48]	@ (800ca54 <inc_lock+0x118>)
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	011b      	lsls	r3, r3, #4
 800ca28:	4413      	add	r3, r2
 800ca2a:	330c      	adds	r3, #12
 800ca2c:	881b      	ldrh	r3, [r3, #0]
 800ca2e:	3301      	adds	r3, #1
 800ca30:	b29a      	uxth	r2, r3
 800ca32:	e001      	b.n	800ca38 <inc_lock+0xfc>
 800ca34:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca38:	4906      	ldr	r1, [pc, #24]	@ (800ca54 <inc_lock+0x118>)
 800ca3a:	68fb      	ldr	r3, [r7, #12]
 800ca3c:	011b      	lsls	r3, r3, #4
 800ca3e:	440b      	add	r3, r1
 800ca40:	330c      	adds	r3, #12
 800ca42:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800ca44:	68fb      	ldr	r3, [r7, #12]
 800ca46:	3301      	adds	r3, #1
}
 800ca48:	4618      	mov	r0, r3
 800ca4a:	3714      	adds	r7, #20
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr
 800ca54:	20000400 	.word	0x20000400

0800ca58 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800ca58:	b480      	push	{r7}
 800ca5a:	b085      	sub	sp, #20
 800ca5c:	af00      	add	r7, sp, #0
 800ca5e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	3b01      	subs	r3, #1
 800ca64:	607b      	str	r3, [r7, #4]
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2b01      	cmp	r3, #1
 800ca6a:	d825      	bhi.n	800cab8 <dec_lock+0x60>
		n = Files[i].ctr;
 800ca6c:	4a17      	ldr	r2, [pc, #92]	@ (800cacc <dec_lock+0x74>)
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	011b      	lsls	r3, r3, #4
 800ca72:	4413      	add	r3, r2
 800ca74:	330c      	adds	r3, #12
 800ca76:	881b      	ldrh	r3, [r3, #0]
 800ca78:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800ca7a:	89fb      	ldrh	r3, [r7, #14]
 800ca7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ca80:	d101      	bne.n	800ca86 <dec_lock+0x2e>
 800ca82:	2300      	movs	r3, #0
 800ca84:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800ca86:	89fb      	ldrh	r3, [r7, #14]
 800ca88:	2b00      	cmp	r3, #0
 800ca8a:	d002      	beq.n	800ca92 <dec_lock+0x3a>
 800ca8c:	89fb      	ldrh	r3, [r7, #14]
 800ca8e:	3b01      	subs	r3, #1
 800ca90:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800ca92:	4a0e      	ldr	r2, [pc, #56]	@ (800cacc <dec_lock+0x74>)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	011b      	lsls	r3, r3, #4
 800ca98:	4413      	add	r3, r2
 800ca9a:	330c      	adds	r3, #12
 800ca9c:	89fa      	ldrh	r2, [r7, #14]
 800ca9e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800caa0:	89fb      	ldrh	r3, [r7, #14]
 800caa2:	2b00      	cmp	r3, #0
 800caa4:	d105      	bne.n	800cab2 <dec_lock+0x5a>
 800caa6:	4a09      	ldr	r2, [pc, #36]	@ (800cacc <dec_lock+0x74>)
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	011b      	lsls	r3, r3, #4
 800caac:	4413      	add	r3, r2
 800caae:	2200      	movs	r2, #0
 800cab0:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800cab2:	2300      	movs	r3, #0
 800cab4:	737b      	strb	r3, [r7, #13]
 800cab6:	e001      	b.n	800cabc <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800cab8:	2302      	movs	r3, #2
 800caba:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800cabc:	7b7b      	ldrb	r3, [r7, #13]
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3714      	adds	r7, #20
 800cac2:	46bd      	mov	sp, r7
 800cac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cac8:	4770      	bx	lr
 800caca:	bf00      	nop
 800cacc:	20000400 	.word	0x20000400

0800cad0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800cad8:	2300      	movs	r3, #0
 800cada:	60fb      	str	r3, [r7, #12]
 800cadc:	e010      	b.n	800cb00 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800cade:	4a0d      	ldr	r2, [pc, #52]	@ (800cb14 <clear_lock+0x44>)
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	011b      	lsls	r3, r3, #4
 800cae4:	4413      	add	r3, r2
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	687a      	ldr	r2, [r7, #4]
 800caea:	429a      	cmp	r2, r3
 800caec:	d105      	bne.n	800cafa <clear_lock+0x2a>
 800caee:	4a09      	ldr	r2, [pc, #36]	@ (800cb14 <clear_lock+0x44>)
 800caf0:	68fb      	ldr	r3, [r7, #12]
 800caf2:	011b      	lsls	r3, r3, #4
 800caf4:	4413      	add	r3, r2
 800caf6:	2200      	movs	r2, #0
 800caf8:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	3301      	adds	r3, #1
 800cafe:	60fb      	str	r3, [r7, #12]
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2b01      	cmp	r3, #1
 800cb04:	d9eb      	bls.n	800cade <clear_lock+0xe>
	}
}
 800cb06:	bf00      	nop
 800cb08:	bf00      	nop
 800cb0a:	3714      	adds	r7, #20
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb12:	4770      	bx	lr
 800cb14:	20000400 	.word	0x20000400

0800cb18 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800cb20:	2300      	movs	r3, #0
 800cb22:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	78db      	ldrb	r3, [r3, #3]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d034      	beq.n	800cb96 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb30:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	7858      	ldrb	r0, [r3, #1]
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb3c:	2301      	movs	r3, #1
 800cb3e:	697a      	ldr	r2, [r7, #20]
 800cb40:	f7ff fd3e 	bl	800c5c0 <disk_write>
 800cb44:	4603      	mov	r3, r0
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d002      	beq.n	800cb50 <sync_window+0x38>
			res = FR_DISK_ERR;
 800cb4a:	2301      	movs	r3, #1
 800cb4c:	73fb      	strb	r3, [r7, #15]
 800cb4e:	e022      	b.n	800cb96 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	2200      	movs	r2, #0
 800cb54:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	6a1b      	ldr	r3, [r3, #32]
 800cb5a:	697a      	ldr	r2, [r7, #20]
 800cb5c:	1ad2      	subs	r2, r2, r3
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	699b      	ldr	r3, [r3, #24]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d217      	bcs.n	800cb96 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb66:	687b      	ldr	r3, [r7, #4]
 800cb68:	789b      	ldrb	r3, [r3, #2]
 800cb6a:	613b      	str	r3, [r7, #16]
 800cb6c:	e010      	b.n	800cb90 <sync_window+0x78>
					wsect += fs->fsize;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	699b      	ldr	r3, [r3, #24]
 800cb72:	697a      	ldr	r2, [r7, #20]
 800cb74:	4413      	add	r3, r2
 800cb76:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	7858      	ldrb	r0, [r3, #1]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cb82:	2301      	movs	r3, #1
 800cb84:	697a      	ldr	r2, [r7, #20]
 800cb86:	f7ff fd1b 	bl	800c5c0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800cb8a:	693b      	ldr	r3, [r7, #16]
 800cb8c:	3b01      	subs	r3, #1
 800cb8e:	613b      	str	r3, [r7, #16]
 800cb90:	693b      	ldr	r3, [r7, #16]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d8eb      	bhi.n	800cb6e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800cb96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb98:	4618      	mov	r0, r3
 800cb9a:	3718      	adds	r7, #24
 800cb9c:	46bd      	mov	sp, r7
 800cb9e:	bd80      	pop	{r7, pc}

0800cba0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b084      	sub	sp, #16
 800cba4:	af00      	add	r7, sp, #0
 800cba6:	6078      	str	r0, [r7, #4]
 800cba8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800cbaa:	2300      	movs	r3, #0
 800cbac:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cbb2:	683a      	ldr	r2, [r7, #0]
 800cbb4:	429a      	cmp	r2, r3
 800cbb6:	d01b      	beq.n	800cbf0 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800cbb8:	6878      	ldr	r0, [r7, #4]
 800cbba:	f7ff ffad 	bl	800cb18 <sync_window>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800cbc2:	7bfb      	ldrb	r3, [r7, #15]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d113      	bne.n	800cbf0 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	7858      	ldrb	r0, [r3, #1]
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cbd2:	2301      	movs	r3, #1
 800cbd4:	683a      	ldr	r2, [r7, #0]
 800cbd6:	f7ff fcd3 	bl	800c580 <disk_read>
 800cbda:	4603      	mov	r3, r0
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d004      	beq.n	800cbea <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800cbe0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cbe4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800cbea:	687b      	ldr	r3, [r7, #4]
 800cbec:	683a      	ldr	r2, [r7, #0]
 800cbee:	62da      	str	r2, [r3, #44]	@ 0x2c
		}
	}
	return res;
 800cbf0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cbf2:	4618      	mov	r0, r3
 800cbf4:	3710      	adds	r7, #16
 800cbf6:	46bd      	mov	sp, r7
 800cbf8:	bd80      	pop	{r7, pc}
	...

0800cbfc <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b084      	sub	sp, #16
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800cc04:	6878      	ldr	r0, [r7, #4]
 800cc06:	f7ff ff87 	bl	800cb18 <sync_window>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800cc0e:	7bfb      	ldrb	r3, [r7, #15]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d158      	bne.n	800ccc6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800cc14:	687b      	ldr	r3, [r7, #4]
 800cc16:	781b      	ldrb	r3, [r3, #0]
 800cc18:	2b03      	cmp	r3, #3
 800cc1a:	d148      	bne.n	800ccae <sync_fs+0xb2>
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	791b      	ldrb	r3, [r3, #4]
 800cc20:	2b01      	cmp	r3, #1
 800cc22:	d144      	bne.n	800ccae <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	3330      	adds	r3, #48	@ 0x30
 800cc28:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800cc2c:	2100      	movs	r1, #0
 800cc2e:	4618      	mov	r0, r3
 800cc30:	f7ff fda8 	bl	800c784 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	3330      	adds	r3, #48	@ 0x30
 800cc38:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800cc3c:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800cc40:	4618      	mov	r0, r3
 800cc42:	f7ff fd37 	bl	800c6b4 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	3330      	adds	r3, #48	@ 0x30
 800cc4a:	4921      	ldr	r1, [pc, #132]	@ (800ccd0 <sync_fs+0xd4>)
 800cc4c:	4618      	mov	r0, r3
 800cc4e:	f7ff fd4c 	bl	800c6ea <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3330      	adds	r3, #48	@ 0x30
 800cc56:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800cc5a:	491e      	ldr	r1, [pc, #120]	@ (800ccd4 <sync_fs+0xd8>)
 800cc5c:	4618      	mov	r0, r3
 800cc5e:	f7ff fd44 	bl	800c6ea <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	3330      	adds	r3, #48	@ 0x30
 800cc66:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	691b      	ldr	r3, [r3, #16]
 800cc6e:	4619      	mov	r1, r3
 800cc70:	4610      	mov	r0, r2
 800cc72:	f7ff fd3a 	bl	800c6ea <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	3330      	adds	r3, #48	@ 0x30
 800cc7a:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	68db      	ldr	r3, [r3, #12]
 800cc82:	4619      	mov	r1, r3
 800cc84:	4610      	mov	r0, r2
 800cc86:	f7ff fd30 	bl	800c6ea <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800cc8a:	687b      	ldr	r3, [r7, #4]
 800cc8c:	69db      	ldr	r3, [r3, #28]
 800cc8e:	1c5a      	adds	r2, r3, #1
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	62da      	str	r2, [r3, #44]	@ 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800cc94:	687b      	ldr	r3, [r7, #4]
 800cc96:	7858      	ldrb	r0, [r3, #1]
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cca2:	2301      	movs	r3, #1
 800cca4:	f7ff fc8c 	bl	800c5c0 <disk_write>
			fs->fsi_flag = 0;
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2200      	movs	r2, #0
 800ccac:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	785b      	ldrb	r3, [r3, #1]
 800ccb2:	2200      	movs	r2, #0
 800ccb4:	2100      	movs	r1, #0
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	f7ff fca2 	bl	800c600 <disk_ioctl>
 800ccbc:	4603      	mov	r3, r0
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d001      	beq.n	800ccc6 <sync_fs+0xca>
 800ccc2:	2301      	movs	r3, #1
 800ccc4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800ccc6:	7bfb      	ldrb	r3, [r7, #15]
}
 800ccc8:	4618      	mov	r0, r3
 800ccca:	3710      	adds	r7, #16
 800cccc:	46bd      	mov	sp, r7
 800ccce:	bd80      	pop	{r7, pc}
 800ccd0:	41615252 	.word	0x41615252
 800ccd4:	61417272 	.word	0x61417272

0800ccd8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800ccd8:	b480      	push	{r7}
 800ccda:	b083      	sub	sp, #12
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
 800cce0:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800cce2:	683b      	ldr	r3, [r7, #0]
 800cce4:	3b02      	subs	r3, #2
 800cce6:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	695b      	ldr	r3, [r3, #20]
 800ccec:	3b02      	subs	r3, #2
 800ccee:	683a      	ldr	r2, [r7, #0]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d301      	bcc.n	800ccf8 <clust2sect+0x20>
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	e008      	b.n	800cd0a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	895b      	ldrh	r3, [r3, #10]
 800ccfc:	461a      	mov	r2, r3
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	fb03 f202 	mul.w	r2, r3, r2
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800cd08:	4413      	add	r3, r2
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	370c      	adds	r7, #12
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd14:	4770      	bx	lr

0800cd16 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800cd16:	b580      	push	{r7, lr}
 800cd18:	b086      	sub	sp, #24
 800cd1a:	af00      	add	r7, sp, #0
 800cd1c:	6078      	str	r0, [r7, #4]
 800cd1e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800cd26:	683b      	ldr	r3, [r7, #0]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d904      	bls.n	800cd36 <get_fat+0x20>
 800cd2c:	693b      	ldr	r3, [r7, #16]
 800cd2e:	695b      	ldr	r3, [r3, #20]
 800cd30:	683a      	ldr	r2, [r7, #0]
 800cd32:	429a      	cmp	r2, r3
 800cd34:	d302      	bcc.n	800cd3c <get_fat+0x26>
		val = 1;	/* Internal error */
 800cd36:	2301      	movs	r3, #1
 800cd38:	617b      	str	r3, [r7, #20]
 800cd3a:	e08e      	b.n	800ce5a <get_fat+0x144>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800cd3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800cd40:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800cd42:	693b      	ldr	r3, [r7, #16]
 800cd44:	781b      	ldrb	r3, [r3, #0]
 800cd46:	2b03      	cmp	r3, #3
 800cd48:	d061      	beq.n	800ce0e <get_fat+0xf8>
 800cd4a:	2b03      	cmp	r3, #3
 800cd4c:	dc7b      	bgt.n	800ce46 <get_fat+0x130>
 800cd4e:	2b01      	cmp	r3, #1
 800cd50:	d002      	beq.n	800cd58 <get_fat+0x42>
 800cd52:	2b02      	cmp	r3, #2
 800cd54:	d041      	beq.n	800cdda <get_fat+0xc4>
 800cd56:	e076      	b.n	800ce46 <get_fat+0x130>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800cd58:	683b      	ldr	r3, [r7, #0]
 800cd5a:	60fb      	str	r3, [r7, #12]
 800cd5c:	68fb      	ldr	r3, [r7, #12]
 800cd5e:	085b      	lsrs	r3, r3, #1
 800cd60:	68fa      	ldr	r2, [r7, #12]
 800cd62:	4413      	add	r3, r2
 800cd64:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	6a1a      	ldr	r2, [r3, #32]
 800cd6a:	68fb      	ldr	r3, [r7, #12]
 800cd6c:	0a5b      	lsrs	r3, r3, #9
 800cd6e:	4413      	add	r3, r2
 800cd70:	4619      	mov	r1, r3
 800cd72:	6938      	ldr	r0, [r7, #16]
 800cd74:	f7ff ff14 	bl	800cba0 <move_window>
 800cd78:	4603      	mov	r3, r0
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d166      	bne.n	800ce4c <get_fat+0x136>
			wc = fs->win[bc++ % SS(fs)];
 800cd7e:	68fb      	ldr	r3, [r7, #12]
 800cd80:	1c5a      	adds	r2, r3, #1
 800cd82:	60fa      	str	r2, [r7, #12]
 800cd84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd88:	693a      	ldr	r2, [r7, #16]
 800cd8a:	4413      	add	r3, r2
 800cd8c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cd90:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800cd92:	693b      	ldr	r3, [r7, #16]
 800cd94:	6a1a      	ldr	r2, [r3, #32]
 800cd96:	68fb      	ldr	r3, [r7, #12]
 800cd98:	0a5b      	lsrs	r3, r3, #9
 800cd9a:	4413      	add	r3, r2
 800cd9c:	4619      	mov	r1, r3
 800cd9e:	6938      	ldr	r0, [r7, #16]
 800cda0:	f7ff fefe 	bl	800cba0 <move_window>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d152      	bne.n	800ce50 <get_fat+0x13a>
			wc |= fs->win[bc % SS(fs)] << 8;
 800cdaa:	68fb      	ldr	r3, [r7, #12]
 800cdac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdb0:	693a      	ldr	r2, [r7, #16]
 800cdb2:	4413      	add	r3, r2
 800cdb4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800cdb8:	021b      	lsls	r3, r3, #8
 800cdba:	68ba      	ldr	r2, [r7, #8]
 800cdbc:	4313      	orrs	r3, r2
 800cdbe:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800cdc0:	683b      	ldr	r3, [r7, #0]
 800cdc2:	f003 0301 	and.w	r3, r3, #1
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d002      	beq.n	800cdd0 <get_fat+0xba>
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	091b      	lsrs	r3, r3, #4
 800cdce:	e002      	b.n	800cdd6 <get_fat+0xc0>
 800cdd0:	68bb      	ldr	r3, [r7, #8]
 800cdd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800cdd6:	617b      	str	r3, [r7, #20]
			break;
 800cdd8:	e03f      	b.n	800ce5a <get_fat+0x144>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800cdda:	693b      	ldr	r3, [r7, #16]
 800cddc:	6a1a      	ldr	r2, [r3, #32]
 800cdde:	683b      	ldr	r3, [r7, #0]
 800cde0:	0a1b      	lsrs	r3, r3, #8
 800cde2:	4413      	add	r3, r2
 800cde4:	4619      	mov	r1, r3
 800cde6:	6938      	ldr	r0, [r7, #16]
 800cde8:	f7ff feda 	bl	800cba0 <move_window>
 800cdec:	4603      	mov	r3, r0
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d130      	bne.n	800ce54 <get_fat+0x13e>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800cdf2:	693b      	ldr	r3, [r7, #16]
 800cdf4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cdf8:	683b      	ldr	r3, [r7, #0]
 800cdfa:	005b      	lsls	r3, r3, #1
 800cdfc:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800ce00:	4413      	add	r3, r2
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7ff fc1a 	bl	800c63c <ld_word>
 800ce08:	4603      	mov	r3, r0
 800ce0a:	617b      	str	r3, [r7, #20]
			break;
 800ce0c:	e025      	b.n	800ce5a <get_fat+0x144>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce0e:	693b      	ldr	r3, [r7, #16]
 800ce10:	6a1a      	ldr	r2, [r3, #32]
 800ce12:	683b      	ldr	r3, [r7, #0]
 800ce14:	09db      	lsrs	r3, r3, #7
 800ce16:	4413      	add	r3, r2
 800ce18:	4619      	mov	r1, r3
 800ce1a:	6938      	ldr	r0, [r7, #16]
 800ce1c:	f7ff fec0 	bl	800cba0 <move_window>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d118      	bne.n	800ce58 <get_fat+0x142>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800ce26:	693b      	ldr	r3, [r7, #16]
 800ce28:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	009b      	lsls	r3, r3, #2
 800ce30:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800ce34:	4413      	add	r3, r2
 800ce36:	4618      	mov	r0, r3
 800ce38:	f7ff fc19 	bl	800c66e <ld_dword>
 800ce3c:	4603      	mov	r3, r0
 800ce3e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800ce42:	617b      	str	r3, [r7, #20]
			break;
 800ce44:	e009      	b.n	800ce5a <get_fat+0x144>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800ce46:	2301      	movs	r3, #1
 800ce48:	617b      	str	r3, [r7, #20]
 800ce4a:	e006      	b.n	800ce5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce4c:	bf00      	nop
 800ce4e:	e004      	b.n	800ce5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ce50:	bf00      	nop
 800ce52:	e002      	b.n	800ce5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ce54:	bf00      	nop
 800ce56:	e000      	b.n	800ce5a <get_fat+0x144>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ce58:	bf00      	nop
		}
	}

	return val;
 800ce5a:	697b      	ldr	r3, [r7, #20]
}
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	3718      	adds	r7, #24
 800ce60:	46bd      	mov	sp, r7
 800ce62:	bd80      	pop	{r7, pc}

0800ce64 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800ce64:	b590      	push	{r4, r7, lr}
 800ce66:	b089      	sub	sp, #36	@ 0x24
 800ce68:	af00      	add	r7, sp, #0
 800ce6a:	60f8      	str	r0, [r7, #12]
 800ce6c:	60b9      	str	r1, [r7, #8]
 800ce6e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800ce70:	2302      	movs	r3, #2
 800ce72:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800ce74:	68bb      	ldr	r3, [r7, #8]
 800ce76:	2b01      	cmp	r3, #1
 800ce78:	f240 80d9 	bls.w	800d02e <put_fat+0x1ca>
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	695b      	ldr	r3, [r3, #20]
 800ce80:	68ba      	ldr	r2, [r7, #8]
 800ce82:	429a      	cmp	r2, r3
 800ce84:	f080 80d3 	bcs.w	800d02e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800ce88:	68fb      	ldr	r3, [r7, #12]
 800ce8a:	781b      	ldrb	r3, [r3, #0]
 800ce8c:	2b03      	cmp	r3, #3
 800ce8e:	f000 8096 	beq.w	800cfbe <put_fat+0x15a>
 800ce92:	2b03      	cmp	r3, #3
 800ce94:	f300 80cb 	bgt.w	800d02e <put_fat+0x1ca>
 800ce98:	2b01      	cmp	r3, #1
 800ce9a:	d002      	beq.n	800cea2 <put_fat+0x3e>
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d06e      	beq.n	800cf7e <put_fat+0x11a>
 800cea0:	e0c5      	b.n	800d02e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800cea2:	68bb      	ldr	r3, [r7, #8]
 800cea4:	61bb      	str	r3, [r7, #24]
 800cea6:	69bb      	ldr	r3, [r7, #24]
 800cea8:	085b      	lsrs	r3, r3, #1
 800ceaa:	69ba      	ldr	r2, [r7, #24]
 800ceac:	4413      	add	r3, r2
 800ceae:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800ceb0:	68fb      	ldr	r3, [r7, #12]
 800ceb2:	6a1a      	ldr	r2, [r3, #32]
 800ceb4:	69bb      	ldr	r3, [r7, #24]
 800ceb6:	0a5b      	lsrs	r3, r3, #9
 800ceb8:	4413      	add	r3, r2
 800ceba:	4619      	mov	r1, r3
 800cebc:	68f8      	ldr	r0, [r7, #12]
 800cebe:	f7ff fe6f 	bl	800cba0 <move_window>
 800cec2:	4603      	mov	r3, r0
 800cec4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cec6:	7ffb      	ldrb	r3, [r7, #31]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	f040 80a9 	bne.w	800d020 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800cece:	68fb      	ldr	r3, [r7, #12]
 800ced0:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800ced4:	69bb      	ldr	r3, [r7, #24]
 800ced6:	1c59      	adds	r1, r3, #1
 800ced8:	61b9      	str	r1, [r7, #24]
 800ceda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cede:	4413      	add	r3, r2
 800cee0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800cee2:	68bb      	ldr	r3, [r7, #8]
 800cee4:	f003 0301 	and.w	r3, r3, #1
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d00d      	beq.n	800cf08 <put_fat+0xa4>
 800ceec:	697b      	ldr	r3, [r7, #20]
 800ceee:	781b      	ldrb	r3, [r3, #0]
 800cef0:	b25b      	sxtb	r3, r3
 800cef2:	f003 030f 	and.w	r3, r3, #15
 800cef6:	b25a      	sxtb	r2, r3
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	b25b      	sxtb	r3, r3
 800cefc:	011b      	lsls	r3, r3, #4
 800cefe:	b25b      	sxtb	r3, r3
 800cf00:	4313      	orrs	r3, r2
 800cf02:	b25b      	sxtb	r3, r3
 800cf04:	b2db      	uxtb	r3, r3
 800cf06:	e001      	b.n	800cf0c <put_fat+0xa8>
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	b2db      	uxtb	r3, r3
 800cf0c:	697a      	ldr	r2, [r7, #20]
 800cf0e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf10:	68fb      	ldr	r3, [r7, #12]
 800cf12:	2201      	movs	r2, #1
 800cf14:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800cf16:	68fb      	ldr	r3, [r7, #12]
 800cf18:	6a1a      	ldr	r2, [r3, #32]
 800cf1a:	69bb      	ldr	r3, [r7, #24]
 800cf1c:	0a5b      	lsrs	r3, r3, #9
 800cf1e:	4413      	add	r3, r2
 800cf20:	4619      	mov	r1, r3
 800cf22:	68f8      	ldr	r0, [r7, #12]
 800cf24:	f7ff fe3c 	bl	800cba0 <move_window>
 800cf28:	4603      	mov	r3, r0
 800cf2a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf2c:	7ffb      	ldrb	r3, [r7, #31]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d178      	bne.n	800d024 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf3e:	4413      	add	r3, r2
 800cf40:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800cf42:	68bb      	ldr	r3, [r7, #8]
 800cf44:	f003 0301 	and.w	r3, r3, #1
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d003      	beq.n	800cf54 <put_fat+0xf0>
 800cf4c:	687b      	ldr	r3, [r7, #4]
 800cf4e:	091b      	lsrs	r3, r3, #4
 800cf50:	b2db      	uxtb	r3, r3
 800cf52:	e00e      	b.n	800cf72 <put_fat+0x10e>
 800cf54:	697b      	ldr	r3, [r7, #20]
 800cf56:	781b      	ldrb	r3, [r3, #0]
 800cf58:	b25b      	sxtb	r3, r3
 800cf5a:	f023 030f 	bic.w	r3, r3, #15
 800cf5e:	b25a      	sxtb	r2, r3
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	0a1b      	lsrs	r3, r3, #8
 800cf64:	b25b      	sxtb	r3, r3
 800cf66:	f003 030f 	and.w	r3, r3, #15
 800cf6a:	b25b      	sxtb	r3, r3
 800cf6c:	4313      	orrs	r3, r2
 800cf6e:	b25b      	sxtb	r3, r3
 800cf70:	b2db      	uxtb	r3, r3
 800cf72:	697a      	ldr	r2, [r7, #20]
 800cf74:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	2201      	movs	r2, #1
 800cf7a:	70da      	strb	r2, [r3, #3]
			break;
 800cf7c:	e057      	b.n	800d02e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	6a1a      	ldr	r2, [r3, #32]
 800cf82:	68bb      	ldr	r3, [r7, #8]
 800cf84:	0a1b      	lsrs	r3, r3, #8
 800cf86:	4413      	add	r3, r2
 800cf88:	4619      	mov	r1, r3
 800cf8a:	68f8      	ldr	r0, [r7, #12]
 800cf8c:	f7ff fe08 	bl	800cba0 <move_window>
 800cf90:	4603      	mov	r3, r0
 800cf92:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cf94:	7ffb      	ldrb	r3, [r7, #31]
 800cf96:	2b00      	cmp	r3, #0
 800cf98:	d146      	bne.n	800d028 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800cf9a:	68fb      	ldr	r3, [r7, #12]
 800cf9c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfa0:	68bb      	ldr	r3, [r7, #8]
 800cfa2:	005b      	lsls	r3, r3, #1
 800cfa4:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 800cfa8:	4413      	add	r3, r2
 800cfaa:	687a      	ldr	r2, [r7, #4]
 800cfac:	b292      	uxth	r2, r2
 800cfae:	4611      	mov	r1, r2
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f7ff fb7f 	bl	800c6b4 <st_word>
			fs->wflag = 1;
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	2201      	movs	r2, #1
 800cfba:	70da      	strb	r2, [r3, #3]
			break;
 800cfbc:	e037      	b.n	800d02e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800cfbe:	68fb      	ldr	r3, [r7, #12]
 800cfc0:	6a1a      	ldr	r2, [r3, #32]
 800cfc2:	68bb      	ldr	r3, [r7, #8]
 800cfc4:	09db      	lsrs	r3, r3, #7
 800cfc6:	4413      	add	r3, r2
 800cfc8:	4619      	mov	r1, r3
 800cfca:	68f8      	ldr	r0, [r7, #12]
 800cfcc:	f7ff fde8 	bl	800cba0 <move_window>
 800cfd0:	4603      	mov	r3, r0
 800cfd2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800cfd4:	7ffb      	ldrb	r3, [r7, #31]
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d128      	bne.n	800d02c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 800cfe0:	68fb      	ldr	r3, [r7, #12]
 800cfe2:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	009b      	lsls	r3, r3, #2
 800cfea:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800cfee:	4413      	add	r3, r2
 800cff0:	4618      	mov	r0, r3
 800cff2:	f7ff fb3c 	bl	800c66e <ld_dword>
 800cff6:	4603      	mov	r3, r0
 800cff8:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800cffc:	4323      	orrs	r3, r4
 800cffe:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d006:	68bb      	ldr	r3, [r7, #8]
 800d008:	009b      	lsls	r3, r3, #2
 800d00a:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 800d00e:	4413      	add	r3, r2
 800d010:	6879      	ldr	r1, [r7, #4]
 800d012:	4618      	mov	r0, r3
 800d014:	f7ff fb69 	bl	800c6ea <st_dword>
			fs->wflag = 1;
 800d018:	68fb      	ldr	r3, [r7, #12]
 800d01a:	2201      	movs	r2, #1
 800d01c:	70da      	strb	r2, [r3, #3]
			break;
 800d01e:	e006      	b.n	800d02e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d020:	bf00      	nop
 800d022:	e004      	b.n	800d02e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d024:	bf00      	nop
 800d026:	e002      	b.n	800d02e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d028:	bf00      	nop
 800d02a:	e000      	b.n	800d02e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800d02c:	bf00      	nop
		}
	}
	return res;
 800d02e:	7ffb      	ldrb	r3, [r7, #31]
}
 800d030:	4618      	mov	r0, r3
 800d032:	3724      	adds	r7, #36	@ 0x24
 800d034:	46bd      	mov	sp, r7
 800d036:	bd90      	pop	{r4, r7, pc}

0800d038 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
 800d03e:	60f8      	str	r0, [r7, #12]
 800d040:	60b9      	str	r1, [r7, #8]
 800d042:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800d044:	2300      	movs	r3, #0
 800d046:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	681b      	ldr	r3, [r3, #0]
 800d04c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	2b01      	cmp	r3, #1
 800d052:	d904      	bls.n	800d05e <remove_chain+0x26>
 800d054:	69bb      	ldr	r3, [r7, #24]
 800d056:	695b      	ldr	r3, [r3, #20]
 800d058:	68ba      	ldr	r2, [r7, #8]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d301      	bcc.n	800d062 <remove_chain+0x2a>
 800d05e:	2302      	movs	r3, #2
 800d060:	e04b      	b.n	800d0fa <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d00c      	beq.n	800d082 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800d068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d06c:	6879      	ldr	r1, [r7, #4]
 800d06e:	69b8      	ldr	r0, [r7, #24]
 800d070:	f7ff fef8 	bl	800ce64 <put_fat>
 800d074:	4603      	mov	r3, r0
 800d076:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800d078:	7ffb      	ldrb	r3, [r7, #31]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d001      	beq.n	800d082 <remove_chain+0x4a>
 800d07e:	7ffb      	ldrb	r3, [r7, #31]
 800d080:	e03b      	b.n	800d0fa <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800d082:	68b9      	ldr	r1, [r7, #8]
 800d084:	68f8      	ldr	r0, [r7, #12]
 800d086:	f7ff fe46 	bl	800cd16 <get_fat>
 800d08a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d031      	beq.n	800d0f6 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800d092:	697b      	ldr	r3, [r7, #20]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d101      	bne.n	800d09c <remove_chain+0x64>
 800d098:	2302      	movs	r3, #2
 800d09a:	e02e      	b.n	800d0fa <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800d09c:	697b      	ldr	r3, [r7, #20]
 800d09e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d0a2:	d101      	bne.n	800d0a8 <remove_chain+0x70>
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e028      	b.n	800d0fa <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800d0a8:	2200      	movs	r2, #0
 800d0aa:	68b9      	ldr	r1, [r7, #8]
 800d0ac:	69b8      	ldr	r0, [r7, #24]
 800d0ae:	f7ff fed9 	bl	800ce64 <put_fat>
 800d0b2:	4603      	mov	r3, r0
 800d0b4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800d0b6:	7ffb      	ldrb	r3, [r7, #31]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d001      	beq.n	800d0c0 <remove_chain+0x88>
 800d0bc:	7ffb      	ldrb	r3, [r7, #31]
 800d0be:	e01c      	b.n	800d0fa <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	691a      	ldr	r2, [r3, #16]
 800d0c4:	69bb      	ldr	r3, [r7, #24]
 800d0c6:	695b      	ldr	r3, [r3, #20]
 800d0c8:	3b02      	subs	r3, #2
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d20b      	bcs.n	800d0e6 <remove_chain+0xae>
			fs->free_clst++;
 800d0ce:	69bb      	ldr	r3, [r7, #24]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	1c5a      	adds	r2, r3, #1
 800d0d4:	69bb      	ldr	r3, [r7, #24]
 800d0d6:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800d0d8:	69bb      	ldr	r3, [r7, #24]
 800d0da:	791b      	ldrb	r3, [r3, #4]
 800d0dc:	f043 0301 	orr.w	r3, r3, #1
 800d0e0:	b2da      	uxtb	r2, r3
 800d0e2:	69bb      	ldr	r3, [r7, #24]
 800d0e4:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800d0e6:	697b      	ldr	r3, [r7, #20]
 800d0e8:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800d0ea:	69bb      	ldr	r3, [r7, #24]
 800d0ec:	695b      	ldr	r3, [r3, #20]
 800d0ee:	68ba      	ldr	r2, [r7, #8]
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d3c6      	bcc.n	800d082 <remove_chain+0x4a>
 800d0f4:	e000      	b.n	800d0f8 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800d0f6:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800d0f8:	2300      	movs	r3, #0
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3720      	adds	r7, #32
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b088      	sub	sp, #32
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
 800d10a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800d112:	683b      	ldr	r3, [r7, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d10d      	bne.n	800d134 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	68db      	ldr	r3, [r3, #12]
 800d11c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800d11e:	69bb      	ldr	r3, [r7, #24]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d004      	beq.n	800d12e <create_chain+0x2c>
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	695b      	ldr	r3, [r3, #20]
 800d128:	69ba      	ldr	r2, [r7, #24]
 800d12a:	429a      	cmp	r2, r3
 800d12c:	d31b      	bcc.n	800d166 <create_chain+0x64>
 800d12e:	2301      	movs	r3, #1
 800d130:	61bb      	str	r3, [r7, #24]
 800d132:	e018      	b.n	800d166 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800d134:	6839      	ldr	r1, [r7, #0]
 800d136:	6878      	ldr	r0, [r7, #4]
 800d138:	f7ff fded 	bl	800cd16 <get_fat>
 800d13c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800d13e:	68fb      	ldr	r3, [r7, #12]
 800d140:	2b01      	cmp	r3, #1
 800d142:	d801      	bhi.n	800d148 <create_chain+0x46>
 800d144:	2301      	movs	r3, #1
 800d146:	e070      	b.n	800d22a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800d148:	68fb      	ldr	r3, [r7, #12]
 800d14a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d14e:	d101      	bne.n	800d154 <create_chain+0x52>
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	e06a      	b.n	800d22a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800d154:	693b      	ldr	r3, [r7, #16]
 800d156:	695b      	ldr	r3, [r3, #20]
 800d158:	68fa      	ldr	r2, [r7, #12]
 800d15a:	429a      	cmp	r2, r3
 800d15c:	d201      	bcs.n	800d162 <create_chain+0x60>
 800d15e:	68fb      	ldr	r3, [r7, #12]
 800d160:	e063      	b.n	800d22a <create_chain+0x128>
		scl = clst;
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800d166:	69bb      	ldr	r3, [r7, #24]
 800d168:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800d16a:	69fb      	ldr	r3, [r7, #28]
 800d16c:	3301      	adds	r3, #1
 800d16e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800d170:	693b      	ldr	r3, [r7, #16]
 800d172:	695b      	ldr	r3, [r3, #20]
 800d174:	69fa      	ldr	r2, [r7, #28]
 800d176:	429a      	cmp	r2, r3
 800d178:	d307      	bcc.n	800d18a <create_chain+0x88>
				ncl = 2;
 800d17a:	2302      	movs	r3, #2
 800d17c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800d17e:	69fa      	ldr	r2, [r7, #28]
 800d180:	69bb      	ldr	r3, [r7, #24]
 800d182:	429a      	cmp	r2, r3
 800d184:	d901      	bls.n	800d18a <create_chain+0x88>
 800d186:	2300      	movs	r3, #0
 800d188:	e04f      	b.n	800d22a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800d18a:	69f9      	ldr	r1, [r7, #28]
 800d18c:	6878      	ldr	r0, [r7, #4]
 800d18e:	f7ff fdc2 	bl	800cd16 <get_fat>
 800d192:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d00e      	beq.n	800d1b8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800d19a:	68fb      	ldr	r3, [r7, #12]
 800d19c:	2b01      	cmp	r3, #1
 800d19e:	d003      	beq.n	800d1a8 <create_chain+0xa6>
 800d1a0:	68fb      	ldr	r3, [r7, #12]
 800d1a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d1a6:	d101      	bne.n	800d1ac <create_chain+0xaa>
 800d1a8:	68fb      	ldr	r3, [r7, #12]
 800d1aa:	e03e      	b.n	800d22a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800d1ac:	69fa      	ldr	r2, [r7, #28]
 800d1ae:	69bb      	ldr	r3, [r7, #24]
 800d1b0:	429a      	cmp	r2, r3
 800d1b2:	d1da      	bne.n	800d16a <create_chain+0x68>
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	e038      	b.n	800d22a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800d1b8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800d1ba:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1be:	69f9      	ldr	r1, [r7, #28]
 800d1c0:	6938      	ldr	r0, [r7, #16]
 800d1c2:	f7ff fe4f 	bl	800ce64 <put_fat>
 800d1c6:	4603      	mov	r3, r0
 800d1c8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800d1ca:	7dfb      	ldrb	r3, [r7, #23]
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d109      	bne.n	800d1e4 <create_chain+0xe2>
 800d1d0:	683b      	ldr	r3, [r7, #0]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d006      	beq.n	800d1e4 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800d1d6:	69fa      	ldr	r2, [r7, #28]
 800d1d8:	6839      	ldr	r1, [r7, #0]
 800d1da:	6938      	ldr	r0, [r7, #16]
 800d1dc:	f7ff fe42 	bl	800ce64 <put_fat>
 800d1e0:	4603      	mov	r3, r0
 800d1e2:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800d1e4:	7dfb      	ldrb	r3, [r7, #23]
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d116      	bne.n	800d218 <create_chain+0x116>
		fs->last_clst = ncl;
 800d1ea:	693b      	ldr	r3, [r7, #16]
 800d1ec:	69fa      	ldr	r2, [r7, #28]
 800d1ee:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800d1f0:	693b      	ldr	r3, [r7, #16]
 800d1f2:	691a      	ldr	r2, [r3, #16]
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	695b      	ldr	r3, [r3, #20]
 800d1f8:	3b02      	subs	r3, #2
 800d1fa:	429a      	cmp	r2, r3
 800d1fc:	d804      	bhi.n	800d208 <create_chain+0x106>
 800d1fe:	693b      	ldr	r3, [r7, #16]
 800d200:	691b      	ldr	r3, [r3, #16]
 800d202:	1e5a      	subs	r2, r3, #1
 800d204:	693b      	ldr	r3, [r7, #16]
 800d206:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800d208:	693b      	ldr	r3, [r7, #16]
 800d20a:	791b      	ldrb	r3, [r3, #4]
 800d20c:	f043 0301 	orr.w	r3, r3, #1
 800d210:	b2da      	uxtb	r2, r3
 800d212:	693b      	ldr	r3, [r7, #16]
 800d214:	711a      	strb	r2, [r3, #4]
 800d216:	e007      	b.n	800d228 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800d218:	7dfb      	ldrb	r3, [r7, #23]
 800d21a:	2b01      	cmp	r3, #1
 800d21c:	d102      	bne.n	800d224 <create_chain+0x122>
 800d21e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d222:	e000      	b.n	800d226 <create_chain+0x124>
 800d224:	2301      	movs	r3, #1
 800d226:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800d228:	69fb      	ldr	r3, [r7, #28]
}
 800d22a:	4618      	mov	r0, r3
 800d22c:	3720      	adds	r7, #32
 800d22e:	46bd      	mov	sp, r7
 800d230:	bd80      	pop	{r7, pc}

0800d232 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800d232:	b480      	push	{r7}
 800d234:	b087      	sub	sp, #28
 800d236:	af00      	add	r7, sp, #0
 800d238:	6078      	str	r0, [r7, #4]
 800d23a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800d242:	687b      	ldr	r3, [r7, #4]
 800d244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d246:	3304      	adds	r3, #4
 800d248:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800d24a:	683b      	ldr	r3, [r7, #0]
 800d24c:	0a5b      	lsrs	r3, r3, #9
 800d24e:	68fa      	ldr	r2, [r7, #12]
 800d250:	8952      	ldrh	r2, [r2, #10]
 800d252:	fbb3 f3f2 	udiv	r3, r3, r2
 800d256:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d258:	693b      	ldr	r3, [r7, #16]
 800d25a:	1d1a      	adds	r2, r3, #4
 800d25c:	613a      	str	r2, [r7, #16]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800d262:	68bb      	ldr	r3, [r7, #8]
 800d264:	2b00      	cmp	r3, #0
 800d266:	d101      	bne.n	800d26c <clmt_clust+0x3a>
 800d268:	2300      	movs	r3, #0
 800d26a:	e010      	b.n	800d28e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800d26c:	697a      	ldr	r2, [r7, #20]
 800d26e:	68bb      	ldr	r3, [r7, #8]
 800d270:	429a      	cmp	r2, r3
 800d272:	d307      	bcc.n	800d284 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800d274:	697a      	ldr	r2, [r7, #20]
 800d276:	68bb      	ldr	r3, [r7, #8]
 800d278:	1ad3      	subs	r3, r2, r3
 800d27a:	617b      	str	r3, [r7, #20]
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	3304      	adds	r3, #4
 800d280:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800d282:	e7e9      	b.n	800d258 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800d284:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	681a      	ldr	r2, [r3, #0]
 800d28a:	697b      	ldr	r3, [r7, #20]
 800d28c:	4413      	add	r3, r2
}
 800d28e:	4618      	mov	r0, r3
 800d290:	371c      	adds	r7, #28
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800d29a:	b580      	push	{r7, lr}
 800d29c:	b086      	sub	sp, #24
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
 800d2a2:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800d2aa:	683b      	ldr	r3, [r7, #0]
 800d2ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d2b0:	d204      	bcs.n	800d2bc <dir_sdi+0x22>
 800d2b2:	683b      	ldr	r3, [r7, #0]
 800d2b4:	f003 031f 	and.w	r3, r3, #31
 800d2b8:	2b00      	cmp	r3, #0
 800d2ba:	d001      	beq.n	800d2c0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800d2bc:	2302      	movs	r3, #2
 800d2be:	e063      	b.n	800d388 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	683a      	ldr	r2, [r7, #0]
 800d2c4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	689b      	ldr	r3, [r3, #8]
 800d2ca:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800d2cc:	697b      	ldr	r3, [r7, #20]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d106      	bne.n	800d2e0 <dir_sdi+0x46>
 800d2d2:	693b      	ldr	r3, [r7, #16]
 800d2d4:	781b      	ldrb	r3, [r3, #0]
 800d2d6:	2b02      	cmp	r3, #2
 800d2d8:	d902      	bls.n	800d2e0 <dir_sdi+0x46>
		clst = fs->dirbase;
 800d2da:	693b      	ldr	r3, [r7, #16]
 800d2dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d2de:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d10c      	bne.n	800d300 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800d2e6:	683b      	ldr	r3, [r7, #0]
 800d2e8:	095b      	lsrs	r3, r3, #5
 800d2ea:	693a      	ldr	r2, [r7, #16]
 800d2ec:	8912      	ldrh	r2, [r2, #8]
 800d2ee:	4293      	cmp	r3, r2
 800d2f0:	d301      	bcc.n	800d2f6 <dir_sdi+0x5c>
 800d2f2:	2302      	movs	r3, #2
 800d2f4:	e048      	b.n	800d388 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800d2f6:	693b      	ldr	r3, [r7, #16]
 800d2f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	61da      	str	r2, [r3, #28]
 800d2fe:	e029      	b.n	800d354 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800d300:	693b      	ldr	r3, [r7, #16]
 800d302:	895b      	ldrh	r3, [r3, #10]
 800d304:	025b      	lsls	r3, r3, #9
 800d306:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d308:	e019      	b.n	800d33e <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	6979      	ldr	r1, [r7, #20]
 800d30e:	4618      	mov	r0, r3
 800d310:	f7ff fd01 	bl	800cd16 <get_fat>
 800d314:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d316:	697b      	ldr	r3, [r7, #20]
 800d318:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d31c:	d101      	bne.n	800d322 <dir_sdi+0x88>
 800d31e:	2301      	movs	r3, #1
 800d320:	e032      	b.n	800d388 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	2b01      	cmp	r3, #1
 800d326:	d904      	bls.n	800d332 <dir_sdi+0x98>
 800d328:	693b      	ldr	r3, [r7, #16]
 800d32a:	695b      	ldr	r3, [r3, #20]
 800d32c:	697a      	ldr	r2, [r7, #20]
 800d32e:	429a      	cmp	r2, r3
 800d330:	d301      	bcc.n	800d336 <dir_sdi+0x9c>
 800d332:	2302      	movs	r3, #2
 800d334:	e028      	b.n	800d388 <dir_sdi+0xee>
			ofs -= csz;
 800d336:	683a      	ldr	r2, [r7, #0]
 800d338:	68fb      	ldr	r3, [r7, #12]
 800d33a:	1ad3      	subs	r3, r2, r3
 800d33c:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800d33e:	683a      	ldr	r2, [r7, #0]
 800d340:	68fb      	ldr	r3, [r7, #12]
 800d342:	429a      	cmp	r2, r3
 800d344:	d2e1      	bcs.n	800d30a <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800d346:	6979      	ldr	r1, [r7, #20]
 800d348:	6938      	ldr	r0, [r7, #16]
 800d34a:	f7ff fcc5 	bl	800ccd8 <clust2sect>
 800d34e:	4602      	mov	r2, r0
 800d350:	687b      	ldr	r3, [r7, #4]
 800d352:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	697a      	ldr	r2, [r7, #20]
 800d358:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	69db      	ldr	r3, [r3, #28]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d101      	bne.n	800d366 <dir_sdi+0xcc>
 800d362:	2302      	movs	r3, #2
 800d364:	e010      	b.n	800d388 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800d366:	687b      	ldr	r3, [r7, #4]
 800d368:	69da      	ldr	r2, [r3, #28]
 800d36a:	683b      	ldr	r3, [r7, #0]
 800d36c:	0a5b      	lsrs	r3, r3, #9
 800d36e:	441a      	add	r2, r3
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800d374:	693b      	ldr	r3, [r7, #16]
 800d376:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d380:	441a      	add	r2, r3
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d386:	2300      	movs	r3, #0
}
 800d388:	4618      	mov	r0, r3
 800d38a:	3718      	adds	r7, #24
 800d38c:	46bd      	mov	sp, r7
 800d38e:	bd80      	pop	{r7, pc}

0800d390 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b086      	sub	sp, #24
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	695b      	ldr	r3, [r3, #20]
 800d3a4:	3320      	adds	r3, #32
 800d3a6:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800d3a8:	687b      	ldr	r3, [r7, #4]
 800d3aa:	69db      	ldr	r3, [r3, #28]
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d003      	beq.n	800d3b8 <dir_next+0x28>
 800d3b0:	68bb      	ldr	r3, [r7, #8]
 800d3b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800d3b6:	d301      	bcc.n	800d3bc <dir_next+0x2c>
 800d3b8:	2304      	movs	r3, #4
 800d3ba:	e0aa      	b.n	800d512 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800d3bc:	68bb      	ldr	r3, [r7, #8]
 800d3be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	f040 8098 	bne.w	800d4f8 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	69db      	ldr	r3, [r3, #28]
 800d3cc:	1c5a      	adds	r2, r3, #1
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	699b      	ldr	r3, [r3, #24]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d10b      	bne.n	800d3f2 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	095b      	lsrs	r3, r3, #5
 800d3de:	68fa      	ldr	r2, [r7, #12]
 800d3e0:	8912      	ldrh	r2, [r2, #8]
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	f0c0 8088 	bcc.w	800d4f8 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	2200      	movs	r2, #0
 800d3ec:	61da      	str	r2, [r3, #28]
 800d3ee:	2304      	movs	r3, #4
 800d3f0:	e08f      	b.n	800d512 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800d3f2:	68bb      	ldr	r3, [r7, #8]
 800d3f4:	0a5b      	lsrs	r3, r3, #9
 800d3f6:	68fa      	ldr	r2, [r7, #12]
 800d3f8:	8952      	ldrh	r2, [r2, #10]
 800d3fa:	3a01      	subs	r2, #1
 800d3fc:	4013      	ands	r3, r2
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	d17a      	bne.n	800d4f8 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800d402:	687a      	ldr	r2, [r7, #4]
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	699b      	ldr	r3, [r3, #24]
 800d408:	4619      	mov	r1, r3
 800d40a:	4610      	mov	r0, r2
 800d40c:	f7ff fc83 	bl	800cd16 <get_fat>
 800d410:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	2b01      	cmp	r3, #1
 800d416:	d801      	bhi.n	800d41c <dir_next+0x8c>
 800d418:	2302      	movs	r3, #2
 800d41a:	e07a      	b.n	800d512 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800d41c:	697b      	ldr	r3, [r7, #20]
 800d41e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d422:	d101      	bne.n	800d428 <dir_next+0x98>
 800d424:	2301      	movs	r3, #1
 800d426:	e074      	b.n	800d512 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	695b      	ldr	r3, [r3, #20]
 800d42c:	697a      	ldr	r2, [r7, #20]
 800d42e:	429a      	cmp	r2, r3
 800d430:	d358      	bcc.n	800d4e4 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	2b00      	cmp	r3, #0
 800d436:	d104      	bne.n	800d442 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2200      	movs	r2, #0
 800d43c:	61da      	str	r2, [r3, #28]
 800d43e:	2304      	movs	r3, #4
 800d440:	e067      	b.n	800d512 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800d442:	687a      	ldr	r2, [r7, #4]
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	699b      	ldr	r3, [r3, #24]
 800d448:	4619      	mov	r1, r3
 800d44a:	4610      	mov	r0, r2
 800d44c:	f7ff fe59 	bl	800d102 <create_chain>
 800d450:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800d452:	697b      	ldr	r3, [r7, #20]
 800d454:	2b00      	cmp	r3, #0
 800d456:	d101      	bne.n	800d45c <dir_next+0xcc>
 800d458:	2307      	movs	r3, #7
 800d45a:	e05a      	b.n	800d512 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	2b01      	cmp	r3, #1
 800d460:	d101      	bne.n	800d466 <dir_next+0xd6>
 800d462:	2302      	movs	r3, #2
 800d464:	e055      	b.n	800d512 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800d466:	697b      	ldr	r3, [r7, #20]
 800d468:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800d46c:	d101      	bne.n	800d472 <dir_next+0xe2>
 800d46e:	2301      	movs	r3, #1
 800d470:	e04f      	b.n	800d512 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800d472:	68f8      	ldr	r0, [r7, #12]
 800d474:	f7ff fb50 	bl	800cb18 <sync_window>
 800d478:	4603      	mov	r3, r0
 800d47a:	2b00      	cmp	r3, #0
 800d47c:	d001      	beq.n	800d482 <dir_next+0xf2>
 800d47e:	2301      	movs	r3, #1
 800d480:	e047      	b.n	800d512 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	3330      	adds	r3, #48	@ 0x30
 800d486:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d48a:	2100      	movs	r1, #0
 800d48c:	4618      	mov	r0, r3
 800d48e:	f7ff f979 	bl	800c784 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d492:	2300      	movs	r3, #0
 800d494:	613b      	str	r3, [r7, #16]
 800d496:	6979      	ldr	r1, [r7, #20]
 800d498:	68f8      	ldr	r0, [r7, #12]
 800d49a:	f7ff fc1d 	bl	800ccd8 <clust2sect>
 800d49e:	4602      	mov	r2, r0
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d4a4:	e012      	b.n	800d4cc <dir_next+0x13c>
						fs->wflag = 1;
 800d4a6:	68fb      	ldr	r3, [r7, #12]
 800d4a8:	2201      	movs	r2, #1
 800d4aa:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800d4ac:	68f8      	ldr	r0, [r7, #12]
 800d4ae:	f7ff fb33 	bl	800cb18 <sync_window>
 800d4b2:	4603      	mov	r3, r0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d001      	beq.n	800d4bc <dir_next+0x12c>
 800d4b8:	2301      	movs	r3, #1
 800d4ba:	e02a      	b.n	800d512 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800d4bc:	693b      	ldr	r3, [r7, #16]
 800d4be:	3301      	adds	r3, #1
 800d4c0:	613b      	str	r3, [r7, #16]
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	895b      	ldrh	r3, [r3, #10]
 800d4d0:	461a      	mov	r2, r3
 800d4d2:	693b      	ldr	r3, [r7, #16]
 800d4d4:	4293      	cmp	r3, r2
 800d4d6:	d3e6      	bcc.n	800d4a6 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d4dc:	693b      	ldr	r3, [r7, #16]
 800d4de:	1ad2      	subs	r2, r2, r3
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	62da      	str	r2, [r3, #44]	@ 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	697a      	ldr	r2, [r7, #20]
 800d4e8:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800d4ea:	6979      	ldr	r1, [r7, #20]
 800d4ec:	68f8      	ldr	r0, [r7, #12]
 800d4ee:	f7ff fbf3 	bl	800ccd8 <clust2sect>
 800d4f2:	4602      	mov	r2, r0
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	68ba      	ldr	r2, [r7, #8]
 800d4fc:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d504:	68bb      	ldr	r3, [r7, #8]
 800d506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d50a:	441a      	add	r2, r3
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800d510:	2300      	movs	r3, #0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3718      	adds	r7, #24
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}

0800d51a <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800d51a:	b580      	push	{r7, lr}
 800d51c:	b086      	sub	sp, #24
 800d51e:	af00      	add	r7, sp, #0
 800d520:	6078      	str	r0, [r7, #4]
 800d522:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800d52a:	2100      	movs	r1, #0
 800d52c:	6878      	ldr	r0, [r7, #4]
 800d52e:	f7ff feb4 	bl	800d29a <dir_sdi>
 800d532:	4603      	mov	r3, r0
 800d534:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800d536:	7dfb      	ldrb	r3, [r7, #23]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d12b      	bne.n	800d594 <dir_alloc+0x7a>
		n = 0;
 800d53c:	2300      	movs	r3, #0
 800d53e:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	69db      	ldr	r3, [r3, #28]
 800d544:	4619      	mov	r1, r3
 800d546:	68f8      	ldr	r0, [r7, #12]
 800d548:	f7ff fb2a 	bl	800cba0 <move_window>
 800d54c:	4603      	mov	r3, r0
 800d54e:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d550:	7dfb      	ldrb	r3, [r7, #23]
 800d552:	2b00      	cmp	r3, #0
 800d554:	d11d      	bne.n	800d592 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6a1b      	ldr	r3, [r3, #32]
 800d55a:	781b      	ldrb	r3, [r3, #0]
 800d55c:	2be5      	cmp	r3, #229	@ 0xe5
 800d55e:	d004      	beq.n	800d56a <dir_alloc+0x50>
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	6a1b      	ldr	r3, [r3, #32]
 800d564:	781b      	ldrb	r3, [r3, #0]
 800d566:	2b00      	cmp	r3, #0
 800d568:	d107      	bne.n	800d57a <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800d56a:	693b      	ldr	r3, [r7, #16]
 800d56c:	3301      	adds	r3, #1
 800d56e:	613b      	str	r3, [r7, #16]
 800d570:	693a      	ldr	r2, [r7, #16]
 800d572:	683b      	ldr	r3, [r7, #0]
 800d574:	429a      	cmp	r2, r3
 800d576:	d102      	bne.n	800d57e <dir_alloc+0x64>
 800d578:	e00c      	b.n	800d594 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800d57a:	2300      	movs	r3, #0
 800d57c:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800d57e:	2101      	movs	r1, #1
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7ff ff05 	bl	800d390 <dir_next>
 800d586:	4603      	mov	r3, r0
 800d588:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800d58a:	7dfb      	ldrb	r3, [r7, #23]
 800d58c:	2b00      	cmp	r3, #0
 800d58e:	d0d7      	beq.n	800d540 <dir_alloc+0x26>
 800d590:	e000      	b.n	800d594 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800d592:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800d594:	7dfb      	ldrb	r3, [r7, #23]
 800d596:	2b04      	cmp	r3, #4
 800d598:	d101      	bne.n	800d59e <dir_alloc+0x84>
 800d59a:	2307      	movs	r3, #7
 800d59c:	75fb      	strb	r3, [r7, #23]
	return res;
 800d59e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d5a0:	4618      	mov	r0, r3
 800d5a2:	3718      	adds	r7, #24
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b084      	sub	sp, #16
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
 800d5b0:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800d5b2:	683b      	ldr	r3, [r7, #0]
 800d5b4:	331a      	adds	r3, #26
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7ff f840 	bl	800c63c <ld_word>
 800d5bc:	4603      	mov	r3, r0
 800d5be:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	781b      	ldrb	r3, [r3, #0]
 800d5c4:	2b03      	cmp	r3, #3
 800d5c6:	d109      	bne.n	800d5dc <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800d5c8:	683b      	ldr	r3, [r7, #0]
 800d5ca:	3314      	adds	r3, #20
 800d5cc:	4618      	mov	r0, r3
 800d5ce:	f7ff f835 	bl	800c63c <ld_word>
 800d5d2:	4603      	mov	r3, r0
 800d5d4:	041b      	lsls	r3, r3, #16
 800d5d6:	68fa      	ldr	r2, [r7, #12]
 800d5d8:	4313      	orrs	r3, r2
 800d5da:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
}
 800d5de:	4618      	mov	r0, r3
 800d5e0:	3710      	adds	r7, #16
 800d5e2:	46bd      	mov	sp, r7
 800d5e4:	bd80      	pop	{r7, pc}

0800d5e6 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800d5e6:	b580      	push	{r7, lr}
 800d5e8:	b084      	sub	sp, #16
 800d5ea:	af00      	add	r7, sp, #0
 800d5ec:	60f8      	str	r0, [r7, #12]
 800d5ee:	60b9      	str	r1, [r7, #8]
 800d5f0:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800d5f2:	68bb      	ldr	r3, [r7, #8]
 800d5f4:	331a      	adds	r3, #26
 800d5f6:	687a      	ldr	r2, [r7, #4]
 800d5f8:	b292      	uxth	r2, r2
 800d5fa:	4611      	mov	r1, r2
 800d5fc:	4618      	mov	r0, r3
 800d5fe:	f7ff f859 	bl	800c6b4 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	781b      	ldrb	r3, [r3, #0]
 800d606:	2b03      	cmp	r3, #3
 800d608:	d109      	bne.n	800d61e <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	f103 0214 	add.w	r2, r3, #20
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	0c1b      	lsrs	r3, r3, #16
 800d614:	b29b      	uxth	r3, r3
 800d616:	4619      	mov	r1, r3
 800d618:	4610      	mov	r0, r2
 800d61a:	f7ff f84b 	bl	800c6b4 <st_word>
	}
}
 800d61e:	bf00      	nop
 800d620:	3710      	adds	r7, #16
 800d622:	46bd      	mov	sp, r7
 800d624:	bd80      	pop	{r7, pc}

0800d626 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800d626:	b580      	push	{r7, lr}
 800d628:	b086      	sub	sp, #24
 800d62a:	af00      	add	r7, sp, #0
 800d62c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800d634:	2100      	movs	r1, #0
 800d636:	6878      	ldr	r0, [r7, #4]
 800d638:	f7ff fe2f 	bl	800d29a <dir_sdi>
 800d63c:	4603      	mov	r3, r0
 800d63e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800d640:	7dfb      	ldrb	r3, [r7, #23]
 800d642:	2b00      	cmp	r3, #0
 800d644:	d001      	beq.n	800d64a <dir_find+0x24>
 800d646:	7dfb      	ldrb	r3, [r7, #23]
 800d648:	e03e      	b.n	800d6c8 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800d64a:	687b      	ldr	r3, [r7, #4]
 800d64c:	69db      	ldr	r3, [r3, #28]
 800d64e:	4619      	mov	r1, r3
 800d650:	6938      	ldr	r0, [r7, #16]
 800d652:	f7ff faa5 	bl	800cba0 <move_window>
 800d656:	4603      	mov	r3, r0
 800d658:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800d65a:	7dfb      	ldrb	r3, [r7, #23]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d12f      	bne.n	800d6c0 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800d660:	687b      	ldr	r3, [r7, #4]
 800d662:	6a1b      	ldr	r3, [r3, #32]
 800d664:	781b      	ldrb	r3, [r3, #0]
 800d666:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800d668:	7bfb      	ldrb	r3, [r7, #15]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	d102      	bne.n	800d674 <dir_find+0x4e>
 800d66e:	2304      	movs	r3, #4
 800d670:	75fb      	strb	r3, [r7, #23]
 800d672:	e028      	b.n	800d6c6 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	6a1b      	ldr	r3, [r3, #32]
 800d678:	330b      	adds	r3, #11
 800d67a:	781b      	ldrb	r3, [r3, #0]
 800d67c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800d680:	b2da      	uxtb	r2, r3
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	6a1b      	ldr	r3, [r3, #32]
 800d68a:	330b      	adds	r3, #11
 800d68c:	781b      	ldrb	r3, [r3, #0]
 800d68e:	f003 0308 	and.w	r3, r3, #8
 800d692:	2b00      	cmp	r3, #0
 800d694:	d10a      	bne.n	800d6ac <dir_find+0x86>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	6a18      	ldr	r0, [r3, #32]
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	3324      	adds	r3, #36	@ 0x24
 800d69e:	220b      	movs	r2, #11
 800d6a0:	4619      	mov	r1, r3
 800d6a2:	f7ff f88a 	bl	800c7ba <mem_cmp>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	2b00      	cmp	r3, #0
 800d6aa:	d00b      	beq.n	800d6c4 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800d6ac:	2100      	movs	r1, #0
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fe6e 	bl	800d390 <dir_next>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800d6b8:	7dfb      	ldrb	r3, [r7, #23]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d0c5      	beq.n	800d64a <dir_find+0x24>
 800d6be:	e002      	b.n	800d6c6 <dir_find+0xa0>
		if (res != FR_OK) break;
 800d6c0:	bf00      	nop
 800d6c2:	e000      	b.n	800d6c6 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800d6c4:	bf00      	nop

	return res;
 800d6c6:	7dfb      	ldrb	r3, [r7, #23]
}
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	3718      	adds	r7, #24
 800d6cc:	46bd      	mov	sp, r7
 800d6ce:	bd80      	pop	{r7, pc}

0800d6d0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800d6de:	2101      	movs	r1, #1
 800d6e0:	6878      	ldr	r0, [r7, #4]
 800d6e2:	f7ff ff1a 	bl	800d51a <dir_alloc>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
 800d6ec:	2b00      	cmp	r3, #0
 800d6ee:	d11c      	bne.n	800d72a <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	69db      	ldr	r3, [r3, #28]
 800d6f4:	4619      	mov	r1, r3
 800d6f6:	68b8      	ldr	r0, [r7, #8]
 800d6f8:	f7ff fa52 	bl	800cba0 <move_window>
 800d6fc:	4603      	mov	r3, r0
 800d6fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800d700:	7bfb      	ldrb	r3, [r7, #15]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d111      	bne.n	800d72a <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6a1b      	ldr	r3, [r3, #32]
 800d70a:	2220      	movs	r2, #32
 800d70c:	2100      	movs	r1, #0
 800d70e:	4618      	mov	r0, r3
 800d710:	f7ff f838 	bl	800c784 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800d714:	687b      	ldr	r3, [r7, #4]
 800d716:	6a18      	ldr	r0, [r3, #32]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	3324      	adds	r3, #36	@ 0x24
 800d71c:	220b      	movs	r2, #11
 800d71e:	4619      	mov	r1, r3
 800d720:	f7ff f80f 	bl	800c742 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800d724:	68bb      	ldr	r3, [r7, #8]
 800d726:	2201      	movs	r2, #1
 800d728:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800d72a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d72c:	4618      	mov	r0, r3
 800d72e:	3710      	adds	r7, #16
 800d730:	46bd      	mov	sp, r7
 800d732:	bd80      	pop	{r7, pc}

0800d734 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800d734:	b580      	push	{r7, lr}
 800d736:	b088      	sub	sp, #32
 800d738:	af00      	add	r7, sp, #0
 800d73a:	6078      	str	r0, [r7, #4]
 800d73c:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800d73e:	683b      	ldr	r3, [r7, #0]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	60fb      	str	r3, [r7, #12]
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	3324      	adds	r3, #36	@ 0x24
 800d748:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800d74a:	220b      	movs	r2, #11
 800d74c:	2120      	movs	r1, #32
 800d74e:	68b8      	ldr	r0, [r7, #8]
 800d750:	f7ff f818 	bl	800c784 <mem_set>
	si = i = 0; ni = 8;
 800d754:	2300      	movs	r3, #0
 800d756:	613b      	str	r3, [r7, #16]
 800d758:	693b      	ldr	r3, [r7, #16]
 800d75a:	61fb      	str	r3, [r7, #28]
 800d75c:	2308      	movs	r3, #8
 800d75e:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800d760:	69fb      	ldr	r3, [r7, #28]
 800d762:	1c5a      	adds	r2, r3, #1
 800d764:	61fa      	str	r2, [r7, #28]
 800d766:	68fa      	ldr	r2, [r7, #12]
 800d768:	4413      	add	r3, r2
 800d76a:	781b      	ldrb	r3, [r3, #0]
 800d76c:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d76e:	7efb      	ldrb	r3, [r7, #27]
 800d770:	2b20      	cmp	r3, #32
 800d772:	d94e      	bls.n	800d812 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800d774:	7efb      	ldrb	r3, [r7, #27]
 800d776:	2b2f      	cmp	r3, #47	@ 0x2f
 800d778:	d006      	beq.n	800d788 <create_name+0x54>
 800d77a:	7efb      	ldrb	r3, [r7, #27]
 800d77c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d77e:	d110      	bne.n	800d7a2 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800d780:	e002      	b.n	800d788 <create_name+0x54>
 800d782:	69fb      	ldr	r3, [r7, #28]
 800d784:	3301      	adds	r3, #1
 800d786:	61fb      	str	r3, [r7, #28]
 800d788:	68fa      	ldr	r2, [r7, #12]
 800d78a:	69fb      	ldr	r3, [r7, #28]
 800d78c:	4413      	add	r3, r2
 800d78e:	781b      	ldrb	r3, [r3, #0]
 800d790:	2b2f      	cmp	r3, #47	@ 0x2f
 800d792:	d0f6      	beq.n	800d782 <create_name+0x4e>
 800d794:	68fa      	ldr	r2, [r7, #12]
 800d796:	69fb      	ldr	r3, [r7, #28]
 800d798:	4413      	add	r3, r2
 800d79a:	781b      	ldrb	r3, [r3, #0]
 800d79c:	2b5c      	cmp	r3, #92	@ 0x5c
 800d79e:	d0f0      	beq.n	800d782 <create_name+0x4e>
			break;
 800d7a0:	e038      	b.n	800d814 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800d7a2:	7efb      	ldrb	r3, [r7, #27]
 800d7a4:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7a6:	d003      	beq.n	800d7b0 <create_name+0x7c>
 800d7a8:	693a      	ldr	r2, [r7, #16]
 800d7aa:	697b      	ldr	r3, [r7, #20]
 800d7ac:	429a      	cmp	r2, r3
 800d7ae:	d30c      	bcc.n	800d7ca <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800d7b0:	697b      	ldr	r3, [r7, #20]
 800d7b2:	2b0b      	cmp	r3, #11
 800d7b4:	d002      	beq.n	800d7bc <create_name+0x88>
 800d7b6:	7efb      	ldrb	r3, [r7, #27]
 800d7b8:	2b2e      	cmp	r3, #46	@ 0x2e
 800d7ba:	d001      	beq.n	800d7c0 <create_name+0x8c>
 800d7bc:	2306      	movs	r3, #6
 800d7be:	e044      	b.n	800d84a <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800d7c0:	2308      	movs	r3, #8
 800d7c2:	613b      	str	r3, [r7, #16]
 800d7c4:	230b      	movs	r3, #11
 800d7c6:	617b      	str	r3, [r7, #20]
			continue;
 800d7c8:	e022      	b.n	800d810 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800d7ca:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da04      	bge.n	800d7dc <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800d7d2:	7efb      	ldrb	r3, [r7, #27]
 800d7d4:	3b80      	subs	r3, #128	@ 0x80
 800d7d6:	4a1f      	ldr	r2, [pc, #124]	@ (800d854 <create_name+0x120>)
 800d7d8:	5cd3      	ldrb	r3, [r2, r3]
 800d7da:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800d7dc:	7efb      	ldrb	r3, [r7, #27]
 800d7de:	4619      	mov	r1, r3
 800d7e0:	481d      	ldr	r0, [pc, #116]	@ (800d858 <create_name+0x124>)
 800d7e2:	f7ff f811 	bl	800c808 <chk_chr>
 800d7e6:	4603      	mov	r3, r0
 800d7e8:	2b00      	cmp	r3, #0
 800d7ea:	d001      	beq.n	800d7f0 <create_name+0xbc>
 800d7ec:	2306      	movs	r3, #6
 800d7ee:	e02c      	b.n	800d84a <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800d7f0:	7efb      	ldrb	r3, [r7, #27]
 800d7f2:	2b60      	cmp	r3, #96	@ 0x60
 800d7f4:	d905      	bls.n	800d802 <create_name+0xce>
 800d7f6:	7efb      	ldrb	r3, [r7, #27]
 800d7f8:	2b7a      	cmp	r3, #122	@ 0x7a
 800d7fa:	d802      	bhi.n	800d802 <create_name+0xce>
 800d7fc:	7efb      	ldrb	r3, [r7, #27]
 800d7fe:	3b20      	subs	r3, #32
 800d800:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	1c5a      	adds	r2, r3, #1
 800d806:	613a      	str	r2, [r7, #16]
 800d808:	68ba      	ldr	r2, [r7, #8]
 800d80a:	4413      	add	r3, r2
 800d80c:	7efa      	ldrb	r2, [r7, #27]
 800d80e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800d810:	e7a6      	b.n	800d760 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800d812:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800d814:	68fa      	ldr	r2, [r7, #12]
 800d816:	69fb      	ldr	r3, [r7, #28]
 800d818:	441a      	add	r2, r3
 800d81a:	683b      	ldr	r3, [r7, #0]
 800d81c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800d81e:	693b      	ldr	r3, [r7, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d101      	bne.n	800d828 <create_name+0xf4>
 800d824:	2306      	movs	r3, #6
 800d826:	e010      	b.n	800d84a <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800d828:	68bb      	ldr	r3, [r7, #8]
 800d82a:	781b      	ldrb	r3, [r3, #0]
 800d82c:	2be5      	cmp	r3, #229	@ 0xe5
 800d82e:	d102      	bne.n	800d836 <create_name+0x102>
 800d830:	68bb      	ldr	r3, [r7, #8]
 800d832:	2205      	movs	r2, #5
 800d834:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800d836:	7efb      	ldrb	r3, [r7, #27]
 800d838:	2b20      	cmp	r3, #32
 800d83a:	d801      	bhi.n	800d840 <create_name+0x10c>
 800d83c:	2204      	movs	r2, #4
 800d83e:	e000      	b.n	800d842 <create_name+0x10e>
 800d840:	2200      	movs	r2, #0
 800d842:	68bb      	ldr	r3, [r7, #8]
 800d844:	330b      	adds	r3, #11
 800d846:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800d848:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800d84a:	4618      	mov	r0, r3
 800d84c:	3720      	adds	r7, #32
 800d84e:	46bd      	mov	sp, r7
 800d850:	bd80      	pop	{r7, pc}
 800d852:	bf00      	nop
 800d854:	080178a0 	.word	0x080178a0
 800d858:	0800ff64 	.word	0x0800ff64

0800d85c <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b086      	sub	sp, #24
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
 800d864:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800d866:	687b      	ldr	r3, [r7, #4]
 800d868:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800d86a:	693b      	ldr	r3, [r7, #16]
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800d870:	e002      	b.n	800d878 <follow_path+0x1c>
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	3301      	adds	r3, #1
 800d876:	603b      	str	r3, [r7, #0]
 800d878:	683b      	ldr	r3, [r7, #0]
 800d87a:	781b      	ldrb	r3, [r3, #0]
 800d87c:	2b2f      	cmp	r3, #47	@ 0x2f
 800d87e:	d0f8      	beq.n	800d872 <follow_path+0x16>
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	781b      	ldrb	r3, [r3, #0]
 800d884:	2b5c      	cmp	r3, #92	@ 0x5c
 800d886:	d0f4      	beq.n	800d872 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800d888:	693b      	ldr	r3, [r7, #16]
 800d88a:	2200      	movs	r2, #0
 800d88c:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	781b      	ldrb	r3, [r3, #0]
 800d892:	2b1f      	cmp	r3, #31
 800d894:	d80a      	bhi.n	800d8ac <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	2280      	movs	r2, #128	@ 0x80
 800d89a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 800d89e:	2100      	movs	r1, #0
 800d8a0:	6878      	ldr	r0, [r7, #4]
 800d8a2:	f7ff fcfa 	bl	800d29a <dir_sdi>
 800d8a6:	4603      	mov	r3, r0
 800d8a8:	75fb      	strb	r3, [r7, #23]
 800d8aa:	e043      	b.n	800d934 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d8ac:	463b      	mov	r3, r7
 800d8ae:	4619      	mov	r1, r3
 800d8b0:	6878      	ldr	r0, [r7, #4]
 800d8b2:	f7ff ff3f 	bl	800d734 <create_name>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800d8ba:	7dfb      	ldrb	r3, [r7, #23]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d134      	bne.n	800d92a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800d8c0:	6878      	ldr	r0, [r7, #4]
 800d8c2:	f7ff feb0 	bl	800d626 <dir_find>
 800d8c6:	4603      	mov	r3, r0
 800d8c8:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800d8ca:	687b      	ldr	r3, [r7, #4]
 800d8cc:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800d8d0:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800d8d2:	7dfb      	ldrb	r3, [r7, #23]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d00a      	beq.n	800d8ee <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800d8d8:	7dfb      	ldrb	r3, [r7, #23]
 800d8da:	2b04      	cmp	r3, #4
 800d8dc:	d127      	bne.n	800d92e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800d8de:	7afb      	ldrb	r3, [r7, #11]
 800d8e0:	f003 0304 	and.w	r3, r3, #4
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d122      	bne.n	800d92e <follow_path+0xd2>
 800d8e8:	2305      	movs	r3, #5
 800d8ea:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800d8ec:	e01f      	b.n	800d92e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d8ee:	7afb      	ldrb	r3, [r7, #11]
 800d8f0:	f003 0304 	and.w	r3, r3, #4
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d11c      	bne.n	800d932 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	799b      	ldrb	r3, [r3, #6]
 800d8fc:	f003 0310 	and.w	r3, r3, #16
 800d900:	2b00      	cmp	r3, #0
 800d902:	d102      	bne.n	800d90a <follow_path+0xae>
				res = FR_NO_PATH; break;
 800d904:	2305      	movs	r3, #5
 800d906:	75fb      	strb	r3, [r7, #23]
 800d908:	e014      	b.n	800d934 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800d90a:	68fb      	ldr	r3, [r7, #12]
 800d90c:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	695b      	ldr	r3, [r3, #20]
 800d914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d918:	4413      	add	r3, r2
 800d91a:	4619      	mov	r1, r3
 800d91c:	68f8      	ldr	r0, [r7, #12]
 800d91e:	f7ff fe43 	bl	800d5a8 <ld_clust>
 800d922:	4602      	mov	r2, r0
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800d928:	e7c0      	b.n	800d8ac <follow_path+0x50>
			if (res != FR_OK) break;
 800d92a:	bf00      	nop
 800d92c:	e002      	b.n	800d934 <follow_path+0xd8>
				break;
 800d92e:	bf00      	nop
 800d930:	e000      	b.n	800d934 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800d932:	bf00      	nop
			}
		}
	}

	return res;
 800d934:	7dfb      	ldrb	r3, [r7, #23]
}
 800d936:	4618      	mov	r0, r3
 800d938:	3718      	adds	r7, #24
 800d93a:	46bd      	mov	sp, r7
 800d93c:	bd80      	pop	{r7, pc}

0800d93e <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800d93e:	b480      	push	{r7}
 800d940:	b087      	sub	sp, #28
 800d942:	af00      	add	r7, sp, #0
 800d944:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800d946:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800d94a:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d031      	beq.n	800d9b8 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	617b      	str	r3, [r7, #20]
 800d95a:	e002      	b.n	800d962 <get_ldnumber+0x24>
 800d95c:	697b      	ldr	r3, [r7, #20]
 800d95e:	3301      	adds	r3, #1
 800d960:	617b      	str	r3, [r7, #20]
 800d962:	697b      	ldr	r3, [r7, #20]
 800d964:	781b      	ldrb	r3, [r3, #0]
 800d966:	2b20      	cmp	r3, #32
 800d968:	d903      	bls.n	800d972 <get_ldnumber+0x34>
 800d96a:	697b      	ldr	r3, [r7, #20]
 800d96c:	781b      	ldrb	r3, [r3, #0]
 800d96e:	2b3a      	cmp	r3, #58	@ 0x3a
 800d970:	d1f4      	bne.n	800d95c <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800d972:	697b      	ldr	r3, [r7, #20]
 800d974:	781b      	ldrb	r3, [r3, #0]
 800d976:	2b3a      	cmp	r3, #58	@ 0x3a
 800d978:	d11c      	bne.n	800d9b4 <get_ldnumber+0x76>
			tp = *path;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800d980:	68fb      	ldr	r3, [r7, #12]
 800d982:	1c5a      	adds	r2, r3, #1
 800d984:	60fa      	str	r2, [r7, #12]
 800d986:	781b      	ldrb	r3, [r3, #0]
 800d988:	3b30      	subs	r3, #48	@ 0x30
 800d98a:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b09      	cmp	r3, #9
 800d990:	d80e      	bhi.n	800d9b0 <get_ldnumber+0x72>
 800d992:	68fa      	ldr	r2, [r7, #12]
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	429a      	cmp	r2, r3
 800d998:	d10a      	bne.n	800d9b0 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800d99a:	68bb      	ldr	r3, [r7, #8]
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d107      	bne.n	800d9b0 <get_ldnumber+0x72>
					vol = (int)i;
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800d9a4:	697b      	ldr	r3, [r7, #20]
 800d9a6:	3301      	adds	r3, #1
 800d9a8:	617b      	str	r3, [r7, #20]
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	697a      	ldr	r2, [r7, #20]
 800d9ae:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800d9b0:	693b      	ldr	r3, [r7, #16]
 800d9b2:	e002      	b.n	800d9ba <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800d9b4:	2300      	movs	r3, #0
 800d9b6:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800d9b8:	693b      	ldr	r3, [r7, #16]
}
 800d9ba:	4618      	mov	r0, r3
 800d9bc:	371c      	adds	r7, #28
 800d9be:	46bd      	mov	sp, r7
 800d9c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9c4:	4770      	bx	lr
	...

0800d9c8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
 800d9ce:	6078      	str	r0, [r7, #4]
 800d9d0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800d9d2:	687b      	ldr	r3, [r7, #4]
 800d9d4:	2200      	movs	r2, #0
 800d9d6:	70da      	strb	r2, [r3, #3]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d9de:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800d9e0:	6839      	ldr	r1, [r7, #0]
 800d9e2:	6878      	ldr	r0, [r7, #4]
 800d9e4:	f7ff f8dc 	bl	800cba0 <move_window>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d001      	beq.n	800d9f2 <check_fs+0x2a>
 800d9ee:	2304      	movs	r3, #4
 800d9f0:	e038      	b.n	800da64 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	3330      	adds	r3, #48	@ 0x30
 800d9f6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800d9fa:	4618      	mov	r0, r3
 800d9fc:	f7fe fe1e 	bl	800c63c <ld_word>
 800da00:	4603      	mov	r3, r0
 800da02:	461a      	mov	r2, r3
 800da04:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800da08:	429a      	cmp	r2, r3
 800da0a:	d001      	beq.n	800da10 <check_fs+0x48>
 800da0c:	2303      	movs	r3, #3
 800da0e:	e029      	b.n	800da64 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da16:	2be9      	cmp	r3, #233	@ 0xe9
 800da18:	d009      	beq.n	800da2e <check_fs+0x66>
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800da20:	2beb      	cmp	r3, #235	@ 0xeb
 800da22:	d11e      	bne.n	800da62 <check_fs+0x9a>
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800da2a:	2b90      	cmp	r3, #144	@ 0x90
 800da2c:	d119      	bne.n	800da62 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	3330      	adds	r3, #48	@ 0x30
 800da32:	3336      	adds	r3, #54	@ 0x36
 800da34:	4618      	mov	r0, r3
 800da36:	f7fe fe1a 	bl	800c66e <ld_dword>
 800da3a:	4603      	mov	r3, r0
 800da3c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800da40:	4a0a      	ldr	r2, [pc, #40]	@ (800da6c <check_fs+0xa4>)
 800da42:	4293      	cmp	r3, r2
 800da44:	d101      	bne.n	800da4a <check_fs+0x82>
 800da46:	2300      	movs	r3, #0
 800da48:	e00c      	b.n	800da64 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	3330      	adds	r3, #48	@ 0x30
 800da4e:	3352      	adds	r3, #82	@ 0x52
 800da50:	4618      	mov	r0, r3
 800da52:	f7fe fe0c 	bl	800c66e <ld_dword>
 800da56:	4603      	mov	r3, r0
 800da58:	4a05      	ldr	r2, [pc, #20]	@ (800da70 <check_fs+0xa8>)
 800da5a:	4293      	cmp	r3, r2
 800da5c:	d101      	bne.n	800da62 <check_fs+0x9a>
 800da5e:	2300      	movs	r3, #0
 800da60:	e000      	b.n	800da64 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800da62:	2302      	movs	r3, #2
}
 800da64:	4618      	mov	r0, r3
 800da66:	3708      	adds	r7, #8
 800da68:	46bd      	mov	sp, r7
 800da6a:	bd80      	pop	{r7, pc}
 800da6c:	00544146 	.word	0x00544146
 800da70:	33544146 	.word	0x33544146

0800da74 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800da74:	b580      	push	{r7, lr}
 800da76:	b096      	sub	sp, #88	@ 0x58
 800da78:	af00      	add	r7, sp, #0
 800da7a:	60f8      	str	r0, [r7, #12]
 800da7c:	60b9      	str	r1, [r7, #8]
 800da7e:	4613      	mov	r3, r2
 800da80:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	2200      	movs	r2, #0
 800da86:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800da88:	68f8      	ldr	r0, [r7, #12]
 800da8a:	f7ff ff58 	bl	800d93e <get_ldnumber>
 800da8e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800da90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da92:	2b00      	cmp	r3, #0
 800da94:	da01      	bge.n	800da9a <find_volume+0x26>
 800da96:	230b      	movs	r3, #11
 800da98:	e22d      	b.n	800def6 <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800da9a:	4aa1      	ldr	r2, [pc, #644]	@ (800dd20 <find_volume+0x2ac>)
 800da9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800da9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800daa2:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800daa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d101      	bne.n	800daae <find_volume+0x3a>
 800daaa:	230c      	movs	r3, #12
 800daac:	e223      	b.n	800def6 <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dab2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800dab4:	79fb      	ldrb	r3, [r7, #7]
 800dab6:	f023 0301 	bic.w	r3, r3, #1
 800daba:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800dabc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	2b00      	cmp	r3, #0
 800dac2:	d01a      	beq.n	800dafa <find_volume+0x86>
		stat = disk_status(fs->drv);
 800dac4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dac6:	785b      	ldrb	r3, [r3, #1]
 800dac8:	4618      	mov	r0, r3
 800daca:	f7fe fd17 	bl	800c4fc <disk_status>
 800dace:	4603      	mov	r3, r0
 800dad0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800dad4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800dad8:	f003 0301 	and.w	r3, r3, #1
 800dadc:	2b00      	cmp	r3, #0
 800dade:	d10c      	bne.n	800dafa <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800dae0:	79fb      	ldrb	r3, [r7, #7]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d007      	beq.n	800daf6 <find_volume+0x82>
 800dae6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800daea:	f003 0304 	and.w	r3, r3, #4
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d001      	beq.n	800daf6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800daf2:	230a      	movs	r3, #10
 800daf4:	e1ff      	b.n	800def6 <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800daf6:	2300      	movs	r3, #0
 800daf8:	e1fd      	b.n	800def6 <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800dafa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dafc:	2200      	movs	r2, #0
 800dafe:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800db00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800db02:	b2da      	uxtb	r2, r3
 800db04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db06:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800db08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db0a:	785b      	ldrb	r3, [r3, #1]
 800db0c:	4618      	mov	r0, r3
 800db0e:	f7fe fd0f 	bl	800c530 <disk_initialize>
 800db12:	4603      	mov	r3, r0
 800db14:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800db18:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db1c:	f003 0301 	and.w	r3, r3, #1
 800db20:	2b00      	cmp	r3, #0
 800db22:	d001      	beq.n	800db28 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800db24:	2303      	movs	r3, #3
 800db26:	e1e6      	b.n	800def6 <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800db28:	79fb      	ldrb	r3, [r7, #7]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d007      	beq.n	800db3e <find_volume+0xca>
 800db2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800db32:	f003 0304 	and.w	r3, r3, #4
 800db36:	2b00      	cmp	r3, #0
 800db38:	d001      	beq.n	800db3e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800db3a:	230a      	movs	r3, #10
 800db3c:	e1db      	b.n	800def6 <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800db3e:	2300      	movs	r3, #0
 800db40:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800db42:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800db44:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800db46:	f7ff ff3f 	bl	800d9c8 <check_fs>
 800db4a:	4603      	mov	r3, r0
 800db4c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800db50:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800db54:	2b02      	cmp	r3, #2
 800db56:	d149      	bne.n	800dbec <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db58:	2300      	movs	r3, #0
 800db5a:	643b      	str	r3, [r7, #64]	@ 0x40
 800db5c:	e01e      	b.n	800db9c <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800db5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800db60:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800db64:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db66:	011b      	lsls	r3, r3, #4
 800db68:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800db6c:	4413      	add	r3, r2
 800db6e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800db70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db72:	3304      	adds	r3, #4
 800db74:	781b      	ldrb	r3, [r3, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d006      	beq.n	800db88 <find_volume+0x114>
 800db7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db7c:	3308      	adds	r3, #8
 800db7e:	4618      	mov	r0, r3
 800db80:	f7fe fd75 	bl	800c66e <ld_dword>
 800db84:	4602      	mov	r2, r0
 800db86:	e000      	b.n	800db8a <find_volume+0x116>
 800db88:	2200      	movs	r2, #0
 800db8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db8c:	009b      	lsls	r3, r3, #2
 800db8e:	3358      	adds	r3, #88	@ 0x58
 800db90:	443b      	add	r3, r7
 800db92:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800db96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db98:	3301      	adds	r3, #1
 800db9a:	643b      	str	r3, [r7, #64]	@ 0x40
 800db9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800db9e:	2b03      	cmp	r3, #3
 800dba0:	d9dd      	bls.n	800db5e <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800dba2:	2300      	movs	r3, #0
 800dba4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800dba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dba8:	2b00      	cmp	r3, #0
 800dbaa:	d002      	beq.n	800dbb2 <find_volume+0x13e>
 800dbac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbae:	3b01      	subs	r3, #1
 800dbb0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800dbb2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbb4:	009b      	lsls	r3, r3, #2
 800dbb6:	3358      	adds	r3, #88	@ 0x58
 800dbb8:	443b      	add	r3, r7
 800dbba:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800dbbe:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800dbc0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dbc2:	2b00      	cmp	r3, #0
 800dbc4:	d005      	beq.n	800dbd2 <find_volume+0x15e>
 800dbc6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800dbc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800dbca:	f7ff fefd 	bl	800d9c8 <check_fs>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	e000      	b.n	800dbd4 <find_volume+0x160>
 800dbd2:	2303      	movs	r3, #3
 800dbd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800dbd8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d905      	bls.n	800dbec <find_volume+0x178>
 800dbe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbe2:	3301      	adds	r3, #1
 800dbe4:	643b      	str	r3, [r7, #64]	@ 0x40
 800dbe6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dbe8:	2b03      	cmp	r3, #3
 800dbea:	d9e2      	bls.n	800dbb2 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800dbec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbf0:	2b04      	cmp	r3, #4
 800dbf2:	d101      	bne.n	800dbf8 <find_volume+0x184>
 800dbf4:	2301      	movs	r3, #1
 800dbf6:	e17e      	b.n	800def6 <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800dbf8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dbfc:	2b01      	cmp	r3, #1
 800dbfe:	d901      	bls.n	800dc04 <find_volume+0x190>
 800dc00:	230d      	movs	r3, #13
 800dc02:	e178      	b.n	800def6 <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800dc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc06:	3330      	adds	r3, #48	@ 0x30
 800dc08:	330b      	adds	r3, #11
 800dc0a:	4618      	mov	r0, r3
 800dc0c:	f7fe fd16 	bl	800c63c <ld_word>
 800dc10:	4603      	mov	r3, r0
 800dc12:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dc16:	d001      	beq.n	800dc1c <find_volume+0x1a8>
 800dc18:	230d      	movs	r3, #13
 800dc1a:	e16c      	b.n	800def6 <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800dc1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc1e:	3330      	adds	r3, #48	@ 0x30
 800dc20:	3316      	adds	r3, #22
 800dc22:	4618      	mov	r0, r3
 800dc24:	f7fe fd0a 	bl	800c63c <ld_word>
 800dc28:	4603      	mov	r3, r0
 800dc2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800dc2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc2e:	2b00      	cmp	r3, #0
 800dc30:	d106      	bne.n	800dc40 <find_volume+0x1cc>
 800dc32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc34:	3330      	adds	r3, #48	@ 0x30
 800dc36:	3324      	adds	r3, #36	@ 0x24
 800dc38:	4618      	mov	r0, r3
 800dc3a:	f7fe fd18 	bl	800c66e <ld_dword>
 800dc3e:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 800dc40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc42:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800dc44:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800dc46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc48:	f893 2040 	ldrb.w	r2, [r3, #64]	@ 0x40
 800dc4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc4e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800dc50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc52:	789b      	ldrb	r3, [r3, #2]
 800dc54:	2b01      	cmp	r3, #1
 800dc56:	d005      	beq.n	800dc64 <find_volume+0x1f0>
 800dc58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5a:	789b      	ldrb	r3, [r3, #2]
 800dc5c:	2b02      	cmp	r3, #2
 800dc5e:	d001      	beq.n	800dc64 <find_volume+0x1f0>
 800dc60:	230d      	movs	r3, #13
 800dc62:	e148      	b.n	800def6 <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800dc64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc66:	789b      	ldrb	r3, [r3, #2]
 800dc68:	461a      	mov	r2, r3
 800dc6a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dc6c:	fb02 f303 	mul.w	r3, r2, r3
 800dc70:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800dc72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc74:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800dc78:	461a      	mov	r2, r3
 800dc7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc7c:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc80:	895b      	ldrh	r3, [r3, #10]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d008      	beq.n	800dc98 <find_volume+0x224>
 800dc86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc88:	895b      	ldrh	r3, [r3, #10]
 800dc8a:	461a      	mov	r2, r3
 800dc8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc8e:	895b      	ldrh	r3, [r3, #10]
 800dc90:	3b01      	subs	r3, #1
 800dc92:	4013      	ands	r3, r2
 800dc94:	2b00      	cmp	r3, #0
 800dc96:	d001      	beq.n	800dc9c <find_volume+0x228>
 800dc98:	230d      	movs	r3, #13
 800dc9a:	e12c      	b.n	800def6 <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800dc9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc9e:	3330      	adds	r3, #48	@ 0x30
 800dca0:	3311      	adds	r3, #17
 800dca2:	4618      	mov	r0, r3
 800dca4:	f7fe fcca 	bl	800c63c <ld_word>
 800dca8:	4603      	mov	r3, r0
 800dcaa:	461a      	mov	r2, r3
 800dcac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcae:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800dcb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcb2:	891b      	ldrh	r3, [r3, #8]
 800dcb4:	f003 030f 	and.w	r3, r3, #15
 800dcb8:	b29b      	uxth	r3, r3
 800dcba:	2b00      	cmp	r3, #0
 800dcbc:	d001      	beq.n	800dcc2 <find_volume+0x24e>
 800dcbe:	230d      	movs	r3, #13
 800dcc0:	e119      	b.n	800def6 <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800dcc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcc4:	3330      	adds	r3, #48	@ 0x30
 800dcc6:	3313      	adds	r3, #19
 800dcc8:	4618      	mov	r0, r3
 800dcca:	f7fe fcb7 	bl	800c63c <ld_word>
 800dcce:	4603      	mov	r3, r0
 800dcd0:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800dcd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d106      	bne.n	800dce6 <find_volume+0x272>
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dcda:	3330      	adds	r3, #48	@ 0x30
 800dcdc:	3320      	adds	r3, #32
 800dcde:	4618      	mov	r0, r3
 800dce0:	f7fe fcc5 	bl	800c66e <ld_dword>
 800dce4:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800dce6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dce8:	3330      	adds	r3, #48	@ 0x30
 800dcea:	330e      	adds	r3, #14
 800dcec:	4618      	mov	r0, r3
 800dcee:	f7fe fca5 	bl	800c63c <ld_word>
 800dcf2:	4603      	mov	r3, r0
 800dcf4:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800dcf6:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d101      	bne.n	800dd00 <find_volume+0x28c>
 800dcfc:	230d      	movs	r3, #13
 800dcfe:	e0fa      	b.n	800def6 <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800dd00:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dd02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800dd04:	4413      	add	r3, r2
 800dd06:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd08:	8912      	ldrh	r2, [r2, #8]
 800dd0a:	0912      	lsrs	r2, r2, #4
 800dd0c:	b292      	uxth	r2, r2
 800dd0e:	4413      	add	r3, r2
 800dd10:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800dd12:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd16:	429a      	cmp	r2, r3
 800dd18:	d204      	bcs.n	800dd24 <find_volume+0x2b0>
 800dd1a:	230d      	movs	r3, #13
 800dd1c:	e0eb      	b.n	800def6 <find_volume+0x482>
 800dd1e:	bf00      	nop
 800dd20:	200003f8 	.word	0x200003f8
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800dd24:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800dd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd28:	1ad3      	subs	r3, r2, r3
 800dd2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd2c:	8952      	ldrh	r2, [r2, #10]
 800dd2e:	fbb3 f3f2 	udiv	r3, r3, r2
 800dd32:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800dd34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd36:	2b00      	cmp	r3, #0
 800dd38:	d101      	bne.n	800dd3e <find_volume+0x2ca>
 800dd3a:	230d      	movs	r3, #13
 800dd3c:	e0db      	b.n	800def6 <find_volume+0x482>
		fmt = FS_FAT32;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800dd44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd46:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d802      	bhi.n	800dd54 <find_volume+0x2e0>
 800dd4e:	2302      	movs	r3, #2
 800dd50:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800dd54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd56:	f640 72f5 	movw	r2, #4085	@ 0xff5
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d802      	bhi.n	800dd64 <find_volume+0x2f0>
 800dd5e:	2301      	movs	r3, #1
 800dd60:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800dd64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dd66:	1c9a      	adds	r2, r3, #2
 800dd68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6a:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800dd6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd6e:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd70:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800dd72:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800dd74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800dd76:	441a      	add	r2, r3
 800dd78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd7a:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800dd7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800dd7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd80:	441a      	add	r2, r3
 800dd82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd84:	629a      	str	r2, [r3, #40]	@ 0x28
		if (fmt == FS_FAT32) {
 800dd86:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dd8a:	2b03      	cmp	r3, #3
 800dd8c:	d11e      	bne.n	800ddcc <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800dd8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd90:	3330      	adds	r3, #48	@ 0x30
 800dd92:	332a      	adds	r3, #42	@ 0x2a
 800dd94:	4618      	mov	r0, r3
 800dd96:	f7fe fc51 	bl	800c63c <ld_word>
 800dd9a:	4603      	mov	r3, r0
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	d001      	beq.n	800dda4 <find_volume+0x330>
 800dda0:	230d      	movs	r3, #13
 800dda2:	e0a8      	b.n	800def6 <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800dda4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dda6:	891b      	ldrh	r3, [r3, #8]
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d001      	beq.n	800ddb0 <find_volume+0x33c>
 800ddac:	230d      	movs	r3, #13
 800ddae:	e0a2      	b.n	800def6 <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800ddb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddb2:	3330      	adds	r3, #48	@ 0x30
 800ddb4:	332c      	adds	r3, #44	@ 0x2c
 800ddb6:	4618      	mov	r0, r3
 800ddb8:	f7fe fc59 	bl	800c66e <ld_dword>
 800ddbc:	4602      	mov	r2, r0
 800ddbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc0:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800ddc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	009b      	lsls	r3, r3, #2
 800ddc8:	647b      	str	r3, [r7, #68]	@ 0x44
 800ddca:	e01f      	b.n	800de0c <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800ddcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddce:	891b      	ldrh	r3, [r3, #8]
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d101      	bne.n	800ddd8 <find_volume+0x364>
 800ddd4:	230d      	movs	r3, #13
 800ddd6:	e08e      	b.n	800def6 <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800ddd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddda:	6a1a      	ldr	r2, [r3, #32]
 800dddc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ddde:	441a      	add	r2, r3
 800dde0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dde2:	625a      	str	r2, [r3, #36]	@ 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800dde4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800dde8:	2b02      	cmp	r3, #2
 800ddea:	d103      	bne.n	800ddf4 <find_volume+0x380>
 800ddec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddee:	695b      	ldr	r3, [r3, #20]
 800ddf0:	005b      	lsls	r3, r3, #1
 800ddf2:	e00a      	b.n	800de0a <find_volume+0x396>
 800ddf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ddf6:	695a      	ldr	r2, [r3, #20]
 800ddf8:	4613      	mov	r3, r2
 800ddfa:	005b      	lsls	r3, r3, #1
 800ddfc:	4413      	add	r3, r2
 800ddfe:	085a      	lsrs	r2, r3, #1
 800de00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de02:	695b      	ldr	r3, [r3, #20]
 800de04:	f003 0301 	and.w	r3, r3, #1
 800de08:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800de0a:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800de0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de0e:	699a      	ldr	r2, [r3, #24]
 800de10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800de12:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800de16:	0a5b      	lsrs	r3, r3, #9
 800de18:	429a      	cmp	r2, r3
 800de1a:	d201      	bcs.n	800de20 <find_volume+0x3ac>
 800de1c:	230d      	movs	r3, #13
 800de1e:	e06a      	b.n	800def6 <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800de20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800de26:	611a      	str	r2, [r3, #16]
 800de28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2a:	691a      	ldr	r2, [r3, #16]
 800de2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de2e:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800de30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de32:	2280      	movs	r2, #128	@ 0x80
 800de34:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800de36:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800de3a:	2b03      	cmp	r3, #3
 800de3c:	d149      	bne.n	800ded2 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800de3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de40:	3330      	adds	r3, #48	@ 0x30
 800de42:	3330      	adds	r3, #48	@ 0x30
 800de44:	4618      	mov	r0, r3
 800de46:	f7fe fbf9 	bl	800c63c <ld_word>
 800de4a:	4603      	mov	r3, r0
 800de4c:	2b01      	cmp	r3, #1
 800de4e:	d140      	bne.n	800ded2 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800de50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800de52:	3301      	adds	r3, #1
 800de54:	4619      	mov	r1, r3
 800de56:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800de58:	f7fe fea2 	bl	800cba0 <move_window>
 800de5c:	4603      	mov	r3, r0
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d137      	bne.n	800ded2 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800de62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de64:	2200      	movs	r2, #0
 800de66:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800de68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de6a:	3330      	adds	r3, #48	@ 0x30
 800de6c:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800de70:	4618      	mov	r0, r3
 800de72:	f7fe fbe3 	bl	800c63c <ld_word>
 800de76:	4603      	mov	r3, r0
 800de78:	461a      	mov	r2, r3
 800de7a:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 800de7e:	429a      	cmp	r2, r3
 800de80:	d127      	bne.n	800ded2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800de82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de84:	3330      	adds	r3, #48	@ 0x30
 800de86:	4618      	mov	r0, r3
 800de88:	f7fe fbf1 	bl	800c66e <ld_dword>
 800de8c:	4603      	mov	r3, r0
 800de8e:	4a1c      	ldr	r2, [pc, #112]	@ (800df00 <find_volume+0x48c>)
 800de90:	4293      	cmp	r3, r2
 800de92:	d11e      	bne.n	800ded2 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800de94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800de96:	3330      	adds	r3, #48	@ 0x30
 800de98:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 800de9c:	4618      	mov	r0, r3
 800de9e:	f7fe fbe6 	bl	800c66e <ld_dword>
 800dea2:	4603      	mov	r3, r0
 800dea4:	4a17      	ldr	r2, [pc, #92]	@ (800df04 <find_volume+0x490>)
 800dea6:	4293      	cmp	r3, r2
 800dea8:	d113      	bne.n	800ded2 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800deaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deac:	3330      	adds	r3, #48	@ 0x30
 800deae:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800deb2:	4618      	mov	r0, r3
 800deb4:	f7fe fbdb 	bl	800c66e <ld_dword>
 800deb8:	4602      	mov	r2, r0
 800deba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800debc:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800debe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dec0:	3330      	adds	r3, #48	@ 0x30
 800dec2:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 800dec6:	4618      	mov	r0, r3
 800dec8:	f7fe fbd1 	bl	800c66e <ld_dword>
 800decc:	4602      	mov	r2, r0
 800dece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded0:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800ded2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ded4:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800ded8:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800deda:	4b0b      	ldr	r3, [pc, #44]	@ (800df08 <find_volume+0x494>)
 800dedc:	881b      	ldrh	r3, [r3, #0]
 800dede:	3301      	adds	r3, #1
 800dee0:	b29a      	uxth	r2, r3
 800dee2:	4b09      	ldr	r3, [pc, #36]	@ (800df08 <find_volume+0x494>)
 800dee4:	801a      	strh	r2, [r3, #0]
 800dee6:	4b08      	ldr	r3, [pc, #32]	@ (800df08 <find_volume+0x494>)
 800dee8:	881a      	ldrh	r2, [r3, #0]
 800deea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800deec:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800deee:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800def0:	f7fe fdee 	bl	800cad0 <clear_lock>
#endif
	return FR_OK;
 800def4:	2300      	movs	r3, #0
}
 800def6:	4618      	mov	r0, r3
 800def8:	3758      	adds	r7, #88	@ 0x58
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
 800defe:	bf00      	nop
 800df00:	41615252 	.word	0x41615252
 800df04:	61417272 	.word	0x61417272
 800df08:	200003fc 	.word	0x200003fc

0800df0c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800df0c:	b580      	push	{r7, lr}
 800df0e:	b084      	sub	sp, #16
 800df10:	af00      	add	r7, sp, #0
 800df12:	6078      	str	r0, [r7, #4]
 800df14:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800df16:	2309      	movs	r3, #9
 800df18:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2b00      	cmp	r3, #0
 800df1e:	d01c      	beq.n	800df5a <validate+0x4e>
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	2b00      	cmp	r3, #0
 800df26:	d018      	beq.n	800df5a <validate+0x4e>
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	781b      	ldrb	r3, [r3, #0]
 800df2e:	2b00      	cmp	r3, #0
 800df30:	d013      	beq.n	800df5a <validate+0x4e>
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	889a      	ldrh	r2, [r3, #4]
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	88db      	ldrh	r3, [r3, #6]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d10c      	bne.n	800df5a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	785b      	ldrb	r3, [r3, #1]
 800df46:	4618      	mov	r0, r3
 800df48:	f7fe fad8 	bl	800c4fc <disk_status>
 800df4c:	4603      	mov	r3, r0
 800df4e:	f003 0301 	and.w	r3, r3, #1
 800df52:	2b00      	cmp	r3, #0
 800df54:	d101      	bne.n	800df5a <validate+0x4e>
			res = FR_OK;
 800df56:	2300      	movs	r3, #0
 800df58:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800df5a:	7bfb      	ldrb	r3, [r7, #15]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d102      	bne.n	800df66 <validate+0x5a>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	681b      	ldr	r3, [r3, #0]
 800df64:	e000      	b.n	800df68 <validate+0x5c>
 800df66:	2300      	movs	r3, #0
 800df68:	683a      	ldr	r2, [r7, #0]
 800df6a:	6013      	str	r3, [r2, #0]
	return res;
 800df6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800df6e:	4618      	mov	r0, r3
 800df70:	3710      	adds	r7, #16
 800df72:	46bd      	mov	sp, r7
 800df74:	bd80      	pop	{r7, pc}
	...

0800df78 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800df78:	b580      	push	{r7, lr}
 800df7a:	b088      	sub	sp, #32
 800df7c:	af00      	add	r7, sp, #0
 800df7e:	60f8      	str	r0, [r7, #12]
 800df80:	60b9      	str	r1, [r7, #8]
 800df82:	4613      	mov	r3, r2
 800df84:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800df86:	68bb      	ldr	r3, [r7, #8]
 800df88:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800df8a:	f107 0310 	add.w	r3, r7, #16
 800df8e:	4618      	mov	r0, r3
 800df90:	f7ff fcd5 	bl	800d93e <get_ldnumber>
 800df94:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	2b00      	cmp	r3, #0
 800df9a:	da01      	bge.n	800dfa0 <f_mount+0x28>
 800df9c:	230b      	movs	r3, #11
 800df9e:	e02b      	b.n	800dff8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800dfa0:	4a17      	ldr	r2, [pc, #92]	@ (800e000 <f_mount+0x88>)
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dfa8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800dfaa:	69bb      	ldr	r3, [r7, #24]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d005      	beq.n	800dfbc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800dfb0:	69b8      	ldr	r0, [r7, #24]
 800dfb2:	f7fe fd8d 	bl	800cad0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800dfb6:	69bb      	ldr	r3, [r7, #24]
 800dfb8:	2200      	movs	r2, #0
 800dfba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800dfbc:	68fb      	ldr	r3, [r7, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d002      	beq.n	800dfc8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	2200      	movs	r2, #0
 800dfc6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	490d      	ldr	r1, [pc, #52]	@ (800e000 <f_mount+0x88>)
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d002      	beq.n	800dfde <f_mount+0x66>
 800dfd8:	79fb      	ldrb	r3, [r7, #7]
 800dfda:	2b01      	cmp	r3, #1
 800dfdc:	d001      	beq.n	800dfe2 <f_mount+0x6a>
 800dfde:	2300      	movs	r3, #0
 800dfe0:	e00a      	b.n	800dff8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800dfe2:	f107 010c 	add.w	r1, r7, #12
 800dfe6:	f107 0308 	add.w	r3, r7, #8
 800dfea:	2200      	movs	r2, #0
 800dfec:	4618      	mov	r0, r3
 800dfee:	f7ff fd41 	bl	800da74 <find_volume>
 800dff2:	4603      	mov	r3, r0
 800dff4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800dff6:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff8:	4618      	mov	r0, r3
 800dffa:	3720      	adds	r7, #32
 800dffc:	46bd      	mov	sp, r7
 800dffe:	bd80      	pop	{r7, pc}
 800e000:	200003f8 	.word	0x200003f8

0800e004 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800e004:	b580      	push	{r7, lr}
 800e006:	b098      	sub	sp, #96	@ 0x60
 800e008:	af00      	add	r7, sp, #0
 800e00a:	60f8      	str	r0, [r7, #12]
 800e00c:	60b9      	str	r1, [r7, #8]
 800e00e:	4613      	mov	r3, r2
 800e010:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	2b00      	cmp	r3, #0
 800e016:	d101      	bne.n	800e01c <f_open+0x18>
 800e018:	2309      	movs	r3, #9
 800e01a:	e1a9      	b.n	800e370 <f_open+0x36c>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800e01c:	79fb      	ldrb	r3, [r7, #7]
 800e01e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800e022:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800e024:	79fa      	ldrb	r2, [r7, #7]
 800e026:	f107 0110 	add.w	r1, r7, #16
 800e02a:	f107 0308 	add.w	r3, r7, #8
 800e02e:	4618      	mov	r0, r3
 800e030:	f7ff fd20 	bl	800da74 <find_volume>
 800e034:	4603      	mov	r3, r0
 800e036:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	if (res == FR_OK) {
 800e03a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e03e:	2b00      	cmp	r3, #0
 800e040:	f040 818d 	bne.w	800e35e <f_open+0x35a>
		dj.obj.fs = fs;
 800e044:	693b      	ldr	r3, [r7, #16]
 800e046:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800e048:	68ba      	ldr	r2, [r7, #8]
 800e04a:	f107 0314 	add.w	r3, r7, #20
 800e04e:	4611      	mov	r1, r2
 800e050:	4618      	mov	r0, r3
 800e052:	f7ff fc03 	bl	800d85c <follow_path>
 800e056:	4603      	mov	r3, r0
 800e058:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800e05c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e060:	2b00      	cmp	r3, #0
 800e062:	d118      	bne.n	800e096 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800e064:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800e068:	b25b      	sxtb	r3, r3
 800e06a:	2b00      	cmp	r3, #0
 800e06c:	da03      	bge.n	800e076 <f_open+0x72>
				res = FR_INVALID_NAME;
 800e06e:	2306      	movs	r3, #6
 800e070:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e074:	e00f      	b.n	800e096 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e076:	79fb      	ldrb	r3, [r7, #7]
 800e078:	2b01      	cmp	r3, #1
 800e07a:	bf8c      	ite	hi
 800e07c:	2301      	movhi	r3, #1
 800e07e:	2300      	movls	r3, #0
 800e080:	b2db      	uxtb	r3, r3
 800e082:	461a      	mov	r2, r3
 800e084:	f107 0314 	add.w	r3, r7, #20
 800e088:	4611      	mov	r1, r2
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe fbd8 	bl	800c840 <chk_lock>
 800e090:	4603      	mov	r3, r0
 800e092:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800e096:	79fb      	ldrb	r3, [r7, #7]
 800e098:	f003 031c 	and.w	r3, r3, #28
 800e09c:	2b00      	cmp	r3, #0
 800e09e:	d07f      	beq.n	800e1a0 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 800e0a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d017      	beq.n	800e0d8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800e0a8:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0ac:	2b04      	cmp	r3, #4
 800e0ae:	d10e      	bne.n	800e0ce <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800e0b0:	f7fe fc22 	bl	800c8f8 <enq_lock>
 800e0b4:	4603      	mov	r3, r0
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d006      	beq.n	800e0c8 <f_open+0xc4>
 800e0ba:	f107 0314 	add.w	r3, r7, #20
 800e0be:	4618      	mov	r0, r3
 800e0c0:	f7ff fb06 	bl	800d6d0 <dir_register>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	e000      	b.n	800e0ca <f_open+0xc6>
 800e0c8:	2312      	movs	r3, #18
 800e0ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800e0ce:	79fb      	ldrb	r3, [r7, #7]
 800e0d0:	f043 0308 	orr.w	r3, r3, #8
 800e0d4:	71fb      	strb	r3, [r7, #7]
 800e0d6:	e010      	b.n	800e0fa <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800e0d8:	7ebb      	ldrb	r3, [r7, #26]
 800e0da:	f003 0311 	and.w	r3, r3, #17
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <f_open+0xe6>
					res = FR_DENIED;
 800e0e2:	2307      	movs	r3, #7
 800e0e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e0e8:	e007      	b.n	800e0fa <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800e0ea:	79fb      	ldrb	r3, [r7, #7]
 800e0ec:	f003 0304 	and.w	r3, r3, #4
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d002      	beq.n	800e0fa <f_open+0xf6>
 800e0f4:	2308      	movs	r3, #8
 800e0f6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800e0fa:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d168      	bne.n	800e1d4 <f_open+0x1d0>
 800e102:	79fb      	ldrb	r3, [r7, #7]
 800e104:	f003 0308 	and.w	r3, r3, #8
 800e108:	2b00      	cmp	r3, #0
 800e10a:	d063      	beq.n	800e1d4 <f_open+0x1d0>
				dw = GET_FATTIME();
 800e10c:	f7fc f9c6 	bl	800a49c <get_fattime>
 800e110:	6538      	str	r0, [r7, #80]	@ 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800e112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e114:	330e      	adds	r3, #14
 800e116:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e118:	4618      	mov	r0, r3
 800e11a:	f7fe fae6 	bl	800c6ea <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800e11e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e120:	3316      	adds	r3, #22
 800e122:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e124:	4618      	mov	r0, r3
 800e126:	f7fe fae0 	bl	800c6ea <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800e12a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e12c:	330b      	adds	r3, #11
 800e12e:	2220      	movs	r2, #32
 800e130:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e136:	4611      	mov	r1, r2
 800e138:	4618      	mov	r0, r3
 800e13a:	f7ff fa35 	bl	800d5a8 <ld_clust>
 800e13e:	64f8      	str	r0, [r7, #76]	@ 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800e140:	693b      	ldr	r3, [r7, #16]
 800e142:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800e144:	2200      	movs	r2, #0
 800e146:	4618      	mov	r0, r3
 800e148:	f7ff fa4d 	bl	800d5e6 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800e14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e14e:	331c      	adds	r3, #28
 800e150:	2100      	movs	r1, #0
 800e152:	4618      	mov	r0, r3
 800e154:	f7fe fac9 	bl	800c6ea <st_dword>
					fs->wflag = 1;
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	2201      	movs	r2, #1
 800e15c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800e15e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e160:	2b00      	cmp	r3, #0
 800e162:	d037      	beq.n	800e1d4 <f_open+0x1d0>
						dw = fs->winsect;
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e168:	653b      	str	r3, [r7, #80]	@ 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800e16a:	f107 0314 	add.w	r3, r7, #20
 800e16e:	2200      	movs	r2, #0
 800e170:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800e172:	4618      	mov	r0, r3
 800e174:	f7fe ff60 	bl	800d038 <remove_chain>
 800e178:	4603      	mov	r3, r0
 800e17a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
						if (res == FR_OK) {
 800e17e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e182:	2b00      	cmp	r3, #0
 800e184:	d126      	bne.n	800e1d4 <f_open+0x1d0>
							res = move_window(fs, dw);
 800e186:	693b      	ldr	r3, [r7, #16]
 800e188:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800e18a:	4618      	mov	r0, r3
 800e18c:	f7fe fd08 	bl	800cba0 <move_window>
 800e190:	4603      	mov	r3, r0
 800e192:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800e196:	693b      	ldr	r3, [r7, #16]
 800e198:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e19a:	3a01      	subs	r2, #1
 800e19c:	60da      	str	r2, [r3, #12]
 800e19e:	e019      	b.n	800e1d4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800e1a0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	d115      	bne.n	800e1d4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800e1a8:	7ebb      	ldrb	r3, [r7, #26]
 800e1aa:	f003 0310 	and.w	r3, r3, #16
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d003      	beq.n	800e1ba <f_open+0x1b6>
					res = FR_NO_FILE;
 800e1b2:	2304      	movs	r3, #4
 800e1b4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e1b8:	e00c      	b.n	800e1d4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800e1ba:	79fb      	ldrb	r3, [r7, #7]
 800e1bc:	f003 0302 	and.w	r3, r3, #2
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d007      	beq.n	800e1d4 <f_open+0x1d0>
 800e1c4:	7ebb      	ldrb	r3, [r7, #26]
 800e1c6:	f003 0301 	and.w	r3, r3, #1
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	d002      	beq.n	800e1d4 <f_open+0x1d0>
						res = FR_DENIED;
 800e1ce:	2307      	movs	r3, #7
 800e1d0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800e1d4:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d126      	bne.n	800e22a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800e1dc:	79fb      	ldrb	r3, [r7, #7]
 800e1de:	f003 0308 	and.w	r3, r3, #8
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	d003      	beq.n	800e1ee <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800e1e6:	79fb      	ldrb	r3, [r7, #7]
 800e1e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1ec:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800e1f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800e1fc:	79fb      	ldrb	r3, [r7, #7]
 800e1fe:	2b01      	cmp	r3, #1
 800e200:	bf8c      	ite	hi
 800e202:	2301      	movhi	r3, #1
 800e204:	2300      	movls	r3, #0
 800e206:	b2db      	uxtb	r3, r3
 800e208:	461a      	mov	r2, r3
 800e20a:	f107 0314 	add.w	r3, r7, #20
 800e20e:	4611      	mov	r1, r2
 800e210:	4618      	mov	r0, r3
 800e212:	f7fe fb93 	bl	800c93c <inc_lock>
 800e216:	4602      	mov	r2, r0
 800e218:	68fb      	ldr	r3, [r7, #12]
 800e21a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800e21c:	68fb      	ldr	r3, [r7, #12]
 800e21e:	691b      	ldr	r3, [r3, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d102      	bne.n	800e22a <f_open+0x226>
 800e224:	2302      	movs	r3, #2
 800e226:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800e22a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e22e:	2b00      	cmp	r3, #0
 800e230:	f040 8095 	bne.w	800e35e <f_open+0x35a>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800e234:	693b      	ldr	r3, [r7, #16]
 800e236:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e238:	4611      	mov	r1, r2
 800e23a:	4618      	mov	r0, r3
 800e23c:	f7ff f9b4 	bl	800d5a8 <ld_clust>
 800e240:	4602      	mov	r2, r0
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800e246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e248:	331c      	adds	r3, #28
 800e24a:	4618      	mov	r0, r3
 800e24c:	f7fe fa0f 	bl	800c66e <ld_dword>
 800e250:	4602      	mov	r2, r0
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	2200      	movs	r2, #0
 800e25a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800e25c:	693a      	ldr	r2, [r7, #16]
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800e262:	693b      	ldr	r3, [r7, #16]
 800e264:	88da      	ldrh	r2, [r3, #6]
 800e266:	68fb      	ldr	r3, [r7, #12]
 800e268:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	79fa      	ldrb	r2, [r7, #7]
 800e26e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800e270:	68fb      	ldr	r3, [r7, #12]
 800e272:	2200      	movs	r2, #0
 800e274:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	2200      	movs	r2, #0
 800e27a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800e27c:	68fb      	ldr	r3, [r7, #12]
 800e27e:	2200      	movs	r2, #0
 800e280:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	3330      	adds	r3, #48	@ 0x30
 800e286:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e28a:	2100      	movs	r1, #0
 800e28c:	4618      	mov	r0, r3
 800e28e:	f7fe fa79 	bl	800c784 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800e292:	79fb      	ldrb	r3, [r7, #7]
 800e294:	f003 0320 	and.w	r3, r3, #32
 800e298:	2b00      	cmp	r3, #0
 800e29a:	d060      	beq.n	800e35e <f_open+0x35a>
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	68db      	ldr	r3, [r3, #12]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d05c      	beq.n	800e35e <f_open+0x35a>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	68da      	ldr	r2, [r3, #12]
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	895b      	ldrh	r3, [r3, #10]
 800e2b0:	025b      	lsls	r3, r3, #9
 800e2b2:	64bb      	str	r3, [r7, #72]	@ 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	689b      	ldr	r3, [r3, #8]
 800e2b8:	65bb      	str	r3, [r7, #88]	@ 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	68db      	ldr	r3, [r3, #12]
 800e2be:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2c0:	e016      	b.n	800e2f0 <f_open+0x2ec>
					clst = get_fat(&fp->obj, clst);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e2c6:	4618      	mov	r0, r3
 800e2c8:	f7fe fd25 	bl	800cd16 <get_fat>
 800e2cc:	65b8      	str	r0, [r7, #88]	@ 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800e2ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d802      	bhi.n	800e2da <f_open+0x2d6>
 800e2d4:	2302      	movs	r3, #2
 800e2d6:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800e2da:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e2dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e2e0:	d102      	bne.n	800e2e8 <f_open+0x2e4>
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800e2e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2ec:	1ad3      	subs	r3, r2, r3
 800e2ee:	657b      	str	r3, [r7, #84]	@ 0x54
 800e2f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e2f4:	2b00      	cmp	r3, #0
 800e2f6:	d103      	bne.n	800e300 <f_open+0x2fc>
 800e2f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800e2fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e2fc:	429a      	cmp	r2, r3
 800e2fe:	d8e0      	bhi.n	800e2c2 <f_open+0x2be>
				}
				fp->clust = clst;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800e304:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800e306:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d127      	bne.n	800e35e <f_open+0x35a>
 800e30e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e310:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e314:	2b00      	cmp	r3, #0
 800e316:	d022      	beq.n	800e35e <f_open+0x35a>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800e318:	693b      	ldr	r3, [r7, #16]
 800e31a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800e31c:	4618      	mov	r0, r3
 800e31e:	f7fe fcdb 	bl	800ccd8 <clust2sect>
 800e322:	6478      	str	r0, [r7, #68]	@ 0x44
 800e324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e326:	2b00      	cmp	r3, #0
 800e328:	d103      	bne.n	800e332 <f_open+0x32e>
						res = FR_INT_ERR;
 800e32a:	2302      	movs	r3, #2
 800e32c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 800e330:	e015      	b.n	800e35e <f_open+0x35a>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800e332:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e334:	0a5a      	lsrs	r2, r3, #9
 800e336:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e338:	441a      	add	r2, r3
 800e33a:	68fb      	ldr	r3, [r7, #12]
 800e33c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800e33e:	693b      	ldr	r3, [r7, #16]
 800e340:	7858      	ldrb	r0, [r3, #1]
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	6a1a      	ldr	r2, [r3, #32]
 800e34c:	2301      	movs	r3, #1
 800e34e:	f7fe f917 	bl	800c580 <disk_read>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d002      	beq.n	800e35e <f_open+0x35a>
 800e358:	2301      	movs	r3, #1
 800e35a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800e35e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800e362:	2b00      	cmp	r3, #0
 800e364:	d002      	beq.n	800e36c <f_open+0x368>
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800e36c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
}
 800e370:	4618      	mov	r0, r3
 800e372:	3760      	adds	r7, #96	@ 0x60
 800e374:	46bd      	mov	sp, r7
 800e376:	bd80      	pop	{r7, pc}

0800e378 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	b08e      	sub	sp, #56	@ 0x38
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	60f8      	str	r0, [r7, #12]
 800e380:	60b9      	str	r1, [r7, #8]
 800e382:	607a      	str	r2, [r7, #4]
 800e384:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800e386:	68bb      	ldr	r3, [r7, #8]
 800e388:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800e38a:	683b      	ldr	r3, [r7, #0]
 800e38c:	2200      	movs	r2, #0
 800e38e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	f107 0214 	add.w	r2, r7, #20
 800e396:	4611      	mov	r1, r2
 800e398:	4618      	mov	r0, r3
 800e39a:	f7ff fdb7 	bl	800df0c <validate>
 800e39e:	4603      	mov	r3, r0
 800e3a0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800e3a4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	d107      	bne.n	800e3bc <f_read+0x44>
 800e3ac:	68fb      	ldr	r3, [r7, #12]
 800e3ae:	7d5b      	ldrb	r3, [r3, #21]
 800e3b0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800e3b4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d002      	beq.n	800e3c2 <f_read+0x4a>
 800e3bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800e3c0:	e115      	b.n	800e5ee <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	7d1b      	ldrb	r3, [r3, #20]
 800e3c6:	f003 0301 	and.w	r3, r3, #1
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d101      	bne.n	800e3d2 <f_read+0x5a>
 800e3ce:	2307      	movs	r3, #7
 800e3d0:	e10d      	b.n	800e5ee <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	68da      	ldr	r2, [r3, #12]
 800e3d6:	68fb      	ldr	r3, [r7, #12]
 800e3d8:	699b      	ldr	r3, [r3, #24]
 800e3da:	1ad3      	subs	r3, r2, r3
 800e3dc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800e3de:	687a      	ldr	r2, [r7, #4]
 800e3e0:	6a3b      	ldr	r3, [r7, #32]
 800e3e2:	429a      	cmp	r2, r3
 800e3e4:	f240 80fe 	bls.w	800e5e4 <f_read+0x26c>
 800e3e8:	6a3b      	ldr	r3, [r7, #32]
 800e3ea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800e3ec:	e0fa      	b.n	800e5e4 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800e3ee:	68fb      	ldr	r3, [r7, #12]
 800e3f0:	699b      	ldr	r3, [r3, #24]
 800e3f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	f040 80c6 	bne.w	800e588 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	699b      	ldr	r3, [r3, #24]
 800e400:	0a5b      	lsrs	r3, r3, #9
 800e402:	697a      	ldr	r2, [r7, #20]
 800e404:	8952      	ldrh	r2, [r2, #10]
 800e406:	3a01      	subs	r2, #1
 800e408:	4013      	ands	r3, r2
 800e40a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800e40c:	69fb      	ldr	r3, [r7, #28]
 800e40e:	2b00      	cmp	r3, #0
 800e410:	d12f      	bne.n	800e472 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	699b      	ldr	r3, [r3, #24]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d103      	bne.n	800e422 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	689b      	ldr	r3, [r3, #8]
 800e41e:	633b      	str	r3, [r7, #48]	@ 0x30
 800e420:	e013      	b.n	800e44a <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800e422:	68fb      	ldr	r3, [r7, #12]
 800e424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e426:	2b00      	cmp	r3, #0
 800e428:	d007      	beq.n	800e43a <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	699b      	ldr	r3, [r3, #24]
 800e42e:	4619      	mov	r1, r3
 800e430:	68f8      	ldr	r0, [r7, #12]
 800e432:	f7fe fefe 	bl	800d232 <clmt_clust>
 800e436:	6338      	str	r0, [r7, #48]	@ 0x30
 800e438:	e007      	b.n	800e44a <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800e43a:	68fa      	ldr	r2, [r7, #12]
 800e43c:	68fb      	ldr	r3, [r7, #12]
 800e43e:	69db      	ldr	r3, [r3, #28]
 800e440:	4619      	mov	r1, r3
 800e442:	4610      	mov	r0, r2
 800e444:	f7fe fc67 	bl	800cd16 <get_fat>
 800e448:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800e44a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e44c:	2b01      	cmp	r3, #1
 800e44e:	d804      	bhi.n	800e45a <f_read+0xe2>
 800e450:	68fb      	ldr	r3, [r7, #12]
 800e452:	2202      	movs	r2, #2
 800e454:	755a      	strb	r2, [r3, #21]
 800e456:	2302      	movs	r3, #2
 800e458:	e0c9      	b.n	800e5ee <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800e45a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e45c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e460:	d104      	bne.n	800e46c <f_read+0xf4>
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2201      	movs	r2, #1
 800e466:	755a      	strb	r2, [r3, #21]
 800e468:	2301      	movs	r3, #1
 800e46a:	e0c0      	b.n	800e5ee <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800e470:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800e472:	697a      	ldr	r2, [r7, #20]
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	69db      	ldr	r3, [r3, #28]
 800e478:	4619      	mov	r1, r3
 800e47a:	4610      	mov	r0, r2
 800e47c:	f7fe fc2c 	bl	800ccd8 <clust2sect>
 800e480:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	2b00      	cmp	r3, #0
 800e486:	d104      	bne.n	800e492 <f_read+0x11a>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	2202      	movs	r2, #2
 800e48c:	755a      	strb	r2, [r3, #21]
 800e48e:	2302      	movs	r3, #2
 800e490:	e0ad      	b.n	800e5ee <f_read+0x276>
			sect += csect;
 800e492:	69ba      	ldr	r2, [r7, #24]
 800e494:	69fb      	ldr	r3, [r7, #28]
 800e496:	4413      	add	r3, r2
 800e498:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	0a5b      	lsrs	r3, r3, #9
 800e49e:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800e4a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d039      	beq.n	800e51a <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800e4a6:	69fa      	ldr	r2, [r7, #28]
 800e4a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4aa:	4413      	add	r3, r2
 800e4ac:	697a      	ldr	r2, [r7, #20]
 800e4ae:	8952      	ldrh	r2, [r2, #10]
 800e4b0:	4293      	cmp	r3, r2
 800e4b2:	d905      	bls.n	800e4c0 <f_read+0x148>
					cc = fs->csize - csect;
 800e4b4:	697b      	ldr	r3, [r7, #20]
 800e4b6:	895b      	ldrh	r3, [r3, #10]
 800e4b8:	461a      	mov	r2, r3
 800e4ba:	69fb      	ldr	r3, [r7, #28]
 800e4bc:	1ad3      	subs	r3, r2, r3
 800e4be:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e4c0:	697b      	ldr	r3, [r7, #20]
 800e4c2:	7858      	ldrb	r0, [r3, #1]
 800e4c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4c6:	69ba      	ldr	r2, [r7, #24]
 800e4c8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800e4ca:	f7fe f859 	bl	800c580 <disk_read>
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d004      	beq.n	800e4de <f_read+0x166>
 800e4d4:	68fb      	ldr	r3, [r7, #12]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	755a      	strb	r2, [r3, #21]
 800e4da:	2301      	movs	r3, #1
 800e4dc:	e087      	b.n	800e5ee <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800e4de:	68fb      	ldr	r3, [r7, #12]
 800e4e0:	7d1b      	ldrb	r3, [r3, #20]
 800e4e2:	b25b      	sxtb	r3, r3
 800e4e4:	2b00      	cmp	r3, #0
 800e4e6:	da14      	bge.n	800e512 <f_read+0x19a>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	6a1a      	ldr	r2, [r3, #32]
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	1ad3      	subs	r3, r2, r3
 800e4f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e4f2:	429a      	cmp	r2, r3
 800e4f4:	d90d      	bls.n	800e512 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800e4f6:	68fb      	ldr	r3, [r7, #12]
 800e4f8:	6a1a      	ldr	r2, [r3, #32]
 800e4fa:	69bb      	ldr	r3, [r7, #24]
 800e4fc:	1ad3      	subs	r3, r2, r3
 800e4fe:	025b      	lsls	r3, r3, #9
 800e500:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e502:	18d0      	adds	r0, r2, r3
 800e504:	68fb      	ldr	r3, [r7, #12]
 800e506:	3330      	adds	r3, #48	@ 0x30
 800e508:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e50c:	4619      	mov	r1, r3
 800e50e:	f7fe f918 	bl	800c742 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800e512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e514:	025b      	lsls	r3, r3, #9
 800e516:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800e518:	e050      	b.n	800e5bc <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	6a1b      	ldr	r3, [r3, #32]
 800e51e:	69ba      	ldr	r2, [r7, #24]
 800e520:	429a      	cmp	r2, r3
 800e522:	d02e      	beq.n	800e582 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800e524:	68fb      	ldr	r3, [r7, #12]
 800e526:	7d1b      	ldrb	r3, [r3, #20]
 800e528:	b25b      	sxtb	r3, r3
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	da18      	bge.n	800e560 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800e52e:	697b      	ldr	r3, [r7, #20]
 800e530:	7858      	ldrb	r0, [r3, #1]
 800e532:	68fb      	ldr	r3, [r7, #12]
 800e534:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e538:	68fb      	ldr	r3, [r7, #12]
 800e53a:	6a1a      	ldr	r2, [r3, #32]
 800e53c:	2301      	movs	r3, #1
 800e53e:	f7fe f83f 	bl	800c5c0 <disk_write>
 800e542:	4603      	mov	r3, r0
 800e544:	2b00      	cmp	r3, #0
 800e546:	d004      	beq.n	800e552 <f_read+0x1da>
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2201      	movs	r2, #1
 800e54c:	755a      	strb	r2, [r3, #21]
 800e54e:	2301      	movs	r3, #1
 800e550:	e04d      	b.n	800e5ee <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800e552:	68fb      	ldr	r3, [r7, #12]
 800e554:	7d1b      	ldrb	r3, [r3, #20]
 800e556:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e55a:	b2da      	uxtb	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800e560:	697b      	ldr	r3, [r7, #20]
 800e562:	7858      	ldrb	r0, [r3, #1]
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e56a:	2301      	movs	r3, #1
 800e56c:	69ba      	ldr	r2, [r7, #24]
 800e56e:	f7fe f807 	bl	800c580 <disk_read>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d004      	beq.n	800e582 <f_read+0x20a>
 800e578:	68fb      	ldr	r3, [r7, #12]
 800e57a:	2201      	movs	r2, #1
 800e57c:	755a      	strb	r2, [r3, #21]
 800e57e:	2301      	movs	r3, #1
 800e580:	e035      	b.n	800e5ee <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800e582:	68fb      	ldr	r3, [r7, #12]
 800e584:	69ba      	ldr	r2, [r7, #24]
 800e586:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800e588:	68fb      	ldr	r3, [r7, #12]
 800e58a:	699b      	ldr	r3, [r3, #24]
 800e58c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e590:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 800e594:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800e596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	429a      	cmp	r2, r3
 800e59c:	d901      	bls.n	800e5a2 <f_read+0x22a>
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800e5a2:	68fb      	ldr	r3, [r7, #12]
 800e5a4:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 800e5a8:	68fb      	ldr	r3, [r7, #12]
 800e5aa:	699b      	ldr	r3, [r3, #24]
 800e5ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e5b0:	4413      	add	r3, r2
 800e5b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e5b4:	4619      	mov	r1, r3
 800e5b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800e5b8:	f7fe f8c3 	bl	800c742 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800e5bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e5be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5c0:	4413      	add	r3, r2
 800e5c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800e5c4:	68fb      	ldr	r3, [r7, #12]
 800e5c6:	699a      	ldr	r2, [r3, #24]
 800e5c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5ca:	441a      	add	r2, r3
 800e5cc:	68fb      	ldr	r3, [r7, #12]
 800e5ce:	619a      	str	r2, [r3, #24]
 800e5d0:	683b      	ldr	r3, [r7, #0]
 800e5d2:	681a      	ldr	r2, [r3, #0]
 800e5d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5d6:	441a      	add	r2, r3
 800e5d8:	683b      	ldr	r3, [r7, #0]
 800e5da:	601a      	str	r2, [r3, #0]
 800e5dc:	687a      	ldr	r2, [r7, #4]
 800e5de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	f47f af01 	bne.w	800e3ee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800e5ec:	2300      	movs	r3, #0
}
 800e5ee:	4618      	mov	r0, r3
 800e5f0:	3738      	adds	r7, #56	@ 0x38
 800e5f2:	46bd      	mov	sp, r7
 800e5f4:	bd80      	pop	{r7, pc}

0800e5f6 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800e5f6:	b580      	push	{r7, lr}
 800e5f8:	b086      	sub	sp, #24
 800e5fa:	af00      	add	r7, sp, #0
 800e5fc:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	f107 0208 	add.w	r2, r7, #8
 800e604:	4611      	mov	r1, r2
 800e606:	4618      	mov	r0, r3
 800e608:	f7ff fc80 	bl	800df0c <validate>
 800e60c:	4603      	mov	r3, r0
 800e60e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800e610:	7dfb      	ldrb	r3, [r7, #23]
 800e612:	2b00      	cmp	r3, #0
 800e614:	d168      	bne.n	800e6e8 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	7d1b      	ldrb	r3, [r3, #20]
 800e61a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d062      	beq.n	800e6e8 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800e622:	687b      	ldr	r3, [r7, #4]
 800e624:	7d1b      	ldrb	r3, [r3, #20]
 800e626:	b25b      	sxtb	r3, r3
 800e628:	2b00      	cmp	r3, #0
 800e62a:	da15      	bge.n	800e658 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800e62c:	68bb      	ldr	r3, [r7, #8]
 800e62e:	7858      	ldrb	r0, [r3, #1]
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	6a1a      	ldr	r2, [r3, #32]
 800e63a:	2301      	movs	r3, #1
 800e63c:	f7fd ffc0 	bl	800c5c0 <disk_write>
 800e640:	4603      	mov	r3, r0
 800e642:	2b00      	cmp	r3, #0
 800e644:	d001      	beq.n	800e64a <f_sync+0x54>
 800e646:	2301      	movs	r3, #1
 800e648:	e04f      	b.n	800e6ea <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	7d1b      	ldrb	r3, [r3, #20]
 800e64e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e652:	b2da      	uxtb	r2, r3
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800e658:	f7fb ff20 	bl	800a49c <get_fattime>
 800e65c:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800e65e:	68ba      	ldr	r2, [r7, #8]
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e664:	4619      	mov	r1, r3
 800e666:	4610      	mov	r0, r2
 800e668:	f7fe fa9a 	bl	800cba0 <move_window>
 800e66c:	4603      	mov	r3, r0
 800e66e:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800e670:	7dfb      	ldrb	r3, [r7, #23]
 800e672:	2b00      	cmp	r3, #0
 800e674:	d138      	bne.n	800e6e8 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800e676:	687b      	ldr	r3, [r7, #4]
 800e678:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e67a:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800e67c:	68fb      	ldr	r3, [r7, #12]
 800e67e:	330b      	adds	r3, #11
 800e680:	781a      	ldrb	r2, [r3, #0]
 800e682:	68fb      	ldr	r3, [r7, #12]
 800e684:	330b      	adds	r3, #11
 800e686:	f042 0220 	orr.w	r2, r2, #32
 800e68a:	b2d2      	uxtb	r2, r2
 800e68c:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	6818      	ldr	r0, [r3, #0]
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	689b      	ldr	r3, [r3, #8]
 800e696:	461a      	mov	r2, r3
 800e698:	68f9      	ldr	r1, [r7, #12]
 800e69a:	f7fe ffa4 	bl	800d5e6 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f103 021c 	add.w	r2, r3, #28
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	68db      	ldr	r3, [r3, #12]
 800e6a8:	4619      	mov	r1, r3
 800e6aa:	4610      	mov	r0, r2
 800e6ac:	f7fe f81d 	bl	800c6ea <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800e6b0:	68fb      	ldr	r3, [r7, #12]
 800e6b2:	3316      	adds	r3, #22
 800e6b4:	6939      	ldr	r1, [r7, #16]
 800e6b6:	4618      	mov	r0, r3
 800e6b8:	f7fe f817 	bl	800c6ea <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800e6bc:	68fb      	ldr	r3, [r7, #12]
 800e6be:	3312      	adds	r3, #18
 800e6c0:	2100      	movs	r1, #0
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	f7fd fff6 	bl	800c6b4 <st_word>
					fs->wflag = 1;
 800e6c8:	68bb      	ldr	r3, [r7, #8]
 800e6ca:	2201      	movs	r2, #1
 800e6cc:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	4618      	mov	r0, r3
 800e6d2:	f7fe fa93 	bl	800cbfc <sync_fs>
 800e6d6:	4603      	mov	r3, r0
 800e6d8:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	7d1b      	ldrb	r3, [r3, #20]
 800e6de:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800e6e2:	b2da      	uxtb	r2, r3
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800e6e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800e6ea:	4618      	mov	r0, r3
 800e6ec:	3718      	adds	r7, #24
 800e6ee:	46bd      	mov	sp, r7
 800e6f0:	bd80      	pop	{r7, pc}

0800e6f2 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800e6f2:	b580      	push	{r7, lr}
 800e6f4:	b084      	sub	sp, #16
 800e6f6:	af00      	add	r7, sp, #0
 800e6f8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800e6fa:	6878      	ldr	r0, [r7, #4]
 800e6fc:	f7ff ff7b 	bl	800e5f6 <f_sync>
 800e700:	4603      	mov	r3, r0
 800e702:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800e704:	7bfb      	ldrb	r3, [r7, #15]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d118      	bne.n	800e73c <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800e70a:	687b      	ldr	r3, [r7, #4]
 800e70c:	f107 0208 	add.w	r2, r7, #8
 800e710:	4611      	mov	r1, r2
 800e712:	4618      	mov	r0, r3
 800e714:	f7ff fbfa 	bl	800df0c <validate>
 800e718:	4603      	mov	r3, r0
 800e71a:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800e71c:	7bfb      	ldrb	r3, [r7, #15]
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d10c      	bne.n	800e73c <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	691b      	ldr	r3, [r3, #16]
 800e726:	4618      	mov	r0, r3
 800e728:	f7fe f996 	bl	800ca58 <dec_lock>
 800e72c:	4603      	mov	r3, r0
 800e72e:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800e730:	7bfb      	ldrb	r3, [r7, #15]
 800e732:	2b00      	cmp	r3, #0
 800e734:	d102      	bne.n	800e73c <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800e736:	687b      	ldr	r3, [r7, #4]
 800e738:	2200      	movs	r2, #0
 800e73a:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800e73c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e73e:	4618      	mov	r0, r3
 800e740:	3710      	adds	r7, #16
 800e742:	46bd      	mov	sp, r7
 800e744:	bd80      	pop	{r7, pc}
	...

0800e748 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800e748:	b480      	push	{r7}
 800e74a:	b087      	sub	sp, #28
 800e74c:	af00      	add	r7, sp, #0
 800e74e:	60f8      	str	r0, [r7, #12]
 800e750:	60b9      	str	r1, [r7, #8]
 800e752:	4613      	mov	r3, r2
 800e754:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800e756:	2301      	movs	r3, #1
 800e758:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800e75a:	2300      	movs	r3, #0
 800e75c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800e75e:	4b1f      	ldr	r3, [pc, #124]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e760:	7a5b      	ldrb	r3, [r3, #9]
 800e762:	b2db      	uxtb	r3, r3
 800e764:	2b00      	cmp	r3, #0
 800e766:	d131      	bne.n	800e7cc <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800e768:	4b1c      	ldr	r3, [pc, #112]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e76a:	7a5b      	ldrb	r3, [r3, #9]
 800e76c:	b2db      	uxtb	r3, r3
 800e76e:	461a      	mov	r2, r3
 800e770:	4b1a      	ldr	r3, [pc, #104]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e772:	2100      	movs	r1, #0
 800e774:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800e776:	4b19      	ldr	r3, [pc, #100]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e778:	7a5b      	ldrb	r3, [r3, #9]
 800e77a:	b2db      	uxtb	r3, r3
 800e77c:	4a17      	ldr	r2, [pc, #92]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	4413      	add	r3, r2
 800e782:	68fa      	ldr	r2, [r7, #12]
 800e784:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800e786:	4b15      	ldr	r3, [pc, #84]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e788:	7a5b      	ldrb	r3, [r3, #9]
 800e78a:	b2db      	uxtb	r3, r3
 800e78c:	461a      	mov	r2, r3
 800e78e:	4b13      	ldr	r3, [pc, #76]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e790:	4413      	add	r3, r2
 800e792:	79fa      	ldrb	r2, [r7, #7]
 800e794:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800e796:	4b11      	ldr	r3, [pc, #68]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e798:	7a5b      	ldrb	r3, [r3, #9]
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	1c5a      	adds	r2, r3, #1
 800e79e:	b2d1      	uxtb	r1, r2
 800e7a0:	4a0e      	ldr	r2, [pc, #56]	@ (800e7dc <FATFS_LinkDriverEx+0x94>)
 800e7a2:	7251      	strb	r1, [r2, #9]
 800e7a4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800e7a6:	7dbb      	ldrb	r3, [r7, #22]
 800e7a8:	3330      	adds	r3, #48	@ 0x30
 800e7aa:	b2da      	uxtb	r2, r3
 800e7ac:	68bb      	ldr	r3, [r7, #8]
 800e7ae:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	3301      	adds	r3, #1
 800e7b4:	223a      	movs	r2, #58	@ 0x3a
 800e7b6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	3302      	adds	r3, #2
 800e7bc:	222f      	movs	r2, #47	@ 0x2f
 800e7be:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	3303      	adds	r3, #3
 800e7c4:	2200      	movs	r2, #0
 800e7c6:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800e7c8:	2300      	movs	r3, #0
 800e7ca:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800e7cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800e7ce:	4618      	mov	r0, r3
 800e7d0:	371c      	adds	r7, #28
 800e7d2:	46bd      	mov	sp, r7
 800e7d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7d8:	4770      	bx	lr
 800e7da:	bf00      	nop
 800e7dc:	20000420 	.word	0x20000420

0800e7e0 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800e7e0:	b580      	push	{r7, lr}
 800e7e2:	b082      	sub	sp, #8
 800e7e4:	af00      	add	r7, sp, #0
 800e7e6:	6078      	str	r0, [r7, #4]
 800e7e8:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	6839      	ldr	r1, [r7, #0]
 800e7ee:	6878      	ldr	r0, [r7, #4]
 800e7f0:	f7ff ffaa 	bl	800e748 <FATFS_LinkDriverEx>
 800e7f4:	4603      	mov	r3, r0
}
 800e7f6:	4618      	mov	r0, r3
 800e7f8:	3708      	adds	r7, #8
 800e7fa:	46bd      	mov	sp, r7
 800e7fc:	bd80      	pop	{r7, pc}
	...

0800e800 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800e800:	b580      	push	{r7, lr}
 800e802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800e804:	2200      	movs	r2, #0
 800e806:	4912      	ldr	r1, [pc, #72]	@ (800e850 <MX_USB_DEVICE_Init+0x50>)
 800e808:	4812      	ldr	r0, [pc, #72]	@ (800e854 <MX_USB_DEVICE_Init+0x54>)
 800e80a:	f7fc fb75 	bl	800aef8 <USBD_Init>
 800e80e:	4603      	mov	r3, r0
 800e810:	2b00      	cmp	r3, #0
 800e812:	d001      	beq.n	800e818 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800e814:	f7f2 ff6a 	bl	80016ec <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800e818:	490f      	ldr	r1, [pc, #60]	@ (800e858 <MX_USB_DEVICE_Init+0x58>)
 800e81a:	480e      	ldr	r0, [pc, #56]	@ (800e854 <MX_USB_DEVICE_Init+0x54>)
 800e81c:	f7fc fb9c 	bl	800af58 <USBD_RegisterClass>
 800e820:	4603      	mov	r3, r0
 800e822:	2b00      	cmp	r3, #0
 800e824:	d001      	beq.n	800e82a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800e826:	f7f2 ff61 	bl	80016ec <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800e82a:	490c      	ldr	r1, [pc, #48]	@ (800e85c <MX_USB_DEVICE_Init+0x5c>)
 800e82c:	4809      	ldr	r0, [pc, #36]	@ (800e854 <MX_USB_DEVICE_Init+0x54>)
 800e82e:	f7fc fa93 	bl	800ad58 <USBD_CDC_RegisterInterface>
 800e832:	4603      	mov	r3, r0
 800e834:	2b00      	cmp	r3, #0
 800e836:	d001      	beq.n	800e83c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800e838:	f7f2 ff58 	bl	80016ec <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800e83c:	4805      	ldr	r0, [pc, #20]	@ (800e854 <MX_USB_DEVICE_Init+0x54>)
 800e83e:	f7fc fbc1 	bl	800afc4 <USBD_Start>
 800e842:	4603      	mov	r3, r0
 800e844:	2b00      	cmp	r3, #0
 800e846:	d001      	beq.n	800e84c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800e848:	f7f2 ff50 	bl	80016ec <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800e84c:	bf00      	nop
 800e84e:	bd80      	pop	{r7, pc}
 800e850:	200000e4 	.word	0x200000e4
 800e854:	2000042c 	.word	0x2000042c
 800e858:	20000050 	.word	0x20000050
 800e85c:	200000d0 	.word	0x200000d0

0800e860 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800e864:	2200      	movs	r2, #0
 800e866:	4905      	ldr	r1, [pc, #20]	@ (800e87c <CDC_Init_FS+0x1c>)
 800e868:	4805      	ldr	r0, [pc, #20]	@ (800e880 <CDC_Init_FS+0x20>)
 800e86a:	f7fc fa8f 	bl	800ad8c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800e86e:	4905      	ldr	r1, [pc, #20]	@ (800e884 <CDC_Init_FS+0x24>)
 800e870:	4803      	ldr	r0, [pc, #12]	@ (800e880 <CDC_Init_FS+0x20>)
 800e872:	f7fc faad 	bl	800add0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800e876:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800e878:	4618      	mov	r0, r3
 800e87a:	bd80      	pop	{r7, pc}
 800e87c:	20000b08 	.word	0x20000b08
 800e880:	2000042c 	.word	0x2000042c
 800e884:	20000708 	.word	0x20000708

0800e888 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800e888:	b480      	push	{r7}
 800e88a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800e88c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800e88e:	4618      	mov	r0, r3
 800e890:	46bd      	mov	sp, r7
 800e892:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e896:	4770      	bx	lr

0800e898 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800e898:	b480      	push	{r7}
 800e89a:	b083      	sub	sp, #12
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	4603      	mov	r3, r0
 800e8a0:	6039      	str	r1, [r7, #0]
 800e8a2:	71fb      	strb	r3, [r7, #7]
 800e8a4:	4613      	mov	r3, r2
 800e8a6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800e8a8:	79fb      	ldrb	r3, [r7, #7]
 800e8aa:	2b23      	cmp	r3, #35	@ 0x23
 800e8ac:	d84a      	bhi.n	800e944 <CDC_Control_FS+0xac>
 800e8ae:	a201      	add	r2, pc, #4	@ (adr r2, 800e8b4 <CDC_Control_FS+0x1c>)
 800e8b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8b4:	0800e945 	.word	0x0800e945
 800e8b8:	0800e945 	.word	0x0800e945
 800e8bc:	0800e945 	.word	0x0800e945
 800e8c0:	0800e945 	.word	0x0800e945
 800e8c4:	0800e945 	.word	0x0800e945
 800e8c8:	0800e945 	.word	0x0800e945
 800e8cc:	0800e945 	.word	0x0800e945
 800e8d0:	0800e945 	.word	0x0800e945
 800e8d4:	0800e945 	.word	0x0800e945
 800e8d8:	0800e945 	.word	0x0800e945
 800e8dc:	0800e945 	.word	0x0800e945
 800e8e0:	0800e945 	.word	0x0800e945
 800e8e4:	0800e945 	.word	0x0800e945
 800e8e8:	0800e945 	.word	0x0800e945
 800e8ec:	0800e945 	.word	0x0800e945
 800e8f0:	0800e945 	.word	0x0800e945
 800e8f4:	0800e945 	.word	0x0800e945
 800e8f8:	0800e945 	.word	0x0800e945
 800e8fc:	0800e945 	.word	0x0800e945
 800e900:	0800e945 	.word	0x0800e945
 800e904:	0800e945 	.word	0x0800e945
 800e908:	0800e945 	.word	0x0800e945
 800e90c:	0800e945 	.word	0x0800e945
 800e910:	0800e945 	.word	0x0800e945
 800e914:	0800e945 	.word	0x0800e945
 800e918:	0800e945 	.word	0x0800e945
 800e91c:	0800e945 	.word	0x0800e945
 800e920:	0800e945 	.word	0x0800e945
 800e924:	0800e945 	.word	0x0800e945
 800e928:	0800e945 	.word	0x0800e945
 800e92c:	0800e945 	.word	0x0800e945
 800e930:	0800e945 	.word	0x0800e945
 800e934:	0800e945 	.word	0x0800e945
 800e938:	0800e945 	.word	0x0800e945
 800e93c:	0800e945 	.word	0x0800e945
 800e940:	0800e945 	.word	0x0800e945
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800e944:	bf00      	nop
  }

  return (USBD_OK);
 800e946:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800e948:	4618      	mov	r0, r3
 800e94a:	370c      	adds	r7, #12
 800e94c:	46bd      	mov	sp, r7
 800e94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e952:	4770      	bx	lr

0800e954 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800e954:	b580      	push	{r7, lr}
 800e956:	b082      	sub	sp, #8
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
 800e95c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800e95e:	6879      	ldr	r1, [r7, #4]
 800e960:	4805      	ldr	r0, [pc, #20]	@ (800e978 <CDC_Receive_FS+0x24>)
 800e962:	f7fc fa35 	bl	800add0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800e966:	4804      	ldr	r0, [pc, #16]	@ (800e978 <CDC_Receive_FS+0x24>)
 800e968:	f7fc fa90 	bl	800ae8c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800e96c:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800e96e:	4618      	mov	r0, r3
 800e970:	3708      	adds	r7, #8
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	2000042c 	.word	0x2000042c

0800e97c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800e97c:	b580      	push	{r7, lr}
 800e97e:	b084      	sub	sp, #16
 800e980:	af00      	add	r7, sp, #0
 800e982:	6078      	str	r0, [r7, #4]
 800e984:	460b      	mov	r3, r1
 800e986:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800e988:	2300      	movs	r3, #0
 800e98a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800e98c:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c4 <CDC_Transmit_FS+0x48>)
 800e98e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800e992:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800e994:	68bb      	ldr	r3, [r7, #8]
 800e996:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d001      	beq.n	800e9a2 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800e99e:	2301      	movs	r3, #1
 800e9a0:	e00b      	b.n	800e9ba <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800e9a2:	887b      	ldrh	r3, [r7, #2]
 800e9a4:	461a      	mov	r2, r3
 800e9a6:	6879      	ldr	r1, [r7, #4]
 800e9a8:	4806      	ldr	r0, [pc, #24]	@ (800e9c4 <CDC_Transmit_FS+0x48>)
 800e9aa:	f7fc f9ef 	bl	800ad8c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800e9ae:	4805      	ldr	r0, [pc, #20]	@ (800e9c4 <CDC_Transmit_FS+0x48>)
 800e9b0:	f7fc fa2c 	bl	800ae0c <USBD_CDC_TransmitPacket>
 800e9b4:	4603      	mov	r3, r0
 800e9b6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800e9b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	3710      	adds	r7, #16
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}
 800e9c2:	bf00      	nop
 800e9c4:	2000042c 	.word	0x2000042c

0800e9c8 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800e9c8:	b480      	push	{r7}
 800e9ca:	b087      	sub	sp, #28
 800e9cc:	af00      	add	r7, sp, #0
 800e9ce:	60f8      	str	r0, [r7, #12]
 800e9d0:	60b9      	str	r1, [r7, #8]
 800e9d2:	4613      	mov	r3, r2
 800e9d4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800e9da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	371c      	adds	r7, #28
 800e9e2:	46bd      	mov	sp, r7
 800e9e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e8:	4770      	bx	lr
	...

0800e9ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800e9ec:	b480      	push	{r7}
 800e9ee:	b083      	sub	sp, #12
 800e9f0:	af00      	add	r7, sp, #0
 800e9f2:	4603      	mov	r3, r0
 800e9f4:	6039      	str	r1, [r7, #0]
 800e9f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800e9f8:	683b      	ldr	r3, [r7, #0]
 800e9fa:	2212      	movs	r2, #18
 800e9fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800e9fe:	4b03      	ldr	r3, [pc, #12]	@ (800ea0c <USBD_FS_DeviceDescriptor+0x20>)
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	370c      	adds	r7, #12
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr
 800ea0c:	20000100 	.word	0x20000100

0800ea10 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea10:	b480      	push	{r7}
 800ea12:	b083      	sub	sp, #12
 800ea14:	af00      	add	r7, sp, #0
 800ea16:	4603      	mov	r3, r0
 800ea18:	6039      	str	r1, [r7, #0]
 800ea1a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ea1c:	683b      	ldr	r3, [r7, #0]
 800ea1e:	2204      	movs	r2, #4
 800ea20:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ea22:	4b03      	ldr	r3, [pc, #12]	@ (800ea30 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ea24:	4618      	mov	r0, r3
 800ea26:	370c      	adds	r7, #12
 800ea28:	46bd      	mov	sp, r7
 800ea2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2e:	4770      	bx	lr
 800ea30:	20000114 	.word	0x20000114

0800ea34 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea34:	b580      	push	{r7, lr}
 800ea36:	b082      	sub	sp, #8
 800ea38:	af00      	add	r7, sp, #0
 800ea3a:	4603      	mov	r3, r0
 800ea3c:	6039      	str	r1, [r7, #0]
 800ea3e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ea40:	79fb      	ldrb	r3, [r7, #7]
 800ea42:	2b00      	cmp	r3, #0
 800ea44:	d105      	bne.n	800ea52 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea46:	683a      	ldr	r2, [r7, #0]
 800ea48:	4907      	ldr	r1, [pc, #28]	@ (800ea68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea4a:	4808      	ldr	r0, [pc, #32]	@ (800ea6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ea4c:	f7fd fc6a 	bl	800c324 <USBD_GetString>
 800ea50:	e004      	b.n	800ea5c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ea52:	683a      	ldr	r2, [r7, #0]
 800ea54:	4904      	ldr	r1, [pc, #16]	@ (800ea68 <USBD_FS_ProductStrDescriptor+0x34>)
 800ea56:	4805      	ldr	r0, [pc, #20]	@ (800ea6c <USBD_FS_ProductStrDescriptor+0x38>)
 800ea58:	f7fd fc64 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ea5c:	4b02      	ldr	r3, [pc, #8]	@ (800ea68 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3708      	adds	r7, #8
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	20000f08 	.word	0x20000f08
 800ea6c:	0800ffa8 	.word	0x0800ffa8

0800ea70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea70:	b580      	push	{r7, lr}
 800ea72:	b082      	sub	sp, #8
 800ea74:	af00      	add	r7, sp, #0
 800ea76:	4603      	mov	r3, r0
 800ea78:	6039      	str	r1, [r7, #0]
 800ea7a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ea7c:	683a      	ldr	r2, [r7, #0]
 800ea7e:	4904      	ldr	r1, [pc, #16]	@ (800ea90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ea80:	4804      	ldr	r0, [pc, #16]	@ (800ea94 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ea82:	f7fd fc4f 	bl	800c324 <USBD_GetString>
  return USBD_StrDesc;
 800ea86:	4b02      	ldr	r3, [pc, #8]	@ (800ea90 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ea88:	4618      	mov	r0, r3
 800ea8a:	3708      	adds	r7, #8
 800ea8c:	46bd      	mov	sp, r7
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	20000f08 	.word	0x20000f08
 800ea94:	0800ffc0 	.word	0x0800ffc0

0800ea98 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ea98:	b580      	push	{r7, lr}
 800ea9a:	b082      	sub	sp, #8
 800ea9c:	af00      	add	r7, sp, #0
 800ea9e:	4603      	mov	r3, r0
 800eaa0:	6039      	str	r1, [r7, #0]
 800eaa2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800eaa4:	683b      	ldr	r3, [r7, #0]
 800eaa6:	221a      	movs	r2, #26
 800eaa8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800eaaa:	f000 f843 	bl	800eb34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800eaae:	4b02      	ldr	r3, [pc, #8]	@ (800eab8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800eab0:	4618      	mov	r0, r3
 800eab2:	3708      	adds	r7, #8
 800eab4:	46bd      	mov	sp, r7
 800eab6:	bd80      	pop	{r7, pc}
 800eab8:	20000118 	.word	0x20000118

0800eabc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eabc:	b580      	push	{r7, lr}
 800eabe:	b082      	sub	sp, #8
 800eac0:	af00      	add	r7, sp, #0
 800eac2:	4603      	mov	r3, r0
 800eac4:	6039      	str	r1, [r7, #0]
 800eac6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800eac8:	79fb      	ldrb	r3, [r7, #7]
 800eaca:	2b00      	cmp	r3, #0
 800eacc:	d105      	bne.n	800eada <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eace:	683a      	ldr	r2, [r7, #0]
 800ead0:	4907      	ldr	r1, [pc, #28]	@ (800eaf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ead2:	4808      	ldr	r0, [pc, #32]	@ (800eaf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ead4:	f7fd fc26 	bl	800c324 <USBD_GetString>
 800ead8:	e004      	b.n	800eae4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800eada:	683a      	ldr	r2, [r7, #0]
 800eadc:	4904      	ldr	r1, [pc, #16]	@ (800eaf0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800eade:	4805      	ldr	r0, [pc, #20]	@ (800eaf4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800eae0:	f7fd fc20 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eae4:	4b02      	ldr	r3, [pc, #8]	@ (800eaf0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800eae6:	4618      	mov	r0, r3
 800eae8:	3708      	adds	r7, #8
 800eaea:	46bd      	mov	sp, r7
 800eaec:	bd80      	pop	{r7, pc}
 800eaee:	bf00      	nop
 800eaf0:	20000f08 	.word	0x20000f08
 800eaf4:	0800ffd4 	.word	0x0800ffd4

0800eaf8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	4603      	mov	r3, r0
 800eb00:	6039      	str	r1, [r7, #0]
 800eb02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800eb04:	79fb      	ldrb	r3, [r7, #7]
 800eb06:	2b00      	cmp	r3, #0
 800eb08:	d105      	bne.n	800eb16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb0a:	683a      	ldr	r2, [r7, #0]
 800eb0c:	4907      	ldr	r1, [pc, #28]	@ (800eb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb0e:	4808      	ldr	r0, [pc, #32]	@ (800eb30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb10:	f7fd fc08 	bl	800c324 <USBD_GetString>
 800eb14:	e004      	b.n	800eb20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	4904      	ldr	r1, [pc, #16]	@ (800eb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800eb1a:	4805      	ldr	r0, [pc, #20]	@ (800eb30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800eb1c:	f7fd fc02 	bl	800c324 <USBD_GetString>
  }
  return USBD_StrDesc;
 800eb20:	4b02      	ldr	r3, [pc, #8]	@ (800eb2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800eb22:	4618      	mov	r0, r3
 800eb24:	3708      	adds	r7, #8
 800eb26:	46bd      	mov	sp, r7
 800eb28:	bd80      	pop	{r7, pc}
 800eb2a:	bf00      	nop
 800eb2c:	20000f08 	.word	0x20000f08
 800eb30:	0800ffe0 	.word	0x0800ffe0

0800eb34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800eb34:	b580      	push	{r7, lr}
 800eb36:	b084      	sub	sp, #16
 800eb38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800eb3a:	4b0f      	ldr	r3, [pc, #60]	@ (800eb78 <Get_SerialNum+0x44>)
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800eb40:	4b0e      	ldr	r3, [pc, #56]	@ (800eb7c <Get_SerialNum+0x48>)
 800eb42:	681b      	ldr	r3, [r3, #0]
 800eb44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800eb46:	4b0e      	ldr	r3, [pc, #56]	@ (800eb80 <Get_SerialNum+0x4c>)
 800eb48:	681b      	ldr	r3, [r3, #0]
 800eb4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800eb4c:	68fa      	ldr	r2, [r7, #12]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	4413      	add	r3, r2
 800eb52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d009      	beq.n	800eb6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800eb5a:	2208      	movs	r2, #8
 800eb5c:	4909      	ldr	r1, [pc, #36]	@ (800eb84 <Get_SerialNum+0x50>)
 800eb5e:	68f8      	ldr	r0, [r7, #12]
 800eb60:	f000 f814 	bl	800eb8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800eb64:	2204      	movs	r2, #4
 800eb66:	4908      	ldr	r1, [pc, #32]	@ (800eb88 <Get_SerialNum+0x54>)
 800eb68:	68b8      	ldr	r0, [r7, #8]
 800eb6a:	f000 f80f 	bl	800eb8c <IntToUnicode>
  }
}
 800eb6e:	bf00      	nop
 800eb70:	3710      	adds	r7, #16
 800eb72:	46bd      	mov	sp, r7
 800eb74:	bd80      	pop	{r7, pc}
 800eb76:	bf00      	nop
 800eb78:	1fff7a10 	.word	0x1fff7a10
 800eb7c:	1fff7a14 	.word	0x1fff7a14
 800eb80:	1fff7a18 	.word	0x1fff7a18
 800eb84:	2000011a 	.word	0x2000011a
 800eb88:	2000012a 	.word	0x2000012a

0800eb8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eb8c:	b480      	push	{r7}
 800eb8e:	b087      	sub	sp, #28
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	60f8      	str	r0, [r7, #12]
 800eb94:	60b9      	str	r1, [r7, #8]
 800eb96:	4613      	mov	r3, r2
 800eb98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800eb9a:	2300      	movs	r3, #0
 800eb9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800eb9e:	2300      	movs	r3, #0
 800eba0:	75fb      	strb	r3, [r7, #23]
 800eba2:	e027      	b.n	800ebf4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	0f1b      	lsrs	r3, r3, #28
 800eba8:	2b09      	cmp	r3, #9
 800ebaa:	d80b      	bhi.n	800ebc4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	0f1b      	lsrs	r3, r3, #28
 800ebb0:	b2da      	uxtb	r2, r3
 800ebb2:	7dfb      	ldrb	r3, [r7, #23]
 800ebb4:	005b      	lsls	r3, r3, #1
 800ebb6:	4619      	mov	r1, r3
 800ebb8:	68bb      	ldr	r3, [r7, #8]
 800ebba:	440b      	add	r3, r1
 800ebbc:	3230      	adds	r2, #48	@ 0x30
 800ebbe:	b2d2      	uxtb	r2, r2
 800ebc0:	701a      	strb	r2, [r3, #0]
 800ebc2:	e00a      	b.n	800ebda <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800ebc4:	68fb      	ldr	r3, [r7, #12]
 800ebc6:	0f1b      	lsrs	r3, r3, #28
 800ebc8:	b2da      	uxtb	r2, r3
 800ebca:	7dfb      	ldrb	r3, [r7, #23]
 800ebcc:	005b      	lsls	r3, r3, #1
 800ebce:	4619      	mov	r1, r3
 800ebd0:	68bb      	ldr	r3, [r7, #8]
 800ebd2:	440b      	add	r3, r1
 800ebd4:	3237      	adds	r2, #55	@ 0x37
 800ebd6:	b2d2      	uxtb	r2, r2
 800ebd8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	011b      	lsls	r3, r3, #4
 800ebde:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800ebe0:	7dfb      	ldrb	r3, [r7, #23]
 800ebe2:	005b      	lsls	r3, r3, #1
 800ebe4:	3301      	adds	r3, #1
 800ebe6:	68ba      	ldr	r2, [r7, #8]
 800ebe8:	4413      	add	r3, r2
 800ebea:	2200      	movs	r2, #0
 800ebec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ebee:	7dfb      	ldrb	r3, [r7, #23]
 800ebf0:	3301      	adds	r3, #1
 800ebf2:	75fb      	strb	r3, [r7, #23]
 800ebf4:	7dfa      	ldrb	r2, [r7, #23]
 800ebf6:	79fb      	ldrb	r3, [r7, #7]
 800ebf8:	429a      	cmp	r2, r3
 800ebfa:	d3d3      	bcc.n	800eba4 <IntToUnicode+0x18>
  }
}
 800ebfc:	bf00      	nop
 800ebfe:	bf00      	nop
 800ec00:	371c      	adds	r7, #28
 800ec02:	46bd      	mov	sp, r7
 800ec04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec08:	4770      	bx	lr
	...

0800ec0c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b08a      	sub	sp, #40	@ 0x28
 800ec10:	af00      	add	r7, sp, #0
 800ec12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec14:	f107 0314 	add.w	r3, r7, #20
 800ec18:	2200      	movs	r2, #0
 800ec1a:	601a      	str	r2, [r3, #0]
 800ec1c:	605a      	str	r2, [r3, #4]
 800ec1e:	609a      	str	r2, [r3, #8]
 800ec20:	60da      	str	r2, [r3, #12]
 800ec22:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ec2c:	d13a      	bne.n	800eca4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ec2e:	2300      	movs	r3, #0
 800ec30:	613b      	str	r3, [r7, #16]
 800ec32:	4b1e      	ldr	r3, [pc, #120]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec36:	4a1d      	ldr	r2, [pc, #116]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec38:	f043 0301 	orr.w	r3, r3, #1
 800ec3c:	6313      	str	r3, [r2, #48]	@ 0x30
 800ec3e:	4b1b      	ldr	r3, [pc, #108]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec42:	f003 0301 	and.w	r3, r3, #1
 800ec46:	613b      	str	r3, [r7, #16]
 800ec48:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800ec4a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800ec4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ec50:	2302      	movs	r3, #2
 800ec52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ec54:	2300      	movs	r3, #0
 800ec56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ec58:	2303      	movs	r3, #3
 800ec5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ec5c:	230a      	movs	r3, #10
 800ec5e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ec60:	f107 0314 	add.w	r3, r7, #20
 800ec64:	4619      	mov	r1, r3
 800ec66:	4812      	ldr	r0, [pc, #72]	@ (800ecb0 <HAL_PCD_MspInit+0xa4>)
 800ec68:	f7f6 f89a 	bl	8004da0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800ec6c:	4b0f      	ldr	r3, [pc, #60]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ec70:	4a0e      	ldr	r2, [pc, #56]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ec76:	6353      	str	r3, [r2, #52]	@ 0x34
 800ec78:	2300      	movs	r3, #0
 800ec7a:	60fb      	str	r3, [r7, #12]
 800ec7c:	4b0b      	ldr	r3, [pc, #44]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec80:	4a0a      	ldr	r2, [pc, #40]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec82:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800ec86:	6453      	str	r3, [r2, #68]	@ 0x44
 800ec88:	4b08      	ldr	r3, [pc, #32]	@ (800ecac <HAL_PCD_MspInit+0xa0>)
 800ec8a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec8c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800ec90:	60fb      	str	r3, [r7, #12]
 800ec92:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800ec94:	2200      	movs	r2, #0
 800ec96:	2100      	movs	r1, #0
 800ec98:	2043      	movs	r0, #67	@ 0x43
 800ec9a:	f7f5 fcb8 	bl	800460e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800ec9e:	2043      	movs	r0, #67	@ 0x43
 800eca0:	f7f5 fcd1 	bl	8004646 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eca4:	bf00      	nop
 800eca6:	3728      	adds	r7, #40	@ 0x28
 800eca8:	46bd      	mov	sp, r7
 800ecaa:	bd80      	pop	{r7, pc}
 800ecac:	40023800 	.word	0x40023800
 800ecb0:	40020000 	.word	0x40020000

0800ecb4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecb4:	b580      	push	{r7, lr}
 800ecb6:	b082      	sub	sp, #8
 800ecb8:	af00      	add	r7, sp, #0
 800ecba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800ecc8:	4619      	mov	r1, r3
 800ecca:	4610      	mov	r0, r2
 800eccc:	f7fc f9c7 	bl	800b05e <USBD_LL_SetupStage>
}
 800ecd0:	bf00      	nop
 800ecd2:	3708      	adds	r7, #8
 800ecd4:	46bd      	mov	sp, r7
 800ecd6:	bd80      	pop	{r7, pc}

0800ecd8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ecd8:	b580      	push	{r7, lr}
 800ecda:	b082      	sub	sp, #8
 800ecdc:	af00      	add	r7, sp, #0
 800ecde:	6078      	str	r0, [r7, #4]
 800ece0:	460b      	mov	r3, r1
 800ece2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ecea:	78fa      	ldrb	r2, [r7, #3]
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	4613      	mov	r3, r2
 800ecf0:	00db      	lsls	r3, r3, #3
 800ecf2:	4413      	add	r3, r2
 800ecf4:	009b      	lsls	r3, r3, #2
 800ecf6:	440b      	add	r3, r1
 800ecf8:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800ecfc:	681a      	ldr	r2, [r3, #0]
 800ecfe:	78fb      	ldrb	r3, [r7, #3]
 800ed00:	4619      	mov	r1, r3
 800ed02:	f7fc fa01 	bl	800b108 <USBD_LL_DataOutStage>
}
 800ed06:	bf00      	nop
 800ed08:	3708      	adds	r7, #8
 800ed0a:	46bd      	mov	sp, r7
 800ed0c:	bd80      	pop	{r7, pc}

0800ed0e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed0e:	b580      	push	{r7, lr}
 800ed10:	b082      	sub	sp, #8
 800ed12:	af00      	add	r7, sp, #0
 800ed14:	6078      	str	r0, [r7, #4]
 800ed16:	460b      	mov	r3, r1
 800ed18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800ed20:	78fa      	ldrb	r2, [r7, #3]
 800ed22:	6879      	ldr	r1, [r7, #4]
 800ed24:	4613      	mov	r3, r2
 800ed26:	00db      	lsls	r3, r3, #3
 800ed28:	4413      	add	r3, r2
 800ed2a:	009b      	lsls	r3, r3, #2
 800ed2c:	440b      	add	r3, r1
 800ed2e:	3320      	adds	r3, #32
 800ed30:	681a      	ldr	r2, [r3, #0]
 800ed32:	78fb      	ldrb	r3, [r7, #3]
 800ed34:	4619      	mov	r1, r3
 800ed36:	f7fc fa9a 	bl	800b26e <USBD_LL_DataInStage>
}
 800ed3a:	bf00      	nop
 800ed3c:	3708      	adds	r7, #8
 800ed3e:	46bd      	mov	sp, r7
 800ed40:	bd80      	pop	{r7, pc}

0800ed42 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed42:	b580      	push	{r7, lr}
 800ed44:	b082      	sub	sp, #8
 800ed46:	af00      	add	r7, sp, #0
 800ed48:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed50:	4618      	mov	r0, r3
 800ed52:	f7fc fbd4 	bl	800b4fe <USBD_LL_SOF>
}
 800ed56:	bf00      	nop
 800ed58:	3708      	adds	r7, #8
 800ed5a:	46bd      	mov	sp, r7
 800ed5c:	bd80      	pop	{r7, pc}

0800ed5e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed5e:	b580      	push	{r7, lr}
 800ed60:	b084      	sub	sp, #16
 800ed62:	af00      	add	r7, sp, #0
 800ed64:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800ed66:	2301      	movs	r3, #1
 800ed68:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800ed6a:	687b      	ldr	r3, [r7, #4]
 800ed6c:	79db      	ldrb	r3, [r3, #7]
 800ed6e:	2b02      	cmp	r3, #2
 800ed70:	d001      	beq.n	800ed76 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800ed72:	f7f2 fcbb 	bl	80016ec <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed7c:	7bfa      	ldrb	r2, [r7, #15]
 800ed7e:	4611      	mov	r1, r2
 800ed80:	4618      	mov	r0, r3
 800ed82:	f7fc fb78 	bl	800b476 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800ed86:	687b      	ldr	r3, [r7, #4]
 800ed88:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ed8c:	4618      	mov	r0, r3
 800ed8e:	f7fc fb20 	bl	800b3d2 <USBD_LL_Reset>
}
 800ed92:	bf00      	nop
 800ed94:	3710      	adds	r7, #16
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
	...

0800ed9c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800edaa:	4618      	mov	r0, r3
 800edac:	f7fc fb73 	bl	800b496 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	681b      	ldr	r3, [r3, #0]
 800edb4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800edb8:	681b      	ldr	r3, [r3, #0]
 800edba:	687a      	ldr	r2, [r7, #4]
 800edbc:	6812      	ldr	r2, [r2, #0]
 800edbe:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800edc2:	f043 0301 	orr.w	r3, r3, #1
 800edc6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	7adb      	ldrb	r3, [r3, #11]
 800edcc:	2b00      	cmp	r3, #0
 800edce:	d005      	beq.n	800eddc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800edd0:	4b04      	ldr	r3, [pc, #16]	@ (800ede4 <HAL_PCD_SuspendCallback+0x48>)
 800edd2:	691b      	ldr	r3, [r3, #16]
 800edd4:	4a03      	ldr	r2, [pc, #12]	@ (800ede4 <HAL_PCD_SuspendCallback+0x48>)
 800edd6:	f043 0306 	orr.w	r3, r3, #6
 800edda:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800eddc:	bf00      	nop
 800edde:	3708      	adds	r7, #8
 800ede0:	46bd      	mov	sp, r7
 800ede2:	bd80      	pop	{r7, pc}
 800ede4:	e000ed00 	.word	0xe000ed00

0800ede8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ede8:	b580      	push	{r7, lr}
 800edea:	b082      	sub	sp, #8
 800edec:	af00      	add	r7, sp, #0
 800edee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7fc fb69 	bl	800b4ce <USBD_LL_Resume>
}
 800edfc:	bf00      	nop
 800edfe:	3708      	adds	r7, #8
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}

0800ee04 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee04:	b580      	push	{r7, lr}
 800ee06:	b082      	sub	sp, #8
 800ee08:	af00      	add	r7, sp, #0
 800ee0a:	6078      	str	r0, [r7, #4]
 800ee0c:	460b      	mov	r3, r1
 800ee0e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee16:	78fa      	ldrb	r2, [r7, #3]
 800ee18:	4611      	mov	r1, r2
 800ee1a:	4618      	mov	r0, r3
 800ee1c:	f7fc fbc1 	bl	800b5a2 <USBD_LL_IsoOUTIncomplete>
}
 800ee20:	bf00      	nop
 800ee22:	3708      	adds	r7, #8
 800ee24:	46bd      	mov	sp, r7
 800ee26:	bd80      	pop	{r7, pc}

0800ee28 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b082      	sub	sp, #8
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
 800ee30:	460b      	mov	r3, r1
 800ee32:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee3a:	78fa      	ldrb	r2, [r7, #3]
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	4618      	mov	r0, r3
 800ee40:	f7fc fb7d 	bl	800b53e <USBD_LL_IsoINIncomplete>
}
 800ee44:	bf00      	nop
 800ee46:	3708      	adds	r7, #8
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bd80      	pop	{r7, pc}

0800ee4c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
 800ee52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee5a:	4618      	mov	r0, r3
 800ee5c:	f7fc fbd3 	bl	800b606 <USBD_LL_DevConnected>
}
 800ee60:	bf00      	nop
 800ee62:	3708      	adds	r7, #8
 800ee64:	46bd      	mov	sp, r7
 800ee66:	bd80      	pop	{r7, pc}

0800ee68 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ee68:	b580      	push	{r7, lr}
 800ee6a:	b082      	sub	sp, #8
 800ee6c:	af00      	add	r7, sp, #0
 800ee6e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800ee76:	4618      	mov	r0, r3
 800ee78:	f7fc fbd0 	bl	800b61c <USBD_LL_DevDisconnected>
}
 800ee7c:	bf00      	nop
 800ee7e:	3708      	adds	r7, #8
 800ee80:	46bd      	mov	sp, r7
 800ee82:	bd80      	pop	{r7, pc}

0800ee84 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800ee84:	b580      	push	{r7, lr}
 800ee86:	b082      	sub	sp, #8
 800ee88:	af00      	add	r7, sp, #0
 800ee8a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	781b      	ldrb	r3, [r3, #0]
 800ee90:	2b00      	cmp	r3, #0
 800ee92:	d13c      	bne.n	800ef0e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800ee94:	4a20      	ldr	r2, [pc, #128]	@ (800ef18 <USBD_LL_Init+0x94>)
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800ee9c:	687b      	ldr	r3, [r7, #4]
 800ee9e:	4a1e      	ldr	r2, [pc, #120]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eea0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800eea4:	4b1c      	ldr	r3, [pc, #112]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eea6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800eeaa:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800eeac:	4b1a      	ldr	r3, [pc, #104]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eeae:	2204      	movs	r2, #4
 800eeb0:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800eeb2:	4b19      	ldr	r3, [pc, #100]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eeb4:	2202      	movs	r2, #2
 800eeb6:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800eeb8:	4b17      	ldr	r3, [pc, #92]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eeba:	2200      	movs	r2, #0
 800eebc:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800eebe:	4b16      	ldr	r3, [pc, #88]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eec0:	2202      	movs	r2, #2
 800eec2:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800eec4:	4b14      	ldr	r3, [pc, #80]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eec6:	2200      	movs	r2, #0
 800eec8:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800eeca:	4b13      	ldr	r3, [pc, #76]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eecc:	2200      	movs	r2, #0
 800eece:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800eed0:	4b11      	ldr	r3, [pc, #68]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eed2:	2200      	movs	r2, #0
 800eed4:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800eed6:	4b10      	ldr	r3, [pc, #64]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eed8:	2200      	movs	r2, #0
 800eeda:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800eedc:	4b0e      	ldr	r3, [pc, #56]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eede:	2200      	movs	r2, #0
 800eee0:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800eee2:	480d      	ldr	r0, [pc, #52]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eee4:	f7f6 f912 	bl	800510c <HAL_PCD_Init>
 800eee8:	4603      	mov	r3, r0
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d001      	beq.n	800eef2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800eeee:	f7f2 fbfd 	bl	80016ec <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800eef2:	2180      	movs	r1, #128	@ 0x80
 800eef4:	4808      	ldr	r0, [pc, #32]	@ (800ef18 <USBD_LL_Init+0x94>)
 800eef6:	f7f7 fb3e 	bl	8006576 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800eefa:	2240      	movs	r2, #64	@ 0x40
 800eefc:	2100      	movs	r1, #0
 800eefe:	4806      	ldr	r0, [pc, #24]	@ (800ef18 <USBD_LL_Init+0x94>)
 800ef00:	f7f7 faf2 	bl	80064e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800ef04:	2280      	movs	r2, #128	@ 0x80
 800ef06:	2101      	movs	r1, #1
 800ef08:	4803      	ldr	r0, [pc, #12]	@ (800ef18 <USBD_LL_Init+0x94>)
 800ef0a:	f7f7 faed 	bl	80064e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800ef0e:	2300      	movs	r3, #0
}
 800ef10:	4618      	mov	r0, r3
 800ef12:	3708      	adds	r7, #8
 800ef14:	46bd      	mov	sp, r7
 800ef16:	bd80      	pop	{r7, pc}
 800ef18:	20001108 	.word	0x20001108

0800ef1c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800ef1c:	b580      	push	{r7, lr}
 800ef1e:	b084      	sub	sp, #16
 800ef20:	af00      	add	r7, sp, #0
 800ef22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef24:	2300      	movs	r3, #0
 800ef26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef28:	2300      	movs	r3, #0
 800ef2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7f6 f9f9 	bl	800532a <HAL_PCD_Start>
 800ef38:	4603      	mov	r3, r0
 800ef3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef3c:	7bfb      	ldrb	r3, [r7, #15]
 800ef3e:	4618      	mov	r0, r3
 800ef40:	f000 f942 	bl	800f1c8 <USBD_Get_USB_Status>
 800ef44:	4603      	mov	r3, r0
 800ef46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef48:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef4a:	4618      	mov	r0, r3
 800ef4c:	3710      	adds	r7, #16
 800ef4e:	46bd      	mov	sp, r7
 800ef50:	bd80      	pop	{r7, pc}

0800ef52 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800ef52:	b580      	push	{r7, lr}
 800ef54:	b084      	sub	sp, #16
 800ef56:	af00      	add	r7, sp, #0
 800ef58:	6078      	str	r0, [r7, #4]
 800ef5a:	4608      	mov	r0, r1
 800ef5c:	4611      	mov	r1, r2
 800ef5e:	461a      	mov	r2, r3
 800ef60:	4603      	mov	r3, r0
 800ef62:	70fb      	strb	r3, [r7, #3]
 800ef64:	460b      	mov	r3, r1
 800ef66:	70bb      	strb	r3, [r7, #2]
 800ef68:	4613      	mov	r3, r2
 800ef6a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ef6c:	2300      	movs	r3, #0
 800ef6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ef70:	2300      	movs	r3, #0
 800ef72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800ef7a:	78bb      	ldrb	r3, [r7, #2]
 800ef7c:	883a      	ldrh	r2, [r7, #0]
 800ef7e:	78f9      	ldrb	r1, [r7, #3]
 800ef80:	f7f6 fecd 	bl	8005d1e <HAL_PCD_EP_Open>
 800ef84:	4603      	mov	r3, r0
 800ef86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ef88:	7bfb      	ldrb	r3, [r7, #15]
 800ef8a:	4618      	mov	r0, r3
 800ef8c:	f000 f91c 	bl	800f1c8 <USBD_Get_USB_Status>
 800ef90:	4603      	mov	r3, r0
 800ef92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ef94:	7bbb      	ldrb	r3, [r7, #14]
}
 800ef96:	4618      	mov	r0, r3
 800ef98:	3710      	adds	r7, #16
 800ef9a:	46bd      	mov	sp, r7
 800ef9c:	bd80      	pop	{r7, pc}

0800ef9e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800ef9e:	b580      	push	{r7, lr}
 800efa0:	b084      	sub	sp, #16
 800efa2:	af00      	add	r7, sp, #0
 800efa4:	6078      	str	r0, [r7, #4]
 800efa6:	460b      	mov	r3, r1
 800efa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efaa:	2300      	movs	r3, #0
 800efac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efae:	2300      	movs	r3, #0
 800efb0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800efb8:	78fa      	ldrb	r2, [r7, #3]
 800efba:	4611      	mov	r1, r2
 800efbc:	4618      	mov	r0, r3
 800efbe:	f7f6 ff18 	bl	8005df2 <HAL_PCD_EP_Close>
 800efc2:	4603      	mov	r3, r0
 800efc4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800efc6:	7bfb      	ldrb	r3, [r7, #15]
 800efc8:	4618      	mov	r0, r3
 800efca:	f000 f8fd 	bl	800f1c8 <USBD_Get_USB_Status>
 800efce:	4603      	mov	r3, r0
 800efd0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800efd2:	7bbb      	ldrb	r3, [r7, #14]
}
 800efd4:	4618      	mov	r0, r3
 800efd6:	3710      	adds	r7, #16
 800efd8:	46bd      	mov	sp, r7
 800efda:	bd80      	pop	{r7, pc}

0800efdc <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800efdc:	b580      	push	{r7, lr}
 800efde:	b084      	sub	sp, #16
 800efe0:	af00      	add	r7, sp, #0
 800efe2:	6078      	str	r0, [r7, #4]
 800efe4:	460b      	mov	r3, r1
 800efe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800efe8:	2300      	movs	r3, #0
 800efea:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800efec:	2300      	movs	r3, #0
 800efee:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800eff6:	78fa      	ldrb	r2, [r7, #3]
 800eff8:	4611      	mov	r1, r2
 800effa:	4618      	mov	r0, r3
 800effc:	f7f6 ffd0 	bl	8005fa0 <HAL_PCD_EP_SetStall>
 800f000:	4603      	mov	r3, r0
 800f002:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f004:	7bfb      	ldrb	r3, [r7, #15]
 800f006:	4618      	mov	r0, r3
 800f008:	f000 f8de 	bl	800f1c8 <USBD_Get_USB_Status>
 800f00c:	4603      	mov	r3, r0
 800f00e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f010:	7bbb      	ldrb	r3, [r7, #14]
}
 800f012:	4618      	mov	r0, r3
 800f014:	3710      	adds	r7, #16
 800f016:	46bd      	mov	sp, r7
 800f018:	bd80      	pop	{r7, pc}

0800f01a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f01a:	b580      	push	{r7, lr}
 800f01c:	b084      	sub	sp, #16
 800f01e:	af00      	add	r7, sp, #0
 800f020:	6078      	str	r0, [r7, #4]
 800f022:	460b      	mov	r3, r1
 800f024:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f026:	2300      	movs	r3, #0
 800f028:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f02a:	2300      	movs	r3, #0
 800f02c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f034:	78fa      	ldrb	r2, [r7, #3]
 800f036:	4611      	mov	r1, r2
 800f038:	4618      	mov	r0, r3
 800f03a:	f7f7 f814 	bl	8006066 <HAL_PCD_EP_ClrStall>
 800f03e:	4603      	mov	r3, r0
 800f040:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f042:	7bfb      	ldrb	r3, [r7, #15]
 800f044:	4618      	mov	r0, r3
 800f046:	f000 f8bf 	bl	800f1c8 <USBD_Get_USB_Status>
 800f04a:	4603      	mov	r3, r0
 800f04c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f04e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f050:	4618      	mov	r0, r3
 800f052:	3710      	adds	r7, #16
 800f054:	46bd      	mov	sp, r7
 800f056:	bd80      	pop	{r7, pc}

0800f058 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f058:	b480      	push	{r7}
 800f05a:	b085      	sub	sp, #20
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	460b      	mov	r3, r1
 800f062:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f06a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f06c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f070:	2b00      	cmp	r3, #0
 800f072:	da0b      	bge.n	800f08c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f074:	78fb      	ldrb	r3, [r7, #3]
 800f076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f07a:	68f9      	ldr	r1, [r7, #12]
 800f07c:	4613      	mov	r3, r2
 800f07e:	00db      	lsls	r3, r3, #3
 800f080:	4413      	add	r3, r2
 800f082:	009b      	lsls	r3, r3, #2
 800f084:	440b      	add	r3, r1
 800f086:	3316      	adds	r3, #22
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	e00b      	b.n	800f0a4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f08c:	78fb      	ldrb	r3, [r7, #3]
 800f08e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800f092:	68f9      	ldr	r1, [r7, #12]
 800f094:	4613      	mov	r3, r2
 800f096:	00db      	lsls	r3, r3, #3
 800f098:	4413      	add	r3, r2
 800f09a:	009b      	lsls	r3, r3, #2
 800f09c:	440b      	add	r3, r1
 800f09e:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800f0a2:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f0a4:	4618      	mov	r0, r3
 800f0a6:	3714      	adds	r7, #20
 800f0a8:	46bd      	mov	sp, r7
 800f0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0ae:	4770      	bx	lr

0800f0b0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b084      	sub	sp, #16
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
 800f0b8:	460b      	mov	r3, r1
 800f0ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0bc:	2300      	movs	r3, #0
 800f0be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f0c0:	2300      	movs	r3, #0
 800f0c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f0ca:	78fa      	ldrb	r2, [r7, #3]
 800f0cc:	4611      	mov	r1, r2
 800f0ce:	4618      	mov	r0, r3
 800f0d0:	f7f6 fe01 	bl	8005cd6 <HAL_PCD_SetAddress>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f0d8:	7bfb      	ldrb	r3, [r7, #15]
 800f0da:	4618      	mov	r0, r3
 800f0dc:	f000 f874 	bl	800f1c8 <USBD_Get_USB_Status>
 800f0e0:	4603      	mov	r3, r0
 800f0e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0e6:	4618      	mov	r0, r3
 800f0e8:	3710      	adds	r7, #16
 800f0ea:	46bd      	mov	sp, r7
 800f0ec:	bd80      	pop	{r7, pc}

0800f0ee <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f0ee:	b580      	push	{r7, lr}
 800f0f0:	b086      	sub	sp, #24
 800f0f2:	af00      	add	r7, sp, #0
 800f0f4:	60f8      	str	r0, [r7, #12]
 800f0f6:	607a      	str	r2, [r7, #4]
 800f0f8:	603b      	str	r3, [r7, #0]
 800f0fa:	460b      	mov	r3, r1
 800f0fc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0fe:	2300      	movs	r3, #0
 800f100:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f102:	2300      	movs	r3, #0
 800f104:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f106:	68fb      	ldr	r3, [r7, #12]
 800f108:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f10c:	7af9      	ldrb	r1, [r7, #11]
 800f10e:	683b      	ldr	r3, [r7, #0]
 800f110:	687a      	ldr	r2, [r7, #4]
 800f112:	f7f6 ff0b 	bl	8005f2c <HAL_PCD_EP_Transmit>
 800f116:	4603      	mov	r3, r0
 800f118:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f11a:	7dfb      	ldrb	r3, [r7, #23]
 800f11c:	4618      	mov	r0, r3
 800f11e:	f000 f853 	bl	800f1c8 <USBD_Get_USB_Status>
 800f122:	4603      	mov	r3, r0
 800f124:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f126:	7dbb      	ldrb	r3, [r7, #22]
}
 800f128:	4618      	mov	r0, r3
 800f12a:	3718      	adds	r7, #24
 800f12c:	46bd      	mov	sp, r7
 800f12e:	bd80      	pop	{r7, pc}

0800f130 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f130:	b580      	push	{r7, lr}
 800f132:	b086      	sub	sp, #24
 800f134:	af00      	add	r7, sp, #0
 800f136:	60f8      	str	r0, [r7, #12]
 800f138:	607a      	str	r2, [r7, #4]
 800f13a:	603b      	str	r3, [r7, #0]
 800f13c:	460b      	mov	r3, r1
 800f13e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f144:	2300      	movs	r3, #0
 800f146:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800f14e:	7af9      	ldrb	r1, [r7, #11]
 800f150:	683b      	ldr	r3, [r7, #0]
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	f7f6 fe97 	bl	8005e86 <HAL_PCD_EP_Receive>
 800f158:	4603      	mov	r3, r0
 800f15a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f15c:	7dfb      	ldrb	r3, [r7, #23]
 800f15e:	4618      	mov	r0, r3
 800f160:	f000 f832 	bl	800f1c8 <USBD_Get_USB_Status>
 800f164:	4603      	mov	r3, r0
 800f166:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f168:	7dbb      	ldrb	r3, [r7, #22]
}
 800f16a:	4618      	mov	r0, r3
 800f16c:	3718      	adds	r7, #24
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd80      	pop	{r7, pc}

0800f172 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f172:	b580      	push	{r7, lr}
 800f174:	b082      	sub	sp, #8
 800f176:	af00      	add	r7, sp, #0
 800f178:	6078      	str	r0, [r7, #4]
 800f17a:	460b      	mov	r3, r1
 800f17c:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800f184:	78fa      	ldrb	r2, [r7, #3]
 800f186:	4611      	mov	r1, r2
 800f188:	4618      	mov	r0, r3
 800f18a:	f7f6 feb7 	bl	8005efc <HAL_PCD_EP_GetRxCount>
 800f18e:	4603      	mov	r3, r0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3708      	adds	r7, #8
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f198:	b480      	push	{r7}
 800f19a:	b083      	sub	sp, #12
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f1a0:	4b03      	ldr	r3, [pc, #12]	@ (800f1b0 <USBD_static_malloc+0x18>)
}
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	370c      	adds	r7, #12
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1ac:	4770      	bx	lr
 800f1ae:	bf00      	nop
 800f1b0:	200015ec 	.word	0x200015ec

0800f1b4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f1b4:	b480      	push	{r7}
 800f1b6:	b083      	sub	sp, #12
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]

}
 800f1bc:	bf00      	nop
 800f1be:	370c      	adds	r7, #12
 800f1c0:	46bd      	mov	sp, r7
 800f1c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1c6:	4770      	bx	lr

0800f1c8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f1c8:	b480      	push	{r7}
 800f1ca:	b085      	sub	sp, #20
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	4603      	mov	r3, r0
 800f1d0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f1d6:	79fb      	ldrb	r3, [r7, #7]
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d817      	bhi.n	800f20c <USBD_Get_USB_Status+0x44>
 800f1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800f1e4 <USBD_Get_USB_Status+0x1c>)
 800f1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f1e2:	bf00      	nop
 800f1e4:	0800f1f5 	.word	0x0800f1f5
 800f1e8:	0800f1fb 	.word	0x0800f1fb
 800f1ec:	0800f201 	.word	0x0800f201
 800f1f0:	0800f207 	.word	0x0800f207
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f1f4:	2300      	movs	r3, #0
 800f1f6:	73fb      	strb	r3, [r7, #15]
    break;
 800f1f8:	e00b      	b.n	800f212 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f1fa:	2303      	movs	r3, #3
 800f1fc:	73fb      	strb	r3, [r7, #15]
    break;
 800f1fe:	e008      	b.n	800f212 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f200:	2301      	movs	r3, #1
 800f202:	73fb      	strb	r3, [r7, #15]
    break;
 800f204:	e005      	b.n	800f212 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f206:	2303      	movs	r3, #3
 800f208:	73fb      	strb	r3, [r7, #15]
    break;
 800f20a:	e002      	b.n	800f212 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f20c:	2303      	movs	r3, #3
 800f20e:	73fb      	strb	r3, [r7, #15]
    break;
 800f210:	bf00      	nop
  }
  return usb_status;
 800f212:	7bfb      	ldrb	r3, [r7, #15]
}
 800f214:	4618      	mov	r0, r3
 800f216:	3714      	adds	r7, #20
 800f218:	46bd      	mov	sp, r7
 800f21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f21e:	4770      	bx	lr

0800f220 <_ZdlPvj>:
 800f220:	f000 b811 	b.w	800f246 <_ZdlPv>

0800f224 <_Znwj>:
 800f224:	2801      	cmp	r0, #1
 800f226:	bf38      	it	cc
 800f228:	2001      	movcc	r0, #1
 800f22a:	b510      	push	{r4, lr}
 800f22c:	4604      	mov	r4, r0
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 f836 	bl	800f2a0 <malloc>
 800f234:	b100      	cbz	r0, 800f238 <_Znwj+0x14>
 800f236:	bd10      	pop	{r4, pc}
 800f238:	f000 f808 	bl	800f24c <_ZSt15get_new_handlerv>
 800f23c:	b908      	cbnz	r0, 800f242 <_Znwj+0x1e>
 800f23e:	f000 f80d 	bl	800f25c <abort>
 800f242:	4780      	blx	r0
 800f244:	e7f3      	b.n	800f22e <_Znwj+0xa>

0800f246 <_ZdlPv>:
 800f246:	f000 b833 	b.w	800f2b0 <free>
	...

0800f24c <_ZSt15get_new_handlerv>:
 800f24c:	4b02      	ldr	r3, [pc, #8]	@ (800f258 <_ZSt15get_new_handlerv+0xc>)
 800f24e:	6818      	ldr	r0, [r3, #0]
 800f250:	f3bf 8f5b 	dmb	ish
 800f254:	4770      	bx	lr
 800f256:	bf00      	nop
 800f258:	2000180c 	.word	0x2000180c

0800f25c <abort>:
 800f25c:	b508      	push	{r3, lr}
 800f25e:	2006      	movs	r0, #6
 800f260:	f000 f9b0 	bl	800f5c4 <raise>
 800f264:	2001      	movs	r0, #1
 800f266:	f7f2 febd 	bl	8001fe4 <_exit>

0800f26a <__itoa>:
 800f26a:	1e93      	subs	r3, r2, #2
 800f26c:	2b22      	cmp	r3, #34	@ 0x22
 800f26e:	b510      	push	{r4, lr}
 800f270:	460c      	mov	r4, r1
 800f272:	d904      	bls.n	800f27e <__itoa+0x14>
 800f274:	2300      	movs	r3, #0
 800f276:	700b      	strb	r3, [r1, #0]
 800f278:	461c      	mov	r4, r3
 800f27a:	4620      	mov	r0, r4
 800f27c:	bd10      	pop	{r4, pc}
 800f27e:	2a0a      	cmp	r2, #10
 800f280:	d109      	bne.n	800f296 <__itoa+0x2c>
 800f282:	2800      	cmp	r0, #0
 800f284:	da07      	bge.n	800f296 <__itoa+0x2c>
 800f286:	232d      	movs	r3, #45	@ 0x2d
 800f288:	700b      	strb	r3, [r1, #0]
 800f28a:	4240      	negs	r0, r0
 800f28c:	2101      	movs	r1, #1
 800f28e:	4421      	add	r1, r4
 800f290:	f000 f8c4 	bl	800f41c <__utoa>
 800f294:	e7f1      	b.n	800f27a <__itoa+0x10>
 800f296:	2100      	movs	r1, #0
 800f298:	e7f9      	b.n	800f28e <__itoa+0x24>

0800f29a <itoa>:
 800f29a:	f7ff bfe6 	b.w	800f26a <__itoa>
	...

0800f2a0 <malloc>:
 800f2a0:	4b02      	ldr	r3, [pc, #8]	@ (800f2ac <malloc+0xc>)
 800f2a2:	4601      	mov	r1, r0
 800f2a4:	6818      	ldr	r0, [r3, #0]
 800f2a6:	f000 b82d 	b.w	800f304 <_malloc_r>
 800f2aa:	bf00      	nop
 800f2ac:	20000134 	.word	0x20000134

0800f2b0 <free>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <free+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f000 b9eb 	b.w	800f690 <_free_r>
 800f2ba:	bf00      	nop
 800f2bc:	20000134 	.word	0x20000134

0800f2c0 <sbrk_aligned>:
 800f2c0:	b570      	push	{r4, r5, r6, lr}
 800f2c2:	4e0f      	ldr	r6, [pc, #60]	@ (800f300 <sbrk_aligned+0x40>)
 800f2c4:	460c      	mov	r4, r1
 800f2c6:	6831      	ldr	r1, [r6, #0]
 800f2c8:	4605      	mov	r5, r0
 800f2ca:	b911      	cbnz	r1, 800f2d2 <sbrk_aligned+0x12>
 800f2cc:	f000 f996 	bl	800f5fc <_sbrk_r>
 800f2d0:	6030      	str	r0, [r6, #0]
 800f2d2:	4621      	mov	r1, r4
 800f2d4:	4628      	mov	r0, r5
 800f2d6:	f000 f991 	bl	800f5fc <_sbrk_r>
 800f2da:	1c43      	adds	r3, r0, #1
 800f2dc:	d103      	bne.n	800f2e6 <sbrk_aligned+0x26>
 800f2de:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800f2e2:	4620      	mov	r0, r4
 800f2e4:	bd70      	pop	{r4, r5, r6, pc}
 800f2e6:	1cc4      	adds	r4, r0, #3
 800f2e8:	f024 0403 	bic.w	r4, r4, #3
 800f2ec:	42a0      	cmp	r0, r4
 800f2ee:	d0f8      	beq.n	800f2e2 <sbrk_aligned+0x22>
 800f2f0:	1a21      	subs	r1, r4, r0
 800f2f2:	4628      	mov	r0, r5
 800f2f4:	f000 f982 	bl	800f5fc <_sbrk_r>
 800f2f8:	3001      	adds	r0, #1
 800f2fa:	d1f2      	bne.n	800f2e2 <sbrk_aligned+0x22>
 800f2fc:	e7ef      	b.n	800f2de <sbrk_aligned+0x1e>
 800f2fe:	bf00      	nop
 800f300:	20001810 	.word	0x20001810

0800f304 <_malloc_r>:
 800f304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f308:	1ccd      	adds	r5, r1, #3
 800f30a:	f025 0503 	bic.w	r5, r5, #3
 800f30e:	3508      	adds	r5, #8
 800f310:	2d0c      	cmp	r5, #12
 800f312:	bf38      	it	cc
 800f314:	250c      	movcc	r5, #12
 800f316:	2d00      	cmp	r5, #0
 800f318:	4606      	mov	r6, r0
 800f31a:	db01      	blt.n	800f320 <_malloc_r+0x1c>
 800f31c:	42a9      	cmp	r1, r5
 800f31e:	d904      	bls.n	800f32a <_malloc_r+0x26>
 800f320:	230c      	movs	r3, #12
 800f322:	6033      	str	r3, [r6, #0]
 800f324:	2000      	movs	r0, #0
 800f326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f32a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f400 <_malloc_r+0xfc>
 800f32e:	f000 f869 	bl	800f404 <__malloc_lock>
 800f332:	f8d8 3000 	ldr.w	r3, [r8]
 800f336:	461c      	mov	r4, r3
 800f338:	bb44      	cbnz	r4, 800f38c <_malloc_r+0x88>
 800f33a:	4629      	mov	r1, r5
 800f33c:	4630      	mov	r0, r6
 800f33e:	f7ff ffbf 	bl	800f2c0 <sbrk_aligned>
 800f342:	1c43      	adds	r3, r0, #1
 800f344:	4604      	mov	r4, r0
 800f346:	d158      	bne.n	800f3fa <_malloc_r+0xf6>
 800f348:	f8d8 4000 	ldr.w	r4, [r8]
 800f34c:	4627      	mov	r7, r4
 800f34e:	2f00      	cmp	r7, #0
 800f350:	d143      	bne.n	800f3da <_malloc_r+0xd6>
 800f352:	2c00      	cmp	r4, #0
 800f354:	d04b      	beq.n	800f3ee <_malloc_r+0xea>
 800f356:	6823      	ldr	r3, [r4, #0]
 800f358:	4639      	mov	r1, r7
 800f35a:	4630      	mov	r0, r6
 800f35c:	eb04 0903 	add.w	r9, r4, r3
 800f360:	f000 f94c 	bl	800f5fc <_sbrk_r>
 800f364:	4581      	cmp	r9, r0
 800f366:	d142      	bne.n	800f3ee <_malloc_r+0xea>
 800f368:	6821      	ldr	r1, [r4, #0]
 800f36a:	1a6d      	subs	r5, r5, r1
 800f36c:	4629      	mov	r1, r5
 800f36e:	4630      	mov	r0, r6
 800f370:	f7ff ffa6 	bl	800f2c0 <sbrk_aligned>
 800f374:	3001      	adds	r0, #1
 800f376:	d03a      	beq.n	800f3ee <_malloc_r+0xea>
 800f378:	6823      	ldr	r3, [r4, #0]
 800f37a:	442b      	add	r3, r5
 800f37c:	6023      	str	r3, [r4, #0]
 800f37e:	f8d8 3000 	ldr.w	r3, [r8]
 800f382:	685a      	ldr	r2, [r3, #4]
 800f384:	bb62      	cbnz	r2, 800f3e0 <_malloc_r+0xdc>
 800f386:	f8c8 7000 	str.w	r7, [r8]
 800f38a:	e00f      	b.n	800f3ac <_malloc_r+0xa8>
 800f38c:	6822      	ldr	r2, [r4, #0]
 800f38e:	1b52      	subs	r2, r2, r5
 800f390:	d420      	bmi.n	800f3d4 <_malloc_r+0xd0>
 800f392:	2a0b      	cmp	r2, #11
 800f394:	d917      	bls.n	800f3c6 <_malloc_r+0xc2>
 800f396:	1961      	adds	r1, r4, r5
 800f398:	42a3      	cmp	r3, r4
 800f39a:	6025      	str	r5, [r4, #0]
 800f39c:	bf18      	it	ne
 800f39e:	6059      	strne	r1, [r3, #4]
 800f3a0:	6863      	ldr	r3, [r4, #4]
 800f3a2:	bf08      	it	eq
 800f3a4:	f8c8 1000 	streq.w	r1, [r8]
 800f3a8:	5162      	str	r2, [r4, r5]
 800f3aa:	604b      	str	r3, [r1, #4]
 800f3ac:	4630      	mov	r0, r6
 800f3ae:	f000 f82f 	bl	800f410 <__malloc_unlock>
 800f3b2:	f104 000b 	add.w	r0, r4, #11
 800f3b6:	1d23      	adds	r3, r4, #4
 800f3b8:	f020 0007 	bic.w	r0, r0, #7
 800f3bc:	1ac2      	subs	r2, r0, r3
 800f3be:	bf1c      	itt	ne
 800f3c0:	1a1b      	subne	r3, r3, r0
 800f3c2:	50a3      	strne	r3, [r4, r2]
 800f3c4:	e7af      	b.n	800f326 <_malloc_r+0x22>
 800f3c6:	6862      	ldr	r2, [r4, #4]
 800f3c8:	42a3      	cmp	r3, r4
 800f3ca:	bf0c      	ite	eq
 800f3cc:	f8c8 2000 	streq.w	r2, [r8]
 800f3d0:	605a      	strne	r2, [r3, #4]
 800f3d2:	e7eb      	b.n	800f3ac <_malloc_r+0xa8>
 800f3d4:	4623      	mov	r3, r4
 800f3d6:	6864      	ldr	r4, [r4, #4]
 800f3d8:	e7ae      	b.n	800f338 <_malloc_r+0x34>
 800f3da:	463c      	mov	r4, r7
 800f3dc:	687f      	ldr	r7, [r7, #4]
 800f3de:	e7b6      	b.n	800f34e <_malloc_r+0x4a>
 800f3e0:	461a      	mov	r2, r3
 800f3e2:	685b      	ldr	r3, [r3, #4]
 800f3e4:	42a3      	cmp	r3, r4
 800f3e6:	d1fb      	bne.n	800f3e0 <_malloc_r+0xdc>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	6053      	str	r3, [r2, #4]
 800f3ec:	e7de      	b.n	800f3ac <_malloc_r+0xa8>
 800f3ee:	230c      	movs	r3, #12
 800f3f0:	6033      	str	r3, [r6, #0]
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	f000 f80c 	bl	800f410 <__malloc_unlock>
 800f3f8:	e794      	b.n	800f324 <_malloc_r+0x20>
 800f3fa:	6005      	str	r5, [r0, #0]
 800f3fc:	e7d6      	b.n	800f3ac <_malloc_r+0xa8>
 800f3fe:	bf00      	nop
 800f400:	20001814 	.word	0x20001814

0800f404 <__malloc_lock>:
 800f404:	4801      	ldr	r0, [pc, #4]	@ (800f40c <__malloc_lock+0x8>)
 800f406:	f000 b933 	b.w	800f670 <__retarget_lock_acquire_recursive>
 800f40a:	bf00      	nop
 800f40c:	20001954 	.word	0x20001954

0800f410 <__malloc_unlock>:
 800f410:	4801      	ldr	r0, [pc, #4]	@ (800f418 <__malloc_unlock+0x8>)
 800f412:	f000 b92e 	b.w	800f672 <__retarget_lock_release_recursive>
 800f416:	bf00      	nop
 800f418:	20001954 	.word	0x20001954

0800f41c <__utoa>:
 800f41c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f41e:	4c1f      	ldr	r4, [pc, #124]	@ (800f49c <__utoa+0x80>)
 800f420:	b08b      	sub	sp, #44	@ 0x2c
 800f422:	4605      	mov	r5, r0
 800f424:	460b      	mov	r3, r1
 800f426:	466e      	mov	r6, sp
 800f428:	f104 0c20 	add.w	ip, r4, #32
 800f42c:	6820      	ldr	r0, [r4, #0]
 800f42e:	6861      	ldr	r1, [r4, #4]
 800f430:	4637      	mov	r7, r6
 800f432:	c703      	stmia	r7!, {r0, r1}
 800f434:	3408      	adds	r4, #8
 800f436:	4564      	cmp	r4, ip
 800f438:	463e      	mov	r6, r7
 800f43a:	d1f7      	bne.n	800f42c <__utoa+0x10>
 800f43c:	7921      	ldrb	r1, [r4, #4]
 800f43e:	7139      	strb	r1, [r7, #4]
 800f440:	1e91      	subs	r1, r2, #2
 800f442:	6820      	ldr	r0, [r4, #0]
 800f444:	6038      	str	r0, [r7, #0]
 800f446:	2922      	cmp	r1, #34	@ 0x22
 800f448:	f04f 0100 	mov.w	r1, #0
 800f44c:	d904      	bls.n	800f458 <__utoa+0x3c>
 800f44e:	7019      	strb	r1, [r3, #0]
 800f450:	460b      	mov	r3, r1
 800f452:	4618      	mov	r0, r3
 800f454:	b00b      	add	sp, #44	@ 0x2c
 800f456:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f458:	1e58      	subs	r0, r3, #1
 800f45a:	4684      	mov	ip, r0
 800f45c:	fbb5 f7f2 	udiv	r7, r5, r2
 800f460:	fb02 5617 	mls	r6, r2, r7, r5
 800f464:	3628      	adds	r6, #40	@ 0x28
 800f466:	446e      	add	r6, sp
 800f468:	460c      	mov	r4, r1
 800f46a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800f46e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800f472:	462e      	mov	r6, r5
 800f474:	42b2      	cmp	r2, r6
 800f476:	f101 0101 	add.w	r1, r1, #1
 800f47a:	463d      	mov	r5, r7
 800f47c:	d9ee      	bls.n	800f45c <__utoa+0x40>
 800f47e:	2200      	movs	r2, #0
 800f480:	545a      	strb	r2, [r3, r1]
 800f482:	1919      	adds	r1, r3, r4
 800f484:	1aa5      	subs	r5, r4, r2
 800f486:	42aa      	cmp	r2, r5
 800f488:	dae3      	bge.n	800f452 <__utoa+0x36>
 800f48a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800f48e:	780e      	ldrb	r6, [r1, #0]
 800f490:	7006      	strb	r6, [r0, #0]
 800f492:	3201      	adds	r2, #1
 800f494:	f801 5901 	strb.w	r5, [r1], #-1
 800f498:	e7f4      	b.n	800f484 <__utoa+0x68>
 800f49a:	bf00      	nop
 800f49c:	08017920 	.word	0x08017920

0800f4a0 <_vsniprintf_r>:
 800f4a0:	b530      	push	{r4, r5, lr}
 800f4a2:	4614      	mov	r4, r2
 800f4a4:	2c00      	cmp	r4, #0
 800f4a6:	b09b      	sub	sp, #108	@ 0x6c
 800f4a8:	4605      	mov	r5, r0
 800f4aa:	461a      	mov	r2, r3
 800f4ac:	da05      	bge.n	800f4ba <_vsniprintf_r+0x1a>
 800f4ae:	238b      	movs	r3, #139	@ 0x8b
 800f4b0:	6003      	str	r3, [r0, #0]
 800f4b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f4b6:	b01b      	add	sp, #108	@ 0x6c
 800f4b8:	bd30      	pop	{r4, r5, pc}
 800f4ba:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f4be:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f4c2:	f04f 0300 	mov.w	r3, #0
 800f4c6:	9319      	str	r3, [sp, #100]	@ 0x64
 800f4c8:	bf14      	ite	ne
 800f4ca:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800f4ce:	4623      	moveq	r3, r4
 800f4d0:	9302      	str	r3, [sp, #8]
 800f4d2:	9305      	str	r3, [sp, #20]
 800f4d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f4d8:	9100      	str	r1, [sp, #0]
 800f4da:	9104      	str	r1, [sp, #16]
 800f4dc:	f8ad 300e 	strh.w	r3, [sp, #14]
 800f4e0:	4669      	mov	r1, sp
 800f4e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f4e4:	f000 f97a 	bl	800f7dc <_svfiprintf_r>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	bfbc      	itt	lt
 800f4ec:	238b      	movlt	r3, #139	@ 0x8b
 800f4ee:	602b      	strlt	r3, [r5, #0]
 800f4f0:	2c00      	cmp	r4, #0
 800f4f2:	d0e0      	beq.n	800f4b6 <_vsniprintf_r+0x16>
 800f4f4:	9b00      	ldr	r3, [sp, #0]
 800f4f6:	2200      	movs	r2, #0
 800f4f8:	701a      	strb	r2, [r3, #0]
 800f4fa:	e7dc      	b.n	800f4b6 <_vsniprintf_r+0x16>

0800f4fc <vsniprintf>:
 800f4fc:	b507      	push	{r0, r1, r2, lr}
 800f4fe:	9300      	str	r3, [sp, #0]
 800f500:	4613      	mov	r3, r2
 800f502:	460a      	mov	r2, r1
 800f504:	4601      	mov	r1, r0
 800f506:	4803      	ldr	r0, [pc, #12]	@ (800f514 <vsniprintf+0x18>)
 800f508:	6800      	ldr	r0, [r0, #0]
 800f50a:	f7ff ffc9 	bl	800f4a0 <_vsniprintf_r>
 800f50e:	b003      	add	sp, #12
 800f510:	f85d fb04 	ldr.w	pc, [sp], #4
 800f514:	20000134 	.word	0x20000134

0800f518 <memset>:
 800f518:	4402      	add	r2, r0
 800f51a:	4603      	mov	r3, r0
 800f51c:	4293      	cmp	r3, r2
 800f51e:	d100      	bne.n	800f522 <memset+0xa>
 800f520:	4770      	bx	lr
 800f522:	f803 1b01 	strb.w	r1, [r3], #1
 800f526:	e7f9      	b.n	800f51c <memset+0x4>

0800f528 <strncat>:
 800f528:	b530      	push	{r4, r5, lr}
 800f52a:	4604      	mov	r4, r0
 800f52c:	7825      	ldrb	r5, [r4, #0]
 800f52e:	4623      	mov	r3, r4
 800f530:	3401      	adds	r4, #1
 800f532:	2d00      	cmp	r5, #0
 800f534:	d1fa      	bne.n	800f52c <strncat+0x4>
 800f536:	3a01      	subs	r2, #1
 800f538:	d304      	bcc.n	800f544 <strncat+0x1c>
 800f53a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f53e:	f803 4b01 	strb.w	r4, [r3], #1
 800f542:	b904      	cbnz	r4, 800f546 <strncat+0x1e>
 800f544:	bd30      	pop	{r4, r5, pc}
 800f546:	2a00      	cmp	r2, #0
 800f548:	d1f5      	bne.n	800f536 <strncat+0xe>
 800f54a:	701a      	strb	r2, [r3, #0]
 800f54c:	e7f3      	b.n	800f536 <strncat+0xe>

0800f54e <strncpy>:
 800f54e:	b510      	push	{r4, lr}
 800f550:	3901      	subs	r1, #1
 800f552:	4603      	mov	r3, r0
 800f554:	b132      	cbz	r2, 800f564 <strncpy+0x16>
 800f556:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f55a:	f803 4b01 	strb.w	r4, [r3], #1
 800f55e:	3a01      	subs	r2, #1
 800f560:	2c00      	cmp	r4, #0
 800f562:	d1f7      	bne.n	800f554 <strncpy+0x6>
 800f564:	441a      	add	r2, r3
 800f566:	2100      	movs	r1, #0
 800f568:	4293      	cmp	r3, r2
 800f56a:	d100      	bne.n	800f56e <strncpy+0x20>
 800f56c:	bd10      	pop	{r4, pc}
 800f56e:	f803 1b01 	strb.w	r1, [r3], #1
 800f572:	e7f9      	b.n	800f568 <strncpy+0x1a>

0800f574 <_raise_r>:
 800f574:	291f      	cmp	r1, #31
 800f576:	b538      	push	{r3, r4, r5, lr}
 800f578:	4605      	mov	r5, r0
 800f57a:	460c      	mov	r4, r1
 800f57c:	d904      	bls.n	800f588 <_raise_r+0x14>
 800f57e:	2316      	movs	r3, #22
 800f580:	6003      	str	r3, [r0, #0]
 800f582:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f586:	bd38      	pop	{r3, r4, r5, pc}
 800f588:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f58a:	b112      	cbz	r2, 800f592 <_raise_r+0x1e>
 800f58c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f590:	b94b      	cbnz	r3, 800f5a6 <_raise_r+0x32>
 800f592:	4628      	mov	r0, r5
 800f594:	f000 f830 	bl	800f5f8 <_getpid_r>
 800f598:	4622      	mov	r2, r4
 800f59a:	4601      	mov	r1, r0
 800f59c:	4628      	mov	r0, r5
 800f59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f5a2:	f000 b817 	b.w	800f5d4 <_kill_r>
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d00a      	beq.n	800f5c0 <_raise_r+0x4c>
 800f5aa:	1c59      	adds	r1, r3, #1
 800f5ac:	d103      	bne.n	800f5b6 <_raise_r+0x42>
 800f5ae:	2316      	movs	r3, #22
 800f5b0:	6003      	str	r3, [r0, #0]
 800f5b2:	2001      	movs	r0, #1
 800f5b4:	e7e7      	b.n	800f586 <_raise_r+0x12>
 800f5b6:	2100      	movs	r1, #0
 800f5b8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f5bc:	4620      	mov	r0, r4
 800f5be:	4798      	blx	r3
 800f5c0:	2000      	movs	r0, #0
 800f5c2:	e7e0      	b.n	800f586 <_raise_r+0x12>

0800f5c4 <raise>:
 800f5c4:	4b02      	ldr	r3, [pc, #8]	@ (800f5d0 <raise+0xc>)
 800f5c6:	4601      	mov	r1, r0
 800f5c8:	6818      	ldr	r0, [r3, #0]
 800f5ca:	f7ff bfd3 	b.w	800f574 <_raise_r>
 800f5ce:	bf00      	nop
 800f5d0:	20000134 	.word	0x20000134

0800f5d4 <_kill_r>:
 800f5d4:	b538      	push	{r3, r4, r5, lr}
 800f5d6:	4d07      	ldr	r5, [pc, #28]	@ (800f5f4 <_kill_r+0x20>)
 800f5d8:	2300      	movs	r3, #0
 800f5da:	4604      	mov	r4, r0
 800f5dc:	4608      	mov	r0, r1
 800f5de:	4611      	mov	r1, r2
 800f5e0:	602b      	str	r3, [r5, #0]
 800f5e2:	f7f2 fcef 	bl	8001fc4 <_kill>
 800f5e6:	1c43      	adds	r3, r0, #1
 800f5e8:	d102      	bne.n	800f5f0 <_kill_r+0x1c>
 800f5ea:	682b      	ldr	r3, [r5, #0]
 800f5ec:	b103      	cbz	r3, 800f5f0 <_kill_r+0x1c>
 800f5ee:	6023      	str	r3, [r4, #0]
 800f5f0:	bd38      	pop	{r3, r4, r5, pc}
 800f5f2:	bf00      	nop
 800f5f4:	20001950 	.word	0x20001950

0800f5f8 <_getpid_r>:
 800f5f8:	f7f2 bcdc 	b.w	8001fb4 <_getpid>

0800f5fc <_sbrk_r>:
 800f5fc:	b538      	push	{r3, r4, r5, lr}
 800f5fe:	4d06      	ldr	r5, [pc, #24]	@ (800f618 <_sbrk_r+0x1c>)
 800f600:	2300      	movs	r3, #0
 800f602:	4604      	mov	r4, r0
 800f604:	4608      	mov	r0, r1
 800f606:	602b      	str	r3, [r5, #0]
 800f608:	f7f2 fcf8 	bl	8001ffc <_sbrk>
 800f60c:	1c43      	adds	r3, r0, #1
 800f60e:	d102      	bne.n	800f616 <_sbrk_r+0x1a>
 800f610:	682b      	ldr	r3, [r5, #0]
 800f612:	b103      	cbz	r3, 800f616 <_sbrk_r+0x1a>
 800f614:	6023      	str	r3, [r4, #0]
 800f616:	bd38      	pop	{r3, r4, r5, pc}
 800f618:	20001950 	.word	0x20001950

0800f61c <__errno>:
 800f61c:	4b01      	ldr	r3, [pc, #4]	@ (800f624 <__errno+0x8>)
 800f61e:	6818      	ldr	r0, [r3, #0]
 800f620:	4770      	bx	lr
 800f622:	bf00      	nop
 800f624:	20000134 	.word	0x20000134

0800f628 <__libc_init_array>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4d0d      	ldr	r5, [pc, #52]	@ (800f660 <__libc_init_array+0x38>)
 800f62c:	4c0d      	ldr	r4, [pc, #52]	@ (800f664 <__libc_init_array+0x3c>)
 800f62e:	1b64      	subs	r4, r4, r5
 800f630:	10a4      	asrs	r4, r4, #2
 800f632:	2600      	movs	r6, #0
 800f634:	42a6      	cmp	r6, r4
 800f636:	d109      	bne.n	800f64c <__libc_init_array+0x24>
 800f638:	4d0b      	ldr	r5, [pc, #44]	@ (800f668 <__libc_init_array+0x40>)
 800f63a:	4c0c      	ldr	r4, [pc, #48]	@ (800f66c <__libc_init_array+0x44>)
 800f63c:	f000 fba6 	bl	800fd8c <_init>
 800f640:	1b64      	subs	r4, r4, r5
 800f642:	10a4      	asrs	r4, r4, #2
 800f644:	2600      	movs	r6, #0
 800f646:	42a6      	cmp	r6, r4
 800f648:	d105      	bne.n	800f656 <__libc_init_array+0x2e>
 800f64a:	bd70      	pop	{r4, r5, r6, pc}
 800f64c:	f855 3b04 	ldr.w	r3, [r5], #4
 800f650:	4798      	blx	r3
 800f652:	3601      	adds	r6, #1
 800f654:	e7ee      	b.n	800f634 <__libc_init_array+0xc>
 800f656:	f855 3b04 	ldr.w	r3, [r5], #4
 800f65a:	4798      	blx	r3
 800f65c:	3601      	adds	r6, #1
 800f65e:	e7f2      	b.n	800f646 <__libc_init_array+0x1e>
 800f660:	08017980 	.word	0x08017980
 800f664:	08017980 	.word	0x08017980
 800f668:	08017980 	.word	0x08017980
 800f66c:	0801798c 	.word	0x0801798c

0800f670 <__retarget_lock_acquire_recursive>:
 800f670:	4770      	bx	lr

0800f672 <__retarget_lock_release_recursive>:
 800f672:	4770      	bx	lr

0800f674 <memcpy>:
 800f674:	440a      	add	r2, r1
 800f676:	4291      	cmp	r1, r2
 800f678:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800f67c:	d100      	bne.n	800f680 <memcpy+0xc>
 800f67e:	4770      	bx	lr
 800f680:	b510      	push	{r4, lr}
 800f682:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f686:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f68a:	4291      	cmp	r1, r2
 800f68c:	d1f9      	bne.n	800f682 <memcpy+0xe>
 800f68e:	bd10      	pop	{r4, pc}

0800f690 <_free_r>:
 800f690:	b538      	push	{r3, r4, r5, lr}
 800f692:	4605      	mov	r5, r0
 800f694:	2900      	cmp	r1, #0
 800f696:	d041      	beq.n	800f71c <_free_r+0x8c>
 800f698:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f69c:	1f0c      	subs	r4, r1, #4
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	bfb8      	it	lt
 800f6a2:	18e4      	addlt	r4, r4, r3
 800f6a4:	f7ff feae 	bl	800f404 <__malloc_lock>
 800f6a8:	4a1d      	ldr	r2, [pc, #116]	@ (800f720 <_free_r+0x90>)
 800f6aa:	6813      	ldr	r3, [r2, #0]
 800f6ac:	b933      	cbnz	r3, 800f6bc <_free_r+0x2c>
 800f6ae:	6063      	str	r3, [r4, #4]
 800f6b0:	6014      	str	r4, [r2, #0]
 800f6b2:	4628      	mov	r0, r5
 800f6b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f6b8:	f7ff beaa 	b.w	800f410 <__malloc_unlock>
 800f6bc:	42a3      	cmp	r3, r4
 800f6be:	d908      	bls.n	800f6d2 <_free_r+0x42>
 800f6c0:	6820      	ldr	r0, [r4, #0]
 800f6c2:	1821      	adds	r1, r4, r0
 800f6c4:	428b      	cmp	r3, r1
 800f6c6:	bf01      	itttt	eq
 800f6c8:	6819      	ldreq	r1, [r3, #0]
 800f6ca:	685b      	ldreq	r3, [r3, #4]
 800f6cc:	1809      	addeq	r1, r1, r0
 800f6ce:	6021      	streq	r1, [r4, #0]
 800f6d0:	e7ed      	b.n	800f6ae <_free_r+0x1e>
 800f6d2:	461a      	mov	r2, r3
 800f6d4:	685b      	ldr	r3, [r3, #4]
 800f6d6:	b10b      	cbz	r3, 800f6dc <_free_r+0x4c>
 800f6d8:	42a3      	cmp	r3, r4
 800f6da:	d9fa      	bls.n	800f6d2 <_free_r+0x42>
 800f6dc:	6811      	ldr	r1, [r2, #0]
 800f6de:	1850      	adds	r0, r2, r1
 800f6e0:	42a0      	cmp	r0, r4
 800f6e2:	d10b      	bne.n	800f6fc <_free_r+0x6c>
 800f6e4:	6820      	ldr	r0, [r4, #0]
 800f6e6:	4401      	add	r1, r0
 800f6e8:	1850      	adds	r0, r2, r1
 800f6ea:	4283      	cmp	r3, r0
 800f6ec:	6011      	str	r1, [r2, #0]
 800f6ee:	d1e0      	bne.n	800f6b2 <_free_r+0x22>
 800f6f0:	6818      	ldr	r0, [r3, #0]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	6053      	str	r3, [r2, #4]
 800f6f6:	4408      	add	r0, r1
 800f6f8:	6010      	str	r0, [r2, #0]
 800f6fa:	e7da      	b.n	800f6b2 <_free_r+0x22>
 800f6fc:	d902      	bls.n	800f704 <_free_r+0x74>
 800f6fe:	230c      	movs	r3, #12
 800f700:	602b      	str	r3, [r5, #0]
 800f702:	e7d6      	b.n	800f6b2 <_free_r+0x22>
 800f704:	6820      	ldr	r0, [r4, #0]
 800f706:	1821      	adds	r1, r4, r0
 800f708:	428b      	cmp	r3, r1
 800f70a:	bf04      	itt	eq
 800f70c:	6819      	ldreq	r1, [r3, #0]
 800f70e:	685b      	ldreq	r3, [r3, #4]
 800f710:	6063      	str	r3, [r4, #4]
 800f712:	bf04      	itt	eq
 800f714:	1809      	addeq	r1, r1, r0
 800f716:	6021      	streq	r1, [r4, #0]
 800f718:	6054      	str	r4, [r2, #4]
 800f71a:	e7ca      	b.n	800f6b2 <_free_r+0x22>
 800f71c:	bd38      	pop	{r3, r4, r5, pc}
 800f71e:	bf00      	nop
 800f720:	20001814 	.word	0x20001814

0800f724 <__ssputs_r>:
 800f724:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f728:	688e      	ldr	r6, [r1, #8]
 800f72a:	461f      	mov	r7, r3
 800f72c:	42be      	cmp	r6, r7
 800f72e:	680b      	ldr	r3, [r1, #0]
 800f730:	4682      	mov	sl, r0
 800f732:	460c      	mov	r4, r1
 800f734:	4690      	mov	r8, r2
 800f736:	d82d      	bhi.n	800f794 <__ssputs_r+0x70>
 800f738:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f73c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f740:	d026      	beq.n	800f790 <__ssputs_r+0x6c>
 800f742:	6965      	ldr	r5, [r4, #20]
 800f744:	6909      	ldr	r1, [r1, #16]
 800f746:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f74a:	eba3 0901 	sub.w	r9, r3, r1
 800f74e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f752:	1c7b      	adds	r3, r7, #1
 800f754:	444b      	add	r3, r9
 800f756:	106d      	asrs	r5, r5, #1
 800f758:	429d      	cmp	r5, r3
 800f75a:	bf38      	it	cc
 800f75c:	461d      	movcc	r5, r3
 800f75e:	0553      	lsls	r3, r2, #21
 800f760:	d527      	bpl.n	800f7b2 <__ssputs_r+0x8e>
 800f762:	4629      	mov	r1, r5
 800f764:	f7ff fdce 	bl	800f304 <_malloc_r>
 800f768:	4606      	mov	r6, r0
 800f76a:	b360      	cbz	r0, 800f7c6 <__ssputs_r+0xa2>
 800f76c:	6921      	ldr	r1, [r4, #16]
 800f76e:	464a      	mov	r2, r9
 800f770:	f7ff ff80 	bl	800f674 <memcpy>
 800f774:	89a3      	ldrh	r3, [r4, #12]
 800f776:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f77a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f77e:	81a3      	strh	r3, [r4, #12]
 800f780:	6126      	str	r6, [r4, #16]
 800f782:	6165      	str	r5, [r4, #20]
 800f784:	444e      	add	r6, r9
 800f786:	eba5 0509 	sub.w	r5, r5, r9
 800f78a:	6026      	str	r6, [r4, #0]
 800f78c:	60a5      	str	r5, [r4, #8]
 800f78e:	463e      	mov	r6, r7
 800f790:	42be      	cmp	r6, r7
 800f792:	d900      	bls.n	800f796 <__ssputs_r+0x72>
 800f794:	463e      	mov	r6, r7
 800f796:	6820      	ldr	r0, [r4, #0]
 800f798:	4632      	mov	r2, r6
 800f79a:	4641      	mov	r1, r8
 800f79c:	f000 faa6 	bl	800fcec <memmove>
 800f7a0:	68a3      	ldr	r3, [r4, #8]
 800f7a2:	1b9b      	subs	r3, r3, r6
 800f7a4:	60a3      	str	r3, [r4, #8]
 800f7a6:	6823      	ldr	r3, [r4, #0]
 800f7a8:	4433      	add	r3, r6
 800f7aa:	6023      	str	r3, [r4, #0]
 800f7ac:	2000      	movs	r0, #0
 800f7ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f7b2:	462a      	mov	r2, r5
 800f7b4:	f000 fab4 	bl	800fd20 <_realloc_r>
 800f7b8:	4606      	mov	r6, r0
 800f7ba:	2800      	cmp	r0, #0
 800f7bc:	d1e0      	bne.n	800f780 <__ssputs_r+0x5c>
 800f7be:	6921      	ldr	r1, [r4, #16]
 800f7c0:	4650      	mov	r0, sl
 800f7c2:	f7ff ff65 	bl	800f690 <_free_r>
 800f7c6:	230c      	movs	r3, #12
 800f7c8:	f8ca 3000 	str.w	r3, [sl]
 800f7cc:	89a3      	ldrh	r3, [r4, #12]
 800f7ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f7d8:	e7e9      	b.n	800f7ae <__ssputs_r+0x8a>
	...

0800f7dc <_svfiprintf_r>:
 800f7dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f7e0:	4698      	mov	r8, r3
 800f7e2:	898b      	ldrh	r3, [r1, #12]
 800f7e4:	061b      	lsls	r3, r3, #24
 800f7e6:	b09d      	sub	sp, #116	@ 0x74
 800f7e8:	4607      	mov	r7, r0
 800f7ea:	460d      	mov	r5, r1
 800f7ec:	4614      	mov	r4, r2
 800f7ee:	d510      	bpl.n	800f812 <_svfiprintf_r+0x36>
 800f7f0:	690b      	ldr	r3, [r1, #16]
 800f7f2:	b973      	cbnz	r3, 800f812 <_svfiprintf_r+0x36>
 800f7f4:	2140      	movs	r1, #64	@ 0x40
 800f7f6:	f7ff fd85 	bl	800f304 <_malloc_r>
 800f7fa:	6028      	str	r0, [r5, #0]
 800f7fc:	6128      	str	r0, [r5, #16]
 800f7fe:	b930      	cbnz	r0, 800f80e <_svfiprintf_r+0x32>
 800f800:	230c      	movs	r3, #12
 800f802:	603b      	str	r3, [r7, #0]
 800f804:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f808:	b01d      	add	sp, #116	@ 0x74
 800f80a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f80e:	2340      	movs	r3, #64	@ 0x40
 800f810:	616b      	str	r3, [r5, #20]
 800f812:	2300      	movs	r3, #0
 800f814:	9309      	str	r3, [sp, #36]	@ 0x24
 800f816:	2320      	movs	r3, #32
 800f818:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f81c:	f8cd 800c 	str.w	r8, [sp, #12]
 800f820:	2330      	movs	r3, #48	@ 0x30
 800f822:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f9c0 <_svfiprintf_r+0x1e4>
 800f826:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f82a:	f04f 0901 	mov.w	r9, #1
 800f82e:	4623      	mov	r3, r4
 800f830:	469a      	mov	sl, r3
 800f832:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f836:	b10a      	cbz	r2, 800f83c <_svfiprintf_r+0x60>
 800f838:	2a25      	cmp	r2, #37	@ 0x25
 800f83a:	d1f9      	bne.n	800f830 <_svfiprintf_r+0x54>
 800f83c:	ebba 0b04 	subs.w	fp, sl, r4
 800f840:	d00b      	beq.n	800f85a <_svfiprintf_r+0x7e>
 800f842:	465b      	mov	r3, fp
 800f844:	4622      	mov	r2, r4
 800f846:	4629      	mov	r1, r5
 800f848:	4638      	mov	r0, r7
 800f84a:	f7ff ff6b 	bl	800f724 <__ssputs_r>
 800f84e:	3001      	adds	r0, #1
 800f850:	f000 80a7 	beq.w	800f9a2 <_svfiprintf_r+0x1c6>
 800f854:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f856:	445a      	add	r2, fp
 800f858:	9209      	str	r2, [sp, #36]	@ 0x24
 800f85a:	f89a 3000 	ldrb.w	r3, [sl]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	f000 809f 	beq.w	800f9a2 <_svfiprintf_r+0x1c6>
 800f864:	2300      	movs	r3, #0
 800f866:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f86a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f86e:	f10a 0a01 	add.w	sl, sl, #1
 800f872:	9304      	str	r3, [sp, #16]
 800f874:	9307      	str	r3, [sp, #28]
 800f876:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f87a:	931a      	str	r3, [sp, #104]	@ 0x68
 800f87c:	4654      	mov	r4, sl
 800f87e:	2205      	movs	r2, #5
 800f880:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f884:	484e      	ldr	r0, [pc, #312]	@ (800f9c0 <_svfiprintf_r+0x1e4>)
 800f886:	f7f0 fcb3 	bl	80001f0 <memchr>
 800f88a:	9a04      	ldr	r2, [sp, #16]
 800f88c:	b9d8      	cbnz	r0, 800f8c6 <_svfiprintf_r+0xea>
 800f88e:	06d0      	lsls	r0, r2, #27
 800f890:	bf44      	itt	mi
 800f892:	2320      	movmi	r3, #32
 800f894:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f898:	0711      	lsls	r1, r2, #28
 800f89a:	bf44      	itt	mi
 800f89c:	232b      	movmi	r3, #43	@ 0x2b
 800f89e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f8a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f8a6:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8a8:	d015      	beq.n	800f8d6 <_svfiprintf_r+0xfa>
 800f8aa:	9a07      	ldr	r2, [sp, #28]
 800f8ac:	4654      	mov	r4, sl
 800f8ae:	2000      	movs	r0, #0
 800f8b0:	f04f 0c0a 	mov.w	ip, #10
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f8ba:	3b30      	subs	r3, #48	@ 0x30
 800f8bc:	2b09      	cmp	r3, #9
 800f8be:	d94b      	bls.n	800f958 <_svfiprintf_r+0x17c>
 800f8c0:	b1b0      	cbz	r0, 800f8f0 <_svfiprintf_r+0x114>
 800f8c2:	9207      	str	r2, [sp, #28]
 800f8c4:	e014      	b.n	800f8f0 <_svfiprintf_r+0x114>
 800f8c6:	eba0 0308 	sub.w	r3, r0, r8
 800f8ca:	fa09 f303 	lsl.w	r3, r9, r3
 800f8ce:	4313      	orrs	r3, r2
 800f8d0:	9304      	str	r3, [sp, #16]
 800f8d2:	46a2      	mov	sl, r4
 800f8d4:	e7d2      	b.n	800f87c <_svfiprintf_r+0xa0>
 800f8d6:	9b03      	ldr	r3, [sp, #12]
 800f8d8:	1d19      	adds	r1, r3, #4
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	9103      	str	r1, [sp, #12]
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	bfbb      	ittet	lt
 800f8e2:	425b      	neglt	r3, r3
 800f8e4:	f042 0202 	orrlt.w	r2, r2, #2
 800f8e8:	9307      	strge	r3, [sp, #28]
 800f8ea:	9307      	strlt	r3, [sp, #28]
 800f8ec:	bfb8      	it	lt
 800f8ee:	9204      	strlt	r2, [sp, #16]
 800f8f0:	7823      	ldrb	r3, [r4, #0]
 800f8f2:	2b2e      	cmp	r3, #46	@ 0x2e
 800f8f4:	d10a      	bne.n	800f90c <_svfiprintf_r+0x130>
 800f8f6:	7863      	ldrb	r3, [r4, #1]
 800f8f8:	2b2a      	cmp	r3, #42	@ 0x2a
 800f8fa:	d132      	bne.n	800f962 <_svfiprintf_r+0x186>
 800f8fc:	9b03      	ldr	r3, [sp, #12]
 800f8fe:	1d1a      	adds	r2, r3, #4
 800f900:	681b      	ldr	r3, [r3, #0]
 800f902:	9203      	str	r2, [sp, #12]
 800f904:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f908:	3402      	adds	r4, #2
 800f90a:	9305      	str	r3, [sp, #20]
 800f90c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f9d0 <_svfiprintf_r+0x1f4>
 800f910:	7821      	ldrb	r1, [r4, #0]
 800f912:	2203      	movs	r2, #3
 800f914:	4650      	mov	r0, sl
 800f916:	f7f0 fc6b 	bl	80001f0 <memchr>
 800f91a:	b138      	cbz	r0, 800f92c <_svfiprintf_r+0x150>
 800f91c:	9b04      	ldr	r3, [sp, #16]
 800f91e:	eba0 000a 	sub.w	r0, r0, sl
 800f922:	2240      	movs	r2, #64	@ 0x40
 800f924:	4082      	lsls	r2, r0
 800f926:	4313      	orrs	r3, r2
 800f928:	3401      	adds	r4, #1
 800f92a:	9304      	str	r3, [sp, #16]
 800f92c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f930:	4824      	ldr	r0, [pc, #144]	@ (800f9c4 <_svfiprintf_r+0x1e8>)
 800f932:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f936:	2206      	movs	r2, #6
 800f938:	f7f0 fc5a 	bl	80001f0 <memchr>
 800f93c:	2800      	cmp	r0, #0
 800f93e:	d036      	beq.n	800f9ae <_svfiprintf_r+0x1d2>
 800f940:	4b21      	ldr	r3, [pc, #132]	@ (800f9c8 <_svfiprintf_r+0x1ec>)
 800f942:	bb1b      	cbnz	r3, 800f98c <_svfiprintf_r+0x1b0>
 800f944:	9b03      	ldr	r3, [sp, #12]
 800f946:	3307      	adds	r3, #7
 800f948:	f023 0307 	bic.w	r3, r3, #7
 800f94c:	3308      	adds	r3, #8
 800f94e:	9303      	str	r3, [sp, #12]
 800f950:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f952:	4433      	add	r3, r6
 800f954:	9309      	str	r3, [sp, #36]	@ 0x24
 800f956:	e76a      	b.n	800f82e <_svfiprintf_r+0x52>
 800f958:	fb0c 3202 	mla	r2, ip, r2, r3
 800f95c:	460c      	mov	r4, r1
 800f95e:	2001      	movs	r0, #1
 800f960:	e7a8      	b.n	800f8b4 <_svfiprintf_r+0xd8>
 800f962:	2300      	movs	r3, #0
 800f964:	3401      	adds	r4, #1
 800f966:	9305      	str	r3, [sp, #20]
 800f968:	4619      	mov	r1, r3
 800f96a:	f04f 0c0a 	mov.w	ip, #10
 800f96e:	4620      	mov	r0, r4
 800f970:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f974:	3a30      	subs	r2, #48	@ 0x30
 800f976:	2a09      	cmp	r2, #9
 800f978:	d903      	bls.n	800f982 <_svfiprintf_r+0x1a6>
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d0c6      	beq.n	800f90c <_svfiprintf_r+0x130>
 800f97e:	9105      	str	r1, [sp, #20]
 800f980:	e7c4      	b.n	800f90c <_svfiprintf_r+0x130>
 800f982:	fb0c 2101 	mla	r1, ip, r1, r2
 800f986:	4604      	mov	r4, r0
 800f988:	2301      	movs	r3, #1
 800f98a:	e7f0      	b.n	800f96e <_svfiprintf_r+0x192>
 800f98c:	ab03      	add	r3, sp, #12
 800f98e:	9300      	str	r3, [sp, #0]
 800f990:	462a      	mov	r2, r5
 800f992:	4b0e      	ldr	r3, [pc, #56]	@ (800f9cc <_svfiprintf_r+0x1f0>)
 800f994:	a904      	add	r1, sp, #16
 800f996:	4638      	mov	r0, r7
 800f998:	f3af 8000 	nop.w
 800f99c:	1c42      	adds	r2, r0, #1
 800f99e:	4606      	mov	r6, r0
 800f9a0:	d1d6      	bne.n	800f950 <_svfiprintf_r+0x174>
 800f9a2:	89ab      	ldrh	r3, [r5, #12]
 800f9a4:	065b      	lsls	r3, r3, #25
 800f9a6:	f53f af2d 	bmi.w	800f804 <_svfiprintf_r+0x28>
 800f9aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f9ac:	e72c      	b.n	800f808 <_svfiprintf_r+0x2c>
 800f9ae:	ab03      	add	r3, sp, #12
 800f9b0:	9300      	str	r3, [sp, #0]
 800f9b2:	462a      	mov	r2, r5
 800f9b4:	4b05      	ldr	r3, [pc, #20]	@ (800f9cc <_svfiprintf_r+0x1f0>)
 800f9b6:	a904      	add	r1, sp, #16
 800f9b8:	4638      	mov	r0, r7
 800f9ba:	f000 f879 	bl	800fab0 <_printf_i>
 800f9be:	e7ed      	b.n	800f99c <_svfiprintf_r+0x1c0>
 800f9c0:	08017945 	.word	0x08017945
 800f9c4:	0801794f 	.word	0x0801794f
 800f9c8:	00000000 	.word	0x00000000
 800f9cc:	0800f725 	.word	0x0800f725
 800f9d0:	0801794b 	.word	0x0801794b

0800f9d4 <_printf_common>:
 800f9d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f9d8:	4616      	mov	r6, r2
 800f9da:	4698      	mov	r8, r3
 800f9dc:	688a      	ldr	r2, [r1, #8]
 800f9de:	690b      	ldr	r3, [r1, #16]
 800f9e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f9e4:	4293      	cmp	r3, r2
 800f9e6:	bfb8      	it	lt
 800f9e8:	4613      	movlt	r3, r2
 800f9ea:	6033      	str	r3, [r6, #0]
 800f9ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f9f0:	4607      	mov	r7, r0
 800f9f2:	460c      	mov	r4, r1
 800f9f4:	b10a      	cbz	r2, 800f9fa <_printf_common+0x26>
 800f9f6:	3301      	adds	r3, #1
 800f9f8:	6033      	str	r3, [r6, #0]
 800f9fa:	6823      	ldr	r3, [r4, #0]
 800f9fc:	0699      	lsls	r1, r3, #26
 800f9fe:	bf42      	ittt	mi
 800fa00:	6833      	ldrmi	r3, [r6, #0]
 800fa02:	3302      	addmi	r3, #2
 800fa04:	6033      	strmi	r3, [r6, #0]
 800fa06:	6825      	ldr	r5, [r4, #0]
 800fa08:	f015 0506 	ands.w	r5, r5, #6
 800fa0c:	d106      	bne.n	800fa1c <_printf_common+0x48>
 800fa0e:	f104 0a19 	add.w	sl, r4, #25
 800fa12:	68e3      	ldr	r3, [r4, #12]
 800fa14:	6832      	ldr	r2, [r6, #0]
 800fa16:	1a9b      	subs	r3, r3, r2
 800fa18:	42ab      	cmp	r3, r5
 800fa1a:	dc26      	bgt.n	800fa6a <_printf_common+0x96>
 800fa1c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800fa20:	6822      	ldr	r2, [r4, #0]
 800fa22:	3b00      	subs	r3, #0
 800fa24:	bf18      	it	ne
 800fa26:	2301      	movne	r3, #1
 800fa28:	0692      	lsls	r2, r2, #26
 800fa2a:	d42b      	bmi.n	800fa84 <_printf_common+0xb0>
 800fa2c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800fa30:	4641      	mov	r1, r8
 800fa32:	4638      	mov	r0, r7
 800fa34:	47c8      	blx	r9
 800fa36:	3001      	adds	r0, #1
 800fa38:	d01e      	beq.n	800fa78 <_printf_common+0xa4>
 800fa3a:	6823      	ldr	r3, [r4, #0]
 800fa3c:	6922      	ldr	r2, [r4, #16]
 800fa3e:	f003 0306 	and.w	r3, r3, #6
 800fa42:	2b04      	cmp	r3, #4
 800fa44:	bf02      	ittt	eq
 800fa46:	68e5      	ldreq	r5, [r4, #12]
 800fa48:	6833      	ldreq	r3, [r6, #0]
 800fa4a:	1aed      	subeq	r5, r5, r3
 800fa4c:	68a3      	ldr	r3, [r4, #8]
 800fa4e:	bf0c      	ite	eq
 800fa50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800fa54:	2500      	movne	r5, #0
 800fa56:	4293      	cmp	r3, r2
 800fa58:	bfc4      	itt	gt
 800fa5a:	1a9b      	subgt	r3, r3, r2
 800fa5c:	18ed      	addgt	r5, r5, r3
 800fa5e:	2600      	movs	r6, #0
 800fa60:	341a      	adds	r4, #26
 800fa62:	42b5      	cmp	r5, r6
 800fa64:	d11a      	bne.n	800fa9c <_printf_common+0xc8>
 800fa66:	2000      	movs	r0, #0
 800fa68:	e008      	b.n	800fa7c <_printf_common+0xa8>
 800fa6a:	2301      	movs	r3, #1
 800fa6c:	4652      	mov	r2, sl
 800fa6e:	4641      	mov	r1, r8
 800fa70:	4638      	mov	r0, r7
 800fa72:	47c8      	blx	r9
 800fa74:	3001      	adds	r0, #1
 800fa76:	d103      	bne.n	800fa80 <_printf_common+0xac>
 800fa78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fa7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa80:	3501      	adds	r5, #1
 800fa82:	e7c6      	b.n	800fa12 <_printf_common+0x3e>
 800fa84:	18e1      	adds	r1, r4, r3
 800fa86:	1c5a      	adds	r2, r3, #1
 800fa88:	2030      	movs	r0, #48	@ 0x30
 800fa8a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800fa8e:	4422      	add	r2, r4
 800fa90:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800fa94:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800fa98:	3302      	adds	r3, #2
 800fa9a:	e7c7      	b.n	800fa2c <_printf_common+0x58>
 800fa9c:	2301      	movs	r3, #1
 800fa9e:	4622      	mov	r2, r4
 800faa0:	4641      	mov	r1, r8
 800faa2:	4638      	mov	r0, r7
 800faa4:	47c8      	blx	r9
 800faa6:	3001      	adds	r0, #1
 800faa8:	d0e6      	beq.n	800fa78 <_printf_common+0xa4>
 800faaa:	3601      	adds	r6, #1
 800faac:	e7d9      	b.n	800fa62 <_printf_common+0x8e>
	...

0800fab0 <_printf_i>:
 800fab0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800fab4:	7e0f      	ldrb	r7, [r1, #24]
 800fab6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800fab8:	2f78      	cmp	r7, #120	@ 0x78
 800faba:	4691      	mov	r9, r2
 800fabc:	4680      	mov	r8, r0
 800fabe:	460c      	mov	r4, r1
 800fac0:	469a      	mov	sl, r3
 800fac2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800fac6:	d807      	bhi.n	800fad8 <_printf_i+0x28>
 800fac8:	2f62      	cmp	r7, #98	@ 0x62
 800faca:	d80a      	bhi.n	800fae2 <_printf_i+0x32>
 800facc:	2f00      	cmp	r7, #0
 800face:	f000 80d1 	beq.w	800fc74 <_printf_i+0x1c4>
 800fad2:	2f58      	cmp	r7, #88	@ 0x58
 800fad4:	f000 80b8 	beq.w	800fc48 <_printf_i+0x198>
 800fad8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fadc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800fae0:	e03a      	b.n	800fb58 <_printf_i+0xa8>
 800fae2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800fae6:	2b15      	cmp	r3, #21
 800fae8:	d8f6      	bhi.n	800fad8 <_printf_i+0x28>
 800faea:	a101      	add	r1, pc, #4	@ (adr r1, 800faf0 <_printf_i+0x40>)
 800faec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800faf0:	0800fb49 	.word	0x0800fb49
 800faf4:	0800fb5d 	.word	0x0800fb5d
 800faf8:	0800fad9 	.word	0x0800fad9
 800fafc:	0800fad9 	.word	0x0800fad9
 800fb00:	0800fad9 	.word	0x0800fad9
 800fb04:	0800fad9 	.word	0x0800fad9
 800fb08:	0800fb5d 	.word	0x0800fb5d
 800fb0c:	0800fad9 	.word	0x0800fad9
 800fb10:	0800fad9 	.word	0x0800fad9
 800fb14:	0800fad9 	.word	0x0800fad9
 800fb18:	0800fad9 	.word	0x0800fad9
 800fb1c:	0800fc5b 	.word	0x0800fc5b
 800fb20:	0800fb87 	.word	0x0800fb87
 800fb24:	0800fc15 	.word	0x0800fc15
 800fb28:	0800fad9 	.word	0x0800fad9
 800fb2c:	0800fad9 	.word	0x0800fad9
 800fb30:	0800fc7d 	.word	0x0800fc7d
 800fb34:	0800fad9 	.word	0x0800fad9
 800fb38:	0800fb87 	.word	0x0800fb87
 800fb3c:	0800fad9 	.word	0x0800fad9
 800fb40:	0800fad9 	.word	0x0800fad9
 800fb44:	0800fc1d 	.word	0x0800fc1d
 800fb48:	6833      	ldr	r3, [r6, #0]
 800fb4a:	1d1a      	adds	r2, r3, #4
 800fb4c:	681b      	ldr	r3, [r3, #0]
 800fb4e:	6032      	str	r2, [r6, #0]
 800fb50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800fb54:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800fb58:	2301      	movs	r3, #1
 800fb5a:	e09c      	b.n	800fc96 <_printf_i+0x1e6>
 800fb5c:	6833      	ldr	r3, [r6, #0]
 800fb5e:	6820      	ldr	r0, [r4, #0]
 800fb60:	1d19      	adds	r1, r3, #4
 800fb62:	6031      	str	r1, [r6, #0]
 800fb64:	0606      	lsls	r6, r0, #24
 800fb66:	d501      	bpl.n	800fb6c <_printf_i+0xbc>
 800fb68:	681d      	ldr	r5, [r3, #0]
 800fb6a:	e003      	b.n	800fb74 <_printf_i+0xc4>
 800fb6c:	0645      	lsls	r5, r0, #25
 800fb6e:	d5fb      	bpl.n	800fb68 <_printf_i+0xb8>
 800fb70:	f9b3 5000 	ldrsh.w	r5, [r3]
 800fb74:	2d00      	cmp	r5, #0
 800fb76:	da03      	bge.n	800fb80 <_printf_i+0xd0>
 800fb78:	232d      	movs	r3, #45	@ 0x2d
 800fb7a:	426d      	negs	r5, r5
 800fb7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fb80:	4858      	ldr	r0, [pc, #352]	@ (800fce4 <_printf_i+0x234>)
 800fb82:	230a      	movs	r3, #10
 800fb84:	e011      	b.n	800fbaa <_printf_i+0xfa>
 800fb86:	6821      	ldr	r1, [r4, #0]
 800fb88:	6833      	ldr	r3, [r6, #0]
 800fb8a:	0608      	lsls	r0, r1, #24
 800fb8c:	f853 5b04 	ldr.w	r5, [r3], #4
 800fb90:	d402      	bmi.n	800fb98 <_printf_i+0xe8>
 800fb92:	0649      	lsls	r1, r1, #25
 800fb94:	bf48      	it	mi
 800fb96:	b2ad      	uxthmi	r5, r5
 800fb98:	2f6f      	cmp	r7, #111	@ 0x6f
 800fb9a:	4852      	ldr	r0, [pc, #328]	@ (800fce4 <_printf_i+0x234>)
 800fb9c:	6033      	str	r3, [r6, #0]
 800fb9e:	bf14      	ite	ne
 800fba0:	230a      	movne	r3, #10
 800fba2:	2308      	moveq	r3, #8
 800fba4:	2100      	movs	r1, #0
 800fba6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800fbaa:	6866      	ldr	r6, [r4, #4]
 800fbac:	60a6      	str	r6, [r4, #8]
 800fbae:	2e00      	cmp	r6, #0
 800fbb0:	db05      	blt.n	800fbbe <_printf_i+0x10e>
 800fbb2:	6821      	ldr	r1, [r4, #0]
 800fbb4:	432e      	orrs	r6, r5
 800fbb6:	f021 0104 	bic.w	r1, r1, #4
 800fbba:	6021      	str	r1, [r4, #0]
 800fbbc:	d04b      	beq.n	800fc56 <_printf_i+0x1a6>
 800fbbe:	4616      	mov	r6, r2
 800fbc0:	fbb5 f1f3 	udiv	r1, r5, r3
 800fbc4:	fb03 5711 	mls	r7, r3, r1, r5
 800fbc8:	5dc7      	ldrb	r7, [r0, r7]
 800fbca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800fbce:	462f      	mov	r7, r5
 800fbd0:	42bb      	cmp	r3, r7
 800fbd2:	460d      	mov	r5, r1
 800fbd4:	d9f4      	bls.n	800fbc0 <_printf_i+0x110>
 800fbd6:	2b08      	cmp	r3, #8
 800fbd8:	d10b      	bne.n	800fbf2 <_printf_i+0x142>
 800fbda:	6823      	ldr	r3, [r4, #0]
 800fbdc:	07df      	lsls	r7, r3, #31
 800fbde:	d508      	bpl.n	800fbf2 <_printf_i+0x142>
 800fbe0:	6923      	ldr	r3, [r4, #16]
 800fbe2:	6861      	ldr	r1, [r4, #4]
 800fbe4:	4299      	cmp	r1, r3
 800fbe6:	bfde      	ittt	le
 800fbe8:	2330      	movle	r3, #48	@ 0x30
 800fbea:	f806 3c01 	strble.w	r3, [r6, #-1]
 800fbee:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800fbf2:	1b92      	subs	r2, r2, r6
 800fbf4:	6122      	str	r2, [r4, #16]
 800fbf6:	f8cd a000 	str.w	sl, [sp]
 800fbfa:	464b      	mov	r3, r9
 800fbfc:	aa03      	add	r2, sp, #12
 800fbfe:	4621      	mov	r1, r4
 800fc00:	4640      	mov	r0, r8
 800fc02:	f7ff fee7 	bl	800f9d4 <_printf_common>
 800fc06:	3001      	adds	r0, #1
 800fc08:	d14a      	bne.n	800fca0 <_printf_i+0x1f0>
 800fc0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fc0e:	b004      	add	sp, #16
 800fc10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fc14:	6823      	ldr	r3, [r4, #0]
 800fc16:	f043 0320 	orr.w	r3, r3, #32
 800fc1a:	6023      	str	r3, [r4, #0]
 800fc1c:	4832      	ldr	r0, [pc, #200]	@ (800fce8 <_printf_i+0x238>)
 800fc1e:	2778      	movs	r7, #120	@ 0x78
 800fc20:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800fc24:	6823      	ldr	r3, [r4, #0]
 800fc26:	6831      	ldr	r1, [r6, #0]
 800fc28:	061f      	lsls	r7, r3, #24
 800fc2a:	f851 5b04 	ldr.w	r5, [r1], #4
 800fc2e:	d402      	bmi.n	800fc36 <_printf_i+0x186>
 800fc30:	065f      	lsls	r7, r3, #25
 800fc32:	bf48      	it	mi
 800fc34:	b2ad      	uxthmi	r5, r5
 800fc36:	6031      	str	r1, [r6, #0]
 800fc38:	07d9      	lsls	r1, r3, #31
 800fc3a:	bf44      	itt	mi
 800fc3c:	f043 0320 	orrmi.w	r3, r3, #32
 800fc40:	6023      	strmi	r3, [r4, #0]
 800fc42:	b11d      	cbz	r5, 800fc4c <_printf_i+0x19c>
 800fc44:	2310      	movs	r3, #16
 800fc46:	e7ad      	b.n	800fba4 <_printf_i+0xf4>
 800fc48:	4826      	ldr	r0, [pc, #152]	@ (800fce4 <_printf_i+0x234>)
 800fc4a:	e7e9      	b.n	800fc20 <_printf_i+0x170>
 800fc4c:	6823      	ldr	r3, [r4, #0]
 800fc4e:	f023 0320 	bic.w	r3, r3, #32
 800fc52:	6023      	str	r3, [r4, #0]
 800fc54:	e7f6      	b.n	800fc44 <_printf_i+0x194>
 800fc56:	4616      	mov	r6, r2
 800fc58:	e7bd      	b.n	800fbd6 <_printf_i+0x126>
 800fc5a:	6833      	ldr	r3, [r6, #0]
 800fc5c:	6825      	ldr	r5, [r4, #0]
 800fc5e:	6961      	ldr	r1, [r4, #20]
 800fc60:	1d18      	adds	r0, r3, #4
 800fc62:	6030      	str	r0, [r6, #0]
 800fc64:	062e      	lsls	r6, r5, #24
 800fc66:	681b      	ldr	r3, [r3, #0]
 800fc68:	d501      	bpl.n	800fc6e <_printf_i+0x1be>
 800fc6a:	6019      	str	r1, [r3, #0]
 800fc6c:	e002      	b.n	800fc74 <_printf_i+0x1c4>
 800fc6e:	0668      	lsls	r0, r5, #25
 800fc70:	d5fb      	bpl.n	800fc6a <_printf_i+0x1ba>
 800fc72:	8019      	strh	r1, [r3, #0]
 800fc74:	2300      	movs	r3, #0
 800fc76:	6123      	str	r3, [r4, #16]
 800fc78:	4616      	mov	r6, r2
 800fc7a:	e7bc      	b.n	800fbf6 <_printf_i+0x146>
 800fc7c:	6833      	ldr	r3, [r6, #0]
 800fc7e:	1d1a      	adds	r2, r3, #4
 800fc80:	6032      	str	r2, [r6, #0]
 800fc82:	681e      	ldr	r6, [r3, #0]
 800fc84:	6862      	ldr	r2, [r4, #4]
 800fc86:	2100      	movs	r1, #0
 800fc88:	4630      	mov	r0, r6
 800fc8a:	f7f0 fab1 	bl	80001f0 <memchr>
 800fc8e:	b108      	cbz	r0, 800fc94 <_printf_i+0x1e4>
 800fc90:	1b80      	subs	r0, r0, r6
 800fc92:	6060      	str	r0, [r4, #4]
 800fc94:	6863      	ldr	r3, [r4, #4]
 800fc96:	6123      	str	r3, [r4, #16]
 800fc98:	2300      	movs	r3, #0
 800fc9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800fc9e:	e7aa      	b.n	800fbf6 <_printf_i+0x146>
 800fca0:	6923      	ldr	r3, [r4, #16]
 800fca2:	4632      	mov	r2, r6
 800fca4:	4649      	mov	r1, r9
 800fca6:	4640      	mov	r0, r8
 800fca8:	47d0      	blx	sl
 800fcaa:	3001      	adds	r0, #1
 800fcac:	d0ad      	beq.n	800fc0a <_printf_i+0x15a>
 800fcae:	6823      	ldr	r3, [r4, #0]
 800fcb0:	079b      	lsls	r3, r3, #30
 800fcb2:	d413      	bmi.n	800fcdc <_printf_i+0x22c>
 800fcb4:	68e0      	ldr	r0, [r4, #12]
 800fcb6:	9b03      	ldr	r3, [sp, #12]
 800fcb8:	4298      	cmp	r0, r3
 800fcba:	bfb8      	it	lt
 800fcbc:	4618      	movlt	r0, r3
 800fcbe:	e7a6      	b.n	800fc0e <_printf_i+0x15e>
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	4632      	mov	r2, r6
 800fcc4:	4649      	mov	r1, r9
 800fcc6:	4640      	mov	r0, r8
 800fcc8:	47d0      	blx	sl
 800fcca:	3001      	adds	r0, #1
 800fccc:	d09d      	beq.n	800fc0a <_printf_i+0x15a>
 800fcce:	3501      	adds	r5, #1
 800fcd0:	68e3      	ldr	r3, [r4, #12]
 800fcd2:	9903      	ldr	r1, [sp, #12]
 800fcd4:	1a5b      	subs	r3, r3, r1
 800fcd6:	42ab      	cmp	r3, r5
 800fcd8:	dcf2      	bgt.n	800fcc0 <_printf_i+0x210>
 800fcda:	e7eb      	b.n	800fcb4 <_printf_i+0x204>
 800fcdc:	2500      	movs	r5, #0
 800fcde:	f104 0619 	add.w	r6, r4, #25
 800fce2:	e7f5      	b.n	800fcd0 <_printf_i+0x220>
 800fce4:	08017956 	.word	0x08017956
 800fce8:	08017967 	.word	0x08017967

0800fcec <memmove>:
 800fcec:	4288      	cmp	r0, r1
 800fcee:	b510      	push	{r4, lr}
 800fcf0:	eb01 0402 	add.w	r4, r1, r2
 800fcf4:	d902      	bls.n	800fcfc <memmove+0x10>
 800fcf6:	4284      	cmp	r4, r0
 800fcf8:	4623      	mov	r3, r4
 800fcfa:	d807      	bhi.n	800fd0c <memmove+0x20>
 800fcfc:	1e43      	subs	r3, r0, #1
 800fcfe:	42a1      	cmp	r1, r4
 800fd00:	d008      	beq.n	800fd14 <memmove+0x28>
 800fd02:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fd06:	f803 2f01 	strb.w	r2, [r3, #1]!
 800fd0a:	e7f8      	b.n	800fcfe <memmove+0x12>
 800fd0c:	4402      	add	r2, r0
 800fd0e:	4601      	mov	r1, r0
 800fd10:	428a      	cmp	r2, r1
 800fd12:	d100      	bne.n	800fd16 <memmove+0x2a>
 800fd14:	bd10      	pop	{r4, pc}
 800fd16:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800fd1a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800fd1e:	e7f7      	b.n	800fd10 <memmove+0x24>

0800fd20 <_realloc_r>:
 800fd20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fd24:	4607      	mov	r7, r0
 800fd26:	4614      	mov	r4, r2
 800fd28:	460d      	mov	r5, r1
 800fd2a:	b921      	cbnz	r1, 800fd36 <_realloc_r+0x16>
 800fd2c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fd30:	4611      	mov	r1, r2
 800fd32:	f7ff bae7 	b.w	800f304 <_malloc_r>
 800fd36:	b92a      	cbnz	r2, 800fd44 <_realloc_r+0x24>
 800fd38:	f7ff fcaa 	bl	800f690 <_free_r>
 800fd3c:	4625      	mov	r5, r4
 800fd3e:	4628      	mov	r0, r5
 800fd40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fd44:	f000 f81a 	bl	800fd7c <_malloc_usable_size_r>
 800fd48:	4284      	cmp	r4, r0
 800fd4a:	4606      	mov	r6, r0
 800fd4c:	d802      	bhi.n	800fd54 <_realloc_r+0x34>
 800fd4e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800fd52:	d8f4      	bhi.n	800fd3e <_realloc_r+0x1e>
 800fd54:	4621      	mov	r1, r4
 800fd56:	4638      	mov	r0, r7
 800fd58:	f7ff fad4 	bl	800f304 <_malloc_r>
 800fd5c:	4680      	mov	r8, r0
 800fd5e:	b908      	cbnz	r0, 800fd64 <_realloc_r+0x44>
 800fd60:	4645      	mov	r5, r8
 800fd62:	e7ec      	b.n	800fd3e <_realloc_r+0x1e>
 800fd64:	42b4      	cmp	r4, r6
 800fd66:	4622      	mov	r2, r4
 800fd68:	4629      	mov	r1, r5
 800fd6a:	bf28      	it	cs
 800fd6c:	4632      	movcs	r2, r6
 800fd6e:	f7ff fc81 	bl	800f674 <memcpy>
 800fd72:	4629      	mov	r1, r5
 800fd74:	4638      	mov	r0, r7
 800fd76:	f7ff fc8b 	bl	800f690 <_free_r>
 800fd7a:	e7f1      	b.n	800fd60 <_realloc_r+0x40>

0800fd7c <_malloc_usable_size_r>:
 800fd7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd80:	1f18      	subs	r0, r3, #4
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	bfbc      	itt	lt
 800fd86:	580b      	ldrlt	r3, [r1, r0]
 800fd88:	18c0      	addlt	r0, r0, r3
 800fd8a:	4770      	bx	lr

0800fd8c <_init>:
 800fd8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd8e:	bf00      	nop
 800fd90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd92:	bc08      	pop	{r3}
 800fd94:	469e      	mov	lr, r3
 800fd96:	4770      	bx	lr

0800fd98 <_fini>:
 800fd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd9a:	bf00      	nop
 800fd9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd9e:	bc08      	pop	{r3}
 800fda0:	469e      	mov	lr, r3
 800fda2:	4770      	bx	lr
